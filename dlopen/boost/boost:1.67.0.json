{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/thread/doc/changes.qbk": "[/\n  (C) Copyright 2007-11 Anthony Williams.\n  (C) Copyright 2011-17 Vicente J. Botet Escriba.\n  Distributed under the Boost Software License, Version 1.0.\n  (See accompanying file LICENSE_1_0.txt or copy at\n  http://www.boost.org/LICENSE_1_0.txt).\n]\n\n[section:changes History]\n\n[heading Version 4.8.0 - boost 1.66]\n\n[*Know Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/3926 #3926] thread_specific_ptr + dlopen library causes a SIGSEGV.\n\n* [@http://svn.boost.org/trac/boost/ticket/10964 #10964] future<future<T>>::unwrap().then() Deadlocks\n\n\nPlease take a look at [@https://svn.boost.org/trac/boost/query?status=assigned&status=new&status=reopened&component=thread&type=!Feature+Requests&col=id&col=summary&order=id thread Know Bugs] to see the current state.\n\nPlease take a look at [@http://www.boost.org/development/tests/master/developer/thread.html thread master regression test] to see the last regression test snapshot.\n\n[*Fixed Bugs:]\n \t\n\n* [@http://svn.boost.org/trac/boost/ticket/12323 #12323] windows - boost/thread/win32/mfc_thread_init.hpp has wrong signature for _pRawDllMainOrig\n* [@http://svn.boost.org/trac/boost/ticket/12730 #12730] windows - static threads library is incompatible with MSVC 2017 RC\n* [@http://svn.boost.org/trac/boost/ticket/12976 #12976] Boost Thread Executors documentation mistakes\n* [@http://svn.boost.org/trac/boost/ticket/12949 #12949] using sleep_for in a thread context without including boost/thread/thread.hpp yields incorrect behaviour when BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC is defined\n* [@http://svn.boost.org/trac/boost/ticket/13019 #13019] ABI compatibility for BOOST_THREAD_PROVIDES_INTERRUPTIONS incomplete\n* [@http://svn.boost.org/trac/boost/ticket/13069 #13069] Boost unit test \"sync_pq_multi_thread_p_lib.exe\" hung in thread library\n* [@http://svn.boost.org/trac/boost/ticket/13163 #13163] boost::detail::heap_new does not have a variadic variant\n* [@http://svn.boost.org/trac/boost/ticket/13226 #13226] getpagesize() is deprecated since 199506L\n\n* [@https://github.com/boostorg/thread/issues/132 #132] VS 2017.4 Preview deadlocks on Test 10964\n* [@https://github.com/boostorg/thread/issues/133 #133] windows - Spurious timing test failures on windows\n* [@https://github.com/boostorg/thread/issues/134 #134] VS 2017.4 Preview deadlock in sync_pq_multi_thread_p_lib.exe\n* [@https://github.com/boostorg/thread/issues/135 #135] VS 2017.4 Preview test_scheduled_tp_p.exe deadlock\n* [@https://github.com/boostorg/thread/issues/136 #136] VS 2017.4 Preview test_scheduler_p.exe deadlock\n* [@https://github.com/boostorg/thread/issues/137 #137] VS 2017.4 Preview executor_ex.exe deadlock\n* [@https://github.com/boostorg/thread/issues/143 #143] Failures on msvc-12.0\n* [@https://github.com/boostorg/thread/issues/145 #145] Clang build error with BOOST_THREAD_ATTRIBUTE_MAY_ALIAS\n\n[*New Experimental Features:]\n\n* [@https://github.com/boostorg/thread/issues/116 #116] [Proposal] Add APIs for deferred set_value/exception\n\n[heading Version 4.7.5 - boost 1.65.1]\n\n[*Fixed Bugs:]\n\n* [@https://github.com/boostorg/thread/issues/130 #130] windows: Bug in boost::condition_variable on Windows\n\n[heading Version 4.7.4 - boost 1.65]\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/6787 #6787] boost::thread::sleep() hangs if system time is rolled back\n* [@http://svn.boost.org/trac/boost/ticket/12519 #12519] boost::thread::try_join_for does not return after timeout\n* [@http://svn.boost.org/trac/boost/ticket/12874 #12874] future<> extension constructor must be under BOOST_THREAD_PROVIDES_FUTURE_UNWRAP\n* [@http://svn.boost.org/trac/boost/ticket/12888 #12888] Linking with boost thread does not work on mingw/gcc 4.4\n* [@http://svn.boost.org/trac/boost/ticket/12958 #12958] sync_bounded_queue::wait_pull_front( lve ) might throw\n* [@http://svn.boost.org/trac/boost/ticket/13077 #13077] Linking to static 64bit libboost_thread fails DLL initialization\n* [@http://svn.boost.org/trac/boost/ticket/13155 #13155] log doesn't build on a system with pthreads\n\n* [@https://github.com/boostorg/thread/issues/121 #121] on_tls_prepare is broken under VS2017\n\n[heading Version 4.7.3 - boost 1.64]\n\n[*Fixed Bugs:]\n\n* [@https://github.com/boostorg/thread/issues/113 #113] Add a Thread template on all the scoped thread and thread guard classes\n* [@https://github.com/boostorg/thread/issues/117 #117] loop_executor should block on it's work_queue instead of polling\n* [@https://github.com/boostorg/thread/issues/119 #119] basic_condition_variable::relocker::~relocker can throw an exception\n\n[heading Version 4.7.2 - boost 1.63]\n\n[*Fixed Bugs:]\n\n* fix boost::synchronized_value<>::load() \n* fix relational operators of boost::synchronized_value<> \n* fix compile failed with boost::user_scheduler\n* Fix minor possibility of loosing the notify\n\n[heading Version 4.7.1 - boost 1.62]\n\n[*Know Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/3926 #3926] thread_specific_ptr + dlopen library causes a SIGSEGV.\n\nPlease define BOOST_THREAD_PATCH to apply the patch that could unfortunately results is a regression as described in [@http://svn.boost.org/trac/boost/ticket/12049 #12049].\n\nPlease take a look at [@https://svn.boost.org/trac/boost/query?status=assigned&status=new&status=reopened&component=thread&type=!Feature+Requests&col=id&col=summary&order=id thread Know Bugs] to see the current state.\n\nPlease take a look at [@http://www.boost.org/development/tests/master/developer/thread.html thread master regression test] to see the last regression test snapshot.\n\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/11097 #11097] \ttest_scheduled_tp - ThreadSanitizer: heap-use-after-free\n* [@http://svn.boost.org/trac/boost/ticket/11951 #11951] \tMemory leak in boost::when_all\n* [@http://svn.boost.org/trac/boost/ticket/12102 #12102] condition_variable_fwd.hpp fails to compile when BOOST_THREAD_PROVIDES_INTERRUPTIONS is disabled\n* [@http://svn.boost.org/trac/boost/ticket/12120 #12120] Performance improvement in thread/barrier.hpp\n* [@http://svn.boost.org/trac/boost/ticket/12146 #12146] make_exceptional_future is not mentioned in the docs\n* [@http://svn.boost.org/trac/boost/ticket/12202 #12202] shared_lock should be in shared_mutex header\n* [@http://svn.boost.org/trac/boost/ticket/12220 #12220] \tMemory leak in future::then()\n* [@http://svn.boost.org/trac/boost/ticket/12293 #12293] boost::future::then lambda called before future is ready.\n* [@http://svn.boost.org/trac/boost/ticket/12350 #12350] shared_mutex (pthreads) unlocked too early in unlock_shared()\n* [@http://svn.boost.org/trac/boost/ticket/12371 #12371] boost thread/future.hpp fails to build\n\n\nand several PR\n\n* #88 fix typos in boost::upgrade_lock\n* #89 fix a bug in upgrade_to_unique_lock<>::operator=()\n* #90 fix a bug in try_lock_wrapper<>::operator=()\n* #91 Add shared_lock_guard to the included lock types\n* #92 Fixed compilation with MSVC-8.  \n* #93 Fix variable shadowing warnings (Clang)\n* #94 fix bugs in boost::barrier\n* #95 fix a mistake in boost::completion_latch\n* #96 rename async_func.hpp to invoker.hpp.\n* #97 fix a mistake in sync_timed_queue<>::pull_until()\n\n[heading Version 4.7.0 - boost 1.61]\n\n[*Know Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/3926 #3926] thread_specific_ptr + dlopen library causes a SIGSEGV.\n\nPlease define BOOST_THREAD_PATCH to apply the patch that could unfortunately results is a regression as described in [@http://svn.boost.org/trac/boost/ticket/12049 #12049].\n\n* [@http://svn.boost.org/trac/boost/ticket/4833 #4833] MinGW/test_tss_lib: Support of automatic tss cleanup for native threading API not available\n* [@http://svn.boost.org/trac/boost/ticket/8600 #8600] wait_for_any hangs, if called with multiple copies of shared_future referencing same task\n* [@http://svn.boost.org/trac/boost/ticket/9118 #9118] Seg fault on thread join when llvm and libc++ are used\n\nPlease take a look at [@https://svn.boost.org/trac/boost/query?status=assigned&status=new&status=reopened&component=thread&type=!Feature+Requests&col=id&col=summary&order=id thread Know Bugs] to see the current state.\n\nPlease take a look at [@http://www.boost.org/development/tests/master/developer/thread.html thread trunk regression test] to see the last regression test snapshot.\n\n[*New Experimental Features:]\n\n* [@http://svn.boost.org/trac/boost/ticket/11772 #11772] Add a launch::sync policy\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/11494 #11494] boost::this_thread::yield() is marked as deprecated in the synopsis\n* [@http://svn.boost.org/trac/boost/ticket/11562 #11562] (condition_variable_any::wait_until + recursive_mutex + steady_clock) timer expires after computer time is set forward on Ubuntu 64-bit\n* [@http://svn.boost.org/trac/boost/ticket/12013 #12013] F_pass and FArgs_pass tests segfault\n* [@http://svn.boost.org/trac/boost/ticket/12036 #12036] boost::physical_concurrency always returns 0 if BOOST_USE_WINAPI_VERSION is not defined\n\n[heading Version 4.6.0 - boost 1.60]\n\n[*Know Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/4833 #4833] MinGW/test_tss_lib: Support of automatic tss cleanup for native threading API not available\n* [@http://svn.boost.org/trac/boost/ticket/8600 #8600] wait_for_any hangs, if called with multiple copies of shared_future referencing same task\n* [@http://svn.boost.org/trac/boost/ticket/9118 #9118] Seg fault on thread join when llvm and libc++ are used\n* [@http://svn.boost.org/trac/boost/ticket/10942 #10942] Boost.Thread fails to build on Cygwin.\n\nPlease take a look at [@https://svn.boost.org/trac/boost/query?status=assigned&status=new&status=reopened&component=thread&type=!Feature+Requests&col=id&col=summary&order=id thread Know Bugs] to see the current state.\n\nPlease take a look at [@http://www.boost.org/development/tests/master/developer/thread.html thread trunk regression test] to see the last regression test snapshot.\n\n[*New Experimental Features:]\n\n\n* [@http://svn.boost.org/trac/boost/ticket/11231 #11231] Allow to set continuation future's destructor behavior to non-blocking\n* [@http://svn.boost.org/trac/boost/ticket/11424 #11424] Provide shared_timed_mutex as an alternative name for shared_mutex and deprecate the use of shared_mutex as a timed mutex\n* [@http://svn.boost.org/trac/boost/ticket/11734 #11734] future::then(Cont) should be able to execute the continuation on undetermined thread\n* [@http://svn.boost.org/trac/boost/ticket/11736 #11736] Allow to use launch::executor on future::then(launch::executor, cont)\n* [@http://svn.boost.org/trac/boost/ticket/11737 #11737] Add a launch::inherit policy that can be used on ::then() to use the policy of the parent future\n\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/6377 #6377] Condition variable blocks when changing time\n* [@http://svn.boost.org/trac/boost/ticket/6787 #6787] boost::thread::sleep() hangs if system time is rolled back\n* [@http://svn.boost.org/trac/boost/ticket/7665 #7665] this_thread::sleep_for no longer uses steady_clock in thread\n* [@http://svn.boost.org/trac/boost/ticket/7720 #7720] exception lock_error while intensive locking/unlocking of mutex\n* [@http://svn.boost.org/trac/boost/ticket/9309 #9309] test_latch fails often on clang-darwin-tot11\n* [@http://svn.boost.org/trac/boost/ticket/10788 #10788] GetLogicalProcessor isn't available for Windows platform less or equals to 0x0502\n* [@http://svn.boost.org/trac/boost/ticket/11090 #11090] ex_future_unwrap- ThreadSanitizer: lock-order-inversion (potential deadlock)\n* [@http://svn.boost.org/trac/boost/ticket/11158 #11158] Pthread thread deadlock when faketime used\n* [@http://svn.boost.org/trac/boost/ticket/11174 #11174] boost::condition_variable::timed_wait with predicate unexpectedly wakes up while should wait infinite\n* [@http://svn.boost.org/trac/boost/ticket/11185 #11185] Incorrect URL redirection\n* [@http://svn.boost.org/trac/boost/ticket/11192 #11192] boost::future<>::then() with an executor doesn't compile when the callback returns a future\n* [@http://svn.boost.org/trac/boost/ticket/11250 #11250] future made from make_exceptional fails on assertion in destructor\n* [@http://svn.boost.org/trac/boost/ticket/11256 #11256] future<>::is_ready() == false in continuation function\n* [@http://svn.boost.org/trac/boost/ticket/11261 #11261] bad use of scoped threads in basic_thread_pool\n* [@http://svn.boost.org/trac/boost/ticket/11262 #11262] bad use of direct pointer in shared_state_nullary_task\n* [@http://svn.boost.org/trac/boost/ticket/11263 #11263] lock already locked lock\n* [@http://svn.boost.org/trac/boost/ticket/11266 #11266] boost::packaged_task has invalid variadic signature\n* [@http://svn.boost.org/trac/boost/ticket/11302 #11302] boost thread doesn't build with BOOST_THREAD_PATCH.\n* [@http://svn.boost.org/trac/boost/ticket/11322 #11322] sleep_for() nanoseconds overload will always return too early on windows\n* [@http://svn.boost.org/trac/boost/ticket/11329 #11329] using declarative for GetProcessHeap, .... fails\n* [@http://svn.boost.org/trac/boost/ticket/11368 #11368] boost thread's usage of CreateWaitableTimer wakes PC from sleep (doh)\n* [@http://svn.boost.org/trac/boost/ticket/11377 #11377] Boost condition variable always waits for system clock deadline\n* [@http://svn.boost.org/trac/boost/ticket/11435 #11435] gcc compiler warning in future.hpp\n* [@http://svn.boost.org/trac/boost/ticket/11555 #11555] devector.hpp assumes allocator_traits_type is always present\n* [@http://svn.boost.org/trac/boost/ticket/11562 #11562] (condition_variable_any::wait_until + recursive_mutex + steady_clock) timer expires after computer time is set forward on Ubuntu 64-bit\n* [@http://svn.boost.org/trac/boost/ticket/11672 #11672] Thread: Should use unique_ptr, not auto_ptr\n* [@http://svn.boost.org/trac/boost/ticket/11688 #11688] thread::try_join_until: Avoid busy wait if system clock changes\n* [@http://svn.boost.org/trac/boost/ticket/11672 #11716] ::then(f) should inherit the parent Executor\n* [@http://svn.boost.org/trac/boost/ticket/11795 #11795] Incorrect version specification for documentation of thread destructor\n* [@http://svn.boost.org/trac/boost/ticket/11796 #11796] Thread move assignment operator, does not detach previous thread data\n* [@http://svn.boost.org/trac/boost/ticket/11817 #11817] 'sync_queue_is_closed' was not declared in boost/thread/executors/thread_executor.hpp\n* [@http://svn.boost.org/trac/boost/ticket/11818 #11818] future.then will be blocked if promise is set after the invocation of then\n\n* [@http://svn.boost.org/trac/boost/ticket/12049 #12049] Assertion failure from detached threads during shutdown\n\n[heading Version 4.5.0 - boost 1.58]\n\n[*Know Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/3926 #3926] thread_specific_ptr + dlopen library causes a SIGSEGV.\n* [@http://svn.boost.org/trac/boost/ticket/4833 #4833] MinGW/test_tss_lib: Support of automatic tss cleanup for native threading API not available\n* [@http://svn.boost.org/trac/boost/ticket/8600 #8600] wait_for_any hangs, if called with multiple copies of shared_future referencing same task\n* [@http://svn.boost.org/trac/boost/ticket/9118 #9118] Seg fault on thread join when llvm and libc++ are used\n* [@http://svn.boost.org/trac/boost/ticket/9309 #9309] test_latch fails often on clang-darwin-tot11\n* [@http://svn.boost.org/trac/boost/ticket/9311 #9311] ex_lambda_future fails on msvc-11.0\n* [@http://svn.boost.org/trac/boost/ticket/10942 #10942] Boost.Thread fails to build on Cygwin.\n\n[/\n* [@http://svn.boost.org/trac/boost/ticket/7319 #7319] Take care of c++std-lib-32966 issue\n* [@http://svn.boost.org/trac/boost/ticket/10651 #10651] boost::thread leaks memory when using the MinGW compiler.\n* [@http://svn.boost.org/trac/boost/ticket/10685 #10685] mfc_thread_init.hpp does not compile.\n* [@http://svn.boost.org/trac/boost/ticket/10967 #10967] Timed wait points inconsistently convert relative to absolute waits.\n]\n\nPlease take a look at [@https://svn.boost.org/trac/boost/query?status=assigned&status=new&status=reopened&component=thread&type=!Feature+Requests&col=id&col=summary&order=id thread Know Bugs] to see the current state.\n\nPlease take a look at [@http://www.boost.org/development/tests/master/developer/thread.html thread trunk regression test] to see the last regression test snapshot.\n\n[*Sever limitations:]\n\nThere are some severe bugs that prevent the use of the library on concrete contexts, in particular:\n\n* on thread specific storage that prevent the library to be used with dynamic libraries ( [@http://svn.boost.org/trac/boost/ticket/3926 #3926], ),\n\n[*New Experimental Features:]\n\n* [@http://svn.boost.org/trac/boost/ticket/9600 #9600] Async: Add task_region\n* [@http://svn.boost.org/trac/boost/ticket/10611 #10611] Add emplace promise::set_value and emplace make_ready_future\n* [@http://svn.boost.org/trac/boost/ticket/10826 #10826] Add scheduled executor operations\n* [@http://svn.boost.org/trac/boost/ticket/11048 #11048] Add a serial_executor based on continuations\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/6787 #6787] boost::thread::sleep() hangs if system time is rolled back\n* [@http://svn.boost.org/trac/boost/ticket/10734 #10734] Submit method work differently on different executors, some throw exception and some silently ignore error (thread_executor and inline_executor)\n* [@http://svn.boost.org/trac/boost/ticket/10736 #10736] Task exceptions silently ignored. I think std::terminate solution from N3785 and std::thread is better choice and more consistent.\n* [@http://svn.boost.org/trac/boost/ticket/10737 #10737] In serial_executor we have infinite wait if task throw exception.\n* [@http://svn.boost.org/trac/boost/ticket/10822 #10822] Boost.Thread fails to compile on Android\n* [@http://svn.boost.org/trac/boost/ticket/10824 #10824] Boost.Thread 1.57 breaks Windows XP compatibility for SP2 and below.\n* [@http://svn.boost.org/trac/boost/ticket/10963 #10963] future<future<T>>::then Has No Implementation\n* [@http://svn.boost.org/trac/boost/ticket/10964 #10964] future<future<T>>::unwrap().then() Deadlocks\n* [@http://svn.boost.org/trac/boost/ticket/10968 #10968] The futures returned by async() and future::then() are not blocking.\n* [@http://svn.boost.org/trac/boost/ticket/10971 #10971] shared_future::get()/get_or() must be const\n* [@http://svn.boost.org/trac/boost/ticket/10972 #10972] shared_future::then() can be called multiple times.\n* [@http://svn.boost.org/trac/boost/ticket/10979 #10979] Support T& type deduction when the make_ready_future parameter is reference_wrapper<T>\n* [@http://svn.boost.org/trac/boost/ticket/10996 #10996] Thread physical_concurrency() is failing on Windows\n* [@http://svn.boost.org/trac/boost/ticket/11035 #11035] BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE not defined for Android\n* [@http://svn.boost.org/trac/boost/ticket/11053 #11053] The attached code results in a R6025 - pure virtual function call in run_thread_exit_callbacks\n\n\n[heading Version 4.4.0 - boost 1.57]\n\n[*Know Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/2442 #2442] Application statically linked with Boost.Thread crashes when Google Desktop is installed (Windows XP)\n* [@http://svn.boost.org/trac/boost/ticket/3926 #3926] thread_specific_ptr + dlopen library causes a SIGSEGV.\n* [@http://svn.boost.org/trac/boost/ticket/4833 #4833] MinGW/test_tss_lib: Support of automatic tss cleanup for native threading API not available\n* [@http://svn.boost.org/trac/boost/ticket/7319 #7319] Take care of c++std-lib-32966 issue\n* [@http://svn.boost.org/trac/boost/ticket/8600 #8600] wait_for_any hangs, if called with multiple copies of shared_future referencing same task\n* [@http://svn.boost.org/trac/boost/ticket/9118 #9118] Seg fault on thread join when llvm and libc++ are used\n* [@http://svn.boost.org/trac/boost/ticket/9309 #9309] test_latch fails often on clang-darwin-tot11\n* [@http://svn.boost.org/trac/boost/ticket/9310 #9310] test_4648_lib fails on clang-darwin-asan11\n* [@http://svn.boost.org/trac/boost/ticket/9311 #9311] ex_lambda_future fails on msvc-11.0\n* [@http://svn.boost.org/trac/boost/ticket/10537 #10537] Application crash on throw exception\n* [@http://svn.boost.org/trac/boost/ticket/10651 #10651] boost::thread leaks memory when using the MinGW compiler\n\n\nPlease take a look at [@https://svn.boost.org/trac/boost/query?status=assigned&status=new&status=reopened&component=thread&type=!Feature+Requests&col=id&col=summary&order=id thread Know Bugs] to see the current state.\n\nPlease take a look at [@http://www.boost.org/development/tests/master/developer/thread.html thread trunk regression test] to see the last snapshot.\n\n[*Sever limitations:]\n\nThere are some severe bugs that prevent the use of the library on concrete contexts, in particular:\n\n* on thread specific storage that prevent the library to be used with dynamic libraries,\n\n[*New Experimental Features:]\n\n* [@http://svn.boost.org/trac/boost/ticket/6227 #6227] Synchro: Use of variadic templates on Generic Locking Algorithms on compilers providing them\n* [@http://svn.boost.org/trac/boost/ticket/10298 #10298] Synchro: Added queue views.\n* [@http://svn.boost.org/trac/boost/ticket/10300 #10300] Async: Added generic_executor_ref.\n* [@http://svn.boost.org/trac/boost/ticket/10552 #10552] Add make_valid_future\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/6782 #6782] call_once uses incorrect barrier intrinsic on Visual Studio\n* [@http://svn.boost.org/trac/boost/ticket/6787 #6787] boost::thread::sleep() hangs if system time is rolled back\n* [@http://svn.boost.org/trac/boost/ticket/7665 #7665] this_thread::sleep_for no longer uses steady_clock in thread\n* [@http://svn.boost.org/trac/boost/ticket/9307 #9307] future::fallback_to assert with ERRORRRRR boost: mutex lock failed in pthread_mutex_lock: Invalid argument\n* [@http://svn.boost.org/trac/boost/ticket/9308 #9308] future::async fails with terminate called throwing an exception when called with a lambda - clang-darwin-asan11\n* [@http://svn.boost.org/trac/boost/ticket/9310 #9310] test_4648_lib fails on clang-darwin-asan11\n* [@http://svn.boost.org/trac/boost/ticket/9425 #9425] Boost promise & future does not use supplied allocator for value storage\n* [@http://svn.boost.org/trac/boost/ticket/9558 #9558] future continuations unit test hangs in get()/pthread_cond_wait() on Mac 10.7/32-bit/x86/darwin-4.2.1\n* [@http://svn.boost.org/trac/boost/ticket/9787 #9787] [windows] Small duration value passed down to basic_timed_mutex::try_lock_until and condition_variable::wait_until can cause infinite or near infinite wait for win32\n* [@http://svn.boost.org/trac/boost/ticket/9880 #9880] [windows] boost::condition_variable.timed_wait() exception if system time < 1970\n* [@http://svn.boost.org/trac/boost/ticket/10159 #10159] GCC 4.4 error sorry, unimplemented\n* [@http://svn.boost.org/trac/boost/ticket/10196 #10196] thread_specific_ptr does not support void*\n* [@http://svn.boost.org/trac/boost/ticket/10296 #10296] Boost.Thread 1.56 rc1 does not compile on Mingw\n* [@http://svn.boost.org/trac/boost/ticket/10297 #10297] Boost.Thread 1.56 rc1 hangs when built with clang on armhf\n* [@http://svn.boost.org/trac/boost/ticket/10340 #10340] No boost::promise<T>::set_value(const T&) overload present in C++03 mode\n* [@http://svn.boost.org/trac/boost/ticket/10425 #10425] Missing documentation for when_all/when_any.\n* [@http://svn.boost.org/trac/boost/ticket/10426 #10426] Take in account the deferred futures in when_all.\n* [@http://svn.boost.org/trac/boost/ticket/10427 #10427] Take in account the deferred and ready futures in when_any.\n* [@http://svn.boost.org/trac/boost/ticket/10428 #10428] Adapt to new unique_ptr interface in Boost.Move\n* [@http://svn.boost.org/trac/boost/ticket/10465 #10465] Missing implementation of when_all/when_any when the result is a tuple.\n* [@http://svn.boost.org/trac/boost/ticket/10476 #10476] classes using BOOST_THREAD_MOVABLE_ONLY<T> dont satisfy is_copy_constructible<T>::value == false\n* [@http://svn.boost.org/trac/boost/ticket/10478 #10478] Data race in boost/thread/future.hpp\n* [@http://svn.boost.org/trac/boost/ticket/10529 #10529] The pthread/condition_variable_any constructor reports incorrect error code for pthread_cond_init\n* [@http://svn.boost.org/trac/boost/ticket/10563 #10563] shared_future<R>::then should be const\n\n\n[heading Version 4.3.0 - boost 1.56]\n\n[*Know Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/2442 #2442] Application statically linked with Boost.Thread crashes when Google Desktop is installed (Windows XP)\n* [@http://svn.boost.org/trac/boost/ticket/3926 #3926] thread_specific_ptr + dlopen library causes a SIGSEGV.\n* [@http://svn.boost.org/trac/boost/ticket/4833 #4833] MinGW/test_tss_lib: Support of automatic tss cleanup for native threading API not available\n* [@http://svn.boost.org/trac/boost/ticket/6782 #6782] call_once uses incorrect barrier intrinsic on Visual Studio\n* [@http://svn.boost.org/trac/boost/ticket/7319 #7319] Take care of c++std-lib-32966 issue\n* [@http://svn.boost.org/trac/boost/ticket/8600 #8600] wait_for_any hangs, if called with multiple copies of shared_future referencing same task\n* [@http://svn.boost.org/trac/boost/ticket/9307 #9307] future::fallback_to assert with ERRORRRRR boost: mutex lock failed in pthread_mutex_lock: Invalid argument\n* [@http://svn.boost.org/trac/boost/ticket/9308 #9308] future::async fails with terminate called throwing an exception when called with a lambda - clang-darwin-asan11\n* [@http://svn.boost.org/trac/boost/ticket/9310 #9310] test_4648_lib fails on clang-darwin-asan11\n* [@http://svn.boost.org/trac/boost/ticket/9311 #9311] ex_lambda_future fails on msvc-11.0\n\n* [@http://svn.boost.org/trac/boost/ticket/9425 #9425] Boost promise & future does not use supplied allocator for value storage\n* [@http://svn.boost.org/trac/boost/ticket/9558 #9558] future continuations unit test hangs in get()/pthread_cond_wait() on Mac 10.7/32-bit/x86/darwin-4.2.1\n\nPlease take a look at [@https://svn.boost.org/trac/boost/query?status=assigned&status=new&status=reopened&component=thread&type=!Feature+Requests&col=id&col=summary&order=id thread Know Bugs] to see the current state.\n\nPlease take a look at [@http://www.boost.org/development/tests/master/developer/thread.html thread trunk regression test] to see the last snapshot.\n\n\n[*Sever limitations:]\n\nThere are some severe bugs that prevent the use of the library on concrete contexts, in particular:\n\n* on thread specific storage that prevent the library to be used with dynamic libraries,\n* The experimental features of boost::future have some severe holes that make the program crash unexpectedly.\n\n[*New Experimental Features:]\n\n* [@http://svn.boost.org/trac/boost/ticket/7446 #7446] Async: Add when_any.\n* [@http://svn.boost.org/trac/boost/ticket/7447 #7447] Async: Add when_all.\n* [@http://svn.boost.org/trac/boost/ticket/7448 #7448] Async: Add async taking a scheduler parameter.\n* [@http://svn.boost.org/trac/boost/ticket/8274 #8274] Synchro: Add concurrent queue\n* [@http://svn.boost.org/trac/boost/ticket/8518 #8518] Synchro: Add a latch class.\n* [@http://svn.boost.org/trac/boost/ticket/8513 #8513] Async: Add a basic thread_pool executor.\n* [@http://svn.boost.org/trac/boost/ticket/8516 #8516] Async: Add future/shared_future::then taking a scheduler as parameter.\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/8070 #8070] prefer GetTickCount64 over GetTickCount\n* [@http://svn.boost.org/trac/boost/ticket/9333 #9333] ex_scoped_thread compile fails on msvc-12.0\n* [@http://svn.boost.org/trac/boost/ticket/9366 #9366] async(Executor, ...) fails to compile with msvc-10,11,12 \t\n* [@http://svn.boost.org/trac/boost/ticket/9402 #9402] test_excutor regression on msvc-10,11,12\n* [@http://svn.boost.org/trac/boost/ticket/9404 #9404] ex_make_future regression error\n* [@http://svn.boost.org/trac/boost/ticket/9471 #9471] Synchronization documentation nits\n* [@http://svn.boost.org/trac/boost/ticket/9535 #9535] Missing exception safety might result in crash\n* [@http://svn.boost.org/trac/boost/ticket/9618 #9618] try_join_for problem: program is not terminate.\n* [@http://svn.boost.org/trac/boost/ticket/9673 #9673] thread compilation with MingW/gcc on Windows gives errors\n* [@http://svn.boost.org/trac/boost/ticket/9708 #9708] boost::condition_variable::timed_wait unexpectedly wakes up while should wait infinite\n* [@http://svn.boost.org/trac/boost/ticket/9711 #9711] future continuation called twice\n\n[heading Version 4.2.0 - boost 1.55]\n\n[*Know Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/2442 #2442] Application statically linked with Boost.Thread crashes when Google Desktop is installed (Windows XP)\n* [@http://svn.boost.org/trac/boost/ticket/3926 #3926] thread_specific_ptr + dlopen library causes a SIGSEGV.\n* [@http://svn.boost.org/trac/boost/ticket/4833 #4833] MinGW/test_tss_lib: Support of automatic tss cleanup for native threading API not available\n* [@http://svn.boost.org/trac/boost/ticket/6782 #6782] call_once uses incorrect barrier intrinsic on Visual Studio\n* [@http://svn.boost.org/trac/boost/ticket/7319 #7319] Take care of c++std-lib-32966 issue\n* [@http://svn.boost.org/trac/boost/ticket/8600 #8600] wait_for_any hangs, if called with multiple copies of shared_future referencing same task\n* [@http://svn.boost.org/trac/boost/ticket/9307 #9307] future::fallback_to assert with ERRORRRRR boost: mutex lock failed in pthread_mutex_lock: Invalid argument\n* [@http://svn.boost.org/trac/boost/ticket/9308 #9308] future::async fails with terminate called throwing an exception when called with a lambda - clang-darwin-asan11\n* [@http://svn.boost.org/trac/boost/ticket/9311 #9311] ex_lambda_future fails on msvc-11.0\n* [@http://svn.boost.org/trac/boost/ticket/9310 #9310] test_4648_lib fails on clang-darwin-asan11\n\nPlease take a look at [@https://svn.boost.org/trac/boost/query?status=assigned&status=new&status=reopened&component=thread&type=!Feature+Requests&col=id&col=summary&order=id thread trunk regression test] to see the current state.\n\n[*Sever limitations:]\n\nThere are some severe bugs that prevent the use of the library on concrete contexts, in particular:\n\n* on thread specific storage that prevent the library to be used with dynamic libraries,\n* The experimental features of boost::future have some severe holes that make the program crash unexpectedly.\n\n[*New Features:]\n\n* [@http://svn.boost.org/trac/boost/ticket/8519 #8519] Synchro: Update class barrier with a completion function.\n\n* [@http://svn.boost.org/trac/boost/ticket/8515 #8515] Async: Add shared_future::then.\n* [@http://svn.boost.org/trac/boost/ticket/8519 #8519] Synchro: Update class barrier with a completion function\n* [@http://svn.boost.org/trac/boost/ticket/8615 #8615] Async: Replace make_future/make_shared_future by make_ready_future.\n* [@http://svn.boost.org/trac/boost/ticket/8627 #8627] Async: Add future<>::unwrap and unwrapping constructor.\n* [@http://svn.boost.org/trac/boost/ticket/8677 #8677] Async: Add future<>::get_or.\n* [@http://svn.boost.org/trac/boost/ticket/8678 #8678] Async: Add future<>::fallback_to.\n* [@http://svn.boost.org/trac/boost/ticket/8891 #8891] upgrade_to_unique_lock: missing mutex() function.\n* [@http://svn.boost.org/trac/boost/ticket/8955 #8955] Request for more efficient way to get exception_ptr from future.\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/7461 #7461] detail::win32::ReleaseSemaphore may be called with count_to_release equal to 0\n* [@http://svn.boost.org/trac/boost/ticket/8070 #8070] prefer GetTickCount64 over GetTickCount\n* [@http://svn.boost.org/trac/boost/ticket/8768 #8768] win32 condition_variable::wait_until infinite wait in rare cases.\n* [@http://svn.boost.org/trac/boost/ticket/8817 #8817] Boost Thread Windows CE _createthreadex handling breaks mingw w64.\n* [@http://svn.boost.org/trac/boost/ticket/8943 #8943] Failed to compile code using boost::call_once with Intel C++ Composer XE 2013 on Windows.\n* [@http://svn.boost.org/trac/boost/ticket/8931 #8931] Typos in external_locking reference.\n* [@http://svn.boost.org/trac/boost/ticket/9029 #9029] Misprint in documentation.\n* [@http://svn.boost.org/trac/boost/ticket/9037 #9037] gcc -Wshadow gives warnings in condition_variable{,_fwd}.hpp.\n* [@http://svn.boost.org/trac/boost/ticket/9041 #9041] Boost.Thread DSO's may need to link with Boost.Atomic.\n* [@http://svn.boost.org/trac/boost/ticket/9048 #9048] boost::scoped_thread useless ctor with variadic template arguments.\n* [@http://svn.boost.org/trac/boost/ticket/9079 #9079] Condition variable will wait forever for some timepoint values (Win).\n\n[heading Version 4.1.0 - boost 1.54]\n\n[*New Features:]\n\n* [@http://svn.boost.org/trac/boost/ticket/7285 #7285] C++11 compliance: Allow to pass movable arguments for call_once.\n* [@http://svn.boost.org/trac/boost/ticket/7445 #7445] Async: Add future<>.then\n* [@http://svn.boost.org/trac/boost/ticket/7449 #7449] Synchro: Add a synchronized value class\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/4878 #4878] MinGW 4.5.0 undefined reference to bool interruptible_wait(detail::win32::handle handle_to_wait_for,detail::t imeout target_time).\n* [@http://svn.boost.org/trac/boost/ticket/4882 #4882] Win32 shared_mutex does not handle timeouts correctly.\n* [@http://svn.boost.org/trac/boost/ticket/5752 #5752] boost::call_once() is unreliable on some platforms\n* [@http://svn.boost.org/trac/boost/ticket/6652 #6652] Boost.Thread shared_mutex.hpp:50:99: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]\n* [@http://svn.boost.org/trac/boost/ticket/6843 #6843] [Intel C++] Compile Errors with '#include <atomic>'\n* [@http://svn.boost.org/trac/boost/ticket/6966 #6966] future boost::future_category inconsistent dll linkage\n* [@http://svn.boost.org/trac/boost/ticket/7720 #7720] exception lock_error while intensive locking/unlocking of mutex\n* [@http://svn.boost.org/trac/boost/ticket/7755 #7755] Thread: deadlock with shared_mutex on Windows\n* [@http://svn.boost.org/trac/boost/ticket/7980 #7980] Build error: msvc-11.0 and BOOST_THREAD_DONT_USE_DATETIME\n* [@http://svn.boost.org/trac/boost/ticket/7982 #7982] pthread_delay_np() parm compile error on AIX\n* [@http://svn.boost.org/trac/boost/ticket/8027 #8027] thread library fails to compile with Visual Studio 2003\n* [@http://svn.boost.org/trac/boost/ticket/8070 #8070] prefer GetTickCount64 over GetTickCount\n* [@http://svn.boost.org/trac/boost/ticket/8136 #8136] boost::this_thread::sleep_for() sleeps longer than it should in Windows\n* [@http://svn.boost.org/trac/boost/ticket/8212 #8212] Boost thread compilation error on Solaris 10\n* [@http://svn.boost.org/trac/boost/ticket/8237 #8237] fix documentation for 'thread_group'\n* [@http://svn.boost.org/trac/boost/ticket/8239 #8239] barrier::wait() not marked as interruption_point\n* [@http://svn.boost.org/trac/boost/ticket/8323 #8323] boost::thread::try_join_for/try_join_until may block indefinitely due to a combination of problems in Boost.Thread and Boost.Chrono \t\n* [@http://svn.boost.org/trac/boost/ticket/8337 #8337] The internal representation of \"std::string(this->code()->message())\" escapes, but is destroyed when it exits scope.\n* [@http://svn.boost.org/trac/boost/ticket/8371 #8371] C++11 once_flag enabled when constexpr is not available\n* [@http://svn.boost.org/trac/boost/ticket/8422 #8422] Assertion in win32::WaitForSingleObject()\n* [@http://svn.boost.org/trac/boost/ticket/8443 #8443] Header file inclusion order may cause crashes\n* [@http://svn.boost.org/trac/boost/ticket/8451 #8451] Missing documented function 'boost::scoped_thread::joinable'\n* [@http://svn.boost.org/trac/boost/ticket/8458 #8458] -DBOOST_THREAD_DONT_USE_CHRONO in thread.obj.rsp but not explicitly set\n* [@http://svn.boost.org/trac/boost/ticket/8530 #8530] [Coverity] Unused variable thread_handle, uninitialized variable cond_mutex in thread/pthread/thread_data.hpp\n* [@http://svn.boost.org/trac/boost/ticket/8550 #8550] static linking of Boost.Thread with an MFC-Dll\n* [@http://svn.boost.org/trac/boost/ticket/8576 #8576] \"sur parolle\" should be \"sur parole\".\n* [@http://svn.boost.org/trac/boost/ticket/8596 #8596] With C++0x enabled, boost::packaged_task stores a reference to function objects, instead of a copy.\n* [@http://svn.boost.org/trac/boost/ticket/8626 #8626] Reintroduce BOOST_VERIFY on pthread_mutex_destroy return type\n* [@http://svn.boost.org/trac/boost/ticket/8645 #8645] Typo in Strict lock definition\n* [@http://svn.boost.org/trac/boost/ticket/8671 #8671] promise: set_..._at_thread_exit \t\n* [@http://svn.boost.org/trac/boost/ticket/8672 #8672] future<>::then(void()) doesn't works\n* [@http://svn.boost.org/trac/boost/ticket/8674 #8674] Futures as local named objects can't be returned with implicit move.\n\n[heading Version 4.0.0 - boost 1.53]\n\n[/\n[*Breaking changes:]\n\n[warning \nBOOST_THREAD_VERSION==3 by default since Boost 1.53. So that all the deprecated features since 1.50 are not included by default. You can change this by setting the appropriated define (see Configuration section).\n]\n]\n\n[*Deprecated features:]\n\n[warning Deprecated features since boost 1.53 will be available only until boost 1.58.]\n\n* C++11 compliance: packaged_task<R> is deprecated, use instead packaged_task<R()>. \nSee BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK and BOOST_THREAD_DONT_PROVIDE_SIGNATURE_PACKAGED_TASK\n\n* [@http://svn.boost.org/trac/boost/ticket/7537 #7537] deprecate Mutex::scoped_lock and scoped_try_lock and boost::condition\n\n[*New Features:]\n\n* [@http://svn.boost.org/trac/boost/ticket/6270 #6270] c++11 compliance: Add thread constructor from movable callable and movable arguments\nProvided when BOOST_THREAD_PROVIDES_VARIADIC_THREAD is defined (Default value from Boost 1.55):\nSee BOOST_THREAD_PROVIDES_VARIADIC_THREAD and BOOST_THREAD_DONT_PROVIDE_VARIADIC_THREAD.\n\n* [@http://svn.boost.org/trac/boost/ticket/7279 #7279] C++11 compliance: Add noexcept in system related functions\n* [@http://svn.boost.org/trac/boost/ticket/7280 #7280] C++11 compliance: Add promise::...at_thread_exit functions\n\n* [@http://svn.boost.org/trac/boost/ticket/7281 #7281] C++11 compliance: Add ArgTypes to packaged_task template. \nProvided when BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK is defined (Default value from Boost 1.55).\nSee BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK and BOOST_THREAD_DONT_PROVIDE_SIGNATURE_PACKAGED_TASK.\n\n* [@http://svn.boost.org/trac/boost/ticket/7282 #7282] C++11 compliance: Add packaged_task::make_ready_at_thread_exit function\n* [@http://svn.boost.org/trac/boost/ticket/7285 #7285] C++11 compliance: Allow to pass movable arguments for call_once\n\n* [@http://svn.boost.org/trac/boost/ticket/7412 #7412] C++11 compliance: Add async from movable callable and movable arguments\nProvided when BOOST_THREAD_PROVIDES_VARIADIC_THREAD and BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK are defined (Default value from Boost 1.55):\nSee BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK and BOOST_THREAD_DONT_PROVIDE_SIGNATURE_PACKAGED_TASK, BOOST_THREAD_PROVIDES_VARIADIC_THREAD and BOOST_THREAD_DONT_PROVIDE_VARIADIC_THREAD.\n\n* [@http://svn.boost.org/trac/boost/ticket/7413 #7413] C++11 compliance: Add async when the launch policy is deferred.\n* [@http://svn.boost.org/trac/boost/ticket/7414 #7414] C++11 compliance: future::get post-condition should be valid()==false.\n* [@http://svn.boost.org/trac/boost/ticket/7422 #7422] Provide a condition variable with zero-overhead performance penality.\n* [@http://svn.boost.org/trac/boost/ticket/7414 #7444] Async: Add make_future/make_shared_future.\n* [@http://svn.boost.org/trac/boost/ticket/7540 #7540] Threads: Add a helper class that join a thread on destruction.\n* [@http://svn.boost.org/trac/boost/ticket/7541 #7541] Threads: Add a thread wrapper class that joins on destruction.\n* [@http://svn.boost.org/trac/boost/ticket/7575 #7575] C++11 compliance: A future created by async should \"join\" in the destructor.\n* [@http://svn.boost.org/trac/boost/ticket/7587 #7587] Synchro: Add strict_lock and nested_strict_lock.\n* [@http://svn.boost.org/trac/boost/ticket/7588 #7588] Synchro: Split the locks.hpp in several files to limit dependencies.\n* [@http://svn.boost.org/trac/boost/ticket/7590 #7590] Synchro: Add lockable concept checkers based on Boost.ConceptCheck.\n* [@http://svn.boost.org/trac/boost/ticket/7591 #7591] Add lockable traits that can be used with enable_if.\n* [@http://svn.boost.org/trac/boost/ticket/7592 #7592] Synchro: Add a null_mutex that is a no-op and that is a model of UpgardeLockable.\n* [@http://svn.boost.org/trac/boost/ticket/7593 #7593] Synchro: Add a externally_locked class.\n* [@http://svn.boost.org/trac/boost/ticket/7590 #7594] Threads: Allow to disable thread interruptions.\n\n[*Fixed Bugs:]\n\n* [@http://svn.boost.org/trac/boost/ticket/5752 #5752] boost::call_once() is unreliable on some platforms\n* [@http://svn.boost.org/trac/boost/ticket/7464 #7464] BOOST_TEST(n_alive == 1); fails due to race condition in a regression test tool.\n* [@http://svn.boost.org/trac/boost/ticket/7657 #7657] Serious performance and memory consumption hit if condition_variable methods condition notify_one or notify_all is used repeatedly.\n* [@http://svn.boost.org/trac/boost/ticket/7665 #7665] this_thread::sleep_for no longer uses steady_clock in thread.\n* [@http://svn.boost.org/trac/boost/ticket/7668 #7668] thread_group::join_all() should check whether its threads are joinable.\n* [@http://svn.boost.org/trac/boost/ticket/7669 #7669] thread_group::join_all() should catch resource_deadlock_would_occur.\n* [@http://svn.boost.org/trac/boost/ticket/7671 #7671] Error including boost/thread.hpp header on iOS.\n* [@http://svn.boost.org/trac/boost/ticket/7672 #7672] lockable_traits.hpp syntax error: \"defined\" token misspelled.\n* [@http://svn.boost.org/trac/boost/ticket/7798 #7798] boost::future set_wait_callback thread safety issues.\n* [@http://svn.boost.org/trac/boost/ticket/7808 #7808] Incorrect description of effects for this_thread::sleep_for and this_thread::sleep_until.\n* [@http://svn.boost.org/trac/boost/ticket/7812 #7812] Returns: cv_status::no_timeout if the call is returning because the time period specified by rel_time has elapsed, cv_status::timeout otherwise.\n* [@http://svn.boost.org/trac/boost/ticket/7874 #7874] compile warning: thread.hpp:342: warning: type attributes are honored only at type definition.\n* [@http://svn.boost.org/trac/boost/ticket/7875 #7875] BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED should not be enabled by default.\n* [@http://svn.boost.org/trac/boost/ticket/7882 #7882] wrong exception text from condition_variable::wait(unique_lock<mutex>&).\n* [@http://svn.boost.org/trac/boost/ticket/7890 #7890] thread::do_try_join_until() is missing a return type.\n\n\n\n[heading Version 3.1.0 - boost 1.52]\n\nDeprecated Features:\n\nDeprecated features since boost 1.50 available only until boost 1.55:\n\nThese deprecated features will be provided by default up to boost 1.52. If you don't want to include the deprecated features you could define BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. Since 1.53 these features will not be included any more by default. Since this version, if you want to include the deprecated features yet you could define BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. These deprecated features will be only available until boost 1.55, that is you have yet 1 year to move to the new features.\n\n* Time related functions don't using the Boost.Chrono library, use the chrono overloads instead.\n\nBreaking changes when BOOST_THREAD_VERSION==3 (Default value since Boost 1.53):\n\nThere are some new features which share the same interface but with different behavior. These breaking features are provided by default when BOOST_THREAD_VERSION is 3, but the user can however choose the version 2 behavior by defining the corresponding macro. As for the deprecated features, these broken features will be only available until boost 1.55.\n\n* [@http://svn.boost.org/trac/boost/ticket/6229 #6229] Rename the unique_future to future following the c++11.\n* [@http://svn.boost.org/trac/boost/ticket/6266 #6266] Breaking change: thread destructor should call terminate if joinable. \n* [@http://svn.boost.org/trac/boost/ticket/6269 #6269] Breaking change: thread move assignment should call terminate if joinable. \n\nNew Features:\n\n* [@http://svn.boost.org/trac/boost/ticket/2361 #2361] thread_specific_ptr: document nature of the key, complexity and rationale.\n* [@http://svn.boost.org/trac/boost/ticket/4710 #4710] C++11 compliance: Missing async(). \t\n* [@http://svn.boost.org/trac/boost/ticket/7283 #7283] C++11 compliance: Add notify_all_at_thread_exit.\n* [@http://svn.boost.org/trac/boost/ticket/7345 #7345] C++11 compliance: Add noexcept to recursive mutex try_lock.\n\nFixed Bugs:\n\n* [@http://svn.boost.org/trac/boost/ticket/2797 #2797] Two problems with thread_specific_ptr.\n* [@http://svn.boost.org/trac/boost/ticket/5274 #5274] failed to compile future.hpp with stlport 5.1.5 under msvc8.1, because of undefined class.\n* [@http://svn.boost.org/trac/boost/ticket/5431 #5431] compile error in Windows CE 6.0(interlocked).\n[/* [@http://svn.boost.org/trac/boost/ticket/5752 #5752] boost::call_once() is unreliable on some platforms.]\n* [@http://svn.boost.org/trac/boost/ticket/5696 #5696] win32 detail::set_tss_data does nothing when tss_cleanup_function is NULL.\n* [@http://svn.boost.org/trac/boost/ticket/6931 #6931] mutex waits forwever with Intel C++ Compiler XE 12.1.5.344 Build 20120612\n* [@http://svn.boost.org/trac/boost/ticket/7045 #7045] Thread library does not automatically compile date_time. \t\n* [@http://svn.boost.org/trac/boost/ticket/7173 #7173] wrong function name interrupt_point(). \t\n* [@http://svn.boost.org/trac/boost/ticket/7200 #7200] Unable to build boost.thread modularized. \n* [@http://svn.boost.org/trac/boost/ticket/7220 #7220] gcc 4.6.2 warns about inline+dllimport functions.\n* [@http://svn.boost.org/trac/boost/ticket/7238 #7238] this_thread::sleep_for() does not respond to interrupt().\n* [@http://svn.boost.org/trac/boost/ticket/7245 #7245] Minor typos on documentation related to version 3.\n* [@http://svn.boost.org/trac/boost/ticket/7272 #7272] win32/thread_primitives.hpp: (Unneccessary) Warning.\n* [@http://svn.boost.org/trac/boost/ticket/7284 #7284] Clarify that there is no access priority between lock and shared_lock on shared mutex.\n* [@http://svn.boost.org/trac/boost/ticket/7329 #7329] boost/thread/future.hpp does not compile on HPUX.\n* [@http://svn.boost.org/trac/boost/ticket/7336 #7336] BOOST_THREAD_DONT_USE_SYSTEM doesn't work.\n* [@http://svn.boost.org/trac/boost/ticket/7329 #7349] packaged_task holds reference to temporary.\n* [@http://svn.boost.org/trac/boost/ticket/7350 #7350] allocator_destructor does not destroy object\n* [@http://svn.boost.org/trac/boost/ticket/7360 #7360] Memory leak in pthread implementation of boost::thread_specific_ptr\n* [@http://svn.boost.org/trac/boost/ticket/7370 #7370] Boost.Thread documentation\n* [@http://svn.boost.org/trac/boost/ticket/7438 #7438] Segmentation fault in test_once regression test in group.join_all();\n* [@http://svn.boost.org/trac/boost/ticket/7461 #7461] detail::win32::ReleaseSemaphore may be called with count_to_release equal to 0\n* [@http://svn.boost.org/trac/boost/ticket/7499 #7499] call_once doesn't call even once\n\n \t\n[heading Version 3.0.1 - boost 1.51]\n\nDeprecated Features:\n\nDeprecated features since boost 1.50 available only until boost 1.55:\n\nThese deprecated features will be provided by default up to boost 1.52. If you don't want to include the deprecated features you could define BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. Since 1.53 these features will not be included any more by default. Since this version, if you want to include the deprecated features yet you could define BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. These deprecated features will be only available until boost 1.55, that is you have 1 year and a half to move to the new features.\n\n* Time related functions don't using the Boost.Chrono library, use the chrono overloads instead.\n\nBreaking changes when BOOST_THREAD_VERSION==3:\n\nThere are some new features which share the same interface but with different behavior. These breaking features are provided by default when BOOST_THREAD_VERSION is 3, but the user can however choose the version 2 behavior by defining the corresponding macro. As for the deprecated features, these broken features will be only available until boost 1.55.\n\n* [@http://svn.boost.org/trac/boost/ticket/6229 #6229] Rename the unique_future to future following the c++11.\n* [@http://svn.boost.org/trac/boost/ticket/6266 #6266] Breaking change: thread destructor should call terminate if joinable. \n* [@http://svn.boost.org/trac/boost/ticket/6269 #6269] Breaking change: thread move assignment should call terminate if joinable. \n\n\nFixed Bugs:\n\n\n* [@http://svn.boost.org/trac/boost/ticket/4258 #4258] Linking with boost thread does not work on mingw/gcc 4.5.\n* [@http://svn.boost.org/trac/boost/ticket/4885 #4885] Access violation in set_tss_data at process exit due to invalid assumption about TlsAlloc.\n* [@http://svn.boost.org/trac/boost/ticket/6931 #6931] mutex waits forwever with Intel Compiler and /debug:parallel\n* [@http://svn.boost.org/trac/boost/ticket/7044 #7044] boost 1.50.0 header missing.\n* [@http://svn.boost.org/trac/boost/ticket/7052 #7052] Thread: BOOST_THREAD_PROVIDES_DEPRECATED_FEATURES_SINCE_V3_0_0 only masks thread::operator==, thread::operator!= forward declarations, not definitions.\n* [@http://svn.boost.org/trac/boost/ticket/7066 #7066] An attempt to fix current_thread_tls_key static initialization order.\n* [@http://svn.boost.org/trac/boost/ticket/7074 #7074] Multiply defined symbol boost::allocator_arg.\n* [@http://svn.boost.org/trac/boost/ticket/7078 #7078] Trivial 64-bit warning fix on Windows for thread attribute stack size\n* [@http://svn.boost.org/trac/boost/ticket/7089 #7089] BOOST_THREAD_WAIT_BUG limits functionality without solving anything\n\n[/\n#6787 \tboost::thread::sleep() hangs if system time is rolled back\n#7045 \tThread library does not automatically compile date_time\n]\n\n[heading Version 3.0.0 - boost 1.50]\n\nBreaking changes when BOOST_THREAD_VERSION==3:\n\n* [@http://svn.boost.org/trac/boost/ticket/6229 #6229] Breaking change: Rename the unique_future to future following the c++11.\n* [@http://svn.boost.org/trac/boost/ticket/6266 #6266] Breaking change: thread destructor should call terminate if joinable. \n* [@http://svn.boost.org/trac/boost/ticket/6269 #6269] Breaking change: thread move assignment should call terminate if joinable. \n\nNew Features:\n\n* [@http://svn.boost.org/trac/boost/ticket/1850 #1850] Request for unlock_guard  to compliment lock_guard.\n* [@http://svn.boost.org/trac/boost/ticket/2637 #2637] Request for shared_mutex duration timed_lock and timed_lock_shared.\n* [@http://svn.boost.org/trac/boost/ticket/2741 #2741] Proposal to manage portable and non portable thread attributes. \n* [@http://svn.boost.org/trac/boost/ticket/3567 #3567] Request for shared_lock_guard.\n* [@http://svn.boost.org/trac/boost/ticket/6194 #6194] Adapt to Boost.Move. \n* [@http://svn.boost.org/trac/boost/ticket/6195 #6195] c++11 compliance: Provide the standard time related interface using Boost.Chrono. \n* [@http://svn.boost.org/trac/boost/ticket/6217 #6217] Enhance Boost.Thread shared mutex interface following Howard Hinnant proposal. \n* [@http://svn.boost.org/trac/boost/ticket/6224 #6224] c++11 compliance: Add the use of standard noexcept on compilers supporting them. \n* [@http://svn.boost.org/trac/boost/ticket/6225 #6225] Add the use of standard =delete defaulted operations on compilers supporting them.\n* [@http://svn.boost.org/trac/boost/ticket/6226 #6226] c++11 compliance: Add explicit bool conversion from locks. \n* [@http://svn.boost.org/trac/boost/ticket/6228 #6228] Add promise constructor with allocator following the standard c++11. \n* [@http://svn.boost.org/trac/boost/ticket/6230 #6230] c++11 compliance: Follows the exception reporting mechanism as defined in the c++11. \n* [@http://svn.boost.org/trac/boost/ticket/6231 #6231] Add BasicLockable requirements in the documentation to follow c++11.\n* [@http://svn.boost.org/trac/boost/ticket/6272 #6272] c++11 compliance: Add thread::id hash specialization.\n* [@http://svn.boost.org/trac/boost/ticket/6273 #6273] c++11 compliance: Add cv_status enum class and use it on the conditions wait functions. \n* [@http://svn.boost.org/trac/boost/ticket/6342 #6342] c++11 compliance: Adapt the one_flag to the c++11 interface.\n* [@http://svn.boost.org/trac/boost/ticket/6671 #6671] upgrade_lock: missing mutex and release functions.\n* [@http://svn.boost.org/trac/boost/ticket/6672 #6672] upgrade_lock:: missing constructors from time related types.\n* [@http://svn.boost.org/trac/boost/ticket/6675 #6675] upgrade_lock:: missing non-member swap.\n* [@http://svn.boost.org/trac/boost/ticket/6676 #6676] lock conversion should be explicit.\n* Added missing packaged_task::result_type and packaged_task:: constructor with allocator.\n* Added packaged_task::reset()\n\n\nFixed Bugs:\n\n* [@http://svn.boost.org/trac/boost/ticket/2380 #2380] boost::move from lvalue does not work with gcc.\n* [@http://svn.boost.org/trac/boost/ticket/2430 #2430] shared_mutex for win32 doesn't have timed_lock_upgrade.\n* [@http://svn.boost.org/trac/boost/ticket/2575 #2575] Bug- Boost 1.36.0 on Itanium platform.\n* [@http://svn.boost.org/trac/boost/ticket/3160 #3160] Duplicate tutorial code in boost::thread.\n* [@http://svn.boost.org/trac/boost/ticket/4345 #4345] thread::id and joining problem with cascade of threads.\n* [@http://svn.boost.org/trac/boost/ticket/4521 #4521] Error using boost::move on packaged_task (MSVC 10).\n* [@http://svn.boost.org/trac/boost/ticket/4711 #4711] Must use implementation details to return move-only types.\n* [@http://svn.boost.org/trac/boost/ticket/4921 #4921] BOOST_THREAD_USE_DLL and BOOST_THREAD_USE_LIB are crucial and need to be documented.\n* [@http://svn.boost.org/trac/boost/ticket/5013 #5013] documentation: boost::thread: pthreas_exit causes terminate().\n* [@http://svn.boost.org/trac/boost/ticket/5173 #5173] boost::this_thread::get_id is very slow.\n* [@http://svn.boost.org/trac/boost/ticket/5351 #5351] interrupt a future get boost::unknown_exception.\n* [@http://svn.boost.org/trac/boost/ticket/5516 #5516] Upgrade lock is not acquired when previous upgrade lock releases if another read lock is present. \n* [@http://svn.boost.org/trac/boost/ticket/5990 #5990] shared_future<T>::get() has wrong return type. \n* [@http://svn.boost.org/trac/boost/ticket/6174 #6174] packaged_task doesn't correctly handle moving results.\n* [@http://svn.boost.org/trac/boost/ticket/6222 #6222] Compile error with SunStudio: unique_future move. \n* [@http://svn.boost.org/trac/boost/ticket/6354 #6354] PGI: Compiler threading support is not turned on.\n* [@http://svn.boost.org/trac/boost/ticket/6673 #6673] shared_lock: move assign doesn't works with c++11.\n* [@http://svn.boost.org/trac/boost/ticket/6674 #6674] shared_mutex: try_lock_upgrade_until doesn't works.\n* [@http://svn.boost.org/trac/boost/ticket/6908 #6908] Compile error due to unprotected definitions of _WIN32_WINNT and WINVER.\n* [@http://svn.boost.org/trac/boost/ticket/6940 #6940] TIME_UTC is a macro in C11.\n* [@http://svn.boost.org/trac/boost/ticket/6959 #6959] call of abs is ambiguous.\n* Fix issue signaled on the ML with task_object(task_object const&) in presence of task_object(task_object &&) \n \t\n \t\n\n[heading Version 2.1.1 - boost 1.49]\n\nFixed Bugs:\n\n* [@http://svn.boost.org/trac/boost/ticket/2309 #2309] Lack of g++ symbol visibility support in Boost.Thread. \n* [@http://svn.boost.org/trac/boost/ticket/2639 #2639] documentation should be extended(defer_lock, try_to_lock, ...).\n\n* [@http://svn.boost.org/trac/boost/ticket/3639 #3639] Boost.Thread doesn't build with Sun-5.9 on Linux.\n* [@http://svn.boost.org/trac/boost/ticket/3762 #3762] Thread can't be compiled with winscw (Codewarrior by Nokia).\n* [@http://svn.boost.org/trac/boost/ticket/3885 #3885] document about mix usage of boost.thread and native thread api.\n* [@http://svn.boost.org/trac/boost/ticket/3975 #3975] Incorrect precondition for promise::set_wait_callback().\n\n* [@http://svn.boost.org/trac/boost/ticket/4048 #4048] thread::id formatting involves locale\n* [@http://svn.boost.org/trac/boost/ticket/4315 #4315] gcc 4.4 Warning: inline ... declared as dllimport: attribute ignored. \n* [@http://svn.boost.org/trac/boost/ticket/4480 #4480] OpenVMS patches for compiler issues workarounds.\n* [@http://svn.boost.org/trac/boost/ticket/4819 #4819] boost.thread's documentation misprints.\n\n* [@http://svn.boost.org/trac/boost/ticket/5423 #5423] thread issues with C++0x.\n* [@http://svn.boost.org/trac/boost/ticket/5617 #5617] boost::thread::id copy ctor.\n* [@http://svn.boost.org/trac/boost/ticket/5739 #5739] set-but-not-used warnings with gcc-4.6.\n* [@http://svn.boost.org/trac/boost/ticket/5826 #5826] threads.cpp: resource leak on threads creation failure.\n* [@http://svn.boost.org/trac/boost/ticket/5839 #5839] thread.cpp: ThreadProxy leaks on exceptions.\n* [@http://svn.boost.org/trac/boost/ticket/5859 #5859] win32 shared_mutex constructor leaks on exceptions. \n\n* [@http://svn.boost.org/trac/boost/ticket/6100 #6100] Compute hardware_concurrency() using get_nprocs() on GLIBC systems.\n* [@http://svn.boost.org/trac/boost/ticket/6168 #6168] recursive_mutex is using wrong config symbol (possible typo).\n* [@http://svn.boost.org/trac/boost/ticket/6175 #6175] Compile error with SunStudio.\n* [@http://svn.boost.org/trac/boost/ticket/6200 #6200] patch to have condition_variable and mutex error better handle EINTR. \n* [@http://svn.boost.org/trac/boost/ticket/6207 #6207] shared_lock swap compiler error on clang 3.0 c++11. \n* [@http://svn.boost.org/trac/boost/ticket/6208 #6208] try_lock_wrapper swap compiler error on clang 3.0 c++11. \n\n[heading Version 2.1.0 - Changes since boost 1.40]\n\nThe 1.41.0 release of Boost adds futures to the thread library. There are also a few minor changes.\n\n[heading Changes since boost 1.35]\n\nThe 1.36.0 release of Boost includes a few new features in the thread library:\n\n* New generic __lock_multiple_ref__ and __try_lock_multiple_ref__ functions for locking multiple mutexes at once.\n\n* Rvalue reference support for move semantics where the compilers supports it.\n\n* A few bugs fixed and missing functions added (including the serious win32 condition variable bug).\n\n* `scoped_try_lock` types are now backwards-compatible with Boost 1.34.0 and previous releases.\n\n* Support for passing function arguments to the thread function by supplying additional arguments to the __thread__ constructor.\n\n* Backwards-compatibility overloads added for `timed_lock` and `timed_wait` functions to allow use of `xtime` for timeouts.\n\n[heading Version 2.0.0 - Changes since boost 1.34]\n\nAlmost every line of code in __boost_thread__ has been changed since the 1.34 release of boost. However, most of the interface\nchanges have been extensions, so the new code is largely backwards-compatible with the old code. The new features and breaking\nchanges are described below.\n\n[heading New Features]\n\n* Instances of __thread__ and of the various lock types are now movable.\n\n* Threads can be interrupted at __interruption_points__.\n\n* Condition variables can now be used with any type that implements the __lockable_concept__, through the use of\n`boost::condition_variable_any` (`boost::condition` is a `typedef` to `boost::condition_variable_any`, provided for backwards\ncompatibility). `boost::condition_variable` is provided as an optimization, and will only work with\n`boost::unique_lock<boost::mutex>` (`boost::mutex::scoped_lock`).\n\n* Thread IDs are separated from __thread__, so a thread can obtain it's own ID (using `boost::this_thread::get_id()`), and IDs can\nbe used as keys in associative containers, as they have the full set of comparison operators.\n\n* Timeouts are now implemented using the Boost DateTime library, through a typedef `boost::system_time` for absolute timeouts, and\nwith support for relative timeouts in many cases. `boost::xtime` is supported for backwards compatibility only.\n\n* Locks are implemented as publicly accessible templates `boost::lock_guard`, `boost::unique_lock`, `boost::shared_lock`, and\n`boost::upgrade_lock`, which are templated on the type of the mutex. The __lockable_concept__ has been extended to include publicly\navailable __lock_ref__ and __unlock_ref__ member functions, which are used by the lock types.\n\n[heading Breaking Changes]\n\nThe list below should cover all changes to the public interface which break backwards compatibility.\n\n* __try_mutex__ has been removed, and the functionality subsumed into __mutex__. __try_mutex__ is left as a `typedef`,\nbut is no longer a separate class.\n\n* __recursive_try_mutex__ has been removed, and the functionality subsumed into\n__recursive_mutex__. __recursive_try_mutex__ is left as a `typedef`, but is no longer a separate class.\n\n* `boost::detail::thread::lock_ops` has been removed. Code that relies on the `lock_ops` implementation detail will no longer work,\nas this has been removed, as it is no longer necessary now that mutex types now have public __lock_ref__ and __unlock_ref__ member\nfunctions.\n\n* `scoped_lock` constructors with a second parameter of type `bool` are no longer provided. With previous boost releases,\n``boost::mutex::scoped_lock some_lock(some_mutex,false);`` could be used to create a lock object that was associated with a mutex,\nbut did not lock it on construction. This facility has now been replaced with the constructor that takes a\n`boost::defer_lock_type` as the second parameter: ``boost::mutex::scoped_lock some_lock(some_mutex,boost::defer_lock);``\n\n* The `locked()` member function of the `scoped_lock` types has been renamed to __owns_lock_ref__.\n\n* You can no longer obtain a __thread__ instance representing the current thread: a default-constructed __thread__ object is not\nassociated with any thread. The only use for such a thread object was to support the comparison operators: this functionality has\nbeen moved to __thread_id__.\n\n* The broken `boost::read_write_mutex` has been replaced with __shared_mutex__.\n\n* __mutex__ is now never recursive. For Boost releases prior to 1.35 __mutex__ was recursive on Windows and not on POSIX platforms.\n\n* When using a __recursive_mutex__ with a call to [cond_any_wait_link `boost::condition_variable_any::wait()`], the mutex is only\n  unlocked one level, and not completely. This prior behaviour was not guaranteed and did not feature in the tests.\n\n[endsect]\n\n[section:future Future]\n\nThe following features will be included in next releases. \n\n# Add some minor features, in particular\n  * [@http://svn.boost.org/trac/boost/ticket/7589 #7589] Synchro: Add polymorphic lockables.\n\n# Add some features based on C++ proposals, in particular\n  * [@http://svn.boost.org/trac/boost/ticket/8273 #8273] Synchro: Add externally locked streams.\n  * [@http://svn.boost.org/trac/boost/ticket/8514 #8514] Async: Add a thread_pool executor with work stealing.\n\n# And some additional extensions related to futures as:\n\n  * [@http://svn.boost.org/trac/boost/ticket/8517 #8517] Async: Add a variadic shared_future::then.\n\n\n[endsect]\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/serialization/test/test_dll_plugin.cpp": "/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8\n// test_dll_plugin.cpp\n\n// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com . \n// Use, modification and distribution is subject to the Boost Software\n// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at\n// http://www.boost.org/LICENSE_1_0.txt)\n\n// should pass compilation and execution\n\n// Note this test creates, serializes, and destroys\n// a class instance while knowing nothing more than its\n// exported class ID (GUID) and a base class from which\n// it is derived.  This is referred to as a \"plugin\"\n// since the same program could, without recompilation, \n// manipulate any number of derived types - even those\n// which have not been yet been created.\n\n#include <fstream>\n\n#include <cstdio> // remove\n#include <boost/config.hpp>\n#if defined(BOOST_NO_STDC_NAMESPACE)\nnamespace std{ \n    using ::remove;\n}\n#endif\n\n#include <boost/archive/archive_exception.hpp>\n\n// for now, only test with simple text and polymorphic archive\n#include \"test_tools.hpp\"\n\n#include <boost/serialization/base_object.hpp>\n#include <boost/serialization/export.hpp>\n#include <boost/serialization/type_info_implementation.hpp>\n#include <boost/serialization/access.hpp>\n#include <boost/serialization/void_cast.hpp>\n#include <boost/serialization/extended_type_info.hpp>\n\n#include \"polymorphic_base.hpp\"\n\n// declare and implement a derived class in our own executable\nclass polymorphic_derived1 : public polymorphic_base\n{\n    friend class boost::serialization::access;\n    template<class Archive>\n    void serialize(Archive &ar, const unsigned int /* file_version */){\n        ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(polymorphic_base);\n    }\n    const char * get_key() const{\n        return\n            boost::serialization::type_info_implementation<\n                polymorphic_derived1\n            >::type::get_const_instance().get_key();\n    }\npublic:\n    virtual ~polymorphic_derived1(){}\n};\n\n// This class is derived from polymorphic_base which uses the no_rtti system\n// rather than the typeid system.  This system uses the exported name as the\n// type identifier key.  This MUST be exported!!!\nBOOST_CLASS_EXPORT(polymorphic_derived1)\n\n// MWerks users can do this to make their code work\nBOOST_SERIALIZATION_MWERKS_BASE_AND_DERIVED(polymorphic_base, polymorphic_derived1)\n\n// save exported polymorphic class\nvoid save_exported(const char *testfile)\n{\n    test_ostream os(testfile, TEST_STREAM_FLAGS);\n    test_oarchive oa(os, TEST_ARCHIVE_FLAGS);\n\n    polymorphic_base *rb1 = new polymorphic_derived1;\n\n    // get the eti record for the exported type \"polymorphic_derived2\"\n    boost::serialization::extended_type_info const * const d2_eti =\n        boost::serialization::extended_type_info::find(\n            \"polymorphic_derived2\"\n        );\n    assert(NULL != d2_eti);\n\n    // create a new instance of the type referred to by this record.\n    // in this example, we happen to know that the class constructor\n    // takes no arguments.\n    void const * const rd2 = d2_eti->construct();\n    assert(NULL != rd2);\n\n    // transform the pointer to a pointer to the base class\n    polymorphic_base const * const rb2 \n        = static_cast<polymorphic_base const *>(\n            boost::serialization::void_upcast(\n                * d2_eti,\n                boost::serialization::type_info_implementation<polymorphic_base>\n                    ::type::get_const_instance(),\n                rd2\n            )\n        );\n\n    // export will permit correct serialization\n    // through a pointer to a base class\n    oa << BOOST_SERIALIZATION_NVP(rb1);\n    oa << BOOST_SERIALIZATION_NVP(rb2);\n\n    // don't need these any more - don't leak memory\n    delete rb1;\n    // note delete original handle - not runtime cast one !!!\n    //delete rb2;\n    d2_eti->destroy(rd2);\n}\n\n// save exported polymorphic class\nvoid load_exported(const char *testfile)\n{\n    test_istream is(testfile, TEST_STREAM_FLAGS);\n    test_iarchive ia(is, TEST_ARCHIVE_FLAGS);\n\n    polymorphic_base *rb1 = NULL;\n    polymorphic_base *rb2 = NULL;\n\n    // export will permit correct serialization\n    // through a pointer to a base class\n    ia >> BOOST_SERIALIZATION_NVP(rb1);\n\n    BOOST_CHECK_MESSAGE(\n        boost::serialization::type_info_implementation<polymorphic_derived1>\n            ::type::get_const_instance()\n        == \n        * boost::serialization::type_info_implementation<polymorphic_base>\n            ::type::get_const_instance().get_derived_extended_type_info(*rb1),\n        \"restored pointer b1 not of correct type\"\n    );\n    ia >> BOOST_SERIALIZATION_NVP(rb2);\n\n    // get the eti record for the exported type \"polymorphic_derived2\"\n    boost::serialization::extended_type_info const * const d2_eti =\n        boost::serialization::extended_type_info::find(\n            \"polymorphic_derived2\"\n        );\n    assert(NULL != d2_eti);\n\n    BOOST_CHECK_MESSAGE(\n        * d2_eti\n        == \n        * boost::serialization::type_info_implementation<polymorphic_base>\n            ::type::get_const_instance().get_derived_extended_type_info(*rb2),\n        \"restored pointer b2 not of correct type\"\n    );\n\n    delete rb1;\n    delete rb2;\n}\n\n#ifdef BOOST_WINDOWS\n\n#define WIN32_LEAN_AND_MEAN\n#include <TCHAR.H>\n#include <windows.h>\n\nint\ntest_main( int /* argc */, char* /* argv */[] )\n{\n    const char * testfile = boost::archive::tmpnam(NULL);\n    BOOST_REQUIRE(NULL != testfile);\n\n    HINSTANCE hDLL;               // Handle to DLL\n    hDLL = LoadLibrary(_T(\"polymorphic_derived2.dll\"));\n    BOOST_CHECK_MESSAGE(\n        (0 != hDLL), \n        \"Failed to find/load polymorphic_derived2\"\n    );\n    if(0 == hDLL)\n        return EXIT_FAILURE;\n\n    save_exported(testfile);\n    load_exported(testfile);\n    FreeLibrary(hDLL);\n\n    std::remove(testfile);\n    return EXIT_SUCCESS;\n}\n\n#else // presume *nix\n\n#include <dlfcn.h>\n\nint\ntest_main( int /* argc */, char* /* argv */[] )\n{\n    const char * testfile = boost::archive::tmpnam(NULL);\n    BOOST_REQUIRE(NULL != testfile);\n\n    void * hDLL;               // Handle to DLL\n    hDLL = dlopen(\"polymorphic_derived2.so\", RTLD_NOW | RTLD_GLOBAL);\n    BOOST_CHECK_MESSAGE((0 != hDLL), \"Failed to find/load plugin_polymorphic_derived2\" );\n    BOOST_CHECK_MESSAGE((0 != hDLL), dlerror() );\n    if(0 == hDLL)\n        return EXIT_FAILURE;\n\n    save_exported(testfile);\n    load_exported(testfile);\n    dlclose(hDLL);\n\n    std::remove(testfile);\n    return EXIT_SUCCESS;\n}\n\n#endif\n\n// EOF\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/serialization/doc/special.html": "<!doctype HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<!--\n(C) Copyright 2002-4 Robert Ramey - http://www.rrsd.com . \nUse, modification and distribution is subject to the Boost Software\nLicense, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at\nhttp://www.boost.org/LICENSE_1_0.txt)\n-->\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"../../../boost.css\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n<title>Serialization - Special Considerations</title>\n</head>\n<body link=\"#0000ff\" vlink=\"#800080\">\n<table border=\"0\" cellpadding=\"7\" cellspacing=\"0\" width=\"100%\" summary=\"header\">\n  <tr> \n    <td valign=\"top\" width=\"300\"> \n      <h3><a href=\"../../../index.htm\"><img height=\"86\" width=\"277\" alt=\"C++ Boost\" src=\"../../../boost.png\" border=\"0\"></a></h3>\n    </td>\n    <td valign=\"top\"> \n      <h1 align=\"center\">Serialization</h1>\n      <h2 align=\"center\">Special Considerations</h2>\n    </td>\n  </tr>\n</table>\n<hr>\n<dl class=\"page-index\">\n  <dt><a href=\"#objecttracking\">Object Tracking</a>\n  <dt><a href=\"#classinfo\">Class Information</a>\n  <dt><a href=\"#helpersupport\">Helper Support</a>\n  <dt><a href=\"#portability\">Archive Portability</a>\n  <dl class=\"page-index\">\n    <dt><a href=\"#numerics\">Numerics</a>\n    <dt><a href=\"#traits\">Traits</a>\n  </dl>\n  <dt><a href=\"#binary_archives\">Binary Archives</a>\n  <dt><a href=\"#xml_archives\">XML Archives</a>\n  <dt><a href=\"#export\">Exporting Class Serialization</a>\n  <dt><a href=\"#static_libraries\">Static Libraries and Serialization</a>\n  <dt><a href=\"#dlls\">DLLS - Serialization and Runtime Linking</a>\n  <dt><a href=\"#plugins\">Plugins</a>\n  <dt><a href=\"#multi_threading\">Multi-Threading</a>\n  <dt><a href=\"#optimizations\">Optimizations</a>\n  <dt><a href=\"exceptions.html\">Archive Exceptions</a>\n  <dt><a href=\"exception_safety.html\">Exception Safety</a>\n</dl>\n\n<h3><a name=\"objecttracking\">Object Tracking</a></h3>\nDepending on how the class is used and other factors, serialized objects\nmay be tracked by memory address.  This prevents the same object from being\nwritten to or read from an archive multiple times. These stored addresses\ncan also be used to delete objects created during a loading process\nthat has been interrupted by throwing of an exception.  \n<p>\nThis could cause problems in \nprogams where the copies of different objects are saved from the same address.\n<pre><code>\ntemplate&lt;class Archive&gt;\nvoid save(boost::basic_oarchive  &amp; ar, const unsigned int version) const\n{\n    for(int i = 0; i &lt; 10; ++i){\n        A x = a[i];\n        ar &lt;&lt; x;\n    }\n}\n</code></pre>\nIn this case, the data to be saved exists on the stack.  Each iteration\nof the loop updates the value on the stack.  So although the data changes\neach iteration, the address of the data doesn't.  If a[i] is an array of\nobjects being tracked by memory address, the library will skip storing\nobjects after the first as it will be assumed that objects at the same address\nare really the same object.\n<p>\nTo help detect such cases, output archive operators expect to be passed\n<code style=\"white-space: normal\">const</code> reference arguments.\n<p>\nGiven this, the above code will invoke a compile time assertion.\nThe obvious fix in this example is to use\n<pre><code>\ntemplate&lt;class Archive&gt;\nvoid save(boost::basic_oarchive &amp; ar, const unsigned int version) const\n{\n    for(int i = 0; i &lt; 10; ++i){\n        ar &lt;&lt; a[i];\n    }\n}\n</code></pre>\nwhich will compile and run without problem.  \nThe usage of <code style=\"white-space: normal\">const</code> by the output archive operators\nwill ensure that the process of serialization doesn't\nchange the state of the objects being serialized.  An attempt to do this\nwould constitute augmentation of the concept of saving of state with\nsome sort of non-obvious side effect. This would almost surely be a mistake \nand a likely source of very subtle bugs.\n<p>\nUnfortunately, implementation issues currently prevent the detection of this kind of\nerror when the data item is wrapped as a name-value pair.\n<p>\nA similar problem can occur when different objects are loaded to an address\nwhich is different from the final location:\n<pre><code>\ntemplate&lt;class Archive&gt;\nvoid load(boost::basic_oarchive  &amp; ar, const unsigned int version) const\n{\n    for(int i = 0; i &lt; 10; ++i){\n        A x;\n        ar &gt;&gt; x;\n        std::m_set.insert(x);\n    }\n}\n</code></pre>\nIn this case, the address of <code>x</code> is the one that is tracked rather than\nthe address of the new item added to the set.  Left unaddressed\nthis will break the features that depend on tracking such as loading an object through a pointer.\nSubtle bugs will be introduced into the program.  This can be\naddressed by altering the above code thusly:\n\n<pre><code>\ntemplate&lt;class Archive&gt;\nvoid load(boost::basic_iarchive  &amp; ar, const unsigned int version) const\n{\n    for(int i = 0; i &lt; 10; ++i){\n        A x;\n        ar &gt;&gt; x;\n        std::pair&lt;std::set::const_iterator, bool&gt; result;\n        result = std::m_set.insert(x);\n        ar.reset_object_address(& (*result.first), &x);\n    }\n}\n</code></pre>\nThis will adjust the tracking information to reflect the final resting place of \nthe moved variable and thereby rectify the above problem.\n<p>\nIf it is known a priori that no pointer\nvalues are duplicated, overhead associated with object tracking can\nbe eliminated by setting the object tracking class serialization trait\nappropriately.\n<p>\nBy default, data types designated primitive by the\n<a target=\"detail\" href=\"traits.html#level\">Implementation Level</a>\nclass serialization trait are never tracked. If it is desired to\ntrack a shared primitive object through a pointer (e.g. a\n<code style=\"white-space: normal\">long</code> used as a reference count), It should be wrapped\nin a class/struct so that it is an identifiable type.\nThe alternative of changing the implementation level of a <code style=\"white-space: normal\">long</code>\nwould affect all <code style=\"white-space: normal\">long</code>s serialized in the whole\nprogram - probably not what one would intend.\n<p>\nIt is possible that we may want to track addresses even though\nthe object is never serialized through a pointer.  For example,\na virtual base class need be saved/loaded only once.  By setting\nthis serialization trait to <code style=\"white-space: normal\">track_always</code>, we can suppress \nredundant save/load operations.\n<pre><code>\nBOOST_CLASS_TRACKING(my_virtual_base_class, boost::serialization::track_always)\n</code></pre>\n\n<h3><a name=\"helpersupport\">Helper Support</a></h3>\nSome types, specially those with complicated lifetime behavior or limited\naccess to their internal state, might need or benefit from elaborate serialization\nalgorithms.  The prinicple motivating case is that of shared_ptr.  As instances\nare loaded, they have to be \"matched up\" with any other instances which have\nalready been loaded.  Thus, a table of previously loaded instances has to be\nmaintained while the archive containing the shared_ptr instances is being loaded.\nWithout maintaining such a table, the shared_ptr would be a serializable type.\n<p>\nTo implement this facility, one declares a <i>helper object</i>\nassociated to the current archive that can be used to store contextual\ninformation relevant to the particular type serialization algorithm.\n\n<pre><code>\ntemplate<class T>\nclass shared_ptr\n{\n   ...\n};\n\nBOOST_SERIALIZATION_SPLIT_FREE(shared_ptr)\n\nclass shared_ptr_serialization_helper\n{\n  // table of previously loaded shared_ptr\n  // lookup a shared_ptr from the object address\n  shared_ptr<T> lookup(const T *);\n  // insert a new shared_ptr\n  void insert<shared_ptr<T> >(const shared_ptr<T> *);\n};\n\nnamespace boost {\nnamespace serialization {\n\ntemplate&lt;class Archive&gt;\nvoid save(Archive &amp; ar, const shared_ptr &amp; x, const unsigned int /* version */)\n{\n    // save shared ptr\n    ...\n}\n\ntemplate&lt;class Archive&gt;\nvoid load(Archive &amp; ar, shared_ptr &amp; x, const unsigned int /* version */)\n{\n    // get a unique identifier.  Using a constant means that all shared pointers\n    // are held in the same set.  Thus we detect handle multiple pointers to the\n    // same value instances in the archive.\n    const void * shared_ptr_helper_id = 0;\n\n    shared_ptr_serialization_helper &amp; hlp =\n        ar.template get_helper&lt;shared_ptr_serialization_helper&gt;(helper_instance_id);\n\n    // load shared pointer object\n    ...\n\n    shared_ptr_serialization_helper &amp; hlp =\n        ar.template get_helper&lt;shared_ptr_serialization_helper&gt;(shared_ptr_helper_id);\n\n    // look up object in helper object\n    T * shared_object hlp.lookup(...);\n\n    // if found, return the one from the table\n\n    // load the shared_ptr data\n    shared_ptr<T> sp = ...\n\n    // and add it to the table\n    hlp.insert(sp);\n    // implement shared_ptr_serialization_helper load algorithm with the aid of hlp\n}\n\n} // namespace serialization\n} // namespace boost\n</code></pre>\n<code style=\"white-space: normal\">get_helper&lt;shared_ptr_serialization_helper&gt;();</code>\ncreates a helper object associated to the archive the first time it is invoked;\nsubsequent invocations return a reference to the object created in the first\nplace, so that <code style=\"white-space: normal\">hlp</code> can effectively be\nused to store contextual information persisting through the serialization\nof different <code style=\"white-space: normal\">complex_type</code> objects on\nthe same archive.\n\n<p>\nHelpers may be created for saving and loading archives.\nThe same program might have several different helpers or the same helper instantiated\nseparately from different parts of the program.  This is what makes the helper_instance_id\nnecessary.  In principle it could be any unique integer. In practice it seems\neasiest to use the address of the serialization function which contains it. The\nabove example uses this technique.\n\n<h3><a name=\"classinfo\">Class Information</a></h3>\nBy default, for each class serialized, class information is written to the archive.\nThis information includes version number, implementation level and tracking\nbehavior.  This is necessary so that the archive can be correctly\ndeserialized even if a subsequent version of the program changes\nsome of the current trait values for a class.  The space overhead for\nthis data is minimal.  There is a little bit of runtime overhead\nsince each class has to be checked to see if it has already had its\nclass information included in the archive.  In some cases, even this\nmight be considered too much.  This extra overhead can be eliminated\nby setting the \n<a target=\"detail\" href=\"traits.html#level\">implementation level</a>\nclass trait to: <code style=\"white-space: normal\">boost::serialization::object_serializable</code>. \n<p>\n<i>Turning off tracking and class information serialization will result\nin pure template inline code that in principle could be optimised down\nto a simple stream write/read.</i>  Elimination of all serialization overhead\nin this manner comes at a cost.  Once archives are released to users, the\nclass serialization traits cannot be changed without invalidating the old\narchives.  Including the class information in the archive assures us\nthat they will be readable in the future even if the class definition\nis revised.  A light weight structure such as a display pixel might be\ndeclared in a header like this:\n\n<pre><code>\n#include &lt;boost/serialization/serialization.hpp&gt;\n#include &lt;boost/serialization/level.hpp&gt;\n#include &lt;boost/serialization/tracking.hpp&gt;\n\n// a pixel is a light weight struct which is used in great numbers.\nstruct pixel\n{\n    unsigned char red, green, blue;\n    template&lt;class Archive&gt;\n    void serialize(Archive &amp; ar, const unsigned int /* version */){\n        ar &lt;&lt; red &lt;&lt; green &lt;&lt; blue;\n    }\n};\n\n// elminate serialization overhead at the cost of\n// never being able to increase the version.\nBOOST_CLASS_IMPLEMENTATION(pixel, boost::serialization::object_serializable);\n\n// eliminate object tracking (even if serialized through a pointer)\n// at the risk of a programming error creating duplicate objects.\nBOOST_CLASS_TRACKING(pixel, boost::serialization::track_never)\n</code></pre>\n\n<h3><a name=\"portability\">Archive Portability</a></h3>\nSeveral archive classes create their data in the form of text or a portable binary format.  \nIt should be possible to save such a class on one platform and load it on another.  \nThis is subject to a couple of conditions.\n<h4><a name=\"numerics\">Numerics</a></h4>\nThe architecture of the machine reading the archive must be able hold the data\nsaved.  For example, the gcc compiler reserves 4 bytes to store a variable of type\n<code style=\"white-space: normal\">wchar_t</code> while other compilers reserve only 2 bytes.  \nSo it's possible that   a value could be written that couldn't be represented by the loading program.  This is a\nfairly obvious situation and easily handled by using the numeric types in\n<a target=\"cstding\" href=\"../../../boost/cstdint.hpp\">&lt;boost/cstdint.hpp&gt;</a>\n<P>\nA special integral type is <code>std::size_t</code> which is a typedef\nof an integral types guaranteed to be large enough\nto hold the size of any collection, but its actual size can differ depending\non the platform. The \n<a href=\"wrappers.html#collection_size_type\"><code>collection_size_type</code></a>\nwrapper exists to enable a portable serialization of collection sizes by an archive.\nRecommended choices for a portable serialization of collection sizes are to \nuse either 64-bit or variable length integer representation.\n\n\n<h4><a name=\"traits\">Traits</a></h4>\nAnother potential problem is illustrated by the following example:\n<pre><code>\ntemplate&lt;class T&gt;\nstruct my_wrapper {\n    template&lt;class Archive&gt;\n    Archive & serialize ...\n};\n\n...\n\nclass my_class {\n    wchar_t a;\n    short unsigned b;\n    template&lt;class Archive&gt;\n    Archive & serialize(Archive & ar, unsigned int version){\n        ar & my_wrapper(a);\n        ar & my_wrapper(b);\n    }\n};\n</code></pre>\nIf <code style=\"white-space: normal\">my_wrapper</code> uses default serialization\ntraits there could be a problem.  With the default traits, each time a new type is\nadded to the archive, bookkeeping information is added. So in this example, the\narchive would include such bookkeeping information for \n<code style=\"white-space: normal\">my_wrapper&lt;wchar_t&gt;</code> and for\n<code style=\"white-space: normal\">my_wrapper&lt;short_unsigned&gt;</code>.\nOr would it?  What about compilers that treat \n<code style=\"white-space: normal\">wchar_t</code> as a\nsynonym for <code style=\"white-space: normal\">unsigned short</code>?\nIn this case there is only one distinct type - not two.  If archives are passed between\nprograms with compilers that differ in their treatment \nof <code style=\"white-space: normal\">wchar_t</code> the load operation will fail\nin a catastrophic way.\n<p>\nOne remedy for this is to assign serialization traits to the template\n<code style=\"white-space: normal\">my_template</code> such that class\ninformation for instantiations of this template is never serialized.  This \nprocess is described <a target=\"detail\" href=\"traits.html#templates\">above</a> and\nhas been used for <a target=\"detail\" href=\"wrappers.html#nvp\"><strong>Name-Value Pairs</strong></a>.\nWrappers would typically be assigned such traits.\n<p>\nAnother way to avoid this problem is to assign serialization traits\nto all specializations of the template <code style=\"white-space: normal\">my_wrapper</code>\nfor all primitive types so that class information is never saved.  This is what has\nbeen done for our implementation of serializations for STL collections.\n\n<h3><a name=\"binary_archives\">Binary Archives</a></h3>\nStandard stream i/o on some systems will expand linefeed characters to carriage-return/linefeed \non output. This creates a problem for binary archives.  The easiest way to handle this is to \nopen streams for binary archives in \"binary mode\" by using the flag \n<code style=\"white-space: normal\">ios::binary</code>.  If this is not done, the archive generated\nwill be unreadable.\n<p>\nUnfortunately, no way has been found to detect this error before loading the archive.  Debug builds\nwill assert when this is detected so that may be helpful in catching this error.\n\n<h3><a name=\"xml_archives\">XML Archives</a></h3>\nXML archives present a somewhat special case. \nXML format has a nested structure that maps well to the \"recursive class member visitor\" pattern \nused by the serialization system. However, XML differs from other formats in that it \nrequires a name for each data member. Our goal is to add this information to the \nclass serialization specification while still permiting the the serialization code to be \nused with any archive. This is achived by requiring that all data serialized to an XML archive\nbe serialized as a <a target=\"detail\" href=\"wrappers.html#nvp\">name-value pair</a>.\nThe first member is the name to be used as the XML tag for the\ndata item while the second is a reference to the data item itself. Any attempt to serialize data\nnot wrapped in a in a <a target=\"detail\" href=\"wrappers.html#nvp\">name-value pair</a> will\nbe trapped at compile time. The system is implemented in such a way that for other archive classes,\njust the value portion of the data is serialized. The name portion is discarded during compilation.\nSo by always using <a target=\"detail\" href=\"wrappers.html#nvp\">name-value pairs</a>, it will\nbe guaranteed that all data can be serialized to all archive classes with maximum efficiency.\n\n<h3><a name=\"export\">Exporting Class Serialization</a></h3>\n<a target=\"detail\" href=\"traits.html#export\">Elsewhere</a> in this manual, we have described \n<code style=\"white-space: normal\">BOOST_CLASS_EXPORT</code>. \nExport implies two things:\n<ul>\n<li>Instantiates code which is not otherwise referred to.\n<li>Associates an external identifier with the class to be serialized.\nThe fact that the class isn't explicitly referred to implies this\nrequirement.\n</ul>\nIn C++, usage of code not explicitly referred to is implemented via\nvirtual functions.  Hence, the need for export is implied by the \nusage of a derived class that is manipulated via a pointer or\nreference to its base class.\n\n<p>\n<code style=\"white-space: normal\">BOOST_CLASS_EXPORT</code> in the same\nsource module that includes any of the archive class headers will\ninstantiate code required to serialize polymorphic pointers of\nthe indicated type to the all those archive classes. If no\narchive class headers are included, then no code will be instantiated.\n\n<p>\nNote that the implemenation of this functionality requires\nthat the <code style=\"white-space: normal\">BOOST_CLASS_EXPORT</code>\nmacro appear <b>after</b> the inclusion of any archive\nclass headers for which code is to be instantiated.\nSo, code that uses <code style=\"white-space: normal\">BOOST_CLASS_EXPORT</code>\nwill look like the following:\n<pre><code>\n#include &lt;boost/archive/text_oarchive.hpp&gt;\n#include &lt;boost/archive/text_oarchive.hpp&gt;\n... // other archives\n\n#include \"a.hpp\" // header declaration for class a\nBOOST_CLASS_EXPORT(a)\n... // other class headers and exports\n</code></pre>\nThis will be true regardless of whether the code is part\nof a stand alone executable, a static library or\na dyanmic or shared library.  \n<p>\nIncluding\n<code style=\"white-space: normal\">BOOST_CLASS_EXPORT</code>\nin the \"a.hpp\" header itself as one would do with\nother serialization traits will make it difficult\nor impossible to follow the rule above regarding\ninclusion of archive headers before\n<code style=\"white-space: normal\">BOOST_CLASS_EXPORT</code>\nis invoked. This can best be addressed by using\n<code style=\"white-space: normal\">BOOST_CLASS_EXPORT_KEY</code>\nin the header declarations and\n<code style=\"white-space: normal\">BOOST_CLASS_EXPORT_IMPLEMENT</code>\nin the class definition file.\n\n<p>\nThis system has certain implications for placing code in static or shared\nlibraries.  Placing <code style=\"white-space: normal\">BOOST_CLASS_EXPORT</code>\nin library code will have no effect unless archive class headers are\nalso included.  So when building a library, one should include all headers\nfor all the archive classes which he anticipates using. Alternatively,\none can include headers for just the\n<a href=\"archive_reference.html#polymorphic\">Polymoprhic Archives</a>.\n\n<p>\nStrictly speaking, export should not be necessary if all pointer serialization\noccurs through the most derived class.  However, in order to detect\nwhat would be a catastophic error, the library traps ALL serializations through\na pointer to a polymorphic class which are not exported or otherwise registered.\nSo, in practice, be prepared to register or export all classes with one\nor more virtual functions which are serialized through a pointer. \n\n<p>\nNote that the implementation of this functionality depends upon vendor\nspecific extensions to the C++ language.  So, there is no guaranteed portability\nof programs which use this facility.  However, all C++ compilers which\nare tested with boost provide the required extensions.  The library\nincludes the extra declarations required by each of these compilers.\nIt's reasonable to expect that future C++ compilers will support\nthese extensions or something equivalent.\n\n<h3><a name=\"static_libraries\">Static Libraries and Serialization</a></h3>\nCode for serialization of data types can be saved in libraries\njust as it can for the rest of the type implementation.\nThis works well, and can save a huge amount of compilation time.\n<ul>\n<li>Only compile serialization definitions in the library.\n<li>Explicitly instantiate serialization code for ALL\narchive classes you intend to use in the library.\n<li>For exported types, only use <code style=\"white-space: normal\">BOOST_CLASS_EXPORT_KEY</code>\nin headers.\n<li>For exported types, only use <code style=\"white-space: normal\">BOOST_CLASS_EXPORT_IMPLEMENT</code>\nin definitions compiled in the library.  For any particular type,\nthere should be only one file which contains\n<code style=\"white-space: normal\">BOOST_CLASS_EXPORT_IMPLEMENT</code>\nfor that type.  This ensures that only one copy\nof serialization code will exist within the program.  It avoids\nwasted space and the possibility of having different\nversions of the serialization code in the same program.\nIncluding\n<code style=\"white-space: normal\">BOOST_CLASS_EXPORT_IMPLEMENT</code>\nin multiple files could result in a failure\nto link due to duplicated symbols or the throwing\nof a runtime exception.\n<li> Code for serialization should be only in the library,\n<li>Familiarize yourself with the <b>PIMPL</b> idiom.\n</ul>\nThis is illustrated by\n<a href = \"../example/demo_pimpl.cpp\" target=\"demo_pimpl\">\n<code style=\"white-space: normal\">demo_pimpl.cpp</code>\n</a>,\n<a href = \"../example/demo_pimpl_A.cpp\" target=\"demo_pimpl\">\n<code style=\"white-space: normal\">demo_pimpl_A.cpp</code>\n</a>\nand\n<a href = \"../example/demo_pimpl_A.hpp\" target=\"demo_pimpl\">\n<code style=\"white-space: normal\">demo_pimpl_A.hpp</code>\n</a>\nwhere implementation of serializaton is in a static library \ncompletely separate from the main program.\n\n<h3><a name=\"dlls\">DLLS - Serialization and Runtime Linking</a></h3>\nSerialization code can be placed in libraries to be linked at runtime.  That is,\ncode can be placed in DLLS(Windows) Shared Libraries(*nix), or static libraries\nas well as the main executable.  The best technique is the\nsame as that described above for libraries.  The serialization\nlibrary test suite includes the following programs\nto illustrate how this works:\n<p>\n\n<a href = \"../test/test_dll_simple.cpp\" target=\"test_dll_simple\">\n<code style=\"white-space: normal\">test_dll_simple</code>\n</a>,\nand\n<a href = \"../test/dll_a.cpp\" target=\"dll_a\">\n<code style=\"white-space: normal\">dll_a.cpp</code>\n</a>\nwhere implementation of serializaton is also completely separate\nfrom the main program but the code is loaded at runtime.  In this\nexample, this code is loaded automatically when the program which\nuses it starts up, but it could just as well be loaded and unloaded \nwith an OS dependent API call.\n<p>\nAlso included are\n<a href = \"../test/test_dll_exported.cpp\" target=\"test_dll_exported\">\n<code style=\"white-space: normal\">test_dll_exported.cpp</code>\n</a>,\nand\n<a href = \"../test/polymorphic_derived2.cpp\" target=\"polymorphic_derived2\">\n<code style=\"white-space: normal\">polymorphic_derived2.cpp</code>\n</a>\nwhich are similar to the above but include tests of the export\nand no_rtti facilities in the context of DLLS.\n<p>\nFor best results, write your code to conform to the following\nguidelines:\n<ul>\n  <li>Don't include <code>inline</code> code in classes used in DLLS.\nThis will generate duplicate code in the DLLS and mainline. This\nneedlessly duplicates code.  Worse, it makes is possible for \ndifferent versions of the same code to exist simultaneously.  This\ntype of error turns out to be excruciatingly difficult to debug.\nFinally, it opens the possibility that a module being referred to\nmight be explictly unloaded which would (hopefully) result in\na runtime error. This is another bug that is not always \nreproducible or easy to find. For class member templates use something like\n\n<pre><code>\ntemplate&lt;class Archive&gt;\nvoid serialize(Archive & ar, const unsigned int version);\n</code></pre>\nin the header, and\n\n<pre><code>\ntemplate&lt;class Archive&gt;\nvoid myclass::serialize(Archive & ar, const unsigned int version){\n\t...\n}\n\nBOOST_CLASS_EXPORT_IMPLEMENT(my_class)\n\n#include &lt;boost/archive/text_oarchive&gt;\n#include &lt;boost/archive/text_iarchive&gt;\ntemplate myclass::serialize(boost::archive::text_oarchive & ar, const unsigned int version);\ntemplate myclass::serialize(boost::archive::text_iarchive & ar, const unsigned int version);\n... // repeat for each archive class to be used.\n</code></pre>\nin the implementation file.  This will result in generation of all code\nrequired in only one place.  The library does not detect this type of error for you.\n  <li>If DLLS are to be loaded and unloaded explicitly (e.g. using <code>dlopen</code> in *nix or \n<code>LoadLibrary</code> in Windows).  Try to arrange that they are unloaded in the reverse\nsequence.  This should guarantee that problems are avoided even if the\nabove guideline hasn't been followed.\n\n</ul>\n\n<h3><a name=\"plugins\">Plugins</a></h3>\nIn order to implement the library, various facilities for runtime\nmanipulation of types at runtime were required.  These\nare <a target=\"detail\" href=\"extended_type_info.html\"><code>extended_type_info</code></a>\nfor associating classes with external identifying strings (<b>GUID</b>)\nand <a target=\"detail\" href=\"void_cast.html\"><code>void_cast</code></a>\nfor casting between pointers of related types.\n\nTo complete the functionality of \n<a target=\"detail\" href=\"extended_type_info.html\"><code>extended_type_info</code></a>\nthe ability to construct and destroy corresponding types has been\nadded.  In order to use this functionality, one must specify\nhow each type is created.  This should be done at the time\na class is exported.  So, a more complete example of the code above would be:\n\n<pre><code>\n#include &lt;boost/archive/text_oarchive.hpp&gt;\n#include &lt;boost/archive/text_oarchive.hpp&gt;\n... // other archives\n\n#include \"a.hpp\" // header declaration for class a\n\n// this class has a default constructor\nBOOST_SERIALIZATION_FACTORY_0(a)\n// as well as one that takes one integer argument\nBOOST_SERIALIZATION_FACTORY_1(a, int)\n\n// specify the GUID for this class\nBOOST_CLASS_EXPORT(a)\n... // other class headers and exports\n</code></pre>\n\nWith this in place, one can construct, serialize and destroy a class\nabout which is known only the <b>GUID</b> and a base class.\n\n\n<h3><a name=\"multi_threading\">Multi-Threading</a></h3>\nThe fundamental purpose of serialization would conflict with multiple \nthreads concurrently writing/reading from/to a single open archive instance.\nThe library implementation presumes that the application avoids such a situtation.\n<p>\nHowever, Writing/Reading different archives simultaneously\nin different tasks is permitted as each archive instance is (almost) \ncompletely independent from any other archive instance.  The only shared \ninformation is some type tables which have been implemented using a \nlock-free thread-safe \n<a target=\"detail\" href=\"singleton.html\">\n<code style=\"white-space: normal\">singleton</code>\n</a>\ndescribed elsewhere in this documentation.\n<p>\nThis singleton implementation guarantees that all of this shared\ninformation is initialized when the code module which contains\nit is loaded.  The serialization library takes care to\nensure that these data structures are not subsequently\nmodified. The only time there could be a problem would\nbe if code is loaded/unloaded while another task is\nserializing data.  This could only occur for types whose \nserialization is implemented in a dynamically loaded/unloaded DLL\nor shared library.  So if the following is avoided:\n<ul>\n    <li>Accessing the same archive instance from different tasks.\n    <li>Loading/Unloading DLLS or shared libraries while any archive\n    instances are open.\n</ul>\nThe library should be thread safe.\n\n<h3><a name=\"optimizations\">Optimizations</a></h3>\nIn performance critical applications that serialize large sets of contiguous data of homogeneous\ntypes one wants to avoid the overhead of serializing each element individually, which is\nthe motivation for the <a href=\"wrappers.html#arrays\"><code>array</code></a>\nwrapper.\n\nSerialization functions for data types containing contiguous arrays of homogeneous\ntypes, such as for <code>std::vector</code>, <code>std::valarray</code> or  \n<code>boost::multiarray</code> should serialize them using an\n<a href=\"wrappers.html#arrays\"><code>array</code></a> wrapper to make use of \nthese optimizations.\n\nArchive types that can provide optimized serialization for contiguous arrays of \nhomogeneous types should implement these by overloading the serialization of\nthe  <a href=\"wrappers.html#arrays\"><code>array</code></a> wrapper, as is done\nfor the binary archives.\n\n\n<h3><a href=\"exceptions.html\">Archive Exceptions</a></h3>\n<h3><a href=\"exception_safety.html\">Exception Safety</a></h3>\n\n<hr>\n<p><i>&copy; Copyright <a href=\"http://www.rrsd.com\">Robert Ramey</a> 2002-2004. \nDistributed under the Boost Software License, Version 1.0. (See\naccompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n</i></p>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpi/build/__init__.py": "import sys\nif sys.platform == 'linux2':\n    import DLFCN as dl\n    flags = sys.getdlopenflags()\n    sys.setdlopenflags(dl.RTLD_NOW|dl.RTLD_GLOBAL)\n    import mpi\n    sys.setdlopenflags(flags)\nelse:\n    import mpi\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/test/tools/console_test_runner/src/console_test_runner.cpp": "//  (C) Copyright Gennadiy Rozental 2005-2014.\n//  Distributed under the Boost Software License, Version 1.0.\n//  (See accompanying file LICENSE_1_0.txt or copy at \n//  http://www.boost.org/LICENSE_1_0.txt)\n\n//  See http://www.boost.org/libs/test for the library home page.\n\n// Boost.Test\n#ifndef BOOST_TEST_DYN_LINK\n#define BOOST_TEST_DYN_LINK\n#endif\n#include <boost/test/unit_test.hpp>\n\n// Boost.Runtime.Param\n#include <boost/test/utils/runtime/cla/named_parameter.hpp>\n#include <boost/test/utils/runtime/cla/parser.hpp>\n\nnamespace rt  = boost::runtime;\nnamespace cla = boost::runtime::cla;\n\n// STL\n#include <iostream>\n\n//_________________________________________________________________//\n\n// System API\n\nnamespace dyn_lib {\n\n#if defined(BOOST_WINDOWS) && !defined(BOOST_DISABLE_WIN32) // WIN32 API\n\n#include <windows.h>\n\ntypedef HINSTANCE handle;\n\ninline handle\nopen( std::string const& file_name )\n{\n    return LoadLibrary( file_name.c_str() );\n}\n\n//_________________________________________________________________//\n\ntemplate<typename TargType>\ninline TargType\nlocate_symbol( handle h, std::string const& symbol )\n{\n    return reinterpret_cast<TargType>( GetProcAddress( h, symbol.c_str() ) );\n}\n\n//_________________________________________________________________//\n\ninline void\nclose( handle h )\n{\n    if( h )\n        FreeLibrary( h );\n}\n\n//_________________________________________________________________//\n\ninline std::string\nerror()\n{\n    LPTSTR msg = NULL;\n\n    FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,\n                   NULL, \n                   GetLastError(), \n                   MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n                   (LPTSTR)&msg, \n                   0, NULL );\n\n    std::string res( msg );\n\n    if( msg )\n        LocalFree( msg );\n\n    return res;    \n}\n\n//_________________________________________________________________//\n\n#elif defined(BOOST_HAS_UNISTD_H) // POSIX API\n\n#include <dlfcn.h>\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\n\ntypedef void* handle;\n\ninline handle\nopen( std::string const& file_name )\n{\n    return dlopen( file_name.c_str(), RTLD_LOCAL | RTLD_LAZY );\n}\n\n//_________________________________________________________________//\n\ntemplate<typename TargType>\ninline TargType\nlocate_symbol( handle h, std::string const& symbol )\n{\n    return reinterpret_cast<TargType>( dlsym( h, symbol.c_str() ) );\n}\n\n//_________________________________________________________________//\n\ninline void\nclose( handle h )\n{\n    if( h )\n        dlclose( h );\n}\n\n//_________________________________________________________________//\n\ninline std::string\nerror()\n{\n    return dlerror();\n}\n\n//_________________________________________________________________//\n\n#else\n\n#error \"Dynamic library API is unknown\"\n\n#endif\n\n} // namespace dyn_lib\n\n//____________________________________________________________________________//\n\nstatic std::string test_lib_name;\nstatic std::string init_func_name( \"init_unit_test\" );\n\ndyn_lib::handle test_lib_handle;\n\nbool load_test_lib()\n{\n    typedef bool (*init_func_ptr)();\n    init_func_ptr init_func;\n\n    test_lib_handle = dyn_lib::open( test_lib_name );\n    if( !test_lib_handle )\n        throw std::logic_error( std::string(\"Fail to load test library: \")\n                                    .append( dyn_lib::error() ) );\n\n    init_func =  dyn_lib::locate_symbol<init_func_ptr>( test_lib_handle, init_func_name );\n    \n    if( !init_func )\n        throw std::logic_error( std::string(\"Can't locate test initilization function \")\n                                    .append( init_func_name )\n                                    .append( \": \" )\n                                    .append( dyn_lib::error() ) );\n   \n    return (*init_func)();\n}\n\n//____________________________________________________________________________//\n\nint main( int argc, char* argv[] )\n{\n    try {\n        cla::parser P;\n\n        P - cla::ignore_mismatch \n            << cla::named_parameter<rt::cstring>( \"test\" ) - (cla::prefix = \"--\")\n            << cla::named_parameter<rt::cstring>( \"init\" ) - (cla::prefix = \"--\",cla::optional);\n\n        P.parse( argc, argv );\n\n        assign_op( test_lib_name, P.get( \"test\" ), 0 );\n        if( P[\"init\"] )\n            assign_op( init_func_name, P.get( \"init\" ), 0 );\n\n        int res = ::boost::unit_test::unit_test_main( &load_test_lib, argc, argv );\n\n        ::boost::unit_test::framework::clear();\n        dyn_lib::close( test_lib_handle );\n\n        return res;\n    }\n    catch( rt::logic_error const& ex ) {\n        std::cout << \"Fail to parse command line arguments: \" << ex.msg() << std::endl;\n        return -1;\n    }\n}\n\n//____________________________________________________________________________//\n\n// EOF\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/dll/doc/limitations.qbk": "[/\n    Copyright 2014 Renato Tegon Forti, Antony Polukhin\n    Copyright 2015 Antony Polukhin\n    Distributed under the Boost Software License, Version 1.0.\n    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n/]\n\n[section:limitations Limitations]\n\nSome platforms and compilers do not provide all the required functionality to have a fully functional Boost.DLL.\nSuch compilers are mentioned in this section along with possible workarounds for those limitations.\n\n[section Exporting weak symbols (Fails on MinGW, Android)]\nSome versions of Android, `MinGW` and `ld` on Windows platform fail to mix `__dllexport__` and `weak` attributes. This leads us to situation,\nwhere we must explicitly specify translation unit in which [macroref BOOST_DLL_ALIAS] is instantiated, making all other\n[macroref BOOST_DLL_ALIAS] declarations with that alias name an `extern` variable.\n\nUnit that must hold an instance of [macroref BOOST_DLL_ALIAS] must define [macroref BOOST_DLL_FORCE_ALIAS_INSTANTIATION]\nbefore including any of the Boost.DLL library headers.\n\nYou may explicitly disable export of weak symbols using [macroref BOOST_DLL_FORCE_NO_WEAK_EXPORTS]. This may be usefull for working\naround linker problems or to test your program for compatability with linkers that do not support exporting weak symbols.\n[endsect]\n\n[section User defined section names (Fails on SunOS + Oracle Solaris Studio Compilers)]\nSome platforms ignore section attributes, so that querying for a symbols in a specified section using [classref boost::dll::library_info] may return nothing.\n[endsect]\n\n[section:multithread Thread safe library loading (Fails on FreeBSD, MacOS, iOS and some other)]\nOn some platforms `dlopen`,`dlclose` and some other functions assume that they won't be called concurrently.\n\nPlatforms that certaly have that issue are FreeBSD, MacOS, iOS.\n\nPlatforms that certaly do not have such issue are Windows, Linux+glibc, Android, QNX.\n\nOther platforms are under question. If you're using one of the platforms that are not listed (for example Linux+busybox),\nyou may run the `shared_library_concurrent_load_test` test to detect the issue:\n```\ncd boost_folder/libs/dll/test\n../../../b2 -a shared_library_concurrent_load_test\n```\n[endsect]\n\n[section:nested Nested Function Definitions]\n\nIf a function is defined inside the class-definition it may be interpreted as always-inline which can lead to the function not being exported at all. This does however differ between between compilers.\n\n[endsect]\n\n[endsect]\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/dll/doc/faq.qbk": "[/\n    Copyright 2014 Renato Tegon Forti, Antony Polukhin\n    Copyright 2015 Antony Polukhin\n    Distributed under the Boost Software License, Version 1.0.\n    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n/]\n\n[section F.A.Q.]\n\n* [*Question:]  Is Boost.DLL thread-safe?\n  * [*Answer:]  Some platforms allow concurrent calls to `dlopen` like functions.\nFor those platforms Boost.DLL is safe in the manner as all the C++ Standard Library containers are: it is\nsafe to use different instances of shared_library from different threads even if all the instances loaded the same library. On other platforms it\nis not safe to concurrently call any of the functions from Boost.DLL (even a `shared_library::location()` call triggers a race condition).\nSee [link boost_dll.limitations.multithread Limitations, Thread safe library loading].\n\n[pre\n]\n\n* [*Question:]  Why on Linux symbols from one plugin are seen in another? Can't get symbol with same name from right plugin!\n  * [*Answer:]  You've run into the symbol shadowing problem. Compile your plugins with \"-fvisibility=hidden\"\nflag and take a look to the Tutorial section.\n\n[pre\n]\n\n* [*Question:]  How Unicode (Windows) is handled?\n  * [*Answer:]  Boost.DLL supports Unicode, so that you could provide Unicode paths to it.\n\n[pre\n]\n\n* [*Question:]  Can I open an executable file?\n  * [*Answer:]  Yes, you can. Symbols need be exported using in the executable using `BOOST_SYMBOL_EXPORT`\nor `BOOST_DLL_ALIAS`. You can call `shared_library(program_location())` to load yourself. Refer to\nthe Tutorial section for more info. You can also query executables, just provide a path to the executable\nto `library_info` class.\n\n[pre\n]\n\n* [*Question:]  What if I specify wrong type in `shared_library::get<T>` or `import<T>`?\n  * [*Answer:]  Usually you'll end up with `Segmentation Fault`. However it is safe to make types\nmore strict, for example making `const int` from an `int` will not harm.\n\n[pre\n]\n\n* [*Question:]  Does your library guarantee ABI stability of methods?\n  * [*Answer:]  Library only guarantees that alias names created using the `BOOST_DLL_ALIAS` macros\nwill not change with the change of compiler or platform. You must take care of functions ABI and API\nstability by your own.\n\n[pre\n]\n\n* [*Question:]  Are there any function signature restrictions for the exported/imported functions?\n  * [*Answer:]  No. You may import/export functions with any signature and any return parameter.\n\n[pre\n]\n\n* [*Question:]  I have 2 plugins that use same shared library. Would be the shared library loaded twice?\n  * [*Answer:]  No. Pugins will share the shared library instance.\n\n[pre\n]\n\n* [*Question:]  I have 2 plugins each of them must work with it's own version of `libsome_library` shared library. How to achieve that?\n  * [*Answer:]  Avoid such situations by statically linking in the libsome_library into each plugin and loading plugins with `load_mode::rtld_deepbind`.\n\n[pre\n]\n\n* [*Question:]  How to load a shared object from memory??\n  * [*Answer:]  All existing OS avoid loading shared libraries directly from userspace memory, so you'll find no syscall for such case. Currently Boost.DLL provides no means for honest loading shared objects from memory. This requires reimplementing dynamic linker logic in userspace for all the platforms, which is a huge amount of work and very error-prone. However working patches are welcomed!\n\nWorkaround would be to write plugin into a temporary file in RAM and load plugin from it:\n```\n#include <boost/filesystem.hpp>\n#include <boost/dll.hpp>\nusing namespace boost;\n\ndll:shared_library load_from_memory(unsigned char* data, std::size_t size, const filesystem::path& tmp_plugin_path = filesystem::unique_path() / \"libplugin.so\") {\n    const filesystem::path plugin_location = filesystem::temp_directory_path() / tmp_plugin_path;\n    filesystem::create_directories(plugin_location.parent_path());\n    filesystem::ofstream ofs(plugin_location, std::ios::out|std::ios::bin|std::ios::trunc);\n    ofs.write(data, size);\n\n    return dll::shared_library(plugin_location);\n}\n```\n\nBut there's no guarantee that `filesystem::temp_directory_path()` will actually write to RAM, that's very platform dependent.\n\n[pre\n]\n  \n* [*Question:]  I have found a bug, how do I notify?\n  * [*Answer:]  Create an [@https://github.com/apolukhin/Boost.DLL/issues issue at GitHub] with a detailed description.\n\n[endsect]\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/dll/doc/autodoc_shared_library_core.xml": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<library-reference id=\"shared_library_reference\"><title>Shared Library Reference</title><header name=\"boost/dll/alias.hpp\">\n<para>Includes alias methods and macro. You can include this header or boost/dll/shared_library.hpp to reduce dependencies in case you do not use the refcountable functions. </para><namespace name=\"boost\">\n<namespace name=\"dll\">\n\n\n\n\n\n\n\n\n\n\n\n\n</namespace>\n</namespace>\n<macro name=\"BOOST_DLL_FORCE_ALIAS_INSTANTIATION\"><description><para>Define this macro to explicitly specify translation unit in which alias must be instantiated. See section 'Limitations' for more info. You may find usage examples in source codes of almost each tutorial. Must be used in code, when <link linkend=\"BOOST_DLL_FORCE_NO_WEAK_EXPORTS\">BOOST_DLL_FORCE_NO_WEAK_EXPORTS</link> is defined </para></description></macro>\n<macro name=\"BOOST_DLL_FORCE_NO_WEAK_EXPORTS\"><description><para>Define this macro to disable exporting weak symbols and start using the <link linkend=\"BOOST_DLL_FORCE_ALIAS_INSTANTIATION\">BOOST_DLL_FORCE_ALIAS_INSTANTIATION</link>. This may be usefull for working around linker problems or to test your program for compatability with linkers that do not support export of weak symbols. </para></description></macro>\n<macro name=\"BOOST_DLL_SELECTANY\"><purpose>Macro that allows linker to select any occurrence of this symbol instead of failing with 'multiple definitions' error at linktime. </purpose><description><para>This macro does not work on Android, IBM XL C/C++ and MinGW+Windows because of linker problems with exporting weak symbols (See <ulink url=\"https://code.google.com/p/android/issues/detail?id=70206,\">https://code.google.com/p/android/issues/detail?id=70206,</ulink> <ulink url=\"https://sourceware.org/bugzilla/show_bug.cgi?id=17480\">https://sourceware.org/bugzilla/show_bug.cgi?id=17480</ulink>) </para></description></macro>\n<macro name=\"BOOST_DLL_SECTION\" kind=\"functionlike\"><macro-parameter name=\"SectionName\"><description><para>Name of the section. Must be a valid C identifier without quotes not longer than 8 bytes. </para></description></macro-parameter><macro-parameter name=\"Permissions\"><description><para>Can be \"read\" or \"write\" (without quotes!). </para></description></macro-parameter><purpose>Macro that puts symbol to a specific section. On MacOS all the sections are put into \"__DATA\" segment. </purpose><description><para>\n</para></description></macro>\n<macro name=\"BOOST_DLL_ALIAS\" kind=\"functionlike\"><macro-parameter name=\"FunctionOrVar\"><description><para>Function or variable for which an alias must be made. </para></description></macro-parameter><macro-parameter name=\"AliasName\"><description><para>Name of the alias. Must be a valid C identifier.</para></description></macro-parameter><purpose>Makes an alias name for exported function or variable. </purpose><description><para>This macro is useful in cases of long mangled C++ names. For example some <computeroutput>void boost::foo(std::sting)</computeroutput> function name will change to something like <computeroutput>N5boostN3foosE</computeroutput> after mangling. Importing function by <computeroutput>N5boostN3foosE</computeroutput> name does not looks user friendly, especially assuming the fact that different compilers have different mangling schemes. AliasName is the name that won't be mangled and can be used as a portable import name.</para><para>Can be used in any namespace, including global. FunctionOrVar must be fully qualified, so that address of it could be taken. Multiple different aliases for a single variable/function are allowed.</para><para>Make sure that AliasNames are unique per library/executable. Functions or variables in global namespace must not have names same as AliasNames.</para><para>Same AliasName in different translation units must point to the same FunctionOrVar.</para><para>Puts all the aliases into the <emphasis role=\"bold\">\"boostdll\"</emphasis> read only section of the binary. Equal to  <link linkend=\"BOOST_DLL_ALIAS_SECTIONED\">BOOST_DLL_ALIAS_SECTIONED</link>(FunctionOrVar, AliasName, boostdll).</para><para>\n<emphasis role=\"bold\">Example:</emphasis> <programlisting language=\"c++\">namespace foo {\n  void bar(std::string&amp;);\n\n  BOOST_DLL_ALIAS(foo::bar, foo_bar)\n}\n\nBOOST_DLL_ALIAS(foo::bar, foo_bar_another_alias_name)\n</programlisting></para><para><emphasis role=\"bold\">See: <link linkend=\"BOOST_DLL_ALIAS_SECTIONED\">BOOST_DLL_ALIAS_SECTIONED</link></emphasis> for making alias in a specific section. </para></description></macro>\n<macro name=\"BOOST_DLL_ALIAS_SECTIONED\" kind=\"functionlike\"><macro-parameter name=\"FunctionOrVar\"><description><para>Function or variable for which an alias must be made. </para></description></macro-parameter><macro-parameter name=\"AliasName\"><description><para>Name of the alias. Must be a valid C identifier. </para></description></macro-parameter><macro-parameter name=\"SectionName\"><description><para>Name of the section. Must be a valid C identifier without quotes not longer than 8 bytes.</para></description></macro-parameter><purpose>Same as <link linkend=\"BOOST_DLL_ALIAS\">BOOST_DLL_ALIAS</link> but puts alias name into the user specified section. </purpose><description><para>\n<emphasis role=\"bold\">Example:</emphasis> <programlisting language=\"c++\">namespace foo {\n  void bar(std::string&amp;);\n\n  BOOST_DLL_ALIAS_SECTIONED(foo::bar, foo_bar, sect_1) // section \"sect_1\" now exports \"foo_bar\"\n}\n</programlisting> </para></description></macro>\n<macro name=\"BOOST_DLL_AUTO_ALIAS\" kind=\"functionlike\"><macro-parameter name=\"FunctionOrVar\"><description><para>Function or variable for which an unmangled alias must be made.</para></description></macro-parameter><purpose>Exports variable or function with unmangled alias name. </purpose><description><para>This macro is useful in cases of long mangled C++ names. For example some <computeroutput>void boost::foo(std::sting)</computeroutput> function name will change to something like <computeroutput>N5boostN3foosE</computeroutput> after mangling. Importing function by <computeroutput>N5boostN3foosE</computeroutput> name does not looks user friendly, especially assuming the fact that different compilers have different mangling schemes.*</para><para>Must be used in scope where FunctionOrVar declared. FunctionOrVar must be a valid C name, which means that it must not contain <computeroutput>::</computeroutput>.</para><para>Functions or variables in global namespace must not have names same as FunctionOrVar.</para><para>Puts all the aliases into the <emphasis role=\"bold\">\"boostdll\"</emphasis> read only section of the binary. Almost same as  <link linkend=\"BOOST_DLL_ALIAS\">BOOST_DLL_ALIAS</link>(FunctionOrVar, FunctionOrVar).</para><para>\n<emphasis role=\"bold\">Example:</emphasis> <programlisting language=\"c++\">namespace foo {\n  void bar(std::string&amp;);\n  BOOST_DLL_AUTO_ALIAS(bar)\n}\n</programlisting></para><para><emphasis role=\"bold\">See: <link linkend=\"BOOST_DLL_ALIAS\">BOOST_DLL_ALIAS</link></emphasis> for making an alias with different names. </para></description></macro>\n</header>\n<header name=\"boost/dll/library_info.hpp\">\n<para>Contains only the <classname alt=\"boost::dll::library_info\">boost::dll::library_info</classname> class that is capable of extracting different information from binaries. </para><namespace name=\"boost\">\n<namespace name=\"dll\">\n<class name=\"library_info\"><inherit access=\"private\">noncopyable</inherit><purpose>Class that is capable of extracting different information from a library or binary file. Currently understands ELF, MACH-O and PE formats on all the platforms. </purpose><method-group name=\"public member functions\">\n<method name=\"sections\"><type>std::vector&lt; std::string &gt;</type><description><para>\n</para></description><returns><para>List of sections that exist in binary file. </para></returns></method>\n<method name=\"symbols\"><type>std::vector&lt; std::string &gt;</type><description><para>\n</para></description><returns><para>List of all the exportable symbols from all the sections that exist in binary file. </para></returns></method>\n<method name=\"symbols\"><type>std::vector&lt; std::string &gt;</type><parameter name=\"section_name\"><paramtype>const char *</paramtype><description><para>Name of the section from which symbol names must be returned. </para></description></parameter><description><para>\n\n</para></description><returns><para>List of symbols from the specified section. </para></returns></method>\n<method name=\"symbols\"><type>std::vector&lt; std::string &gt;</type><parameter name=\"section_name\"><paramtype>const std::string &amp;</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></method>\n</method-group>\n<constructor specifiers=\"explicit\"><parameter name=\"library_path\"><paramtype>const boost::filesystem::path &amp;</paramtype><description><para>Path to the binary file from which the info must be extracted. </para></description></parameter><parameter name=\"throw_if_not_native_format\"><paramtype>bool</paramtype><default>true</default><description><para>Throw an exception if this file format is not supported by OS. </para></description></parameter><description><para>Opens file with specified path and prepares for information extraction. \n</para></description></constructor>\n<destructor><description><para>\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></destructor>\n</class>\n\n\n\n\n\n\n\n\n\n\n\n</namespace>\n</namespace>\n</header>\n<header name=\"boost/dll/runtime_symbol_info.hpp\">\n<para>Provides methods for getting acceptable by <classname alt=\"boost::dll::shared_library\">boost::dll::shared_library</classname> location of symbol, source line or program. </para><namespace name=\"boost\">\n<namespace name=\"dll\">\n\n\n\n\n<overloaded-function name=\"symbol_location_ptr\"><signature><type>boost::filesystem::path</type><template>\n          <template-type-parameter name=\"T\"/>\n        </template><parameter name=\"ptr_to_symbol\"><paramtype>T</paramtype><description><para>Pointer to symbol which location is to be determined. </para></description></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter></signature><signature><type>boost::filesystem::path</type><template>\n          <template-type-parameter name=\"T\"/>\n        </template><parameter name=\"ptr_to_symbol\"><paramtype>T</paramtype></parameter></signature><description><para>On success returns full path and name to the binary object that holds symbol pointed by ptr_to_symbol.</para><para>\n\n\n<emphasis role=\"bold\">Examples:</emphasis> <programlisting language=\"c++\">int main() {\n   dll::symbol_location_ptr(std::set_terminate(0));       // returns \"/some/path/libmy_terminate_handler.so\"\n   dll::symbol_location_ptr(::signal(SIGSEGV, SIG_DFL));  // returns \"/some/path/libmy_symbol_handler.so\"\n}\n</programlisting> </para></description><returns><para>Path to the binary object that holds symbol or empty path in case error. </para></returns><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. Overload that does not accept boost::system::error_code also throws boost::system::system_error.</simpara></throws></overloaded-function>\n\n<overloaded-function name=\"symbol_location\"><signature><type>boost::filesystem::path</type><template>\n          <template-type-parameter name=\"T\"><purpose><para>Type of the symbol, must not be explicitly specified. </para></purpose></template-type-parameter>\n        </template><parameter name=\"symbol\"><paramtype>const T &amp;</paramtype><description><para>Symbol which location is to be determined. </para></description></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter></signature><signature><type>boost::filesystem::path</type><template>\n          <template-type-parameter name=\"T\"/>\n        </template><parameter name=\"symbol\"><paramtype>const T &amp;</paramtype></parameter></signature><description><para>On success returns full path and name of the binary object that holds symbol.</para><para>\n\n\n\n<emphasis role=\"bold\">Examples:</emphasis> <programlisting language=\"c++\">int var;\nvoid foo() {}\n\nint main() {\n   dll::symbol_location(var);                     // returns program location\n   dll::symbol_location(foo);                     // returns program location\n   dll::symbol_location(std::cerr);               // returns location of libstdc++: \"/usr/lib/x86_64-linux-gnu/libstdc++.so.6\"\n   dll::symbol_location(std::placeholders::_1);   // returns location of libstdc++: \"/usr/lib/x86_64-linux-gnu/libstdc++.so.6\"\n   dll::symbol_location(std::puts);               // returns location of libc: \"/lib/x86_64-linux-gnu/libc.so.6\"\n}\n</programlisting> </para></description><returns><para>Path to the binary object that holds symbol or empty path in case error. </para></returns><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. Overload that does not accept boost::system::error_code also throws boost::system::system_error.</simpara></throws></overloaded-function>\n\n<overloaded-function name=\"this_line_location\"><signature><type>boost::filesystem::path</type><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter></signature><signature><type>boost::filesystem::path</type></signature><description><para>On success returns full path and name of the binary object that holds the current line of code (the line in which the <computeroutput>this_line_location()</computeroutput> method was called).</para><para>\n\n</para></description><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. Overload that does not accept boost::system::error_code also throws boost::system::system_error. </simpara></throws></overloaded-function>\n\n<overloaded-function name=\"program_location\"><signature><type>boost::filesystem::path</type><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter></signature><signature><type>boost::filesystem::path</type></signature><description><para>On success returns full path and name of the currently running program (the one which contains the <computeroutput>main()</computeroutput> function).</para><para>Return value can be used as a parameter for <classname alt=\"boost::dll::shared_library\">shared_library</classname>. See Tutorial \"Linking plugin into the executable\" for usage example. Flag '-rdynamic' must be used when linking the plugin into the executable on Linux OS.</para><para>\n\n</para></description><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. Overload that does not accept boost::system::error_code also throws boost::system::system_error. </simpara></throws></overloaded-function>\n\n</namespace>\n</namespace>\n</header>\n<header name=\"boost/dll/shared_library.hpp\">\n<para>Contains the <classname alt=\"boost::dll::shared_library\">boost::dll::shared_library</classname> class, core class for all the DLL/DSO operations. </para><namespace name=\"boost\">\n<namespace name=\"dll\">\n<class name=\"shared_library\"><purpose>This class can be used to load a Dynamic link libraries (DLL's) or Shared Libraries, also know as dynamic shared objects (DSO's) and get their exported symbols (functions and variables). </purpose><description><para><classname alt=\"boost::dll::shared_library\">shared_library</classname> instances share reference count to an actual loaded DLL/DSO, so it is safe and memory efficient to have multiple instances of <classname alt=\"boost::dll::shared_library\">shared_library</classname> referencing the same DLL/DSO even if those instances were loaded using different paths (relative + absolute) referencing the same object.</para><para>On Linux/POSIX link with library \"dl\". \"-fvisibility=hidden\" flag is also recommended for use on Linux/POSIX. </para></description><typedef name=\"native_handle_t\"><type>platform_specific</type></typedef>\n<method-group name=\"public member functions\">\n<method name=\"assign\"><type><classname>shared_library</classname> &amp;</type><parameter name=\"lib\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype><description><para>A library to copy. </para></description></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter><description><para>Makes *this share the same shared object as lib. If *this is loaded, then unloads it.</para><para>\n\n\n</para></description><postconditions><para>lib.location() == this-&gt;location(), lib == *this </para></postconditions><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. </simpara></throws></method>\n<method name=\"assign\"><type><classname>shared_library</classname> &amp;</type><parameter name=\"lib\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype><description><para>A library instance to assign from. </para></description></parameter><description><para>Makes *this share the same shared object as lib. If *this is loaded, then unloads it.</para><para>\n\n\n</para></description><postconditions><para>lib.location() == this-&gt;location() </para></postconditions><throws><simpara><classname>boost::system::system_error</classname> in case of insufficient memory. </simpara></throws></method>\n<method name=\"load\"><type>void</type><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype><description><para>Library file name. Can handle std::string, const char*, std::wstring, const wchar_t* or boost::filesystem::path. </para></description></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype><default>load_mode::default_mode</default><description><para>A mode that will be used on library load. </para></description></parameter><description><para>Loads a library by specified path with a specified mode.</para><para>Note that if some library is already loaded in this instance, load will call unload() and then load the new provided library.</para><para>\n\n</para></description><throws><simpara><classname>boost::system::system_error</classname> in case of insufficient memory. </simpara></throws></method>\n<method name=\"load\"><type>void</type><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype><description><para>Library file name. Can handle std::string, const char*, std::wstring, const wchar_t* or boost::filesystem::path. </para></description></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype><default>load_mode::default_mode</default><description><para>A mode that will be used on library load. </para></description></parameter><description><para>Loads a library by specified path with a specified mode.</para><para>Note that if some library is already loaded in this instance, load will call unload() and then load the new provided library.</para><para>\n\n</para></description><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. </simpara></throws></method>\n<method name=\"load\"><type>void</type><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></method>\n<method name=\"unload\" cv=\"noexcept\"><type>void</type><description><para>Unloads a shared library. If library was loaded multiple times by different instances, the actual DLL/DSO won't be unloaded until there is at least one instance that references the DLL/DSO.</para><para>\n\n</para></description><postconditions><para>this-&gt;is_loaded() returns false. </para></postconditions><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"is_loaded\" cv=\"const noexcept\"><type>bool</type><description><para>Check if an library is loaded.</para><para>\n\n</para></description><returns><para>true if a library has been loaded. </para></returns><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"operator!\" cv=\"const noexcept\"><type>bool</type><description><para>Check if an library is not loaded.</para><para>\n\n</para></description><returns><para>true if a library has not been loaded. </para></returns><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"conversion-operator\" cv=\"const noexcept\" specifiers=\"explicit\"><type>bool</type><description><para>Check if an library is loaded.</para><para>\n\n</para></description><returns><para>true if a library has been loaded. </para></returns><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"has\" cv=\"const noexcept\"><type>bool</type><parameter name=\"symbol_name\"><paramtype>const char *</paramtype><description><para>Null-terminated symbol name. Can handle std::string, char*, const char*. </para></description></parameter><description><para>Search for a given symbol on loaded library. Works for all symbols, including alias names.</para><para>\n\n\n</para></description><returns><para><computeroutput>true</computeroutput> if the loaded library contains a symbol with a given name. </para></returns><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"has\" cv=\"const noexcept\"><type>bool</type><parameter name=\"symbol_name\"><paramtype>const std::string &amp;</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></method>\n<method name=\"get\" cv=\"const\"><type>boost::enable_if_c&lt; boost::is_member_pointer&lt; T &gt;::value||boost::is_reference&lt; T &gt;::value, T &gt;::type</type><template>\n          <template-type-parameter name=\"T\"><purpose><para>Type of the symbol that we are going to import. Must be explicitly specified. </para></purpose></template-type-parameter>\n        </template><parameter name=\"symbol_name\"><paramtype>const std::string &amp;</paramtype><description><para>Null-terminated symbol name. Can handle std::string, char*, const char*. </para></description></parameter><description><para>Returns reference to the symbol (function or variable) with the given name from the loaded library. This call will always succeed and throw nothing if call to <computeroutput>has(const char* )</computeroutput> member function with the same symbol name returned <computeroutput>true</computeroutput>.</para><para><emphasis role=\"bold\">Example:</emphasis> <programlisting language=\"c++\">int&amp; i0 = lib.get&lt;int&gt;(\"integer_name\");\nint&amp; i1 = *lib.get&lt;int*&gt;(\"integer_alias_name\");\n</programlisting></para><para>\n\n\n\n</para></description><returns><para>Reference to the symbol. </para></returns><throws><simpara><classname>boost::system::system_error</classname> if symbol does not exist or if the DLL/DSO was not loaded. </simpara></throws></method>\n<method name=\"get\" cv=\"const\"><type>boost::disable_if_c&lt; boost::is_member_pointer&lt; T &gt;::value||boost::is_reference&lt; T &gt;::value, T &amp; &gt;::type</type><template>\n          <template-type-parameter name=\"T\"/>\n        </template><parameter name=\"symbol_name\"><paramtype>const std::string &amp;</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></method>\n<method name=\"get\" cv=\"const\"><type>boost::enable_if_c&lt; boost::is_member_pointer&lt; T &gt;::value||boost::is_reference&lt; T &gt;::value, T &gt;::type</type><template>\n          <template-type-parameter name=\"T\"/>\n        </template><parameter name=\"symbol_name\"><paramtype>const char *</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></method>\n<method name=\"get\" cv=\"const\"><type>boost::disable_if_c&lt; boost::is_member_pointer&lt; T &gt;::value||boost::is_reference&lt; T &gt;::value, T &amp; &gt;::type</type><template>\n          <template-type-parameter name=\"T\"/>\n        </template><parameter name=\"symbol_name\"><paramtype>const char *</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></method>\n<method name=\"get_alias\" cv=\"const\"><type>T &amp;</type><template>\n          <template-type-parameter name=\"T\"><purpose><para>Type of the symbol that we are going to import. Must be explicitly specified.. </para></purpose></template-type-parameter>\n        </template><parameter name=\"alias_name\"><paramtype>const char *</paramtype><description><para>Null-terminated alias symbol name. Can handle std::string, char*, const char*. </para></description></parameter><description><para>Returns a symbol (function or variable) from a shared library by alias name of the symbol.</para><para><emphasis role=\"bold\">Example:</emphasis> <programlisting language=\"c++\">int&amp; i = lib.get_alias&lt;int&gt;(\"integer_alias_name\");\n</programlisting></para><para>\n\n\n</para></description><throws><simpara><classname>boost::system::system_error</classname> if symbol does not exist or if the DLL/DSO was not loaded. </simpara></throws></method>\n<method name=\"get_alias\" cv=\"const\"><type>T &amp;</type><template>\n          <template-type-parameter name=\"T\"/>\n        </template><parameter name=\"alias_name\"><paramtype>const std::string &amp;</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></method>\n<method name=\"native\" cv=\"const noexcept\"><type>native_handle_t</type><description><para>Returns the native handler of the loaded library.</para><para>\n</para></description><returns><para>Platform-specific handle. </para></returns></method>\n<method name=\"location\" cv=\"const\"><type>boost::filesystem::path</type><description><para>Returns full path and name of this shared object.</para><para><emphasis role=\"bold\">Example:</emphasis> <programlisting language=\"c++\">shared_library lib(\"test_lib.dll\");\nfilesystem::path full_path = lib.location(); // C:\\Windows\\System32\\test_lib.dll\n</programlisting></para><para>\n\n</para></description><returns><para>Full path to the shared library. </para></returns><throws><simpara><classname>boost::system::system_error</classname> </simpara></throws></method>\n<method name=\"location\" cv=\"const\"><type>boost::filesystem::path</type><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter><description><para>Returns full path and name of shared module.</para><para><emphasis role=\"bold\">Example:</emphasis> <programlisting language=\"c++\">shared_library lib(\"test_lib.dll\");\nfilesystem::path full_path = lib.location(); // C:\\Windows\\System32\\test_lib.dll\n</programlisting></para><para>\n\n\n</para></description><returns><para>Full path to the shared library. </para></returns><throws><simpara><classname>std::bad_alloc.</classname> </simpara></throws></method>\n<method name=\"swap\" cv=\"noexcept\"><type>void</type><parameter name=\"rhs\"><paramtype><classname>shared_library</classname> &amp;</paramtype><description><para>Library to swap with. </para></description></parameter><description><para>Swaps two libraries. Does not invalidate existing symbols and functions loaded from libraries.</para><para>\n\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n</method-group>\n<constructor cv=\"noexcept\"><description><para>Creates in anstance that does not reference any DLL/DSO.</para><para>\n\n</para></description><postconditions><para>this-&gt;is_loaded() returns false. </para></postconditions><throws><simpara><classname>Nothing.</classname> </simpara></throws></constructor>\n<constructor><parameter name=\"lib\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype><description><para>A library to copy. </para></description></parameter><description><para>Copy constructor that increments the reference count of an underlying shared library. Same as calling constructor with <computeroutput>lib.location()</computeroutput> parameter.</para><para>\n\n\n</para></description><postconditions><para>lib == *this </para></postconditions><throws><simpara><classname>boost::system::system_error</classname> in case of insufficient memory. </simpara></throws></constructor>\n<constructor><parameter name=\"lib\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype><description><para>A shared library to copy. </para></description></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter><description><para>Copy constructor that increments the reference count of an underlying shared library. Same as calling constructor with <computeroutput>lib.location(), ec</computeroutput> parameters.</para><para>\n\n\n</para></description><postconditions><para>lib == *this </para></postconditions><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. </simpara></throws></constructor>\n<constructor cv=\"noexcept\"><parameter name=\"lib\"><paramtype><classname>shared_library</classname> &amp;&amp;</paramtype><description><para>A shared library to move from. </para></description></parameter><description><para>Move constructor. Does not invalidate existing symbols and functions loaded from lib.</para><para>\n\n\n</para></description><postconditions><para>lib.is_loaded() returns false, this-&gt;is_loaded() return true. </para></postconditions><throws><simpara><classname>Nothing.</classname> </simpara></throws></constructor>\n<constructor specifiers=\"explicit\"><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype><description><para>Library file name. Can handle std::string, const char*, std::wstring, const wchar_t* or boost::filesystem::path. </para></description></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype><default>load_mode::default_mode</default><description><para>A mode that will be used on library load. </para></description></parameter><description><para>Loads a library by specified path with a specified mode.</para><para>\n\n</para></description><throws><simpara><classname>boost::system::system_error</classname> in case of insufficient memory. </simpara></throws></constructor>\n<constructor><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype><description><para>Library file name. Can handle std::string, const char*, std::wstring, const wchar_t* or boost::filesystem::path. </para></description></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype><default>load_mode::default_mode</default><description><para>A mode that will be used on library load. </para></description></parameter><description><para>Loads a library by specified path with a specified mode.</para><para>\n\n</para></description><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. </simpara></throws></constructor>\n<constructor><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></constructor>\n<copy-assignment><type><classname>shared_library</classname> &amp;</type><parameter name=\"lib\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype><description><para>A shared library to assign from. </para></description></parameter><description><para>Assignment operator. If this-&gt;is_loaded() then calls this-&gt;unload(). Does not invalidate existing symbols and functions loaded from lib.</para><para>\n\n\n</para></description><postconditions><para>lib == *this </para></postconditions><throws><simpara><classname>boost::system::system_error</classname> in case of insufficient memory. </simpara></throws></copy-assignment>\n<copy-assignment cv=\"noexcept\"><type><classname>shared_library</classname> &amp;</type><parameter name=\"lib\"><paramtype><classname>shared_library</classname> &amp;&amp;</paramtype><description><para>A library to move from. </para></description></parameter><description><para>Move assignment operator. If this-&gt;is_loaded() then calls this-&gt;unload(). Does not invalidate existing symbols and functions loaded from lib.</para><para>\n\n\n</para></description><postconditions><para>lib.is_loaded() returns false. </para></postconditions><throws><simpara><classname>Nothing.</classname> </simpara></throws></copy-assignment>\n<destructor><description><para>Destroys the object by calling <computeroutput>unload()</computeroutput>. If library was loaded multiple times by different instances, the actual DLL/DSO won't be unloaded until there is at least one instance that references the DLL/DSO.</para><para>\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></destructor>\n<method-group name=\"public static functions\">\n<method name=\"suffix\" specifiers=\"static\"><type>boost::filesystem::path</type><description><para>Returns suffix of shared module: in a call to load() or the constructor/load.</para><para>\n</para></description><returns><para>The suffix od shared module: \".dll\" (Windows), \".so\" (Unix/Linux/BSD), \".dylib\" (MacOS/IOS) </para></returns></method>\n</method-group>\n</class><function name=\"operator==\"><type>bool</type><parameter name=\"lhs\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype></parameter><parameter name=\"rhs\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype></parameter><purpose>Very fast equality check that compares the actual DLL/DSO objects. Throws nothing. </purpose></function>\n<function name=\"operator!=\"><type>bool</type><parameter name=\"lhs\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype></parameter><parameter name=\"rhs\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype></parameter><purpose>Very fast inequality check that compares the actual DLL/DSO objects. Throws nothing. </purpose></function>\n<function name=\"operator&lt;\"><type>bool</type><parameter name=\"lhs\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype></parameter><parameter name=\"rhs\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype></parameter><purpose>Compare the actual DLL/DSO objects without any guarantee to be stable between runs. Throws nothing. </purpose></function>\n<function name=\"swap\"><type>void</type><parameter name=\"lhs\"><paramtype><classname>shared_library</classname> &amp;</paramtype></parameter><parameter name=\"rhs\"><paramtype><classname>shared_library</classname> &amp;</paramtype></parameter><purpose>Swaps two shared libraries. Does not invalidate symbols and functions loaded from libraries. Throws nothing. </purpose></function>\n\n\n\n\n\n\n\n\n</namespace>\n</namespace>\n</header>\n<header name=\"boost/dll/shared_library_load_mode.hpp\">\n<para>Contains only the boost::dll::load_mode::type enum and operators related to it. </para><namespace name=\"boost\">\n<namespace name=\"dll\">\n<namespace name=\"load_mode\">\n<enum name=\"type\"><enumvalue name=\"default_mode\"><description><para>Default open mode. See the <emphasis role=\"bold\">Default:</emphasis> comments below to find out the flags that are enabled by default. </para></description></enumvalue><enumvalue name=\"dont_resolve_dll_references\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> Windows</para><para><emphasis role=\"bold\">Default:</emphasis> disabled</para><para>If this value is used, and the executable module is a DLL, the system does not call DllMain for process and thread initialization and termination. Also, the system does not load additional executable modules that are referenced by the specified module.</para><para>Note Do not use this value; it is provided only for backward compatibility. If you are planning to access only data or resources in the DLL, use LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or LOAD_LIBRARY_AS_IMAGE_RESOURCE or both. </para></description></enumvalue><enumvalue name=\"load_ignore_code_authz_level\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> Windows</para><para><emphasis role=\"bold\">Default:</emphasis> disabled</para><para>If this value is used, the system does not check AppLocker rules or apply Software Restriction Policies for the DLL. </para></description></enumvalue><enumvalue name=\"load_with_altered_search_path\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> Windows</para><para><emphasis role=\"bold\">Default:</emphasis> disabled</para><para>If this value is used and lpFileName specifies an absolute path, the system uses the alternate file search strategy.</para><para>This value cannot be combined with any LOAD_LIBRARY_SEARCH flag. </para></description></enumvalue><enumvalue name=\"rtld_lazy\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> POSIX</para><para><emphasis role=\"bold\">Default:</emphasis> enabled</para><para>Relocations shall be performed at an implementation-defined time, ranging from the time of the dlopen() call until the first reference to a given symbol occurs.</para><para>Specifying RTLD_LAZY should improve performance on implementations supporting dynamic symbol binding as a process may not reference all of the functions in any given object. And, for systems supporting dynamic symbol resolution for normal process execution, this behavior mimics the normal handling of process execution. </para></description></enumvalue><enumvalue name=\"rtld_now\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> POSIX</para><para><emphasis role=\"bold\">Default:</emphasis> disabled</para><para>All necessary relocations shall be performed when the object is first loaded. This may waste some processing if relocations are performed for functions that are never referenced. This behavior may be useful for plugins that need to know as soon as an object is loaded that all symbols referenced during execution are available. </para></description></enumvalue><enumvalue name=\"rtld_global\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> POSIX</para><para><emphasis role=\"bold\">Default:</emphasis> disabled</para><para>The object's symbols shall be made available for the relocation processing of any other object. In addition, symbol lookup using dlopen(0, mode) and an associated dlsym() allows objects loaded with this mode to be searched. </para></description></enumvalue><enumvalue name=\"rtld_local\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> POSIX</para><para><emphasis role=\"bold\">Default:</emphasis> enabled</para><para>The object's symbols shall not be made available for the relocation processing of any other object.</para><para>This is a default Windows behavior that can not be changed. </para></description></enumvalue><enumvalue name=\"rtld_deepbind\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> POSIX (requires glibc &gt;= 2.3.4)</para><para><emphasis role=\"bold\">Default:</emphasis> disabled</para><para>The object will use its own symbols in preference to global symbols with the same name contained in libraries that have already been loaded. This flag is not specified in POSIX.1-2001. </para></description></enumvalue><enumvalue name=\"append_decorations\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> Windows, POSIX</para><para><emphasis role=\"bold\">Default:</emphasis> disabled</para><para>Append a platform specific extension and prefix to shared library filename before trying to load it. If load attempt fails, try to load with exactly specified name.</para><para><emphasis role=\"bold\">Example:</emphasis> <programlisting language=\"c++\">// Opens `./my_plugins/plugin1.dll` on Windows, `./my_plugins/libplugin1.so` on Linux, `./my_plugins/libplugin1.dylib` on MacOS.\n// If that fails, loads `./my_plugins/plugin1`\n<classname alt=\"boost::dll::shared_library\">boost::dll::shared_library</classname> lib(\"./my_plugins/plugin1\", load_mode::append_decorations);\n</programlisting> </para></description></enumvalue><enumvalue name=\"search_system_folders\"><description><para><emphasis role=\"bold\">Platforms:</emphasis> Windows, POSIX</para><para><emphasis role=\"bold\">Default:</emphasis> disabled</para><para>Allow loading from system folders if path to library contains no parent path. </para></description></enumvalue><description><para>Library load modes.</para><para>Each of system family provides own modes. Flags not supported by a particular platform will be silently ignored.</para><para>For a detailed description of platform specific options see: <ulink url=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx\">Windows specific options</ulink>, <ulink url=\"http://pubs.opengroup.org/onlinepubs/000095399/functions/dlopen.html\">POSIX specific options</ulink>. </para></description></enum>\n<function name=\"operator|\"><type>BOOST_CONSTEXPR type</type><parameter name=\"left\"><paramtype>type</paramtype></parameter><parameter name=\"right\"><paramtype>type</paramtype></parameter><purpose>Free operators for load_mode::type flag manipulation. </purpose></function>\n<function name=\"operator|=\"><type>BOOST_CXX14_CONSTEXPR type &amp;</type><parameter name=\"left\"><paramtype>type &amp;</paramtype></parameter><parameter name=\"right\"><paramtype>type</paramtype></parameter></function>\n<function name=\"operator&amp;\"><type>BOOST_CONSTEXPR type</type><parameter name=\"left\"><paramtype>type</paramtype></parameter><parameter name=\"right\"><paramtype>type</paramtype></parameter></function>\n<function name=\"operator&amp;=\"><type>BOOST_CXX14_CONSTEXPR type &amp;</type><parameter name=\"left\"><paramtype>type &amp;</paramtype></parameter><parameter name=\"right\"><paramtype>type</paramtype></parameter></function>\n<function name=\"operator^\"><type>BOOST_CONSTEXPR type</type><parameter name=\"left\"><paramtype>type</paramtype></parameter><parameter name=\"right\"><paramtype>type</paramtype></parameter></function>\n<function name=\"operator^=\"><type>BOOST_CXX14_CONSTEXPR type &amp;</type><parameter name=\"left\"><paramtype>type &amp;</paramtype></parameter><parameter name=\"right\"><paramtype>type</paramtype></parameter></function>\n<function name=\"operator~\"><type>BOOST_CONSTEXPR type</type><parameter name=\"left\"><paramtype>type</paramtype></parameter></function>\n</namespace>\n\n\n\n\n\n\n\n\n\n\n\n\n</namespace>\n</namespace>\n</header>\n<header name=\"boost/dll/smart_library.hpp\">\n<para>Contains the <classname alt=\"boost::dll::experimental::smart_library\">boost::dll::experimental::smart_library</classname> class for loading mangled symbols. </para><para><warning><para>Extremely experimental! Requires C++14! Will change in next version of Boost! boost/dll/smart_library.hpp is not included in boost/dll.hpp </para></warning>\n</para><namespace name=\"boost\">\n<namespace name=\"dll\">\n<namespace name=\"experimental\">\n<class name=\"smart_library\"><purpose>This class is an extension of <classname alt=\"boost::dll::shared_library\">shared_library</classname>, which allows to load C++ symbols. </purpose><description><para>This class allows type safe loading of overloaded functions, member-functions, constructors and variables. It also allows to overwrite classes so they can be loaded, while being declared with different names.</para><para><warning><para>Is still very experimental.</para></warning>\nCurrently known limitations:</para><para>Member functions must be defined outside of the class to be exported. That is: <programlisting language=\"c++\">//not exported:\nstruct BOOST_SYMBOL_EXPORT my_class { void func() {}};\n//exported\nstruct BOOST_SYMBOL_EXPORT my_class { void func();};\nvoid my_class::func() {};\n</programlisting></para><para>With the current analysis, the first version does get exported in MSVC. MinGW also does export it, BOOST_SYMBOL_EXPORT is written before it. To allow this on windows one can use BOOST_DLL_MEMBER_EXPORT for this, so that MinGW and MSVC can provide those functions. This does however not work with gcc on linux.</para><para>Direct initialization of members. On linux the following member variable i will not be initialized when using the allocating contructor: <programlisting language=\"c++\">struct BOOST_SYMBOL_EXPORT my_class { int i; my_class() : i(42) {} };\n</programlisting></para><para>This does however not happen when the value is set inside the constructor function. </para></description><typedef name=\"mangled_storage\"><type><emphasis>unspecified</emphasis></type></typedef>\n<method-group name=\"public member functions\">\n<method name=\"shared_lib\" cv=\"const\"><type>const <classname>shared_library</classname> &amp;</type><description><para>Get the underlying <classname alt=\"boost::dll::shared_library\">shared_library</classname> </para></description></method>\n<method name=\"symbol_storage\" cv=\"const\"><type>const mangled_storage &amp;</type><description><para>Acces to the mangled storage, which is created on construction.</para><para>\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"symbol_storage\"><type>mangled_storage &amp;</type><purpose>Overload, for current development. </purpose></method>\n<method name=\"load\"><type>void</type><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype><description><para>Library file name. Can handle std::string, const char*, std::wstring, const wchar_t* or boost::filesystem::path. </para></description></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype><default>load_mode::default_mode</default><description><para>A mode that will be used on library load. </para></description></parameter><description><para>Loads a library by specified path with a specified mode.</para><para>Note that if some library is already loaded in this instance, load will call unload() and then load the new provided library.</para><para>\n\n</para></description><throws><simpara><classname>boost::system::system_error</classname> in case of insufficient memory. </simpara></throws></method>\n<method name=\"load\"><type>void</type><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype><description><para>Library file name. Can handle std::string, const char*, std::wstring, const wchar_t* or boost::filesystem::path. </para></description></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype><default>load_mode::default_mode</default><description><para>A mode that will be used on library load. </para></description></parameter><description><para>Loads a library by specified path with a specified mode.</para><para>Note that if some library is already loaded in this instance, load will call unload() and then load the new provided library.</para><para>\n\n</para></description><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. </simpara></throws></method>\n<method name=\"load\"><type>void</type><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></method>\n<method name=\"get_variable\" cv=\"const\"><type>T &amp;</type><template>\n          <template-type-parameter name=\"T\"><purpose><para>Type of the variable </para></purpose></template-type-parameter>\n        </template><parameter name=\"name\"><paramtype>const std::string &amp;</paramtype><description><para>Name of the variable </para></description></parameter><description><para>Load a variable from the referenced library.</para><para>Unlinke shared_library::get this function will also load scoped variables, which also includes static class members.</para><para><note><para>When mangled, MSVC will also check the type.</para></note>\n\n\n\n\n</para></description><returns><para>A reference to the variable of type T.</para></returns><throws><simpara><classname>boost::system::system_error</classname> if symbol does not exist or if the DLL/DSO was not loaded. </simpara></throws></method>\n<method name=\"get_function\" cv=\"const\"><type>Func &amp;</type><template>\n          <template-type-parameter name=\"Func\"><purpose><para>Type of the function, required for determining the overload </para></purpose></template-type-parameter>\n        </template><parameter name=\"name\"><paramtype>const std::string &amp;</paramtype><description><para>Name of the function. </para></description></parameter><description><para>Load a function from the referenced library.</para><para><emphasis role=\"bold\">Example:</emphasis> </para><para><programlisting language=\"c++\">smart_library lib(\"test_lib.so\");\ntypedef int      (&amp;add_ints)(int, int);\ntypedef double (&amp;add_doubles)(double, double);\nadd_ints     f1 = lib.get_function&lt;int(int, int)&gt;         (\"func_name\");\nadd_doubles  f2 = lib.get_function&lt;double(double, double)&gt;(\"func_name\");\n</programlisting></para><para><note><para>When mangled, MSVC will also check the return type.</para></note>\n\n\n\n\n</para></description><returns><para>A reference to the function of type F.</para></returns><throws><simpara><classname>boost::system::system_error</classname> if symbol does not exist or if the DLL/DSO was not loaded. </simpara></throws></method>\n<method name=\"get_mem_fn\" cv=\"const\"><type><emphasis>unspecified</emphasis></type><template>\n          <template-type-parameter name=\"Class\"><purpose><para>The class the function is a member of. If Class is const, the function will be assumed as taking a const this-pointer. The same applies for volatile. </para></purpose></template-type-parameter>\n          <template-type-parameter name=\"Func\"><purpose><para>Signature of the function, required for determining the overload </para></purpose></template-type-parameter>\n        </template><parameter name=\"name\"><paramtype>const std::string &amp;</paramtype><description><para>Name of the function. </para></description></parameter><description><para>Load a member-function from the referenced library.</para><para><emphasis role=\"bold\">Example</emphasis> (import class is MyClass, which is available inside the library and the host):</para><para><programlisting language=\"c++\">smart_library lib(\"test_lib.so\");\n\ntypedef int      MyClass(*func)(int);\ntypedef int   MyClass(*func_const)(int) const;\n\nadd_ints     f1 = lib.get_mem_fn&lt;MyClass, int(int)&gt;              (\"MyClass::function\");\nadd_doubles  f2 = lib.get_mem_fn&lt;const MyClass, double(double)&gt;(\"MyClass::function\");\n</programlisting></para><para><note><para>When mangled, MSVC will also check the return type.</para></note>\n\n\n\n\n</para></description><returns><para>A pointer to the member-function with the signature provided</para></returns><throws><simpara><classname>boost::system::system_error</classname> if symbol does not exist or if the DLL/DSO was not loaded. </simpara></throws></method>\n<method name=\"get_constructor\" cv=\"const\"><type>constructor&lt; Signature &gt;</type><template>\n          <template-type-parameter name=\"Signature\"><purpose><para>Signature of the function, required for determining the overload. The return type is the class which this is the constructor of. </para></purpose></template-type-parameter>\n        </template><description><para>Load a constructor from the referenced library.</para><para><emphasis role=\"bold\">Example</emphasis> (import class is MyClass, which is available inside the library and the host):</para><para><programlisting language=\"c++\">smart_library lib(\"test_lib.so\");\n\nconstructor&lt;MyClass(int)    f1 = lib.get_mem_fn&lt;MyClass(int)&gt;();\n</programlisting></para><para>\n\n\n</para></description><returns><para>A constructor object.</para></returns><throws><simpara><classname>boost::system::system_error</classname> if symbol does not exist or if the DLL/DSO was not loaded. </simpara></throws></method>\n<method name=\"get_destructor\" cv=\"const\"><type>destructor&lt; Class &gt;</type><template>\n          <template-type-parameter name=\"Class\"><purpose><para>The class whichs destructor shall be loaded </para></purpose></template-type-parameter>\n        </template><description><para>Load a destructor from the referenced library.</para><para><emphasis role=\"bold\">Example</emphasis> (import class is MyClass, which is available inside the library and the host):</para><para><programlisting language=\"c++\">smart_library lib(\"test_lib.so\");\n\ndestructor&lt;MyClass&gt;     f1 = lib.get_mem_fn&lt;MyClass&gt;();\n</programlisting></para><para>\n\n\n</para></description><returns><para>A destructor object.</para></returns><throws><simpara><classname>boost::system::system_error</classname> if symbol does not exist or if the DLL/DSO was not loaded. </simpara></throws></method>\n<method name=\"get_type_info\" cv=\"const\"><type>const std::type_info &amp;</type><template>\n          <template-type-parameter name=\"Class\"><purpose><para>The class whichs typeinfo shall be loaded </para></purpose></template-type-parameter>\n        </template><description><para>Load the typeinfo of the given type.</para><para><emphasis role=\"bold\">Example</emphasis> (import class is MyClass, which is available inside the library and the host):</para><para><programlisting language=\"c++\">smart_library lib(\"test_lib.so\");\n\nstd::type_info &amp;ti = lib.get_Type_info&lt;MyClass&gt;();\n</programlisting></para><para>\n\n\n</para></description><returns><para>A reference to a type_info object.</para></returns><throws><simpara><classname>boost::system::system_error</classname> if symbol does not exist or if the DLL/DSO was not loaded. </simpara></throws></method>\n<method name=\"add_type_alias\"><type>void</type><template>\n          <template-type-parameter name=\"Alias\"/>\n        </template><parameter name=\"name\"><paramtype>const std::string &amp;</paramtype><description><para>Name of the class the alias is for.</para></description></parameter><description><para>This function can be used to add a type alias.</para><para>This is to be used, when a class shall be imported, which is not declared on the host side.</para><para>Example: <programlisting language=\"c++\">smart_library lib(\"test_lib.so\");\n\nlib.add_type_alias&lt;MyAlias&gt;(\"MyClass\"); //when using MyAlias, the library will look for MyClass\n\n//get the destructor of MyClass\ndestructor&lt;MyAlias&gt; dtor = lib.get_destructor&lt;MyAlias&gt;();\n</programlisting></para><para>\n<note><para>If the alias-type is not large enough for the imported class, it will result in undefined behaviour. </para></note>\n<warning><para>The alias will only be applied for the type signature, it will not replace the token in the scoped name. </para></warning>\n</para></description></method>\n<method name=\"unload\" cv=\"noexcept\"><type>void</type><description><para>Unloads a shared library. If library was loaded multiple times by different instances, the actual DLL/DSO won't be unloaded until there is at least one instance that references the DLL/DSO.</para><para>\n\n</para></description><postconditions><para>this-&gt;is_loaded() returns false. </para></postconditions><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"is_loaded\" cv=\"const noexcept\"><type>bool</type><description><para>Check if an library is loaded.</para><para>\n\n</para></description><returns><para>true if a library has been loaded. </para></returns><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"operator!\" cv=\"const noexcept\"><type>bool</type><description><para>Check if an library is not loaded.</para><para>\n\n</para></description><returns><para>true if a library has not been loaded. </para></returns><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"conversion-operator\" cv=\"const noexcept\" specifiers=\"explicit\"><type>bool</type><purpose>bool() const </purpose><description><para>bool() const  </para></description></method>\n<method name=\"has\" cv=\"const noexcept\"><type>bool</type><parameter name=\"symbol_name\"><paramtype>const char *</paramtype><description><para>Null-terminated symbol name. Can handle std::string, char*, const char*. </para></description></parameter><description><para>Search for a given symbol on loaded library. Works for all symbols, including alias names.</para><para>\n\n\n</para></description><returns><para><computeroutput>true</computeroutput> if the loaded library contains a symbol with a given name. </para></returns><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n<method name=\"has\" cv=\"const noexcept\"><type>bool</type><parameter name=\"symbol_name\"><paramtype>const std::string &amp;</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></method>\n<method name=\"assign\"><type><classname>smart_library</classname> &amp;</type><parameter name=\"lib\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype><description><para>A library instance to assign from. </para></description></parameter><description><para>Makes *this share the same shared object as lib. If *this is loaded, then unloads it.</para><para>\n\n\n</para></description><postconditions><para>lib.location() == this-&gt;location() </para></postconditions><throws><simpara><classname>boost::system::system_error</classname> in case of insufficient memory. </simpara></throws></method>\n<method name=\"swap\" cv=\"noexcept\"><type>void</type><parameter name=\"rhs\"><paramtype><classname>smart_library</classname> &amp;</paramtype><description><para>Library to swap with. </para></description></parameter><description><para>Swaps two libraries. Does not invalidate existing symbols and functions loaded from libraries.</para><para>\n\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></method>\n</method-group>\n<constructor cv=\"noexcept\"><description><para>Creates in anstance that does not reference any DLL/DSO.</para><para>\n\n</para></description><postconditions><para>this-&gt;is_loaded() returns false. </para></postconditions><throws><simpara><classname>Nothing.</classname> </simpara></throws></constructor>\n<constructor><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype><description><para>Library file name. Can handle std::string, const char*, std::wstring, const wchar_t* or boost::filesystem::path. </para></description></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype><default>load_mode::default_mode</default><description><para>A mode that will be used on library load. </para></description></parameter><description><para>Loads a library by specified path with a specified mode.</para><para>\n\n</para></description><throws><simpara><classname>boost::system::system_error</classname> in case of insufficient memory. </simpara></throws></constructor>\n<constructor><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype><description><para>Library file name. Can handle std::string, const char*, std::wstring, const wchar_t* or boost::filesystem::path. </para></description></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype><description><para>Variable that will be set to the result of the operation. </para></description></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype><default>load_mode::default_mode</default><description><para>A mode that will be used on library load. </para></description></parameter><description><para>Loads a library by specified path with a specified mode.</para><para>\n\n</para></description><throws><simpara><classname>std::bad_alloc</classname> in case of insufficient memory. </simpara></throws></constructor>\n<constructor><parameter name=\"lib_path\"><paramtype>const boost::filesystem::path &amp;</paramtype></parameter><parameter name=\"mode\"><paramtype>load_mode::type</paramtype></parameter><parameter name=\"ec\"><paramtype>boost::system::error_code &amp;</paramtype></parameter><description><para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para></description></constructor>\n<constructor cv=\"noexcept\"><parameter name=\"lib\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype><description><para>A <classname alt=\"boost::dll::experimental::smart_library\">smart_library</classname> to move from.</para></description></parameter><description><para>copy a <classname alt=\"boost::dll::experimental::smart_library\">smart_library</classname> object.</para><para>\n\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></constructor>\n<constructor cv=\"noexcept\"><parameter name=\"lib\"><paramtype><classname>smart_library</classname> &amp;&amp;</paramtype><description><para>A <classname alt=\"boost::dll::experimental::smart_library\">smart_library</classname> to move from.</para></description></parameter><description><para>Move a <classname alt=\"boost::dll::experimental::smart_library\">smart_library</classname> object.</para><para>\n\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></constructor>\n<constructor specifiers=\"explicit\" cv=\"noexcept\"><parameter name=\"lib\"><paramtype>const <classname>shared_library</classname> &amp;</paramtype><description><para>A <classname alt=\"boost::dll::shared_library\">shared_library</classname> to move from.</para></description></parameter><description><para>Construct from a <classname alt=\"boost::dll::shared_library\">shared_library</classname> object.</para><para>\n\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></constructor>\n<constructor specifiers=\"explicit\" cv=\"noexcept\"><parameter name=\"lib\"><paramtype><classname>shared_library</classname> &amp;&amp;</paramtype><description><para>A <classname alt=\"boost::dll::shared_library\">shared_library</classname> to move from.</para></description></parameter><description><para>Construct from a <classname alt=\"boost::dll::shared_library\">shared_library</classname> object.</para><para>\n\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></constructor>\n<destructor><description><para>Destroys the <classname alt=\"boost::dll::experimental::smart_library\">smart_library</classname>. <computeroutput>unload()</computeroutput> is called if the DLL/DSO was loaded. If library was loaded multiple times by different instances of <classname alt=\"boost::dll::shared_library\">shared_library</classname>, the actual DLL/DSO won't be unloaded until there is at least one instance of <classname alt=\"boost::dll::shared_library\">shared_library</classname>.</para><para>\n</para></description><throws><simpara><classname>Nothing.</classname> </simpara></throws></destructor>\n</class><function name=\"operator==\"><type>bool</type><parameter name=\"lhs\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype></parameter><parameter name=\"rhs\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype></parameter><purpose>Very fast equality check that compares the actual DLL/DSO objects. Throws nothing. </purpose></function>\n<function name=\"operator!=\"><type>bool</type><parameter name=\"lhs\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype></parameter><parameter name=\"rhs\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype></parameter><purpose>Very fast inequality check that compares the actual DLL/DSO objects. Throws nothing. </purpose></function>\n<function name=\"operator&lt;\"><type>bool</type><parameter name=\"lhs\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype></parameter><parameter name=\"rhs\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype></parameter><purpose>Compare the actual DLL/DSO objects without any guarantee to be stable between runs. Throws nothing. </purpose></function>\n<function name=\"swap\"><type>void</type><parameter name=\"lhs\"><paramtype><classname>smart_library</classname> &amp;</paramtype></parameter><parameter name=\"rhs\"><paramtype><classname>smart_library</classname> &amp;</paramtype></parameter><purpose>Swaps two shared libraries. Does not invalidate symbols and functions loaded from libraries. Throws nothing. </purpose></function>\n<function name=\"get\"><type>void</type><template>\n          <template-type-parameter name=\"T\"/>\n          <template-type-parameter name=\"T2\"/>\n        </template><parameter name=\"sm\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype><description><para>A reference to the <classname alt=\"boost::dll::experimental::smart_library\">smart_library</classname> </para></description></parameter><parameter name=\"name\"><paramtype>const std::string &amp;</paramtype><description><para>The name of the entity to import </para></description></parameter><description><para>Helper functions for overloads.</para><para>Gets either a variable, function or member-function, depending on the signature.</para><para><programlisting language=\"c++\">smart_library sm(\"lib.so\");\nget&lt;int&gt;(sm, \"space::value\"); //import a variable\nget&lt;void(int)&gt;(sm, \"space::func\"); //import a function\nget&lt;some_class, void(int)&gt;(sm, \"space::class_::mem_fn\"); //import a member function\n</programlisting></para><para>\n</para></description></function>\n<function name=\"get\"><type>T &amp;</type><template>\n          <template-type-parameter name=\"T\"/>\n        </template><parameter name=\"sm\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype></parameter><parameter name=\"name\"><paramtype>const std::string &amp;</paramtype></parameter><parameter name=\"\"><paramtype>typename boost::enable_if&lt; boost::is_object&lt; T &gt;, T &gt;::type *</paramtype><default>nullptr</default></parameter></function>\n<function name=\"get\"><type>auto</type><template>\n          <template-type-parameter name=\"T\"/>\n        </template><parameter name=\"sm\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype></parameter><parameter name=\"name\"><paramtype>const std::string &amp;</paramtype></parameter><parameter name=\"\"><paramtype>typename boost::enable_if&lt; boost::is_function&lt; T &gt;&gt;::type *</paramtype><default>nullptr</default></parameter></function>\n<function name=\"get\"><type>auto</type><template>\n          <template-type-parameter name=\"Class\"/>\n          <template-type-parameter name=\"Signature\"/>\n        </template><parameter name=\"sm\"><paramtype>const <classname>smart_library</classname> &amp;</paramtype><description><para>A reference to the <classname alt=\"boost::dll::experimental::smart_library\">smart_library</classname> </para></description></parameter><parameter name=\"name\"><paramtype>const std::string &amp;</paramtype><description><para>The name of the entity to import </para></description></parameter><description><para>Helper functions for overloads.</para><para>Gets either a variable, function or member-function, depending on the signature.</para><para><programlisting language=\"c++\">smart_library sm(\"lib.so\");\nget&lt;int&gt;(sm, \"space::value\"); //import a variable\nget&lt;void(int)&gt;(sm, \"space::func\"); //import a function\nget&lt;some_class, void(int)&gt;(sm, \"space::class_::mem_fn\"); //import a member function\n</programlisting></para><para>\n</para></description></function>\n</namespace>\n\n\n\n\n\n\n\n\n\n\n\n\n</namespace>\n</namespace>\n</header>\n</library-reference>",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/boost/dll/shared_library_load_mode.hpp": "// Copyright 2014 Renato Tegon Forti, Antony Polukhin.\n// Copyright 2015-2016 Antony Polukhin.\n//\n// Distributed under the Boost Software License, Version 1.0.\n// (See accompanying file LICENSE_1_0.txt\n// or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n#ifndef BOOST_DLL_SHARED_LIBRARY_MODE_HPP\n#define BOOST_DLL_SHARED_LIBRARY_MODE_HPP\n\n#include <boost/config.hpp>\n#include <boost/predef/os.h>\n#include <boost/predef/library/c.h>\n\n#if BOOST_OS_WINDOWS\n#   include <boost/winapi/dll.hpp>\n#else\n#   include <dlfcn.h>\n#endif\n\n#ifdef BOOST_HAS_PRAGMA_ONCE\n# pragma once\n#endif\n\n/// \\file boost/dll/shared_library_load_mode.hpp\n/// \\brief Contains only the boost::dll::load_mode::type enum and operators related to it.\n\nnamespace boost { namespace dll { namespace load_mode {\n\n/*! Library load modes.\n*\n* Each of system family provides own modes. Flags not supported by a particular platform will be silently ignored.\n*\n* For a detailed description of platform specific options see:\n* <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx\">Windows specific options</a>,\n* <a href=\"http://pubs.opengroup.org/onlinepubs/000095399/functions/dlopen.html\">POSIX specific options</a>.\n*\n*/\n\nenum type {\n#ifdef BOOST_DLL_DOXYGEN\n    /*!\n    * Default open mode. See the \\b Default: comments below to find out the flags that are enabled by default.\n    */\n    default_mode,\n\n    /*!\n    * \\b Platforms: Windows\n    *\n    * \\b Default: disabled\n    *\n    * If this value is used, and the executable module is a DLL, the system does\n    * not call DllMain for process and thread initialization and termination.\n    * Also, the system does not load additional executable modules that are\n    * referenced by the specified module.\n    *\n    * Note Do not use this value; it is provided only for backward compatibility.\n    * If you are planning to access only data or resources in the DLL, use\n    * LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or LOAD_LIBRARY_AS_IMAGE_RESOURCE\n    * or both.\n    */\n    dont_resolve_dll_references,\n\n    /*!\n    * \\b Platforms: Windows\n    *\n    * \\b Default: disabled\n    *\n    * If this value is used, the system does not check AppLocker rules or\n    * apply Software Restriction Policies for the DLL.\n    */\n    load_ignore_code_authz_level,\n\n    /*!\n    * \\b Platforms: Windows\n    *\n    * \\b Default: disabled\n    *\n    * If this value is used and lpFileName specifies an absolute path,\n    * the system uses the alternate file search strategy.\n    *\n    * This value cannot be combined with any LOAD_LIBRARY_SEARCH flag.\n    */\n    load_with_altered_search_path,\n\n    /*!\n    * \\b Platforms: POSIX\n    *\n    * \\b Default: enabled\n    *\n    * Relocations shall be performed at an implementation-defined time, ranging\n    * from the time of the dlopen() call until the first reference to a given\n    * symbol occurs.\n    *\n    * Specifying RTLD_LAZY should improve performance on implementations\n    * supporting dynamic symbol binding as a process may not reference all of\n    * the functions in any given object. And, for systems supporting dynamic\n    * symbol resolution for normal process execution, this behavior mimics\n    * the normal handling of process execution.\n    */\n    rtld_lazy,\n\n    /*!\n    * \\b Platforms: POSIX\n    *\n    * \\b Default: disabled\n    *\n    * All necessary relocations shall be performed when the object is first\n    * loaded. This may waste some processing if relocations are performed for\n    * functions that are never referenced. This behavior may be useful for\n    * plugins that need to know as soon as an object is loaded that all\n    * symbols referenced during execution are available.\n    */\n    rtld_now,\n\n    /*!\n    * \\b Platforms: POSIX\n    *\n    * \\b Default: disabled\n    *\n    * The object's symbols shall be made available for the relocation\n    * processing of any other object. In addition, symbol lookup using\n    * dlopen(0, mode) and an associated dlsym() allows objects loaded\n    * with this mode to be searched.\n    */\n    rtld_global,\n\n    /*!\n    * \\b Platforms: POSIX\n    *\n    * \\b Default: enabled\n    *\n    * The object's symbols shall not be made available for the relocation\n    * processing of any other object.\n    *\n    * This is a default Windows behavior that can not be changed.\n    */\n    rtld_local,\n\n    /*!\n    * \\b Platforms: POSIX (requires glibc >= 2.3.4)\n    *\n    * \\b Default: disabled\n    *\n    * The object will use its own symbols in preference to global symbols\n    * with the same name contained in libraries that have already been loaded.\n    * This flag is not specified in POSIX.1-2001.\n    */\n    rtld_deepbind,\n\n    /*!\n    * \\b Platforms: Windows, POSIX\n    *\n    * \\b Default: disabled\n    *\n    * Append a platform specific extension and prefix to shared library filename before trying to load it.\n    * If load attempt fails, try to load with exactly specified name.\n    *\n    * \\b Example:\n    * \\code\n    * // Opens `./my_plugins/plugin1.dll` on Windows, `./my_plugins/libplugin1.so` on Linux, `./my_plugins/libplugin1.dylib` on MacOS.\n    * // If that fails, loads `./my_plugins/plugin1`\n    * boost::dll::shared_library lib(\"./my_plugins/plugin1\", load_mode::append_decorations);\n    * \\endcode\n    */\n    append_decorations,\n    /*!\n    * \\b Platforms: Windows, POSIX\n    *\n    * \\b Default: disabled\n    *\n    * Allow loading from system folders if path to library contains no parent path.\n    */\n    search_system_folders\n#elif BOOST_OS_WINDOWS\n    default_mode                          = 0,\n    dont_resolve_dll_references           = boost::winapi::DONT_RESOLVE_DLL_REFERENCES_,\n    load_ignore_code_authz_level          = boost::winapi::LOAD_IGNORE_CODE_AUTHZ_LEVEL_,\n    load_with_altered_search_path         = boost::winapi::LOAD_WITH_ALTERED_SEARCH_PATH_,\n    rtld_lazy                             = 0,\n    rtld_now                              = 0,\n    rtld_global                           = 0,\n    rtld_local                            = 0,\n    rtld_deepbind                         = 0,\n    append_decorations                    = 0x00800000,\n    search_system_folders                 = (append_decorations << 1)\n#else\n    default_mode                          = 0,\n    dont_resolve_dll_references           = 0,\n    load_ignore_code_authz_level          = 0,\n    load_with_altered_search_path         = 0,\n    rtld_lazy                             = RTLD_LAZY,\n    rtld_now                              = RTLD_NOW,\n    rtld_global                           = RTLD_GLOBAL,\n    rtld_local                            = RTLD_LOCAL,\n\n#if BOOST_LIB_C_GNU < BOOST_VERSION_NUMBER(2,3,4)\n    rtld_deepbind                         = 0,\n#else\n    rtld_deepbind                         = RTLD_DEEPBIND,\n#endif\n\n    append_decorations                    = 0x00800000,\n    search_system_folders                 = (append_decorations << 1)\n#endif\n};\n\n\n/// Free operators for load_mode::type flag manipulation.\nBOOST_CONSTEXPR inline type operator|(type left, type right) BOOST_NOEXCEPT {\n    return static_cast<type>(\n        static_cast<unsigned int>(left) | static_cast<unsigned int>(right)\n    );\n}\nBOOST_CXX14_CONSTEXPR inline type& operator|=(type& left, type right) BOOST_NOEXCEPT {\n    left = left | right;\n    return left;\n}\n\nBOOST_CONSTEXPR inline type operator&(type left, type right) BOOST_NOEXCEPT {\n    return static_cast<type>(\n        static_cast<unsigned int>(left) & static_cast<unsigned int>(right)\n    );\n}\nBOOST_CXX14_CONSTEXPR inline type& operator&=(type& left, type right) BOOST_NOEXCEPT {\n    left = left & right;\n    return left;\n}\n\nBOOST_CONSTEXPR inline type operator^(type left, type right) BOOST_NOEXCEPT {\n    return static_cast<type>(\n        static_cast<unsigned int>(left) ^ static_cast<unsigned int>(right)\n    );\n}\nBOOST_CXX14_CONSTEXPR inline type& operator^=(type& left, type right) BOOST_NOEXCEPT {\n    left = left ^ right;\n    return left;\n}\n\nBOOST_CONSTEXPR inline type operator~(type left) BOOST_NOEXCEPT {\n    return static_cast<type>(\n        ~static_cast<unsigned int>(left)\n    );\n}\n\n}}} // boost::dll::load_mode\n\n#endif // BOOST_DLL_SHARED_LIBRARY_MODE_HPP\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/boost/dll/detail/posix/path_from_handle.hpp": "// Copyright 2014-2015 Renato Tegon Forti, Antony Polukhin.\n//\n// Distributed under the Boost Software License, Version 1.0.\n// (See accompanying file LICENSE_1_0.txt\n// or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n#ifndef BOOST_DLL_DETAIL_POSIX_PATH_FROM_HANDLE_HPP\n#define BOOST_DLL_DETAIL_POSIX_PATH_FROM_HANDLE_HPP\n\n#include <boost/config.hpp>\n#include <boost/dll/detail/system_error.hpp>\n#include <boost/dll/detail/posix/program_location_impl.hpp>\n#include <boost/filesystem/path.hpp>\n#include <boost/predef/os.h>\n\n#ifdef BOOST_HAS_PRAGMA_ONCE\n# pragma once\n#endif\n\n#if BOOST_OS_MACOS || BOOST_OS_IOS\n\n#   include <mach-o/dyld.h>\n#   include <mach-o/nlist.h>\n#   include <cstddef> // for std::ptrdiff_t\n\nnamespace boost { namespace dll { namespace detail {\n    inline void* strip_handle(void* handle) BOOST_NOEXCEPT {\n        return reinterpret_cast<void*>(\n            (reinterpret_cast<std::ptrdiff_t>(handle) >> 2) << 2\n        );\n    }\n\n    inline boost::filesystem::path path_from_handle(void* handle, boost::system::error_code &ec) {\n        handle = strip_handle(handle);\n\n        // Iterate through all images currently in memory\n        // https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/dyld.3.html\n        const std::size_t count = _dyld_image_count(); // not thread safe: other thread my [un]load images\n        for (std::size_t i = 0; i <= count; ++i) {\n            // on last iteration `i` is equal to `count` which is out of range, so `_dyld_get_image_name`\n            // will return NULL. `dlopen(NULL, RTLD_LAZY)` call will open the current executable.\n            const char* image_name = _dyld_get_image_name(i);\n\n            // dlopen/dlclose must not affect `_dyld_image_count()`, because libraries are already loaded and only the internal counter is affected\n            void* probe_handle = dlopen(image_name, RTLD_LAZY);\n            dlclose(probe_handle);\n\n            // If the handle is the same as what was passed in (modulo mode bits), return this image name\n            if (handle == strip_handle(probe_handle)) {\n                boost::dll::detail::reset_dlerror();\n                return image_name;\n            }\n        }\n\n        boost::dll::detail::reset_dlerror();\n        ec = boost::system::error_code(\n            boost::system::errc::bad_file_descriptor,\n            boost::system::generic_category()\n        );\n\n        return boost::filesystem::path();\n    }\n\n}}} // namespace boost::dll::detail\n\n#elif BOOST_OS_ANDROID\n\n#include <boost/dll/runtime_symbol_info.hpp>\n\nnamespace boost { namespace dll { namespace detail {\n\n    struct soinfo {\n        // if defined(__work_around_b_24465209__), then an array of char[128] goes here.\n        // Unfortunately, __work_around_b_24465209__ is visible only during compilation of Android's linker\n        const void* phdr;\n        size_t      phnum;\n        void*       entry;\n        void*       base;\n        // ...          // Ignoring remaning parts of the structure\n    };\n\n    inline boost::filesystem::path path_from_handle(const void* handle, boost::system::error_code &ec) {\n        static const std::size_t work_around_b_24465209__offset = 128;\n        const struct soinfo* si = reinterpret_cast<const struct soinfo*>(\n            static_cast<const char*>(handle) + work_around_b_24465209__offset\n        );\n        boost::filesystem::path ret = boost::dll::symbol_location_ptr(si->base, ec);\n\n        if (ec) {\n            ec.clear();\n            si = static_cast<const struct soinfo*>(handle);\n            return boost::dll::symbol_location_ptr(si->base, ec);\n        }\n\n        return ret;\n    }\n\n}}} // namespace boost::dll::detail\n\n#else // #if BOOST_OS_MACOS || BOOST_OS_IOS || BOOST_OS_ANDROID\n\n// for dlinfo\n#include <dlfcn.h>\n\n#if BOOST_OS_QNX\n// QNX's copy of <elf.h> and <link.h> reside in sys folder\n#   include <sys/link.h>\n#else\n#   include <link.h>    // struct link_map\n#endif\n\nnamespace boost { namespace dll { namespace detail {\n\n#if BOOST_OS_QNX\n    // Android and QNX miss struct link_map. QNX misses ElfW macro, so avoiding it.\n    struct link_map {\n        void *l_addr;   // Base address shared object is loaded at\n        char *l_name;   // Absolute file name object was found in\n        // ...          // Ignoring remaning parts of the structure\n    };\n#endif // #if BOOST_OS_QNX\n\n    inline boost::filesystem::path path_from_handle(void* handle, boost::system::error_code &ec) {\n        // RTLD_DI_LINKMAP (RTLD_DI_ORIGIN returns only folder and is not suitable for this case)\n        // Obtain the Link_map for the handle  that  is  specified.\n        // The  p  argument  points to a Link_map pointer (Link_map\n        // **p). The actual storage for the Link_map  structure  is\n        // maintained by ld.so.1.\n        //\n        // Unfortunately we can not use `dlinfo(handle, RTLD_DI_LINKMAP, &link_map) < 0`\n        // because it is not supported on MacOS X 10.3, NetBSD 3.0, OpenBSD 3.8, AIX 5.1,\n        // HP-UX 11, IRIX 6.5, OSF/1 5.1, Cygwin, mingw, Interix 3.5, BeOS.\n        // Fortunately investigating the sources of open source projects brought the understanding, that\n        // `handle` is just a `struct link_map*` that contains full library name.\n\n        const struct link_map* link_map = 0;\n#if BOOST_OS_BSD_FREE\n        // FreeBSD has it's own logic http://code.metager.de/source/xref/freebsd/libexec/rtld-elf/rtld.c\n        // Fortunately it has the dlinfo call.\n        if (dlinfo(handle, RTLD_DI_LINKMAP, &link_map) < 0) {\n            link_map = 0;\n        }\n#else\n        link_map = static_cast<const struct link_map*>(handle);\n#endif\n        if (!link_map) {\n            boost::dll::detail::reset_dlerror();\n            ec = boost::system::error_code(\n                boost::system::errc::bad_file_descriptor,\n                boost::system::generic_category()\n            );\n\n            return boost::filesystem::path();\n        }\n\n        if (!link_map->l_name || *link_map->l_name == '\\0') {\n            return program_location_impl(ec);\n        }\n\n        return boost::filesystem::path(link_map->l_name);\n    }\n\n}}} // namespace boost::dll::detail\n\n#endif // #if BOOST_OS_MACOS || BOOST_OS_IOS\n\n#endif // BOOST_DLL_DETAIL_POSIX_PATH_FROM_HANDLE_HPP\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/boost/dll/detail/posix/program_location_impl.hpp": "// Copyright 2014 Renato Tegon Forti, Antony Polukhin.\n// Copyright 2015 Antony Polukhin.\n//\n// Distributed under the Boost Software License, Version 1.0.\n// (See accompanying file LICENSE_1_0.txt\n// or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n#ifndef BOOST_DLL_DETAIL_POSIX_PROGRAM_LOCATION_IMPL_HPP\n#define BOOST_DLL_DETAIL_POSIX_PROGRAM_LOCATION_IMPL_HPP\n\n#include <boost/config.hpp>\n#include <boost/dll/detail/system_error.hpp>\n#include <boost/filesystem/path.hpp>\n#include <boost/predef/os.h>\n\n#ifdef BOOST_HAS_PRAGMA_ONCE\n# pragma once\n#endif\n\n#if BOOST_OS_MACOS || BOOST_OS_IOS\n\n#include <mach-o/dyld.h>\n\nnamespace boost { namespace dll { namespace detail {\n    inline boost::filesystem::path program_location_impl(boost::system::error_code &ec) {\n        ec.clear();\n\n        char path[1024];\n        uint32_t size = sizeof(path);\n        if (_NSGetExecutablePath(path, &size) == 0)\n            return boost::filesystem::path(path);\n        \n        char *p = new char[size];\n        if (_NSGetExecutablePath(p, &size) != 0) {\n            ec = boost::system::error_code(\n                boost::system::errc::bad_file_descriptor,\n                boost::system::generic_category()\n            );\n        }\n\n        boost::filesystem::path ret(p);\n        delete[] p;\n        return ret;\n    }\n}}} // namespace boost::dll::detail\n\n#elif BOOST_OS_SOLARIS\n\n#include <stdlib.h>\nnamespace boost { namespace dll { namespace detail {\n    inline boost::filesystem::path program_location_impl(boost::system::error_code& ec) {\n        ec.clear();\n\n        return boost::filesystem::path(getexecname());\n    }\n}}} // namespace boost::dll::detail\n\n#elif BOOST_OS_BSD_FREE\n\n#include <sys/types.h>\n#include <sys/sysctl.h>\n#include <stdlib.h>\n\nnamespace boost { namespace dll { namespace detail {\n    inline boost::filesystem::path program_location_impl(boost::system::error_code& ec) {\n        ec.clear();\n\n        int mib[4];\n        mib[0] = CTL_KERN;\n        mib[1] = KERN_PROC;\n        mib[2] = KERN_PROC_PATHNAME;\n        mib[3] = -1;\n        char buf[10240];\n        size_t cb = sizeof(buf);\n        sysctl(mib, 4, buf, &cb, NULL, 0);\n\n        return boost::filesystem::path(buf);\n    }\n}}} // namespace boost::dll::detail\n\n\n\n#elif BOOST_OS_BSD_NET\n\n#include <boost/filesystem/operations.hpp>\nnamespace boost { namespace dll { namespace detail {\n    inline boost::filesystem::path program_location_impl(boost::system::error_code &ec) {\n        return boost::filesystem::read_symlink(\"/proc/curproc/exe\", ec);\n    }\n}}} // namespace boost::dll::detail\n\n#elif BOOST_OS_BSD_DRAGONFLY\n\n#include <boost/filesystem/operations.hpp>\nnamespace boost { namespace dll { namespace detail {\n    inline boost::filesystem::path program_location_impl(boost::system::error_code &ec) {\n        return boost::filesystem::read_symlink(\"/proc/curproc/file\", ec);\n    }\n}}} // namespace boost::dll::detail\n\n#elif BOOST_OS_QNX\n\n#include <fstream>\n#include <string> // for std::getline\nnamespace boost { namespace dll { namespace detail {\n    inline boost::filesystem::path program_location_impl(boost::system::error_code &ec) {\n        ec.clear();\n\n        std::string s;\n        std::ifstream ifs(\"/proc/self/exefile\");\n        std::getline(ifs, s);\n\n        if (ifs.fail() || s.empty()) {\n            ec = boost::system::error_code(\n                boost::system::errc::bad_file_descriptor,\n                boost::system::generic_category()\n            );\n        }\n\n        return boost::filesystem::path(s);\n    }\n}}} // namespace boost::dll::detail\n\n#else  // BOOST_OS_LINUX || BOOST_OS_UNIX || BOOST_OS_HPUX || BOOST_OS_ANDROID\n\n#include <boost/filesystem/operations.hpp>\nnamespace boost { namespace dll { namespace detail {\n    inline boost::filesystem::path program_location_impl(boost::system::error_code &ec) {\n        // We can not use\n        // boost::dll::detail::path_from_handle(dlopen(NULL, RTLD_LAZY | RTLD_LOCAL), ignore);\n        // because such code returns empty path.\n\n        return boost::filesystem::read_symlink(\"/proc/self/exe\", ec);   // Linux specific\n    }\n}}} // namespace boost::dll::detail\n\n#endif\n\n#endif // BOOST_DLL_DETAIL_POSIX_PROGRAM_LOCATION_IMPL_HPP\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/boost/dll/detail/posix/shared_library_impl.hpp": "// Copyright 2014 Renato Tegon Forti, Antony Polukhin.\n// Copyright 2015-2016 Antony Polukhin.\n//\n// Distributed under the Boost Software License, Version 1.0.\n// (See accompanying file LICENSE_1_0.txt\n// or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n#ifndef BOOST_DLL_SHARED_LIBRARY_IMPL_HPP\n#define BOOST_DLL_SHARED_LIBRARY_IMPL_HPP\n\n#include <boost/config.hpp>\n#include <boost/dll/shared_library_load_mode.hpp>\n#include <boost/dll/detail/posix/path_from_handle.hpp>\n#include <boost/dll/detail/posix/program_location_impl.hpp>\n\n#include <boost/move/utility.hpp>\n#include <boost/swap.hpp>\n#include <boost/filesystem/path.hpp>\n#include <boost/filesystem/operations.hpp>\n#include <boost/predef/os.h>\n\n#include <dlfcn.h>\n#include <cstring> // strncmp\n#if !BOOST_OS_MACOS && !BOOST_OS_IOS && !BOOST_OS_QNX\n#   include <link.h>\n#elif BOOST_OS_QNX\n// QNX's copy of <elf.h> and <link.h> reside in sys folder\n#   include <sys/link.h>\n#endif\n\n#ifdef BOOST_HAS_PRAGMA_ONCE\n# pragma once\n#endif\n\nnamespace boost { namespace dll { namespace detail {\n\nclass shared_library_impl {\n\n    BOOST_MOVABLE_BUT_NOT_COPYABLE(shared_library_impl)\n\npublic:\n    typedef void* native_handle_t;\n\n    shared_library_impl() BOOST_NOEXCEPT\n        : handle_(NULL)\n    {}\n\n    ~shared_library_impl() BOOST_NOEXCEPT {\n        unload();\n    }\n    \n    shared_library_impl(BOOST_RV_REF(shared_library_impl) sl) BOOST_NOEXCEPT\n        : handle_(sl.handle_)\n    {\n        sl.handle_ = NULL;\n    }\n\n    shared_library_impl & operator=(BOOST_RV_REF(shared_library_impl) sl) BOOST_NOEXCEPT {\n        swap(sl);\n        return *this;\n    }\n\n    void load(boost::filesystem::path sl, load_mode::type mode, boost::system::error_code &ec) {\n        typedef int native_mode_t;\n        unload();\n\n        // Do not allow opening NULL paths. User must use program_location() instead\n        if (sl.empty()) {\n            boost::dll::detail::reset_dlerror();\n            ec = boost::system::error_code(\n                boost::system::errc::bad_file_descriptor,\n                boost::system::generic_category()\n            );\n\n            return;\n        }\n\n        // Fixing modes\n        if (!(mode & load_mode::rtld_now)) {\n            mode |= load_mode::rtld_lazy;\n        }\n\n        if (!(mode & load_mode::rtld_global)) {\n            mode |= load_mode::rtld_local;\n        }\n\n#if BOOST_OS_LINUX || BOOST_OS_ANDROID\n        if (!sl.has_parent_path() && !(mode & load_mode::search_system_folders)) {\n            sl = \".\" / sl;\n        }\n#else\n        if (!sl.is_absolute() && !(mode & load_mode::search_system_folders)) {\n            boost::system::error_code current_path_ec;\n            boost::filesystem::path prog_loc = boost::filesystem::current_path(current_path_ec);\n            if (!current_path_ec) {\n                prog_loc /= sl;\n                sl.swap(prog_loc);\n            }\n        }\n#endif\n\n        mode &= ~load_mode::search_system_folders;\n\n        // Trying to open with appended decorations\n        if (!!(mode & load_mode::append_decorations)) {\n            mode &= ~load_mode::append_decorations;\n\n            boost::filesystem::path actual_path = (\n                std::strncmp(sl.filename().string().c_str(), \"lib\", 3)\n                ? (sl.has_parent_path() ? sl.parent_path() / L\"lib\" : L\"lib\").native() + sl.filename().native()\n                : sl\n            );\n            actual_path += suffix();\n\n            handle_ = dlopen(actual_path.c_str(), static_cast<native_mode_t>(mode));\n            if (handle_) {\n                boost::dll::detail::reset_dlerror();\n                return;\n            }\n        }\n\n        // Opening by exactly specified path\n        handle_ = dlopen(sl.c_str(), static_cast<native_mode_t>(mode));\n        if (handle_) {\n            boost::dll::detail::reset_dlerror();\n            return;\n        }\n\n        ec = boost::system::error_code(\n            boost::system::errc::bad_file_descriptor,\n            boost::system::generic_category()\n        );\n\n        // Maybe user wanted to load the executable itself? Checking...\n        // We assume that usually user wants to load a dynamic library not the executable itself, that's why\n        // we try this only after traditional load fails.\n        boost::system::error_code prog_loc_err;\n        boost::filesystem::path loc = boost::dll::detail::program_location_impl(prog_loc_err);\n        if (!prog_loc_err && boost::filesystem::equivalent(sl, loc, prog_loc_err) && !prog_loc_err) {\n            // As is known the function dlopen() loads the dynamic library file \n            // named by the null-terminated string filename and returns an opaque \n            // \"handle\" for the dynamic library. If filename is NULL, then the \n            // returned handle is for the main program.\n            ec.clear();\n            boost::dll::detail::reset_dlerror();\n            handle_ = dlopen(NULL, static_cast<native_mode_t>(mode));\n            if (!handle_) {\n                ec = boost::system::error_code(\n                    boost::system::errc::bad_file_descriptor,\n                    boost::system::generic_category()\n                );\n            }\n        }\n    }\n\n    bool is_loaded() const BOOST_NOEXCEPT {\n        return (handle_ != 0);\n    }\n\n    void unload() BOOST_NOEXCEPT {\n        if (!is_loaded()) {\n            return;\n        }\n\n        dlclose(handle_);\n        handle_ = 0;\n    }\n\n    void swap(shared_library_impl& rhs) BOOST_NOEXCEPT {\n        boost::swap(handle_, rhs.handle_);\n    }\n\n    boost::filesystem::path full_module_path(boost::system::error_code &ec) const {\n        return boost::dll::detail::path_from_handle(handle_, ec);\n    }\n\n    static boost::filesystem::path suffix() {\n        // https://sourceforge.net/p/predef/wiki/OperatingSystems/\n#if BOOST_OS_MACOS || BOOST_OS_IOS\n        return \".dylib\";\n#else\n        return \".so\";\n#endif\n    }\n\n    void* symbol_addr(const char* sb, boost::system::error_code &ec) const BOOST_NOEXCEPT {\n        // dlsym - obtain the address of a symbol from a dlopen object\n        void* const symbol = dlsym(handle_, sb);\n        if (symbol == NULL) {\n            ec = boost::system::error_code(\n                boost::system::errc::invalid_seek,\n                boost::system::generic_category()\n            );\n        }\n\n        // If handle does not refer to a valid object opened by dlopen(),\n        // or if the named symbol cannot be found within any of the objects\n        // associated with handle, dlsym() shall return NULL.\n        // More detailed diagnostic information shall be available through dlerror().\n\n        return symbol;\n    }\n\n    native_handle_t native() const BOOST_NOEXCEPT {\n        return handle_;\n    }\n\nprivate:\n    native_handle_t         handle_;\n};\n\n}}} // boost::dll::detail\n\n#endif // BOOST_DLL_SHARED_LIBRARY_IMPL_HPP\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/mem.c": "/*\nCopyright Rene Rivera 2006.\nDistributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at\nhttp://www.boost.org/LICENSE_1_0.txt)\n*/\n\n#include \"jam.h\"\n\n#ifdef OPT_BOEHM_GC\n\n    /* Compile the Boehm GC as one big chunk of code. It's much easier\n    this way, than trying to make radical changes to the bjam build\n    scripts. */\n\n    #define ATOMIC_UNCOLLECTABLE\n    #define NO_EXECUTE_PERMISSION\n    #define ALL_INTERIOR_POINTERS\n\n    #define LARGE_CONFIG\n    /*\n    #define NO_SIGNALS\n    #define SILENT\n    */\n    #ifndef GC_DEBUG\n    #define NO_DEBUGGING\n    #endif\n\n    #ifdef __GLIBC__\n    #define __USE_GNU\n    #endif\n\n    #include \"boehm_gc/reclaim.c\"\n    #include \"boehm_gc/allchblk.c\"\n    #include \"boehm_gc/misc.c\"\n    #include \"boehm_gc/alloc.c\"\n    #include \"boehm_gc/mach_dep.c\"\n    #include \"boehm_gc/os_dep.c\"\n    #include \"boehm_gc/mark_rts.c\"\n    #include \"boehm_gc/headers.c\"\n    #include \"boehm_gc/mark.c\"\n    #include \"boehm_gc/obj_map.c\"\n    #include \"boehm_gc/pcr_interface.c\"\n    #include \"boehm_gc/blacklst.c\"\n    #include \"boehm_gc/new_hblk.c\"\n    #include \"boehm_gc/real_malloc.c\"\n    #include \"boehm_gc/dyn_load.c\"\n    #include \"boehm_gc/dbg_mlc.c\"\n    #include \"boehm_gc/malloc.c\"\n    #include \"boehm_gc/stubborn.c\"\n    #include \"boehm_gc/checksums.c\"\n    #include \"boehm_gc/pthread_support.c\"\n    #include \"boehm_gc/pthread_stop_world.c\"\n    #include \"boehm_gc/darwin_stop_world.c\"\n    #include \"boehm_gc/typd_mlc.c\"\n    #include \"boehm_gc/ptr_chck.c\"\n    #include \"boehm_gc/mallocx.c\"\n    #include \"boehm_gc/gcj_mlc.c\"\n    #include \"boehm_gc/specific.c\"\n    #include \"boehm_gc/gc_dlopen.c\"\n    #include \"boehm_gc/backgraph.c\"\n    #include \"boehm_gc/win32_threads.c\"\n\n    /* Needs to be last. */\n    #include \"boehm_gc/finalize.c\"\n\n#elif defined(OPT_DUMA)\n\n    #ifdef OS_NT\n        #define WIN32\n    #endif\n    #include \"duma/duma.c\"\n    #include \"duma/print.c\"\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/pthread_support.c": "/* \n * Copyright (c) 1994 by Xerox Corporation.  All rights reserved.\n * Copyright (c) 1996 by Silicon Graphics.  All rights reserved.\n * Copyright (c) 1998 by Fergus Henderson.  All rights reserved.\n * Copyright (c) 2000-2005 by Hewlett-Packard Company.  All rights reserved.\n *\n * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n *\n * Permission is hereby granted to use or copy this program\n * for any purpose,  provided the above notices are retained on all copies.\n * Permission to modify the code and to distribute modified code is granted,\n * provided the above notices are retained, and a notice that the code was\n * modified is included with the above copyright notice.\n */\n/*\n * Support code originally for LinuxThreads, the clone()-based kernel\n * thread package for Linux which is included in libc6.\n *\n * This code no doubt makes some assumptions beyond what is\n * guaranteed by the pthread standard, though it now does\n * very little of that.  It now also supports NPTL, and many\n * other Posix thread implementations.  We are trying to merge\n * all flavors of pthread dupport code into this file.\n */\n /* DG/UX ix86 support <takis@xfree86.org> */\n/*\n * Linux_threads.c now also includes some code to support HPUX and\n * OSF1 (Compaq Tru64 Unix, really).  The OSF1 support is based on Eric Benson's\n * patch.\n *\n * Eric also suggested an alternate basis for a lock implementation in\n * his code:\n * + #elif defined(OSF1)\n * +    unsigned long GC_allocate_lock = 0;\n * +    msemaphore GC_allocate_semaphore;\n * + #  define GC_TRY_LOCK() \\\n * +    ((msem_lock(&GC_allocate_semaphore, MSEM_IF_NOWAIT) == 0) \\\n * +     ? (GC_allocate_lock = 1) \\\n * +     : 0)\n * + #  define GC_LOCK_TAKEN GC_allocate_lock\n */\n\n/*#define DEBUG_THREADS 1*/\n\n# include \"private/pthread_support.h\"\n\n# if defined(GC_PTHREADS) && !defined(GC_WIN32_THREADS)\n\n# if defined(GC_DGUX386_THREADS) && !defined(_POSIX4A_DRAFT10_SOURCE)\n#   define _POSIX4A_DRAFT10_SOURCE 1\n# endif\n\n# if defined(GC_DGUX386_THREADS) && !defined(_USING_POSIX4A_DRAFT10)\n#   define _USING_POSIX4A_DRAFT10 1\n# endif\n\n# include <stdlib.h>\n# include <pthread.h>\n# include <sched.h>\n# include <time.h>\n# include <errno.h>\n# include <unistd.h>\n# include <sys/mman.h>\n# include <sys/time.h>\n# include <sys/types.h>\n# include <sys/stat.h>\n# include <fcntl.h>\n# include <signal.h>\n\n# include \"gc_inline.h\"\n\n#if defined(GC_DARWIN_THREADS)\n# include \"private/darwin_semaphore.h\"\n#else\n# include <semaphore.h>\n#endif /* !GC_DARWIN_THREADS */\n\n#if defined(GC_DARWIN_THREADS) || defined(GC_FREEBSD_THREADS)\n# include <sys/sysctl.h>\n#endif /* GC_DARWIN_THREADS */\n\n#if defined(GC_NETBSD_THREADS)\n# include <sys/param.h>\n# include <sys/sysctl.h>\n#endif        /* GC_NETBSD_THREADS */\n\n/* Allocator lock definitions.\t\t*/\n#if !defined(USE_SPIN_LOCK)\n  pthread_mutex_t GC_allocate_ml = PTHREAD_MUTEX_INITIALIZER;\n#endif\nunsigned long GC_lock_holder = NO_THREAD;\n\t\t/* Used only for assertions, and to prevent\t */\n\t\t/* recursive reentry in the system call wrapper. */\n\n#if defined(GC_DGUX386_THREADS)\n# include <sys/dg_sys_info.h>\n# include <sys/_int_psem.h>\n  /* sem_t is an uint in DG/UX */\n  typedef unsigned int  sem_t;\n#endif /* GC_DGUX386_THREADS */\n\n#ifndef __GNUC__\n#   define __inline__\n#endif\n\n/* Undefine macros used to redirect pthread primitives. */\n# undef pthread_create\n# if !defined(GC_DARWIN_THREADS)\n#   undef pthread_sigmask\n# endif\n# undef pthread_join\n# undef pthread_detach\n# if defined(GC_OSF1_THREADS) && defined(_PTHREAD_USE_MANGLED_NAMES_) \\\n     && !defined(_PTHREAD_USE_PTDNAM_)\n  /* Restore the original mangled names on Tru64 UNIX.  */\n#   define pthread_create __pthread_create\n#   define pthread_join __pthread_join\n#   define pthread_detach __pthread_detach\n# endif\n\n#ifdef GC_USE_LD_WRAP\n#   define WRAP_FUNC(f) __wrap_##f\n#   define REAL_FUNC(f) __real_##f\n#else\n#   ifdef GC_USE_DLOPEN_WRAP\n#     include <dlfcn.h>\n#     define WRAP_FUNC(f) f\n#     define REAL_FUNC(f) GC_real_##f\n      /* We define both GC_f and plain f to be the wrapped function.\t*/\n      /* In that way plain calls work, as do calls from files that\t*/\n      /* included gc.h, wich redefined f to GC_f.\t\t\t*/\n      /* FIXME: Needs work for DARWIN and True64 (OSF1) */\n      typedef int (* GC_pthread_create_t)(pthread_t *, const pthread_attr_t *,\n\t\t      \t\t          void * (*)(void *), void *);\n      static GC_pthread_create_t GC_real_pthread_create;\n      typedef int (* GC_pthread_sigmask_t)(int, const sigset_t *, sigset_t *);\n      static GC_pthread_sigmask_t GC_real_pthread_sigmask;\n      typedef int (* GC_pthread_join_t)(pthread_t, void **);\n      static GC_pthread_join_t GC_real_pthread_join;\n      typedef int (* GC_pthread_detach_t)(pthread_t);\n      static GC_pthread_detach_t GC_real_pthread_detach;\n#   else\n#     define WRAP_FUNC(f) GC_##f\n#     if !defined(GC_DGUX386_THREADS)\n#       define REAL_FUNC(f) f\n#     else /* GC_DGUX386_THREADS */\n#       define REAL_FUNC(f) __d10_##f\n#     endif /* GC_DGUX386_THREADS */\n#   endif\n#endif\n\n#if defined(GC_USE_DL_WRAP) || defined(GC_USE_DLOPEN_WRAP)\n/* Define GC_ functions as aliases for the plain ones, which will\t*/\n/* be intercepted.  This allows files which include gc.h, and hence\t*/\n/* generate referemces to the GC_ symbols, to see the right symbols.\t*/\n      int GC_pthread_create(pthread_t * t, const pthread_attr_t * a,\n\t\t         void * (* fn)(void *), void * arg) {\n\t  return pthread_create(t, a, fn, arg);\n      }\n      int GC_pthread_sigmask(int how, const sigset_t *mask, sigset_t *old) {\n\t  return pthread_sigmask(how, mask, old);\n      }\n      int GC_pthread_join(pthread_t t, void **res) {\n\t  return pthread_join(t, res);\n      }\n      int GC_pthread_detach(pthread_t t) {\n\t  return pthread_detach(t);\n      }\n#endif /* Linker-based interception. */\n\n#ifdef GC_USE_DLOPEN_WRAP\n  static GC_bool GC_syms_initialized = FALSE;\n\n  void GC_init_real_syms(void)\n  {\n    void *dl_handle;\n#   define LIBPTHREAD_NAME \"libpthread.so.0\"\n#   define LIBPTHREAD_NAME_LEN 16 /* incl. trailing 0 */\n    size_t len = LIBPTHREAD_NAME_LEN - 1;\n    char namebuf[LIBPTHREAD_NAME_LEN];\n    static char *libpthread_name = LIBPTHREAD_NAME;\n\n    if (GC_syms_initialized) return;\n#   ifdef RTLD_NEXT\n      dl_handle = RTLD_NEXT;\n#   else\n      dl_handle = dlopen(libpthread_name, RTLD_LAZY);\n      if (NULL == dl_handle) {\n        while (isdigit(libpthread_name[len-1])) --len;\n        if (libpthread_name[len-1] == '.') --len;\n        memcpy(namebuf, libpthread_name, len);\n        namebuf[len] = '\\0';\n        dl_handle = dlopen(namebuf, RTLD_LAZY);\n      }\n      if (NULL == dl_handle) ABORT(\"Couldn't open libpthread\\n\");\n#   endif\n    GC_real_pthread_create = (GC_pthread_create_t)\n\t    \t\t\tdlsym(dl_handle, \"pthread_create\");\n    GC_real_pthread_sigmask = (GC_pthread_sigmask_t)\n\t    \t\t\tdlsym(dl_handle, \"pthread_sigmask\");\n    GC_real_pthread_join = (GC_pthread_join_t)\n\t    \t\t\tdlsym(dl_handle, \"pthread_join\");\n    GC_real_pthread_detach = (GC_pthread_detach_t)\n\t    \t\t\tdlsym(dl_handle, \"pthread_detach\");\n    GC_syms_initialized = TRUE;\n  }\n\n# define INIT_REAL_SYMS() if (!GC_syms_initialized) GC_init_real_syms();\n#else\n# define INIT_REAL_SYMS()\n#endif\n\nvoid GC_thr_init(void);\n\nstatic GC_bool parallel_initialized = FALSE;\n\nGC_bool GC_need_to_lock = FALSE;\n\nvoid GC_init_parallel(void);\n\nlong GC_nprocs = 1;\t/* Number of processors.  We may not have\t*/\n\t\t\t/* access to all of them, but this is as good\t*/\n\t\t\t/* a guess as any ...\t\t\t\t*/\n\n#ifdef THREAD_LOCAL_ALLOC\n/* We must explicitly mark ptrfree and gcj free lists, since the free \t*/\n/* list links wouldn't otherwise be found.  We also set them in the \t*/\n/* normal free lists, since that involves touching less memory than if\t*/\n/* we scanned them normally.\t\t\t\t\t\t*/\nvoid GC_mark_thread_local_free_lists(void)\n{\n    int i;\n    GC_thread p;\n    \n    for (i = 0; i < THREAD_TABLE_SZ; ++i) {\n      for (p = GC_threads[i]; 0 != p; p = p -> next) {\n\tGC_mark_thread_local_fls_for(&(p->tlfs));\n      }\n    }\n}\n\n#if defined(GC_ASSERTIONS)\n    /* Check that all thread-local free-lists are completely marked.\t*/\n    /* also check that thread-specific-data structures are marked.\t*/\n    void GC_check_tls(void) {\n\tint i;\n\tGC_thread p;\n\t\n\tfor (i = 0; i < THREAD_TABLE_SZ; ++i) {\n\t  for (p = GC_threads[i]; 0 != p; p = p -> next) {\n\t    GC_check_tls_for(&(p->tlfs));\n\t  }\n\t}\n#       if defined(USE_CUSTOM_SPECIFIC)\n\t  if (GC_thread_key != 0)\n\t    GC_check_tsd_marks(GC_thread_key);\n#\tendif \n    }\n#endif /* GC_ASSERTIONS */\n\n#endif /* Thread_local_alloc */\n\n#ifdef PARALLEL_MARK\n\n# ifndef MAX_MARKERS\n#   define MAX_MARKERS 16\n# endif\n\nstatic ptr_t marker_sp[MAX_MARKERS] = {0};\n#ifdef IA64\n  static ptr_t marker_bsp[MAX_MARKERS] = {0};\n#endif\n\nvoid * GC_mark_thread(void * id)\n{\n  word my_mark_no = 0;\n\n  marker_sp[(word)id] = GC_approx_sp();\n# ifdef IA64\n    marker_bsp[(word)id] = GC_save_regs_in_stack();\n# endif\n  for (;; ++my_mark_no) {\n    /* GC_mark_no is passed only to allow GC_help_marker to terminate\t*/\n    /* promptly.  This is important if it were called from the signal\t*/\n    /* handler or from the GC lock acquisition code.  Under Linux, it's\t*/\n    /* not safe to call it from a signal handler, since it uses mutexes\t*/\n    /* and condition variables.  Since it is called only here, the \t*/\n    /* argument is unnecessary.\t\t\t\t\t\t*/\n    if (my_mark_no < GC_mark_no || my_mark_no > GC_mark_no + 2) {\n\t/* resynchronize if we get far off, e.g. because GC_mark_no\t*/\n\t/* wrapped.\t\t\t\t\t\t\t*/\n\tmy_mark_no = GC_mark_no;\n    }\n#   ifdef DEBUG_THREADS\n\tGC_printf(\"Starting mark helper for mark number %lu\\n\", my_mark_no);\n#   endif\n    GC_help_marker(my_mark_no);\n  }\n}\n\nextern long GC_markers;\t\t/* Number of mark threads we would\t*/\n\t\t\t\t/* like to have.  Includes the \t\t*/\n\t\t\t\t/* initiating thread.\t\t\t*/\n\npthread_t GC_mark_threads[MAX_MARKERS];\n\n#define PTHREAD_CREATE REAL_FUNC(pthread_create)\n\nstatic void start_mark_threads(void)\n{\n    unsigned i;\n    pthread_attr_t attr;\n\n    if (GC_markers > MAX_MARKERS) {\n\tWARN(\"Limiting number of mark threads\\n\", 0);\n\tGC_markers = MAX_MARKERS;\n    }\n    if (0 != pthread_attr_init(&attr)) ABORT(\"pthread_attr_init failed\");\n\t\n    if (0 != pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED))\n\tABORT(\"pthread_attr_setdetachstate failed\");\n\n#   if defined(HPUX) || defined(GC_DGUX386_THREADS)\n      /* Default stack size is usually too small: fix it. */\n      /* Otherwise marker threads or GC may run out of\t  */\n      /* space.\t\t\t\t\t\t  */\n#     define MIN_STACK_SIZE (8*HBLKSIZE*sizeof(word))\n      {\n\tsize_t old_size;\n\tint code;\n\n        if (pthread_attr_getstacksize(&attr, &old_size) != 0)\n\t  ABORT(\"pthread_attr_getstacksize failed\\n\");\n\tif (old_size < MIN_STACK_SIZE) {\n\t  if (pthread_attr_setstacksize(&attr, MIN_STACK_SIZE) != 0)\n\t\t  ABORT(\"pthread_attr_setstacksize failed\\n\");\n\t}\n      }\n#   endif /* HPUX || GC_DGUX386_THREADS */\n    if (GC_print_stats) {\n\tGC_log_printf(\"Starting %ld marker threads\\n\", GC_markers - 1);\n    }\n    for (i = 0; i < GC_markers - 1; ++i) {\n      if (0 != PTHREAD_CREATE(GC_mark_threads + i, &attr,\n\t\t\t      GC_mark_thread, (void *)(word)i)) {\n\tWARN(\"Marker thread creation failed, errno = %ld.\\n\", errno);\n      }\n    }\n}\n\n#endif /* PARALLEL_MARK */\n\nGC_bool GC_thr_initialized = FALSE;\n\nvolatile GC_thread GC_threads[THREAD_TABLE_SZ];\n\nvoid GC_push_thread_structures(void)\n{\n    GC_ASSERT(I_HOLD_LOCK());\n    GC_push_all((ptr_t)(GC_threads), (ptr_t)(GC_threads)+sizeof(GC_threads));\n#   if defined(THREAD_LOCAL_ALLOC)\n      GC_push_all((ptr_t)(&GC_thread_key),\n\t  (ptr_t)(&GC_thread_key)+sizeof(&GC_thread_key));\n#   endif\n}\n\n/* It may not be safe to allocate when we register the first thread.\t*/\nstatic struct GC_Thread_Rep first_thread;\n\n/* Add a thread to GC_threads.  We assume it wasn't already there.\t*/\n/* Caller holds allocation lock.\t\t\t\t\t*/\nGC_thread GC_new_thread(pthread_t id)\n{\n    int hv = NUMERIC_THREAD_ID(id) % THREAD_TABLE_SZ;\n    GC_thread result;\n    static GC_bool first_thread_used = FALSE;\n    \n    GC_ASSERT(I_HOLD_LOCK());\n    if (!first_thread_used) {\n    \tresult = &first_thread;\n    \tfirst_thread_used = TRUE;\n    } else {\n        result = (struct GC_Thread_Rep *)\n        \t GC_INTERNAL_MALLOC(sizeof(struct GC_Thread_Rep), NORMAL);\n\tGC_ASSERT(result -> flags == 0);\n    }\n    if (result == 0) return(0);\n    result -> id = id;\n    result -> next = GC_threads[hv];\n    GC_threads[hv] = result;\n    GC_ASSERT(result -> flags == 0 && result -> thread_blocked == 0);\n    return(result);\n}\n\n/* Delete a thread from GC_threads.  We assume it is there.\t*/\n/* (The code intentionally traps if it wasn't.)\t\t\t*/\nvoid GC_delete_thread(pthread_t id)\n{\n    int hv = NUMERIC_THREAD_ID(id) % THREAD_TABLE_SZ;\n    register GC_thread p = GC_threads[hv];\n    register GC_thread prev = 0;\n    \n    GC_ASSERT(I_HOLD_LOCK());\n    while (!THREAD_EQUAL(p -> id, id)) {\n        prev = p;\n        p = p -> next;\n    }\n    if (prev == 0) {\n        GC_threads[hv] = p -> next;\n    } else {\n        prev -> next = p -> next;\n    }\n#   ifdef GC_DARWIN_THREADS\n\tmach_port_deallocate(mach_task_self(), p->stop_info.mach_thread);\n#   endif\n    GC_INTERNAL_FREE(p);\n}\n\n/* If a thread has been joined, but we have not yet\t\t*/\n/* been notified, then there may be more than one thread \t*/\n/* in the table with the same pthread id.\t\t\t*/\n/* This is OK, but we need a way to delete a specific one.\t*/\nvoid GC_delete_gc_thread(GC_thread gc_id)\n{\n    pthread_t id = gc_id -> id;\n    int hv = NUMERIC_THREAD_ID(id) % THREAD_TABLE_SZ;\n    register GC_thread p = GC_threads[hv];\n    register GC_thread prev = 0;\n\n    GC_ASSERT(I_HOLD_LOCK());\n    while (p != gc_id) {\n        prev = p;\n        p = p -> next;\n    }\n    if (prev == 0) {\n        GC_threads[hv] = p -> next;\n    } else {\n        prev -> next = p -> next;\n    }\n#   ifdef GC_DARWIN_THREADS\n\tmach_port_deallocate(mach_task_self(), p->stop_info.mach_thread);\n#   endif\n    GC_INTERNAL_FREE(p);\n}\n\n/* Return a GC_thread corresponding to a given pthread_t.\t*/\n/* Returns 0 if it's not there.\t\t\t\t\t*/\n/* Caller holds  allocation lock or otherwise inhibits \t\t*/\n/* updates.\t\t\t\t\t\t\t*/\n/* If there is more than one thread with the given id we \t*/\n/* return the most recent one.\t\t\t\t\t*/\nGC_thread GC_lookup_thread(pthread_t id)\n{\n    int hv = NUMERIC_THREAD_ID(id) % THREAD_TABLE_SZ;\n    register GC_thread p = GC_threads[hv];\n    \n    while (p != 0 && !THREAD_EQUAL(p -> id, id)) p = p -> next;\n    return(p);\n}\n\n#ifdef HANDLE_FORK\n/* Remove all entries from the GC_threads table, except the\t*/\n/* one for the current thread.  We need to do this in the child\t*/\n/* process after a fork(), since only the current thread \t*/\n/* survives in the child.\t\t\t\t\t*/\nvoid GC_remove_all_threads_but_me(void)\n{\n    pthread_t self = pthread_self();\n    int hv;\n    GC_thread p, next, me;\n\n    for (hv = 0; hv < THREAD_TABLE_SZ; ++hv) {\n      me = 0;\n      for (p = GC_threads[hv]; 0 != p; p = next) {\n\tnext = p -> next;\n\tif (THREAD_EQUAL(p -> id, self)) {\n\t  me = p;\n\t  p -> next = 0;\n\t} else {\n#\t  ifdef THREAD_LOCAL_ALLOC\n\t    if (!(p -> flags & FINISHED)) {\n\t      GC_destroy_thread_local(&(p->tlfs));\n\t    }\n#\t  endif /* THREAD_LOCAL_ALLOC */\n\t  if (p != &first_thread) GC_INTERNAL_FREE(p);\n\t}\n      }\n      GC_threads[hv] = me;\n    }\n}\n#endif /* HANDLE_FORK */\n\n#ifdef USE_PROC_FOR_LIBRARIES\nGC_bool GC_segment_is_thread_stack(ptr_t lo, ptr_t hi)\n{\n    int i;\n    GC_thread p;\n    \n    GC_ASSERT(I_HOLD_LOCK());\n#   ifdef PARALLEL_MARK\n      for (i = 0; i < GC_markers; ++i) {\n\tif (marker_sp[i] > lo & marker_sp[i] < hi) return TRUE;\n#       ifdef IA64\n\t  if (marker_bsp[i] > lo & marker_bsp[i] < hi) return TRUE;\n#\tendif\n      }\n#   endif\n    for (i = 0; i < THREAD_TABLE_SZ; i++) {\n      for (p = GC_threads[i]; p != 0; p = p -> next) {\n\tif (0 != p -> stack_end) {\n#\t  ifdef STACK_GROWS_UP\n            if (p -> stack_end >= lo && p -> stack_end < hi) return TRUE;\n#\t  else /* STACK_GROWS_DOWN */\n            if (p -> stack_end > lo && p -> stack_end <= hi) return TRUE;\n#\t  endif\n\t}\n      }\n    }\n    return FALSE;\n}\n#endif /* USE_PROC_FOR_LIBRARIES */\n\n#ifdef IA64\n/* Find the largest stack_base smaller than bound.  May be used\t*/\n/* to find the boundary between a register stack and adjacent\t*/\n/* immediately preceding memory stack.\t\t\t\t*/\nptr_t GC_greatest_stack_base_below(ptr_t bound)\n{\n    int i;\n    GC_thread p;\n    ptr_t result = 0;\n    \n    GC_ASSERT(I_HOLD_LOCK());\n#   ifdef PARALLEL_MARK\n      for (i = 0; i < GC_markers; ++i) {\n\tif (marker_sp[i] > result && marker_sp[i] < bound)\n\t  result = marker_sp[i];\n      }\n#   endif\n    for (i = 0; i < THREAD_TABLE_SZ; i++) {\n      for (p = GC_threads[i]; p != 0; p = p -> next) {\n\tif (p -> stack_end > result && p -> stack_end < bound) {\n\t  result = p -> stack_end;\n\t}\n      }\n    }\n    return result;\n}\n#endif /* IA64 */\n\n#ifdef GC_LINUX_THREADS\n/* Return the number of processors, or i<= 0 if it can't be determined.\t*/\nint GC_get_nprocs(void)\n{\n    /* Should be \"return sysconf(_SC_NPROCESSORS_ONLN);\" but that\t*/\n    /* appears to be buggy in many cases.\t\t\t\t*/\n    /* We look for lines \"cpu<n>\" in /proc/stat.\t\t\t*/\n#   define STAT_BUF_SIZE 4096\n#   define STAT_READ read\n\t/* If read is wrapped, this may need to be redefined to call \t*/\n\t/* the real one.\t\t\t\t\t\t*/\n    char stat_buf[STAT_BUF_SIZE];\n    int f;\n    word result = 1;\n\t/* Some old kernels only have a single \"cpu nnnn ...\"\t*/\n\t/* entry in /proc/stat.  We identify those as \t\t*/\n\t/* uniprocessors.\t\t\t\t\t*/\n    size_t i, len = 0;\n\n    f = open(\"/proc/stat\", O_RDONLY);\n    if (f < 0 || (len = STAT_READ(f, stat_buf, STAT_BUF_SIZE)) < 100) {\n\tWARN(\"Couldn't read /proc/stat\\n\", 0);\n\treturn -1;\n    }\n    for (i = 0; i < len - 100; ++i) {\n        if (stat_buf[i] == '\\n' && stat_buf[i+1] == 'c'\n\t    && stat_buf[i+2] == 'p' && stat_buf[i+3] == 'u') {\n\t    int cpu_no = atoi(stat_buf + i + 4);\n\t    if (cpu_no >= result) result = cpu_no + 1;\n\t}\n    }\n    close(f);\n    return result;\n}\n#endif /* GC_LINUX_THREADS */\n\n/* We hold the GC lock.  Wait until an in-progress GC has finished.\t*/\n/* Repeatedly RELEASES GC LOCK in order to wait.\t\t\t*/\n/* If wait_for_all is true, then we exit with the GC lock held and no\t*/\n/* collection in progress; otherwise we just wait for the current GC\t*/\n/* to finish.\t\t\t\t\t\t\t\t*/\nextern GC_bool GC_collection_in_progress(void);\nvoid GC_wait_for_gc_completion(GC_bool wait_for_all)\n{\n    GC_ASSERT(I_HOLD_LOCK());\n    if (GC_incremental && GC_collection_in_progress()) {\n\tint old_gc_no = GC_gc_no;\n\n\t/* Make sure that no part of our stack is still on the mark stack, */\n\t/* since it's about to be unmapped.\t\t\t\t   */\n\twhile (GC_incremental && GC_collection_in_progress()\n\t       && (wait_for_all || old_gc_no == GC_gc_no)) {\n\t    ENTER_GC();\n\t    GC_in_thread_creation = TRUE;\n            GC_collect_a_little_inner(1);\n\t    GC_in_thread_creation = FALSE;\n\t    EXIT_GC();\n\t    UNLOCK();\n\t    sched_yield();\n\t    LOCK();\n\t}\n    }\n}\n\n#ifdef HANDLE_FORK\n/* Procedures called before and after a fork.  The goal here is to make */\n/* it safe to call GC_malloc() in a forked child.  It's unclear that is\t*/\n/* attainable, since the single UNIX spec seems to imply that one \t*/\n/* should only call async-signal-safe functions, and we probably can't\t*/\n/* quite guarantee that.  But we give it our best shot.  (That same\t*/\n/* spec also implies that it's not safe to call the system malloc\t*/\n/* between fork() and exec().  Thus we're doing no worse than it.\t*/\n\n/* Called before a fork()\t\t*/\nvoid GC_fork_prepare_proc(void)\n{\n    /* Acquire all relevant locks, so that after releasing the locks\t*/\n    /* the child will see a consistent state in which monitor \t\t*/\n    /* invariants hold.\t Unfortunately, we can't acquire libc locks\t*/\n    /* we might need, and there seems to be no guarantee that libc\t*/\n    /* must install a suitable fork handler.\t\t\t\t*/\n    /* Wait for an ongoing GC to finish, since we can't finish it in\t*/\n    /* the (one remaining thread in) the child.\t\t\t\t*/\n      LOCK();\n#     if defined(PARALLEL_MARK) || defined(THREAD_LOCAL_ALLOC)\n        GC_wait_for_reclaim();\n#     endif\n      GC_wait_for_gc_completion(TRUE);\n#     if defined(PARALLEL_MARK) || defined(THREAD_LOCAL_ALLOC)\n        GC_acquire_mark_lock();\n#     endif\n}\n\n/* Called in parent after a fork()\t*/\nvoid GC_fork_parent_proc(void)\n{\n#   if defined(PARALLEL_MARK) || defined(THREAD_LOCAL_ALLOC)\n      GC_release_mark_lock();\n#   endif\n    UNLOCK();\n}\n\n/* Called in child after a fork()\t*/\nvoid GC_fork_child_proc(void)\n{\n    /* Clean up the thread table, so that just our thread is left. */\n#   if defined(PARALLEL_MARK) || defined(THREAD_LOCAL_ALLOC)\n      GC_release_mark_lock();\n#   endif\n    GC_remove_all_threads_but_me();\n#   ifdef PARALLEL_MARK\n      /* Turn off parallel marking in the child, since we are probably \t*/\n      /* just going to exec, and we would have to restart mark threads.\t*/\n        GC_markers = 1;\n        GC_parallel = FALSE;\n#   endif /* PARALLEL_MARK */\n    UNLOCK();\n}\n#endif /* HANDLE_FORK */\n\n#if defined(GC_DGUX386_THREADS)\n/* Return the number of processors, or i<= 0 if it can't be determined. */\nint GC_get_nprocs(void)\n{\n    /* <takis@XFree86.Org> */\n    int numCpus;\n    struct dg_sys_info_pm_info pm_sysinfo;\n    int status =0;\n\n    status = dg_sys_info((long int *) &pm_sysinfo,\n\tDG_SYS_INFO_PM_INFO_TYPE, DG_SYS_INFO_PM_CURRENT_VERSION);\n    if (status < 0)\n       /* set -1 for error */\n       numCpus = -1;\n    else\n      /* Active CPUs */\n      numCpus = pm_sysinfo.idle_vp_count;\n\n#  ifdef DEBUG_THREADS\n    GC_printf(\"Number of active CPUs in this system: %d\\n\", numCpus);\n#  endif\n    return(numCpus);\n}\n#endif /* GC_DGUX386_THREADS */\n\n#if defined(GC_NETBSD_THREADS)\nstatic int get_ncpu(void)\n{\n    int mib[] = {CTL_HW,HW_NCPU};\n    int res;\n    size_t len = sizeof(res);\n\n    sysctl(mib, sizeof(mib)/sizeof(int), &res, &len, NULL, 0);\n    return res;\n}\n#endif\t/* GC_NETBSD_THREADS */\n\n# if defined(GC_LINUX_THREADS) && defined(INCLUDE_LINUX_THREAD_DESCR)\n__thread int dummy_thread_local;\n# endif\n\n/* We hold the allocation lock.\t*/\nvoid GC_thr_init(void)\n{\n#   ifndef GC_DARWIN_THREADS\n        int dummy;\n#   endif\n    GC_thread t;\n\n    if (GC_thr_initialized) return;\n    GC_thr_initialized = TRUE;\n    \n#   ifdef HANDLE_FORK\n      /* Prepare for a possible fork.\t*/\n        pthread_atfork(GC_fork_prepare_proc, GC_fork_parent_proc,\n\t  \t       GC_fork_child_proc);\n#   endif /* HANDLE_FORK */\n#   if defined(INCLUDE_LINUX_THREAD_DESCR)\n      /* Explicitly register the region including the address \t\t*/\n      /* of a thread local variable.  This should included thread\t*/\n      /* locals for the main thread, except for those allocated\t\t*/\n      /* in response to dlopen calls.\t\t\t\t\t*/  \n\t{\n\t  ptr_t thread_local_addr = (ptr_t)(&dummy_thread_local);\n\t  ptr_t main_thread_start, main_thread_end;\n          if (!GC_enclosing_mapping(thread_local_addr, &main_thread_start,\n\t\t\t\t    &main_thread_end)) {\n\t    ABORT(\"Failed to find mapping for main thread thread locals\");\n\t  }\n\t  GC_add_roots_inner(main_thread_start, main_thread_end, FALSE);\n\t}\n#   endif\n    /* Add the initial thread, so we can stop it.\t*/\n      t = GC_new_thread(pthread_self());\n#     ifdef GC_DARWIN_THREADS\n         t -> stop_info.mach_thread = mach_thread_self();\n#     else\n         t -> stop_info.stack_ptr = (ptr_t)(&dummy);\n#     endif\n      t -> flags = DETACHED | MAIN_THREAD;\n\n    GC_stop_init();\n\n    /* Set GC_nprocs.  */\n      {\n\tchar * nprocs_string = GETENV(\"GC_NPROCS\");\n\tGC_nprocs = -1;\n\tif (nprocs_string != NULL) GC_nprocs = atoi(nprocs_string);\n      }\n      if (GC_nprocs <= 0) {\n#       if defined(GC_HPUX_THREADS)\n\t  GC_nprocs = pthread_num_processors_np();\n#       endif\n#\tif defined(GC_OSF1_THREADS) || defined(GC_AIX_THREADS) \\\n\t   || defined(GC_SOLARIS_THREADS)\n\t  GC_nprocs = sysconf(_SC_NPROCESSORS_ONLN);\n\t  if (GC_nprocs <= 0) GC_nprocs = 1;\n#\tendif\n#       if defined(GC_IRIX_THREADS)\n\t  GC_nprocs = sysconf(_SC_NPROC_ONLN);\n\t  if (GC_nprocs <= 0) GC_nprocs = 1;\n#       endif\n#       if defined(GC_NETBSD_THREADS)\n\t  GC_nprocs = get_ncpu();\n#       endif\n#       if defined(GC_DARWIN_THREADS) || defined(GC_FREEBSD_THREADS)\n\t  int ncpus = 1;\n\t  size_t len = sizeof(ncpus);\n\t  sysctl((int[2]) {CTL_HW, HW_NCPU}, 2, &ncpus, &len, NULL, 0);\n\t  GC_nprocs = ncpus;\n#       endif\n#\tif defined(GC_LINUX_THREADS) || defined(GC_DGUX386_THREADS)\n          GC_nprocs = GC_get_nprocs();\n#\tendif\n#       if defined(GC_GNU_THREADS)\n\t  if (GC_nprocs <= 0) GC_nprocs = 1;\n#       endif\n      }\n      if (GC_nprocs <= 0) {\n\tWARN(\"GC_get_nprocs() returned %ld\\n\", GC_nprocs);\n\tGC_nprocs = 2;\n#\tifdef PARALLEL_MARK\n\t  GC_markers = 1;\n#\tendif\n      } else {\n#\tifdef PARALLEL_MARK\n          {\n\t    char * markers_string = GETENV(\"GC_MARKERS\");\n\t    if (markers_string != NULL) {\n\t      GC_markers = atoi(markers_string);\n\t    } else {\n\t      GC_markers = GC_nprocs;\n\t    }\n          }\n#\tendif\n      }\n#   ifdef PARALLEL_MARK\n      if (GC_print_stats) {\n          GC_log_printf(\"Number of processors = %ld, \"\n\t\t \"number of marker threads = %ld\\n\", GC_nprocs, GC_markers);\n      }\n      if (GC_markers == 1) {\n\tGC_parallel = FALSE;\n\tif (GC_print_stats) {\n\t    GC_log_printf(\n\t\t\"Single marker thread, turning off parallel marking\\n\");\n\t}\n      } else {\n\tGC_parallel = TRUE;\n\t/* Disable true incremental collection, but generational is OK.\t*/\n\tGC_time_limit = GC_TIME_UNLIMITED;\n      }\n      /* If we are using a parallel marker, actually start helper threads.  */\n        if (GC_parallel) start_mark_threads();\n#   endif\n}\n\n\n/* Perform all initializations, including those that\t*/\n/* may require allocation.\t\t\t\t*/\n/* Called without allocation lock.\t\t\t*/\n/* Must be called before a second thread is created.\t*/\n/* Did we say it's called without the allocation lock?\t*/\nvoid GC_init_parallel(void)\n{\n    if (parallel_initialized) return;\n    parallel_initialized = TRUE;\n\n    /* GC_init() calls us back, so set flag first.\t*/\n    if (!GC_is_initialized) GC_init();\n    /* Initialize thread local free lists if used.\t*/\n#   if defined(THREAD_LOCAL_ALLOC)\n      LOCK();\n      GC_init_thread_local(&(GC_lookup_thread(pthread_self())->tlfs));\n      UNLOCK();\n#   endif\n}\n\n\n#if !defined(GC_DARWIN_THREADS)\nint WRAP_FUNC(pthread_sigmask)(int how, const sigset_t *set, sigset_t *oset)\n{\n    sigset_t fudged_set;\n    \n    INIT_REAL_SYMS();\n    if (set != NULL && (how == SIG_BLOCK || how == SIG_SETMASK)) {\n        fudged_set = *set;\n        sigdelset(&fudged_set, SIG_SUSPEND);\n        set = &fudged_set;\n    }\n    return(REAL_FUNC(pthread_sigmask)(how, set, oset));\n}\n#endif /* !GC_DARWIN_THREADS */\n\n/* Wrapper for functions that are likely to block for an appreciable\t*/\n/* length of time.\t\t\t\t\t\t\t*/\n\nstruct blocking_data {\n    void (*fn)(void *);\n    void *arg;\n};\n\nstatic void GC_do_blocking_inner(ptr_t data, void * context) {\n    struct blocking_data * d = (struct blocking_data *) data;\n    GC_thread me;\n    LOCK();\n    me = GC_lookup_thread(pthread_self());\n    GC_ASSERT(!(me -> thread_blocked));\n#   ifdef SPARC\n\tme -> stop_info.stack_ptr = GC_save_regs_in_stack();\n#   elif !defined(GC_DARWIN_THREADS)\n\tme -> stop_info.stack_ptr = GC_approx_sp();\n#   endif\n#   ifdef IA64\n\tme -> backing_store_ptr = GC_save_regs_in_stack();\n#   endif\n    me -> thread_blocked = TRUE;\n    /* Save context here if we want to support precise stack marking */\n    UNLOCK();\n    (d -> fn)(d -> arg);\n    LOCK();   /* This will block if the world is stopped.\t*/\n    me -> thread_blocked = FALSE;\n    UNLOCK();\n}\n\nvoid GC_do_blocking(void (*fn)(void *), void *arg) {\n    struct blocking_data my_data;\n\n    my_data.fn = fn;\n    my_data.arg = arg;\n    GC_with_callee_saves_pushed(GC_do_blocking_inner, (ptr_t)(&my_data));\n}\n    \nstruct start_info {\n    void *(*start_routine)(void *);\n    void *arg;\n    word flags;\n    sem_t registered;   \t/* 1 ==> in our thread table, but \t*/\n\t\t\t\t/* parent hasn't yet noticed.\t\t*/\n};\n\nint GC_unregister_my_thread(void)\n{\n    GC_thread me;\n\n    LOCK();\n    /* Wait for any GC that may be marking from our stack to\t*/\n    /* complete before we remove this thread.\t\t\t*/\n    GC_wait_for_gc_completion(FALSE);\n    me = GC_lookup_thread(pthread_self());\n#   if defined(THREAD_LOCAL_ALLOC)\n      GC_destroy_thread_local(&(me->tlfs));\n#   endif\n    if (me -> flags & DETACHED) {\n    \tGC_delete_thread(pthread_self());\n    } else {\n\tme -> flags |= FINISHED;\n    }\n#   if defined(THREAD_LOCAL_ALLOC)\n      GC_remove_specific(GC_thread_key);\n#   endif\n    UNLOCK();\n    return GC_SUCCESS;\n}\n\n/* Called at thread exit.\t\t\t\t*/\n/* Never called for main thread.  That's OK, since it\t*/\n/* results in at most a tiny one-time leak.  And \t*/\n/* linuxthreads doesn't reclaim the main threads \t*/\n/* resources or id anyway.\t\t\t\t*/\nvoid GC_thread_exit_proc(void *arg)\n{\n    GC_unregister_my_thread();\n}\n\nint WRAP_FUNC(pthread_join)(pthread_t thread, void **retval)\n{\n    int result;\n    GC_thread thread_gc_id;\n    \n    INIT_REAL_SYMS();\n    LOCK();\n    thread_gc_id = GC_lookup_thread(thread);\n    /* This is guaranteed to be the intended one, since the thread id\t*/\n    /* cant have been recycled by pthreads.\t\t\t\t*/\n    UNLOCK();\n    result = REAL_FUNC(pthread_join)(thread, retval);\n# if defined (GC_FREEBSD_THREADS)\n    /* On FreeBSD, the wrapped pthread_join() sometimes returns (what\n       appears to be) a spurious EINTR which caused the test and real code\n       to gratuitously fail.  Having looked at system pthread library source\n       code, I see how this return code may be generated.  In one path of\n       code, pthread_join() just returns the errno setting of the thread\n       being joined.  This does not match the POSIX specification or the\n       local man pages thus I have taken the liberty to catch this one\n       spurious return value properly conditionalized on GC_FREEBSD_THREADS. */\n    if (result == EINTR) result = 0;\n# endif\n    if (result == 0) {\n        LOCK();\n        /* Here the pthread thread id may have been recycled. */\n        GC_delete_gc_thread(thread_gc_id);\n        UNLOCK();\n    }\n    return result;\n}\n\nint\nWRAP_FUNC(pthread_detach)(pthread_t thread)\n{\n    int result;\n    GC_thread thread_gc_id;\n    \n    INIT_REAL_SYMS();\n    LOCK();\n    thread_gc_id = GC_lookup_thread(thread);\n    UNLOCK();\n    result = REAL_FUNC(pthread_detach)(thread);\n    if (result == 0) {\n      LOCK();\n      thread_gc_id -> flags |= DETACHED;\n      /* Here the pthread thread id may have been recycled. */\n      if (thread_gc_id -> flags & FINISHED) {\n        GC_delete_gc_thread(thread_gc_id);\n      }\n      UNLOCK();\n    }\n    return result;\n}\n\nGC_bool GC_in_thread_creation = FALSE;  /* Protected by allocation lock. */\n\nGC_thread GC_register_my_thread_inner(struct GC_stack_base *sb,\n\t\t\t\t      pthread_t my_pthread)\n{\n    GC_thread me;\n\n    GC_in_thread_creation = TRUE; /* OK to collect from unknown thread. */\n    me = GC_new_thread(my_pthread);\n    GC_in_thread_creation = FALSE;\n#   ifdef GC_DARWIN_THREADS\n      me -> stop_info.mach_thread = mach_thread_self();\n#   else\n      me -> stop_info.stack_ptr = sb -> mem_base;\n#   endif\n    me -> stack_end = sb -> mem_base;\n#   ifdef IA64\n      me -> backing_store_end = sb -> reg_base;\n#   endif /* IA64 */\n    return me;\n}\n\nint GC_register_my_thread(struct GC_stack_base *sb)\n{\n    pthread_t my_pthread = pthread_self();\n    GC_thread me;\n\n    LOCK();\n    me = GC_lookup_thread(my_pthread);\n    if (0 == me) {\n        me = GC_register_my_thread_inner(sb, my_pthread);\n\tme -> flags |= DETACHED;\n    \t  /* Treat as detached, since we do not need to worry about\t*/\n    \t  /* pointer results.\t\t\t\t\t\t*/\n\tUNLOCK();\n        return GC_SUCCESS;\n    } else {\n\tUNLOCK();\n\treturn GC_DUPLICATE;\n    }\n}\n\nvoid * GC_inner_start_routine(struct GC_stack_base *sb, void * arg)\n{\n    struct start_info * si = arg;\n    void * result;\n    GC_thread me;\n    pthread_t my_pthread;\n    void *(*start)(void *);\n    void *start_arg;\n\n    my_pthread = pthread_self();\n#   ifdef DEBUG_THREADS\n        GC_printf(\"Starting thread 0x%x\\n\", (unsigned)my_pthread);\n        GC_printf(\"pid = %ld\\n\", (long) getpid());\n        GC_printf(\"sp = 0x%lx\\n\", (long) &arg);\n#   endif\n    LOCK();\n    me = GC_register_my_thread_inner(sb, my_pthread);\n    me -> flags = si -> flags;\n    UNLOCK();\n    start = si -> start_routine;\n#   ifdef DEBUG_THREADS\n\tGC_printf(\"start_routine = %p\\n\", (void *)start);\n#   endif\n    start_arg = si -> arg;\n    sem_post(&(si -> registered));\t/* Last action on si.\t*/\n    \t\t\t\t\t/* OK to deallocate.\t*/\n    pthread_cleanup_push(GC_thread_exit_proc, 0);\n#   if defined(THREAD_LOCAL_ALLOC)\n \tLOCK();\n        GC_init_thread_local(&(me->tlfs));\n\tUNLOCK();\n#   endif\n    result = (*start)(start_arg);\n#   if DEBUG_THREADS\n        GC_printf(\"Finishing thread 0x%x\\n\", (unsigned)pthread_self());\n#   endif\n    me -> status = result;\n    pthread_cleanup_pop(1);\n    /* Cleanup acquires lock, ensuring that we can't exit\t\t*/\n    /* while a collection that thinks we're alive is trying to stop     */\n    /* us.\t\t\t\t\t\t\t\t*/\n    return(result);\n}\n\nvoid * GC_start_routine(void * arg)\n{\n#   ifdef INCLUDE_LINUX_THREAD_DESCR\n      struct GC_stack_base sb;\n\n#     ifdef REDIRECT_MALLOC\n      \t/* GC_get_stack_base may call pthread_getattr_np, which can \t*/\n        /* unfortunately call realloc, which may allocate from an\t*/\n        /* unregistered thread.  This is unpleasant, since it might\t*/ \n        /* force heap growth.\t\t\t\t\t\t*/\n        GC_disable();\n#     endif\n      if (GC_get_stack_base(&sb) != GC_SUCCESS)\n\tABORT(\"Failed to get thread stack base.\");\n#     ifdef REDIRECT_MALLOC\n        GC_enable();\n#     endif\n      return GC_inner_start_routine(&sb, arg);\n#   else\n      return GC_call_with_stack_base(GC_inner_start_routine, arg);\n#   endif\n}\n\nint\nWRAP_FUNC(pthread_create)(pthread_t *new_thread,\n\t\t  const pthread_attr_t *attr,\n                  void *(*start_routine)(void *), void *arg)\n{\n    int result;\n    int detachstate;\n    word my_flags = 0;\n    struct start_info * si; \n\t/* This is otherwise saved only in an area mmapped by the thread */\n\t/* library, which isn't visible to the collector.\t\t */\n \n    /* We resist the temptation to muck with the stack size here,\t*/\n    /* even if the default is unreasonably small.  That's the client's\t*/\n    /* responsibility.\t\t\t\t\t\t\t*/\n\n    INIT_REAL_SYMS();\n    LOCK();\n    si = (struct start_info *)GC_INTERNAL_MALLOC(sizeof(struct start_info),\n\t\t\t\t\t\t NORMAL);\n    UNLOCK();\n    if (!parallel_initialized) GC_init_parallel();\n    if (0 == si) return(ENOMEM);\n    sem_init(&(si -> registered), 0, 0);\n    si -> start_routine = start_routine;\n    si -> arg = arg;\n    LOCK();\n    if (!GC_thr_initialized) GC_thr_init();\n#   ifdef GC_ASSERTIONS\n      {\n\tsize_t stack_size = 0;\n\tif (NULL != attr) {\n\t   pthread_attr_getstacksize(attr, &stack_size);\n\t}\n\tif (0 == stack_size) {\n\t   pthread_attr_t my_attr;\n\t   pthread_attr_init(&my_attr);\n\t   pthread_attr_getstacksize(&my_attr, &stack_size);\n\t}\n\t/* On Solaris 10, with default attr initialization, \t*/\n\t/* stack_size remains 0.  Fudge it.\t\t\t*/\n\tif (0 == stack_size) {\n#\t    ifndef SOLARIS\n\t      WARN(\"Failed to get stack size for assertion checking\\n\", 0);\n#\t    endif\n\t    stack_size = 1000000;\n\t}\n#       ifdef PARALLEL_MARK\n\t  GC_ASSERT(stack_size >= (8*HBLKSIZE*sizeof(word)));\n#       else\n          /* FreeBSD-5.3/Alpha: default pthread stack is 64K, \t*/\n\t  /* HBLKSIZE=8192, sizeof(word)=8\t\t\t*/\n\t  GC_ASSERT(stack_size >= 65536);\n#       endif\n\t/* Our threads may need to do some work for the GC.\t*/\n\t/* Ridiculously small threads won't work, and they\t*/\n\t/* probably wouldn't work anyway.\t\t\t*/\n      }\n#   endif\n    if (NULL == attr) {\n\tdetachstate = PTHREAD_CREATE_JOINABLE;\n    } else { \n        pthread_attr_getdetachstate(attr, &detachstate);\n    }\n    if (PTHREAD_CREATE_DETACHED == detachstate) my_flags |= DETACHED;\n    si -> flags = my_flags;\n    UNLOCK();\n#   ifdef DEBUG_THREADS\n        GC_printf(\"About to start new thread from thread 0x%x\\n\",\n\t\t  (unsigned)pthread_self());\n#   endif\n    GC_need_to_lock = TRUE;\n\n    result = REAL_FUNC(pthread_create)(new_thread, attr, GC_start_routine, si);\n\n#   ifdef DEBUG_THREADS\n        GC_printf(\"Started thread 0x%x\\n\", (unsigned)(*new_thread));\n#   endif\n    /* Wait until child has been added to the thread table.\t\t*/\n    /* This also ensures that we hold onto si until the child is done\t*/\n    /* with it.  Thus it doesn't matter whether it is otherwise\t\t*/\n    /* visible to the collector.\t\t\t\t\t*/\n    if (0 == result) {\n\twhile (0 != sem_wait(&(si -> registered))) {\n            if (EINTR != errno) ABORT(\"sem_wait failed\");\n\t}\n    }\n    sem_destroy(&(si -> registered));\n    LOCK();\n    GC_INTERNAL_FREE(si);\n    UNLOCK();\n\n    return(result);\n}\n\n/* Spend a few cycles in a way that can't introduce contention with\t*/\n/* othre threads.\t\t\t\t\t\t\t*/\nvoid GC_pause(void)\n{\n    int i;\n#   if !defined(__GNUC__) || defined(__INTEL_COMPILER)\n      volatile word dummy = 0;\n#   endif\n\n    for (i = 0; i < 10; ++i) { \n#     if defined(__GNUC__) && !defined(__INTEL_COMPILER)\n        __asm__ __volatile__ (\" \" : : : \"memory\");\n#     else\n\t/* Something that's unlikely to be optimized away. */\n\tGC_noop(++dummy);\n#     endif\n    }\n}\n    \n#define SPIN_MAX 128\t/* Maximum number of calls to GC_pause before\t*/\n\t\t\t/* give up.\t\t\t\t\t*/\n\nvolatile GC_bool GC_collecting = 0;\n\t\t\t/* A hint that we're in the collector and       */\n                        /* holding the allocation lock for an           */\n                        /* extended period.                             */\n\n#if !defined(USE_SPIN_LOCK) || defined(PARALLEL_MARK)\n/* If we don't want to use the below spinlock implementation, either\t*/\n/* because we don't have a GC_test_and_set implementation, or because \t*/\n/* we don't want to risk sleeping, we can still try spinning on \t*/\n/* pthread_mutex_trylock for a while.  This appears to be very\t\t*/\n/* beneficial in many cases.\t\t\t\t\t\t*/\n/* I suspect that under high contention this is nearly always better\t*/\n/* than the spin lock.  But it's a bit slower on a uniprocessor.\t*/\n/* Hence we still default to the spin lock.\t\t\t\t*/\n/* This is also used to acquire the mark lock for the parallel\t\t*/\n/* marker.\t\t\t\t\t\t\t\t*/\n\n/* Here we use a strict exponential backoff scheme.  I don't know \t*/\n/* whether that's better or worse than the above.  We eventually \t*/\n/* yield by calling pthread_mutex_lock(); it never makes sense to\t*/\n/* explicitly sleep.\t\t\t\t\t\t\t*/\n\n#define LOCK_STATS\n#ifdef LOCK_STATS\n  unsigned long GC_spin_count = 0;\n  unsigned long GC_block_count = 0;\n  unsigned long GC_unlocked_count = 0;\n#endif\n\nvoid GC_generic_lock(pthread_mutex_t * lock)\n{\n#ifndef NO_PTHREAD_TRYLOCK\n    unsigned pause_length = 1;\n    unsigned i;\n    \n    if (0 == pthread_mutex_trylock(lock)) {\n#       ifdef LOCK_STATS\n\t    ++GC_unlocked_count;\n#       endif\n\treturn;\n    }\n    for (; pause_length <= SPIN_MAX; pause_length <<= 1) {\n\tfor (i = 0; i < pause_length; ++i) {\n\t    GC_pause();\n\t}\n        switch(pthread_mutex_trylock(lock)) {\n\t    case 0:\n#\t\tifdef LOCK_STATS\n\t\t    ++GC_spin_count;\n#\t\tendif\n\t\treturn;\n\t    case EBUSY:\n\t\tbreak;\n\t    default:\n\t\tABORT(\"Unexpected error from pthread_mutex_trylock\");\n        }\n    }\n#endif /* !NO_PTHREAD_TRYLOCK */\n#   ifdef LOCK_STATS\n\t++GC_block_count;\n#   endif\n    pthread_mutex_lock(lock);\n}\n\n#endif /* !USE_SPIN_LOCK || PARALLEL_MARK */\n\n#if defined(USE_SPIN_LOCK)\n\n/* Reasonably fast spin locks.  Basically the same implementation */\n/* as STL alloc.h.  This isn't really the right way to do this.   */\n/* but until the POSIX scheduling mess gets straightened out ...  */\n\nvolatile AO_TS_t GC_allocate_lock = 0;\n\n\nvoid GC_lock(void)\n{\n#   define low_spin_max 30  /* spin cycles if we suspect uniprocessor */\n#   define high_spin_max SPIN_MAX /* spin cycles for multiprocessor */\n    static unsigned spin_max = low_spin_max;\n    unsigned my_spin_max;\n    static unsigned last_spins = 0;\n    unsigned my_last_spins;\n    int i;\n\n    if (AO_test_and_set_acquire(&GC_allocate_lock) == AO_TS_CLEAR) {\n        return;\n    }\n    my_spin_max = spin_max;\n    my_last_spins = last_spins;\n    for (i = 0; i < my_spin_max; i++) {\n        if (GC_collecting || GC_nprocs == 1) goto yield;\n        if (i < my_last_spins/2) {\n            GC_pause();\n            continue;\n        }\n        if (AO_test_and_set_acquire(&GC_allocate_lock) == AO_TS_CLEAR) {\n\t    /*\n             * got it!\n             * Spinning worked.  Thus we're probably not being scheduled\n             * against the other process with which we were contending.\n             * Thus it makes sense to spin longer the next time.\n\t     */\n            last_spins = i;\n            spin_max = high_spin_max;\n            return;\n        }\n    }\n    /* We are probably being scheduled against the other process.  Sleep. */\n    spin_max = low_spin_max;\nyield:\n    for (i = 0;; ++i) {\n        if (AO_test_and_set_acquire(&GC_allocate_lock) == AO_TS_CLEAR) {\n            return;\n        }\n#       define SLEEP_THRESHOLD 12\n\t\t/* Under Linux very short sleeps tend to wait until\t*/\n\t\t/* the current time quantum expires.  On old Linux\t*/\n\t\t/* kernels nanosleep(<= 2ms) just spins under Linux.    */\n\t\t/* (Under 2.4, this happens only for real-time\t\t*/\n\t\t/* processes.)  We want to minimize both behaviors\t*/\n\t\t/* here.\t\t\t\t\t\t*/\n        if (i < SLEEP_THRESHOLD) {\n            sched_yield();\n\t} else {\n\t    struct timespec ts;\n\t\n\t    if (i > 24) i = 24;\n\t\t\t/* Don't wait for more than about 15msecs, even\t*/\n\t\t\t/* under extreme contention.\t\t\t*/\n\t    ts.tv_sec = 0;\n\t    ts.tv_nsec = 1 << i;\n\t    nanosleep(&ts, 0);\n\t}\n    }\n}\n\n#else  /* !USE_SPINLOCK */\nvoid GC_lock(void)\n{\n#ifndef NO_PTHREAD_TRYLOCK\n    if (1 == GC_nprocs || GC_collecting) {\n\tpthread_mutex_lock(&GC_allocate_ml);\n    } else {\n        GC_generic_lock(&GC_allocate_ml);\n    }\n#else  /* !NO_PTHREAD_TRYLOCK */\n    pthread_mutex_lock(&GC_allocate_ml);\n#endif /* !NO_PTHREAD_TRYLOCK */\n}\n\n#endif /* !USE_SPINLOCK */\n\n#if defined(PARALLEL_MARK) || defined(THREAD_LOCAL_ALLOC)\n\n#ifdef GC_ASSERTIONS\n  unsigned long GC_mark_lock_holder = NO_THREAD;\n#endif\n\n#if 0\n  /* Ugly workaround for a linux threads bug in the final versions      */\n  /* of glibc2.1.  Pthread_mutex_trylock sets the mutex owner           */\n  /* field even when it fails to acquire the mutex.  This causes        */\n  /* pthread_cond_wait to die.  Remove for glibc2.2.                    */\n  /* According to the man page, we should use                           */\n  /* PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP, but that isn't actually   */\n  /* defined.                                                           */\n  static pthread_mutex_t mark_mutex =\n        {0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP, {0, 0}};\n#else\n  static pthread_mutex_t mark_mutex = PTHREAD_MUTEX_INITIALIZER;\n#endif\n\nstatic pthread_cond_t builder_cv = PTHREAD_COND_INITIALIZER;\n\nvoid GC_acquire_mark_lock(void)\n{\n/*\n    if (pthread_mutex_lock(&mark_mutex) != 0) {\n\tABORT(\"pthread_mutex_lock failed\");\n    }\n*/\n    GC_generic_lock(&mark_mutex);\n#   ifdef GC_ASSERTIONS\n\tGC_mark_lock_holder = NUMERIC_THREAD_ID(pthread_self());\n#   endif\n}\n\nvoid GC_release_mark_lock(void)\n{\n    GC_ASSERT(GC_mark_lock_holder == NUMERIC_THREAD_ID(pthread_self()));\n#   ifdef GC_ASSERTIONS\n\tGC_mark_lock_holder = NO_THREAD;\n#   endif\n    if (pthread_mutex_unlock(&mark_mutex) != 0) {\n\tABORT(\"pthread_mutex_unlock failed\");\n    }\n}\n\n/* Collector must wait for a freelist builders for 2 reasons:\t\t*/\n/* 1) Mark bits may still be getting examined without lock.\t\t*/\n/* 2) Partial free lists referenced only by locals may not be scanned \t*/\n/*    correctly, e.g. if they contain \"pointer-free\" objects, since the\t*/\n/*    free-list link may be ignored.\t\t\t\t\t*/\nvoid GC_wait_builder(void)\n{\n    GC_ASSERT(GC_mark_lock_holder == NUMERIC_THREAD_ID(pthread_self()));\n#   ifdef GC_ASSERTIONS\n\tGC_mark_lock_holder = NO_THREAD;\n#   endif\n    if (pthread_cond_wait(&builder_cv, &mark_mutex) != 0) {\n\tABORT(\"pthread_cond_wait failed\");\n    }\n    GC_ASSERT(GC_mark_lock_holder == NO_THREAD);\n#   ifdef GC_ASSERTIONS\n\tGC_mark_lock_holder = NUMERIC_THREAD_ID(pthread_self());\n#   endif\n}\n\nvoid GC_wait_for_reclaim(void)\n{\n    GC_acquire_mark_lock();\n    while (GC_fl_builder_count > 0) {\n\tGC_wait_builder();\n    }\n    GC_release_mark_lock();\n}\n\nvoid GC_notify_all_builder(void)\n{\n    GC_ASSERT(GC_mark_lock_holder == NUMERIC_THREAD_ID(pthread_self()));\n    if (pthread_cond_broadcast(&builder_cv) != 0) {\n\tABORT(\"pthread_cond_broadcast failed\");\n    }\n}\n\n#endif /* PARALLEL_MARK || THREAD_LOCAL_ALLOC */\n\n#ifdef PARALLEL_MARK\n\nstatic pthread_cond_t mark_cv = PTHREAD_COND_INITIALIZER;\n\nvoid GC_wait_marker(void)\n{\n    GC_ASSERT(GC_mark_lock_holder == NUMERIC_THREAD_ID(pthread_self()));\n#   ifdef GC_ASSERTIONS\n\tGC_mark_lock_holder = NO_THREAD;\n#   endif\n    if (pthread_cond_wait(&mark_cv, &mark_mutex) != 0) {\n\tABORT(\"pthread_cond_wait failed\");\n    }\n    GC_ASSERT(GC_mark_lock_holder == NO_THREAD);\n#   ifdef GC_ASSERTIONS\n\tGC_mark_lock_holder = NUMERIC_THREAD_ID(pthread_self());\n#   endif\n}\n\nvoid GC_notify_all_marker(void)\n{\n    if (pthread_cond_broadcast(&mark_cv) != 0) {\n\tABORT(\"pthread_cond_broadcast failed\");\n    }\n}\n\n#endif /* PARALLEL_MARK */\n\n# endif /* GC_LINUX_THREADS and friends */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n## Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n## Free Software Foundation, Inc.\n## Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n##\n## This file is free software; the Free Software Foundation gives\n## unlimited permission to copy and/or distribute it, with or without\n## modifications, as long as this notice is preserved.\n\n# serial 48 AC_PROG_LIBTOOL\n\n\n# AC_PROVIDE_IFELSE(MACRO-NAME, IF-PROVIDED, IF-NOT-PROVIDED)\n# -----------------------------------------------------------\n# If this macro is not defined by Autoconf, define it here.\nm4_ifdef([AC_PROVIDE_IFELSE],\n         [],\n         [m4_define([AC_PROVIDE_IFELSE],\n\t         [m4_ifdef([AC_PROVIDE_$1],\n\t\t           [$2], [$3])])])\n\n\n# AC_PROG_LIBTOOL\n# ---------------\nAC_DEFUN([AC_PROG_LIBTOOL],\n[AC_REQUIRE([_AC_PROG_LIBTOOL])dnl\ndnl If AC_PROG_CXX has already been expanded, run AC_LIBTOOL_CXX\ndnl immediately, otherwise, hook it in at the end of AC_PROG_CXX.\n  AC_PROVIDE_IFELSE([AC_PROG_CXX],\n    [AC_LIBTOOL_CXX],\n    [define([AC_PROG_CXX], defn([AC_PROG_CXX])[AC_LIBTOOL_CXX\n  ])])\ndnl And a similar setup for Fortran 77 support\n  AC_PROVIDE_IFELSE([AC_PROG_F77],\n    [AC_LIBTOOL_F77],\n    [define([AC_PROG_F77], defn([AC_PROG_F77])[AC_LIBTOOL_F77\n])])\n\ndnl Quote A][M_PROG_GCJ so that aclocal doesn't bring it in needlessly.\ndnl If either AC_PROG_GCJ or A][M_PROG_GCJ have already been expanded, run\ndnl AC_LIBTOOL_GCJ immediately, otherwise, hook it in at the end of both.\n  AC_PROVIDE_IFELSE([AC_PROG_GCJ],\n    [AC_LIBTOOL_GCJ],\n    [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n      [AC_LIBTOOL_GCJ],\n      [AC_PROVIDE_IFELSE([LT_AC_PROG_GCJ],\n\t[AC_LIBTOOL_GCJ],\n      [ifdef([AC_PROG_GCJ],\n\t     [define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[AC_LIBTOOL_GCJ])])\n       ifdef([A][M_PROG_GCJ],\n\t     [define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[AC_LIBTOOL_GCJ])])\n       ifdef([LT_AC_PROG_GCJ],\n\t     [define([LT_AC_PROG_GCJ],\n\t\tdefn([LT_AC_PROG_GCJ])[AC_LIBTOOL_GCJ])])])])\n])])# AC_PROG_LIBTOOL\n\n\n# _AC_PROG_LIBTOOL\n# ----------------\nAC_DEFUN([_AC_PROG_LIBTOOL],\n[AC_REQUIRE([AC_LIBTOOL_SETUP])dnl\nAC_BEFORE([$0],[AC_LIBTOOL_CXX])dnl\nAC_BEFORE([$0],[AC_LIBTOOL_F77])dnl\nAC_BEFORE([$0],[AC_LIBTOOL_GCJ])dnl\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ac_aux_dir/ltmain.sh\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n# Prevent multiple expansion\ndefine([AC_PROG_LIBTOOL], [])\n])# _AC_PROG_LIBTOOL\n\n\n# AC_LIBTOOL_SETUP\n# ----------------\nAC_DEFUN([AC_LIBTOOL_SETUP],\n[AC_PREREQ(2.50)dnl\nAC_REQUIRE([AC_ENABLE_SHARED])dnl\nAC_REQUIRE([AC_ENABLE_STATIC])dnl\nAC_REQUIRE([AC_ENABLE_FAST_INSTALL])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_LD])dnl\nAC_REQUIRE([AC_PROG_LD_RELOAD_FLAG])dnl\nAC_REQUIRE([AC_PROG_NM])dnl\n\nAC_REQUIRE([AC_PROG_LN_S])dnl\nAC_REQUIRE([AC_DEPLIBS_CHECK_METHOD])dnl\n# Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\nAC_REQUIRE([AC_OBJEXT])dnl\nAC_REQUIRE([AC_EXEEXT])dnl\ndnl\n\nAC_LIBTOOL_SYS_MAX_CMD_LEN\nAC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE\nAC_LIBTOOL_OBJDIR\n\nAC_REQUIRE([_LT_AC_SYS_COMPILER])dnl\n_LT_AC_PROG_ECHO_BACKSLASH\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed='sed -e 1s/^X//'\n[sed_quote_subst='s/\\([\\\\\"\\\\`$\\\\\\\\]\\)/\\\\\\1/g']\n\n# Same as above, but do not quote variable references.\n[double_quote_subst='s/\\([\\\\\"\\\\`\\\\\\\\]\\)/\\\\\\1/g']\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n\n# Constants:\nrm=\"rm -f\"\n\n# Global variables:\ndefault_ofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\nltmain=\"$ac_aux_dir/ltmain.sh\"\nofile=\"$default_ofile\"\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nAC_CHECK_TOOL(AR, ar, false)\nAC_CHECK_TOOL(RANLIB, ranlib, :)\nAC_CHECK_TOOL(STRIP, strip, :)\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$AR\" && AR=ar\ntest -z \"$AR_FLAGS\" && AR_FLAGS=cru\ntest -z \"$AS\" && AS=as\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\ntest -z \"$LD\" && LD=ld\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ntest -z \"$NM\" && NM=nm\ntest -z \"$SED\" && SED=sed\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\ntest -z \"$RANLIB\" && RANLIB=:\ntest -z \"$STRIP\" && STRIP=:\ntest -z \"$ac_objext\" && ac_objext=o\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$oldlib\"\nfi\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    AC_PATH_MAGIC\n  fi\n  ;;\nesac\n\nAC_PROVIDE_IFELSE([AC_LIBTOOL_DLOPEN], enable_dlopen=yes, enable_dlopen=no)\nAC_PROVIDE_IFELSE([AC_LIBTOOL_WIN32_DLL],\nenable_win32_dll=yes, enable_win32_dll=no)\n\nAC_ARG_ENABLE([libtool-lock],\n    [AC_HELP_STRING([--disable-libtool-lock],\n\t[avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\nAC_ARG_WITH([pic],\n    [AC_HELP_STRING([--with-pic],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [pic_mode=\"$withval\"],\n    [pic_mode=default])\ntest -z \"$pic_mode\" && pic_mode=default\n\n# Use C for the default configuration in the libtool script\ntagname=\nAC_LIBTOOL_LANG_C_CONFIG\n_LT_AC_TAGCONFIG\n])# AC_LIBTOOL_SETUP\n\n\n# _LT_AC_SYS_COMPILER\n# -------------------\nAC_DEFUN([_LT_AC_SYS_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_AC_SYS_COMPILER\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nAC_DEFUN([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$echo \"X$cc_temp\" | $Xsed -e 's%.*/%%' -e \"s%^$host_alias-%%\"`\n])\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nAC_DEFUN([_LT_COMPILER_BOILERPLATE],\n[ac_outfile=conftest.$ac_objext\nprintf \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$rm conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nAC_DEFUN([_LT_LINKER_BOILERPLATE],\n[ac_outfile=conftest.$ac_objext\nprintf \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$rm conftest*\n])# _LT_LINKER_BOILERPLATE\n\n\n# _LT_AC_SYS_LIBPATH_AIX\n# ----------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\nAC_DEFUN([_LT_AC_SYS_LIBPATH_AIX],\n[AC_LINK_IFELSE(AC_LANG_PROGRAM,[\naix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e '/Import File Strings/,/^$/ { /^0/ { s/^0  *\\(.*\\)$/\\1/; p; }\n}'`\n# Check for a 64-bit object if we didn't find anything.\nif test -z \"$aix_libpath\"; then aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e '/Import File Strings/,/^$/ { /^0/ { s/^0  *\\(.*\\)$/\\1/; p; }\n}'`; fi],[])\nif test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n])# _LT_AC_SYS_LIBPATH_AIX\n\n\n# _LT_AC_SHELL_INIT(ARG)\n# ----------------------\nAC_DEFUN([_LT_AC_SHELL_INIT],\n[ifdef([AC_DIVERSION_NOTICE],\n\t     [AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)],\n\t [AC_DIVERT_PUSH(NOTICE)])\n$1\nAC_DIVERT_POP\n])# _LT_AC_SHELL_INIT\n\n\n# _LT_AC_PROG_ECHO_BACKSLASH\n# --------------------------\n# Add some code to the start of the generated configure script which\n# will find an echo command which doesn't interpret backslashes.\nAC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH],\n[_LT_AC_SHELL_INIT([\n# Check that we are running under the correct shell.\nSHELL=${CONFIG_SHELL-/bin/sh}\n\ncase X$ECHO in\nX*--fallback-echo)\n  # Remove one level of quotation (which was required for Make).\n  ECHO=`echo \"$ECHO\" | sed 's,\\\\\\\\\\[$]\\\\[$]0,'[$]0','`\n  ;;\nesac\n\necho=${ECHO-echo}\nif test \"X[$]1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X[$]1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`($echo '\\t') 2>/dev/null`\" = 'X\\t' ; then\n  # Yippee, $echo works!\n  :\nelse\n  # Restart under the correct shell.\n  exec $SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\nfi\n\nif test \"X[$]1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<EOF\n[$]*\nEOF\n  exit 0\nfi\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nif test -z \"$ECHO\"; then\nif test \"X${echo_test_string+set}\" != Xset; then\n# find a string as large as possible, as long as the shell can cope with it\n  for cmd in 'sed 50q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 2q \"[$]0\"' 'echo test'; do\n    # expected sizes: less than 2Kb, 1Kb, 512 bytes, 16 bytes, ...\n    if (echo_test_string=`eval $cmd`) 2>/dev/null &&\n       echo_test_string=`eval $cmd` &&\n       (test \"X$echo_test_string\" = \"X$echo_test_string\") 2>/dev/null\n    then\n      break\n    fi\n  done\nfi\n\nif test \"X`($echo '\\t') 2>/dev/null`\" = 'X\\t' &&\n   echo_testing_string=`($echo \"$echo_test_string\") 2>/dev/null` &&\n   test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n  :\nelse\n  # The Solaris, AIX, and Digital Unix default echo programs unquote\n  # backslashes.  This makes it impossible to quote backslashes using\n  #   echo \"$something\" | sed 's/\\\\/\\\\\\\\/g'\n  #\n  # So, first we look for a working echo in the user's PATH.\n\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for dir in $PATH /usr/ucb; do\n    IFS=\"$lt_save_ifs\"\n    if (test -f $dir/echo || test -f $dir/echo$ac_exeext) &&\n       test \"X`($dir/echo '\\t') 2>/dev/null`\" = 'X\\t' &&\n       echo_testing_string=`($dir/echo \"$echo_test_string\") 2>/dev/null` &&\n       test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n      echo=\"$dir/echo\"\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n\n  if test \"X$echo\" = Xecho; then\n    # We didn't find a better echo, so look for alternatives.\n    if test \"X`(print -r '\\t') 2>/dev/null`\" = 'X\\t' &&\n       echo_testing_string=`(print -r \"$echo_test_string\") 2>/dev/null` &&\n       test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n      # This shell has a builtin print -r that does the trick.\n      echo='print -r'\n    elif (test -f /bin/ksh || test -f /bin/ksh$ac_exeext) &&\n\t test \"X$CONFIG_SHELL\" != X/bin/ksh; then\n      # If we have ksh, try running configure again with it.\n      ORIGINAL_CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n      export ORIGINAL_CONFIG_SHELL\n      CONFIG_SHELL=/bin/ksh\n      export CONFIG_SHELL\n      exec $CONFIG_SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\n    else\n      # Try using printf.\n      echo='printf %s\\n'\n      if test \"X`($echo '\\t') 2>/dev/null`\" = 'X\\t' &&\n\t echo_testing_string=`($echo \"$echo_test_string\") 2>/dev/null` &&\n\t test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t# Cool, printf works\n\t:\n      elif echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = 'X\\t' &&\n\t   echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\tCONFIG_SHELL=$ORIGINAL_CONFIG_SHELL\n\texport CONFIG_SHELL\n\tSHELL=\"$CONFIG_SHELL\"\n\texport SHELL\n\techo=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n      elif echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = 'X\\t' &&\n\t   echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\techo=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n      else\n\t# maybe with a smaller string...\n\tprev=:\n\n\tfor cmd in 'echo test' 'sed 2q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 50q \"[$]0\"'; do\n\t  if (test \"X$echo_test_string\" = \"X`eval $cmd`\") 2>/dev/null\n\t  then\n\t    break\n\t  fi\n\t  prev=\"$cmd\"\n\tdone\n\n\tif test \"$prev\" != 'sed 50q \"[$]0\"'; then\n\t  echo_test_string=`eval $prev`\n\t  export echo_test_string\n\t  exec ${ORIGINAL_CONFIG_SHELL-${CONFIG_SHELL-/bin/sh}} \"[$]0\" ${1+\"[$]@\"}\n\telse\n\t  # Oops.  We lost completely, so just stick with echo.\n\t  echo=echo\n\tfi\n      fi\n    fi\n  fi\nfi\nfi\n\n# Copy echo and quote the copy suitably for passing to libtool from\n# the Makefile, instead of quoting the original, which is used later.\nECHO=$echo\nif test \"X$ECHO\" = \"X$CONFIG_SHELL [$]0 --fallback-echo\"; then\n   ECHO=\"$CONFIG_SHELL \\\\\\$\\[$]0 --fallback-echo\"\nfi\n\nAC_SUBST(ECHO)\n])])# _LT_AC_PROG_ECHO_BACKSLASH\n\n\n# _LT_AC_LOCK\n# -----------\nAC_DEFUN([_LT_AC_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n    [AC_HELP_STRING([--disable-libtool-lock],\n\t[avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n    *ELF-32*)\n      HPUX_IA64_MODE=\"32\"\n      ;;\n    *ELF-64*)\n      HPUX_IA64_MODE=\"64\"\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line __oline__ \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n   if test \"$lt_cv_prog_gnu_ld\" = yes; then\n    case `/usr/bin/file conftest.$ac_objext` in\n    *32-bit*)\n      LD=\"${LD-ld} -melf32bsmip\"\n      ;;\n    *N32*)\n      LD=\"${LD-ld} -melf32bmipn32\"\n      ;;\n    *64-bit*)\n      LD=\"${LD-ld} -melf64bmip\"\n      ;;\n    esac\n   else\n    case `/usr/bin/file conftest.$ac_objext` in\n    *32-bit*)\n      LD=\"${LD-ld} -32\"\n      ;;\n    *N32*)\n      LD=\"${LD-ld} -n32\"\n      ;;\n    *64-bit*)\n      LD=\"${LD-ld} -64\"\n      ;;\n    esac\n   fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*linux*|ppc*-*linux*|powerpc*-*linux*|s390*-*linux*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *32-bit*)\n      case $host in\n        x86_64-*linux*)\n          LD=\"${LD-ld} -m elf_i386\"\n          ;;\n        ppc64-*linux*|powerpc64-*linux*)\n          LD=\"${LD-ld} -m elf32ppclinux\"\n          ;;\n        s390x-*linux*)\n          LD=\"${LD-ld} -m elf_s390\"\n          ;;\n        sparc64-*linux*)\n          LD=\"${LD-ld} -m elf32_sparc\"\n          ;;\n      esac\n      ;;\n    *64-bit*)\n      case $host in\n        x86_64-*linux*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        ppc*-*linux*|powerpc*-*linux*)\n          LD=\"${LD-ld} -m elf64ppc\"\n          ;;\n        s390*-*linux*)\n          LD=\"${LD-ld} -m elf64_s390\"\n          ;;\n        sparc*-*linux*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_TRY_LINK([],[],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\nsparc*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*) LD=\"${LD-ld} -m elf64_sparc\" ;;\n      *)    LD=\"${LD-ld} -64\" ;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\nAC_PROVIDE_IFELSE([AC_LIBTOOL_WIN32_DLL],\n[*-*-cygwin* | *-*-mingw* | *-*-pw32*)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\n  ])\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n\n])# _LT_AC_LOCK\n\n\n# AC_LIBTOOL_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([AC_LIBTOOL_COMPILER_OPTION],\n[AC_REQUIRE([LT_AC_PROG_SED])\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n  ifelse([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   printf \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $echo \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $rm conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    ifelse([$5], , :, [$5])\nelse\n    ifelse([$6], , :, [$6])\nfi\n])# AC_LIBTOOL_COMPILER_OPTION\n\n\n# AC_LIBTOOL_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                          [ACTION-SUCCESS], [ACTION-FAILURE])\n# ------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([AC_LIBTOOL_LINKER_OPTION],\n[AC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   printf \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $echo \"X$_lt_linker_boilerplate\" | $Xsed -e '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $rm conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    ifelse([$4], , :, [$4])\nelse\n    ifelse([$5], , :, [$5])\nfi\n])# AC_LIBTOOL_LINKER_OPTION\n\n\n# AC_LIBTOOL_SYS_MAX_CMD_LEN\n# --------------------------\nAC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN],\n[# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[ \t]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    # If test is not a shell built-in, we'll probably end up computing a\n    # maximum length that is only half of the actual maximum length, but\n    # we can't tell.\n    SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n    while (test \"X\"`$SHELL [$]0 --fallback-echo \"X$teststring\" 2>/dev/null` \\\n\t       = \"XX$teststring\") >/dev/null 2>&1 &&\n\t    new_result=`expr \"X$teststring\" : \".*\" 2>&1` &&\n\t    lt_cv_sys_max_cmd_len=$new_result &&\n\t    test $i != 17 # 1/2 MB should be enough\n    do\n      i=`expr $i + 1`\n      teststring=$teststring$teststring\n    done\n    teststring=\n    # Add a significant safety factor because C++ compilers can tack on massive\n    # amounts of additional arguments before passing them to the linker.\n    # It appears as though 1/2 is a usable value.\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\n])# AC_LIBTOOL_SYS_MAX_CMD_LEN\n\n\n# _LT_AC_CHECK_DLFCN\n# ------------------\nAC_DEFUN([_LT_AC_CHECK_DLFCN],\n[AC_CHECK_HEADERS(dlfcn.h)dnl\n])# _LT_AC_CHECK_DLFCN\n\n\n# _LT_AC_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                           ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ---------------------------------------------------------------------\nAC_DEFUN([_LT_AC_TRY_DLOPEN_SELF],\n[AC_REQUIRE([_LT_AC_CHECK_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<EOF\n[#line __oline__ \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n#ifdef __cplusplus\nextern \"C\" void exit (int);\n#endif\n\nvoid fnord() { int i=42;}\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else if (dlsym( self,\"_fnord\")) status = $lt_dlneed_uscore;\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n    exit (status);\n}]\nEOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_AC_TRY_DLOPEN_SELF\n\n\n# AC_LIBTOOL_DLOPEN_SELF\n# ----------------------\nAC_DEFUN([AC_LIBTOOL_DLOPEN_SELF],\n[AC_REQUIRE([_LT_AC_CHECK_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n   ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n   ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n   ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-dld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-dld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_AC_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n    \t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_AC_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n])# AC_LIBTOOL_DLOPEN_SELF\n\n\n# AC_LIBTOOL_PROG_CC_C_O([TAGNAME])\n# ---------------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler\nAC_DEFUN([AC_LIBTOOL_PROG_CC_C_O],\n[AC_REQUIRE([_LT_AC_SYS_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $rm -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   printf \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $echo \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $rm conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $rm out/ii_files/* && rmdir out/ii_files\n   $rm out/* && rmdir out\n   cd ..\n   rmdir conftest\n   $rm conftest*\n])\n])# AC_LIBTOOL_PROG_CC_C_O\n\n\n# AC_LIBTOOL_SYS_HARD_LINK_LOCKS([TAGNAME])\n# -----------------------------------------\n# Check to see if we can do hard links to lock some files if needed\nAC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS],\n[AC_REQUIRE([_LT_AC_LOCK])dnl\n\nhard_links=\"nottested\"\nif test \"$_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $rm conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n])# AC_LIBTOOL_SYS_HARD_LINK_LOCKS\n\n\n# AC_LIBTOOL_OBJDIR\n# -----------------\nAC_DEFUN([AC_LIBTOOL_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n])# AC_LIBTOOL_OBJDIR\n\n\n# AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH([TAGNAME])\n# ----------------------------------------------\n# Check hardcoding attributes.\nAC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_AC_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)\" || \\\n   test -n \"$_LT_AC_TAGVAR(runpath_var, $1)\" || \\\n   test \"X$_LT_AC_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existant directories.\n  if test \"$_LT_AC_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_AC_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_AC_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_AC_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_AC_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_AC_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_AC_TAGVAR(hardcode_action, $1)\" = relink; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n])# AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH\n\n\n# AC_LIBTOOL_SYS_LIB_STRIP\n# ------------------------\nAC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP],\n[striplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | grep \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n   darwin*)\n       if test -n \"$STRIP\" ; then\n         striplib=\"$STRIP -x\"\n         AC_MSG_RESULT([yes])\n       else\n  AC_MSG_RESULT([no])\nfi\n       ;;\n   *)\n  AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n])# AC_LIBTOOL_SYS_LIB_STRIP\n\n\n# AC_LIBTOOL_SYS_DYNAMIC_LINKER\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nAC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER],\n[AC_MSG_CHECKING([dynamic linker characteristics])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nif test \"$GCC\" = yes; then\n  sys_lib_search_path_spec=`$CC -print-search-dirs | grep \"^libraries:\" | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n  if echo \"$sys_lib_search_path_spec\" | grep ';' >/dev/null ; then\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    sys_lib_search_path_spec=`echo \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n  else\n    sys_lib_search_path_spec=`echo \"$sys_lib_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n  fi\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix4* | aix5*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | grep yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  library_names_spec='$libname.ixlibrary $libname.a'\n  # Create ${libname}_ixlibrary.a entries in /sys/libs.\n  finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$echo \"X$lib\" | $Xsed -e '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $rm /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$host_os in\n  yes,cygwin* | yes,mingw* | yes,pw32*)\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i;echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $rm \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=\"/usr/lib /lib/w32api /lib /usr/local/lib\"\n      ;;\n    mingw*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=`$CC -print-search-dirs | grep \"^libraries:\" | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n      if echo \"$sys_lib_search_path_spec\" | [grep ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH printed by\n        # mingw gcc, but we are running on Cygwin. Gcc prints its search\n        # path with ; separators, and with drive letters. We can handle the\n        # drive letters (cygwin fileutils understands them), so leave them,\n        # especially as we might pass files found there to a mingw objdump,\n        # which wouldn't understand a cygwinified path. Ahh.\n        sys_lib_search_path_spec=`echo \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`echo \"$sys_lib_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    ;;\n\n  *)\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    ;;\n  esac\n  dynamic_linker='Win32 ld.exe'\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${versuffix}$shared_ext ${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\n  # Apple's gcc prints 'gcc -print-search-dirs' doesn't operate the same.\n  if test \"$GCC\" = yes; then\n    sys_lib_search_path_spec=`$CC -print-search-dirs | tr \"\\n\" \"$PATH_SEPARATOR\" | sed -e 's/libraries:/@libraries:/' | tr \"@\" \"\\n\" | grep \"^libraries:\" | sed -e \"s/^libraries://\" -e \"s,=/,/,g\" -e \"s,$PATH_SEPARATOR, ,g\" -e \"s,.*,& /lib /usr/lib /usr/local/lib,g\"`\n  else\n    sys_lib_search_path_spec='/lib /usr/lib /usr/local/lib'\n  fi\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd1*)\n  dynamic_linker=no\n  ;;\n\nkfreebsd*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='GNU ld.so'\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[123]]*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  freebsd*) # from 4.6 on\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n   hppa*64*)\n     shrext_cmds='.sl'\n     hardcode_into_libs=yes\n     dynamic_linker=\"$host_os dld.sl\"\n     shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n     shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n     library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n     soname_spec='${libname}${release}${shared_ext}$major'\n     sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n     sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n     ;;\n   *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555.\n  postinstall_cmds='chmod 555 $lib'\n  ;;\n\ninterix3*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be Linux ELF.\nlinux*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nknetbsd*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='GNU ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | grep __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nnto-qnx*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*) need_version=yes ;;\n    *)                         need_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nsolaris*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      export_dynamic_flag_spec='${wl}-Blargedynsym'\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n    shlibpath_overrides_runpath=no\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    shlibpath_overrides_runpath=yes\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\nuts4*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n])# AC_LIBTOOL_SYS_DYNAMIC_LINKER\n\n\n# _LT_AC_TAGCONFIG\n# ----------------\nAC_DEFUN([_LT_AC_TAGCONFIG],\n[AC_ARG_WITH([tags],\n    [AC_HELP_STRING([--with-tags@<:@=TAGS@:>@],\n        [include additional configurations @<:@automatic@:>@])],\n    [tagnames=\"$withval\"])\n\nif test -f \"$ltmain\" && test -n \"$tagnames\"; then\n  if test ! -f \"${ofile}\"; then\n    AC_MSG_WARN([output file `$ofile' does not exist])\n  fi\n\n  if test -z \"$LTCC\"; then\n    eval \"`$SHELL ${ofile} --config | grep '^LTCC='`\"\n    if test -z \"$LTCC\"; then\n      AC_MSG_WARN([output file `$ofile' does not look like a libtool script])\n    else\n      AC_MSG_WARN([using `LTCC=$LTCC', extracted from `$ofile'])\n    fi\n  fi\n  if test -z \"$LTCFLAGS\"; then\n    eval \"`$SHELL ${ofile} --config | grep '^LTCFLAGS='`\"\n  fi\n\n  # Extract list of available tagged configurations in $ofile.\n  # Note that this assumes the entire list is on one line.\n  available_tags=`grep \"^available_tags=\" \"${ofile}\" | $SED -e 's/available_tags=\\(.*$\\)/\\1/' -e 's/\\\"//g'`\n\n  lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n  for tagname in $tagnames; do\n    IFS=\"$lt_save_ifs\"\n    # Check whether tagname contains only valid characters\n    case `$echo \"X$tagname\" | $Xsed -e 's:[[-_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890,/]]::g'` in\n    \"\") ;;\n    *)  AC_MSG_ERROR([invalid tag name: $tagname])\n\t;;\n    esac\n\n    if grep \"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$\" < \"${ofile}\" > /dev/null\n    then\n      AC_MSG_ERROR([tag name \\\"$tagname\\\" already exists])\n    fi\n\n    # Update the list of available tags.\n    if test -n \"$tagname\"; then\n      echo appending configuration tag \\\"$tagname\\\" to $ofile\n\n      case $tagname in\n      CXX)\n\tif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n\t    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n\t    (test \"X$CXX\" != \"Xg++\"))) ; then\n\t  AC_LIBTOOL_LANG_CXX_CONFIG\n\telse\n\t  tagname=\"\"\n\tfi\n\t;;\n\n      F77)\n\tif test -n \"$F77\" && test \"X$F77\" != \"Xno\"; then\n\t  AC_LIBTOOL_LANG_F77_CONFIG\n\telse\n\t  tagname=\"\"\n\tfi\n\t;;\n\n      GCJ)\n\tif test -n \"$GCJ\" && test \"X$GCJ\" != \"Xno\"; then\n\t  AC_LIBTOOL_LANG_GCJ_CONFIG\n\telse\n\t  tagname=\"\"\n\tfi\n\t;;\n\n      RC)\n\tAC_LIBTOOL_LANG_RC_CONFIG\n\t;;\n\n      *)\n\tAC_MSG_ERROR([Unsupported tag name: $tagname])\n\t;;\n      esac\n\n      # Append the new tag name to the list of available tags.\n      if test -n \"$tagname\" ; then\n      available_tags=\"$available_tags $tagname\"\n    fi\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n\n  # Now substitute the updated list of available tags.\n  if eval \"sed -e 's/^available_tags=.*\\$/available_tags=\\\"$available_tags\\\"/' \\\"$ofile\\\" > \\\"${ofile}T\\\"\"; then\n    mv \"${ofile}T\" \"$ofile\"\n    chmod +x \"$ofile\"\n  else\n    rm -f \"${ofile}T\"\n    AC_MSG_ERROR([unable to update list of available tagged configurations.])\n  fi\nfi\n])# _LT_AC_TAGCONFIG\n\n\n# AC_LIBTOOL_DLOPEN\n# -----------------\n# enable checks for dlopen support\nAC_DEFUN([AC_LIBTOOL_DLOPEN],\n [AC_BEFORE([$0],[AC_LIBTOOL_SETUP])\n])# AC_LIBTOOL_DLOPEN\n\n\n# AC_LIBTOOL_WIN32_DLL\n# --------------------\n# declare package support for building win32 DLLs\nAC_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_BEFORE([$0], [AC_LIBTOOL_SETUP])\n])# AC_LIBTOOL_WIN32_DLL\n\n\n# AC_ENABLE_SHARED([DEFAULT])\n# ---------------------------\n# implement the --enable-shared flag\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nAC_DEFUN([AC_ENABLE_SHARED],\n[define([AC_ENABLE_SHARED_DEFAULT], ifelse($1, no, no, yes))dnl\nAC_ARG_ENABLE([shared],\n    [AC_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]AC_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_shared=]AC_ENABLE_SHARED_DEFAULT)\n])# AC_ENABLE_SHARED\n\n\n# AC_DISABLE_SHARED\n# -----------------\n# set the default shared flag to --disable-shared\nAC_DEFUN([AC_DISABLE_SHARED],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\nAC_ENABLE_SHARED(no)\n])# AC_DISABLE_SHARED\n\n\n# AC_ENABLE_STATIC([DEFAULT])\n# ---------------------------\n# implement the --enable-static flag\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nAC_DEFUN([AC_ENABLE_STATIC],\n[define([AC_ENABLE_STATIC_DEFAULT], ifelse($1, no, no, yes))dnl\nAC_ARG_ENABLE([static],\n    [AC_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]AC_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_static=]AC_ENABLE_STATIC_DEFAULT)\n])# AC_ENABLE_STATIC\n\n\n# AC_DISABLE_STATIC\n# -----------------\n# set the default static flag to --disable-static\nAC_DEFUN([AC_DISABLE_STATIC],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\nAC_ENABLE_STATIC(no)\n])# AC_DISABLE_STATIC\n\n\n# AC_ENABLE_FAST_INSTALL([DEFAULT])\n# ---------------------------------\n# implement the --enable-fast-install flag\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nAC_DEFUN([AC_ENABLE_FAST_INSTALL],\n[define([AC_ENABLE_FAST_INSTALL_DEFAULT], ifelse($1, no, no, yes))dnl\nAC_ARG_ENABLE([fast-install],\n    [AC_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]AC_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_fast_install=]AC_ENABLE_FAST_INSTALL_DEFAULT)\n])# AC_ENABLE_FAST_INSTALL\n\n\n# AC_DISABLE_FAST_INSTALL\n# -----------------------\n# set the default to --disable-fast-install\nAC_DEFUN([AC_DISABLE_FAST_INSTALL],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\nAC_ENABLE_FAST_INSTALL(no)\n])# AC_DISABLE_FAST_INSTALL\n\n\n# AC_LIBTOOL_PICMODE([MODE])\n# --------------------------\n# implement the --with-pic flag\n# MODE is either `yes' or `no'.  If omitted, it defaults to `both'.\nAC_DEFUN([AC_LIBTOOL_PICMODE],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\npic_mode=ifelse($#,1,$1,default)\n])# AC_LIBTOOL_PICMODE\n\n\n# AC_PROG_EGREP\n# -------------\n# This is predefined starting with Autoconf 2.54, so this conditional\n# definition can be removed once we require Autoconf 2.54 or later.\nm4_ifndef([AC_PROG_EGREP], [AC_DEFUN([AC_PROG_EGREP],\n[AC_CACHE_CHECK([for egrep], [ac_cv_prog_egrep],\n   [if echo a | (grep -E '(a|b)') >/dev/null 2>&1\n    then ac_cv_prog_egrep='grep -E'\n    else ac_cv_prog_egrep='egrep'\n    fi])\n EGREP=$ac_cv_prog_egrep\n AC_SUBST([EGREP])\n])])\n\n\n# AC_PATH_TOOL_PREFIX\n# -------------------\n# find a file program which can recognise shared library\nAC_DEFUN([AC_PATH_TOOL_PREFIX],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"ifelse([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\nEOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n])# AC_PATH_TOOL_PREFIX\n\n\n# AC_PATH_MAGIC\n# -------------\n# find a file program which can recognise a shared library\nAC_DEFUN([AC_PATH_MAGIC],\n[AC_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# AC_PATH_MAGIC\n\n\n# AC_PROG_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([AC_PROG_LD],\n[AC_ARG_WITH([gnu-ld],\n    [AC_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])\nAC_REQUIRE([LT_AC_PROG_SED])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`echo $ac_prog| $SED 's%\\\\\\\\%/%g'`\n      while echo $ac_prog | grep \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`echo $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\nAC_PROG_LD_GNU\n])# AC_PROG_LD\n\n\n# AC_PROG_LD_GNU\n# --------------\nAC_DEFUN([AC_PROG_LD_GNU],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# AC_PROG_LD_GNU\n\n\n# AC_PROG_LD_RELOAD_FLAG\n# ----------------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nAC_DEFUN([AC_PROG_LD_RELOAD_FLAG],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n])# AC_PROG_LD_RELOAD_FLAG\n\n\n# AC_DEPLIBS_CHECK_METHOD\n# -----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nAC_DEFUN([AC_DEPLIBS_CHECK_METHOD],\n[AC_CACHE_CHECK([how to recognise dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix4* | aix5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump'.\n  lt_cv_deplibs_check_method='file_magic file format pei*-i386(.*architecture: i386)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | kfreebsd*-gnu | dragonfly*)\n  if echo __ELF__ | $CC -E - | grep __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF-[0-9][0-9]) shared object file - PA-RISC [0-9].[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]].[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix3*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be Linux ELF.\nlinux*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | grep __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\nnto-qnx*)\n  lt_cv_deplibs_check_method=unknown\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n])# AC_DEPLIBS_CHECK_METHOD\n\n\n# AC_PROG_NM\n# ----------\n# find the pathname to a BSD-compatible name lister\nAC_DEFUN([AC_PROG_NM],\n[AC_CACHE_CHECK([for BSD-compatible nm], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then \n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  test -z \"$lt_cv_path_NM\" && lt_cv_path_NM=nm\nfi])\nNM=\"$lt_cv_path_NM\"\n])# AC_PROG_NM\n\n\n# AC_CHECK_LIBM\n# -------------\n# check for math library\nAC_DEFUN([AC_CHECK_LIBM],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cygwin* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\n])# AC_CHECK_LIBM\n\n\n# AC_LIBLTDL_CONVENIENCE([DIRECTORY])\n# -----------------------------------\n# sets LIBLTDL to the link flags for the libltdl convenience library and\n# LTDLINCL to the include flags for the libltdl header and adds\n# --enable-ltdl-convenience to the configure arguments.  Note that\n# AC_CONFIG_SUBDIRS is not called here.  If DIRECTORY is not provided,\n# it is assumed to be `libltdl'.  LIBLTDL will be prefixed with\n# '${top_builddir}/' and LTDLINCL will be prefixed with '${top_srcdir}/'\n# (note the single quotes!).  If your package is not flat and you're not\n# using automake, define top_builddir and top_srcdir appropriately in\n# the Makefiles.\nAC_DEFUN([AC_LIBLTDL_CONVENIENCE],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\n  case $enable_ltdl_convenience in\n  no) AC_MSG_ERROR([this package needs a convenience libltdl]) ;;\n  \"\") enable_ltdl_convenience=yes\n      ac_configure_args=\"$ac_configure_args --enable-ltdl-convenience\" ;;\n  esac\n  LIBLTDL='${top_builddir}/'ifelse($#,1,[$1],['libltdl'])/libltdlc.la\n  LTDLINCL='-I${top_srcdir}/'ifelse($#,1,[$1],['libltdl'])\n  # For backwards non-gettext consistent compatibility...\n  INCLTDL=\"$LTDLINCL\"\n])# AC_LIBLTDL_CONVENIENCE\n\n\n# AC_LIBLTDL_INSTALLABLE([DIRECTORY])\n# -----------------------------------\n# sets LIBLTDL to the link flags for the libltdl installable library and\n# LTDLINCL to the include flags for the libltdl header and adds\n# --enable-ltdl-install to the configure arguments.  Note that\n# AC_CONFIG_SUBDIRS is not called here.  If DIRECTORY is not provided,\n# and an installed libltdl is not found, it is assumed to be `libltdl'.\n# LIBLTDL will be prefixed with '${top_builddir}/'# and LTDLINCL with\n# '${top_srcdir}/' (note the single quotes!).  If your package is not\n# flat and you're not using automake, define top_builddir and top_srcdir\n# appropriately in the Makefiles.\n# In the future, this macro may have to be called after AC_PROG_LIBTOOL.\nAC_DEFUN([AC_LIBLTDL_INSTALLABLE],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\n  AC_CHECK_LIB(ltdl, lt_dlinit,\n  [test x\"$enable_ltdl_install\" != xyes && enable_ltdl_install=no],\n  [if test x\"$enable_ltdl_install\" = xno; then\n     AC_MSG_WARN([libltdl not installed, but installation disabled])\n   else\n     enable_ltdl_install=yes\n   fi\n  ])\n  if test x\"$enable_ltdl_install\" = x\"yes\"; then\n    ac_configure_args=\"$ac_configure_args --enable-ltdl-install\"\n    LIBLTDL='${top_builddir}/'ifelse($#,1,[$1],['libltdl'])/libltdl.la\n    LTDLINCL='-I${top_srcdir}/'ifelse($#,1,[$1],['libltdl'])\n  else\n    ac_configure_args=\"$ac_configure_args --enable-ltdl-install=no\"\n    LIBLTDL=\"-lltdl\"\n    LTDLINCL=\n  fi\n  # For backwards non-gettext consistent compatibility...\n  INCLTDL=\"$LTDLINCL\"\n])# AC_LIBLTDL_INSTALLABLE\n\n\n# AC_LIBTOOL_CXX\n# --------------\n# enable support for C++ libraries\nAC_DEFUN([AC_LIBTOOL_CXX],\n[AC_REQUIRE([_LT_AC_LANG_CXX])\n])# AC_LIBTOOL_CXX\n\n\n# _LT_AC_LANG_CXX\n# ---------------\nAC_DEFUN([_LT_AC_LANG_CXX],\n[AC_REQUIRE([AC_PROG_CXX])\nAC_REQUIRE([_LT_AC_PROG_CXXCPP])\n_LT_AC_SHELL_INIT([tagnames=${tagnames+${tagnames},}CXX])\n])# _LT_AC_LANG_CXX\n\n# _LT_AC_PROG_CXXCPP\n# ------------------\nAC_DEFUN([_LT_AC_PROG_CXXCPP],\n[\nAC_REQUIRE([AC_PROG_CXX])\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nfi\n])# _LT_AC_PROG_CXXCPP\n\n# AC_LIBTOOL_F77\n# --------------\n# enable support for Fortran 77 libraries\nAC_DEFUN([AC_LIBTOOL_F77],\n[AC_REQUIRE([_LT_AC_LANG_F77])\n])# AC_LIBTOOL_F77\n\n\n# _LT_AC_LANG_F77\n# ---------------\nAC_DEFUN([_LT_AC_LANG_F77],\n[AC_REQUIRE([AC_PROG_F77])\n_LT_AC_SHELL_INIT([tagnames=${tagnames+${tagnames},}F77])\n])# _LT_AC_LANG_F77\n\n\n# AC_LIBTOOL_GCJ\n# --------------\n# enable support for GCJ libraries\nAC_DEFUN([AC_LIBTOOL_GCJ],\n[AC_REQUIRE([_LT_AC_LANG_GCJ])\n])# AC_LIBTOOL_GCJ\n\n\n# _LT_AC_LANG_GCJ\n# ---------------\nAC_DEFUN([_LT_AC_LANG_GCJ],\n[AC_PROVIDE_IFELSE([AC_PROG_GCJ],[],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],[],\n    [AC_PROVIDE_IFELSE([LT_AC_PROG_GCJ],[],\n      [ifdef([AC_PROG_GCJ],[AC_REQUIRE([AC_PROG_GCJ])],\n\t [ifdef([A][M_PROG_GCJ],[AC_REQUIRE([A][M_PROG_GCJ])],\n\t   [AC_REQUIRE([A][C_PROG_GCJ_OR_A][M_PROG_GCJ])])])])])])\n_LT_AC_SHELL_INIT([tagnames=${tagnames+${tagnames},}GCJ])\n])# _LT_AC_LANG_GCJ\n\n\n# AC_LIBTOOL_RC\n# -------------\n# enable support for Windows resource files\nAC_DEFUN([AC_LIBTOOL_RC],\n[AC_REQUIRE([LT_AC_PROG_RC])\n_LT_AC_SHELL_INIT([tagnames=${tagnames+${tagnames},}RC])\n])# AC_LIBTOOL_RC\n\n\n# AC_LIBTOOL_LANG_C_CONFIG\n# ------------------------\n# Ensure that the configuration vars for the C compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG], [_LT_AC_LANG_C_CONFIG])\nAC_DEFUN([_LT_AC_LANG_C_CONFIG],\n[lt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\\n\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}\\n'\n\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nAC_LIBTOOL_PROG_COMPILER_NO_RTTI($1)\nAC_LIBTOOL_PROG_COMPILER_PIC($1)\nAC_LIBTOOL_PROG_CC_C_O($1)\nAC_LIBTOOL_SYS_HARD_LINK_LOCKS($1)\nAC_LIBTOOL_PROG_LD_SHLIBS($1)\nAC_LIBTOOL_SYS_DYNAMIC_LINKER($1)\nAC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH($1)\nAC_LIBTOOL_SYS_LIB_STRIP\nAC_LIBTOOL_DLOPEN_SELF\n\n# Report which library types will actually be built\nAC_MSG_CHECKING([if libtool supports shared libraries])\nAC_MSG_RESULT([$can_build_shared])\n\nAC_MSG_CHECKING([whether to build shared libraries])\ntest \"$can_build_shared\" = \"no\" && enable_shared=no\n\n# On AIX, shared libraries and static libraries use the same namespace, and\n# are all built from PIC.\ncase $host_os in\naix3*)\n  test \"$enable_shared\" = yes && enable_static=no\n  if test -n \"$RANLIB\"; then\n    archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n    postinstall_cmds='$RANLIB $lib'\n  fi\n  ;;\n\naix4* | aix5*)\n  if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n    test \"$enable_shared\" = yes && enable_static=no\n  fi\n    ;;\nesac\nAC_MSG_RESULT([$enable_shared])\n\nAC_MSG_CHECKING([whether to build static libraries])\n# Make sure either enable_shared or enable_static is yes.\ntest \"$enable_shared\" = yes || enable_static=yes\nAC_MSG_RESULT([$enable_static])\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# AC_LIBTOOL_LANG_C_CONFIG\n\n\n# AC_LIBTOOL_LANG_CXX_CONFIG\n# --------------------------\n# Ensure that the configuration vars for the C compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG], [_LT_AC_LANG_CXX_CONFIG(CXX)])\nAC_DEFUN([_LT_AC_LANG_CXX_CONFIG],\n[AC_LANG_PUSH(C++)\nAC_REQUIRE([AC_PROG_CXX])\nAC_REQUIRE([_LT_AC_PROG_CXXCPP])\n\n_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_AC_TAGVAR(allow_undefined_flag, $1)=\n_LT_AC_TAGVAR(always_export_symbols, $1)=no\n_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\n_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_AC_TAGVAR(hardcode_direct, $1)=no\n_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_AC_TAGVAR(hardcode_minus_L, $1)=no\n_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_AC_TAGVAR(hardcode_automatic, $1)=no\n_LT_AC_TAGVAR(module_cmds, $1)=\n_LT_AC_TAGVAR(module_expsym_cmds, $1)=\n_LT_AC_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_AC_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_AC_TAGVAR(no_undefined_flag, $1)=\n_LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Dependencies to place before and after the object being linked:\n_LT_AC_TAGVAR(predep_objects, $1)=\n_LT_AC_TAGVAR(postdep_objects, $1)=\n_LT_AC_TAGVAR(predeps, $1)=\n_LT_AC_TAGVAR(postdeps, $1)=\n_LT_AC_TAGVAR(compiler_lib_search_path, $1)=\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\\n\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(int, char *[[]]) { return(0); }\\n'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_LD=$LD\nlt_save_GCC=$GCC\nGCC=$GXX\nlt_save_with_gnu_ld=$with_gnu_ld\nlt_save_path_LD=$lt_cv_path_LD\nif test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n  lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\nelse\n  $as_unset lt_cv_prog_gnu_ld\nfi\nif test -n \"${lt_cv_path_LDCXX+set}\"; then\n  lt_cv_path_LD=$lt_cv_path_LDCXX\nelse\n  $as_unset lt_cv_path_LD\nfi\ntest -z \"${LDCXX+set}\" || LD=$LDCXX\nCC=${CXX-\"c++\"}\ncompiler=$CC\n_LT_AC_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n\n# We don't want -fno-exception wen compiling C++ code, so set the\n# no_builtin_flag separately\nif test \"$GXX\" = yes; then\n  _LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\nelse\n  _LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\nfi\n\nif test \"$GXX\" = yes; then\n  # Set up default GNU C++ configuration\n\n  AC_PROG_LD\n\n  # Check if GNU C++ uses GNU ld as the underlying linker, since the\n  # archiving commands below assume that GNU ld is being used.\n  if test \"$with_gnu_ld\" = yes; then\n    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n    #     investigate it a little bit more. (MM)\n    wlarc='${wl}'\n\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if eval \"`$CC -print-prog-name=ld` --help 2>&1\" | \\\n\tgrep 'no-whole-archive' > /dev/null; then\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    with_gnu_ld=no\n    wlarc=\n\n    # A generic and very simple default shared library creation\n    # command for GNU C++ for the case where it uses the native\n    # linker, instead of GNU ld.  If possible, this setting should\n    # overridden to take advantage of the native linker features on\n    # the platform it is being used on.\n    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n  fi\n\n  # Commands to make compiler produce verbose output that lists\n  # what \"hidden\" libraries, object files and flags are used when\n  # linking a shared library.\n  output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"\\-L\"'\n\nelse\n  GXX=no\n  with_gnu_ld=no\n  wlarc=\nfi\n\n# PORTME: fill in a description of your system's C++ link characteristics\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n_LT_AC_TAGVAR(ld_shlibs, $1)=yes\ncase $host_os in\n  aix3*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  aix4* | aix5*)\n    if test \"$host_cpu\" = ia64; then\n      # On IA64, the linker does run time linking by default, so we don't\n      # have to do anything special.\n      aix_use_runtimelinking=no\n      exp_sym_flag='-Bexport'\n      no_entry_flag=\"\"\n    else\n      aix_use_runtimelinking=no\n\n      # Test if we are trying to use run time linking or normal\n      # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n      # need to do runtime linking.\n      case $host_os in aix4.[[23]]|aix4.[[23]].*|aix5*)\n\tfor ld_flag in $LDFLAGS; do\n\t  case $ld_flag in\n\t  *-brtl*)\n\t    aix_use_runtimelinking=yes\n\t    break\n\t    ;;\n\t  esac\n\tdone\n\t;;\n      esac\n\n      exp_sym_flag='-bexport'\n      no_entry_flag='-bnoentry'\n    fi\n\n    # When large executables or shared objects are built, AIX ld can\n    # have problems creating the table of contents.  If linking a library\n    # or program results in \"error TOC overflow\" add -mminimal-toc to\n    # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n    # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n    _LT_AC_TAGVAR(archive_cmds, $1)=''\n    _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=':'\n    _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\n    if test \"$GXX\" = yes; then\n      case $host_os in aix4.[[012]]|aix4.[[012]].*)\n      # We only want to do this on AIX 4.2 and lower, the check\n      # below for broken collect2 doesn't work under 4.3+\n\tcollect2name=`${CC} -print-prog-name=collect2`\n\tif test -f \"$collect2name\" && \\\n\t   strings \"$collect2name\" | grep resolve_lib_name >/dev/null\n\tthen\n\t  # We have reworked collect2\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n\telse\n\t  # We have old collect2\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n\tfi\n\t;;\n      esac\n      shared_flag='-shared'\n      if test \"$aix_use_runtimelinking\" = yes; then\n\tshared_flag=\"$shared_flag \"'${wl}-G'\n      fi\n    else\n      # not using gcc\n      if test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\tshared_flag='-G'\n      else\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag='${wl}-G'\n\telse\n\t  shared_flag='${wl}-bM:SRE'\n\tfi\n      fi\n    fi\n\n    # It seems that -bexpall does not export symbols beginning with\n    # underscore (_), so it is better to generate a list of symbols to export.\n    _LT_AC_TAGVAR(always_export_symbols, $1)=yes\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # Warning - without using the other runtime loading flags (-brtl),\n      # -berok will link without error, but may produce a broken library.\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)='-berok'\n      # Determine the default libpath from the value encoded in an empty executable.\n      _LT_AC_SYS_LIBPATH_AIX\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then echo \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n     else\n      if test \"$host_cpu\" = ia64; then\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n      else\n\t# Determine the default libpath from the value encoded in an empty executable.\n\t_LT_AC_SYS_LIBPATH_AIX\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t# Warning - without using the other run time loading flags,\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_AC_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t# Exported symbols can be pulled into shared objects from archives\n\t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t# This is similar to how AIX traditionally builds its shared libraries.\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n      fi\n    fi\n    ;;\n\n  beos*)\n    if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n      # support --undefined.  This deserves some investigation.  FIXME\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n    else\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    fi\n    ;;\n\n  chorus*)\n    case $cc_basename in\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n\n  cygwin* | mingw* | pw32*)\n    # _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n    # as there is no search path for DLLs.\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n    _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n    _LT_AC_TAGVAR(always_export_symbols, $1)=no\n    _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n    if $LD --help 2>&1 | grep 'auto-import' > /dev/null; then\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      # If the export-symbols file already is a .def file (1st line\n      # is EXPORTS), use it as is; otherwise, prepend...\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\tcp $export_symbols $output_objdir/$soname.def;\n      else\n\techo EXPORTS > $output_objdir/$soname.def;\n\tcat $export_symbols >> $output_objdir/$soname.def;\n      fi~\n      $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n    else\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    fi\n  ;;\n      darwin* | rhapsody*)\n        case $host_os in\n        rhapsody* | darwin1.[[012]])\n         _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-undefined ${wl}suppress'\n         ;;\n       *) # Darwin 1.3 on\n         if test -z ${MACOSX_DEPLOYMENT_TARGET} ; then\n           _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n         else\n           case ${MACOSX_DEPLOYMENT_TARGET} in\n             10.[[012]])\n               _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n               ;;\n             10.*)\n               _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-undefined ${wl}dynamic_lookup'\n               ;;\n           esac\n         fi\n         ;;\n        esac\n      _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_AC_TAGVAR(hardcode_direct, $1)=no\n      _LT_AC_TAGVAR(hardcode_automatic, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=''\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\n    if test \"$GXX\" = yes ; then\n      lt_int_apple_cc_single_mod=no\n      output_verbose_link_cmd='echo'\n      if $CC -dumpspecs 2>&1 | $EGREP 'single_module' >/dev/null ; then\n       lt_int_apple_cc_single_mod=yes\n      fi\n      if test \"X$lt_int_apple_cc_single_mod\" = Xyes ; then\n       _LT_AC_TAGVAR(archive_cmds, $1)='$CC -dynamiclib -single_module $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring'\n      else\n          _LT_AC_TAGVAR(archive_cmds, $1)='$CC -r -keep_private_externs -nostdlib -o ${lib}-master.o $libobjs~$CC -dynamiclib $allow_undefined_flag -o $lib ${lib}-master.o $deplibs $compiler_flags -install_name $rpath/$soname $verstring'\n        fi\n        _LT_AC_TAGVAR(module_cmds, $1)='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n        # Don't fix this by using the ld -exported_symbols_list flag, it doesn't exist in older darwin lds\n          if test \"X$lt_int_apple_cc_single_mod\" = Xyes ; then\n            _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -dynamiclib -single_module $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          else\n            _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -r -keep_private_externs -nostdlib -o ${lib}-master.o $libobjs~$CC -dynamiclib $allow_undefined_flag -o $lib ${lib}-master.o $deplibs $compiler_flags -install_name $rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          fi\n            _LT_AC_TAGVAR(module_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n      else\n      case $cc_basename in\n        xlc*)\n         output_verbose_link_cmd='echo'\n          _LT_AC_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj ${wl}-single_module $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-install_name ${wl}`echo $rpath/$soname` $verstring'\n          _LT_AC_TAGVAR(module_cmds, $1)='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n          # Don't fix this by using the ld -exported_symbols_list flag, it doesn't exist in older darwin lds\n          _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -qmkshrobj ${wl}-single_module $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-install_name ${wl}$rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          _LT_AC_TAGVAR(module_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          ;;\n       *)\n         _LT_AC_TAGVAR(ld_shlibs, $1)=no\n          ;;\n      esac\n      fi\n        ;;\n\n  dgux*)\n    case $cc_basename in\n      ec++*)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      ghcx*)\n\t# Green Hills C++ Compiler\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n  freebsd[[12]]*)\n    # C++ shared libraries reported to be fairly broken before switch to ELF\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  freebsd-elf*)\n    _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n    ;;\n  freebsd* | kfreebsd*-gnu | dragonfly*)\n    # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n    # conventions\n    _LT_AC_TAGVAR(ld_shlibs, $1)=yes\n    ;;\n  gnu*)\n    ;;\n  hpux9*)\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n    _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n    _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t# but as the default\n\t\t\t\t# location of the library.\n\n    case $cc_basename in\n    CC*)\n      # FIXME: insert proper C++ library support\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    aCC*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      #\n      # There doesn't appear to be a way to prevent this compiler from\n      # explicitly linking system object files so we need to strip them\n      # from the output so that they don't get included in the library\n      # dependencies.\n      output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | grep \"[[-]]L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n      ;;\n    *)\n      if test \"$GXX\" = yes; then\n        _LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/$soname~$CC -shared -nostdlib -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n        # FIXME: insert proper C++ library support\n        _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n    ;;\n  hpux10*|hpux11*)\n    if test $with_gnu_ld = no; then\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='+b $libdir'\n        ;;\n      *)\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        ;;\n      esac\n    fi\n    case $host_cpu in\n    hppa*64*|ia64*)\n      _LT_AC_TAGVAR(hardcode_direct, $1)=no\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n    *)\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t      # but as the default\n\t\t\t\t\t      # location of the library.\n      ;;\n    esac\n\n    case $cc_basename in\n      CC*)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      aCC*)\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t  ;;\n\tesac\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | grep \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\t;;\n      *)\n\tif test \"$GXX\" = yes; then\n\t  if test $with_gnu_ld = no; then\n\t    case $host_cpu in\n\t    hppa*64*)\n\t      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      ;;\n\t    ia64*)\n\t      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      ;;\n\t    *)\n\t      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      ;;\n\t    esac\n\t  fi\n\telse\n\t  # FIXME: insert proper C++ library support\n\t  _LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n    esac\n    ;;\n  interix3*)\n    _LT_AC_TAGVAR(hardcode_direct, $1)=no\n    _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n    # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n    # Instead, shared libraries are loaded at an image base (0x10000000 by\n    # default) and relocated if they conflict, which is a slow very memory\n    # consuming and fragmenting process.  To avoid this, we pick a random,\n    # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n    # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n    ;;\n  irix5* | irix6*)\n    case $cc_basename in\n      CC*)\n\t# SGI C++\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t# Archives containing C++ object files must be created using\n\t# \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t# necessary to make sure instantiated templates are included\n\t# in the archive.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t;;\n      *)\n\tif test \"$GXX\" = yes; then\n\t  if test \"$with_gnu_ld\" = no; then\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t  else\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` -o $lib'\n\t  fi\n\tfi\n\t_LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\t;;\n    esac\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n    ;;\n  linux*)\n    case $cc_basename in\n      KCC*)\n\t# Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t# KCC will only create a shared library if the output file\n\t# ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t# to its proper name (with version) after linking.\n\t_LT_AC_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | grep \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath,$libdir'\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t# Archives containing C++ object files must be created using\n\t# \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t;;\n      icpc*)\n\t# Intel C++\n\twith_gnu_ld=yes\n\t# version 8.0 and above of icpc choke on multiply defined symbols\n\t# if we add $predep_objects and $postdep_objects, however 7.1 and\n\t# earlier do not add the objects themselves.\n\tcase `$CC -V 2>&1` in\n\t*\"Version 7.\"*)\n  \t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n  \t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  ;;\n\t*)  # Version 8.0 or newer\n\t  tmp_idyn=\n\t  case $host_cpu in\n\t    ia64*) tmp_idyn=' -i_dynamic';;\n\t  esac\n  \t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  ;;\n\tesac\n\t_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t;;\n      pgc++*)\n        # Portland Group C++ compiler\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n  \t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n        ;;\n      cxx*)\n\t# Compaq C++\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\trunpath_var=LD_RUN_PATH\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"ld\"`; templist=`echo $templist | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\t;;\n    esac\n    ;;\n  lynxos*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  m88k*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  mvs*)\n    case $cc_basename in\n      cxx*)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n  netbsd*)\n    if echo __ELF__ | $CC -E - | grep __ELF__ >/dev/null; then\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n      wlarc=\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n    fi\n    # Workaround some broken pre-1.5 toolchains\n    output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n    ;;\n  openbsd2*)\n    # C++ shared libraries are fairly broken\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  openbsd*)\n    _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n    _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n    if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    fi\n    output_verbose_link_cmd='echo'\n    ;;\n  osf3*)\n    case $cc_basename in\n      KCC*)\n\t# Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t# KCC will only create a shared library if the output file\n\t# ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t# to its proper name (with version) after linking.\n\t_LT_AC_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Archives containing C++ object files must be created using\n\t# \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\n\t;;\n      RCC*)\n\t# Rational C++ 2.4.1\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      cxx*)\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && echo ${wl}-set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"ld\" | grep -v \"ld:\"`; templist=`echo $templist | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\t;;\n      *)\n\tif test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t  _LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t  # Commands to make compiler produce verbose output that lists\n\t  # what \"hidden\" libraries, object files and flags are used when\n\t  # linking a shared library.\n\t  output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"\\-L\"'\n\n\telse\n\t  # FIXME: insert proper C++ library support\n\t  _LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n    esac\n    ;;\n  osf4* | osf5*)\n    case $cc_basename in\n      KCC*)\n\t# Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t# KCC will only create a shared library if the output file\n\t# ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t# to its proper name (with version) after linking.\n\t_LT_AC_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Archives containing C++ object files must be created using\n\t# the KAI C++ compiler.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs'\n\t;;\n      RCC*)\n\t# Rational C++ 2.4.1\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      cxx*)\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t  echo \"-hidden\">> $lib.exp~\n\t  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname -Wl,-input -Wl,$lib.exp  `test -n \"$verstring\" && echo -set_version\t$verstring` -update_registry ${output_objdir}/so_locations -o $lib~\n\t  $rm $lib.exp'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"ld\" | grep -v \"ld:\"`; templist=`echo $templist | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\t;;\n      *)\n\tif test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t  _LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t  # Commands to make compiler produce verbose output that lists\n\t  # what \"hidden\" libraries, object files and flags are used when\n\t  # linking a shared library.\n\t  output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"\\-L\"'\n\n\telse\n\t  # FIXME: insert proper C++ library support\n\t  _LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n    esac\n    ;;\n  psos*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  sunos4*)\n    case $cc_basename in\n      CC*)\n\t# Sun C++ 4.x\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      lcc*)\n\t# Lucid\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n  solaris*)\n    case $cc_basename in\n      CC*)\n\t# Sun C++ 4.2, 5.x and Centerline C++\n        _LT_AC_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t_LT_AC_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n\t$CC -G${allow_undefined_flag}  ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$rm $lib.exp'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tcase $host_os in\n\t  solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t  *)\n\t    # The C++ compiler is used as linker so we must use $wl\n\t    # flag to pass the commands to the underlying system\n\t    # linker. We must also pass each convience library through\n\t    # to the system linker between allextract/defaultextract.\n\t    # The C++ compiler will combine linker options so we\n\t    # cannot just pass the convience library names through\n\t    # without $wl.\n\t    # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t    _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract`for conv in $convenience\\\"\\\"; do test -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}-z ${wl}defaultextract'\n\t    ;;\n\tesac\n\t_LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\n\toutput_verbose_link_cmd='echo'\n\n\t# Archives containing C++ object files must be created using\n\t# \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t# necessary to make sure instantiated templates are included\n\t# in the archive.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t;;\n      gcx*)\n\t# Green Hills C++ Compiler\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t# The C++ compiler must be used to create the archive.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t;;\n      *)\n\t# GNU C++ compiler with Solaris linker\n\tif test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t  _LT_AC_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t  if $CC --version | grep -v '^2\\.7' > /dev/null; then\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n\t\t$CC -shared -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$rm $lib.exp'\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    output_verbose_link_cmd=\"$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \\\"\\-L\\\"\"\n\t  else\n\t    # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t    # platform.\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n\t\t$CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$rm $lib.exp'\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    output_verbose_link_cmd=\"$CC -G $CFLAGS -v conftest.$objext 2>&1 | grep \\\"\\-L\\\"\"\n\t  fi\n\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\tfi\n\t;;\n    esac\n    ;;\n  sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n    _LT_AC_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n    _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n    _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n    runpath_var='LD_RUN_PATH'\n\n    case $cc_basename in\n      CC*)\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      *)\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n    esac\n    ;;\n  sysv5* | sco3.2v5* | sco5v6*)\n    # Note: We can NOT use -z defs as we might desire, because we do not\n    # link with -lc, and that would cause any symbols used from libc to\n    # always be unresolved, which means just about no library would\n    # ever link correctly.  If we're not using GNU ld we use -z text\n    # though, which does catch some bad symbols but isn't as heavy-handed\n    # as -z defs.\n    # For security reasons, it is highly recommended that you always\n    # use absolute paths for naming shared libraries, and exclude the\n    # DT_RUNPATH tag from executables and libraries.  But doing so\n    # requires that you compile everything twice, which is a pain.\n    # So that behaviour is only enabled if SCOABSPATH is set to a\n    # non-empty value in the environment.  Most likely only useful for\n    # creating official distributions of packages.\n    # This is a hack until libtool officially supports absolute path\n    # names for shared libraries.\n    _LT_AC_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n    _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n    _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n    _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='`test -z \"$SCOABSPATH\" && echo ${wl}-R,$libdir`'\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=':'\n    _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n    runpath_var='LD_RUN_PATH'\n\n    case $cc_basename in\n      CC*)\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      *)\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n    esac\n    ;;\n  tandem*)\n    case $cc_basename in\n      NCC*)\n\t# NonStop-UX NCC 3.20\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n  vxworks*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  *)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\nesac\nAC_MSG_RESULT([$_LT_AC_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_AC_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_AC_TAGVAR(GCC, $1)=\"$GXX\"\n_LT_AC_TAGVAR(LD, $1)=\"$LD\"\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nAC_LIBTOOL_POSTDEP_PREDEP($1)\nAC_LIBTOOL_PROG_COMPILER_PIC($1)\nAC_LIBTOOL_PROG_CC_C_O($1)\nAC_LIBTOOL_SYS_HARD_LINK_LOCKS($1)\nAC_LIBTOOL_PROG_LD_SHLIBS($1)\nAC_LIBTOOL_SYS_DYNAMIC_LINKER($1)\nAC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH($1)\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_POP\nCC=$lt_save_CC\nLDCXX=$LD\nLD=$lt_save_LD\nGCC=$lt_save_GCC\nwith_gnu_ldcxx=$with_gnu_ld\nwith_gnu_ld=$lt_save_with_gnu_ld\nlt_cv_path_LDCXX=$lt_cv_path_LD\nlt_cv_path_LD=$lt_save_path_LD\nlt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\nlt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\n])# AC_LIBTOOL_LANG_CXX_CONFIG\n\n# AC_LIBTOOL_POSTDEP_PREDEP([TAGNAME])\n# ------------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nAC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP],[\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nifelse([$1],[],[cat > conftest.$ac_ext <<EOF\nint a;\nvoid foo (void) { a = 0; }\nEOF\n],[$1],[CXX],[cat > conftest.$ac_ext <<EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\nEOF\n],[$1],[F77],[cat > conftest.$ac_ext <<EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\nEOF\n],[$1],[GCJ],[cat > conftest.$ac_ext <<EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\nEOF\n])\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  # The `*' in the case matches for architectures that use `case' in\n  # $output_verbose_cmd can trigger glob expansion during the loop\n  # eval without this substitution.\n  output_verbose_link_cmd=`$echo \"X$output_verbose_link_cmd\" | $Xsed -e \"$no_glob_subst\"`\n\n  for p in `eval $output_verbose_link_cmd`; do\n    case $p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" \\\n\t  || test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       else\n\t prev=\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case $p in\n\t -L* | -R*)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_AC_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_AC_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_AC_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_AC_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_AC_TAGVAR(postdeps, $1)\"; then\n\t   _LT_AC_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_AC_TAGVAR(postdeps, $1)=\"${_LT_AC_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       ;;\n\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_AC_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_AC_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_AC_TAGVAR(predep_objects, $1)=\"$_LT_AC_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_AC_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_AC_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_AC_TAGVAR(postdep_objects, $1)=\"$_LT_AC_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$rm -f confest.$objext\n\n# PORTME: override above test on systems where it is broken\nifelse([$1],[CXX],\n[case $host_os in\ninterix3*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_AC_TAGVAR(predep_objects,$1)=\n  _LT_AC_TAGVAR(postdep_objects,$1)=\n  _LT_AC_TAGVAR(postdeps,$1)=\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC*)\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    _LT_AC_TAGVAR(postdeps,$1)='-lCstd -lCrun'\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_AC_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n])# AC_LIBTOOL_POSTDEP_PREDEP\n\n# AC_LIBTOOL_LANG_F77_CONFIG\n# --------------------------\n# Ensure that the configuration vars for the C compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG], [_LT_AC_LANG_F77_CONFIG(F77)])\nAC_DEFUN([_LT_AC_LANG_F77_CONFIG],\n[AC_REQUIRE([AC_PROG_F77])\nAC_LANG_PUSH(Fortran 77)\n\n_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_AC_TAGVAR(allow_undefined_flag, $1)=\n_LT_AC_TAGVAR(always_export_symbols, $1)=no\n_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\n_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_AC_TAGVAR(hardcode_direct, $1)=no\n_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_AC_TAGVAR(hardcode_minus_L, $1)=no\n_LT_AC_TAGVAR(hardcode_automatic, $1)=no\n_LT_AC_TAGVAR(module_cmds, $1)=\n_LT_AC_TAGVAR(module_expsym_cmds, $1)=\n_LT_AC_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_AC_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_AC_TAGVAR(no_undefined_flag, $1)=\n_LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"      subroutine t\\n      return\\n      end\\n\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"      program t\\n      end\\n\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nCC=${F77-\"f77\"}\ncompiler=$CC\n_LT_AC_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n\nAC_MSG_CHECKING([if libtool supports shared libraries])\nAC_MSG_RESULT([$can_build_shared])\n\nAC_MSG_CHECKING([whether to build shared libraries])\ntest \"$can_build_shared\" = \"no\" && enable_shared=no\n\n# On AIX, shared libraries and static libraries use the same namespace, and\n# are all built from PIC.\ncase $host_os in\naix3*)\n  test \"$enable_shared\" = yes && enable_static=no\n  if test -n \"$RANLIB\"; then\n    archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n    postinstall_cmds='$RANLIB $lib'\n  fi\n  ;;\naix4* | aix5*)\n  if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n    test \"$enable_shared\" = yes && enable_static=no\n  fi\n  ;;\nesac\nAC_MSG_RESULT([$enable_shared])\n\nAC_MSG_CHECKING([whether to build static libraries])\n# Make sure either enable_shared or enable_static is yes.\ntest \"$enable_shared\" = yes || enable_static=yes\nAC_MSG_RESULT([$enable_static])\n\n_LT_AC_TAGVAR(GCC, $1)=\"$G77\"\n_LT_AC_TAGVAR(LD, $1)=\"$LD\"\n\nAC_LIBTOOL_PROG_COMPILER_PIC($1)\nAC_LIBTOOL_PROG_CC_C_O($1)\nAC_LIBTOOL_SYS_HARD_LINK_LOCKS($1)\nAC_LIBTOOL_PROG_LD_SHLIBS($1)\nAC_LIBTOOL_SYS_DYNAMIC_LINKER($1)\nAC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH($1)\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# AC_LIBTOOL_LANG_F77_CONFIG\n\n\n# AC_LIBTOOL_LANG_GCJ_CONFIG\n# --------------------------\n# Ensure that the configuration vars for the C compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG], [_LT_AC_LANG_GCJ_CONFIG(GCJ)])\nAC_DEFUN([_LT_AC_LANG_GCJ_CONFIG],\n[AC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\\n\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }\\n'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nCC=${GCJ-\"gcj\"}\ncompiler=$CC\n_LT_AC_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_AC_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nAC_LIBTOOL_PROG_COMPILER_NO_RTTI($1)\nAC_LIBTOOL_PROG_COMPILER_PIC($1)\nAC_LIBTOOL_PROG_CC_C_O($1)\nAC_LIBTOOL_SYS_HARD_LINK_LOCKS($1)\nAC_LIBTOOL_PROG_LD_SHLIBS($1)\nAC_LIBTOOL_SYS_DYNAMIC_LINKER($1)\nAC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH($1)\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_RESTORE\nCC=\"$lt_save_CC\"\n])# AC_LIBTOOL_LANG_GCJ_CONFIG\n\n\n# AC_LIBTOOL_LANG_RC_CONFIG\n# -------------------------\n# Ensure that the configuration vars for the Windows resource compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG], [_LT_AC_LANG_RC_CONFIG(RC)])\nAC_DEFUN([_LT_AC_LANG_RC_CONFIG],\n[AC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }\\n'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nCC=${RC-\"windres\"}\ncompiler=$CC\n_LT_AC_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_RESTORE\nCC=\"$lt_save_CC\"\n])# AC_LIBTOOL_LANG_RC_CONFIG\n\n\n# AC_LIBTOOL_CONFIG([TAGNAME])\n# ----------------------------\n# If TAGNAME is not passed, then create an initial libtool script\n# with a default configuration from the untagged config vars.  Otherwise\n# add code to config.status for appending the configuration named by\n# TAGNAME from the matching tagged config vars.\nAC_DEFUN([AC_LIBTOOL_CONFIG],\n[# The else clause should only fire when bootstrapping the\n# libtool distribution, otherwise you forgot to ship ltmain.sh\n# with your package, and you will get complaints that there are\n# no rules to generate ltmain.sh.\nif test -f \"$ltmain\"; then\n  # See if we are running on zsh, and set the options which allow our commands through\n  # without removal of \\ escapes.\n  if test -n \"${ZSH_VERSION+set}\" ; then\n    setopt NO_GLOB_SUBST\n  fi\n  # Now quote all the things that may contain metacharacters while being\n  # careful not to overquote the AC_SUBSTed values.  We take copies of the\n  # variables and quote the copies for generation of the libtool script.\n  for var in echo old_CC old_CFLAGS AR AR_FLAGS EGREP RANLIB LN_S LTCC LTCFLAGS NM \\\n    SED SHELL STRIP \\\n    libname_spec library_names_spec soname_spec extract_expsyms_cmds \\\n    old_striplib striplib file_magic_cmd finish_cmds finish_eval \\\n    deplibs_check_method reload_flag reload_cmds need_locks \\\n    lt_cv_sys_global_symbol_pipe lt_cv_sys_global_symbol_to_cdecl \\\n    lt_cv_sys_global_symbol_to_c_name_address \\\n    sys_lib_search_path_spec sys_lib_dlsearch_path_spec \\\n    old_postinstall_cmds old_postuninstall_cmds \\\n    _LT_AC_TAGVAR(compiler, $1) \\\n    _LT_AC_TAGVAR(CC, $1) \\\n    _LT_AC_TAGVAR(LD, $1) \\\n    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1) \\\n    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1) \\\n    _LT_AC_TAGVAR(lt_prog_compiler_static, $1) \\\n    _LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) \\\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1) \\\n    _LT_AC_TAGVAR(thread_safe_flag_spec, $1) \\\n    _LT_AC_TAGVAR(whole_archive_flag_spec, $1) \\\n    _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1) \\\n    _LT_AC_TAGVAR(old_archive_cmds, $1) \\\n    _LT_AC_TAGVAR(old_archive_from_new_cmds, $1) \\\n    _LT_AC_TAGVAR(predep_objects, $1) \\\n    _LT_AC_TAGVAR(postdep_objects, $1) \\\n    _LT_AC_TAGVAR(predeps, $1) \\\n    _LT_AC_TAGVAR(postdeps, $1) \\\n    _LT_AC_TAGVAR(compiler_lib_search_path, $1) \\\n    _LT_AC_TAGVAR(archive_cmds, $1) \\\n    _LT_AC_TAGVAR(archive_expsym_cmds, $1) \\\n    _LT_AC_TAGVAR(postinstall_cmds, $1) \\\n    _LT_AC_TAGVAR(postuninstall_cmds, $1) \\\n    _LT_AC_TAGVAR(old_archive_from_expsyms_cmds, $1) \\\n    _LT_AC_TAGVAR(allow_undefined_flag, $1) \\\n    _LT_AC_TAGVAR(no_undefined_flag, $1) \\\n    _LT_AC_TAGVAR(export_symbols_cmds, $1) \\\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1) \\\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1) \\\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1) \\\n    _LT_AC_TAGVAR(hardcode_automatic, $1) \\\n    _LT_AC_TAGVAR(module_cmds, $1) \\\n    _LT_AC_TAGVAR(module_expsym_cmds, $1) \\\n    _LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1) \\\n    _LT_AC_TAGVAR(exclude_expsyms, $1) \\\n    _LT_AC_TAGVAR(include_expsyms, $1); do\n\n    case $var in\n    _LT_AC_TAGVAR(old_archive_cmds, $1) | \\\n    _LT_AC_TAGVAR(old_archive_from_new_cmds, $1) | \\\n    _LT_AC_TAGVAR(archive_cmds, $1) | \\\n    _LT_AC_TAGVAR(archive_expsym_cmds, $1) | \\\n    _LT_AC_TAGVAR(module_cmds, $1) | \\\n    _LT_AC_TAGVAR(module_expsym_cmds, $1) | \\\n    _LT_AC_TAGVAR(old_archive_from_expsyms_cmds, $1) | \\\n    _LT_AC_TAGVAR(export_symbols_cmds, $1) | \\\n    extract_expsyms_cmds | reload_cmds | finish_cmds | \\\n    postinstall_cmds | postuninstall_cmds | \\\n    old_postinstall_cmds | old_postuninstall_cmds | \\\n    sys_lib_search_path_spec | sys_lib_dlsearch_path_spec)\n      # Double-quote double-evaled strings.\n      eval \"lt_$var=\\\\\\\"\\`\\$echo \\\"X\\$$var\\\" | \\$Xsed -e \\\"\\$double_quote_subst\\\" -e \\\"\\$sed_quote_subst\\\" -e \\\"\\$delay_variable_subst\\\"\\`\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_$var=\\\\\\\"\\`\\$echo \\\"X\\$$var\\\" | \\$Xsed -e \\\"\\$sed_quote_subst\\\"\\`\\\\\\\"\"\n      ;;\n    esac\n  done\n\n  case $lt_echo in\n  *'\\[$]0 --fallback-echo\"')\n    lt_echo=`$echo \"X$lt_echo\" | $Xsed -e 's/\\\\\\\\\\\\\\[$]0 --fallback-echo\"[$]/[$]0 --fallback-echo\"/'`\n    ;;\n  esac\n\nifelse([$1], [],\n  [cfgfile=\"${ofile}T\"\n  trap \"$rm \\\"$cfgfile\\\"; exit 1\" 1 2 15\n  $rm -f \"$cfgfile\"\n  AC_MSG_NOTICE([creating $ofile])],\n  [cfgfile=\"$ofile\"])\n\n  cat <<__EOF__ >> \"$cfgfile\"\nifelse([$1], [],\n[#! $SHELL\n\n# `$echo \"$cfgfile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $PROGRAM (GNU $PACKAGE $VERSION$TIMESTAMP)\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n# Free Software Foundation, Inc.\n#\n# This file is part of GNU Libtool:\n# Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\n# A sed program that does not truncate output.\nSED=$lt_SED\n\n# Sed that helps us avoid accidentally triggering echo(1) options like -n.\nXsed=\"$SED -e 1s/^X//\"\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# The names of the tagged configurations supported by this script.\navailable_tags=\n\n# ### BEGIN LIBTOOL CONFIG],\n[# ### BEGIN LIBTOOL TAG CONFIG: $tagname])\n\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n\n# Shell to use when invoking shell scripts.\nSHELL=$lt_SHELL\n\n# Whether or not to build shared libraries.\nbuild_libtool_libs=$enable_shared\n\n# Whether or not to build static libraries.\nbuild_old_libs=$enable_static\n\n# Whether or not to add -lc for building shared libraries.\nbuild_libtool_need_lc=$_LT_AC_TAGVAR(archive_cmds_need_lc, $1)\n\n# Whether or not to disallow shared libs when runtime libs are static\nallow_libtool_libs_with_static_runtimes=$_LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)\n\n# Whether or not to optimize for fast installation.\nfast_install=$enable_fast_install\n\n# The host system.\nhost_alias=$host_alias\nhost=$host\nhost_os=$host_os\n\n# The build system.\nbuild_alias=$build_alias\nbuild=$build\nbuild_os=$build_os\n\n# An echo program that does not interpret backslashes.\necho=$lt_echo\n\n# The archiver.\nAR=$lt_AR\nAR_FLAGS=$lt_AR_FLAGS\n\n# A C compiler.\nLTCC=$lt_LTCC\n\n# LTCC compiler flags.\nLTCFLAGS=$lt_LTCFLAGS\n\n# A language-specific compiler.\nCC=$lt_[]_LT_AC_TAGVAR(compiler, $1)\n\n# Is the compiler the GNU C compiler?\nwith_gcc=$_LT_AC_TAGVAR(GCC, $1)\n\n# An ERE matcher.\nEGREP=$lt_EGREP\n\n# The linker used to build libraries.\nLD=$lt_[]_LT_AC_TAGVAR(LD, $1)\n\n# Whether we need hard or soft links.\nLN_S=$lt_LN_S\n\n# A BSD-compatible nm program.\nNM=$lt_NM\n\n# A symbol stripping program\nSTRIP=$lt_STRIP\n\n# Used to examine libraries when file_magic_cmd begins \"file\"\nMAGIC_CMD=$MAGIC_CMD\n\n# Used on cygwin: DLL creation program.\nDLLTOOL=\"$DLLTOOL\"\n\n# Used on cygwin: object dumper.\nOBJDUMP=\"$OBJDUMP\"\n\n# Used on cygwin: assembler.\nAS=\"$AS\"\n\n# The name of the directory that contains temporary libtool files.\nobjdir=$objdir\n\n# How to create reloadable object files.\nreload_flag=$lt_reload_flag\nreload_cmds=$lt_reload_cmds\n\n# How to pass a linker flag through the compiler.\nwl=$lt_[]_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)\n\n# Object file suffix (normally \"o\").\nobjext=\"$ac_objext\"\n\n# Old archive suffix (normally \"a\").\nlibext=\"$libext\"\n\n# Shared library suffix (normally \".so\").\nshrext_cmds='$shrext_cmds'\n\n# Executable file suffix (normally \"\").\nexeext=\"$exeext\"\n\n# Additional compiler flags for building library objects.\npic_flag=$lt_[]_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)\npic_mode=$pic_mode\n\n# What is the maximum length of a command?\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n\n# Does compiler simultaneously support -c and -o options?\ncompiler_c_o=$lt_[]_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)\n\n# Must we lock files when doing compilation?\nneed_locks=$lt_need_locks\n\n# Do we need the lib prefix for modules?\nneed_lib_prefix=$need_lib_prefix\n\n# Do we need a version for libraries?\nneed_version=$need_version\n\n# Whether dlopen is supported.\ndlopen_support=$enable_dlopen\n\n# Whether dlopen of programs is supported.\ndlopen_self=$enable_dlopen_self\n\n# Whether dlopen of statically linked programs is supported.\ndlopen_self_static=$enable_dlopen_self_static\n\n# Compiler flag to prevent dynamic linking.\nlink_static_flag=$lt_[]_LT_AC_TAGVAR(lt_prog_compiler_static, $1)\n\n# Compiler flag to turn off builtin functions.\nno_builtin_flag=$lt_[]_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\n\n# Compiler flag to allow reflexive dlopens.\nexport_dynamic_flag_spec=$lt_[]_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)\n\n# Compiler flag to generate shared objects directly from archives.\nwhole_archive_flag_spec=$lt_[]_LT_AC_TAGVAR(whole_archive_flag_spec, $1)\n\n# Compiler flag to generate thread-safe objects.\nthread_safe_flag_spec=$lt_[]_LT_AC_TAGVAR(thread_safe_flag_spec, $1)\n\n# Library versioning type.\nversion_type=$version_type\n\n# Format of library name prefix.\nlibname_spec=$lt_libname_spec\n\n# List of archive names.  First name is the real one, the rest are links.\n# The last name is the one that the linker finds with -lNAME.\nlibrary_names_spec=$lt_library_names_spec\n\n# The coded name of the library, if different from the real name.\nsoname_spec=$lt_soname_spec\n\n# Commands used to build and install an old-style archive.\nRANLIB=$lt_RANLIB\nold_archive_cmds=$lt_[]_LT_AC_TAGVAR(old_archive_cmds, $1)\nold_postinstall_cmds=$lt_old_postinstall_cmds\nold_postuninstall_cmds=$lt_old_postuninstall_cmds\n\n# Create an old-style archive from a shared archive.\nold_archive_from_new_cmds=$lt_[]_LT_AC_TAGVAR(old_archive_from_new_cmds, $1)\n\n# Create a temporary old-style archive to link instead of a shared archive.\nold_archive_from_expsyms_cmds=$lt_[]_LT_AC_TAGVAR(old_archive_from_expsyms_cmds, $1)\n\n# Commands used to build and install a shared archive.\narchive_cmds=$lt_[]_LT_AC_TAGVAR(archive_cmds, $1)\narchive_expsym_cmds=$lt_[]_LT_AC_TAGVAR(archive_expsym_cmds, $1)\npostinstall_cmds=$lt_postinstall_cmds\npostuninstall_cmds=$lt_postuninstall_cmds\n\n# Commands used to build a loadable module (assumed same as above if empty)\nmodule_cmds=$lt_[]_LT_AC_TAGVAR(module_cmds, $1)\nmodule_expsym_cmds=$lt_[]_LT_AC_TAGVAR(module_expsym_cmds, $1)\n\n# Commands to strip libraries.\nold_striplib=$lt_old_striplib\nstriplib=$lt_striplib\n\n# Dependencies to place before the objects being linked to create a\n# shared library.\npredep_objects=$lt_[]_LT_AC_TAGVAR(predep_objects, $1)\n\n# Dependencies to place after the objects being linked to create a\n# shared library.\npostdep_objects=$lt_[]_LT_AC_TAGVAR(postdep_objects, $1)\n\n# Dependencies to place before the objects being linked to create a\n# shared library.\npredeps=$lt_[]_LT_AC_TAGVAR(predeps, $1)\n\n# Dependencies to place after the objects being linked to create a\n# shared library.\npostdeps=$lt_[]_LT_AC_TAGVAR(postdeps, $1)\n\n# The library search path used internally by the compiler when linking\n# a shared library.\ncompiler_lib_search_path=$lt_[]_LT_AC_TAGVAR(compiler_lib_search_path, $1)\n\n# Method to check whether dependent libraries are shared objects.\ndeplibs_check_method=$lt_deplibs_check_method\n\n# Command to use when deplibs_check_method == file_magic.\nfile_magic_cmd=$lt_file_magic_cmd\n\n# Flag that allows shared libraries with undefined symbols to be built.\nallow_undefined_flag=$lt_[]_LT_AC_TAGVAR(allow_undefined_flag, $1)\n\n# Flag that forces no undefined symbols.\nno_undefined_flag=$lt_[]_LT_AC_TAGVAR(no_undefined_flag, $1)\n\n# Commands used to finish a libtool library installation in a directory.\nfinish_cmds=$lt_finish_cmds\n\n# Same as above, but a single script fragment to be evaled but not shown.\nfinish_eval=$lt_finish_eval\n\n# Take the output of nm and produce a listing of raw symbols and C names.\nglobal_symbol_pipe=$lt_lt_cv_sys_global_symbol_pipe\n\n# Transform the output of nm in a proper C declaration\nglobal_symbol_to_cdecl=$lt_lt_cv_sys_global_symbol_to_cdecl\n\n# Transform the output of nm in a C name address pair\nglobal_symbol_to_c_name_address=$lt_lt_cv_sys_global_symbol_to_c_name_address\n\n# This is the shared library runtime path variable.\nrunpath_var=$runpath_var\n\n# This is the shared library path variable.\nshlibpath_var=$shlibpath_var\n\n# Is shlibpath searched before the hard-coded library search path?\nshlibpath_overrides_runpath=$shlibpath_overrides_runpath\n\n# How to hardcode a shared library path into an executable.\nhardcode_action=$_LT_AC_TAGVAR(hardcode_action, $1)\n\n# Whether we should hardcode library paths into libraries.\nhardcode_into_libs=$hardcode_into_libs\n\n# Flag to hardcode \\$libdir into a binary during linking.\n# This must work even if \\$libdir does not exist.\nhardcode_libdir_flag_spec=$lt_[]_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)\n\n# If ld is used when linking, flag to hardcode \\$libdir into\n# a binary during linking. This must work even if \\$libdir does\n# not exist.\nhardcode_libdir_flag_spec_ld=$lt_[]_LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)\n\n# Whether we need a single -rpath flag with a separated argument.\nhardcode_libdir_separator=$lt_[]_LT_AC_TAGVAR(hardcode_libdir_separator, $1)\n\n# Set to yes if using DIR/libNAME${shared_ext} during linking hardcodes DIR into the\n# resulting binary.\nhardcode_direct=$_LT_AC_TAGVAR(hardcode_direct, $1)\n\n# Set to yes if using the -LDIR flag during linking hardcodes DIR into the\n# resulting binary.\nhardcode_minus_L=$_LT_AC_TAGVAR(hardcode_minus_L, $1)\n\n# Set to yes if using SHLIBPATH_VAR=DIR during linking hardcodes DIR into\n# the resulting binary.\nhardcode_shlibpath_var=$_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)\n\n# Set to yes if building a shared library automatically hardcodes DIR into the library\n# and all subsequent libraries and executables linked against it.\nhardcode_automatic=$_LT_AC_TAGVAR(hardcode_automatic, $1)\n\n# Variables whose values should be saved in libtool wrapper scripts and\n# restored at relink time.\nvariables_saved_for_relink=\"$variables_saved_for_relink\"\n\n# Whether libtool must link a program against all its dependency libraries.\nlink_all_deplibs=$_LT_AC_TAGVAR(link_all_deplibs, $1)\n\n# Compile-time system search path for libraries\nsys_lib_search_path_spec=$lt_sys_lib_search_path_spec\n\n# Run-time system search path for libraries\nsys_lib_dlsearch_path_spec=$lt_sys_lib_dlsearch_path_spec\n\n# Fix the shell variable \\$srcfile for the compiler.\nfix_srcfile_path=\"$_LT_AC_TAGVAR(fix_srcfile_path, $1)\"\n\n# Set to yes if exported symbols are required.\nalways_export_symbols=$_LT_AC_TAGVAR(always_export_symbols, $1)\n\n# The commands to list exported symbols.\nexport_symbols_cmds=$lt_[]_LT_AC_TAGVAR(export_symbols_cmds, $1)\n\n# The commands to extract the exported symbol list from a shared archive.\nextract_expsyms_cmds=$lt_extract_expsyms_cmds\n\n# Symbols that should not be listed in the preloaded symbols.\nexclude_expsyms=$lt_[]_LT_AC_TAGVAR(exclude_expsyms, $1)\n\n# Symbols that must always be exported.\ninclude_expsyms=$lt_[]_LT_AC_TAGVAR(include_expsyms, $1)\n\nifelse([$1],[],\n[# ### END LIBTOOL CONFIG],\n[# ### END LIBTOOL TAG CONFIG: $tagname])\n\n__EOF__\n\nifelse([$1],[], [\n  case $host_os in\n  aix3*)\n    cat <<\\EOF >> \"$cfgfile\"\n\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\nEOF\n    ;;\n  esac\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" || (rm -f \"$cfgfile\"; exit 1)\n\n  mv -f \"$cfgfile\" \"$ofile\" || \\\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n])\nelse\n  # If there is no Makefile yet, we rely on a make rule to execute\n  # `config.status --recheck' to rerun these tests and create the\n  # libtool script then.\n  ltmain_in=`echo $ltmain | sed -e 's/\\.sh$/.in/'`\n  if test -f \"$ltmain_in\"; then\n    test -f Makefile && make \"$ltmain\"\n  fi\nfi\n])# AC_LIBTOOL_CONFIG\n\n\n# AC_LIBTOOL_PROG_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------------------\nAC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI],\n[AC_REQUIRE([_LT_AC_SYS_COMPILER])dnl\n\n_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  _LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n\n  AC_LIBTOOL_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n])# AC_LIBTOOL_PROG_COMPILER_NO_RTTI\n\n\n# AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE\n# ---------------------------------\nAC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE],\n[AC_REQUIRE([AC_CANONICAL_HOST])\nAC_REQUIRE([AC_PROG_NM])\nAC_REQUIRE([AC_OBJEXT])\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Transform an extracted symbol line into a proper C declaration\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^. .* \\(.*\\)$/extern int \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (lt_ptr) 0},/p' -e 's/^$symcode \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (lt_ptr) \\&\\2},/p'\"\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*) # Its linker distinguishes data from code symbols\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  lt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n  lt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (lt_ptr) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (lt_ptr) \\&\\2},/p'\"\n  ;;\nlinux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDGIRSTW]]'\n    lt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n    lt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (lt_ptr) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (lt_ptr) \\&\\2},/p'\"\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`echo 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Try without a prefix undercore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[ \t]]\\($symcode$symcode*\\)[[ \t]][[ \t]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\nEOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| $lt_cv_sys_global_symbol_pipe \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if grep ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif grep ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<EOF > conftest.$ac_ext\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nEOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | grep -v main >> conftest.$ac_ext'\n\n\t  cat <<EOF >> conftest.$ac_ext\n#if defined (__STDC__) && __STDC__\n# define lt_ptr_t void *\n#else\n# define lt_ptr_t char *\n# define const\n#endif\n\n/* The mapping between symbol names and symbols. */\nconst struct {\n  const char *name;\n  lt_ptr_t address;\n}\nlt_preloaded_symbols[[]] =\n{\nEOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (lt_ptr_t) \\&\\2},/\" < \"$nlist\" | grep -v main >> conftest.$ac_ext\n\t  cat <<\\EOF >> conftest.$ac_ext\n  {0, (lt_ptr_t) 0}\n};\n\n#ifdef __cplusplus\n}\n#endif\nEOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_save_LIBS=\"$LIBS\"\n\t  lt_save_CFLAGS=\"$CFLAGS\"\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=\"$lt_save_LIBS\"\n\t  CFLAGS=\"$lt_save_CFLAGS\"\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -f conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n]) # AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE\n\n\n# AC_LIBTOOL_PROG_COMPILER_PIC([TAGNAME])\n# ---------------------------------------\nAC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC],\n[_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_AC_TAGVAR(lt_prog_compiler_static, $1)=\n\nAC_MSG_CHECKING([for $compiler option to produce PIC])\n ifelse([$1],[CXX],[\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n    amigaos*)\n      # FIXME: we need at least 68020 code to build shared libraries, but\n      # adding the `-m68020' flag to GCC prevents building anything better,\n      # like `-m68040'.\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n      ;;\n    beos* | cygwin* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | os2* | pw32*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    interix3*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t;;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix4* | aix5*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_AC_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n       darwin*)\n         # PIC is the default on this platform\n         # Common symbols not allowed in MH_DYLIB files\n         case $cc_basename in\n           xlc*)\n           _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-qnocommon'\n           _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n           ;;\n         esac\n       ;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | kfreebsd*-gnu | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  icpc* | ecpc*)\n\t    # Intel C++\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgc++*)\n\t    # Portland Group C++ compiler.\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      # FIXME: we need at least 68020 code to build shared libraries, but\n      # adding the `-m68020' flag to GCC prevents building anything better,\n      # like `-m68040'.\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n      ;;\n\n    beos* | cygwin* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | pw32* | os2*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    interix3*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    hpux*)\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    *)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n      darwin*)\n        # PIC is the default on this platform\n        # Common symbols not allowed in MH_DYLIB files\n       case $cc_basename in\n         xlc*)\n         _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-qnocommon'\n         _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n         ;;\n       esac\n       ;;\n\n    mingw* | pw32* | os2*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    newsos6)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    linux*)\n      case $cc_basename in\n      icc* | ecc*)\n\t_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      pgcc* | pgf77* | pgf90* | pgf95*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      esac\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95*)\n\t_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\nAC_MSG_RESULT([$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)])\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  AC_LIBTOOL_COMPILER_OPTION([if $compiler PIC flag $_LT_AC_TAGVAR(lt_prog_compiler_pic, $1) works],\n    _LT_AC_TAGVAR(lt_prog_compiler_pic_works, $1),\n    [$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)ifelse([$1],[],[ -DPIC],[ifelse([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_AC_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)ifelse([$1],[],[ -DPIC],[ifelse([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_AC_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_AC_TAGVAR(lt_prog_compiler_static, $1)\\\"\nAC_LIBTOOL_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_AC_TAGVAR(lt_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_AC_TAGVAR(lt_prog_compiler_static, $1)=])\n])\n\n\n# AC_LIBTOOL_PROG_LD_SHLIBS([TAGNAME])\n# ------------------------------------\n# See if the linker supports building shared libraries.\nAC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS],\n[AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nifelse([$1],[CXX],[\n  _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  case $host_os in\n  aix4* | aix5*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    if $NM -V 2>&1 | grep 'GNU' > /dev/null; then\n      _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\[$]2 == \"T\") || (\\[$]2 == \"D\") || (\\[$]2 == \"B\")) && ([substr](\\[$]3,1,1) != \".\")) { print \\[$]3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\[$]2 == \"T\") || (\\[$]2 == \"D\") || (\\[$]2 == \"B\")) && ([substr](\\[$]3,1,1) != \".\")) { print \\[$]3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_AC_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n  ;;\n  cygwin* | mingw*)\n    _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]] /s/.* \\([[^ ]]*\\)/\\1 DATA/;/^.* __nm__/s/^.* __nm__\\([[^ ]]*\\) [[^ ]]*/\\1 DATA/;/^I /d;/^[[AITW]] /s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  *)\n    _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  esac\n],[\n  runpath_var=\n  _LT_AC_TAGVAR(allow_undefined_flag, $1)=\n  _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_AC_TAGVAR(archive_cmds, $1)=\n  _LT_AC_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_AC_TAGVAR(old_archive_From_new_cmds, $1)=\n  _LT_AC_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n  _LT_AC_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_AC_TAGVAR(hardcode_direct, $1)=no\n  _LT_AC_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_AC_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_AC_TAGVAR(hardcode_automatic, $1)=no\n  _LT_AC_TAGVAR(module_cmds, $1)=\n  _LT_AC_TAGVAR(module_expsym_cmds, $1)=\n  _LT_AC_TAGVAR(always_export_symbols, $1)=no\n  _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_AC_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_AC_TAGVAR(exclude_expsyms, $1)=\"_GLOBAL_OFFSET_TABLE_\"\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  extract_expsyms_cmds=\n  # Just being paranoid about ensuring that cc_basename is set.\n  _LT_CC_BASENAME([$compiler])\n  case $host_os in\n  cygwin* | mingw* | pw32*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_AC_TAGVAR(ld_shlibs, $1)=yes\n  if test \"$with_gnu_ld\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | grep 'no-whole-archive' > /dev/null; then\n\t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n      else\n  \t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>/dev/null` in\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix3* | aix4* | aix5*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tcat <<EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.9.1, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to modify your PATH\n*** so that a non-GNU linker is found, and then restart.\n\nEOF\n      fi\n      ;;\n\n    amigaos*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/a2ixlibrary.data~$echo \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$echo \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$echo \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$echo \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n\n      # Samuel A. Falvo II <kc5tja@dolphin.openprojects.net> reports\n      # that the semantics of dynamic libraries on AmigaOS, at least up\n      # to version 4, is to share data among multiple programs linked\n      # with the same dynamic library.  Since this doesn't match the\n      # behavior of shared libraries on other platforms, we can't use\n      # them.\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32*)\n      # _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_AC_TAGVAR(always_export_symbols, $1)=no\n      _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]] /s/.* \\([[^ ]]*\\)/\\1 DATA/'\\'' | $SED -e '\\''/^[[AITW]] /s/.* //'\\'' | sort | uniq > $export_symbols'\n\n      if $LD --help 2>&1 | grep 'auto-import' > /dev/null; then\n        _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    interix3*)\n      _LT_AC_TAGVAR(hardcode_direct, $1)=no\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    linux*)\n      if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\ttmp_addflag=\n\tcase $cc_basename,$host_cpu in\n\tpgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95*)\t# Portland Group f77 and f90 compilers\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tesac\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n\tif test $supports_anon_versioning = yes; then\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $output_objdir/$libname.ver~\n  cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n  $echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t  $CC -shared'\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\tfi\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | grep __ELF__ >/dev/null; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | grep 'BFD 2\\.8' > /dev/null; then\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tcat <<EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\nEOF\n      elif $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*) \n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\t    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='`test -z \"$SCOABSPATH\" && echo ${wl}-rpath,$libdir`'\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib'\n\t    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname,\\${SCOABSPATH:+${install_libdir}/}$soname,-retain-symbols-file,$export_symbols -o $lib'\n\t  else\n\t    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_AC_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_AC_TAGVAR(always_export_symbols, $1)=yes\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_AC_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix4* | aix5*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\tif $NM -V 2>&1 | grep 'GNU' > /dev/null; then\n\t  _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\[$]2 == \"T\") || (\\[$]2 == \"D\") || (\\[$]2 == \"B\")) && ([substr](\\[$]3,1,1) != \".\")) { print \\[$]3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\[$]2 == \"T\") || (\\[$]2 == \"D\") || (\\[$]2 == \"B\")) && ([substr](\\[$]3,1,1) != \".\")) { print \\[$]3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix5*)\n\t  for ld_flag in $LDFLAGS; do\n  \t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n  \t    aix_use_runtimelinking=yes\n  \t    break\n  \t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_AC_TAGVAR(archive_cmds, $1)=''\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" && \\\n  \t   strings \"$collect2name\" | grep resolve_lib_name >/dev/null\n\t  then\n  \t  # We have reworked collect2\n  \t  _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n\t  else\n  \t  # We have old collect2\n  \t  _LT_AC_TAGVAR(hardcode_direct, $1)=unsupported\n  \t  # It fails to find uninstalled libraries when the uninstalled\n  \t  # path is not listed in the libpath.  Setting hardcode_minus_L\n  \t  # to unsupported forces relinking\n  \t  _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n  \t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  \t  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n  \t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n  \t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_AC_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)='-berok'\n       # Determine the default libpath from the value encoded in an empty executable.\n       _LT_AC_SYS_LIBPATH_AIX\n       _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then echo \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n       else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_AC_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an empty executable.\n\t _LT_AC_SYS_LIBPATH_AIX\n\t _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_AC_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  # Exported symbols can be pulled into shared objects from archives\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/a2ixlibrary.data~$echo \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$echo \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$echo \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$echo \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      # see comment about different semantics on the GNU ld section\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n\n    bsdi[[45]]*)\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      # Tell ltmain to make .lib files, not .a files.\n      libext=lib\n      # Tell ltmain to make .dll files, not .so files.\n      shrext_cmds=\".dll\"\n      # FIXME: Setting linknames here is a bad hack.\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `echo \"$deplibs\" | $SED -e '\\''s/ -lc$//'\\''` -link -dll~linknames='\n      # The linker will automatically build a .lib file if we build a DLL.\n      _LT_AC_TAGVAR(old_archive_From_new_cmds, $1)='true'\n      # FIXME: Should let the user specify the lib program.\n      _LT_AC_TAGVAR(old_archive_cmds, $1)='lib /OUT:$oldlib$oldobjs$old_deplibs'\n      _LT_AC_TAGVAR(fix_srcfile_path, $1)='`cygpath -w \"$srcfile\"`'\n      _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    darwin* | rhapsody*)\n      case $host_os in\n        rhapsody* | darwin1.[[012]])\n         _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-undefined ${wl}suppress'\n         ;;\n       *) # Darwin 1.3 on\n         if test -z ${MACOSX_DEPLOYMENT_TARGET} ; then\n           _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n         else\n           case ${MACOSX_DEPLOYMENT_TARGET} in\n             10.[[012]])\n               _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n               ;;\n             10.*)\n               _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-undefined ${wl}dynamic_lookup'\n               ;;\n           esac\n         fi\n         ;;\n      esac\n      _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_AC_TAGVAR(hardcode_direct, $1)=no\n      _LT_AC_TAGVAR(hardcode_automatic, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=''\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n    if test \"$GCC\" = yes ; then\n    \toutput_verbose_link_cmd='echo'\n        _LT_AC_TAGVAR(archive_cmds, $1)='$CC -dynamiclib $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring'\n      _LT_AC_TAGVAR(module_cmds, $1)='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n      # Don't fix this by using the ld -exported_symbols_list flag, it doesn't exist in older darwin lds\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -dynamiclib $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n      _LT_AC_TAGVAR(module_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    else\n      case $cc_basename in\n        xlc*)\n         output_verbose_link_cmd='echo'\n         _LT_AC_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-install_name ${wl}`echo $rpath/$soname` $verstring'\n         _LT_AC_TAGVAR(module_cmds, $1)='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n          # Don't fix this by using the ld -exported_symbols_list flag, it doesn't exist in older darwin lds\n         _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -qmkshrobj $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-install_name ${wl}$rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          _LT_AC_TAGVAR(module_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          ;;\n       *)\n         _LT_AC_TAGVAR(ld_shlibs, $1)=no\n          ;;\n      esac\n    fi\n      ;;\n\n    dgux*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    freebsd1*)\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | kfreebsd*-gnu | dragonfly*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/$soname~$CC -shared -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t_LT_AC_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='+b $libdir'\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='-rpath $libdir'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | grep __ELF__ >/dev/null; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    openbsd*)\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      else\n       case $host_os in\n\t openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t   _LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t   _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t   ;;\n\t *)\n\t   _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t   _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t   ;;\n       esac\n      fi\n      ;;\n\n    os2*)\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_AC_TAGVAR(archive_cmds, $1)='$echo \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$echo \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~$echo DATA >> $output_objdir/$libname.def~$echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~$echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_AC_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -shared${allow_undefined_flag} $libobjs $deplibs $linker_flags -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -shared${allow_undefined_flag} $libobjs $deplibs $linker_flags -msym -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; echo \"-hidden\">> $lib.exp~\n\t$LD -shared${allow_undefined_flag} -input $lib.exp $linker_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib~$rm $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_AC_TAGVAR(no_undefined_flag, $1)=' -z text'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$rm $lib.exp'\n      else\n\twlarc=''\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n  \t$LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$rm $lib.exp'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n \t# The compiler driver will combine linker options so we\n \t# cannot just pass the convience library names through\n \t# without $wl, iff we do not link with $LD.\n \t# Luckily, gcc supports the same syntax we need for Sun Studio.\n \t# Supported since Solaris 2.6 (maybe 2.5.1?)\n \tcase $wlarc in\n \t'')\n \t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract' ;;\n \t*)\n \t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract`for conv in $convenience\\\"\\\"; do test -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}-z ${wl}defaultextract' ;;\n \tesac ;;\n      esac\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_AC_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7*)\n      _LT_AC_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_AC_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='`test -z \"$SCOABSPATH\" && echo ${wl}-R,$libdir`'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n  fi\n])\nAC_MSG_RESULT([$_LT_AC_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_AC_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_AC_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_AC_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_MSG_CHECKING([whether -lc should be explicitly linked in])\n      $rm conftest*\n      printf \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n      if AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n        soname=conftest\n        lib=conftest\n        libobjs=conftest.$ac_objext\n        deplibs=\n        wl=$_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)\n\tpic_flag=$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)\n        compiler_flags=-v\n        linker_flags=-v\n        verstring=\n        output_objdir=.\n        libname=conftest\n        lt_save_allow_undefined_flag=$_LT_AC_TAGVAR(allow_undefined_flag, $1)\n        _LT_AC_TAGVAR(allow_undefined_flag, $1)=\n        if AC_TRY_EVAL(_LT_AC_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| grep \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n        then\n\t  _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n        else\n\t  _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=yes\n        fi\n        _LT_AC_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n      else\n        cat conftest.err 1>&5\n      fi\n      $rm conftest*\n      AC_MSG_RESULT([$_LT_AC_TAGVAR(archive_cmds_need_lc, $1)])\n      ;;\n    esac\n  fi\n  ;;\nesac\n])# AC_LIBTOOL_PROG_LD_SHLIBS\n\n\n# _LT_AC_FILE_LTDLL_C\n# -------------------\n# Be careful that the start marker always follows a newline.\nAC_DEFUN([_LT_AC_FILE_LTDLL_C], [\n# /* ltdll.c starts here */\n# #define WIN32_LEAN_AND_MEAN\n# #include <windows.h>\n# #undef WIN32_LEAN_AND_MEAN\n# #include <stdio.h>\n#\n# #ifndef __CYGWIN__\n# #  ifdef __CYGWIN32__\n# #    define __CYGWIN__ __CYGWIN32__\n# #  endif\n# #endif\n#\n# #ifdef __cplusplus\n# extern \"C\" {\n# #endif\n# BOOL APIENTRY DllMain (HINSTANCE hInst, DWORD reason, LPVOID reserved);\n# #ifdef __cplusplus\n# }\n# #endif\n#\n# #ifdef __CYGWIN__\n# #include <cygwin/cygwin_dll.h>\n# DECLARE_CYGWIN_DLL( DllMain );\n# #endif\n# HINSTANCE __hDllInstance_base;\n#\n# BOOL APIENTRY\n# DllMain (HINSTANCE hInst, DWORD reason, LPVOID reserved)\n# {\n#   __hDllInstance_base = hInst;\n#   return TRUE;\n# }\n# /* ltdll.c ends here */\n])# _LT_AC_FILE_LTDLL_C\n\n\n# _LT_AC_TAGVAR(VARNAME, [TAGNAME])\n# ---------------------------------\nAC_DEFUN([_LT_AC_TAGVAR], [ifelse([$2], [], [$1], [$1_$2])])\n\n\n# old names\nAC_DEFUN([AM_PROG_LIBTOOL],   [AC_PROG_LIBTOOL])\nAC_DEFUN([AM_ENABLE_SHARED],  [AC_ENABLE_SHARED($@)])\nAC_DEFUN([AM_ENABLE_STATIC],  [AC_ENABLE_STATIC($@)])\nAC_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\nAC_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\nAC_DEFUN([AM_PROG_LD],        [AC_PROG_LD])\nAC_DEFUN([AM_PROG_NM],        [AC_PROG_NM])\n\n# This is just to silence aclocal about the macro not being used\nifelse([AC_DISABLE_FAST_INSTALL])\n\nAC_DEFUN([LT_AC_PROG_GCJ],\n[AC_CHECK_TOOL(GCJ, gcj, no)\n  test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n  AC_SUBST(GCJFLAGS)\n])\n\nAC_DEFUN([LT_AC_PROG_RC],\n[AC_CHECK_TOOL(RC, windres, no)\n])\n\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n# LT_AC_PROG_SED\n# --------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nAC_DEFUN([LT_AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_MSG_RESULT([$SED])\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/configure.ac": "# Copyright (c) 1999-2001 by Red Hat, Inc. All rights reserved.\n# \n# THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n# OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n# \n# Permission is hereby granted to use or copy this program\n# for any purpose,  provided the above notices are retained on all copies.\n# Permission to modify the code and to distribute modified code is granted,\n# provided the above notices are retained, and a notice that the code was\n# modified is included with the above copyright notice.\n#\n# Original author: Tom Tromey\n# Modified by: Grzegorz Jakacki <jakacki at acm dot org>\n\ndnl Process this file with autoconf to produce configure.\n\n# Initialization\n# ==============\n\nAC_INIT(gc,7.0,Hans.Boehm@hp.com) \n    ## version must conform to [0-9]+[.][0-9]+(alpha[0-9]+)?\nAC_CONFIG_SRCDIR(gcj_mlc.c)\nAC_CANONICAL_TARGET \nAC_PREREQ(2.53)\nAC_REVISION($Revision: 1.25 $)\nGC_SET_VERSION\nAM_INIT_AUTOMAKE([foreign dist-bzip2 subdir-objects nostdinc])\nAM_MAINTAINER_MODE\n\nAC_SUBST(PACKAGE)\nAC_SUBST(GC_VERSION)\n\nAM_PROG_CC_C_O\nAC_PROG_CXX\n\nAM_PROG_AS\n## FIXME: really needed? (AC_LIBTOOL already provides this)\nAC_CHECK_TOOL(AR, ar)\nAC_CHECK_TOOL(RANLIB, ranlib, :)  # :)\n\nAC_PROG_INSTALL\n\n. ${srcdir}/configure.host\n\nGC_CFLAGS=${gc_cflags}\nAC_SUBST(GC_CFLAGS)\n\nAC_ARG_ENABLE(threads,\n  [AC_HELP_STRING([--enable-threads=TYPE], [choose threading package])],\n  THREADS=$enableval,\n  [ AC_MSG_CHECKING([for thread model used by GCC])\n    THREADS=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n    if test -z \"$THREADS\"; then\n      THREADS=no\n    fi\n    AC_MSG_RESULT([$THREADS]) ])\n\nAC_ARG_ENABLE(parallel-mark,\n   [AC_HELP_STRING([--enable-parallel-mark],\n\t[parallelize marking and free list construction])],\n   [case \"$THREADS\" in\n      no | none | single)\n\tAC_MSG_ERROR([Parallel mark requires --enable-threads=x spec])\n\t;;\n    esac ]\n)\n\nAC_ARG_ENABLE(cplusplus,\n    [AC_HELP_STRING([--enable-cplusplus], [install C++ support])])\n\nINCLUDES=-I${srcdir}/include\nTHREADDLLIBS=\nneed_atomic_ops_asm=false\n## Libraries needed to support dynamic loading and/or threads.\ncase \"$THREADS\" in\n no | none | single)\n    THREADS=none\n    ;;\n posix | pthreads)\n    THREADS=posix\n    THREADDLLIBS=-lpthread\n    case \"$host\" in\n     x86-*-linux* | ia64-*-linux* | i586-*-linux* | i686-*-linux* | x86_64-*-linux* | alpha-*-linux*)\n\tAC_DEFINE(GC_LINUX_THREADS)\n\tAC_DEFINE(_REENTRANT)\n        if test \"${enable_parallel_mark}\" = yes; then\n\t  AC_DEFINE(PARALLEL_MARK)\n\tfi\n\tAC_DEFINE(THREAD_LOCAL_ALLOC)\n\tAC_MSG_WARN(\"Explict GC_INIT() calls may be required.\");\n\t;;\n     *-*-linux*)\n\tAC_DEFINE(GC_LINUX_THREADS)\n\tAC_DEFINE(_REENTRANT)\n\t;;\n     *-*-aix*)\n\tAC_DEFINE(GC_AIX_THREADS)\n\tAC_DEFINE(_REENTRANT)\n\t;;\n     *-*-hpux11*)\n\tAC_MSG_WARN(\"Only HP/UX 11 POSIX threads are supported.\")\n\tAC_DEFINE(GC_HPUX_THREADS)\n\tAC_DEFINE(_POSIX_C_SOURCE,199506L)\n\tif test \"${enable_parallel_mark}\" = yes; then\n\t  AC_DEFINE(PARALLEL_MARK)\n\tfi\n\tAC_DEFINE(THREAD_LOCAL_ALLOC)\n\tAC_MSG_WARN(\"Explict GC_INIT() calls may be required.\");\n\tTHREADDLLIBS=\"-lpthread -lrt\"\n\t# HPUX needs REENTRANT for the _r calls.\n\tAC_DEFINE(_REENTRANT, 1, [Required define if using POSIX threads])\n\t;;\n     *-*-hpux10*)\n\tAC_MSG_WARN(\"Only HP-UX 11 POSIX threads are supported.\")\n\t;;\n     *-*-freebsd*)\n\tAC_MSG_WARN(\"FreeBSD does not yet fully support threads with Boehm GC.\")\n\tAC_DEFINE(GC_FREEBSD_THREADS)\n\tINCLUDES=\"$INCLUDES -pthread\"\n      \t;;\n     *-*-kfreebsd*-gnu)\n\tAC_DEFINE(GC_FREEBSD_THREADS)\n\tINCLUDES=\"$INCLUDES -pthread\"\n\tTHREADDLLIBS=-pthread\n\tAC_DEFINE(_REENTRANT)\n        if test \"${enable_parallel_mark}\" = yes; then\n\t  AC_DEFINE(PARALLEL_MARK)\n\tfi\n\tAC_DEFINE(THREAD_LOCAL_ALLOC)\n\tAC_DEFINE(USE_COMPILER_TLS)\n      \t;;\n     *-*-gnu*)\n\tAC_DEFINE(GC_GNU_THREADS)\n\tAC_DEFINE(_REENTRANT)\n\tAC_DEFINE(THREAD_LOCAL_ALLOC)\n\t;;\n     *-*-netbsd*)\n\tAC_MSG_WARN(\"Only on NetBSD 2.0 or later.\")\n\tAC_DEFINE(GC_NETBSD_THREADS)\n\tAC_DEFINE(_REENTRANT)\n\tAC_DEFINE(_PTHREADS)\n\tTHREADDLLIBS=\"-lpthread -lrt\"\n\t;;\n     *-*-solaris*)\n\tAC_DEFINE(GC_SOLARIS_THREADS)\n\tAC_DEFINE(THREAD_LOCAL_ALLOC)\n\tTHREADDLLIBS=\"-lpthread -lrt\"\n\tif test \"$GCC\" != yes; then\n          CFLAGS=\"$CFLAGS -O\"\n          need_atomic_ops_asm=true\n        fi\n\t;;\n     *-*-irix*)\n\tAC_DEFINE(GC_IRIX_THREADS)\n\t;;\n     *-*-cygwin*)\n\tAC_DEFINE(GC_WIN32_THREADS)\n\tAC_DEFINE(THREAD_LOCAL_ALLOC)\n\twin32_threads=true\n\t;;\n     *-*-darwin*)\n\tAC_DEFINE(GC_DARWIN_THREADS)\n\tAC_DEFINE(THREAD_LOCAL_ALLOC)\n\tAC_MSG_WARN(\"Explict GC_INIT() calls may be required.\");\n\tif test \"${enable_parallel_mark}\" = yes; then\n\t  AC_DEFINE(PARALLEL_MARK)\n\tfi\n\tdarwin_threads=true\n\t;;\n     *-*-osf*)\n\tAC_DEFINE(GC_OSF1_THREADS)\n        if test \"${enable_parallel_mark}\" = yes; then\n\t  AC_DEFINE(PARALLEL_MARK)\n\t  AC_DEFINE(THREAD_LOCAL_ALLOC)\n\t  AC_MSG_WARN(\"Explict GC_INIT() calls may be required.\");\n\t  # May want to enable it in other cases, too.\n\t  # Measurements havent yet been done.\n\tfi\n\tINCLUDES=\"$INCLUDES -pthread\"\n\tTHREADDLLIBS=\"-lpthread -lrt\"\n\t;;\n      *)\n\tAC_MSG_ERROR(\"Pthreads not supported by the GC on this platform.\")\n\t;;\n    esac\n    ;;\n win32)\n    AC_DEFINE(GC_WIN32_THREADS)\n    dnl Wine getenv may not return NULL for missing entry\n    AC_DEFINE(NO_GETENV)\n    ;;\n dgux386)\n    THREADS=dgux386\n    AC_MSG_RESULT($THREADDLLIBS)\n    # Use pthread GCC  switch\n    THREADDLLIBS=-pthread\n    if test \"${enable_parallel_mark}\" = yes; then\n        AC_DEFINE(PARALLEL_MARK)\n    fi\n    AC_DEFINE(THREAD_LOCAL_ALLOC)\n    AC_MSG_WARN(\"Explict GC_INIT() calls may be required.\");\n    AC_DEFINE(GC_DGUX386_THREADS)\n    AC_DEFINE(DGUX_THREADS)\n    # Enable _POSIX4A_DRAFT10_SOURCE with flag -pthread\n    INCLUDES=\"-pthread $INCLUDES\"\n    ;;\n aix)\n    THREADS=posix\n    THREADDLLIBS=-lpthread\n    AC_DEFINE(GC_AIX_THREADS)\n    AC_DEFINE(_REENTRANT)\n    ;;\n decosf1 | irix | mach | os2 | solaris | dce | vxworks)\n    AC_MSG_ERROR(thread package $THREADS not yet supported)\n    ;;\n *)\n    AC_MSG_ERROR($THREADS is an unknown thread package)\n    ;;\nesac\nAC_SUBST(THREADDLLIBS)\nAM_CONDITIONAL(THREADS, test x$THREADS != xnone)\nAM_CONDITIONAL(PTHREADS, test x$THREADS = xposix)\nAM_CONDITIONAL(DARWIN_THREADS, test x$darwin_threads = xtrue)\nAM_CONDITIONAL(WIN32_THREADS, test x$win32_threads = xtrue)\n\ncase \"$host\" in \n   powerpc-*-darwin*)\n      powerpc_darwin=true\n      ;;\nesac\n\n# Darwin needs a few extra special tests to deal with variation in the\n# system headers.\ncase \"$host\" in\n  powerpc*-*-darwin*)\n    AC_CHECK_MEMBER(ppc_thread_state_t.r0,\n      AC_DEFINE(HAS_PPC_THREAD_STATE_R0,1,\n\t[ppc_thread_state_t has field r0]),,\n      [#include <mach/thread_status.h>])\n    AC_CHECK_MEMBER(ppc_thread_state_t.__r0,\n      AC_DEFINE(HAS_PPC_THREAD_STATE___R0,1,dnl\n\t[ppc_thread_state_t has field __r0]),,\n      [#include <mach/thread_status.h>])\n    AC_CHECK_MEMBER(ppc_thread_state64_t.r0,\n      AC_DEFINE(HAS_PPC_THREAD_STATE64_R0,1,dnl\n\t[ppc_thread_state64_t has field r0]),,\n      [#include <mach/thread_status.h>])\n    AC_CHECK_MEMBER(ppc_thread_state64_t.__r0,\n      AC_DEFINE(HAS_PPC_THREAD_STATE64___R0,1,dnl\n\t[ppc_thread_state64_t has field __r0]),,\n      [#include <mach/thread_status.h>])\n    ;;\n  i?86*-*-darwin*)\n    AC_CHECK_MEMBER(x86_thread_state32_t.eax,\n      AC_DEFINE(HAS_X86_THREAD_STATE32_EAX,1,dnl\n\t[x86_thread_state32_t has field eax]),,\n      [#include <sys/cdefs.h>\n      #include <mach/thread_status.h>])\n    AC_CHECK_MEMBER(x86_thread_state32_t.__eax,\n      AC_DEFINE(HAS_X86_THREAD_STATE32___EAX,1,dnl\n\t[x86_thread_state32_t has field __eax]),,\n      [#include <sys/cdefs.h>\n      #include <mach/thread_status.h>])\n    ;;\n  x86_64-*-darwin*)\n    AC_CHECK_MEMBER(x86_thread_state64_t.rax,\n      AC_DEFINE(HAS_X86_THREAD_STATE64_RAX,1,dnl\n\t[x86_thread_state64_t has field rax]),,\n      [#include <sys/cdefs.h>\n      #include <mach/thread_status.h>])\n    AC_CHECK_MEMBER(x86_thread_state64_t.__rax,\n      AC_DEFINE(HAS_X86_THREAD_STATE64___RAX,1,dnl\n\t[x86_thread_state64_t has field __rax]),,\n      [#include <sys/cdefs.h>\n      #include <mach/thread_status.h>])\n     ;;\n  *) ;;\nesac\n\nAC_MSG_CHECKING(for xlc)\nAC_TRY_COMPILE([],[\n #ifndef __xlC__\n # error\n #endif\n], [compiler_xlc=yes], [compiler_xlc=no])\nAC_MSG_RESULT($compiler_xlc)\nAM_CONDITIONAL(COMPILER_XLC,test $compiler_xlc = yes)\nif test $compiler_xlc = yes -a \"$powerpc_darwin\" = true; then\n  # the darwin stack-frame-walking code is completely broken on xlc\n  AC_DEFINE(DARWIN_DONT_PARSE_STACK)\nfi\n\n# We never want libdl on darwin. It is a fake libdl that just ends up making\n# dyld calls anyway\ncase \"$host\" in\n  *-*-darwin*) ;;\n  *)\n    AC_CHECK_LIB(dl, dlopen, THREADDLLIBS=\"$THREADDLLIBS -ldl\")\n    ;;\nesac\n\n# extra LD Flags which are required for targets\ncase \"${host}\" in\n  *-*-darwin*)\n    extra_ldflags_libgc=-Wl,-single_module\n    ;;\nesac\nAC_SUBST(extra_ldflags_libgc)\n\nAC_SUBST(EXTRA_TEST_LIBS)\n\ntarget_all=libgc.la\nAC_SUBST(target_all)\n\ndnl If the target is an eCos system, use the appropriate eCos\ndnl I/O routines.\ndnl FIXME: this should not be a local option but a global target\ndnl system; at present there is no eCos target.\nTARGET_ECOS=\"no\"\nAC_ARG_WITH(ecos,\n[  --with-ecos             enable runtime eCos target support],\nTARGET_ECOS=\"$with_ecos\"\n)\n\naddobjs=\naddlibs=\nCXXINCLUDES=\ncase \"$TARGET_ECOS\" in\n   no)\n      ;;\n   *)\n      AC_DEFINE(ECOS)\n      CXXINCLUDES=\"-I${TARGET_ECOS}/include\"\n      addobjs=\"$addobjs ecos.lo\"\n      ;;\nesac\n\nAM_CONDITIONAL(CPLUSPLUS, test \"${enable_cplusplus}\" = yes)\n\nAC_SUBST(CXX)\n\nAC_SUBST(INCLUDES)\nAC_SUBST(CXXINCLUDES)\n\n# Configuration of shared libraries\n#\nAC_MSG_CHECKING(whether to build shared libraries)\nAC_ENABLE_SHARED\n\ncase \"$host\" in\n alpha-*-openbsd*)\n     enable_shared=no\n     AC_MSG_RESULT(no)\n     ;;\n *)\n     AC_MSG_RESULT(yes)\n     ;;\nesac\n\n# Configuration of machine-dependent code\n#\nAC_MSG_CHECKING(which machine-dependent code should be used) \nmachdep=\ncase \"$host\" in\n alpha-*-openbsd*)\n    machdep=\"mach_dep.lo\"\n    if test x\"${ac_cv_lib_dl_dlopen}\" != xyes ; then\n       AC_MSG_WARN(OpenBSD/Alpha without dlopen(). Shared library support is disabled)\n    fi\n    ;;\n alpha*-*-linux*)\n    machdep=\"mach_dep.lo\"\n    ;;\n i?86-*-solaris2.[[89]] | i?86-*-solaris2.1?)\n    AC_DEFINE(SOLARIS25_PROC_VDB_BUG_FIXED)\n    ;;\n mipstx39-*-elf*)\n    machdep=\"mach_dep.lo\"\n    AC_DEFINE(STACKBASE, __stackbase)\n    AC_DEFINE(DATASTART_IS_ETEXT)\n    ;;\n mips-dec-ultrix*)\n    machdep=\"mach-dep.lo\"\n    ;;\n mips-nec-sysv*|mips-unknown-sysv*)\n    ;;\n mips*-*-linux*) \n    ;; \n mips-*-*)\n    machdep=\"mach_dep.lo\"\n    dnl AC_DEFINE(NO_EXECUTE_PERMISSION)\n    dnl This is now redundant, but it is also important for incremental GC\n    dnl performance under Irix.\n    ;;\n sparc-*-netbsd*)\n    machdep=\"mach_dep.lo sparc_netbsd_mach_dep.lo\"\n    ;;\n sparc-sun-solaris2.3)\n    machdep=\"mach_dep.lo sparc_mach_dep.lo\"\n    AC_DEFINE(SUNOS53_SHARED_LIB)\n    ;;\n sparc*-sun-solaris2.*)\n    machdep=\"mach_dep.lo sparc_mach_dep.lo\"\n    ;;\n ia64-*-*)\n    machdep=\"mach_dep.lo ia64_save_regs_in_stack.lo\"\n    ;;\nesac\nif test x\"$machdep\" = x; then\nAC_MSG_RESULT($machdep)\n   machdep=\"mach_dep.lo\"\nfi\naddobjs=\"$addobjs $machdep\"\nAC_SUBST(addobjs)\nAC_SUBST(addlibs)\n\nAC_PROG_LIBTOOL\n\n#\n# Check for AViiON Machines running DGUX\n#\nac_is_dgux=no\nAC_CHECK_HEADER(sys/dg_sys_info.h,\n[ac_is_dgux=yes;])\n\n    ## :GOTCHA: we do not check anything but sys/dg_sys_info.h\nif test $ac_is_dgux = yes; then\n    if test \"$enable_full_debug\" = \"yes\"; then\n      CFLAGS=\"-g -mstandard -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n      CXXFLAGS=\"-g -mstandard -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n    else\n      CFLAGS=\"-DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n      CXXFLAGS=\"-DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n    fi\n    AC_SUBST(CFLAGS)\n    AC_SUBST(CXXFLAGS)\nfi\n\ndnl We use these options to decide which functions to include.\nAC_ARG_WITH(target-subdir,\n[  --with-target-subdir=SUBDIR\n                          configuring with a cross compiler])\nAC_ARG_WITH(cross-host,\n[  --with-cross-host=HOST  configuring with a cross compiler])\n\n# automake wants to see AC_EXEEXT.  But we don't need it.  And having\n# it is actually a problem, because the compiler we're passed can't\n# necessarily do a full link.  So we fool automake here.\nif false; then\n  # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands\n  # to nothing, so nothing would remain between `then' and `fi' if it\n  # were not for the `:' below.\n  :\n  AC_EXEEXT\nfi\n\ndnl As of 4.13a2, the collector will not properly work on Solaris when\ndnl built with gcc and -O.  So we remove -O in the appropriate case.\ndnl Not needed anymore on Solaris.\nAC_MSG_CHECKING(whether Solaris gcc optimization fix is necessary)\ncase \"$host\" in\n *aix*)\n    if test \"$GCC\" = yes; then\n       AC_MSG_RESULT(yes)\n       new_CFLAGS=\n       for i in $CFLAGS; do\n\t  case \"$i\" in\n\t   -O*)\n\t      ;;\n\t   *)\n\t      new_CFLAGS=\"$new_CFLAGS $i\"\n\t      ;;\n\t  esac\n       done\n       CFLAGS=\"$new_CFLAGS\"\n    else\n       AC_MSG_RESULT(no)\n    fi\n    ;;\n *) AC_MSG_RESULT(no) ;;\nesac\n\ndnl Include defines that have become de facto standard.\ndnl ALL_INTERIOR_POINTERS can be overridden in startup code.\nAC_DEFINE(NO_EXECUTE_PERMISSION)\nAC_DEFINE(ALL_INTERIOR_POINTERS)\n\n\ndnl Interface Selection\ndnl -------------------\ndnl\ndnl By default, make the library as general as possible.\ndnl enable_gcj_support=no\nAC_ARG_ENABLE(gcj-support,\n    [AC_HELP_STRING([--disable-gcj-support],\n\t[Disable support for gcj.])])\nAM_CONDITIONAL(ENABLE_GCJ_SUPPORT,\n    [test x\"$enable_gcj_support\" != xno])\nif test x\"$enable_gcj_support\" != xno; then\n    AC_DEFINE(GC_GCJ_SUPPORT, 1, [Define to include support for gcj])\nfi\n\nAC_ARG_ENABLE(java-finalization,\n    [AC_HELP_STRING([--disable-java-finalization],\n\t[Disable support for java finalization.])])\nif test x\"$enable_java_finalization\" != xno; then\n    AC_DEFINE(JAVA_FINALIZATION)\nfi\n\nAC_ARG_ENABLE(atomic-uncollectable,\n    [AC_HELP_STRING([--disable-atomic-uncollectible],\n\t[Disable support for atomic uncollectible allocation.])])\nif test x\"$enable_atomic_uncollectible\" != x\"no\"; then\n    AC_DEFINE(ATOMIC_UNCOLLECTABLE, 1,\n\t[Define to enable atomic uncollectible allocation.])\nfi\n\nAC_ARG_ENABLE(redirect-malloc,\n    [AC_HELP_STRING([--enable-redirect-malloc],\n\t[Redirect malloc and friends to GC routines])])\n\nif test \"${enable_redirect_malloc}\" = yes; then\n    if test \"${enable_full_debug}\" = yes; then\n\tAC_DEFINE(REDIRECT_MALLOC, GC_debug_malloc_replacement)\n\tAC_DEFINE(REDIRECT_REALLOC, GC_debug_realloc_replacement)\n\tAC_DEFINE(REDIRECT_FREE, GC_debug_free)\n    else\n\tAC_DEFINE(REDIRECT_MALLOC, GC_malloc)\n    fi\nfi\n\nAC_ARG_ENABLE(large-config,\n    [AC_HELP_STRING([--enable-large-config],\n\t[Optimize for large (> 100 MB) heap or root set])])\n\nif test \"${enable_large_config}\" = yes; then\n    AC_DEFINE(LARGE_CONFIG, 1, [Define to optimize for large heaps or root sets])\nfi\n\ndnl This is something of a hack.  When cross-compiling we turn off\ndnl some functionality.  We also enable the \"small\" configuration.\ndnl These is only correct when targetting an embedded system.  FIXME.\nif test -n \"${with_cross_host}\"; then\n   AC_DEFINE(NO_CLOCK)\n   AC_DEFINE(SMALL_CONFIG)\n   AC_DEFINE(NO_DEBUGGING)\nfi\n\n\ndnl Debugging\ndnl ---------\n\nUNWINDLIBS=\nAC_ARG_ENABLE(gc-debug,\n[AC_HELP_STRING([--enable-gc-debug],\n    [include full support for pointer backtracing etc.])],\n[ if test \"$enable_gc_debug\" = \"yes\"; then\n    AC_MSG_WARN(\"Should define GC_DEBUG and use debug alloc. in clients.\")\n    AC_DEFINE(KEEP_BACK_PTRS)\n    AC_DEFINE(DBG_HDRS_ALL)\n    case $host in\n      ia64-*-linux* )\n\tAC_DEFINE(MAKE_BACK_GRAPH)\n\tAC_DEFINE(SAVE_CALL_COUNT, 8)\n        AC_CHECK_LIB(unwind, backtrace, [\n\t  AC_DEFINE(GC_HAVE_BUILTIN_BACKTRACE)\n\t  UNWINDLIBS=-lunwind\n\t  AC_MSG_WARN(\"Client code may need to link against libunwind.\")\n\t])\n      ;;\n      x86-*-linux* | i586-*-linux* | i686-*-linux* | x86_64-*-linux* )\n\tAC_DEFINE(MAKE_BACK_GRAPH)\n\tAC_MSG_WARN(\"Client must not use -fomit-frame-pointer.\")\n\tAC_DEFINE(SAVE_CALL_COUNT, 8)\n      ;;\n      i[3456]86-*-dgux*)\n\tAC_DEFINE(MAKE_BACK_GRAPH)\n      ;;\n    esac ]\n  fi)\n\nAC_SUBST(UNWINDLIBS)\n\nAC_ARG_ENABLE(gc-assertions,\n    [AC_HELP_STRING([--enable-gc-assertions],\n\t[collector-internal assertion checking])])\nif test \"${enable_gc_assertions}\" = yes; then\n    AC_DEFINE(GC_ASSERTIONS)\nfi\n\nAM_CONDITIONAL(USE_LIBDIR, test -z \"$with_cross_host\")\n\n\ndnl Atomic Ops\ndnl ----------\n\natomic_ops_libs=-latomic_ops\nAC_CHECK_HEADER(atomic_ops.h,\n  [ AC_MSG_NOTICE([Using pre-installed libatomic_ops]) ],\n  [ ao_dir=\n    for candidate in ${srcdir}/libatomic_ops*; do\n\tcase $candidate in\n\t    *.tar.gz)\n\t\t;;\n\t    *install)\n\t    \tdnl generated by alternate Makefile.\n\t\t;;\n\t    *)\n\t\tif test -e \"$candidate\"; then\n\t\t    ao_dir=\"$candidate\"\n\t\tfi\n\t\t;;\n\tesac\n    done\n    if test -z \"$ao_dir\"; then\n\tAC_MSG_ERROR([Missig libatomic_ops.])\n    fi\n    ao_version=\"${ao_dir#*libatomic_ops-}\"\n    AC_MSG_NOTICE([Using internal version of libatomic_ops])\n\n    dnl Automake does not accept shell variables in AC_CONFIG_SUBDIRS\n    test -e ${srcdir}/libatomic_ops \\\n\t|| ln -s ${ao_dir} ${srcdir}/libatomic_ops\n    AC_CONFIG_SUBDIRS(libatomic_ops)\n\n    dnl Also copy the source files to be linked in.\n    test -e ${srcdir}/atomic_ops.c \\\n    \t|| ln -s ${srcdir}/libatomic_ops/src/atomic_ops.c \\\n\t\t ${srcdir}/atomic_ops.c\n\n    test -e ${srcdir}/atomic_ops_sysdeps.S \\\n    \t|| ln -s ${srcdir}/libatomic_ops/src/atomic_ops_sysdeps.S \\\n\t\t ${srcdir}/atomic_ops_sysdeps.S\n\n    dnl This gets the source include files, which is often close enough.\n    dnl It also makes atomic_ops_sysdeps.S assemble.\n    GC_CFLAGS=\"${GC_CFLAGS} -I \\$(top_srcdir)/libatomic_ops/src\"\n    maybe_libatomic_ops=\"libatomic_ops\"\n  ])\n\nAM_CONDITIONAL(USE_INTERNAL_LIBATOMIC_OPS,\n\t\ttest -n \"$maybe_libatomic_ops\" -a \"$THREADS\" != \"none\")\nAM_CONDITIONAL(NEED_ATOMIC_OPS_ASM, test -n \"$maybe_libatomic_ops\" -a x$need_atomic_ops_asm = xtrue)\nAC_SUBST(atomic_ops_libs)\n\ndnl Produce the Files\ndnl -----------------\n\nAC_CONFIG_FILES([Makefile bdw-gc.pc])\n\nAC_CONFIG_COMMANDS([default],,\n  [ srcdir=${srcdir}\n    host=${host}\n    CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n    CC=\"${CC}\"\n    DEFS=\"$DEFS\" ])\n\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/win32_threads.c": "#include \"private/gc_priv.h\"\n\n#if defined(GC_WIN32_THREADS)\n\n#include <windows.h>\n\n#ifdef THREAD_LOCAL_ALLOC\n# include \"private/thread_local_alloc.h\"\n#endif /* THREAD_LOCAL_ALLOC */\n\n/* Allocation lock declarations.\t*/\n#if !defined(USE_PTHREAD_LOCKS)\n# if defined(GC_DLL)\n    __declspec(dllexport) CRITICAL_SECTION GC_allocate_ml;\n# else\n    CRITICAL_SECTION GC_allocate_ml;\n# endif\n  DWORD GC_lock_holder = NO_THREAD;\n  \t/* Thread id for current holder of allocation lock */\n#else\n  pthread_mutex_t GC_allocate_ml = PTHREAD_MUTEX_INITIALIZER;\n  unsigned long GC_lock_holder = NO_THREAD;\n#endif\n\n#ifdef GC_PTHREADS\n# include <errno.h>\n\n/* GC_DLL should not normally be defined, especially since we often do turn */\n/* on THREAD_LOCAL_ALLOC, which is currently incompatible. \t\t    */\n/* It might be possible to get GC_DLL and DllMain-based\tthread registration */\n/* to work with Cygwin, but if you try you are on your own.\t\t    */\n#ifdef GC_DLL\n# error GC_DLL untested with Cygwin\n#endif\n\n /* Cygwin-specific forward decls */\n# undef pthread_create \n# undef pthread_sigmask \n# undef pthread_join \n# undef pthread_detach\n# undef dlopen \n\n# ifdef DEBUG_THREADS\n#   ifdef CYGWIN32\n#     define DEBUG_CYGWIN_THREADS 1\n#     define DEBUG_WIN32_PTHREADS 0\n#   else\n#     define DEBUG_WIN32_PTHREADS 1\n#     define DEBUG_CYGWIN_THREADS 0\n#   endif\n# else\n#   define DEBUG_CYGWIN_THREADS 0\n#   define DEBUG_WIN32_PTHREADS 0\n# endif\n\n  void * GC_pthread_start(void * arg);\n  void GC_thread_exit_proc(void *arg);\n\n# include <pthread.h>\n\n#else\n\n# ifdef DEBUG_THREADS\n#   define DEBUG_WIN32_THREADS 1\n# else\n#   define DEBUG_WIN32_THREADS 0\n# endif\n\n# undef CreateThread\n# undef ExitThread\n# undef _beginthreadex\n# undef _endthreadex\n# undef _beginthread\n# ifdef DEBUG_THREADS\n#   define DEBUG_WIN32_THREADS 1\n# else\n#   define DEBUG_WIN32_THREADS 0\n# endif\n\n# include <process.h>  /* For _beginthreadex, _endthreadex */\n\n#endif\n\n#if defined(GC_DLL) && !defined(MSWINCE)\n  static GC_bool GC_win32_dll_threads = FALSE;\n  /* This code operates in two distinct modes, depending on\t*/\n  /* the setting of GC_win32_dll_threads.  If\t\t\t*/\n  /* GC_win32_dll_threads is set, all threads in the process\t*/\n  /* are implicitly registered with the GC by DllMain. \t\t*/\n  /* No explicit registration is required, and attempts at\t*/\n  /* explicit registration are ignored.  This mode is\t\t*/\n  /* very different from the Posix operation of the collector.\t*/\n  /* In this mode access to the thread table is lock-free.\t*/\n  /* Hence there is a static limit on the number of threads.\t*/\n  \n  /* If GC_win32_dll_threads is FALSE, or the collector is\t*/\n  /* built without GC_DLL defined, things operate in a way\t*/\n  /* that is very similar to Posix platforms, and new threads\t*/\n  /* must be registered with the collector, e.g. by using\t*/\n  /* preprocessor-based interception of the thread primitives.\t*/\n  /* In this case, we use a real data structure for the thread\t*/\n  /* table.  Note that there is no equivalent of linker-based\t*/\n  /* call interception, since we don't have ELF-like \t\t*/\n  /* facilities.  The Windows analog appears to be \"API\t\t*/\n  /* hooking\", which really seems to be a standard way to \t*/\n  /* do minor binary rewriting (?).  I'd prefer not to have\t*/\n  /* the basic collector rely on such facilities, but an\t*/\n  /* optional package that intercepts thread calls this way\t*/\n  /* would probably be nice.\t\t\t\t\t*/\n\n  /* GC_win32_dll_threads must be set at initialization time,\t*/\n  /* i.e. before any collector or thread calls.  We make it a\t*/\n  /* \"dynamic\" option only to avoid multiple library versions.\t*/\n#else\n# define GC_win32_dll_threads FALSE\n#endif\n\n/* We have two versions of the thread table.  Which one\t*/\n/* we us depends on whether or not GC_win32_dll_threads */\n/* is set.  Note that before initialization, we don't \t*/\n/* add any entries to either table, even if DllMain is\t*/\n/* called.  The main thread will be added on\t\t*/\n/* initialization.\t\t\t\t\t*/\n\n/* The type of the first argument to InterlockedExchange.\t*/\n/* Documented to be LONG volatile *, but at least gcc likes \t*/\n/* this better.\t\t\t\t\t\t\t*/\ntypedef LONG * IE_t;\n\nGC_bool GC_thr_initialized = FALSE;\n\nGC_bool GC_need_to_lock = FALSE;\n\nstatic GC_bool parallel_initialized = FALSE;\n\nvoid GC_init_parallel(void);\n\n#ifdef GC_DLL\n  /* Turn on GC_win32_dll_threads\t*/\n  GC_API void GC_use_DllMain(void)\n  {\n#     ifdef THREAD_LOCAL_ALLOC\n\t  ABORT(\"Cannot use thread local allocation with DllMain-based \"\n\t\t\"thread registration.\");\n\t  /* Thread-local allocation really wants to lock at thread\t*/\n\t  /* entry and exit.\t\t\t\t\t\t*/\n#     endif\n      GC_ASSERT(!parallel_initialized);\n      GC_win32_dll_threads = TRUE;\n  }\n#else\n  GC_API void GC_use_DllMain(void)\n  {\n      ABORT(\"GC not configured as DLL\");\n  }\n#endif\n\nDWORD GC_main_thread = 0;\n\nstruct GC_Thread_Rep {\n  union {\n    AO_t tm_in_use; \t/* Updated without lock.\t\t*/\n  \t\t\t/* We assert that unused \t\t*/\n  \t\t\t/* entries have invalid ids of\t\t*/\n  \t\t\t/* zero and zero stack fields.  \t*/\n    \t\t\t/* Used only with GC_win32_dll_threads. */\n    struct GC_Thread_Rep * tm_next;\n    \t\t\t/* Hash table link without \t\t*/\n    \t\t\t/* GC_win32_dll_threads.\t\t*/\n    \t\t\t/* More recently allocated threads\t*/\n\t\t\t/* with a given pthread id come \t*/\n\t\t\t/* first.  (All but the first are\t*/\n\t\t\t/* guaranteed to be dead, but we may    */\n\t\t\t/* not yet have registered the join.)   */\n  } table_management;\n# define in_use table_management.tm_in_use\n# define next table_management.tm_next\n  DWORD id;\n  HANDLE handle;\n  ptr_t stack_base;\t/* The cold end of the stack.   */\n\t\t\t/* 0 ==> entry not valid.\t*/\n\t\t\t/* !in_use ==> stack_base == 0\t*/\n  GC_bool suspended;\n\n# ifdef GC_PTHREADS\n    void *status; /* hold exit value until join in case it's a pointer */\n    pthread_t pthread_id;\n    short flags;\t\t/* Protected by GC lock.\t*/\n#\tdefine FINISHED 1   \t/* Thread has exited.\t*/\n#\tdefine DETACHED 2\t/* Thread is intended to be detached.\t*/\n#   define KNOWN_FINISHED(t) (((t) -> flags) & FINISHED)\n# else\n#   define KNOWN_FINISHED(t) 0\n# endif\n# ifdef THREAD_LOCAL_ALLOC\n    struct thread_local_freelists tlfs;\n# endif\n};\n\ntypedef struct GC_Thread_Rep * GC_thread;\ntypedef volatile struct GC_Thread_Rep * GC_vthread;\n\n/*\n * We assumed that volatile ==> memory ordering, at least among\n * volatiles.  This code should consistently use atomic_ops.\n */\n\nvolatile GC_bool GC_please_stop = FALSE;\n\n/*\n * We track thread attachments while the world is supposed to be stopped.\n * Unfortunately, we can't stop them from starting, since blocking in\n * DllMain seems to cause the world to deadlock.  Thus we have to recover\n * If we notice this in the middle of marking.\n */\n\nAO_t GC_attached_thread = FALSE;\n/* Return TRUE if an thread was attached since we last asked or\t*/\n/* since GC_attached_thread was explicitly reset.\t\t*/\nGC_bool GC_started_thread_while_stopped(void)\n{\n  AO_t result;\n\n  if (GC_win32_dll_threads) {\n    AO_nop_full();\t/* Prior heap reads need to complete earlier. */\n    result = AO_load(&GC_attached_thread);\n    if (result) {\n      AO_store(&GC_attached_thread, FALSE);\n    }\n    return ((GC_bool)result);\n  } else {\n    return FALSE;\n  }\n}\n\n/* Thread table used if GC_win32_dll_threads is set.\t*/\n/* This is a fixed size array.\t\t\t\t*/\n/* Since we use runtime conditionals, both versions\t*/\n/* are always defined.\t\t\t\t\t*/\n# ifndef MAX_THREADS\n#   define MAX_THREADS 512\n#  endif\n  /* Things may get quite slow for large numbers of threads,\t*/\n  /* since we look them up with sequential search.\t\t*/\n\n  volatile struct GC_Thread_Rep dll_thread_table[MAX_THREADS];\n\n  volatile LONG GC_max_thread_index = 0;\n  \t\t\t/* Largest index in dll_thread_table\t*/\n\t\t        /* that was ever used.\t\t\t*/\n\n/* And now the version used if GC_win32_dll_threads is not set.\t*/\n/* This is a chained hash table, with much of the code borrowed\t*/\n/* From the Posix implementation.\t\t\t\t*/\n# define THREAD_TABLE_SZ 256\t/* Must be power of 2\t*/\n  GC_thread GC_threads[THREAD_TABLE_SZ];\n  \n\n/* Add a thread to GC_threads.  We assume it wasn't already there.\t*/\n/* Caller holds allocation lock.\t\t\t\t\t*/\n/* Unlike the pthreads version, the id field is set by the caller.\t*/\nGC_thread GC_new_thread(DWORD id)\n{\n    word hv = ((word)id) % THREAD_TABLE_SZ;\n    GC_thread result;\n    /* It may not be safe to allocate when we register the first thread. */\n    static struct GC_Thread_Rep first_thread;\n    static GC_bool first_thread_used = FALSE;\n    \n    GC_ASSERT(I_HOLD_LOCK());\n    if (!first_thread_used) {\n    \tresult = &first_thread;\n    \tfirst_thread_used = TRUE;\n    } else {\n        GC_ASSERT(!GC_win32_dll_threads);\n        result = (struct GC_Thread_Rep *)\n        \t GC_INTERNAL_MALLOC(sizeof(struct GC_Thread_Rep), NORMAL);\n#       ifdef GC_PTHREADS\n\t  /* result can be NULL -> segfault */\n\t  GC_ASSERT(result -> flags == 0);\n#       endif\n    }\n    if (result == 0) return(0);\n    /* result -> id = id; Done by caller.\t*/\n    result -> next = GC_threads[hv];\n    GC_threads[hv] = result;\n#   ifdef GC_PTHREADS\n      GC_ASSERT(result -> flags == 0 /* && result -> thread_blocked == 0 */);\n#   endif\n    return(result);\n}\n\nextern LONG WINAPI GC_write_fault_handler(struct _EXCEPTION_POINTERS *exc_info);\n\n#if defined(GWW_VDB) && defined(MPROTECT_VDB)\n  extern GC_bool GC_gww_dirty_init(void);\n  /* Defined in os_dep.c.  Returns TRUE if GetWriteWatch is available. \t*/\n  /* may be called repeatedly.\t\t\t\t\t\t*/\n#endif\n\nGC_bool GC_in_thread_creation = FALSE;  /* Protected by allocation lock. */\n\n/*\n * This may be called from DllMain, and hence operates under unusual\n * constraints.  In particular, it must be lock-free if GC_win32_dll_threads\n * is set.  Always called from the thread being added.\n * If GC_win32_dll_threads is not set, we already hold the allocation lock,\n * except possibly during single-threaded start-up code.\n */\nstatic GC_thread GC_register_my_thread_inner(struct GC_stack_base *sb,\n\t\t\t\t\t     DWORD thread_id)\n{\n  GC_vthread me;\n\n  /* The following should be a noop according to the win32\t*/\n  /* documentation.  There is empirical evidence that it\t*/\n  /* isn't.\t\t- HB\t\t\t\t\t*/\n# if defined(MPROTECT_VDB)\n#   if defined(GWW_VDB)\n      if (GC_incremental && !GC_gww_dirty_init())\n\tSetUnhandledExceptionFilter(GC_write_fault_handler);\n#   else\n      if (GC_incremental) SetUnhandledExceptionFilter(GC_write_fault_handler);\n#   endif\n# endif\n\n  if (GC_win32_dll_threads) {\n    int i;\n    /* It appears to be unsafe to acquire a lock here, since this\t*/\n    /* code is apparently not preeemptible on some systems.\t\t*/\n    /* (This is based on complaints, not on Microsoft's official\t*/\n    /* documentation, which says this should perform \"only simple\t*/\n    /* initialization tasks\".)\t\t\t\t\t\t*/\n    /* Hence we make do with nonblocking synchronization.\t\t*/\n    /* It has been claimed that DllMain is really only executed with\t*/\n    /* a particular system lock held, and thus careful use of locking\t*/\n    /* around code that doesn't call back into the system libraries\t*/\n    /* might be OK.  But this hasn't been tested across all win32\t*/\n    /* variants.\t\t\t\t\t\t\t*/\n                /* cast away volatile qualifier */\n    for (i = 0; InterlockedExchange((IE_t)&dll_thread_table[i].in_use,1) != 0;\n\t i++) {\n      /* Compare-and-swap would make this cleaner, but that's not \t*/\n      /* supported before Windows 98 and NT 4.0.  In Windows 2000,\t*/\n      /* InterlockedExchange is supposed to be replaced by\t\t*/\n      /* InterlockedExchangePointer, but that's not really what I\t*/\n      /* want here.\t\t\t\t\t\t\t*/\n      /* FIXME: We should eventually declare Win95 dead and use AO_\t*/\n      /* primitives here.\t\t\t\t\t\t*/\n      if (i == MAX_THREADS - 1)\n        ABORT(\"too many threads\");\n    }\n    /* Update GC_max_thread_index if necessary.  The following is safe,\t*/\n    /* and unlike CompareExchange-based solutions seems to work on all\t*/\n    /* Windows95 and later platforms.\t\t\t\t\t*/\n    /* Unfortunately, GC_max_thread_index may be temporarily out of \t*/\n    /* bounds, so readers have to compensate.\t\t\t\t*/\n    while (i > GC_max_thread_index) {\n      InterlockedIncrement((IE_t)&GC_max_thread_index);\n    }\n    if (GC_max_thread_index >= MAX_THREADS) {\n      /* We overshot due to simultaneous increments.\t*/\n      /* Setting it to MAX_THREADS-1 is always safe.\t*/\n      GC_max_thread_index = MAX_THREADS - 1;\n    }\n    me = dll_thread_table + i;\n  } else /* Not using DllMain */ {\n    GC_ASSERT(I_HOLD_LOCK());\n    GC_in_thread_creation = TRUE; /* OK to collect from unknown thread. */\n    me = GC_new_thread(thread_id);\n    GC_in_thread_creation = FALSE;\n  }\n# ifdef GC_PTHREADS\n    /* me can be NULL -> segfault */\n    me -> pthread_id = pthread_self();\n# endif\n\n  if (!DuplicateHandle(GetCurrentProcess(),\n                 \tGetCurrentThread(),\n\t\t        GetCurrentProcess(),\n\t\t        (HANDLE*)&(me -> handle),\n\t\t        0,\n\t\t        0,\n\t\t        DUPLICATE_SAME_ACCESS)) {\n\tDWORD last_error = GetLastError();\n\tGC_err_printf(\"Last error code: %d\\n\", last_error);\n\tABORT(\"DuplicateHandle failed\");\n  }\n  me -> stack_base = sb -> mem_base;\n  /* Up until this point, GC_push_all_stacks considers this thread\t*/\n  /* invalid.\t\t\t\t\t\t\t\t*/\n  /* Up until this point, this entry is viewed as reserved but invalid\t*/\n  /* by GC_delete_thread.\t\t\t\t\t\t*/\n  me -> id = thread_id;\n# if defined(THREAD_LOCAL_ALLOC)\n      GC_init_thread_local((GC_tlfs)(&(me->tlfs)));\n# endif\n  if (me -> stack_base == NULL) \n      ABORT(\"Bad stack base in GC_register_my_thread_inner\");\n  if (GC_win32_dll_threads) {\n    if (GC_please_stop) {\n      AO_store(&GC_attached_thread, TRUE);\n      AO_nop_full();  // Later updates must become visible after this.\n    }\n    /* We'd like to wait here, but can't, since waiting in DllMain \t*/\n    /* provokes deadlocks.\t\t\t\t\t\t*/\n    /* Thus we force marking to be restarted instead.\t\t\t*/\n  } else {\n    GC_ASSERT(!GC_please_stop);\n  \t/* Otherwise both we and the thread stopping code would be\t*/\n  \t/* holding the allocation lock.\t\t\t\t\t*/\n  }\n  return (GC_thread)(me);\n}\n\n/*\n * GC_max_thread_index may temporarily be larger than MAX_THREADS.\n * To avoid subscript errors, we check on access.\n */\n#ifdef __GNUC__\n__inline__\n#endif\nLONG GC_get_max_thread_index()\n{\n  LONG my_max = GC_max_thread_index;\n\n  if (my_max >= MAX_THREADS) return MAX_THREADS-1;\n  return my_max;\n}\n\n/* Return the GC_thread corresponding to a thread id.  May be called \t*/\n/* without a lock, but should be called in contexts in which the\t*/\n/* requested thread cannot be asynchronously deleted, e.g. from the\t*/\n/* thread itself.\t\t\t\t\t\t\t*/\n/* This version assumes that either GC_win32_dll_threads is set, or\t*/\n/* we hold the allocator lock.\t\t\t\t\t\t*/\n/* Also used (for assertion checking only) from thread_local_alloc.c.\t*/\nGC_thread GC_lookup_thread_inner(DWORD thread_id) {\n  if (GC_win32_dll_threads) {\n    int i;\n    LONG my_max = GC_get_max_thread_index();\n    for (i = 0;\n       i <= my_max &&\n       (!AO_load_acquire(&(dll_thread_table[i].in_use))\n\t|| dll_thread_table[i].id != thread_id);\n       /* Must still be in_use, since nobody else can store our thread_id. */\n       i++) {}\n    if (i > my_max) {\n      return 0;\n    } else {\n      return (GC_thread)(dll_thread_table + i);\n    }\n  } else {\n    word hv = ((word)thread_id) % THREAD_TABLE_SZ;\n    register GC_thread p = GC_threads[hv];\n    \n    GC_ASSERT(I_HOLD_LOCK());\n    while (p != 0 && p -> id != thread_id) p = p -> next;\n    return(p);\n  }\n}\n\n/* A version of the above that acquires the lock if necessary.  Note\t*/\n/* that the identically named function for pthreads is different, and\t*/\n/* just assumes we hold the lock.\t\t\t\t\t*/\n/* Also used (for assertion checking only) from thread_local_alloc.c.\t*/\nstatic GC_thread GC_lookup_thread(DWORD thread_id)\n{\n  if (GC_win32_dll_threads) {\n    return GC_lookup_thread_inner(thread_id);\n  } else {\n    GC_thread result;\n    LOCK();\n    result = GC_lookup_thread_inner(thread_id);\n    UNLOCK();\n    return result;\n  }\n}\n\n/* If a thread has been joined, but we have not yet\t\t*/\n/* been notified, then there may be more than one thread \t*/\n/* in the table with the same win32 id.\t\t\t\t*/\n/* This is OK, but we need a way to delete a specific one.\t*/\n/* Assumes we hold the allocation lock unless\t\t\t*/\n/* GC_win32_dll_threads is set.\t\t\t\t\t*/\n/* If GC_win32_dll_threads is set it should be called from the\t*/\n/* thread being deleted.\t\t\t\t\t*/\nvoid GC_delete_gc_thread(GC_vthread gc_id)\n{\n  if (GC_win32_dll_threads) {\n    /* This is intended to be lock-free.\t\t\t\t*/\n    /* It is either called synchronously from the thread being deleted,\t*/\n    /* or by the joining thread.\t\t\t\t\t*/\n    /* In this branch asynchronosu changes to *gc_id are possible.\t*/\n    CloseHandle(gc_id->handle);\n    gc_id -> stack_base = 0;\n    gc_id -> id = 0;\n#   ifdef CYGWIN32\n      gc_id -> pthread_id = 0;\n#   endif /* CYGWIN32 */\n#   ifdef GC_WIN32_PTHREADS\n      gc_id -> pthread_id.p = NULL;\n#   endif /* GC_WIN32_PTHREADS */\n    AO_store_release(&(gc_id->in_use), FALSE);\n  } else {\n    /* Cast away volatile qualifier, since we have lock. */\n    GC_thread gc_nvid = (GC_thread)gc_id;\n    DWORD id = gc_nvid -> id;\n    word hv = ((word)id) % THREAD_TABLE_SZ;\n    register GC_thread p = GC_threads[hv];\n    register GC_thread prev = 0;\n\n    GC_ASSERT(I_HOLD_LOCK());\n    while (p != gc_nvid) {\n        prev = p;\n        p = p -> next;\n    }\n    if (prev == 0) {\n        GC_threads[hv] = p -> next;\n    } else {\n        prev -> next = p -> next;\n    }\n    GC_INTERNAL_FREE(p);\n  }\n}\n\n/* Delete a thread from GC_threads.  We assume it is there.\t*/\n/* (The code intentionally traps if it wasn't.)\t\t\t*/\n/* Assumes we hold the allocation lock unless\t\t\t*/\n/* GC_win32_dll_threads is set.\t\t\t\t\t*/\n/* If GC_win32_dll_threads is set it should be called from the\t*/\n/* thread being deleted.\t\t\t\t\t*/\nvoid GC_delete_thread(DWORD id)\n{\n  if (GC_win32_dll_threads) {\n    GC_thread t = GC_lookup_thread_inner(id);\n\n    if (0 == t) {\n      WARN(\"Removing nonexistent thread %ld\\n\", (GC_word)id);\n    } else {\n      GC_delete_gc_thread(t);\n    }\n  } else {\n    word hv = ((word)id) % THREAD_TABLE_SZ;\n    register GC_thread p = GC_threads[hv];\n    register GC_thread prev = 0;\n    \n    GC_ASSERT(I_HOLD_LOCK());\n    while (p -> id != id) {\n        prev = p;\n        p = p -> next;\n    }\n    if (prev == 0) {\n        GC_threads[hv] = p -> next;\n    } else {\n        prev -> next = p -> next;\n    }\n    GC_INTERNAL_FREE(p);\n  }\n}\n\nint GC_register_my_thread(struct GC_stack_base *sb) {\n  DWORD t = GetCurrentThreadId();\n\n  if (0 == GC_lookup_thread(t)) {\n    /* We lock here, since we want to wait for an ongoing GC.\t*/\n    LOCK();\n    GC_register_my_thread_inner(sb, t);\n    UNLOCK();\n    return GC_SUCCESS;\n  } else {\n    return GC_DUPLICATE;\n  }\n}\n\nint GC_unregister_my_thread(void)\n{\n    DWORD t = GetCurrentThreadId();\n\n#   if defined(THREAD_LOCAL_ALLOC)\n      LOCK();\n      {\n\tGC_thread me = GC_lookup_thread_inner(t);\n        GC_destroy_thread_local(&(me->tlfs));\n      }\n      UNLOCK();\n#   endif\n    if (GC_win32_dll_threads) {\n      /* Should we just ignore this? */\n      GC_delete_thread(t);\n    } else {\n      LOCK();\n      GC_delete_thread(t);\n      UNLOCK();\n    }\n    return GC_SUCCESS;\n}\n\n\n#ifdef GC_PTHREADS\n\n/* A quick-and-dirty cache of the mapping between pthread_t\t*/\n/* and win32 thread id.\t\t\t\t\t\t*/\n#define PTHREAD_MAP_SIZE 512\nDWORD GC_pthread_map_cache[PTHREAD_MAP_SIZE];\n#define HASH(pthread_id) ((NUMERIC_THREAD_ID(pthread_id) >> 5) % PTHREAD_MAP_SIZE)\n\t/* It appears pthread_t is really a pointer type ... */\n#define SET_PTHREAD_MAP_CACHE(pthread_id, win32_id) \\\n\tGC_pthread_map_cache[HASH(pthread_id)] = (win32_id);\n#define GET_PTHREAD_MAP_CACHE(pthread_id) \\\n\tGC_pthread_map_cache[HASH(pthread_id)]\n\n/* Return a GC_thread corresponding to a given pthread_t.\t*/\n/* Returns 0 if it's not there.\t\t\t\t\t*/\n/* We assume that this is only called for pthread ids that\t*/\n/* have not yet terminated or are still joinable, and\t\t*/\n/* cannot be concurrently terminated.\t\t\t\t*/\n/* Assumes we do NOT hold the allocation lock.\t\t\t*/\nstatic GC_thread GC_lookup_pthread(pthread_t id)\n{\n  if (GC_win32_dll_threads) {\n    int i;\n    LONG my_max = GC_get_max_thread_index();\n\n    for (i = 0;\n         i <= my_max &&\n         (!AO_load_acquire(&(dll_thread_table[i].in_use))\n\t  || THREAD_EQUAL(dll_thread_table[i].pthread_id, id));\n       /* Must still be in_use, since nobody else can store our thread_id. */\n       i++);\n    if (i > my_max) return 0;\n    return (GC_thread)(dll_thread_table + i);\n  } else {\n    /* We first try the cache.  If that fails, we use a very slow\t*/\n    /* approach.\t\t\t\t\t\t\t*/\n    int hv_guess = GET_PTHREAD_MAP_CACHE(id) % THREAD_TABLE_SZ;\n    int hv;\n    GC_thread p;\n\n    LOCK();\n    for (p = GC_threads[hv_guess]; 0 != p; p = p -> next) {\n      if (THREAD_EQUAL(p -> pthread_id, id))\n\tgoto foundit; \n    }\n    for (hv = 0; hv < THREAD_TABLE_SZ; ++hv) {\n      for (p = GC_threads[hv]; 0 != p; p = p -> next) {\n        if (THREAD_EQUAL(p -> pthread_id, id))\n\t  goto foundit; \n      }\n    }\n    p = 0;\n   foundit:\n    UNLOCK();\n    return p;\n  }\n}\n\n#endif /* GC_PTHREADS */\n\nvoid GC_push_thread_structures(void)\n{\n  GC_ASSERT(I_HOLD_LOCK());\n  if (GC_win32_dll_threads) {\n    /* Unlike the other threads implementations, the thread table here\t*/\n    /* contains no pointers to the collectable heap.  Thus we have\t*/\n    /* no private structures we need to preserve.\t\t\t*/\n#   ifdef GC_PTHREADS \n    { int i; /* pthreads may keep a pointer in the thread exit value */\n      LONG my_max = GC_get_max_thread_index();\n\n      for (i = 0; i <= my_max; i++)\n        if (dll_thread_table[i].in_use)\n\t  GC_push_all((ptr_t)&(dll_thread_table[i].status),\n                      (ptr_t)(&(dll_thread_table[i].status)+1));\n    }\n#   endif\n  } else {\n    GC_push_all((ptr_t)(GC_threads), (ptr_t)(GC_threads)+sizeof(GC_threads));\n  }\n# if defined(THREAD_LOCAL_ALLOC)\n    GC_push_all((ptr_t)(&GC_thread_key),\n      (ptr_t)(&GC_thread_key)+sizeof(&GC_thread_key));\n    /* Just in case we ever use our own TLS implementation.\t*/\n# endif\n}\n\n/* Suspend the given thread, if it's still active.\t*/\nvoid GC_suspend(GC_thread t)\n{\n# ifdef MSWINCE\n    /* SuspendThread will fail if thread is running kernel code */\n      while (SuspendThread(t -> handle) == (DWORD)-1)\n\tSleep(10);\n# else\n    /* Apparently the Windows 95 GetOpenFileName call creates\t*/\n    /* a thread that does not properly get cleaned up, and\t\t*/\n    /* SuspendThread on its descriptor may provoke a crash.\t\t*/\n    /* This reduces the probability of that event, though it still\t*/\n    /* appears there's a race here.\t\t\t\t\t*/\n    DWORD exitCode; \n    if (GetExitCodeThread(t -> handle, &exitCode) &&\n        exitCode != STILL_ACTIVE) {\n      t -> stack_base = 0; /* prevent stack from being pushed */\n#     ifndef GC_PTHREADS\n        /* this breaks pthread_join on Cygwin, which is guaranteed to  */\n        /* only see user pthreads \t \t\t\t       */\n        AO_store(&(t -> in_use), FALSE);\n        CloseHandle(t -> handle);\n#     endif\n      return;\n    }\n    if (SuspendThread(t -> handle) == (DWORD)-1)\n      ABORT(\"SuspendThread failed\");\n# endif\n   t -> suspended = TRUE;\n}\n\n/* Defined in misc.c */\n#ifndef CYGWIN32\n  extern CRITICAL_SECTION GC_write_cs;\n#endif\n\nvoid GC_stop_world(void)\n{\n  DWORD thread_id = GetCurrentThreadId();\n  int i;\n\n  if (!GC_thr_initialized) ABORT(\"GC_stop_world() called before GC_thr_init()\");\n  GC_ASSERT(I_HOLD_LOCK());\n\n  GC_please_stop = TRUE;\n# ifndef CYGWIN32\n    EnterCriticalSection(&GC_write_cs);\n# endif\n  if (GC_win32_dll_threads) {\n    /* Any threads being created during this loop will end up setting   */\n    /* GC_attached_thread when they start.  This will force marking to  */\n    /* restart.\t\t\t\t\t\t\t\t*/\n    /* This is not ideal, but hopefully correct.\t\t\t*/\n    GC_attached_thread = FALSE;\n    for (i = 0; i <= GC_get_max_thread_index(); i++) {\n      GC_vthread t = dll_thread_table + i;\n      if (t -> stack_base != 0\n\t  && t -> id != thread_id) {\n\t  GC_suspend((GC_thread)t);\n      }\n    }\n  } else {\n      GC_thread t;\n      int i;\n\n      for (i = 0; i < THREAD_TABLE_SZ; i++) {\n        for (t = GC_threads[i]; t != 0; t = t -> next) {\n\t  if (t -> stack_base != 0\n\t  && !KNOWN_FINISHED(t)\n\t  && t -> id != thread_id) {\n\t    GC_suspend(t);\n\t  }\n\t}\n      }\n  }\n# ifndef CYGWIN32\n    LeaveCriticalSection(&GC_write_cs);\n# endif    \n}\n\nvoid GC_start_world(void)\n{\n  DWORD thread_id = GetCurrentThreadId();\n  int i;\n  LONG my_max = GC_get_max_thread_index();\n\n  GC_ASSERT(I_HOLD_LOCK());\n  if (GC_win32_dll_threads) {\n    for (i = 0; i <= my_max; i++) {\n      GC_thread t = (GC_thread)(dll_thread_table + i);\n      if (t -> stack_base != 0 && t -> suspended\n\t  && t -> id != thread_id) {\n        if (ResumeThread(t -> handle) == (DWORD)-1)\n\t  ABORT(\"ResumeThread failed\");\n        t -> suspended = FALSE;\n      }\n    }\n  } else {\n    GC_thread t;\n    int i;\n\n    for (i = 0; i < THREAD_TABLE_SZ; i++) {\n      for (t = GC_threads[i]; t != 0; t = t -> next) {\n        if (t -> stack_base != 0 && t -> suspended\n\t    && t -> id != thread_id) {\n          if (ResumeThread(t -> handle) == (DWORD)-1)\n\t    ABORT(\"ResumeThread failed\");\n          t -> suspended = FALSE;\n        }\n      }\n    }\n  }\n  GC_please_stop = FALSE;\n}\n\n# ifdef MSWINCE\n    /* The VirtualQuery calls below won't work properly on WinCE, but\t*/\n    /* since each stack is restricted to an aligned 64K region of\t*/\n    /* virtual memory we can just take the next lowest multiple of 64K.\t*/\n#   define GC_get_stack_min(s) \\\n        ((ptr_t)(((DWORD)(s) - 1) & 0xFFFF0000))\n# else\n    static ptr_t GC_get_stack_min(ptr_t s)\n    {\n\tptr_t bottom;\n\tMEMORY_BASIC_INFORMATION info;\n\tVirtualQuery(s, &info, sizeof(info));\n\tdo {\n\t    bottom = info.BaseAddress;\n\t    VirtualQuery(bottom - 1, &info, sizeof(info));\n\t} while ((info.Protect & PAGE_READWRITE)\n\t\t && !(info.Protect & PAGE_GUARD));\n\treturn(bottom);\n    }\n# endif\n\nvoid GC_push_stack_for(GC_thread thread)\n{\n    int dummy;\n    ptr_t sp, stack_min;\n    DWORD me = GetCurrentThreadId();\n\n    if (thread -> stack_base) {\n      if (thread -> id == me) {\n\tsp = (ptr_t) &dummy;\n      } else {\n        CONTEXT context;\n        context.ContextFlags = CONTEXT_INTEGER|CONTEXT_CONTROL;\n        if (!GetThreadContext(thread -> handle, &context))\n\t  ABORT(\"GetThreadContext failed\");\n\n        /* Push all registers that might point into the heap.  Frame\t*/\n        /* pointer registers are included in case client code was\t*/\n        /* compiled with the 'omit frame pointer' optimisation.\t\t*/\n#       define PUSH1(reg) GC_push_one((word)context.reg)\n#       define PUSH2(r1,r2) PUSH1(r1), PUSH1(r2)\n#       define PUSH4(r1,r2,r3,r4) PUSH2(r1,r2), PUSH2(r3,r4)\n#       if defined(I386)\n          PUSH4(Edi,Esi,Ebx,Edx), PUSH2(Ecx,Eax), PUSH1(Ebp);\n\t  sp = (ptr_t)context.Esp;\n#\telif defined(X86_64)\n\t  PUSH4(Rax,Rcx,Rdx,Rbx); PUSH2(Rbp, Rsi); PUSH1(Rdi);\n\t  PUSH4(R8, R9, R10, R11); PUSH4(R12, R13, R14, R15);\n\t  sp = (ptr_t)context.Rsp;\n#       elif defined(ARM32)\n\t  PUSH4(R0,R1,R2,R3),PUSH4(R4,R5,R6,R7),PUSH4(R8,R9,R10,R11),PUSH1(R12);\n\t  sp = (ptr_t)context.Sp;\n#       elif defined(SHx)\n\t  PUSH4(R0,R1,R2,R3), PUSH4(R4,R5,R6,R7), PUSH4(R8,R9,R10,R11);\n\t  PUSH2(R12,R13), PUSH1(R14);\n\t  sp = (ptr_t)context.R15;\n#       elif defined(MIPS)\n\t  PUSH4(IntAt,IntV0,IntV1,IntA0), PUSH4(IntA1,IntA2,IntA3,IntT0);\n\t  PUSH4(IntT1,IntT2,IntT3,IntT4), PUSH4(IntT5,IntT6,IntT7,IntS0);\n\t  PUSH4(IntS1,IntS2,IntS3,IntS4), PUSH4(IntS5,IntS6,IntS7,IntT8);\n\t  PUSH4(IntT9,IntK0,IntK1,IntS8);\n\t  sp = (ptr_t)context.IntSp;\n#       elif defined(PPC)\n\t  PUSH4(Gpr0, Gpr3, Gpr4, Gpr5),  PUSH4(Gpr6, Gpr7, Gpr8, Gpr9);\n\t  PUSH4(Gpr10,Gpr11,Gpr12,Gpr14), PUSH4(Gpr15,Gpr16,Gpr17,Gpr18);\n\t  PUSH4(Gpr19,Gpr20,Gpr21,Gpr22), PUSH4(Gpr23,Gpr24,Gpr25,Gpr26);\n\t  PUSH4(Gpr27,Gpr28,Gpr29,Gpr30), PUSH1(Gpr31);\n\t  sp = (ptr_t)context.Gpr1;\n#       elif defined(ALPHA)\n\t  PUSH4(IntV0,IntT0,IntT1,IntT2), PUSH4(IntT3,IntT4,IntT5,IntT6);\n\t  PUSH4(IntT7,IntS0,IntS1,IntS2), PUSH4(IntS3,IntS4,IntS5,IntFp);\n\t  PUSH4(IntA0,IntA1,IntA2,IntA3), PUSH4(IntA4,IntA5,IntT8,IntT9);\n\t  PUSH4(IntT10,IntT11,IntT12,IntAt);\n\t  sp = (ptr_t)context.IntSp;\n#       else\n#         error \"architecture is not supported\"\n#       endif\n      } /* ! current thread */\n\n      stack_min = GC_get_stack_min(thread->stack_base);\n\n      if (sp >= stack_min && sp < thread->stack_base) {\n#       if DEBUG_WIN32_PTHREADS || DEBUG_WIN32_THREADS \\\n           || DEBUG_CYGWIN_THREADS\n\t  GC_printf(\"Pushing thread from %p to %p for 0x%x from 0x%x\\n\",\n\t\t    sp, thread -> stack_base, thread -> id, me);\n#       endif\n        GC_push_all_stack(sp, thread->stack_base);\n      } else {\n        WARN(\"Thread stack pointer 0x%lx out of range, pushing everything\\n\",\n\t     (unsigned long)(size_t)sp);\n        GC_push_all_stack(stack_min, thread->stack_base);\n      }\n    } /* thread looks live */\n}\n\nvoid GC_push_all_stacks(void)\n{\n  DWORD me = GetCurrentThreadId();\n  GC_bool found_me = FALSE;\n  size_t nthreads = 0;\n  \n  if (GC_win32_dll_threads) {\n    int i;\n    LONG my_max = GC_get_max_thread_index();\n\n    for (i = 0; i <= my_max; i++) {\n      GC_thread t = (GC_thread)(dll_thread_table + i);\n      if (t -> in_use) {\n        ++nthreads;\n        GC_push_stack_for(t);\n        if (t -> id == me) found_me = TRUE;\n      }\n    }\n  } else {\n    GC_thread t;\n    int i;\n\n    for (i = 0; i < THREAD_TABLE_SZ; i++) {\n      for (t = GC_threads[i]; t != 0; t = t -> next) {\n        ++nthreads;\n        if (!KNOWN_FINISHED(t)) GC_push_stack_for(t);\n        if (t -> id == me) found_me = TRUE;\n      }\n    }\n  }\n  if (GC_print_stats == VERBOSE) {\n    GC_log_printf(\"Pushed %d thread stacks \", nthreads);\n    if (GC_win32_dll_threads) {\n    \tGC_log_printf(\"based on DllMain thread tracking\\n\");\n    } else {\n    \tGC_log_printf(\"\\n\");\n    }\n  }\n  if (!found_me && !GC_in_thread_creation)\n    ABORT(\"Collecting from unknown thread.\");\n}\n\nvoid GC_get_next_stack(char *start, char **lo, char **hi)\n{\n    int i;\n#   define ADDR_LIMIT (char *)(-1L)\n    char * current_min = ADDR_LIMIT;\n\n    if (GC_win32_dll_threads) {\n      LONG my_max = GC_get_max_thread_index();\n  \n      for (i = 0; i <= my_max; i++) {\n    \tptr_t s = (ptr_t)(dll_thread_table[i].stack_base);\n\n\tif (0 != s && s > start && s < current_min) {\n\t    current_min = s;\n\t}\n      }\n    } else {\n      for (i = 0; i < THREAD_TABLE_SZ; i++) {\n\tGC_thread t;\n\n        for (t = GC_threads[i]; t != 0; t = t -> next) {\n\t  ptr_t s = (ptr_t)(t -> stack_base);\n\n\t  if (0 != s && s > start && s < current_min) {\n\t    current_min = s;\n\t  }\n        }\n      }\n    }\n    *hi = current_min;\n    if (current_min == ADDR_LIMIT) {\n    \t*lo = ADDR_LIMIT;\n\treturn;\n    }\n    *lo = GC_get_stack_min(current_min);\n    if (*lo < start) *lo = start;\n}\n\n#ifndef GC_PTHREADS\n\n/* We have no DllMain to take care of new threads.  Thus we\t*/\n/* must properly intercept thread creation.\t\t\t*/\n\ntypedef struct {\n    LPTHREAD_START_ROUTINE start;\n    LPVOID param;\n} thread_args;\n\nstatic DWORD WINAPI thread_start(LPVOID arg);\n\nvoid * GC_win32_start_inner(struct GC_stack_base *sb, LPVOID arg)\n{\n    void * ret;\n    thread_args *args = (thread_args *)arg;\n\n#   if DEBUG_WIN32_THREADS\n      GC_printf(\"thread 0x%x starting...\\n\", GetCurrentThreadId());\n#   endif\n\n    GC_register_my_thread(sb); /* This waits for an in-progress GC. */\n\n    /* Clear the thread entry even if we exit with an exception.\t*/\n    /* This is probably pointless, since an uncaught exception is\t*/\n    /* supposed to result in the process being killed.\t\t\t*/\n#ifndef __GNUC__\n    __try {\n#endif /* __GNUC__ */\n\tret = (void *)(size_t)args->start (args->param);\n#ifndef __GNUC__\n    } __finally {\n#endif /* __GNUC__ */\n\tGC_unregister_my_thread();\n\tGC_free(args);\n#ifndef __GNUC__\n    }\n#endif /* __GNUC__ */\n\n#   if DEBUG_WIN32_THREADS\n      GC_printf(\"thread 0x%x returned from start routine.\\n\",\n\t\tGetCurrentThreadId());\n#   endif\n    return ret;\n}\n\nDWORD WINAPI GC_win32_start(LPVOID arg)\n{\n    return (DWORD)(size_t)GC_call_with_stack_base(GC_win32_start_inner, arg);\n}\n\nGC_API HANDLE WINAPI GC_CreateThread(\n    LPSECURITY_ATTRIBUTES lpThreadAttributes, \n    DWORD dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, \n    LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId )\n{\n    HANDLE thread_h = NULL;\n\n    thread_args *args;\n\n    if (!parallel_initialized) GC_init_parallel();\n    \t\t/* make sure GC is initialized (i.e. main thread is attached,\n\t\t   tls initialized) */\n\n#   if DEBUG_WIN32_THREADS\n      GC_printf(\"About to create a thread from 0x%x\\n\", GetCurrentThreadId());\n#   endif\n    if (GC_win32_dll_threads) {\n      return CreateThread(lpThreadAttributes, dwStackSize, lpStartAddress,\n                        lpParameter, dwCreationFlags, lpThreadId);\n    } else {\n      args = GC_malloc_uncollectable(sizeof(thread_args)); \n\t/* Handed off to and deallocated by child thread.\t*/\n      if (0 == args) {\n\tSetLastError(ERROR_NOT_ENOUGH_MEMORY);\n        return NULL;\n      }\n\n      /* set up thread arguments */\n    \targs -> start = lpStartAddress;\n    \targs -> param = lpParameter;\n\n      GC_need_to_lock = TRUE;\n      thread_h = CreateThread(lpThreadAttributes,\n    \t\t\t      dwStackSize, GC_win32_start,\n    \t\t\t      args, dwCreationFlags,\n    \t\t\t      lpThreadId);\n      if( thread_h == 0 ) GC_free( args );\n      return thread_h;\n    }\n}\n\nvoid WINAPI GC_ExitThread(DWORD dwExitCode)\n{\n  GC_unregister_my_thread();\n  ExitThread(dwExitCode);\n}\n\nuintptr_t GC_beginthreadex(\n    void *security, unsigned stack_size,\n    unsigned ( __stdcall *start_address )( void * ),\n    void *arglist, unsigned initflag, unsigned *thrdaddr)\n{\n    uintptr_t thread_h = -1L;\n\n    thread_args *args;\n\n    if (!parallel_initialized) GC_init_parallel();\n    \t\t/* make sure GC is initialized (i.e. main thread is attached,\n\t\t   tls initialized) */\n#   if DEBUG_WIN32_THREADS\n      GC_printf(\"About to create a thread from 0x%x\\n\", GetCurrentThreadId());\n#   endif\n\n    if (GC_win32_dll_threads) {\n      return _beginthreadex(security, stack_size, start_address,\n                            arglist, initflag, thrdaddr);\n    } else {\n      args = GC_malloc_uncollectable(sizeof(thread_args)); \n\t/* Handed off to and deallocated by child thread.\t*/\n      if (0 == args) {\n\tSetLastError(ERROR_NOT_ENOUGH_MEMORY);\n        return (uintptr_t)(-1);\n      }\n\n      /* set up thread arguments */\n    \targs -> start = (LPTHREAD_START_ROUTINE)start_address;\n    \targs -> param = arglist;\n\n      GC_need_to_lock = TRUE;\n      thread_h = _beginthreadex(security, stack_size,\n      \t\t (unsigned (__stdcall *) (void *))GC_win32_start,\n                                args, initflag, thrdaddr);\n      if( thread_h == 0 ) GC_free( args );\n      return thread_h;\n    }\n}\n\nvoid GC_endthreadex(unsigned retval)\n{\n  GC_unregister_my_thread();\n  _endthreadex(retval);\n}\n\n#endif /* !GC_PTHREADS */\n\n#ifdef MSWINCE\n\ntypedef struct {\n    HINSTANCE hInstance;\n    HINSTANCE hPrevInstance;\n    LPWSTR lpCmdLine;\n    int nShowCmd;\n} main_thread_args;\n\nDWORD WINAPI main_thread_start(LPVOID arg);\n\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,\n\t\t   LPWSTR lpCmdLine, int nShowCmd)\n{\n    DWORD exit_code = 1;\n\n    main_thread_args args = {\n\thInstance, hPrevInstance, lpCmdLine, nShowCmd\n    };\n    HANDLE thread_h;\n    DWORD thread_id;\n\n    /* initialize everything */\n    GC_init();\n\n    /* start the main thread */\n    thread_h = GC_CreateThread(\n\tNULL, 0, main_thread_start, &args, 0, &thread_id);\n\n    if (thread_h != NULL)\n    {\n\tWaitForSingleObject (thread_h, INFINITE);\n\tGetExitCodeThread (thread_h, &exit_code);\n\tCloseHandle (thread_h);\n    }\n\n    GC_deinit();\n    DeleteCriticalSection(&GC_allocate_ml);\n\n    return (int) exit_code;\n}\n\nDWORD WINAPI main_thread_start(LPVOID arg)\n{\n    main_thread_args * args = (main_thread_args *) arg;\n\n    return (DWORD) GC_WinMain (args->hInstance, args->hPrevInstance,\n\t\t\t       args->lpCmdLine, args->nShowCmd);\n}\n\n# else /* !MSWINCE */\n\n/* Called by GC_init() - we hold the allocation lock.\t*/\nvoid GC_thr_init(void) {\n    struct GC_stack_base sb;\n    int sb_result;\n\n    GC_ASSERT(I_HOLD_LOCK());\n    if (GC_thr_initialized) return;\n    GC_main_thread = GetCurrentThreadId();\n    GC_thr_initialized = TRUE;\n\n    /* Add the initial thread, so we can stop it.\t*/\n    sb_result = GC_get_stack_base(&sb);\n    GC_ASSERT(sb_result == GC_SUCCESS);\n    GC_register_my_thread(&sb);\n}\n\n#ifdef GC_PTHREADS\n\nstruct start_info {\n    void *(*start_routine)(void *);\n    void *arg;\n    GC_bool detached;\n};\n\nint GC_pthread_join(pthread_t pthread_id, void **retval) {\n    int result;\n    int i;\n    GC_thread joinee;\n\n#   if DEBUG_CYGWIN_THREADS\n      GC_printf(\"thread 0x%x(0x%x) is joining thread 0x%x.\\n\",\n\t\t(int)pthread_self(), GetCurrentThreadId(), (int)pthread_id);\n#   endif\n#   if DEBUG_WIN32_PTHREADS\n      GC_printf(\"thread 0x%x(0x%x) is joining thread 0x%x.\\n\",\n\t\t(int)(pthread_self()).p, GetCurrentThreadId(), pthread_id.p);\n#   endif\n\n    if (!parallel_initialized) GC_init_parallel();\n    /* Thread being joined might not have registered itself yet. */\n    /* After the join,thread id may have been recycled.\t\t */\n    /* FIXME: It would be better if this worked more like\t */\n    /* pthread_support.c.\t\t\t\t\t */\n\n    #ifndef GC_WIN32_PTHREADS\n      while ((joinee = GC_lookup_pthread(pthread_id)) == 0) Sleep(10);\n    #endif\n\n    result = pthread_join(pthread_id, retval);\n\n    #ifdef GC_WIN32_PTHREADS\n      /* win32_pthreads id are unique */\n      joinee = GC_lookup_pthread(pthread_id);\n    #endif\n\n    if (!GC_win32_dll_threads) {\n      LOCK();\n      GC_delete_gc_thread(joinee);\n      UNLOCK();\n    } /* otherwise dllmain handles it.\t*/\n\n#   if DEBUG_CYGWIN_THREADS\n      GC_printf(\"thread 0x%x(0x%x) completed join with thread 0x%x.\\n\",\n\t\t (int)pthread_self(), GetCurrentThreadId(), (int)pthread_id);\n#   endif\n#   if DEBUG_WIN32_PTHREADS\n      GC_printf(\"thread 0x%x(0x%x) completed join with thread 0x%x.\\n\",\n\t\t(int)(pthread_self()).p, GetCurrentThreadId(), pthread_id.p);\n#   endif\n\n    return result;\n}\n\n/* Cygwin-pthreads calls CreateThread internally, but it's not\n * easily interceptible by us..\n *   so intercept pthread_create instead\n */\nint\nGC_pthread_create(pthread_t *new_thread,\n\t\t  const pthread_attr_t *attr,\n                  void *(*start_routine)(void *), void *arg) {\n    int result;\n    struct start_info * si;\n\n    if (!parallel_initialized) GC_init_parallel();\n    \t\t/* make sure GC is initialized (i.e. main thread is attached) */\n    if (GC_win32_dll_threads) {\n      return pthread_create(new_thread, attr, start_routine, arg);\n    }\n    \n    /* This is otherwise saved only in an area mmapped by the thread */\n    /* library, which isn't visible to the collector.\t\t */\n    si = GC_malloc_uncollectable(sizeof(struct start_info)); \n    if (0 == si) return(EAGAIN);\n\n    si -> start_routine = start_routine;\n    si -> arg = arg;\n    if (attr != 0 &&\n        pthread_attr_getdetachstate(attr, &si->detached)\n\t== PTHREAD_CREATE_DETACHED) {\n      si->detached = TRUE;\n    }\n\n#   if DEBUG_CYGWIN_THREADS\n      GC_printf(\"About to create a thread from 0x%x(0x%x)\\n\",\n\t\t(int)pthread_self(), GetCurrentThreadId);\n#   endif\n#   if DEBUG_WIN32_PTHREADS\n      GC_printf(\"About to create a thread from 0x%x(0x%x)\\n\",\n\t\t(int)(pthread_self()).p, GetCurrentThreadId());\n#   endif\n    GC_need_to_lock = TRUE;\n    result = pthread_create(new_thread, attr, GC_pthread_start, si); \n\n    if (result) { /* failure */\n      \tGC_free(si);\n    } \n\n    return(result);\n}\n\nvoid * GC_pthread_start_inner(struct GC_stack_base *sb, void * arg)\n{\n    struct start_info * si = arg;\n    void * result;\n    void *(*start)(void *);\n    void *start_arg;\n    DWORD thread_id = GetCurrentThreadId();\n    pthread_t pthread_id = pthread_self();\n    GC_thread me;\n    GC_bool detached;\n    int i;\n\n#   if DEBUG_CYGWIN_THREADS\n      GC_printf(\"thread 0x%x(0x%x) starting...\\n\",(int)pthread_id,\n\t\t      \t\t\t\t  thread_id);\n#   endif\n#   if DEBUG_WIN32_PTHREADS\n      GC_printf(\"thread 0x%x(0x%x) starting...\\n\",(int) pthread_id.p,\n      \t\t\t\t\t\t  thread_id);\n#   endif\n\n    GC_ASSERT(!GC_win32_dll_threads);\n    /* If a GC occurs before the thread is registered, that GC will\t*/\n    /* ignore this thread.  That's fine, since it will block trying to  */\n    /* acquire the allocation lock, and won't yet hold interesting \t*/\n    /* pointers.\t\t\t\t\t\t\t*/\n    LOCK();\n    /* We register the thread here instead of in the parent, so that\t*/\n    /* we don't need to hold the allocation lock during pthread_create. */\n    me = GC_register_my_thread_inner(sb, thread_id);\n    SET_PTHREAD_MAP_CACHE(pthread_id, thread_id);\n    UNLOCK();\n\n    start = si -> start_routine;\n    start_arg = si -> arg;\n    if (si-> detached) me -> flags |= DETACHED;\n    me -> pthread_id = pthread_id;\n\n    GC_free(si); /* was allocated uncollectable */\n\n    pthread_cleanup_push(GC_thread_exit_proc, (void *)me);\n    result = (*start)(start_arg);\n    me -> status = result;\n    pthread_cleanup_pop(1);\n\n#   if DEBUG_CYGWIN_THREADS\n      GC_printf(\"thread 0x%x(0x%x) returned from start routine.\\n\",\n\t\t(int)pthread_self(),GetCurrentThreadId());\n#   endif\n#   if DEBUG_WIN32_PTHREADS\n      GC_printf(\"thread 0x%x(0x%x) returned from start routine.\\n\",\n\t\t(int)(pthread_self()).p, GetCurrentThreadId());\n#   endif\n\n    return(result);\n}\n\nvoid * GC_pthread_start(void * arg)\n{\n    return GC_call_with_stack_base(GC_pthread_start_inner, arg);\n}\n\nvoid GC_thread_exit_proc(void *arg)\n{\n    GC_thread me = (GC_thread)arg;\n    int i;\n\n    GC_ASSERT(!GC_win32_dll_threads);\n#   if DEBUG_CYGWIN_THREADS\n      GC_printf(\"thread 0x%x(0x%x) called pthread_exit().\\n\",\n\t\t(int)pthread_self(),GetCurrentThreadId());\n#   endif\n#   if DEBUG_WIN32_PTHREADS\n      GC_printf(\"thread 0x%x(0x%x) called pthread_exit().\\n\",\n\t\t(int)(pthread_self()).p,GetCurrentThreadId());\n#   endif\n\n    LOCK();\n#   if defined(THREAD_LOCAL_ALLOC)\n      GC_destroy_thread_local(&(me->tlfs));\n#   endif\n    if (me -> flags & DETACHED) {\n      GC_delete_thread(GetCurrentThreadId());\n    } else {\n      /* deallocate it as part of join */\n      me -> flags |= FINISHED;\n    }\n    UNLOCK();\n}\n\n#ifndef GC_WIN32_PTHREADS\n/* win32 pthread does not support sigmask */\n/* nothing required here... */\nint GC_pthread_sigmask(int how, const sigset_t *set, sigset_t *oset) {\n  if (!parallel_initialized) GC_init_parallel();\n  return pthread_sigmask(how, set, oset);\n}\n#endif\n\nint GC_pthread_detach(pthread_t thread)\n{\n    int result;\n    GC_thread thread_gc_id;\n    \n    if (!parallel_initialized) GC_init_parallel();\n    LOCK();\n    thread_gc_id = GC_lookup_pthread(thread);\n    UNLOCK();\n    result = pthread_detach(thread);\n    if (result == 0) {\n      LOCK();\n      thread_gc_id -> flags |= DETACHED;\n      /* Here the pthread thread id may have been recycled. */\n      if (thread_gc_id -> flags & FINISHED) {\n        GC_delete_gc_thread(thread_gc_id);\n      }\n      UNLOCK();\n    }\n    return result;\n}\n\n#else /* !GC_PTHREADS */\n\n/*\n * We avoid acquiring locks here, since this doesn't seem to be preemptable.\n * This may run with an uninitialized collector, in which case we don't do much.\n * This implies that no threads other than the main one should be created\n * with an uninitialized collector.  (The alternative of initializing\n * the collector here seems dangerous, since DllMain is limited in what it\n * can do.)\n */\n#ifdef GC_DLL\nGC_API BOOL WINAPI DllMain(HINSTANCE inst, ULONG reason, LPVOID reserved)\n{\n  struct GC_stack_base sb;\n  DWORD thread_id;\n  int sb_result;\n  static int entry_count = 0;\n\n  if (parallel_initialized && !GC_win32_dll_threads) return TRUE;\n\n  switch (reason) {\n   case DLL_THREAD_ATTACH:\n    GC_ASSERT(entry_count == 0 || parallel_initialized);\n    ++entry_count; /* and fall through: */\n   case DLL_PROCESS_ATTACH:\n    /* This may run with the collector uninitialized. */\n    thread_id = GetCurrentThreadId();\n    if (parallel_initialized && GC_main_thread != thread_id) {\n\t/* Don't lock here.\t*/\n        sb_result = GC_get_stack_base(&sb);\n        GC_ASSERT(sb_result == GC_SUCCESS);\n#       ifdef THREAD_LOCAL_ALLOC\n\t  ABORT(\"Cannot initialize thread local cache from DllMain\");\n#       endif\n\tGC_register_my_thread_inner(&sb, thread_id);\n    } /* o.w. we already did it during GC_thr_init(), called by GC_init() */\n    break;\n\n   case DLL_THREAD_DETACH:\n    /* We are hopefully running in the context of the exiting thread.\t*/\n    GC_ASSERT(parallel_initialized);\n    if (!GC_win32_dll_threads) return TRUE;\n    GC_delete_thread(GetCurrentThreadId());\n    break;\n\n   case DLL_PROCESS_DETACH:\n    {\n      int i;\n\n      if (!GC_win32_dll_threads) return TRUE;\n      for (i = 0; i <= GC_get_max_thread_index(); ++i)\n      {\n          if (AO_load(&(dll_thread_table[i].in_use)))\n\t    GC_delete_gc_thread(dll_thread_table + i);\n      }\n\n      GC_deinit();\n      DeleteCriticalSection(&GC_allocate_ml);\n    }\n    break;\n\n  }\n  return TRUE;\n}\n#endif /* GC_DLL */\n#endif /* !GC_PTHREADS */\n\n# endif /* !MSWINCE */\n\n/* Perform all initializations, including those that\t*/\n/* may require allocation.\t\t\t\t*/\n/* Called without allocation lock.\t\t\t*/\n/* Must be called before a second thread is created.\t*/\nvoid GC_init_parallel(void)\n{\n    if (parallel_initialized) return;\n    parallel_initialized = TRUE;\n    /* GC_init() calls us back, so set flag first.\t*/\n    \n    if (!GC_is_initialized) GC_init();\n    if (GC_win32_dll_threads) {\n      GC_need_to_lock = TRUE;\n  \t/* Cannot intercept thread creation.  Hence we don't know if other\t*/\n\t/* threads exist.  However, client is not allowed to create other\t*/\n\t/* threads before collector initialization.  Thus it's OK not to\t*/\n\t/* lock before this.\t\t\t\t\t\t\t*/\n    }\n    /* Initialize thread local free lists if used.\t*/\n#   if defined(THREAD_LOCAL_ALLOC)\n      LOCK();\n      GC_init_thread_local(&(GC_lookup_thread(GetCurrentThreadId())->tlfs));\n      UNLOCK();\n#   endif\n}\n\n#if defined(USE_PTHREAD_LOCKS)\n  /* Support for pthread locking code.\t\t*/\n  /* Pthread_mutex_try_lock may not win here,\t*/\n  /* due to builtinsupport for spinning first?\t*/\n\nvolatile GC_bool GC_collecting = 0;\n\t\t\t/* A hint that we're in the collector and       */\n                        /* holding the allocation lock for an           */\n                        /* extended period.                             */\n\nvoid GC_lock(void)\n{\n    pthread_mutex_lock(&GC_allocate_ml);\n}\n#endif /* USE_PTHREAD ... */\n\n# if defined(THREAD_LOCAL_ALLOC)\n\n/* Add thread-local allocation support.  Microsoft uses __declspec(thread) */\n\n/* We must explicitly mark ptrfree and gcj free lists, since the free \t*/\n/* list links wouldn't otherwise be found.  We also set them in the \t*/\n/* normal free lists, since that involves touching less memory than if\t*/\n/* we scanned them normally.\t\t\t\t\t\t*/\nvoid GC_mark_thread_local_free_lists(void)\n{\n    int i;\n    GC_thread p;\n    \n    for (i = 0; i < THREAD_TABLE_SZ; ++i) {\n      for (p = GC_threads[i]; 0 != p; p = p -> next) {\n\tGC_mark_thread_local_fls_for(&(p->tlfs));\n      }\n    }\n}\n\n#if defined(GC_ASSERTIONS)\n    /* Check that all thread-local free-lists are completely marked.\t*/\n    /* also check that thread-specific-data structures are marked.\t*/\n    void GC_check_tls(void) {\n\tint i;\n\tGC_thread p;\n\t\n\tfor (i = 0; i < THREAD_TABLE_SZ; ++i) {\n\t  for (p = GC_threads[i]; 0 != p; p = p -> next) {\n\t    GC_check_tls_for(&(p->tlfs));\n\t  }\n\t}\n#       if defined(USE_CUSTOM_SPECIFIC)\n\t  if (GC_thread_key != 0)\n\t    GC_check_tsd_marks(GC_thread_key);\n#\tendif \n    }\n#endif /* GC_ASSERTIONS */\n\n#endif /* THREAD_LOCAL_ALLOC ... */\n\n#endif /* GC_WIN32_THREADS */\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/Makefile.direct": "# This is the original manually generated Makefile.  It may still be used\n# to build the collector.\n#\n# Primary targets:\n# gc.a - builds basic library\n# c++ - adds C++ interface to library\n# cords - adds cords (heavyweight strings) to library\n# test - prints porting information, then builds basic version of gc.a,\n#      \t and runs some tests of collector and cords.  Does not add cords or\n#\t c++ interface to gc.a\n# cord/de - builds dumb editor based on cords.\nABI_FLAG= \n# ABI_FLAG should be the cc flag that specifies the ABI.  On most\n# platforms this will be the empty string.  Possible values:\n# +DD64 for 64-bit executable on HP/UX.\n# -n32, -n64, -o32 for SGI/MIPS ABIs.\n\nAS_ABI_FLAG=$(ABI_FLAG)\n# ABI flag for assembler.  On HP/UX this is +A64 for 64 bit\n# executables.\n\nCC=cc $(ABI_FLAG)\nCXX=g++ $(ABI_FLAG)\nAS=as $(AS_ABI_FLAG)\n#  The above doesn't work with gas, which doesn't run cpp.\n#  Define AS as `gcc -c -x assembler-with-cpp' instead.\n\n# Redefining srcdir allows object code for the nonPCR version of the collector\n# to be generated in different directories.\nsrcdir= .\nVPATH= $(srcdir)\n\n# Atomic_ops installation directory.  If this doesn't exist, we create\n# it from the included libatomic_ops distribution.\nAO_VERSION=1.2\nAO_SRC_DIR=$(srcdir)/libatomic_ops-$(AO_VERSION)\nAO_INSTALL_DIR=$(srcdir)/libatomic_ops-install\n\nCFLAGS= -O -I$(srcdir)/include -I$(AO_INSTALL_DIR)/include -DATOMIC_UNCOLLECTABLE -DNO_EXECUTE_PERMISSION -DALL_INTERIOR_POINTERS\n\n# To build the parallel collector on Linux, add to the above:\n# -DGC_LINUX_THREADS -DPARALLEL_MARK -DTHREAD_LOCAL_ALLOC\n# To build the thread-capable preload library that intercepts\n# malloc, add -DGC_USE_DLOPEN_WRAP -DREDIRECT_MALLOC=GC_malloc -fpic\n# To build the parallel collector in a static library on HP/UX,\n# add to the above:\n# -DGC_HPUX_THREADS -DTHREAD_LOCAL_ALLOC -D_POSIX_C_SOURCE=199506L -mt\n# FIXME: PARALLEL_MARK currently broken on HP/UX.\n# To build the thread-safe collector on Tru64, add to the above:\n# -pthread -DGC_OSF1_THREADS\n\n# HOSTCC and HOSTCFLAGS are used to build executables that will be run as\n# part of the build process, i.e. on the build machine.  These will usually\n# be the same as CC and CFLAGS, except in a cross-compilation environment.\n# Note that HOSTCFLAGS should include any -D flags that affect thread support.\nHOSTCC=$(CC)\nHOSTCFLAGS=$(CFLAGS)\n\n# For dynamic library builds, it may be necessary to add flags to generate\n# PIC code, e.g. -fPIC on Linux.\n\n# Setjmp_test may yield overly optimistic results when compiled\n# without optimization.\n\n# These define arguments influence the collector configuration:\n# -DFIND_LEAK causes GC_find_leak to be initially set.\n#   This causes the collector to assume that all inaccessible\n#   objects should have been explicitly deallocated, and reports exceptions.\n#   Finalization and the test program are not usable in this mode.\n#\n# IMPORTANT: Any of the _THREADS options must normally also be defined in\n# the client before including gc.h.  This redefines thread primitives to\n# invoke the GC_ versions instead.  Alternatively, linker-based symbol\n# interception can be used on a few platforms.\n# -DGC_THREADS should set the appropriate one of the below macros,\n#   except -DGC_WIN32_PTHREADS, which must be set explicitly.\n# -DGC_SOLARIS_PTHREADS enables support for Solaris pthreads.\n#   (Clients should also define GC_SOLARIS_THREADS and then include\n#   gc.h before performing thr_ or dl* or GC_ operations.)\n#   Must also define -D_REENTRANT.\n# -DGC_IRIX_THREADS enables support for Irix pthreads.  See README.irix.\n# -DGC_HPUX_THREADS enables support for HP/UX 11 pthreads.\n#   Also requires -D_REENTRANT or -D_POSIX_C_SOURCE=199506L. See README.hp.\n# -DGC_LINUX_THREADS enables support for Xavier Leroy's Linux threads\n#   or NPTL threads. See README.linux.  -D_REENTRANT may also be required.\n# -DGC_OSF1_THREADS enables support for Tru64 pthreads.\n# -DGC_FREEBSD_THREADS enables support for FreeBSD pthreads.\n#   Appeared to run into some underlying thread problems.\n# -DGC_DARWIN_THREADS enables support for Mac OS X pthreads.\n# -DGC_AIX_THREADS enables support for IBM AIX threads.\n# -DGC_DGUX386_THREADS enables support for DB/UX on I386 threads.\n#   See README.DGUX386.  (Probably has not been tested recently.)\n# -DGC_WIN32_THREADS enables support for win32 threads.  That makes sense\n#   for this Makefile only under Cygwin.\n# -DGC_WIN32_PTHREADS enables support for Ming32 pthreads.  This cannot be\n#   enabled automatically by GC_THREADS, which would assume Win32 native\n#   threads.\n# -DPTW32_STATIC_LIB causes the static version of the Mingw pthreads library\n#   to be used.  Requires -DGC_WIN32_PTHREADS.\n#   \n# -DALL_INTERIOR_POINTERS allows all pointers to the interior\n#   of objects to be recognized.  (See gc_priv.h for consequences.)\n#   Alternatively, GC_all_interior_pointers can be set at process\n#   initialization time.\n# -DSMALL_CONFIG tries to tune the collector for small heap sizes,\n#   usually causing it to use less space in such situations.\n#   Incremental collection no longer works in this case.\n# -DLARGE_CONFIG tunes the collector for unusually large heaps.\n#   Necessary for heaps larger than about 500 MB on most machines.\n#   Recommended for heaps larger than about 64 MB.\n# -DDONT_ADD_BYTE_AT_END is meaningful only with -DALL_INTERIOR_POINTERS or\n#   GC_all_interior_pointers = 1.  Normally -DALL_INTERIOR_POINTERS\n#   causes all objects to be padded so that pointers just past the end of\n#   an object can be recognized.  This can be expensive.  (The padding\n#   is normally more than one byte due to alignment constraints.)\n#   -DDONT_ADD_BYTE_AT_END disables the padding.\n# -DNO_EXECUTE_PERMISSION may cause some or all of the heap to not\n#   have execute permission, i.e. it may be impossible to execute\n#   code from the heap.  Currently this only affects the incremental\n#   collector on UNIX machines.  It may greatly improve its performance,\n#   since this may avoid some expensive cache synchronization.\n# -DGC_NO_OPERATOR_NEW_ARRAY declares that the C++ compiler does not support\n#   the  new syntax \"operator new[]\" for allocating and deleting arrays.\n#   See gc_cpp.h for details.  No effect on the C part of the collector.\n#   This is defined implicitly in a few environments.  Must also be defined\n#   by clients that use gc_cpp.h.\n# -DREDIRECT_MALLOC=X causes malloc to be defined as alias for X.\n#   Unless the following macros are defined, realloc is also redirected\n#   to GC_realloc, and free is redirected to GC_free.\n#   Calloc and strdup are redefined in terms of the new malloc.  X should\n#   be either GC_malloc or GC_malloc_uncollectable, or\n#   GC_debug_malloc_replacement.  (The latter invokes GC_debug_malloc\n#   with dummy source location information, but still results in\n#   properly remembered call stacks on Linux/X86 and Solaris/SPARC.\n#   It requires that the following two macros also be used.)\n#   The former is occasionally useful for working around leaks in code\n#   you don't want to (or can't) look at.  It may not work for\n#   existing code, but it often does.  Neither works on all platforms,\n#   since some ports use malloc or calloc to obtain system memory.\n#   (Probably works for UNIX, and win32.)  If you build with DBG_HDRS_ALL,\n#   you should only use GC_debug_malloc_replacement as a malloc\n#   replacement.\n# -DREDIRECT_REALLOC=X causes GC_realloc to be redirected to X.\n#   The canonical use is -DREDIRECT_REALLOC=GC_debug_realloc_replacement,\n#   together with -DREDIRECT_MALLOC=GC_debug_malloc_replacement to\n#   generate leak reports with call stacks for both malloc and realloc.\n#   This also requires the following:\n# -DREDIRECT_FREE=X causes free to be redirected to X.  The\n#   canonical use is -DREDIRECT_FREE=GC_debug_free.\n# -DIGNORE_FREE turns calls to free into a noop.  Only useful with\n#   -DREDIRECT_MALLOC.\n# -DNO_DEBUGGING removes GC_dump and the debugging routines it calls.\n#   Reduces code size slightly at the expense of debuggability.\n# -DJAVA_FINALIZATION makes it somewhat safer to finalize objects out of\n#   order by specifying a nonstandard finalization mark procedure  (see\n#   finalize.c).  Objects reachable from finalizable objects will be marked\n#   in a separate postpass, and hence their memory won't be reclaimed.\n#   Not recommended unless you are implementing a language that specifies\n#   these semantics.  Since 5.0, determines only the initial value\n#   of GC_java_finalization variable.\n# -DFINALIZE_ON_DEMAND causes finalizers to be run only in response\n#   to explicit GC_invoke_finalizers() calls.\n#   In 5.0 this became runtime adjustable, and this only determines the\n#   initial value of GC_finalize_on_demand.\n# -DATOMIC_UNCOLLECTABLE includes code for GC_malloc_atomic_uncollectable.\n#   This is useful if either the vendor malloc implementation is poor,\n#   or if REDIRECT_MALLOC is used.\n# -DMARK_BIT_PER_GRANULE requests that a mark bit (or often byte)\n#   be allocated for each allocation granule, as opposed to each object.\n#   This often improves speed, possibly at some cost in space and/or\n#   cache footprint.  Normally it is best to let this decision be\n#   made automatically depending on platform.\n# -DMARK_BIT_PER_OBJ requests that a mark bit be allocated for each\n#   object instead of allocation granule.  The opposiet of\n#   MARK_BIT_PER_GRANULE.\n# -DHBLKSIZE=ddd, where ddd is a power of 2 between 512 and 16384, explicitly\n#   sets the heap block size.  Each heap block is devoted to a single size and\n#   kind of object.  For the incremental collector it makes sense to match\n#   the most likely page size.  Otherwise large values result in more\n#   fragmentation, but generally better performance for large heaps.\n# -DUSE_MMAP use MMAP instead of sbrk to get new memory.\n#   Works for Solaris and Irix.\n# -DUSE_MUNMAP causes memory to be returned to the OS under the right\n#   circumstances.  This currently disables VM-based incremental collection.\n#   This is currently experimental, and works only under some Unix,\n#   Linux and Windows versions.\n# -DMMAP_STACKS (for Solaris threads) Use mmap from /dev/zero rather than\n#   GC_scratch_alloc() to get stack memory.\n# -DPRINT_BLACK_LIST Whenever a black list entry is added, i.e. whenever\n#   the garbage collector detects a value that looks almost, but not quite,\n#   like a pointer, print both the address containing the value, and the\n#   value of the near-bogus-pointer.  Can be used to identifiy regions of\n#   memory that are likely to contribute misidentified pointers.\n# -DKEEP_BACK_PTRS Add code to save back pointers in debugging headers\n#   for objects allocated with the debugging allocator.  If all objects\n#   through GC_MALLOC with GC_DEBUG defined, this allows the client\n#   to determine how particular or randomly chosen objects are reachable\n#   for debugging/profiling purposes.  The gc_backptr.h interface is\n#   implemented only if this is defined.\n# -DGC_ASSERTIONS Enable some internal GC assertion checking.  Currently\n#   this facility is only used in a few places.  It is intended primarily\n#   for debugging of the garbage collector itself, but could also\n# -DDBG_HDRS_ALL Make sure that all objects have debug headers.  Increases\n#   the reliability (from 99.9999% to 100% mod. bugs) of some of the debugging\n#   code (especially KEEP_BACK_PTRS).  Makes -DSHORT_DBG_HDRS possible.\n#   Assumes that all client allocation is done through debugging\n#   allocators.\n# -DSHORT_DBG_HDRS Assume that all objects have debug headers.  Shorten\n#   the headers to minimize object size, at the expense of checking for\n#   writes past the end of an object.  This is intended for environments\n#   in which most client code is written in a \"safe\" language, such as\n#   Scheme or Java.  Assumes that all client allocation is done using\n#   the GC_debug_ functions, or through the macros that expand to these,\n#   or by redirecting malloc to GC_debug_malloc_replacement.\n#   (Also eliminates the field for the requested object size.)\n#   occasionally be useful for debugging of client code.  Slows down the\n#   collector somewhat, but not drastically.\n# -DSAVE_CALL_COUNT=<n> Set the number of call frames saved with objects\n#   allocated through the debugging interface.  Affects the amount of\n#   information generated in leak reports.  Only matters on platforms\n#   on which we can quickly generate call stacks, currently Linux/(X86 & SPARC)\n#   and Solaris/SPARC and platforms that provide execinfo.h.\n#   Default is zero.  On X86, client\n#   code should NOT be compiled with -fomit-frame-pointer.\n# -DSAVE_CALL_NARGS=<n> Set the number of functions arguments to be\n#   saved with each call frame.  Default is zero.  Ignored if we\n#   don't know how to retrieve arguments on the platform.\n# -DCHECKSUMS reports on erroneously clear dirty bits, and unexpectedly\n#   altered stubborn objects, at substantial performance cost.\n#   Use only for debugging of the incremental collector.\n# -DGC_GCJ_SUPPORT includes support for gcj (and possibly other systems\n#   that include a pointer to a type descriptor in each allocated object).\n#   Building this way requires an ANSI C compiler.\n# -DUSE_I686_PREFETCH causes the collector to issue Pentium III style\n#   prefetch instructions.  No effect except on X86 Linux platforms.\n#   Assumes a very recent gcc-compatible compiler and assembler.\n#   (Gas prefetcht0 support was added around May 1999.)\n#   Empirically the code appears to still run correctly on Pentium II\n#   processors, though with no performance benefit.  May not run on other\n#   X86 processors?  In some cases this improves performance by\n#   15% or so.\n# -DUSE_3DNOW_PREFETCH causes the collector to issue AMD 3DNow style\n#   prefetch instructions.  Same restrictions as USE_I686_PREFETCH.\n#   Minimally tested.  Didn't appear to be an obvious win on a K6-2/500.\n# -DUSE_PPC_PREFETCH causes the collector to issue PowerPC style\n#   prefetch instructions.  No effect except on PowerPC OS X platforms.\n#   Performance impact untested.\n# -DGC_USE_LD_WRAP in combination with the old flags listed in README.linux\n#   causes the collector some system and pthread calls in a more transparent\n#   fashion than the usual macro-based approach.  Requires GNU ld, and\n#   currently probably works only with Linux.\n# -DGC_USE_DLOPEN_WRAP causes the collector to redefine malloc and intercepted\n#   pthread routines with their real names, and causes it to use dlopen\n#   and dlsym to refer to the original versions.  This makes it possible to\n#   build an LD_PRELOADable malloc replacement library.\n# -DTHREAD_LOCAL_ALLOC defines GC_malloc(), GC_malloc_atomic()\n#   and GC_gcj_malloc() to use a per-thread set of free-lists.\n#   These then allocate  in a way that usually does not involve\n#   acquisition of a global lock.  Currently supported only on platforms\n#   such as Linux that use pthread_support.c.  Recommended for multiprocessors.\n#   Requires explicit GC_INIT() call, unless REDIRECT_MALLOC is\n#   defined and GC_malloc is used first.\n# -DUSE_COMPILER_TLS causes thread local allocation to use compiler-supported\n#   \"__thread\" thread-local variables.  This is the default in HP/UX.  It\n#   may help performance on recent Linux installations.  (It failed for\n#   me on RedHat 8, but appears to work on RedHat 9.)\n# -DPARALLEL_MARK allows the marker to run in multiple threads.  Recommended\n#   for multiprocessors.  Currently requires Linux on X86 or IA64, though\n#   support for other Posix platforms should be fairly easy to add,\n#   if the thread implementation is otherwise supported.\n# -DNO_GETENV prevents the collector from looking at environment variables.\n#   These may otherwise alter its configuration, or turn off GC altogether.\n#   I don't know of a reason to disable this, except possibly if the\n#   resulting process runs as a privileged user?\n# -DUSE_GLOBAL_ALLOC.  Win32 only.  Use GlobalAlloc instead of\n#   VirtualAlloc to allocate the heap.  May be needed to work around\n#   a Windows NT/2000 issue.  Incompatible with USE_MUNMAP.\n#   See README.win32 for details.\n# -DMAKE_BACK_GRAPH. Enable GC_PRINT_BACK_HEIGHT environment variable.\n#   See README.environment for details.  Experimental. Limited platform\n#   support.  Implies DBG_HDRS_ALL.  All allocation should be done using\n#   the debug interface.\n# -DSTUBBORN_ALLOC allows allocation of \"hard to change\" objects, and thus\n#   makes incremental collection easier.  Was enabled by default until 6.0.\n#   Rarely used, to my knowledge.\n# -DHANDLE_FORK attempts to make GC_malloc() work in a child process fork()ed\n#   from a multithreaded parent.  Currently only supported by pthread_support.c.\n#   (Similar code should work on Solaris or Irix, but it hasn't been tried.)\n# -DTEST_WITH_SYSTEM_MALLOC causes gctest to allocate (and leak) large chunks\n#   of memory with the standard system malloc.  This will cause the root\n#   set and collected heap to grow significantly if malloced memory is\n#   somehow getting traced by the collector.  This has no impact on the\n#   generated library; it only affects the test.\n# -DNO_INCREMENTAL cases the gctest program to not invoke the incremental\n#   collector.  This has no impact on the generated library, only on the\n#   test program.  (This is often useful for debugging failures unrelated\n#   to incremental GC.)\n# -DPOINTER_MASK=0x... causes candidate pointers to be ANDed with the\n#   given mask before being considered.  If either this or the following\n#   macro is defined, it will be assumed that all pointers stored in\n#   the heap need to be processed this way.  Stack and register pointers\n#   will be considered both with and without processing.\n#   These macros are normally needed only to support systems that use\n#   high-order pointer tags. EXPERIMENTAL.\n# -DPOINTER_SHIFT=n causes the collector to left shift candidate pointers\n#   by the indicated amount before trying to interpret them.  Applied\n#   after POINTER_MASK. EXPERIMENTAL.  See also the preceding macro.\n# -DENABLE_TRACE enables the GC_TRACE=addr environment setting to do its\n#   job.  By default this is not supported in order to keep the marker as fast\n#   as possible.\n# -DDARWIN_DONT_PARSE_STACK Causes the Darwin port to discover thread\n#   stack bounds in the same way as other pthread ports, without trying to\n#   walk the frames onthe stack.  This is recommended only as a fallback\n#   for applications that don't support proper stack unwinding.\n# -DUSE_PROC_FOR_LIBRARIES Causes the Linux collector to treat writable\n#   memory mappings (as reported by /proc) as roots, if it doesn't have\n#   otherinformation about them.  It no longer traverses dynamic loader\n#   data structures to find dynamic library static data.  This may be\n#   required for applications that store pointers in mmapped segments without\n#   informaing the collector.  But it typically performs poorly, especially\n#   since it will scan inactive but cached NPTL thread stacks completely.\n#\n\nCXXFLAGS= $(CFLAGS) \nAR= ar\nRANLIB= ranlib\n\n\nOBJS= alloc.o reclaim.o allchblk.o misc.o mach_dep.o os_dep.o mark_rts.o \\\n  headers.o mark.o obj_map.o blacklst.o finalize.o new_hblk.o dbg_mlc.o  \\\n  malloc.o stubborn.o checksums.o pthread_support.o pthread_stop_world.o \\\n  darwin_stop_world.o typd_mlc.o ptr_chck.o mallocx.o gcj_mlc.o specific.o \\\n  gc_dlopen.o backgraph.o win32_threads.o thread_local_alloc.o\n\nCSRCS= reclaim.c allchblk.c misc.c alloc.c mach_dep.c os_dep.c mark_rts.c \\\n  headers.c mark.c obj_map.c pcr_interface.c blacklst.c finalize.c \\\n  new_hblk.c real_malloc.c dyn_load.c dbg_mlc.c malloc.c stubborn.c \\\n  checksums.c pthread_support.c pthread_stop_world.c darwin_stop_world.c \\\n  typd_mlc.c ptr_chck.c mallocx.c gcj_mlc.c specific.c gc_dlopen.c \\\n  backgraph.c win32_threads.c thread_local_alloc.c\n\nCORD_SRCS=  cord/cordbscs.c cord/cordxtra.c cord/cordprnt.c cord/de.c cord/cordtest.c include/cord.h include/ec.h include/private/cord_pos.h cord/de_win.c cord/de_win.h cord/de_cmds.h cord/de_win.ICO cord/de_win.RC\n\nCORD_OBJS=  cord/cordbscs.o cord/cordxtra.o cord/cordprnt.o\n\nSRCS= $(CSRCS) mips_sgi_mach_dep.s rs6000_mach_dep.s alpha_mach_dep.S \\\n    sparc_mach_dep.S include/gc.h include/gc_typed.h include/gc_tiny_fl.h \\\n    include/private/gc_hdrs.h include/private/gc_priv.h \\\n    include/private/gcconfig.h include/private/gc_pmark.h \\\n    include/gc_inline.h include/gc_mark.h \\\n    threadlibs.c if_mach.c if_not_there.c gc_cpp.cc include/gc_cpp.h \\\n    gcname.c include/weakpointer.h include/private/gc_locks.h \\\n    mips_ultrix_mach_dep.s \\\n    include/new_gc_alloc.h include/gc_allocator.h \\\n    include/javaxfc.h sparc_sunos4_mach_dep.s sparc_netbsd_mach_dep.s \\\n    include/gc_backptr.h \\\n    hpux_test_and_clear.s include/gc_gcj.h \\\n    include/private/dbg_mlc.h \\\n    include/private/specific.h \\\n    include/leak_detector.h include/gc_amiga_redirects.h \\\n    include/gc_pthread_redirects.h ia64_save_regs_in_stack.s \\\n    include/gc_config_macros.h include/private/pthread_support.h \\\n    include/private/pthread_stop_world.h include/private/darwin_semaphore.h \\\n    include/private/darwin_stop_world.h include/private/thread_local_alloc.h \\\n    $(CORD_SRCS)\n\nDOC_FILES= README.QUICK doc/README.Mac doc/README.MacOSX doc/README.OS2 \\\n\tdoc/README.amiga doc/README.cords doc/debugging.html \\\n\tdoc/porting.html doc/overview.html \\\n\tdoc/README.dj doc/README.hp doc/README.linux doc/README.rs6000 \\\n\tdoc/README.sgi doc/README.solaris2 doc/README.uts \\\n\tdoc/README.win32 doc/barrett_diagram doc/README \\\n        doc/README.contributors doc/README.changes doc/gc.man \\\n\tdoc/README.environment doc/tree.html doc/gcdescr.html \\\n\tdoc/README.autoconf doc/README.macros doc/README.ews4800 \\\n\tdoc/README.DGUX386 doc/README.arm.cross doc/leak.html \\\n\tdoc/scale.html doc/gcinterface.html doc/README.darwin \\\n\tdoc/simple_example.html doc/README.win64\n\nTESTS= tests/test.c tests/test_cpp.cc tests/trace_test.c \\\n\ttests/leak_test.c tests/thread_leak_test.c tests/middle.c\n\nGNU_BUILD_FILES= configure.ac Makefile.am configure acinclude.m4 \\\n\t\t libtool.m4 install-sh configure.host Makefile.in \\\n\t\t aclocal.m4 config.sub config.guess \\\n\t\t include/include.am doc/doc.am \\\n\t\t ltmain.sh mkinstalldirs depcomp missing \\\n\t\t cord/cord.am tests/tests.am autogen.sh \\\n\t\t bdw-gc.pc.in compile\n\nOTHER_MAKEFILES= OS2_MAKEFILE NT_MAKEFILE NT_THREADS_MAKEFILE gc.mak \\\n\t\t BCC_MAKEFILE EMX_MAKEFILE WCC_MAKEFILE Makefile.dj \\\n\t\t PCR-Makefile SMakefile.amiga Makefile.DLLs \\\n\t\t digimars.mak Makefile.direct NT_STATIC_THREADS_MAKEFILE \\\n\t\t NT_X64_STATIC_THREADS_MAKEFILE configure_atomic_ops.sh\n#\tMakefile and Makefile.direct are copies of each other.\n\nOTHER_FILES= Makefile setjmp_t.c callprocs \\\n           MacProjects.sit.hqx MacOS.c \\\n           Mac_files/datastart.c Mac_files/dataend.c \\\n           Mac_files/MacOS_config.h Mac_files/MacOS_Test_config.h \\\n           add_gc_prefix.c gc_cpp.cpp \\\n\t   version.h AmigaOS.c mscvc_dbg.c include/private/msvc_dbg.h \\\n\t   $(TESTS) $(GNU_BUILD_FILES) $(OTHER_MAKEFILES)\n\nCORD_INCLUDE_FILES= $(srcdir)/include/gc.h $(srcdir)/include/cord.h \\\n\t$(srcdir)/include/ec.h $(srcdir)/include/private/cord_pos.h\n\nUTILS= if_mach if_not_there threadlibs\n\n# Libraries needed for curses applications.  Only needed for de.\nCURSES= -lcurses -ltermlib\n\n# The following is irrelevant on most systems.  But a few\n# versions of make otherwise fork the shell specified in\n# the SHELL environment variable.\nSHELL= /bin/sh\n\nSPECIALCFLAGS = -I$(srcdir)/include -I$(AO_INSTALL_DIR)/include\n# Alternative flags to the C compiler for mach_dep.c.\n# Mach_dep.c often doesn't like optimization, and it's\n# not time-critical anyway.\n# Set SPECIALCFLAGS to -q nodirect_code on Encore.\n\nall: gc.a gctest\n\n# if AO_INSTALL_DIR doesn't exist, we assume that it is pointing to\n# the default location, and we need to build\n$(AO_INSTALL_DIR): \n\tCC=$(CC) $(srcdir)/configure_atomic_ops.sh\n\tcd $(AO_SRC_DIR); make CC=$(CC) install\n\nLEAKFLAGS=$(CFLAGS) -DFIND_LEAK\n\nBSD-pkg-all: bsd-libgc.a bsd-libleak.a\n\nbsd-libgc.a:\n\t$(MAKE) CFLAGS=\"$(CFLAGS)\" clean c++-t\n\tmv gc.a bsd-libgc.a\n\nbsd-libleak.a:\n\t$(MAKE) -f Makefile.direct CFLAGS=\"$(LEAKFLAGS)\" clean c++-nt\n\tmv gc.a bsd-libleak.a\n\nBSD-pkg-install: BSD-pkg-all\n\t${CP} bsd-libgc.a libgc.a\n\t${INSTALL_DATA} libgc.a ${PREFIX}/lib\n\t${INSTALL_DATA} gc.h gc_cpp.h ${PREFIX}/include\n\t${INSTALL_MAN} doc/gc.man ${PREFIX}/man/man3/gc.3\n\npcr: PCR-Makefile include/private/gc_private.h include/private/gc_hdrs.h \\\ninclude/private/gc_locks.h include/gc.h include/private/gcconfig.h \\\nmach_dep.o $(SRCS)\n\t$(MAKE) -f PCR-Makefile depend\n\t$(MAKE) -f PCR-Makefile\n\n$(OBJS) tests/test.o dyn_load.o dyn_load_sunos53.o: \\\n    $(srcdir)/include/private/gc_priv.h \\\n    $(srcdir)/include/private/gc_hdrs.h $(srcdir)/include/private/gc_locks.h \\\n    $(srcdir)/include/gc.h $(srcdir)/include/gc_pthread_redirects.h \\\n    $(srcdir)/include/private/gcconfig.h $(srcdir)/include/gc_typed.h \\\n    $(srcdir)/include/gc_config_macros.h Makefile $(AO_INSTALL_DIR)\n# The dependency on Makefile is needed.  Changing\n# options affects the size of GC_arrays,\n# invalidating all .o files that rely on gc_priv.h\n\nmark.o typd_mlc.o finalize.o ptr_chck.o: $(srcdir)/include/gc_mark.h \\\n\t\t\t\t\t $(srcdir)/include/private/gc_pmark.h\n\nspecific.o pthread_support.o thread_local_alloc.o win32_threads.o: \\\n\t$(srcdir)/include/private/specific.h $(srcdir)/include/gc_inline.h \\\n\t$(srcdir)/include/private/thread_local_alloc.h\n\ndbg_mlc.o gcj_mlc.o: $(srcdir)/include/private/dbg_mlc.h\n\ntests/test.o: tests $(srcdir)/tests/test.c\n\t$(CC) $(CFLAGS) -c $(srcdir)/tests/test.c\n\tmv test.o tests/test.o\n\ntests:\n\tmkdir tests\n\nbase_lib gc.a: $(OBJS) dyn_load.o $(UTILS)\n\techo > base_lib\n\trm -f dont_ar_1\n\tcp $(AO_INSTALL_DIR)/lib/libatomic_ops.a gc.a\n\t./if_mach SPARC SOLARIS touch dont_ar_1\n\t./if_mach SPARC SOLARIS $(AR) rus gc.a $(OBJS) dyn_load.o\n\t./if_mach M68K AMIGA touch dont_ar_1\n\t./if_mach M68K AMIGA $(AR) -vrus gc.a $(OBJS) dyn_load.o\n\t./if_not_there dont_ar_1 $(AR) ru gc.a $(OBJS) dyn_load.o\n\t./if_not_there dont_ar_1 $(RANLIB) gc.a || cat /dev/null\n#\tignore ranlib failure; that usually means it doesn't exist, and isn't needed\n\ncords: $(CORD_OBJS) cord/cordtest $(UTILS)\n\trm -f dont_ar_3\n\t./if_mach SPARC SOLARIS touch dont_ar_3\n\t./if_mach SPARC SOLARIS $(AR) rus gc.a $(CORD_OBJS)\n\t./if_mach M68K AMIGA touch dont_ar_3\n\t./if_mach M68K AMIGA $(AR) -vrus gc.a $(CORD_OBJS)\n\t./if_not_there dont_ar_3 $(AR) ru gc.a $(CORD_OBJS)\n\t./if_not_there dont_ar_3 $(RANLIB) gc.a || cat /dev/null\n\ngc_cpp.o: $(srcdir)/gc_cpp.cc $(srcdir)/include/gc_cpp.h $(srcdir)/include/gc.h Makefile\n\t$(CXX) -c $(CXXFLAGS) $(srcdir)/gc_cpp.cc\n\ntest_cpp: $(srcdir)/tests/test_cpp.cc $(srcdir)/include/gc_cpp.h gc_cpp.o $(srcdir)/include/gc.h \\\nbase_lib $(UTILS)\n\trm -f test_cpp\n\t./if_mach HP_PA HPUX $(CXX) $(CXXFLAGS) -o test_cpp $(srcdir)/tests/test_cpp.cc gc_cpp.o gc.a -ldld `./threadlibs`\n\t./if_not_there test_cpp $(CXX) $(CXXFLAGS) -o test_cpp $(srcdir)/tests/test_cpp.cc gc_cpp.o gc.a `./threadlibs`\n\nc++-t: c++\n\t./test_cpp 1\n\nc++-nt: c++\n\t@echo \"Use ./test_cpp 1 to test the leak library\"\n\nc++: gc_cpp.o $(srcdir)/include/gc_cpp.h test_cpp\n\trm -f dont_ar_4\n\t./if_mach SPARC SOLARIS touch dont_ar_4\n\t./if_mach SPARC SOLARIS $(AR) rus gc.a gc_cpp.o\n\t./if_mach M68K AMIGA touch dont_ar_4\n\t./if_mach M68K AMIGA $(AR) -vrus gc.a gc_cpp.o\n\t./if_not_there dont_ar_4 $(AR) ru gc.a gc_cpp.o\n\t./if_not_there dont_ar_4 $(RANLIB) gc.a || cat /dev/null\n\t./test_cpp 1\n\techo > c++\n\ndyn_load_sunos53.o: dyn_load.c\n\t$(CC) $(CFLAGS) -DSUNOS53_SHARED_LIB -c $(srcdir)/dyn_load.c -o $@\n\n# SunOS5 shared library version of the collector\nsunos5gc.so: $(OBJS) dyn_load_sunos53.o\n\t$(CC) -G -o sunos5gc.so $(OBJS) dyn_load_sunos53.o $(AO_INSTALL_DIR)/lib/libatomic_ops.a -ldl\n\tln sunos5gc.so libgc.so\n\n# Alpha/OSF shared library version of the collector\nlibalphagc.so: $(OBJS)\n\tld -shared -o libalphagc.so $(OBJS) dyn_load.o -lc\n\tln libalphagc.so libgc.so\n\n# IRIX shared library version of the collector\nlibirixgc.so: $(OBJS) dyn_load.o\n\tld -shared $(ABI_FLAG) -o libirixgc.so $(OBJS) dyn_load.o -lc\n\tln libirixgc.so libgc.so\n\n# Linux shared library version of the collector\nliblinuxgc.so: $(OBJS) dyn_load.o\n\tgcc -shared -o liblinuxgc.so $(OBJS) dyn_load.o\n\tln liblinuxgc.so libgc.so\n\n# Build gctest with dynamic library\ndyn_test:\n\t$(CC) $(CFLAGS) -o gctest tests/test.c libgc.so `./threadlibs`\n\t./gctest\n\n# Alternative Linux rule.  This is preferable, but is likely to break the\n# Makefile for some non-linux platforms.\n# LIBOBJS= $(patsubst %.o, %.lo, $(OBJS))\n#\n#.SUFFIXES: .lo $(SUFFIXES)\n#\n#.c.lo:\n#\t$(CC) $(CFLAGS) $(CPPFLAGS) -fPIC -c $< -o $@\n#\n# liblinuxgc.so: $(LIBOBJS) dyn_load.lo\n# \tgcc -shared -Wl,-soname=libgc.so.0 -o libgc.so.0 $(LIBOBJS) dyn_load.lo\n#\ttouch liblinuxgc.so\n\nmach_dep.o: $(srcdir)/mach_dep.c $(srcdir)/mips_sgi_mach_dep.s \\\n\t    $(srcdir)/mips_ultrix_mach_dep.s \\\n            $(srcdir)/rs6000_mach_dep.s \\\n\t    $(srcdir)/sparc_mach_dep.S $(srcdir)/sparc_sunos4_mach_dep.s \\\n\t    $(srcdir)/ia64_save_regs_in_stack.s \\\n\t    $(srcdir)/sparc_netbsd_mach_dep.s $(UTILS)\n\trm -f mach_dep.o\n\t./if_mach SPARC SOLARIS $(CC) -c -o mach_dep2.o $(srcdir)/sparc_mach_dep.S\n\t./if_mach SPARC OPENBSD $(AS) -o mach_dep2.o $(srcdir)/sparc_sunos4_mach_dep.s\n\t./if_mach SPARC NETBSD $(AS) -o mach_dep2.o $(srcdir)/sparc_netbsd_mach_dep.s\n\t./if_mach SPARC \"\" $(CC) -c -o mach_dep1.o $(SPECIALCFLAGS) $(srcdir)/mach_dep.c\n\t./if_mach SPARC \"\" ld -r -o mach_dep.o mach_dep1.o mach_dep2.o\n\t./if_mach IA64 \"\" as $(AS_ABI_FLAG) -o ia64_save_regs_in_stack.o $(srcdir)/ia64_save_regs_in_stack.s\n\t./if_mach IA64 \"\" $(CC) -c -o mach_dep1.o $(SPECIALCFLAGS) $(srcdir)/mach_dep.c\n\t./if_mach IA64 \"\" ld -r -o mach_dep.o mach_dep1.o ia64_save_regs_in_stack.o\n\t./if_not_there mach_dep.o $(CC) -c $(SPECIALCFLAGS) $(srcdir)/mach_dep.c\n\nmark_rts.o: $(srcdir)/mark_rts.c $(UTILS)\n\trm -f mark_rts.o\n\t-./if_mach ALPHA OSF1 $(CC) -c $(CFLAGS) -Wo,-notail $(srcdir)/mark_rts.c\n\t./if_not_there mark_rts.o $(CC) -c $(CFLAGS) $(srcdir)/mark_rts.c\n#\tWork-around for DEC optimizer tail recursion elimination bug.\n#  The ALPHA-specific line should be removed if gcc is used.\n\nalloc.o: version.h\n\ncord:\n\tmkdir cord\n\ncord/cordbscs.o: cord $(srcdir)/cord/cordbscs.c $(CORD_INCLUDE_FILES)\n\t$(CC) $(CFLAGS) -c -I$(srcdir) $(srcdir)/cord/cordbscs.c\n\tmv cordbscs.o cord/cordbscs.o\n#  not all compilers understand -o filename\n\ncord/cordxtra.o: cord $(srcdir)/cord/cordxtra.c $(CORD_INCLUDE_FILES)\n\t$(CC) $(CFLAGS) -c -I$(srcdir) $(srcdir)/cord/cordxtra.c\n\tmv cordxtra.o cord/cordxtra.o\n\ncord/cordprnt.o: cord $(srcdir)/cord/cordprnt.c $(CORD_INCLUDE_FILES)\n\t$(CC) $(CFLAGS) -c -I$(srcdir) $(srcdir)/cord/cordprnt.c\n\tmv cordprnt.o cord/cordprnt.o\n\ncord/cordtest: $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a $(UTILS)\n\trm -f cord/cordtest\n\t./if_mach SPARC DRSNX $(CC) $(CFLAGS) -o cord/cordtest $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a -lucb\n\t./if_mach HP_PA HPUX $(CC) $(CFLAGS) -o cord/cordtest $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a -ldld `./threadlibs`\n\t./if_mach M68K AMIGA $(CC) $(CFLAGS) -UGC_AMIGA_MAKINGLIB -o cord/cordtest $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a `./threadlibs`\n\t./if_not_there cord/cordtest $(CC) $(CFLAGS) -o cord/cordtest $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a `./threadlibs`\n\ncord/de: $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(UTILS)\n\trm -f cord/de\n\t./if_mach SPARC DRSNX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(CURSES) -lucb `./threadlibs`\n\t./if_mach HP_PA HPUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(CURSES) -ldld `./threadlibs`\n\t./if_mach POWERPC AIX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses\n\t./if_mach POWERPC DARWIN $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a\n\t./if_mach I386 LINUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses `./threadlibs`\n\t./if_mach ALPHA LINUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses `./threadlibs`\n\t./if_mach IA64 LINUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses `./threadlibs`\n\t./if_mach M68K AMIGA $(CC) $(CFLAGS) -UGC_AMIGA_MAKINGLIB -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses\n\t./if_not_there cord/de $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(CURSES) `./threadlibs`\n\nif_mach: $(srcdir)/if_mach.c $(srcdir)/include/private/gcconfig.h\n\t$(HOSTCC) $(HOSTCFLAGS) -o if_mach $(srcdir)/if_mach.c\n\nthreadlibs: $(srcdir)/threadlibs.c $(srcdir)/include/private/gcconfig.h Makefile\n\t$(HOSTCC) $(HOSTCFLAGS) -o threadlibs $(srcdir)/threadlibs.c\n\nif_not_there: $(srcdir)/if_not_there.c\n\t$(HOSTCC) $(HOSTCFLAGS) -o if_not_there $(srcdir)/if_not_there.c\n\nclean: \n\trm -f gc.a *.o *.exe tests/*.o gctest gctest_dyn_link test_cpp \\\n\t      setjmp_test  mon.out gmon.out a.out core if_not_there if_mach \\\n\t      threadlibs $(CORD_OBJS) cord/cordtest cord/de \n\t-rm -f *~\n\ngctest: tests/test.o gc.a $(UTILS)\n\trm -f gctest\n\t./if_mach SPARC DRSNX $(CC) $(CFLAGS) -o gctest  tests/test.o gc.a -lucb\n\t./if_mach HP_PA HPUX $(CC) $(CFLAGS) -o gctest  tests/test.o gc.a -ldld `./threadlibs`\n\t./if_mach M68K AMIGA $(CC) $(CFLAGS) -UGC_AMIGA_MAKINGLIB -o gctest  tests/test.o gc.a `./threadlibs`\n\t./if_not_there gctest $(CC) $(CFLAGS) -o gctest tests/test.o gc.a `./threadlibs`\n\n# If an optimized setjmp_test generates a segmentation fault,\n# odds are your compiler is broken.  Gctest may still work.\n# Try compiling setjmp_t.c unoptimized.\nsetjmp_test: $(srcdir)/setjmp_t.c $(srcdir)/include/gc.h $(UTILS) $(AO_INSTALL_DIR)\n\t$(CC) $(CFLAGS) -o setjmp_test $(srcdir)/setjmp_t.c\n\ntest:  KandRtest cord/cordtest\n\tcord/cordtest\n\n# Those tests that work even with a K&R C compiler:\nKandRtest: setjmp_test gctest\n\t./setjmp_test\n\t./gctest\n\nadd_gc_prefix: $(srcdir)/add_gc_prefix.c $(srcdir)/version.h\n\t$(CC) -o add_gc_prefix $(srcdir)/add_gc_prefix.c\n\ngcname: $(srcdir)/gcname.c $(srcdir)/version.h\n\t$(CC) -o gcname $(srcdir)/gcname.c\n\n#We assume this is being done from source directory.\ndist gc.tar: $(SRCS) $(DOC_FILES) $(OTHER_FILES) add_gc_prefix gcname\n\tcp Makefile Makefile.old\n\tcp Makefile.direct Makefile\n\tCC=$(CC) ./configure_atomic_ops.sh\n\tcd $(AO_SRC_DIR); make dist\n\tif test $(srcdir)/libatomic_ops-$(AO_VERSION) = $(AO_SRC_DIR); \\\n\tthen \\\n\t  mv $(AO_SRC_DIR) $(AO_SRC_DIR).bak ; \\\n\t  tar xvfz $(AO_SRC_DIR).bak/libatomic_ops-$(AO_VERSION).tar.gz ; \\\n\telse \\\n\t  tar xvfz $(AO_SRC_DIR)/libatomic_ops-$(AO_VERSION).tar.gz ; \\\n\tfi\n\trm -f `./gcname`\n\tln -s . `./gcname`\n\t./add_gc_prefix $(SRCS) $(DOC_FILES) $(OTHER_FILES) libatomic_ops-$(AO_VERSION) > /tmp/gc.tar-files\n\ttar cvfh gc.tar `cat /tmp/gc.tar-files`\n\tcp gc.tar `./gcname`.tar\n\tgzip `./gcname`.tar\n\trm `./gcname`\n\ngc.tar.Z: gc.tar\n\tcompress gc.tar\n\ngc.tar.gz: gc.tar\n\tgzip gc.tar\n\nlint: $(CSRCS) tests/test.c\n\tlint -DLINT $(CSRCS) tests/test.c | egrep -v \"possible pointer alignment problem|abort|exit|sbrk|mprotect|syscall|change in ANSI|improper alignment\"\n\n# BTL: added to test shared library version of collector.\n# Currently works only under SunOS5.  Requires GC_INIT call from statically\n# loaded client code.\nABSDIR = `pwd`\ngctest_dyn_link: tests/test.o libgc.so\n\t$(CC) -L$(ABSDIR) -R$(ABSDIR) -o gctest_dyn_link tests/test.o -lgc -ldl -lthread\n\ngctest_irix_dyn_link: tests/test.o libirixgc.so\n\t$(CC) -L$(ABSDIR) -o gctest_irix_dyn_link tests/test.o -lirixgc\n\n# The following appear to be dead, especially since libgc_globals.h\n# is apparently lost.\ntest_dll.o: tests/test.c libgc_globals.h\n\t$(CC) $(CFLAGS) -DGC_USE_DLL -c tests/test.c -o test_dll.o\n\ntest_dll: test_dll.o libgc_dll.a libgc.dll\n\t$(CC) test_dll.o -L$(ABSDIR) -lgc_dll -o test_dll\n\nSYM_PREFIX-libgc=GC\n\n# Uncomment the following line to build a GNU win32 DLL\n# include Makefile.DLLs\n\nreserved_namespace: $(SRCS)\n\tfor file in $(SRCS) tests/test.c tests/test_cpp.cc; do \\\n\t\tsed s/GC_/_GC_/g < $$file > tmp; \\\n\t\tcp tmp $$file; \\\n\t\tdone\n\nuser_namespace: $(SRCS)\n\tfor file in $(SRCS) tests/test.c tests/test_cpp.cc; do \\\n\t\tsed s/_GC_/GC_/g < $$file > tmp; \\\n\t\tcp tmp $$file; \\\n\t\tdone\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/threadlibs.c": "# include \"gc_config_macros.h\"\n# include \"private/gcconfig.h\"\n# include <stdio.h>\n\nint main()\n{\n#   if defined(GC_USE_LD_WRAP)\n\tprintf(\"-Wl,--wrap -Wl,dlopen \"\n\t       \"-Wl,--wrap -Wl,pthread_create -Wl,--wrap -Wl,pthread_join \"\n\t       \"-Wl,--wrap -Wl,pthread_detach \"\n\t       \"-Wl,--wrap -Wl,pthread_sigmask -Wl,--wrap -Wl,sleep\\n\");\n#   endif\n#   if defined(GC_LINUX_THREADS) || defined(GC_IRIX_THREADS) \\\n\t|| defined(GC_DARWIN_THREADS) || defined(GC_AIX_THREADS) \\\n\t|| defined(GC_GNU_THREADS)\n#       ifdef GC_USE_DLOPEN_WRAP\n\t  printf(\"-ldl \");\n#\tendif\n        printf(\"-lpthread\\n\");\n#   endif\n#   if defined(GC_FREEBSD_THREADS)\n#       ifdef GC_USE_DLOPEN_WRAP\n\t  printf(\"-ldl \");\n#\tendif\n#       if (__FREEBSD_version >= 500000)\n          printf(\"-lpthread\\n\");\n#       else\n          printf(\"-pthread\\n\");\n#       endif\n#   endif\n#   if defined(GC_NETBSD_THREADS)\n\t  printf(\"-lpthread -lrt\\n\");\n#   endif\n\n#   if defined(GC_HPUX_THREADS) || defined(GC_OSF1_THREADS)\n\tprintf(\"-lpthread -lrt\\n\");\n#   endif\n#   if defined(GC_SOLARIS_THREADS)\n        printf(\"-lthread -lposix4\\n\");\n\t\t/* Is this right for recent versions? */\n#   endif\n#   if defined(GC_WIN32_THREADS) && defined(CYGWIN32)\n        printf(\"-lpthread\\n\");\n#   endif\n#   if defined(GC_WIN32_PTHREADS)\n#      ifdef PTW32_STATIC_LIB\n\t /* assume suffix s for static version of the win32 pthread library */\n         printf(\"-lpthreadGC2s -lws2_32\\n\");\n#      else\n         printf(\"-lpthreadGC2\\n\");\n#      endif\n#   endif\n#   if defined(GC_OSF1_THREADS)\n\tprintf(\"-pthread -lrt\"); /* DOB: must be -pthread, not -lpthread */\n#   endif\n    /* You need GCC 3.0.3 to build this one!           */  \n    /* DG/UX native gcc doesnt know what \"-pthread\" is */\n#   if defined(GC_DGUX386_THREADS)\n        printf(\"-ldl -pthread\\n\");\n#   endif\n    return 0;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/ltmain.sh": "# ltmain.sh - Provide generalized library-building support services.\n# NOTE: Changing this file will not affect anything until you rerun configure.\n#\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n# Free Software Foundation, Inc.\n# Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\nbasename=\"s,^.*/,,g\"\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n# The name of this program:\nprogname=`echo \"$progpath\" | $SED $basename`\nmodename=\"$progname\"\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\n\nPROGRAM=ltmain.sh\nPACKAGE=libtool\nVERSION=1.5.22\nTIMESTAMP=\" (1.1220.2.365 2005/12/18 22:14:06)\"\n\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes.\nif test -n \"${ZSH_VERSION+set}\" ; then\n  setopt NO_GLOB_SUBST\nfi\n\n# Check that we have a working $echo.\nif test \"X$1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X$1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`($echo '\\t') 2>/dev/null`\" = 'X\\t'; then\n  # Yippee, $echo works!\n  :\nelse\n  # Restart under the correct shell, and then maybe $echo will work.\n  exec $SHELL \"$progpath\" --no-reexec ${1+\"$@\"}\nfi\n\nif test \"X$1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<EOF\n$*\nEOF\n  exit $EXIT_SUCCESS\nfi\n\ndefault_mode=\nhelp=\"Try \\`$progname --help' for more information.\"\nmagic=\"%%%MAGIC variable%%%\"\nmkdir=\"mkdir\"\nmv=\"mv -f\"\nrm=\"rm -f\"\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([\\\\`\\\\\"$\\\\\\\\]\\)/\\\\\\1/g'\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  SP2NL='tr \\040 \\012'\n  NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  SP2NL='tr \\100 \\n'\n  NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n\n# NLS nuisances.\n# Only set LANG and LC_ALL to C if already set.\n# These must not be set unconditionally because not all systems understand\n# e.g. LANG=C (notably SCO).\n# We save the old values to restore during execute mode.\nif test \"${LC_ALL+set}\" = set; then\n  save_LC_ALL=\"$LC_ALL\"; LC_ALL=C; export LC_ALL\nfi\nif test \"${LANG+set}\" = set; then\n  save_LANG=\"$LANG\"; LANG=C; export LANG\nfi\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\nif test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n  $echo \"$modename: not configured to build any kind of library\" 1>&2\n  $echo \"Fatal configuration error.  See the $PACKAGE docs for more information.\" 1>&2\n  exit $EXIT_FAILURE\nfi\n\n# Global variables.\nmode=$default_mode\nnonopt=\nprev=\nprevopt=\nrun=\nshow=\"$echo\"\nshow_help=\nexecute_dlfiles=\nduplicate_deps=no\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\n\n#####################################\n# Shell function definitions:\n# This seems to be the best place for them\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n\t# Failing that, at least try and use $RANDOM to avoid a race\n\tmy_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n\tsave_mktempdir_umask=`umask`\n\tumask 0077\n\t$mkdir \"$my_tmpdir\"\n\tumask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || {\n        $echo \"cannot create temporary directory \\`$my_tmpdir'\" 1>&2\n\texit $EXIT_FAILURE\n      }\n    fi\n\n    $echo \"X$my_tmpdir\" | $Xsed\n}\n\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\nfunc_win32_libid ()\n{\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null | \\\n      $EGREP -e 'file format pe-i386(.*architecture: i386)?' >/dev/null ; then\n      win32_nmres=`eval $NM -f posix -A $1 | \\\n\t$SED -n -e '1,100{/ I /{s,.*,import,;p;q;};}'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $echo $win32_libid_type\n}\n\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tcase $arg in\n\t  *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t  arg=\"\\\"$arg\\\"\"\n\t  ;;\n\tesac\n\tCC_quoted=\"$CC_quoted $arg\"\n      done\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" `$echo $CC` \"* | \"`$echo $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$echo $CC_quoted` \"* | \"`$echo $CC_quoted` \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if grep \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t    # Double-quote args containing other shell metacharacters.\n\t    case $arg in\n\t      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t      arg=\"\\\"$arg\\\"\"\n\t      ;;\n\t    esac\n\t    CC_quoted=\"$CC_quoted $arg\"\n\t  done\n\t    case \"$@ \" in\n\t      \" $CC \"* | \"$CC \"* | \" `$echo $CC` \"* | \"`$echo $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$echo $CC_quoted` \"* | \"`$echo $CC_quoted` \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  $echo \"$modename: unable to infer tagged configuration\"\n\t  $echo \"$modename: specify a tag with \\`--tag'\" 1>&2\n\t  exit $EXIT_FAILURE\n#        else\n#          $echo \"$modename: using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n\n    $show \"(cd $f_ex_an_ar_dir && $AR x $f_ex_an_ar_oldlib)\"\n    $run eval \"(cd \\$f_ex_an_ar_dir && $AR x \\$f_ex_an_ar_oldlib)\" || exit $?\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      $echo \"$modename: ERROR: object name conflicts: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n}\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n    my_status=\"\"\n\n    $show \"${rm}r $my_gentop\"\n    $run ${rm}r \"$my_gentop\"\n    $show \"$mkdir $my_gentop\"\n    $run $mkdir \"$my_gentop\"\n    my_status=$?\n    if test \"$my_status\" -ne 0 && test ! -d \"$my_gentop\"; then\n      exit $my_status\n    fi\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      my_xlib=`$echo \"X$my_xlib\" | $Xsed -e 's%^.*/%%'`\n      my_xdir=\"$my_gentop/$my_xlib\"\n\n      $show \"${rm}r $my_xdir\"\n      $run ${rm}r \"$my_xdir\"\n      $show \"$mkdir $my_xdir\"\n      $run $mkdir \"$my_xdir\"\n      exit_status=$?\n      if test \"$exit_status\" -ne 0 && test ! -d \"$my_xdir\"; then\n\texit $exit_status\n      fi\n      case $host in\n      *-darwin*)\n\t$show \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\tif test -z \"$run\"; then\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`$echo \"X$darwin_archive\" | $Xsed -e 's%^.*/%%'`\n\t  darwin_arches=`lipo -info \"$darwin_archive\" 2>/dev/null | $EGREP Architectures 2>/dev/null`\n\t  if test -n \"$darwin_arches\"; then \n\t    darwin_arches=`echo \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    $show \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      mkdir -p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      lipo -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $rm \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n      ## Okay now we have a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print| xargs basename | sort -u | $NL2SP`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n\t      lipo -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    ${rm}r unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd \"$darwin_orig_dir\"\n \t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\tfi # $run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n        ;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n    done\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n# End of Shell function definitions\n#####################################\n\n# Darwin sucks\neval std_shrext=\\\"$shrext_cmds\\\"\n\ndisable_libs=no\n\n# Parse our command line options once, thoroughly.\nwhile test \"$#\" -gt 0\ndo\n  arg=\"$1\"\n  shift\n\n  case $arg in\n  -*=*) optarg=`$echo \"X$arg\" | $Xsed -e 's/[-_a-zA-Z0-9]*=//'` ;;\n  *) optarg= ;;\n  esac\n\n  # If the previous option needs an argument, assign it.\n  if test -n \"$prev\"; then\n    case $prev in\n    execute_dlfiles)\n      execute_dlfiles=\"$execute_dlfiles $arg\"\n      ;;\n    tag)\n      tagname=\"$arg\"\n      preserve_args=\"${preserve_args}=$arg\"\n\n      # Check whether tagname contains only valid characters\n      case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n\t$echo \"$progname: invalid tag name: $tagname\" 1>&2\n\texit $EXIT_FAILURE\n\t;;\n      esac\n\n      case $tagname in\n      CC)\n\t# Don't test for the \"default\" C tag, as we know, it's there, but\n\t# not specially marked.\n\t;;\n      *)\n\tif grep \"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$\" < \"$progpath\" > /dev/null; then\n\t  taglist=\"$taglist $tagname\"\n\t  # Evaluate the configuration.\n\t  eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$tagname'$/,/^# ### END LIBTOOL TAG CONFIG: '$tagname'$/p' < $progpath`\"\n\telse\n\t  $echo \"$progname: ignoring unknown tag $tagname\" 1>&2\n\tfi\n\t;;\n      esac\n      ;;\n    *)\n      eval \"$prev=\\$arg\"\n      ;;\n    esac\n\n    prev=\n    prevopt=\n    continue\n  fi\n\n  # Have we seen a non-optional argument yet?\n  case $arg in\n  --help)\n    show_help=yes\n    ;;\n\n  --version)\n    $echo \"$PROGRAM (GNU $PACKAGE) $VERSION$TIMESTAMP\"\n    $echo\n    $echo \"Copyright (C) 2005  Free Software Foundation, Inc.\"\n    $echo \"This is free software; see the source for copying conditions.  There is NO\"\n    $echo \"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n    exit $?\n    ;;\n\n  --config)\n    ${SED} -e '1,/^# ### BEGIN LIBTOOL CONFIG/d' -e '/^# ### END LIBTOOL CONFIG/,$d' $progpath\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      ${SED} -n -e \"/^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$/,/^# ### END LIBTOOL TAG CONFIG: $tagname$/p\" < \"$progpath\"\n    done\n    exit $?\n    ;;\n\n  --debug)\n    $echo \"$progname: enabling shell trace mode\"\n    set -x\n    preserve_args=\"$preserve_args $arg\"\n    ;;\n\n  --dry-run | -n)\n    run=:\n    ;;\n\n  --features)\n    $echo \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      $echo \"enable shared libraries\"\n    else\n      $echo \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      $echo \"enable static libraries\"\n    else\n      $echo \"disable static libraries\"\n    fi\n    exit $?\n    ;;\n\n  --finish) mode=\"finish\" ;;\n\n  --mode) prevopt=\"--mode\" prev=mode ;;\n  --mode=*) mode=\"$optarg\" ;;\n\n  --preserve-dup-deps) duplicate_deps=\"yes\" ;;\n\n  --quiet | --silent)\n    show=:\n    preserve_args=\"$preserve_args $arg\"\n    ;;\n\n  --tag)\n    prevopt=\"--tag\"\n    prev=tag\n    preserve_args=\"$preserve_args --tag\"\n    ;;\n  --tag=*)\n    set tag \"$optarg\" ${1+\"$@\"}\n    shift\n    prev=tag\n    preserve_args=\"$preserve_args --tag\"\n    ;;\n\n  -dlopen)\n    prevopt=\"-dlopen\"\n    prev=execute_dlfiles\n    ;;\n\n  -*)\n    $echo \"$modename: unrecognized option \\`$arg'\" 1>&2\n    $echo \"$help\" 1>&2\n    exit $EXIT_FAILURE\n    ;;\n\n  *)\n    nonopt=\"$arg\"\n    break\n    ;;\n  esac\ndone\n\nif test -n \"$prevopt\"; then\n  $echo \"$modename: option \\`$prevopt' requires an argument\" 1>&2\n  $echo \"$help\" 1>&2\n  exit $EXIT_FAILURE\nfi\n\ncase $disable_libs in\nno) \n  ;;\nshared)\n  build_libtool_libs=no\n  build_old_libs=yes\n  ;;\nstatic)\n  build_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n  ;;\nesac\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\nif test -z \"$show_help\"; then\n\n  # Infer the operation mode.\n  if test -z \"$mode\"; then\n    $echo \"*** Warning: inferring the mode of operation is deprecated.\" 1>&2\n    $echo \"*** Future versions of Libtool will require --mode=MODE be specified.\" 1>&2\n    case $nonopt in\n    *cc | cc* | *++ | gcc* | *-gcc* | g++* | xlc*)\n      mode=link\n      for arg\n      do\n\tcase $arg in\n\t-c)\n\t   mode=compile\n\t   break\n\t   ;;\n\tesac\n      done\n      ;;\n    *db | *dbx | *strace | *truss)\n      mode=execute\n      ;;\n    *install*|cp|mv)\n      mode=install\n      ;;\n    *rm)\n      mode=uninstall\n      ;;\n    *)\n      # If we have no mode, but dlfiles were specified, then do execute mode.\n      test -n \"$execute_dlfiles\" && mode=execute\n\n      # Just use the default operation mode.\n      if test -z \"$mode\"; then\n\tif test -n \"$nonopt\"; then\n\t  $echo \"$modename: warning: cannot infer operation mode from \\`$nonopt'\" 1>&2\n\telse\n\t  $echo \"$modename: warning: cannot infer operation mode without MODE-ARGS\" 1>&2\n\tfi\n      fi\n      ;;\n    esac\n  fi\n\n  # Only execute mode is allowed to have -dlopen flags.\n  if test -n \"$execute_dlfiles\" && test \"$mode\" != execute; then\n    $echo \"$modename: unrecognized option \\`-dlopen'\" 1>&2\n    $echo \"$help\" 1>&2\n    exit $EXIT_FAILURE\n  fi\n\n  # Change the help message to a mode-specific one.\n  generic_help=\"$help\"\n  help=\"Try \\`$modename --help --mode=$mode' for more information.\"\n\n  # These modes are in order of execution frequency so that they run quickly.\n  case $mode in\n  # libtool compile mode\n  compile)\n    modename=\"$modename: compile\"\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  if test -n \"$libobj\" ; then\n\t    $echo \"$modename: you cannot specify \\`-o' more than once\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-static | -prefer-pic | -prefer-non-pic)\n\t  later=\"$later $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  args=`$echo \"X$arg\" | $Xsed -e \"s/^-Wc,//\"`\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n \t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\n\t    # Double-quote args containing other shell metacharacters.\n\t    # Many Bourne shells cannot handle close brackets correctly\n\t    # in scan sets, so we specify it separately.\n\t    case $arg in\n\t      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t      arg=\"\\\"$arg\\\"\"\n\t      ;;\n\t    esac\n\t    lastarg=\"$lastarg $arg\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  lastarg=`$echo \"X$lastarg\" | $Xsed -e \"s/^ //\"`\n\n\t  # Add the arguments to base_compile.\n\t  base_compile=\"$base_compile $lastarg\"\n\t  continue\n\t  ;;\n\n\t* )\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      lastarg=`$echo \"X$lastarg\" | $Xsed -e \"$sed_quote_subst\"`\n\n      case $lastarg in\n      # Double-quote args containing other shell metacharacters.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, and some SunOS ksh mistreat backslash-escaping\n      # in scan sets (worked around with variable expansion),\n      # and furthermore cannot handle '|' '&' '(' ')' in scan sets \n      # at all, so we specify them separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\tlastarg=\"\\\"$lastarg\\\"\"\n\t;;\n      esac\n\n      base_compile=\"$base_compile $lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      $echo \"$modename: you must specify an argument for -Xcompile\"\n      exit $EXIT_FAILURE\n      ;;\n    target)\n      $echo \"$modename: you must specify a target with \\`-o'\" 1>&2\n      exit $EXIT_FAILURE\n      ;;\n    *)\n      # Get the name of the library object.\n      [ -z \"$libobj\" ] && libobj=`$echo \"X$srcfile\" | $Xsed -e 's%^.*/%%'`\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    xform='[cCFSifmso]'\n    case $libobj in\n    *.ada) xform=ada ;;\n    *.adb) xform=adb ;;\n    *.ads) xform=ads ;;\n    *.asm) xform=asm ;;\n    *.c++) xform=c++ ;;\n    *.cc) xform=cc ;;\n    *.ii) xform=ii ;;\n    *.class) xform=class ;;\n    *.cpp) xform=cpp ;;\n    *.cxx) xform=cxx ;;\n    *.f90) xform=f90 ;;\n    *.for) xform=for ;;\n    *.java) xform=java ;;\n    esac\n\n    libobj=`$echo \"X$libobj\" | $Xsed -e \"s/\\.$xform$/.lo/\"`\n\n    case $libobj in\n    *.lo) obj=`$echo \"X$libobj\" | $Xsed -e \"$lo2o\"` ;;\n    *)\n      $echo \"$modename: cannot determine name of library object from \\`$libobj'\" 1>&2\n      exit $EXIT_FAILURE\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -static)\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    qlibobj=`$echo \"X$libobj\" | $Xsed -e \"$sed_quote_subst\"`\n    case $qlibobj in\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\tqlibobj=\"\\\"$qlibobj\\\"\" ;;\n    esac\n    test \"X$libobj\" != \"X$qlibobj\" \\\n\t&& $echo \"X$libobj\" | grep '[]~#^*{};<>?\"'\"'\"' \t&()|`$[]' \\\n\t&& $echo \"$modename: libobj name \\`$libobj' may not contain shell special characters.\"\n    objname=`$echo \"X$obj\" | $Xsed -e 's%^.*/%%'`\n    xdir=`$echo \"X$obj\" | $Xsed -e 's%/[^/]*$%%'`\n    if test \"X$xdir\" = \"X$obj\"; then\n      xdir=\n    else\n      xdir=$xdir/\n    fi\n    lobj=${xdir}$objdir/$objname\n\n    if test -z \"$base_compile\"; then\n      $echo \"$modename: you must specify a compilation command\" 1>&2\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    $run $rm $removelist\n    trap \"$run $rm $removelist; exit $EXIT_FAILURE\" 1 2 15\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$echo \"X$srcfile\" | $Xsed -e 's%^.*/%%' -e 's%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n      removelist=\"$removelist $output_obj $lockfile\"\n      trap \"$run $rm $removelist; exit $EXIT_FAILURE\" 1 2 15\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $run ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\t$show \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$echo \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n      $echo \"$srcfile\" > \"$lockfile\"\n    fi\n\n    if test -n \"$fix_srcfile_path\"; then\n      eval srcfile=\\\"$fix_srcfile_path\\\"\n    fi\n    qsrcfile=`$echo \"X$srcfile\" | $Xsed -e \"$sed_quote_subst\"`\n    case $qsrcfile in\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n      qsrcfile=\"\\\"$qsrcfile\\\"\" ;;\n    esac\n\n    $run $rm \"$libobj\" \"${libobj}T\"\n\n    # Create a libtool object file (analogous to a \".la\" file),\n    # but don't create it if we're doing a dry run.\n    test -z \"$run\" && cat > ${libobj}T <<EOF\n# $libobj - a libtool object file\n# Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\nEOF\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      if test ! -d \"${xdir}$objdir\"; then\n\t$show \"$mkdir ${xdir}$objdir\"\n\t$run $mkdir ${xdir}$objdir\n\texit_status=$?\n\tif test \"$exit_status\" -ne 0 && test ! -d \"${xdir}$objdir\"; then\n\t  exit $exit_status\n\tfi\n      fi\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tcommand=\"$command -o $lobj\"\n      fi\n\n      $run $rm \"$lobj\" \"$output_obj\"\n\n      $show \"$command\"\n      if $run eval \"$command\"; then :\n      else\n\ttest -n \"$output_obj\" && $run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$echo \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\t$show \"$mv $output_obj $lobj\"\n\tif $run $mv $output_obj $lobj; then :\n\telse\n\t  error=$?\n\t  $run $rm $removelist\n\t  exit $error\n\tfi\n      fi\n\n      # Append the name of the PIC object to the libtool object file.\n      test -z \"$run\" && cat >> ${libobj}T <<EOF\npic_object='$objdir/$objname'\n\nEOF\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n        suppress_output=' >/dev/null 2>&1'\n      fi\n    else\n      # No PIC object so indicate it doesn't exist in the libtool\n      # object file.\n      test -z \"$run\" && cat >> ${libobj}T <<EOF\npic_object=none\n\nEOF\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tcommand=\"$command -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      command=\"$command$suppress_output\"\n      $run $rm \"$obj\" \"$output_obj\"\n      $show \"$command\"\n      if $run eval \"$command\"; then :\n      else\n\t$run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$echo \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\t$show \"$mv $output_obj $obj\"\n\tif $run $mv $output_obj $obj; then :\n\telse\n\t  error=$?\n\t  $run $rm $removelist\n\t  exit $error\n\tfi\n      fi\n\n      # Append the name of the non-PIC object the libtool object file.\n      # Only append if the libtool object file exists.\n      test -z \"$run\" && cat >> ${libobj}T <<EOF\n# Name of the non-PIC object.\nnon_pic_object='$objname'\n\nEOF\n    else\n      # Append the name of the non-PIC object the libtool object file.\n      # Only append if the libtool object file exists.\n      test -z \"$run\" && cat >> ${libobj}T <<EOF\n# Name of the non-PIC object.\nnon_pic_object=none\n\nEOF\n    fi\n\n    $run $mv \"${libobj}T\" \"${libobj}\"\n\n    # Unlock the critical section if it was locked\n    if test \"$need_locks\" != no; then\n      $run $rm \"$lockfile\"\n    fi\n\n    exit $EXIT_SUCCESS\n    ;;\n\n  # libtool link mode\n  link | relink)\n    modename=\"$modename: link\"\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=\"$nonopt\"\n    base_compile=\"$nonopt $@\"\n    compile_command=\"$nonopt\"\n    finalize_command=\"$nonopt\"\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n\n    avoid_version=no\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    notinst_path= # paths that contain not-installed libtool libraries\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -all-static | -static)\n\tif test \"X$arg\" = \"X-all-static\"; then\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    $echo \"$modename: warning: complete static linking is impossible in this configuration\" 1>&2\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\telse\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\tfi\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      case $arg in\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\tqarg=\\\"`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\\\" ### testsuite: skip nested quoting test\n\t;;\n      *) qarg=$arg ;;\n      esac\n      libtool_args=\"$libtool_args $qarg\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  compile_command=\"$compile_command @OUTPUT@\"\n\t  finalize_command=\"$finalize_command @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    compile_command=\"$compile_command @SYMFILE@\"\n\t    finalize_command=\"$finalize_command @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      dlfiles=\"$dlfiles $arg\"\n\t    else\n\t      dlprefiles=\"$dlprefiles $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  if test ! -f \"$arg\"; then\n\t    $echo \"$modename: symbol file \\`$arg' does not exist\"\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat $save_arg`\n\t    do\n#\t      moreargs=\"$moreargs $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if (${SED} -e '2q' $arg | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\t# If there is no directory component, then add one.\n\t\tcase $arg in\n\t\t*/* | *\\\\*) . $arg ;;\n\t\t*) . ./$arg ;;\n\t\tesac\n\n\t\tif test -z \"$pic_object\" || \\\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none && \\\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  $echo \"$modename: cannot find name of object for \\`$arg'\" 1>&2\n\t\t  exit $EXIT_FAILURE\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\txdir=`$echo \"X$arg\" | $Xsed -e 's%/[^/]*$%%'`\n\t\tif test \"X$xdir\" = \"X$arg\"; then\n\t\t  xdir=\n\t\telse\n\t\t  xdir=\"$xdir/\"\n\t\tfi\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      dlfiles=\"$dlfiles $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    dlprefiles=\"$dlprefiles $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  libobjs=\"$libobjs $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif test -z \"$run\"; then\n\t\t  $echo \"$modename: \\`$arg' is not a valid libtool object\" 1>&2\n\t\t  exit $EXIT_FAILURE\n\t\telse\n\t\t  # Dry-run case.\n\n\t\t  # Extract subdirectory from the argument.\n\t\t  xdir=`$echo \"X$arg\" | $Xsed -e 's%/[^/]*$%%'`\n\t\t  if test \"X$xdir\" = \"X$arg\"; then\n\t\t    xdir=\n\t\t  else\n\t\t    xdir=\"$xdir/\"\n\t\t  fi\n\n\t\t  pic_object=`$echo \"X${xdir}${objdir}/${arg}\" | $Xsed -e \"$lo2o\"`\n\t\t  non_pic_object=`$echo \"X${xdir}${arg}\" | $Xsed -e \"$lo2o\"`\n\t\t  libobjs=\"$libobjs $pic_object\"\n\t\t  non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    $echo \"$modename: link input file \\`$save_arg' does not exist\"\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    $echo \"$modename: only absolute run-paths are allowed\" 1>&2\n\t    exit $EXIT_FAILURE\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) rpath=\"$rpath $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) xrpath=\"$xrpath $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\txcompiler)\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  compile_command=\"$compile_command $qarg\"\n\t  finalize_command=\"$finalize_command $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $wl$qarg\"\n\t  prev=\n\t  compile_command=\"$compile_command $wl$qarg\"\n\t  finalize_command=\"$finalize_command $wl$qarg\"\n\t  continue\n\t  ;;\n\txcclinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  compile_command=\"$compile_command $qarg\"\n\t  finalize_command=\"$finalize_command $qarg\"\n\t  continue\n\t  ;;\n\tshrext)\n  \t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdarwin_framework|darwin_framework_skip)\n\t  test \"$prev\" = \"darwin_framework\" && compiler_flags=\"$compiler_flags $arg\"\n\t  compile_command=\"$compile_command $arg\"\n\t  finalize_command=\"$finalize_command $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  compile_command=\"$compile_command $link_static_flag\"\n\t  finalize_command=\"$finalize_command $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\t$echo \"$modename: \\`-allow-undefined' is deprecated because it is the default\" 1>&2\n\tcontinue\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  $echo \"$modename: more than one -exported-symbols argument is not allowed\"\n\t  exit $EXIT_FAILURE\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework|-arch|-isysroot)\n\tcase \" $CC \" in\n\t  *\" ${arg} ${1} \"* | *\" ${arg}\t${1} \"*) \n\t\tprev=darwin_framework_skip ;;\n\t  *) compiler_flags=\"$compiler_flags $arg\"\n\t     prev=darwin_framework ;;\n\tesac\n\tcompile_command=\"$compile_command $arg\"\n\tfinalize_command=\"$finalize_command $arg\"\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  compile_command=\"$compile_command $arg\"\n\t  finalize_command=\"$finalize_command $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tdir=`$echo \"X$arg\" | $Xsed -e 's/^-L//'`\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  if test -z \"$absdir\"; then\n\t    $echo \"$modename: cannot determine absolute directory name of \\`$dir'\" 1>&2\n\t    absdir=\"$dir\"\n\t    notinst_path=\"$notinst_path $dir\"\n\t  fi\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"*) ;;\n\t*)\n\t  deplibs=\"$deplibs -L$dir\"\n\t  lib_search_path=\"$lib_search_path $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)\n\t  testbindir=`$echo \"X$dir\" | $Xsed -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  *) dllsearchpath=\"$dllsearchpath:$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    deplibs=\"$deplibs -framework System\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tdeplibs=\"$deplibs $arg\"\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      -model)\n\tcompile_command=\"$compile_command $arg\"\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfinalize_command=\"$finalize_command $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n     -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tcompile_command=\"$compile_command $arg\"\n\tfinalize_command=\"$finalize_command $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # -64, -mips[0-9] enable 64-bit mode on the SGI compiler\n      # -r[0-9][0-9]* specifies the processor on the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler\n      # +DA*, +DD* enable 64-bit mode on the HP compiler\n      # -q* pass through compiler args for the IBM compiler\n      # -m* pass through architecture-specific compiler args for GCC\n      # -m*, -t[45]*, -txscale* pass through architecture-specific\n      # compiler args for GCC\n      # -pg pass through profiling flag for GCC\n      # @file GCC response files\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*|-pg| \\\n      -t[45]*|-txscale*|@*)\n\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\targ=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\n\tcase $arg in\n\t*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t  arg=\"\\\"$arg\\\"\"\n\t  ;;\n\tesac\n        compile_command=\"$compile_command $arg\"\n        finalize_command=\"$finalize_command $arg\"\n        compiler_flags=\"$compiler_flags $arg\"\n        continue\n        ;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # in order for the loader to find any dlls it needs.\n\t  $echo \"$modename: warning: \\`-no-install' is ignored for $host\" 1>&2\n\t  $echo \"$modename: warning: assuming \\`-no-fast-install' instead\" 1>&2\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tdir=`$echo \"X$arg\" | $Xsed -e 's/^-R//'`\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  $echo \"$modename: only absolute run-paths are allowed\" 1>&2\n\t  exit $EXIT_FAILURE\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) xrpath=\"$xrpath $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -static)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -Wc,*)\n\targs=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\" -e 's/^-Wc,//'`\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n\t  case $flag in\n\t    *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t    flag=\"\\\"$flag\\\"\"\n\t    ;;\n\t  esac\n\t  arg=\"$arg $wl$flag\"\n\t  compiler_flags=\"$compiler_flags $flag\"\n\tdone\n\tIFS=\"$save_ifs\"\n\targ=`$echo \"X$arg\" | $Xsed -e \"s/^ //\"`\n\t;;\n\n      -Wl,*)\n\targs=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\" -e 's/^-Wl,//'`\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n\t  case $flag in\n\t    *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t    flag=\"\\\"$flag\\\"\"\n\t    ;;\n\t  esac\n\t  arg=\"$arg $wl$flag\"\n\t  compiler_flags=\"$compiler_flags $wl$flag\"\n\t  linker_flags=\"$linker_flags $flag\"\n\tdone\n\tIFS=\"$save_ifs\"\n\targ=`$echo \"X$arg\" | $Xsed -e \"s/^ //\"`\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\targ=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\n\tcase $arg in\n\t*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t  arg=\"\\\"$arg\\\"\"\n\t  ;;\n\tesac\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tobjs=\"$objs $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif (${SED} -e '2q' $arg | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  # If there is no directory component, then add one.\n\t  case $arg in\n\t  */* | *\\\\*) . $arg ;;\n\t  *) . ./$arg ;;\n\t  esac\n\n\t  if test -z \"$pic_object\" || \\\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none && \\\n\t     test \"$non_pic_object\" = none; then\n\t    $echo \"$modename: cannot find name of object for \\`$arg'\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  xdir=`$echo \"X$arg\" | $Xsed -e 's%/[^/]*$%%'`\n\t  if test \"X$xdir\" = \"X$arg\"; then\n\t    xdir=\n \t  else\n\t    xdir=\"$xdir/\"\n\t  fi\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tdlfiles=\"$dlfiles $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      dlprefiles=\"$dlprefiles $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    libobjs=\"$libobjs $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if test -z \"$run\"; then\n\t    $echo \"$modename: \\`$arg' is not a valid libtool object\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  else\n\t    # Dry-run case.\n\n\t    # Extract subdirectory from the argument.\n\t    xdir=`$echo \"X$arg\" | $Xsed -e 's%/[^/]*$%%'`\n\t    if test \"X$xdir\" = \"X$arg\"; then\n\t      xdir=\n\t    else\n\t      xdir=\"$xdir/\"\n\t    fi\n\n\t    pic_object=`$echo \"X${xdir}${objdir}/${arg}\" | $Xsed -e \"$lo2o\"`\n\t    non_pic_object=`$echo \"X${xdir}${arg}\" | $Xsed -e \"$lo2o\"`\n\t    libobjs=\"$libobjs $pic_object\"\n\t    non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tdeplibs=\"$deplibs $arg\"\n\told_deplibs=\"$old_deplibs $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  dlfiles=\"$dlfiles $arg\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  dlprefiles=\"$dlprefiles $arg\"\n\t  prev=\n\telse\n\t  deplibs=\"$deplibs $arg\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\targ=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\n\tcase $arg in\n\t*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t  arg=\"\\\"$arg\\\"\"\n\t  ;;\n\tesac\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tcompile_command=\"$compile_command $arg\"\n\tfinalize_command=\"$finalize_command $arg\"\n      fi\n    done # argument parsing loop\n\n    if test -n \"$prev\"; then\n      $echo \"$modename: the \\`$prevarg' option requires an argument\" 1>&2\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      compile_command=\"$compile_command $arg\"\n      finalize_command=\"$finalize_command $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    outputname=`$echo \"X$output\" | $Xsed -e 's%^.*/%%'`\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$echo \\\"X\\${$shlibpath_var}\\\" \\| \\$Xsed -e \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    output_objdir=`$echo \"X$output\" | $Xsed -e 's%/[^/]*$%%'`\n    if test \"X$output_objdir\" = \"X$output\"; then\n      output_objdir=\"$objdir\"\n    else\n      output_objdir=\"$output_objdir/$objdir\"\n    fi\n    # Create the object directory.\n    if test ! -d \"$output_objdir\"; then\n      $show \"$mkdir $output_objdir\"\n      $run $mkdir $output_objdir\n      exit_status=$?\n      if test \"$exit_status\" -ne 0 && test ! -d \"$output_objdir\"; then\n\texit $exit_status\n      fi\n    fi\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      $echo \"$modename: you must specify an output file\" 1>&2\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    case $host in\n    *cygwin* | *mingw* | *pw32*)\n      # don't eliminate duplications in $postdeps and $predeps\n      duplicate_compiler_generated_deps=yes\n      ;;\n    *)\n      duplicate_compiler_generated_deps=$duplicate_deps\n      ;;\n    esac\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if test \"X$duplicate_deps\" = \"Xyes\" ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\tesac\n      fi\n      libs=\"$libs $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if test \"X$duplicate_compiler_generated_deps\" = \"Xyes\" ; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) specialdeplibs=\"$specialdeplibs $pre_post_deps\" ;;\n\t  esac\n\t  pre_post_deps=\"$pre_post_deps $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    case $linkmode in\n    lib)\n\tpasses=\"conv link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    $echo \"$modename: libraries can \\`-dlopen' only libtool libraries: $file\" 1>&2\n\t    exit $EXIT_FAILURE\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n    for pass in $passes; do\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    compiler_flags=\"$compiler_flags $deplib\"\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    $echo \"$modename: warning: \\`-l' is ignored for archives/objects\" 1>&2\n\t    continue\n\t  fi\n\t  name=`$echo \"X$deplib\" | $Xsed -e 's/^-l//'`\n\t  for searchdir in $newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif (${SED} -e '2q' $lib |\n                    grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  case $lib in\n\t\t  */* | *\\\\*) . $lib ;;\n\t\t  *) . ./$lib ;;\n\t\t  esac\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    ladir=`$echo \"X$lib\" | $Xsed -e 's%/[^/]*$%%'`\n\t\t    test \"X$ladir\" = \"X$lib\" && ladir=\".\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t        ;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    newlib_search_path=\"$newlib_search_path \"`$echo \"X$deplib\" | $Xsed -e 's/^-L//'`\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    newlib_search_path=\"$newlib_search_path \"`$echo \"X$deplib\" | $Xsed -e 's/^-L//'`\n\t    ;;\n\t  *)\n\t    $echo \"$modename: warning: \\`-L' is ignored for archives/objects\" 1>&2\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    dir=`$echo \"X$deplib\" | $Xsed -e 's/^-R//'`\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) xrpath=\"$xrpath $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la) lib=\"$deplib\" ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    valid_a_lib=no\n\t    case $deplibs_check_method in\n\t      match_pattern*)\n\t\tset dummy $deplibs_check_method\n\t        match_pattern_regex=`expr \"$deplibs_check_method\" : \"$2 \\(.*\\)\"`\n\t\tif eval $echo \\\"$deplib\\\" 2>/dev/null \\\n\t\t    | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t  valid_a_lib=yes\n\t\tfi\n\t\t;;\n\t      pass_all)\n\t\tvalid_a_lib=yes\n\t\t;;\n            esac\n\t    if test \"$valid_a_lib\" != yes; then\n\t      $echo\n\t      $echo \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t      $echo \"*** I have the capability to make that library automatically link in when\"\n\t      $echo \"*** you link to this library.  But I can only do this if you have a\"\n\t      $echo \"*** shared version of the library, which you do not appear to have\"\n\t      $echo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t      $echo \"*** that it is just a static archive that I should not used here.\"\n\t    else\n\t      $echo\n\t      $echo \"*** Warning: Linking the shared library $output against the\"\n\t      $echo \"*** static library $deplib is not portable!\"\n\t      deplibs=\"$deplib $deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      newdlprefiles=\"$newdlprefiles $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      newdlfiles=\"$newdlfiles $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  $echo \"$modename: cannot find the library \\`$lib' or unhandled argument \\`$deplib'\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tif (${SED} -e '2q' $lib | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then :\n\telse\n\t  $echo \"$modename: \\`$lib' is not a valid libtool archive\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\tladir=`$echo \"X$lib\" | $Xsed -e 's%/[^/]*$%%'`\n\ttest \"X$ladir\" = \"X$lib\" && ladir=\".\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tcase $lib in\n\t*/* | *\\\\*) . $lib ;;\n\t*) . ./$lib ;;\n\tesac\n\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && dlfiles=\"$dlfiles $dlopen\"\n\t  test -n \"$dlpreopen\" && dlprefiles=\"$dlprefiles $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      $echo \"$modename: cannot find name of link library for \\`$lib'\" 1>&2\n\t      exit $EXIT_FAILURE\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    convenience=\"$convenience $ladir/$objdir/$old_library\"\n\t    old_convenience=\"$old_convenience $ladir/$objdir/$old_library\"\n\t    tmp_libs=\n\t    for deplib in $dependency_libs; do\n\t      deplibs=\"$deplib $deplibs\"\n              if test \"X$duplicate_deps\" = \"Xyes\" ; then\n\t        case \"$tmp_libs \" in\n\t        *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t        esac\n              fi\n\t      tmp_libs=\"$tmp_libs $deplib\"\n\t    done\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    $echo \"$modename: \\`$lib' is not a convenience library\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tfor l in $old_library $library_names; do\n\t  linklib=\"$l\"\n\tdone\n\tif test -z \"$linklib\"; then\n\t  $echo \"$modename: cannot find name of link library for \\`$lib'\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    $echo \"$modename: cannot -dlopen a convenience library: \\`$lib'\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    dlprefiles=\"$dlprefiles $lib $dependency_libs\"\n\t  else\n\t    newdlfiles=\"$newdlfiles $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    $echo \"$modename: warning: cannot determine absolute directory name of \\`$ladir'\" 1>&2\n\t    $echo \"$modename: passing it literally to the linker, although it might fail\" 1>&2\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tlaname=`$echo \"X$lib\" | $Xsed -e 's%^.*/%%'`\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    $echo \"$modename: warning: library \\`$lib' was moved.\" 1>&2\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$libdir\"\n\t    absdir=\"$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tname=`$echo \"X$laname\" | $Xsed -e 's/\\.la$//' -e 's/^lib//'`\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\"; then\n\t    $echo \"$modename: cannot -dlpreopen a convenience library: \\`$lib'\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t  # are required to link).\n\t  if test -n \"$old_library\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$old_library\"\n\t  # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t  elif test -n \"$dlname\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$dlname\"\n\t  else\n\t    newdlprefiles=\"$newdlprefiles $dir/$linklib\"\n\t  fi\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  newlib_search_path=\"$newlib_search_path $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) newlib_search_path=\"$newlib_search_path \"`$echo \"X$deplib\" | $Xsed -e 's/^-L//'`;; ### testsuite: skip nested quoting test\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if test \"X$duplicate_deps\" = \"Xyes\" ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { test \"$prefer_static_libs\" = no || test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath \" in\n\t      *\" $dir \"*) ;;\n\t      *\" $absdir \"*) ;;\n\t      *) temp_rpath=\"$temp_rpath $absdir\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes ; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  if test \"$installed\" = no; then\n\t    notinst_deplibs=\"$notinst_deplibs $lib\"\n\t    need_relink=yes\n\t  fi\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on\n\t  # some systems (darwin)\n\t  if test \"$shouldnotlink\" = yes && test \"$pass\" = link ; then\n\t    $echo\n\t    if test \"$linkmode\" = prog; then\n\t      $echo \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $echo \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $echo \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    realname=\"$2\"\n\t    shift; shift\n\t    libname=`eval \\\\$echo \\\"$libname_spec\\\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw*)\n\t\tmajor=`expr $current - $age`\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    soname=`$echo $soroot | ${SED} -e 's/^.*\\///'`\n\t    newlib=\"libimp-`$echo $soname | ${SED} 's/^lib//;s/\\.dll$//'`.a\"\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      $show \"extracting exported symbol list from \\`$soname'\"\n\t      save_ifs=\"$IFS\"; IFS='~'\n\t      cmds=$extract_expsyms_cmds\n\t      for cmd in $cmds; do\n\t\tIFS=\"$save_ifs\"\n\t\teval cmd=\\\"$cmd\\\"\n\t\t$show \"$cmd\"\n\t\t$run eval \"$cmd\" || exit $?\n\t      done\n\t      IFS=\"$save_ifs\"\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      $show \"generating import library for \\`$soname'\"\n\t      save_ifs=\"$IFS\"; IFS='~'\n\t      cmds=$old_archive_from_expsyms_cmds\n\t      for cmd in $cmds; do\n\t\tIFS=\"$save_ifs\"\n\t\teval cmd=\\\"$cmd\\\"\n\t\t$show \"$cmd\"\n\t\t$run eval \"$cmd\" || exit $?\n\t      done\n\t      IFS=\"$save_ifs\"\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a module then we can not link against\n\t\t    # it, someone is ignoring the new warnings I added\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n                      $EGREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      $echo \"** Warning, lib $linklib is a module, not a shared library\"\n\t\t      if test -z \"$old_library\" ; then\n\t\t        $echo\n\t\t        $echo \"** And there doesn't seem to be a static archive available\"\n\t\t        $echo \"** The link will probably fail, sorry\"\n\t\t      else\n\t\t        add=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$dir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      $echo \"$modename: configuration error: unsupported hardcode properties\"\n\t      exit $EXIT_FAILURE\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) compile_shlibpath=\"$compile_shlibpath$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes && \\\n\t\t test \"$hardcode_minus_L\" != yes && \\\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t        add=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t        add=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    $echo\n\t    $echo \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    $echo \"*** I have the capability to make that library automatically link in when\"\n\t    $echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    $echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      $echo \"*** But as you try to build a module library, libtool will still create \"\n\t      $echo \"*** a static module, that should work as long as the dlopening application\"\n\t      $echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\t$echo\n\t\t$echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\t$echo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\t$echo \"*** not find such a program.  So, this module is probably useless.\"\n\t\t$echo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) temp_xrpath=`$echo \"X$libdir\" | $Xsed -e 's/^-R//'`\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) xrpath=\"$xrpath $temp_xrpath\";;\n\t\t   esac;;\n\t      *) temp_deplibs=\"$temp_deplibs $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  newlib_search_path=\"$newlib_search_path $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    if test \"X$duplicate_deps\" = \"Xyes\" ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t\tdir=`$echo \"X$deplib\" | $Xsed -e 's%/[^/]*$%%'`\n\t\ttest \"X$dir\" = \"X$deplib\" && dir=\".\"\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    $echo \"$modename: warning: cannot determine absolute directory name of \\`$dir'\" 1>&2\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif grep \"^installed=no\" $deplib > /dev/null; then\n\t\t  path=\"$absdir/$objdir\"\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -z \"$libdir\"; then\n\t\t    $echo \"$modename: \\`$deplib' is not a valid libtool archive\" 1>&2\n\t\t    exit $EXIT_FAILURE\n\t\t  fi\n\t\t  if test \"$absdir\" != \"$libdir\"; then\n\t\t    $echo \"$modename: warning: \\`$deplib' seems to be moved\" 1>&2\n\t\t  fi\n\t\t  path=\"$absdir\"\n\t\tfi\n\t\tdepdepl=\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  # we do not want to link against static libs,\n\t\t  # but need to link against shared\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$path/$depdepl\" ; then\n\t\t      depdepl=\"$path/$depdepl\"\n\t\t    fi\n\t\t    # do not add paths which are already there\n\t\t    case \" $newlib_search_path \" in\n\t\t    *\" $path \"*) ;;\n\t\t    *) newlib_search_path=\"$newlib_search_path $path\";;\n\t\t    esac\n\t\t  fi\n\t\t  path=\"\"\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$path\"\n\t\t  ;;\n\t\tesac\n\t\t;;\n\t      -l*)\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  # Again, we only want to link against shared libraries\n\t\t  eval tmp_libs=`$echo \"X$deplib\" | $Xsed -e \"s,^\\-l,,\"`\n\t\t  for tmp in $newlib_search_path ; do\n\t\t    if test -f \"$tmp/lib$tmp_libs.dylib\" ; then\n\t\t      eval depdepl=\"$tmp/lib$tmp_libs.dylib\"\n\t\t      break\n\t\t    fi\n\t\t  done\n\t\t  path=\"\"\n\t\t  ;;\n\t\t*) continue ;;\n\t\tesac\n\t\t;;\n\t      *) continue ;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $depdepl \"*) ;;\n\t      *) deplibs=\"$depdepl $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) lib_search_path=\"$lib_search_path $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  tmp_libs=\"$tmp_libs $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$deplibs\"; then\n\t$echo \"$modename: warning: \\`-l' and \\`-L' are ignored for archives\" 1>&2\n      fi\n\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\t$echo \"$modename: warning: \\`-dlopen' is ignored for archives\" 1>&2\n      fi\n\n      if test -n \"$rpath\"; then\n\t$echo \"$modename: warning: \\`-rpath' is ignored for archives\" 1>&2\n      fi\n\n      if test -n \"$xrpath\"; then\n\t$echo \"$modename: warning: \\`-R' is ignored for archives\" 1>&2\n      fi\n\n      if test -n \"$vinfo\"; then\n\t$echo \"$modename: warning: \\`-version-info/-version-number' is ignored for archives\" 1>&2\n      fi\n\n      if test -n \"$release\"; then\n\t$echo \"$modename: warning: \\`-release' is ignored for archives\" 1>&2\n      fi\n\n      if test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t$echo \"$modename: warning: \\`-export-symbols' is ignored for archives\" 1>&2\n      fi\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      objs=\"$objs$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tname=`$echo \"X$outputname\" | $Xsed -e 's/\\.la$//' -e 's/^lib//'`\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\tif test \"$module\" = no; then\n\t  $echo \"$modename: libtool library \\`$output' must begin with \\`lib'\" 1>&2\n\t  $echo \"$help\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  name=`$echo \"X$outputname\" | $Xsed -e 's/\\.la$//'`\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  libname=`$echo \"X$outputname\" | $Xsed -e 's/\\.la$//'`\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  $echo \"$modename: cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\" 2>&1\n\t  exit $EXIT_FAILURE\n\telse\n\t  $echo\n\t  $echo \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $echo \"*** objects $objs is not portable!\"\n\t  libobjs=\"$libobjs $objs\"\n\tfi\n      fi\n\n      if test \"$dlself\" != no; then\n\t$echo \"$modename: warning: \\`-dlopen self' is ignored for libtool libraries\" 1>&2\n      fi\n\n      set dummy $rpath\n      if test \"$#\" -gt 2; then\n\t$echo \"$modename: warning: ignoring multiple \\`-rpath's for a libtool library\" 1>&2\n      fi\n      install_libdir=\"$2\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\tif test -n \"$vinfo\"; then\n\t  $echo \"$modename: warning: \\`-version-info/-version-number' is ignored for convenience libraries\" 1>&2\n\tfi\n\n\tif test -n \"$release\"; then\n\t  $echo \"$modename: warning: \\`-release' is ignored for convenience libraries\" 1>&2\n\tfi\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tIFS=\"$save_ifs\"\n\n\tif test -n \"$8\"; then\n\t  $echo \"$modename: too many parameters to \\`-version-info'\" 1>&2\n\t  $echo \"$help\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$2\"\n\t  number_minor=\"$3\"\n\t  number_revision=\"$4\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  darwin|linux|osf|windows)\n\t    current=`expr $number_major + $number_minor`\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    current=`expr $number_major + $number_minor - 1`\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$2\"\n\t  revision=\"$3\"\n\t  age=\"$4\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  $echo \"$modename: CURRENT \\`$current' must be a nonnegative integer\" 1>&2\n\t  $echo \"$modename: \\`$vinfo' is not valid version information\" 1>&2\n\t  exit $EXIT_FAILURE\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  $echo \"$modename: REVISION \\`$revision' must be a nonnegative integer\" 1>&2\n\t  $echo \"$modename: \\`$vinfo' is not valid version information\" 1>&2\n\t  exit $EXIT_FAILURE\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  $echo \"$modename: AGE \\`$age' must be a nonnegative integer\" 1>&2\n\t  $echo \"$modename: \\`$vinfo' is not valid version information\" 1>&2\n\t  exit $EXIT_FAILURE\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  $echo \"$modename: AGE \\`$age' is greater than the current interface number \\`$current'\" 1>&2\n\t  $echo \"$modename: \\`$vinfo' is not valid version information\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  major=.`expr $current - $age`\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  minor_current=`expr $current + 1`\n\t  verstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\";\n\t  ;;\n\n\tirix | nonstopux)\n\t  major=`expr $current - $age + 1`\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    iface=`expr $revision - $loop`\n\t    loop=`expr $loop - 1`\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux)\n\t  major=.`expr $current - $age`\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  major=.`expr $current - $age`\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    iface=`expr $current - $loop`\n\t    loop=`expr $loop - 1`\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  verstring=\"$verstring:${current}.0\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  major=`expr $current - $age`\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  $echo \"$modename: unknown library version type \\`$version_type'\" 1>&2\n\t  $echo \"Fatal configuration error.  See the $PACKAGE docs for more information.\" 1>&2\n\t  exit $EXIT_FAILURE\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    $echo \"$modename: warning: undefined symbols not allowed in $host shared libraries\" 1>&2\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n      fi\n\n      if test \"$mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$echo \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t         if echo $p | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t         then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       removelist=\"$removelist $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\tif test -n \"$removelist\"; then\n\t  $show \"${rm}r $removelist\"\n\t  $run ${rm}r $removelist\n\tfi\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\toldlibs=\"$oldlibs $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$echo \"X$libobjs\" | $SP2NL | $Xsed -e '/\\.'${libext}'$/d' -e \"$lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      for path in $notinst_path; do\n\tlib_search_path=`$echo \"$lib_search_path \" | ${SED} -e \"s% $path % %g\"`\n\tdeplibs=`$echo \"$deplibs \" | ${SED} -e \"s% -L$path % %g\"`\n\tdependency_libs=`$echo \"$dependency_libs \" | ${SED} -e \"s% -L$path % %g\"`\n      done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  temp_xrpath=\"$temp_xrpath -R$libdir\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlfiles=\"$dlfiles $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlprefiles=\"$dlprefiles $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    deplibs=\"$deplibs -framework System\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n \t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      deplibs=\"$deplibs -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $rm conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $rm conftest\n\t  $LTCC $LTCFLAGS -o conftest conftest.c $deplibs\n\t  if test \"$?\" -eq 0 ; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      name=`expr $i : '-l\\(.*\\)'`\n\t      # If $name is empty we are operating on a -L argument.\n              if test \"$name\" != \"\" && test \"$name\" -ne \"0\"; then\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t        fi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \\\\$echo \\\"$libname_spec\\\"`\n\t\t  deplib_matches=`eval \\\\$echo \\\"$library_names_spec\\\"`\n\t\t  set dummy $deplib_matches\n\t\t  deplib_match=$2\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    $echo\n\t\t    $echo \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    $echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    $echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    $echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    $echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    $echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t      else\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t      fi\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      name=`expr $i : '-l\\(.*\\)'`\n\t      # If $name is empty we are operating on a -L argument.\n              if test \"$name\" != \"\" && test \"$name\" != \"0\"; then\n\t\t$rm conftest\n\t\t$LTCC $LTCFLAGS -o conftest conftest.c $i\n\t\t# Did it work?\n\t\tif test \"$?\" -eq 0 ; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \\\\$echo \\\"$libname_spec\\\"`\n\t\t    deplib_matches=`eval \\\\$echo \\\"$library_names_spec\\\"`\n\t\t    set dummy $deplib_matches\n\t\t    deplib_match=$2\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      $echo\n\t\t      $echo \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      $echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      $echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      $echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      $echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      $echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  $echo\n\t\t  $echo \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  $echo \"***  make it link in!  You will probably need to install it or some\"\n\t\t  $echo \"*** library that it depends on before this library will be fully\"\n\t\t  $echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t      else\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t      fi\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$2 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    name=`expr $a_deplib : '-l\\(.*\\)'`\n\t    # If $name is empty we are operating on a -L argument.\n            if test \"$name\" != \"\" && test  \"$name\" != \"0\"; then\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \\\\$echo \\\"$libname_spec\\\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null \\\n\t\t\t | grep \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$echo \"X$potlib\" | $Xsed -e 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null \\\n\t\t\t | ${SED} 10q \\\n\t\t\t | $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tnewdeplibs=\"$newdeplibs $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\t$echo\n\t\t$echo \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\t$echo \"*** I have the capability to make that library automatically link in when\"\n\t\t$echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$echo \"*** shared version of the library, which you do not appear to have\"\n\t\t$echo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $echo \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $echo \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $echo \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t    else\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t    fi\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$2 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    name=`expr $a_deplib : '-l\\(.*\\)'`\n\t    # If $name is empty we are operating on a -L argument.\n\t    if test -n \"$name\" && test \"$name\" != \"0\"; then\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \\\\$echo \\\"$libname_spec\\\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval $echo \\\"$potent_lib\\\" 2>/dev/null \\\n\t\t        | ${SED} 10q \\\n\t\t        | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\t$echo\n\t\t$echo \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\t$echo \"*** I have the capability to make that library automatically link in when\"\n\t\t$echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$echo \"*** shared version of the library, which you do not appear to have\"\n\t\t$echo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $echo \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $echo \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $echo \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t    else\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t    fi\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$echo \"X $deplibs\" | $Xsed -e 's/ -lc$//' \\\n\t    -e 's/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$echo \"X $tmp_deplibs\" | ${SED} -e \"1s,^X,,\" -e \"s,$i,,\"`\n\t    done\n\t  fi\n\t  if $echo \"X $tmp_deplibs\" | $Xsed -e 's/[ \t]//g' \\\n\t    | grep . >/dev/null; then\n\t    $echo\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      $echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      $echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    $echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t  fi\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library is the System framework\n\t  newdeplibs=`$echo \"X $newdeplibs\" | $Xsed -e 's/ -lc / -framework System /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    $echo\n\t    $echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $echo \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    $echo \"*** a static module, that should work as long as the dlopening\"\n\t    $echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      $echo\n\t      $echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      $echo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      $echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      $echo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    $echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    $echo \"*** automatically added whenever a program is linked with this library\"\n\t    $echo \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      $echo\n\t      $echo \"*** Since this library must not contain undefined symbols,\"\n\t      $echo \"*** because either the platform does not support them or\"\n\t      $echo \"*** it was explicitly requested with -no-undefined,\"\n\t      $echo \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    hardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tdep_rpath=\"$dep_rpath $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    if test -n \"$hardcode_libdir_flag_spec_ld\"; then\n\t      eval dep_rpath=\\\"$hardcode_libdir_flag_spec_ld\\\"\n\t    else\n\t      eval dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\n\t    fi\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      rpath=\"$rpath$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\trealname=\"$2\"\n\tshift; shift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  linknames=\"$linknames $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$echo \"X$libobjs\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    $show \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $run $rm $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      eval cmd=\\\"$cmd\\\"\n\t      if len=`expr \"X$cmd\" : \".*\"` &&\n\t       test \"$len\" -le \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t        $show \"$cmd\"\n\t        $run eval \"$cmd\" || exit $?\n\t        skipped_export=false\n\t      else\n\t        # The command line is too long to execute in one step.\n\t        $show \"using reloadable object file for export list...\"\n\t        skipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\"; then\n\t      $show \"$EGREP -e \\\"$export_symbols_regex\\\" \\\"$export_symbols\\\" > \\\"${export_symbols}T\\\"\"\n\t      $run eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      $show \"$mv \\\"${export_symbols}T\\\" \\\"$export_symbols\\\"\"\n\t      $run eval '$mv \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $run eval '$echo \"X$include_expsyms\" | $SP2NL >> \"$export_symbols\"'\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t\tcase \" $convenience \" in\n\t\t*\" $test_deplib \"*) ;;\n\t\t*)\n\t\t\ttmp_deplibs=\"$tmp_deplibs $test_deplib\"\n\t\t\t;;\n\t\tesac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    generated=\"$generated $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    libobjs=\"$libobjs $func_extract_archives_result\"\n\t  fi\n\tfi\n\t\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  linker_flags=\"$linker_flags $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$mode\" = relink; then\n\t  $run eval '(cd $output_objdir && $rm ${realname}U && $mv $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\tif test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t  eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t  cmds=$archive_expsym_cmds\n\telse\n\t  eval test_cmds=\\\"$archive_cmds\\\"\n\t  cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   len=`expr \"X$test_cmds\" : \".*\" 2>/dev/null` &&\n\t   test \"$len\" -le \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise.\n\t  $echo \"creating reloadable object files...\"\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  output_la=`$echo \"X$output\" | $Xsed -e \"$basename\"`\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  delfiles=\n\t  last_robj=\n\t  k=1\n\t  output=$output_objdir/$output_la-${k}.$objext\n\t  # Loop over the list of objects to be linked.\n\t  for obj in $save_libobjs\n\t  do\n\t    eval test_cmds=\\\"$reload_cmds $objlist $last_robj\\\"\n\t    if test \"X$objlist\" = X ||\n\t       { len=`expr \"X$test_cmds\" : \".*\" 2>/dev/null` &&\n\t\t test \"$len\" -le \"$max_cmd_len\"; }; then\n\t      objlist=\"$objlist $obj\"\n\t    else\n\t      # The command $test_cmds is almost too long, add a\n\t      # command to the queue.\n\t      if test \"$k\" -eq 1 ; then\n\t\t# The first file doesn't have a previous command to add.\n\t\teval concat_cmds=\\\"$reload_cmds $objlist $last_robj\\\"\n\t      else\n\t\t# All subsequent reloadable object files will link in\n\t\t# the last one created.\n\t\teval concat_cmds=\\\"\\$concat_cmds~$reload_cmds $objlist $last_robj\\\"\n\t      fi\n\t      last_robj=$output_objdir/$output_la-${k}.$objext\n\t      k=`expr $k + 1`\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      objlist=$obj\n\t      len=1\n\t    fi\n\t  done\n\t  # Handle the remaining objects by creating one last\n\t  # reloadable object file.  All subsequent reloadable object\n\t  # files will link in the last one created.\n\t  test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t  eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds $objlist $last_robj\\\"\n\n\t  if ${skipped_export-false}; then\n\t    $show \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $run $rm $export_symbols\n\t    libobjs=$output\n\t    # Append the command to create the export file.\n\t    eval concat_cmds=\\\"\\$concat_cmds~$export_symbols_cmds\\\"\n          fi\n\n\t  # Set up a command to remove the reloadable object files\n\t  # after they are used.\n\t  i=0\n\t  while test \"$i\" -lt \"$k\"\n\t  do\n\t    i=`expr $i + 1`\n\t    delfiles=\"$delfiles $output_objdir/$output_la-${i}.$objext\"\n\t  done\n\n\t  $echo \"creating a temporary reloadable object file: $output\"\n\n\t  # Loop through the commands generated above and execute them.\n\t  save_ifs=\"$IFS\"; IFS='~'\n\t  for cmd in $concat_cmds; do\n\t    IFS=\"$save_ifs\"\n\t    $show \"$cmd\"\n\t    $run eval \"$cmd\" || exit $?\n\t  done\n\t  IFS=\"$save_ifs\"\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    cmds=$archive_cmds\n\t    fi\n\t  fi\n\n\t  # Append the command to remove the reloadable object files\n\t  # to the just-reset $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$rm $delfiles\\\"\n\tfi\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $show \"$cmd\"\n\t  $run eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$mode\" = relink; then\n\t      $run eval '(cd $output_objdir && $rm ${realname}T && $mv ${realname}U $realname)'\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$mode\" = relink; then\n\t  $run eval '(cd $output_objdir && $rm ${realname}T && $mv $realname ${realname}T && $mv \"$realname\"U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      $show \"${rm}r $gentop\"\n\t      $run ${rm}r \"$gentop\"\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    $show \"(cd $output_objdir && $rm $linkname && $LN_S $realname $linkname)\"\n\t    $run eval '(cd $output_objdir && $rm $linkname && $LN_S $realname $linkname)' || exit $?\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$deplibs\"; then\n\t$echo \"$modename: warning: \\`-l' and \\`-L' are ignored for objects\" 1>&2\n      fi\n\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\t$echo \"$modename: warning: \\`-dlopen' is ignored for objects\" 1>&2\n      fi\n\n      if test -n \"$rpath\"; then\n\t$echo \"$modename: warning: \\`-rpath' is ignored for objects\" 1>&2\n      fi\n\n      if test -n \"$xrpath\"; then\n\t$echo \"$modename: warning: \\`-R' is ignored for objects\" 1>&2\n      fi\n\n      if test -n \"$vinfo\"; then\n\t$echo \"$modename: warning: \\`-version-info' is ignored for objects\" 1>&2\n      fi\n\n      if test -n \"$release\"; then\n\t$echo \"$modename: warning: \\`-release' is ignored for objects\" 1>&2\n      fi\n\n      case $output in\n      *.lo)\n\tif test -n \"$objs$old_deplibs\"; then\n\t  $echo \"$modename: cannot build library object \\`$output' from non-libtool objects\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\tlibobj=\"$output\"\n\tobj=`$echo \"X$output\" | $Xsed -e \"$lo2o\"`\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $run $rm $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval reload_conv_objs=\\\"\\$reload_objs $whole_archive_flag_spec\\\"\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$echo \"X$libobjs\" | $SP2NL | $Xsed -e '/\\.'${libext}$'/d' -e '/\\.lib$/d' -e \"$lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      cmds=$reload_cmds\n      save_ifs=\"$IFS\"; IFS='~'\n      for cmd in $cmds; do\n\tIFS=\"$save_ifs\"\n\teval cmd=\\\"$cmd\\\"\n\t$show \"$cmd\"\n\t$run eval \"$cmd\" || exit $?\n      done\n      IFS=\"$save_ifs\"\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  $show \"${rm}r $gentop\"\n\t  $run ${rm}r $gentop\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  $show \"${rm}r $gentop\"\n\t  $run ${rm}r $gentop\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $run eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tcmds=$reload_cmds\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $show \"$cmd\"\n\t  $run eval \"$cmd\" || exit $?\n\tdone\n\tIFS=\"$save_ifs\"\n      fi\n\n      if test -n \"$gentop\"; then\n\t$show \"${rm}r $gentop\"\n\t$run ${rm}r $gentop\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) output=`$echo $output | ${SED} -e 's,.exe$,,;s,$,.exe,'` ;;\n      esac\n      if test -n \"$vinfo\"; then\n\t$echo \"$modename: warning: \\`-version-info' is ignored for programs\" 1>&2\n      fi\n\n      if test -n \"$release\"; then\n\t$echo \"$modename: warning: \\`-release' is ignored for programs\" 1>&2\n      fi\n\n      if test \"$preload\" = yes; then\n\tif test \"$dlopen_support\" = unknown && test \"$dlopen_self\" = unknown &&\n\t   test \"$dlopen_self_static\" = unknown; then\n\t  $echo \"$modename: warning: \\`AC_LIBTOOL_DLOPEN' not used. Assuming no dlopen support.\"\n\tfi\n      fi\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$echo \"X $compile_deplibs\" | $Xsed -e 's/ -lc / -framework System /'`\n\tfinalize_deplibs=`$echo \"X $finalize_deplibs\" | $Xsed -e 's/ -lc / -framework System /'`\n\t;;\n      esac\n\n      case $host in\n      *darwin*)\n        # Don't allow lazy linking, it breaks C++ global constructors\n        if test \"$tagname\" = CXX ; then\n        compile_command=\"$compile_command ${wl}-bind_at_load\"\n        finalize_command=\"$finalize_command ${wl}-bind_at_load\"\n        fi\n        ;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      compile_command=\"$compile_command $compile_deplibs\"\n      finalize_command=\"$finalize_command $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)\n\t  testbindir=`$echo \"X$libdir\" | $Xsed -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  *) dllsearchpath=\"$dllsearchpath:$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_perm_rpath=\"$finalize_perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$echo \"X$compile_command\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$echo \"X$finalize_command\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n      fi\n\n      dlsyms=\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tif test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\t  dlsyms=\"${outputname}S.c\"\n\telse\n\t  $echo \"$modename: not configured to extract global symbols from dlpreopened files\" 1>&2\n\tfi\n      fi\n\n      if test -n \"$dlsyms\"; then\n\tcase $dlsyms in\n\t\"\") ;;\n\t*.c)\n\t  # Discover the nlist of each of the dlfiles.\n\t  nlist=\"$output_objdir/${outputname}.nm\"\n\n\t  $show \"$rm $nlist ${nlist}S ${nlist}T\"\n\t  $run $rm \"$nlist\" \"${nlist}S\" \"${nlist}T\"\n\n\t  # Parse the name list into a source file.\n\t  $show \"creating $output_objdir/$dlsyms\"\n\n\t  test -z \"$run\" && $echo > \"$output_objdir/$dlsyms\" \"\\\n/* $dlsyms - symbol resolution table for \\`$outputname' dlsym emulation. */\n/* Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n/* Prevent the only kind of declaration conflicts we can make. */\n#define lt_preloaded_symbols some_other_symbol\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\t  if test \"$dlself\" = yes; then\n\t    $show \"generating symbol list for \\`$output'\"\n\n\t    test -z \"$run\" && $echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t    # Add our own program objects to the symbol list.\n\t    progfiles=`$echo \"X$objs$old_deplibs\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\t    for arg in $progfiles; do\n\t      $show \"extracting global C symbols from \\`$arg'\"\n\t      $run eval \"$NM $arg | $global_symbol_pipe >> '$nlist'\"\n\t    done\n\n\t    if test -n \"$exclude_expsyms\"; then\n\t      $run eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      $run eval '$mv \"$nlist\"T \"$nlist\"'\n\t    fi\n\n\t    if test -n \"$export_symbols_regex\"; then\n\t      $run eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      $run eval '$mv \"$nlist\"T \"$nlist\"'\n\t    fi\n\n\t    # Prepare the list of exported symbols\n\t    if test -z \"$export_symbols\"; then\n\t      export_symbols=\"$output_objdir/$outputname.exp\"\n\t      $run $rm $export_symbols\n\t      $run eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n              case $host in\n              *cygwin* | *mingw* )\n\t        $run eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t\t$run eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n                ;;\n              esac\n\t    else\n\t      $run eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      $run eval 'grep -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      $run eval 'mv \"$nlist\"T \"$nlist\"'\n              case $host in\n              *cygwin* | *mingw* )\n\t        $run eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t\t$run eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n                ;;\n              esac\n\t    fi\n\t  fi\n\n\t  for arg in $dlprefiles; do\n\t    $show \"extracting global C symbols from \\`$arg'\"\n\t    name=`$echo \"$arg\" | ${SED} -e 's%^.*/%%'`\n\t    $run eval '$echo \": $name \" >> \"$nlist\"'\n\t    $run eval \"$NM $arg | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -z \"$run\"; then\n\t    # Make sure we have at least an empty file.\n\t    test -f \"$nlist\" || : > \"$nlist\"\n\n\t    if test -n \"$exclude_expsyms\"; then\n\t      $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t      $mv \"$nlist\"T \"$nlist\"\n\t    fi\n\n\t    # Try sorting and uniquifying the output.\n\t    if grep -v \"^: \" < \"$nlist\" |\n\t\tif sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\t  sort -k 3\n\t\telse\n\t\t  sort +2\n\t\tfi |\n\t\tuniq > \"$nlist\"S; then\n\t      :\n\t    else\n\t      grep -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t    fi\n\n\t    if test -f \"$nlist\"S; then\n\t      eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$dlsyms\"'\n\t    else\n\t      $echo '/* NONE */' >> \"$output_objdir/$dlsyms\"\n\t    fi\n\n\t    $echo >> \"$output_objdir/$dlsyms\" \"\\\n\n#undef lt_preloaded_symbols\n\n#if defined (__STDC__) && __STDC__\n# define lt_ptr void *\n#else\n# define lt_ptr char *\n# define const\n#endif\n\n/* The mapping between symbol names and symbols. */\n\"\n\n\t    case $host in\n\t    *cygwin* | *mingw* )\n\t  $echo >> \"$output_objdir/$dlsyms\" \"\\\n/* DATA imports from DLLs on WIN32 can't be const, because\n   runtime relocations are performed -- see ld's documentation\n   on pseudo-relocs */\nstruct {\n\"\n\t      ;;\n\t    * )\n\t  $echo >> \"$output_objdir/$dlsyms\" \"\\\nconst struct {\n\"\n\t      ;;\n\t    esac\n\n\n\t  $echo >> \"$output_objdir/$dlsyms\" \"\\\n  const char *name;\n  lt_ptr address;\n}\nlt_preloaded_symbols[] =\n{\\\n\"\n\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$dlsyms\"\n\n\t    $echo >> \"$output_objdir/$dlsyms\" \"\\\n  {0, (lt_ptr) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t  fi\n\n\t  pic_flag_for_symtable=\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    case \"$compile_command \" in\n\t    *\" -static \"*) ;;\n\t    *) pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\";;\n\t    esac;;\n\t  *-*-hpux*)\n\t    case \"$compile_command \" in\n\t    *\" -static \"*) ;;\n\t    *) pic_flag_for_symtable=\" $pic_flag\";;\n\t    esac\n\t  esac\n\n\t  # Now compile the dynamic symbol file.\n\t  $show \"(cd $output_objdir && $LTCC  $LTCFLAGS -c$no_builtin_flag$pic_flag_for_symtable \\\"$dlsyms\\\")\"\n\t  $run eval '(cd $output_objdir && $LTCC  $LTCFLAGS -c$no_builtin_flag$pic_flag_for_symtable \"$dlsyms\")' || exit $?\n\n\t  # Clean up the generated files.\n\t  $show \"$rm $output_objdir/$dlsyms $nlist ${nlist}S ${nlist}T\"\n\t  $run $rm \"$output_objdir/$dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"\n\n\t  # Transform the symbol file into the correct name.\n          case $host in\n          *cygwin* | *mingw* )\n            if test -f \"$output_objdir/${outputname}.def\" ; then\n              compile_command=`$echo \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/${outputname}.def $output_objdir/${outputname}S.${objext}%\"`\n              finalize_command=`$echo \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/${outputname}.def $output_objdir/${outputname}S.${objext}%\"`\n            else\n              compile_command=`$echo \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/${outputname}S.${objext}%\"`\n              finalize_command=`$echo \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/${outputname}S.${objext}%\"`\n             fi\n            ;;\n          * )\n            compile_command=`$echo \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/${outputname}S.${objext}%\"`\n            finalize_command=`$echo \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/${outputname}S.${objext}%\"`\n            ;;\n          esac\n\t  ;;\n\t*)\n\t  $echo \"$modename: unknown suffix for \\`$dlsyms'\" 1>&2\n\t  exit $EXIT_FAILURE\n\t  ;;\n\tesac\n      else\n\t# We keep going just in case the user didn't refer to\n\t# lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n\t# really was required.\n\n\t# Nullify the symbol file.\n\tcompile_command=`$echo \"X$compile_command\" | $Xsed -e \"s% @SYMFILE@%%\"`\n\tfinalize_command=`$echo \"X$finalize_command\" | $Xsed -e \"s% @SYMFILE@%%\"`\n      fi\n\n      if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n\t# Replace the output file specification.\n\tcompile_command=`$echo \"X$compile_command\" | $Xsed -e 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\t$show \"$link_command\"\n\t$run eval \"$link_command\"\n\texit_status=$?\n\n\t# Delete the generated files.\n\tif test -n \"$dlsyms\"; then\n\t  $show \"$rm $output_objdir/${outputname}S.${objext}\"\n\t  $run $rm \"$output_objdir/${outputname}S.${objext}\"\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$shlibpath_var\"; then\n\t# We should set the shlibpath_var\n\trpath=\n\tfor dir in $temp_rpath; do\n\t  case $dir in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*)\n\t    # Absolute path.\n\t    rpath=\"$rpath$dir:\"\n\t    ;;\n\t  *)\n\t    # Relative path: add a thisdir entry.\n\t    rpath=\"$rpath\\$thisdir/$dir:\"\n\t    ;;\n\t  esac\n\tdone\n\ttemp_rpath=\"$rpath\"\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$echo \"X$link_command\" | $Xsed -e 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$run $rm $output\n\t# Link the executable and exit\n\t$show \"$link_command\"\n\t$run eval \"$link_command\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\t$echo \"$modename: warning: this platform does not like uninstalled shared libraries\" 1>&2\n\t$echo \"$modename: \\`$output' will be relinked during installation\" 1>&2\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$echo \"X$compile_var$compile_command$compile_rpath\" | $Xsed -e 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$echo \"X$link_command\" | $Xsed -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $run $rm $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      $show \"$link_command\"\n      $run eval \"$link_command\" || exit $?\n\n      # Now create the wrapper script.\n      $show \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    var_value=`$echo \"X$var_value\" | $Xsed -e \"$sed_quote_subst\"`\n\t    relink_command=\"$var=\\\"$var_value\\\"; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$echo \"X$relink_command\" | $Xsed -e \"$sed_quote_subst\"`\n      fi\n\n      # Quote $echo for shipping.\n      if test \"X$echo\" = \"X$SHELL $progpath --fallback-echo\"; then\n\tcase $progpath in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) qecho=\"$SHELL $progpath --fallback-echo\";;\n\t*) qecho=\"$SHELL `pwd`/$progpath --fallback-echo\";;\n\tesac\n\tqecho=`$echo \"X$qecho\" | $Xsed -e \"$sed_quote_subst\"`\n      else\n\tqecho=`$echo \"X$echo\" | $Xsed -e \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if our run command is non-null.\n      if test -z \"$run\"; then\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) output=`$echo $output|${SED} 's,.exe$,,'` ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    outputname=`$echo $outputname|${SED} 's,.exe$,,'` ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n            output_name=`basename $output`\n            output_path=`dirname $output`\n            cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n            cwrapper=\"$output_path/$output_name.exe\"\n            $rm $cwrappersource $cwrapper\n            trap \"$rm $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    cat > $cwrappersource <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n\n   Currently, it simply execs the wrapper *script* \"/bin/sh $output\",\n   but could eventually absorb all of the scripts functionality and\n   exec $objdir/$outputname directly.\n*/\nEOF\n\t    cat >> $cwrappersource<<\"EOF\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <sys/stat.h>\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n        (((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n/* -DDEBUG is fairly common in CFLAGS.  */\n#undef DEBUG\n#if defined DEBUGWRAPPER\n# define DEBUG(format, ...) fprintf(stderr, format, __VA_ARGS__)\n#else\n# define DEBUG(format, ...)\n#endif\n\nconst char *program_name = NULL;\n\nvoid * xmalloc (size_t num);\nchar * xstrdup (const char *string);\nconst char * base_name (const char *name);\nchar * find_executable(const char *wrapper);\nint    check_executable(const char *path);\nchar * strendzap(char *str, const char *pat);\nvoid lt_fatal (const char *message, ...);\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  DEBUG(\"(main) argv[0]      : %s\\n\",argv[0]);\n  DEBUG(\"(main) program_name : %s\\n\",program_name);\n  newargz = XMALLOC(char *, argc+2);\nEOF\n\n            cat >> $cwrappersource <<EOF\n  newargz[0] = (char *) xstrdup(\"$SHELL\");\nEOF\n\n            cat >> $cwrappersource <<\"EOF\"\n  newargz[1] = find_executable(argv[0]);\n  if (newargz[1] == NULL)\n    lt_fatal(\"Couldn't find %s\", argv[0]);\n  DEBUG(\"(main) found exe at : %s\\n\",newargz[1]);\n  /* we know the script has the same name, without the .exe */\n  /* so make sure newargz[1] doesn't end in .exe */\n  strendzap(newargz[1],\".exe\");\n  for (i = 1; i < argc; i++)\n    newargz[i+1] = xstrdup(argv[i]);\n  newargz[argc+1] = NULL;\n\n  for (i=0; i<argc+1; i++)\n  {\n    DEBUG(\"(main) newargz[%d]   : %s\\n\",i,newargz[i]);\n    ;\n  }\n\nEOF\n\n            case $host_os in\n              mingw*)\n                cat >> $cwrappersource <<EOF\n  execv(\"$SHELL\",(char const **)newargz);\nEOF\n              ;;\n              *)\n                cat >> $cwrappersource <<EOF\n  execv(\"$SHELL\",newargz);\nEOF\n              ;;\n            esac\n\n            cat >> $cwrappersource <<\"EOF\"\n  return 127;\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void * p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (\"Memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1), string) : NULL\n;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char)name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable(const char * path)\n{\n  struct stat st;\n\n  DEBUG(\"(check_executable)  : %s\\n\", path ? (*path ? path : \"EMPTY!\") : \"NULL!\");\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0) &&\n      (\n        /* MinGW & native WIN32 do not support S_IXOTH or S_IXGRP */\n#if defined (S_IXOTH)\n       ((st.st_mode & S_IXOTH) == S_IXOTH) ||\n#endif\n#if defined (S_IXGRP)\n       ((st.st_mode & S_IXGRP) == S_IXGRP) ||\n#endif\n       ((st.st_mode & S_IXUSR) == S_IXUSR))\n      )\n    return 1;\n  else\n    return 0;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise */\nchar *\nfind_executable (const char* wrapper)\n{\n  int has_slash = 0;\n  const char* p;\n  const char* p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char* concat_name;\n\n  DEBUG(\"(find_executable)  : %s\\n\", wrapper ? (*wrapper ? wrapper : \"EMPTY!\") : \"NULL!\");\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char)wrapper[0]) && wrapper[1] == ':')\n  {\n    concat_name = xstrdup (wrapper);\n    if (check_executable(concat_name))\n      return concat_name;\n    XFREE(concat_name);\n  }\n  else\n  {\n#endif\n    if (IS_DIR_SEPARATOR (wrapper[0]))\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable(concat_name))\n        return concat_name;\n      XFREE(concat_name);\n    }\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n    {\n      has_slash = 1;\n      break;\n    }\n  if (!has_slash)\n  {\n    /* no slashes; search PATH */\n    const char* path = getenv (\"PATH\");\n    if (path != NULL)\n    {\n      for (p = path; *p; p = p_next)\n      {\n        const char* q;\n        size_t p_len;\n        for (q = p; *q; q++)\n          if (IS_PATH_SEPARATOR(*q))\n            break;\n        p_len = q - p;\n        p_next = (*q == '\\0' ? q : q + 1);\n        if (p_len == 0)\n        {\n          /* empty path: current directory */\n          if (getcwd (tmp, LT_PATHMAX) == NULL)\n            lt_fatal (\"getcwd failed\");\n          tmp_len = strlen(tmp);\n          concat_name = XMALLOC(char, tmp_len + 1 + strlen(wrapper) + 1);\n          memcpy (concat_name, tmp, tmp_len);\n          concat_name[tmp_len] = '/';\n          strcpy (concat_name + tmp_len + 1, wrapper);\n        }\n        else\n        {\n          concat_name = XMALLOC(char, p_len + 1 + strlen(wrapper) + 1);\n          memcpy (concat_name, p, p_len);\n          concat_name[p_len] = '/';\n          strcpy (concat_name + p_len + 1, wrapper);\n        }\n        if (check_executable(concat_name))\n          return concat_name;\n        XFREE(concat_name);\n      }\n    }\n    /* not found in PATH; assume curdir */\n  }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (\"getcwd failed\");\n  tmp_len = strlen(tmp);\n  concat_name = XMALLOC(char, tmp_len + 1 + strlen(wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable(concat_name))\n    return concat_name;\n  XFREE(concat_name);\n  return NULL;\n}\n\nchar *\nstrendzap(char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert(str != NULL);\n  assert(pat != NULL);\n\n  len = strlen(str);\n  patlen = strlen(pat);\n\n  if (patlen <= len)\n  {\n    str += len - patlen;\n    if (strcmp(str, pat) == 0)\n      *str = '\\0';\n  }\n  return str;\n}\n\nstatic void\nlt_error_core (int exit_status, const char * mode,\n          const char * message, va_list ap)\n{\n  fprintf (stderr, \"%s: %s: \", program_name, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, \"FATAL\", message, ap);\n  va_end (ap);\n}\nEOF\n          # we should really use a build-platform specific compiler\n          # here, but OTOH, the wrappers (shell script and this C one)\n          # are only useful if you want to execute the \"real\" binary.\n          # Since the \"real\" binary is built for $host, then this\n          # wrapper might as well be built for $host, too.\n          $run $LTCC $LTCFLAGS -s -o $cwrapper $cwrappersource\n          ;;\n        esac\n        $rm $output\n        trap \"$rm $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t$echo > $output \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed='${SED} -e 1s/^X//'\nsed_quote_subst='$sed_quote_subst'\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variable:\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$echo are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    echo=\\\"$qecho\\\"\n    file=\\\"\\$0\\\"\n    # Make sure echo works.\n    if test \\\"X\\$1\\\" = X--no-reexec; then\n      # Discard the --no-reexec flag, and continue.\n      shift\n    elif test \\\"X\\`(\\$echo '\\t') 2>/dev/null\\`\\\" = 'X\\t'; then\n      # Yippee, \\$echo works!\n      :\n    else\n      # Restart under the correct shell, and then maybe \\$echo will work.\n      exec $SHELL \\\"\\$0\\\" --no-reexec \\${1+\\\"\\$@\\\"}\n    fi\n  fi\\\n\"\n\t$echo >> $output \"\\\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$echo \\\"X\\$file\\\" | \\$Xsed -e 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | ${SED} -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$echo \\\"X\\$file\\\" | \\$Xsed -e 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$echo \\\"X\\$file\\\" | \\$Xsed -e 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | ${SED} -n 's/.*-> //p'\\`\n  done\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $echo >> $output \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" || \\\\\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $mkdir \\\"\\$progdir\\\"\n    else\n      $rm \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $echo >> $output \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$echo \\\"\\$relink_command_output\\\" >&2\n\t$rm \\\"\\$progdir/\\$file\\\"\n\texit $EXIT_FAILURE\n      fi\n    fi\n\n    $mv \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $rm \\\"\\$progdir/\\$program\\\";\n      $mv \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $rm \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $echo >> $output \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$echo >> $output \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $echo >> $output \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$echo \\\"X\\$$shlibpath_var\\\" | \\$Xsed -e 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t# fixup the dll searchpath if we need to.\n\tif test -n \"$dllsearchpath\"; then\n\t  $echo >> $output \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t$echo >> $output \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n\"\n\tcase $host in\n\t# Backslashes separate directories on plain windows\n\t*-*-mingw | *-*-os2*)\n\t  $echo >> $output \"\\\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\n\t*)\n\t  $echo >> $output \"\\\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\tesac\n\t$echo >> $output \"\\\n      \\$echo \\\"\\$0: cannot exec \\$program \\${1+\\\"\\$@\\\"}\\\"\n      exit $EXIT_FAILURE\n    fi\n  else\n    # The program doesn't exist.\n    \\$echo \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$echo \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    $echo \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit $EXIT_FAILURE\n  fi\nfi\\\n\"\n\tchmod +x $output\n      fi\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tgenerated=\"$generated $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\toldobjs=\"$oldobjs $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n       cmds=$old_archive_from_new_cmds\n      else\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      $echo \"X$obj\" | $Xsed -e 's%^.*/%%'\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  $echo \"copying selected object files to avoid basename conflicts...\"\n\n\t  if test -z \"$gentop\"; then\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    generated=\"$generated $gentop\"\n\n\t    $show \"${rm}r $gentop\"\n\t    $run ${rm}r \"$gentop\"\n\t    $show \"$mkdir $gentop\"\n\t    $run $mkdir \"$gentop\"\n\t    exit_status=$?\n\t    if test \"$exit_status\" -ne 0 && test ! -d \"$gentop\"; then\n\t      exit $exit_status\n\t    fi\n\t  fi\n\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    objbase=`$echo \"X$obj\" | $Xsed -e 's%^.*/%%'`\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tcounter=`expr $counter + 1`\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      $show \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      $run ln \"$obj\" \"$gentop/$newobj\" ||\n\t      $run cp \"$obj\" \"$gentop/$newobj\"\n\t      oldobjs=\"$oldobjs $gentop/$newobj\"\n\t      ;;\n\t    *) oldobjs=\"$oldobjs $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tif len=`expr \"X$cmds\" : \".*\"` &&\n\t     test \"$len\" -le \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  $echo \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  for obj in $save_oldobjs\n\t  do\n\t    oldobjs=\"$objlist $obj\"\n\t    objlist=\"$objlist $obj\"\n\t    eval test_cmds=\\\"$old_archive_cmds\\\"\n\t    if len=`expr \"X$test_cmds\" : \".*\" 2>/dev/null` &&\n\t       test \"$len\" -le \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t        RANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      save_ifs=\"$IFS\"; IFS='~'\n      for cmd in $cmds; do\n        eval cmd=\\\"$cmd\\\"\n\tIFS=\"$save_ifs\"\n\t$show \"$cmd\"\n\t$run eval \"$cmd\" || exit $?\n      done\n      IFS=\"$save_ifs\"\n    done\n\n    if test -n \"$generated\"; then\n      $show \"${rm}r$generated\"\n      $run ${rm}r$generated\n    fi\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      $show \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  var_value=`$echo \"X$var_value\" | $Xsed -e \"$sed_quote_subst\"`\n\t  relink_command=\"$var=\\\"$var_value\\\"; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$echo \"X$relink_command\" | $Xsed -e \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n\n      # Only create the output if not a dry run.\n      if test -z \"$run\"; then\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tname=`$echo \"X$deplib\" | $Xsed -e 's%^.*/%%'`\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\tif test -z \"$libdir\"; then\n\t\t  $echo \"$modename: \\`$deplib' is not a valid libtool archive\" 1>&2\n\t\t  exit $EXIT_FAILURE\n\t\tfi\n\t\tnewdependency_libs=\"$newdependency_libs $libdir/$name\"\n\t\t;;\n\t      *) newdependency_libs=\"$newdependency_libs $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      name=`$echo \"X$lib\" | $Xsed -e 's%^.*/%%'`\n\t      eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t      if test -z \"$libdir\"; then\n\t\t$echo \"$modename: \\`$lib' is not a valid libtool archive\" 1>&2\n\t\texit $EXIT_FAILURE\n\t      fi\n\t      newdlfiles=\"$newdlfiles $libdir/$name\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      name=`$echo \"X$lib\" | $Xsed -e 's%^.*/%%'`\n\t      eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t      if test -z \"$libdir\"; then\n\t\t$echo \"$modename: \\`$lib' is not a valid libtool archive\" 1>&2\n\t\texit $EXIT_FAILURE\n\t      fi\n\t      newdlprefiles=\"$newdlprefiles $libdir/$name\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlfiles=\"$newdlfiles $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlprefiles=\"$newdlprefiles $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $rm $output\n\t  # place dlname in correct position for cygwin\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll) tdlname=../bin/$dlname ;;\n\t  esac\n\t  $echo > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $echo >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      fi\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      $show \"(cd $output_objdir && $rm $outputname && $LN_S ../$outputname $outputname)\"\n      $run eval '(cd $output_objdir && $rm $outputname && $LN_S ../$outputname $outputname)' || exit $?\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n    ;;\n\n  # libtool install mode\n  install)\n    modename=\"$modename: install\"\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       $echo \"X$nonopt\" | grep shtool > /dev/null; then\n      # Aesthetically quote it.\n      arg=`$echo \"X$nonopt\" | $Xsed -e \"$sed_quote_subst\"`\n      case $arg in\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\targ=\"\\\"$arg\\\"\"\n\t;;\n      esac\n      install_prog=\"$arg \"\n      arg=\"$1\"\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    arg=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\n    case $arg in\n    *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n      arg=\"\\\"$arg\\\"\"\n      ;;\n    esac\n    install_prog=\"$install_prog$arg\"\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    for arg\n    do\n      if test -n \"$dest\"; then\n\tfiles=\"$files $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f) \n      \tcase \" $install_prog \" in\n\t*[\\\\\\ /]cp\\ *) ;;\n\t*) prev=$arg ;;\n\tesac\n\t;;\n      -g | -m | -o) prev=$arg ;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      arg=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\n      case $arg in\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\targ=\"\\\"$arg\\\"\"\n\t;;\n      esac\n      install_prog=\"$install_prog $arg\"\n    done\n\n    if test -z \"$install_prog\"; then\n      $echo \"$modename: you must specify an install program\" 1>&2\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    if test -n \"$prev\"; then\n      $echo \"$modename: the \\`$prev' option requires an argument\" 1>&2\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\t$echo \"$modename: no file or destination specified\" 1>&2\n      else\n\t$echo \"$modename: you must specify a destination\" 1>&2\n      fi\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    # Strip any trailing slash from the destination.\n    dest=`$echo \"X$dest\" | $Xsed -e 's%/$%%'`\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      destdir=`$echo \"X$dest\" | $Xsed -e 's%/[^/]*$%%'`\n      test \"X$destdir\" = \"X$dest\" && destdir=.\n      destname=`$echo \"X$dest\" | $Xsed -e 's%^.*/%%'`\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files\n      if test \"$#\" -gt 2; then\n\t$echo \"$modename: \\`$dest' is not a directory\" 1>&2\n\t$echo \"$help\" 1>&2\n\texit $EXIT_FAILURE\n      fi\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  $echo \"$modename: \\`$destdir' must be an absolute directory name\" 1>&2\n\t  $echo \"$help\" 1>&2\n\t  exit $EXIT_FAILURE\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tstaticlibs=\"$staticlibs $file\"\n\t;;\n\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tif (${SED} -e '2q' $file | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then :\n\telse\n\t  $echo \"$modename: \\`$file' is not a valid libtool archive\" 1>&2\n\t  $echo \"$help\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\t# If there is no directory component, then add one.\n\tcase $file in\n\t*/* | *\\\\*) . $file ;;\n\t*) . ./$file ;;\n\tesac\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) current_libdirs=\"$current_libdirs $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) future_libdirs=\"$future_libdirs $libdir\" ;;\n\t  esac\n\tfi\n\n\tdir=`$echo \"X$file\" | $Xsed -e 's%/[^/]*$%%'`/\n\ttest \"X$dir\" = \"X$file/\" && dir=\n\tdir=\"$dir$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$echo \"$destdir\" | $SED \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  if test \"$inst_prefix_dir\" = \"$destdir\"; then\n\t    $echo \"$modename: error: cannot install \\`$file' to a directory not ending in $libdir\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$echo \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$echo \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  $echo \"$modename: warning: relinking \\`$file'\" 1>&2\n\t  $show \"$relink_command\"\n\t  if $run eval \"$relink_command\"; then :\n\t  else\n\t    $echo \"$modename: error: relink \\`$file' with the above command before installing it\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names\n\tif test -n \"$2\"; then\n\t  realname=\"$2\"\n\t  shift\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  $show \"$install_prog $dir/$srcname $destdir/$realname\"\n\t  $run eval \"$install_prog $dir/$srcname $destdir/$realname\" || exit $?\n\t  if test -n \"$stripme\" && test -n \"$striplib\"; then\n\t    $show \"$striplib $destdir/$realname\"\n\t    $run eval \"$striplib $destdir/$realname\" || exit $?\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      if test \"$linkname\" != \"$realname\"; then\n                $show \"(cd $destdir && { $LN_S -f $realname $linkname || { $rm $linkname && $LN_S $realname $linkname; }; })\"\n                $run eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $rm $linkname && $LN_S $realname $linkname; }; })\"\n\t      fi\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  cmds=$postinstall_cmds\n\t  save_ifs=\"$IFS\"; IFS='~'\n\t  for cmd in $cmds; do\n\t    IFS=\"$save_ifs\"\n\t    eval cmd=\\\"$cmd\\\"\n\t    $show \"$cmd\"\n\t    $run eval \"$cmd\" || {\n\t      lt_exit=$?\n\n\t      # Restore the uninstalled library and exit\n\t      if test \"$mode\" = relink; then\n\t\t$run eval '(cd $output_objdir && $rm ${realname}T && $mv ${realname}U $realname)'\n\t      fi\n\n\t      exit $lt_exit\n\t    }\n\t  done\n\t  IFS=\"$save_ifs\"\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tname=`$echo \"X$file\" | $Xsed -e 's%^.*/%%'`\n\tinstname=\"$dir/$name\"i\n\t$show \"$install_prog $instname $destdir/$name\"\n\t$run eval \"$install_prog $instname $destdir/$name\" || exit $?\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && staticlibs=\"$staticlibs $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  destfile=`$echo \"X$file\" | $Xsed -e 's%^.*/%%'`\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  staticdest=`$echo \"X$destfile\" | $Xsed -e \"$lo2o\"`\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  $echo \"$modename: cannot copy a libtool object to \\`$destfile'\" 1>&2\n\t  $echo \"$help\" 1>&2\n\t  exit $EXIT_FAILURE\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\tif test -n \"$destfile\"; then\n\t  $show \"$install_prog $file $destfile\"\n\t  $run eval \"$install_prog $file $destfile\" || exit $?\n\tfi\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  staticobj=`$echo \"X$file\" | $Xsed -e \"$lo2o\"`\n\n\t  $show \"$install_prog $staticobj $staticdest\"\n\t  $run eval \"$install_prog \\$staticobj \\$staticdest\" || exit $?\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  destfile=`$echo \"X$file\" | $Xsed -e 's%^.*/%%'`\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      file=`$echo $file|${SED} 's,.exe$,,'`\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin*|*mingw*)\n\t    wrapper=`$echo $file | ${SED} -e 's,.exe$,,'`\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif (${SED} -e '4q' $wrapper | grep \"^# Generated by .*$PACKAGE\")>/dev/null 2>&1; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  # Note that it is not necessary on cygwin/mingw to append a dot to\n\t  # foo even if both foo and FILE.exe exist: automatic-append-.exe\n\t  # behavior happens only for exec(3), not for open(2)!  Also, sourcing\n\t  # `FILE.' does not work on cygwin managed mounts.\n\t  #\n\t  # If there is no directory component, then add one.\n\t  case $wrapper in\n\t  */* | *\\\\*) . ${wrapper} ;;\n\t  *) . ./${wrapper} ;;\n\t  esac\n\n\t  # Check the variables that should have been set.\n\t  if test -z \"$notinst_deplibs\"; then\n\t    $echo \"$modename: invalid libtool wrapper script \\`$wrapper'\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      # If there is no directory component, then add one.\n\t      case $lib in\n\t      */* | *\\\\*) . $lib ;;\n\t      *) . ./$lib ;;\n\t      esac\n\t    fi\n\t    libfile=\"$libdir/\"`$echo \"X$lib\" | $Xsed -e 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      $echo \"$modename: warning: \\`$lib' has not been installed in \\`$libdir'\" 1>&2\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  # Note that it is not necessary on cygwin/mingw to append a dot to\n\t  # foo even if both foo and FILE.exe exist: automatic-append-.exe\n\t  # behavior happens only for exec(3), not for open(2)!  Also, sourcing\n\t  # `FILE.' does not work on cygwin managed mounts.\n\t  #\n\t  # If there is no directory component, then add one.\n\t  case $wrapper in\n\t  */* | *\\\\*) . ${wrapper} ;;\n\t  *) . ./${wrapper} ;;\n\t  esac\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    if test \"$finalize\" = yes && test -z \"$run\"; then\n\t      tmpdir=`func_mktempdir`\n\t      file=`$echo \"X$file$stripped_ext\" | $Xsed -e 's%^.*/%%'`\n\t      outputname=\"$tmpdir/$file\"\n\t      # Replace the output file specification.\n\t      relink_command=`$echo \"X$relink_command\" | $Xsed -e 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t      $show \"$relink_command\"\n\t      if $run eval \"$relink_command\"; then :\n\t      else\n\t\t$echo \"$modename: error: relink \\`$file' with the above command before installing it\" 1>&2\n\t\t${rm}r \"$tmpdir\"\n\t\tcontinue\n\t      fi\n\t      file=\"$outputname\"\n\t    else\n\t      $echo \"$modename: warning: cannot relink \\`$file'\" 1>&2\n\t    fi\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$echo \"X$file$stripped_ext\" | $Xsed -e \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway \n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    destfile=`$echo $destfile | ${SED} -e 's,.exe$,,'`\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\t$show \"$install_prog$stripme $file $destfile\"\n\t$run eval \"$install_prog\\$stripme \\$file \\$destfile\" || exit $?\n\ttest -n \"$outputname\" && ${rm}r \"$tmpdir\"\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      name=`$echo \"X$file\" | $Xsed -e 's%^.*/%%'`\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n\n      $show \"$install_prog $file $oldlib\"\n      $run eval \"$install_prog \\$file \\$oldlib\" || exit $?\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\t$show \"$old_striplib $oldlib\"\n\t$run eval \"$old_striplib $oldlib\" || exit $?\n      fi\n\n      # Do each command in the postinstall commands.\n      cmds=$old_postinstall_cmds\n      save_ifs=\"$IFS\"; IFS='~'\n      for cmd in $cmds; do\n\tIFS=\"$save_ifs\"\n\teval cmd=\\\"$cmd\\\"\n\t$show \"$cmd\"\n\t$run eval \"$cmd\" || exit $?\n      done\n      IFS=\"$save_ifs\"\n    done\n\n    if test -n \"$future_libdirs\"; then\n      $echo \"$modename: warning: remember to run \\`$progname --finish$future_libdirs'\" 1>&2\n    fi\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      test -n \"$run\" && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n    ;;\n\n  # libtool finish mode\n  finish)\n    modename=\"$modename: finish\"\n    libdirs=\"$nonopt\"\n    admincmds=\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for dir\n      do\n\tlibdirs=\"$libdirs $dir\"\n      done\n\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  cmds=$finish_cmds\n\t  save_ifs=\"$IFS\"; IFS='~'\n\t  for cmd in $cmds; do\n\t    IFS=\"$save_ifs\"\n\t    eval cmd=\\\"$cmd\\\"\n\t    $show \"$cmd\"\n\t    $run eval \"$cmd\" || admincmds=\"$admincmds\n       $cmd\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $run eval \"$cmds\" || admincmds=\"$admincmds\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    test \"$show\" = : && exit $EXIT_SUCCESS\n\n    $echo \"X----------------------------------------------------------------------\" | $Xsed\n    $echo \"Libraries have been installed in:\"\n    for libdir in $libdirs; do\n      $echo \"   $libdir\"\n    done\n    $echo\n    $echo \"If you ever happen to want to link against installed libraries\"\n    $echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n    $echo \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n    $echo \"flag during linking and do at least one of the following:\"\n    if test -n \"$shlibpath_var\"; then\n      $echo \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n      $echo \"     during execution\"\n    fi\n    if test -n \"$runpath_var\"; then\n      $echo \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n      $echo \"     during linking\"\n    fi\n    if test -n \"$hardcode_libdir_flag_spec\"; then\n      libdir=LIBDIR\n      eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n      $echo \"   - use the \\`$flag' linker flag\"\n    fi\n    if test -n \"$admincmds\"; then\n      $echo \"   - have your system administrator run these commands:$admincmds\"\n    fi\n    if test -f /etc/ld.so.conf; then\n      $echo \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n    fi\n    $echo\n    $echo \"See any operating system documentation about shared libraries for\"\n    $echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n    $echo \"X----------------------------------------------------------------------\" | $Xsed\n    exit $EXIT_SUCCESS\n    ;;\n\n  # libtool execute mode\n  execute)\n    modename=\"$modename: execute\"\n\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    if test -z \"$cmd\"; then\n      $echo \"$modename: you must specify a COMMAND\" 1>&2\n      $echo \"$help\"\n      exit $EXIT_FAILURE\n    fi\n\n    # Handle -dlopen flags immediately.\n    for file in $execute_dlfiles; do\n      if test ! -f \"$file\"; then\n\t$echo \"$modename: \\`$file' is not a file\" 1>&2\n\t$echo \"$help\" 1>&2\n\texit $EXIT_FAILURE\n      fi\n\n      dir=\n      case $file in\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tif (${SED} -e '2q' $file | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then :\n\telse\n\t  $echo \"$modename: \\`$lib' is not a valid libtool archive\" 1>&2\n\t  $echo \"$help\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\n\t# If there is no directory component, then add one.\n\tcase $file in\n\t*/* | *\\\\*) . $file ;;\n\t*) . ./$file ;;\n\tesac\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && $echo \"$modename: warning: \\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tdir=`$echo \"X$file\" | $Xsed -e 's%/[^/]*$%%'`\n\ttest \"X$dir\" = \"X$file\" && dir=.\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  dir=\"$dir/$objdir\"\n\telse\n\t  $echo \"$modename: cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tdir=`$echo \"X$file\" | $Xsed -e 's%/[^/]*$%%'`\n\ttest \"X$dir\" = \"X$file\" && dir=.\n\t;;\n\n      *)\n\t$echo \"$modename: warning \\`-dlopen' is ignored for non-libtool libraries and objects\" 1>&2\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -*) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif (${SED} -e '4q' $file | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\t  # If there is no directory component, then add one.\n\t  case $file in\n\t  */* | *\\\\*) . $file ;;\n\t  *) . ./$file ;;\n\t  esac\n\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      file=`$echo \"X$file\" | $Xsed -e \"$sed_quote_subst\"`\n      args=\"$args \\\"$file\\\"\"\n    done\n\n    if test -z \"$run\"; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      if test \"${save_LC_ALL+set}\" = set; then\n\tLC_ALL=\"$save_LC_ALL\"; export LC_ALL\n      fi\n      if test \"${save_LANG+set}\" = set; then\n\tLANG=\"$save_LANG\"; export LANG\n      fi\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$echo \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\t$echo \"export $shlibpath_var\"\n      fi\n      $echo \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n    ;;\n\n  # libtool clean and uninstall mode\n  clean | uninstall)\n    modename=\"$modename: $mode\"\n    rm=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) rm=\"$rm $arg\"; rmforce=yes ;;\n      -*) rm=\"$rm $arg\" ;;\n      *) files=\"$files $arg\" ;;\n      esac\n    done\n\n    if test -z \"$rm\"; then\n      $echo \"$modename: you must specify an RM program\" 1>&2\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    rmdirs=\n\n    origobjdir=\"$objdir\"\n    for file in $files; do\n      dir=`$echo \"X$file\" | $Xsed -e 's%/[^/]*$%%'`\n      if test \"X$dir\" = \"X$file\"; then\n\tdir=.\n\tobjdir=\"$origobjdir\"\n      else\n\tobjdir=\"$dir/$origobjdir\"\n      fi\n      name=`$echo \"X$file\" | $Xsed -e 's%^.*/%%'`\n      test \"$mode\" = uninstall && objdir=\"$dir\"\n\n      # Remember objdir for removal later, being careful to avoid duplicates\n      if test \"$mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $objdir \"*) ;;\n\t  *) rmdirs=\"$rmdirs $objdir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if (test -L \"$file\") >/dev/null 2>&1 \\\n\t|| (test -h \"$file\") >/dev/null 2>&1 \\\n\t|| test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif (${SED} -e '2q' $file | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\t  . $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    rmfiles=\"$rmfiles $objdir/$n\"\n\t  done\n\t  test -n \"$old_library\" && rmfiles=\"$rmfiles $objdir/$old_library\"\n\n\t  case \"$mode\" in\n\t  clean)\n\t    case \"  $library_names \" in\n\t    # \"  \" in the beginning catches empty $dlname\n\t    *\" $dlname \"*) ;;\n\t    *) rmfiles=\"$rmfiles $objdir/$dlname\" ;;\n\t    esac\n\t     test -n \"$libdir\" && rmfiles=\"$rmfiles $objdir/$name $objdir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      cmds=$postuninstall_cmds\n\t      save_ifs=\"$IFS\"; IFS='~'\n\t      for cmd in $cmds; do\n\t\tIFS=\"$save_ifs\"\n\t\teval cmd=\\\"$cmd\\\"\n\t\t$show \"$cmd\"\n\t\t$run eval \"$cmd\"\n\t\tif test \"$?\" -ne 0 && test \"$rmforce\" != yes; then\n\t\t  exit_status=1\n\t\tfi\n\t      done\n\t      IFS=\"$save_ifs\"\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      cmds=$old_postuninstall_cmds\n\t      save_ifs=\"$IFS\"; IFS='~'\n\t      for cmd in $cmds; do\n\t\tIFS=\"$save_ifs\"\n\t\teval cmd=\\\"$cmd\\\"\n\t\t$show \"$cmd\"\n\t\t$run eval \"$cmd\"\n\t\tif test \"$?\" -ne 0 && test \"$rmforce\" != yes; then\n\t\t  exit_status=1\n\t\tfi\n\t      done\n\t      IFS=\"$save_ifs\"\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif (${SED} -e '2q' $file | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\n\t  # Read the .lo file\n\t  . $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" \\\n\t     && test \"$pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" \\\n\t     && test \"$non_pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    file=`$echo $file|${SED} 's,.exe$,,'`\n\t    noexename=`$echo $name|${SED} 's,.exe$,,'`\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    rmfiles=\"$rmfiles $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if (${SED} -e '4q' $file | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\t    relink_command=\n\t    . $dir/$noexename\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    rmfiles=\"$rmfiles $objdir/$name $objdir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      rmfiles=\"$rmfiles $objdir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      rmfiles=\"$rmfiles $objdir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      $show \"$rm $rmfiles\"\n      $run $rm $rmfiles || exit_status=1\n    done\n    objdir=\"$origobjdir\"\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\t$show \"rmdir $dir\"\n\t$run rmdir $dir >/dev/null 2>&1\n      fi\n    done\n\n    exit $exit_status\n    ;;\n\n  \"\")\n    $echo \"$modename: you must specify a MODE\" 1>&2\n    $echo \"$generic_help\" 1>&2\n    exit $EXIT_FAILURE\n    ;;\n  esac\n\n  if test -z \"$exec_cmd\"; then\n    $echo \"$modename: invalid operation mode \\`$mode'\" 1>&2\n    $echo \"$generic_help\" 1>&2\n    exit $EXIT_FAILURE\n  fi\nfi # test -z \"$show_help\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec $exec_cmd\n  exit $EXIT_FAILURE\nfi\n\n# We need to display help for each of the modes.\ncase $mode in\n\"\") $echo \\\n\"Usage: $modename [OPTION]... [MODE-ARG]...\n\nProvide generalized library-building support services.\n\n    --config          show all configuration variables\n    --debug           enable verbose shell tracing\n-n, --dry-run         display commands without modifying any files\n    --features        display basic configuration information and exit\n    --finish          same as \\`--mode=finish'\n    --help            display this help message and exit\n    --mode=MODE       use operation mode MODE [default=inferred from MODE-ARGS]\n    --quiet           same as \\`--silent'\n    --silent          don't print informational messages\n    --tag=TAG         use configuration variables from tag TAG\n    --version         print version information\n\nMODE must be one of the following:\n\n      clean           remove files from the build directory\n      compile         compile a source file into a libtool object\n      execute         automatically set library path, then run a program\n      finish          complete the installation of libtool libraries\n      install         install libraries or executables\n      link            create a library or an executable\n      uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  Try \\`$modename --help --mode=MODE' for\na more detailed description of MODE.\n\nReport bugs to <bug-libtool@gnu.org>.\"\n  exit $EXIT_SUCCESS\n  ;;\n\nclean)\n  $echo \\\n\"Usage: $modename [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n  ;;\n\ncompile)\n  $echo \\\n\"Usage: $modename [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -prefer-pic       try to building PIC objects only\n  -prefer-non-pic   try to building non-PIC objects only\n  -static           always build a \\`.o' file suitable for static linking\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n  ;;\n\nexecute)\n  $echo \\\n\"Usage: $modename [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n  ;;\n\nfinish)\n  $echo \\\n\"Usage: $modename [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n  ;;\n\ninstall)\n  $echo \\\n\"Usage: $modename [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n  ;;\n\nlink)\n  $echo \\\n\"Usage: $modename [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n\t\t    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n\t\t    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -static           do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n\t\t    specify library version info [each variable defaults to 0]\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n  ;;\n\nuninstall)\n  $echo \\\n\"Usage: $modename [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n  ;;\n\n*)\n  $echo \"$modename: invalid operation mode \\`$mode'\" 1>&2\n  $echo \"$help\" 1>&2\n  exit $EXIT_FAILURE\n  ;;\nesac\n\n$echo\n$echo \"Try \\`$modename --help' for more information about other modes.\"\n\nexit $?\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\ndisable_libs=shared\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\ndisable_libs=static\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/dyn_load.c": "/*\n * Copyright (c) 1991-1994 by Xerox Corporation.  All rights reserved.\n * Copyright (c) 1997 by Silicon Graphics.  All rights reserved.\n *\n * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n *\n * Permission is hereby granted to use or copy this program\n * for any purpose,  provided the above notices are retained on all copies.\n * Permission to modify the code and to distribute modified code is granted,\n * provided the above notices are retained, and a notice that the code was\n * modified is included with the above copyright notice.\n *\n * Original author: Bill Janssen\n * Heavily modified by Hans Boehm and others\n */\n\n/*\n * This is incredibly OS specific code for tracking down data sections in\n * dynamic libraries.  There appears to be no way of doing this quickly\n * without groveling through undocumented data structures.  We would argue\n * that this is a bug in the design of the dlopen interface.  THIS CODE\n * MAY BREAK IN FUTURE OS RELEASES.  If this matters to you, don't hesitate\n * to let your vendor know ...\n *\n * None of this is safe with dlclose and incremental collection.\n * But then not much of anything is safe in the presence of dlclose.\n */\n#if (defined(__linux__) || defined(__GLIBC__) || defined(__GNU__)) \\\n     && !defined(_GNU_SOURCE)\n    /* Can't test LINUX, since this must be defined before other includes */\n#   define _GNU_SOURCE\n#endif\n#if !defined(MACOS) && !defined(_WIN32_WCE)\n#  include <sys/types.h>\n#endif\n#include \"private/gc_priv.h\"\n\n/* BTL: avoid circular redefinition of dlopen if GC_SOLARIS_THREADS defined */\n# if (defined(GC_PTHREADS) || defined(GC_SOLARIS_THREADS)) \\\n      && defined(dlopen) && !defined(GC_USE_LD_WRAP)\n    /* To support threads in Solaris, gc.h interposes on dlopen by       */\n    /* defining \"dlopen\" to be \"GC_dlopen\", which is implemented below.  */\n    /* However, both GC_FirstDLOpenedLinkMap() and GC_dlopen() use the   */\n    /* real system dlopen() in their implementation. We first remove     */\n    /* gc.h's dlopen definition and restore it later, after GC_dlopen(). */\n#   undef dlopen\n#   define GC_must_restore_redefined_dlopen\n# else\n#   undef GC_must_restore_redefined_dlopen\n# endif\n\n/* A user-supplied routine that is called to determine if a DSO must\n   be scanned by the gc.  */\nstatic int (*GC_has_static_roots)(const char *, void *, size_t);\n\n\n#if (defined(DYNAMIC_LOADING) || defined(MSWIN32) || defined(MSWINCE)) \\\n    && !defined(PCR)\n#if !defined(SOLARISDL) && !defined(IRIX5) && \\\n    !defined(MSWIN32) && !defined(MSWINCE) && \\\n    !(defined(ALPHA) && defined(OSF1)) && \\\n    !defined(HPUX) && !(defined(LINUX) && defined(__ELF__)) && \\\n    !defined(AIX) && !defined(SCO_ELF) && !defined(DGUX) && \\\n    !(defined(FREEBSD) && defined(__ELF__)) && \\\n    !(defined(NETBSD) && defined(__ELF__)) && !defined(HURD) && \\\n    !defined(DARWIN) && !defined(CYGWIN32) && !defined(HAIKU)\n --> We only know how to find data segments of dynamic libraries for the\n --> above.  Additional SVR4 variants might not be too\n --> hard to add.\n#endif\n\n#include <stdio.h>\n#ifdef SOLARISDL\n#   include <sys/elf.h>\n#   include <dlfcn.h>\n#   include <link.h>\n#endif\n\n#if defined(NETBSD)\n#   include <machine/elf_machdep.h>\n#   define ELFSIZE ARCH_ELFSIZE\n#endif\n\n#if defined(HAIKU)\n//  purposefully empty\n#endif\n\n#if defined(LINUX) && defined(__ELF__) || defined(SCO_ELF) || \\\n    (defined(FREEBSD) && defined(__ELF__)) || defined(DGUX) || \\\n    (defined(NETBSD) && defined(__ELF__)) || defined(HURD)\n#   include <stddef.h>\n#   include <elf.h>\n#   include <link.h>\n#endif\n\n/* Newer versions of GNU/Linux define this macro.  We\n * define it similarly for any ELF systems that don't.  */\n#  ifndef ElfW\n#    if defined(FREEBSD)\n#      if __ELF_WORD_SIZE == 32\n#        define ElfW(type) Elf32_##type\n#      else\n#        define ElfW(type) Elf64_##type\n#      endif\n#    elif defined(NETBSD)\n#      if ELFSIZE == 32\n#        define ElfW(type) Elf32_##type\n#      else\n#        define ElfW(type) Elf64_##type\n#      endif\n#    else\n#      if !defined(ELF_CLASS) || ELF_CLASS == ELFCLASS32\n#        define ElfW(type) Elf32_##type\n#      else\n#        define ElfW(type) Elf64_##type\n#      endif\n#    endif\n#  endif\n\n#if defined(SOLARISDL) && !defined(USE_PROC_FOR_LIBRARIES)\n\n#ifdef LINT\n    Elf32_Dyn _DYNAMIC;\n#endif\n\nstatic struct link_map *\nGC_FirstDLOpenedLinkMap()\n{\n    extern ElfW(Dyn) _DYNAMIC;\n    ElfW(Dyn) *dp;\n    struct r_debug *r;\n    static struct link_map * cachedResult = 0;\n    static ElfW(Dyn) *dynStructureAddr = 0;\n    \t\t\t/* BTL: added to avoid Solaris 5.3 ld.so _DYNAMIC bug */\n\n#   ifdef SUNOS53_SHARED_LIB\n\t/* BTL: Avoid the Solaris 5.3 bug that _DYNAMIC isn't being set\t*/\n\t/* up properly in dynamically linked .so's. This means we have\t*/\n\t/* to use its value in the set of original object files loaded\t*/\n\t/* at program startup.\t\t\t\t\t\t*/\n\tif( dynStructureAddr == 0 ) {\n\t  void* startupSyms = dlopen(0, RTLD_LAZY);\n\t  dynStructureAddr = (ElfW(Dyn)*)dlsym(startupSyms, \"_DYNAMIC\");\n\t\t}\n#   else\n\tdynStructureAddr = &_DYNAMIC;\n#   endif\n\n    if( dynStructureAddr == 0) {\n        return(0);\n    }\n    if( cachedResult == 0 ) {\n        int tag;\n        for( dp = ((ElfW(Dyn) *)(&_DYNAMIC)); (tag = dp->d_tag) != 0; dp++ ) {\n            if( tag == DT_DEBUG ) {\n                struct link_map *lm\n                        = ((struct r_debug *)(dp->d_un.d_ptr))->r_map;\n                if( lm != 0 ) cachedResult = lm->l_next; /* might be NIL */\n                break;\n            }\n        }\n    }\n    return cachedResult;\n}\n\n#endif /* SOLARISDL ... */\n\n/* BTL: added to fix circular dlopen definition if GC_SOLARIS_THREADS defined */\n# if defined(GC_must_restore_redefined_dlopen)\n#   define dlopen GC_dlopen\n# endif\n\n# if defined(SOLARISDL)\n/* Add dynamic library data sections to the root set.\t\t*/\n# if !defined(PCR) && !defined(GC_SOLARIS_THREADS) && defined(THREADS)\n\t--> fix mutual exclusion with dlopen\n# endif\n\n# ifndef USE_PROC_FOR_LIBRARIES\nvoid GC_register_dynamic_libraries()\n{\n  struct link_map *lm = GC_FirstDLOpenedLinkMap();\n  \n\n  for (lm = GC_FirstDLOpenedLinkMap();\n       lm != (struct link_map *) 0;  lm = lm->l_next)\n    {\n\tElfW(Ehdr) * e;\n        ElfW(Phdr) * p;\n        unsigned long offset;\n        char * start;\n        register int i;\n        \n\te = (ElfW(Ehdr) *) lm->l_addr;\n        p = ((ElfW(Phdr) *)(((char *)(e)) + e->e_phoff));\n        offset = ((unsigned long)(lm->l_addr));\n        for( i = 0; i < (int)(e->e_phnum); ((i++),(p++)) ) {\n          switch( p->p_type ) {\n            case PT_LOAD:\n              {\n                if( !(p->p_flags & PF_W) ) break;\n                start = ((char *)(p->p_vaddr)) + offset;\n                GC_add_roots_inner(\n                  start,\n                  start + p->p_memsz,\n                  TRUE\n                );\n              }\n              break;\n            default:\n              break;\n          }\n\t}\n    }\n}\n\n# endif /* !USE_PROC ... */\n# endif /* SOLARISDL */\n\n#if defined(LINUX) && defined(__ELF__) || defined(SCO_ELF) || \\\n    (defined(FREEBSD) && defined(__ELF__)) || defined(DGUX) || \\\n    (defined(NETBSD) && defined(__ELF__)) || defined(HURD) \\\n    defined(HAIKU)\n\n\n#ifdef USE_PROC_FOR_LIBRARIES\n\n#include <string.h>\n\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n\n#define MAPS_BUF_SIZE (32*1024)\n\nextern ssize_t GC_repeat_read(int fd, char *buf, size_t count);\n\t/* Repeatedly read until buffer is filled, or EOF is encountered */\n\t/* Defined in os_dep.c.  \t\t\t\t\t */\n\nchar *GC_parse_map_entry(char *buf_ptr, ptr_t *start, ptr_t *end,\n                         char **prot, unsigned int *maj_dev,\n\t\t\t char **mapping_name);\nchar *GC_get_maps(void);\n\t/* From os_dep.c\t*/\n\nword GC_register_map_entries(char *maps)\n{\n    char *prot;\n    char *buf_ptr = maps;\n    int count;\n    ptr_t start, end;\n    unsigned int maj_dev;\n    ptr_t least_ha, greatest_ha;\n    unsigned i;\n    ptr_t datastart = (ptr_t)(DATASTART);\n\n    /* Compute heap bounds. FIXME: Should work if heap and roots are \t*/\n    /* interleaved?\t\t\t\t\t\t\t*/\n\tleast_ha = (ptr_t)(word)(-1);\n\tgreatest_ha = 0;\n\tfor (i = 0; i < GC_n_heap_sects; ++i) {\n\t    ptr_t sect_start = GC_heap_sects[i].hs_start;\n\t    ptr_t sect_end = sect_start + GC_heap_sects[i].hs_bytes;\n\t    if (sect_start < least_ha) least_ha = sect_start;\n\t    if (sect_end > greatest_ha) greatest_ha = sect_end;\n        }\n    \tif (greatest_ha < (ptr_t)GC_scratch_last_end_ptr)\n\t    greatest_ha = (ptr_t)GC_scratch_last_end_ptr; \n\n    for (;;) {\n        buf_ptr = GC_parse_map_entry(buf_ptr, &start, &end, &prot, &maj_dev, 0);\n\tif (buf_ptr == NULL) return 1;\n\tif (prot[1] == 'w') {\n\t    /* This is a writable mapping.  Add it to\t\t*/\n\t    /* the root set unless it is already otherwise\t*/\n\t    /* accounted for.\t\t\t\t\t*/\n\t    if (start <= GC_stackbottom && end >= GC_stackbottom) {\n\t\t/* Stack mapping; discard\t*/\n\t\tcontinue;\n\t    }\n#\t    ifdef THREADS\n\t      /* This may fail, since a thread may already be \t\t*/\n\t      /* unregistered, but its thread stack may still be there.\t*/\n\t      /* That can fail because the stack may disappear while\t*/\n\t      /* we're marking.  Thus the marker is, and has to be\t*/\n\t      /* prepared to recover from segmentation faults.\t\t*/\n\t      if (GC_segment_is_thread_stack(start, end)) continue;\n\t      /* FIXME: REDIRECT_MALLOC actually works with threads on\t*/\n\t      /* LINUX/IA64 if we omit this check.  The problem is that\t*/\n\t      /* thread stacks contain pointers to dynamic thread\t*/\n\t      /* vectors, which may be reused due to thread caching.\t*/\n\t      /* Currently they may not be marked if the thread is \t*/\n\t      /* still live.\t\t\t\t\t\t*/\n\t      /* For dead threads, we trace the whole stack, which is\t*/\n\t      /* very suboptimal for performance reasons.\t\t*/\n#\t    endif\n\t    /* We no longer exclude the main data segment.\t\t*/\n\t    if (start < least_ha && end > least_ha) {\n\t\tend = least_ha;\n\t    }\n\t    if (start < greatest_ha && end > greatest_ha) {\n\t\tstart = greatest_ha;\n\t    }\n\t    if (start >= least_ha && end <= greatest_ha) continue;\n\t    GC_add_roots_inner((char *)start, (char *)end, TRUE);\n\t}\n    }\n    return 1;\n}\n\nvoid GC_register_dynamic_libraries()\n{\n    if (!GC_register_map_entries(GC_get_maps()))\n        ABORT(\"Failed to read /proc for library registration.\");\n}\n\n/* We now take care of the main data segment ourselves: */\nGC_bool GC_register_main_static_data()\n{\n    return FALSE;\n}\n  \n# define HAVE_REGISTER_MAIN_STATIC_DATA\n\n#endif /* USE_PROC_FOR_LIBRARIES */\n\n#if !defined(USE_PROC_FOR_LIBRARIES)\n/* The following is the preferred way to walk dynamic libraries\t*/\n/* For glibc 2.2.4+.  Unfortunately, it doesn't work for older\t*/\n/* versions.  Thanks to Jakub Jelinek for most of the code.\t*/\n\n# if (defined(LINUX) || defined (__GLIBC__)) /* Are others OK here, too? */ \\\n     && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2) \\\n         || (__GLIBC__ == 2 && __GLIBC_MINOR__ == 2 && defined(DT_CONFIG))) \n\n/* We have the header files for a glibc that includes dl_iterate_phdr.\t*/\n/* It may still not be available in the library on the target system.   */\n/* Thus we also treat it as a weak symbol.\t\t\t\t*/\n#define HAVE_DL_ITERATE_PHDR\n\nstatic int GC_register_dynlib_callback(info, size, ptr)\n     struct dl_phdr_info * info;\n     size_t size;\n     void * ptr;\n{\n  const ElfW(Phdr) * p;\n  char * start;\n  register int i;\n\n  /* Make sure struct dl_phdr_info is at least as big as we need.  */\n  if (size < offsetof (struct dl_phdr_info, dlpi_phnum)\n      + sizeof (info->dlpi_phnum))\n    return -1;\n\n  p = info->dlpi_phdr;\n  for( i = 0; i < (int)(info->dlpi_phnum); ((i++),(p++)) ) {\n    switch( p->p_type ) {\n      case PT_LOAD:\n\t{\n\t  if( !(p->p_flags & PF_W) ) break;\n\t  start = ((char *)(p->p_vaddr)) + info->dlpi_addr;\n\n\t  if (GC_has_static_roots\n\t      && !GC_has_static_roots(info->dlpi_name, start, p->p_memsz))\n\t    break;\n\n\t  GC_add_roots_inner(start, start + p->p_memsz, TRUE);\n\t}\n      break;\n      default:\n\tbreak;\n    }\n  }\n\n  * (int *)ptr = 1;\t/* Signal that we were called */\n  return 0;\n}     \n\n/* Return TRUE if we succeed, FALSE if dl_iterate_phdr wasn't there. */\n\n#pragma weak dl_iterate_phdr\n\nGC_bool GC_register_dynamic_libraries_dl_iterate_phdr()\n{\n  if (dl_iterate_phdr) {\n    int did_something = 0;\n    dl_iterate_phdr(GC_register_dynlib_callback, &did_something);\n    if (!did_something) {\n\t/* dl_iterate_phdr may forget the static data segment in\t*/\n\t/* statically linked executables.\t\t\t\t*/\n\tGC_add_roots_inner(DATASTART, (char *)(DATAEND), TRUE);\n#       if defined(DATASTART2)\n          GC_add_roots_inner(DATASTART2, (char *)(DATAEND2), TRUE);\n#       endif\n    }\n\n    return TRUE;\n  } else {\n    return FALSE;\n  }\n}\n\n/* Do we need to separately register the main static data segment? */\nGC_bool GC_register_main_static_data()\n{\n  return (dl_iterate_phdr == 0);\n}\n\n#define HAVE_REGISTER_MAIN_STATIC_DATA\n\n# else /* !LINUX || version(glibc) < 2.2.4 */\n\n/* Dynamic loading code for Linux running ELF. Somewhat tested on\n * Linux/x86, untested but hopefully should work on Linux/Alpha. \n * This code was derived from the Solaris/ELF support. Thanks to\n * whatever kind soul wrote that.  - Patrick Bridges */\n\n/* This doesn't necessarily work in all cases, e.g. with preloaded\n * dynamic libraries.\t\t\t\t\t\t*/\n\n#if defined(NETBSD)\n#  include <sys/exec_elf.h>\n/* for compatibility with 1.4.x */\n#  ifndef DT_DEBUG\n#  define DT_DEBUG     21\n#  endif\n#  ifndef PT_LOAD\n#  define PT_LOAD      1\n#  endif\n#  ifndef PF_W\n#  define PF_W         2\n#  endif\n#else\n#  include <elf.h>\n#endif\n#include <link.h>\n\n# endif\n\n#ifdef __GNUC__\n# pragma weak _DYNAMIC\n#endif\nextern ElfW(Dyn) _DYNAMIC[];\n\nstatic struct link_map *\nGC_FirstDLOpenedLinkMap()\n{\n    ElfW(Dyn) *dp;\n    static struct link_map *cachedResult = 0;\n\n    if( _DYNAMIC == 0) {\n        return(0);\n    }\n    if( cachedResult == 0 ) {\n        int tag;\n        for( dp = _DYNAMIC; (tag = dp->d_tag) != 0; dp++ ) {\n            if( tag == DT_DEBUG ) {\n                struct link_map *lm\n                        = ((struct r_debug *)(dp->d_un.d_ptr))->r_map;\n                if( lm != 0 ) cachedResult = lm->l_next; /* might be NIL */\n                break;\n            }\n        }\n    }\n    return cachedResult;\n}\n\n\nvoid GC_register_dynamic_libraries()\n{\n  struct link_map *lm;\n  \n\n# ifdef HAVE_DL_ITERATE_PHDR\n    if (GC_register_dynamic_libraries_dl_iterate_phdr()) {\n\treturn;\n    }\n# endif\n  lm = GC_FirstDLOpenedLinkMap();\n  for (lm = GC_FirstDLOpenedLinkMap();\n       lm != (struct link_map *) 0;  lm = lm->l_next)\n    {\n\tElfW(Ehdr) * e;\n        ElfW(Phdr) * p;\n        unsigned long offset;\n        char * start;\n        register int i;\n        \n\te = (ElfW(Ehdr) *) lm->l_addr;\n        p = ((ElfW(Phdr) *)(((char *)(e)) + e->e_phoff));\n        offset = ((unsigned long)(lm->l_addr));\n        for( i = 0; i < (int)(e->e_phnum); ((i++),(p++)) ) {\n          switch( p->p_type ) {\n            case PT_LOAD:\n              {\n                if( !(p->p_flags & PF_W) ) break;\n                start = ((char *)(p->p_vaddr)) + offset;\n                GC_add_roots_inner(start, start + p->p_memsz, TRUE);\n              }\n              break;\n            default:\n              break;\n          }\n\t}\n    }\n}\n\n#endif /* !USE_PROC_FOR_LIBRARIES */\n\n#endif /* LINUX */\n\n#if defined(IRIX5) || (defined(USE_PROC_FOR_LIBRARIES) && !defined(LINUX))\n\n#include <sys/procfs.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <elf.h>\n#include <errno.h>\n#include <signal.h>  /* Only for the following test. */\n#ifndef _sigargs\n# define IRIX6\n#endif\n\nextern void * GC_roots_present();\n\t/* The type is a lie, since the real type doesn't make sense here, */\n\t/* and we only test for NULL.\t\t\t\t\t   */\n\n\n/* We use /proc to track down all parts of the address space that are\t*/\n/* mapped by the process, and throw out regions we know we shouldn't\t*/\n/* worry about.  This may also work under other SVR4 variants.\t\t*/\nvoid GC_register_dynamic_libraries()\n{\n    static int fd = -1;\n    char buf[30];\n    static prmap_t * addr_map = 0;\n    static int current_sz = 0;\t/* Number of records currently in addr_map */\n    static int needed_sz;\t/* Required size of addr_map\t\t*/\n    int i;\n    long flags;\n    ptr_t start;\n    ptr_t limit;\n    ptr_t heap_start = (ptr_t)HEAP_START;\n    ptr_t heap_end = heap_start;\n\n#   ifdef SOLARISDL\n#     define MA_PHYS 0\n#   endif /* SOLARISDL */\n\n    if (fd < 0) {\n      sprintf(buf, \"/proc/%d\", getpid());\n\t/* The above generates a lint complaint, since pid_t varies.\t*/\n\t/* It's unclear how to improve this.\t\t\t\t*/\n      fd = open(buf, O_RDONLY);\n      if (fd < 0) {\n    \tABORT(\"/proc open failed\");\n      }\n    }\n    if (ioctl(fd, PIOCNMAP, &needed_sz) < 0) {\n\tGC_err_printf(\"fd = %d, errno = %d\\n\", fd, errno);\n    \tABORT(\"/proc PIOCNMAP ioctl failed\");\n    }\n    if (needed_sz >= current_sz) {\n        current_sz = needed_sz * 2 + 1;\n        \t\t/* Expansion, plus room for 0 record */\n        addr_map = (prmap_t *)GC_scratch_alloc((word)\n\t\t\t\t\t\t(current_sz * sizeof(prmap_t)));\n    }\n    if (ioctl(fd, PIOCMAP, addr_map) < 0) {\n        GC_err_printf(\"fd = %d, errno = %d, needed_sz = %d, addr_map = 0x%X\\n\",\n                        fd, errno, needed_sz, addr_map);\n    \tABORT(\"/proc PIOCMAP ioctl failed\");\n    };\n    if (GC_n_heap_sects > 0) {\n    \theap_end = GC_heap_sects[GC_n_heap_sects-1].hs_start\n    \t\t\t+ GC_heap_sects[GC_n_heap_sects-1].hs_bytes;\n    \tif (heap_end < GC_scratch_last_end_ptr) heap_end = GC_scratch_last_end_ptr; \n    }\n    for (i = 0; i < needed_sz; i++) {\n        flags = addr_map[i].pr_mflags;\n\tif ((flags & (MA_BREAK | MA_STACK | MA_PHYS\n\t\t      | MA_FETCHOP | MA_NOTCACHED)) != 0) goto irrelevant;\n        if ((flags & (MA_READ | MA_WRITE)) != (MA_READ | MA_WRITE))\n            goto irrelevant;\n          /* The latter test is empirically useless in very old Irix\t*/\n\t  /* versions.  Other than the\t\t\t\t\t*/\n          /* main data and stack segments, everything appears to be\t*/\n          /* mapped readable, writable, executable, and shared(!!).\t*/\n          /* This makes no sense to me.\t- HB\t\t\t\t*/\n        start = (ptr_t)(addr_map[i].pr_vaddr);\n        if (GC_roots_present(start)) goto irrelevant;\n        if (start < heap_end && start >= heap_start)\n        \tgoto irrelevant;\n#\tifdef MMAP_STACKS\n\t  if (GC_is_thread_stack(start)) goto irrelevant;\n#\tendif /* MMAP_STACKS */\n\n        limit = start + addr_map[i].pr_size;\n\t/* The following seemed to be necessary for very old versions \t*/\n\t/* of Irix, but it has been reported to discard relevant\t*/\n\t/* segments under Irix 6.5.  \t\t\t\t\t*/\n#\tifndef IRIX6\n\t  if (addr_map[i].pr_off == 0 && strncmp(start, ELFMAG, 4) == 0) {\n\t    /* Discard text segments, i.e. 0-offset mappings against\t*/\n\t    /* executable files which appear to have ELF headers.\t*/\n\t    caddr_t arg;\n\t    int obj;\n#\t    define MAP_IRR_SZ 10\n\t    static ptr_t map_irr[MAP_IRR_SZ];\n\t    \t\t\t\t/* Known irrelevant map entries\t*/\n\t    static int n_irr = 0;\n\t    struct stat buf;\n\t    register int i;\n\t    \n\t    for (i = 0; i < n_irr; i++) {\n\t        if (map_irr[i] == start) goto irrelevant;\n\t    }\n\t    arg = (caddr_t)start;\n\t    obj = ioctl(fd, PIOCOPENM, &arg);\n\t    if (obj >= 0) {\n\t        fstat(obj, &buf);\n\t        close(obj);\n\t        if ((buf.st_mode & 0111) != 0) {\n\t            if (n_irr < MAP_IRR_SZ) {\n\t                map_irr[n_irr++] = start;\n\t            }\n\t            goto irrelevant;\n\t        }\n\t    }\n\t  }\n#\tendif /* !IRIX6 */\n        GC_add_roots_inner(start, limit, TRUE);\n      irrelevant: ;\n    }\n    /* Dont keep cached descriptor, for now.  Some kernels don't like us */\n    /* to keep a /proc file descriptor around during kill -9.\t\t */\n    \tif (close(fd) < 0) ABORT(\"Couldnt close /proc file\");\n\tfd = -1;\n}\n\n# endif /* USE_PROC || IRIX5 */\n\n# if defined(MSWIN32) || defined(MSWINCE) || defined(CYGWIN32)\n\n# define WIN32_LEAN_AND_MEAN\n# define NOSERVICE\n# include <windows.h>\n# include <stdlib.h>\n\n  /* We traverse the entire address space and register all segments \t*/\n  /* that could possibly have been written to.\t\t\t\t*/\n  \n  extern GC_bool GC_is_heap_base (ptr_t p);\n\n# ifdef GC_WIN32_THREADS\n    extern void GC_get_next_stack(char *start, char **lo, char **hi);\n    void GC_cond_add_roots(char *base, char * limit)\n    {\n      char * curr_base = base;\n      char * next_stack_lo;\n      char * next_stack_hi;\n   \n      if (base == limit) return;\n      for(;;) {\n\t  GC_get_next_stack(curr_base, &next_stack_lo, &next_stack_hi);\n\t  if (next_stack_lo >= limit) break;\n\t  GC_add_roots_inner(curr_base, next_stack_lo, TRUE);\n\t  curr_base = next_stack_hi;\n      }\n      if (curr_base < limit) GC_add_roots_inner(curr_base, limit, TRUE);\n    }\n# else\n    void GC_cond_add_roots(char *base, char * limit)\n    {\n      char dummy;\n      char * stack_top\n\t = (char *) ((word)(&dummy) & ~(GC_sysinfo.dwAllocationGranularity-1));\n      if (base == limit) return;\n      if (limit > stack_top && base < GC_stackbottom) {\n    \t  /* Part of the stack; ignore it. */\n    \t  return;\n      }\n      GC_add_roots_inner(base, limit, TRUE);\n    }\n# endif\n\n# ifdef MSWINCE\n  /* Do we need to separately register the main static data segment? */\n  GC_bool GC_register_main_static_data()\n  {\n    return FALSE;\n  }\n# else /* win32 */\n  extern GC_bool GC_no_win32_dlls;\n\n  GC_bool GC_register_main_static_data()\n  {\n    return GC_no_win32_dlls;\n  }\n# endif /* win32 */\n  \n# define HAVE_REGISTER_MAIN_STATIC_DATA\n\n# ifdef DEBUG_VIRTUALQUERY\n  void GC_dump_meminfo(MEMORY_BASIC_INFORMATION *buf)\n  {\n    GC_printf(\"BaseAddress = %lx, AllocationBase = %lx, RegionSize = %lx(%lu)\\n\",\n\t       buf -> BaseAddress, buf -> AllocationBase, buf -> RegionSize,\n\t       buf -> RegionSize);\n    GC_printf(\"\\tAllocationProtect = %lx, State = %lx, Protect = %lx, \"\n\t       \"Type = %lx\\n\",\n\t       buf -> AllocationProtect, buf -> State, buf -> Protect,\n\t       buf -> Type);\n  }\n# endif /* DEBUG_VIRTUALQUERY */\n\n  extern GC_bool GC_wnt;  /* Is Windows NT derivative.\t\t*/\n  \t\t\t  /* Defined and set in os_dep.c.\t*/\n\n  void GC_register_dynamic_libraries()\n  {\n    MEMORY_BASIC_INFORMATION buf;\n    size_t result;\n    DWORD protect;\n    LPVOID p;\n    char * base;\n    char * limit, * new_limit;\n\n#   ifdef MSWIN32\n      if (GC_no_win32_dlls) return;\n#   endif\n    base = limit = p = GC_sysinfo.lpMinimumApplicationAddress;\n#   if defined(MSWINCE) && !defined(_WIN32_WCE_EMULATION)\n      /* Only the first 32 MB of address space belongs to the current process */\n      while (p < (LPVOID)0x02000000) {\n        result = VirtualQuery(p, &buf, sizeof(buf));\n\tif (result == 0) {\n\t    /* Page is free; advance to the next possible allocation base */\n\t    new_limit = (char *)\n\t\t(((DWORD) p + GC_sysinfo.dwAllocationGranularity)\n\t\t & ~(GC_sysinfo.dwAllocationGranularity-1));\n\t} else\n#   else\n      while (p < GC_sysinfo.lpMaximumApplicationAddress) {\n        result = VirtualQuery(p, &buf, sizeof(buf));\n#   endif\n\t{\n\t    if (result != sizeof(buf)) {\n\t\tABORT(\"Weird VirtualQuery result\");\n\t    }\n\t    new_limit = (char *)p + buf.RegionSize;\n\t    protect = buf.Protect;\n\t    if (buf.State == MEM_COMMIT\n\t\t&& (protect == PAGE_EXECUTE_READWRITE\n\t\t    || protect == PAGE_READWRITE)\n\t\t&& !GC_is_heap_base(buf.AllocationBase)\n \t\t/* There is some evidence that we cannot always\n \t\t * ignore MEM_PRIVATE sections under Windows ME\n \t\t * and predecessors.  Hence we now also check for\n \t\t * that case.\t*/\n \t\t&& (buf.Type == MEM_IMAGE ||\n \t\t    !GC_wnt && buf.Type == MEM_PRIVATE)) {\n#\t        ifdef DEBUG_VIRTUALQUERY\n\t          GC_dump_meminfo(&buf);\n#\t        endif\n\t\tif ((char *)p != limit) {\n\t\t    GC_cond_add_roots(base, limit);\n\t\t    base = p;\n\t\t}\n\t\tlimit = new_limit;\n\t    }\n\t}\n        if (p > (LPVOID)new_limit /* overflow */) break;\n        p = (LPVOID)new_limit;\n    }\n    GC_cond_add_roots(base, limit);\n  }\n\n#endif /* MSWIN32 || MSWINCE || CYGWIN32 */\n  \n#if defined(ALPHA) && defined(OSF1)\n\n#include <loader.h>\n\nvoid GC_register_dynamic_libraries()\n{\n  int status;\n  ldr_process_t mypid;\n\n  /* module */\n    ldr_module_t moduleid = LDR_NULL_MODULE;\n    ldr_module_info_t moduleinfo;\n    size_t moduleinfosize = sizeof(moduleinfo);\n    size_t modulereturnsize;    \n\n  /* region */\n    ldr_region_t region; \n    ldr_region_info_t regioninfo;\n    size_t regioninfosize = sizeof(regioninfo);\n    size_t regionreturnsize;\n\n  /* Obtain id of this process */\n    mypid = ldr_my_process();\n  \n  /* For each module */\n    while (TRUE) {\n\n      /* Get the next (first) module */\n        status = ldr_next_module(mypid, &moduleid);\n\n      /* Any more modules? */\n        if (moduleid == LDR_NULL_MODULE)\n            break;    /* No more modules */\n\n      /* Check status AFTER checking moduleid because */\n      /* of a bug in the non-shared ldr_next_module stub */\n        if (status != 0 ) {\n            GC_printf(\"dynamic_load: status = %d\\n\", status);\n            {\n                extern char *sys_errlist[];\n                extern int sys_nerr;\n                extern int errno;\n                if (errno <= sys_nerr) {\n                    GC_printf(\"dynamic_load: %s\\n\", sys_errlist[errno]);\n               } else {\n                    GC_printf(\"dynamic_load: %d\\n\", errno);\n                }\n        }\n            ABORT(\"ldr_next_module failed\");\n         }\n\n      /* Get the module information */\n        status = ldr_inq_module(mypid, moduleid, &moduleinfo,\n                                moduleinfosize, &modulereturnsize); \n        if (status != 0 )\n            ABORT(\"ldr_inq_module failed\");\n\n      /* is module for the main program (i.e. nonshared portion)? */\n          if (moduleinfo.lmi_flags & LDR_MAIN)\n              continue;    /* skip the main module */\n\n#     ifdef DL_VERBOSE\n          GC_printf(\"---Module---\\n\");\n          GC_printf(\"Module ID            = %16ld\\n\", moduleinfo.lmi_modid);\n          GC_printf(\"Count of regions     = %16d\\n\", moduleinfo.lmi_nregion);\n          GC_printf(\"flags for module     = %16lx\\n\", moduleinfo.lmi_flags); \n          GC_printf(\"pathname of module   = \\\"%s\\\"\\n\", moduleinfo.lmi_name);\n#     endif\n\n      /* For each region in this module */\n        for (region = 0; region < moduleinfo.lmi_nregion; region++) {\n\n          /* Get the region information */\n            status = ldr_inq_region(mypid, moduleid, region, &regioninfo,\n                                    regioninfosize, &regionreturnsize);\n            if (status != 0 )\n                ABORT(\"ldr_inq_region failed\");\n\n          /* only process writable (data) regions */\n            if (! (regioninfo.lri_prot & LDR_W))\n                continue;\n\n#         ifdef DL_VERBOSE\n              GC_printf(\"--- Region ---\\n\");\n              GC_printf(\"Region number    = %16ld\\n\",\n              \t        regioninfo.lri_region_no);\n              GC_printf(\"Protection flags = %016x\\n\",  regioninfo.lri_prot);\n              GC_printf(\"Virtual address  = %16p\\n\",   regioninfo.lri_vaddr);\n              GC_printf(\"Mapped address   = %16p\\n\",   regioninfo.lri_mapaddr);\n              GC_printf(\"Region size      = %16ld\\n\",  regioninfo.lri_size);\n              GC_printf(\"Region name      = \\\"%s\\\"\\n\", regioninfo.lri_name);\n#         endif\n\n          /* register region as a garbage collection root */\n            GC_add_roots_inner (\n                (char *)regioninfo.lri_mapaddr,\n                (char *)regioninfo.lri_mapaddr + regioninfo.lri_size,\n                TRUE);\n\n        }\n    }\n}\n#endif\n\n#if defined(HPUX)\n\n#include <errno.h>\n#include <dl.h>\n\nextern char *sys_errlist[];\nextern int sys_nerr;\n\nvoid GC_register_dynamic_libraries()\n{\n  int status;\n  int index = 1; /* Ordinal position in shared library search list */\n  struct shl_descriptor *shl_desc; /* Shared library info, see dl.h */\n\n  /* For each dynamic library loaded */\n    while (TRUE) {\n\n      /* Get info about next shared library */\n        status = shl_get(index, &shl_desc);\n\n      /* Check if this is the end of the list or if some error occured */\n        if (status != 0) {\n#\t ifdef GC_HPUX_THREADS\n\t   /* I've seen errno values of 0.  The man page is not clear\t*/\n\t   /* as to whether errno should get set on a -1 return.\t*/\n\t   break;\n#\t else\n          if (errno == EINVAL) {\n              break; /* Moved past end of shared library list --> finished */\n          } else {\n              if (errno <= sys_nerr) {\n                    GC_printf(\"dynamic_load: %s\\n\", sys_errlist[errno]);\n              } else {\n                    GC_printf(\"dynamic_load: %d\\n\", errno);\n\t      }\n              ABORT(\"shl_get failed\");\n          }\n#\t endif\n        }\n\n#     ifdef DL_VERBOSE\n          GC_printf(\"---Shared library---\\n\");\n          GC_printf(\"\\tfilename        = \\\"%s\\\"\\n\", shl_desc->filename);\n          GC_printf(\"\\tindex           = %d\\n\", index);\n          GC_printf(\"\\thandle          = %08x\\n\",\n\t\t\t\t\t(unsigned long) shl_desc->handle);\n          GC_printf(\"\\ttext seg. start = %08x\\n\", shl_desc->tstart);\n          GC_printf(\"\\ttext seg. end   = %08x\\n\", shl_desc->tend);\n          GC_printf(\"\\tdata seg. start = %08x\\n\", shl_desc->dstart);\n          GC_printf(\"\\tdata seg. end   = %08x\\n\", shl_desc->dend);\n          GC_printf(\"\\tref. count      = %lu\\n\", shl_desc->ref_count);\n#     endif\n\n      /* register shared library's data segment as a garbage collection root */\n        GC_add_roots_inner((char *) shl_desc->dstart,\n\t\t\t   (char *) shl_desc->dend, TRUE);\n\n        index++;\n    }\n}\n#endif /* HPUX */\n\n#ifdef AIX\n#pragma alloca\n#include <sys/ldr.h>\n#include <sys/errno.h>\nvoid GC_register_dynamic_libraries()\n{\n\tint len;\n\tchar *ldibuf;\n\tint ldibuflen;\n\tstruct ld_info *ldi;\n\n\tldibuf = alloca(ldibuflen = 8192);\n\n\twhile ( (len = loadquery(L_GETINFO,ldibuf,ldibuflen)) < 0) {\n\t\tif (errno != ENOMEM) {\n\t\t\tABORT(\"loadquery failed\");\n\t\t}\n\t\tldibuf = alloca(ldibuflen *= 2);\n\t}\n\n\tldi = (struct ld_info *)ldibuf;\n\twhile (ldi) {\n\t\tlen = ldi->ldinfo_next;\n\t\tGC_add_roots_inner(\n\t\t\t\tldi->ldinfo_dataorg,\n\t\t\t\t(ptr_t)(unsigned long)ldi->ldinfo_dataorg\n\t\t\t        + ldi->ldinfo_datasize,\n\t\t\t\tTRUE);\n\t\tldi = len ? (struct ld_info *)((char *)ldi + len) : 0;\n\t}\n}\n#endif /* AIX */\n\n#ifdef DARWIN\n\n/* __private_extern__ hack required for pre-3.4 gcc versions.\t*/\n#ifndef __private_extern__\n# define __private_extern__ extern\n# include <mach-o/dyld.h>\n# undef __private_extern__\n#else\n# include <mach-o/dyld.h>\n#endif\n#include <mach-o/getsect.h>\n\n/*#define DARWIN_DEBUG*/\n\nconst static struct { \n        const char *seg;\n        const char *sect;\n} GC_dyld_sections[] = {\n        { SEG_DATA, SECT_DATA },\n        { SEG_DATA, SECT_BSS },\n        { SEG_DATA, SECT_COMMON }\n};\n    \n#ifdef DARWIN_DEBUG\nstatic const char *GC_dyld_name_for_hdr(const struct GC_MACH_HEADER *hdr) {\n    unsigned long i,c;\n    c = _dyld_image_count();\n    for(i=0;i<c;i++) if(_dyld_get_image_header(i) == hdr)\n        return _dyld_get_image_name(i);\n    return NULL;\n}\n#endif\n        \n/* This should never be called by a thread holding the lock */\nstatic void GC_dyld_image_add(const struct GC_MACH_HEADER *hdr, intptr_t slide)\n{\n    unsigned long start,end,i;\n    const struct GC_MACH_SECTION *sec;\n    if (GC_no_dls) return;\n    for(i=0;i<sizeof(GC_dyld_sections)/sizeof(GC_dyld_sections[0]);i++) {\n#   if defined (__LP64__)\n      sec = getsectbynamefromheader_64(\n#   else\n      sec = getsectbynamefromheader(\n#   endif\n\t\t\t\t    hdr, GC_dyld_sections[i].seg,\n\t\t\t\t    GC_dyld_sections[i].sect);\n      if(sec == NULL || sec->size == 0) continue;\n      start = slide + sec->addr;\n      end = start + sec->size;\n#   ifdef DARWIN_DEBUG\n      GC_printf(\"Adding section at %p-%p (%lu bytes) from image %s\\n\",\n\t\tstart,end,sec->size,GC_dyld_name_for_hdr(hdr));\n#   endif\n      GC_add_roots((char*)start,(char*)end);\n    }\n#   ifdef DARWIN_DEBUG\n       GC_print_static_roots();\n#   endif\n}\n\n/* This should never be called by a thread holding the lock */\nstatic void GC_dyld_image_remove(const struct GC_MACH_HEADER *hdr,\n\t\t\t\t intptr_t slide)\n{\n    unsigned long start,end,i;\n    const struct GC_MACH_SECTION *sec;\n    for(i=0;i<sizeof(GC_dyld_sections)/sizeof(GC_dyld_sections[0]);i++) {\n#   if defined (__LP64__)\n      sec = getsectbynamefromheader_64(\n#   else\n      sec = getsectbynamefromheader(\n#   endif\n\t\t\t\t    hdr, GC_dyld_sections[i].seg,\n\t\t\t\t    GC_dyld_sections[i].sect);\n      if(sec == NULL || sec->size == 0) continue;\n      start = slide + sec->addr;\n      end = start + sec->size;\n#   ifdef DARWIN_DEBUG\n      GC_printf(\"Removing section at %p-%p (%lu bytes) from image %s\\n\",\n\t\tstart,end,sec->size,GC_dyld_name_for_hdr(hdr));\n#   endif\n      GC_remove_roots((char*)start,(char*)end);\n    }\n#   ifdef DARWIN_DEBUG\n\tGC_print_static_roots();\n#   endif\n}\n\nvoid GC_register_dynamic_libraries() {\n    /* Currently does nothing. The callbacks are setup by GC_init_dyld() \n    The dyld library takes it from there. */\n}\n\n/* The _dyld_* functions have an internal lock so no _dyld functions\n   can be called while the world is stopped without the risk of a deadlock.\n   Because of this we MUST setup callbacks BEFORE we ever stop the world.\n   This should be called BEFORE any thread in created and WITHOUT the\n   allocation lock held. */\n   \nvoid GC_init_dyld() {\n  static GC_bool initialized = FALSE;\n  char *bind_fully_env = NULL;\n  \n  if(initialized) return;\n  \n#   ifdef DARWIN_DEBUG\n      GC_printf(\"Registering dyld callbacks...\\n\");\n#   endif\n  \n  /* Apple's Documentation:\n     When you call _dyld_register_func_for_add_image, the dynamic linker runtime\n     calls the specified callback (func) once for each of the images that is\n     currently loaded into the program. When a new image is added to the program,\n     your callback is called again with the mach_header for the new image, and the \t\n     virtual memory slide amount of the new image. \n     \n     This WILL properly register already linked libraries and libraries \n     linked in the future\n  */\n  \n    _dyld_register_func_for_add_image(GC_dyld_image_add);\n    _dyld_register_func_for_remove_image(GC_dyld_image_remove);\n\n    /* Set this early to avoid reentrancy issues. */\n    initialized = TRUE;\n\n    bind_fully_env = getenv(\"DYLD_BIND_AT_LAUNCH\");\n    \n    if (bind_fully_env == NULL) {\n#   ifdef DARWIN_DEBUG\n      GC_printf(\"Forcing full bind of GC code...\\n\");\n#   endif\n      \n      if(!_dyld_bind_fully_image_containing_address((unsigned long*)GC_malloc))\n        GC_abort(\"_dyld_bind_fully_image_containing_address failed\");\n    }\n\n}\n\n#define HAVE_REGISTER_MAIN_STATIC_DATA\nGC_bool GC_register_main_static_data()\n{\n  /* Already done through dyld callbacks */\n  return FALSE;\n}\n\n#endif /* DARWIN */\n\n#else /* !DYNAMIC_LOADING */\n\n#ifdef PCR\n\n#   include \"il/PCR_IL.h\"\n#   include \"th/PCR_ThCtl.h\"\n#   include \"mm/PCR_MM.h\"\n\nvoid GC_register_dynamic_libraries()\n{\n    /* Add new static data areas of dynamically loaded modules.\t*/\n        {\n          PCR_IL_LoadedFile * p = PCR_IL_GetLastLoadedFile();\n          PCR_IL_LoadedSegment * q;\n          \n          /* Skip uncommited files */\n          while (p != NIL && !(p -> lf_commitPoint)) {\n              /* The loading of this file has not yet been committed\t*/\n              /* Hence its description could be inconsistent.  \t\t*/\n              /* Furthermore, it hasn't yet been run.  Hence its data\t*/\n              /* segments can't possibly reference heap allocated\t*/\n              /* objects.\t\t\t\t\t\t*/\n              p = p -> lf_prev;\n          }\n          for (; p != NIL; p = p -> lf_prev) {\n            for (q = p -> lf_ls; q != NIL; q = q -> ls_next) {\n              if ((q -> ls_flags & PCR_IL_SegFlags_Traced_MASK)\n                  == PCR_IL_SegFlags_Traced_on) {\n                GC_add_roots_inner\n                \t((char *)(q -> ls_addr), \n                \t (char *)(q -> ls_addr) + q -> ls_bytes,\n                \t TRUE);\n              }\n            }\n          }\n        }\n}\n\n\n#else /* !PCR */\n\nvoid GC_register_dynamic_libraries(){}\n\nint GC_no_dynamic_loading;\n\n#endif /* !PCR */\n\n#endif /* !DYNAMIC_LOADING */\n\n#ifndef HAVE_REGISTER_MAIN_STATIC_DATA\n\n/* Do we need to separately register the main static data segment? */\nGC_bool GC_register_main_static_data()\n{\n  return TRUE;\n}\n\n/* Register a routine to filter dynamic library registration.  */\nvoid\nGC_register_has_static_roots_callback\n  (int (*callback)(const char *, void *, size_t)) {\n  GC_has_static_roots = callback;\n}\n\n#endif /* HAVE_REGISTER_MAIN_STATIC_DATA */\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/Makefile.am": "# Copyright (c) 1999-2001 by Red Hat, Inc. All rights reserved.\n# \n# THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n# OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n# \n# Permission is hereby granted to use or copy this program\n# for any purpose,  provided the above notices are retained on all copies.\n# Permission to modify the code and to distribute modified code is granted,\n# provided the above notices are retained, and a notice that the code was\n# modified is included with the above copyright notice.\n#\n# Original author: Tom Tromey\n# Severely truncated by Hans-J. Boehm\n# Modified by: Grzegorz Jakacki <jakacki at acm dot org>\n# Modified by: Petter Urkedal <petter.urkedal@nordita.dk> (2005-04)\n\n## Process this file with automake to produce Makefile.in.\n\n## FIXME: `make distcheck' in this directory will not currently work.\n##     This is most likely to the explicit flags passed to submakes.\n\n# We currently use the source files directly from libatomic_ops, if we\n# use the internal version.  This is done since libatomic_ops doesn't\n# use libtool, since it has no real use for it.  But that seems to make\n# it hard to use either the resulting object files or libraries.\n# Thus there seems too be no real reason to recusively build in the\n# libatomic_ops directory.\n# if USE_INTERNAL_LIBATOMICS_OPS\n# SUBDIRS = @maybe_libatomic_ops@\n# else\n# SUBDIRS =\n# endif\nSUBDIRS =\n\n# Initialize variables so that we can declare files locally.\nEXTRA_DIST = \nlib_LTLIBRARIES =\ninclude_HEADERS =\npkginclude_HEADERS =\ndist_noinst_HEADERS =\ncheck_PROGRAMS =\nTESTS =\n\npkgconfigdir = $(libdir)/pkgconfig\ndist_pkgconfig_DATA = bdw-gc.pc\n\n# C Library\n# ---------\n\nlib_LTLIBRARIES += libgc.la\nlibgc_la_SOURCES = \\\n\tallchblk.c alloc.c blacklst.c checksums.c dbg_mlc.c \\\n\tdyn_load.c finalize.c gc_dlopen.c gcj_mlc.c headers.c \\\n\tmalloc.c mallocx.c mark.c mark_rts.c misc.c new_hblk.c \\\n\tobj_map.c os_dep.c pcr_interface.c ptr_chck.c real_malloc.c reclaim.c \\\n\tspecific.c stubborn.c typd_mlc.c \\\n\tbackgraph.c thread_local_alloc.c\n\n# C Library: Architecture Dependent\n# ---------------------------------\n\nif PTHREADS\nlibgc_la_SOURCES += pthread_support.c pthread_stop_world.c\nendif\n\nif DARWIN_THREADS\nlibgc_la_SOURCES += darwin_stop_world.c\nendif\n\nif WIN32_THREADS\nlibgc_la_SOURCES += win32_threads.c\nendif\n\nif USE_INTERNAL_LIBATOMIC_OPS\nnodist_libgc_la_SOURCES = atomic_ops.c\nendif\n\nif NEED_ATOMIC_OPS_ASM\nnodist_libgc_la_SOURCES = atomic_ops_sysdeps.S\nendif\n\n# Include THREADDLLIBS here to ensure that the correct versions of\n# linuxthread semaphore functions get linked:\nlibgc_la_LIBADD = @addobjs@ $(THREADDLLIBS) $(UNWINDLIBS)\nlibgc_la_DEPENDENCIES = @addobjs@\nlibgc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info 1:3:0 -no-undefined\n\nEXTRA_libgc_la_SOURCES = alpha_mach_dep.S \\\n    mips_sgi_mach_dep.s mips_ultrix_mach_dep.s \\\n    rs6000_mach_dep.s sparc_mach_dep.S sparc_netbsd_mach_dep.s \\\n    sparc_sunos4_mach_dep.s ia64_save_regs_in_stack.s\n\n\n# C++ Interface\n# -------------\n\nif CPLUSPLUS\nlib_LTLIBRARIES += libgccpp.la\npkginclude_HEADERS += include/gc_cpp.h include/gc_allocator.h\nlibgccpp_la_SOURCES = gc_cpp.cc\nlibgccpp_la_LIBADD = $(top_builddir)/libgc.la\nlibgccpp_la_LDFLAGS = -version-info 1:3:0 -no-undefined\nendif\n\n# FIXME: If Visual C++ users use Makefile.am, this should go into\n# pkginclude_HEADERS with proper AM_CONDITIONALization.  Otherwise\n# delete this comment.\nEXTRA_DIST += gc_cpp.cpp\n\n\n# Misc\n# ----\n\nAM_CXXFLAGS = @GC_CFLAGS@\nAM_CFLAGS = @GC_CFLAGS@\n\n## FIXME: relies on internal code generated by automake.\n## FIXME: ./configure --enable-dependency-tracking should be used \n#all_objs = @addobjs@ $(libgc_la_OBJECTS)\n#$(all_objs) : include/private/gcconfig.h include/private/gc_priv.h \\\n#include/private/gc_hdrs.h include/gc.h include/gc_gcj.h \\\n#include/gc_pthread_redirects.h include/gc_config_macros.h \\\n#include/private/thread_local_alloc.h include/private_support.h \\\n#include/private/pthread_stop_world.h \\\n#include/gc_mark.h @addincludes@\n\n## FIXME: we shouldn't have to do this, but automake forces us to.\n## We use -Wp,-P to strip #line directives.  Irix `as' chokes on\n## these.\nif COMPILER_XLC\n  ## XLC neither requires nor tolerates the unnecessary assembler goop\n  ASM_CPP_OPTIONS =\nelse\n  ## We use -Wp,-P to strip #line directives.  Irix `as' chokes on\n  ## these.\n  ASM_CPP_OPTIONS = -Wp,-P -x assembler-with-cpp\nendif\n.s.lo:\n\t$(LTCOMPILE) $(ASM_CPP_OPTIONS) -c $<\n\n.S.lo:\n\t$(LTCOMPILE) $(ASM_CPP_OPTIONS) -c $<\n\n## We need to add DEFS to assembler flags\n## :FIXME: what if assembler does not accept -D... ?\n##     (use Autoconf to prepare ASDEFS ???)\n\nCCASFLAGS += $(DEFS)\n\ndist_noinst_SCRIPTS = callprocs configure.host\n    ## callprocs --- used by Makefile.{dj,direct}\n    ## configure.host --- used by Makefile.{am,dj,direct}\n\n# headers which are not installed\n# (see include/include.am for more)\n#\ndist_noinst_HEADERS += version.h\n\n# documentation which is not installed\n#\nEXTRA_DIST += README.QUICK\n\n# other makefiles\n# :GOTCHA: deliberately we do not include 'Makefile'\nEXTRA_DIST += BCC_MAKEFILE NT_MAKEFILE NT_THREADS_MAKEFILE \\\n    OS2_MAKEFILE PCR-Makefile digimars.mak EMX_MAKEFILE\t\\\n    Makefile.direct Makefile.dj\tMakefile.DLLs SMakefile.amiga \\\n    WCC_MAKEFILE configure_atomic_ops.sh \\\n    NT_STATIC_THREADS_MAKEFILE NT_X64_STATIC_THREADS_MAKEFILE\n\n# files used by makefiles other than Makefile.am\n#\nEXTRA_DIST += add_gc_prefix.c gcname.c if_mach.c if_not_there.c \\\n    hpux_test_and_clear.s gc.mak MacOS.c \\\n    MacProjects.sit.hqx mach_dep.c setjmp_t.c \\\n    threadlibs.c AmigaOS.c \\\n    Mac_files/datastart.c Mac_files/dataend.c \\\n    Mac_files/MacOS_config.h Mac_files/MacOS_Test_config.h \\\n    include/private/msvc_dbg.h msvc_dbg.c\n\n# The libatomic_ops library.  This is not ideal, since we pick up junk from\n# there.  The hard-coded version number should also go.\nEXTRA_DIST += libatomic_ops-1.2\n\n# this is an auxiliary shell file used by Makefile and Makefile.direct\n#\nCONFIG_STATUS_DEPENDENCIES = $(srcdir)/configure.host\n\n# :FIXME: why do we distribute this one???\n#\nEXTRA_DIST += libtool.m4\n\n#\n# :GOTCHA: GNU make rule for making .s out of .S is flawed, \n# it will not remove dest if building fails\n.S.s:\n\tif $(CPP) $< >$@ ; then :; else rm -f $@; fi\n\ninclude include/include.am\ninclude cord/cord.am\ninclude tests/tests.am\ninclude doc/doc.am\n# Putting these at the top causes cord to be built first, and not find libgc.a\n# on HP/UX.  There may be a better fix.\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/gc_dlopen.c": "/*\n * Copyright (c) 1991-1994 by Xerox Corporation.  All rights reserved.\n * Copyright (c) 1997 by Silicon Graphics.  All rights reserved.\n * Copyright (c) 2000 by Hewlett-Packard Company.  All rights reserved.\n *\n * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n *\n * Permission is hereby granted to use or copy this program\n * for any purpose,  provided the above notices are retained on all copies.\n * Permission to modify the code and to distribute modified code is granted,\n * provided the above notices are retained, and a notice that the code was\n * modified is included with the above copyright notice.\n *\n * Original author: Bill Janssen\n * Heavily modified by Hans Boehm and others\n */\n\n/*\n * This used to be in dyn_load.c.  It was extracted into a separate file\n * to avoid having to link against libdl.{a,so} if the client doesn't call\n * dlopen.  Of course this fails if the collector is in a dynamic\n * library. -HB\n */\n\n#include \"private/gc_priv.h\"\n\n# if (defined(GC_PTHREADS) && !defined(GC_DARWIN_THREADS)) && !defined(GC_WIN32_PTHREADS)\\\n      || defined(GC_SOLARIS_THREADS)\n\n# if defined(dlopen) && !defined(GC_USE_LD_WRAP)\n    /* To support various threads pkgs, gc.h interposes on dlopen by     */\n    /* defining \"dlopen\" to be \"GC_dlopen\", which is implemented below.  */\n    /* However, both GC_FirstDLOpenedLinkMap() and GC_dlopen() use the   */\n    /* real system dlopen() in their implementation. We first remove     */\n    /* gc.h's dlopen definition and restore it later, after GC_dlopen(). */\n#   undef dlopen\n# endif\n\n  /* Make sure we're not in the middle of a collection, and make\t*/\n  /* sure we don't start any.\tReturns previous value of GC_dont_gc.\t*/\n  /* This is invoked prior to a dlopen call to avoid synchronization\t*/\n  /* issues.  We can't just acquire the allocation lock, since startup \t*/\n  /* code in dlopen may try to allocate.\t\t\t\t*/\n  /* This solution risks heap growth in the presence of many dlopen\t*/\n  /* calls in either a multithreaded environment, or if the library\t*/\n  /* initialization code allocates substantial amounts of GC'ed memory.\t*/\n  /* But I don't know of a better solution.\t\t\t\t*/\n  static void disable_gc_for_dlopen()\n  {\n    LOCK();\n    while (GC_incremental && GC_collection_in_progress()) {\n\tGC_collect_a_little_inner(1000);\n    }\n    ++GC_dont_gc;\n    UNLOCK();\n  }\n\n  /* Redefine dlopen to guarantee mutual exclusion with\t*/\n  /* GC_register_dynamic_libraries.\t\t\t*/\n  /* Should probably happen for other operating\tsystems, too. */\n\n#include <dlfcn.h>\n\n#ifdef GC_USE_LD_WRAP\n  void * __wrap_dlopen(const char *path, int mode)\n#else\n  void * GC_dlopen(const char *path, int mode)\n#endif\n{\n    void * result;\n    \n#   ifndef USE_PROC_FOR_LIBRARIES\n      disable_gc_for_dlopen();\n#   endif\n#   ifdef GC_USE_LD_WRAP\n      result = (void *)__real_dlopen(path, mode);\n#   else\n      result = dlopen(path, mode);\n#   endif\n#   ifndef USE_PROC_FOR_LIBRARIES\n      GC_enable(); /* undoes disable_gc_for_dlopen */\n#   endif\n    return(result);\n}\n# endif  /* GC_PTHREADS || GC_SOLARIS_THREADS ... */\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/Makefile.in": "# Makefile.in generated by automake 1.9.6 from Makefile.am.\n# @configure_input@\n\n# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n# 2003, 2004, 2005  Free Software Foundation, Inc.\n# This Makefile.in is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE.\n\n@SET_MAKE@\n\n# Copyright (c) 1999-2001 by Red Hat, Inc. All rights reserved.\n# \n# THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n# OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n# \n# Permission is hereby granted to use or copy this program\n# for any purpose,  provided the above notices are retained on all copies.\n# Permission to modify the code and to distribute modified code is granted,\n# provided the above notices are retained, and a notice that the code was\n# modified is included with the above copyright notice.\n#\n# Original author: Tom Tromey\n# Severely truncated by Hans-J. Boehm\n# Modified by: Grzegorz Jakacki <jakacki at acm dot org>\n# Modified by: Petter Urkedal <petter.urkedal@nordita.dk> (2005-04)\n\n# \n# \n# THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n# OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n# \n# Permission is hereby granted to use or copy this program\n# for any purpose,  provided the above notices are retained on all copies.\n# Permission to modify the code and to distribute modified code is granted,\n# provided the above notices are retained, and a notice that the code was\n# modified is included with the above copyright notice.\n#\n# Modified by: Grzegorz Jakacki <jakacki at acm dot org>\n# Modified by: Petter Urkedal <petter.urkedal@nordita.dk>\n\n#\n#\n# THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n# OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n#\n# Permission is hereby granted to use or copy this program\n# for any purpose,  provided the above notices are retained on all copies.\n# Permission to modify the code and to distribute modified code is granted,\n# provided the above notices are retained, and a notice that the code was\n# modified is included with the above copyright notice.\n\n# \n# \n# THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n# OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n# \n# Permission is hereby granted to use or copy this program\n# for any purpose,  provided the above notices are retained on all copies.\n# Permission to modify the code and to distribute modified code is granted,\n# provided the above notices are retained, and a notice that the code was\n# modified is included with the above copyright notice.\n#\n# Modified by: Grzegorz Jakacki <jakacki at acm dot org>\n# Modified by: Petter Urkedal <petter.urkedal@nordita.dk>\n\n\n\n\nsrcdir = @srcdir@\ntop_srcdir = @top_srcdir@\nVPATH = @srcdir@\npkgdatadir = $(datadir)/@PACKAGE@\npkglibdir = $(libdir)/@PACKAGE@\npkgincludedir = $(includedir)/@PACKAGE@\ntop_builddir = .\nam__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd\nINSTALL = @INSTALL@\ninstall_sh_DATA = $(install_sh) -c -m 644\ninstall_sh_PROGRAM = $(install_sh) -c\ninstall_sh_SCRIPT = $(install_sh) -c\nINSTALL_HEADER = $(INSTALL_DATA)\ntransform = $(program_transform_name)\nNORMAL_INSTALL = :\nPRE_INSTALL = :\nPOST_INSTALL = :\nNORMAL_UNINSTALL = :\nPRE_UNINSTALL = :\nPOST_UNINSTALL = :\nbuild_triplet = @build@\nhost_triplet = @host@\ntarget_triplet = @target@\ncheck_PROGRAMS = gctest$(EXEEXT) leaktest$(EXEEXT) middletest$(EXEEXT) \\\n\t$(am__EXEEXT_1) $(am__EXEEXT_2)\n\n# C Library: Architecture Dependent\n# ---------------------------------\n@PTHREADS_TRUE@am__append_1 = pthread_support.c pthread_stop_world.c\n@DARWIN_THREADS_TRUE@am__append_2 = darwin_stop_world.c\n@WIN32_THREADS_TRUE@am__append_3 = win32_threads.c\n\n# C++ Interface\n# -------------\n@CPLUSPLUS_TRUE@am__append_4 = libgccpp.la\n@CPLUSPLUS_TRUE@am__append_5 = include/gc_cpp.h include/gc_allocator.h\nDIST_COMMON = $(am__configure_deps) $(am__pkginclude_HEADERS_DIST) \\\n\t$(dist_noinst_HEADERS) $(dist_noinst_SCRIPTS) \\\n\t$(dist_pkgconfig_DATA) $(dist_pkgdata_DATA) $(include_HEADERS) \\\n\t$(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n\t$(srcdir)/bdw-gc.pc.in $(srcdir)/cord/cord.am \\\n\t$(srcdir)/doc/doc.am $(srcdir)/include/include.am \\\n\t$(srcdir)/tests/tests.am $(top_srcdir)/configure ChangeLog \\\n\tcompile config.guess config.sub depcomp install-sh ltmain.sh \\\n\tmissing mkinstalldirs\n\n#TESTS += tracetest$(EXEEXT)\n#check_PROGRAMS += tracetest\n#tracetest_SOURCES = tests/trace_test.c\n#tracetest_LDADD = $(test_ldadd)\n@THREADS_TRUE@am__append_6 = threadleaktest$(EXEEXT)\n@THREADS_TRUE@am__append_7 = threadleaktest\n@CPLUSPLUS_TRUE@am__append_8 = test_cpp$(EXEEXT)\n@CPLUSPLUS_TRUE@am__append_9 = test_cpp\nsubdir = .\nACLOCAL_M4 = $(top_srcdir)/aclocal.m4\nam__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \\\n\t$(top_srcdir)/libtool.m4 $(top_srcdir)/configure.ac\nam__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n\t$(ACLOCAL_M4)\nam__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n configure.lineno configure.status.lineno\nmkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs\nCONFIG_CLEAN_FILES = bdw-gc.pc\nam__vpath_adj_setup = srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`;\nam__vpath_adj = case $$p in \\\n    $(srcdir)/*) f=`echo \"$$p\" | sed \"s|^$$srcdirstrip/||\"`;; \\\n    *) f=$$p;; \\\n  esac;\nam__strip_dir = `echo $$p | sed -e 's|^.*/||'`;\nam__installdirs = \"$(DESTDIR)$(libdir)\" \"$(DESTDIR)$(pkgconfigdir)\" \\\n\t\"$(DESTDIR)$(pkgdatadir)\" \"$(DESTDIR)$(includedir)\" \\\n\t\"$(DESTDIR)$(pkgincludedir)\"\nlibLTLIBRARIES_INSTALL = $(INSTALL)\nLTLIBRARIES = $(lib_LTLIBRARIES)\nlibcord_la_DEPENDENCIES = $(top_builddir)/libgc.la\nam__dirstamp = $(am__leading_dot)dirstamp\nam_libcord_la_OBJECTS = cord/cordbscs.lo cord/cordprnt.lo \\\n\tcord/cordtest.lo cord/cordxtra.lo\nlibcord_la_OBJECTS = $(am_libcord_la_OBJECTS)\nam__DEPENDENCIES_1 =\nam__libgc_la_SOURCES_DIST = allchblk.c alloc.c blacklst.c checksums.c \\\n\tdbg_mlc.c dyn_load.c finalize.c gc_dlopen.c gcj_mlc.c \\\n\theaders.c malloc.c mallocx.c mark.c mark_rts.c misc.c \\\n\tnew_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c \\\n\treal_malloc.c reclaim.c specific.c stubborn.c typd_mlc.c \\\n\tbackgraph.c thread_local_alloc.c pthread_support.c \\\n\tpthread_stop_world.c darwin_stop_world.c win32_threads.c\n@PTHREADS_TRUE@am__objects_1 = pthread_support.lo \\\n@PTHREADS_TRUE@\tpthread_stop_world.lo\n@DARWIN_THREADS_TRUE@am__objects_2 = darwin_stop_world.lo\n@WIN32_THREADS_TRUE@am__objects_3 = win32_threads.lo\nam_libgc_la_OBJECTS = allchblk.lo alloc.lo blacklst.lo checksums.lo \\\n\tdbg_mlc.lo dyn_load.lo finalize.lo gc_dlopen.lo gcj_mlc.lo \\\n\theaders.lo malloc.lo mallocx.lo mark.lo mark_rts.lo misc.lo \\\n\tnew_hblk.lo obj_map.lo os_dep.lo pcr_interface.lo ptr_chck.lo \\\n\treal_malloc.lo reclaim.lo specific.lo stubborn.lo typd_mlc.lo \\\n\tbackgraph.lo thread_local_alloc.lo $(am__objects_1) \\\n\t$(am__objects_2) $(am__objects_3)\n@NEED_ATOMIC_OPS_ASM_FALSE@@USE_INTERNAL_LIBATOMIC_OPS_TRUE@nodist_libgc_la_OBJECTS = atomic_ops.lo\n@NEED_ATOMIC_OPS_ASM_TRUE@nodist_libgc_la_OBJECTS =  \\\n@NEED_ATOMIC_OPS_ASM_TRUE@\tatomic_ops_sysdeps.lo\nlibgc_la_OBJECTS = $(am_libgc_la_OBJECTS) $(nodist_libgc_la_OBJECTS)\n@CPLUSPLUS_TRUE@libgccpp_la_DEPENDENCIES = $(top_builddir)/libgc.la\nam__libgccpp_la_SOURCES_DIST = gc_cpp.cc\n@CPLUSPLUS_TRUE@am_libgccpp_la_OBJECTS = gc_cpp.lo\nlibgccpp_la_OBJECTS = $(am_libgccpp_la_OBJECTS)\n@CPLUSPLUS_TRUE@am_libgccpp_la_rpath = -rpath $(libdir)\n@THREADS_TRUE@am__EXEEXT_1 = threadleaktest$(EXEEXT)\n@CPLUSPLUS_TRUE@am__EXEEXT_2 = test_cpp$(EXEEXT)\nam_gctest_OBJECTS = tests/test.$(OBJEXT)\ngctest_OBJECTS = $(am_gctest_OBJECTS)\nam__DEPENDENCIES_2 = $(top_builddir)/libgc.la $(am__DEPENDENCIES_1)\nam_leaktest_OBJECTS = tests/leak_test.$(OBJEXT)\nleaktest_OBJECTS = $(am_leaktest_OBJECTS)\nleaktest_DEPENDENCIES = $(am__DEPENDENCIES_2)\nam_middletest_OBJECTS = tests/middle.$(OBJEXT)\nmiddletest_OBJECTS = $(am_middletest_OBJECTS)\nmiddletest_DEPENDENCIES = $(am__DEPENDENCIES_2)\nam__test_cpp_SOURCES_DIST = tests/test_cpp.cc\n@CPLUSPLUS_TRUE@am_test_cpp_OBJECTS = tests/test_cpp.$(OBJEXT)\ntest_cpp_OBJECTS = $(am_test_cpp_OBJECTS)\n@CPLUSPLUS_TRUE@test_cpp_DEPENDENCIES = libgccpp.la \\\n@CPLUSPLUS_TRUE@\t$(am__DEPENDENCIES_2)\nam__threadleaktest_SOURCES_DIST = tests/thread_leak_test.c\n@THREADS_TRUE@am_threadleaktest_OBJECTS =  \\\n@THREADS_TRUE@\ttests/thread_leak_test.$(OBJEXT)\nthreadleaktest_OBJECTS = $(am_threadleaktest_OBJECTS)\n@THREADS_TRUE@threadleaktest_DEPENDENCIES = $(am__DEPENDENCIES_2)\nSCRIPTS = $(dist_noinst_SCRIPTS)\nDEFAULT_INCLUDES = \ndepcomp = $(SHELL) $(top_srcdir)/depcomp\nam__depfiles_maybe = depfiles\nCCASCOMPILE = $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)\nLTCCASCOMPILE = $(LIBTOOL) --mode=compile $(CCAS) $(AM_CCASFLAGS) \\\n\t$(CCASFLAGS)\nCOMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n\t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\nLTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \\\n\t$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n\t$(AM_CFLAGS) $(CFLAGS)\nCCLD = $(CC)\nLINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n\t$(AM_LDFLAGS) $(LDFLAGS) -o $@\nCXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\nLTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\\n\t$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n\t$(AM_CXXFLAGS) $(CXXFLAGS)\nCXXLD = $(CXX)\nCXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\\n\t$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\nSOURCES = $(libcord_la_SOURCES) $(libgc_la_SOURCES) \\\n\t$(EXTRA_libgc_la_SOURCES) $(nodist_libgc_la_SOURCES) \\\n\t$(libgccpp_la_SOURCES) $(gctest_SOURCES) $(leaktest_SOURCES) \\\n\t$(middletest_SOURCES) $(test_cpp_SOURCES) \\\n\t$(threadleaktest_SOURCES)\nDIST_SOURCES = $(libcord_la_SOURCES) $(am__libgc_la_SOURCES_DIST) \\\n\t$(EXTRA_libgc_la_SOURCES) $(am__libgccpp_la_SOURCES_DIST) \\\n\t$(gctest_SOURCES) $(leaktest_SOURCES) $(middletest_SOURCES) \\\n\t$(am__test_cpp_SOURCES_DIST) \\\n\t$(am__threadleaktest_SOURCES_DIST)\nRECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\\n\thtml-recursive info-recursive install-data-recursive \\\n\tinstall-exec-recursive install-info-recursive \\\n\tinstall-recursive installcheck-recursive installdirs-recursive \\\n\tpdf-recursive ps-recursive uninstall-info-recursive \\\n\tuninstall-recursive\ndist_pkgconfigDATA_INSTALL = $(INSTALL_DATA)\ndist_pkgdataDATA_INSTALL = $(INSTALL_DATA)\nDATA = $(dist_pkgconfig_DATA) $(dist_pkgdata_DATA)\nincludeHEADERS_INSTALL = $(INSTALL_HEADER)\nam__pkginclude_HEADERS_DIST = include/gc_cpp.h include/gc_allocator.h \\\n\tinclude/gc.h include/gc_typed.h include/gc_inline.h \\\n\tinclude/gc_mark.h include/weakpointer.h include/new_gc_alloc.h \\\n\tinclude/gc_backptr.h include/gc_gcj.h include/leak_detector.h \\\n\tinclude/gc_amiga_redirects.h include/gc_pthread_redirects.h \\\n\tinclude/gc_config_macros.h include/gc_tiny_fl.h\npkgincludeHEADERS_INSTALL = $(INSTALL_HEADER)\nHEADERS = $(dist_noinst_HEADERS) $(include_HEADERS) \\\n\t$(pkginclude_HEADERS)\nETAGS = etags\nCTAGS = ctags\nDIST_SUBDIRS = $(SUBDIRS)\nDISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\ndistdir = $(PACKAGE)-$(VERSION)\ntop_distdir = $(distdir)\nam__remove_distdir = \\\n  { test ! -d $(distdir) \\\n    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \\\n         && rm -fr $(distdir); }; }\nDIST_ARCHIVES = $(distdir).tar.gz $(distdir).tar.bz2\nGZIP_ENV = --best\ndistuninstallcheck_listfiles = find . -type f -print\ndistcleancheck_listfiles = find . -type f -print\nACLOCAL = @ACLOCAL@\nAMDEP_FALSE = @AMDEP_FALSE@\nAMDEP_TRUE = @AMDEP_TRUE@\nAMTAR = @AMTAR@\nAR = @AR@\nAUTOCONF = @AUTOCONF@\nAUTOHEADER = @AUTOHEADER@\nAUTOMAKE = @AUTOMAKE@\nAWK = @AWK@\nCC = @CC@\nCCAS = @CCAS@\nCCASFLAGS = @CCASFLAGS@ $(DEFS)\nCCDEPMODE = @CCDEPMODE@\nCFLAGS = @CFLAGS@\nCOMPILER_XLC_FALSE = @COMPILER_XLC_FALSE@\nCOMPILER_XLC_TRUE = @COMPILER_XLC_TRUE@\nCPLUSPLUS_FALSE = @CPLUSPLUS_FALSE@\nCPLUSPLUS_TRUE = @CPLUSPLUS_TRUE@\nCPP = @CPP@\nCPPFLAGS = @CPPFLAGS@\nCXX = @CXX@\nCXXCPP = @CXXCPP@\nCXXDEPMODE = @CXXDEPMODE@\nCXXFLAGS = @CXXFLAGS@\nCXXINCLUDES = @CXXINCLUDES@\nCYGPATH_W = @CYGPATH_W@\nDARWIN_THREADS_FALSE = @DARWIN_THREADS_FALSE@\nDARWIN_THREADS_TRUE = @DARWIN_THREADS_TRUE@\nDEFS = @DEFS@\nDEPDIR = @DEPDIR@\nECHO = @ECHO@\nECHO_C = @ECHO_C@\nECHO_N = @ECHO_N@\nECHO_T = @ECHO_T@\nEGREP = @EGREP@\nENABLE_GCJ_SUPPORT_FALSE = @ENABLE_GCJ_SUPPORT_FALSE@\nENABLE_GCJ_SUPPORT_TRUE = @ENABLE_GCJ_SUPPORT_TRUE@\nEXEEXT = @EXEEXT@\nEXTRA_TEST_LIBS = @EXTRA_TEST_LIBS@\nF77 = @F77@\nFFLAGS = @FFLAGS@\nGC_CFLAGS = @GC_CFLAGS@\nGC_VERSION = @GC_VERSION@\nGREP = @GREP@\nINCLUDES = @INCLUDES@\nINSTALL_DATA = @INSTALL_DATA@\nINSTALL_PROGRAM = @INSTALL_PROGRAM@\nINSTALL_SCRIPT = @INSTALL_SCRIPT@\nINSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\nLDFLAGS = @LDFLAGS@\nLIBOBJS = @LIBOBJS@\nLIBS = @LIBS@\nLIBTOOL = @LIBTOOL@\nLN_S = @LN_S@\nLTLIBOBJS = @LTLIBOBJS@\nMAINT = @MAINT@\nMAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@\nMAINTAINER_MODE_TRUE = @MAINTAINER_MODE_TRUE@\nMAKEINFO = @MAKEINFO@\nNEED_ATOMIC_OPS_ASM_FALSE = @NEED_ATOMIC_OPS_ASM_FALSE@\nNEED_ATOMIC_OPS_ASM_TRUE = @NEED_ATOMIC_OPS_ASM_TRUE@\nOBJEXT = @OBJEXT@\nPACKAGE = @PACKAGE@\nPACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@\nPACKAGE_NAME = @PACKAGE_NAME@\nPACKAGE_STRING = @PACKAGE_STRING@\nPACKAGE_TARNAME = @PACKAGE_TARNAME@\nPACKAGE_VERSION = @PACKAGE_VERSION@\nPATH_SEPARATOR = @PATH_SEPARATOR@\nPTHREADS_FALSE = @PTHREADS_FALSE@\nPTHREADS_TRUE = @PTHREADS_TRUE@\nRANLIB = @RANLIB@\nSET_MAKE = @SET_MAKE@\nSHELL = @SHELL@\nSTRIP = @STRIP@\nTHREADDLLIBS = @THREADDLLIBS@\nTHREADS_FALSE = @THREADS_FALSE@\nTHREADS_TRUE = @THREADS_TRUE@\nUNWINDLIBS = @UNWINDLIBS@\nUSE_INTERNAL_LIBATOMIC_OPS_FALSE = @USE_INTERNAL_LIBATOMIC_OPS_FALSE@\nUSE_INTERNAL_LIBATOMIC_OPS_TRUE = @USE_INTERNAL_LIBATOMIC_OPS_TRUE@\nUSE_LIBDIR_FALSE = @USE_LIBDIR_FALSE@\nUSE_LIBDIR_TRUE = @USE_LIBDIR_TRUE@\nVERSION = @VERSION@\nWIN32_THREADS_FALSE = @WIN32_THREADS_FALSE@\nWIN32_THREADS_TRUE = @WIN32_THREADS_TRUE@\nac_ct_CC = @ac_ct_CC@\nac_ct_CXX = @ac_ct_CXX@\nac_ct_F77 = @ac_ct_F77@\naddlibs = @addlibs@\naddobjs = @addobjs@\nam__fastdepCC_FALSE = @am__fastdepCC_FALSE@\nam__fastdepCC_TRUE = @am__fastdepCC_TRUE@\nam__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@\nam__fastdepCXX_TRUE = @am__fastdepCXX_TRUE@\nam__include = @am__include@\nam__leading_dot = @am__leading_dot@\nam__quote = @am__quote@\nam__tar = @am__tar@\nam__untar = @am__untar@\natomic_ops_libs = @atomic_ops_libs@\nbindir = @bindir@\nbuild = @build@\nbuild_alias = @build_alias@\nbuild_cpu = @build_cpu@\nbuild_os = @build_os@\nbuild_vendor = @build_vendor@\ndatadir = @datadir@\ndatarootdir = @datarootdir@\ndocdir = @docdir@\ndvidir = @dvidir@\nexec_prefix = @exec_prefix@\nextra_ldflags_libgc = @extra_ldflags_libgc@\nhost = @host@\nhost_alias = @host_alias@\nhost_cpu = @host_cpu@\nhost_os = @host_os@\nhost_vendor = @host_vendor@\nhtmldir = @htmldir@\nincludedir = @includedir@\ninfodir = @infodir@\ninstall_sh = @install_sh@\nlibdir = @libdir@\nlibexecdir = @libexecdir@\nlocaledir = @localedir@\nlocalstatedir = @localstatedir@\nmandir = @mandir@\nmkdir_p = @mkdir_p@\noldincludedir = @oldincludedir@\npdfdir = @pdfdir@\nprefix = @prefix@\nprogram_transform_name = @program_transform_name@\npsdir = @psdir@\nsbindir = @sbindir@\nsharedstatedir = @sharedstatedir@\nsubdirs = @subdirs@\nsysconfdir = @sysconfdir@\ntarget = @target@\ntarget_alias = @target_alias@\ntarget_all = @target_all@\ntarget_cpu = @target_cpu@\ntarget_os = @target_os@\ntarget_vendor = @target_vendor@\n\n# We currently use the source files directly from libatomic_ops, if we\n# use the internal version.  This is done since libatomic_ops doesn't\n# use libtool, since it has no real use for it.  But that seems to make\n# it hard to use either the resulting object files or libraries.\n# Thus there seems too be no real reason to recusively build in the\n# libatomic_ops directory.\n# if USE_INTERNAL_LIBATOMICS_OPS\n# SUBDIRS = @maybe_libatomic_ops@\n# else\n# SUBDIRS =\n# endif\nSUBDIRS = \n\n# Initialize variables so that we can declare files locally.\n\n# FIXME: If Visual C++ users use Makefile.am, this should go into\n# pkginclude_HEADERS with proper AM_CONDITIONALization.  Otherwise\n# delete this comment.\n\n# documentation which is not installed\n#\n\n# other makefiles\n# :GOTCHA: deliberately we do not include 'Makefile'\n\n# files used by makefiles other than Makefile.am\n#\n\n# The libatomic_ops library.  This is not ideal, since we pick up junk from\n# there.  The hard-coded version number should also go.\n\n# :FIXME: why do we distribute this one???\n#\nEXTRA_DIST = gc_cpp.cpp README.QUICK BCC_MAKEFILE NT_MAKEFILE \\\n\tNT_THREADS_MAKEFILE OS2_MAKEFILE PCR-Makefile digimars.mak \\\n\tEMX_MAKEFILE Makefile.direct Makefile.dj Makefile.DLLs \\\n\tSMakefile.amiga WCC_MAKEFILE configure_atomic_ops.sh \\\n\tNT_STATIC_THREADS_MAKEFILE NT_X64_STATIC_THREADS_MAKEFILE \\\n\tadd_gc_prefix.c gcname.c if_mach.c if_not_there.c \\\n\thpux_test_and_clear.s gc.mak MacOS.c MacProjects.sit.hqx \\\n\tmach_dep.c setjmp_t.c threadlibs.c AmigaOS.c \\\n\tMac_files/datastart.c Mac_files/dataend.c \\\n\tMac_files/MacOS_config.h Mac_files/MacOS_Test_config.h \\\n\tinclude/private/msvc_dbg.h msvc_dbg.c libatomic_ops-1.2 \\\n\tlibtool.m4 cord/cordbscs.c cord/cordtest.c cord/de.c \\\n\tcord/cordprnt.c cord/cordxtra.c cord/de_cmds.h cord/de_win.h \\\n\tcord/de_win.c cord/de_win.RC cord/de_win.ICO\n\n# C Library\n# ---------\nlib_LTLIBRARIES = libgc.la $(am__append_4) libcord.la\ninclude_HEADERS = \n\n# installed headers\n#\npkginclude_HEADERS = $(am__append_5) include/gc.h include/gc_typed.h \\\n\tinclude/gc_inline.h include/gc_mark.h include/gc_cpp.h \\\n\tinclude/weakpointer.h include/new_gc_alloc.h \\\n\tinclude/gc_allocator.h include/gc_backptr.h include/gc_gcj.h \\\n\tinclude/leak_detector.h include/gc_amiga_redirects.h \\\n\tinclude/gc_pthread_redirects.h include/gc_config_macros.h \\\n\tinclude/gc_tiny_fl.h\n\n# headers which are not installed\n# (see include/include.am for more)\n#\n\n# headers which are not installed\n#\ndist_noinst_HEADERS = version.h include/private/gc_hdrs.h \\\n\tinclude/private/gc_priv.h include/private/gcconfig.h \\\n\tinclude/private/gc_pmark.h include/private/gc_locks.h \\\n\tinclude/private/dbg_mlc.h include/private/specific.h \\\n\tinclude/private/cord_pos.h include/private/pthread_support.h \\\n\tinclude/private/pthread_stop_world.h \\\n\tinclude/private/darwin_semaphore.h \\\n\tinclude/private/darwin_stop_world.h \\\n\tinclude/private/thread_local_alloc.h include/cord.h \\\n\tinclude/ec.h include/javaxfc.h\nTESTS = gctest$(EXEEXT) leaktest$(EXEEXT) middletest$(EXEEXT) \\\n\t$(am__append_6) $(am__append_8)\npkgconfigdir = $(libdir)/pkgconfig\ndist_pkgconfig_DATA = bdw-gc.pc\nlibgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c dbg_mlc.c \\\n\tdyn_load.c finalize.c gc_dlopen.c gcj_mlc.c headers.c malloc.c \\\n\tmallocx.c mark.c mark_rts.c misc.c new_hblk.c obj_map.c \\\n\tos_dep.c pcr_interface.c ptr_chck.c real_malloc.c reclaim.c \\\n\tspecific.c stubborn.c typd_mlc.c backgraph.c \\\n\tthread_local_alloc.c $(am__append_1) $(am__append_2) \\\n\t$(am__append_3)\n@NEED_ATOMIC_OPS_ASM_TRUE@nodist_libgc_la_SOURCES = atomic_ops_sysdeps.S\n@USE_INTERNAL_LIBATOMIC_OPS_TRUE@nodist_libgc_la_SOURCES = atomic_ops.c\n\n# Include THREADDLLIBS here to ensure that the correct versions of\n# linuxthread semaphore functions get linked:\nlibgc_la_LIBADD = @addobjs@ $(THREADDLLIBS) $(UNWINDLIBS)\nlibgc_la_DEPENDENCIES = @addobjs@\nlibgc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info 1:3:0 -no-undefined\nEXTRA_libgc_la_SOURCES = alpha_mach_dep.S \\\n    mips_sgi_mach_dep.s mips_ultrix_mach_dep.s \\\n    rs6000_mach_dep.s sparc_mach_dep.S sparc_netbsd_mach_dep.s \\\n    sparc_sunos4_mach_dep.s ia64_save_regs_in_stack.s\n\n@CPLUSPLUS_TRUE@libgccpp_la_SOURCES = gc_cpp.cc\n@CPLUSPLUS_TRUE@libgccpp_la_LIBADD = $(top_builddir)/libgc.la\n@CPLUSPLUS_TRUE@libgccpp_la_LDFLAGS = -version-info 1:3:0 -no-undefined\n\n# Misc\n# ----\nAM_CXXFLAGS = @GC_CFLAGS@\nAM_CFLAGS = @GC_CFLAGS@\n@COMPILER_XLC_FALSE@ASM_CPP_OPTIONS = -Wp,-P -x assembler-with-cpp\n\n#all_objs = @addobjs@ $(libgc_la_OBJECTS)\n#$(all_objs) : include/private/gcconfig.h include/private/gc_priv.h \\\n#include/private/gc_hdrs.h include/gc.h include/gc_gcj.h \\\n#include/gc_pthread_redirects.h include/gc_config_macros.h \\\n#include/private/thread_local_alloc.h include/private_support.h \\\n#include/private/pthread_stop_world.h \\\n#include/gc_mark.h @addincludes@\n@COMPILER_XLC_TRUE@ASM_CPP_OPTIONS = \ndist_noinst_SCRIPTS = callprocs configure.host\n\n# this is an auxiliary shell file used by Makefile and Makefile.direct\n#\nCONFIG_STATUS_DEPENDENCIES = $(srcdir)/configure.host\nlibcord_la_LIBADD = $(top_builddir)/libgc.la\nlibcord_la_LDFLAGS = -version-info 1:3:0 -no-undefined\nlibcord_la_SOURCES = \\\n\tcord/cordbscs.c\t\t\t\t\\\n\tcord/cordprnt.c\t\t\t\t\\\n\tcord/cordtest.c\t\t\t\t\\\n\tcord/cordxtra.c\t\t\t\t\n\n\n# Common libs to _LDADD for all tests.\ntest_ldadd = $(top_builddir)/libgc.la $(EXTRA_TEST_LIBS)\ngctest_SOURCES = tests/test.c\ngctest_LDADD = $(test_ldadd)\ngctest_DEPENDENCIES = $(top_builddir)/libgc.la\nleaktest_SOURCES = tests/leak_test.c\nleaktest_LDADD = $(test_ldadd)\nmiddletest_SOURCES = tests/middle.c\nmiddletest_LDADD = $(test_ldadd)\n@THREADS_TRUE@threadleaktest_SOURCES = tests/thread_leak_test.c\n@THREADS_TRUE@threadleaktest_LDADD = $(test_ldadd)\n@CPLUSPLUS_TRUE@test_cpp_SOURCES = tests/test_cpp.cc\n@CPLUSPLUS_TRUE@test_cpp_LDADD = libgccpp.la $(test_ldadd)\n\n# installed documentation\n#\ndist_pkgdata_DATA = \\\n\tdoc/barrett_diagram \\\n\tdoc/debugging.html \\\n\tdoc/gc.man \\\n\tdoc/gcdescr.html \\\n\tdoc/README \\\n\tdoc/README.amiga \\\n\tdoc/README.arm.cross \\\n\tdoc/README.autoconf \\\n\tdoc/README.changes \\\n\tdoc/README.contributors \\\n\tdoc/README.cords \\\n\tdoc/README.DGUX386 \\\n\tdoc/README.dj \\\n\tdoc/README.environment \\\n\tdoc/README.ews4800 \\\n\tdoc/README.hp \\\n\tdoc/README.linux \\\n\tdoc/README.Mac \\\n\tdoc/README.MacOSX \\\n\tdoc/README.macros \\\n\tdoc/README.OS2 \\\n\tdoc/README.rs6000 \\\n\tdoc/README.sgi \\\n\tdoc/README.solaris2 \\\n\tdoc/README.uts \\\n\tdoc/README.win32 \\\n\tdoc/README.win64 \\\n\tdoc/overview.html \\\n\tdoc/tree.html \\\n\tdoc/leak.html \\\n\tdoc/gcinterface.html \\\n\tdoc/scale.html \\\n\tdoc/README.darwin \\\n\tdoc/simple_example.html \\\n\tdoc/porting.html\n\nall: all-recursive\n\n.SUFFIXES:\n.SUFFIXES: .S .c .cc .lo .o .obj .s\nam--refresh:\n\t@:\n$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(srcdir)/include/include.am $(srcdir)/cord/cord.am $(srcdir)/tests/tests.am $(srcdir)/doc/doc.am $(am__configure_deps)\n\t@for dep in $?; do \\\n\t  case '$(am__configure_deps)' in \\\n\t    *$$dep*) \\\n\t      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign '; \\\n\t      cd $(srcdir) && $(AUTOMAKE) --foreign  \\\n\t\t&& exit 0; \\\n\t      exit 1;; \\\n\t  esac; \\\n\tdone; \\\n\techo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  Makefile'; \\\n\tcd $(top_srcdir) && \\\n\t  $(AUTOMAKE) --foreign  Makefile\n.PRECIOUS: Makefile\nMakefile: $(srcdir)/Makefile.in $(top_builddir)/config.status\n\t@case '$?' in \\\n\t  *config.status*) \\\n\t    echo ' $(SHELL) ./config.status'; \\\n\t    $(SHELL) ./config.status;; \\\n\t  *) \\\n\t    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \\\n\t    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \\\n\tesac;\n\n$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n\t$(SHELL) ./config.status --recheck\n\n$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)\n\tcd $(srcdir) && $(AUTOCONF)\n$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)\n\tcd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)\nbdw-gc.pc: $(top_builddir)/config.status $(srcdir)/bdw-gc.pc.in\n\tcd $(top_builddir) && $(SHELL) ./config.status $@\ninstall-libLTLIBRARIES: $(lib_LTLIBRARIES)\n\t@$(NORMAL_INSTALL)\n\ttest -z \"$(libdir)\" || $(mkdir_p) \"$(DESTDIR)$(libdir)\"\n\t@list='$(lib_LTLIBRARIES)'; for p in $$list; do \\\n\t  if test -f $$p; then \\\n\t    f=$(am__strip_dir) \\\n\t    echo \" $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(libdir)/$$f'\"; \\\n\t    $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) \"$$p\" \"$(DESTDIR)$(libdir)/$$f\"; \\\n\t  else :; fi; \\\n\tdone\n\nuninstall-libLTLIBRARIES:\n\t@$(NORMAL_UNINSTALL)\n\t@set -x; list='$(lib_LTLIBRARIES)'; for p in $$list; do \\\n\t  p=$(am__strip_dir) \\\n\t  echo \" $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$p'\"; \\\n\t  $(LIBTOOL) --mode=uninstall rm -f \"$(DESTDIR)$(libdir)/$$p\"; \\\n\tdone\n\nclean-libLTLIBRARIES:\n\t-test -z \"$(lib_LTLIBRARIES)\" || rm -f $(lib_LTLIBRARIES)\n\t@list='$(lib_LTLIBRARIES)'; for p in $$list; do \\\n\t  dir=\"`echo $$p | sed -e 's|/[^/]*$$||'`\"; \\\n\t  test \"$$dir\" != \"$$p\" || dir=.; \\\n\t  echo \"rm -f \\\"$${dir}/so_locations\\\"\"; \\\n\t  rm -f \"$${dir}/so_locations\"; \\\n\tdone\ncord/$(am__dirstamp):\n\t@$(mkdir_p) cord\n\t@: > cord/$(am__dirstamp)\ncord/$(DEPDIR)/$(am__dirstamp):\n\t@$(mkdir_p) cord/$(DEPDIR)\n\t@: > cord/$(DEPDIR)/$(am__dirstamp)\ncord/cordbscs.lo: cord/$(am__dirstamp) cord/$(DEPDIR)/$(am__dirstamp)\ncord/cordprnt.lo: cord/$(am__dirstamp) cord/$(DEPDIR)/$(am__dirstamp)\ncord/cordtest.lo: cord/$(am__dirstamp) cord/$(DEPDIR)/$(am__dirstamp)\ncord/cordxtra.lo: cord/$(am__dirstamp) cord/$(DEPDIR)/$(am__dirstamp)\nlibcord.la: $(libcord_la_OBJECTS) $(libcord_la_DEPENDENCIES) \n\t$(LINK) -rpath $(libdir) $(libcord_la_LDFLAGS) $(libcord_la_OBJECTS) $(libcord_la_LIBADD) $(LIBS)\nlibgc.la: $(libgc_la_OBJECTS) $(libgc_la_DEPENDENCIES) \n\t$(LINK) -rpath $(libdir) $(libgc_la_LDFLAGS) $(libgc_la_OBJECTS) $(libgc_la_LIBADD) $(LIBS)\nlibgccpp.la: $(libgccpp_la_OBJECTS) $(libgccpp_la_DEPENDENCIES) \n\t$(CXXLINK) $(am_libgccpp_la_rpath) $(libgccpp_la_LDFLAGS) $(libgccpp_la_OBJECTS) $(libgccpp_la_LIBADD) $(LIBS)\n\nclean-checkPROGRAMS:\n\t@list='$(check_PROGRAMS)'; for p in $$list; do \\\n\t  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \\\n\t  echo \" rm -f $$p $$f\"; \\\n\t  rm -f $$p $$f ; \\\n\tdone\ntests/$(am__dirstamp):\n\t@$(mkdir_p) tests\n\t@: > tests/$(am__dirstamp)\ntests/$(DEPDIR)/$(am__dirstamp):\n\t@$(mkdir_p) tests/$(DEPDIR)\n\t@: > tests/$(DEPDIR)/$(am__dirstamp)\ntests/test.$(OBJEXT): tests/$(am__dirstamp) \\\n\ttests/$(DEPDIR)/$(am__dirstamp)\ngctest$(EXEEXT): $(gctest_OBJECTS) $(gctest_DEPENDENCIES) \n\t@rm -f gctest$(EXEEXT)\n\t$(LINK) $(gctest_LDFLAGS) $(gctest_OBJECTS) $(gctest_LDADD) $(LIBS)\ntests/leak_test.$(OBJEXT): tests/$(am__dirstamp) \\\n\ttests/$(DEPDIR)/$(am__dirstamp)\nleaktest$(EXEEXT): $(leaktest_OBJECTS) $(leaktest_DEPENDENCIES) \n\t@rm -f leaktest$(EXEEXT)\n\t$(LINK) $(leaktest_LDFLAGS) $(leaktest_OBJECTS) $(leaktest_LDADD) $(LIBS)\ntests/middle.$(OBJEXT): tests/$(am__dirstamp) \\\n\ttests/$(DEPDIR)/$(am__dirstamp)\nmiddletest$(EXEEXT): $(middletest_OBJECTS) $(middletest_DEPENDENCIES) \n\t@rm -f middletest$(EXEEXT)\n\t$(LINK) $(middletest_LDFLAGS) $(middletest_OBJECTS) $(middletest_LDADD) $(LIBS)\ntests/test_cpp.$(OBJEXT): tests/$(am__dirstamp) \\\n\ttests/$(DEPDIR)/$(am__dirstamp)\ntest_cpp$(EXEEXT): $(test_cpp_OBJECTS) $(test_cpp_DEPENDENCIES) \n\t@rm -f test_cpp$(EXEEXT)\n\t$(CXXLINK) $(test_cpp_LDFLAGS) $(test_cpp_OBJECTS) $(test_cpp_LDADD) $(LIBS)\ntests/thread_leak_test.$(OBJEXT): tests/$(am__dirstamp) \\\n\ttests/$(DEPDIR)/$(am__dirstamp)\nthreadleaktest$(EXEEXT): $(threadleaktest_OBJECTS) $(threadleaktest_DEPENDENCIES) \n\t@rm -f threadleaktest$(EXEEXT)\n\t$(LINK) $(threadleaktest_LDFLAGS) $(threadleaktest_OBJECTS) $(threadleaktest_LDADD) $(LIBS)\n\nmostlyclean-compile:\n\t-rm -f *.$(OBJEXT)\n\t-rm -f cord/cordbscs.$(OBJEXT)\n\t-rm -f cord/cordbscs.lo\n\t-rm -f cord/cordprnt.$(OBJEXT)\n\t-rm -f cord/cordprnt.lo\n\t-rm -f cord/cordtest.$(OBJEXT)\n\t-rm -f cord/cordtest.lo\n\t-rm -f cord/cordxtra.$(OBJEXT)\n\t-rm -f cord/cordxtra.lo\n\t-rm -f tests/leak_test.$(OBJEXT)\n\t-rm -f tests/middle.$(OBJEXT)\n\t-rm -f tests/test.$(OBJEXT)\n\t-rm -f tests/test_cpp.$(OBJEXT)\n\t-rm -f tests/thread_leak_test.$(OBJEXT)\n\ndistclean-compile:\n\t-rm -f *.tab.c\n\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/allchblk.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alloc.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/atomic_ops.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/backgraph.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/blacklst.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/checksums.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/darwin_stop_world.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dbg_mlc.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dyn_load.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/finalize.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gc_cpp.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gc_dlopen.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gcj_mlc.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/headers.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/malloc.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mallocx.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mark.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mark_rts.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/misc.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/new_hblk.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/obj_map.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/os_dep.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pcr_interface.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pthread_stop_world.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pthread_support.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ptr_chck.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/real_malloc.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reclaim.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/specific.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stubborn.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/thread_local_alloc.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/typd_mlc.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/win32_threads.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@cord/$(DEPDIR)/cordbscs.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@cord/$(DEPDIR)/cordprnt.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@cord/$(DEPDIR)/cordtest.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@cord/$(DEPDIR)/cordxtra.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@tests/$(DEPDIR)/leak_test.Po@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@tests/$(DEPDIR)/middle.Po@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@tests/$(DEPDIR)/test.Po@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@tests/$(DEPDIR)/test_cpp.Po@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@tests/$(DEPDIR)/thread_leak_test.Po@am__quote@\n\n.S.o:\n\t$(CCASCOMPILE) -c $<\n\n.S.obj:\n\t$(CCASCOMPILE) -c `$(CYGPATH_W) '$<'`\n\n.c.o:\n@am__fastdepCC_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.o$$||'`; \\\n@am__fastdepCC_TRUE@\tif $(COMPILE) -MT $@ -MD -MP -MF \"$$depbase.Tpo\" -c -o $@ $<; \\\n@am__fastdepCC_TRUE@\tthen mv -f \"$$depbase.Tpo\" \"$$depbase.Po\"; else rm -f \"$$depbase.Tpo\"; exit 1; fi\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n@am__fastdepCC_FALSE@\t$(COMPILE) -c -o $@ $<\n\n.c.obj:\n@am__fastdepCC_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.obj$$||'`; \\\n@am__fastdepCC_TRUE@\tif $(COMPILE) -MT $@ -MD -MP -MF \"$$depbase.Tpo\" -c -o $@ `$(CYGPATH_W) '$<'`; \\\n@am__fastdepCC_TRUE@\tthen mv -f \"$$depbase.Tpo\" \"$$depbase.Po\"; else rm -f \"$$depbase.Tpo\"; exit 1; fi\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n@am__fastdepCC_FALSE@\t$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n\n.c.lo:\n@am__fastdepCC_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.lo$$||'`; \\\n@am__fastdepCC_TRUE@\tif $(LTCOMPILE) -MT $@ -MD -MP -MF \"$$depbase.Tpo\" -c -o $@ $<; \\\n@am__fastdepCC_TRUE@\tthen mv -f \"$$depbase.Tpo\" \"$$depbase.Plo\"; else rm -f \"$$depbase.Tpo\"; exit 1; fi\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$<' object='$@' libtool=yes @AMDEPBACKSLASH@\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n@am__fastdepCC_FALSE@\t$(LTCOMPILE) -c -o $@ $<\n\n.cc.o:\n@am__fastdepCXX_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.o$$||'`; \\\n@am__fastdepCXX_TRUE@\tif $(CXXCOMPILE) -MT $@ -MD -MP -MF \"$$depbase.Tpo\" -c -o $@ $<; \\\n@am__fastdepCXX_TRUE@\tthen mv -f \"$$depbase.Tpo\" \"$$depbase.Po\"; else rm -f \"$$depbase.Tpo\"; exit 1; fi\n@AMDEP_TRUE@@am__fastdepCXX_FALSE@\tsource='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n@AMDEP_TRUE@@am__fastdepCXX_FALSE@\tDEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n@am__fastdepCXX_FALSE@\t$(CXXCOMPILE) -c -o $@ $<\n\n.cc.obj:\n@am__fastdepCXX_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.obj$$||'`; \\\n@am__fastdepCXX_TRUE@\tif $(CXXCOMPILE) -MT $@ -MD -MP -MF \"$$depbase.Tpo\" -c -o $@ `$(CYGPATH_W) '$<'`; \\\n@am__fastdepCXX_TRUE@\tthen mv -f \"$$depbase.Tpo\" \"$$depbase.Po\"; else rm -f \"$$depbase.Tpo\"; exit 1; fi\n@AMDEP_TRUE@@am__fastdepCXX_FALSE@\tsource='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n@AMDEP_TRUE@@am__fastdepCXX_FALSE@\tDEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n@am__fastdepCXX_FALSE@\t$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n\n.cc.lo:\n@am__fastdepCXX_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.lo$$||'`; \\\n@am__fastdepCXX_TRUE@\tif $(LTCXXCOMPILE) -MT $@ -MD -MP -MF \"$$depbase.Tpo\" -c -o $@ $<; \\\n@am__fastdepCXX_TRUE@\tthen mv -f \"$$depbase.Tpo\" \"$$depbase.Plo\"; else rm -f \"$$depbase.Tpo\"; exit 1; fi\n@AMDEP_TRUE@@am__fastdepCXX_FALSE@\tsource='$<' object='$@' libtool=yes @AMDEPBACKSLASH@\n@AMDEP_TRUE@@am__fastdepCXX_FALSE@\tDEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n@am__fastdepCXX_FALSE@\t$(LTCXXCOMPILE) -c -o $@ $<\n\n.s.o:\n\t$(CCASCOMPILE) -c $<\n\n.s.obj:\n\t$(CCASCOMPILE) -c `$(CYGPATH_W) '$<'`\n\nmostlyclean-libtool:\n\t-rm -f *.lo\n\nclean-libtool:\n\t-rm -rf .libs _libs\n\t-rm -rf cord/.libs cord/_libs\n\ndistclean-libtool:\n\t-rm -f libtool\nuninstall-info-am:\ninstall-dist_pkgconfigDATA: $(dist_pkgconfig_DATA)\n\t@$(NORMAL_INSTALL)\n\ttest -z \"$(pkgconfigdir)\" || $(mkdir_p) \"$(DESTDIR)$(pkgconfigdir)\"\n\t@list='$(dist_pkgconfig_DATA)'; for p in $$list; do \\\n\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n\t  f=$(am__strip_dir) \\\n\t  echo \" $(dist_pkgconfigDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(pkgconfigdir)/$$f'\"; \\\n\t  $(dist_pkgconfigDATA_INSTALL) \"$$d$$p\" \"$(DESTDIR)$(pkgconfigdir)/$$f\"; \\\n\tdone\n\nuninstall-dist_pkgconfigDATA:\n\t@$(NORMAL_UNINSTALL)\n\t@list='$(dist_pkgconfig_DATA)'; for p in $$list; do \\\n\t  f=$(am__strip_dir) \\\n\t  echo \" rm -f '$(DESTDIR)$(pkgconfigdir)/$$f'\"; \\\n\t  rm -f \"$(DESTDIR)$(pkgconfigdir)/$$f\"; \\\n\tdone\ninstall-dist_pkgdataDATA: $(dist_pkgdata_DATA)\n\t@$(NORMAL_INSTALL)\n\ttest -z \"$(pkgdatadir)\" || $(mkdir_p) \"$(DESTDIR)$(pkgdatadir)\"\n\t@list='$(dist_pkgdata_DATA)'; for p in $$list; do \\\n\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n\t  f=$(am__strip_dir) \\\n\t  echo \" $(dist_pkgdataDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(pkgdatadir)/$$f'\"; \\\n\t  $(dist_pkgdataDATA_INSTALL) \"$$d$$p\" \"$(DESTDIR)$(pkgdatadir)/$$f\"; \\\n\tdone\n\nuninstall-dist_pkgdataDATA:\n\t@$(NORMAL_UNINSTALL)\n\t@list='$(dist_pkgdata_DATA)'; for p in $$list; do \\\n\t  f=$(am__strip_dir) \\\n\t  echo \" rm -f '$(DESTDIR)$(pkgdatadir)/$$f'\"; \\\n\t  rm -f \"$(DESTDIR)$(pkgdatadir)/$$f\"; \\\n\tdone\ninstall-includeHEADERS: $(include_HEADERS)\n\t@$(NORMAL_INSTALL)\n\ttest -z \"$(includedir)\" || $(mkdir_p) \"$(DESTDIR)$(includedir)\"\n\t@list='$(include_HEADERS)'; for p in $$list; do \\\n\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n\t  f=$(am__strip_dir) \\\n\t  echo \" $(includeHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(includedir)/$$f'\"; \\\n\t  $(includeHEADERS_INSTALL) \"$$d$$p\" \"$(DESTDIR)$(includedir)/$$f\"; \\\n\tdone\n\nuninstall-includeHEADERS:\n\t@$(NORMAL_UNINSTALL)\n\t@list='$(include_HEADERS)'; for p in $$list; do \\\n\t  f=$(am__strip_dir) \\\n\t  echo \" rm -f '$(DESTDIR)$(includedir)/$$f'\"; \\\n\t  rm -f \"$(DESTDIR)$(includedir)/$$f\"; \\\n\tdone\ninstall-pkgincludeHEADERS: $(pkginclude_HEADERS)\n\t@$(NORMAL_INSTALL)\n\ttest -z \"$(pkgincludedir)\" || $(mkdir_p) \"$(DESTDIR)$(pkgincludedir)\"\n\t@list='$(pkginclude_HEADERS)'; for p in $$list; do \\\n\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n\t  f=$(am__strip_dir) \\\n\t  echo \" $(pkgincludeHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(pkgincludedir)/$$f'\"; \\\n\t  $(pkgincludeHEADERS_INSTALL) \"$$d$$p\" \"$(DESTDIR)$(pkgincludedir)/$$f\"; \\\n\tdone\n\nuninstall-pkgincludeHEADERS:\n\t@$(NORMAL_UNINSTALL)\n\t@list='$(pkginclude_HEADERS)'; for p in $$list; do \\\n\t  f=$(am__strip_dir) \\\n\t  echo \" rm -f '$(DESTDIR)$(pkgincludedir)/$$f'\"; \\\n\t  rm -f \"$(DESTDIR)$(pkgincludedir)/$$f\"; \\\n\tdone\n\n# This directory's subdirectories are mostly independent; you can cd\n# into them and run `make' without going through this Makefile.\n# To change the values of `make' variables: instead of editing Makefiles,\n# (1) if the variable is set in `config.status', edit `config.status'\n#     (which will cause the Makefiles to be regenerated when you run `make');\n# (2) otherwise, pass the desired values on the `make' command line.\n$(RECURSIVE_TARGETS):\n\t@failcom='exit 1'; \\\n\tfor f in x $$MAKEFLAGS; do \\\n\t  case $$f in \\\n\t    *=* | --[!k]*);; \\\n\t    *k*) failcom='fail=yes';; \\\n\t  esac; \\\n\tdone; \\\n\tdot_seen=no; \\\n\ttarget=`echo $@ | sed s/-recursive//`; \\\n\tlist='$(SUBDIRS)'; for subdir in $$list; do \\\n\t  echo \"Making $$target in $$subdir\"; \\\n\t  if test \"$$subdir\" = \".\"; then \\\n\t    dot_seen=yes; \\\n\t    local_target=\"$$target-am\"; \\\n\t  else \\\n\t    local_target=\"$$target\"; \\\n\t  fi; \\\n\t  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \\\n\t  || eval $$failcom; \\\n\tdone; \\\n\tif test \"$$dot_seen\" = \"no\"; then \\\n\t  $(MAKE) $(AM_MAKEFLAGS) \"$$target-am\" || exit 1; \\\n\tfi; test -z \"$$fail\"\n\nmostlyclean-recursive clean-recursive distclean-recursive \\\nmaintainer-clean-recursive:\n\t@failcom='exit 1'; \\\n\tfor f in x $$MAKEFLAGS; do \\\n\t  case $$f in \\\n\t    *=* | --[!k]*);; \\\n\t    *k*) failcom='fail=yes';; \\\n\t  esac; \\\n\tdone; \\\n\tdot_seen=no; \\\n\tcase \"$@\" in \\\n\t  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \\\n\t  *) list='$(SUBDIRS)' ;; \\\n\tesac; \\\n\trev=''; for subdir in $$list; do \\\n\t  if test \"$$subdir\" = \".\"; then :; else \\\n\t    rev=\"$$subdir $$rev\"; \\\n\t  fi; \\\n\tdone; \\\n\trev=\"$$rev .\"; \\\n\ttarget=`echo $@ | sed s/-recursive//`; \\\n\tfor subdir in $$rev; do \\\n\t  echo \"Making $$target in $$subdir\"; \\\n\t  if test \"$$subdir\" = \".\"; then \\\n\t    local_target=\"$$target-am\"; \\\n\t  else \\\n\t    local_target=\"$$target\"; \\\n\t  fi; \\\n\t  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \\\n\t  || eval $$failcom; \\\n\tdone && test -z \"$$fail\"\ntags-recursive:\n\tlist='$(SUBDIRS)'; for subdir in $$list; do \\\n\t  test \"$$subdir\" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \\\n\tdone\nctags-recursive:\n\tlist='$(SUBDIRS)'; for subdir in $$list; do \\\n\t  test \"$$subdir\" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \\\n\tdone\n\nID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)\n\tlist='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \\\n\tunique=`for i in $$list; do \\\n\t    if test -f \"$$i\"; then echo $$i; else echo $(srcdir)/$$i; fi; \\\n\t  done | \\\n\t  $(AWK) '    { files[$$0] = 1; } \\\n\t       END { for (i in files) print i; }'`; \\\n\tmkid -fID $$unique\ntags: TAGS\n\nTAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \\\n\t\t$(TAGS_FILES) $(LISP)\n\ttags=; \\\n\there=`pwd`; \\\n\tif ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \\\n\t  include_option=--etags-include; \\\n\t  empty_fix=.; \\\n\telse \\\n\t  include_option=--include; \\\n\t  empty_fix=; \\\n\tfi; \\\n\tlist='$(SUBDIRS)'; for subdir in $$list; do \\\n\t  if test \"$$subdir\" = .; then :; else \\\n\t    test ! -f $$subdir/TAGS || \\\n\t      tags=\"$$tags $$include_option=$$here/$$subdir/TAGS\"; \\\n\t  fi; \\\n\tdone; \\\n\tlist='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \\\n\tunique=`for i in $$list; do \\\n\t    if test -f \"$$i\"; then echo $$i; else echo $(srcdir)/$$i; fi; \\\n\t  done | \\\n\t  $(AWK) '    { files[$$0] = 1; } \\\n\t       END { for (i in files) print i; }'`; \\\n\tif test -z \"$(ETAGS_ARGS)$$tags$$unique\"; then :; else \\\n\t  test -n \"$$unique\" || unique=$$empty_fix; \\\n\t  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n\t    $$tags $$unique; \\\n\tfi\nctags: CTAGS\nCTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \\\n\t\t$(TAGS_FILES) $(LISP)\n\ttags=; \\\n\there=`pwd`; \\\n\tlist='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \\\n\tunique=`for i in $$list; do \\\n\t    if test -f \"$$i\"; then echo $$i; else echo $(srcdir)/$$i; fi; \\\n\t  done | \\\n\t  $(AWK) '    { files[$$0] = 1; } \\\n\t       END { for (i in files) print i; }'`; \\\n\ttest -z \"$(CTAGS_ARGS)$$tags$$unique\" \\\n\t  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \\\n\t     $$tags $$unique\n\nGTAGS:\n\there=`$(am__cd) $(top_builddir) && pwd` \\\n\t  && cd $(top_srcdir) \\\n\t  && gtags -i $(GTAGS_ARGS) $$here\n\ndistclean-tags:\n\t-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags\n\ncheck-TESTS: $(TESTS)\n\t@failed=0; all=0; xfail=0; xpass=0; skip=0; \\\n\tsrcdir=$(srcdir); export srcdir; \\\n\tlist='$(TESTS)'; \\\n\tif test -n \"$$list\"; then \\\n\t  for tst in $$list; do \\\n\t    if test -f ./$$tst; then dir=./; \\\n\t    elif test -f $$tst; then dir=; \\\n\t    else dir=\"$(srcdir)/\"; fi; \\\n\t    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \\\n\t      all=`expr $$all + 1`; \\\n\t      case \" $(XFAIL_TESTS) \" in \\\n\t      *\" $$tst \"*) \\\n\t\txpass=`expr $$xpass + 1`; \\\n\t\tfailed=`expr $$failed + 1`; \\\n\t\techo \"XPASS: $$tst\"; \\\n\t      ;; \\\n\t      *) \\\n\t\techo \"PASS: $$tst\"; \\\n\t      ;; \\\n\t      esac; \\\n\t    elif test $$? -ne 77; then \\\n\t      all=`expr $$all + 1`; \\\n\t      case \" $(XFAIL_TESTS) \" in \\\n\t      *\" $$tst \"*) \\\n\t\txfail=`expr $$xfail + 1`; \\\n\t\techo \"XFAIL: $$tst\"; \\\n\t      ;; \\\n\t      *) \\\n\t\tfailed=`expr $$failed + 1`; \\\n\t\techo \"FAIL: $$tst\"; \\\n\t      ;; \\\n\t      esac; \\\n\t    else \\\n\t      skip=`expr $$skip + 1`; \\\n\t      echo \"SKIP: $$tst\"; \\\n\t    fi; \\\n\t  done; \\\n\t  if test \"$$failed\" -eq 0; then \\\n\t    if test \"$$xfail\" -eq 0; then \\\n\t      banner=\"All $$all tests passed\"; \\\n\t    else \\\n\t      banner=\"All $$all tests behaved as expected ($$xfail expected failures)\"; \\\n\t    fi; \\\n\t  else \\\n\t    if test \"$$xpass\" -eq 0; then \\\n\t      banner=\"$$failed of $$all tests failed\"; \\\n\t    else \\\n\t      banner=\"$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)\"; \\\n\t    fi; \\\n\t  fi; \\\n\t  dashes=\"$$banner\"; \\\n\t  skipped=\"\"; \\\n\t  if test \"$$skip\" -ne 0; then \\\n\t    skipped=\"($$skip tests were not run)\"; \\\n\t    test `echo \"$$skipped\" | wc -c` -le `echo \"$$banner\" | wc -c` || \\\n\t      dashes=\"$$skipped\"; \\\n\t  fi; \\\n\t  report=\"\"; \\\n\t  if test \"$$failed\" -ne 0 && test -n \"$(PACKAGE_BUGREPORT)\"; then \\\n\t    report=\"Please report to $(PACKAGE_BUGREPORT)\"; \\\n\t    test `echo \"$$report\" | wc -c` -le `echo \"$$banner\" | wc -c` || \\\n\t      dashes=\"$$report\"; \\\n\t  fi; \\\n\t  dashes=`echo \"$$dashes\" | sed s/./=/g`; \\\n\t  echo \"$$dashes\"; \\\n\t  echo \"$$banner\"; \\\n\t  test -z \"$$skipped\" || echo \"$$skipped\"; \\\n\t  test -z \"$$report\" || echo \"$$report\"; \\\n\t  echo \"$$dashes\"; \\\n\t  test \"$$failed\" -eq 0; \\\n\telse :; fi\n\ndistdir: $(DISTFILES)\n\t$(am__remove_distdir)\n\tmkdir $(distdir)\n\t$(mkdir_p) $(distdir)/. $(distdir)/Mac_files $(distdir)/cord $(distdir)/doc $(distdir)/include $(distdir)/include/private $(distdir)/tests\n\t@srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`; \\\n\ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's|.|.|g'`; \\\n\tlist='$(DISTFILES)'; for file in $$list; do \\\n\t  case $$file in \\\n\t    $(srcdir)/*) file=`echo \"$$file\" | sed \"s|^$$srcdirstrip/||\"`;; \\\n\t    $(top_srcdir)/*) file=`echo \"$$file\" | sed \"s|^$$topsrcdirstrip/|$(top_builddir)/|\"`;; \\\n\t  esac; \\\n\t  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \\\n\t  dir=`echo \"$$file\" | sed -e 's,/[^/]*$$,,'`; \\\n\t  if test \"$$dir\" != \"$$file\" && test \"$$dir\" != \".\"; then \\\n\t    dir=\"/$$dir\"; \\\n\t    $(mkdir_p) \"$(distdir)$$dir\"; \\\n\t  else \\\n\t    dir=''; \\\n\t  fi; \\\n\t  if test -d $$d/$$file; then \\\n\t    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \\\n\t      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \\\n\t    fi; \\\n\t    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \\\n\t  else \\\n\t    test -f $(distdir)/$$file \\\n\t    || cp -p $$d/$$file $(distdir)/$$file \\\n\t    || exit 1; \\\n\t  fi; \\\n\tdone\n\tlist='$(DIST_SUBDIRS)'; for subdir in $$list; do \\\n\t  if test \"$$subdir\" = .; then :; else \\\n\t    test -d \"$(distdir)/$$subdir\" \\\n\t    || $(mkdir_p) \"$(distdir)/$$subdir\" \\\n\t    || exit 1; \\\n\t    distdir=`$(am__cd) $(distdir) && pwd`; \\\n\t    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \\\n\t    (cd $$subdir && \\\n\t      $(MAKE) $(AM_MAKEFLAGS) \\\n\t        top_distdir=\"$$top_distdir\" \\\n\t        distdir=\"$$distdir/$$subdir\" \\\n\t        distdir) \\\n\t      || exit 1; \\\n\t  fi; \\\n\tdone\n\t-find $(distdir) -type d ! -perm -777 -exec chmod a+rwx {} \\; -o \\\n\t  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \\; -o \\\n\t  ! -type d ! -perm -400 -exec chmod a+r {} \\; -o \\\n\t  ! -type d ! -perm -444 -exec $(SHELL) $(install_sh) -c -m a+r {} {} \\; \\\n\t|| chmod -R a+r $(distdir)\ndist-gzip: distdir\n\ttardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz\n\t$(am__remove_distdir)\ndist-bzip2: distdir\n\ttardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2\n\t$(am__remove_distdir)\n\ndist-tarZ: distdir\n\ttardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z\n\t$(am__remove_distdir)\n\ndist-shar: distdir\n\tshar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz\n\t$(am__remove_distdir)\n\ndist-zip: distdir\n\t-rm -f $(distdir).zip\n\tzip -rq $(distdir).zip $(distdir)\n\t$(am__remove_distdir)\n\ndist dist-all: distdir\n\ttardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz\n\ttardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2\n\t$(am__remove_distdir)\n\n# This target untars the dist file and tries a VPATH configuration.  Then\n# it guarantees that the distribution is self-contained by making another\n# tarfile.\ndistcheck: dist\n\tcase '$(DIST_ARCHIVES)' in \\\n\t*.tar.gz*) \\\n\t  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(am__untar) ;;\\\n\t*.tar.bz2*) \\\n\t  bunzip2 -c $(distdir).tar.bz2 | $(am__untar) ;;\\\n\t*.tar.Z*) \\\n\t  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\\\n\t*.shar.gz*) \\\n\t  GZIP=$(GZIP_ENV) gunzip -c $(distdir).shar.gz | unshar ;;\\\n\t*.zip*) \\\n\t  unzip $(distdir).zip ;;\\\n\tesac\n\tchmod -R a-w $(distdir); chmod a+w $(distdir)\n\tmkdir $(distdir)/_build\n\tmkdir $(distdir)/_inst\n\tchmod a-w $(distdir)\n\tdc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\\\/]:[\\\\/],/,'` \\\n\t  && dc_destdir=\"$${TMPDIR-/tmp}/am-dc-$$$$/\" \\\n\t  && cd $(distdir)/_build \\\n\t  && ../configure --srcdir=.. --prefix=\"$$dc_install_base\" \\\n\t    $(DISTCHECK_CONFIGURE_FLAGS) \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) dvi \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) check \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) install \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) installcheck \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) uninstall \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir=\"$$dc_install_base\" \\\n\t        distuninstallcheck \\\n\t  && chmod -R a-w \"$$dc_install_base\" \\\n\t  && ({ \\\n\t       (cd ../.. && umask 077 && mkdir \"$$dc_destdir\") \\\n\t       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR=\"$$dc_destdir\" install \\\n\t       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR=\"$$dc_destdir\" uninstall \\\n\t       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR=\"$$dc_destdir\" \\\n\t            distuninstallcheck_dir=\"$$dc_destdir\" distuninstallcheck; \\\n\t      } || { rm -rf \"$$dc_destdir\"; exit 1; }) \\\n\t  && rm -rf \"$$dc_destdir\" \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) dist \\\n\t  && rm -rf $(DIST_ARCHIVES) \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck\n\t$(am__remove_distdir)\n\t@(echo \"$(distdir) archives ready for distribution: \"; \\\n\t  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \\\n\t  sed -e '1{h;s/./=/g;p;x;}' -e '$${p;x;}'\ndistuninstallcheck:\n\t@cd $(distuninstallcheck_dir) \\\n\t&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \\\n\t   || { echo \"ERROR: files left after uninstall:\" ; \\\n\t        if test -n \"$(DESTDIR)\"; then \\\n\t          echo \"  (check DESTDIR support)\"; \\\n\t        fi ; \\\n\t        $(distuninstallcheck_listfiles) ; \\\n\t        exit 1; } >&2\ndistcleancheck: distclean\n\t@if test '$(srcdir)' = . ; then \\\n\t  echo \"ERROR: distcleancheck can only run from a VPATH build\" ; \\\n\t  exit 1 ; \\\n\tfi\n\t@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \\\n\t  || { echo \"ERROR: files left in build directory after distclean:\" ; \\\n\t       $(distcleancheck_listfiles) ; \\\n\t       exit 1; } >&2\ncheck-am: all-am\n\t$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)\n\t$(MAKE) $(AM_MAKEFLAGS) check-TESTS\ncheck: check-recursive\nall-am: Makefile $(LTLIBRARIES) $(SCRIPTS) $(DATA) $(HEADERS)\ninstalldirs: installdirs-recursive\ninstalldirs-am:\n\tfor dir in \"$(DESTDIR)$(libdir)\" \"$(DESTDIR)$(pkgconfigdir)\" \"$(DESTDIR)$(pkgdatadir)\" \"$(DESTDIR)$(includedir)\" \"$(DESTDIR)$(pkgincludedir)\"; do \\\n\t  test -z \"$$dir\" || $(mkdir_p) \"$$dir\"; \\\n\tdone\ninstall: install-recursive\ninstall-exec: install-exec-recursive\ninstall-data: install-data-recursive\nuninstall: uninstall-recursive\n\ninstall-am: all-am\n\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n\ninstallcheck: installcheck-recursive\ninstall-strip:\n\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n\t  install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n\t  `test -z '$(STRIP)' || \\\n\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\nmostlyclean-generic:\n\nclean-generic:\n\ndistclean-generic:\n\t-test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)\n\t-rm -f cord/$(DEPDIR)/$(am__dirstamp)\n\t-rm -f cord/$(am__dirstamp)\n\t-rm -f tests/$(DEPDIR)/$(am__dirstamp)\n\t-rm -f tests/$(am__dirstamp)\n\nmaintainer-clean-generic:\n\t@echo \"This command is intended for maintainers to use\"\n\t@echo \"it deletes files that may require special tools to rebuild.\"\nclean: clean-recursive\n\nclean-am: clean-checkPROGRAMS clean-generic clean-libLTLIBRARIES \\\n\tclean-libtool mostlyclean-am\n\ndistclean: distclean-recursive\n\t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n\t-rm -rf ./$(DEPDIR) cord/$(DEPDIR) tests/$(DEPDIR)\n\t-rm -f Makefile\ndistclean-am: clean-am distclean-compile distclean-generic \\\n\tdistclean-libtool distclean-tags\n\ndvi: dvi-recursive\n\ndvi-am:\n\nhtml: html-recursive\n\ninfo: info-recursive\n\ninfo-am:\n\ninstall-data-am: install-dist_pkgconfigDATA install-dist_pkgdataDATA \\\n\tinstall-includeHEADERS install-pkgincludeHEADERS\n\ninstall-exec-am: install-libLTLIBRARIES\n\ninstall-info: install-info-recursive\n\ninstall-man:\n\ninstallcheck-am:\n\nmaintainer-clean: maintainer-clean-recursive\n\t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n\t-rm -rf $(top_srcdir)/autom4te.cache\n\t-rm -rf ./$(DEPDIR) cord/$(DEPDIR) tests/$(DEPDIR)\n\t-rm -f Makefile\nmaintainer-clean-am: distclean-am maintainer-clean-generic\n\nmostlyclean: mostlyclean-recursive\n\nmostlyclean-am: mostlyclean-compile mostlyclean-generic \\\n\tmostlyclean-libtool\n\npdf: pdf-recursive\n\npdf-am:\n\nps: ps-recursive\n\nps-am:\n\nuninstall-am: uninstall-dist_pkgconfigDATA uninstall-dist_pkgdataDATA \\\n\tuninstall-includeHEADERS uninstall-info-am \\\n\tuninstall-libLTLIBRARIES uninstall-pkgincludeHEADERS\n\nuninstall-info: uninstall-info-recursive\n\n.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am am--refresh check \\\n\tcheck-TESTS check-am clean clean-checkPROGRAMS clean-generic \\\n\tclean-libLTLIBRARIES clean-libtool clean-recursive ctags \\\n\tctags-recursive dist dist-all dist-bzip2 dist-gzip dist-shar \\\n\tdist-tarZ dist-zip distcheck distclean distclean-compile \\\n\tdistclean-generic distclean-libtool distclean-recursive \\\n\tdistclean-tags distcleancheck distdir distuninstallcheck dvi \\\n\tdvi-am html html-am info info-am install install-am \\\n\tinstall-data install-data-am install-dist_pkgconfigDATA \\\n\tinstall-dist_pkgdataDATA install-exec install-exec-am \\\n\tinstall-includeHEADERS install-info install-info-am \\\n\tinstall-libLTLIBRARIES install-man install-pkgincludeHEADERS \\\n\tinstall-strip installcheck installcheck-am installdirs \\\n\tinstalldirs-am maintainer-clean maintainer-clean-generic \\\n\tmaintainer-clean-recursive mostlyclean mostlyclean-compile \\\n\tmostlyclean-generic mostlyclean-libtool mostlyclean-recursive \\\n\tpdf pdf-am ps ps-am tags tags-recursive uninstall uninstall-am \\\n\tuninstall-dist_pkgconfigDATA uninstall-dist_pkgdataDATA \\\n\tuninstall-includeHEADERS uninstall-info-am \\\n\tuninstall-libLTLIBRARIES uninstall-pkgincludeHEADERS\n\n.s.lo:\n\t$(LTCOMPILE) $(ASM_CPP_OPTIONS) -c $<\n\n.S.lo:\n\t$(LTCOMPILE) $(ASM_CPP_OPTIONS) -c $<\n\n#\n# :GOTCHA: GNU make rule for making .s out of .S is flawed, \n# it will not remove dest if building fails\n.S.s:\n\tif $(CPP) $< >$@ ; then :; else rm -f $@; fi\n\n# Putting these at the top causes cord to be built first, and not find libgc.a\n# on HP/UX.  There may be a better fix.\n# Tell versions [3.59,3.63) of GNU make to not export all variables.\n# Otherwise a system limit (for SysV at least) may be exceeded.\n.NOEXPORT:\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/include/gc_pthread_redirects.h": "/* Our pthread support normally needs to intercept a number of thread\t*/\n/* calls.  We arrange to do that here, if appropriate.\t\t\t*/\n\n#ifndef GC_PTHREAD_REDIRECTS_H\n\n#define GC_PTHREAD_REDIRECTS_H\n\n#if !defined(GC_USE_LD_WRAP) && defined(GC_PTHREADS)\n/* We need to intercept calls to many of the threads primitives, so   \t */\n/* that we can locate thread stacks and stop the world.                  */\n/* Note also that the collector cannot always see thread specific data.  */\n/* Thread specific data should generally consist of pointers to          */\n/* uncollectable objects (allocated with GC_malloc_uncollectable,        */\n/* not the system malloc), which are deallocated using the destructor    */\n/* facility in thr_keycreate.  Alternatively, keep a redundant pointer   */\n/* to thread specific data on the thread stack. \t\t\t */\n\n# include <pthread.h>\n# include <signal.h>\n\n  int GC_pthread_create(pthread_t *new_thread,\n                        const pthread_attr_t *attr,\n\t\t        void *(*start_routine)(void *), void *arg);\n#ifndef GC_DARWIN_THREADS\n  int GC_pthread_sigmask(int how, const sigset_t *set, sigset_t *oset);\n#endif\n  int GC_pthread_join(pthread_t thread, void **retval);\n  int GC_pthread_detach(pthread_t thread);\n\n#if defined(GC_OSF1_THREADS) \\\n    && defined(_PTHREAD_USE_MANGLED_NAMES_) && !defined(_PTHREAD_USE_PTDNAM_)\n/* Unless the compiler supports #pragma extern_prefix, the Tru64 UNIX\n   <pthread.h> redefines some POSIX thread functions to use mangled names.\n   If so, undef them before redefining. */\n# undef pthread_create\n# undef pthread_join\n# undef pthread_detach\n#endif\n\n# define pthread_create GC_pthread_create\n# define pthread_join GC_pthread_join\n# define pthread_detach GC_pthread_detach\n\n#ifndef GC_DARWIN_THREADS\n# ifdef pthread_sigmask\n#  undef pthread_sigmask\n# endif\t /* pthread_sigmask */\n# define pthread_sigmask GC_pthread_sigmask\n# define dlopen GC_dlopen\n#endif\n\n#endif /* GC_xxxxx_THREADS */\n\n#endif /* GC_PTHREAD_REDIRECTS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/doc/README.changes": "This is a rough history of garbage collector bugs and versions.\n\nThis has been maintained with varying diligence over the years.\n\nI made an attempt to include recent contributors here.  I apologize for any\nomissions.\n\nRECENT UPDATES ARE RECORDED IN ../ChangeLog FILE INSTEAD TO CONFORM TO\nMORE COMMON CONVENTIONS.\n\n-------------------------\n\n  Version 1.3 and immediately preceding versions contained spurious\nassembly language assignments to TMP_SP.  Only the assignment in the PC/RT\ncode is necessary.  On other machines, with certain compiler options,\nthe assignments can lead to an unsaved register being overwritten.\nKnown to cause problems under SunOS 3.5 WITHOUT the -O option.  (With\n-O the compiler recognizes it as dead code.  It probably shouldn't,\nbut that's another story.)\n\n  Version 1.4 and earlier versions used compile time determined values\nfor the stack base.  This no longer works on Sun 3s, since Sun 3/80s use\na different stack base.  We now use a straightforward heuristic on all\nmachines on which it is known to work (incl. Sun 3s) and compile-time\ndetermined values for the rest.  There should really be library calls\nto determine such values.\n\n  Version 1.5 and earlier did not ensure 8 byte alignment for objects\nallocated on a sparc based machine.\n\n  Version 1.8 added ULTRIX support in gc_private.h.\n  \n  Version 1.9 fixed a major bug in gc_realloc.\n  \n  Version 2.0 introduced a consistent naming convention for collector\nroutines and added support for registering dynamic library data segments\nin the standard mark_roots.c.  Most of the data structures were revamped.\nThe treatment of interior pointers was completely changed.  Finalization\nwas added.  Support for locking was added.  Object kinds were added.\nWe added a black listing facility to avoid allocating at addresses known\nto occur as integers somewhere in the address space.  Much of this\nwas accomplished by adapting ideas and code from the PCR collector.\nThe test program was changed and expanded.\n\n  Version 2.1 was the first stable version since 1.9, and added support\nfor PPCR.\n\n  Version 2.2 added debugging allocation, and fixed various bugs.  Among them:\n- GC_realloc could fail to extend the size of the object for certain large object sizes.\n- A blatant subscript range error in GC_printf, which unfortunately\n  wasn't exercised on machines with sufficient stack alignment constraints.\n- GC_register_displacement did the wrong thing if it was called after\n  any allocation had taken place.\n- The leak finding code would eventually break after 2048 byte\n  byte objects leaked.\n- interface.c didn't compile.\n- The heap size remained much too small for large stacks.\n- The stack clearing code behaved badly for large stacks, and perhaps\n  on HP/PA machines.\n\n  Version 2.3 added ALL_INTERIOR_POINTERS and fixed the following bugs:\n- Missing declaration of etext in the A/UX version.\n- Some PCR root-finding problems.\n- Blacklisting was not 100% effective, because the plausible future\n  heap bounds were being miscalculated.\n- GC_realloc didn't handle out-of-memory correctly.\n- GC_base could return a nonzero value for addresses inside free blocks.\n- test.c wasn't really thread safe, and could erroneously report failure\n  in a multithreaded environment.  (The locking primitives need to be\n  replaced for other threads packages.)\n- GC_CONS was thoroughly broken.\n- On a SPARC with dynamic linking, signals stayed diabled while the\n  client code was running.\n  (Thanks to Manuel Serrano at INRIA for reporting the last two.)\n  \n  Version 2.4 added GC_free_space_divisor as a tuning knob, added\n  support for OS/2 and linux, and fixed the following bugs:\n- On machines with unaligned pointers (e.g. Sun 3), every 128th word could\n  fail to be considered for marking.\n- Dynamic_load.c erroneously added 4 bytes to the length of the data and\n  bss sections of the dynamic library.  This could result in a bad memory\n  reference if the actual length was a multiple of a page.  (Observed on\n  Sun 3.  Can probably also happen on a Sun 4.)\n  (Thanks to Robert Brazile for pointing out that the Sun 3 version\n  was broken.  Dynamic library handling is still broken on Sun 3s\n  under 4.1.1U1, but apparently not 4.1.1.  If you have such a machine,\n  use -Bstatic.)\n  \n  Version 2.5 fixed the following bugs:\n- Removed an explicit call to exit(1)\n- Fixed calls to GC_printf and GC_err_printf, so the correct number of\n  arguments are always supplied.  The OS/2 C compiler gets confused if\n  the number of actuals and the number of formals differ.  (ANSI C\n  doesn't require this to work.  The ANSI sanctioned way of doing things\n  causes too many compatibility problems.)\n  \n  Version 3.0  added generational/incremental collection and stubborn\n  objects.\n\n  Version 3.1 added the following features:\n- A workaround for a SunOS 4.X SPARC C compiler\n  misfeature that caused problems when the collector was turned into\n  a dynamic library.  \n- A fix for a bug in GC_base that could result in a memory fault.\n- A fix for a performance bug (and several other misfeatures) pointed\n  out by Dave Detlefs and Al Dosser.\n- Use of dirty bit information for static data under Solaris 2.X.\n- DEC Alpha/OSF1 support (thanks to Al Dosser).\n- Incremental collection on more platforms.\n- A more refined heap expansion policy.  Less space usage by default.\n- Various minor enhancements to reduce space usage, and to reduce\n  the amount of memory scanned by the collector.\n- Uncollectable allocation without per object overhead.\n- More conscientious handling of out-of-memory conditions.\n- Fixed a bug in debugging stubborn allocation.\n- Fixed a bug that resulted in occasional erroneous reporting of smashed\n  objects with debugging allocation.\n- Fixed bogus leak reports of size 4096 blocks with FIND_LEAK.\n\n  Version 3.2 fixed a serious and not entirely repeatable bug in\n  the incremental collector.  It appeared only when dirty bit info\n  on the roots was available, which is normally only under Solaris.\n  It also added GC_general_register_disappearing_link, and some\n  testing code.  Interface.c disappeared.\n\n  Version 3.3 fixes several bugs and adds new ports:\n- PCR-specific bugs.\n- Missing locking in GC_free, redundant FASTUNLOCK\n  in GC_malloc_stubborn, and 2 bugs in\n  GC_unregister_disappearing_link.\n  All of the above were pointed out by Neil Sharman\n  (neil@cs.mu.oz.au).\n- Common symbols allocated by the SunOS4.X dynamic loader\n  were not included in the root set.\n- Bug in GC_finalize (reported by Brian Beuning and Al Dosser)\n- Merged Amiga port from Jesper Peterson (untested)\n- Merged NeXT port from Thomas Funke (significantly\n  modified and untested)\n\n  Version 3.4:\n- Fixed a performance bug in GC_realloc.\n- Updated the amiga port.\n- Added NetBSD and 386BSD ports.\n- Added cord library.\n- Added trivial performance enhancement for\n  ALL_INTERIOR_POINTERS.  (Don't scan last word.)\n  \n  Version 3.5\n- Minor collections now mark from roots only once, if that\n  doesn't cause an excessive pause.\n- The stack clearing heuristic was refined to prevent anomalies\n  with very heavily recursive programs and sparse stacks.\n- Fixed a bug that prevented mark stack growth in some cases.\n  GC_objects_are_marked should be set to TRUE after a call\n  to GC_push_roots and as part of GC_push_marked, since\n  both can now set mark bits.  I think this is only a performance\n  bug, but I wouldn't bet on it.  It's certainly very hard to argue\n  that the old version was correct.\n- Fixed an incremental collection bug that prevented it from\n  working at all when HBLKSIZE != getpagesize()\n- Changed dynamic_loading.c to include gc_priv.h before testing\n  DYNAMIC_LOADING.  SunOS dynamic library scanning\n  must have been broken in 3.4.\n- Object size rounding now adapts to program behavior.\n- Added a workaround (provided by Manuel Serrano and\n  colleagues) to a long-standing SunOS 4.X (and 3.X?) ld bug\n  that I had incorrectly assumed to have been squished.\n  The collector was broken if the text segment size was within\n  32 bytes of a multiple of 8K bytes, and if the beginning of\n  the data segment contained interesting roots.  The workaround\n  assumes a demand-loadable executable.  The original may have\n  have \"worked\" in some other cases.\n- Added dynamic library support under IRIX5.\n- Added support for EMX under OS/2 (thanks to Ari Huttunen).\n  \nVersion 3.6:\n- fixed a bug in the mark stack growth code that was introduced\n  in 3.4.\n- fixed Makefile to work around DEC AXP compiler tail recursion\n  bug.\n\nVersion 3.7:\n- Added a workaround for an HP/UX compiler bug.\n- Fixed another stack clearing performance bug.  Reworked\n  that code once more.\n  \nVersion 4.0:\n- Added support for Solaris threads (which was possible\n  only by reimplementing some fraction of Solaris threads,\n  since Sun doesn't currently make the thread debugging\n  interface available).\n- Added non-threads win32 and win32S support.\n- (Grudgingly, with suitable muttering of obscenities) renamed\n  files so that the collector distribution could live on a FAT\n  file system.  Files that are guaranteed to be useless on\n  a PC still have long names.  Gc_inline.h and gc_private.h\n  still exist, but now just include  gc_inl.h and gc_priv.h.\n- Fixed a really obscure bug in finalization that could cause\n  undetected mark stack overflows.  (I would be surprised if\n  any real code ever tickled this one.)\n- Changed finalization code to dynamically resize the hash\n  tables it maintains.  (This probably does not matter for well-\n  -written code.  It no doubt does for C++ code that overuses\n  destructors.)\n- Added typed allocation primitives.  Rewrote the marker to\n  accommodate them with more reasonable efficiency.  This\n  change should also speed up marking for GC_malloc allocated\n  objects a little.  See gc_typed.h for new primitives.\n- Improved debugging facilities slightly.  Allocation time\n  stack traces are now kept by default on SPARC/SUNOS4.\n  (Thanks to Scott Schwartz.)\n- Added better support for small heap applications.\n- Significantly extended cord package.  Fixed a bug in the\n  implementation of lazily read files.  Printf and friends now\n  have cord variants.  Cord traversals are a bit faster.\n- Made ALL_INTERIOR_POINTERS recognition the default.\n- Fixed de so that it can run in constant space, independent\n  of file size.  Added simple string searching to cords and de.\n- Added the Hull-Ellis C++ interface.\n- Added dynamic library support for OSF/1.\n  (Thanks to Al Dosser and Tim Bingham at DEC.)\n- Changed argument to GC_expand_hp to be expressed\n  in units of bytes instead of heap blocks.  (Necessary\n  since the heap block size now varies depending on\n  configuration.  The old version was never very clean.)\n- Added GC_get_heap_size().  The previous \"equivalent\"\n  was broken.\n- Restructured the Makefile a bit.  \n\nSince version 4.0:\n- Changed finalization implementation to guarantee that\n  finalization procedures are called outside of the allocation\n  lock, making direct use of the interface a little less dangerous.\n  MAY BREAK EXISTING CLIENTS that assume finalizers\n  are protected by a lock.  Since there seem to be few multithreaded\n  clients that use finalization, this is hopefully not much of\n  a problem.\n- Fixed a gross bug in CORD_prev.\n- Fixed a bug in blacklst.c that could result in unbounded\n  heap growth during startup on machines that do not clear\n  memory obtained from the OS (e.g. win32S).\n- Ported de editor to win32/win32S.  (This is now the only\n  version with a mouse-sensitive UI.)\n- Added GC_malloc_ignore_off_page to allocate large arrays\n  in the presence of ALL_INTERIOR_POINTERS.\n- Changed GC_call_with_alloc_lock to not disable signals in\n  the single-threaded case.\n- Reduced retry count in GC_collect_or_expand for garbage\n  collecting when out of memory.\n- Made uncollectable allocations bypass black-listing, as they\n  should.\n- Fixed a bug in typed_test in test.c that could cause (legitimate)\n  GC crashes.\n- Fixed some potential synchronization problems in finalize.c\n- Fixed a real locking problem in typd_mlc.c.\n- Worked around an AIX 3.2 compiler feature that results in\n  out of bounds memory references.\n- Partially worked around an IRIX5.2 beta problem (which may\n  or may not persist to the final release).\n- Fixed a bug in the heap integrity checking code that could\n  result in explicitly deallocated objects being identified as\n  smashed.  Fixed a bug in the dbg_mlc stack saving code\n  that caused old argument pointers to be considered live.\n- Fixed a bug in CORD_ncmp (and hence CORD_str).\n- Repaired the OS2 port, which had suffered from bit rot\n  in 4.0.  Worked around what appears to be CSet/2 V1.0\n  optimizer bug.\n- Fixed a Makefile bug for target \"c++\".\n\nSince version 4.1:\n- Multiple bug fixes/workarounds in the Solaris threads version.\n  (It occasionally failed to locate some register contents for\n  marking.  It also turns out that thr_suspend and friends are\n  unreliable in Solaris 2.3.  Dirty bit reads appear\n  to be unreliable under some weird \n  circumstances.  My stack marking code\n  contained a serious performance bug.  The new code is\n  extremely defensive, and has not failed in several cpu\n  hours of testing.  But  no guarantees ...)\n- Added MacOS support (thanks to Patrick Beard.)\n- Fixed several syntactic bugs in gc_c++.h and friends.  (These\n  didn't bother g++, but did bother most other compilers.)\n  Fixed gc_c++.h finalization interface.  (It didn't.)\n- 64 bit alignment for allocated objects was not guaranteed in a\n  few cases in which it should have been.\n- Added GC_malloc_atomic_ignore_off_page.\n- Added GC_collect_a_little.\n- Added some prototypes to gc.h.\n- Some other minor bug fixes (notably in Makefile).\n- Fixed OS/2 / EMX port (thanks to Ari Huttunen).\n- Fixed AmigaDOS port. (thanks to Michel Schinz).\n- Fixed the DATASTART definition under Solaris.  There\n  was a 1 in 16K chance of the collector missing the first\n  64K of static data (and thus crashing).\n- Fixed some blatant anachronisms in the README file.\n- Fixed PCR-Makefile for upcoming PPCR release.\n\nSince version 4.2:\n- Fixed SPARC alignment problem with GC_DEBUG.\n- Fixed Solaris threads /proc workaround.  The real\n  problem was an interaction with mprotect.\n- Incorporated fix from Patrick Beard for gc_c++.h (now gc_cpp.h).\n- Slightly improved allocator space utilization by\n  fixing the GC_size_map mechanism.\n- Integrated some Sony News and MIPS RISCos 4.51\n  patches.  (Thanks to Nobuyuki Hikichi of\n  Software Research Associates, Inc. Japan)\n- Fixed HP_PA alignment problem.  (Thanks to\n  xjam@cork.cs.berkeley.edu.)\n- Added GC_same_obj and friends.  Changed GC_base\n  to return 0 for pointers past the end of large objects.\n  Improved GC_base performance with ALL_INTERIOR_POINTERS\n  on machines with a slow integer mod operation.\n  Added GC_PTR_ADD, GC_PTR_STORE, etc. to prepare\n  for preprocessor.\n- changed the default on most UNIX machines to be that\n  signals are not disabled during critical GC operations.\n  This is still ANSI-conforming, though somewhat dangerous\n  in the presence of signal handlers. But the performance\n  cost of the alternative is sometimes problematic.\n  Can be changed back with a minor Makefile edit.\n- renamed IS_STRING in gc.h, to CORD_IS_STRING, thus\n  following my own naming convention.  Added the function\n  CORD_to_const_char_star.\n- Fixed a gross bug in GC_finalize.  Symptom: occasional\n  address faults in that function.  (Thanks to Anselm\n  Baird-Smith (Anselm.BairdSmith@inria.fr)\n- Added port to ICL DRS6000 running DRS/NX.  Restructured\n  things a bit to factor out common code, and remove obsolete\n  code.  Collector should now run under SUNOS5 with either\n  mprotect or /proc dirty bits.  (Thanks to Douglas Steel\n  (doug@wg.icl.co.uk)).\n- More bug fixes and workarounds for Solaris 2.X.  (These were\n  mostly related to putting the collector in a dynamic library,\n  which didn't really work before.  Also SOLARIS_THREADS\n  didn't interact well with dl_open.)  Thanks to btlewis@eng.sun.com.\n- Fixed a serious performance bug on the DEC Alpha.  The text\n  segment was getting registered as part of the root set.\n  (Amazingly, the result was still fast enough that the bug\n  was not conspicuous.) The fix works on OSF/1, version 1.3.\n  Hopefully it also works on other versions of OSF/1 ...\n- Fixed a bug in GC_clear_roots.\n- Fixed a bug in GC_generic_malloc_words_small that broke\n  gc_inl.h.  (Reported by Antoine de Maricourt.  I broke it\n  in trying to tweak the Mac port.) \n- Fixed some problems with cord/de under Linux.\n- Fixed some cord problems, notably with CORD_riter4.\n- Added DG/UX port.\n  Thanks to Ben A. Mesander (ben@piglet.cr.usgs.gov)\n- Added finalization registration routines with weaker ordering\n  constraints.  (This is necessary for C++ finalization with\n  multiple inheritance, since the compiler often adds self-cycles.)\n- Filled the holes in the SCO port. (Thanks to Michael Arnoldus\n  <chime@proinf.dk>.)\n- John Ellis' additions to the C++ support:  From John:\n\n* I completely rewrote the documentation in the interface gc_c++.h\n(later renamed gc_cpp.h).  I've tried to make it both clearer and more\nprecise.\n\n* The definition of accessibility now ignores pointers from an\nfinalizable object (an object with a clean-up function) to itself.\nThis allows objects with virtual base classes to be finalizable by the\ncollector.  Compilers typically implement virtual base classes using\npointers from an object to itself, which under the old definition of\naccessibility prevented objects with virtual base classes from ever\nbeing collected or finalized.\n\n* gc_cleanup now includes gc as a virtual base.  This was enabled by\nthe change in the definition of accessibility.\n\n* I added support for operator new[].  Since most (all?) compilers\ndon't yet support operator new[], it is conditionalized on\n-DOPERATOR_NEW_ARRAY.  The code is untested, but its trivial and looks\ncorrect.\n\n* The test program test_gc_c++ (later renamed test_cpp.cc)\ntries to test for the C++-specific functionality not tested by the\nother programs.\n- Added <unistd.h> include to misc.c.  (Needed for ppcr.)\n- Added PowerMac port. (Thanks to Patrick Beard again.)\n- Fixed \"srcdir\"-related Makefile problems.  Changed things so\n  that all externally visible include files always appear in the\n  include subdirectory of the source.  Made gc.h directly\n  includable from C++ code.  (These were at Per\n  Bothner's suggestion.)\n- Changed Intel code to also mark from ebp (Kevin Warne's\n  suggestion).\n- Renamed C++ related files so they could live in a FAT\n  file system. (Charles Fiterman's suggestion.)\n- Changed Windows NT Makefile to include C++ support in\n  gc.lib.  Added C++ test as Makefile target.\n  \nSince version 4.3:\n - ASM_CLEAR_CODE was erroneously defined for HP\n   PA machines, resulting in a compile error.\n - Fixed OS/2 Makefile to create a library.  (Thanks to\n   Mark Boulter (mboulter@vnet.ibm.com)).\n - Gc_cleanup objects didn't work if they were created on\n   the stack.  Fixed.\n - One copy of Gc_cpp.h in the distribution was out of \n   synch, and failed to document some known compiler\n   problems with explicit destructor invocation.  Partially\n   fixed.  There are probably other compilers on which\n   gc_cleanup is miscompiled.\n - Fixed Makefile to pass C compiler flags to C++ compiler.\n - Added Mac fixes.\n - Fixed os_dep.c to work around what appears to be\n   a new and different VirtualQuery bug under newer\n   versions of win32S.\n - GC_non_gc_bytes was not correctly maintained by\n   GC_free.  Fixed.  Thanks to James Clark (jjc@jclark.com).\n - Added GC_set_max_heap_size.\n - Changed allocation code to ignore blacklisting if it is preventing\n   use of a very large block of memory.  This has the advantage\n   that naive code allocating very large objects is much more\n   likely to work.  The downside is you might no\n   longer find out that such code should really use\n   GC_malloc_ignore_off_page.\n - Changed GC_printf under win32 to close and reopen the file\n   between calls.  FAT file systems otherwise make the log file\n   useless for debugging.\n - Added GC_try_to_collect and GC_get_bytes_since_gc.  These\n   allow starting an abortable collection during idle times. \n   This facility does not require special OS support.  (Thanks to\n   Michael Spertus of Geodesic Systems for suggesting this.  It was\n   actually an easy addition.  Kumar Srikantan previously added a similar\n   facility to a now ancient version of the collector.  At the time\n   this was much harder, and the result was less convincing.)\n - Added some support for the Borland development environment.  (Thanks\n   to John Ellis and Michael Spertus.)\n - Removed a misfeature from checksums.c that caused unexpected \n   heap growth.  (Thanks to Scott Schwartz.)\n - Changed finalize.c to call WARN if it encounters a finalization cycle.\n   WARN is defined in gc_priv.h to write a message, usually to stdout.\n   In many environments, this may be inappropriate.\n - Renamed NO_PARAMS in gc.h to GC_NO_PARAMS, thus adhering to my own\n   naming convention.\n - Added GC_set_warn_proc to intercept warnings.\n - Fixed Amiga port. (Thanks to Michel Schinz (schinz@alphanet.ch).)\n - Fixed a bug in mark.c that could result in an access to unmapped\n   memory from GC_mark_from_mark_stack on machines with unaligned\n   pointers.\n - Fixed a win32 specific performance bug that could result in scanning of\n   objects allocated with the system malloc.\n - Added REDIRECT_MALLOC.\n\nSince version 4.4:\n - Fixed many minor and one major README bugs. (Thanks to Franklin Chen\n   (chen@adi.com) for pointing out many of them.)\n - Fixed ALPHA/OSF/1 dynamic library support. (Thanks to Jonathan Bachrach\n   (jonathan@harlequin.com)).\n - Added incremental GC support (MPROTECT_VDB) for Linux (with some\n   help from Bruno Haible).\n - Altered SPARC recognition tests in gc.h and config.h (mostly as\n   suggested by Fergus Henderson).\n - Added basic incremental GC support for win32, as implemented by\n   Windows NT and Windows 95.  GC_enable_incremental is a noop\n   under win32s, which doesn't implement enough of the VM interface.\n - Added -DLARGE_CONFIG.\n - Fixed GC_..._ignore_off_page to also function without\n   -DALL_INTERIOR_POINTERS.\n - (Hopefully) fixed RS/6000 port.  (Only the test was broken.)\n - Fixed a performance bug in the nonincremental collector running\n   on machines supporting incremental collection with MPROTECT_VDB\n   (e.g. SunOS 4, DEC AXP).  This turned into a correctness bug under\n   win32s with win32 incremental collection.  (Not all memory protection\n   was disabled.)\n - Fixed some ppcr related bit rot.\n - Caused dynamic libraries to be unregistered before reregistering.\n   The old way turned out to be a performance bug on some machines.\n - GC_root_size was not properly maintained under MSWIN32.\n - Added -DNO_DEBUGGING and GC_dump.\n - Fixed a couple of bugs arising with SOLARIS_THREADS +\n   REDIRECT_MALLOC.\n - Added NetBSD/M68K port.  (Thanks to Peter Seebach\n   <seebs@taniemarie.solon.com>.)\n - Fixed a serious realloc bug.  For certain object sizes, the collector\n   wouldn't scan the expanded part of the object.  (Thanks to Clay Spence\n   (cds@peanut.sarnoff.com) for noticing the problem, and helping me to\n   track it down.)\n   \nSince version 4.5:\n - Added Linux ELF support.  (Thanks to Arrigo Triulzi <arrigo@ic.ac.uk>.)\n - GC_base crashed if it was called before any other GC_ routines.\n   This could happen if a gc_cleanup object was allocated outside the heap\n   before any heap allocation.\n - The heap expansion heuristic was not stable if all objects had finalization\n   enabled.  Fixed finalize.c to count memory in finalization queue and\n   avoid explicit deallocation.  Changed alloc.c to also consider this count.\n   (This is still not recommended.  It's expensive if nothing else.)  Thanks\n   to John Ellis for pointing this out.\n - GC_malloc_uncollectable(0) was broken.  Thanks to Phong Vo for pointing\n   this out.\n - The collector didn't compile under Linux 1.3.X.  (Thanks to Fred Gilham for\n   pointing this out.)  The current workaround is ugly, but expected to be\n   temporary.\n - Fixed a formatting problem for SPARC stack traces.\n - Fixed some '=='s in os_dep.c that should have been assignments.\n   Fortunately these were in code that should never be executed anyway.\n   (Thanks to Fergus Henderson.)\n - Fixed the heap block allocator to only drop blacklisted blocks in small\n   chunks.  Made BL_LIMIT self adjusting.  (Both of these were in response\n   to heap growth observed by Paul Graham.)\n - Fixed the Metrowerks/68K Mac code to also mark from a6.  (Thanks\n   to Patrick Beard.)\n - Significantly updated README.debugging.\n - Fixed some problems with longjmps out of signal handlers, especially under\n   Solaris.  Added a workaround for the fact that siglongjmp doesn't appear to\n   do the right thing with -lthread under Solaris.\n - Added MSDOS/djgpp port.  (Thanks to Mitch Harris  (maharri@uiuc.edu).)\n - Added \"make reserved_namespace\" and \"make user_namespace\".  The\n   first renames ALL \"GC_xxx\" identifiers as \"_GC_xxx\".  The second is the\n   inverse transformation.  Note that doing this is guaranteed to break all\n   clients written for the other names.\n - descriptor field for kind NORMAL in GC_obj_kinds with ADD_BYTE_AT_END\n   defined should be -ALIGNMENT not WORDS_TO_BYTES(-1).  This is\n   a serious bug on machines with pointer alignment of less than a word.\n - GC_ignore_self_finalize_mark_proc didn't handle pointers to very near the\n   end of the object correctly.  Caused failures of the C++ test on a DEC Alpha\n   with g++.\n - gc_inl.h still had problems.  Partially fixed.  Added warnings at the\n   beginning to hopefully specify the remaining dangers.\n - Added DATAEND definition to config.h.\n - Fixed some of the .h file organization.  Fixed \"make floppy\".\n \nSince version 4.6:\n - Fixed some compilation problems with -DCHECKSUMS (thanks to Ian Searle)\n - Updated some Mac specific files to synchronize with Patrick Beard.\n - Fixed a serious bug for machines with non-word-aligned pointers.\n   (Thanks to Patrick Beard for pointing out the problem.  The collector\n   should fail almost any conceivable test immediately on such machines.)\n\nSince version 4.7:\n - Changed a \"comment\" in a MacOS specific part of mach-dep.c that caused\n   gcc to fail on other platforms.\n\nSince version 4.8\n - More README.debugging fixes.\n - Objects ready for finalization, but not finalized in the same GC\n   cycle, could be prematurely collected.  This occasionally happened\n   in test_cpp.\n - Too little memory was obtained from the system for very large\n   objects.  That could cause a heap explosion if these objects were\n   not contiguous (e.g. under PCR), and too much of them was blacklisted.\n - Due to an improper initialization, the collector was too hesitant to\n   allocate blacklisted objects immediately after system startup.\n - Moved GC_arrays from the data into the bss segment by not explicitly\n   initializing it to zero.  This significantly\n   reduces the size of executables, and probably avoids some disk accesses\n   on program startup.  It's conceivable that it might break a port that I\n   didn't test.\n - Fixed EMX_MAKEFILE to reflect the gc_c++.h to gc_cpp.h renaming which\n   occurred a while ago.\n\nSince 4.9:\n - Fixed a typo around a call to GC_collect_or_expand in alloc.c.  It broke\n   handling of out of memory.  (Thanks to Patrick Beard for noticing.)\n\nSince 4.10:\n - Rationalized (hopefully) GC_try_to_collect in an incremental collection\n   environment.  It appeared to not handle a call while a collection was in\n   progress, and was otherwise too conservative.\n - Merged GC_reclaim_or_delete_all into GC_reclaim_all to get rid of some\n   code.\n - Added Patrick Beard's Mac fixes, with substantial completely untested\n   modifications.\n - Fixed the MPROTECT_VDB code to deal with large pages and imprecise\n   fault addresses (as on an UltraSPARC running Solaris 2.5).  Note that this\n   was not a problem in the default configuration, which uses PROC_VDB.\n - The DEC Alpha assembly code needed to restore $gp between calls.\n   Thanks to Fergus Henderson for tracking this down and supplying a\n   patch.\n - The write command for \"de\" was completely broken for large files.\n   I used the easiest portable fix, which involved changing the semantics\n   so that f.new is written instead of overwriting f.  That's safer anyway.\n - Added README.solaris2 with a discussion of the possible problems of\n   mixing the collector's sbrk allocation with malloc/realloc.\n - Changed the data segment starting address for SGI machines.  The\n   old code failed under IRIX6.\n - Required double word alignment for MIPS.\n - Various minor fixes to remove warnings.\n - Attempted to fix some Solaris threads problems reported by Zhiying Chen.\n   In particular, the collector could try to fork a thread with the\n   world stopped as part of GC_thr_init.  It also failed to deal with\n   the case in which the original thread terminated before the whole\n   process did.\n - Added -DNO_EXECUTE_PERMISSION.  This has a major performance impact\n   on the incremental collector under Irix, and perhaps under other\n   operating systems.\n - Added some code to support allocating the heap with mmap.  This may\n   be preferable under some circumstances.\n - Integrated dynamic library support for HP.\n   (Thanks to Knut Tvedten <knuttv@ifi.uio.no>.)\n - Integrated James Clark's win32 threads support, and made a number\n   of changes to it, many of which were suggested by Pontus Rydin.\n   This is still not 100% solid.\n - Integrated Alistair Crooks' support for UTS4 running on an Amdahl\n   370-class machine.\n - Fixed a serious bug in explicitly typed allocation.  Objects requiring\n   large descriptors where handled in a way that usually resulted in\n   a segmentation fault in the marker.  (Thanks to Jeremy Fitzhardinge\n   for helping to track this down.)\n - Added partial support for GNU win32 development.  (Thanks to Fergus\n   Henderson.)\n - Added optional support for Java-style finalization semantics.  (Thanks\n   to Patrick Bridges.)  This is recommended only for Java implementations.\n - GC_malloc_uncollectable faulted instead of returning 0 when out of\n   memory.  (Thanks to dan@math.uiuc.edu for noticing.)\n - Calls to GC_base before the collector was initialized failed on a\n   DEC Alpha.  (Thanks to Matthew Flatt.)\n - Added base pointer checking to GC_REGISTER_FINALIZER in debugging\n   mode, at the suggestion of Jeremy Fitzhardinge.\n - GC_debug_realloc failed for uncollectable objects.  (Thanks to\n   Jeremy Fitzhardinge.)\n - Explicitly typed allocation could crash if it ran out of memory.\n   (Thanks to Jeremy Fitzhardinge.)\n - Added minimal support for a DEC Alpha running Linux.\n - Fixed a problem with allocation of objects whose size overflowed\n   ptrdiff_t.  (This now fails unconditionally, as it should.)\n - Added the beginning of Irix pthread support.\n - Integrated Xiaokun Zhu's fixes for djgpp 2.01.\n - Added SGI-style STL allocator support (gc_alloc.h).\n - Fixed a serious bug in README.solaris2.  Multithreaded programs must include\n   gc.h with SOLARIS_THREADS defined.\n - Changed GC_free so it actually deallocates uncollectable objects.\n   (Thanks to Peter Chubb for pointing out the problem.)\n - Added Linux ELF support for dynamic libararies.  (Thanks again to\n   Patrick Bridges.)\n - Changed the Borland cc configuration so that the assembler is not\n   required.\n - Fixed a bug in the C++ test that caused it to fail in 64-bit\n   environments.\n\nSince 4.11:\n - Fixed ElfW definition in dyn_load.c. (Thanks to Fergus Henderson.)\n   This prevented the dynamic library support from compiling on some\n   older ELF Linux systems.\n - Fixed UTS4 port (which I apparently mangled during the integration)\n   (Thanks to again to Alistair Crooks.)\n - \"Make C++\" failed on Suns with SC4.0, due to a problem with \"bool\".\n   Fixed in gc_priv.h.\n - Added more pieces for GNU win32.  (Thanks to Timothy N. Newsham.)\n   The current state of things should suffice for at least some\n   applications.\n - Changed the out of memory retry count handling as suggested by\n   Kenjiro Taura.  (This matters only if GC_max_retries > 0, which\n   is no longer the default.)\n - If a /proc read failed repeatedly, GC_written_pages was not updated\n   correctly.  (Thanks to Peter Chubb for diagnosing this.)\n - Under unlikely circumstances, the allocator could infinite loop in\n   an out of memory situation.  (Thanks again to Kenjiro Taura for\n   identifying the problem and supplying a fix.)\n - Fixed a syntactic error in the DJGPP code.  (Thanks to Fergus\n   Henderson for finding this by inspection.)  Also fixed a test program\n   problem with DJGPP (Thanks to Peter Monks.)\n - Atomic uncollectable objects were not treated correctly by the\n   incremental collector.  This resulted in weird log statistics and\n   occasional performance problems.  (Thanks to Peter Chubb for pointing\n   this out.)\n - Fixed some problems resulting from compilers that dont define\n   __STDC__.  In this case void * and char * were used inconsistently\n   in some cases.  (Void * should not have been used at all.  If\n   you have an ANSI superset compiler that does not define __STDC__,\n   please compile with -D__STDC__=0. Thanks to Manuel Serrano and others\n   for pointing out the problem.)\n - Fixed a compilation problem on Irix with -n32 and -DIRIX_THREADS.\n   Also fixed some other IRIX_THREADS problems which may or may not have\n   had observable symptoms.\n - Fixed an HP PA compilation problem in dyn_load.c.  (Thanks to\n   Philippe Queinnec.)\n - SEGV fault handlers sometimes did not get reset correctly.  (Thanks\n   to David Pickens.)\n - Added a fix for SOLARIS_THREADS on Intel.  (Thanks again to David\n   Pickens.)  This probably needs more work to become functional.\n - Fixed struct sigcontext_struct in os_dep.c for compilation under\n   Linux 2.1.X.\t(Thanks to Fergus Henderson.)\n - Changed the DJGPP STACKBOTTOM and DATASTART values to those suggested\n   by Kristian Kristensen.  These may still not be right, but it is\n   it is likely to work more often than what was there before.  They may\n   even be exactly right.\n - Added a #include <string.h> to test_cpp.cc.  This appears to help\n   with HP/UX and gcc.  (Thanks to assar@sics.se.)\n - Version 4.11 failed to run in incremental mode on recent 64-bit Irix\n   kernels.  This was a problem related to page unaligned heap segments.\n   Changed the code to page align heap sections on all platforms.\n   (I had mistakenly identified this as a kernel problem earlier.\n   It was not.)\n - Version 4.11 did not make allocated storage executable, except on\n   one or two platforms, due to a bug in a #if test.  (Thanks to Dave\n   Grove for pointing this out.)\n - Added sparc_sunos4_mach_dep.s to support Sun's compilers under SunOS4.\n - Added GC_exclude_static_roots.\n - Fixed the object size mapping algorithm.  This shouldn't matter,\n   but the old code was ugly.\n - Heap checking code could die if one of the allocated objects was\n   larger than its base address.  (Unsigned underflow problem.  Thanks\n   to Clay Spence for isolating the problem.)\n - Added RS6000 (AIX) dynamic library support and fixed STACK_BOTTOM.\n   (Thanks to Fred Stearns.)\n - Added Fergus Henderson's patches for improved robustness with large\n   heaps and lots of blacklisting.\n - Added Peter Chubb's changes to support Solaris Pthreads, to support\n   MMAP allocation in Solaris, to allow Solaris to find dynamic libraries\n   through /proc, to add malloc_typed_ignore_off_page, and a few other\n   minor features and bug fixes.\n - The Solaris 2 port should not use sbrk.  I received confirmation from\n   Sun that the use of sbrk and malloc in the same program is not\n   supported.  The collector now defines USE_MMAP by default on Solaris.\n - Replaced the djgpp makefile with Gary Leavens' version.\n - Fixed MSWIN32 detection test.\n - Added Fergus Henderson's patches to allow putting the collector into\n   a DLL under GNU win32.\n - Added Ivan V. Demakov's port to Watcom C on X86.\n - Added Ian Piumarta's Linux/PowerPC port.\n - On Brian Burton's suggestion added PointerFreeGC to the placement\n   options in gc_cpp.h.  This is of course unsafe, and may be controversial.\n   On the other hand, it seems to be needed often enough that it's worth\n   adding as a standard facility.\n\nSince 4.12:\n - Fixed a crucial bug in the Watcom port.  There was a redundant decl\n   of GC_push_one in gc_priv.h.\n - Added FINALIZE_ON_DEMAND.\n - Fixed some pre-ANSI cc problems in test.c.\n - Removed getpagesize() use for Solaris.  It seems to be missing in one\n   or two versions.\n - Fixed bool handling for SPARCCompiler version 4.2.\n - Fixed some files in include that had gotten unlinked from the main\n   copy.\n - Some RS/6000 fixes (missing casts).  Thanks to Toralf Foerster.\n - Fixed several problems in GC_debug_realloc, affecting mostly the\n   FIND_LEAK case.\n - GC_exclude_static_roots contained a buggy unsigned comparison to\n   terminate a loop.  (Thanks to Wilson Ho.)\n - CORD_str failed if the substring occurred at the last possible position.\n   (Only affects cord users.)\n - Fixed Linux code to deal with RedHat 5.0 and integrated Peter Bigot's\n   os_dep.c code for dealing with various Linux versions.\n - Added workaround for Irix pthreads sigaction bug and possible signal\n   misdirection problems.\nSince alpha1:\n - Changed RS6000 STACKBOTTOM.\n - Integrated Patrick Beard's Mac changes.\n - Alpha1 didn't compile on Irix m.n, m < 6.\n - Replaced Makefile.dj with a new one from Gary Leavens.\n - Added Andrew Stitcher's changes to support SCO OpenServer.\n - Added PRINT_BLACK_LIST, to allow debugging of high densities of false\n   pointers.\n - Added code to debug allocator to keep track of return address\n   in GC_malloc caller, thus giving a bit more context.\n - Changed default behavior of large block allocator to more\n   aggressively avoid fragmentation.  This is likely to slow down the\n   collector when it succeeds at reducing space cost.\n - Integrated Fergus Henderson's CYGWIN32 changes.  They are untested,\n   but needed for newer versions.\n - USE_MMAP had some serious bugs.  This caused the collector to fail\n   consistently on Solaris with -DSMALL_CONFIG.\n - Added Linux threads support, thanks largely to Fergus Henderson.\nSince alpha2:\n - Fixed more Linux threads problems.\n - Changed default GC_free_space_divisor to 3 with new large block allocation.\n   (Thanks to Matthew Flatt for some measurements that suggest the old\n   value sometimes favors space too much over time.)\n - More CYGWIN32 fixes.\n - Integrated Tyson-Dowd's Linux-M68K port.\n - Minor HP PA and DEC UNIX fixes from Fergus Henderson.\n - Integrated Christoffe Raffali's Linux-SPARC changes.\n - Allowed for one more GC fixup iteration after a full GC in incremental\n   mode.  Some quick measurements suggested that this significantly\n   reduces pause times even with smaller GC_RATE values.\n - Moved some more GC data structures into GC_arrays.  This decreases\n   pause times and GC overhead, but makes debugging slightly less convenient.\n - Fixed namespace pollution problem (\"excl_table\").\n - Made GC_incremental a constant for -DSMALL_CONFIG, hopefully shrinking\n   that slightly.\n - Added some win32 threads fixes.\n - Integrated Ivan Demakov and David Stes' Watcom fixes.\n - Various other minor fixes contributed by many people.\n - Renamed config.h to gcconfig.h, since config.h tends to be used for\n   many other things.\n - Integrated Matthew Flatt's support for 68K MacOS \"far globals\".\n - Fixed up some of the dynamic library Makefile targets for consistency\n   across platforms.\n - Fixed a USE_MMAP typo that caused out-of-memory handling to fail\n   on Solaris.\n - Added code to test.c to test thread creation a bit more.\n - Integrated GC_win32_free_heap, as suggested by Ivan Demakov.\n - Fixed Solaris 2.7 stack base finding problem.  (This may actually\n   have been done in an earlier alpha release.)\nSince alpha3:\n - Fixed MSWIN32 recognition test, which interfered with cygwin.\n - Removed unnecessary gc_watcom.asm from distribution.  Removed\n   some obsolete README.win32 text.\n - Added Alpha Linux incremental GC support.  (Thanks to Philipp Tomsich\n   for code for retrieving the fault address in a signal handler.)\n   Changed Linux signal handler context argument to be a pointer.\n - Took care of some new warnings generated by the 7.3 SGI compiler.\n - Integrated Phillip Musumeci's FreeBSD/ELF fixes.\n - -DIRIX_THREADS was broken with the -o32 ABI (typo in gc_priv.h>\n\nSince 4.13:\n - Fixed GC_print_source_ptr to not use a prototype.\n - generalized CYGWIN test.\n - gc::new did the wrong thing with PointerFreeGC placement.\n   (Thanks to Rauli Ruohonen.)\n - In the ALL_INTERIOR_POINTERS (default) case, some callee-save register\n   values could fail to be scanned if the register was saved and\n   reused in a GC frame.  This showed up in verbose mode with gctest\n   compiled with an unreleased SGI compiler.  I vaguely recall an old\n   bug report that may have been related.  The bug was probably quite old.\n   (The problem was that the stack scanning could be deferred until\n   after the relevant frame was overwritten, and the new save location\n   might be outside the scanned area.  Fixed by more eager stack scanning.)\n - PRINT_BLACK_LIST had some problems.  A few source addresses were garbage.\n - Replaced Makefile.dj and added -I flags to cord make targets.\n   (Thanks to Gary Leavens.)\n - GC_try_to_collect was broken with the nonincremental collector.\n - gc_cleanup destructors could pass the wrong address to\n   GC_register_finalizer_ignore_self in the presence of multiple\n   inheritance.  (Thanks to Darrell Schiebel.)\n - Changed PowerPC Linux stack finding code.\n\nSince 4.14alpha1\n - -DSMALL_CONFIG did not work reliably with large (> 4K) pages.\n   Recycling the mark stack during expansion could result in a size\n   zero heap segment, which confused things.  (This was probably also an\n   issue with the normal config and huge pages.)\n - Did more work to make sure that callee-save registers were scanned\n   completely, even with the setjmp-based code.  Added USE_GENERIC_PUSH_REGS\n   macro to facilitate testing on machines I have access to.\n - Added code to explicitly push register contents for win32 threads.\n   This seems to be necessary.  (Thanks to Pierre de Rop.)\n\nSince 4.14alpha2\n - changed STACKBOTTOM for DJGPP (Thanks to Salvador Eduardo Tropea).\n \nSince 4.14\n - Reworked large block allocator.  Now uses multiple doubly linked free\n   lists to approximate best fit.\n - Changed heap expansion heuristic.  Entirely free blocks are no longer\n   counted towards the heap size.  This seems to have a major impact on\n   heap size stability; the old version could expand the heap way too\n   much in the presence of large block fragmentation.\n - added -DGC_ASSERTIONS and some simple assertions inside the collector.\n   This is mainlyt for collector debugging.\n - added -DUSE_MUNMAP to allow the heap to shrink.  Suupported on only\n   a few UNIX-like platforms for now.\n - added GC_dump_regions() for debugging of fragmentation issues.\n - Changed PowerPC pointer alignment under Linux to 4.  (This needs\n   checking by someone who has one.  The suggestions came to me via a\n   rather circuitous path.)\n - Changed the Linux/Alpha port to walk the data segment backwards until\n   it encounters a SIGSEGV.  The old way to find the start of the data\n   segment broke with a recent release.\n - cordxtra.c needed to call GC_REGISTER_FINALIZER instead of\n   GC_register_finalizer, so that it would continue to work with GC_DEBUG.\n - allochblk sometimes cleared the wrong block for debugging purposes\n   when it dropped blacklisted blocks.  This could result in spurious\n   error reports with GC_DEBUG.\n - added MACOS X Server support.  (Thanks to Andrew Stone.)\n - Changed the Solaris threads code to ignore stack limits > 8 MB with\n   a warning.  Empirically, it is not safe to access arbitrary pages\n   in such large stacks.  And the dirty bit implementation does not\n   guarantee that none of them will be accessed.\n - Integrated Martin Tauchmann's Amiga changes.\n - Integrated James Dominy's OpenBSD/SPARC port.\n\nSince 5.0alpha1\n - Fixed bugs introduced in alpha1 (OpenBSD & large block initialization).\n - Added -DKEEP_BACK_PTRS and backptr.h interface.  (The implementation\n   idea came from Al Demers.)\n\nSince 5.0alpha2\n - Added some highly incomplete code to support a copied young generation.\n   Comments on nursery.h are appreciated.\n - Changed -DFIND_LEAK, -DJAVA_FINALIZATION, and -DFINALIZE_ON_DEMAND,\n   so the same effect could be obtained with a runtime switch.   This is\n   a step towards standardizing on a single dynamic GC library.\n - Significantly changed the way leak detection is handled, as a consequence\n   of the above.\n\nSince 5.0 alpha3\n - Added protection fault handling patch for Linux/M68K from Fergus\n   Henderson and Roman Hodek.\n - Removed the tests for SGI_SOURCE in new_gc_alloc.h.  This was causing that\n   interface to fail on nonSGI platforms.\n - Changed the Linux stack finding code to use /proc, after changing it\n   to use HEURISTIC1.  (Thanks to David Mossberger for pointing out the\n   /proc hook.)\n - Added HP/UX incremental GC support and HP/UX 11 thread support.\n   Thread support is currently still flakey.\n - Added basic Linux/IA64 support.\n - Integrated Anthony Green's PicoJava support.\n - Integrated Scott Ananian's StrongARM/NetBSD support.\n - Fixed some fairly serious performance bugs in the incremental\n   collector.  These have probably been there essentially forever.\n   (Mark bits were sometimes set before scanning dirty pages.\n   The reclaim phase unnecessarily dirtied full small object pages.)\n - Changed the reclaim phase to ignore nearly full pages to avoid\n   touching them.\n - Limited GC_black_list_spacing to roughly the heap growth increment.\n - Changed full collection triggering heuristic to decrease full GC\n   frequency by default, but to explicitly trigger full GCs during\n   heap growth.  This doesn't always improve things, but on average it's\n   probably a win.\n - GC_debug_free(0, ...) failed.  Thanks to Fergus Henderson for the\n   bug report and fix.\n\nSince 5.0 alpha4\n - GC_malloc_explicitly_typed and friends sometimes failed to\n   initialize first word.\n - Added allocation routines and support in the marker for mark descriptors\n   in a type structure referenced by the first word of an object.  This was\n   introduced to support gcj, but hopefully in a way that makes it\n   generically useful.\n - Added GC_requested_heapsize, and inhibited collections in nonincremental\n   mode if the actual used heap size is less than what was explicitly\n   requested.\n - The Solaris pthreads version of GC_pthread_create didn't handle a NULL\n   attribute pointer.  Solaris thread support used the wrong default thread\n   stack size.  (Thanks to Melissa O'Neill for the patch.)\n - Changed PUSH_CONTENTS macro to no longer modify first parameter.\n   This usually doesn't matter, but it was certainly an accident waiting\n   to happen ...\n - Added GC_register_finalizer_no_order and friends to gc.h.  They're\n   needed by Java implementations.\n - Integrated a fix for a win32 deadlock resulting from clock() calling\n   malloc.  (Thanks to Chris Dodd.)\n - Integrated Hiroshi Kawashima's port to Linux/MIPS.  This was designed\n   for a handheld platform, and may or may not be sufficient for other\n   machines.\n - Fixed a va_arg problem with the %c specifier in cordprnt.c.  It appears\n   that this was always broken, but recent versions of gcc are the first to\n   report the (statically detectable) bug.\n - Added an attempt at a more general solution to dlopen races/deadlocks.\n   GC_dlopen now temporarily disables collection.  Still not ideal, but ...\n - Added -DUSE_I686_PREFETCH, -DUSE_3DNOW_PREFETCH, and support for IA64\n   prefetch instructions.  May improve performance measurably, but I'm not\n   sure the code will run correctly on processors that don't support the\n   instruction.  Won't build except with very recent gcc.\n - Added caching for header lookups in the marker.  This seems to result\n   in a barely measurable performance gain.  Added support for interleaved\n   lookups of two pointers, but unconfigured that since the performance\n   gain is currently near zero, and it adds to code size.\n - Changed Linux DATA_START definition to check both data_start and\n   __data_start, since nothing else seems to be portable.\n - Added -DUSE_LD_WRAP to optionally take advantage of the GNU ld function\n   wrapping mechanism.  Probably currently useful only on Linux.\n - Moved some variables for the scratch allocator into GC_arrays, on\n   Martin Hirzel's suggestion.\n - Fixed a win32 threads bug that caused the collector to not look for\n   interior pointers from one of the thread stacks without\n   ALL_INTERIOR_POINTERS.  (Thanks to Jeff Sturm.)\n - Added Mingw32 support.  (Thanks again to Jeff Sturm for the patch.)\n - Changed the alpha port to use the generic register scanning code instead\n   of alpha_mach_dep.s.  Alpha_mach_dep.s doesn't look for pointers in fp\n   registers, but gcc sometimes spills pointers there.  (Thanks to Manuel\n   Serrano for helping me debug this by email.)  Changed the IA64 code to\n   do something similar for similar reasons.\n\n[5.0alpha5 doesn't really exist, but it may have escaped.]\n\nSince 5.0alpha6:\n - -DREDIRECT_MALLOC was broken in alpha6. Fixed.\n - Cleaned up gc_ccp.h slightly, thus also causing the HP C++ compiler to\n   accept it.\n - Removed accidental reference to dbg_mlc.c, which caused dbg_mlc.o to be\n   linked into every executable.\n - Added PREFETCH to bitmap marker.  Changed it to use the header cache.\n - GC_push_marked sometimes pushed one object too many, resulting in a\n   segmentation fault in GC_mark_from_mark_stack.  This was probably an old\n   bug.  It finally showed up in gctest on win32.\n - Gc_priv.h erroneously #defined GC_incremental to be TRUE instead of FALSE\n   when SMALL_CONFIG was defined.  This was no doubt a major performance bug for\n   the default win32 configuration.\n - Removed -DSMALL_CONFIG from NT_MAKEFILE.  It seemed like an anchronism now\n   that the average PC has 64MB or so.\n - Integrated Bryce McKinley's patches for linux threads and dynamic loading\n   from the libgcj tree.  Turned on dynamic loading support for Linux/PPC.\n - Changed the stack finding code to use environ on HP/UX.  (Thanks\n   to Gustavo Rodriguez-Rivera for the suggestion.)  This should probably\n   be done on other platforms, too.  Since I can't test those, that'll\n   wait until after 5.0.\n\nSince 5.0alpha7:\n - Fixed threadlibs.c for linux threads.  -DUSE_LD_WRAP was broken and\n   -ldl was omitted.  Fixed Linux stack finding code to handle\n   -DUSE_LD_WRAP correctly.\n - Added MSWIN32 exception handler around marker, so that the collector\n   can recover from root segments that are unmapped during the collection.\n   This caused occasional failures under Windows 98, and may also be\n   an issue under Windows NT/2000.\n\nSince 5.0\n - Fixed a gc.h header bug which showed up under Irix.  (Thanks to\n   Dan Sullivan.)\n - Fixed a typo in GC_double_descr in typd_mlc.c.\n   This probably could result in objects described by array descriptors not\n   getting traced correctly.  (Thanks to Ben Hutchings for pointing this out.)\n - The block nearly full tests in reclaim.c were not correct for 64 bit\n   environments.  This could result in unnecessary heap growth under unlikely\n   conditions.\n\nSince 5.1\n - dyn_load.c declared GC_scratch_last_end_ptr as an extern even if it\n   was defined as a macro.  This prevented the collector from building on\n   Irix.\n - We quietly assumed that indirect mark descriptors were never 0.\n   Our own typed allocation interface violated that.  This could result\n   in segmentation faults in the marker with typed allocation.\n - Fixed a _DUSE_MUNMAP bug in the heap block allocation code.\n   (Thanks to Ben Hutchings for the patch.)\n - Taught the collector about VC++ handling array operator new.\n   (Thanks again to Ben Hutchings for the patch.)\n - The two copies of gc_hdrs.h had diverged.  Made one a link to the other\n   again.\n\nSince 5.2  (A few 5.2 patches are not in 6.0alpha1)\n - Fixed _end declaration for OSF1.\n - There were lots of spurious leak reports in leak detection mode, caused\n   by the fact that some pages were not being swept, and hence unmarked\n   objects weren't making it onto free lists.  (This bug dated back to 5.0.)\n - Fixed a typo in the liblinuxgc.so Makefile rule.\n - Added the GetExitCodeThread to Win32 GC_stop_world to (mostly) work\n   around a Windows 95 GetOpenFileName problem.  (Thanks to Jacob Navia.)\n\nSince 5.3\n - Fixed a typo that prevented compilation with -DUSE_3DNOW_PREFETCH.\n   (Thanks to Shawn Wagner for actually testing this.)\n - Fixed GC_is_thread_stack in solaris_threads.c.  It forgot to return a value\n   in the common case.  I wonder why nobody noticed?\n - Fixed another silly syntax problem in GC_double_descr.  (Thanks to\n   Fergus Henderson for finding it.)\n - Fixed a GC_gcj_malloc bug: It tended to release the allocator lock twice.\n\nSince 5.4  (A few 5.3 patches are not in 6.0alpha2)\n - Added HP/PA prefetch support.\n - Added -DDBG_HDRS_ALL and -DSHORT_DBG_HDRS to reduce the cost and improve\n   the reliability of generating pointer backtrace information, e.g. in\n   the Bigloo environment.\n - Added parallel marking support (-DPARALLEL_MARK).  This currently\n   works only under IA32 and IA64 Linux, but it shouldn't be hard to adapt\n   to other platforms.  This is intended to be a lighter-weight (less\n   new code, probably not as scalable) solution than the work by Toshio Endo\n   et al, at the University of Tokyo.  A number of their ideas were\n   reused, though the code wasn't, and the underlying data structure\n   is significantly different.  In particular, we keep the global mark\n   stack as a single shared data structure, but most of the work is done\n   on smaller thread-local mark stacks.\n - Changed GC_malloc_many to be cheaper, and to require less mutual exclusion\n   with -DPARALLEL_MARK.\n - Added full support for thread local allocation under Linux\n   (-DTHREAD_LOCAL_ALLOC).  This is a thin veneer on GC_malloc_many, and\n   should be easily portable to other platforms, especially those that\n   support pthreads.\n - CLEAR_DOUBLE was not always getting invoked when it should have been.\n - GC_gcj_malloc and friends used different out of memory handling than\n   everything else, probably because I forgot about one when I implemented\n   the other.  They now both call GC_oom_fn(), not GC_oom_action().\n - Integrated Jakub Jelinek's fixes for Linux/SPARC.\n - Moved GC_objfreelist, GC_aobjfreelist, and GC_words_allocd out of\n   GC_arrays, and separately registered the first two as excluded roots.\n   This makes code compiled with gc_inl.h less dependent on the\n   collector version.  (It would be nice to remove the inclusion of\n   gc_priv.h by gc_inl.h completely, but we're not there yet.  The\n   locking definitions in gc_priv.h are still referenced.)\n   This change was later coniditoned on SEPARATE_GLOBALS, which\n   is not defined by default, since it involves a performance hit.\n - Register GC_obj_kinds separately as an excluded root region.  The\n   attempt to register it with GC_arrays was usually failing.  (This wasn't\n   serious, but seemed to generate some confusion.) \n - Moved backptr.h to gc_backptr.h.\n\nSince 6.0alpha1\n - Added USE_MARK_BYTES to reduce the need for compare-and-swap on platforms\n   for which that's expensive.\n - Fixed a locking bug ib GC_gcj_malloc and some locking assertion problems.\n - Added a missing volatile to OR_WORD and renamed the parameter to\n   GC_compare_and_swap so it's not a C++ reserved word.  (Thanks to\n   Toshio Endo for pointing out both of those.)\n - Changed Linux dynamic library registration code to look at /proc/self/maps\n   instead of the rld data structures when REDIRECT_MALLOC is defined.\n   Otherwise some of the rld data data structures may be prematurely garbage\n   collected.  (Thanks to Eric Benson for helping to track this down.)\n - Fixed USE_LD_WRAP a bit more, so it should now work without threads.\n - Renamed XXX_THREADS macros to GC_XXX_THREADS for namespace correctness.\n   Tomporarily added some backward compatibility definitions.  Renamed\n   USE_LD_WRAP to GC_USE_LD_WRAP.\n - Many MACOSX POWERPC changes, some additions to the gctest output, and\n   a few minor generic bug fixes.  (Thanks to Dietmar Planitzer.)\n\nSince 6.0 alpha2\n - Fixed the /proc/self/maps code to not seek, since that apparently is not\n   reliable across all interesting kernels.\n - Fixed some compilation problems in the absence of PARALLEL_MARK\n   (introduced in alpha2).\n - Fixed an algorithmic problem with PARALLEL_MARK.  If work needs to\n   be given back to the main mark \"stack\", the BOTTOM entries of the local\n   stack should be given away, not the top ones.  This has substantial\n   performance impact, especially for > 2 processors, from what I can tell.\n - Extracted gc_lock.h from gc_priv.h.  This should eventually make it a\n   bit easier to avoid including gc_priv.h in clients.\n - Moved all include files to include/ and removed duplicate links to the\n   same file.  The old scheme was a bad idea because it was too easy to get the\n   copies out of sync, and many systems don't support hard links.\n   Unfortunately, it's likely that I broke some of the non-Unix Makefiles in\n   the process, although I tried to update them appropriately.\n - Removed the partial support for a copied nursery.  It's not clear that\n   this would be a tremendous win, since we don't consistently lose to\n   generational copying collectors.  And it would significantly complicate\n   many things.  May be reintroduced if/when it really turns out to win.\n - Removed references to IRIX_JDK_THREADS, since I believe there never\n   were and never will be any clients.\n - Added some code to linux_threads.c to possibly support HPUX threads\n   using the Linux code.  Unfortunately, it doesn't work yet, and is\n   currently disabled.\n - Added support under Linux/X86 for saving the call chain, both in (debug)\n   objects for client debugging, and in GC_arrays._last_stack for GC\n   debugging.  This was previously supported only under Solaris.  It is\n   not enabled by default under X86, since it requires that code be compiled\n   to explicitly dave frame pointers on the call stack.  (With gcc this\n   currently happens by default, but is often turned off explicitly.)\n   To turn it on, define SAVE_CALL_CHAIN.\n \nSince 6.0 alpha3\n - Moved up the detection of mostly full blocks to the initiatiation of the\n   sweep phase.  This eliminates some lock conention in the PARALLEL_MARK case,\n   as multiple threads try to look at mostly full blocks concurrently.\n - Restored the code in GC_malloc_many that grabs a prefix of the global\n   free list.  This avoids the case in which every GC_malloc_many call\n   tries and fails to allocate a new heap block, and the returns a single\n   object from the global free list.\n - Some minor fixes in new_hblk.c.  (Attempted to build free lists in order\n   of increasing addresses instead of decreasing addresses for cache performance\n   reasons.  But this seems to be only a very minor gain with -DEAGER_SWEEP,\n   and a loss in other cases.  So the change was backed out.)\n - Fixed some of the documentation.  (Thanks in large part to Fergus\n   Henderson.)\n - Fixed the Linux USE_PROC_FOR_LIBRARIES code to deal with apps that perform\n   large numbers of mmaps.  (Thanks to Eric Benson.)  Also fixed that code to\n   deal with short reads.\n - Added GC_get_total_bytes(). \n - Fixed leak detection mode to avoid spurious messages under linuxthreads.\n   (This should also now be easy for the other supported threads packages.\n   But the code is tricky enough that I'm hesitant to do it without being able\n   to test.  Everything allocated in the GC thread support itself should be\n   explicitly deallocated.)\n - Made it possible (with luck) to redirect malloc to GC_local_malloc.\n\nSince 6.0 alpha4\n - Changed the definition of GC_pause in linux_threads.c to use a volatile\n   asm.  Some versions of gcc apparently optimize away writes to local volatile\n   variables.  This caused poor locking behaviour starting at about\n   4 processors.\n - Added GC_start_blocking(), GC_end_blocking() calls and wrapper for sleep\n   to linux_threads.c.\n   The first two calls could be used to generally avoid sending GC signals to\n   blocked threads, avoiding both premature wakeups and unnecessary overhead.\n - Fixed a serious bug in thread-local allocation.  At thread termination,\n   GC_free could get called on small integers.  Changed the code for thread\n   termination to more efficiently return left-over free-lists.\n - Integrated Kjetil Matheussen's BeOS support.\n - Rearranged the directory structure to create the doc and tests\n   subdirectories.\n - Sort of integrated Eric Benson's patch for OSF1.  This provided basic\n   OSF1 thread support by suitably extending hpux_irix_threads.c.  Based\n   on earlier email conversations with David Butenhof, I suspect that it\n   will be more reliable in the long run to base this on linux_threads.c\n   instead.  Thus I attempted to patch up linux_threads.c based on Eric's code.\n   The result is almost certainly broken, but hopefully close enough that\n   someone with access to a machine can pick it up.\n - Integrated lots of minor changes from the NetBSD distribution.  (These\n   were supplied by David Brownlee.  I'm not sure about the original\n   authors.)\n - Hacked a bit more on the HP/UX thread-support in linux_threads.c.  It\n   now appears to work in the absence of incremental collection.  Renamed\n   hpux_irix_threads.c back to irix_threads.c, and removed the attempt to\n   support HPUX there.\n - Changed gc.h to define _REENTRANT in cases in which it should already\n   have been defined. It is still safer to also define it on the command\n   line. \n\nSince 6.0alpha5:\n - Changed the definition of DATASTART on ALPHA and IA64, where data_start\n   and __data_start are not defined by earlier versions of glibc.  This might\n   need to be fixed on other platforms as well.\n - Changed the way the stack base and backing store base are found on IA64.\n   This should now remain reliable on future kernels.  But since it relies\n   on /proc, it will no longer work in the simulated NUE environment.\n - Made the call to random() in dbg_mlc.c with -DKEEP_BACK_PTRS dependent\n   on the OS.  On non-Unix systems, rand() should be used instead.  Handled\n   small RAND_MAX.  (Thanks to Peter Ross for pointing this out.)\n - Fixed the cord make rules to create the cord subdirectory, if necessary.\n   (Thanks to Doug Moen.)\n - Changed fo_object_size calculation in finalize.c.  Turned finalization\n   of nonheap object into a no-op.  Removed anachronism from GC_size()\n   implementation.\n - Changed GC_push_dirty call in solaris_threads.c to GC_push_selected.\n   It was missed in a previous renaming. (Thanks to Vladimir Tsichevski\n   for pointing this out.)\n - Arranged to not not mask SIGABRT in linux_threads.c.  (Thanks to Bryce\n   McKinlay.) \n - Added GC_no_dls hook for applications that want to register their own\n   roots.\n - Integrated Kjetil Matheussen's Amiga changes.\n - Added FREEBSD_STACKBOTTOM.  Changed the X86/FreeBSD port to use it.\n   (Thanks to Matthew Flatt.)\n - Added pthread_detach interception for platforms supported by linux_threads.c\n   and irix_threads.c.  Should also be added for Solaris?\n - Changed the USE_MMAP code to check for the case in which we got the\n   high end of the address space, i.e. mem_ptr + mem_sz == 0.  It appears\n   that this can happen under Solaris 7.  It seems to be allowed by what\n   I would claim is an oversight in the mmap specification.  (Thanks to Toshio\n   Endo for pointing out the problem.)\n - Cleanup of linux_threads.c.  Some code was originally cloned from\n   irix_threads.c and now unnecessary.  Some comments were obviously wrong.\n - (Mostly) fixed a longstanding problem with setting of dirty bits from\n   a signal handler.  In the presence of threads, dirty bits could get lost,\n   since the etting of a bit in the bit vector was not atomic with respect\n   to other updates.  The fix is 100% correct only for platforms for which\n   GC_test_and_set is defined.  The goal is to make that all platforms with\n   thread support.  Matters only if incremental GC and threads are both\n   enabled.\n - made GC_all_interior_pointers (a.k.a. ALL_INTERIOR_POINTERS) an\n   initialization time, instead of build-time option.  This is a \n   nontrivial, high risk change.  It should slow down the code measurably\n   only if MERGE_SIZES is not defined, which is a very nonstandard\n   configuration.   \n - Added doc/README.environment, and implemented what it describes.  This\n   allows a number of additional configuration options to be set through\n   the environment.  It documents a few previously undocumented options.\n - Integrated Eric Benson's leak testing improvements.\n - Removed the option to throw away the beginning of each page (DISCARD_WORDS).\n   This became less and less useful as processors enforce stricter alignment.\n   And it hadn't been tested in ages, and was thus probably broken anyway.\n\nSince 6.0alpha6:\n - Added GC_finalizer_notifier.  Fixed GC_finalize_on_demand.  (The variable\n   actually wasn't being tested at the right points.  The build-time flag\n   was.)\n - Added Tom Tromey's S390 Linux patch.\n - Added code to push GC_finalize_now in GC_push_finalizer_structures.\n   (Thanks to Matthew Flatt.)\n - Added GC_push_gc_structures() to push all GC internal roots.\n - Integrated some FreeBSD changes from Matthew Flatt.\n - It looks like USRSTACK is not always correctly defined under Solaris.\n   Hacked gcconfig.h to attempt to work around the problem.  The result\n   is not well tested.  (Thanks again to Matthew Flatt for pointing this\n   out.  The gross hack is mine. - HB)\n - Added Ji-Yong Chung's win32 threads and C++ fixes.\n - Arranged for hpux_test_and_clear.s to no longer be needed or built.\n   It was causing build problems with gas, and it's not clear this is\n   better than the pthreads alternative on this platform.\n - Some MINGW32 fixes from Hubert Garavel.\n - Added Initial Hitachi SH4 port from Kaz Kojima.\n - Ported thread-local allocation and parallel mark code to HP/UX on PA_RISC.\n - Made include/gc_mark.h more public and separated out the really private\n   pieces.  This is probably still not quite sufficient for clients that\n   want to supply their own kind of type information.  But it's a start.\n   This involved lots of identifier renaming to make it namespace clean.\n - Added GC_dont_precollect for clients that need complete control over\n   the root set.\n - GC_is_visible didn't do the right thing with gcj objects.  (Not that\n   many people are likely to care, but ...)\n - Don't redefine read with GC_USE_LD_WRAP.\n - Initial port to LINUX/HP_PA.  Incremental collection and threads are not\n   yet supported.  (Incremental collection should work if you have the\n   right kernel.  Threads may work with a sufficiently patched pthread\n   library.)\n - Changed gcconfig.h to recognize __i386__ as an alternative to i386 in\n   many places.  (Thanks to Benjamin Lerman.)\n - Made win32_threads.c more tolerant of detaching a thread that it didn't\n   know about.  (Thanks to Paul Nash.)\n - Added Makefile.am and configure.in from gcc to the distribution, with\n   minimal changes.  For the moment, those are just placeholders.  In the\n   future, we're planning to switch to a GNU-style build environment for\n   Un*x-like systems, though the old Makefile will remain as a backup.\n - Turned off STUBBORN_ALLOC by default, and added it back as a Makefile\n   option.\n - Redistributed some functions between malloc.c and mallocx.c, so that\n   simple statically linked apps no longer pull in mallocx.o.\n - Changed large object allocation to clear the first and last few words\n   of each block before releassing the lock.  Otherwise the marker could see\n   objects with nonsensical type descriptors.\n - Fixed a couple of subtle problems that could result in not recognizing\n   interior pointers from the stack.  (I believe these were introduced\n   in 6.0alpha6.)\n - GC_debug_free_inner called GC_free, which tried to reacquire the\n   allocator lock, and hence deadlocked.  (DBG_HDRS_ALL probably never worked\n   with threads?)\n - Fixed several problems with back traces.  Accidental references to a free\n   list could cause the free list pointer to be overwritten by a back pointer.\n   There seemed to be some problems with the encoding of root and finalizer\n   references.\n  \nSince 6.0alpha7:\n - Changed GC_debug_malloc_replacement and GC_debug_realloc_replacement\n   so that they compile under Irix.  (Thanks to Dave Love.)\n - Updated powerpc_macosx_mach_dep.s so that it works if the collector\n   is in a dynamic library.  (Thanks to Andrew Begel.)\n - Transformed README.debugging into debugging.html, updating and\n   expanding it in the process.  Added gcdescr.html and tree.html\n   from the web site to the GC distribution.\n - Fixed several problems related to PRINT_BLACK_LIST. This involved\n   restructuring some of the marker macros.\n - Fixed some problems with the sizing of objects with debug information.\n   Finalization was broken KEEP_BACK_PTRS or PRINT_BLACK_LIST.  Reduced the\n   object size with SHORT_DEBUG_HDRS by another word.\n - The \"Needed to allocate blacklisted ...\" warning had inadvertently\n   been turned off by default, due to a buggy test in allchblk.c.  Turned\n   it back on.\n - Removed the marker macros to deal with 2 pointers in interleaved fashion.\n   They were messy and the performance improvement seemed minimal.  We'll\n   leave such scheduling issues to the compiler.\n - Changed Linux/PowerPC test to also check for __powerpc__ in response\n   to a discussion on the gcc mailing list.\n - On Matthew Flatt's suggestion removed the \"static\" from the jmp_buf\n   declaration in GC_generic_push_regs.  This was causing problems in\n   systems that register all of their own roots.  It looks far more correct\n   to me without the \"static\" anyway. \n - Fixed several problems with thread local allocation of pointerfree or\n   typed objects.  The collector was reclaiming thread-local free lists, since\n   it wasn't following the link fields.\n - There was apparently a long-standing race condition related to multithreaded\n   incremental collection.  A collection could be started and a thread stopped\n   between the memory unprotect system call and the setting of the\n   corresponding dirt bit.  I believe this did not affect Solaris or PCR, which\n   use a different dirty-bit implementation.  Fixed this by installing\n   signal handlers with sigaction instead of signal, and disabling the thread\n   suspend signal while in the write-protect handler.  (It is unclear\n   whether this scenario ever actually occurred.  I found it while tracking\n   down the following:)\n - Incremental collection did not cooperate correctly with the PARALLEL_MARK\n   implementation of GC_malloc_many or the local_malloc primitves.  It still\n   doesn't work well, but it shouldn't lose memory anymore.\n - Integrated some changes from the gcc source tree that I had previously\n   missed.  (Thanks to Bryce McKinley for the reminder/diff.)\n - Added Makefile.direct as a copy of the default Makefile, which would\n   normally be overwritten if configure is run.\n - Changed the gc.tar target in Makefile.direct to embed the version number\n   in the gc directory name.  This will affect future tar file distributions.\n - Changed the Irix dynamic library finding code to no longer try to\n   eliminate writable text segments under Irix6.x, since that is probably no\n   longer necessary, and can apparently be unsafe on occasion.  (Thanks to\n   Shiro Kawai for pointing this out.)\n - GC_cleanup with GC_DEBUG enabled passed a real object base address to\n   GC_debug_register_finalizer_ignore_self, which expected a pointer past the\n   debug header.  Call GC_register_finalizer_ignore_self instead, even with\n   debugging enabled.  (Thanks to Jean-Daniel Fekete for catching this.)\n - The collector didn't build with call chain saving enabled but NARGS=0.\n   (Thanks to Maarten Thibaut.)\n - Fixed up the GNU-style build files enough so that they work in some\n   obvious cases.\n - Added initial port to Digital Mars compiler for win32. (Thanks to Walter\n   Bright.)\n\nSince 6.0alpha8:\n - added README.macros.\n - Made gc.mak a symbolic link to work around winzip's tendency to ignore\n   hard links.\n - Simplified the setting of NEED_FIND_LIMIT in os_dep.c, possibly breaking\n   it on untested platforms.\n - Integrated initial GNU HURD port. (Thanks to Chris Lingard and Igor\n   Khavkine.)\n - A few more fixes for Digital Mars compiler (Walter Bright).\n - Fixed gcc version recognition.  Renamed OPERATOR_NEW_ARRAY to\n   GC_OPERATOR_NEW_ARRAY.  Changed GC_OPERATOR_NEW_ARRAY to be the default.\n   It can be overridden with -DGC_NO_OPERATOR_NEW_ARRAY.  (Thanks to\n   Cesar Eduardo Barros.) \n - Changed the byte size to free-list mapping in thread local allocation\n   so that size 0 allocations are handled correctly.\n - Fixed Linux/MIPS stackbottom for new toolchain. (Thanks to Ryan Murray.)\n - Changed finalization registration to invoke GC_oom_fn when it runs out\n   of memory.\n - Removed lvalue cast in finalize.c.  This caused some debug configurations\n   not to build with some non-gcc compilers.\n\nSince 6.0alpha9:\n - Two more bug fixes for KEEP_BACK_PTRS and DBG_HDRS_ALL.\n - Fixed a stack clearing problem that resulted in SIGILL with a\n   misaligned stack pointer for multithreaded SPARC builds.\n - Integrated another HURD patch (thanks to Igor Khavkine).\n\nSince 6.0:\n - Non-debug, atomic allocations could result in bogus smashed object\n   reports with debugging on.  (Thanks to Patrick Doyle for the small\n   test case.)\n - Fixed GC_get_register_stack_base (Itanium only) to work around a glibc\n   2.2.4 bug.\n - Initial port to HP/UX on Itanium.  Thread support and both 32 and 64\n   bit ABIs appear to work.  Parallel mark support doesn't yet, due to\n   some inline assembly code issues.  Thread local allocation does appear\n   to work.\n - ifdef'ed out glibc2.1/Itanium workaround.  I suspect nobody is using\n   that combination anymore.\n - Added a patch to make new_gc_alloc.h usable with gcc3.0.  (Thanks to\n   Dimitris Vyzovitis for the patch.)\n - Debugged 64-bit support on HP/UX PA-RISC.\n - Turned on dynamic loading support for FreeBSD/ELF.  (Thanks to Peter\n   Housel.)\n - Unregistering of finalizers with debugging allocation was broken.\n   (Thanks to Jani Kajala for the test case.)\n - Old finalizers were not returned correctly from GC_debug_register_finalizer.\n - Disabled MPROTECT_VDB for Linux/M68K based on a report that it doesn't work.\n - Cleaned up some statistics gathering code in reclaim.c (Thanks to Walter\n   Bright.)\n - Added some support for OpenBSD/ELF/Linux.  (Thanks to Suzuki Toshiya.)\n - Added Jakub Jelinek's patch to use dl_iterate_phdr for dynamic library\n   traversal to dyn_load.c.  Changed it to weakly reference dl_iterate_phdr,\n   so that the old code is stilll used with old versions of glibc.\n - Cleaned up feature test macros for various threads packages and\n   integrated (partially functional) FreeBSD threads code from Loren Rittle.\n   It's likely that the cleanup broke something, since it touched lots of\n   code.  It's also likelly that it fixed some unreported bugs in the\n   less common thread implementations, since some of the original code\n   didn't stand up to close scrutiny.  Support for the next pthreads\n   implementation should be easier to add.\n\nSince 6.1alpha1:\n - No longer wrap read by default in multithreaded applications.  It was\n   pointed out on the libgcj list that this holds the allocation lock for\n   way too long if the read blocks.  For now, reads into the heap are\n   broken with incremental collection.  It's possible to turn this back on\n   if you make sure that read calls don't block (e.g. by calling select\n   first).\n - Fix ifdef in Solaris_threads.h to refer to GC_SOLARIS_THREADS.\n - Added check for environment variable GC_IGNORE_GCJ_INFO.\n - Added printing of stop-the-world GC times if GC_PRINT_STATS environment\n   variable is set.\n - The calloc definition in leak_detector.h was missing parentheses, and\n   realloc was missing a second argument to GC_REALLOC.\n   (Thanks to Elrond (elrond<at>samba-tng.org).)\n - Added GC_PRINT_BACK_HEIGHT environment variable and associated\n   code, mostly in the new file backgraph.c.  See doc/README.environment.\n - Added -DUSE_GLOBAL_ALLOC to work around a Windows NT issue.  (Thanks to\n   Jonathan Clark.)\n - Integrated port to NEC EWS4800 (MIPS-based workstation, with somewhat\n   different address-space layout). This may help for other machines with\n   holes in the data segment.  (Thanks to Hironori Sakamoto.)\n - Changed the order in which GC_push_roots and friends push things onto\n   the mark stack.  GC_push_all calls need to come first, since we can't\n   necessarily recovere if those overflow the mark stack.  (Thanks to\n   Matthew Flatt for tracking down the problem.)\n - Some minor cleanups to mostly support the Intel compiler on Linux/IA64.\n\nSince 6.1 alpha2:\n - Minor cleanup on the gcconfig.h section for SPARC.\n - Minor fix to support Intel compiler for I386/Linux. (Thanks to Sven\n   Hartrumpf.)\n - Added SPARC V9 (64-bit) support.  (Thanks to Jeff Sturm.)\n - Restructured the way in which we determine whether or not to keep\n   call stacks for debug allocation.  By default SAVE_CALL_COUNT is\n   now zero on all platforms.  Added SAVE_CALL_NARGS parameters.\n   If possible, use execinfo.h to capture call stack.  (This should\n   add support for a number of new platforms, though often at\n   considerable runtime expense.)\n - Try to print symbolic information for call stacks.  On Linux, we\n   do this with a combination of execinfo.h and running addr2line in\n   a separate process.  This is both much more expensive and much more\n   useful.  Amazingly, it seems to be fast enough for most purposes.\n - Redefined strdup if -DREDIRECT_MALLOC is given.\n - Changed incremental collector and MPROTECT_VDB implementation so that,\n   under favorable conditions, pointerfree objects are not protected.\n   Added GC_incremental_protection_needs() to determine ahead of time whether\n   pointerfree objects may be protected.  Replaced GC_write_hint() with\n   GC_remove_protection().\n - Added test for GC_ENABLE_INCREMENTAL environment variable.\n - Made GC_time_limit runtime configurable.  Added GC_PAUSE_TIME_TARGET\n   environment variable.\n - Eliminated GC_page_sz, a duplicate of GC_page_size.\n - Caused the Solaris and Irix thread creation primitives to call\n   GC_init_inner().\n \nSince 6.1alpha3:\n - Fixed typo in sparc_mach_dep.S, preventing the 64-bit version from\n   building.  Increased 64-bit heap size limit in test.c slightly, since\n   a functional SPARC collector seems to slightly exceed the old limits.\n   (Thanks again to Jeff Sturm.)\n - Use NPRGREG in solaris_threads.c, thus printing all registers if things\n   go wrong.\n - Added GC_MARKERS environment variable to allow use of a single marker\n   thread on an MP without confusing the lock implementation.\n - Collect much less aggressively in incremental mode with GC_TIME_UNLIMITED.\n   This is really a purely generational mode, and we can afford to \n   postpone the collection until the heap is (nearly) full.\n - Remove read() wrapper for MPROTECT_VDB.  It was causing more harm than\n   good.  It is often no longer needed if system calls avoid writing to\n   pointerfull heap objects.\n - Fix MACOSX test in gcconfig.h. (Thanks to John Clements.)\n - Change GC_test_and_set so that it consistently has one argument.\n   Add spaces to ::: in powerpc assembly code in gc_locks.h.\n   (Thanks to Ryan Murray.)\n - Fixed a formatting error in dbg_mlc.c.  Added prototype to GC_abort()\n   declaration.   (Thanks to Michael Smith.)\n - Removed \"source\" argument to GC_find_start().  Eliminate GC_FIND_START().\n - Added win32 recognition code in configure.in.  Changed some of the\n   dllimport/export defines in gc.h.  (Thanks to Adam Megacz.)\n - GC_malloc_many didn't set hb_last_reclaimed when it called \n   GC_reclaim_generic.  (I'm not sure this matters much, but ...)\n - Allocating uncollectable objects with debug information sometimes\n   allocated objects that were one byte too small, since uncollectable\n   objects don't have the extra byte added at the end.  (Thanks to\n   Wink Saville for pointing this out.)\n - Added a bit more assertion checking to make sure that gcj objects\n   on free lists never have a nonzero second word.\n - Replaced BCC_MAKEFILE with an up-to-date one.  (Thanks to \n   Andre Leiradella.)\n - Upgraded libtool, cinfigure.in and some related files to hopefully\n   support NetBSD/SPARC.  (Thanks to Adrian Bunk.)  Unfortunately,\n   libtool 1.4.2 seemed to be buggy due to missing quotes in several\n   \"test\" invocations.  Fixed those in the ltmain.sh script.\n - Some win32-specific patches, including the introduction of\n   GC_CreateThread.  (Thanks to Adam Megacz.)\n - Merged in gcj changes from Anthony Green to support embedded systems.\n - Tried to consistently rename preprocessed assembly files with a capital\n   .S extension.\n - Use alpha_mach_dep.S on ALPHA again.  It doesn't really matter, but this\n   makes our distribution consistent with the gcc one, avoiding future merge\n   problems.\n - Move GET_MEM definition into gcconfig.h.  Include gcconfig.h slightly\n   later in gc_priv.h to avoid forward references to ptr_t.\n - Add some testing of local allocation to test.c.\n - Change definition of INVALID_QTID in specific.h.  The -1 value was used\n   inconsistently, and too likely to collide with a valid stack address.\n   Some general clean-up of specific.[ch].  Added assertions.  (Thanks\n   to Michael Smith for tracking down an intermittent bug to this\n   general area.  I'm not sure it has been squashed yet, however.)\n - On Pthread systems it was not safe to call GC_malloc() between fork()\n   and exec().  According to the applicable standards, it doesn't appear\n   to be safe to call malloc() or many other libc functions either, thus\n   it's not clear this is fixable.  Added experimental support for\n   -DHANDLE_FORK in linux_threads.c which tries to support it.  It may\n   succeed if libc does the right thing.  I'm not sure whether it does.\n   (Thanks to Kenneth Schalk for pointing out this issue.)\n - Documented thread local allocation primitives to require an\n   explicit GC_init call.  GC_init_parallel is no longer declared to\n   be a constructor function, since that isn't portable and often\n   seems to lead to initialization order problems.\n - Changed gc_cpp.cc and gc_cpp.h in one more attempt to make them\n   compatible with Visual C++ 6.  (Thanks to Wink Saville for the\n   patch.)\n - Some more patches for Linux on HP PA-RISC.\n - Added include/gc_allocator.h.  It implements (hopefully) standard\n   conforming (as opposed to SGI-style) allocators that allocate\n   collectable (gc_allocator) or GC-traceable, but not collectable\n   (traceable_allocator) objects.  This borrows heavily from libstc++,\n   which borrows heavily from the SGI implementation, this part of\n   which was written by Matt Austern.  Changed test_cpp.cc to very\n   minimally test this.\n - On Linux/X86, retry mmap with a different start argument.  That should\n   allow the collector to use more (closer to 3GB) of the address space.\n   (Thanks to Jeffrey Mark Siskind for tracking this down.)\n - Force 64 bit alignment with GCJ support.  (Reflects Bryce McKinley's\n   patch to the gcc tree.)\n - Refined the choice of sa_handler vs. sa_sigaction in GC_dirty_init\n   to accomodate some glibc5 systems.  (Thanks to Dan Fandrich for the\n   patch.)\n - Compensated for the fact that current versions of glibc set\n   __libc_stack_end incorrectly on Linux/IA64 while initialization code\n   is running.  This could cause the collector to miss 16 bytes of\n   the memory stack if GC_malloc or friends where called before main().\n - Mostly integrated Takis Psarogiannakopoulos' port to DG/UX Inix 86.\n   This will probably take another iteration to work, since his\n   patch conflicted with the libtool upgrade. \n - Added README.arm.cross containing some information about cross-\n   compiling to an ARM processor from Margaret Fleck.\n\nSince 6.1alpha4:\n - Added GC_finalizer_mem_freed, and changed some of the code that\n   decided on heap expansion to look at it.  Memory explicitly\n   deallocated by finalizers essentially needs to be counted as reclaimed\n   by the GC.  Otherwise there are cases in which the heap can grow\n   unboundedly.  (Thanks to Mark Reichert for the test case.)\n - Integrated Adam Megacz patches to not scan dynamic libraries if\n   we are compiling with gcc on win32.  Otherwise we need structured\n   exception handling to deal with asynchronously unmapped root\n   segments, and gcc doesn't directly support that.\n - Integrated Anthony Green's patch to support Wine.\n - GC_OPERATOR_NEW_ARRAY was misspelled OPERATOR_NEW_ARRAY in several\n   places, including gc_cpp.cc.  (Thanks to Wink Saville for pointing\n   this out.)\n - Integrated Loren James Rittle's Alpha FreeBSD patches.  In\n   response to Richard Henderson's suggestion, these also\n   changed the declarations of symbols like _end on many platforms to\n   that they wouldn't mistakenly be declared as short data symbols.\n - Integrated changes from the Debian distribution.  (Thanks to Ryan Murray\n   for pointing these out.)  Fix C++ comments in POWERPC port.  Add ARM32\n   incremental GC support.  Get rid of USE_GENERIC_PUSH_REGS for alpha/Linux,\n   this time for real.  Use va_copy to get rid of cord printf problems\n   (finally).\n - Close file descriptor used to count cpus.  Thanks to Jeff Sturm for\n   pointing out the omission.\n - Don't just drop gcj free lists in GC_start_reclaim, since that can\n   eventually cause the marker to see a bogus mark descriptor in the \n   dropped objects.  The usual symptom was a very intermittent segmentation\n   fault in the marker.  This mattered only if one of the GC_gcj_malloc\n   variants was used.  (Thanks to Michael Smith, Jeff Sturm, Bryce\n   McKinley and Tom Tromey for helping to track this down.)\n - Fixed Linux and Solaris/64 SPARC configuration.  (Thanks to David Miller,\n   Jeff Sturm, Tom Tromey, and Christian Joensson.)\n - Fixed a typo in strdup definition.  (Thanks to Gerard A Allan.)\n - Changed Makefile.direct to invoke $(CC) to assemble alpha_mach_dep.S.\n   This is needed on Linux.  I'm not sure whether it's better or worse\n   on Tru64.\n - Changed gc_cpp.h once more to declare operator new and friends only in\n   a Microsoft environment.  This may need further fine tuning.  (Thanks to\n   Johannes Schmidt for pointing out that the older code breaks on gcc3.0.4.)\n - Don't ever override strdup if it's already macro defined.  (Thanks to\n   Adnan Ali for pointing out the problem.)\n - Changed gc_cpp.h yet again to also overload placement new.  Due to the\n   C++ overloading rules, the other overloaded new operations otherwise hide\n   placement new, which causes many STL uses to break.  (Thanks to Reza\n   Shahidi for reporting this, and to Matt Austern for proposing a fix.)\n - Integrated cygwin pthreads support from Dan Bonachea.\n - Turn on DYNAMIC_LOADING for NetBSD.  (Thanks to Krister Walfridsson.)\n - Changed printing code to print more complete GC times.\n - Applied Mark Mitchell's Irix patch to correct some bitrot.\n - Clarified which object-printing routines in dbg_mlc.c should hold\n   the allocation lock.  Restructured the code to allow reasonable object\n   printing with -DREDIRECT_MALLOC.\n - Fix the Linux mmap code to always start with 0x1000 as the initial hint.\n   Minor patches for 64-bit AIX, particularly to STACKBOTTOM.\n   (Thanks again to Jeffrey Mark Siskind.)\n - Renamed \"SUSPENDED\" flag for Solaris threads support to avoid a conflict\n   with a system header. (Thanks to Philp Brown.)\n - Cause win32_threads.c to handle an out of range stack pointer correctly,\n   though currently with a warning.  (Thanks to Jonathan Clark for\n   observing that win32 applications may temporarily use the stack\n   pointer for other purposes, and suggesting a fix.  Unfortunately, it's\n   not clear that there is a complete solution to this problem.)\n\nSince 6.1alpha5:\n - Added GC_MAXIMUM_HEAP_SIZE environment variable.\n - Fix configure.in for MIPS/LINUX. (Thanks to H.J. Lu.)\n - Double page hash table size for -DLARGE_CONFIG.\n - Integrated Bo Thorsen's X86-64 support.\n - STACKBOTTOM definition for LINUX/MIPS was partially changed back.\n   (Thanks to H.J. Lu and Hiroshi Kawashima for resolving this.)\n - Replaced all occurrences of LINUX_DATA_START in gcconfig.h with\n   SEARCH_FOR_DATA_START.  It doesn't hurt to falll back to a search.\n   And __data_start doesn't seem to get defined correctly of the GC\n   library is loaded with LD_PRELOAD, e.g. for leak detection.\n - If the GC_find_leak environment variable is set, do a\n   atexit(GC_gcollect) to give us at least one chance to detect leaks.\n   This may report some very benign leaks, but ...\n - Addeded REDIRECT_FREE.  It's necessary if we want leak detection with\n   LD_PRELOAD.\n - Defer printing of leaked objects, as for smashed objects.\n - Fixed process and descriptor leak in GC_print_callers.  Try for\n   line number even if we got function name.)\n - Ported parallel GC support and thread local allocation to Alpha.\n   Not yet well-tested.\n - Added GC_DUMP_REGULARLY and added finalization statistics to GC_dump().\n - Fixed Makefile.am to mention alpha_mach_dep.S instead of the defunct\n   alpha_mach_dep.s.  (Thanks to Fergus Henderson.)\n - Incorporated a change to new_gc_alloc.h, suggested by Johannes Schmidt,\n   which should make it work with gcc3.1.  (I would still like to encourage\n   use of gc_allocator.h instead.) \n - Use alpha_mach_dep.S only on Linux.  (It's not clear that this is\n   optimal, but it otherwise didn't build on Tru64.  Thanks to Fergus\n   Henderson.)\n - Added ifdef to guard free() in os_dep.c.  Otherwise we get a\n   compilation error on Irix.  (Thanks to Dai Sato.)\n - Added an experimental version of GC_memalign to mallocx.c.  This can't\n   always work, since we don't handle alignment requests in the hblk-level\n   allocator, and we can't handle arbitrary pointer displacements unless\n   GC_all_interior_pointers is enabled.  But it should work for alignment\n   requests up to HBLKSIZE.  This is not yet documented in the standard\n   places.\n - Finally debugged the OSF1/Tru64 thread support.  This needs more testing,\n   since I needed to add a somewhat unconvincing workaround for signal\n   delivery issues that I don't yet completely understand.  But it does\n   pass my tests, even in parallel GC mode.  Incremental GC support is\n   disabled if thread support is enabled, due to the signal issues.\n - Eliminated name-space-incorrect definition of _cdecl from gc_cpp.h.\n - Added GC_debug_malloc_replacement and GC_debug_realloc_replacement\n   declarations to gc.h.  On IA64, this is required for REDIRECT_MALLOC\n   to work correctly with these.\n - Fixed Linux USE_PROC_FOR_LIBRARIES to work with a 64-bit /proc format.\n\nSince 6.1:\n - Guard the test for GC_DUMP_REGULARLY in misc.c with\n   \"#ifndef NO_DEBUGGING\".  Otherwise it fails to build with NO_DEBUGGING\n   defined.  (Thanks to Manuel Serrano.)\n - Message about retrying suspend signals was incorrectly generated even when\n   flag was not set.\n - Cleaned up MACOSX/NEXT root registration code.  There was apparently a\n   separate ifdef case in GC_register_data_segments() for no reason.\n - Removed MPROTECT_VDB for MACOSX port, based on one negative report.\n - Arrange for gc.h and friends to be correctly installed with GNU-style\n   \"make install\".\n - Enable the GNU-style build facility include C++ support in the library\n   with --enable-cplusplus. (Thanks to Thomas Maier for some of the patch.)\n - Mark from GC_thread_key in linux_threads.c, in case that's allocated\n   from the garbage collected heap, as it is with our own thread-specific\n   storage implementation.  (Thanks to Jeff Sturm.)\n - Mark all free list header blocks if they are heap allocated.  This avoids\n   some unnecessary tracing.  And it remains correct if we clear the\n   root set. (Thanks to Jeff Sturm for identifying the bug.)\n - Improved S390/Linux support.  Add S390/Linux 64-bit support.  (Thanks\n   to Ulrich Weigand.)\n - Corrected the spelling of GC_{M,C}ALLOC_EXPLICTLY_TYPED to\n   GC_{M,C}ALLOC_EXPLICITLY_TYPED in gc_typed.h.  This is technically\n   an interface change.  Based on the fact that nobody reported this,\n   I suspect/hope there were no clients.\n - Cleaned up gc_typed.h so that (1) it adds an extern \"C\" declaration\n   when appropriate, (2) doesn't generate references to undefined internal\n   macros, and (3) allows easier manual construction of descriptors.\n - Close the file descriptor used by GC_print_address_map().\n - Set the \"close-on-exec\" bit for various file descriptors maintained\n   for the collector's internal use.\n - Added a hack to find memory segments owned by the system allocator\n   under win32.  Based on my tests, this tends to eventually find all\n   segments, though it may take a while.  There appear to be cleaner,\n   but slower solutions under NT/XP.  But they rely on an API that's\n   unsupported under 9X.\n - Changed Linux PowerPC stack finding to LINUX_STACKBOTTOM.  (Thanks\n   to Akira Tagoh for pointing out that HEURISTIC1 doesn't work on\n   64-bit kernels.)\n - Added GC_set_free_space_divisor to avoid some Windows dll issues.\n - Added FIXUP_POINTER, POINTER_SHIFT, POINTER_MASK to allow preprocessing\n   of candidate pointers for tagging, etc.\n - Always lock around GC_notify_full_gc().  Simplified code for\n   invoking GC_notify_full_gc().\n - Changed the way DATASTART is defined on FreeBSD to be robust against\n   an unmapped page after etext.  (Thanks to Hironori Sakamoto for\n   tracking down the intermittent failure.)\n - Made GC_enable() and GC_disable() official.  Deprecated direct update\n   of GC_dont_gc.  Changed GC_gcollect to be a noop when garbage collection\n   is disabled.\n - Call GC_register_dynamic_libraries before stopping the world on Linux,\n   in order to avoid a potential deadlock due to the dl_iterate_phdr lock.\n - Introduced a more general mechanism for platform-dependent code to\n   decide whether the main data segment should be handled separately\n   from dynamic libraries, or registered by GC_register_dynamic_libraries.\n   The latter is more reliable and easier on Linux with dl_iterate_phdr. \n\nSince 6.2alpha1:\n - Fixed the completely broken FreeBSD code in 6.2alpha1.  (Thanks to\n   Hironori Sakamoto for the patch.)\n - Changed IRIX reference in dbg_mlc.c to IRIX5. (Thanks to Marcus Herbert.)\n - Attempted to work around the problems with .S filenames and the SGI\n   compiler.  (Reported by several people. Untested.)\n - Worked around an HP/UX make issue with the GNU-style build process.\n - Fixed the --enable-cplusplus build machinery to allow builds without\n   a C++ compiler.  (That was always the intent ...)\n - Changed the debugging allocation macros to explicitly pass the return\n   address for Linux and XXXBSD on hardware for which we can't get stack\n   traces.  Use __builtin_return_address(0) to generate it when possible.\n   Some of the configuration work was cleaned up (good) and moved to gc.h\n   (bad, but necessary).  This should make leak detection more useful\n   on a number of platforms.  (Thanks to Fabian Thylman for the suggestion.)\n - Fixed compilation problems in dbg_mlc.c with GC_ADD_CALLER.\n - Bumped revision number for dynamic library.\n\nSince 6.2alpha2:\n - Don't include execinfo.h in os_dep.c when it's not needed, and may not exist.\n\nSince 6.2alpha3:\n - Use LINUX_STACKBOTTOM for >= glibc2.2 on Linux/MIPS.  (See Debian bug\n   # 177204)\n - Integrated Jeff Sturm and Jesse Rosenstock's MACOSX threads patches.\n - Integrated Grzegorz Jakacki's substantial GNU build patch.  \"Make dist\"\n   should now work for the GNU build process.  Documentation files\n   are installed under share/gc.\n - Tweaked gc_cpp.h to again support the Borland compiler.  (Thanks to\n   Rene Girard for pointing out the problems.)\n - Updated BCC_MAKEFILE (thanks to Rene Girard).\n - Added GC_ASSERT check for minimum thread stack size.\n - Added --enable-gc-assertions.\n - Added some web documentation to the distribution.  Updated it in the\n   process.\n - Separate gc_conf_macros.h from gc.h.\n - Added generic GC_THREADS client-defined macro to set the appropriate\n   GC_XXX_THREADS internal macro.  (gc_config_macros.h.)\n - Add debugging versions of _ignore_off_page allocation primitves.\n - Moved declarations of GC_make_closure and GC_debug_invoke_finalizer\n   from gc.h to gc_priv.h.\n - Reset GC_fail_count even if only a small allocation succeeds.\n - Integrated Brian Alliet's patch for dynamic library support on Darwin.\n - gc_cpp.h's gc_cleanup destructor called GC_REGISTER_FINALIZER_IGNORE_SELF\n   when it should have called the lower case version, since it was\n   explicitly computing a base pointer.\n\nSince 6.2alpha4:\n - GC_invoke_finalizers could, under rare conditions, set\n   GC_finalizer_mem_freed to an essentially random value.  This could\n   possibly cause unbounded heap growth for long-running applications\n   under some conditions.  (The bug was introduced in 6.1alpha5, and\n   is not in gcc3.3.  Thanks to Ben Hutchings for finding it.)\n - Attempted to sanitize the various DLL macros.  GC_USE_DLL disappeared.\n   GC_DLL is used instead.  All internal tests are now on GC_DLL.\n   README.macros is now more precise about the intended meaning.\n - Include DllMain in the multithreaded win32 version only if the\n   collector is actually built as a dll.  (Thanks to Mohan Embar for\n   a version of the patch.)\n - Hide the cygwin threadAttach/Detach functions.  They were violating our\n   namespace rules.  \n - Fixed an assertion in GC_check_heap_proc.  Added GC_STATIC_ASSERT.\n   (Thanks again to Ben Hutchings.)\n - Removed some obsolete definitions for Linux/PowerPC in gcconfig.h.\n - CORD_cat was not rebalancing unbalanced trees in some cases, violating\n   a CORD invariant.  Also tweaked the rebalancing rule for\n   CORD_cat_char_star.  (Thanks to Alexandr Petrosian for the bug report\n   and patch.)\n - Added hand-coded structured exception handling support to mark.c.\n   This should enable support of dynamic libraries under win32 with\n   gcc-compiled code.  (Thanks to Ranjit Mathew for the patch.)\n   Turned on dynamic library scanning for win32/gcc.\n - Removed some remnants of read wrapping.  (Thanks to Kenneth Schalk.)\n   GC_USE_LD_WRAP ws probably broken in recent versions.\n - The build could fail on some platforms since gcconfig.h could include\n   declarations mentioning ptr_t, which was not defined, e.g. when if_mach\n   was built.  (Thanks to Yann Dirson for pointing this out.)  Also\n   cleaned up tests for GC_PRIVATE_H in gcconfig.h a bit. \n - The GC_LOOP_ON_ABORT environment variable interfered with incremental\n   collection, since the write fault handler was erroneously overridden.\n   Handlers are now set up in the correct order.\n - It used to be possible to call GC_mark_thread_local_free_lists() while\n   the world was not stopped during an incremental GC.  This was not safe.\n   Fortunately, it was also unnecessary.  Added GC_world_stopped flag\n   to avoid it.  (This caused occasional crashes in GC_set_fl_marks\n   with thread local allocation and incremental GC.  This probably happened\n   primarily on old, slow multiprocessors.)\n - Allowed overriding of MAX_THREADS in win32_threads.c from the build\n   command line.  (Patch from Yannis Bres.)\n - Taught the IA64/linux code to determine the register backing store base from\n   /proc/self/maps after checking the __libc symbol, but before guessing.\n   (__libc symbols are on the endangered list, and the guess is likely to not\n   always be right for 2.6 kernels.)  Restructured the code to read and parse\n   /proc/self/maps so it only exists in one place (all platforms).\n - The -DUSE_PROC_FOR_LIBRARIES code was broken on Linux.  It claimed that it\n   also registered the main data segment, but didn't actually do so.  (I don't\n   think anyone actually uses this configuration, but ...)\n - Made another attempt to get --enablecplusplus to do the right thing.\n   Since there are unavoidable problems with C programs linking against a\n   dynamic library that includes C++ code, I separated out the c++ code into\n   libgccpp.\n\nSince 6.2alpha5:\n - There was an extra underscore in the name of GC_save_registers_in_stack\n   for NetBSD/SPARC.  (Thanks to Jaap Boender for the patch.)\n - Integrated Brian Alliet's patch for Darwin.  This restructured the\n   linuxthreads/pthreads support to separate generic pthreads support\n   from more the system-dependent thread-stopping code.  I believe this\n   should make it easier to eliminate the code duplication between\n   pthreads platforms in the future.  The patch included some other\n   code cleanups.\n - Integrated Dan Bonachea's patch to support AIX threads.  This required\n   substantial manual integration, mostly due to conflicts with other\n   recent threads changes.  It may take another iteration to\n   get it to work.\n - Removed HPUX/PA-RISC support from aix_irix_threads.c.  It wasn't used\n   anyway and it cluttered up the code.  And anything we can do to migrate\n   towards generic pthreads support is a good thing.\n - Added a more explicit test for tracing of function arguments to test.c.\n   (Thanks to Dan Grayson.)\n - Added Akira Tagoh's PowerPC64 patch.\n - Fixed some bit rot in the Cygwin port.  (Thanks to Dan Bonachea for\n   pointing it out.)  Gc.h now includes just windows.h, not winbase.h.\n - Declared GC_save_regs_in_stack() in gc_priv.h.  Remove other declarations.\n - Changed --enable-cplusplus to use automake consitionals.  The old way\n   confused libtool.  \"Make install\" didn't work correctly for the old version.\n   Previously --enable-cplusplus was broken on cygwin.\n - Changed the C version of GC_push_regs to fail at compile time if it is\n   generated with an empty body.  This seems to have been the cause of one\n   or two subtle failures on unusual platforms.  Those failures should\n   now occur at build time and be easily fixable.\n\nSince 6.2alpha6:\n - Integrated a second round of Irix/AIX patches from Dan Bonachea.\n   Renamed mips_sgi_mach_dep.S back to mips_sgi_mach_dep.s, since it requires\n   the Irix assembler to do the C preprocessing; gcc -E doesn't work.\n - Fixed Makefile.direct for DARWIN.  (Thanks to Manuel Serrano.)\n - There was a race between GC_pthread_detach and thread exit that could\n   result in a thread structure being deallocated by GC_pthread_detach\n   eventhough it was still needed by the thread exit code.  (Thanks to\n   Dick Porter for the small test case that allowed this to be debugged.)\n - Fixed version parsing for non-alpha versions in acinclude.m4 and\n   version checking in version.h.\n\nSince 6.2:\n - Integrated some NetBSD patches forwarded to me by Marc Recht.  These\n   were already in the NetBSD package.    \n - GC_pthread_create waited for the semaphore even if pthread_create failed.\n   Thanks to Dick Porter for the pthread_support.c patch.  Applied the\n   analogous fix for aix_irix_threads.c.\n - Added Rainer Orth's Tru64 fixes.\n - The check for exceeding the thread table size in win32 threadDetach\n   was incorrect.  (Thanks to Alexandr Petrosian for the patch.)\n - Applied Andrew Begel's patch to correct some reentrancy issues\n   with dynamic loading on Darwin.\n - GC_CreateThread() was neglecting to duplicate the thread handle in\n   the table.  (Thanks to Tum Nguyen for the patch.)\n - Pass +ESdbgasm only on PA-RISC machines with vendor compiler.\n   (Thanks to Roger Sayle for the patch.)\n - Applied more AIX threads patches from Scott Ananian.\n\nSince 6.3alpha1:\n - Reenabled I_HOLD_LOCK assertion in aix_irix_threads.h.\n - Put back the WINABI qualifier for GC_CreateThread.  (Thanks to\n   Danny Smith for the patch.  6.3alpha1 had the qualifier in one place\n   but not elsewhere, which was clearly wrong.)\n - Sometimes explicitly define __private_extern__ before DARWIN dyld.h\n   include.  (Thanks to Andreas Tobker for postting the patch.)\n - Included signal.h from pthread_support.c.  Removed GC_looping_handler,\n   which was dead code.\n - GC_find_start was misdeclared by gc_pmark.h if PRINT_BLACK_LIST was\n   defined.  (Thanks to Glauco Masotti for testing and reporting this.)\n   Changed GC_find_start to never just return 0.  According to its\n   comment it doesn't, and it's unclear that's correct.\n - GC_alloc_large had several largely compensating bugs in the\n   computation of GC_words_wasted.  (It was confused about bytes vs.\n   words in two places.)\n - Integrated Slava Sysoltev's patch to support more recent versions of\n   the Intel compiler on IA64/Linux.\n - Changed win32 spinlock initialization to conditionally set a spin count.\n   (Emmanual Stumpf pointed out that enabling this makes a large performance\n   difference on win32 multiprocessors.)  Also cleaned up the win32 spinlock\n   initialization code a bit.\n - Fixed thread support for HP/UX/IA64.  The register backing store base for\n   the main thread was sometimes not set correctly.  (Thanks to Laurent\n   Morichetti.)\n - Added -DEMPTY_GETENV_RESULTS flag to work around Wine problem.\n - Declare GC_stack_alloc and GC_stack_free in solaris_threads.h to\n   avoid 64-bit size mismatches.  (Thanks to Bernie Solomon.)\n - Fixed GC_generic_push_regs to avoid a potential and very unfortunate\n   tail call optimization.  This could lead to prematurely reclaimed\n   objects on configurations that used the generic routine and the new\n   build infrastructure (which potentially optimizes mach_dep.c).\n   This was a serious bug, but it's unclear whether it has resulted in\n   any real failures.\n - Fixed CORD_str to deal with signed characters.  (Thanks to Alexandr\n   Petrosian for noticing the problem and supplying the patch.)\n - Merged a couple of NOSYS/ECOS tests into os_dep.c from gcj.  (Thanks\n   to Anthony Green.)\n - Partially merged a win32 patch from Ben Hutchings, and substantially\n   revised other parts of win32_threads.c.  It had several problems.\n   Under MinGW with a statically linked library, the main thread was\n   not registered.  Cygwin detached threads leaked thread descriptors.\n   There were several race conditions.  For now, unfortunately the\n   static threads limit remains, though we increased it, and made table\n   traversal cost depend on the actual thread count.\n   There is also still some code duplication with pthread_support.c.\n   (Thread descriptors did become much smaller, since Ben Hutchings\n   removed the thread context from them.)\n - Integrated a Solaris configure.in patch from Rainer Orth.\n - Added GC_IGNORE_FB and associated warning to very partially address\n   the issue of the collector treating a mapped frame buffer as part\n   of the root set.  (Thanks to David Peroutka for providing some\n   insight.  More would be helpful.  Is there anything that can be used\n   to at least partially identify such memory segments?)\n   \nSince 6.3alpha2:\n - Removed -DSMALL_CONFIG from BCC_MAKEFILE.\n - Changed macros to test for an ARM processor (Patch from Richard Earnshaw.)\n - Mostly applied a DJGPP patch from Doug Kaufman.  Especially Makefile.dj\n   had suffered from serious bit rot.\n - Rewrote GC_apply_to_maps, eliminating an off-by-one subscript error,\n   and a call to alloca (for lcc compatibility).\n - Changed USE_MUNMAP behavior on posixy platforms to immediately remap\n   the memory with PROT_NONE instead of unmapping it.  The latter risks\n   an intervening mmap grabbing the address space out from underneath us.\n   Updated this code to reflect a cleaner patch from Ulrich Drepper.\n - Replaced _T with _Tp in new_gc_alloc.h to avoid a MACOS X conflict.\n   (Patch from Andrew Begel.)\n - Dynamically choose whether or not lock should spin on win32.  (Thanks\n   to Maurizio Vairani for the patch.)  This may be a significant performance\n   improvement for win32.\n - Fix Makefile.direct to actually include NT_STATIC_THREADS_MAKEFILE\n   in the distribution.  (Again thanks to Maurizio Vairani.)\n - Maybe_install_looping_handler() was accidentally exported, violating\n   our name space convention.\n - Made os_dep.c use sigsetjmp and SA_NODEFER for NetBSD.  (Thanks to\n   Christian Limpach.)  (I generalized the patch to use sigsetjmp on all\n   UNIX_LIKE platforms, admittedly a slightly risky move.  But it may avoid\n   similar problems on some other platforms. I also cleaned up the defn\n   of UNIX_LIKE a bit. - Hans)\n - Integrated Andrew Begel's Darwin threads patch, adjusted according to\n   some of Fergus Hendersons's comments.  (Patch didn't apply cleanly,\n   errors are possible.)\n - Added another test or two for the Intel 8.0 compiler to avoid\n   confusing it with gcc.  The single-threaded collector should now build\n   with icc, at least on ia64. \n\nSince 6.3alpha3:\n - USE_MMAP was broken by confusion in the code dealing with USE_MMAP_ANON.\n   (This was pointed out, and fixes were suggested by several other people.)\n - Darwin supprt was broken in alpha3 as a result of my misintegration of\n   Andrew Begel's patches.  Fixed with another patch from Andrew Begel.\n - A new sanity check in pthread_stop_world.c:GC_push_all_stacks() was\n   overly aggressive.  We may collect from an unregistered thread during\n   thread creation.  Fixed by explicitly checking for that case.  (Added\n   GC_in_thread_creation.)\n\nSince 6.3alpha4:\n - Fix & vs && typo in GC_generic_malloc and\n   GC_generic_malloc_ignore_off_page.  (Propagated from the gcc tree.)\n - Removed SA_NODEFER hack from NetBSD and Solaris write-protect handler.\n   (According to Christian Limpach, the NetBSD problem is fixed.\n   Presumably so is the Solaris 2.3 problem.)\n - Removed placement delete from gc_cpp.h for the SGI compiler.\n   (Thanks to Simon Gornall for the patch.)\n - Changed semantics of the GC_IGNORE_FB environment variable, based \n   on experimentation by Nicolas Cannasse pointing out that the old\n   interpretation was useless.  We still need help in identifying win32\n   graphics memory mappings.  The current \"solution\" is a hack.\n - Removed \"MAKEOVERRIDES =\" from Makefile.am and thus Makefile.in.\n   It probably made more sense in the gcc context.\n - Explicitly ensure that NEED_FIND_LIMIT is defined for {Open,Net}BSD/ELF.\n - Replaced USE_HPUX_TLS macro by USE_COMPILER_TLS, since gcc often\n   supports the same extension on various platforms.\n - Added some basic (completely untested) defines for win64, in support\n   of future work.\n - Declared GC_jmp_buf in os_dep.s as JMP_BUF instead of jmp_buf, fixing\n   a memory overwrite bug on Solaris and perhaps other platforms.\n - Added 0 != __libc_stack_end test to GC_linux_stack_base.  (Thanks to Jakub\n   Jelinek, both for the patch, and for explaining the problem to me.)\n   Otherwise \"prelink\"ing could cause the collector to fail.\n - Changed default thread local storage implementation to USE_PTHREAD_SPECIFIC\n   for HP/UX with gcc.  The compiler-based implementation appears to work\n   only with the vendor compiler.\n - Export GC_debug_header_size and GC_USR_PTR_FROM_BASE from gc_mark.h,\n   making client mark code cleaner and less dependent on GC version.\n - Export several new procedures and GC_generic_malloc from gc_mark.h\n   to support user-defined kinds.  Use the new procedures to replace existing\n   code in gcj_mlc.c and typd_mlc.c.\n - Added support for GC_BACKTRACES.\n - Fixed a remaining problem in CORD_str with signed characters.  (Thanks\n   to Alexandr Petrosian for the patch.)\n - Removed supposedly redundant, but very buggy, definitions of finalizer\n   macros from javaxfc.h.  Fortunately this file probably has no users.\n   The correct declarations were already in gc.h.\n - Also need to set GC_in_thread_creation while waiting for GC during\n   thread termination, since it is also possible to collect from an\n   unregistered thread in that case.\n - Define NO_GETENV for Windows CE, since getenv doesn't appear to exist.\n   + some other minor WinCE fixes. (Thanks to Alain Novak.)\n - Added GC_register_describe_type_fn.\n - Arrange for debugging finalizer registration to ignore non-heap\n   registrations, since the regular version of the routine also behaves\n   that way.\n - GC_gcj_malloc and friends need to check for finalizers waiting to be run.\n   One of the more obscure allocation routines with missing a LOCK() call.\n - Fixed cvtres invocations in NT_MAKEFILE and NT_STATIC_THREADS_MAKEFILE\n   to work with VS.NET.\n - Cleaned up GC_INIT calls in test.  Updated gc.man to encourage GC_INIT\n   use in portable code.\n - Taught the GC to use libunwind if --enable-full-debug is specified on\n   IA64 and libunwind is present.\n - The USE_MUNMAP code could get confused about the age of a block and\n   prematurely unmap it.  GC_unmap_old had a bug related to wrapping of\n   GC_gc_no.  GC_freehblk and GC_merge_unmapped didn't maintain\n   hb_last_reclaimed reasonably when blocks were merged.  The code was\n   fixed to reflect original intent, but that may not always be an\n   improvement.  See todo list item.\n\nSince 6.3alpha5:\n - Define USE_GENERIC_PUSH_REGS for NetBSD/M68K.\n - Fixed the X86_64 PREFETCH macros to correctly handle ia32e (which uses\n   different prefetch instructions from AMD64).  (Thanks to H.J. Lu.)\n - GC_config_macros.h did not correctly define GC_WIN32_THREADS from\n   GC_THREADS. \n - Added simple_example.html.\n - Merged Andrew Gray's patch to correctly restore signal handlers on\n   FreeBSD.\n - Merged a patch from Andreas Jaeger to deal with prefetch-related warnings\n   on x86-64.  Added some other casts so that the PREFETCH macros\n   always get a ptr_t argument.  Removed some casts inthe PREFETCH\n   implementations.\n - At Jesse Jones suggestion: Added a header guard for gc_allocator.h\n   and changed GC_debug_free to clobber contents of deallocated object.\n - The signal masking code in pthread_stop_world.c contained some errors.\n   In particular SIGSEGV was masked in the handler, in spite of the fact that\n   it wrote to the heap.  This could lead to an uncaught SIGSEGV, which\n   apparently became much more likely in Linux 2.6.  Also fixed some\n   typos, and reduced code duplication in the same area.\n - Remove ltconfig, clean up configure messages for DGUX (thanks to\n   Adrian Bunk for the patches).\n - Integrated NetBSD/OpenBSD patches from Marc Recht and Matthias Drochner.\n\nSince 6.3alpha6:\n - Compile test_cpp.cc with CXXCOMPILE instead of COMPILE.\n - Very large allocations could cause a collector hang.  Correct\n   calculation of GC_collect_at_heapsize.\n - GC_print_hblkfreelist printed some bogus results if USE_MUNMAP\n   was defined.\n - Include gc_config_macros.h in threadlibs.c.\n - Correct MacOSX thread stop code. (Thanks to Dick Porter.)\n - SMALL_OBJ definition was off by one.  This could cause crashes\n   at startup.  (Thanks to Zoltan Varga for narrowing this down to\n   a trivial test case.)\n - Integrate Paolo Molara's patch to deal with a race in the Darwin\n   thread stopping code.\n - Changed X86_64 implementation to use SA_SIGINFO in the MPROTECT_VDB\n   implementation.  The old approach appears to have been broken by\n   recent kernels.\n - Added GC_ATTR_UNUSED to eliminate a warning in gc_allocator.h (Thanks\n   to Andrew Begel.)\n - Fix GC_task_self declaration in os_dep.c.  (Thanks to Andrew Pinski.)\n - Increase INITIAL_BUF_SZ in os_dep.c for Solaris /proc reads.\n\nSince gc6.3:\n - Merge gcconfig.h changes from gcc tree.\n - Unconditionally include gc_priv.h in solaris_pthreads.c, win32_threads.h,\n   aix_irix_threads.c, and solaris_threads.c to get thread definitions.\n - Start marker threads in GC_thr_init, so that they get started even\n   if no other threads are ever started.  (Oddly enough, the parallel\n   collector worked correctly, though not well, with no helper threads.)\n - Go ahead and split large blocks in GC_allochblk_nth if GC_dont_gc\n   is set.  (Thanks to Alexander Petrossian.)\n - GC_PRINT_BACK_HEIGHT would deadlock with thread support.\n - Let in_progress_space in backgraph.s grow dynamically.\n - Fix README.solaris2.  The GC_thr_init() hack doesn't work anymore.\n - Convert GC_finalizer_mem_freed to bytes in allchblk.c.\n - Add missing declaration for GC_generic_malloc_words_small_inner.\n   Without it, s390x breaks.  (Thanks to Ulrich Weigand.)\n - Applied several MacOSX patches to support older tool chains.\n   (Thanks to Stefan Ring.)\n - Bug fix for NetBSD/amd64.  (Thanks to Marc Recht.)  Add NetBSD/sh3\n   support.  (Thanks to Uchiyama Yasushi.)\n - Fixed an uninitialized variable in cordprnt.c.  (Thanks to gcc for\n   providing the warning.)\n - Eliminated some, but not all, gcc -Wall warnings.\n - Changed some old style casts to reinterpret_cast in new_gc_alloc.h.\n   (Thanks to Dan Grayson.)\n - GC_extend_size_map shouldn't adjust for GC_all_interior_pointers if\n   GC_DONT_ADD_BYTE_AT_END is set.\n - Changed some (long) casts to (word) in preparation for win64.\n   (Thanks to Peter Colson.)\n - Changed \"int stack_size\" declaration in pthread_support.c to use\n   size_t.  (Only mattered with GC_ASSERTIONS enabled.)\n - Added CRIS (etrax) support.  (Thanks to Simon Posnjak and\n   Hans-Peter Nilsson.)\n - Removed GC_IGNORE_FB frame buffer recognition, and replaced\n   it with a check that the mapping type is MEM_IMAGE.\n   In theory, this should work much better, but it is a high\n   risk change for win32.  (Thanks to Ashley Bone for the crucial\n   experimental data behind this, and to Rutger Ovidus for\n   some further experiments.)\n - GC_allochblk_nth incremented GC_words_wasted by bytes rather than\n   words.\n - Consider GC_words_wasted in GC_adj_words_allocd only if it is within\n   reason.  (A hack to avoid some extremely unlikely scenarios in which\n   we manage to allocate only \"wasted\" space.  7.0 has a better fix.)\n - Changed PowerPC GC_clear implementation to use lwsync instead of\n   eieio, since the documentation recommends against eieio, and\n   it seems to be incorrect if the preceding memory op is a load.\n - Fixed print_block_list to print the correct kind number for\n   STUBBORN.  (Thanks to Rutger Ovidus.)\n - Have configure.in generate an error if it is asked to support\n   pthreads, but doesn't know how to.\n - Added Kazuhiro Inaoka's patch for Renesas M32R support.\n - Have the GNU build mechanism link with -ldl.  Rename THREADLIBS\n   to THREADDLLIBS to reflect this.  (Thanks to Sven Verdoolaege.)\n - Added Hannes Mehnert's patch for FreeBSD/SPARC support.\n - Merged some FreeBSD specific patches to threadlibs.c and dyn_load.c.\n   (Thanks tp John Merryweather Cooper.)\n - Define MPROTECT_VDB on MACOSX only if threads are being used, since the\n   dirty page tracking mechanism uses threads.  (This avoids an undefined\n   reference to _GC_darwin_register_mach_handler_thread.)\n - By popular demand, use __libc symbols only if we are built with\n   USE_LIBC_PRIVATES, which is off by default, and not otherwise documented.\n - Ignore GC_enable_incremental() requests when KEEP_BACK_PTRS is set.\n   The GC itself will dirty lots of pages in this cases, probably making\n   it counterproductive on all platforms.  And the DARWIN port crashes.\n \nSince gc6.4:\n - Integrated Paolo Molaro's patch to deal with EINTR in sem_wait.\n - Make GC_approx_sp() write to dummy location to ensure that stack\n   is grown here, when sp looks reasonable, rather than later, when\n   it might look like a bad memory reference.  (Problem was never\n   observed that I know of.  But on rereading the code it seemed\n   dubious.)\n - Separate out GC_with_callee_saves_pushed and sometimes call\n   it from GC_suspend_handler in pthread_stop_world.c.  Callee-save\n   register values sometimes failed to get traced under HP/UX on\n   PA-RISC.  Linux/IA64 had the same problem, though non-stacked\n   callee-save registers seem to be so rarely used there that nobody\n   ever noticed.\n - Integrated an ancient Darwin powerpc_darwin_machine_dep.s patch\n   from Andreas Tobler, which I had lost.\n - Fix compare_and_exchange implementation for gcc/IA64 to deal with\n   pickier compiler versions.\n - Fixed Itanium 32-bit ABI support (HP/UX).  In particular, the\n   compare_and_exchange implementation didn't consider that possibility.\n - Undefine GC_pthread_detach in win32_threads.c.  (Thanks to\n   Tagliapietra Tommaso.)\n - Fixed inclusion of frame.h for NETBSD in os_dep.c.\n - Applied Dan Bonachea's patch to use mmap on AIX.\n - Several fixes to resurrect the Irix port on recent OS versions.\n - Change ALPHA to use LINUX_STACKBOTTOM.\n - Change SPARC64/LINUX to also use LINUX_STACKBOTTOM.  Deal with potential\n   bad values of __libc_stack_end on that platform.  (Thanks to David Miller.)\n - Relax gctest to allow larger heap if ALIGN_DOUBLE isn't set.\n   (Unnecessary in 7.0)\n - Force a define of __STDC__=0 for the IBM compiler on AIX, so that\n   we get prototypes.  (Unnecessary in 7.0)\n - GC_INIT definition for AIX and CYGWIN referred to DATASTART and DATAEND\n   which are only defined in private include files.\n - Integrated some small gcconfig.h patches from Dan Bonachea.  Also\n   relaxed assertion about FreeBSD stack size in pthread_support.c.\n - Integrated Andrew Begel's darwin_stop_world.c patch for 64-bit\n   support.  This may need additional work.\n - Avoided potentially infinite recursion in GC_save_callers if\n   the system backtrace calls malloc.  The workaround currently requires\n   __thread support if this code is used with threads.\n - Avoided another similar infinite recursion by conditionally\n   invoking GC_save_callers in alloc.c.  (Thanks to Matthias Andree\n   for helping to track down both of these.)\n - Removed all traces of aix_irix_threads.c.  AIX and Irix now use\n   pthread_support.c and pthread_stop_world.c.  The old code appeared\n   to be unreliable for AIX, and was not regularly maintained.\n - On Irix, ignore segments with MA_FETCHOP or MA_NOTCACHED attributed;\n   they're not always safe to read.\n - Fixed a previously vacuous assertion (diagnosed by the SGI compiler)\n   in GC_remove_from_fl.\n - Fix stack_size assertion in GC_pthread_create.\n - Fix assertion in GC_steal_mark_stack.\n\nSince gc6.5:\n - Fix CPU count detection for Irix and FreeBSD. (Thanks to Dan Bonachea.)\n - Integrate Dan Bonachea's patch for the IBM XLC compiler on Darwin.\n - Integrated Andreas Tobler's FreeBSD/PowerPC patch.\n - Don't access the GC thread structure from the restart handler.  It's\n   unsafe, since the handler may run too late.  (Thanks to Ben Maurer for\n   tracking this down.)\n - Applied Christian Thalinger's patch to change comment syntax in\n   alpha_mach_dep.S.\n - Added test for GC_no_dls in GC_dyld_image_add for DARWIN. (Thanks to\n   Juan Jose Garcia Ripoli).\n - Use LINUX_STACKBOTTOM for Linux/SH and LINUX/ARM. (Thanks to Sugioka\n   Toshinobu and Christian Thalinger.)\n - Rewrote GC_parse_map_entry.  This assumed a fixed column layout of\n   /proc/self/maps on Linux.  This ceased to be true about 2 years ago.\n   The old code is probably quite problemetic with -DREDIRECT_MALLOC.  It\n   is also used by default for IA64, though I haven't seen actual failures\n   there.\n - More consistently define HBLKSIZE to 4096 on 64 bit architectures with\n   4K pages.  (Thanks to Andrew Haley.)\n - With win32 threads, GC_stop_world needs to acquire GC_write_cs.  (Thanks\n   to Ben Hutchings for the observation and patch.)\n - Move up struct callinfo declaration to make gcc 4.0.2. happy.\n\nSince 6.6:\n - Add \"int\" to Solaris \"end\" and \"etext\" declaration in gc.h.  Declared\n   the symbols with underscores and as arrays, since that's what's actually\n   used.  Perhaps this could all just be removed?  (Thanks to John Bowman.)\n - Fixed ARM GC_test_and_set code.  (Thanks to Kazu Hirata and Paul Brook.)\n - Added casts for assignments to hb_last_reclaimed, which truncate the\n   value.  Added a cast to GC_adj_words_allocd.  Use GetModuleHandleA\n   when retrieving a handle to kernel32.dll under win32.  (Thanks to the\n   Visual Prolog developers.)\n - Added Tandem S-Series support.  (Thanks to Craig McDaniel.  A modified\n   version of his patch was applied, and hence breakage is probably not\n   his fault.)\n - Remove spurious gc:: qualifier for operator delete[] in gc_cpp.h.\n   (Thanks to Hanno Boeck.)\n - Changed a test for LINUX in config_macros.h to one for __linux__.\n - Add prototypes for GC_finalizer_notifier and GC_thr_init.  (Thanks to\n   David Ayers.)\n - Use ld instead of nonexitent ldz instruction in Darwin FindTopOfStack.\n   (Thanks to Andreas Tobler.)\n - Add support for Darwin/X86.  (Thanks to Geoff Norton and the Mono\n   developers.)\n - Merge in some recent gcc fixes.  Add ppc64 asm code.  (Thanks to Bryce\n   McKinley and other gcj developers.)\n - Scan MEM_PRIVATE sections under Windows ME and predecessors.\n - Interior pointers with some largish offsets into large objects could\n   be ignored, if GC_all_interior_pointers was set.  (Oddly this worked\n   correctly for stack references if it was not set.  Otherwise it failed\n   for both stack and heap references.)  Thanks to Andrew McKinlay for the\n   critical test case.\n - Integrated Tatsuya Bizenn's NETBSD threads support, with some\n   untested changes.\n - Added GC_strdup and friends to make leak detection work correctly\n   for strdup clients.  (Thanks to Jon Moore.)  Fixed the existing strdup\n   with malloc redirection to handle a null malloc return correctly.\n\nSince gc6.7:\n - Added some support for Dragonfly BSD.  (Thanks to Joerg Sonnenberger and\n   Thomas Klausner.)\n - Improvements to the HP/UX section of configure.in/configure.ac.\n   (Thanks to Andreas Tobler)\n - GC_unix_get_mem could neglect to release the malloc lock on Irix, under\n   extremely unlikely circumstances.  Thanks to Jean-Baptiste Nivois for\n   some careful code reading.\n - Added support for kFreeBSD + glibc (Thanks to Petr Salinger)\n - Fix more MacOS threads memory leaks (Thanks to Allan Hsu)\n - Added initial Solaris/X86-64 support (Thanks to Rainer Orth)\n\nSince gc6.8:\n - Fix typo in PREFETCH implementation for X86_64.  (Thanks to Peter Wang.)\n - Fix M68K LINUX port. (Thanks to Debian packagers.)\n - __GNUC__ was misspelled as __GNUC in new_gc_alloc.h. (Thanks to Peter Wang.)\n - Integrated Allan Hsu's patch for OS X VM deallocation problems.\n - Applied FreeBSD/X86_64 patch.\n\nSince gc6.9:\n - Remove GC_PROTO, VOLATILE, GC_PTR, and GC_CONST.  Assume ANSI C compiler\n   and use ANSI constructs unconditionally.\n - Introduce #elif and #error in some of the appropriate places.\n - Remove GC_printf cruft. Use stdargs.\n - Remove separate Solaris threads support.  Use the more generic Posix\n   implementation.\n - Use atomic_ops for atomic operations and memory barriers.\n - Clean up MPROTECT_VDB implementation.  Use SA_SIGINFO wherever\n   possible.\n - Remove broken SIGNALS stuff.\n - Use size_t instead of word, where appropriate.\n - Add .S.o rule to Makefile.am.\n - Officially unsupport SunOS4, several old flavors of M68K (SunOS4,\n   A/UX, HP), IBM PC/RTs and RISCOS/Irix4.  (I doubt the old code worked.\n   If anyone cares, these should be easy to resurrect.)\n - Add EXPECT() in some critical places.\n - Redefined hb_sz and hb_body to deal with bytes rather than words.\n   This affected a great deal of code.  I would like to consistently use\n   byte offsets and sizes where there's not a convincing reason to do\n   otherwise.\n - Redefined several other variables (GC_mem_found, GC_words_allocd)\n   etc. to use units of bytes.  Most of these were also renamed to\n   reflect that fact.\n - Killed as many \"register\" declarations as possible.\n - Partially replaced stubborn allocation with manual write barrier.\n   It's currently broken.\n - Restructured mark code, to allow mark bits to be kept either on\n   a per allocation granule or per object basis.  The emphasis is\n   now on the -DUSE_MARK_BYTES option, since individual bits perform\n   quite badly on hyperthreaded P4s, and are probably suboptimal on\n   other architectures.  -DUSE_MARK_BITS is currently broken, and may\n   be resurrected only for the single-threaded case.  This significantly\n   reduced the cache footprint required by auxiliary GC data structures.\n   It also reduces space overhead for small heaps.  It probably slows\n   things down slightly if interior pointers are very common.\n - As part of the above, we now maintain an approximate count of set\n   mark bits in each heap block.\n - As part of the above, the semantics of hb_map changed drastically.\n   For MARK_BIT_PER_OBJ, it doesn't exist.  For MARK_BIT_PER_GRANULE,\n   it is purely a way to replace a mod instruction with a table lookup.\n   (Somewhat to my surprise, this still wins on modern hardware.)\n - Removed PRINTSTATS, GATHERSTATS, and SILENT macros.  Everything is\n   now controlled by GC_print_stats variable and GC_PRINT_STATS\n   and new GC_PRINT_VERBOSE_STATS environment variables.\n - Add GC_log_printf and use it consistently for logging output.\n - Unconditionally count the objects we reclaim in the sweep phase.\n   For thread local allocation, we need that anyway, and we expect\n   that's increasingly the only case that matters.  And it simplifies\n   the code.  In general expect minor performance hacks that benefit\n   only the single-threaded case to disappear.\n - Remove GC_quiet from gc.h and elsewhere.\n - Changed the heap expansion heuristic, and the definition of\n   GC_free_space_divisor, to refer to live data size, instead of total\n   heap size.  I believe this is much more robust.  It wasn't previously\n   possible, because we didn't have access to live data size.\n - Thread local allocation added the extra byte in twice: Once in\n   thread_local_alloc, and once in malloc_many.\n - Removed GC_malloc_words_small and GC_gcj_fast_malloc.  A new\n   mechanism based on the thread local allocation data structures\n   is expected to be added instead.  This should allow inlined code\n   that is both fast and doesn't rely on collector internals.\n - Changed both free lists and reclaim lists to be indexed by granules\n   instead of words, norming halving their size.\n - MERGE_SIZE is now the only option, and the macro was removed.\n   (Without it, we need a memory reference to GC_all_interior_pointers\n   anyway.  Thus it costs us nothing.)\n - Change GC_size_map to map to granules instead of words.  Make sure\n   that every possible size up to TINY_FREELISTS is present.\n - Split of macros need for fast inline allocation into gc_tiny_fl.h\n   in anticipation of a new inline allocator that doesn't rely on GC\n   internals.\n - Changed thread local allocation to use GRANULE_BYTES and TINY_FREELISTS\n   in anticipation of a merge with the inline allocation code.\n - Removed ALIGN_DOUBLE.  This is mostly handled by GRANULE_BYTES.\n - Make locking on most platforms conditional on GC_need_to_lock.\n\nSince gc7.0alpha1:\n - GC_bytes_allocd was incremented by a possibly uninitialized variable\n   in GC_generic_malloc_inner.  (Bug introduced in gc7.0alpha1.  Thanks\n   to Ben Hutchings for tracking it down.)\n - Win32 fixes.  (Thanks to Ben Hutchings and Maurizio Vairani.)\n - Integrated Ben Hutchings' GetWriteWatch-based virtual dirty bit\n   implementation for win32.\n - Removed pc_gc.tar and floppy targets in Makefile.direct.  Removed\n   pc_excludes file.\n - No longer include GC_bytes_wasted when evaluating allocation progress.\n   Since we are now counting live memory, it no longer makes sense.\n - Applied Davide Angelocola's configury patch.  There are now separate\n   Makefile.am's in the cord and tests subdirectory, more tests, etc.\n - Renamed configure.in to configure.ac.\n - Merged a very small number of Nathanael Nerode's configure.ac\n   cleanups from the gcc tree.  Unfortunately, that file is a bit\n   different from ours.\n - Changed EINTR handling in sem_wait slightly.\n - Restructure the root marking code.  Remove all traces of\n   USE_GENERIC_PUSH_REGS, and effectively make it the default.\n   Make it easier to pass a context pointer to the mark routine, in\n   case we ever want to do precise stack marking.\n - Replace GC_start_blocking() and GC_end_blocking() with GC_do_blocking().\n   This remains undocumented, and only implemented for pthreads.  But it\n   removes an otherwise unavoidable race with stores of callee-save\n   registers.\n - Fix GC_n_mark_bits for the default MARK_BIT_PER_GRANULE case.  This\n   resulted in bogus complaints in heap dumps.\n - Upgrade to libatomic_ops-1.0, and update build structure to match.\n - Remove SRC_M3 support. Clean up lock initialization code in misc.c.\n - Removed gc_local_alloc.h.  If THREAD_LOCAL_ALLOC is defined, the\n   thread local allocation routines are now called automatically.\n - Renamed gc_inl.h back to gc_inline.h.  Changed the interface appreciably\n   since locking has turned into a dominant issue, and in-line allocation\n   only makes sense if it's no worse than thread-local allocation.\n   Gc_inline.h is now also used to implement thread-local allocation.\n - Finished replacing stubborn allocation with manual write barrier.\n   Untested.\n - Use thread-local allocation code by default.\n - Added GC_register_my_thread and friends for Posix and win32.\n - Patch for GWW_VDB from Ben Hutchings.\n - Removed explicit THREAD_LOCAL_ALLOC tests, since that now always\n   redefines GC_malloc.\n - Removed now unused AIX memory allocation code.\n - Various minor fixes for bugs introduced in 7.0alpha1.\n\nSince gc7.0alpha2\n - Added support for dlopen-based interception of pthread functions.\n   This is only half done.  The gc.h redefinitions currently interfere.\n - Integrated major automake overhaul from Petter Urkedal.\n\nSince gc7.0alpha3\n   (various 6.5, 6.6 changes)\n - Removed GC_brief_async_signal_safe_sleep and used atomic_ops instead.\n   (Thanks to Ben Maurer.)\n - Integrated build patches from David Angelocola and Petter Urkedal.\n - Fix dynamic-linker-based pthread call redirection.\n - Renamed RS6000 to POWERPC/AIX.\n - Allow recovery from SIGSEGV in marker on Linux.  This works around\n   a race in thread stack marking if /proc is used to find roots.  We do\n   that by default with malloc redirection and threads.  This involved\n   moving some GC_find_limit and SETJMP related declarations to gc_priv.h.\n - Added doc/porting.html file.\n - Added ADD_HEAP_GUARD_PAGES for sbrk/*nix platforms to debug extreme\n   memory overwrite errors.\n - Added trivial NO_INCREMENTAL flag to facilitate debugging.\n - Added GC_getattr_np-based GC_get_stack_base (untested).\n - Separated thread local allocation into a separate file and added the\n   beginning of win32 support for that.\n\nSince gc7.0alpha4\n   (more 6.6, 6.7 changes)\n - Some Solaris fixes, including some more general changes in how\n   the assembly pieces of mach_dep.c are handled.\n - Removed a lot of SOLARIS_THREADS-specific code that was only\n   needed with the old implementation.  This included many (mostly no-op)\n   versions of GC_is_fresh.\n - Don't use atomic_ops in gc_locks.h unless we need threads.\n - Fixed USE_MARK_BITS, which is once againthe default without PARALLEL_MARK.\n - Removed Solaris GC_INIT hack.  It's a workaround for a long dead bug,\n   and it seemed to be wrong anyway.\n - Changed win32_threads.c to require preprocessor-based interception\n   of thread routines by default.  A client call to GC_use_DllMain is\n   now required to get the old behavior in which DllMain is used to implicitly\n   register threads.  This was doen for uniformity with other platforms, and\n   because the DllMain solution seemed to require very tricky code which,\n   at least in the past, imposed hard bounds onthe number of threads.\n - Many small changes to make thread support work again on Cygwin.\n - Moved definition of allocator lock etc. to pthread_support.c and\n   win32_threads.c for those two cases.\n - Got rid of the FASTLOCK() machinery.  It doesn't seem useful on modern\n   platforms.\n - Cleaned up the uncollectable allocation routines, speeding up the\n   slower paths.  The code did enough unnecessary work off the critical path\n   that the underlying logic was getting hard to extract.\n - No longer turn off THREAD_LOCAL_ALLOC with DBG_HDRS_ALL.  Indications\n   are it just works, and I think the reasons for it not working disappeared\n   a while ago.\n - Fixed bugs in hb_n_marks calculation and assertion.\n - Don't use __builtin_expect for pre-3.0 gcc.\n - Define GWW_VDB only for recent Microsoft tool chains.\n - Add overview.html to doc directory.\n - Fix NT_STATIC_THREADS_MAKEFILE, various compiler warnings.\n - Made thread local allocation sort of work with Cygwin.  The code should\n   be there to deal with other Windows variants, But non-Cygwin Windows\n   threads need more bug fixes.\n\nSince gc7.0alpha5\n   (more 6.7 changes)\n - Declare GC_dump() in gc.h.\n - Add --enable-large-config, which just defines the LARGE_CONFIG macro.\n - Make GlobalAlloc address alignment a bit more intuitive.  (Thanks to\n   Charles Mills.)\n - Use #elif in the definitions of GET_MEM.\n - Overhaul porting.html.  Remove corresponding text from README.\n - Fix typo in DARWIN section of gcconfig.h.\n - Fix Darwin thread memory leak.  (Thanks to Bruce Mitchener.)\n - Update x86 AO_test_and_set implementation to use \"=q\".\n - Add $(EXEEXT) to many tests in tests/tests.am.  (Corresponds to a\n   6.7 fix, which no longer applied.)\n - Fix Darwin/PPC port.\n - Fix Cygwin/threads port.\n - Fix gcj malloc support.\n - For GNU-style make, don't build libatomic_ops unless threads are requested.\n   This should allow single-threaded builds on platforms which do not\n   currently support libatomic_ops.\n - Clean up and hopefully fix the CFLAGS calculation for GNU build.\n   (Substantially improves things on HP/UX.)\n - Integrated Andrei Polushin's Visual C++ patches.  These provide for\n   stack traces, better C++ debug support, and better log file handling.\n   Note that these change the location of the log file to a the path of the\n   executable with a .log extension.  To get the old behavior back, define\n   OLD_WIN32_LOG_FILE.  For the time being, I'm checking his project\n   files and the like into a windows-untested subdirectory.  They\n   are almost certainly already out of date, but better than what we had\n   before.\n - Fixed some win32 threads bugs, and added support for _beginthreadex.\n - Fix zero size thread local allocation so that explicit deallocation\n   works correctly.\n - Removed serious bug in GC_malloc_uncollectable(large size).\n - Do not try to do thread-local gcj allocation in incremental mode.  There\n   are races in setting up the descriptor.\n - Add GC_INIT() to middle.c, fix some more GC_printfn calls.\n - Some assertions erroneously used I_HOLD_LOCK() negatively, eventhough\n   it can now spuriously return TRUE.\n - Rename SUNOS5 macro and OS name to SOLARIS and SUNOS5DL to SOLARISDL.\n - On Linux and some Un*x variants, allocate memory by first trying sbrk,\n   and then switching to mmap if that fails.\n - Fixed /proc/x/maps reading to deal with asynchronous deletions.\n - Fix REDIRECT_MALLOC with threads on Linux.  It now usually seems to work\n   with ugly hacks that include having calloc behave differently when it is\n   called from ld.so or the pthreads library.  A reasonable amount of\n   infrastructure was added to support some of this.  Thanks to Roland McGrath\n   for ideas and information.\n - Import various updated build scripts.\n - Add GC_register_has_static_roots_callback.  (Thanks to Andrew Haley.)\n - Fix serious bugs in GC_malloc_atomic_uncollectable().\n - Return GC_SUCCESS form GC_get_stack_base().\n - Fix several atomic_ops problems on IA64 with HP Compiler.\n - Update to atomic_ops-1.2.\n - Fix hb_n_marks description and reclaim.c assertion.\n - Various additional win32 threads fixes.\n - Enable GC_ASSERTIONS for Debug build with NT_THREADS_MAKEFILE.\n\n[gc7.0alpha7 was released and version bumped to gc7.0alpha8]\n\nSince first gc7.0alpha8 version:\n [ Some gc6.9 changes ]\n - Change FindTopOfStack decl in darwin_stop_world.c.\n - Move some static tests from misc.c to gcconfig.h.  Use #error.\n - Add GC_print_free_list() function.  (Thanks to Bruce Hoult.)\n - Add GC_GNU_THREADS support on HURD. (Thanks to Aleksey Demakov,\n   Barry DeFreese, and possibly other Debian maintainers.)\n - __GNUC__ was misspelled as __GNUC in thread_local_alloc.h.\n   (Thanks to Peter Wang.)\n - Integrated various MacOSX patches and tried to reconcile them.\n   Thanks to Allan Hsu, several contributers at Apple, and probably\n   others.\n - Added some casts to powerpc.h in libatomic_ops to silence warnings.\n\nFOR FURTHER UPDATES SEE ../ChangeLog FILE.\n  \nTo do:\n - REDIRECT_MALLOC and threads combination should work on more platforms,\n   and needs more testing on Linux.\n - Clone marker inner loop to support arch-dependent prefetching,\n   and counting of objects marked for finalization.\n - The USE_MUNMAP code should really use a separate data structure\n   indexed by physical page to keep track of time since last use of\n   a page.  Using hblk headers means we lose track of ages when\n   blocks are merged, and we can't unmap pages that have been allocated and\n   dropped by the blacklisting code.  I suspect both of these matter.\n - A dynamic libgc.so references dlopen unconditionally, but doesn't link\n   against libdl.\n - GC_proc_fd for Solaris is not correctly updated in response to a\n   fork() call.  Thus incremental collection in the child won't work\n   correctly.  (Thanks to Ben Cottrell for pointing this out.)\n - --enable-redirect-malloc is mostly untested and known not to work\n   on some platforms. \n - There seem to be outstanding issues on Solaris/X86, possibly with\n   finding the data segment starting address.  Information/patches would\n   be appreciated.\n - Very large root set sizes (> 16 MB or so) could cause the collector\n   to abort with an unexpected mark stack overflow.  (Thanks again to\n   Peter Chubb.)  NOT YET FIXED.  Workaround is to increase the initial\n   size.\n - The SGI version of the collector marks from mmapped pages, even\n   if they are not part of dynamic library static data areas.  This\n   causes performance problems with some SGI libraries that use mmap\n   as a bitmap allocator.  NOT YET FIXED.  It may be possible to turn\n   off DYNAMIC_LOADING in the collector as a workaround.  It may also\n   be possible to conditionally intercept mmap and use GC_exclude_static_roots.\n   The real fix is to walk rld data structures, which looks possible.\n - Incremental collector should handle large objects better.  Currently,\n   it looks like the whole object is treated as dirty if any part of it\n   is.\n \nFOR FURTHER UPDATES SEE ../ChangeLog FILE.\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/doc/README.linux": "See README.alpha for Linux on DEC AXP info.\n\nThis file applies mostly to Linux/Intel IA32.  Ports to Linux on an M68K, IA64,\nSPARC, MIPS, Alpha and PowerPC are also integrated.  They should behave\nsimilarly, except that the PowerPC port lacks incremental GC support, and\nit is unknown to what extent the Linux threads code is functional.\nSee below for M68K specific notes.\n\nIncremental GC is generally supported.\n\nDynamic libraries are supported on an ELF system.  A static executable\nshould be linked with the gcc option \"-Wl,-defsym,_DYNAMIC=0\".\n\nThe collector appears to work reliably with Linux threads, but beware \nof older versions of glibc and gdb.\n\nThe garbage collector uses SIGPWR and SIGXCPU if it is used with\nLinux threads.  These should not be touched by the client program.\n\nTo use threads, you need to abide by the following requirements:\n\n1) You need to use LinuxThreads or NPTL (which are included in libc6).\n\n   The collector relies on some implementation details of the LinuxThreads\n   package.  This code may not work on other\n   pthread implementations (in particular it will *not* work with\n   MIT pthreads).\n\n2) You must compile the collector with -DGC_LINUX_THREADS (or\n   just -DGC_THREADS) and -D_REENTRANT specified in the Makefile.\n\n3a) Every file that makes thread calls should define GC_LINUX_THREADS and \n   _REENTRANT and then include gc.h.  Gc.h redefines some of the\n   pthread primitives as macros which also provide the collector with\n   information it requires.\n\n3b) A new alternative to (3a) is to build the collector and compile GC clients\n   with -DGC_USE_LD_WRAP, and to link the final program with\n\n   (for ld) --wrap read --wrap dlopen --wrap pthread_create \\\n\t    --wrap pthread_join --wrap pthread_detach \\\n\t    --wrap pthread_sigmask --wrap sleep\n\n   (for gcc) -Wl,--wrap -Wl,read -Wl,--wrap -Wl,dlopen -Wl,--wrap \\\n\t     -Wl,pthread_create -Wl,--wrap -Wl,pthread_join -Wl,--wrap \\\n\t     -Wl,pthread_detach -Wl,--wrap -Wl,pthread_sigmask \\\n\t     -Wl,--wrap -Wl,sleep\n\n   In any case, _REENTRANT should be defined during compilation.\n\n4) Dlopen() disables collection during its execution.  (It can't run\n   concurrently with the collector, since the collector looks at its\n   data structures.  It can't acquire the allocator lock, since arbitrary\n   user startup code may run as part of dlopen().)  Under unusual\n   conditions, this may cause unexpected heap growth.\n\n5) The combination of GC_LINUX_THREADS, REDIRECT_MALLOC, and incremental\n   collection is probably not fully reliable, though it now seems to work\n   in simple cases.\n\n6) Thread local storage may not be viewed as part of the root set by the\n   collector.  This probably depends on the linuxthreads version.  For the\n   time being, any collectable memory referenced by thread local storage should\n   also be referenced from elsewhere, or be allocated as uncollectable.\n   (This is really a bug that should be fixed somehow.  The current GC\n   version probably gets things right if there are not too many tls locations\n   and if dlopen is not used.)\n\n\nM68K LINUX:\n(From Richard Zidlicky)\nThe bad news is that it can crash every linux-m68k kernel on a 68040,\nso an additional test is needed somewhere on startup. I have meanwhile\npatches to correct the problem in 68040 buserror handler but it is not\nyet in any standard kernel.\n\nHere is a simple test program to detect whether the kernel has the\nproblem. It could be run as a separate check in configure or tested \nupon startup. If it fails (return !0) than mprotect can't be used\non that system.\n\n/*\n * test for bug that may crash 68040 based Linux\n */\n\n#include <sys/mman.h>\n#include <signal.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n\nchar *membase;\nint pagesize=4096;\nint pageshift=12;\nint x_taken=0;\n\nint sighandler(int sig)\n{\n   mprotect(membase,pagesize,PROT_READ|PROT_WRITE);\n   x_taken=1;\n}\n\nmain()\n{\n  long l;\n\n   signal(SIGSEGV,sighandler);\n   l=(long)mmap(NULL,pagesize,PROT_READ,MAP_PRIVATE | MAP_ANON,-1,0);\n  if (l==-1)\n     {\n       perror(\"mmap/malloc\");\n       abort();\n     }\n  membase=(char*)l;\n    *(long*)(membase+sizeof(long))=123456789;\n  if (*(long*)(membase+sizeof(long)) != 123456789 )\n    {\n      fprintf(stderr,\"writeback failed !\\n\");\n      exit(1);\n    }\n  if (!x_taken)\n    {\n      fprintf(stderr,\"exception not taken !\\n\");\n      exit(1);\n    }\n  fprintf(stderr,\"vmtest Ok\\n\");\n  exit(0);\n}\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/doc/README.solaris2": "The collector supports both incremental collection and threads under\nSolaris 2.  The incremental collector normally retrieves page dirty information\nthrough the appropriate /proc calls.  But it can also be configured\n(by defining MPROTECT_VDB instead of PROC_VDB in gcconfig.h) to use mprotect\nand signals.  This may result in shorter pause times, but it is no longer\nsafe to issue arbitrary system calls that write to the heap.\n\nUnder other UNIX versions,\nthe collector normally obtains memory through sbrk.  There is some reason\nto expect that this is not safe if the client program also calls the system\nmalloc, or especially realloc.  The sbrk man page strongly suggests this is\nnot safe: \"Many library routines use malloc() internally, so use brk()\nand sbrk() only when you know  that malloc() definitely will not be used by\nany library routine.\"  This doesn't make a lot of sense to me, since there\nseems to be no documentation as to which routines can transitively call malloc.\nNonetheless, under Solaris2, the collector now (since 4.12) allocates\nmemory using mmap by default.  (It defines USE_MMAP in gcconfig.h.)\nYou may want to reverse this decisions if you use -DREDIRECT_MALLOC=...\n\n\nSOLARIS THREADS:\n\nThe collector must be compiled with -DGC_SOLARIS_THREADS (thr_ functions)\nor -DGC_THREADS to be thread safe.  This assumes use of the pthread_\ninterface.  Old style Solaris threads are no longer supported.\n\nIt is also essential that gc.h be included in files that call thr_create,\nthr_join, thr_suspend, thr_continue, or dlopen.  Gc.h macro defines\nthese to also do GC bookkeeping, etc.  Gc.h must be included with\none or both of these macros defined, otherwise\nthese replacements are not visible.\nA collector built in this way way only be used by programs that are\nlinked with the threads library.\n\nSince 5.0 alpha5, dlopen disables collection temporarily,\nunless USE_PROC_FOR_LIBRARIES is defined.  In some unlikely cases, this\ncan result in unpleasant heap growth.  But it seems better than the\nrace/deadlock issues we had before.\n\nIf solaris_threads are used on an X86 processor with malloc redirected to\nGC_malloc, it is necessary to call GC_thr_init explicitly before forking the\nfirst thread.  (This avoids a deadlock arising from calling GC_thr_init\nwith the allocation lock held.)\n\nIt appears that there is a problem in using gc_cpp.h in conjunction with\nSolaris threads and Sun's C++ runtime.  Apparently the overloaded new operator\nis invoked by some iostream initialization code before threads are correctly\ninitialized.  As a result, call to thr_self() in garbage collector\ninitialization  segfaults.  Currently the only known workaround is to not\ninvoke the garbage collector from a user defined global operator new, or to\nhave it invoke the garbage-collector's allocators only after main has started.\n(Note that the latter requires a moderately expensive test in operator\ndelete.)\n\nI encountered \"symbol <unknown>: offet .... is non-aligned\" errors.  These\nappear to be traceable to the use of the GNU assembler with the Sun linker.\nThe former appears to generate a relocation not understood by the latter.\nThe fix appears to be to use a consistent tool chain.  (As a non-Solaris-expert\nmy solution involved hacking the libtool script, but I'm sure you can\ndo something less ugly.)\n\nHans-J. Boehm\n(The above contains my personal opinions, which are probably not shared\nby anyone else.)\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/tools/python.jam": "# Copyright 2004 Vladimir Prus.\n# Distributed under the Boost Software License, Version 1.0. (See\n# accompanying file LICENSE_1_0.txt or copy at\n# http://www.boost.org/LICENSE_1_0.txt)\n\n# Support for Python and the the Boost.Python library.\n#\n# This module defines\n#\n# - a project 'python' with a target 'python' in it, that corresponds to the\n#   python library\n#\n# - a main target rule 'python-extension' which can be used to build a python\n#   extension.\n#\n# Extensions that use Boost.Python must explicitly link to it.\n\nimport type ;\nimport testing ;\nimport generators ;\nimport project ;\nimport errors ;\nimport targets ;\nimport \"class\" : new ;\nimport os ;\nimport common ;\nimport toolset ;\nimport regex ;\nimport numbers ;\nimport string ;\nimport property ;\nimport sequence ;\nimport path ;\nimport feature ;\nimport set ;\nimport builtin ;\nimport property-set ;\n\n\n# Make this module a project.\nproject.initialize $(__name__) ;\nproject python ;\n\n# Save the project so that if 'init' is called several times we define new\n# targets in the python project, not in whatever project we were called by.\n.project = [ project.current ] ;\n\n# Dynamic linker lib. Necessary to specify it explicitly on some platforms.\nlib dl ;\n# This contains 'openpty' function need by python. Again, on some system need to\n# pass this to linker explicitly.\nlib util ;\n# Python uses pthread symbols.\nlib pthread ;\n# Extra library needed by phtread on some platforms.\nlib rt ;\n\n# The pythonpath feature specifies additional elements for the PYTHONPATH\n# environment variable, set by run-pyd. For example, pythonpath can be used to\n# access Python modules that are part of the product being built, but are not\n# installed in the development system's default paths.\nfeature.feature pythonpath : : free optional path ;\n\n# The best configured version of Python 2 and 3.\npy2-version = ;\npy3-version = ;\n\n# Initializes the Python toolset. Note that all parameters are optional.\n#\n# - version -- the version of Python to use. Should be in Major.Minor format,\n#   for example 2.3.  Do not include the subminor version.\n#\n# - cmd-or-prefix: Preferably, a command that invokes a Python interpreter.\n#   Alternatively, the installation prefix for Python libraries and includes. If\n#   empty, will be guessed from the version, the platform's installation\n#   patterns, and the python executables that can be found in PATH.\n#\n# - includes: the include path to Python headers. If empty, will be guessed.\n#\n# - libraries: the path to Python library binaries. If empty, will be guessed.\n#   On MacOS/Darwin, you can also pass the path of the Python framework.\n#\n# - condition: if specified, should be a set of properties that are matched\n#   against the build configuration when Boost.Build selects a Python\n#   configuration to use.\n#\n# - extension-suffix: A string to append to the name of extension modules before\n#   the true filename extension.  Ordinarily we would just compute this based on\n#   the value of the <python-debugging> feature. However ubuntu's python-dbg\n#   package uses the windows convention of appending _d to debug-build extension\n#   modules. We have no way of detecting ubuntu, or of probing python for the\n#   \"_d\" requirement, and if you configure and build python using\n#   --with-pydebug, you'll be using the standard *nix convention. Defaults to \"\"\n#   (or \"_d\" when targeting windows and <python-debugging> is set).\n#\n# Example usage:\n#\n#   using python : 2.3 ;\n#   using python : 2.3 : /usr/local/bin/python ;\n#\nrule init ( version ? : cmd-or-prefix ? : includes * : libraries ?\n    : condition * : extension-suffix ? )\n{\n    project.push-current $(.project) ;\n\n    debug-message Configuring python... ;\n    for local v in version cmd-or-prefix includes libraries condition\n    {\n        if $($(v))\n        {\n            debug-message \"  user-specified $(v):\" \\\"$($(v))\\\" ;\n        }\n    }\n\n    configure $(version) : $(cmd-or-prefix) : $(includes) : $(libraries) : $(condition) : $(extension-suffix) ;\n\n    project.pop-current ;\n}\n\n# A simpler version of SHELL that grabs stderr as well as stdout, but returns\n# nothing if there was an error.\n#\nlocal rule shell-cmd ( cmd )\n{\n    debug-message running command '$(cmd)\" 2>&1\"' ;\n    x = [ SHELL $(cmd)\" 2>&1\" : exit-status ] ;\n    if $(x[2]) = 0\n    {\n        return $(x[1]) ;\n    }\n    else\n    {\n        return ;\n    }\n}\n\n\n# Try to identify Cygwin symlinks. Invoking such a file directly as an NT\n# executable from a native Windows build of bjam would be fatal to the bjam\n# process. One /can/ invoke them through sh.exe or bash.exe, if you can prove\n# that those are not also symlinks. ;-)\n#\n# If a symlink is found returns non-empty; we try to extract the target of the\n# symlink from the file and return that.\n#\n# Note: 1. only works on NT  2. path is a native path.\nlocal rule is-cygwin-symlink ( path )\n{\n    local is-symlink = ;\n\n    # Look for a file with the given path having the S attribute set, as cygwin\n    # symlinks do. /-C means \"do not use thousands separators in file sizes.\"\n    local dir-listing = [ shell-cmd \"DIR /-C /A:S \\\"\"$(path)\"\\\"\" ] ;\n\n    if $(dir-listing)\n    {\n        # Escape any special regex characters in the base part of the path.\n        local base-pat = [ regex.escape $(path:D=) : \"].[()*+?|\\\\$^\" : \\\\ ] ;\n\n        # Extract the file's size from the directory listing.\n        local size-of-system-file = [ MATCH \"([0-9]+) \"$(base-pat) : $(dir-listing) : 1 ] ;\n\n        # If the file has a reasonably small size, look for the special symlink\n        # identification text.\n        if $(size-of-system-file) && [ numbers.less $(size-of-system-file) 1000 ]\n        {\n            local link = [ SHELL \"FIND /OFF \\\"!<symlink>\\\" \\\"\"$(path)\"\\\" 2>&1\" ] ;\n            if $(link[2]) != 0\n            {\n                local nl = \"\n\n\" ;\n                is-symlink = [ MATCH \".*!<symlink>([^\"$(nl)\"]*)\" : $(link[1]) : 1 ] ;\n                if $(is-symlink)\n                {\n                    is-symlink = [ *nix-path-to-native $(is-symlink) ] ;\n                    is-symlink = $(is-symlink:R=$(path:D)) ;\n                }\n\n            }\n        }\n    }\n    return $(is-symlink) ;\n}\n\n\n# Append ext to each member of names that does not contain '.'.\n#\nlocal rule default-extension ( names * : ext * )\n{\n    local result ;\n    for local n in $(names)\n    {\n        switch $(n)\n        {\n            case *.* : result += $(n) ;\n            case * : result += $(n)$(ext) ;\n        }\n    }\n    return $(result) ;\n}\n\n\n# Tries to determine whether invoking \"cmd\" would actually attempt to launch a\n# cygwin symlink.\n#\n# Note: only works on NT.\n#\nlocal rule invokes-cygwin-symlink ( cmd )\n{\n    local dirs = $(cmd:D) ;\n    if ! $(dirs)\n    {\n        dirs = . [ os.executable-path ] ;\n    }\n    local base = [ default-extension $(cmd:D=) : .exe .cmd .bat ] ;\n    local paths = [ GLOB $(dirs) : $(base) ] ;\n    if $(paths)\n    {\n        # Make sure we have not run into a Cygwin symlink. Invoking such a file\n        # as an NT executable would be fatal for the bjam process.\n        return [ is-cygwin-symlink $(paths[1]) ] ;\n    }\n}\n\n\nlocal rule debug-message ( message * )\n{\n    if --debug-configuration in [ modules.peek : ARGV ]\n    {\n        ECHO \"notice:\" \"[python-cfg]\" $(message) ;\n    }\n}\n\n\n# Like W32_GETREG, except prepend HKEY_CURRENT_USER\\SOFTWARE and\n# HKEY_LOCAL_MACHINE\\SOFTWARE to the first argument, returning the first result\n# found. Also accounts for the fact that on 64-bit machines, 32-bit software has\n# its own area, under SOFTWARE\\Wow6432node.\n#\nlocal rule software-registry-value ( path : data ? )\n{\n    local result ;\n    for local root in HKEY_CURRENT_USER HKEY_LOCAL_MACHINE\n    {\n        for local x64elt in \"\" Wow6432node\\\\ # Account for 64-bit windows\n        {\n            if ! $(result)\n            {\n                result = [ W32_GETREG $(root)\\\\SOFTWARE\\\\$(x64elt)$(path) : $(data) ] ;\n            }\n        }\n\n    }\n    return $(result) ;\n}\n\n\n.windows-drive-letter-re = \"^([A-Za-z]):[\\\\/](.*)\" ;\n.cygwin-drive-letter-re = \"^/cygdrive/([a-z])/(.*)\" ;\n\n.working-directory = [ PWD ] ;\n.working-drive-letter = [ SUBST $(.working-directory) $(.windows-drive-letter-re) $1 ] ;\n.working-drive-letter ?= [ SUBST $(.working-directory) $(.cygwin-drive-letter-re) $1 ] ;\n\n\nlocal rule windows-to-cygwin-path ( path )\n{\n    # If path is rooted with a drive letter, rewrite it using the /cygdrive\n    # mountpoint.\n    local p = [ SUBST $(path:T) $(.windows-drive-letter-re) /cygdrive/$1/$2 ] ;\n\n    # Else if path is rooted without a drive letter, use the working directory.\n    p ?= [ SUBST $(path:T) ^/(.*) /cygdrive/$(.working-drive-letter:L)/$2 ] ;\n\n    # Else return the path unchanged.\n    return $(p:E=$(path:T)) ;\n}\n\n\n# :W only works in Cygwin builds of bjam.  This one works on NT builds as well.\n#\nlocal rule cygwin-to-windows-path ( path )\n{\n    path = $(path:R=\"\") ; # strip any trailing slash\n\n    local drive-letter = [ SUBST $(path) $(.cygwin-drive-letter-re) \"$1:/$2\" ] ;\n    if $(drive-letter)\n    {\n        path = $(drive-letter) ;\n    }\n    else if $(path:R=/x) = $(path) # already rooted?\n    {\n        # Look for a cygwin mount that includes each head sequence in $(path).\n        local head = $(path) ;\n        local tail = \"\" ;\n\n        while $(head)\n        {\n            local root = [ software-registry-value\n                \"Cygnus Solutions\\\\Cygwin\\\\mounts v2\\\\\"$(head) : native ] ;\n\n            if $(root)\n            {\n                path = $(tail:R=$(root)) ;\n                head = ;\n            }\n            tail = $(tail:R=$(head:D=)) ;\n\n            if $(head) = /\n            {\n                head = ;\n            }\n            else\n            {\n                head = $(head:D) ;\n            }\n        }\n    }\n    return [ regex.replace $(path:R=\"\") / \\\\ ] ;\n}\n\n\n# Convert a *nix path to native.\n#\nlocal rule *nix-path-to-native ( path )\n{\n    if [ os.name ] = NT\n    {\n        path = [ cygwin-to-windows-path $(path) ] ;\n    }\n    return $(path) ;\n}\n\n\n# Convert an NT path to native.\n#\nlocal rule windows-path-to-native ( path )\n{\n    if [ os.name ] = NT\n    {\n        return $(path) ;\n    }\n    else\n    {\n        return [ windows-to-cygwin-path $(path) ] ;\n    }\n}\n\n\n# Return nonempty if path looks like a windows path, i.e. it starts with a drive\n# letter or contains backslashes.\n#\nlocal rule guess-windows-path ( path )\n{\n    return [ SUBST $(path) \"($(.windows-drive-letter-re)|.*([\\\\]).*)\" $1 ] ;\n}\n\n\nlocal rule path-to-native ( paths * )\n{\n    local result ;\n\n    for local p in $(paths)\n    {\n        if [ guess-windows-path $(p) ]\n        {\n            result += [ windows-path-to-native $(p) ] ;\n        }\n        else\n        {\n            result += [ *nix-path-to-native $(p:T) ] ;\n        }\n    }\n    return $(result) ;\n}\n\n\n# Validate the version string and extract the major/minor part we care about.\n#\nlocal rule split-version ( version )\n{\n    local major-minor = [ MATCH \"^([0-9]+)\\.([0-9]+)(.*)$\" : $(version) : 1 2 3 ] ;\n    if ! $(major-minor[2]) || $(major-minor[3])\n    {\n        ECHO \"Warning: \\\"using python\\\" expects a two part (major, minor) version number; got\" $(version) instead ;\n\n        # Add a zero to account for the missing digit if necessary.\n        major-minor += 0 ;\n    }\n\n    return $(major-minor[1]) $(major-minor[2]) ;\n}\n\n\n# Build a list of versions from 3.4 down to 1.5. Because bjam can not enumerate\n# registry sub-keys, we have no way of finding a version with a 2-digit minor\n# version, e.g. 2.10 -- let us hope that never happens.\n#\n.version-countdown = ;\nfor local v in [ numbers.range 15 34 ]\n{\n    .version-countdown = [ SUBST $(v) (.)(.*) $1.$2 ] $(.version-countdown) ;\n}\n\n\nlocal rule windows-installed-pythons ( version ? )\n{\n    version ?= $(.version-countdown) ;\n    local interpreters ;\n\n    for local v in $(version)\n    {\n        local install-path = [\n          software-registry-value \"Python\\\\PythonCore\\\\\"$(v)\"\\\\InstallPath\" ] ;\n\n        if $(install-path)\n        {\n            install-path = [ windows-path-to-native $(install-path) ] ;\n            debug-message Registry indicates Python $(v) installed at \\\"$(install-path)\\\" ;\n        }\n\n        interpreters += $(:E=python:R=$(install-path)) ;\n    }\n    return $(interpreters) ;\n}\n\n\nlocal rule darwin-installed-pythons ( version ? )\n{\n    version ?= $(.version-countdown) ;\n\n    local prefix\n      = [ GLOB /System/Library/Frameworks /Library/Frameworks\n          : Python.framework ] ;\n\n    return $(prefix)/Versions/$(version)/bin/python ;\n}\n\n\n# Assume \"python-cmd\" invokes a python interpreter and invoke it to extract all\n# the information we care about from its \"sys\" module. Returns void if\n# unsuccessful.\n#\nlocal rule probe ( python-cmd )\n{\n    # Avoid invoking a Cygwin symlink on NT.\n    local skip-symlink ;\n    if [ os.name ] = NT\n    {\n        skip-symlink = [ invokes-cygwin-symlink $(python-cmd) ] ;\n    }\n\n    if $(skip-symlink)\n    {\n        debug-message -------------------------------------------------------------------- ;\n        debug-message \\\"$(python-cmd)\\\" would attempt to invoke a Cygwin symlink, ;\n        debug-message causing a bjam built for Windows to hang. ;\n        debug-message ;\n        debug-message If you intend to target a Cygwin build of Python, please ;\n        debug-message replace the path to the link with the path to a real executable ;\n        debug-message \"(guessing:\" \\\"$(skip-symlink)\\\") \"in\" your 'using python' line ;\n        debug-message \"in\" user-config.jam or site-config.jam. Do not forget to escape ;\n        debug-message backslashes ;\n        debug-message -------------------------------------------------------------------- ;\n    }\n    else\n    {\n        # Prepare a List of Python format strings and expressions that can be\n        # used to print the constants we want from the sys module.\n\n        # We do not really want sys.version since that is a complicated string,\n        # so get the information from sys.version_info instead.\n        local format = \"version=%d.%d\" ;\n        local exprs = \"version_info[0]\" \"version_info[1]\" ;\n\n        for local s in $(sys-elements[2-])\n        {\n            format += $(s)=%s ;\n            exprs += $(s) ;\n        }\n\n        # Invoke Python and ask it for all those values.\n        local full-cmd =\n            $(python-cmd)\" -c \\\"from sys import *; print('\"$(format:J=\\\\n)\"' % (\"$(exprs:J=,)\"))\\\"\" ;\n\n        local output = [ shell-cmd $(full-cmd) ] ;\n        if $(output)\n        {\n            # Parse the output to get all the results.\n            local nl = \"\n\n\" ;\n            for s in $(sys-elements)\n            {\n                # These variables are expected to be declared local in the\n                # caller, so Jam's dynamic scoping will set their values there.\n                sys.$(s) = [ SUBST $(output) \"\\\\<$(s)=([^$(nl)]+)\" $1 ] ;\n            }\n        }\n        return $(output) ;\n    }\n}\n\n\n# Make sure the \"libraries\" and \"includes\" variables (in an enclosing scope)\n# have a value based on the information given.\n#\nlocal rule compute-default-paths ( target-os : version ? : prefix ? :\n    exec-prefix ? )\n{\n    exec-prefix ?= $(prefix) ;\n\n    if $(target-os) = windows\n    {\n        # The exec_prefix is where you're supposed to look for machine-specific\n        # libraries.\n        local default-library-path = $(exec-prefix)\\\\libs ;\n        local default-include-path = $(:E=Include:R=$(prefix)) ;\n\n        # If the interpreter was found in a directory called \"PCBuild\" or\n        # \"PCBuild8,\" assume we're looking at a Python built from the source\n        # distro, and go up one additional level to the default root. Otherwise,\n        # the default root is the directory where the interpreter was found.\n\n        # We ask Python itself what the executable path is in case of\n        # intermediate symlinks or shell scripts.\n        local executable-dir = $(sys.executable:D) ;\n\n        if [ MATCH ^(PCBuild) : $(executable-dir:D=) ]\n        {\n            debug-message \"This Python appears to reside in a source distribution;\" ;\n            debug-message \"prepending \\\"\"$(executable-dir)\"\\\" to default library search path\" ;\n\n            default-library-path = $(executable-dir) $(default-library-path) ;\n\n            default-include-path = $(:E=PC:R=$(executable-dir:D)) $(default-include-path) ;\n\n            debug-message \"and \\\"\"$(default-include-path[1])\"\\\" to default #include path\" ;\n        }\n\n        libraries ?= $(default-library-path) ;\n        includes ?= $(default-include-path) ;\n    }\n    else\n    {\n        includes ?= $(prefix)/include/python$(version) ;\n\n        local lib = $(exec-prefix)/lib ;\n        libraries ?= $(lib)/python$(version)/config $(lib) ;\n    }\n}\n\n# The version of the python interpreter to use.\nfeature.feature python : : propagated ;\nfeature.feature python.interpreter : : free ;\n\ntoolset.flags python.capture-output PYTHON : <python.interpreter> ;\n\n#\n# Support for Python configured --with-pydebug\n#\nfeature.feature python-debugging : off on : propagated ;\nvariant debug-python : debug : <python-debugging>on ;\n\n\n# Return a list of candidate commands to try when looking for a Python\n# interpreter. prefix is expected to be a native path.\n#\nlocal rule candidate-interpreters ( version ? : prefix ? : target-os )\n{\n    local bin-path = bin ;\n    if $(target-os) = windows\n    {\n        # On Windows, look in the root directory itself and, to work with the\n        # result of a build-from-source, the PCBuild directory.\n        bin-path = PCBuild8 PCBuild \"\" ;\n    }\n\n    bin-path = $(bin-path:R=$(prefix)) ;\n\n    if $(target-os) in windows darwin\n    {\n        return                                            # Search:\n            $(:E=python:R=$(bin-path))                    #   Relative to the prefix, if any\n            python                                        #   In the PATH\n            [ $(target-os)-installed-pythons $(version) ] #   Standard install locations\n        ;\n    }\n    else\n    {\n        # Search relative to the prefix, or if none supplied, in PATH.\n        local unversioned = $(:E=python:R=$(bin-path:E=)) ;\n\n        # If a version was specified, look for a python with that specific\n        # version appended before looking for one called, simply, \"python\"\n        return $(unversioned)$(version) $(unversioned) ;\n    }\n}\n\n\n# Compute system library dependencies for targets linking with static Python\n# libraries.\n#\n# On many systems, Python uses libraries such as pthreads or libdl. Since static\n# libraries carry no library dependency information of their own that the linker\n# can extract, these extra dependencies have to be given explicitly on the link\n# line of the client.  The information about these dependencies is packaged into\n# the \"python\" target below.\n#\n# Even where Python itself uses pthreads, it never allows extension modules to\n# be entered concurrently (unless they explicitly give up the interpreter lock).\n# Therefore, extension modules do not need the efficiency overhead of threadsafe\n# code as produced by <threading>multi, and we handle libpthread along with\n# other libraries here. Note: this optimization is based on an assumption that\n# the compiler generates link-compatible code in both the single- and\n# multi-threaded cases, and that system libraries do not change their ABIs\n# either.\n#\n# Returns a list of usage-requirements that link to the necessary system\n# libraries.\n#\nlocal rule system-library-dependencies ( target-os )\n{\n    switch $(target-os)\n    {\n        case s[uo][nl]* : # solaris, sun, sunos\n            # Add a librt dependency for the gcc toolset on SunOS (the sun\n            # toolset adds -lrt unconditionally). While this appears to\n            # duplicate the logic already in gcc.jam, it does not as long as\n            # we are not forcing <threading>multi.\n\n            # On solaris 10, distutils.sysconfig.get_config_var('LIBS') yields\n            # '-lresolv -lsocket -lnsl -lrt -ldl'. However, that does not seem\n            # to be the right list for extension modules. For example, on my\n            # installation, adding -ldl causes at least one test to fail because\n            # the library can not be found and removing it causes no failures.\n\n            # Apparently, though, we need to add -lrt for gcc.\n            return <toolset>gcc:<library>rt ;\n\n        case osf : return  <library>pthread <toolset>gcc:<library>rt ;\n\n        case qnx* : return ;\n        case darwin : return ;\n        case windows : return ;\n        case haiku : return ;\n\n        case hpux : return  <library>rt ;\n        case *bsd : return  <library>pthread <toolset>gcc:<library>util ;\n\n        case aix : return  <library>pthread <library>dl ;\n\n        case * : return  <library>pthread <library>dl\n            <toolset>gcc:<library>util <toolset-intel:platform>linux:<library>util ;\n    }\n}\n\n\n# Define a version suffix for libraries depending on Python.\n# For example, Boost.Python built for Python 2.7 uses the suffix \"27\"\nrule version-suffix ( version )\n{\n    local major-minor = [ split-version $(version) ] ;\n    local suffix = $(major-minor:J=\"\") ;\n    return $(suffix) ;\n}\n\n# Declare a target to represent Python's library.\n#\nlocal rule declare-libpython-target ( version ? : requirements * )\n{\n    # Compute the representation of Python version in the name of Python's\n    # library file.\n    local lib-version = $(version) ;\n    if <target-os>windows in $(requirements)\n    {\n        local major-minor = [ split-version $(version) ] ;\n        lib-version = $(major-minor:J=\"\") ;\n        if <python-debugging>on in $(requirements)\n        {\n            lib-version = $(lib-version)_d ;\n        }\n    }\n\n    if ! $(lib-version)\n    {\n        ECHO *** \"warning:\" could not determine Python version, which will ;\n        ECHO *** \"warning:\" probably prevent us from linking with the python ;\n        ECHO *** \"warning:\" library.  Consider explicitly passing the version ;\n        ECHO *** \"warning:\" to 'using python'. ;\n    }\n\n    # Declare it.\n    lib python.lib : : <name>python$(lib-version) $(requirements) ;\n}\n\n\n# Implementation of init.\nlocal rule configure ( version ? : cmd-or-prefix ? : includes * : libraries ? :\n    condition * : extension-suffix ? )\n{\n    local prefix ;\n    local exec-prefix ;\n    local cmds-to-try ;\n    local interpreter-cmd ;\n\n    local target-os = [ feature.get-values target-os : $(condition) ] ;\n    target-os ?= [ feature.defaults target-os ] ;\n    target-os = $(target-os:G=) ;\n\n    if $(target-os) = windows && <python-debugging>on in $(condition)\n    {\n        extension-suffix ?= _d ;\n    }\n    extension-suffix ?= \"\" ;\n\n    local cmds-to-try ;\n\n    if ! $(cmd-or-prefix) || [ GLOB $(cmd-or-prefix) : * ]\n    {\n        # If the user did not pass a command, whatever we got was a prefix.\n        prefix = $(cmd-or-prefix) ;\n        cmds-to-try = [ candidate-interpreters $(version) : $(prefix) : $(target-os) ] ;\n    }\n    else\n    {\n        # Work with the command the user gave us.\n        cmds-to-try = $(cmd-or-prefix) ;\n\n        # On Windows, do not nail down the interpreter command just yet in case\n        # the user specified something that turns out to be a cygwin symlink,\n        # which could bring down bjam if we invoke it.\n        if $(target-os) != windows\n        {\n            interpreter-cmd = $(cmd-or-prefix) ;\n        }\n    }\n\n    # Values to use in case we can not really find anything in the system.\n    local fallback-cmd = $(cmds-to-try[1]) ;\n    local fallback-version ;\n\n    # Anything left to find or check?\n    if ! ( $(interpreter-cmd) && $(version) && $(includes) && $(libraries) )\n    {\n        # Values to be extracted from python's sys module. These will be set by\n        # the probe rule, above, using Jam's dynamic scoping.\n        local sys-elements = version platform prefix exec_prefix executable ;\n        local sys.$(sys-elements) ;\n\n        # Compute the string Python's sys.platform needs to match. If not\n        # targeting Windows or cygwin we will assume only native builds can\n        # possibly run, so we will not require a match and we leave sys.platform\n        # blank.\n        local platform ;\n        switch $(target-os)\n        {\n            case windows : platform = win32 ;\n            case cygwin : platform = cygwin ;\n        }\n\n        while $(cmds-to-try)\n        {\n            # Pop top command.\n            local cmd = $(cmds-to-try[1]) ;\n            cmds-to-try = $(cmds-to-try[2-]) ;\n\n            debug-message Checking interpreter command \\\"$(cmd)\\\"... ;\n            if [ probe $(cmd) ]\n            {\n                fallback-version ?= $(sys.version) ;\n\n                # Check for version/platform validity.\n                for local x in version platform\n                {\n                    if $($(x)) && $($(x)) != $(sys.$(x))\n                    {\n                        debug-message ...$(x) \"mismatch (looking for\"\n                            $($(x)) but found $(sys.$(x))\")\" ;\n                        cmd = ;\n                    }\n                }\n\n                if $(cmd)\n                {\n                    debug-message ...requested configuration matched! ;\n\n                    exec-prefix = $(sys.exec_prefix) ;\n\n                    compute-default-paths $(target-os) : $(sys.version) :\n                        $(sys.prefix) : $(sys.exec_prefix) ;\n\n                    version = $(sys.version) ;\n                    interpreter-cmd ?= $(cmd) ;\n                    cmds-to-try = ;  # All done.\n                }\n            }\n            else\n            {\n                debug-message ...does not invoke a working interpreter ;\n            }\n        }\n    }\n\n    # Check whether configuration succeeded.\n    if ! ( $(includes) && $(libraries) )\n    {\n        debug-message Python headers and libraries not found. ;\n        return ;\n    }\n    \n    .configured = true ;\n\n    if ! $(interpreter-cmd)\n    {\n        fallback-cmd ?= python ;\n        debug-message No working Python interpreter found. ;\n        if [ os.name ] != NT || ! [ invokes-cygwin-symlink $(fallback-cmd) ]\n        {\n            interpreter-cmd = $(fallback-cmd) ;\n            debug-message falling back to \\\"$(interpreter-cmd)\\\" ;\n        }\n    }\n\n    includes = [ path-to-native $(includes) ] ;\n    libraries = [ path-to-native $(libraries) ] ;\n\n    debug-message \"Details of this Python configuration:\" ;\n    debug-message \"  interpreter command:\" \\\"$(interpreter-cmd:E=<empty>)\\\" ;\n    debug-message \"  include path:\" \\\"$(includes:E=<empty>)\\\" ;\n    debug-message \"  library path:\" \\\"$(libraries:E=<empty>)\\\" ;\n    if $(target-os) = windows\n    {\n        debug-message \"  DLL search path:\" \\\"$(exec-prefix:E=<empty>)\\\" ;\n    }\n\n    #\n    # Discover the presence of NumPy\n    #\n    debug-message \"Checking for NumPy...\" ;\n    local full-cmd = \"import sys; sys.stderr = sys.stdout; import numpy; print(numpy.get_include())\" ;\n    local full-cmd = $(interpreter-cmd)\" -c \\\"$(full-cmd)\\\"\" ;\n    debug-message \"running command '$(full-cmd)'\" ;\n    local result = [ SHELL $(full-cmd) : strip-eol : exit-status ] ;\n    if $(result[2]) = 0\n    {\n        .numpy = true ;\n        .numpy-include = $(result[1]) ;\n        debug-message \"NumPy enabled\" ;\n    }\n    else\n    {\n        debug-message \"NumPy disabled. Reason:\" ;\n        debug-message \"  $(full-cmd) aborted with \" ;\n        debug-message \"  $(result[1])\" ;\n    }\n\n    #\n    # End autoconfiguration sequence.\n    #\n    \n    # Normalize and dissect any version number.\n    local major-minor ;\n    if $(version)\n    {\n        major-minor = [ split-version $(version) ] ;\n        version = $(major-minor:J=.) ;\n    }\n    \n    \n    local target-requirements = $(condition) ;\n\n    # Add the version, if any, to the target requirements.\n    if $(version)\n    {\n        if ! $(version) in [ feature.values python ]\n        {\n            feature.extend python : $(version) ;\n            py$(major-minor[1])-version ?= $(version) ;\n            if $(py$(major-minor[1])-version) < $(version)\n            {\n                py$(major-minor[1])-version = $(version) ;\n            }\n        }\n        target-requirements += <python>$(version:E=default) ;\n    }\n\n    target-requirements += <target-os>$(target-os) ;\n\n    # See if we can find a framework directory on darwin.\n    local framework-directory ;\n    if $(target-os) = darwin\n    {\n        # Search upward for the framework directory.\n        local framework-directory = $(libraries[-1]) ;\n        while $(framework-directory:D=) && $(framework-directory:D=) != Python.framework\n        {\n            framework-directory = $(framework-directory:D) ;\n        }\n\n        if $(framework-directory:D=) = Python.framework\n        {\n            debug-message framework directory is \\\"$(framework-directory)\\\" ;\n        }\n        else\n        {\n            debug-message \"no framework directory found; using library path\" ;\n            framework-directory = ;\n        }\n    }\n\n    local dll-path = $(libraries) ;\n\n    # Make sure that we can find the Python DLL on Windows.\n    if ( $(target-os) = windows ) && $(exec-prefix)\n    {\n        dll-path += $(exec-prefix) ;\n    }\n\n    #\n    # Prepare usage requirements.\n    #\n    local usage-requirements = [ system-library-dependencies $(target-os) ] ;\n    usage-requirements += <include>$(includes) <python.interpreter>$(interpreter-cmd) ;\n    if <python-debugging>on in $(condition)\n    {\n        if $(target-os) = windows\n        {\n            # In pyconfig.h, Py_DEBUG is set if _DEBUG is set. If we define\n            # Py_DEBUG we will get multiple definition warnings.\n            usage-requirements += <define>_DEBUG ;\n        }\n        else\n        {\n            usage-requirements += <define>Py_DEBUG ;\n        }\n    }\n\n    # In case we added duplicate requirements from what the user specified.\n    target-requirements = [ sequence.unique $(target-requirements) ] ;\n\n    # Global, but conditional, requirements to give access to the interpreter\n    # for general utilities, like other toolsets, that run Python scripts.\n    toolset.add-requirements\n        \"$(target-requirements:J=,):<python.interpreter>$(interpreter-cmd)\" ;\n\n    # Register the right suffix for extensions.\n    register-extension-suffix $(extension-suffix) : $(target-requirements) ;\n\n    #\n    # Declare the \"python\" target. This should really be called\n    # python_for_embedding.\n    #\n\n    if $(framework-directory)\n    {\n        alias python\n          :\n          : $(target-requirements)\n          :\n          : $(usage-requirements) <framework>$(framework-directory)\n          ;\n    }\n    else\n    {\n        declare-libpython-target $(version) : $(target-requirements) ;\n\n        # This is an evil hack.  On, Windows, when Python is embedded, nothing\n        # seems to set up sys.path to include Python's standard library\n        # (http://article.gmane.org/gmane.comp.python.general/544986). The evil\n        # here, aside from the workaround necessitated by Python's bug, is that:\n        #\n        # a. we're guessing the location of the python standard library from the\n        #    location of pythonXX.lib\n        #\n        # b. we're hijacking the <testing.launcher> property to get the\n        #    environment variable set up, and the user may want to use it for\n        #    something else (e.g. launch the debugger).\n        local set-PYTHONPATH ;\n        if $(target-os) = windows\n        {\n            set-PYTHONPATH = [ common.prepend-path-variable-command PYTHONPATH :\n                $(libraries:D)/Lib ] ;\n        }\n\n        alias python\n          :\n          : $(target-requirements)\n          :\n            # Why python.lib must be listed here instead of along with the\n            # system libs is a mystery, but if we do not do it, on cygwin,\n            # -lpythonX.Y never appears in the command line (although it does on\n            # linux).\n          : $(usage-requirements)\n            <testing.launcher>$(set-PYTHONPATH)\n              <library-path>$(libraries) <dll-path>$(dll-path) <library>python.lib\n          ;\n    }\n\n    # On *nix, we do not want to link either Boost.Python or Python extensions\n    # to libpython, because the Python interpreter itself provides all those\n    # symbols. If we linked to libpython, we would get duplicate symbols. So\n    # declare two targets -- one for building extensions and another for\n    # embedding.\n    if $(target-os) in windows cygwin\n    {\n        alias python_for_extensions : python : $(target-requirements) ;\n    }\n    else if $(target-os) = darwin {\n        alias python_for_extensions\n            :\n            : $(target-requirements)\n            :\n            : $(usage-requirements) <linkflags>\"-undefined dynamic_lookup\"\n            ;\n    }\n    # On AIX we need Python extensions and Boost.Python to import symbols from\n    # the Python interpreter. Dynamic libraries opened with dlopen() do not\n    # inherit the symbols from the Python interpreter.\n    else if $(target-os) = aix\n    {\n        alias python_for_extensions\n            :\n            : $(target-requirements)\n            :\n            : $(usage-requirements) <linkflags>\"-Wl,-bI:$(libraries[1])/python.exp\"\n            ;\n    }\n    else\n    {\n        alias python_for_extensions\n            :\n            : $(target-requirements)\n            :\n            : $(usage-requirements)\n            ;\n    }\n    \n}\n\n# Conditional rule specification that will prevent building of a target\n# if there is no matching python configuration available with the given\n# required properties.\nrule require-py ( properties * )\n{\n    local py-ext-target = [ $(.project).find python_for_extensions : no-error ] ;\n    if ! $(py-ext-target)\n    {\n        return <build>no ;\n    }\n    local property-set = [ property-set.create $(properties) ] ;\n    property-set = [ $(property-set).expand ] ;\n    local py-ext-alternative = [ $(py-ext-target).select-alternatives $(property-set) ] ;\n    if ! $(py-ext-alternative)\n    {\n        return <build>no ;\n    }\n}\n\n\nrule configured ( )\n{\n     return $(.configured) ;\n}\n\nrule numpy ( )\n{\n     return $(.numpy) ;\n}\n\nrule numpy-include ( )\n{\n     return $(.numpy-include) ;\n}\n\n\ntype.register PYTHON_EXTENSION : : SHARED_LIB ;\n\n\nlocal rule register-extension-suffix ( root : condition * )\n{\n    local suffix ;\n\n    switch [ feature.get-values target-os : $(condition) ]\n    {\n        case windows : suffix = pyd ;\n        case cygwin : suffix = dll ;\n        case hpux :\n        {\n            if [ feature.get-values python : $(condition) ] in 1.5 1.6 2.0 2.1 2.2 2.3 2.4\n            {\n                suffix = sl ;\n            }\n            else\n            {\n                suffix = so ;\n            }\n        }\n        case * : suffix = so ;\n    }\n\n    type.set-generated-target-suffix PYTHON_EXTENSION : $(condition) : <$(root).$(suffix)> ;\n}\n\n\n# Unset 'lib' prefix for PYTHON_EXTENSION\ntype.set-generated-target-prefix PYTHON_EXTENSION : : \"\" ;\n\n\nrule python-extension ( name : sources * : requirements * : default-build * :\n                        usage-requirements * )\n{\n    if [ configured ]\n    {\n        requirements += <use>/python//python_for_extensions ;\n    }\n    requirements += <suppress-import-lib>true ;\n\n    local project = [ project.current ] ;\n\n    targets.main-target-alternative\n        [ new typed-target $(name) : $(project) : PYTHON_EXTENSION\n            : [ targets.main-target-sources $(sources) : $(name) ]\n            : [ targets.main-target-requirements $(requirements) : $(project) ]\n            : [ targets.main-target-default-build $(default-build) : $(project) ]\n        ] ;\n}\n\nIMPORT python : python-extension : : python-extension ;\n\n# Support for testing.\ntype.register PY : py ;\ntype.register RUN_PYD_OUTPUT ;\ntype.register RUN_PYD : : TEST ;\n\n\nclass python-test-generator : generator\n{\n    import set ;\n\n    rule __init__ ( * : * )\n    {\n        generator.__init__ $(1) : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) : $(9) ;\n        self.composing = true ;\n    }\n\n    rule run ( project name ? : property-set : sources * : multiple ? )\n    {\n        local pyversion = [ $(property-set).get <python> ] ;\n        local python ;\n        local other-pythons ;\n\n        for local s in $(sources)\n        {\n            if [ $(s).type ] = PY\n            {\n                if ! $(python)\n                {\n                    # First Python source ends up on command line.\n                    python = $(s) ;\n\n                }\n                else\n                {\n                    # Other Python sources become dependencies.\n                    other-pythons += $(s) ;\n                }\n            }\n        }\n\n        local extensions ;\n        for local s in $(sources)\n        {\n            if [ $(s).type ] = PYTHON_EXTENSION\n            {\n                extensions += $(s) ;\n            }\n        }\n\n        local libs ;\n        for local s in $(sources)\n        {\n            if [ type.is-derived [ $(s).type ] LIB ]\n              && ! $(s) in $(extensions)\n            {\n                libs += $(s) ;\n            }\n        }\n\n        local new-sources ;\n        for local s in $(sources)\n        {\n            if [ type.is-derived [ $(s).type ] CPP ]\n            {\n                local name = [ utility.basename [ $(s).name ] ] ;\n                if $(name) = [ utility.basename [ $(python).name ] ]\n                {\n                    name = $(name)_ext ;\n                }\n                local extension = [ generators.construct $(project) $(name) :\n                  PYTHON_EXTENSION : $(property-set) : $(s) $(libs) ] ;\n\n                # The important part of usage requirements returned from\n                # PYTHON_EXTENSION generator are xdll-path properties that will\n                # allow us to find the python extension at runtime.\n                property-set = [ $(property-set).add $(extension[1]) ] ;\n\n                # Ignore usage requirements. We're a top-level generator and\n                # nobody is going to use what we generate.\n                new-sources += $(extension[2-]) ;\n            }\n        }\n\n        property-set = [ $(property-set).add-raw <dependency>$(other-pythons) ] ;\n\n        return [ construct-result $(python) $(extensions) $(new-sources) :\n            $(project) $(name) : $(property-set) ] ;\n    }\n}\n\n\ngenerators.register\n  [ new python-test-generator python.capture-output : : RUN_PYD_OUTPUT ] ;\n\ngenerators.register-standard testing.expect-success\n  : RUN_PYD_OUTPUT : RUN_PYD ;\n\n\n# There are two different ways of spelling OS names. One is used for [ os.name ]\n# and the other is used for the <host-os> and <target-os> properties. Until that\n# is remedied, this sets up a crude mapping from the latter to the former, that\n# will work *for the purposes of cygwin/NT cross-builds only*. Could not think\n# of a better name than \"translate\".\n#\n.translate-os-windows = NT ;\n.translate-os-cygwin = CYGWIN ;\nlocal rule translate-os ( src-os )\n{\n    local x = $(.translate-os-$(src-os)) [ os.name ] ;\n    return $(x[1]) ;\n}\n\n\n# Extract the path to a single \".pyd\" source. This is used to build the\n# PYTHONPATH for running bpl tests.\n#\nlocal rule pyd-pythonpath ( source )\n{\n    return [ on $(source) return $(LOCATE) $(SEARCH) ] ;\n}\n\n\n# The flag settings on testing.capture-output do not apply to python.capture\n# output at the moment. Redo this explicitly.\ntoolset.flags python.capture-output ARGS <testing.arg> ;\ntoolset.flags python.capture-output INPUT_FILES <testing.input-file> ;\n\ntoolset.uses-features python.capture-output :\n    <testing.launcher> <testing.execute> <dll-path> <xdll-path> <target-os>\n    <pythonpath> ;\n\nrule capture-output ( target : sources * : properties * )\n{\n    # Setup up a proper DLL search path. Here, $(sources[1]) is a python module\n    # and $(sources[2]) is a DLL. Only $(sources[1]) is passed to\n    # testing.capture-output, so RUN_PATH variable on $(sources[2]) is not\n    # consulted. Move it over explicitly.\n    RUN_PATH on $(sources[1]) = [ on $(sources[2-]) return $(RUN_PATH) ] ;\n\n    PYTHONPATH  = [ sequence.transform pyd-pythonpath : $(sources[2-]) ] ;\n    PYTHONPATH += [ feature.get-values pythonpath : $(properties) ] ;\n\n    # After test is run, we remove the Python module, but not the Python script.\n    testing.capture-output $(target) : $(sources[1]) : $(properties) ;\n\n    # PYTHONPATH is different; it will be interpreted by whichever Python is\n    # invoked and so must follow path rules for the target os. The only OSes\n    # where we can run python for other OSes currently are NT and CYGWIN so we\n    # only need to handle those cases.\n    local target-os = [ feature.get-values target-os : $(properties) ] ;\n    # Oddly, host-os is not in properties, so grab the default value.\n    local host-os = [ feature.defaults host-os ] ;\n    host-os = $(host-os:G=) ;\n    if $(target-os) != $(host-os) && $(target-os) in windows cygwin && $(host-os) in windows cygwin\n    {\n        PYTHONPATH = [ sequence.transform $(host-os)-to-$(target-os)-path :\n            $(PYTHONPATH) ] ;\n    }\n    local path-separator = [ os.path-separator [ translate-os $(target-os) ] ] ;\n    local set-PYTHONPATH = [ common.variable-setting-command PYTHONPATH :\n        $(PYTHONPATH:E=:J=$(path-separator)) ] ;\n    LAUNCHER on $(target) = $(set-PYTHONPATH) [ on $(target) return \\\"$(PYTHON)\\\" ] ;\n}\n\n\nrule bpl-test ( name : sources * : requirements * )\n{\n    local s ;\n    sources ?= $(name).py $(name).cpp ;\n    return [ testing.make-test run-pyd : $(sources) /boost/python//boost_python\n        : $(requirements) : $(name) ] ;\n}\n\n# The same as bpl-test but additionally require (and link to) boost_numpy.\n# Masked whenever NumPy is not enabled.\nrule numpy-test ( name : sources * : requirements * )\n{\n    numpy-include = [ python.numpy-include ] ;\n    # yuk !\n    if ! $(.numpy) { requirements += <build>no ; }\n    sources ?= $(name).py $(name).cpp ;\n    name = [ regex.replace $(name) \"[/]\" \"~\" ] ;\n    return [ testing.make-test run-pyd\n        : $(sources) /boost/python//boost_numpy /boost/python//boost_python\n        : $(requirements) <include>$(numpy-include)\n        : $(name) ] ;\n}\n\nrule py-version ( n )\n{\n    return $(py$(n)-version) ;\n}\n\nIMPORT $(__name__) : bpl-test : : bpl-test ;\nIMPORT $(__name__) : numpy-test : : numpy-test ;\nIMPORT $(__name__) : py-version : : py-version ;\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/thread/changes.html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\">\n<title>History</title>\n<link rel=\"stylesheet\" href=\"../../../doc/src/boostbook.css\" type=\"text/css\">\n<meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.79.1\">\n<link rel=\"home\" href=\"../index.html\" title=\"The Boost C++ Libraries BoostBook Documentation Subset\">\n<link rel=\"up\" href=\"../thread.html\" title=\"Chapter&#160;39.&#160;Thread 4.8.0\">\n<link rel=\"prev\" href=\"build.html\" title=\"Using and building the library\">\n<link rel=\"next\" href=\"future.html\" title=\"Future\">\n</head>\n<body bgcolor=\"white\" text=\"black\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\">\n<table cellpadding=\"2\" width=\"100%\"><tr>\n<td valign=\"top\"><img alt=\"Boost C++ Libraries\" width=\"277\" height=\"86\" src=\"../../../boost.png\"></td>\n<td align=\"center\"><a href=\"../../../index.html\">Home</a></td>\n<td align=\"center\"><a href=\"../../../libs/libraries.htm\">Libraries</a></td>\n<td align=\"center\"><a href=\"http://www.boost.org/users/people.html\">People</a></td>\n<td align=\"center\"><a href=\"http://www.boost.org/users/faq.html\">FAQ</a></td>\n<td align=\"center\"><a href=\"../../../more/index.htm\">More</a></td>\n</tr></table>\n<hr>\n<div class=\"spirit-nav\">\n<a accesskey=\"p\" href=\"build.html\"><img src=\"../../../doc/src/images/prev.png\" alt=\"Prev\"></a><a accesskey=\"u\" href=\"../thread.html\"><img src=\"../../../doc/src/images/up.png\" alt=\"Up\"></a><a accesskey=\"h\" href=\"../index.html\"><img src=\"../../../doc/src/images/home.png\" alt=\"Home\"></a><a accesskey=\"n\" href=\"future.html\"><img src=\"../../../doc/src/images/next.png\" alt=\"Next\"></a>\n</div>\n<div class=\"section\">\n<div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\">\n<a name=\"thread.changes\"></a><a class=\"link\" href=\"changes.html\" title=\"History\">History</a>\n</h2></div></div></div>\n<h4>\n<a name=\"thread.changes.h0\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_8_0___boost_1_66\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_8_0___boost_1_66\">Version\n      4.8.0 - boost 1.66</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Know Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3926\" target=\"_top\">#3926</a>\n          thread_specific_ptr + dlopen library causes a SIGSEGV.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10964\" target=\"_top\">#10964</a>\n          future&lt;future&lt;T&gt;&gt;::unwrap().then() Deadlocks\n        </li>\n</ul></div>\n<p>\n      Please take a look at <a href=\"https://svn.boost.org/trac/boost/query?status=assigned&amp;status=new&amp;status=reopened&amp;component=thread&amp;type=!Feature+Requests&amp;col=id&amp;col=summary&amp;order=id\" target=\"_top\">thread\n      Know Bugs</a> to see the current state.\n    </p>\n<p>\n      Please take a look at <a href=\"http://www.boost.org/development/tests/master/developer/thread.html\" target=\"_top\">thread\n      master regression test</a> to see the last regression test snapshot.\n    </p>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12323\" target=\"_top\">#12323</a>\n          windows - boost/thread/win32/mfc_thread_init.hpp has wrong signature for\n          _pRawDllMainOrig\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12730\" target=\"_top\">#12730</a>\n          windows - static threads library is incompatible with MSVC 2017 RC\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12976\" target=\"_top\">#12976</a>\n          Boost Thread Executors documentation mistakes\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12949\" target=\"_top\">#12949</a>\n          using sleep_for in a thread context without including boost/thread/thread.hpp\n          yields incorrect behaviour when BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC\n          is defined\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/13019\" target=\"_top\">#13019</a>\n          ABI compatibility for BOOST_THREAD_PROVIDES_INTERRUPTIONS incomplete\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/13069\" target=\"_top\">#13069</a>\n          Boost unit test \"sync_pq_multi_thread_p_lib.exe\" hung in thread\n          library\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/13163\" target=\"_top\">#13163</a>\n          boost::detail::heap_new does not have a variadic variant\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/13226\" target=\"_top\">#13226</a>\n          getpagesize() is deprecated since 199506L\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/132\" target=\"_top\">#132</a>\n          VS 2017.4 Preview deadlocks on Test 10964\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/133\" target=\"_top\">#133</a>\n          windows - Spurious timing test failures on windows\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/134\" target=\"_top\">#134</a>\n          VS 2017.4 Preview deadlock in sync_pq_multi_thread_p_lib.exe\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/135\" target=\"_top\">#135</a>\n          VS 2017.4 Preview test_scheduled_tp_p.exe deadlock\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/136\" target=\"_top\">#136</a>\n          VS 2017.4 Preview test_scheduler_p.exe deadlock\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/137\" target=\"_top\">#137</a>\n          VS 2017.4 Preview executor_ex.exe deadlock\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/143\" target=\"_top\">#143</a>\n          Failures on msvc-12.0\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/145\" target=\"_top\">#145</a>\n          Clang build error with BOOST_THREAD_ATTRIBUTE_MAY_ALIAS\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>New Experimental Features:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/116\" target=\"_top\">#116</a>\n          [Proposal] Add APIs for deferred set_value/exception\n        </li></ul></div>\n<h4>\n<a name=\"thread.changes.h1\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_7_5___boost_1_65_1\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_7_5___boost_1_65_1\">Version\n      4.7.5 - boost 1.65.1</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/130\" target=\"_top\">#130</a>\n          windows: Bug in boost::condition_variable on Windows\n        </li></ul></div>\n<h4>\n<a name=\"thread.changes.h2\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_7_4___boost_1_65\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_7_4___boost_1_65\">Version\n      4.7.4 - boost 1.65</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6787\" target=\"_top\">#6787</a>\n          boost::thread::sleep() hangs if system time is rolled back\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12519\" target=\"_top\">#12519</a>\n          boost::thread::try_join_for does not return after timeout\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12874\" target=\"_top\">#12874</a>\n          future&lt;&gt; extension constructor must be under BOOST_THREAD_PROVIDES_FUTURE_UNWRAP\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12888\" target=\"_top\">#12888</a>\n          Linking with boost thread does not work on mingw/gcc 4.4\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12958\" target=\"_top\">#12958</a>\n          sync_bounded_queue::wait_pull_front( lve ) might throw\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/13077\" target=\"_top\">#13077</a>\n          Linking to static 64bit libboost_thread fails DLL initialization\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/13155\" target=\"_top\">#13155</a>\n          log doesn't build on a system with pthreads\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/121\" target=\"_top\">#121</a>\n          on_tls_prepare is broken under VS2017\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h3\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_7_3___boost_1_64\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_7_3___boost_1_64\">Version\n      4.7.3 - boost 1.64</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/113\" target=\"_top\">#113</a>\n          Add a Thread template on all the scoped thread and thread guard classes\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/117\" target=\"_top\">#117</a>\n          loop_executor should block on it's work_queue instead of polling\n        </li>\n<li class=\"listitem\">\n          <a href=\"https://github.com/boostorg/thread/issues/119\" target=\"_top\">#119</a>\n          basic_condition_variable::relocker::~relocker can throw an exception\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h4\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_7_2___boost_1_63\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_7_2___boost_1_63\">Version\n      4.7.2 - boost 1.63</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          fix boost::synchronized_value&lt;&gt;::load()\n        </li>\n<li class=\"listitem\">\n          fix relational operators of boost::synchronized_value&lt;&gt;\n        </li>\n<li class=\"listitem\">\n          fix compile failed with boost::user_scheduler\n        </li>\n<li class=\"listitem\">\n          Fix minor possibility of loosing the notify\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h5\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_7_1___boost_1_62\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_7_1___boost_1_62\">Version\n      4.7.1 - boost 1.62</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Know Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3926\" target=\"_top\">#3926</a>\n          thread_specific_ptr + dlopen library causes a SIGSEGV.\n        </li></ul></div>\n<p>\n      Please define BOOST_THREAD_PATCH to apply the patch that could unfortunately\n      results is a regression as described in <a href=\"http://svn.boost.org/trac/boost/ticket/12049\" target=\"_top\">#12049</a>.\n    </p>\n<p>\n      Please take a look at <a href=\"https://svn.boost.org/trac/boost/query?status=assigned&amp;status=new&amp;status=reopened&amp;component=thread&amp;type=!Feature+Requests&amp;col=id&amp;col=summary&amp;order=id\" target=\"_top\">thread\n      Know Bugs</a> to see the current state.\n    </p>\n<p>\n      Please take a look at <a href=\"http://www.boost.org/development/tests/master/developer/thread.html\" target=\"_top\">thread\n      master regression test</a> to see the last regression test snapshot.\n    </p>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11097\" target=\"_top\">#11097</a>\n          test_scheduled_tp - ThreadSanitizer: heap-use-after-free\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11951\" target=\"_top\">#11951</a>\n          Memory leak in boost::when_all\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12102\" target=\"_top\">#12102</a>\n          condition_variable_fwd.hpp fails to compile when BOOST_THREAD_PROVIDES_INTERRUPTIONS\n          is disabled\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12120\" target=\"_top\">#12120</a>\n          Performance improvement in thread/barrier.hpp\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12146\" target=\"_top\">#12146</a>\n          make_exceptional_future is not mentioned in the docs\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12202\" target=\"_top\">#12202</a>\n          shared_lock should be in shared_mutex header\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12220\" target=\"_top\">#12220</a>\n          Memory leak in future::then()\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12293\" target=\"_top\">#12293</a>\n          boost::future::then lambda called before future is ready.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12350\" target=\"_top\">#12350</a>\n          shared_mutex (pthreads) unlocked too early in unlock_shared()\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12371\" target=\"_top\">#12371</a>\n          boost thread/future.hpp fails to build\n        </li>\n</ul></div>\n<p>\n      and several PR\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          #88 fix typos in boost::upgrade_lock\n        </li>\n<li class=\"listitem\">\n          #89 fix a bug in upgrade_to_unique_lock&lt;&gt;::operator=()\n        </li>\n<li class=\"listitem\">\n          #90 fix a bug in try_lock_wrapper&lt;&gt;::operator=()\n        </li>\n<li class=\"listitem\">\n          #91 Add shared_lock_guard to the included lock types\n        </li>\n<li class=\"listitem\">\n          #92 Fixed compilation with MSVC-8.\n        </li>\n<li class=\"listitem\">\n          #93 Fix variable shadowing warnings (Clang)\n        </li>\n<li class=\"listitem\">\n          #94 fix bugs in boost::barrier\n        </li>\n<li class=\"listitem\">\n          #95 fix a mistake in boost::completion_latch\n        </li>\n<li class=\"listitem\">\n          #96 rename async_func.hpp to invoker.hpp.\n        </li>\n<li class=\"listitem\">\n          #97 fix a mistake in sync_timed_queue&lt;&gt;::pull_until()\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h6\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_7_0___boost_1_61\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_7_0___boost_1_61\">Version\n      4.7.0 - boost 1.61</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Know Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3926\" target=\"_top\">#3926</a>\n          thread_specific_ptr + dlopen library causes a SIGSEGV.\n        </li></ul></div>\n<p>\n      Please define BOOST_THREAD_PATCH to apply the patch that could unfortunately\n      results is a regression as described in <a href=\"http://svn.boost.org/trac/boost/ticket/12049\" target=\"_top\">#12049</a>.\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4833\" target=\"_top\">#4833</a>\n          MinGW/test_tss_lib: Support of automatic tss cleanup for native threading\n          API not available\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8600\" target=\"_top\">#8600</a>\n          wait_for_any hangs, if called with multiple copies of shared_future referencing\n          same task\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9118\" target=\"_top\">#9118</a>\n          Seg fault on thread join when llvm and libc++ are used\n        </li>\n</ul></div>\n<p>\n      Please take a look at <a href=\"https://svn.boost.org/trac/boost/query?status=assigned&amp;status=new&amp;status=reopened&amp;component=thread&amp;type=!Feature+Requests&amp;col=id&amp;col=summary&amp;order=id\" target=\"_top\">thread\n      Know Bugs</a> to see the current state.\n    </p>\n<p>\n      Please take a look at <a href=\"http://www.boost.org/development/tests/master/developer/thread.html\" target=\"_top\">thread\n      trunk regression test</a> to see the last regression test snapshot.\n    </p>\n<p>\n      <span class=\"bold\"><strong>New Experimental Features:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11772\" target=\"_top\">#11772</a>\n          Add a launch::sync policy\n        </li></ul></div>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11494\" target=\"_top\">#11494</a>\n          boost::this_thread::yield() is marked as deprecated in the synopsis\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11562\" target=\"_top\">#11562</a>\n          (condition_variable_any::wait_until + recursive_mutex + steady_clock) timer\n          expires after computer time is set forward on Ubuntu 64-bit\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12013\" target=\"_top\">#12013</a>\n          F_pass and FArgs_pass tests segfault\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12036\" target=\"_top\">#12036</a>\n          boost::physical_concurrency always returns 0 if BOOST_USE_WINAPI_VERSION\n          is not defined\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h7\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_6_0___boost_1_60\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_6_0___boost_1_60\">Version\n      4.6.0 - boost 1.60</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Know Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4833\" target=\"_top\">#4833</a>\n          MinGW/test_tss_lib: Support of automatic tss cleanup for native threading\n          API not available\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8600\" target=\"_top\">#8600</a>\n          wait_for_any hangs, if called with multiple copies of shared_future referencing\n          same task\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9118\" target=\"_top\">#9118</a>\n          Seg fault on thread join when llvm and libc++ are used\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10942\" target=\"_top\">#10942</a>\n          Boost.Thread fails to build on Cygwin.\n        </li>\n</ul></div>\n<p>\n      Please take a look at <a href=\"https://svn.boost.org/trac/boost/query?status=assigned&amp;status=new&amp;status=reopened&amp;component=thread&amp;type=!Feature+Requests&amp;col=id&amp;col=summary&amp;order=id\" target=\"_top\">thread\n      Know Bugs</a> to see the current state.\n    </p>\n<p>\n      Please take a look at <a href=\"http://www.boost.org/development/tests/master/developer/thread.html\" target=\"_top\">thread\n      trunk regression test</a> to see the last regression test snapshot.\n    </p>\n<p>\n      <span class=\"bold\"><strong>New Experimental Features:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11231\" target=\"_top\">#11231</a>\n          Allow to set continuation future's destructor behavior to non-blocking\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11424\" target=\"_top\">#11424</a>\n          Provide shared_timed_mutex as an alternative name for shared_mutex and\n          deprecate the use of shared_mutex as a timed mutex\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11734\" target=\"_top\">#11734</a>\n          future::then(Cont) should be able to execute the continuation on undetermined\n          thread\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11736\" target=\"_top\">#11736</a>\n          Allow to use launch::executor on future::then(launch::executor, cont)\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11737\" target=\"_top\">#11737</a>\n          Add a launch::inherit policy that can be used on ::then() to use the policy\n          of the parent future\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6377\" target=\"_top\">#6377</a>\n          Condition variable blocks when changing time\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6787\" target=\"_top\">#6787</a>\n          boost::thread::sleep() hangs if system time is rolled back\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7665\" target=\"_top\">#7665</a>\n          this_thread::sleep_for no longer uses steady_clock in thread\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7720\" target=\"_top\">#7720</a>\n          exception lock_error while intensive locking/unlocking of mutex\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9309\" target=\"_top\">#9309</a>\n          test_latch fails often on clang-darwin-tot11\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10788\" target=\"_top\">#10788</a>\n          GetLogicalProcessor isn't available for Windows platform less or equals\n          to 0x0502\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11090\" target=\"_top\">#11090</a>\n          ex_future_unwrap- ThreadSanitizer: lock-order-inversion (potential deadlock)\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11158\" target=\"_top\">#11158</a>\n          Pthread thread deadlock when faketime used\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11174\" target=\"_top\">#11174</a>\n          boost::condition_variable::timed_wait with predicate unexpectedly wakes\n          up while should wait infinite\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11185\" target=\"_top\">#11185</a>\n          Incorrect URL redirection\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11192\" target=\"_top\">#11192</a>\n          boost::future&lt;&gt;::then() with an executor doesn't compile when the\n          callback returns a future\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11250\" target=\"_top\">#11250</a>\n          future made from make_exceptional fails on assertion in destructor\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11256\" target=\"_top\">#11256</a>\n          future&lt;&gt;::is_ready() == false in continuation function\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11261\" target=\"_top\">#11261</a>\n          bad use of scoped threads in basic_thread_pool\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11262\" target=\"_top\">#11262</a>\n          bad use of direct pointer in shared_state_nullary_task\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11263\" target=\"_top\">#11263</a>\n          lock already locked lock\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11266\" target=\"_top\">#11266</a>\n          boost::packaged_task has invalid variadic signature\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11302\" target=\"_top\">#11302</a>\n          boost thread doesn't build with BOOST_THREAD_PATCH.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11322\" target=\"_top\">#11322</a>\n          sleep_for() nanoseconds overload will always return too early on windows\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11329\" target=\"_top\">#11329</a>\n          using declarative for GetProcessHeap, .... fails\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11368\" target=\"_top\">#11368</a>\n          boost thread's usage of CreateWaitableTimer wakes PC from sleep (doh)\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11377\" target=\"_top\">#11377</a>\n          Boost condition variable always waits for system clock deadline\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11435\" target=\"_top\">#11435</a>\n          gcc compiler warning in future.hpp\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11555\" target=\"_top\">#11555</a>\n          devector.hpp assumes allocator_traits_type is always present\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11562\" target=\"_top\">#11562</a>\n          (condition_variable_any::wait_until + recursive_mutex + steady_clock) timer\n          expires after computer time is set forward on Ubuntu 64-bit\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11672\" target=\"_top\">#11672</a>\n          Thread: Should use unique_ptr, not auto_ptr\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11688\" target=\"_top\">#11688</a>\n          thread::try_join_until: Avoid busy wait if system clock changes\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11672\" target=\"_top\">#11716</a>\n          ::then(f) should inherit the parent Executor\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11795\" target=\"_top\">#11795</a>\n          Incorrect version specification for documentation of thread destructor\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11796\" target=\"_top\">#11796</a>\n          Thread move assignment operator, does not detach previous thread data\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11817\" target=\"_top\">#11817</a>\n          'sync_queue_is_closed' was not declared in boost/thread/executors/thread_executor.hpp\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11818\" target=\"_top\">#11818</a>\n          future.then will be blocked if promise is set after the invocation of then\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/12049\" target=\"_top\">#12049</a>\n          Assertion failure from detached threads during shutdown\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h8\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_5_0___boost_1_58\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_5_0___boost_1_58\">Version\n      4.5.0 - boost 1.58</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Know Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3926\" target=\"_top\">#3926</a>\n          thread_specific_ptr + dlopen library causes a SIGSEGV.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4833\" target=\"_top\">#4833</a>\n          MinGW/test_tss_lib: Support of automatic tss cleanup for native threading\n          API not available\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8600\" target=\"_top\">#8600</a>\n          wait_for_any hangs, if called with multiple copies of shared_future referencing\n          same task\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9118\" target=\"_top\">#9118</a>\n          Seg fault on thread join when llvm and libc++ are used\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9309\" target=\"_top\">#9309</a>\n          test_latch fails often on clang-darwin-tot11\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9311\" target=\"_top\">#9311</a>\n          ex_lambda_future fails on msvc-11.0\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10942\" target=\"_top\">#10942</a>\n          Boost.Thread fails to build on Cygwin.\n        </li>\n</ul></div>\n<p>\n      Please take a look at <a href=\"https://svn.boost.org/trac/boost/query?status=assigned&amp;status=new&amp;status=reopened&amp;component=thread&amp;type=!Feature+Requests&amp;col=id&amp;col=summary&amp;order=id\" target=\"_top\">thread\n      Know Bugs</a> to see the current state.\n    </p>\n<p>\n      Please take a look at <a href=\"http://www.boost.org/development/tests/master/developer/thread.html\" target=\"_top\">thread\n      trunk regression test</a> to see the last regression test snapshot.\n    </p>\n<p>\n      <span class=\"bold\"><strong>Sever limitations:</strong></span>\n    </p>\n<p>\n      There are some severe bugs that prevent the use of the library on concrete\n      contexts, in particular:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          on thread specific storage that prevent the library to be used with dynamic\n          libraries ( <a href=\"http://svn.boost.org/trac/boost/ticket/3926\" target=\"_top\">#3926</a>,\n          ),\n        </li></ul></div>\n<p>\n      <span class=\"bold\"><strong>New Experimental Features:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9600\" target=\"_top\">#9600</a>\n          Async: Add task_region\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10611\" target=\"_top\">#10611</a>\n          Add emplace promise::set_value and emplace make_ready_future\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10826\" target=\"_top\">#10826</a>\n          Add scheduled executor operations\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11048\" target=\"_top\">#11048</a>\n          Add a serial_executor based on continuations\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6787\" target=\"_top\">#6787</a>\n          boost::thread::sleep() hangs if system time is rolled back\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10734\" target=\"_top\">#10734</a>\n          Submit method work differently on different executors, some throw exception\n          and some silently ignore error (thread_executor and inline_executor)\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10736\" target=\"_top\">#10736</a>\n          Task exceptions silently ignored. I think std::terminate solution from\n          N3785 and std::thread is better choice and more consistent.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10737\" target=\"_top\">#10737</a>\n          In serial_executor we have infinite wait if task throw exception.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10822\" target=\"_top\">#10822</a>\n          Boost.Thread fails to compile on Android\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10824\" target=\"_top\">#10824</a>\n          Boost.Thread 1.57 breaks Windows XP compatibility for SP2 and below.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10963\" target=\"_top\">#10963</a>\n          future&lt;future&lt;T&gt;&gt;::then Has No Implementation\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10964\" target=\"_top\">#10964</a>\n          future&lt;future&lt;T&gt;&gt;::unwrap().then() Deadlocks\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10968\" target=\"_top\">#10968</a>\n          The futures returned by async() and future::then() are not blocking.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10971\" target=\"_top\">#10971</a>\n          shared_future::get()/get_or() must be const\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10972\" target=\"_top\">#10972</a>\n          shared_future::then() can be called multiple times.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10979\" target=\"_top\">#10979</a>\n          Support T&amp; type deduction when the make_ready_future parameter is reference_wrapper&lt;T&gt;\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10996\" target=\"_top\">#10996</a>\n          Thread physical_concurrency() is failing on Windows\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11035\" target=\"_top\">#11035</a>\n          BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE not defined for Android\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/11053\" target=\"_top\">#11053</a>\n          The attached code results in a R6025 - pure virtual function call in run_thread_exit_callbacks\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h9\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_4_0___boost_1_57\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_4_0___boost_1_57\">Version\n      4.4.0 - boost 1.57</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Know Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2442\" target=\"_top\">#2442</a>\n          Application statically linked with Boost.Thread crashes when Google Desktop\n          is installed (Windows XP)\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3926\" target=\"_top\">#3926</a>\n          thread_specific_ptr + dlopen library causes a SIGSEGV.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4833\" target=\"_top\">#4833</a>\n          MinGW/test_tss_lib: Support of automatic tss cleanup for native threading\n          API not available\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7319\" target=\"_top\">#7319</a>\n          Take care of c++std-lib-32966 issue\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8600\" target=\"_top\">#8600</a>\n          wait_for_any hangs, if called with multiple copies of shared_future referencing\n          same task\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9118\" target=\"_top\">#9118</a>\n          Seg fault on thread join when llvm and libc++ are used\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9309\" target=\"_top\">#9309</a>\n          test_latch fails often on clang-darwin-tot11\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9310\" target=\"_top\">#9310</a>\n          test_4648_lib fails on clang-darwin-asan11\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9311\" target=\"_top\">#9311</a>\n          ex_lambda_future fails on msvc-11.0\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10537\" target=\"_top\">#10537</a>\n          Application crash on throw exception\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10651\" target=\"_top\">#10651</a>\n          boost::thread leaks memory when using the MinGW compiler\n        </li>\n</ul></div>\n<p>\n      Please take a look at <a href=\"https://svn.boost.org/trac/boost/query?status=assigned&amp;status=new&amp;status=reopened&amp;component=thread&amp;type=!Feature+Requests&amp;col=id&amp;col=summary&amp;order=id\" target=\"_top\">thread\n      Know Bugs</a> to see the current state.\n    </p>\n<p>\n      Please take a look at <a href=\"http://www.boost.org/development/tests/master/developer/thread.html\" target=\"_top\">thread\n      trunk regression test</a> to see the last snapshot.\n    </p>\n<p>\n      <span class=\"bold\"><strong>Sever limitations:</strong></span>\n    </p>\n<p>\n      There are some severe bugs that prevent the use of the library on concrete\n      contexts, in particular:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          on thread specific storage that prevent the library to be used with dynamic\n          libraries,\n        </li></ul></div>\n<p>\n      <span class=\"bold\"><strong>New Experimental Features:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6227\" target=\"_top\">#6227</a>\n          Synchro: Use of variadic templates on Generic Locking Algorithms on compilers\n          providing them\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10298\" target=\"_top\">#10298</a>\n          Synchro: Added queue views.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10300\" target=\"_top\">#10300</a>\n          Async: Added generic_executor_ref.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10552\" target=\"_top\">#10552</a>\n          Add make_valid_future\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6782\" target=\"_top\">#6782</a>\n          call_once uses incorrect barrier intrinsic on Visual Studio\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6787\" target=\"_top\">#6787</a>\n          boost::thread::sleep() hangs if system time is rolled back\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7665\" target=\"_top\">#7665</a>\n          this_thread::sleep_for no longer uses steady_clock in thread\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9307\" target=\"_top\">#9307</a>\n          future::fallback_to assert with ERRORRRRR boost: mutex lock failed in pthread_mutex_lock:\n          Invalid argument\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9308\" target=\"_top\">#9308</a>\n          future::async fails with terminate called throwing an exception when called\n          with a lambda - clang-darwin-asan11\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9310\" target=\"_top\">#9310</a>\n          test_4648_lib fails on clang-darwin-asan11\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9425\" target=\"_top\">#9425</a>\n          Boost promise &amp; future does not use supplied allocator for value storage\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9558\" target=\"_top\">#9558</a>\n          future continuations unit test hangs in get()/pthread_cond_wait() on Mac\n          10.7/32-bit/x86/darwin-4.2.1\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9787\" target=\"_top\">#9787</a>\n          [windows] Small duration value passed down to basic_timed_mutex::try_lock_until\n          and condition_variable::wait_until can cause infinite or near infinite\n          wait for win32\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9880\" target=\"_top\">#9880</a>\n          [windows] boost::condition_variable.timed_wait() exception if system time\n          &lt; 1970\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10159\" target=\"_top\">#10159</a>\n          GCC 4.4 error sorry, unimplemented\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10196\" target=\"_top\">#10196</a>\n          thread_specific_ptr does not support void*\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10296\" target=\"_top\">#10296</a>\n          Boost.Thread 1.56 rc1 does not compile on Mingw\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10297\" target=\"_top\">#10297</a>\n          Boost.Thread 1.56 rc1 hangs when built with clang on armhf\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10340\" target=\"_top\">#10340</a>\n          No boost::promise&lt;T&gt;::set_value(const T&amp;) overload present in\n          C++03 mode\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10425\" target=\"_top\">#10425</a>\n          Missing documentation for when_all/when_any.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10426\" target=\"_top\">#10426</a>\n          Take in account the deferred futures in when_all.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10427\" target=\"_top\">#10427</a>\n          Take in account the deferred and ready futures in when_any.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10428\" target=\"_top\">#10428</a>\n          Adapt to new unique_ptr interface in Boost.Move\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10465\" target=\"_top\">#10465</a>\n          Missing implementation of when_all/when_any when the result is a tuple.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10476\" target=\"_top\">#10476</a>\n          classes using BOOST_THREAD_MOVABLE_ONLY&lt;T&gt; dont satisfy is_copy_constructible&lt;T&gt;::value\n          == false\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10478\" target=\"_top\">#10478</a>\n          Data race in boost/thread/future.hpp\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10529\" target=\"_top\">#10529</a>\n          The pthread/condition_variable_any constructor reports incorrect error\n          code for pthread_cond_init\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/10563\" target=\"_top\">#10563</a>\n          shared_future&lt;R&gt;::then should be const\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h10\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_3_0___boost_1_56\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_3_0___boost_1_56\">Version\n      4.3.0 - boost 1.56</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Know Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2442\" target=\"_top\">#2442</a>\n          Application statically linked with Boost.Thread crashes when Google Desktop\n          is installed (Windows XP)\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3926\" target=\"_top\">#3926</a>\n          thread_specific_ptr + dlopen library causes a SIGSEGV.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4833\" target=\"_top\">#4833</a>\n          MinGW/test_tss_lib: Support of automatic tss cleanup for native threading\n          API not available\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6782\" target=\"_top\">#6782</a>\n          call_once uses incorrect barrier intrinsic on Visual Studio\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7319\" target=\"_top\">#7319</a>\n          Take care of c++std-lib-32966 issue\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8600\" target=\"_top\">#8600</a>\n          wait_for_any hangs, if called with multiple copies of shared_future referencing\n          same task\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9307\" target=\"_top\">#9307</a>\n          future::fallback_to assert with ERRORRRRR boost: mutex lock failed in pthread_mutex_lock:\n          Invalid argument\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9308\" target=\"_top\">#9308</a>\n          future::async fails with terminate called throwing an exception when called\n          with a lambda - clang-darwin-asan11\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9310\" target=\"_top\">#9310</a>\n          test_4648_lib fails on clang-darwin-asan11\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9311\" target=\"_top\">#9311</a>\n          ex_lambda_future fails on msvc-11.0\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9425\" target=\"_top\">#9425</a>\n          Boost promise &amp; future does not use supplied allocator for value storage\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9558\" target=\"_top\">#9558</a>\n          future continuations unit test hangs in get()/pthread_cond_wait() on Mac\n          10.7/32-bit/x86/darwin-4.2.1\n        </li>\n</ul></div>\n<p>\n      Please take a look at <a href=\"https://svn.boost.org/trac/boost/query?status=assigned&amp;status=new&amp;status=reopened&amp;component=thread&amp;type=!Feature+Requests&amp;col=id&amp;col=summary&amp;order=id\" target=\"_top\">thread\n      Know Bugs</a> to see the current state.\n    </p>\n<p>\n      Please take a look at <a href=\"http://www.boost.org/development/tests/master/developer/thread.html\" target=\"_top\">thread\n      trunk regression test</a> to see the last snapshot.\n    </p>\n<p>\n      <span class=\"bold\"><strong>Sever limitations:</strong></span>\n    </p>\n<p>\n      There are some severe bugs that prevent the use of the library on concrete\n      contexts, in particular:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          on thread specific storage that prevent the library to be used with dynamic\n          libraries,\n        </li>\n<li class=\"listitem\">\n          The experimental features of boost::future have some severe holes that\n          make the program crash unexpectedly.\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>New Experimental Features:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7446\" target=\"_top\">#7446</a>\n          Async: Add when_any.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7447\" target=\"_top\">#7447</a>\n          Async: Add when_all.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7448\" target=\"_top\">#7448</a>\n          Async: Add async taking a scheduler parameter.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8274\" target=\"_top\">#8274</a>\n          Synchro: Add concurrent queue\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8518\" target=\"_top\">#8518</a>\n          Synchro: Add a latch class.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8513\" target=\"_top\">#8513</a>\n          Async: Add a basic thread_pool executor.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8516\" target=\"_top\">#8516</a>\n          Async: Add future/shared_future::then taking a scheduler as parameter.\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8070\" target=\"_top\">#8070</a>\n          prefer GetTickCount64 over GetTickCount\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9333\" target=\"_top\">#9333</a>\n          ex_scoped_thread compile fails on msvc-12.0\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9366\" target=\"_top\">#9366</a>\n          async(Executor, ...) fails to compile with msvc-10,11,12\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9402\" target=\"_top\">#9402</a>\n          test_excutor regression on msvc-10,11,12\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9404\" target=\"_top\">#9404</a>\n          ex_make_future regression error\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9471\" target=\"_top\">#9471</a>\n          Synchronization documentation nits\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9535\" target=\"_top\">#9535</a>\n          Missing exception safety might result in crash\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9618\" target=\"_top\">#9618</a>\n          try_join_for problem: program is not terminate.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9673\" target=\"_top\">#9673</a>\n          thread compilation with MingW/gcc on Windows gives errors\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9708\" target=\"_top\">#9708</a>\n          boost::condition_variable::timed_wait unexpectedly wakes up while should\n          wait infinite\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9711\" target=\"_top\">#9711</a>\n          future continuation called twice\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h11\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_2_0___boost_1_55\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_2_0___boost_1_55\">Version\n      4.2.0 - boost 1.55</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Know Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2442\" target=\"_top\">#2442</a>\n          Application statically linked with Boost.Thread crashes when Google Desktop\n          is installed (Windows XP)\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3926\" target=\"_top\">#3926</a>\n          thread_specific_ptr + dlopen library causes a SIGSEGV.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4833\" target=\"_top\">#4833</a>\n          MinGW/test_tss_lib: Support of automatic tss cleanup for native threading\n          API not available\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6782\" target=\"_top\">#6782</a>\n          call_once uses incorrect barrier intrinsic on Visual Studio\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7319\" target=\"_top\">#7319</a>\n          Take care of c++std-lib-32966 issue\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8600\" target=\"_top\">#8600</a>\n          wait_for_any hangs, if called with multiple copies of shared_future referencing\n          same task\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9307\" target=\"_top\">#9307</a>\n          future::fallback_to assert with ERRORRRRR boost: mutex lock failed in pthread_mutex_lock:\n          Invalid argument\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9308\" target=\"_top\">#9308</a>\n          future::async fails with terminate called throwing an exception when called\n          with a lambda - clang-darwin-asan11\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9311\" target=\"_top\">#9311</a>\n          ex_lambda_future fails on msvc-11.0\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9310\" target=\"_top\">#9310</a>\n          test_4648_lib fails on clang-darwin-asan11\n        </li>\n</ul></div>\n<p>\n      Please take a look at <a href=\"https://svn.boost.org/trac/boost/query?status=assigned&amp;status=new&amp;status=reopened&amp;component=thread&amp;type=!Feature+Requests&amp;col=id&amp;col=summary&amp;order=id\" target=\"_top\">thread\n      trunk regression test</a> to see the current state.\n    </p>\n<p>\n      <span class=\"bold\"><strong>Sever limitations:</strong></span>\n    </p>\n<p>\n      There are some severe bugs that prevent the use of the library on concrete\n      contexts, in particular:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          on thread specific storage that prevent the library to be used with dynamic\n          libraries,\n        </li>\n<li class=\"listitem\">\n          The experimental features of boost::future have some severe holes that\n          make the program crash unexpectedly.\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>New Features:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8519\" target=\"_top\">#8519</a>\n          Synchro: Update class barrier with a completion function.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8515\" target=\"_top\">#8515</a>\n          Async: Add shared_future::then.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8519\" target=\"_top\">#8519</a>\n          Synchro: Update class barrier with a completion function\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8615\" target=\"_top\">#8615</a>\n          Async: Replace make_future/make_shared_future by make_ready_future.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8627\" target=\"_top\">#8627</a>\n          Async: Add future&lt;&gt;::unwrap and unwrapping constructor.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8677\" target=\"_top\">#8677</a>\n          Async: Add future&lt;&gt;::get_or.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8678\" target=\"_top\">#8678</a>\n          Async: Add future&lt;&gt;::fallback_to.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8891\" target=\"_top\">#8891</a>\n          upgrade_to_unique_lock: missing mutex() function.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8955\" target=\"_top\">#8955</a>\n          Request for more efficient way to get exception_ptr from future.\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7461\" target=\"_top\">#7461</a>\n          detail::win32::ReleaseSemaphore may be called with count_to_release equal\n          to 0\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8070\" target=\"_top\">#8070</a>\n          prefer GetTickCount64 over GetTickCount\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8768\" target=\"_top\">#8768</a>\n          win32 condition_variable::wait_until infinite wait in rare cases.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8817\" target=\"_top\">#8817</a>\n          Boost Thread Windows CE _createthreadex handling breaks mingw w64.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8943\" target=\"_top\">#8943</a>\n          Failed to compile code using boost::call_once with Intel C++ Composer XE\n          2013 on Windows.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8931\" target=\"_top\">#8931</a>\n          Typos in external_locking reference.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9029\" target=\"_top\">#9029</a>\n          Misprint in documentation.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9037\" target=\"_top\">#9037</a>\n          gcc -Wshadow gives warnings in condition_variable{,_fwd}.hpp.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9041\" target=\"_top\">#9041</a>\n          Boost.Thread DSO's may need to link with Boost.Atomic.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9048\" target=\"_top\">#9048</a>\n          boost::scoped_thread useless ctor with variadic template arguments.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/9079\" target=\"_top\">#9079</a>\n          Condition variable will wait forever for some timepoint values (Win).\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h12\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_1_0___boost_1_54\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_1_0___boost_1_54\">Version\n      4.1.0 - boost 1.54</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>New Features:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7285\" target=\"_top\">#7285</a>\n          C++11 compliance: Allow to pass movable arguments for call_once.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7445\" target=\"_top\">#7445</a>\n          Async: Add future&lt;&gt;.then\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7449\" target=\"_top\">#7449</a>\n          Synchro: Add a synchronized value class\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4878\" target=\"_top\">#4878</a>\n          MinGW 4.5.0 undefined reference to bool interruptible_wait(detail::win32::handle\n          handle_to_wait_for,detail::t imeout target_time).\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4882\" target=\"_top\">#4882</a>\n          Win32 shared_mutex does not handle timeouts correctly.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5752\" target=\"_top\">#5752</a>\n          boost::call_once() is unreliable on some platforms\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6652\" target=\"_top\">#6652</a>\n          Boost.Thread shared_mutex.hpp:50:99: warning: dereferencing type-punned\n          pointer will break strict-aliasing rules <span class=\"strikethrough\">Wstrict-aliasing</span>\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6843\" target=\"_top\">#6843</a>\n          [Intel C++] Compile Errors with '#include &lt;atomic&gt;'\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6966\" target=\"_top\">#6966</a>\n          future boost::future_category inconsistent dll linkage\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7720\" target=\"_top\">#7720</a>\n          exception lock_error while intensive locking/unlocking of mutex\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7755\" target=\"_top\">#7755</a>\n          Thread: deadlock with shared_mutex on Windows\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7980\" target=\"_top\">#7980</a>\n          Build error: msvc-11.0 and BOOST_THREAD_DONT_USE_DATETIME\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7982\" target=\"_top\">#7982</a>\n          pthread_delay_np() parm compile error on AIX\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8027\" target=\"_top\">#8027</a>\n          thread library fails to compile with Visual Studio 2003\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8070\" target=\"_top\">#8070</a>\n          prefer GetTickCount64 over GetTickCount\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8136\" target=\"_top\">#8136</a>\n          boost::this_thread::sleep_for() sleeps longer than it should in Windows\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8212\" target=\"_top\">#8212</a>\n          Boost thread compilation error on Solaris 10\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8237\" target=\"_top\">#8237</a>\n          fix documentation for 'thread_group'\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8239\" target=\"_top\">#8239</a>\n          barrier::wait() not marked as interruption_point\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8323\" target=\"_top\">#8323</a>\n          boost::thread::try_join_for/try_join_until may block indefinitely due to\n          a combination of problems in Boost.Thread and Boost.Chrono\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8337\" target=\"_top\">#8337</a>\n          The internal representation of \"std::string(this-&gt;code()-&gt;message())\"\n          escapes, but is destroyed when it exits scope.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8371\" target=\"_top\">#8371</a>\n          C++11 once_flag enabled when constexpr is not available\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8422\" target=\"_top\">#8422</a>\n          Assertion in win32::WaitForSingleObject()\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8443\" target=\"_top\">#8443</a>\n          Header file inclusion order may cause crashes\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8451\" target=\"_top\">#8451</a>\n          Missing documented function 'boost::scoped_thread::joinable'\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8458\" target=\"_top\">#8458</a>\n          -DBOOST_THREAD_DONT_USE_CHRONO in thread.obj.rsp but not explicitly set\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8530\" target=\"_top\">#8530</a>\n          [Coverity] Unused variable thread_handle, uninitialized variable cond_mutex\n          in thread/pthread/thread_data.hpp\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8550\" target=\"_top\">#8550</a>\n          static linking of Boost.Thread with an MFC-Dll\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8576\" target=\"_top\">#8576</a>\n          \"sur parolle\" should be \"sur parole\".\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8596\" target=\"_top\">#8596</a>\n          With C++0x enabled, boost::packaged_task stores a reference to function\n          objects, instead of a copy.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8626\" target=\"_top\">#8626</a>\n          Reintroduce BOOST_VERIFY on pthread_mutex_destroy return type\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8645\" target=\"_top\">#8645</a>\n          Typo in Strict lock definition\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8671\" target=\"_top\">#8671</a>\n          promise: set_..._at_thread_exit\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8672\" target=\"_top\">#8672</a>\n          future&lt;&gt;::then(void()) doesn't works\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/8674\" target=\"_top\">#8674</a>\n          Futures as local named objects can't be returned with implicit move.\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h13\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_4_0_0___boost_1_53\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_4_0_0___boost_1_53\">Version\n      4.0.0 - boost 1.53</a>\n    </h4>\n<p>\n      <span class=\"bold\"><strong>Deprecated features:</strong></span>\n    </p>\n<div class=\"warning\"><table border=\"0\" summary=\"Warning\">\n<tr>\n<td rowspan=\"2\" align=\"center\" valign=\"top\" width=\"25\"><img alt=\"[Warning]\" src=\"../../../doc/src/images/warning.png\"></td>\n<th align=\"left\">Warning</th>\n</tr>\n<tr><td align=\"left\" valign=\"top\"><p>\n        Deprecated features since boost 1.53 will be available only until boost 1.58.\n      </p></td></tr>\n</table></div>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          C++11 compliance: packaged_task&lt;R&gt; is deprecated, use instead packaged_task&lt;R()&gt;.\n          See BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK and BOOST_THREAD_DONT_PROVIDE_SIGNATURE_PACKAGED_TASK\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7537\" target=\"_top\">#7537</a>\n          deprecate Mutex::scoped_lock and scoped_try_lock and boost::condition\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>New Features:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6270\" target=\"_top\">#6270</a>\n          c++11 compliance: Add thread constructor from movable callable and movable\n          arguments Provided when BOOST_THREAD_PROVIDES_VARIADIC_THREAD is defined\n          (Default value from Boost 1.55): See BOOST_THREAD_PROVIDES_VARIADIC_THREAD\n          and BOOST_THREAD_DONT_PROVIDE_VARIADIC_THREAD.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7279\" target=\"_top\">#7279</a>\n          C++11 compliance: Add noexcept in system related functions\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7280\" target=\"_top\">#7280</a>\n          C++11 compliance: Add promise::...at_thread_exit functions\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7281\" target=\"_top\">#7281</a>\n          C++11 compliance: Add ArgTypes to packaged_task template. Provided when\n          BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK is defined (Default value\n          from Boost 1.55). See BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK and\n          BOOST_THREAD_DONT_PROVIDE_SIGNATURE_PACKAGED_TASK.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7282\" target=\"_top\">#7282</a>\n          C++11 compliance: Add packaged_task::make_ready_at_thread_exit function\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7285\" target=\"_top\">#7285</a>\n          C++11 compliance: Allow to pass movable arguments for call_once\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7412\" target=\"_top\">#7412</a>\n          C++11 compliance: Add async from movable callable and movable arguments\n          Provided when BOOST_THREAD_PROVIDES_VARIADIC_THREAD and BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK\n          are defined (Default value from Boost 1.55): See BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK\n          and BOOST_THREAD_DONT_PROVIDE_SIGNATURE_PACKAGED_TASK, BOOST_THREAD_PROVIDES_VARIADIC_THREAD\n          and BOOST_THREAD_DONT_PROVIDE_VARIADIC_THREAD.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7413\" target=\"_top\">#7413</a>\n          C++11 compliance: Add async when the launch policy is deferred.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7414\" target=\"_top\">#7414</a>\n          C++11 compliance: future::get post-condition should be valid()==false.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7422\" target=\"_top\">#7422</a>\n          Provide a condition variable with zero-overhead performance penality.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7414\" target=\"_top\">#7444</a>\n          Async: Add make_future/make_shared_future.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7540\" target=\"_top\">#7540</a>\n          Threads: Add a helper class that join a thread on destruction.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7541\" target=\"_top\">#7541</a>\n          Threads: Add a thread wrapper class that joins on destruction.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7575\" target=\"_top\">#7575</a>\n          C++11 compliance: A future created by async should \"join\" in\n          the destructor.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7587\" target=\"_top\">#7587</a>\n          Synchro: Add strict_lock and nested_strict_lock.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7588\" target=\"_top\">#7588</a>\n          Synchro: Split the locks.hpp in several files to limit dependencies.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7590\" target=\"_top\">#7590</a>\n          Synchro: Add lockable concept checkers based on Boost.ConceptCheck.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7591\" target=\"_top\">#7591</a>\n          Add lockable traits that can be used with enable_if.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7592\" target=\"_top\">#7592</a>\n          Synchro: Add a null_mutex that is a no-op and that is a model of UpgardeLockable.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7593\" target=\"_top\">#7593</a>\n          Synchro: Add a externally_locked class.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7590\" target=\"_top\">#7594</a>\n          Threads: Allow to disable thread interruptions.\n        </li>\n</ul></div>\n<p>\n      <span class=\"bold\"><strong>Fixed Bugs:</strong></span>\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5752\" target=\"_top\">#5752</a>\n          boost::call_once() is unreliable on some platforms\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7464\" target=\"_top\">#7464</a>\n          BOOST_TEST(n_alive == 1); fails due to race condition in a regression test\n          tool.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7657\" target=\"_top\">#7657</a>\n          Serious performance and memory consumption hit if condition_variable methods\n          condition notify_one or notify_all is used repeatedly.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7665\" target=\"_top\">#7665</a>\n          this_thread::sleep_for no longer uses steady_clock in thread.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7668\" target=\"_top\">#7668</a>\n          thread_group::join_all() should check whether its threads are joinable.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7669\" target=\"_top\">#7669</a>\n          thread_group::join_all() should catch resource_deadlock_would_occur.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7671\" target=\"_top\">#7671</a>\n          Error including boost/thread.hpp header on iOS.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7672\" target=\"_top\">#7672</a>\n          lockable_traits.hpp syntax error: \"defined\" token misspelled.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7798\" target=\"_top\">#7798</a>\n          boost::future set_wait_callback thread safety issues.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7808\" target=\"_top\">#7808</a>\n          Incorrect description of effects for this_thread::sleep_for and this_thread::sleep_until.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7812\" target=\"_top\">#7812</a>\n          Returns: cv_status::no_timeout if the call is returning because the time\n          period specified by rel_time has elapsed, cv_status::timeout otherwise.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7874\" target=\"_top\">#7874</a>\n          compile warning: thread.hpp:342: warning: type attributes are honored only\n          at type definition.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7875\" target=\"_top\">#7875</a>\n          BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED should not be enabled\n          by default.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7882\" target=\"_top\">#7882</a>\n          wrong exception text from condition_variable::wait(unique_lock&lt;mutex&gt;&amp;).\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7890\" target=\"_top\">#7890</a>\n          thread::do_try_join_until() is missing a return type.\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h14\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_3_1_0___boost_1_52\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_3_1_0___boost_1_52\">Version\n      3.1.0 - boost 1.52</a>\n    </h4>\n<p>\n      Deprecated Features:\n    </p>\n<p>\n      Deprecated features since boost 1.50 available only until boost 1.55:\n    </p>\n<p>\n      These deprecated features will be provided by default up to boost 1.52. If\n      you don't want to include the deprecated features you could define BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0.\n      Since 1.53 these features will not be included any more by default. Since this\n      version, if you want to include the deprecated features yet you could define\n      BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. These deprecated features\n      will be only available until boost 1.55, that is you have yet 1 year to move\n      to the new features.\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          Time related functions don't using the Boost.Chrono library, use the chrono\n          overloads instead.\n        </li></ul></div>\n<p>\n      Breaking changes when BOOST_THREAD_VERSION==3 (Default value since Boost 1.53):\n    </p>\n<p>\n      There are some new features which share the same interface but with different\n      behavior. These breaking features are provided by default when BOOST_THREAD_VERSION\n      is 3, but the user can however choose the version 2 behavior by defining the\n      corresponding macro. As for the deprecated features, these broken features\n      will be only available until boost 1.55.\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6229\" target=\"_top\">#6229</a>\n          Rename the unique_future to future following the c++11.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6266\" target=\"_top\">#6266</a>\n          Breaking change: thread destructor should call terminate if joinable.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6269\" target=\"_top\">#6269</a>\n          Breaking change: thread move assignment should call terminate if joinable.\n        </li>\n</ul></div>\n<p>\n      New Features:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2361\" target=\"_top\">#2361</a>\n          thread_specific_ptr: document nature of the key, complexity and rationale.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4710\" target=\"_top\">#4710</a>\n          C++11 compliance: Missing async().\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7283\" target=\"_top\">#7283</a>\n          C++11 compliance: Add notify_all_at_thread_exit.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7345\" target=\"_top\">#7345</a>\n          C++11 compliance: Add noexcept to recursive mutex try_lock.\n        </li>\n</ul></div>\n<p>\n      Fixed Bugs:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2797\" target=\"_top\">#2797</a>\n          Two problems with thread_specific_ptr.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5274\" target=\"_top\">#5274</a>\n          failed to compile future.hpp with stlport 5.1.5 under msvc8.1, because\n          of undefined class.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5431\" target=\"_top\">#5431</a>\n          compile error in Windows CE 6.0(interlocked).\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5696\" target=\"_top\">#5696</a>\n          win32 detail::set_tss_data does nothing when tss_cleanup_function is NULL.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6931\" target=\"_top\">#6931</a>\n          mutex waits forwever with Intel C++ Compiler XE 12.1.5.344 Build 20120612\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7045\" target=\"_top\">#7045</a>\n          Thread library does not automatically compile date_time.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7173\" target=\"_top\">#7173</a>\n          wrong function name interrupt_point().\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7200\" target=\"_top\">#7200</a>\n          Unable to build boost.thread modularized.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7220\" target=\"_top\">#7220</a>\n          gcc 4.6.2 warns about inline+dllimport functions.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7238\" target=\"_top\">#7238</a>\n          this_thread::sleep_for() does not respond to interrupt().\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7245\" target=\"_top\">#7245</a>\n          Minor typos on documentation related to version 3.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7272\" target=\"_top\">#7272</a>\n          win32/thread_primitives.hpp: (Unneccessary) Warning.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7284\" target=\"_top\">#7284</a>\n          Clarify that there is no access priority between lock and shared_lock on\n          shared mutex.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7329\" target=\"_top\">#7329</a>\n          boost/thread/future.hpp does not compile on HPUX.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7336\" target=\"_top\">#7336</a>\n          BOOST_THREAD_DONT_USE_SYSTEM doesn't work.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7329\" target=\"_top\">#7349</a>\n          packaged_task holds reference to temporary.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7350\" target=\"_top\">#7350</a>\n          allocator_destructor does not destroy object\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7360\" target=\"_top\">#7360</a>\n          Memory leak in pthread implementation of boost::thread_specific_ptr\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7370\" target=\"_top\">#7370</a>\n          Boost.Thread documentation\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7438\" target=\"_top\">#7438</a>\n          Segmentation fault in test_once regression test in group.join_all();\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7461\" target=\"_top\">#7461</a>\n          detail::win32::ReleaseSemaphore may be called with count_to_release equal\n          to 0\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7499\" target=\"_top\">#7499</a>\n          call_once doesn't call even once\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h15\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_3_0_1___boost_1_51\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_3_0_1___boost_1_51\">Version\n      3.0.1 - boost 1.51</a>\n    </h4>\n<p>\n      Deprecated Features:\n    </p>\n<p>\n      Deprecated features since boost 1.50 available only until boost 1.55:\n    </p>\n<p>\n      These deprecated features will be provided by default up to boost 1.52. If\n      you don't want to include the deprecated features you could define BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0.\n      Since 1.53 these features will not be included any more by default. Since this\n      version, if you want to include the deprecated features yet you could define\n      BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. These deprecated features\n      will be only available until boost 1.55, that is you have 1 year and a half\n      to move to the new features.\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          Time related functions don't using the Boost.Chrono library, use the chrono\n          overloads instead.\n        </li></ul></div>\n<p>\n      Breaking changes when BOOST_THREAD_VERSION==3:\n    </p>\n<p>\n      There are some new features which share the same interface but with different\n      behavior. These breaking features are provided by default when BOOST_THREAD_VERSION\n      is 3, but the user can however choose the version 2 behavior by defining the\n      corresponding macro. As for the deprecated features, these broken features\n      will be only available until boost 1.55.\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6229\" target=\"_top\">#6229</a>\n          Rename the unique_future to future following the c++11.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6266\" target=\"_top\">#6266</a>\n          Breaking change: thread destructor should call terminate if joinable.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6269\" target=\"_top\">#6269</a>\n          Breaking change: thread move assignment should call terminate if joinable.\n        </li>\n</ul></div>\n<p>\n      Fixed Bugs:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4258\" target=\"_top\">#4258</a>\n          Linking with boost thread does not work on mingw/gcc 4.5.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4885\" target=\"_top\">#4885</a>\n          Access violation in set_tss_data at process exit due to invalid assumption\n          about TlsAlloc.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6931\" target=\"_top\">#6931</a>\n          mutex waits forwever with Intel Compiler and /debug:parallel\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7044\" target=\"_top\">#7044</a>\n          boost 1.50.0 header missing.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7052\" target=\"_top\">#7052</a>\n          Thread: BOOST_THREAD_PROVIDES_DEPRECATED_FEATURES_SINCE_V3_0_0 only masks\n          thread::operator==, thread::operator!= forward declarations, not definitions.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7066\" target=\"_top\">#7066</a>\n          An attempt to fix current_thread_tls_key static initialization order.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7074\" target=\"_top\">#7074</a>\n          Multiply defined symbol boost::allocator_arg.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7078\" target=\"_top\">#7078</a>\n          Trivial 64-bit warning fix on Windows for thread attribute stack size\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/7089\" target=\"_top\">#7089</a>\n          BOOST_THREAD_WAIT_BUG limits functionality without solving anything\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h16\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_3_0_0___boost_1_50\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_3_0_0___boost_1_50\">Version\n      3.0.0 - boost 1.50</a>\n    </h4>\n<p>\n      Breaking changes when BOOST_THREAD_VERSION==3:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6229\" target=\"_top\">#6229</a>\n          Breaking change: Rename the unique_future to future following the c++11.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6266\" target=\"_top\">#6266</a>\n          Breaking change: thread destructor should call terminate if joinable.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6269\" target=\"_top\">#6269</a>\n          Breaking change: thread move assignment should call terminate if joinable.\n        </li>\n</ul></div>\n<p>\n      New Features:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/1850\" target=\"_top\">#1850</a>\n          Request for unlock_guard to compliment lock_guard.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2637\" target=\"_top\">#2637</a>\n          Request for shared_mutex duration timed_lock and timed_lock_shared.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2741\" target=\"_top\">#2741</a>\n          Proposal to manage portable and non portable thread attributes.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3567\" target=\"_top\">#3567</a>\n          Request for shared_lock_guard.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6194\" target=\"_top\">#6194</a>\n          Adapt to Boost.Move.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6195\" target=\"_top\">#6195</a>\n          c++11 compliance: Provide the standard time related interface using Boost.Chrono.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6217\" target=\"_top\">#6217</a>\n          Enhance Boost.Thread shared mutex interface following Howard Hinnant proposal.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6224\" target=\"_top\">#6224</a>\n          c++11 compliance: Add the use of standard noexcept on compilers supporting\n          them.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6225\" target=\"_top\">#6225</a>\n          Add the use of standard =delete defaulted operations on compilers supporting\n          them.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6226\" target=\"_top\">#6226</a>\n          c++11 compliance: Add explicit bool conversion from locks.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6228\" target=\"_top\">#6228</a>\n          Add promise constructor with allocator following the standard c++11.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6230\" target=\"_top\">#6230</a>\n          c++11 compliance: Follows the exception reporting mechanism as defined\n          in the c++11.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6231\" target=\"_top\">#6231</a>\n          Add BasicLockable requirements in the documentation to follow c++11.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6272\" target=\"_top\">#6272</a>\n          c++11 compliance: Add thread::id hash specialization.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6273\" target=\"_top\">#6273</a>\n          c++11 compliance: Add cv_status enum class and use it on the conditions\n          wait functions.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6342\" target=\"_top\">#6342</a>\n          c++11 compliance: Adapt the one_flag to the c++11 interface.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6671\" target=\"_top\">#6671</a>\n          upgrade_lock: missing mutex and release functions.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6672\" target=\"_top\">#6672</a>\n          upgrade_lock:: missing constructors from time related types.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6675\" target=\"_top\">#6675</a>\n          upgrade_lock:: missing non-member swap.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6676\" target=\"_top\">#6676</a>\n          lock conversion should be explicit.\n        </li>\n<li class=\"listitem\">\n          Added missing packaged_task::result_type and packaged_task:: constructor\n          with allocator.\n        </li>\n<li class=\"listitem\">\n          Added packaged_task::reset()\n        </li>\n</ul></div>\n<p>\n      Fixed Bugs:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2380\" target=\"_top\">#2380</a>\n          boost::move from lvalue does not work with gcc.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2430\" target=\"_top\">#2430</a>\n          shared_mutex for win32 doesn't have timed_lock_upgrade.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2575\" target=\"_top\">#2575</a>\n          Bug- Boost 1.36.0 on Itanium platform.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3160\" target=\"_top\">#3160</a>\n          Duplicate tutorial code in boost::thread.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4345\" target=\"_top\">#4345</a>\n          thread::id and joining problem with cascade of threads.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4521\" target=\"_top\">#4521</a>\n          Error using boost::move on packaged_task (MSVC 10).\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4711\" target=\"_top\">#4711</a>\n          Must use implementation details to return move-only types.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4921\" target=\"_top\">#4921</a>\n          BOOST_THREAD_USE_DLL and BOOST_THREAD_USE_LIB are crucial and need to be\n          documented.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5013\" target=\"_top\">#5013</a>\n          documentation: boost::thread: pthreas_exit causes terminate().\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5173\" target=\"_top\">#5173</a>\n          boost::this_thread::get_id is very slow.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5351\" target=\"_top\">#5351</a>\n          interrupt a future get boost::unknown_exception.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5516\" target=\"_top\">#5516</a>\n          Upgrade lock is not acquired when previous upgrade lock releases if another\n          read lock is present.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5990\" target=\"_top\">#5990</a>\n          shared_future&lt;T&gt;::get() has wrong return type.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6174\" target=\"_top\">#6174</a>\n          packaged_task doesn't correctly handle moving results.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6222\" target=\"_top\">#6222</a>\n          Compile error with SunStudio: unique_future move.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6354\" target=\"_top\">#6354</a>\n          PGI: Compiler threading support is not turned on.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6673\" target=\"_top\">#6673</a>\n          shared_lock: move assign doesn't works with c++11.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6674\" target=\"_top\">#6674</a>\n          shared_mutex: try_lock_upgrade_until doesn't works.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6908\" target=\"_top\">#6908</a>\n          Compile error due to unprotected definitions of _WIN32_WINNT and WINVER.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6940\" target=\"_top\">#6940</a>\n          TIME_UTC is a macro in C11.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6959\" target=\"_top\">#6959</a>\n          call of abs is ambiguous.\n        </li>\n<li class=\"listitem\">\n          Fix issue signaled on the ML with task_object(task_object const&amp;) in\n          presence of task_object(task_object &amp;&amp;)\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h17\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_2_1_1___boost_1_49\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_2_1_1___boost_1_49\">Version\n      2.1.1 - boost 1.49</a>\n    </h4>\n<p>\n      Fixed Bugs:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2309\" target=\"_top\">#2309</a>\n          Lack of g++ symbol visibility support in Boost.Thread.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/2639\" target=\"_top\">#2639</a>\n          documentation should be extended(defer_lock, try_to_lock, ...).\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3639\" target=\"_top\">#3639</a>\n          Boost.Thread doesn't build with Sun-5.9 on Linux.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3762\" target=\"_top\">#3762</a>\n          Thread can't be compiled with winscw (Codewarrior by Nokia).\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3885\" target=\"_top\">#3885</a>\n          document about mix usage of boost.thread and native thread api.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/3975\" target=\"_top\">#3975</a>\n          Incorrect precondition for promise::set_wait_callback().\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4048\" target=\"_top\">#4048</a>\n          thread::id formatting involves locale\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4315\" target=\"_top\">#4315</a>\n          gcc 4.4 Warning: inline ... declared as dllimport: attribute ignored.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4480\" target=\"_top\">#4480</a>\n          OpenVMS patches for compiler issues workarounds.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/4819\" target=\"_top\">#4819</a>\n          boost.thread's documentation misprints.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5423\" target=\"_top\">#5423</a>\n          thread issues with C++0x.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5617\" target=\"_top\">#5617</a>\n          boost::thread::id copy ctor.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5739\" target=\"_top\">#5739</a>\n          set-but-not-used warnings with gcc-4.6.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5826\" target=\"_top\">#5826</a>\n          threads.cpp: resource leak on threads creation failure.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5839\" target=\"_top\">#5839</a>\n          thread.cpp: ThreadProxy leaks on exceptions.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/5859\" target=\"_top\">#5859</a>\n          win32 shared_mutex constructor leaks on exceptions.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6100\" target=\"_top\">#6100</a>\n          Compute hardware_concurrency() using get_nprocs() on GLIBC systems.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6168\" target=\"_top\">#6168</a>\n          recursive_mutex is using wrong config symbol (possible typo).\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6175\" target=\"_top\">#6175</a>\n          Compile error with SunStudio.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6200\" target=\"_top\">#6200</a>\n          patch to have condition_variable and mutex error better handle EINTR.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6207\" target=\"_top\">#6207</a>\n          shared_lock swap compiler error on clang 3.0 c++11.\n        </li>\n<li class=\"listitem\">\n          <a href=\"http://svn.boost.org/trac/boost/ticket/6208\" target=\"_top\">#6208</a>\n          try_lock_wrapper swap compiler error on clang 3.0 c++11.\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h18\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_2_1_0___changes_since_boost_1_40\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_2_1_0___changes_since_boost_1_40\">Version 2.1.0\n      - Changes since boost 1.40</a>\n    </h4>\n<p>\n      The 1.41.0 release of Boost adds futures to the thread library. There are also\n      a few minor changes.\n    </p>\n<h4>\n<a name=\"thread.changes.h19\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.changes_since_boost_1_35\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.changes_since_boost_1_35\">Changes\n      since boost 1.35</a>\n    </h4>\n<p>\n      The 1.36.0 release of Boost includes a few new features in the thread library:\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          New generic <a class=\"link\" href=\"synchronization.html#thread.synchronization.lock_functions.lock_multiple\" title=\"Non-member function lock(Lockable1,Lockable2,...)\"><code class=\"computeroutput\"><span class=\"identifier\">lock</span><span class=\"special\">()</span></code></a>\n          and <a class=\"link\" href=\"synchronization.html#thread.synchronization.lock_functions.try_lock_multiple\" title=\"Non-member function try_lock(Lockable1,Lockable2,...)\"><code class=\"computeroutput\"><span class=\"identifier\">try_lock</span><span class=\"special\">()</span></code></a>\n          functions for locking multiple mutexes at once.\n        </li>\n<li class=\"listitem\">\n          Rvalue reference support for move semantics where the compilers supports\n          it.\n        </li>\n<li class=\"listitem\">\n          A few bugs fixed and missing functions added (including the serious win32\n          condition variable bug).\n        </li>\n<li class=\"listitem\">\n          <code class=\"computeroutput\"><span class=\"identifier\">scoped_try_lock</span></code> types are\n          now backwards-compatible with Boost 1.34.0 and previous releases.\n        </li>\n<li class=\"listitem\">\n          Support for passing function arguments to the thread function by supplying\n          additional arguments to the <a class=\"link\" href=\"thread_management.html#thread.thread_management.thread\" title=\"Class thread\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">thread</span></code></a> constructor.\n        </li>\n<li class=\"listitem\">\n          Backwards-compatibility overloads added for <code class=\"computeroutput\"><span class=\"identifier\">timed_lock</span></code>\n          and <code class=\"computeroutput\"><span class=\"identifier\">timed_wait</span></code> functions\n          to allow use of <code class=\"computeroutput\"><span class=\"identifier\">xtime</span></code> for\n          timeouts.\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h20\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.version_2_0_0___changes_since_boost_1_34\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.version_2_0_0___changes_since_boost_1_34\">Version 2.0.0\n      - Changes since boost 1.34</a>\n    </h4>\n<p>\n      Almost every line of code in <span class=\"bold\"><strong>Boost.Thread</strong></span>\n      has been changed since the 1.34 release of boost. However, most of the interface\n      changes have been extensions, so the new code is largely backwards-compatible\n      with the old code. The new features and breaking changes are described below.\n    </p>\n<h4>\n<a name=\"thread.changes.h21\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.new_features\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.new_features\">New\n      Features</a>\n    </h4>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          Instances of <a class=\"link\" href=\"thread_management.html#thread.thread_management.thread\" title=\"Class thread\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">thread</span></code></a> and of the various lock\n          types are now movable.\n        </li>\n<li class=\"listitem\">\n          Threads can be interrupted at <a class=\"link\" href=\"thread_management.html#interruption_points\"><span class=\"emphasis\"><em>interruption\n          points</em></span></a>.\n        </li>\n<li class=\"listitem\">\n          Condition variables can now be used with any type that implements the\n          <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_concepts.lockable\" title=\"Lockable Concept\"><code class=\"computeroutput\"><span class=\"identifier\">Lockable</span></code> concept</a>, through the\n          use of <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">condition_variable_any</span></code> (<code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">condition</span></code> is a <code class=\"computeroutput\"><span class=\"keyword\">typedef</span></code>\n          to <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">condition_variable_any</span></code>, provided for\n          backwards compatibility). <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">condition_variable</span></code>\n          is provided as an optimization, and will only work with <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">unique_lock</span><span class=\"special\">&lt;</span><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">mutex</span><span class=\"special\">&gt;</span></code> (<code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">mutex</span><span class=\"special\">::</span><span class=\"identifier\">scoped_lock</span></code>).\n        </li>\n<li class=\"listitem\">\n          Thread IDs are separated from <a class=\"link\" href=\"thread_management.html#thread.thread_management.thread\" title=\"Class thread\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">thread</span></code></a>, so a thread can obtain\n          it's own ID (using <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">this_thread</span><span class=\"special\">::</span><span class=\"identifier\">get_id</span><span class=\"special\">()</span></code>), and IDs can be used as keys in associative\n          containers, as they have the full set of comparison operators.\n        </li>\n<li class=\"listitem\">\n          Timeouts are now implemented using the Boost DateTime library, through\n          a typedef <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">system_time</span></code> for absolute timeouts, and\n          with support for relative timeouts in many cases. <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">xtime</span></code>\n          is supported for backwards compatibility only.\n        </li>\n<li class=\"listitem\">\n          Locks are implemented as publicly accessible templates <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">lock_guard</span></code>,\n          <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">unique_lock</span></code>, <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">shared_lock</span></code>,\n          and <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">upgrade_lock</span></code>, which are templated on\n          the type of the mutex. The <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_concepts.lockable\" title=\"Lockable Concept\"><code class=\"computeroutput\"><span class=\"identifier\">Lockable</span></code> concept</a> has been extended\n          to include publicly available <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_concepts.basic_lockable.lock\" title=\"m.lock();\"><code class=\"computeroutput\"><span class=\"identifier\">lock</span><span class=\"special\">()</span></code></a>\n          and <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_concepts.basic_lockable.unlock\" title=\"m.unlock();\"><code class=\"computeroutput\"><span class=\"identifier\">unlock</span><span class=\"special\">()</span></code></a>\n          member functions, which are used by the lock types.\n        </li>\n</ul></div>\n<h4>\n<a name=\"thread.changes.h22\"></a>\n      <span class=\"phrase\"><a name=\"thread.changes.breaking_changes\"></a></span><a class=\"link\" href=\"changes.html#thread.changes.breaking_changes\">Breaking\n      Changes</a>\n    </h4>\n<p>\n      The list below should cover all changes to the public interface which break\n      backwards compatibility.\n    </p>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \">\n<li class=\"listitem\">\n          <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.try_mutex\" title=\"Typedef try_mutex\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">try_mutex</span></code></a> has been removed, and\n          the functionality subsumed into <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.mutex\" title=\"Class mutex\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">mutex</span></code></a>. <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.try_mutex\" title=\"Typedef try_mutex\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">try_mutex</span></code></a> is left as a <code class=\"computeroutput\"><span class=\"keyword\">typedef</span></code>, but is no longer a separate class.\n        </li>\n<li class=\"listitem\">\n          <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.recursive_try_mutex\" title=\"Typedef recursive_try_mutex\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">recursive_try_mutex</span></code></a> has been removed,\n          and the functionality subsumed into <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.recursive_mutex\" title=\"Class recursive_mutex\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">recursive_mutex</span></code></a>. <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.recursive_try_mutex\" title=\"Typedef recursive_try_mutex\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">recursive_try_mutex</span></code></a> is left as\n          a <code class=\"computeroutput\"><span class=\"keyword\">typedef</span></code>, but is no longer\n          a separate class.\n        </li>\n<li class=\"listitem\">\n          <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">detail</span><span class=\"special\">::</span><span class=\"identifier\">thread</span><span class=\"special\">::</span><span class=\"identifier\">lock_ops</span></code> has been removed. Code that\n          relies on the <code class=\"computeroutput\"><span class=\"identifier\">lock_ops</span></code>\n          implementation detail will no longer work, as this has been removed, as\n          it is no longer necessary now that mutex types now have public <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_concepts.basic_lockable.lock\" title=\"m.lock();\"><code class=\"computeroutput\"><span class=\"identifier\">lock</span><span class=\"special\">()</span></code></a>\n          and <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_concepts.basic_lockable.unlock\" title=\"m.unlock();\"><code class=\"computeroutput\"><span class=\"identifier\">unlock</span><span class=\"special\">()</span></code></a>\n          member functions.\n        </li>\n<li class=\"listitem\">\n          <code class=\"computeroutput\"><span class=\"identifier\">scoped_lock</span></code> constructors\n          with a second parameter of type <code class=\"computeroutput\"><span class=\"keyword\">bool</span></code>\n          are no longer provided. With previous boost releases,\n<pre class=\"programlisting\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">mutex</span><span class=\"special\">::</span><span class=\"identifier\">scoped_lock</span> <span class=\"identifier\">some_lock</span><span class=\"special\">(</span><span class=\"identifier\">some_mutex</span><span class=\"special\">,</span><span class=\"keyword\">false</span><span class=\"special\">);</span></pre>\n          could be used to create a lock object that was associated with a mutex,\n          but did not lock it on construction. This facility has now been replaced\n          with the constructor that takes a <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">defer_lock_type</span></code>\n          as the second parameter:\n<pre class=\"programlisting\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">mutex</span><span class=\"special\">::</span><span class=\"identifier\">scoped_lock</span> <span class=\"identifier\">some_lock</span><span class=\"special\">(</span><span class=\"identifier\">some_mutex</span><span class=\"special\">,</span><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">defer_lock</span><span class=\"special\">);</span></pre>\n        </li>\n<li class=\"listitem\">\n          The <code class=\"computeroutput\"><span class=\"identifier\">locked</span><span class=\"special\">()</span></code>\n          member function of the <code class=\"computeroutput\"><span class=\"identifier\">scoped_lock</span></code>\n          types has been renamed to <a class=\"link\" href=\"synchronization.html#thread.synchronization.locks.unique_lock.owns_lock\" title=\"bool owns_lock() const\"><code class=\"computeroutput\"><span class=\"identifier\">owns_lock</span><span class=\"special\">()</span></code></a>.\n        </li>\n<li class=\"listitem\">\n          You can no longer obtain a <a class=\"link\" href=\"thread_management.html#thread.thread_management.thread\" title=\"Class thread\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">thread</span></code></a> instance representing the\n          current thread: a default-constructed <a class=\"link\" href=\"thread_management.html#thread.thread_management.thread\" title=\"Class thread\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">thread</span></code></a> object is not associated\n          with any thread. The only use for such a thread object was to support the\n          comparison operators: this functionality has been moved to <a class=\"link\" href=\"thread_management.html#thread.thread_management.thread.id\" title=\"Class boost::thread::id\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">thread</span><span class=\"special\">::</span><span class=\"identifier\">id</span></code></a>.\n        </li>\n<li class=\"listitem\">\n          The broken <code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">read_write_mutex</span></code> has been replaced with\n          <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.shared_mutex\" title=\"Class shared_mutex -- C++14\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">shared_mutex</span></code></a>.\n        </li>\n<li class=\"listitem\">\n          <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.mutex\" title=\"Class mutex\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">mutex</span></code></a> is now never recursive.\n          For Boost releases prior to 1.35 <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.mutex\" title=\"Class mutex\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">mutex</span></code></a> was recursive on Windows\n          and not on POSIX platforms.\n        </li>\n<li class=\"listitem\">\n          When using a <a class=\"link\" href=\"synchronization.html#thread.synchronization.mutex_types.recursive_mutex\" title=\"Class recursive_mutex\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">recursive_mutex</span></code></a> with a call to\n          <a class=\"link\" href=\"synchronization.html#thread.synchronization.condvar_ref.condition_variable_any.wait\" title=\"template&lt;typename lock_type&gt; void wait(lock_type&amp; lock)\"><code class=\"computeroutput\"><span class=\"identifier\">boost</span><span class=\"special\">::</span><span class=\"identifier\">condition_variable_any</span><span class=\"special\">::</span><span class=\"identifier\">wait</span><span class=\"special\">()</span></code></a>,\n          the mutex is only unlocked one level, and not completely. This prior behaviour\n          was not guaranteed and did not feature in the tests.\n        </li>\n</ul></div>\n</div>\n<table xmlns:rev=\"http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision\" width=\"100%\"><tr>\n<td align=\"left\"></td>\n<td align=\"right\"><div class=\"copyright-footer\">Copyright &#169; 2007 -11 Anthony Williams<br>Copyright &#169; 2011 -17 Vicente J. Botet Escriba<p>\n        Distributed under the Boost Software License, Version 1.0. (See accompanying\n        file LICENSE_1_0.txt or copy at <a href=\"http://www.boost.org/LICENSE_1_0.txt\" target=\"_top\">http://www.boost.org/LICENSE_1_0.txt</a>)\n      </p>\n</div></td>\n</tr></table>\n<hr>\n<div class=\"spirit-nav\">\n<a accesskey=\"p\" href=\"build.html\"><img src=\"../../../doc/src/images/prev.png\" alt=\"Prev\"></a><a accesskey=\"u\" href=\"../thread.html\"><img src=\"../../../doc/src/images/up.png\" alt=\"Up\"></a><a accesskey=\"h\" href=\"../index.html\"><img src=\"../../../doc/src/images/home.png\" alt=\"Home\"></a><a accesskey=\"n\" href=\"future.html\"><img src=\"../../../doc/src/images/next.png\" alt=\"Next\"></a>\n</div>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/boost_dll/limitations.html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\">\n<title>Limitations</title>\n<link rel=\"stylesheet\" href=\"../../../doc/src/boostbook.css\" type=\"text/css\">\n<meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.79.1\">\n<link rel=\"home\" href=\"../index.html\" title=\"The Boost C++ Libraries BoostBook Documentation Subset\">\n<link rel=\"up\" href=\"../boost_dll.html\" title=\"Chapter&#160;13.&#160;Boost.DLL\">\n<link rel=\"prev\" href=\"../boost/dll/experimental/import_mangled.html\" title=\"Function import_mangled\">\n<link rel=\"next\" href=\"f_a_q_.html\" title=\"F.A.Q.\">\n</head>\n<body bgcolor=\"white\" text=\"black\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\">\n<table cellpadding=\"2\" width=\"100%\"><tr>\n<td valign=\"top\"><img alt=\"Boost C++ Libraries\" width=\"277\" height=\"86\" src=\"../../../boost.png\"></td>\n<td align=\"center\"><a href=\"../../../index.html\">Home</a></td>\n<td align=\"center\"><a href=\"../../../libs/libraries.htm\">Libraries</a></td>\n<td align=\"center\"><a href=\"http://www.boost.org/users/people.html\">People</a></td>\n<td align=\"center\"><a href=\"http://www.boost.org/users/faq.html\">FAQ</a></td>\n<td align=\"center\"><a href=\"../../../more/index.htm\">More</a></td>\n</tr></table>\n<hr>\n<div class=\"spirit-nav\">\n<a accesskey=\"p\" href=\"../boost/dll/experimental/import_mangled.html\"><img src=\"../../../doc/src/images/prev.png\" alt=\"Prev\"></a><a accesskey=\"u\" href=\"../boost_dll.html\"><img src=\"../../../doc/src/images/up.png\" alt=\"Up\"></a><a accesskey=\"h\" href=\"../index.html\"><img src=\"../../../doc/src/images/home.png\" alt=\"Home\"></a><a accesskey=\"n\" href=\"f_a_q_.html\"><img src=\"../../../doc/src/images/next.png\" alt=\"Next\"></a>\n</div>\n<div class=\"section\">\n<div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\">\n<a name=\"boost_dll.limitations\"></a><a class=\"link\" href=\"limitations.html\" title=\"Limitations\">Limitations</a>\n</h2></div></div></div>\n<div class=\"toc\"><dl class=\"toc\">\n<dt><span class=\"section\"><a href=\"limitations.html#boost_dll.limitations.exporting_weak_symbols__fails_on_mingw__android_\">Exporting\n      weak symbols (Fails on MinGW, Android)</a></span></dt>\n<dt><span class=\"section\"><a href=\"limitations.html#boost_dll.limitations.user_defined_section_names__fails_on_sunos___oracle_solaris_studio_compilers_\">User\n      defined section names (Fails on SunOS + Oracle Solaris Studio Compilers)</a></span></dt>\n<dt><span class=\"section\"><a href=\"limitations.html#boost_dll.limitations.multithread\">Thread safe library\n      loading (Fails on FreeBSD, MacOS, iOS and some other)</a></span></dt>\n<dt><span class=\"section\"><a href=\"limitations.html#boost_dll.limitations.nested\">Nested Function Definitions</a></span></dt>\n</dl></div>\n<p>\n      Some platforms and compilers do not provide all the required functionality\n      to have a fully functional Boost.DLL. Such compilers are mentioned in this\n      section along with possible workarounds for those limitations.\n    </p>\n<div class=\"section\">\n<div class=\"titlepage\"><div><div><h3 class=\"title\">\n<a name=\"boost_dll.limitations.exporting_weak_symbols__fails_on_mingw__android_\"></a><a class=\"link\" href=\"limitations.html#boost_dll.limitations.exporting_weak_symbols__fails_on_mingw__android_\" title=\"Exporting weak symbols (Fails on MinGW, Android)\">Exporting\n      weak symbols (Fails on MinGW, Android)</a>\n</h3></div></div></div>\n<p>\n        Some versions of Android, <code class=\"computeroutput\"><span class=\"identifier\">MinGW</span></code>\n        and <code class=\"computeroutput\"><span class=\"identifier\">ld</span></code> on Windows platform\n        fail to mix <code class=\"computeroutput\"><span class=\"identifier\">__dllexport__</span></code>\n        and <code class=\"computeroutput\"><span class=\"identifier\">weak</span></code> attributes. This\n        leads us to situation, where we must explicitly specify translation unit\n        in which <code class=\"computeroutput\"><a class=\"link\" href=\"../BOOST_DLL_ALIAS.html\" title=\"Macro BOOST_DLL_ALIAS\">BOOST_DLL_ALIAS</a></code> is\n        instantiated, making all other <code class=\"computeroutput\"><a class=\"link\" href=\"../BOOST_DLL_ALIAS.html\" title=\"Macro BOOST_DLL_ALIAS\">BOOST_DLL_ALIAS</a></code>\n        declarations with that alias name an <code class=\"computeroutput\"><span class=\"keyword\">extern</span></code>\n        variable.\n      </p>\n<p>\n        Unit that must hold an instance of <code class=\"computeroutput\"><a class=\"link\" href=\"../BOOST_DLL_ALIAS.html\" title=\"Macro BOOST_DLL_ALIAS\">BOOST_DLL_ALIAS</a></code>\n        must define <code class=\"computeroutput\"><a class=\"link\" href=\"../BOOST_DLL_FORC_idp36961376.html\" title=\"Macro BOOST_DLL_FORCE_ALIAS_INSTANTIATION\">BOOST_DLL_FORCE_ALIAS_INSTANTIATION</a></code>\n        before including any of the Boost.DLL library headers.\n      </p>\n<p>\n        You may explicitly disable export of weak symbols using <code class=\"computeroutput\"><a class=\"link\" href=\"../BOOST_DLL_FORC_idp36963232.html\" title=\"Macro BOOST_DLL_FORCE_NO_WEAK_EXPORTS\">BOOST_DLL_FORCE_NO_WEAK_EXPORTS</a></code>.\n        This may be usefull for working around linker problems or to test your program\n        for compatability with linkers that do not support exporting weak symbols.\n      </p>\n</div>\n<div class=\"section\">\n<div class=\"titlepage\"><div><div><h3 class=\"title\">\n<a name=\"boost_dll.limitations.user_defined_section_names__fails_on_sunos___oracle_solaris_studio_compilers_\"></a><a class=\"link\" href=\"limitations.html#boost_dll.limitations.user_defined_section_names__fails_on_sunos___oracle_solaris_studio_compilers_\" title=\"User defined section names (Fails on SunOS + Oracle Solaris Studio Compilers)\">User\n      defined section names (Fails on SunOS + Oracle Solaris Studio Compilers)</a>\n</h3></div></div></div>\n<p>\n        Some platforms ignore section attributes, so that querying for a symbols\n        in a specified section using <code class=\"computeroutput\"><a class=\"link\" href=\"../boost/dll/library_info.html\" title=\"Class library_info\">boost::dll::library_info</a></code>\n        may return nothing.\n      </p>\n</div>\n<div class=\"section\">\n<div class=\"titlepage\"><div><div><h3 class=\"title\">\n<a name=\"boost_dll.limitations.multithread\"></a><a class=\"link\" href=\"limitations.html#boost_dll.limitations.multithread\" title=\"Thread safe library loading (Fails on FreeBSD, MacOS, iOS and some other)\">Thread safe library\n      loading (Fails on FreeBSD, MacOS, iOS and some other)</a>\n</h3></div></div></div>\n<p>\n        On some platforms <code class=\"computeroutput\"><span class=\"identifier\">dlopen</span></code>,<code class=\"computeroutput\"><span class=\"identifier\">dlclose</span></code> and some other functions assume\n        that they won't be called concurrently.\n      </p>\n<p>\n        Platforms that certaly have that issue are FreeBSD, MacOS, iOS.\n      </p>\n<p>\n        Platforms that certaly do not have such issue are Windows, Linux+glibc, Android,\n        QNX.\n      </p>\n<p>\n        Other platforms are under question. If you're using one of the platforms\n        that are not listed (for example Linux+busybox), you may run the <code class=\"computeroutput\"><span class=\"identifier\">shared_library_concurrent_load_test</span></code> test\n        to detect the issue:\n</p>\n<pre class=\"programlisting\"><span class=\"identifier\">cd</span> <span class=\"identifier\">boost_folder</span><span class=\"special\">/</span><span class=\"identifier\">libs</span><span class=\"special\">/</span><span class=\"identifier\">dll</span><span class=\"special\">/</span><span class=\"identifier\">test</span>\n<span class=\"special\">../../../</span><span class=\"identifier\">b2</span> <span class=\"special\">-</span><span class=\"identifier\">a</span> <span class=\"identifier\">shared_library_concurrent_load_test</span>\n</pre>\n<p>\n      </p>\n</div>\n<div class=\"section\">\n<div class=\"titlepage\"><div><div><h3 class=\"title\">\n<a name=\"boost_dll.limitations.nested\"></a><a class=\"link\" href=\"limitations.html#boost_dll.limitations.nested\" title=\"Nested Function Definitions\">Nested Function Definitions</a>\n</h3></div></div></div>\n<p>\n        If a function is defined inside the class-definition it may be interpreted\n        as always-inline which can lead to the function not being exported at all.\n        This does however differ between between compilers.\n      </p>\n</div>\n</div>\n<table xmlns:rev=\"http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision\" width=\"100%\"><tr>\n<td align=\"left\"></td>\n<td align=\"right\"><div class=\"copyright-footer\">Copyright &#169; 2014 Renato Tegon Forti, Antony Polukhin<br>Copyright &#169; 2015 Antony Polukhin<br>Copyright &#169; 2016 Antony Polukhin, Klemens Morgenstern<p>\n        Distributed under the Boost Software License, Version 1.0. (See accompanying\n        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n      </p>\n</div></td>\n</tr></table>\n<hr>\n<div class=\"spirit-nav\">\n<a accesskey=\"p\" href=\"../boost/dll/experimental/import_mangled.html\"><img src=\"../../../doc/src/images/prev.png\" alt=\"Prev\"></a><a accesskey=\"u\" href=\"../boost_dll.html\"><img src=\"../../../doc/src/images/up.png\" alt=\"Up\"></a><a accesskey=\"h\" href=\"../index.html\"><img src=\"../../../doc/src/images/home.png\" alt=\"Home\"></a><a accesskey=\"n\" href=\"f_a_q_.html\"><img src=\"../../../doc/src/images/next.png\" alt=\"Next\"></a>\n</div>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/boost_dll/f_a_q_.html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\">\n<title>F.A.Q.</title>\n<link rel=\"stylesheet\" href=\"../../../doc/src/boostbook.css\" type=\"text/css\">\n<meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.79.1\">\n<link rel=\"home\" href=\"../index.html\" title=\"The Boost C++ Libraries BoostBook Documentation Subset\">\n<link rel=\"up\" href=\"../boost_dll.html\" title=\"Chapter&#160;13.&#160;Boost.DLL\">\n<link rel=\"prev\" href=\"limitations.html\" title=\"Limitations\">\n<link rel=\"next\" href=\"design_rationale.html\" title=\"Design Rationale\">\n</head>\n<body bgcolor=\"white\" text=\"black\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\">\n<table cellpadding=\"2\" width=\"100%\"><tr>\n<td valign=\"top\"><img alt=\"Boost C++ Libraries\" width=\"277\" height=\"86\" src=\"../../../boost.png\"></td>\n<td align=\"center\"><a href=\"../../../index.html\">Home</a></td>\n<td align=\"center\"><a href=\"../../../libs/libraries.htm\">Libraries</a></td>\n<td align=\"center\"><a href=\"http://www.boost.org/users/people.html\">People</a></td>\n<td align=\"center\"><a href=\"http://www.boost.org/users/faq.html\">FAQ</a></td>\n<td align=\"center\"><a href=\"../../../more/index.htm\">More</a></td>\n</tr></table>\n<hr>\n<div class=\"spirit-nav\">\n<a accesskey=\"p\" href=\"limitations.html\"><img src=\"../../../doc/src/images/prev.png\" alt=\"Prev\"></a><a accesskey=\"u\" href=\"../boost_dll.html\"><img src=\"../../../doc/src/images/up.png\" alt=\"Up\"></a><a accesskey=\"h\" href=\"../index.html\"><img src=\"../../../doc/src/images/home.png\" alt=\"Home\"></a><a accesskey=\"n\" href=\"design_rationale.html\"><img src=\"../../../doc/src/images/next.png\" alt=\"Next\"></a>\n</div>\n<div class=\"section\">\n<div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\">\n<a name=\"boost_dll.f_a_q_\"></a><a class=\"link\" href=\"f_a_q_.html\" title=\"F.A.Q.\">F.A.Q.</a>\n</h2></div></div></div>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> Is Boost.DLL thread-safe?\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> Some platforms allow concurrent\n                calls to <code class=\"computeroutput\"><span class=\"identifier\">dlopen</span></code> like\n                functions. For those platforms Boost.DLL is safe in the manner as\n                all the C++ Standard Library containers are: it is safe to use different\n                instances of shared_library from different threads even if all the\n                instances loaded the same library. On other platforms it is not safe\n                to concurrently call any of the functions from Boost.DLL (even a\n                <code class=\"computeroutput\"><span class=\"identifier\">shared_library</span><span class=\"special\">::</span><span class=\"identifier\">location</span><span class=\"special\">()</span></code>\n                call triggers a race condition). See <a class=\"link\" href=\"limitations.html#boost_dll.limitations.multithread\" title=\"Thread safe library loading (Fails on FreeBSD, MacOS, iOS and some other)\">Limitations,\n                Thread safe library loading</a>.\n              </li></ul></div>\n        </li></ul></div>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> Why on Linux symbols from one\n          plugin are seen in another? Can't get symbol with same name from right\n          plugin!\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> You've run into the symbol\n                shadowing problem. Compile your plugins with \"-fvisibility=hidden\"\n                flag and take a look to the Tutorial section.\n              </li></ul></div>\n        </li></ul></div>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> How Unicode (Windows) is handled?\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> Boost.DLL supports Unicode,\n                so that you could provide Unicode paths to it.\n              </li></ul></div>\n        </li></ul></div>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> Can I open an executable file?\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> Yes, you can. Symbols need\n                be exported using in the executable using <code class=\"computeroutput\"><span class=\"identifier\">BOOST_SYMBOL_EXPORT</span></code>\n                or <code class=\"computeroutput\"><span class=\"identifier\">BOOST_DLL_ALIAS</span></code>.\n                You can call <code class=\"computeroutput\"><span class=\"identifier\">shared_library</span><span class=\"special\">(</span><span class=\"identifier\">program_location</span><span class=\"special\">())</span></code> to load yourself. Refer to the\n                Tutorial section for more info. You can also query executables, just\n                provide a path to the executable to <code class=\"computeroutput\"><span class=\"identifier\">library_info</span></code>\n                class.\n              </li></ul></div>\n        </li></ul></div>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> What if I specify wrong type\n          in <code class=\"computeroutput\"><span class=\"identifier\">shared_library</span><span class=\"special\">::</span><span class=\"identifier\">get</span><span class=\"special\">&lt;</span><span class=\"identifier\">T</span><span class=\"special\">&gt;</span></code>\n          or <code class=\"computeroutput\"><span class=\"identifier\">import</span><span class=\"special\">&lt;</span><span class=\"identifier\">T</span><span class=\"special\">&gt;</span></code>?\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> Usually you'll end up with\n                <code class=\"computeroutput\"><span class=\"identifier\">Segmentation</span> <span class=\"identifier\">Fault</span></code>.\n                However it is safe to make types more strict, for example making\n                <code class=\"computeroutput\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span></code>\n                from an <code class=\"computeroutput\"><span class=\"keyword\">int</span></code> will not\n                harm.\n              </li></ul></div>\n        </li></ul></div>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> Does your library guarantee\n          ABI stability of methods?\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> Library only guarantees\n                that alias names created using the <code class=\"computeroutput\"><span class=\"identifier\">BOOST_DLL_ALIAS</span></code>\n                macros will not change with the change of compiler or platform. You\n                must take care of functions ABI and API stability by your own.\n              </li></ul></div>\n        </li></ul></div>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> Are there any function signature\n          restrictions for the exported/imported functions?\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> No. You may import/export\n                functions with any signature and any return parameter.\n              </li></ul></div>\n        </li></ul></div>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> I have 2 plugins that use same\n          shared library. Would be the shared library loaded twice?\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> No. Pugins will share the\n                shared library instance.\n              </li></ul></div>\n        </li></ul></div>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> I have 2 plugins each of them\n          must work with it's own version of <code class=\"computeroutput\"><span class=\"identifier\">libsome_library</span></code>\n          shared library. How to achieve that?\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> Avoid such situations by\n                statically linking in the libsome_library into each plugin and loading\n                plugins with <code class=\"computeroutput\"><span class=\"identifier\">load_mode</span><span class=\"special\">::</span><span class=\"identifier\">rtld_deepbind</span></code>.\n              </li></ul></div>\n        </li></ul></div>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> How to load a shared object\n          from memory??\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> All existing OS avoid loading\n                shared libraries directly from userspace memory, so you'll find no\n                syscall for such case. Currently Boost.DLL provides no means for\n                honest loading shared objects from memory. This requires reimplementing\n                dynamic linker logic in userspace for all the platforms, which is\n                a huge amount of work and very error-prone. However working patches\n                are welcomed!\n              </li></ul></div>\n        </li></ul></div>\n<p>\n      Workaround would be to write plugin into a temporary file in RAM and load plugin\n      from it:\n</p>\n<pre class=\"programlisting\"><span class=\"preprocessor\">#include</span> <span class=\"special\">&lt;</span><span class=\"identifier\">boost</span><span class=\"special\">/</span><span class=\"identifier\">filesystem</span><span class=\"special\">.</span><span class=\"identifier\">hpp</span><span class=\"special\">&gt;</span>\n<span class=\"preprocessor\">#include</span> <span class=\"special\">&lt;</span><span class=\"identifier\">boost</span><span class=\"special\">/</span><span class=\"identifier\">dll</span><span class=\"special\">.</span><span class=\"identifier\">hpp</span><span class=\"special\">&gt;</span>\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"identifier\">boost</span><span class=\"special\">;</span>\n\n<span class=\"identifier\">dll</span><span class=\"special\">:</span><span class=\"identifier\">shared_library</span> <span class=\"identifier\">load_from_memory</span><span class=\"special\">(</span><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span><span class=\"special\">*</span> <span class=\"identifier\">data</span><span class=\"special\">,</span> <span class=\"identifier\">std</span><span class=\"special\">::</span><span class=\"identifier\">size_t</span> <span class=\"identifier\">size</span><span class=\"special\">,</span> <span class=\"keyword\">const</span> <span class=\"identifier\">filesystem</span><span class=\"special\">::</span><span class=\"identifier\">path</span><span class=\"special\">&amp;</span> <span class=\"identifier\">tmp_plugin_path</span> <span class=\"special\">=</span> <span class=\"identifier\">filesystem</span><span class=\"special\">::</span><span class=\"identifier\">unique_path</span><span class=\"special\">()</span> <span class=\"special\">/</span> <span class=\"string\">\"libplugin.so\"</span><span class=\"special\">)</span> <span class=\"special\">{</span>\n    <span class=\"keyword\">const</span> <span class=\"identifier\">filesystem</span><span class=\"special\">::</span><span class=\"identifier\">path</span> <span class=\"identifier\">plugin_location</span> <span class=\"special\">=</span> <span class=\"identifier\">filesystem</span><span class=\"special\">::</span><span class=\"identifier\">temp_directory_path</span><span class=\"special\">()</span> <span class=\"special\">/</span> <span class=\"identifier\">tmp_plugin_path</span><span class=\"special\">;</span>\n    <span class=\"identifier\">filesystem</span><span class=\"special\">::</span><span class=\"identifier\">create_directories</span><span class=\"special\">(</span><span class=\"identifier\">plugin_location</span><span class=\"special\">.</span><span class=\"identifier\">parent_path</span><span class=\"special\">());</span>\n    <span class=\"identifier\">filesystem</span><span class=\"special\">::</span><span class=\"identifier\">ofstream</span> <span class=\"identifier\">ofs</span><span class=\"special\">(</span><span class=\"identifier\">plugin_location</span><span class=\"special\">,</span> <span class=\"identifier\">std</span><span class=\"special\">::</span><span class=\"identifier\">ios</span><span class=\"special\">::</span><span class=\"identifier\">out</span><span class=\"special\">|</span><span class=\"identifier\">std</span><span class=\"special\">::</span><span class=\"identifier\">ios</span><span class=\"special\">::</span><span class=\"identifier\">bin</span><span class=\"special\">|</span><span class=\"identifier\">std</span><span class=\"special\">::</span><span class=\"identifier\">ios</span><span class=\"special\">::</span><span class=\"identifier\">trunc</span><span class=\"special\">);</span>\n    <span class=\"identifier\">ofs</span><span class=\"special\">.</span><span class=\"identifier\">write</span><span class=\"special\">(</span><span class=\"identifier\">data</span><span class=\"special\">,</span> <span class=\"identifier\">size</span><span class=\"special\">);</span>\n\n    <span class=\"keyword\">return</span> <span class=\"identifier\">dll</span><span class=\"special\">::</span><span class=\"identifier\">shared_library</span><span class=\"special\">(</span><span class=\"identifier\">plugin_location</span><span class=\"special\">);</span>\n<span class=\"special\">}</span>\n</pre>\n<p>\n    </p>\n<p>\n      But there's no guarantee that <code class=\"computeroutput\"><span class=\"identifier\">filesystem</span><span class=\"special\">::</span><span class=\"identifier\">temp_directory_path</span><span class=\"special\">()</span></code> will actually write to RAM, that's very platform\n      dependent.\n    </p>\n<pre class=\"programlisting\"></pre>\n<div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\">\n          <span class=\"bold\"><strong>Question:</strong></span> I have found a bug, how do I\n          notify?\n          <div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: circle; \"><li class=\"listitem\">\n                <span class=\"bold\"><strong>Answer:</strong></span> Create an <a href=\"https://github.com/apolukhin/Boost.DLL/issues\" target=\"_top\">issue\n                at GitHub</a> with a detailed description.\n              </li></ul></div>\n        </li></ul></div>\n</div>\n<table xmlns:rev=\"http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision\" width=\"100%\"><tr>\n<td align=\"left\"></td>\n<td align=\"right\"><div class=\"copyright-footer\">Copyright &#169; 2014 Renato Tegon Forti, Antony Polukhin<br>Copyright &#169; 2015 Antony Polukhin<br>Copyright &#169; 2016 Antony Polukhin, Klemens Morgenstern<p>\n        Distributed under the Boost Software License, Version 1.0. (See accompanying\n        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n      </p>\n</div></td>\n</tr></table>\n<hr>\n<div class=\"spirit-nav\">\n<a accesskey=\"p\" href=\"limitations.html\"><img src=\"../../../doc/src/images/prev.png\" alt=\"Prev\"></a><a accesskey=\"u\" href=\"../boost_dll.html\"><img src=\"../../../doc/src/images/up.png\" alt=\"Up\"></a><a accesskey=\"h\" href=\"../index.html\"><img src=\"../../../doc/src/images/home.png\" alt=\"Home\"></a><a accesskey=\"n\" href=\"design_rationale.html\"><img src=\"../../../doc/src/images/next.png\" alt=\"Next\"></a>\n</div>\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/boost/dll/load_mode/type.html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\">\n<title>Type type</title>\n<link rel=\"stylesheet\" href=\"../../../../../doc/src/boostbook.css\" type=\"text/css\">\n<meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.79.1\">\n<link rel=\"home\" href=\"../../../index.html\" title=\"The Boost C++ Libraries BoostBook Documentation Subset\">\n<link rel=\"up\" href=\"../../../boost_dll/reference.html#header.boost.dll.shared_library_load_mode_hpp\" title=\"Header &lt;boost/dll/shared_library_load_mode.hpp&gt;\">\n<link rel=\"prev\" href=\"../shared_library.html\" title=\"Class shared_library\">\n<link rel=\"next\" href=\"../experimental/smart_library.html\" title=\"Class smart_library\">\n</head>\n<body bgcolor=\"white\" text=\"black\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\">\n<table cellpadding=\"2\" width=\"100%\"><tr>\n<td valign=\"top\"><img alt=\"Boost C++ Libraries\" width=\"277\" height=\"86\" src=\"../../../../../boost.png\"></td>\n<td align=\"center\"><a href=\"../../../../../index.html\">Home</a></td>\n<td align=\"center\"><a href=\"../../../../../libs/libraries.htm\">Libraries</a></td>\n<td align=\"center\"><a href=\"http://www.boost.org/users/people.html\">People</a></td>\n<td align=\"center\"><a href=\"http://www.boost.org/users/faq.html\">FAQ</a></td>\n<td align=\"center\"><a href=\"../../../../../more/index.htm\">More</a></td>\n</tr></table>\n<hr>\n<div class=\"spirit-nav\">\n<a accesskey=\"p\" href=\"../shared_library.html\"><img src=\"../../../../../doc/src/images/prev.png\" alt=\"Prev\"></a><a accesskey=\"u\" href=\"../../../boost_dll/reference.html#header.boost.dll.shared_library_load_mode_hpp\"><img src=\"../../../../../doc/src/images/up.png\" alt=\"Up\"></a><a accesskey=\"h\" href=\"../../../index.html\"><img src=\"../../../../../doc/src/images/home.png\" alt=\"Home\"></a><a accesskey=\"n\" href=\"../experimental/smart_library.html\"><img src=\"../../../../../doc/src/images/next.png\" alt=\"Next\"></a>\n</div>\n<div class=\"refentry\">\n<a name=\"boost.dll.load_mode.type\"></a><div class=\"titlepage\"></div>\n<div class=\"refnamediv\">\n<h2><span class=\"refentrytitle\">Type type</span></h2>\n<p>boost::dll::load_mode::type</p>\n</div>\n<h2 xmlns:rev=\"http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision\" class=\"refsynopsisdiv-title\">Synopsis</h2>\n<div xmlns:rev=\"http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision\" class=\"refsynopsisdiv\"><pre class=\"synopsis\"><span class=\"comment\">// In header: &lt;<a class=\"link\" href=\"../../../boost_dll/reference.html#header.boost.dll.shared_library_load_mode_hpp\" title=\"Header &lt;boost/dll/shared_library_load_mode.hpp&gt;\">boost/dll/shared_library_load_mode.hpp</a>&gt;\n\n</span>\n<span class=\"keyword\">enum</span> <span class=\"identifier\">type</span> <span class=\"special\">{</span> <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.default_mode\">default_mode</a>, <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.dont_resolve_dll_references\">dont_resolve_dll_references</a>, \n            <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.load_ignore_code_authz_level\">load_ignore_code_authz_level</a>, <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.load_with_altered_search_path\">load_with_altered_search_path</a>, \n            <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.rtld_lazy\">rtld_lazy</a>, <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.rtld_now\">rtld_now</a>, <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.rtld_global\">rtld_global</a>, <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.rtld_local\">rtld_local</a>, <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.rtld_deepbind\">rtld_deepbind</a>, \n            <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.append_decorations\">append_decorations</a>, <a class=\"link\" href=\"type.html#boost.dll.load_mode.type.search_system_folders\">search_system_folders</a> <span class=\"special\">}</span><span class=\"special\">;</span></pre></div>\n<div class=\"refsect1\">\n<a name=\"id-1.3.14.8.2.6.4.4\"></a><h2>Description</h2>\n<p>Library load modes.</p>\n<p>Each of system family provides own modes. Flags not supported by a particular platform will be silently ignored.</p>\n<p>For a detailed description of platform specific options see: <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx\" target=\"_top\">Windows specific options</a>, <a href=\"http://pubs.opengroup.org/onlinepubs/000095399/functions/dlopen.html\" target=\"_top\">POSIX specific options</a>. </p>\n<div class=\"variablelist\"><dl class=\"variablelist compact\">\n<dt><span class=\"term\"><code class=\"computeroutput\">default_mode</code><a name=\"boost.dll.load_mode.type.default_mode\"></a></span></dt>\n<dd><p>Default open mode. See the <span class=\"bold\"><strong>Default:</strong></span> comments below to find out the flags that are enabled by default. </p></dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">dont_resolve_dll_references</code><a name=\"boost.dll.load_mode.type.dont_resolve_dll_references\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> Windows</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> disabled</p>\n<p>If this value is used, and the executable module is a DLL, the system does not call DllMain for process and thread initialization and termination. Also, the system does not load additional executable modules that are referenced by the specified module.</p>\n<p>Note Do not use this value; it is provided only for backward compatibility. If you are planning to access only data or resources in the DLL, use LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE or LOAD_LIBRARY_AS_IMAGE_RESOURCE or both. </p>\n</dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">load_ignore_code_authz_level</code><a name=\"boost.dll.load_mode.type.load_ignore_code_authz_level\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> Windows</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> disabled</p>\n<p>If this value is used, the system does not check AppLocker rules or apply Software Restriction Policies for the DLL. </p>\n</dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">load_with_altered_search_path</code><a name=\"boost.dll.load_mode.type.load_with_altered_search_path\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> Windows</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> disabled</p>\n<p>If this value is used and lpFileName specifies an absolute path, the system uses the alternate file search strategy.</p>\n<p>This value cannot be combined with any LOAD_LIBRARY_SEARCH flag. </p>\n</dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">rtld_lazy</code><a name=\"boost.dll.load_mode.type.rtld_lazy\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> POSIX</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> enabled</p>\n<p>Relocations shall be performed at an implementation-defined time, ranging from the time of the dlopen() call until the first reference to a given symbol occurs.</p>\n<p>Specifying RTLD_LAZY should improve performance on implementations supporting dynamic symbol binding as a process may not reference all of the functions in any given object. And, for systems supporting dynamic symbol resolution for normal process execution, this behavior mimics the normal handling of process execution. </p>\n</dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">rtld_now</code><a name=\"boost.dll.load_mode.type.rtld_now\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> POSIX</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> disabled</p>\n<p>All necessary relocations shall be performed when the object is first loaded. This may waste some processing if relocations are performed for functions that are never referenced. This behavior may be useful for plugins that need to know as soon as an object is loaded that all symbols referenced during execution are available. </p>\n</dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">rtld_global</code><a name=\"boost.dll.load_mode.type.rtld_global\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> POSIX</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> disabled</p>\n<p>The object's symbols shall be made available for the relocation processing of any other object. In addition, symbol lookup using dlopen(0, mode) and an associated dlsym() allows objects loaded with this mode to be searched. </p>\n</dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">rtld_local</code><a name=\"boost.dll.load_mode.type.rtld_local\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> POSIX</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> enabled</p>\n<p>The object's symbols shall not be made available for the relocation processing of any other object.</p>\n<p>This is a default Windows behavior that can not be changed. </p>\n</dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">rtld_deepbind</code><a name=\"boost.dll.load_mode.type.rtld_deepbind\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> POSIX (requires glibc &gt;= 2.3.4)</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> disabled</p>\n<p>The object will use its own symbols in preference to global symbols with the same name contained in libraries that have already been loaded. This flag is not specified in POSIX.1-2001. </p>\n</dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">append_decorations</code><a name=\"boost.dll.load_mode.type.append_decorations\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> Windows, POSIX</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> disabled</p>\n<p>Append a platform specific extension and prefix to shared library filename before trying to load it. If load attempt fails, try to load with exactly specified name.</p>\n<p><span class=\"bold\"><strong>Example:</strong></span> </p>\n<pre class=\"programlisting\"><span class=\"comment\">// Opens `./my_plugins/plugin1.dll` on Windows, `./my_plugins/libplugin1.so` on Linux, `./my_plugins/libplugin1.dylib` on MacOS.</span>\n<span class=\"comment\">// If that fails, loads `./my_plugins/plugin1`</span>\n<a class=\"link\" href=\"../shared_library.html\" title=\"Class shared_library\">boost::dll::shared_library</a> <span class=\"identifier\">lib</span><span class=\"special\">(</span><span class=\"string\">\"./my_plugins/plugin1\"</span><span class=\"special\">,</span> <span class=\"identifier\">load_mode</span><span class=\"special\">::</span><span class=\"identifier\">append_decorations</span><span class=\"special\">)</span><span class=\"special\">;</span>\n</pre>\n<p> </p>\n</dd>\n<dt><span class=\"term\"><code class=\"computeroutput\">search_system_folders</code><a name=\"boost.dll.load_mode.type.search_system_folders\"></a></span></dt>\n<dd>\n<p><span class=\"bold\"><strong>Platforms:</strong></span> Windows, POSIX</p>\n<p><span class=\"bold\"><strong>Default:</strong></span> disabled</p>\n<p>Allow loading from system folders if path to library contains no parent path. </p>\n</dd>\n</dl></div>\n</div>\n</div>\n<table xmlns:rev=\"http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision\" width=\"100%\"><tr>\n<td align=\"left\"></td>\n<td align=\"right\"><div class=\"copyright-footer\">Copyright &#169; 2014 Renato Tegon Forti, Antony Polukhin<br>Copyright &#169; 2015 Antony Polukhin<br>Copyright &#169; 2016 Antony Polukhin, Klemens Morgenstern<p>\n        Distributed under the Boost Software License, Version 1.0. (See accompanying\n        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n      </p>\n</div></td>\n</tr></table>\n<hr>\n<div class=\"spirit-nav\">\n<a accesskey=\"p\" href=\"../shared_library.html\"><img src=\"../../../../../doc/src/images/prev.png\" alt=\"Prev\"></a><a accesskey=\"u\" href=\"../../../boost_dll/reference.html#header.boost.dll.shared_library_load_mode_hpp\"><img src=\"../../../../../doc/src/images/up.png\" alt=\"Up\"></a><a accesskey=\"h\" href=\"../../../index.html\"><img src=\"../../../../../doc/src/images/home.png\" alt=\"Home\"></a><a accesskey=\"n\" href=\"../experimental/smart_library.html\"><img src=\"../../../../../doc/src/images/next.png\" alt=\"Next\"></a>\n</div>\n</body>\n</html>\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/function/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_legend_phoenix.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_legend_cxx11_lambda.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_legend_global_functor.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_gcc_cxx11_debug.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_gcc_release.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_msvc_release.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_legend_local_function.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_legend_local_function_inline.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_gcc_cxx11_release.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile.xls",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_legend_local_functor.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_gcc_debug.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/local_function/example/profile_msvc_debug.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/scope_exit/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/example/Jamfile.v2",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/test/Jamfile.v2",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/memory_msvc_80.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/next.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/time_gcc_344.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/prev.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/memory_gcc_344.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/time_msvc_80.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/memory.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/style.css",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/html.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/flyweight/doc/tutorial/flyweight_rep.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/ptr_container/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/ptr_container/doc/ptr_container.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/ptr_container/doc/reversible_ptr_container.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/ptr_container/doc/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/ptr_container/doc/todo.txt",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/system/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/system/doc/reference.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/system/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/concept_check/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/exception/doc/shade-r.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/exception/doc/valid-css.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/exception/doc/shade-l.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/exception/doc/valid-xhtml.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/thread/test/test_9303.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/thread/test/Carbon.r",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/thread/test/test.mcp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/thread/test/sync/futures/make_ready_future_pass.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/thread/doc/condition_variables.qbk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/io/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/io/doc/quoted_manip.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/algorithm/string/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/single_threaded.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/4_threaded.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/bits_per_byte.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/entropy.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/html4_symbols.qbk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/images/pdqsort.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/images/single_threaded.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/images/Thumbs.db",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/images/4_threaded.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/images/bits_per_byte.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/images/entropy.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/papers/block_indirect_sort_en.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/papers/original_spreadsort06_2002.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/papers/flat_stable_sort_eng.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/osx_float_sort.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/windows_integer_sort.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/windows_string_sort.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/osx_string_sort.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/osx_integer_sort.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/windows_float_sort.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/windows_integer_sort_files/image001.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/windows_integer_sort_files/image002.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/osx_integer_sort_files/image001.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/osx_integer_sort_files/image002.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/windows_string_sort_files/image001.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/osx_string_sort_files/image001.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/windows_float_sort_files/image001.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/windows_float_sort_files/image002.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/osx_float_sort_files/image001.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/graph/osx_float_sort_files/image002.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2splitbar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/nav_g.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2pnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/splitbar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/tab_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/tab_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2mlastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2folderopen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/tab_a.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2plastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2vertline.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2lastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/folderopen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/sync_on.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2link.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/nav_f.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/folderclosed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/arrowdown.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/tab_b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/open.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2folderclosed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/bdwn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/arrowright.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/bc_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/nav_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/sync_off.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2mnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/closed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/doxygen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/ftv2node.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/search/close.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/search/search_m.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/search/search_r.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/search/mag_sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/doxygen/html/search/search_l.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/s_diff.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/m_limit.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/smax_total_iters.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/lsd.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/iter_combined.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/smean.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/gte_2k.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/introsort.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/worst1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/nincr.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/s_max.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/k_remaining.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/msum.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/srange.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/incr_compare.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/min_n_orig.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/compare_asymptote.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/k1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/gt_smin.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/min_n.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/k_m.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/bin_limit.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/radix_iters.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/string_sort.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/Thumbs.db",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/k_smax_final.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/compare_combined.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/kincr.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/s_max_iters.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/asymptote.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/k_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/k_start.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/sminlbs1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/comp_sub.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/compare_simplified.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/k_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/smin_lbs.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/min1_comparison.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/bins.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/bigm.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/n_gt_smin.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/lt_smin.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/km.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/k_smax.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/x2plus1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/ktop.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/worst.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/fallback.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/smin1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/lsd_offset.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/min_comparison.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/s_min.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/lte_smin.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/sort/doc/equation/mrange.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/uuid/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/uuid/doc/uuid.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/parameter/doc/html/vellipsis.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/atomic/doc/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/debugger6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/floating_point_eg3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/debugger7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/debugger2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/floating_point_eg2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/debugger4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/debugger3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/debugger1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/debugger5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/floating_point_eg1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multiprecision/doc/html4_symbols.qbk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/contents.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/miscellanea.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/styles.css",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/bibliography.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/syntax.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/terms.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/top.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/data.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/examples.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/title.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/acknowledgements.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics/evaluated_slots.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics/incompatible.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics/reentrancy.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics/local_iteration.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics/file_iteration.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics/variadic_macros.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics/motivation.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics/techniques.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/topics/problems.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/assert_msg.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/debug.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/expand.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repeat_from_to_3rd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/min.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/enum_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/iteration.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/inc.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/stringize.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repeat_2nd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/empty.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/variadic.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/enum_shifted_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/comma_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/enum_shifted.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/iterate.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/max.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/slot.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/dec.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/selection.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repeat_from_to_2nd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/wstringize.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/control.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/expr_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/punctuation.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/comma.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/library.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/cat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repeat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/identity.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repeat_3rd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/epwd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/while.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/limits.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repeat_from_to.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/arithmetic.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/epwad.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/facilities.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/for.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/preprocessor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/comparison.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/append.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/for_each_i.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/reverse.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/for_each_product.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/for_each.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/rest_n.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/transform.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/fold_left.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/filter.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/fold_right.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/cat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/adt.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/at.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/first_n.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/list/to_tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/config/variadics.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/config/limits.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/for_each_i.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/remove.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/insert.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/reverse.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/to_array.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/pop_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/for_each_product.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/replace.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/elem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/pop_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/seq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/for_each.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/rest_n.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/transform.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/fold_left.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/push_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/subseq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/filter.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/fold_right.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/push_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/cat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/to_list.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/first_n.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/seq/to_tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/arithmetic/inc.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/arithmetic/mul.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/arithmetic/sub.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/arithmetic/dec.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/arithmetic/add.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/arithmetic/div.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/arithmetic/mod.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/variadic/to_seq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/variadic/to_array.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/variadic/size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/variadic/elem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/variadic/to_list.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/variadic/to_tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/facilities/expand.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/facilities/apply.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/facilities/intercept.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/facilities/empty.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/facilities/overload.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/facilities/identity.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/remove.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/to_seq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/insert.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/reverse.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/to_array.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/pop_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/replace.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/elem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/pop_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/eat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/push_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/rem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/push_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/to_list.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/tuple/enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/etbp.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/enum_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/enum_trailing_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/enum_binary_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/esbp.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/deduce_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/enum_shifted_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/enum_shifted.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/enum_trailing.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/deduce_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/repeat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/epwd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/repeat_from_to.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/epwad.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/for.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/repetition/enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/selection/min.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/selection/max.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/bitnor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/nor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/bitxor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/bitand.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/not.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/and.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/or.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/compl.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/bitor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/bool.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/logical/xor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/control/if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/control/iif.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/control/deduce_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/control/expr_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/control/while.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/control/expr_iif.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/iteration/local.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/iteration/iterate.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/iteration/self.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/comparison/greater.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/comparison/less.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/comparison/greater_equal.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/comparison/not_equal.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/comparison/equal.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/comparison/less_equal.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/remove.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/to_seq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/insert.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/reverse.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/pop_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/replace.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/elem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/pop_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/push_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/push_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/data.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/to_list.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/array/to_tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/debug/assert.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/debug/line.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/punctuation/is_begin_parens.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/punctuation/paren_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/punctuation/remove_parens.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/punctuation/comma_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/punctuation/comma.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/punctuation/paren.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/slot/slot.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/headers/slot/counter.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/data/lists.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/data/tuples.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/data/arrays.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/data/sequences.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/terms/named_external.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/terms/evaluated.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/variadic_to_tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/assert_msg.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/esbpz.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_shifted_params_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_first_n.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_to_list.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/lparen_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_to_tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/variadic_to_array.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_right_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/add_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_tail.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_slot_sig.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_params_with_a_default.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_right_2nd_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_transform.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/lparen.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_right_2nd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/expand.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_enum_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/is_begin_parens.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_to_seq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_slot_count.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_left.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/etbp.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/relative_flags.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_left_d_old.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_filter.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/bitnor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/apply.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/iteration_depth.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/greater.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/frame_flags.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/intercept.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/less.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_pop_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_pop_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/iif.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/greater_equal.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_remove.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_to_list.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_push_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/variadic_to_seq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/assign_slot.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_to_list.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_from_to_3rd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/greater_equal_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/etbpz.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_iteration_dim.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/assert.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_pop_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_iteration.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_push_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/min.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/include_self.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_seq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_to_seq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/variadic_to_list.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_transform_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_rem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_left_2nd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/iteration.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_trailing_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_fold_right.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_remove.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_push_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/inc.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_binary_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_right_d_old.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_nil.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/stringize.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/max_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_first.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_2nd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_to_array.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/mul.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_rest.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/equal_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/nor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_reverse.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/empty.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_remove.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/less_equal_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/line.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/bitxor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_reverse_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/bitand.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_pop_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/iteration_start.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_reverse.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_while.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/overload.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_trailing_params_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_pop_front_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/local_iterate.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/deduce_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/variadics.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_z_macros.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_rest_n.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_replace.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_cons.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/greater_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/not.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_dim.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_push_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_replace_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/esbp.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/is_selfish.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/for_r_macros.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_reverse.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/deduce_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_filter_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/remove_parens.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_shifted_params.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_insert.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/and.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_rem_ctor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/min_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_1st.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_transform_s.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_first_n.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_elem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/sub.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_for_each_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/not_equal_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_remove_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/iteration_params_x.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_fold_left.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_insert_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/frame_iteration.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/comma_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_pop_front_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_for_each_i_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_rest_n.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_rest_n_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_shifted.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/iterate.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_for_each_product_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/mod_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_trailing_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_to_array.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/frame_finish.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_at_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/max.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_pop_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/or.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/slot.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_to_tuple_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/nil.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/dec.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_left_2nd_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/counter.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_trailing.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/frame_start.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/less_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_cat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_mag.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_to_tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_from_to_2nd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_cat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/wstringize.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_size_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_head.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/update_counter.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/indirect_self.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_nil.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_eat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/expr_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/local_macro.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_from_to_1st.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_for_each_product.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/iteration_finish.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/iteration_limits.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_variadic.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/variadic_size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/for_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/relative_iteration.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/relative_finish.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_filter_s.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_is_nil.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/comma.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_shifted_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_right.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/deduce_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/relative_start.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_params_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_from_to_d_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_replace.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_first_n_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_subseq.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_fold_left_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/div_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_elem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_cat_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/not_equal.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_reverse.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/cat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/local_limits.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_for_each_product_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/value.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_for_each_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/while_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_remove_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_append.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_fold_left_s.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_cat_s.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_replace_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/add.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/identity.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_push_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/compl.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/filename_x.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/variadic_elem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_replace.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_3rd.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/while.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_insert.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_is_cons.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_from_to.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/div.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_pop_back_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/bitor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/expr_iif.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_reverse_s.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_append_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/equal.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_pop_back.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_filter.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_transform.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_for_each_i.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_binary_params_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_data.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/while_d_macros.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/mod.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_fold_right_s.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/for.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/rparen.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/less_equal.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_pop_back_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum_params_with_defaults.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_from_to_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/is_iterating.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_for_each_i.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_elem.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_repeat.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/bool.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/sub_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_push_front.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/array_to_tuple.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_size.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_insert_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_for_each.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/tuple_enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/repeat_from_to_z.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_at.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/seq_insert.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/rparen_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_for_each_product.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/enum.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/mul_d.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/iteration_flags.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_for_each_i_r.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/limit_for.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/xor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/config_extended_line_info.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/preprocessor/doc/ref/list_for_each.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/test/testwave/testfiles/t_1_035.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/test/testwave/testfiles/t_1_034.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/token_ids.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/l_arr_disabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/bkd.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/uc.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/l_arr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/bullet.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/bkd2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/wave.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/u_arr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/r_arr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/wave/doc/theme/r_arr_disabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/foldl_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/max_length_gcc_4.8.5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/foldl_diag2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/foldl_reject_incomplete_start_with_parser_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/repeated_diag0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/repeated_diag3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/foldl_start_with_parser_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/repeated_reject_incomplete_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/number_gcc_4.8.5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/foldr_start_with_parser_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/folds.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/foldr_reject_incomplete_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/foldr_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/length128_gcc_4.8.5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/repeated_diag2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/foldl_reject_incomplete_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/repeated_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/metaparse/doc/images/tutorial_diag9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/serialization/example/demo_output.txt",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/serialization/test/config_test.o",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/serialization/doc/dot.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/serialization/doc/minus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/serialization/doc/plus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine/doc/images/same_fringe.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine/doc/images/same_fringe.dia",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine/doc/images/foo_bar_seq.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine/doc/images/foo_bar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine/doc/images/event_model.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine/doc/images/event_model.dia",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine/doc/images/foo_bar_seq.dia",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/pool.qbk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/pool.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/images/mb2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/images/pc3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/images/pc4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/images/pc2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/images/mb1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/images/mb4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/images/pc1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/images/pc5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/pool/doc/images/mb3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/signals2/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/any/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/icons/Boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/nav_g.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/splitbar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/tab_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/tab_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/tab_a.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/structboost_1_1hana_1_1tuple.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/folderopen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/sync_on.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/nav_f.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/folderclosed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/arrowdown.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/tab_b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/open.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/bdwn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/arrowright.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/bc_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/nav_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/sync_off.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/Boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/closed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/doxygen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/search/close.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/search/search_m.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/search/search_r.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/search/mag_sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hana/doc/html/search/search_l.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/format/example/sample_new_features.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/format/benchmark/results.txt",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/qvm/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/qvm/doc/shade-r.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/qvm/doc/valid-css.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/qvm/doc/shade-l.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/qvm/doc/valid-xhtml.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/test/algorithms/overlay/get_turn_info.xls",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/other/logo/logo_bkg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/other/logo/DENMARK.TTF",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/other/logo/logo64x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/other/logo/logo16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/other/logo/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/other/logo/logo128x128.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/other/logo/logo400x400.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/svg_simplify_road.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/svg_simplify_country.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/ok.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/nyi.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/build_ovl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/intersects_poly.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/intersects_mpoly.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_pt_intersects_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/knn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/intersects.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/path.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/build_non_ovl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rstar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/intersects_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_seg_knn_pt.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/intersects_linestring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/bulk.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_seg_knn_seg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_seg_knn_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/knn_pt_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/linear.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/within.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_pt.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_seg_disjoint_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_pt_disjoint_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/query_non_ovl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/query_ovl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_seg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_seg_intersects_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_pt_knn_pt.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/knn_box_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/disjoint.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_pt_knn_seg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/rtree_pt_knn_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/knn_seg_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/quadratic.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/overlaps.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/index/rtree/intersects_segment.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/io/svg_mapper.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/strategies/buffer_join_round.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/strategies/buffer_end_round.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/strategies/buffer_distance_symmetric.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/strategies/buffer_distance_asymmetric.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/strategies/buffer_end_flat.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/strategies/buffer_join_miter.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/strategies/buffer_point_square.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/strategies/buffer_point_circle.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/is_simple_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/buffer_multi_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/envelope.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/union.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/buffer_linestring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/centroid.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/return_envelope.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/within.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/buffer_multi_point.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/difference_a.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/is_valid_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/convex_hull.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/sym_difference.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/is_valid_failure_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/buffer_strategies.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/difference_b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/html/img/algorithms/intersection.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/set_int_right_union_left.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/07_graph_route_example_text.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/robust_triangles.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/within_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/combine_box_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/linestring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/centroid_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_intersection_ring_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_simplify_road.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/within_polygon_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_union_polygon_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_union_ring_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/07_graph_route_example_svg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/envelope_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/speed_comparison.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/simplify_linestring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/simplify_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_intersection_polygon_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/convexhull_polygon_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/x01_qt_example_output.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/robust_triangle_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/within_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/robust_stars.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/x02_numeric_adaptor_example_output.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_convex_hull_cities.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/output_main.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_union_ring_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_intersection_roads.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_simplify_country.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/clip_linestring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_intersection_ring_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/set_a_ac.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_intersection_polygon_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/centroid_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/set_adapt_turns.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_intersection_countries.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/robust_float.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/clip_segment_segment.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_union_polygon_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/clip_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/combine_box_point.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/union_box_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/svg_convex_hull_country.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_input/images/multi_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/set_int_right_union_left.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/07_graph_route_example_text.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/within_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/tab_l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/combine_box_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/centroid_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_intersection_ring_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_simplify_road.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_union_polygon_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_union_ring_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/07_graph_route_example_svg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/envelope_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/simplify_linestring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_intersection_polygon_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/x01_qt_example_output.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/within_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/x02_numeric_adaptor_example_output.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_convex_hull_cities.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/output_main.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_union_ring_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_intersection_roads.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_simplify_country.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/clip_linestring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_intersection_ring_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/set_a_ac.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/tab_b.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_intersection_polygon_box.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/centroid_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/set_adapt_turns.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_intersection_countries.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_union_polygon_ring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/clip_polygon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/combine_box_point.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/tab_r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/svg_convex_hull_country.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/images/ggl-logo-big.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/images/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/images/proposed_boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/geometry/doc/doxy/doxygen_output/html/images/accepted_by_boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/fiber/doc/NUMA.dia",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/fiber/doc/NUMA.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/fiber/doc/uml/fiber.vpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/fiber/doc/uml/fiber.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/icl/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/icl/doc/boostcon09/intro_to_itl_3_1_0.odp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/icl/doc/boostcon09/intro_to_itl_3_0_0_bc09.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/icl/doc/boostcon09/intro_to_itl.odp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/icl/doc/boostcon09/intro_to_itl_3_1_0.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/icl/doc/boostcon09/intro_to_itl.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/icl/doc/boostcon09/intro_to_itl_3_0_0_bc09.odp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/images/opt_align4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/images/opt_align2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/images/opt_align3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/images/opt_align1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/html/images/opt_align4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/html/images/opt_align2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/html/images/opt_align3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/html/images/opt_align1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/html/images/space.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/optional/doc/html/images/callouts/R.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/adjacency_iterator.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/isomorphism-impl.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/bibliography.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/planar_canonical_ordering.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/sloan_ordering.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/is_kuratowski_subgraph.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/profile.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/tc-out.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/circle_layout.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/iscope99.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/cochet-terrasson98numerical.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/quick_tour.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/dasdan-dac99.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/layout_tolerance.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/sloan_start_end_vertices.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/bgl-cover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/AddEdgeVisitor.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/tc.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/inv_adjacency_iterator.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/wavefront.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/maximum_matching.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/PlanarEmbedding.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/stoer_wagner_imgs/digraph1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/stoer_wagner_imgs/stoer_wagner-example.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/stoer_wagner_imgs/stoer_wagner-example-c1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/stoer_wagner_imgs/digraph1-min-cut.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/stoer_wagner_imgs/f79.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/stoer_wagner_imgs/8b7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/stoer_wagner_imgs/stoer_wagner.cpp.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/stoer_wagner_imgs/6e4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/stoer_wagner_imgs/stoer_wagner-example-min-cut.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/dfs_visitor.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/ga-square.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/bk_max_flow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/undir-adj-matrix.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/sequential_vertex_coloring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/straight_line_drawing.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/adj_matrix.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/visitor.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/disjoint_set_family.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/forward_or_cross_edges.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/maximum-match.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/back_edges.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/search_states.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/dominator-tree2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/ga-heart.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/stl_iter.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/biconnected.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/planar_plane_straight_line.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/file_dep.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/maximal-match.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/adj_list.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/rel_betweenness_centrality.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/kolmogorov_max_flow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/subgraph-tree.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/max-flow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/sigma_stv.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/graph_search.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/adj-matrix-graph3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/grid_graph_indexed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/ga-circle.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/undigraph.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/adj-list2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/undir-adj-matrix2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/python_ico.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/undir-adj-matrix-graph3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/adj-list.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/digraph.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/bfs_family.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/edge_list.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/python.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/undir-adj-list.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/central_point_dominance.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/v_star.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/dfs_example.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/concepts.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/very_complex_graph.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/face_traversal_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/dfs_family.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/embedding_illustration.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/wheel_graph.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/adj-matrix-graph.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/quick_start.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/face_illustration.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/grid_graph_unwrapped.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/adj-matrix.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/grid_graph_wrapped.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/undir-adj-matrix-graph.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/subgraph.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/dfs.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/mcr.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/undir-adj-matrix-graph2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/canonical_ordering.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/dominator-tree1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/tree_edges.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/bfs_example.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/adj-matrix-graph2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/betweenness_centrality.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/analogy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/bfs_visitor.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/cr.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/knights_tour.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/sigma_st.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph/doc/figs/k_5_and_k_3_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/example/Jamfile.v2",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/test/Jamfile.v2",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/style.css",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/poly_collection_iterators.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_any_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_any_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_base_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/segment_map.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_base_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_base_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_base_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_base_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_base_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_any_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_function_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_function_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_function_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_base_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/ptr_vector.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_function_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_any_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_base_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_function_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_function_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_function_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_any_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_function_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/insert_any_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_any_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/poly_collection/doc/img/for_each_any_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpi/doc/netpipe.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/assert/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/assign/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/assign/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/change_log.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/references.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/preface.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/l_arr_disabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/smiley.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/note.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/bulb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/bkd.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/spirit.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/l_arr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/bullet.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/arrow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/bkd2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/u_arr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/lens.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/r_arr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/r_arr_disabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/phoenix/doc/theme/alert.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/functional.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/dynamic_parsers.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/primitives.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/scanner1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/l_arr_disabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/intro2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/note.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/subrule1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/bulb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/intro6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/bkd.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/spirit.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/l_arr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/closure1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/trees4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/intro7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/bullet.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/intro3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/lambda.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/organization1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/intro1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/arrow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/trees3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/bkd2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/trees1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/u_arr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/lens.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/intro4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/intro5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/error_handling.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/r_arr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/r_arr_disabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/alert.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/classic/doc/theme/trees2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/qi/no_case.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/qi/char_class.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/qi/encoding.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/qi/rule4.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/karma/regression_real_0.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/karma/pattern4.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/karma/char_class.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/karma/case_handling2.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/karma/encoding.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/karma/case_handling3.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/x3/no_case.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/test/x3/char_class.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/repository/doc/html/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/karma_performance.xlsx",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/alternative.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/int_performance.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/spiritkarmaflow.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/kleene.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/format_performance.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/sequence.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/not_predicate.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/start_stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/terminal.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/flowofcontrol.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/predicate.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/tokenstructure.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/spiritstructure.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/non-terminal.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/pascal_string.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/optional.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/double_performance.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/and_predicate.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/lexerflow.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/html/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/refcard/spirit-reference.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/cppnow_2013/Inside Spirit X3.pptx",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/alternative.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/kleene.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/sequence.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/not_predicate.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/start_stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/terminal.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/predicate.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/non-terminal.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/pascal_string.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/optional.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/and_predicate.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/spirit/doc/x3/html/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mp11/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bind/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/ratio/doc/ratio.qbk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine2/doc/images/same_fringe.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine2/doc/images/same_fringe.dia",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine2/doc/images/foo_bar_seq.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine2/doc/images/foo_bar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine2/doc/images/event_model.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine2/doc/images/event_model.dia",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/coroutine2/doc/images/foo_bar_seq.dia",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/toc-blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/bpl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/jam.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/toc-plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/up_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/next_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/prev_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/toc-minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/smiley.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/toc-blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/jam.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/toc-plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/up_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/next_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/prev_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/python_cpp_mix.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/toc-minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/smiley.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/python.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/objects.inv",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/comment-close.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/down.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/down-pressed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/bpl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/comment-bright.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/comment.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/up-pressed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/file.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/ajax-loader.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/html/numpy/_static/minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/environment.pickle",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/index.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/tutorial/simple.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/tutorial/dtype.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/tutorial/fromdata.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/tutorial/index.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/tutorial/ndarray.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/tutorial/ufunc.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/reference/unary_ufunc.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/reference/dtype.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/reference/index.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/reference/ndarray.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/reference/binary_ufunc.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_build/doctrees/reference/multi_iter.doctree",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_static/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_static/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_static/bpl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_static/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_static/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/python/doc/numpy/_static/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/asio/doc/overview/sync_op.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/asio/doc/overview/async_op1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/asio/doc/overview/proactor.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/asio/doc/overview/async_op2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/tuple/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/tuple/doc/tuple_users_guide.qbk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/tuple/doc/tuple_advanced_interface.qbk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/tuple/doc/design_decisions_rationale.qbk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/container/doc/images/stable_vector.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/example/Performance/Performance.xls",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceCustom1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/OutermostUnstableState.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceCustom3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceNormal4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/Camera.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/Camera2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/ExceptionsAndOrthStates.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceNative1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceCustom2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/A.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/ThrowingEntryAction.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceNormal3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceNormal1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/StopWatch.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/tutorial.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceNormal2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/reference.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/ThrowingTransitionAction.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceCustom4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/JoinAndFork.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/TransAcrossOrthRegions.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/DeepHistoryLimitation1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/OrthogonalStates.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceNative3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/DeepHistoryLimitation2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/CameraWithHistory1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/SimpleEventDispatch.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceNative4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/PerformanceNative2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/rationale.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/CameraWithHistory2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/EventDispatch.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/ThrowingInStateReaction.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/LCA.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/statechart/doc/HelloWorld.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/throw_exception/doc/valid-css.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/throw_exception/doc/valid-xhtml.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/date_time/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/date_time/doc/time_duration_inherit.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/date_time/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/compute/test/data/program.spirv64",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/compute/test/data/program.spirv32",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/error_no_regions.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/init_state.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/regions.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/transition.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/Orthogonal-deferred.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/terminate.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/AnnexA.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/entry_point.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/entrytutorial.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/CompositeTutorial.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/exit.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/history.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/state.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/sm.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/fork.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/completion.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/SimpleTutorial.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/FlagsTutorial.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/Defer.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/Anonymous.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/conflict2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/conflict1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/HistoryTutorial.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/ParsingDigits.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/images/explicit.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/PDF/msm.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/HTML/footer.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/msm/doc/HTML/footer.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/dynamic_bitset/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/minimal.css",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/toc-blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/toc-plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/up_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/next_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/prev_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/toc-minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/smiley.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/detail/doc/html/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/lambda/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/lambda/doc/lambda.xml",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/lambda/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/lambda/doc/detail/lambda_doc.xml",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/dot_net_example/distribution_explorer/distribution_explorer.suo",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/dot_net_example/distribution_explorer/readme.txt",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/dot_net_example/distribution_explorer/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/dot_net_example/distribution_explorer/IconToolkit.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/dot_net_example/distribution_explorer/ToolkitLogo.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/dot_net_example/boost_math/app.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/plot_owens_3d_xyp.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/plot_owens_t.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/math.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/html4_symbols.qbk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/images/acos.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/images/asinh.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/images/hypot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/images/hypot2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/images/acosh.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/images/atan.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/images/asin.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/images/atanh.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/acosh3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_derivatives3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/polygamma8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/beta1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/legendre_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/skew_normal_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hyperexponential_ccdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamm5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/skew_normal_skewness.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hypergeometric1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/cauchy_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/acosh1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_t_ref5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint18.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hankel2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/beta5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_derivatives1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/chi_squ_tut1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/special_functions_blurb1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/zeta4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/legendre_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/students_t_dist.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hyperexponential_kurtosis.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/beta4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma17.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_derivatives4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/digamma4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hyperexponential_variance.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/skew_normal_variance.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamm3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta_inv5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/special_functions_blurb18.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/expint_n_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_chi_squ_ref5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/normal_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint20.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hankel4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_f_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/trigamma3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/legendre_0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/erf2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_chi_squ_ref3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/zeta6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/skew_normal_kurt_ex.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma2f.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/spherical_0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/special_functions_blurb20.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/asinh4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/beta6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bernoulli_numbers.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/polygamma2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/derivative2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/roots4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamma_ratio0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/expint_i_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/digamma3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma18.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta_inv3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/jacobi4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/asinh1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_beta_ref4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/airy_aip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamma6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/dist_tutorial2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/derivative1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/laguerre_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hypergeometric6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/fraction1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/chi_squ_tut3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/special_functions_blurb17.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamma_dist_ref2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/binomial_ref2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/zeta9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/laplace_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/laguerre_0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/expint_i_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_derivatives5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hermite_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/legendre_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/digamma1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/zeta1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/jacobi3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/atanh3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hypot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/poisson_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_y2_small_z.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta_inv4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hyperexponential_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hypot2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/asinh3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/legendre_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/fraction2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/legendre_1b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_beta_ref2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/owens_t.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/beta8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint25.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bernoulli_numbers2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/roots1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/trigamma5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/fraction3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint24.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/acosh4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/zeta8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/laguerre_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma1f.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_t_ref3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/airy.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/beta3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint22.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint26.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/jacobi1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/polygamma4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hypergeometric3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/normal_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma11b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_chi_squ_ref4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/normal01_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/error1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_t_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/digamma5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_yv_small_z.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_y1_small_z.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_derivatives2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/students_t_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hankel3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/zeta3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_t_ref2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta_inv1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/chi_squ_tut2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/spherical_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/polygamma5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lgamm3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/trigamma1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hypergeometric5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/special_functions_blurb22.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint19.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/beta7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/airy_bip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/special_functions_blurb15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/skew_normal_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/sbessel4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta_inv7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/normal01_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/sbessel2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/atanh2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/trigamma2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/expint_i_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/polygamma6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_chi_squ_ref7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/tangent_number_def2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint27.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/dist_tutorial1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/acosh2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/airy_ai.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint21.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/dist_tutorial4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/special_functions_blurb6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hazard.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/expint_n_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hyperexponential_skewness.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/expint_n_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hypergeometric4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/exponential_dist_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamma_ratio1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma19.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/roots3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/special_functions_blurb7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/beta2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/skew_normal_mean.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/polygamma7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint23.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/skew_normal_pdf0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/zeta5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/laguerre_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_chi_squ_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta_inv2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/chf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/tangent_number_def.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/dist_tutorial3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/airy_bi.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/zeta2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/asinh2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hankel1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/erf1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos0a.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/polygamma3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lgamm4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/binomial_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/atanh1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/trigamma4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hyperexponential_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint17.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/jacobi_zeta.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/chi_squ_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/special_functions_blurb5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lgamm2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hypergeometric2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hermite_0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/spherical_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/jacobi2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/beta_dist_kurtosis.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamm4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/neg_binomial_ref.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/sbessel1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamm2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_chi_squ_ref2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lgamm5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/spherical_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/polygamma9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/fisher_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lognormal_ref.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/sbessel3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/sbessel5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/tangent_numbers.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/error2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/roots2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/polygamma1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_f_ref2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_y0_small_z.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/expint_i_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/heuman_lambda.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos0b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta_inv8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/log1pseries.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/igamma1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_beta_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lgamm1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamm1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel17.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint_d.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/expint_n_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hankel5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_beta_ref3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/hyperexponential_mean.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/digamma2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_chi_squ_ref6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ibeta_inv6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/mbessel7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lgamm6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/gamma_dist_ref1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/zeta7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/expint_n_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/fraction4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/legendre_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/nc_t_ref4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/bessel_yn_small_z.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/ellint15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/equations/lanczos2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/survival.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/sinc_pi.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/skew_normal_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/hyperexponential_pdf_samemean.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/nc_beta_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/hyperexponential_pdf_samerate.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/arcsine_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/remez-5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/triangular_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/owens_integration_area.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/negative_binomial_pdf_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/bernoulli_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/rayleigh_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/rayleigh_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_ds.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/sph_bessel.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/expint2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/students_t_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/bernoulli_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_sc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/geometric_cdf_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/geometric_cdf_discrete.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/cyl_neumann.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/nc_t_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/plot_owens_3d_xyp.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/cyl_bessel_k.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/chi_squared_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/erfc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/hyperbolic.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/brent_test_function_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/beta_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/gamma_q.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/polygamma2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/sqrt1pm1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/inverse_gaussian_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/extreme_value_pdf2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_dc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/inverse_gamma_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/asinh.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/beta.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/log1p.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/cbrt.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/gamma1_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/erfc_inv.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/airy_aip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/normal_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/tgamma.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/inverse_chi_squared_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/arcsine_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/erf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_cs.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/laplace_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/cyl_bessel_j.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/legendre_p.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/zeta1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/inverse_chi_squared_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/logistic_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/digamma.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/hermite.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/extreme_value_pdf1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/acosh.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/arcsine01_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/triangular_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_cn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_sd.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/plot_owens_t.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/legendre_q.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/weibull_pdf2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/normal_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/lognormal_pdf1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/sinc_pi_and_sinhc_pi_on_r.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/normal01_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/hypergeometric_pdf_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/binomial_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/ibeta.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/binomial_pdf_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/bessel_j_zeros.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/exp_on_r.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/uniform_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/gamma_p.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/im_exp_on_c.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/uniform_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/airy_bip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/skew_normal_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/sinhc_pi.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/inverse_gamma_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/pareto_pdf1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/ellint_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/erf_inv.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/normal01_cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/hypergeometric_pdf_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_nd.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/lognormal_pdf2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/gamma2_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/lgamma.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/remez-3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/weibull_pdf1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/tgamma_delta_ratio.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/airy_ai.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/fisher_f_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/geometric_pdf_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/airy_bi.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/zeta2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/remez-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/expm1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/polygamma3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/nc_f_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/hyperexponential_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/survival_inv.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/exponential_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/sph_neumann.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_dn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/cauchy_pdf1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/inverse_gaussian_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/cyl_bessel_i.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/geometric_pdf_discrete.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/remez-4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/prior_posterior_plot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/pareto_pdf2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/binomial_pdf_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/trigamma.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/quantile.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/ellint_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_nc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/cauchy_pdf2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/expint_i.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/arcsine01_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/trigonometric.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/cdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/ellint_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/ellint_carlson.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/poisson_pdf_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/atanh.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_cd.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/nccs_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/binomial_pdf_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/airy_zeros.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/powm1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/laguerre.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/neumann_y_zeros.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/negative_binomial_pdf_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/nc_t_pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_sn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/binomial_quantile_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/graphs/jacobi_ns.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb4.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb13.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb18.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb7.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb12.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb14.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb3.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb17.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb20.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb19.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb16.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb9.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb2.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb1.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb11.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb21.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb5.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb6.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb15.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb8.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/octonion/graphics/octonion_blurb10.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/TQE_EA.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/TQE.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb6.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb10.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb5.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb15.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb22.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb18.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb7.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb12.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb4.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb8.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb20.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb2.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb3.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb13.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb16.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb9.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb17.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb23.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb1.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb19.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb11.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb14.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/math/doc/quaternion/graphics/quaternion_blurb21.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/access.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/reverse_iterator.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/oldeqnew.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/counting_iterator.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/iterator_facade.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/filter_iterator.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/facade-and-adaptor.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/function_output_iterator.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/new-iter-concepts.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/iterator_traits.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/iterator_facade_tutorial.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/pointee.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/traversal.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/iterator_adaptor.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/permutation_iterator.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/iterator_archetypes.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/iterator_concepts.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/transform_iterator.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/zip_iterator.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/access2old.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iterator/doc/indirect_iterator.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/endian/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/endian/doc/styles.css",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/endian/doc/fp_concerns.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_009.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_008.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_006.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_012.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_001.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_011.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_004.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_007.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_002.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_005.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_010.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/polygon/polygon_003.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_028.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_022.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_010.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_020.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_023.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_003.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_009.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_018.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_015.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_012.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_004.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_027.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_025.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_008.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_014.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_013.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_005.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_002.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_001.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_026.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_011.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_006.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_021.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_007.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_017.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_019.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_024.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/random/random_016.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_006.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_061.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_039.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_045.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_019.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_030.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_020.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_043.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_071.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_004.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_058.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_035.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_054.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_011.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_040.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_005.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_066.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_056.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_032.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_012.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_017.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_055.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_033.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_060.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_013.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_069.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_059.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_009.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_002.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_049.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_028.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_024.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_046.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_022.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_026.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_047.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_051.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_014.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_021.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_052.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_057.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_050.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_001.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_008.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_007.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_031.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_068.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_042.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_027.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_070.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_023.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_041.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_053.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_029.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_037.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_025.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_034.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_064.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_063.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_015.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_018.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_072.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_065.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_003.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_036.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_010.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_016.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_062.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_044.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_067.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_048.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/example/output_data/primary/primary_038.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/benchmark/benchmark_results/plots/benchmark_points.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/benchmark/benchmark_results/plots/benchmark_segments.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_45_set_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/index.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_with_holes_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/analysis.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_connectivity_extraction.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_90_set_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/voronoi_advanced_tutorial.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_point_usage.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_coordinate_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_usage.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_connectivity_extraction_90.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_45_with_holes_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_45_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_property_merge_90.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_connectivity_extraction_usage.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_custom_polygon.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_interval_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/voronoi_basic_tutorial.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_custom_polygon_set.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_set_usage.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/voronoi_benchmark.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_property_merge.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_set_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/voronoi_builder.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_property_merge_usage.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_90_with_holes_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_minkowski_tutorial.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_segment_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/GTL_boostcon2009.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_connectivity_extraction_45.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/voronoi_diagram.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_polygon_90_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/voronoi_main.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_custom_point.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_point_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/GTL_boostcon_draft03.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_property_merge_45.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_tutorial.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_isotropy.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_design_overview.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/gtl_rectangle_concept.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/refinements.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/NAND.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/voronoi3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_segments_memory.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_segments_1000000.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_segments_1000.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/convolution1.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/intlogo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_segments_10000.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_points_10000.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/hand.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/perf_graph.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/voronoi.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/perimeter_convolve.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_points_10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/concept_table.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_points_100.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_segments_all.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_points_memory.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_segments_100.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_points_100000.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/vlsi.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_points_1000.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_points_1000000.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/convolution2.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/voronoi2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_segments_10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/nands.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/voronoi4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/voronoi1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/foo.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_segments_100000.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/benchmark_points_all.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/rover.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/polygon/doc/images/convolve_edges.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/unordered/doc/diagrams/buckets.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/filesystem/doc/design.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/filesystem/doc/styles.css",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/filesystem/doc/portability_guide.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/test/doc/html/images/boost.test.logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/test/doc/html/images/class-hier.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/test/doc/html/images/run_args.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/test/doc/html/images/post_build_event.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/test/doc/html/images/post_build_out.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/test/doc/html/images/boost_runtime_list_content.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/test/doc/html/images/level.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/simple_ast.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/funnel_in.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/organization_alt.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/lambda_cpp.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/add2_call.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/organization.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/banner.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/funnel_out.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/add2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/smiley.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/fbox.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/phoenix/doc/html/images/adder.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/acknowledgments.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/installation.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/functions/invert.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/theme/wedge.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/theme/boost_small.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/theme/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/modes.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/key_output_seq.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/key_input_seq.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/key_read_write_head.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/bidirectional_chain.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/important_modes.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/key_write_head.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/key_read_head.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/key_bidirectional_seq.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/input_chain.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/key_important.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/output_chain.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/graphics/seekable_chain.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/iostreams/doc/classes/code_converter.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/signals/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/signals/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/example/test.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/adobe_logo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0036.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0010.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0019.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0031.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0007.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0024.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/planar.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0035.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0005.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0013.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0001.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0012.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0037.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/interleaved.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0032.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0006.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0026.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0009.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0029.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0017.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/monkey_steps.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0033.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0034.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0025.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0008.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0023.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0028.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0030.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/mandel.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0004.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0022.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0003.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0038.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0015.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0002.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0018.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0021.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0014.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/step_iterator.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0011.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0016.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/doxygen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0020.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/html/g_i_l_0027.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/doxygen/images/planar.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/doxygen/images/interleaved.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/doxygen/images/monkey_steps.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/doxygen/images/mandel.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/gil/doc/doxygen/images/step_iterator.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/zlib.3.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/blast/test.pk",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/puff/zeros.raw",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/dotzlib/DotZLib.chm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/dotzlib/DotZLib/Deflater.cs",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/dotzlib/DotZLib/ChecksumImpl.cs",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/dotzlib/DotZLib/CircularBuffer.cs",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/dotzlib/DotZLib/DotZLib.cs",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/dotzlib/DotZLib/Inflater.cs",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/dotzlib/DotZLib/GZipStream.cs",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/test/extern/zlib-1.2.11/contrib/dotzlib/DotZLib/CodecBase.cs",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/doc/images/readme2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/doc/images/message.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/beast/doc/html/beast/images/message.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/program_options/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/program_options/test/ucs2.txt",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/program_options/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/timer/doc/cpu_timers.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/timer/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/timer/doc/original_timer.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/fusion/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/fusion/doc/html/images/fusion_org.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/images/form_14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/units/example/autoprefixes.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_array/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_array/doc/reference.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_array/doc/iterator_categories.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_array/doc/matrix.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/objects.inv",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/comment-close.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/down.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/toc-blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/down-pressed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/comment-bright.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/toc-plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/comment.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/boost-proposed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/up_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/up-pressed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/next_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/prev_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/file.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/ajax-loader.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/toc-minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/smiley.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/hof/doc/html/_static/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/property_tree/doc/images/ptree2code.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/conversion/doc/html/images/space.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/conversion/doc/html/images/callouts/R.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/interval/doc/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/phase_lattice_2d_1000.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/solar_system.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/phase_lattice_2d_0100.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/phase_lattice_2d_0000.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/toc-blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/toc-plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/up_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/next_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/prev_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/toc-minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/smiley.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/numeric/odeint/doc/html/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/array/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/dist-adjlist.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/architecture.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/dijkstra_seq_graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/vertex_coloring.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/dijkstra_dist3_graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/distributed-graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/dist-pmap.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_cluster_Odin_columns_11_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_7_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_cluster_Odin_generator_ER_SF_SW_dataset_TimeSparse_columns_5_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_SF_dataset_TimeSparse_columns_5_6_7_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_7_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_dataset_TimeDense_columns_5_6_7_8_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_SF_dataset_TimeDense_columns_5_6_7_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_cluster_Odin_generator_ER_SF_SW_dataset_TimeDense_columns_5_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_6_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_cluster_Odin_columns_11_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/pbgl-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_dataset_TimeSparse_columns_5_6_7_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_SW_dataset_TimeSparse_columns_5_6_7_8_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_cluster_Odin_columns_11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_6_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_cluster_Odin_generator_ER_SF_SW_dataset_TimeSparse_columns_4_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_cluster_Odin_generator_ER_SF_SW_dataset_TimeDense_columns_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_5_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_dataset_TimeSparse_columns_5_6_7_8_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_SW_dataset_TimeSparse_columns_5_6_7_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_9_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_5_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_cluster_Odin_generator_ER_SF_SW_dataset_TimeSparse_columns_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_SF_dataset_TimeSparse_columns_5_6_7_8_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_9_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_cluster_Odin_generator_ER_SF_SW_dataset_TimeSparse_columns_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_cluster_Odin_columns_11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_dataset_TimeDense_columns_5_6_7_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_8_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_SF_dataset_TimeDense_columns_5_6_7_8_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_SW_dataset_TimeDense_columns_5_6_7_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_4_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_SW_dataset_TimeDense_columns_5_6_7_8_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_cluster_Odin_generator_ER_SF_SW_dataset_TimeDense_columns_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_cluster_Odin_generator_ER_SF_SW_dataset_TimeDense_columns_4_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeDense_columns_8_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/graph_parallel/doc/html/chart_php_generator_ER_SF_SW_dataset_TimeSparse_columns_4_speedup_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/space.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/people/mafalda.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/people/hector.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/people/matias.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/people/joaquin.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/extern/googlesoc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/miBimapFramework.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/extended.mapping.framework.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/more.bimap.structures.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/standard.mapping.framework.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/tagged.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/simple.bimap.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/relation.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/relation.and.pair.with.info.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/bimap.structures.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/collection.type.of.relation.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/relation.and.pair.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/boost.bimap.logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/bimap/doc/html/images/bimap/boost.bimap.header.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/disjoint_sets/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/functional/overloaded_function/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/functional/forward/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/functional/factory/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/refmanual.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/paper/mpl_paper.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/divides.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/copy_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/NumericMetafunction.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/deque.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/iterator_category.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Algorithms-Runtime.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/pop_back.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/key_type.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/minus.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Type.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/shift_right.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/greater_equal.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/protect.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Data.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/CFG_NO_HAS_XXX.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Arithmetic.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/insert_range.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Categorized.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/ASSERT.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_unique.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/negate.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/replace.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/numeric_cast.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/iter_fold.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/TagDispatchedMetafunction.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/empty.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/deref.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Invocation.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/HAS_XXX_TRAIT_NAMED_DEF.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/ASSERT_RELATION.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Comparisons.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/empty_base.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/begin.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/single_view.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Data-Numeric.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/insert.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/back.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/order.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/sort.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/eval_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/set_c.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/vector_c.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/bind.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_partition.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_copy_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/integral_c.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Sequences-Classes.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_remove.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/apply_wrap.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/front.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/value_type.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_remove_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Data-Miscellaneous.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/front_inserter.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/ASSERT_NOT.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/contains.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/not_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_replace_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/find.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/CFG_NO_PREPROCESSED.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/push_front.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/ASSERT_MSG.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Sequences-Intrinsic.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Acknowledgements.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/HAS_XXX_TRAIT_DEF.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Algorithms.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/list.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/range_c.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/bitxor_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/bitor_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/has_key.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/size.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Inserter.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/equal.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/size_t.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/distance.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/TrivialMetafunction.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Logical.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/list_c.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/AssociativeSequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/inherit.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Placeholders.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/count.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/transform_view.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/IntegralSequenceWrapper.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/count_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/inserter_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_transform.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/pop_front.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/is_sequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Algorithms-Transformation.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/long_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/joint_view.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/iter_fold_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/fold.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/sequence_tag.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Iterators-Iterator.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/unpack_args.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/empty_sequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/LIMIT_SET_SIZE.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/c_str.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Miscellaneous.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/vector.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/next.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/upper_bound.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/RandomAccessIterator.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/LIMIT_UNROLLING.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Categorized-Concepts.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/end.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_replace.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/BidirectionalSequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/equal_to.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_fold.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/FrontExtensibleSequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/prior.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/LIMIT_STRING_SIZE.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Bitwise.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/inherit_linearly.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_iter_fold.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/advance.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/IntegralConstant.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/ExtensibleAssociativeSeq.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Categorized-Components.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Algorithms-Iteration.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/BackExtensibleSequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/plus.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/if_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Macros-Introspection.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/map.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/set.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/copy.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/not_equal_to.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/unique.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Iterators-Concepts.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/less.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/if_c.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/pair.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Algorithms-Concepts.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/greater.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/multiplies.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/LIMIT_LIST_SIZE.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/find_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_stable_partition.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Trivial.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/erase_key.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/stable_partition.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/arg.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Sequences-Concepts.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/identity.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Macros-Configuration.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Concepts.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/for_each.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/filter_view.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/char_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Conditional.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/lambda.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/eval_if_c.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/max_element.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/refmanual.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/ForwardIterator.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Trivial-Summary.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/reverse_copy.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/min_element.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Sequences-Views.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunctions-Composition.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/void_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/replace_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/clear.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/LIMIT_MAP_SIZE.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/PlaceholderExpression.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/RandomAccessSequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/shift_left.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/max.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/ReversibleAlgorithm.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/at.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/bool_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/back_inserter.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/VariadicSequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/remove.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/string.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/always.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Metafunction.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/min.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/apply.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/bitand_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Terminology.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Macros-Asserts.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/MetafunctionClass.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Algorithms-Inserters.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/partition.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/remove_if.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/ForwardSequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Algorithms-Querying.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/iterator_range.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Sequences.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/erase.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/at_c.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/lower_bound.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/sizeof_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/push_back.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/BidirectionalIterator.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/AUX_LAMBDA_SUPPORT.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/modulus.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/accumulate.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/and_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Data-Concepts.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/less_equal.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/LambdaExpression.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/quote.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Macros.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/transform.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/LIMIT_METAFUNCTION_ARITY.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/zip_view.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/LIMIT_VECTOR_SIZE.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/Macros-Broken.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/ExtensibleSequence.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/int_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/times.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/src/refmanual/or_.rst",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/mpl/doc/tutorial/book_cover.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/log/doc/Design.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/log/doc/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/log/doc/Design.dia",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/log/doc/html/images/log/Design.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/log/doc/html/images/log/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/example/Jamfile.v2",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/example/hashed.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/perf/Jamfile.v2",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/test/Jamfile.v2",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/next.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/prev.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/perf_1s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/perf_2o1s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/perf_2o.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/perf_3o.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/perf_1o.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/performance.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/style.css",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/hector.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/lopez.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/perf_1o1s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/tutorial/multi_index_cont_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/multi_index/doc/reference/indices.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/circular_buffer/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/circular_buffer/doc/images/space_optimized.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/circular_buffer/doc/images/circular_buffer.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/utility/enable_if.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/utility/checked_delete.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/utility/throw_exception.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/utility/in_place_factories.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/utility/identity_type/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/contract/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/test/he/LC_MESSAGES/fall.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/test/he/LC_MESSAGES/default.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/test/he/LC_MESSAGES/simple.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/test/he_IL/LC_MESSAGES/full.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/boost-small.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/boost-small.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1generic__codecvt_3_01CharType_00_01CodecvtImpl_00_011_01_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1generic__codecvt_3_01CharType_00_01CodecvtImpl_00_014_01_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1collator.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2mo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2splitbar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/nav_g.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2pnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/tab_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/tab_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2mlastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2folderopen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/tab_a.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1conv_1_1invalid__charset__error.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2plastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2vertline.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1generic__codecvt__base.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1date__time__error.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2lastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1converter__base.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1converter.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/sync_on.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1boundary_1_1boundary__indexing.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2link.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/nav_f.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1conv_1_1conversion__error.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1generic__codecvt_3_01CharType_00_01CodecvtImpl_00_012_01_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/tab_b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/open.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2folderclosed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/bdwn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1utf8__codecvt.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/bc_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1info.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1message__format.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/nav_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1calendar__facet.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2ns.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2cl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1boundary_1_1segment.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/sync_off.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/classboost_1_1locale_1_1collator__base.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2mnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/closed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/doxygen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/html/ftv2node.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/style/header-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/style/boost_small.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/style/space.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/libs/locale/doc/style/header-fg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/more/blanket-permission.txt",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/more/index.htm",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/more/BoostSponsorshipAgreement.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/boost/spirit/home/x3/support/subcontext.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/boost/spirit/home/support/char_encoding/iso8859_1.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/cord/de_win.ICO",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/engine/boehm_gc/doc/README.Mac",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/src/tools/quickbook.jam",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/website/boost_build.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/website/bootstrap/fonts/glyphicons-halflings-regular.woff",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/website/bootstrap/fonts/glyphicons-halflings-regular.eot",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/website/bootstrap/fonts/glyphicons-halflings-regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/notes/relative_source_paths.txt",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/test/railsys/program/jamroot.jam",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/test/railsys/program/jamfile.jam",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/test/railsys/program/liba/jamfile.jam",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/test/railsys/program/main/jamfile.jam",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/test/railsys/libx/jamroot.jam",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/test/railsys/libx/src/jamfile.jam",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/toc-blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/toc-plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/up_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/next_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/prev_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/toc-minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/smiley.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/build/doc/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/students_t_eg_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/students_t_eg_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/students_t_eg_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/students_t_eg_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/toc-blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/toc-plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/up_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/next_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/prev_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/toc-minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/auto_index/doc/html/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/test/utf16be_bom-1_5-fail.quickbook",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/test/utf16le_bom-1_5-fail.quickbook",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/extra/katepart/boost.hs.logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/extra/katepart/table.text.editor.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/extra/katepart/table.boost.hs.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/html/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/quickbook/doc/boost-doc-tools/images/documentation-toolchain.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/bcp/licence_info.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/tools/inspect/index.html",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/images/valid-html401.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/minimal.css",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/toc-blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/toc-plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/up_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/next_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/prev_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/toc-minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/smiley.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/src/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/prev.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/toc-blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/next.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/alert.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/home.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/toc-plus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/caution.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/up_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/draft.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/next_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/prev_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/tip.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/note.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/toc-minus.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/smiley.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/important.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/foldl_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/max_length_gcc_4.8.5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/foldl_diag2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/foldl_reject_incomplete_start_with_parser_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/repeated_diag0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/repeated_diag3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/foldl_start_with_parser_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/repeated_reject_incomplete_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/number_gcc_4.8.5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/foldr_start_with_parser_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/folds.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/foldr_reject_incomplete_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/foldr_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/length128_gcc_4.8.5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/repeated_diag2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/foldl_reject_incomplete_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/repeated_diag1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/metaparse/tutorial_diag9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_22.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_25.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2mo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_27.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2splitbar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/nav_g.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2pnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_28.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/tab_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/tab_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_38.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2mlastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2folderopen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/tab_a.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_24.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2plastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/structboost_1_1random_1_1traits_1_1is__signed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2vertline.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_26.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_52.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_56.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_49.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_44.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_29.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_53.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2lastnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_23.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_19.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_54.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/sync_on.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_20.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_41.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_35.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_39.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_47.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2blank.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2link.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/nav_f.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_42.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/classboost_1_1random_1_1random__device.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_37.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/tab_b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/open.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_17.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_18.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_36.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2folderclosed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_34.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/bdwn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_32.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_43.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/bc_s.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/nav_h.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/structboost_1_1random_1_1traits_1_1is__integral.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_30.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2ns.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2cl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_50.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_21.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_33.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/sync_off.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_51.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2mnode.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_45.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_55.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_46.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_31.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/closed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/doxygen.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/ftv2node.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/random/form_14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/images/callouts/4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/boost_asio/sync_op.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/boost_asio/async_op1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/boost_asio/proactor.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/boost_asio/async_op2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/poly_collection_iterators.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_any_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_any_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_base_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/segment_map.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_base_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_base_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_base_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_base_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_base_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_any_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_function_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_function_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_function_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_base_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/ptr_vector.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_function_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_any_clang40_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_base_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_function_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/boost.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_function_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_function_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_any_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_function_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/insert_any_vs2015_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_any_gcc63_x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/html/poly_collection/img/for_each_any_vs2015_x86.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/test.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/html/images/remez-5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/html/images/digamma3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/html/images/doctest.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/html/images/remez-3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/html/images/remez-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/html/images/beta_dist_kurtosis.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/html/images/remez-4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/remez-5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/digamma3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/doctest.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/remez-3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/remez-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/beta_dist_kurtosis.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/remez-4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/form_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/form_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/form_4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/form_7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/form_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/form_6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/form_8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/form_0.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/form_3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boost-1.67.0-tzqpxsuxpqwuvgp7557yqvrev7hekabl/spack-src/doc/test/gold/images/accumulators/doxygen.png"
    ],
    "total_files": 59635
}