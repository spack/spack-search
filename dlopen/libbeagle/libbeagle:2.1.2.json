{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-libbeagle-2.1.2-k36nkt26pimetkbfwuczg445cizovqwt/spack-src/configure.ac": "dnl Process this file with autoconf to produce a configure script.\nAC_PREREQ([2.59])\nAC_INIT(libhmsbeagle, 2.1.2, beagle-dev@googlegroups.com)\n\n: ${CXXFLAGS=\" -O3\"}\n\ndnl -----------------------------------------------\ndnl Package name and version number (user defined)\ndnl -----------------------------------------------\n\nGENERIC_LIBRARY_NAME=libhmsbeagle\n\n#release versioning\nGENERIC_MAJOR_VERSION=2\nGENERIC_MINOR_VERSION=1\nGENERIC_MICRO_VERSION=2\n\n#API version\nGENERIC_API_VERSION=1\nAC_SUBST(GENERIC_API_VERSION)\n\n#revision version\nGENERIC_REVISION_VERSION=$GENERIC_MINOR_VERSION\n\n#shared library versioning\nGENERIC_LIBRARY_VERSION=2:$GENERIC_REVISION_VERSION:1\n#\n#             current:revision:age\n#                |        |     |\n#                |        |     +- increment if interfaces have been added\n#                |        |        set to zero if interfaces have been removed\n#                                  or changed\n#                |        +- increment if source code has changed\n#                |           set to zero if current is incremented\n#                +- increment if interfaces have been added, removed or changed\n\ndnl --------------------------------\ndnl Package name and version number\ndnl --------------------------------\n\nAC_SUBST(GENERIC_LIBRARY_VERSION)\n\nPACKAGE=$GENERIC_LIBRARY_NAME\nAC_SUBST(GENERIC_LIBRARY_NAME)\n\nGENERIC_VERSION=$GENERIC_MAJOR_VERSION.$GENERIC_MINOR_VERSION.$GENERIC_MICRO_VERSION\nAC_SUBST(GENERIC_VERSION)\n\nVERSION=$GENERIC_VERSION\n\nMODULE_VERSION=$GENERIC_MAJOR_VERSION$GENERIC_MINOR_VERSION\nAC_SUBST(MODULE_VERSION)\n\nAC_CONFIG_AUX_DIR(.config)\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_SRCDIR(libhmsbeagle/beagle.cpp)\n\nAM_INIT_AUTOMAKE(no-define)\n\nAC_PROG_CC\nAC_PROG_CXX\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_DISABLE_STATIC\nAM_DISABLE_STATIC\nAC_PROG_LIBTOOL\nAM_PROG_LIBTOOL\n\nAC_CONFIG_HEADERS(libhmsbeagle/config.h)\n\nAC_DEFINE_UNQUOTED(PLUGIN_VERSION,\"$MODULE_VERSION\",\"Define version number for plugins\")\n\n# needed to support old automake versions\nAC_SUBST(abs_top_builddir)\nAC_SUBST(abs_top_srcdir)\n\nCHECK_LIB_PATH=\"\\$(top_builddir)/libhmsbeagle/CPU/.libs:\\$(top_builddir)/libhmsbeagle/GPU/.libs\"\nAC_SUBST(CHECK_LIB_PATH)\n\n# ------------------------------------------------------------------------------\n# Check for libtool development libraries for plugin loading\n# ------------------------------------------------------------------------------\n\nAC_ARG_ENABLE(libtool_dev,\n    AC_HELP_STRING([--disable-libtool-dev],[do not use libtool development libraries]), , [enable_libtool_dev=yes])\nif test  \"$enable_libtool_dev\" = yes; then\n  AC_SEARCH_LIBS(lt_dlinit,ltdl,[AC_DEFINE(HAVE_LIBLTDL,\"1\",\"Defined if the libtool dev libs are present\")])\n  if test \"x$ac_cv_search_lt_dlinit\" == \"xno\"\n  then\n     AC_SEARCH_LIBS(dlopen,dl)\n  fi\nelse\n  AC_SEARCH_LIBS(dlopen,dl)\nfi\n\n# ------------------------------------------------------------------------------\n# Setup OPENMP \n# ------------------------------------------------------------------------------\ndnl Check for OpenMP\nif test x$GCC = xyes\nthen\n\tAX_GCC_VERSION()\nfi\n\nAC_ARG_ENABLE([openmp],\n   [AS_HELP_STRING([--enable-openmp],[enable automatic building of openmp version])])\n\n# if we're on gcc, then make sure the version is at least 4.2.0 because apple ships a \n# 4.1.x that has broken openmp support\nAS_IF([test \"$enable_openmp\" = \"yes\"], [\n\tif test x$GCC = xyes \n\tthen \n\t\tAX_COMPARE_VERSION([$GCC_VERSION], [ge], [4.2.0], [ \n\t\t\tAX_OPENMP([AM_CONDITIONAL(HAVE_OPENMP,true)],\n\t\t\t[AM_CONDITIONAL(HAVE_OPENMP,false)])\n\t\t],[])\n\telse\n\t\tAX_OPENMP([AM_CONDITIONAL(HAVE_OPENMP,true)],\n\t\t[AM_CONDITIONAL(HAVE_OPENMP,false)])\n\tfi\n],[\nAM_CONDITIONAL(HAVE_OPENMP, test true = false)\n])\nAC_SUBST(OPENMP_CFLAGS)\ndnl OpenMP checker only defines for C when compiling both C and C++\nOPENMP_CXXFLAGS=$OPENMP_CFLAGS\nAC_SUBST(OPENMP_CXXFLAGS)\n\n# ------------------------------------------------------------------------------\n# Setup OpenCL\n# ------------------------------------------------------------------------------\n#AX_OPENCL([C++])\n\nAC_ARG_WITH(opencl,\n    AC_HELP_STRING([--with-opencl=PATH],[prefix to location of OpenCL include directory @<:@default=auto@:>@]), , [with_opencl=auto])\n\nOPENCL_CFLAGS=\nOPENCL_LIBS=\n\nif test \"x$with_opencl\" != \"xno\"\nthen\n   OPENCL_CFLAGS+=\" -D FW_OPENCL\"\n   OPENCL_LIBS+=\" -lOpenCL\"\n   if test \"x$with_opencl\" != \"xauto\"\n   then\n      OPENCL_CFLAGS+=\" -I$with_opencl/include\"\n   else\n      case $host_os in\n      *darwin*)\n        AC_CHECK_FILE(/System/Library/Frameworks/OpenCL.framework,,[with_opencl=\"no\"])\n        ;;\n      *)\n        AC_CHECK_FILE(/usr/include/CL,[OPENCL_CFLAGS+=\" -I/usr/include\"],[with_opencl=\"no\"])\n      esac\n   fi\nfi\n\nAM_CONDITIONAL(BUILDOPENCL, test ! x$with_opencl = xno)\n\n# ------------------------------------------------------------------------------\n# Setup CUDA paths\n# ------------------------------------------------------------------------------\nAC_ARG_WITH([cuda],\n   [AS_HELP_STRING([--with-cuda=PATH],[prefix where CUDA is installed @<:@default=auto@:>@])],\n   [],\n   [with_cuda=auto])\n\nNVCC=no\nCUDA_CFLAGS=\nCUDA_LIBS=\n\nif test \"x$with_cuda\" != \"xno\"\nthen\n\n   CUDA_CFLAGS+=\" -DCUDA\"\n   CUDA_LIBS+=\" -lcuda\"\n\n   if test \"x$with_cuda\" != \"xauto\"\n   then\n      CUDAPATH=\"$with_cuda\"\n      CUDA_CFLAGS+=\" -I$with_cuda/include\"\n      CUDA_LIBS+=\" -L$with_cuda/lib\"\n   else\n      AC_CHECK_FILE(/usr/local/cuda/,[CUDAPATH=\"/usr/local/cuda\"],[])\n      AC_CHECK_FILE(/usr/local/cuda/include,[CUDA_CFLAGS+=\" -I/usr/local/cuda/include\"],[CUDA_CFLAGS=\"\"])\n      AC_CHECK_FILE(/usr/local/cuda/lib,[CUDA_LIBS+=\" -L/usr/local/cuda/lib\"],[])\n   fi\n\n\nAC_ARG_ENABLE([emu],\n    AC_HELP_STRING([--enable-emu],[turn on device emulation for CUDA]),\n   [case \"${enableval}\" in\n       yes) EMULATION=true;;\n       no)  EMULATION=false;;\n       *) AC_MSG_ERROR([bad value ${enableval} for --enable-emu]);;\n   esac],\n   [EMULATION=false]\n)\n\nfi\n\nif test \"x$CUDA_CFLAGS\" != \"x\"\nthen\n   AC_PATH_PROG([NVCC],[nvcc],[no],[$PATH:$CUDAPATH/bin])\nfi\n\nAM_CONDITIONAL(BUILDCUDA, test ! x$NVCC = xno)\nAC_SUBST(NVCC)\n\n# ------------------------------------------------------------------------------\n# Setup nvcc flags\n# ------------------------------------------------------------------------------\nif test x$DEBUG = xtrue\nthen\n   NVCCFLAGS=\"-g\"\nelse\n   NVCCFLAGS=\"-O3\"\nfi\nif test x$EMULATION = xtrue\nthen\n   NVCCFLAGS+=\" -deviceemu\"\nfi\n\n# ------------------------------------------------------------------------------\n# Setup SSE\n# ------------------------------------------------------------------------------\n\n\nAC_ARG_ENABLE(sse,\n\tAC_HELP_STRING([--disable-sse],[disable native sse implementation]), , [enable_sse=yes])\n\nif test  \"$enable_sse\" = yes; then\n\tAX_EXT\n\tAC_CHECK_HEADERS([cpuid.h])\nelse\n\tAM_CONDITIONAL(HAVE_SSE2,false)\nfi\n\n# ------------------------------------------------------------------------------\n# Setup AVX\n# ------------------------------------------------------------------------------\nAC_ARG_ENABLE(avx,\n\tAC_HELP_STRING([--enable-avx],[build with avx implementation enabled EXPERIMENTAL]), , [enable_avx=no])\n\nAM_CONDITIONAL(HAVE_AVX,false)\nif test  \"$enable_avx\" = yes; then\n\tAX_EXT\n\tAC_CHECK_HEADERS([cpuid.h])\n\tif test \"$ax_cv_have_avx_ext\" = yes; then\t\t\n\t\tAM_CONDITIONAL(HAVE_AVX,true)\t\t\n\telse\n\t\tAC_MSG_ERROR(AVX instructions not supported on this system. AVX support will not be built)\t\n\tfi\nfi\n\n# ------------------------------------------------------------------------------\n# Setup Intel Phi\n# ------------------------------------------------------------------------------\nAC_ARG_ENABLE(phi,\n\tAC_HELP_STRING([--enable-phi],[build with Intel Phi implementation enabled EXPERIMENTAL]), , [enable_phi=no])\n\nif test  \"$enable_phi\" = yes; then\n\tAC_MSG_ERROR(Intel Phi not supported on this system. Phi support will not be built)\t\nfi\n\n# ------------------------------------------------------------------------------\n# Setup native cpu architecture optimization flag\n# ------------------------------------------------------------------------------\n\nAC_ARG_ENABLE(march_native,\n    AC_HELP_STRING([--disable-march-native],[disable native architecture optimization]), , [enable_march_native=yes])\n\nif test  \"$enable_march_native\" = yes; then\n    if test x$GCC = xyes \n    then \n        AX_COMPARE_VERSION([$GCC_VERSION], [ge], [4.2.3], [AM_CXXFLAGS=\"$AM_CXXFLAGS -march=native\"],[])\n    fi\nfi\n\n# ------------------------------------------------------------------------------\n# Setup Mac multi-architecture flags\n#\n# TODO: Improve automatic detection of MacOS10.x.sdk directory\n# ------------------------------------------------------------------------------\ncase $host_os in\n*darwin*)\n  AM_CXXFLAGS=\"$AM_CXXFLAGS -DDLS_MACOS\"\n  \n  if( test ! x$NVCC = xno )\n  then\n     NVCCFLAGS+=\" -m64\"\n     AM_CXXFLAGS=\"$AM_CXXFLAGS -m64\"\n     NVCCFLAGS+=\" -D_POSIX_C_SOURCE -ccbin /usr/bin/clang\"\n     CUDA_LIBS+=\" -F/Library/Frameworks -framework CUDA\"\n  fi\n  \n\n  if test \"x$with_opencl\" != \"xno\"\n  then\n     OPENCL_CFLAGS=\" -D FW_OPENCL -framework OpenCL\"\n     OPENCL_LIBS=\" -framework OpenCL\"\n  fi\n\n  if test \"$CXX\" = \"clang\"\n  then\n\t  CXX=\"clang++\" \n  fi\n  \n  AC_ARG_ENABLE(osx_snowleopard,\n      AC_HELP_STRING([--enable-osx-snowleopard],[build with OS X v10.6 Snow Leopard backwards compatibility]), , [enable_osx_snowleopard=no])\n  if test  \"$enable_osx_snowleopard\" = yes; then\n      AM_CXXFLAGS=\"$AM_CXXFLAGS -mmacosx-version-min=10.6\"\n  fi\nesac\n\n# ------------------------------------------------------------------------------\n# Setup Cygwin\n# ------------------------------------------------------------------------------\ncase $host_os in\n  *cygwin*)\n  AM_CXXFLAGS=\"$AM_CXXFLAGS -D__int64=\\\"long long\\\"\"\n  LDFLAGS+=\" -mno-cygwin -Wl,-add-stdcall-alias -shared -no-undefined\"\nesac\n\n# ------------------------------------------------------------------------------\n# Setup Java\n# ------------------------------------------------------------------------------\nAC_ARG_WITH([jdk], [AS_HELP_STRING([--with-jdk=PATH], [prefix of a JDK installation for compiling the JNI wrapper])], [JAVAPREFIX=$withval/bin], [])\n\njnilibext=no\n\nif test \"x$with_jdk\" != \"xno\"\nthen\n    AC_PROG_JAVAC\n    if test \"x$JAVAC\" != \"x\"\n    then  \n        AC_JNI_INCLUDE_DIR\n        for JNI_INCLUDE_DIR in $JNI_INCLUDE_DIRS\n        do\n           CPPFLAGS=\"$CPPFLAGS -I$JNI_INCLUDE_DIR\"\n        done\n\n        dnl Older versions of OS X require .jnilib extension for java libs\n        case $host_os in \n        *darwin*) \n           JNI_EXTRA_LDFLAGS=\"-shrext .jnilib\"\n        esac\n    else\n        with_jdk=no\n    fi\nfi\n\nAM_CONDITIONAL(BUILDJNI, test ! x$with_jdk = xno)\n\n# ------------------------------------------------------------------------------\n# Distribute common variables\n# ------------------------------------------------------------------------------\n\nAC_SUBST(NVCCFLAGS)\nAC_SUBST(CUDA_CFLAGS)\nAC_SUBST(CUDA_LIBS)\nAC_SUBST(OPENCL_CFLAGS)\nAC_SUBST(OPENCL_LIBS)\nAC_SUBST(JNI_EXTRA_LDFLAGS)\nAC_SUBST(AM_CXXFLAGS)\nAC_SUBST(LDFLAGS)\nAC_SUBST(LIBS)\n\n# ------------------------------------------------------------------------------\n# Doxygen support \n# ------------------------------------------------------------------------------\n\nDX_HTML_FEATURE(ON)\nDX_CHM_FEATURE(OFF)\nDX_CHI_FEATURE(OFF)\nDX_MAN_FEATURE(ON)\nDX_RTF_FEATURE(OFF)\nDX_XML_FEATURE(OFF)\nDX_PDF_FEATURE(OFF)\nDX_PS_FEATURE(OFF)\n\nDX_INIT_DOXYGEN([$PACKAGE_NAME],[beagle.dox],[doc])\n\n# ------------------------------------------------------------------------------\n# All done, create Makefiles\n# ------------------------------------------------------------------------------\nAC_CONFIG_FILES([Makefile])\nAC_CONFIG_FILES([hmsbeagle-${GENERIC_API_VERSION}.pc])\nAC_CONFIG_FILES([libhmsbeagle/Makefile])\nAC_CONFIG_FILES([libhmsbeagle/GPU/Makefile])\nAC_CONFIG_FILES([libhmsbeagle/GPU/kernels/Makefile])\nAC_CONFIG_FILES([libhmsbeagle/CPU/Makefile])\nAC_CONFIG_FILES([libhmsbeagle/plugin/Makefile])\nAC_CONFIG_FILES([libhmsbeagle/JNI/Makefile])\nAC_CONFIG_FILES([examples/Makefile])\nAC_CONFIG_FILES([examples/tinytest/Makefile])\nAC_CONFIG_FILES([examples/complextest/Makefile])\nAC_CONFIG_FILES([examples/oddstatetest/Makefile])\nAC_CONFIG_FILES([examples/fourtaxon/Makefile])\nAC_CONFIG_FILES([examples/genomictest/Makefile])\nAC_CONFIG_FILES([examples/matrixtest/Makefile])\nAC_OUTPUT\n\n# ------------------------------------------------------------------------------\n# warn the user about missing functionality\n# ------------------------------------------------------------------------------\nif( test x$with_opencl = xno ) then\n        AC_MSG_WARN([OpenCL not found or disabled.  OpenCL implementation  will not be built. If OpenCL support is desired, check the path to OpenCL and specify --with-opencl=/path/to/opencl])\nfi\n\n\nif( test x$NVCC = xno ) then\n\tAC_MSG_WARN([NVIDIA CUDA nvcc compiler not found or CUDA support disabled.  CUDA implementation will not be built. If CUDA support is desired, check the path to CUDA and specify --with-cuda=/path/to/cuda])\nfi\n\nif( test x$with_jdk = xno ) then\n\tAC_MSG_WARN([JDK installation not found.  JNI wrapper will not be built.  Check the path to JDK and specify --with-jdk=/path/to/jdk].  If using Mac OS X also try installing Java for OS X Developer Package)\nfi\n",
        "/tmp/vanessa/spack-stage/spack-stage-libbeagle-2.1.2-k36nkt26pimetkbfwuczg445cizovqwt/spack-src/libhmsbeagle/plugin/LibtoolSharedLibrary.h": "/**\n * libhmsbeagle plugin system\n * @author Aaron E. Darling\n * Based on code found in \"Dynamic Plugins for C++\" by Arthur J. Musgrove\n * and published in Dr. Dobbs Journal, July 1, 2004.\n *\n * This header implements unix libraries using libtool loading instead of\n * the standard dlopen() interface\n */\n\n#ifndef __LIBTOOLSHAREDLIBRARY_H__\n#define __LIBTOOLSHAREDLIBRARY_H__\n\n#ifdef HAVE_CONFIG_H\n#include \"libhmsbeagle/config.h\"\n#endif\n\n#include \"libhmsbeagle/plugin/SharedLibrary.h\"\n\n#ifdef HAVE_LIBLTDL\n\n// use libtool-devel library loading\n#include <ltdl.h>\n#include <iostream>\n\n\nnamespace beagle {\nnamespace plugin {\n\nclass UnixSharedLibrary : public SharedLibrary\n{\n  public:\n    UnixSharedLibrary(const char* name);\n    ~UnixSharedLibrary();\n\n    void* findSymbol(const char* name);\n\n  private:\n    lt_dlhandle m_handle;\n};\n\nUnixSharedLibrary::UnixSharedLibrary(const char* name)\n    : m_handle(0)\n{\n    lt_dlinit();\n    std::string libname = \"lib\";\n    libname += name;\n#ifdef DLS_MACOS\n    libname += \".\";\n    libname += PLUGIN_VERSION;\n    libname += \".so\";\n#else\n    libname += \".so.\";\n    libname += PLUGIN_VERSION;\n    libname += \".0.0\";\n#endif\n\n    m_handle = lt_dlopen(libname.c_str());\n    if (m_handle == 0)\n    {\n    const char* s = lt_dlerror();\n    throw SharedLibraryException(s?s:\"Exact Error Not Reported\");\n    }\n}\nUnixSharedLibrary::~UnixSharedLibrary() {\n\tlt_dlclose(m_handle); \n\tlt_dlexit();\n}\n\nvoid* UnixSharedLibrary::findSymbol(const char* name)\n{\n    void* sym = lt_dlsym(m_handle,name);\n    if (sym == 0)\n    throw SharedLibraryException(\"Symbol Not Found\");\n    else\n    return sym;\n}\n\n} // namespace plugin\n} // namespace beagle\n\n#endif\t// HAVE_LIBLTDL\n\n#endif\t// __LIBTOOLSHAREDLIBRARY_H__\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-libbeagle-2.1.2-k36nkt26pimetkbfwuczg445cizovqwt/spack-src/libhmsbeagle/plugin/UnixSharedLibrary.h": "/**\n * libhmsbeagle plugin system\n * @author Aaron E. Darling\n * Based on code found in \"Dynamic Plugins for C++\" by Arthur J. Musgrove\n * and published in Dr. Dobbs Journal, July 1, 2004.\n */\n\n#ifndef __UNIXSHAREDLIBRARY_H__\n#define __UNIXSHAREDLIBRARY_H__\n\n#ifdef HAVE_CONFIG_H\n#include \"libhmsbeagle/config.h\"\n#endif\n\n#include \"libhmsbeagle/plugin/SharedLibrary.h\"\n\n// only use the standard unix library interface if we don't have libtool libraries\n#ifndef HAVE_LIBLTDL\n\n#include <dlfcn.h>\n#include <string>\n\nnamespace beagle {\nnamespace plugin {\n\nclass UnixSharedLibrary : public SharedLibrary\n{\n  public:\n    UnixSharedLibrary(const char* name);\n    ~UnixSharedLibrary();\n\n    void* findSymbol(const char* name);\n\n  private:\n    void* m_handle;\n};\n\nUnixSharedLibrary::UnixSharedLibrary(const char* name)\n    : m_handle(0)\n{\n    std::string libname = \"lib\";\n    libname += name;\n#ifdef DLS_MACOS\n    libname += \".\";\n    libname += PLUGIN_VERSION;\n    libname += \".so\";\n#else\n    libname += \".so.\";\n    libname += PLUGIN_VERSION;\n    libname += \".0.0\";\n#endif\n\n    m_handle = dlopen(libname.c_str(),RTLD_NOW|RTLD_GLOBAL);\n    if (m_handle == 0)\n    {\n    const char* s = dlerror();\n    throw SharedLibraryException(s?s:\"Exact Error Not Reported\");\n    }\n}\nUnixSharedLibrary::~UnixSharedLibrary() { dlclose(m_handle); }\n\nvoid* UnixSharedLibrary::findSymbol(const char* name)\n{\n    void* sym = dlsym(m_handle,name);\n    if (sym == 0)\n    throw SharedLibraryException(\"Symbol Not Found\");\n    else\n    return sym;\n}\n\n} // namespace plugin\n} // namespace beagle\n\n#endif\t// HAVE_LIBLTDL\n\n#endif\t// __UNIXSHAREDLIBRARY_H__\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-libbeagle-2.1.2-k36nkt26pimetkbfwuczg445cizovqwt/spack-src/beagle-dox.png",
        "/tmp/vanessa/spack-stage/spack-stage-libbeagle-2.1.2-k36nkt26pimetkbfwuczg445cizovqwt/spack-src/project/beagle-xcode/beagle-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-libbeagle-2.1.2-k36nkt26pimetkbfwuczg445cizovqwt/spack-src/project/beagle-vs-2012/cuda-kernels/bin2c.exe",
        "/tmp/vanessa/spack-stage/spack-stage-libbeagle-2.1.2-k36nkt26pimetkbfwuczg445cizovqwt/spack-src/project/beagle-vs-2012/beagle-installer/banner.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-libbeagle-2.1.2-k36nkt26pimetkbfwuczg445cizovqwt/spack-src/project/beagle-vs-2012/beagle-installer/welcome.jpg"
    ],
    "total_files": 214
}