{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/pyconfig.h.in": "/* pyconfig.h.in.  Generated from configure.ac by autoheader.  */\n\n\n#ifndef Py_PYCONFIG_H\n#define Py_PYCONFIG_H\n\n\n/* Define if building universal (internal helper macro) */\n#undef AC_APPLE_UNIVERSAL_BUILD\n\n/* Define for AIX if your compiler is a genuine IBM xlC/xlC_r and you want\n   support for AIX C++ shared extension modules. */\n#undef AIX_GENUINE_CPLUSPLUS\n\n/* Define if C doubles are 64-bit IEEE 754 binary format, stored in ARM\n   mixed-endian order (byte order 45670123) */\n#undef DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754\n\n/* Define if C doubles are 64-bit IEEE 754 binary format, stored with the most\n   significant byte first */\n#undef DOUBLE_IS_BIG_ENDIAN_IEEE754\n\n/* Define if C doubles are 64-bit IEEE 754 binary format, stored with the\n   least significant byte first */\n#undef DOUBLE_IS_LITTLE_ENDIAN_IEEE754\n\n/* Define if --enable-ipv6 is specified */\n#undef ENABLE_IPV6\n\n/* Define if flock needs to be linked with bsd library. */\n#undef FLOCK_NEEDS_LIBBSD\n\n/* Define if getpgrp() must be called as getpgrp(0). */\n#undef GETPGRP_HAVE_ARG\n\n/* Define if gettimeofday() does not have second (timezone) argument This is\n   the case on Motorola V4 (R40V4.2) */\n#undef GETTIMEOFDAY_NO_TZ\n\n/* Define to 1 if you have the `accept4' function. */\n#undef HAVE_ACCEPT4\n\n/* Define to 1 if you have the `acosh' function. */\n#undef HAVE_ACOSH\n\n/* struct addrinfo (netdb.h) */\n#undef HAVE_ADDRINFO\n\n/* Define to 1 if you have the `alarm' function. */\n#undef HAVE_ALARM\n\n/* Define if aligned memory access is required */\n#undef HAVE_ALIGNED_REQUIRED\n\n/* Define to 1 if you have the <alloca.h> header file. */\n#undef HAVE_ALLOCA_H\n\n/* Define this if your time.h defines altzone. */\n#undef HAVE_ALTZONE\n\n/* Define to 1 if you have the `asinh' function. */\n#undef HAVE_ASINH\n\n/* Define to 1 if you have the <asm/types.h> header file. */\n#undef HAVE_ASM_TYPES_H\n\n/* Define to 1 if you have the `atanh' function. */\n#undef HAVE_ATANH\n\n/* Define to 1 if you have the `bind_textdomain_codeset' function. */\n#undef HAVE_BIND_TEXTDOMAIN_CODESET\n\n/* Define to 1 if you have the <bluetooth/bluetooth.h> header file. */\n#undef HAVE_BLUETOOTH_BLUETOOTH_H\n\n/* Define to 1 if you have the <bluetooth.h> header file. */\n#undef HAVE_BLUETOOTH_H\n\n/* Define if mbstowcs(NULL, \"text\", 0) does not return the number of wide\n   chars that would be converted. */\n#undef HAVE_BROKEN_MBSTOWCS\n\n/* Define if nice() returns success/failure instead of the new priority. */\n#undef HAVE_BROKEN_NICE\n\n/* Define if the system reports an invalid PIPE_BUF value. */\n#undef HAVE_BROKEN_PIPE_BUF\n\n/* Define if poll() sets errno on invalid file descriptors. */\n#undef HAVE_BROKEN_POLL\n\n/* Define if the Posix semaphores do not work on your system */\n#undef HAVE_BROKEN_POSIX_SEMAPHORES\n\n/* Define if pthread_sigmask() does not work on your system. */\n#undef HAVE_BROKEN_PTHREAD_SIGMASK\n\n/* define to 1 if your sem_getvalue is broken. */\n#undef HAVE_BROKEN_SEM_GETVALUE\n\n/* Define if `unsetenv` does not return an int. */\n#undef HAVE_BROKEN_UNSETENV\n\n/* Has builtin atomics */\n#undef HAVE_BUILTIN_ATOMIC\n\n/* Define this if you have the type _Bool. */\n#undef HAVE_C99_BOOL\n\n/* Define to 1 if you have the 'chflags' function. */\n#undef HAVE_CHFLAGS\n\n/* Define to 1 if you have the `chown' function. */\n#undef HAVE_CHOWN\n\n/* Define if you have the 'chroot' function. */\n#undef HAVE_CHROOT\n\n/* Define to 1 if you have the `clock' function. */\n#undef HAVE_CLOCK\n\n/* Define to 1 if you have the `clock_getres' function. */\n#undef HAVE_CLOCK_GETRES\n\n/* Define to 1 if you have the `clock_gettime' function. */\n#undef HAVE_CLOCK_GETTIME\n\n/* Define if the C compiler supports computed gotos. */\n#undef HAVE_COMPUTED_GOTOS\n\n/* Define to 1 if you have the `confstr' function. */\n#undef HAVE_CONFSTR\n\n/* Define to 1 if you have the <conio.h> header file. */\n#undef HAVE_CONIO_H\n\n/* Define to 1 if you have the `copysign' function. */\n#undef HAVE_COPYSIGN\n\n/* Define to 1 if you have the `ctermid' function. */\n#undef HAVE_CTERMID\n\n/* Define if you have the 'ctermid_r' function. */\n#undef HAVE_CTERMID_R\n\n/* Define to 1 if you have the <curses.h> header file. */\n#undef HAVE_CURSES_H\n\n/* Define if you have the 'is_term_resized' function. */\n#undef HAVE_CURSES_IS_TERM_RESIZED\n\n/* Define if you have the 'resizeterm' function. */\n#undef HAVE_CURSES_RESIZETERM\n\n/* Define if you have the 'resize_term' function. */\n#undef HAVE_CURSES_RESIZE_TERM\n\n/* Define to 1 if you have the declaration of `isfinite', and to 0 if you\n   don't. */\n#undef HAVE_DECL_ISFINITE\n\n/* Define to 1 if you have the declaration of `isinf', and to 0 if you don't.\n   */\n#undef HAVE_DECL_ISINF\n\n/* Define to 1 if you have the declaration of `isnan', and to 0 if you don't.\n   */\n#undef HAVE_DECL_ISNAN\n\n/* Define to 1 if you have the declaration of `tzname', and to 0 if you don't.\n   */\n#undef HAVE_DECL_TZNAME\n\n/* Define to 1 if you have the device macros. */\n#undef HAVE_DEVICE_MACROS\n\n/* Define to 1 if you have the /dev/ptc device file. */\n#undef HAVE_DEV_PTC\n\n/* Define to 1 if you have the /dev/ptmx device file. */\n#undef HAVE_DEV_PTMX\n\n/* Define to 1 if you have the <direct.h> header file. */\n#undef HAVE_DIRECT_H\n\n/* Define to 1 if the dirent structure has a d_type field */\n#undef HAVE_DIRENT_D_TYPE\n\n/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_DIRENT_H\n\n/* Define if you have the 'dirfd' function or macro. */\n#undef HAVE_DIRFD\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#undef HAVE_DLFCN_H\n\n/* Define to 1 if you have the `dlopen' function. */\n#undef HAVE_DLOPEN\n\n/* Define to 1 if you have the `dup2' function. */\n#undef HAVE_DUP2\n\n/* Define to 1 if you have the `dup3' function. */\n#undef HAVE_DUP3\n\n/* Defined when any dynamic module loading is enabled. */\n#undef HAVE_DYNAMIC_LOADING\n\n/* Define to 1 if you have the <endian.h> header file. */\n#undef HAVE_ENDIAN_H\n\n/* Define if you have the 'epoll' functions. */\n#undef HAVE_EPOLL\n\n/* Define if you have the 'epoll_create1' function. */\n#undef HAVE_EPOLL_CREATE1\n\n/* Define to 1 if you have the `erf' function. */\n#undef HAVE_ERF\n\n/* Define to 1 if you have the `erfc' function. */\n#undef HAVE_ERFC\n\n/* Define to 1 if you have the <errno.h> header file. */\n#undef HAVE_ERRNO_H\n\n/* Define to 1 if you have the `execv' function. */\n#undef HAVE_EXECV\n\n/* Define to 1 if you have the `expm1' function. */\n#undef HAVE_EXPM1\n\n/* Define to 1 if you have the `faccessat' function. */\n#undef HAVE_FACCESSAT\n\n/* Define if you have the 'fchdir' function. */\n#undef HAVE_FCHDIR\n\n/* Define to 1 if you have the `fchmod' function. */\n#undef HAVE_FCHMOD\n\n/* Define to 1 if you have the `fchmodat' function. */\n#undef HAVE_FCHMODAT\n\n/* Define to 1 if you have the `fchown' function. */\n#undef HAVE_FCHOWN\n\n/* Define to 1 if you have the `fchownat' function. */\n#undef HAVE_FCHOWNAT\n\n/* Define to 1 if you have the <fcntl.h> header file. */\n#undef HAVE_FCNTL_H\n\n/* Define if you have the 'fdatasync' function. */\n#undef HAVE_FDATASYNC\n\n/* Define to 1 if you have the `fdopendir' function. */\n#undef HAVE_FDOPENDIR\n\n/* Define to 1 if you have the `fexecve' function. */\n#undef HAVE_FEXECVE\n\n/* Define to 1 if you have the `finite' function. */\n#undef HAVE_FINITE\n\n/* Define to 1 if you have the `flock' function. */\n#undef HAVE_FLOCK\n\n/* Define to 1 if you have the `fork' function. */\n#undef HAVE_FORK\n\n/* Define to 1 if you have the `forkpty' function. */\n#undef HAVE_FORKPTY\n\n/* Define to 1 if you have the `fpathconf' function. */\n#undef HAVE_FPATHCONF\n\n/* Define to 1 if you have the `fseek64' function. */\n#undef HAVE_FSEEK64\n\n/* Define to 1 if you have the `fseeko' function. */\n#undef HAVE_FSEEKO\n\n/* Define to 1 if you have the `fstatat' function. */\n#undef HAVE_FSTATAT\n\n/* Define to 1 if you have the `fstatvfs' function. */\n#undef HAVE_FSTATVFS\n\n/* Define if you have the 'fsync' function. */\n#undef HAVE_FSYNC\n\n/* Define to 1 if you have the `ftell64' function. */\n#undef HAVE_FTELL64\n\n/* Define to 1 if you have the `ftello' function. */\n#undef HAVE_FTELLO\n\n/* Define to 1 if you have the `ftime' function. */\n#undef HAVE_FTIME\n\n/* Define to 1 if you have the `ftruncate' function. */\n#undef HAVE_FTRUNCATE\n\n/* Define to 1 if you have the `futimens' function. */\n#undef HAVE_FUTIMENS\n\n/* Define to 1 if you have the `futimes' function. */\n#undef HAVE_FUTIMES\n\n/* Define to 1 if you have the `futimesat' function. */\n#undef HAVE_FUTIMESAT\n\n/* Define to 1 if you have the `gai_strerror' function. */\n#undef HAVE_GAI_STRERROR\n\n/* Define to 1 if you have the `gamma' function. */\n#undef HAVE_GAMMA\n\n/* Define if we can use gcc inline assembler to get and set mc68881 fpcr */\n#undef HAVE_GCC_ASM_FOR_MC68881\n\n/* Define if we can use x64 gcc inline assembler */\n#undef HAVE_GCC_ASM_FOR_X64\n\n/* Define if we can use gcc inline assembler to get and set x87 control word\n   */\n#undef HAVE_GCC_ASM_FOR_X87\n\n/* Define if your compiler provides __uint128_t */\n#undef HAVE_GCC_UINT128_T\n\n/* Define if you have the getaddrinfo function. */\n#undef HAVE_GETADDRINFO\n\n/* Define this if you have flockfile(), getc_unlocked(), and funlockfile() */\n#undef HAVE_GETC_UNLOCKED\n\n/* Define to 1 if you have the `getentropy' function. */\n#undef HAVE_GETENTROPY\n\n/* Define to 1 if you have the `getgrouplist' function. */\n#undef HAVE_GETGROUPLIST\n\n/* Define to 1 if you have the `getgroups' function. */\n#undef HAVE_GETGROUPS\n\n/* Define to 1 if you have the `gethostbyname' function. */\n#undef HAVE_GETHOSTBYNAME\n\n/* Define this if you have some version of gethostbyname_r() */\n#undef HAVE_GETHOSTBYNAME_R\n\n/* Define this if you have the 3-arg version of gethostbyname_r(). */\n#undef HAVE_GETHOSTBYNAME_R_3_ARG\n\n/* Define this if you have the 5-arg version of gethostbyname_r(). */\n#undef HAVE_GETHOSTBYNAME_R_5_ARG\n\n/* Define this if you have the 6-arg version of gethostbyname_r(). */\n#undef HAVE_GETHOSTBYNAME_R_6_ARG\n\n/* Define to 1 if you have the `getitimer' function. */\n#undef HAVE_GETITIMER\n\n/* Define to 1 if you have the `getloadavg' function. */\n#undef HAVE_GETLOADAVG\n\n/* Define to 1 if you have the `getlogin' function. */\n#undef HAVE_GETLOGIN\n\n/* Define to 1 if you have the `getnameinfo' function. */\n#undef HAVE_GETNAMEINFO\n\n/* Define if you have the 'getpagesize' function. */\n#undef HAVE_GETPAGESIZE\n\n/* Define to 1 if you have the `getpeername' function. */\n#undef HAVE_GETPEERNAME\n\n/* Define to 1 if you have the `getpgid' function. */\n#undef HAVE_GETPGID\n\n/* Define to 1 if you have the `getpgrp' function. */\n#undef HAVE_GETPGRP\n\n/* Define to 1 if you have the `getpid' function. */\n#undef HAVE_GETPID\n\n/* Define to 1 if you have the `getpriority' function. */\n#undef HAVE_GETPRIORITY\n\n/* Define to 1 if you have the `getpwent' function. */\n#undef HAVE_GETPWENT\n\n/* Define to 1 if the getrandom() function is available */\n#undef HAVE_GETRANDOM\n\n/* Define to 1 if the Linux getrandom() syscall is available */\n#undef HAVE_GETRANDOM_SYSCALL\n\n/* Define to 1 if you have the `getresgid' function. */\n#undef HAVE_GETRESGID\n\n/* Define to 1 if you have the `getresuid' function. */\n#undef HAVE_GETRESUID\n\n/* Define to 1 if you have the `getsid' function. */\n#undef HAVE_GETSID\n\n/* Define to 1 if you have the `getspent' function. */\n#undef HAVE_GETSPENT\n\n/* Define to 1 if you have the `getspnam' function. */\n#undef HAVE_GETSPNAM\n\n/* Define to 1 if you have the `gettimeofday' function. */\n#undef HAVE_GETTIMEOFDAY\n\n/* Define to 1 if you have the `getwd' function. */\n#undef HAVE_GETWD\n\n/* Define if glibc has incorrect _FORTIFY_SOURCE wrappers for memmove and\n   bcopy. */\n#undef HAVE_GLIBC_MEMMOVE_BUG\n\n/* Define to 1 if you have the <grp.h> header file. */\n#undef HAVE_GRP_H\n\n/* Define if you have the 'hstrerror' function. */\n#undef HAVE_HSTRERROR\n\n/* Define this if you have le64toh() */\n#undef HAVE_HTOLE64\n\n/* Define to 1 if you have the `hypot' function. */\n#undef HAVE_HYPOT\n\n/* Define to 1 if you have the <ieeefp.h> header file. */\n#undef HAVE_IEEEFP_H\n\n/* Define to 1 if you have the `if_nameindex' function. */\n#undef HAVE_IF_NAMEINDEX\n\n/* Define if you have the 'inet_aton' function. */\n#undef HAVE_INET_ATON\n\n/* Define if you have the 'inet_pton' function. */\n#undef HAVE_INET_PTON\n\n/* Define to 1 if you have the `initgroups' function. */\n#undef HAVE_INITGROUPS\n\n/* Define if your compiler provides int32_t. */\n#undef HAVE_INT32_T\n\n/* Define if your compiler provides int64_t. */\n#undef HAVE_INT64_T\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#undef HAVE_INTTYPES_H\n\n/* Define to 1 if you have the <io.h> header file. */\n#undef HAVE_IO_H\n\n/* Define if gcc has the ipa-pure-const bug. */\n#undef HAVE_IPA_PURE_CONST_BUG\n\n/* Define to 1 if you have the `kill' function. */\n#undef HAVE_KILL\n\n/* Define to 1 if you have the `killpg' function. */\n#undef HAVE_KILLPG\n\n/* Define if you have the 'kqueue' functions. */\n#undef HAVE_KQUEUE\n\n/* Define to 1 if you have the <langinfo.h> header file. */\n#undef HAVE_LANGINFO_H\n\n/* Defined to enable large file support when an off_t is bigger than a long\n   and long long is available and at least as big as an off_t. You may need to\n   add some flags for configuration and compilation to enable this mode. (For\n   Solaris and Linux, the necessary defines are already defined.) */\n#undef HAVE_LARGEFILE_SUPPORT\n\n/* Define to 1 if you have the 'lchflags' function. */\n#undef HAVE_LCHFLAGS\n\n/* Define to 1 if you have the `lchmod' function. */\n#undef HAVE_LCHMOD\n\n/* Define to 1 if you have the `lchown' function. */\n#undef HAVE_LCHOWN\n\n/* Define to 1 if you have the `lgamma' function. */\n#undef HAVE_LGAMMA\n\n/* Define to 1 if you have the `dl' library (-ldl). */\n#undef HAVE_LIBDL\n\n/* Define to 1 if you have the `dld' library (-ldld). */\n#undef HAVE_LIBDLD\n\n/* Define to 1 if you have the `ieee' library (-lieee). */\n#undef HAVE_LIBIEEE\n\n/* Define to 1 if you have the <libintl.h> header file. */\n#undef HAVE_LIBINTL_H\n\n/* Define if you have the readline library (-lreadline). */\n#undef HAVE_LIBREADLINE\n\n/* Define to 1 if you have the `resolv' library (-lresolv). */\n#undef HAVE_LIBRESOLV\n\n/* Define to 1 if you have the `sendfile' library (-lsendfile). */\n#undef HAVE_LIBSENDFILE\n\n/* Define to 1 if you have the <libutil.h> header file. */\n#undef HAVE_LIBUTIL_H\n\n/* Define if you have the 'link' function. */\n#undef HAVE_LINK\n\n/* Define to 1 if you have the `linkat' function. */\n#undef HAVE_LINKAT\n\n/* Define to 1 if you have the <linux/can/bcm.h> header file. */\n#undef HAVE_LINUX_CAN_BCM_H\n\n/* Define to 1 if you have the <linux/can.h> header file. */\n#undef HAVE_LINUX_CAN_H\n\n/* Define if compiling using Linux 3.6 or later. */\n#undef HAVE_LINUX_CAN_RAW_FD_FRAMES\n\n/* Define to 1 if you have the <linux/can/raw.h> header file. */\n#undef HAVE_LINUX_CAN_RAW_H\n\n/* Define to 1 if you have the <linux/netlink.h> header file. */\n#undef HAVE_LINUX_NETLINK_H\n\n/* Define to 1 if you have the <linux/random.h> header file. */\n#undef HAVE_LINUX_RANDOM_H\n\n/* Define to 1 if you have the <linux/tipc.h> header file. */\n#undef HAVE_LINUX_TIPC_H\n\n/* Define to 1 if you have the `lockf' function. */\n#undef HAVE_LOCKF\n\n/* Define to 1 if you have the `log1p' function. */\n#undef HAVE_LOG1P\n\n/* Define to 1 if you have the `log2' function. */\n#undef HAVE_LOG2\n\n/* Define this if you have the type long double. */\n#undef HAVE_LONG_DOUBLE\n\n/* Define this if you have the type long long. */\n#undef HAVE_LONG_LONG\n\n/* Define to 1 if you have the `lstat' function. */\n#undef HAVE_LSTAT\n\n/* Define to 1 if you have the `lutimes' function. */\n#undef HAVE_LUTIMES\n\n/* Define this if you have the makedev macro. */\n#undef HAVE_MAKEDEV\n\n/* Define to 1 if you have the `mbrtowc' function. */\n#undef HAVE_MBRTOWC\n\n/* Define to 1 if you have the `memmove' function. */\n#undef HAVE_MEMMOVE\n\n/* Define to 1 if you have the <memory.h> header file. */\n#undef HAVE_MEMORY_H\n\n/* Define to 1 if you have the `memrchr' function. */\n#undef HAVE_MEMRCHR\n\n/* Define to 1 if you have the `mkdirat' function. */\n#undef HAVE_MKDIRAT\n\n/* Define to 1 if you have the `mkfifo' function. */\n#undef HAVE_MKFIFO\n\n/* Define to 1 if you have the `mkfifoat' function. */\n#undef HAVE_MKFIFOAT\n\n/* Define to 1 if you have the `mknod' function. */\n#undef HAVE_MKNOD\n\n/* Define to 1 if you have the `mknodat' function. */\n#undef HAVE_MKNODAT\n\n/* Define to 1 if you have the `mktime' function. */\n#undef HAVE_MKTIME\n\n/* Define to 1 if you have the `mmap' function. */\n#undef HAVE_MMAP\n\n/* Define to 1 if you have the `mremap' function. */\n#undef HAVE_MREMAP\n\n/* Define to 1 if you have the <ncurses.h> header file. */\n#undef HAVE_NCURSES_H\n\n/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */\n#undef HAVE_NDIR_H\n\n/* Define to 1 if you have the <netpacket/packet.h> header file. */\n#undef HAVE_NETPACKET_PACKET_H\n\n/* Define to 1 if you have the <net/if.h> header file. */\n#undef HAVE_NET_IF_H\n\n/* Define to 1 if you have the `nice' function. */\n#undef HAVE_NICE\n\n/* Define to 1 if you have the `openat' function. */\n#undef HAVE_OPENAT\n\n/* Define to 1 if you have the `openpty' function. */\n#undef HAVE_OPENPTY\n\n/* Define if compiling using MacOS X 10.5 SDK or later. */\n#undef HAVE_OSX105_SDK\n\n/* Define to 1 if you have the `pathconf' function. */\n#undef HAVE_PATHCONF\n\n/* Define to 1 if you have the `pause' function. */\n#undef HAVE_PAUSE\n\n/* Define to 1 if you have the `pipe2' function. */\n#undef HAVE_PIPE2\n\n/* Define to 1 if you have the `plock' function. */\n#undef HAVE_PLOCK\n\n/* Define to 1 if you have the `poll' function. */\n#undef HAVE_POLL\n\n/* Define to 1 if you have the <poll.h> header file. */\n#undef HAVE_POLL_H\n\n/* Define to 1 if you have the `posix_fadvise' function. */\n#undef HAVE_POSIX_FADVISE\n\n/* Define to 1 if you have the `posix_fallocate' function. */\n#undef HAVE_POSIX_FALLOCATE\n\n/* Define to 1 if you have the `pread' function. */\n#undef HAVE_PREAD\n\n/* Define if you have the 'prlimit' functions. */\n#undef HAVE_PRLIMIT\n\n/* Define to 1 if you have the <process.h> header file. */\n#undef HAVE_PROCESS_H\n\n/* Define if your compiler supports function prototype */\n#undef HAVE_PROTOTYPES\n\n/* Define to 1 if you have the `pthread_atfork' function. */\n#undef HAVE_PTHREAD_ATFORK\n\n/* Defined for Solaris 2.6 bug in pthread header. */\n#undef HAVE_PTHREAD_DESTRUCTOR\n\n/* Define to 1 if you have the <pthread.h> header file. */\n#undef HAVE_PTHREAD_H\n\n/* Define to 1 if you have the `pthread_init' function. */\n#undef HAVE_PTHREAD_INIT\n\n/* Define to 1 if you have the `pthread_kill' function. */\n#undef HAVE_PTHREAD_KILL\n\n/* Define to 1 if you have the `pthread_sigmask' function. */\n#undef HAVE_PTHREAD_SIGMASK\n\n/* Define to 1 if you have the <pty.h> header file. */\n#undef HAVE_PTY_H\n\n/* Define to 1 if you have the `putenv' function. */\n#undef HAVE_PUTENV\n\n/* Define to 1 if you have the `pwrite' function. */\n#undef HAVE_PWRITE\n\n/* Define to 1 if you have the `readlink' function. */\n#undef HAVE_READLINK\n\n/* Define to 1 if you have the `readlinkat' function. */\n#undef HAVE_READLINKAT\n\n/* Define to 1 if you have the `readv' function. */\n#undef HAVE_READV\n\n/* Define to 1 if you have the `realpath' function. */\n#undef HAVE_REALPATH\n\n/* Define to 1 if you have the `renameat' function. */\n#undef HAVE_RENAMEAT\n\n/* Define if readline supports append_history */\n#undef HAVE_RL_APPEND_HISTORY\n\n/* Define if you have readline 2.1 */\n#undef HAVE_RL_CALLBACK\n\n/* Define if you can turn off readline's signal handling. */\n#undef HAVE_RL_CATCH_SIGNAL\n\n/* Define if you have readline 2.2 */\n#undef HAVE_RL_COMPLETION_APPEND_CHARACTER\n\n/* Define if you have readline 4.0 */\n#undef HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK\n\n/* Define if you have readline 4.2 */\n#undef HAVE_RL_COMPLETION_MATCHES\n\n/* Define if you have rl_completion_suppress_append */\n#undef HAVE_RL_COMPLETION_SUPPRESS_APPEND\n\n/* Define if you have readline 4.0 */\n#undef HAVE_RL_PRE_INPUT_HOOK\n\n/* Define if you have readline 4.0 */\n#undef HAVE_RL_RESIZE_TERMINAL\n\n/* Define to 1 if you have the `round' function. */\n#undef HAVE_ROUND\n\n/* Define to 1 if you have the `sched_get_priority_max' function. */\n#undef HAVE_SCHED_GET_PRIORITY_MAX\n\n/* Define to 1 if you have the <sched.h> header file. */\n#undef HAVE_SCHED_H\n\n/* Define to 1 if you have the `sched_rr_get_interval' function. */\n#undef HAVE_SCHED_RR_GET_INTERVAL\n\n/* Define to 1 if you have the `sched_setaffinity' function. */\n#undef HAVE_SCHED_SETAFFINITY\n\n/* Define to 1 if you have the `sched_setparam' function. */\n#undef HAVE_SCHED_SETPARAM\n\n/* Define to 1 if you have the `sched_setscheduler' function. */\n#undef HAVE_SCHED_SETSCHEDULER\n\n/* Define to 1 if you have the `select' function. */\n#undef HAVE_SELECT\n\n/* Define to 1 if you have the `sem_getvalue' function. */\n#undef HAVE_SEM_GETVALUE\n\n/* Define to 1 if you have the `sem_open' function. */\n#undef HAVE_SEM_OPEN\n\n/* Define to 1 if you have the `sem_timedwait' function. */\n#undef HAVE_SEM_TIMEDWAIT\n\n/* Define to 1 if you have the `sem_unlink' function. */\n#undef HAVE_SEM_UNLINK\n\n/* Define to 1 if you have the `sendfile' function. */\n#undef HAVE_SENDFILE\n\n/* Define to 1 if you have the `setegid' function. */\n#undef HAVE_SETEGID\n\n/* Define to 1 if you have the `seteuid' function. */\n#undef HAVE_SETEUID\n\n/* Define to 1 if you have the `setgid' function. */\n#undef HAVE_SETGID\n\n/* Define if you have the 'setgroups' function. */\n#undef HAVE_SETGROUPS\n\n/* Define to 1 if you have the `sethostname' function. */\n#undef HAVE_SETHOSTNAME\n\n/* Define to 1 if you have the `setitimer' function. */\n#undef HAVE_SETITIMER\n\n/* Define to 1 if you have the `setlocale' function. */\n#undef HAVE_SETLOCALE\n\n/* Define to 1 if you have the `setpgid' function. */\n#undef HAVE_SETPGID\n\n/* Define to 1 if you have the `setpgrp' function. */\n#undef HAVE_SETPGRP\n\n/* Define to 1 if you have the `setpriority' function. */\n#undef HAVE_SETPRIORITY\n\n/* Define to 1 if you have the `setregid' function. */\n#undef HAVE_SETREGID\n\n/* Define to 1 if you have the `setresgid' function. */\n#undef HAVE_SETRESGID\n\n/* Define to 1 if you have the `setresuid' function. */\n#undef HAVE_SETRESUID\n\n/* Define to 1 if you have the `setreuid' function. */\n#undef HAVE_SETREUID\n\n/* Define to 1 if you have the `setsid' function. */\n#undef HAVE_SETSID\n\n/* Define to 1 if you have the `setuid' function. */\n#undef HAVE_SETUID\n\n/* Define to 1 if you have the `setvbuf' function. */\n#undef HAVE_SETVBUF\n\n/* Define to 1 if you have the <shadow.h> header file. */\n#undef HAVE_SHADOW_H\n\n/* Define to 1 if you have the `sigaction' function. */\n#undef HAVE_SIGACTION\n\n/* Define to 1 if you have the `sigaltstack' function. */\n#undef HAVE_SIGALTSTACK\n\n/* Define to 1 if you have the `siginterrupt' function. */\n#undef HAVE_SIGINTERRUPT\n\n/* Define to 1 if you have the <signal.h> header file. */\n#undef HAVE_SIGNAL_H\n\n/* Define to 1 if you have the `sigpending' function. */\n#undef HAVE_SIGPENDING\n\n/* Define to 1 if you have the `sigrelse' function. */\n#undef HAVE_SIGRELSE\n\n/* Define to 1 if you have the `sigtimedwait' function. */\n#undef HAVE_SIGTIMEDWAIT\n\n/* Define to 1 if you have the `sigwait' function. */\n#undef HAVE_SIGWAIT\n\n/* Define to 1 if you have the `sigwaitinfo' function. */\n#undef HAVE_SIGWAITINFO\n\n/* Define to 1 if you have the `snprintf' function. */\n#undef HAVE_SNPRINTF\n\n/* Define if sockaddr has sa_len member */\n#undef HAVE_SOCKADDR_SA_LEN\n\n/* struct sockaddr_storage (sys/socket.h) */\n#undef HAVE_SOCKADDR_STORAGE\n\n/* Define if you have the 'socketpair' function. */\n#undef HAVE_SOCKETPAIR\n\n/* Define to 1 if you have the <spawn.h> header file. */\n#undef HAVE_SPAWN_H\n\n/* Define if your compiler provides ssize_t */\n#undef HAVE_SSIZE_T\n\n/* Define to 1 if you have the `statvfs' function. */\n#undef HAVE_STATVFS\n\n/* Define if you have struct stat.st_mtim.tv_nsec */\n#undef HAVE_STAT_TV_NSEC\n\n/* Define if you have struct stat.st_mtimensec */\n#undef HAVE_STAT_TV_NSEC2\n\n/* Define if your compiler supports variable length function prototypes (e.g.\n   void fprintf(FILE *, char *, ...);) *and* <stdarg.h> */\n#undef HAVE_STDARG_PROTOTYPES\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#undef HAVE_STDINT_H\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#undef HAVE_STDLIB_H\n\n/* Has stdatomic.h, atomic_int and _Atomic void* types work */\n#undef HAVE_STD_ATOMIC\n\n/* Define to 1 if you have the `strdup' function. */\n#undef HAVE_STRDUP\n\n/* Define to 1 if you have the `strftime' function. */\n#undef HAVE_STRFTIME\n\n/* Define to 1 if you have the <strings.h> header file. */\n#undef HAVE_STRINGS_H\n\n/* Define to 1 if you have the <string.h> header file. */\n#undef HAVE_STRING_H\n\n/* Define to 1 if you have the `strlcpy' function. */\n#undef HAVE_STRLCPY\n\n/* Define to 1 if you have the <stropts.h> header file. */\n#undef HAVE_STROPTS_H\n\n/* Define to 1 if `st_birthtime' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_BIRTHTIME\n\n/* Define to 1 if `st_blksize' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_BLKSIZE\n\n/* Define to 1 if `st_blocks' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_BLOCKS\n\n/* Define to 1 if `st_flags' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_FLAGS\n\n/* Define to 1 if `st_gen' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_GEN\n\n/* Define to 1 if `st_rdev' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_RDEV\n\n/* Define to 1 if `tm_zone' is a member of `struct tm'. */\n#undef HAVE_STRUCT_TM_TM_ZONE\n\n/* Define if you have the 'symlink' function. */\n#undef HAVE_SYMLINK\n\n/* Define to 1 if you have the `symlinkat' function. */\n#undef HAVE_SYMLINKAT\n\n/* Define to 1 if you have the `sync' function. */\n#undef HAVE_SYNC\n\n/* Define to 1 if you have the `sysconf' function. */\n#undef HAVE_SYSCONF\n\n/* Define to 1 if you have the <sysexits.h> header file. */\n#undef HAVE_SYSEXITS_H\n\n/* Define to 1 if you have the <sys/audioio.h> header file. */\n#undef HAVE_SYS_AUDIOIO_H\n\n/* Define to 1 if you have the <sys/bsdtty.h> header file. */\n#undef HAVE_SYS_BSDTTY_H\n\n/* Define to 1 if you have the <sys/devpoll.h> header file. */\n#undef HAVE_SYS_DEVPOLL_H\n\n/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_SYS_DIR_H\n\n/* Define to 1 if you have the <sys/endian.h> header file. */\n#undef HAVE_SYS_ENDIAN_H\n\n/* Define to 1 if you have the <sys/epoll.h> header file. */\n#undef HAVE_SYS_EPOLL_H\n\n/* Define to 1 if you have the <sys/event.h> header file. */\n#undef HAVE_SYS_EVENT_H\n\n/* Define to 1 if you have the <sys/file.h> header file. */\n#undef HAVE_SYS_FILE_H\n\n/* Define to 1 if you have the <sys/ioctl.h> header file. */\n#undef HAVE_SYS_IOCTL_H\n\n/* Define to 1 if you have the <sys/kern_control.h> header file. */\n#undef HAVE_SYS_KERN_CONTROL_H\n\n/* Define to 1 if you have the <sys/loadavg.h> header file. */\n#undef HAVE_SYS_LOADAVG_H\n\n/* Define to 1 if you have the <sys/lock.h> header file. */\n#undef HAVE_SYS_LOCK_H\n\n/* Define to 1 if you have the <sys/mkdev.h> header file. */\n#undef HAVE_SYS_MKDEV_H\n\n/* Define to 1 if you have the <sys/modem.h> header file. */\n#undef HAVE_SYS_MODEM_H\n\n/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_SYS_NDIR_H\n\n/* Define to 1 if you have the <sys/param.h> header file. */\n#undef HAVE_SYS_PARAM_H\n\n/* Define to 1 if you have the <sys/poll.h> header file. */\n#undef HAVE_SYS_POLL_H\n\n/* Define to 1 if you have the <sys/random.h> header file. */\n#undef HAVE_SYS_RANDOM_H\n\n/* Define to 1 if you have the <sys/resource.h> header file. */\n#undef HAVE_SYS_RESOURCE_H\n\n/* Define to 1 if you have the <sys/select.h> header file. */\n#undef HAVE_SYS_SELECT_H\n\n/* Define to 1 if you have the <sys/sendfile.h> header file. */\n#undef HAVE_SYS_SENDFILE_H\n\n/* Define to 1 if you have the <sys/socket.h> header file. */\n#undef HAVE_SYS_SOCKET_H\n\n/* Define to 1 if you have the <sys/statvfs.h> header file. */\n#undef HAVE_SYS_STATVFS_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#undef HAVE_SYS_STAT_H\n\n/* Define to 1 if you have the <sys/syscall.h> header file. */\n#undef HAVE_SYS_SYSCALL_H\n\n/* Define to 1 if you have the <sys/sys_domain.h> header file. */\n#undef HAVE_SYS_SYS_DOMAIN_H\n\n/* Define to 1 if you have the <sys/termio.h> header file. */\n#undef HAVE_SYS_TERMIO_H\n\n/* Define to 1 if you have the <sys/times.h> header file. */\n#undef HAVE_SYS_TIMES_H\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#undef HAVE_SYS_TIME_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <sys/uio.h> header file. */\n#undef HAVE_SYS_UIO_H\n\n/* Define to 1 if you have the <sys/un.h> header file. */\n#undef HAVE_SYS_UN_H\n\n/* Define to 1 if you have the <sys/utsname.h> header file. */\n#undef HAVE_SYS_UTSNAME_H\n\n/* Define to 1 if you have the <sys/wait.h> header file. */\n#undef HAVE_SYS_WAIT_H\n\n/* Define to 1 if you have the <sys/xattr.h> header file. */\n#undef HAVE_SYS_XATTR_H\n\n/* Define to 1 if you have the `tcgetpgrp' function. */\n#undef HAVE_TCGETPGRP\n\n/* Define to 1 if you have the `tcsetpgrp' function. */\n#undef HAVE_TCSETPGRP\n\n/* Define to 1 if you have the `tempnam' function. */\n#undef HAVE_TEMPNAM\n\n/* Define to 1 if you have the <termios.h> header file. */\n#undef HAVE_TERMIOS_H\n\n/* Define to 1 if you have the <term.h> header file. */\n#undef HAVE_TERM_H\n\n/* Define to 1 if you have the `tgamma' function. */\n#undef HAVE_TGAMMA\n\n/* Define to 1 if you have the `timegm' function. */\n#undef HAVE_TIMEGM\n\n/* Define to 1 if you have the `times' function. */\n#undef HAVE_TIMES\n\n/* Define to 1 if you have the `tmpfile' function. */\n#undef HAVE_TMPFILE\n\n/* Define to 1 if you have the `tmpnam' function. */\n#undef HAVE_TMPNAM\n\n/* Define to 1 if you have the `tmpnam_r' function. */\n#undef HAVE_TMPNAM_R\n\n/* Define to 1 if your `struct tm' has `tm_zone'. Deprecated, use\n   `HAVE_STRUCT_TM_TM_ZONE' instead. */\n#undef HAVE_TM_ZONE\n\n/* Define to 1 if you have the `truncate' function. */\n#undef HAVE_TRUNCATE\n\n/* Define to 1 if you don't have `tm_zone' but do have the external array\n   `tzname'. */\n#undef HAVE_TZNAME\n\n/* Define this if you have tcl and TCL_UTF_MAX==6 */\n#undef HAVE_UCS4_TCL\n\n/* Define if your compiler provides uint32_t. */\n#undef HAVE_UINT32_T\n\n/* Define if your compiler provides uint64_t. */\n#undef HAVE_UINT64_T\n\n/* Define to 1 if the system has the type `uintptr_t'. */\n#undef HAVE_UINTPTR_T\n\n/* Define to 1 if you have the `uname' function. */\n#undef HAVE_UNAME\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#undef HAVE_UNISTD_H\n\n/* Define to 1 if you have the `unlinkat' function. */\n#undef HAVE_UNLINKAT\n\n/* Define to 1 if you have the `unsetenv' function. */\n#undef HAVE_UNSETENV\n\n/* Define if you have a useable wchar_t type defined in wchar.h; useable means\n   wchar_t must be an unsigned type with at least 16 bits. (see\n   Include/unicodeobject.h). */\n#undef HAVE_USABLE_WCHAR_T\n\n/* Define to 1 if you have the <util.h> header file. */\n#undef HAVE_UTIL_H\n\n/* Define to 1 if you have the `utimensat' function. */\n#undef HAVE_UTIMENSAT\n\n/* Define to 1 if you have the `utimes' function. */\n#undef HAVE_UTIMES\n\n/* Define to 1 if you have the <utime.h> header file. */\n#undef HAVE_UTIME_H\n\n/* Define to 1 if you have the `wait3' function. */\n#undef HAVE_WAIT3\n\n/* Define to 1 if you have the `wait4' function. */\n#undef HAVE_WAIT4\n\n/* Define to 1 if you have the `waitid' function. */\n#undef HAVE_WAITID\n\n/* Define to 1 if you have the `waitpid' function. */\n#undef HAVE_WAITPID\n\n/* Define if the compiler provides a wchar.h header file. */\n#undef HAVE_WCHAR_H\n\n/* Define to 1 if you have the `wcscoll' function. */\n#undef HAVE_WCSCOLL\n\n/* Define to 1 if you have the `wcsftime' function. */\n#undef HAVE_WCSFTIME\n\n/* Define to 1 if you have the `wcsxfrm' function. */\n#undef HAVE_WCSXFRM\n\n/* Define to 1 if you have the `wmemcmp' function. */\n#undef HAVE_WMEMCMP\n\n/* Define if tzset() actually switches the local timezone in a meaningful way.\n   */\n#undef HAVE_WORKING_TZSET\n\n/* Define to 1 if you have the `writev' function. */\n#undef HAVE_WRITEV\n\n/* Define if the zlib library has inflateCopy */\n#undef HAVE_ZLIB_COPY\n\n/* Define to 1 if you have the `_getpty' function. */\n#undef HAVE__GETPTY\n\n/* Define if log1p(-0.) is 0. rather than -0. */\n#undef LOG1P_DROPS_ZERO_SIGN\n\n/* Define to 1 if `major', `minor', and `makedev' are declared in <mkdev.h>.\n   */\n#undef MAJOR_IN_MKDEV\n\n/* Define to 1 if `major', `minor', and `makedev' are declared in\n   <sysmacros.h>. */\n#undef MAJOR_IN_SYSMACROS\n\n/* Define if mvwdelch in curses.h is an expression. */\n#undef MVWDELCH_IS_EXPRESSION\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* Define if POSIX semaphores aren't enabled on your system */\n#undef POSIX_SEMAPHORES_NOT_ENABLED\n\n/* Defined if PTHREAD_SCOPE_SYSTEM supported. */\n#undef PTHREAD_SYSTEM_SCHED_SUPPORTED\n\n/* Define as the preferred size in bits of long digits */\n#undef PYLONG_BITS_IN_DIGIT\n\n/* Define to printf format modifier for long long type */\n#undef PY_FORMAT_LONG_LONG\n\n/* Define to printf format modifier for Py_ssize_t */\n#undef PY_FORMAT_SIZE_T\n\n/* Define if you want to build an interpreter with many run-time checks. */\n#undef Py_DEBUG\n\n/* Defined if Python is built as a shared library. */\n#undef Py_ENABLE_SHARED\n\n/* Define hash algorithm for str, bytes and memoryview. SipHash24: 1, FNV: 2,\n   externally defined: 0 */\n#undef Py_HASH_ALGORITHM\n\n/* assume C89 semantics that RETSIGTYPE is always void */\n#undef RETSIGTYPE\n\n/* Define if setpgrp() must be called as setpgrp(0, 0). */\n#undef SETPGRP_HAVE_ARG\n\n/* Define if i>>j for signed int i does not extend the sign bit when i < 0 */\n#undef SIGNED_RIGHT_SHIFT_ZERO_FILLS\n\n/* The size of `double', as computed by sizeof. */\n#undef SIZEOF_DOUBLE\n\n/* The size of `float', as computed by sizeof. */\n#undef SIZEOF_FLOAT\n\n/* The size of `fpos_t', as computed by sizeof. */\n#undef SIZEOF_FPOS_T\n\n/* The size of `int', as computed by sizeof. */\n#undef SIZEOF_INT\n\n/* The size of `long', as computed by sizeof. */\n#undef SIZEOF_LONG\n\n/* The size of `long double', as computed by sizeof. */\n#undef SIZEOF_LONG_DOUBLE\n\n/* The size of `long long', as computed by sizeof. */\n#undef SIZEOF_LONG_LONG\n\n/* The size of `off_t', as computed by sizeof. */\n#undef SIZEOF_OFF_T\n\n/* The size of `pid_t', as computed by sizeof. */\n#undef SIZEOF_PID_T\n\n/* The size of `pthread_t', as computed by sizeof. */\n#undef SIZEOF_PTHREAD_T\n\n/* The size of `short', as computed by sizeof. */\n#undef SIZEOF_SHORT\n\n/* The size of `size_t', as computed by sizeof. */\n#undef SIZEOF_SIZE_T\n\n/* The size of `time_t', as computed by sizeof. */\n#undef SIZEOF_TIME_T\n\n/* The size of `uintptr_t', as computed by sizeof. */\n#undef SIZEOF_UINTPTR_T\n\n/* The size of `void *', as computed by sizeof. */\n#undef SIZEOF_VOID_P\n\n/* The size of `wchar_t', as computed by sizeof. */\n#undef SIZEOF_WCHAR_T\n\n/* The size of `_Bool', as computed by sizeof. */\n#undef SIZEOF__BOOL\n\n/* Define to 1 if you have the ANSI C header files. */\n#undef STDC_HEADERS\n\n/* Define if you can safely include both <sys/select.h> and <sys/time.h>\n   (which you can't on SCO ODT 3.0). */\n#undef SYS_SELECT_WITH_SYS_TIME\n\n/* Define if tanh(-0.) is -0., or if platform doesn't have signed zeros */\n#undef TANH_PRESERVES_ZERO_SIGN\n\n/* Library needed by timemodule.c: librt may be needed for clock_gettime() */\n#undef TIMEMODULE_LIB\n\n/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */\n#undef TIME_WITH_SYS_TIME\n\n/* Define to 1 if your <sys/time.h> declares `struct tm'. */\n#undef TM_IN_SYS_TIME\n\n/* Define if you want to use computed gotos in ceval.c. */\n#undef USE_COMPUTED_GOTOS\n\n/* Define to use the C99 inline keyword. */\n#undef USE_INLINE\n\n/* Enable extensions on AIX 3, Interix.  */\n#ifndef _ALL_SOURCE\n# undef _ALL_SOURCE\n#endif\n/* Enable GNU extensions on systems that have them.  */\n#ifndef _GNU_SOURCE\n# undef _GNU_SOURCE\n#endif\n/* Enable threading extensions on Solaris.  */\n#ifndef _POSIX_PTHREAD_SEMANTICS\n# undef _POSIX_PTHREAD_SEMANTICS\n#endif\n/* Enable extensions on HP NonStop.  */\n#ifndef _TANDEM_SOURCE\n# undef _TANDEM_SOURCE\n#endif\n/* Enable general extensions on Solaris.  */\n#ifndef __EXTENSIONS__\n# undef __EXTENSIONS__\n#endif\n\n\n/* Define if a va_list is an array of some kind */\n#undef VA_LIST_IS_ARRAY\n\n/* Define if you want SIGFPE handled (see Include/pyfpe.h). */\n#undef WANT_SIGFPE_HANDLER\n\n/* Define if WINDOW in curses.h offers a field _flags. */\n#undef WINDOW_HAS_FLAGS\n\n/* Define if you want documentation strings in extension modules */\n#undef WITH_DOC_STRINGS\n\n/* Define if you want to use the new-style (Openstep, Rhapsody, MacOS) dynamic\n   linker (dyld) instead of the old-style (NextStep) dynamic linker (rld).\n   Dyld is necessary to support frameworks. */\n#undef WITH_DYLD\n\n/* Define to 1 if libintl is needed for locale functions. */\n#undef WITH_LIBINTL\n\n/* Define if you want to produce an OpenStep/Rhapsody framework (shared\n   library plus accessory files). */\n#undef WITH_NEXT_FRAMEWORK\n\n/* Define if you want to compile in Python-specific mallocs */\n#undef WITH_PYMALLOC\n\n/* Define if you want to compile in rudimentary thread support */\n#undef WITH_THREAD\n\n/* Define to profile with the Pentium timestamp counter */\n#undef WITH_TSC\n\n/* Define if you want pymalloc to be disabled when running under valgrind */\n#undef WITH_VALGRIND\n\n/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n   significant byte first (like Motorola and SPARC, unlike Intel). */\n#if defined AC_APPLE_UNIVERSAL_BUILD\n# if defined __BIG_ENDIAN__\n#  define WORDS_BIGENDIAN 1\n# endif\n#else\n# ifndef WORDS_BIGENDIAN\n#  undef WORDS_BIGENDIAN\n# endif\n#endif\n\n/* Define if arithmetic is subject to x87-style double rounding issue */\n#undef X87_DOUBLE_ROUNDING\n\n/* Define on OpenBSD to activate all library features */\n#undef _BSD_SOURCE\n\n/* Define on Irix to enable u_int */\n#undef _BSD_TYPES\n\n/* Define on Darwin to activate all library features */\n#undef _DARWIN_C_SOURCE\n\n/* This must be set to 64 on some systems to enable large file support. */\n#undef _FILE_OFFSET_BITS\n\n/* Define on Linux to activate all library features */\n#undef _GNU_SOURCE\n\n/* Define to include mbstate_t for mbrtowc */\n#undef _INCLUDE__STDC_A1_SOURCE\n\n/* This must be defined on some systems to enable large file support. */\n#undef _LARGEFILE_SOURCE\n\n/* This must be defined on AIX systems to enable large file support. */\n#undef _LARGE_FILES\n\n/* Define to 1 if on MINIX. */\n#undef _MINIX\n\n/* Define on NetBSD to activate all library features */\n#undef _NETBSD_SOURCE\n\n/* Define to 2 if the system does not provide POSIX.1 features except with\n   this defined. */\n#undef _POSIX_1_SOURCE\n\n/* Define to activate features from IEEE Stds 1003.1-2008 */\n#undef _POSIX_C_SOURCE\n\n/* Define to 1 if you need to in order for `stat' and other things to work. */\n#undef _POSIX_SOURCE\n\n/* Define if you have POSIX threads, and your system does not define that. */\n#undef _POSIX_THREADS\n\n/* Define to force use of thread-safe errno, h_errno, and other functions */\n#undef _REENTRANT\n\n/* Define for Solaris 2.5.1 so the uint32_t typedef from <sys/synch.h>,\n   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the\n   #define below would cause a syntax error. */\n#undef _UINT32_T\n\n/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,\n   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the\n   #define below would cause a syntax error. */\n#undef _UINT64_T\n\n/* Define to the level of X/Open that your system supports */\n#undef _XOPEN_SOURCE\n\n/* Define to activate Unix95-and-earlier features */\n#undef _XOPEN_SOURCE_EXTENDED\n\n/* Define on FreeBSD to activate all library features */\n#undef __BSD_VISIBLE\n\n/* Define to 1 if type `char' is unsigned and you are not using gcc.  */\n#ifndef __CHAR_UNSIGNED__\n# undef __CHAR_UNSIGNED__\n#endif\n\n/* Define to 'long' if <time.h> doesn't define. */\n#undef clock_t\n\n/* Define to empty if `const' does not conform to ANSI C. */\n#undef const\n\n/* Define to `int' if <sys/types.h> doesn't define. */\n#undef gid_t\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n#undef inline\n#endif\n\n/* Define to the type of a signed integer type of width exactly 32 bits if\n   such a type exists and the standard includes do not define it. */\n#undef int32_t\n\n/* Define to the type of a signed integer type of width exactly 64 bits if\n   such a type exists and the standard includes do not define it. */\n#undef int64_t\n\n/* Define to `int' if <sys/types.h> does not define. */\n#undef mode_t\n\n/* Define to `long int' if <sys/types.h> does not define. */\n#undef off_t\n\n/* Define to `int' if <sys/types.h> does not define. */\n#undef pid_t\n\n/* Define to empty if the keyword does not work. */\n#undef signed\n\n/* Define to `unsigned int' if <sys/types.h> does not define. */\n#undef size_t\n\n/* Define to `int' if <sys/socket.h> does not define. */\n#undef socklen_t\n\n/* Define to `int' if <sys/types.h> doesn't define. */\n#undef uid_t\n\n/* Define to the type of an unsigned integer type of width exactly 32 bits if\n   such a type exists and the standard includes do not define it. */\n#undef uint32_t\n\n/* Define to the type of an unsigned integer type of width exactly 64 bits if\n   such a type exists and the standard includes do not define it. */\n#undef uint64_t\n\n/* Define to empty if the keyword does not work. */\n#undef volatile\n\n\n/* Define the macros needed if on a UnixWare 7.x system. */\n#if defined(__USLC__) && defined(__SCO_VERSION__)\n#define STRICT_SYSV_CURSES /* Don't use ncurses extensions */\n#endif\n\n#endif /*Py_PYCONFIG_H*/\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/configure.ac": "dnl ***********************************************\ndnl * Please run autoreconf to test your changes! *\ndnl ***********************************************\n\n# Set VERSION so we only need to edit in one place (i.e., here)\nm4_define(PYTHON_VERSION, 3.5)\n\nAC_PREREQ(2.65)\n\nAC_INIT(python, PYTHON_VERSION, https://bugs.python.org/)\n\nAC_SUBST(BASECPPFLAGS)\nif test \"$srcdir\" != . -a \"$srcdir\" != \"$(pwd)\"; then\n    # If we're building out-of-tree, we need to make sure the following\n    # resources get picked up before their $srcdir counterparts.\n    #   Objects/ -> typeslots.inc\n    #   Include/ -> Python-ast.h, graminit.h\n    #   Python/  -> importlib.h\n    # (A side effect of this is that these resources will automatically be\n    #  regenerated when building out-of-tree, regardless of whether or not\n    #  the $srcdir counterpart is up-to-date.  This is an acceptable trade\n    #  off.)\n    BASECPPFLAGS=\"-IObjects -IInclude -IPython\"\nelse\n    BASECPPFLAGS=\"\"\nfi\n\nAC_SUBST(GITVERSION)\nAC_SUBST(GITTAG)\nAC_SUBST(GITBRANCH)\n\nif test -e $srcdir/.git\nthen\nAC_CHECK_PROG(HAS_GIT, git, found, not-found)\nelse\nHAS_GIT=no-repository\nfi\nif test $HAS_GIT = found\nthen\n    GITVERSION=\"git -C \\$(srcdir) rev-parse --short HEAD\"\n    GITTAG=\"git -C \\$(srcdir) describe --all --always --dirty\"\n    GITBRANCH=\"git -C \\$(srcdir) name-rev --name-only HEAD\"\nelse\n    GITVERSION=\"\"\n    GITTAG=\"\"\n    GITBRANCH=\"\"\nfi\n\nAC_CONFIG_SRCDIR([Include/object.h])\nAC_CONFIG_HEADER(pyconfig.h)\n\nAC_CANONICAL_HOST\nAC_SUBST(build)\nAC_SUBST(host)\n\n# pybuilddir.txt will be created by --generate-posix-vars in the Makefile\nrm -f pybuilddir.txt\n\nAC_CHECK_PROGS(PYTHON_FOR_REGEN, python$PACKAGE_VERSION python3 python, python3)\nAC_SUBST(PYTHON_FOR_REGEN)\n\nif test \"$cross_compiling\" = yes; then\n    AC_MSG_CHECKING([for python interpreter for cross build])\n    if test -z \"$PYTHON_FOR_BUILD\"; then\n        for interp in python$PACKAGE_VERSION python3 python; do\n\t    which $interp >/dev/null 2>&1 || continue\n\t    if $interp -c 'import sys;sys.exit(not sys.version_info@<:@:2@:>@ >= (3,3))'; then\n\t        break\n\t    fi\n            interp=\n\tdone\n        if test x$interp = x; then\n\t    AC_MSG_ERROR([python$PACKAGE_VERSION interpreter not found])\n\tfi\n        AC_MSG_RESULT($interp)\n\tPYTHON_FOR_BUILD='_PYTHON_PROJECT_BASE=$(abs_builddir) _PYTHON_HOST_PLATFORM=$(_PYTHON_HOST_PLATFORM) PYTHONPATH=$(shell test -f pybuilddir.txt && echo $(abs_builddir)/`cat pybuilddir.txt`:)$(srcdir)/Lib:$(srcdir)/Lib/$(PLATDIR) '$interp\n    fi\nelif test \"$cross_compiling\" = maybe; then\n    AC_MSG_ERROR([Cross compiling required --host=HOST-TUPLE and --build=ARCH])\nelse\n    PYTHON_FOR_BUILD='./$(BUILDPYTHON) -E'\nfi\nAC_SUBST(PYTHON_FOR_BUILD)\n\ndnl Ensure that if prefix is specified, it does not end in a slash. If\ndnl it does, we get path names containing '//' which is both ugly and\ndnl can cause trouble.\n\ndnl Last slash shouldn't be stripped if prefix=/\nif test \"$prefix\" != \"/\"; then\n    prefix=`echo \"$prefix\" | sed -e 's/\\/$//g'`\nfi\n\ndnl This is for stuff that absolutely must end up in pyconfig.h.\ndnl Please use pyport.h instead, if possible.\nAH_TOP([\n#ifndef Py_PYCONFIG_H\n#define Py_PYCONFIG_H\n])\nAH_BOTTOM([\n/* Define the macros needed if on a UnixWare 7.x system. */\n#if defined(__USLC__) && defined(__SCO_VERSION__)\n#define STRICT_SYSV_CURSES /* Don't use ncurses extensions */\n#endif\n\n#endif /*Py_PYCONFIG_H*/\n])\n\n# We don't use PACKAGE_ variables, and they cause conflicts\n# with other autoconf-based packages that include Python.h\ngrep -v 'define PACKAGE_' <confdefs.h >confdefs.h.new\nrm confdefs.h\nmv confdefs.h.new confdefs.h\n\nAC_SUBST(VERSION)\nVERSION=PYTHON_VERSION\n\n# Version number of Python's own shared library file.\nAC_SUBST(SOVERSION)\nSOVERSION=1.0\n\n# The later defininition of _XOPEN_SOURCE disables certain features\n# on Linux, so we need _GNU_SOURCE to re-enable them (makedev, tm_zone).\nAC_DEFINE(_GNU_SOURCE, 1, [Define on Linux to activate all library features])\n\n# The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables\n# certain features on NetBSD, so we need _NETBSD_SOURCE to re-enable\n# them.\nAC_DEFINE(_NETBSD_SOURCE, 1, [Define on NetBSD to activate all library features])\n\n# The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables\n# certain features on FreeBSD, so we need __BSD_VISIBLE to re-enable\n# them.\nAC_DEFINE(__BSD_VISIBLE, 1, [Define on FreeBSD to activate all library features])\n\n# The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables\n# u_int on Irix 5.3. Defining _BSD_TYPES brings it back.\nAC_DEFINE(_BSD_TYPES, 1, [Define on Irix to enable u_int])\n\n# The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables\n# certain features on Mac OS X, so we need _DARWIN_C_SOURCE to re-enable\n# them.\nAC_DEFINE(_DARWIN_C_SOURCE, 1, [Define on Darwin to activate all library features])\n\n\ndefine_xopen_source=yes\n\n# Arguments passed to configure.\nAC_SUBST(CONFIG_ARGS)\nCONFIG_ARGS=\"$ac_configure_args\"\n\nAC_MSG_CHECKING([for --enable-universalsdk])\nAC_ARG_ENABLE(universalsdk,\n\tAS_HELP_STRING([--enable-universalsdk@<:@=SDKDIR@:>@], [Build fat binary against Mac OS X SDK]),\n[\n\tcase $enableval in\n\tyes)\n\t\t# Locate the best usable SDK, see Mac/README.txt for more\n\t\t# information\n\t\tenableval=\"`/usr/bin/xcodebuild -version -sdk macosx Path 2>/dev/null`\"\n\t\tif ! ( echo $enableval | grep -E '\\.sdk' 1>/dev/null )\n\t\tthen\n\t\t\tenableval=/Developer/SDKs/MacOSX10.4u.sdk\n\t\t\tif test ! -d \"${enableval}\"\n\t\t\tthen\n\t\t\t\tenableval=/\n\t\t\tfi\n\t\tfi\n\t\t;;\n\tesac\n\tcase $enableval in\n\tno)\n\t\tUNIVERSALSDK=\n\t\tenable_universalsdk=\n\t\t;;\n\t*)\n\t\tUNIVERSALSDK=$enableval\n\t\tif test ! -d \"${UNIVERSALSDK}\"\n\t\tthen\n\t\t\tAC_MSG_ERROR([--enable-universalsdk specifies non-existing SDK: ${UNIVERSALSDK}])\n\t\tfi\n\t\t;;\n\tesac\n\n],[\n   \tUNIVERSALSDK=\n\tenable_universalsdk=\n])\nif test -n \"${UNIVERSALSDK}\"\nthen\n\tAC_MSG_RESULT(${UNIVERSALSDK})\nelse\n\tAC_MSG_RESULT(no)\nfi\nAC_SUBST(UNIVERSALSDK)\n\nAC_SUBST(ARCH_RUN_32BIT)\nARCH_RUN_32BIT=\"\"\n\n# For backward compatibility reasons we prefer to select '32-bit' if available,\n# otherwise use 'intel'\nUNIVERSAL_ARCHS=\"32-bit\"\nif test \"`uname -s`\" = \"Darwin\"\nthen\n\tif test -n \"${UNIVERSALSDK}\"\n\tthen\n\t\tif test -z \"`/usr/bin/file -L \"${UNIVERSALSDK}/usr/lib/libSystem.dylib\" | grep ppc`\"\n\t\tthen\n\t\t\tUNIVERSAL_ARCHS=\"intel\"\n\t\tfi\n\tfi\nfi\n\nAC_SUBST(LIPO_32BIT_FLAGS)\nAC_MSG_CHECKING(for --with-universal-archs)\nAC_ARG_WITH(universal-archs,\n    AS_HELP_STRING([--with-universal-archs=ARCH], [select architectures for universal build (\"32-bit\", \"64-bit\", \"3-way\", \"intel\", \"intel-32\", or \"all\")]),\n[\n\tUNIVERSAL_ARCHS=\"$withval\"\n],\n[])\nif test -n \"${UNIVERSALSDK}\"\nthen\n\tAC_MSG_RESULT(${UNIVERSAL_ARCHS})\nelse\n\tAC_MSG_RESULT(no)\nfi\n\nAC_ARG_WITH(framework-name,\n              AS_HELP_STRING([--with-framework-name=FRAMEWORK],\n                             [specify an alternate name of the framework built with --enable-framework]),\n[\n    PYTHONFRAMEWORK=${withval}\n    PYTHONFRAMEWORKDIR=${withval}.framework\n    PYTHONFRAMEWORKIDENTIFIER=org.python.`echo $withval | tr '[A-Z]' '[a-z]'`\n    ],[\n    PYTHONFRAMEWORK=Python\n    PYTHONFRAMEWORKDIR=Python.framework\n    PYTHONFRAMEWORKIDENTIFIER=org.python.python\n])\ndnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output\nAC_ARG_ENABLE(framework,\n              AS_HELP_STRING([--enable-framework@<:@=INSTALLDIR@:>@], [Build (MacOSX|Darwin) framework]),\n[\n\tcase $enableval in\n\tyes)\n\t\tenableval=/Library/Frameworks\n\tesac\n\tcase $enableval in\n\tno)\n\t\tPYTHONFRAMEWORK=\n\t\tPYTHONFRAMEWORKDIR=no-framework\n\t\tPYTHONFRAMEWORKPREFIX=\n\t\tPYTHONFRAMEWORKINSTALLDIR=\n\t\tFRAMEWORKINSTALLFIRST=\n\t\tFRAMEWORKINSTALLLAST=\n\t\tFRAMEWORKALTINSTALLFIRST=\n\t\tFRAMEWORKALTINSTALLLAST=\n\t\tFRAMEWORKPYTHONW=\n\t\tif test \"x${prefix}\" = \"xNONE\"; then\n\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${ac_default_prefix}\"\n\t\telse\n\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${prefix}\"\n\t\tfi\n\t\tenable_framework=\n\t\t;;\n\t*)\n\t\tPYTHONFRAMEWORKPREFIX=\"${enableval}\"\n\t\tPYTHONFRAMEWORKINSTALLDIR=$PYTHONFRAMEWORKPREFIX/$PYTHONFRAMEWORKDIR\n\t\tFRAMEWORKINSTALLFIRST=\"frameworkinstallstructure\"\n\t\tFRAMEWORKALTINSTALLFIRST=\"frameworkinstallstructure \"\n\t\tFRAMEWORKINSTALLLAST=\"frameworkinstallmaclib frameworkinstallapps frameworkinstallunixtools\"\n\t\tFRAMEWORKALTINSTALLLAST=\"frameworkinstallmaclib frameworkinstallapps frameworkaltinstallunixtools\"\n\t\tFRAMEWORKPYTHONW=\"frameworkpythonw\"\n\t\tFRAMEWORKINSTALLAPPSPREFIX=\"/Applications\"\n\n\t\tif test \"x${prefix}\" = \"xNONE\" ; then\n\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${ac_default_prefix}\"\n\n\t\telse\n\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${prefix}\"\n\t\tfi\n\n\t\tcase \"${enableval}\" in\n\t\t/System*)\n\t\t\tFRAMEWORKINSTALLAPPSPREFIX=\"/Applications\"\n\t\t\tif test \"${prefix}\" = \"NONE\" ; then\n\t\t\t\t# See below\n\t\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"/usr\"\n\t\t\tfi\n\t\t\t;;\n\n\t\t/Library*)\n\t\t\tFRAMEWORKINSTALLAPPSPREFIX=\"/Applications\"\n\t\t\t;;\n\n\t\t*/Library/Frameworks)\n\t\t\tMDIR=\"`dirname \"${enableval}\"`\"\n\t\t\tMDIR=\"`dirname \"${MDIR}\"`\"\n\t\t\tFRAMEWORKINSTALLAPPSPREFIX=\"${MDIR}/Applications\"\n\n\t\t\tif test \"${prefix}\" = \"NONE\"; then\n\t\t\t\t# User hasn't specified the\n\t\t\t\t# --prefix option, but wants to install\n\t\t\t\t# the framework in a non-default location,\n\t\t\t\t# ensure that the compatibility links get\n\t\t\t\t# installed relative to that prefix as well\n\t\t\t\t# instead of in /usr/local.\n\t\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${MDIR}\"\n\t\t\tfi\n\t\t\t;;\n\n\t\t*)\n\t\t\tFRAMEWORKINSTALLAPPSPREFIX=\"/Applications\"\n\t\t\t;;\n\t\tesac\n\n\t\tprefix=$PYTHONFRAMEWORKINSTALLDIR/Versions/$VERSION\n\n\t\t# Add files for Mac specific code to the list of output\n\t\t# files:\n\t\tAC_CONFIG_FILES(Mac/Makefile)\n\t\tAC_CONFIG_FILES(Mac/PythonLauncher/Makefile)\n\t\tAC_CONFIG_FILES(Mac/Resources/framework/Info.plist)\n\t\tAC_CONFIG_FILES(Mac/Resources/app/Info.plist)\n\tesac\n\t],[\n\tPYTHONFRAMEWORK=\n\tPYTHONFRAMEWORKDIR=no-framework\n\tPYTHONFRAMEWORKPREFIX=\n\tPYTHONFRAMEWORKINSTALLDIR=\n\tFRAMEWORKINSTALLFIRST=\n\tFRAMEWORKINSTALLLAST=\n\tFRAMEWORKALTINSTALLFIRST=\n\tFRAMEWORKALTINSTALLLAST=\n\tFRAMEWORKPYTHONW=\n\tif test \"x${prefix}\" = \"xNONE\" ; then\n\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${ac_default_prefix}\"\n\telse\n\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${prefix}\"\n\tfi\n\tenable_framework=\n\n])\nAC_SUBST(PYTHONFRAMEWORK)\nAC_SUBST(PYTHONFRAMEWORKIDENTIFIER)\nAC_SUBST(PYTHONFRAMEWORKDIR)\nAC_SUBST(PYTHONFRAMEWORKPREFIX)\nAC_SUBST(PYTHONFRAMEWORKINSTALLDIR)\nAC_SUBST(FRAMEWORKINSTALLFIRST)\nAC_SUBST(FRAMEWORKINSTALLLAST)\nAC_SUBST(FRAMEWORKALTINSTALLFIRST)\nAC_SUBST(FRAMEWORKALTINSTALLLAST)\nAC_SUBST(FRAMEWORKPYTHONW)\nAC_SUBST(FRAMEWORKUNIXTOOLSPREFIX)\nAC_SUBST(FRAMEWORKINSTALLAPPSPREFIX)\n\n##AC_ARG_WITH(dyld,\n##            AS_HELP_STRING([--with-dyld],\n##                           [Use (OpenStep|Rhapsody) dynamic linker]))\n##\n# Set name for machine-dependent library files\nAC_ARG_VAR([MACHDEP], [name for machine-dependent library files])\nAC_MSG_CHECKING(MACHDEP)\nif test -z \"$MACHDEP\"\nthen\n    # avoid using uname for cross builds\n    if test \"$cross_compiling\" = yes; then\n       # ac_sys_system and ac_sys_release are used for setting\n       # a lot of different things including 'define_xopen_source'\n       # in the case statement below.\n\tcase \"$host\" in\n\t*-*-linux*)\n\t\tac_sys_system=Linux\n\t\t;;\n\t*-*-cygwin*)\n\t\tac_sys_system=Cygwin\n\t\t;;\n\t*)\n\t\t# for now, limit cross builds to known configurations\n\t\tMACHDEP=\"unknown\"\n\t\tAC_MSG_ERROR([cross build not supported for $host])\n\tesac\n\tac_sys_release=\n    else\n\tac_sys_system=`uname -s`\n\tif test \"$ac_sys_system\" = \"AIX\" \\\n\t-o \"$ac_sys_system\" = \"UnixWare\" -o \"$ac_sys_system\" = \"OpenUNIX\"; then\n\t\tac_sys_release=`uname -v`\n\telse\n\t\tac_sys_release=`uname -r`\n\tfi\n    fi\n    ac_md_system=`echo $ac_sys_system |\n\t\t\ttr -d '[/ ]' | tr '[[A-Z]]' '[[a-z]]'`\n    ac_md_release=`echo $ac_sys_release |\n\t\t\ttr -d '[/ ]' | sed 's/^[[A-Z]]\\.//' | sed 's/\\..*//'`\n    MACHDEP=\"$ac_md_system$ac_md_release\"\n\n    case $MACHDEP in\n\tlinux*) MACHDEP=\"linux\";;\n\tcygwin*) MACHDEP=\"cygwin\";;\n\tdarwin*) MACHDEP=\"darwin\";;\n\tirix646) MACHDEP=\"irix6\";;\n\t'')\tMACHDEP=\"unknown\";;\n    esac\nfi\n\nAC_SUBST(_PYTHON_HOST_PLATFORM)\nif test \"$cross_compiling\" = yes; then\n\tcase \"$host\" in\n\t*-*-linux*)\n\t\tcase \"$host_cpu\" in\n\t\tarm*)\n\t\t\t_host_cpu=arm\n\t\t\t;;\n\t\t*)\n\t\t\t_host_cpu=$host_cpu\n\t\tesac\n\t\t;;\n\t*-*-cygwin*)\n\t\t_host_cpu=\n\t\t;;\n\t*)\n\t\t# for now, limit cross builds to known configurations\n\t\tMACHDEP=\"unknown\"\n\t\tAC_MSG_ERROR([cross build not supported for $host])\n\tesac\n\t_PYTHON_HOST_PLATFORM=\"$MACHDEP${_host_cpu:+-$_host_cpu}\"\nfi\n\n# Some systems cannot stand _XOPEN_SOURCE being defined at all; they\n# disable features if it is defined, without any means to access these\n# features as extensions. For these systems, we skip the definition of\n# _XOPEN_SOURCE. Before adding a system to the list to gain access to\n# some feature, make sure there is no alternative way to access this\n# feature. Also, when using wildcards, make sure you have verified the\n# need for not defining _XOPEN_SOURCE on all systems matching the\n# wildcard, and that the wildcard does not include future systems\n# (which may remove their limitations).\ndnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output\ncase $ac_sys_system/$ac_sys_release in\n  # On OpenBSD, select(2) is not available if _XOPEN_SOURCE is defined,\n  # even though select is a POSIX function. Reported by J. Ribbens.\n  # Reconfirmed for OpenBSD 3.3 by Zachary Hamm, for 3.4 by Jason Ish.\n  # In addition, Stefan Krah confirms that issue #1244610 exists through\n  # OpenBSD 4.6, but is fixed in 4.7.\n  OpenBSD/2.* | OpenBSD/3.* | OpenBSD/4.@<:@0123456@:>@)\n    define_xopen_source=no\n    # OpenBSD undoes our definition of __BSD_VISIBLE if _XOPEN_SOURCE is\n    # also defined. This can be overridden by defining _BSD_SOURCE\n    # As this has a different meaning on Linux, only define it on OpenBSD\n    AC_DEFINE(_BSD_SOURCE, 1, [Define on OpenBSD to activate all library features])\n    ;;\n  OpenBSD/*)\n    # OpenBSD undoes our definition of __BSD_VISIBLE if _XOPEN_SOURCE is\n    # also defined. This can be overridden by defining _BSD_SOURCE\n    # As this has a different meaning on Linux, only define it on OpenBSD\n    AC_DEFINE(_BSD_SOURCE, 1, [Define on OpenBSD to activate all library features])\n    ;;\n  # Defining _XOPEN_SOURCE on NetBSD version prior to the introduction of\n  # _NETBSD_SOURCE disables certain features (eg. setgroups). Reported by\n  # Marc Recht\n  NetBSD/1.5 | NetBSD/1.5.* | NetBSD/1.6 | NetBSD/1.6.* | NetBSD/1.6@<:@A-S@:>@)\n    define_xopen_source=no;;\n  # From the perspective of Solaris, _XOPEN_SOURCE is not so much a\n  # request to enable features supported by the standard as a request\n  # to disable features not supported by the standard.  The best way\n  # for Python to use Solaris is simply to leave _XOPEN_SOURCE out\n  # entirely and define __EXTENSIONS__ instead.\n  SunOS/*)\n    define_xopen_source=no;;\n  # On UnixWare 7, u_long is never defined with _XOPEN_SOURCE,\n  # but used in /usr/include/netinet/tcp.h. Reported by Tim Rice.\n  # Reconfirmed for 7.1.4 by Martin v. Loewis.\n  OpenUNIX/8.0.0| UnixWare/7.1.@<:@0-4@:>@)\n    define_xopen_source=no;;\n  # On OpenServer 5, u_short is never defined with _XOPEN_SOURCE,\n  # but used in struct sockaddr.sa_family. Reported by Tim Rice.\n  SCO_SV/3.2)\n    define_xopen_source=no;;\n  # On FreeBSD 4, the math functions C89 does not cover are never defined\n  # with _XOPEN_SOURCE and __BSD_VISIBLE does not re-enable them.\n  FreeBSD/4.*)\n    define_xopen_source=no;;\n  # On MacOS X 10.2, a bug in ncurses.h means that it craps out if\n  # _XOPEN_EXTENDED_SOURCE is defined. Apparently, this is fixed in 10.3, which\n  # identifies itself as Darwin/7.*\n  # On Mac OS X 10.4, defining _POSIX_C_SOURCE or _XOPEN_SOURCE\n  # disables platform specific features beyond repair.\n  # On Mac OS X 10.3, defining _POSIX_C_SOURCE or _XOPEN_SOURCE\n  # has no effect, don't bother defining them\n  Darwin/@<:@6789@:>@.*)\n    define_xopen_source=no;;\n  Darwin/1@<:@0-9@:>@.*)\n    define_xopen_source=no;;\n  # On AIX 4 and 5.1, mbstate_t is defined only when _XOPEN_SOURCE == 500 but\n  # used in wcsnrtombs() and mbsnrtowcs() even if _XOPEN_SOURCE is not defined\n  # or has another value. By not (re)defining it, the defaults come in place.\n  AIX/4)\n    define_xopen_source=no;;\n  AIX/5)\n    if test `uname -r` -eq 1; then\n      define_xopen_source=no\n    fi\n    ;;\n  # On QNX 6.3.2, defining _XOPEN_SOURCE prevents netdb.h from\n  # defining NI_NUMERICHOST.\n  QNX/6.3.2)\n    define_xopen_source=no\n    ;;\n\nesac\n\nif test $define_xopen_source = yes\nthen\n  # X/Open 7, incorporating POSIX.1-2008\n  AC_DEFINE(_XOPEN_SOURCE, 700,\n            Define to the level of X/Open that your system supports)\n\n  # On Tru64 Unix 4.0F, defining _XOPEN_SOURCE also requires\n  # definition of _XOPEN_SOURCE_EXTENDED and _POSIX_C_SOURCE, or else\n  # several APIs are not declared. Since this is also needed in some\n  # cases for HP-UX, we define it globally.\n  AC_DEFINE(_XOPEN_SOURCE_EXTENDED, 1,\n   \t    Define to activate Unix95-and-earlier features)\n\n  AC_DEFINE(_POSIX_C_SOURCE, 200809L, Define to activate features from IEEE Stds 1003.1-2008)\nfi\n\n# On HP-UX mbstate_t requires _INCLUDE__STDC_A1_SOURCE\ncase $ac_sys_system in\n  hp*|HP*)\n    define_stdc_a1=yes;;\n  *)\n    define_stdc_a1=no;;\nesac\n\nif test $define_stdc_a1 = yes\nthen\n  AC_DEFINE(_INCLUDE__STDC_A1_SOURCE, 1, Define to include mbstate_t for mbrtowc)\nfi\n\n#\n# SGI compilers allow the specification of the both the ABI and the\n# ISA on the command line.  Depending on the values of these switches,\n# different and often incompatible code will be generated.\n#\n# The SGI_ABI variable can be used to modify the CC and LDFLAGS and\n# thus supply support for various ABI/ISA combinations.  The MACHDEP\n# variable is also adjusted.\n#\nAC_SUBST(SGI_ABI)\nif test ! -z \"$SGI_ABI\"\nthen\n        CC=\"cc $SGI_ABI\"\n        LDFLAGS=\"$SGI_ABI $LDFLAGS\"\n        MACHDEP=`echo \"${MACHDEP}${SGI_ABI}\" | sed 's/ *//g'`\nfi\nAC_MSG_RESULT($MACHDEP)\n\n# Record the configure-time value of MACOSX_DEPLOYMENT_TARGET,\n# it may influence the way we can build extensions, so distutils\n# needs to check it\nAC_SUBST(CONFIGURE_MACOSX_DEPLOYMENT_TARGET)\nAC_SUBST(EXPORT_MACOSX_DEPLOYMENT_TARGET)\nCONFIGURE_MACOSX_DEPLOYMENT_TARGET=\nEXPORT_MACOSX_DEPLOYMENT_TARGET='#'\n\n# checks for alternative programs\n\n# compiler flags are generated in two sets, BASECFLAGS and OPT.  OPT is just\n# for debug/optimization stuff.  BASECFLAGS is for flags that are required\n# just to get things to compile and link.  Users are free to override OPT\n# when running configure or make.  The build should not break if they do.\n# BASECFLAGS should generally not be messed with, however.\n\n# XXX shouldn't some/most/all of this code be merged with the stuff later\n# on that fiddles with OPT and BASECFLAGS?\nAC_MSG_CHECKING(for --without-gcc)\nAC_ARG_WITH(gcc,\n            AS_HELP_STRING([--without-gcc], [never use gcc]),\n[\n\tcase $withval in\n\tno)\tCC=${CC:-cc}\n\t\twithout_gcc=yes;;\n\tyes)\tCC=gcc\n\t\twithout_gcc=no;;\n\t*)\tCC=$withval\n\t\twithout_gcc=$withval;;\n\tesac], [\n\tcase $ac_sys_system in\n\tAIX*)   CC=${CC:-xlc_r}\n\t\twithout_gcc=;;\n\t*)\twithout_gcc=no;;\n\tesac])\nAC_MSG_RESULT($without_gcc)\n\nAC_MSG_CHECKING(for --with-icc)\nAC_ARG_WITH(icc,\n            AS_HELP_STRING([--with-icc], [build with icc]),\n[\n\tcase $withval in\n\tno)\tCC=${CC:-cc}\n\t\twith_icc=no;;\n\tyes)\tCC=icc\n\t\tCXX=icpc\n\t\twith_icc=yes;;\n\t*)\tCC=$withval\n\t\twith_icc=$withval;;\n\tesac], [\n\twith_icc=no])\nAC_MSG_RESULT($with_icc)\n\n# If the user switches compilers, we can't believe the cache\nif test ! -z \"$ac_cv_prog_CC\" -a ! -z \"$CC\" -a \"$CC\" != \"$ac_cv_prog_CC\"\nthen\n  AC_MSG_ERROR([cached CC is different -- throw away $cache_file\n(it is also a good idea to do 'make clean' before compiling)])\nfi\n\n# Don't let AC_PROG_CC set the default CFLAGS. It normally sets -g -O2\n# when the compiler supports them, but we don't always want -O2, and\n# we set -g later.\nif test -z \"$CFLAGS\"; then\n        CFLAGS=\nfi\n\nif test \"$ac_sys_system\" = \"Darwin\"\nthen\n\t# Compiler selection on MacOSX is more complicated than\n\t# AC_PROG_CC can handle, see Mac/README.txt for more\n\t# information\n\tif test -z \"${CC}\"\n\tthen\n\t\tfound_gcc=\n\t\tfound_clang=\n\t\tas_save_IFS=$IFS; IFS=:\n\t\tfor as_dir in $PATH\n\t\tdo\n\t\t\tIFS=$as_save_IFS\n\t\t\tif test -x $as_dir/gcc; then\n\t\t\t\tif test -z \"${found_gcc}\"; then\n\t\t\t\t\tfound_gcc=$as_dir/gcc\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tif test -x $as_dir/clang; then\n\t\t\t\tif test -z \"${found_clang}\"; then\n\t\t\t\t\tfound_clang=$as_dir/clang\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\t\tIFS=$as_save_IFS\n\n\t\tif test -n \"$found_gcc\" -a -n \"$found_clang\"\n\t\tthen\n\t\t\tif test -n \"`\"$found_gcc\" --version | grep llvm-gcc`\"\n\t\t\tthen\n\t\t\t\tAC_MSG_NOTICE([Detected llvm-gcc, falling back to clang])\n\t\t\t\tCC=\"$found_clang\"\n\t\t\t\tCXX=\"$found_clang++\"\n\t\t\tfi\n\n\n\t\telif test -z \"$found_gcc\" -a -n \"$found_clang\"\n\t\tthen\n\t\t\tAC_MSG_NOTICE([No GCC found, use CLANG])\n\t\t\tCC=\"$found_clang\"\n\t\t\tCXX=\"$found_clang++\"\n\n\t\telif test -z \"$found_gcc\" -a -z \"$found_clang\"\n\t\tthen\n\t\t\tfound_clang=`/usr/bin/xcrun -find clang 2>/dev/null`\n\t\t\tif test -n \"${found_clang}\"\n\t\t\tthen\n\t\t\t\tAC_MSG_NOTICE([Using clang from Xcode.app])\n\t\t\t\tCC=\"${found_clang}\"\n\t\t\t\tCXX=\"`/usr/bin/xcrun -find clang++`\"\n\n\t\t\t# else: use default behaviour\n\t\t\tfi\n\t\tfi\n\tfi\nfi\nAC_PROG_CC\nAC_PROG_CPP\nAC_PROG_GREP\n\nAC_SUBST(CXX)\nAC_SUBST(MAINCC)\nAC_MSG_CHECKING(for --with-cxx-main=<compiler>)\nAC_ARG_WITH(cxx_main,\n            AS_HELP_STRING([--with-cxx-main=<compiler>],\n                           [compile main() and link python executable with C++ compiler]),\n[\n\n\tcase $withval in\n\tno)\twith_cxx_main=no\n\t\tMAINCC='$(CC)';;\n\tyes)\twith_cxx_main=yes\n\t\tMAINCC='$(CXX)';;\n\t*)\twith_cxx_main=yes\n\t\tMAINCC=$withval\n\t\tif test -z \"$CXX\"\n\t\tthen\n\t\t\tCXX=$withval\n\t\tfi;;\n\tesac], [\n\twith_cxx_main=no\n\tMAINCC='$(CC)'\n])\nAC_MSG_RESULT($with_cxx_main)\n\npreset_cxx=\"$CXX\"\nif test -z \"$CXX\"\nthen\n        case \"$CC\" in\n        gcc)    AC_PATH_TOOL(CXX, [g++], [g++], [notfound]) ;;\n        cc)     AC_PATH_TOOL(CXX, [c++], [c++], [notfound]) ;;\n        clang|*/clang)     AC_PATH_TOOL(CXX, [clang++], [clang++], [notfound]) ;;\n        icc|*/icc)         AC_PATH_TOOL(CXX, [icpc], [icpc], [notfound]) ;;\n        esac\n\tif test \"$CXX\" = \"notfound\"\n\tthen\n\t\tCXX=\"\"\n\tfi\nfi\nif test -z \"$CXX\"\nthen\n\tAC_CHECK_TOOLS(CXX, $CCC c++ g++ gcc CC cxx cc++ cl, notfound)\n\tif test \"$CXX\" = \"notfound\"\n\tthen\n\t\tCXX=\"\"\n\tfi\nfi\nif test \"$preset_cxx\" != \"$CXX\"\nthen\n        AC_MSG_NOTICE([\n\n  By default, distutils will build C++ extension modules with \"$CXX\".\n  If this is not intended, then set CXX on the configure command line.\n  ])\nfi\n\n\nMULTIARCH=$($CC --print-multiarch 2>/dev/null)\nAC_SUBST(MULTIARCH)\n\nAC_MSG_CHECKING([for the platform triplet based on compiler characteristics])\ncat >> conftest.c <<EOF\n#undef bfin\n#undef cris\n#undef fr30\n#undef linux\n#undef hppa\n#undef hpux\n#undef i386\n#undef mips\n#undef powerpc\n#undef sparc\n#undef unix\n#if defined(__linux__)\n# if defined(__x86_64__) && defined(__LP64__)\n        x86_64-linux-gnu\n# elif defined(__x86_64__) && defined(__ILP32__)\n        x86_64-linux-gnux32\n# elif defined(__i386__)\n        i386-linux-gnu\n# elif defined(__aarch64__) && defined(__AARCH64EL__)\n#  if defined(__ILP32__)\n        aarch64_ilp32-linux-gnu\n#  else\n        aarch64-linux-gnu\n#  endif\n# elif defined(__aarch64__) && defined(__AARCH64EB__)\n#  if defined(__ILP32__)\n        aarch64_be_ilp32-linux-gnu\n#  else\n        aarch64_be-linux-gnu\n#  endif\n# elif defined(__alpha__)\n        alpha-linux-gnu\n# elif defined(__ARM_EABI__) && defined(__ARM_PCS_VFP)\n#  if defined(__ARMEL__)\n        arm-linux-gnueabihf\n#  else\n        armeb-linux-gnueabihf\n#  endif\n# elif defined(__ARM_EABI__) && !defined(__ARM_PCS_VFP)\n#  if defined(__ARMEL__)\n        arm-linux-gnueabi\n#  else\n        armeb-linux-gnueabi\n#  endif\n# elif defined(__hppa__)\n        hppa-linux-gnu\n# elif defined(__ia64__)\n        ia64-linux-gnu\n# elif defined(__m68k__) && !defined(__mcoldfire__)\n        m68k-linux-gnu\n# elif defined(__mips_hard_float) && defined(_MIPSEL)\n#  if _MIPS_SIM == _ABIO32\n        mipsel-linux-gnu\n#  elif _MIPS_SIM == _ABIN32\n        mips64el-linux-gnuabin32\n#  elif _MIPS_SIM == _ABI64\n        mips64el-linux-gnuabi64\n#  else\n#   error unknown platform triplet\n#  endif\n# elif defined(__mips_hard_float)\n#  if _MIPS_SIM == _ABIO32\n        mips-linux-gnu\n#  elif _MIPS_SIM == _ABIN32\n        mips64-linux-gnuabin32\n#  elif _MIPS_SIM == _ABI64\n        mips64-linux-gnuabi64\n#  else\n#   error unknown platform triplet\n#  endif\n# elif defined(__or1k__)\n        or1k-linux-gnu\n# elif defined(__powerpc__) && defined(__SPE__)\n        powerpc-linux-gnuspe\n# elif defined(__powerpc64__)\n#  if defined(__LITTLE_ENDIAN__)\n        powerpc64le-linux-gnu\n#  else\n        powerpc64-linux-gnu\n#  endif\n# elif defined(__powerpc__)\n        powerpc-linux-gnu\n# elif defined(__s390x__)\n        s390x-linux-gnu\n# elif defined(__s390__)\n        s390-linux-gnu\n# elif defined(__sh__) && defined(__LITTLE_ENDIAN__)\n        sh4-linux-gnu\n# elif defined(__sparc__) && defined(__arch64__)\n        sparc64-linux-gnu\n# elif defined(__sparc__)\n        sparc-linux-gnu\n# else\n#   error unknown platform triplet\n# endif\n#elif defined(__FreeBSD_kernel__)\n# if defined(__LP64__)\n        x86_64-kfreebsd-gnu\n# elif defined(__i386__)\n        i386-kfreebsd-gnu\n# else\n#   error unknown platform triplet\n# endif\n#elif defined(__gnu_hurd__)\n        i386-gnu\n#elif defined(__APPLE__)\n        darwin\n#else\n# error unknown platform triplet\n#endif\n\nEOF\n\nif $CPP $CPPFLAGS conftest.c >conftest.out 2>/dev/null; then\n  PLATFORM_TRIPLET=`grep -v '^#' conftest.out | grep -v '^ *$' | tr -d ' \t'`\n  AC_MSG_RESULT([$PLATFORM_TRIPLET])\nelse\n  AC_MSG_RESULT([none])\nfi\nrm -f conftest.c conftest.out\n\nif test x$PLATFORM_TRIPLET != x && test x$MULTIARCH != x; then\n  if test x$PLATFORM_TRIPLET != x$MULTIARCH; then\n    AC_MSG_ERROR([internal configure error for the platform triplet, please file a bug report])\n  fi\nfi\nPLATDIR=plat-$MACHDEP\nAC_SUBST(PLATDIR)\nAC_SUBST(PLATFORM_TRIPLET)\n\n\nAC_MSG_CHECKING([for -Wl,--no-as-needed])\nsave_LDFLAGS=\"$LDFLAGS\"\nLDFLAGS=\"$LDFLAGS -Wl,--no-as-needed\"\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[]])],\n  [NO_AS_NEEDED=\"-Wl,--no-as-needed\"\n   AC_MSG_RESULT([yes])],\n  [NO_AS_NEEDED=\"\"\n   AC_MSG_RESULT([no])])\nLDFLAGS=\"$save_LDFLAGS\"\nAC_SUBST(NO_AS_NEEDED)\n\n\n# checks for UNIX variants that set C preprocessor variables\nAC_USE_SYSTEM_EXTENSIONS\n\n# Check for unsupported systems\ncase $ac_sys_system/$ac_sys_release in\natheos*|Linux*/1*)\n   echo This system \\($ac_sys_system/$ac_sys_release\\) is no longer supported.\n   echo See README for details.\n   exit 1;;\nesac\n\nAC_EXEEXT\nAC_MSG_CHECKING(for --with-suffix)\nAC_ARG_WITH(suffix,\n            AS_HELP_STRING([--with-suffix=.exe], [set executable suffix]),\n[\n\tcase $withval in\n\tno)\tEXEEXT=;;\n\tyes)\tEXEEXT=.exe;;\n\t*)\tEXEEXT=$withval;;\n\tesac])\nAC_MSG_RESULT($EXEEXT)\n\n# Test whether we're running on a non-case-sensitive system, in which\n# case we give a warning if no ext is given\nAC_SUBST(BUILDEXEEXT)\nAC_MSG_CHECKING(for case-insensitive build directory)\nif test ! -d CaseSensitiveTestDir; then\nmkdir CaseSensitiveTestDir\nfi\n\nif test -d casesensitivetestdir\nthen\n    AC_MSG_RESULT(yes)\n    BUILDEXEEXT=.exe\nelse\n\tAC_MSG_RESULT(no)\n\tBUILDEXEEXT=$EXEEXT\nfi\nrmdir CaseSensitiveTestDir\n\ncase $MACHDEP in\nbsdos*)\n    case $CC in\n    gcc) CC=\"$CC -D_HAVE_BSDI\";;\n    esac;;\nesac\n\ncase $ac_sys_system in\nhp*|HP*)\n    case $CC in\n    cc|*/cc) CC=\"$CC -Ae\";;\n    esac;;\nesac\n\nAC_SUBST(LIBRARY)\nAC_MSG_CHECKING(LIBRARY)\nif test -z \"$LIBRARY\"\nthen\n\tLIBRARY='libpython$(VERSION)$(ABIFLAGS).a'\nfi\nAC_MSG_RESULT($LIBRARY)\n\n# LDLIBRARY is the name of the library to link against (as opposed to the\n# name of the library into which to insert object files). BLDLIBRARY is also\n# the library to link against, usually. On Mac OS X frameworks, BLDLIBRARY\n# is blank as the main program is not linked directly against LDLIBRARY.\n# LDLIBRARYDIR is the path to LDLIBRARY, which is made in a subdirectory. On\n# systems without shared libraries, LDLIBRARY is the same as LIBRARY\n# (defined in the Makefiles). On Cygwin LDLIBRARY is the import library,\n# DLLLIBRARY is the shared (i.e., DLL) library.\n#\n# RUNSHARED is used to run shared python without installed libraries\n#\n# INSTSONAME is the name of the shared library that will be use to install\n# on the system - some systems like version suffix, others don't\n#\n# LDVERSION is the shared library version number, normally the Python version\n# with the ABI build flags appended.\nAC_SUBST(LDLIBRARY)\nAC_SUBST(DLLLIBRARY)\nAC_SUBST(BLDLIBRARY)\nAC_SUBST(PY3LIBRARY)\nAC_SUBST(LDLIBRARYDIR)\nAC_SUBST(INSTSONAME)\nAC_SUBST(RUNSHARED)\nAC_SUBST(LDVERSION)\nLDLIBRARY=\"$LIBRARY\"\nBLDLIBRARY='$(LDLIBRARY)'\nINSTSONAME='$(LDLIBRARY)'\nDLLLIBRARY=''\nLDLIBRARYDIR=''\nRUNSHARED=''\nLDVERSION=\"$VERSION\"\n\n# LINKCC is the command that links the python executable -- default is $(CC).\n# If CXX is set, and if it is needed to link a main function that was\n# compiled with CXX, LINKCC is CXX instead. Always using CXX is undesirable:\n# python might then depend on the C++ runtime\n# This is altered for AIX in order to build the export list before\n# linking.\nAC_SUBST(LINKCC)\nAC_MSG_CHECKING(LINKCC)\nif test -z \"$LINKCC\"\nthen\n\tLINKCC='$(PURIFY) $(MAINCC)'\n\tcase $ac_sys_system in\n\tAIX*)\n\t   exp_extra=\"\\\"\\\"\"\n\t   if test $ac_sys_release -ge 5 -o \\\n\t\t   $ac_sys_release -eq 4 -a `uname -r` -ge 2 ; then\n\t       exp_extra=\".\"\n\t   fi\n\t   LINKCC=\"\\$(srcdir)/Modules/makexp_aix Modules/python.exp $exp_extra \\$(LIBRARY); $LINKCC\";;\n\tQNX*)\n\t   # qcc must be used because the other compilers do not\n\t   # support -N.\n\t   LINKCC=qcc;;\n\tesac\nfi\nAC_MSG_RESULT($LINKCC)\n\n# GNULD is set to \"yes\" if the GNU linker is used.  If this goes wrong\n# make sure we default having it set to \"no\": this is used by\n# distutils.unixccompiler to know if it should add --enable-new-dtags\n# to linker command lines, and failing to detect GNU ld simply results\n# in the same bahaviour as before.\nAC_SUBST(GNULD)\nAC_MSG_CHECKING(for GNU ld)\nac_prog=ld\nif test \"$GCC\" = yes; then\n       ac_prog=`$CC -print-prog-name=ld`\nfi\ncase `\"$ac_prog\" -V 2>&1 < /dev/null` in\n      *GNU*)\n          GNULD=yes;;\n      *)\n          GNULD=no;;\nesac\nAC_MSG_RESULT($GNULD)\n\nAC_C_INLINE\nif test \"$ac_cv_c_inline\" != no ; then\n        AC_DEFINE(USE_INLINE, 1, [Define to use the C99 inline keyword.])\n        AC_SUBST(USE_INLINE)\nfi\n\n\nAC_MSG_CHECKING(for --enable-shared)\nAC_ARG_ENABLE(shared,\n              AS_HELP_STRING([--enable-shared], [disable/enable building shared python library]))\n\nif test -z \"$enable_shared\"\nthen\n  case $ac_sys_system in\n  CYGWIN*)\n    enable_shared=\"yes\";;\n  *)\n    enable_shared=\"no\";;\n  esac\nfi\nAC_MSG_RESULT($enable_shared)\n\nAC_MSG_CHECKING(for --enable-profiling)\nAC_ARG_ENABLE(profiling,\n              AS_HELP_STRING([--enable-profiling], [enable C-level code profiling]))\nif test \"x$enable_profiling\" = xyes; then\n  ac_save_cc=\"$CC\"\n  CC=\"$CC -pg\"\n  AC_LINK_IFELSE([AC_LANG_SOURCE([[int main() { return 0; }]])],\n    [],\n    [enable_profiling=no])\n  CC=\"$ac_save_cc\"\nelse\n  enable_profiling=no\nfi\nAC_MSG_RESULT($enable_profiling)\n\nif test \"x$enable_profiling\" = xyes; then\n  BASECFLAGS=\"-pg $BASECFLAGS\"\n  LDFLAGS=\"-pg $LDFLAGS\"\nfi\n\nAC_MSG_CHECKING(LDLIBRARY)\n\n# MacOSX framework builds need more magic. LDLIBRARY is the dynamic\n# library that we build, but we do not want to link against it (we\n# will find it with a -framework option). For this reason there is an\n# extra variable BLDLIBRARY against which Python and the extension\n# modules are linked, BLDLIBRARY. This is normally the same as\n# LDLIBRARY, but empty for MacOSX framework builds.\nif test \"$enable_framework\"\nthen\n  LDLIBRARY='$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n  RUNSHARED=DYLD_FRAMEWORK_PATH=`pwd`${DYLD_FRAMEWORK_PATH:+:${DYLD_FRAMEWORK_PATH}}\n  BLDLIBRARY=''\nelse\n  BLDLIBRARY='$(LDLIBRARY)'\nfi\n\n# Other platforms follow\nif test $enable_shared = \"yes\"; then\n  PY_ENABLE_SHARED=1\n  AC_DEFINE(Py_ENABLE_SHARED, 1, [Defined if Python is built as a shared library.])\n  case $ac_sys_system in\n    CYGWIN*)\n          LDLIBRARY='libpython$(LDVERSION).dll.a'\n          DLLLIBRARY='libpython$(LDVERSION).dll'\n          ;;\n    SunOS*)\n\t  LDLIBRARY='libpython$(LDVERSION).so'\n\t  BLDLIBRARY='-Wl,-R,$(LIBDIR) -L. -lpython$(LDVERSION)'\n\t  RUNSHARED=LD_LIBRARY_PATH=`pwd`${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n\t  INSTSONAME=\"$LDLIBRARY\".$SOVERSION\n\t  if test \"$with_pydebug\" != yes\n\t  then\n\t      PY3LIBRARY=libpython3.so\n\t  fi\n          ;;\n    Linux*|GNU*|NetBSD*|FreeBSD*|DragonFly*|OpenBSD*)\n\t  LDLIBRARY='libpython$(LDVERSION).so'\n\t  BLDLIBRARY='-L. -lpython$(LDVERSION)'\n\t  RUNSHARED=LD_LIBRARY_PATH=`pwd`${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n\t  INSTSONAME=\"$LDLIBRARY\".$SOVERSION\n\t  if test \"$with_pydebug\" != yes\n          then\n\t      PY3LIBRARY=libpython3.so\n\t  fi\n\t  ;;\n    hp*|HP*)\n\t  case `uname -m` in\n\t\tia64)\n\t\t\tLDLIBRARY='libpython$(LDVERSION).so'\n\t\t\t;;\n\t\t*)\n\t\t\tLDLIBRARY='libpython$(LDVERSION).sl'\n\t\t\t;;\n\t  esac\n\t  BLDLIBRARY='-Wl,+b,$(LIBDIR) -L. -lpython$(LDVERSION)'\n\t  RUNSHARED=SHLIB_PATH=`pwd`${SHLIB_PATH:+:${SHLIB_PATH}}\n\t  ;;\n    Darwin*)\n    \tLDLIBRARY='libpython$(LDVERSION).dylib'\n\tBLDLIBRARY='-L. -lpython$(LDVERSION)'\n\tRUNSHARED=DYLD_LIBRARY_PATH=`pwd`${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}\n\t;;\n    AIX*)\n\tLDLIBRARY='libpython$(LDVERSION).so'\n\tRUNSHARED=LIBPATH=`pwd`${LIBPATH:+:${LIBPATH}}\n\t;;\n\n  esac\nelse # shared is disabled\n  PY_ENABLE_SHARED=0\n  case $ac_sys_system in\n    CYGWIN*)\n          BLDLIBRARY='$(LIBRARY)'\n          LDLIBRARY='libpython$(LDVERSION).dll.a'\n          ;;\n  esac\nfi\n\nif test \"$cross_compiling\" = yes; then\n\tRUNSHARED=\nfi\n\nAC_MSG_RESULT($LDLIBRARY)\n\nAC_PROG_RANLIB\nAC_SUBST(AR)\nAC_CHECK_TOOLS(AR, ar aal, ar)\n\n# tweak ARFLAGS only if the user didn't set it on the command line\nAC_SUBST(ARFLAGS)\nif test -z \"$ARFLAGS\"\nthen\n        ARFLAGS=\"rc\"\nfi\n\nAC_CHECK_TOOLS([READELF], [readelf], [:])\nif test \"$cross_compiling\" = yes; then\n    case \"$READELF\" in\n\treadelf|:)\n\tAC_MSG_ERROR([readelf for the host is required for cross builds])\n\t;;\n    esac\nfi\nAC_SUBST(READELF)\n\n\ncase $MACHDEP in\nbsdos*|hp*|HP*)\n\t# install -d does not work on BSDI or HP-UX\n\tif test -z \"$INSTALL\"\n\tthen\n\t\tINSTALL=\"${srcdir}/install-sh -c\"\n\tfi\nesac\nAC_PROG_INSTALL\nAC_PROG_MKDIR_P\n\n# Not every filesystem supports hard links\nAC_SUBST(LN)\nif test -z \"$LN\" ; then\n\tcase $ac_sys_system in\n\t\tCYGWIN*) LN=\"ln -s\";;\n\t\t*) LN=ln;;\n\tesac\nfi\n\n# For calculating the .so ABI tag.\nAC_SUBST(ABIFLAGS)\nABIFLAGS=\"\"\n\n# Check for --with-pydebug\nAC_MSG_CHECKING(for --with-pydebug)\nAC_ARG_WITH(pydebug,\n            AS_HELP_STRING([--with-pydebug], [build with Py_DEBUG defined]),\n[\nif test \"$withval\" != no\nthen\n  AC_DEFINE(Py_DEBUG, 1,\n  [Define if you want to build an interpreter with many run-time checks.])\n  AC_MSG_RESULT(yes);\n  Py_DEBUG='true'\n  ABIFLAGS=\"${ABIFLAGS}d\"\nelse AC_MSG_RESULT(no); Py_DEBUG='false'\nfi],\n[AC_MSG_RESULT(no)])\n\n# Enable optimization flags\nAC_SUBST(DEF_MAKE_ALL_RULE)\nAC_SUBST(DEF_MAKE_RULE)\nPy_OPT='false'\nAC_MSG_CHECKING(for --enable-optimizations)\nAC_ARG_ENABLE(optimizations, AS_HELP_STRING([--enable-optimizations], [Enable expensive, stable optimizations (PGO, etc).  Disabled by default.]),\n[\nif test \"$enableval\" != no\nthen\n  Py_OPT='true'\n  AC_MSG_RESULT(yes);\nelse\n  Py_OPT='false'\n  AC_MSG_RESULT(no);\nfi],\n[AC_MSG_RESULT(no)])\nif test \"$Py_OPT\" = 'true' ; then\n  # Intentionally not forcing Py_LTO='true' here.  Too many toolchains do not\n  # compile working code using it and both test_distutils and test_gdb are\n  # broken when you do managed to get a toolchain that works with it.  People\n  # who want LTO need to use --with-lto themselves.\n  DEF_MAKE_ALL_RULE=\"profile-opt\"\n  REQUIRE_PGO=\"yes\"\n  DEF_MAKE_RULE=\"build_all\"\nelse\n  DEF_MAKE_ALL_RULE=\"build_all\"\n  REQUIRE_PGO=\"no\"\n  DEF_MAKE_RULE=\"all\"\nfi\n\n# Enable LTO flags\nAC_SUBST(LTOFLAGS)\nAC_MSG_CHECKING(for --with-lto)\nAC_ARG_WITH(lto, AS_HELP_STRING([--with-lto], [Enable Link Time Optimization in PGO builds. Disabled by default.]),\n[\nif test \"$withval\" != no\nthen\n  Py_LTO='true'\n  AC_MSG_RESULT(yes);\nelse\n  Py_LTO='false'\n  AC_MSG_RESULT(no);\nfi],\n[AC_MSG_RESULT(no)])\nif test \"$Py_LTO\" = 'true' ; then\n  case $CC in\n    *clang*)\n      # Any changes made here should be reflected in the GCC+Darwin case below\n      LTOFLAGS=\"-flto\"\n      ;;\n    *gcc*)\n      case $ac_sys_system in\n        Darwin*)\n          LTOFLAGS=\"-flto\"\n          ;;\n        *)\n          LTOFLAGS=\"-flto -fuse-linker-plugin -ffat-lto-objects -flto-partition=none\"\n          ;;\n      esac\n      ;;\n  esac\nfi\n\n# Enable PGO flags.\nAC_SUBST(PGO_PROF_GEN_FLAG)\nAC_SUBST(PGO_PROF_USE_FLAG)\nAC_SUBST(LLVM_PROF_MERGER)\nAC_SUBST(LLVM_PROF_FILE)\nAC_SUBST(LLVM_PROF_ERR)\n# Make this work on systems where llvm tools are not installed with their\n# normal names in the default $PATH (ie: Ubuntu).  They exist under the\n# non-suffixed name in their versioned llvm directory.\nllvm_bin_dir=''\nllvm_path=\"${PATH}\"\nif test \"${CC}\" = \"clang\"\nthen\n  clang_bin=`which clang`\n  # Some systems install clang elsewhere as a symlink to the real path\n  # which is where the related llvm tools are located.\n  if test -L \"${clang_bin}\"\n  then\n    clang_dir=`dirname \"${clang_bin}\"`\n    clang_bin=`readlink \"${clang_bin}\"`\n    llvm_bin_dir=\"${clang_dir}/\"`dirname \"${clang_bin}\"`\n    llvm_path=\"${llvm_path}${PATH_SEPARATOR}${llvm_bin_dir}\"\n  fi\nfi\nAC_SUBST(LLVM_PROFDATA)\nAC_PATH_TARGET_TOOL(LLVM_PROFDATA, llvm-profdata, '', ${llvm_path})\nAC_SUBST(LLVM_PROF_FOUND)\nif test -n \"${LLVM_PROFDATA}\" -a -x \"${LLVM_PROFDATA}\"\nthen\n  LLVM_PROF_FOUND=\"found\"\nelse\n  LLVM_PROF_FOUND=\"not-found\"\nfi\nif test \"$ac_sys_system\" = \"Darwin\" -a \"${LLVM_PROF_FOUND}\" = \"not-found\"\nthen\n  found_llvm_profdata=`/usr/bin/xcrun -find llvm-profdata 2>/dev/null`\n  if test -n \"${found_llvm_profdata}\"\n  then\n    # llvm-profdata isn't directly in $PATH in some cases.\n    # https://apple.stackexchange.com/questions/197053/\n    LLVM_PROFDATA='/usr/bin/xcrun llvm-profdata'\n    LLVM_PROF_FOUND=found\n    AC_MSG_NOTICE([llvm-profdata found via xcrun: ${LLVM_PROFDATA}])\n  fi\nfi\nLLVM_PROF_ERR=no\ncase $CC in\n  *clang*)\n    # Any changes made here should be reflected in the GCC+Darwin case below\n    PGO_PROF_GEN_FLAG=\"-fprofile-instr-generate\"\n    PGO_PROF_USE_FLAG=\"-fprofile-instr-use=code.profclangd\"\n    LLVM_PROF_MERGER=\"${LLVM_PROFDATA} merge -output=code.profclangd *.profclangr\"\n    LLVM_PROF_FILE=\"LLVM_PROFILE_FILE=\\\"code-%p.profclangr\\\"\"\n    if test $LLVM_PROF_FOUND = not-found\n    then\n      LLVM_PROF_ERR=yes\n      if test \"${REQUIRE_PGO}\" = \"yes\"\n      then\n        AC_MSG_ERROR([llvm-profdata is required for a --enable-optimizations build but could not be found.])\n      fi\n    fi\n    ;;\n  *gcc*)\n    case $ac_sys_system in\n      Darwin*)\n        PGO_PROF_GEN_FLAG=\"-fprofile-instr-generate\"\n        PGO_PROF_USE_FLAG=\"-fprofile-instr-use=code.profclangd\"\n        LLVM_PROF_MERGER=\"${LLVM_PROFDATA} merge -output=code.profclangd *.profclangr\"\n        LLVM_PROF_FILE=\"LLVM_PROFILE_FILE=\\\"code-%p.profclangr\\\"\"\n        if test \"${LLVM_PROF_FOUND}\" = \"not-found\"\n        then\n          LLVM_PROF_ERR=yes\n          if test \"${REQUIRE_PGO}\" = \"yes\"\n\t  then\n\t    AC_MSG_ERROR([llvm-profdata is required for a --enable-optimizations build but could not be found.])\n\t  fi\n        fi\n        ;;\n      *)\n        PGO_PROF_GEN_FLAG=\"-fprofile-generate\"\n        PGO_PROF_USE_FLAG=\"-fprofile-use -fprofile-correction\"\n        LLVM_PROF_MERGER=\"true\"\n        LLVM_PROF_FILE=\"\"\n        ;;\n    esac\n    ;;\n  *icc*)\n    PGO_PROF_GEN_FLAG=\"-prof-gen\"\n    PGO_PROF_USE_FLAG=\"-prof-use\"\n    LLVM_PROF_MERGER=\"true\"\n    LLVM_PROF_FILE=\"\"\n    ;;\nesac\n\n# XXX Shouldn't the code above that fiddles with BASECFLAGS and OPT be\n# merged with this chunk of code?\n\n# Optimizer/debugger flags\n# ------------------------\n# (The following bit of code is complicated enough - please keep things\n# indented properly.  Just pretend you're editing Python code. ;-)\n\n# There are two parallel sets of case statements below, one that checks to\n# see if OPT was set and one that does BASECFLAGS setting based upon\n# compiler and platform.  BASECFLAGS tweaks need to be made even if the\n# user set OPT.\n\n# tweak OPT based on compiler and platform, only if the user didn't set\n# it on the command line\nAC_SUBST(OPT)\nAC_SUBST(CFLAGS_ALIASING)\nif test \"${OPT-unset}\" = \"unset\"\nthen\n    case $GCC in\n    yes)\n        if test \"$CC\" != 'g++' ; then\n\t    STRICT_PROTO=\"-Wstrict-prototypes\"\n\tfi\n        # For gcc 4.x we need to use -fwrapv so lets check if its supported\n        if \"$CC\" -v --help 2>/dev/null |grep -- -fwrapv > /dev/null; then\n           WRAP=\"-fwrapv\"\n        fi\n\n        case $CC in\n            *clang*)\n                cc_is_clang=1\n                ;;\n            *)\n                if $CC --version 2>&1 | grep -q clang\n                then\n                    cc_is_clang=1\n                else\n                    cc_is_clang=\n                fi\n        esac\n\n        if test -n \"${cc_is_clang}\"\n        then\n            # Clang also needs -fwrapv\n            WRAP=\"-fwrapv\"\n            # bpo-30104: disable strict aliasing to compile correctly dtoa.c,\n            # see Makefile.pre.in for more information\n            CFLAGS_ALIASING=\"-fno-strict-aliasing\"\n        fi\n\n\tcase $ac_cv_prog_cc_g in\n\tyes)\n\t    if test \"$Py_DEBUG\" = 'true' ; then\n\t\t# Optimization messes up debuggers, so turn it off for\n\t\t# debug builds.\n                if \"$CC\" -v --help 2>/dev/null |grep -- -Og > /dev/null; then\n                    OPT=\"-g -Og -Wall\"\n                else\n                    OPT=\"-g -O0 -Wall\"\n                fi\n\t    else\n\t\tOPT=\"-g $WRAP -O3 -Wall\"\n\t    fi\n\t    ;;\n\t*)\n\t    OPT=\"-O3 -Wall\"\n\t    ;;\n\tesac\n\n\tOPT=\"$OPT $STRICT_PROTO\"\n\n\tcase $ac_sys_system in\n\t    SCO_SV*) OPT=\"$OPT -m486 -DSCO5\"\n\t    ;;\n        esac\n\t;;\n\n    *)\n\tOPT=\"-O\"\n\t;;\n    esac\nfi\n\nAC_SUBST(BASECFLAGS)\nAC_SUBST(CFLAGS_NODIST)\n\n# The -arch flags for universal builds on OSX\nUNIVERSAL_ARCH_FLAGS=\nAC_SUBST(UNIVERSAL_ARCH_FLAGS)\n\n# tweak BASECFLAGS based on compiler and platform\ncase $GCC in\nyes)\n    # Python doesn't violate C99 aliasing rules, but older versions of\n    # GCC produce warnings for legal Python code.  Enable\n    # -fno-strict-aliasing on versions of GCC that support but produce\n    # warnings.  See Issue3326\n    AC_MSG_CHECKING(whether $CC accepts and needs -fno-strict-aliasing)\n     ac_save_cc=\"$CC\"\n     CC=\"$CC -fno-strict-aliasing\"\n     save_CFLAGS=\"$CFLAGS\"\n     AC_CACHE_VAL(ac_cv_no_strict_aliasing,\n       AC_COMPILE_IFELSE(\n         [\n\t   AC_LANG_PROGRAM([[]], [[]])\n\t ],[\n\t   CC=\"$ac_save_cc -fstrict-aliasing\"\n           CFLAGS=\"$CFLAGS -Werror -Wstrict-aliasing\"\n           AC_COMPILE_IFELSE(\n\t     [\n\t       AC_LANG_PROGRAM([[void f(int **x) {}]],\n\t         [[double *x; f((int **) &x);]])\n\t     ],[\n\t       ac_cv_no_strict_aliasing=no\n\t     ],[\n               ac_cv_no_strict_aliasing=yes\n\t     ])\n\t ],[\n\t   ac_cv_no_strict_aliasing=no\n\t ]))\n     CFLAGS=\"$save_CFLAGS\"\n     CC=\"$ac_save_cc\"\n    AC_MSG_RESULT($ac_cv_no_strict_aliasing)\n    if test $ac_cv_no_strict_aliasing = yes\n    then\n      BASECFLAGS=\"$BASECFLAGS -fno-strict-aliasing\"\n    fi\n\n    # ICC doesn't recognize the option, but only emits a warning\n    ## XXX does it emit an unused result warning and can it be disabled?\n    case \"$CC\" in\n    *icc*)\n    ac_cv_disable_unused_result_warning=no\n    ;;\n    *)\n    AC_MSG_CHECKING(if we can turn off $CC unused result warning)\n     ac_save_cc=\"$CC\"\n     CC=\"$CC -Wunused-result -Werror\"\n     save_CFLAGS=\"$CFLAGS\"\n     AC_CACHE_VAL(ac_cv_disable_unused_result_warning,\n       AC_COMPILE_IFELSE(\n         [\n\t   AC_LANG_PROGRAM([[]], [[]])\n\t ],[\n           ac_cv_disable_unused_result_warning=yes\n\t ],[\n           ac_cv_disable_unused_result_warning=no\n\t ]))\n     CFLAGS=\"$save_CFLAGS\"\n     CC=\"$ac_save_cc\"\n    AC_MSG_RESULT($ac_cv_disable_unused_result_warning)\n    ;;\n    esac\n\n    if test $ac_cv_disable_unused_result_warning = yes\n    then\n      BASECFLAGS=\"$BASECFLAGS -Wno-unused-result\"\n    fi\n\n    AC_MSG_CHECKING(for -Werror=declaration-after-statement)\n     ac_save_cc=\"$CC\"\n     CC=\"$CC -Werror=declaration-after-statement\"\n     save_CFLAGS=\"$CFLAGS\"\n     AC_CACHE_VAL(ac_cv_declaration_after_statement_warning,\n       AC_COMPILE_IFELSE(\n         [\n\t   AC_LANG_PROGRAM([[]], [[]])\n\t ],[\n           ac_cv_declaration_after_statement_warning=yes\n\t ],[\n           ac_cv_declaration_after_statement_warning=no\n\t ]))\n     CFLAGS=\"$save_CFLAGS\"\n     CC=\"$ac_save_cc\"\n    AC_MSG_RESULT($ac_cv_declaration_after_statement_warning)\n\n    if test $ac_cv_declaration_after_statement_warning = yes\n    then\n      CFLAGS_NODIST=\"$CFLAGS_NODIST -Werror=declaration-after-statement\"\n    fi\n\n    AC_MSG_CHECKING(if we can turn on $CC mixed sign comparison warning)\n     ac_save_cc=\"$CC\"\n     CC=\"$CC -Wsign-compare\"\n     save_CFLAGS=\"$CFLAGS\"\n     AC_CACHE_VAL(ac_cv_enable_sign_compare_warning,\n       AC_COMPILE_IFELSE(\n         [\n\t   AC_LANG_PROGRAM([[]], [[]])\n\t ],[\n           ac_cv_enable_sign_compare_warning=yes\n\t ],[\n           ac_cv_enable_sign_compare_warning=no\n\t ]))\n     CFLAGS=\"$save_CFLAGS\"\n     CC=\"$ac_save_cc\"\n    AC_MSG_RESULT($ac_cv_enable_sign_compare_warning)\n\n    if test $ac_cv_enable_sign_compare_warning = yes\n    then\n      BASECFLAGS=\"$BASECFLAGS -Wsign-compare\"\n    fi\n\n    AC_MSG_CHECKING(if we can turn on $CC unreachable code warning)\n     ac_save_cc=\"$CC\"\n     CC=\"$CC -Wunreachable-code\"\n     save_CFLAGS=\"$CFLAGS\"\n     AC_CACHE_VAL(ac_cv_enable_unreachable_code_warning,\n       AC_COMPILE_IFELSE(\n         [\n\t   AC_LANG_PROGRAM([[]], [[]])\n\t ],[\n           ac_cv_enable_unreachable_code_warning=yes\n\t ],[\n           ac_cv_enable_unreachable_code_warning=no\n\t ]))\n     CFLAGS=\"$save_CFLAGS\"\n     CC=\"$ac_save_cc\"\n\n    # Don't enable unreachable code warning in debug mode, since it usually\n    # results in non-standard code paths.\n    # Issue #24324: Unfortunately, the unreachable code warning does not work\n    # correctly on gcc and has been silently removed from the compiler.\n    # It is supported on clang but on OS X systems gcc may be an alias\n    # for clang.  Try to determine if the compiler is not really gcc and,\n    # if so, only then enable the warning.\n    if test $ac_cv_enable_unreachable_code_warning = yes && \\\n        test \"$Py_DEBUG\" != \"true\" && \\\n        test -z \"`$CC --version 2>/dev/null | grep 'Free Software Foundation'`\"\n    then\n      BASECFLAGS=\"$BASECFLAGS -Wunreachable-code\"\n    else\n      ac_cv_enable_unreachable_code_warning=no\n    fi\n    AC_MSG_RESULT($ac_cv_enable_unreachable_code_warning)\n\n    # if using gcc on alpha, use -mieee to get (near) full IEEE 754\n    # support.  Without this, treatment of subnormals doesn't follow\n    # the standard.\n    case $host in\n         alpha*)\n                BASECFLAGS=\"$BASECFLAGS -mieee\"\n                ;;\n    esac\n\n    case $ac_sys_system in\n\tSCO_SV*)\n\t    BASECFLAGS=\"$BASECFLAGS -m486 -DSCO5\"\n\t    ;;\n\n    # is there any other compiler on Darwin besides gcc?\n    Darwin*)\n        # -Wno-long-double, -no-cpp-precomp, and -mno-fused-madd\n        # used to be here, but non-Apple gcc doesn't accept them.\n        if test \"${CC}\" = gcc\n        then\n            AC_MSG_CHECKING(which compiler should be used)\n            case \"${UNIVERSALSDK}\" in\n            */MacOSX10.4u.sdk)\n                # Build using 10.4 SDK, force usage of gcc when the\n                # compiler is gcc, otherwise the user will get very\n                # confusing error messages when building on OSX 10.6\n                CC=gcc-4.0\n                CPP=cpp-4.0\n                ;;\n            esac\n            AC_MSG_RESULT($CC)\n        fi\n\n        if test \"${enable_universalsdk}\"\n        then\n            case \"$UNIVERSAL_ARCHS\" in\n            32-bit)\n               UNIVERSAL_ARCH_FLAGS=\"-arch ppc -arch i386\"\n               LIPO_32BIT_FLAGS=\"\"\n               ARCH_RUN_32BIT=\"\"\n               ;;\n            64-bit)\n               UNIVERSAL_ARCH_FLAGS=\"-arch ppc64 -arch x86_64\"\n               LIPO_32BIT_FLAGS=\"\"\n               ARCH_RUN_32BIT=\"true\"\n               ;;\n            all)\n               UNIVERSAL_ARCH_FLAGS=\"-arch i386 -arch ppc -arch ppc64 -arch x86_64\"\n               LIPO_32BIT_FLAGS=\"-extract ppc7400 -extract i386\"\n               ARCH_RUN_32BIT=\"/usr/bin/arch -i386 -ppc\"\n               ;;\n            intel)\n               UNIVERSAL_ARCH_FLAGS=\"-arch i386 -arch x86_64\"\n               LIPO_32BIT_FLAGS=\"-extract i386\"\n               ARCH_RUN_32BIT=\"/usr/bin/arch -i386\"\n               ;;\n            intel-32)\n               UNIVERSAL_ARCH_FLAGS=\"-arch i386\"\n               LIPO_32BIT_FLAGS=\"\"\n               ARCH_RUN_32BIT=\"\"\n               ;;\n            3-way)\n               UNIVERSAL_ARCH_FLAGS=\"-arch i386 -arch ppc -arch x86_64\"\n               LIPO_32BIT_FLAGS=\"-extract ppc7400 -extract i386\"\n               ARCH_RUN_32BIT=\"/usr/bin/arch -i386 -ppc\"\n               ;;\n            *)\n               AC_MSG_ERROR([proper usage is --with-universal-arch=32-bit|64-bit|all|intel|3-way])\n               ;;\n            esac\n\n            CFLAGS=\"${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${CFLAGS}\"\n            LDFLAGS=\"${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${LDFLAGS}\"\n            if test \"${UNIVERSALSDK}\" != \"/\"\n            then\n                CPPFLAGS=\"-isysroot ${UNIVERSALSDK} ${CPPFLAGS}\"\n            fi\n        fi\n\n        # Calculate an appropriate deployment target for this build:\n        # The deployment target value is used explicitly to enable certain\n        # features are enabled (such as builtin libedit support for readline)\n        # through the use of Apple's Availability Macros and is used as a\n        # component of the string returned by distutils.get_platform().\n        #\n        # Use the value from:\n        # 1. the MACOSX_DEPLOYMENT_TARGET environment variable if specified\n        # 2. the operating system version of the build machine if >= 10.6\n        # 3. If running on OS X 10.3 through 10.5, use the legacy tests\n        #       below to pick either 10.3, 10.4, or 10.5 as the target.\n        # 4. If we are running on OS X 10.2 or earlier, good luck!\n\n        AC_MSG_CHECKING(which MACOSX_DEPLOYMENT_TARGET to use)\n        cur_target_major=`sw_vers -productVersion | \\\n                sed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\).*/\\1/'`\n        cur_target_minor=`sw_vers -productVersion | \\\n                sed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\).*/\\2/'`\n        cur_target=\"${cur_target_major}.${cur_target_minor}\"\n        if test ${cur_target_major} -eq 10 && \\\n           test ${cur_target_minor} -ge 3 && \\\n           test ${cur_target_minor} -le 5\n        then\n            # OS X 10.3 through 10.5\n            cur_target=10.3\n            if test ${enable_universalsdk}\n            then\n                case \"$UNIVERSAL_ARCHS\" in\n                all|3-way|intel|64-bit)\n                    # These configurations were first supported in 10.5\n                    cur_target='10.5'\n                    ;;\n                esac\n            else\n                if test `/usr/bin/arch` = \"i386\"\n                then\n                    # 10.4 was the first release to support Intel archs\n                    cur_target=\"10.4\"\n                fi\n            fi\n        fi\n        CONFIGURE_MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET-${cur_target}}\n\n        # Make sure that MACOSX_DEPLOYMENT_TARGET is set in the\n        # environment with a value that is the same as what we'll use\n        # in the Makefile to ensure that we'll get the same compiler\n        # environment during configure and build time.\n        MACOSX_DEPLOYMENT_TARGET=\"$CONFIGURE_MACOSX_DEPLOYMENT_TARGET\"\n        export MACOSX_DEPLOYMENT_TARGET\n        EXPORT_MACOSX_DEPLOYMENT_TARGET=''\n        AC_MSG_RESULT($MACOSX_DEPLOYMENT_TARGET)\n\n        # end of Darwin* tests\n        ;;\n    esac\n    ;;\n\n*)\n    case $ac_sys_system in\n    OpenUNIX*|UnixWare*)\n\tBASECFLAGS=\"$BASECFLAGS -K pentium,host,inline,loop_unroll,alloca \"\n\t;;\n    SCO_SV*)\n\tBASECFLAGS=\"$BASECFLAGS -belf -Ki486 -DSCO5\"\n\t;;\n    esac\n    ;;\nesac\n\n# ICC needs -fp-model strict or floats behave badly\ncase \"$CC\" in\n*icc*)\n    CFLAGS_NODIST=\"$CFLAGS_NODIST -fp-model strict\"\n    ;;\nesac\n\nif test \"$Py_DEBUG\" = 'true'; then\n  :\nelse\n  OPT=\"-DNDEBUG $OPT\"\nfi\n\nif test \"$ac_arch_flags\"\nthen\n\tBASECFLAGS=\"$BASECFLAGS $ac_arch_flags\"\nfi\n\n# On some compilers, pthreads are available without further options\n# (e.g. MacOS X). On some of these systems, the compiler will not\n# complain if unaccepted options are passed (e.g. gcc on Mac OS X).\n# So we have to see first whether pthreads are available without\n# options before we can check whether -Kpthread improves anything.\nAC_MSG_CHECKING(whether pthreads are available without options)\nAC_CACHE_VAL(ac_cv_pthread_is_default,\n[AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <stdio.h>\n#include <pthread.h>\n\nvoid* routine(void* p){return NULL;}\n\nint main(){\n  pthread_t p;\n  if(pthread_create(&p,NULL,routine,NULL)!=0)\n    return 1;\n  (void)pthread_detach(p);\n  return 0;\n}\n]])],[\n  ac_cv_pthread_is_default=yes\n  ac_cv_kthread=no\n  ac_cv_pthread=no\n],[ac_cv_pthread_is_default=no],[ac_cv_pthread_is_default=no])\n])\nAC_MSG_RESULT($ac_cv_pthread_is_default)\n\n\nif test $ac_cv_pthread_is_default = yes\nthen\n  ac_cv_kpthread=no\nelse\n# -Kpthread, if available, provides the right #defines\n# and linker options to make pthread_create available\n# Some compilers won't report that they do not support -Kpthread,\n# so we need to run a program to see whether it really made the\n# function available.\nAC_MSG_CHECKING(whether $CC accepts -Kpthread)\nAC_CACHE_VAL(ac_cv_kpthread,\n[ac_save_cc=\"$CC\"\nCC=\"$CC -Kpthread\"\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <stdio.h>\n#include <pthread.h>\n\nvoid* routine(void* p){return NULL;}\n\nint main(){\n  pthread_t p;\n  if(pthread_create(&p,NULL,routine,NULL)!=0)\n    return 1;\n  (void)pthread_detach(p);\n  return 0;\n}\n]])],[ac_cv_kpthread=yes],[ac_cv_kpthread=no],[ac_cv_kpthread=no])\nCC=\"$ac_save_cc\"])\nAC_MSG_RESULT($ac_cv_kpthread)\nfi\n\nif test $ac_cv_kpthread = no -a $ac_cv_pthread_is_default = no\nthen\n# -Kthread, if available, provides the right #defines\n# and linker options to make pthread_create available\n# Some compilers won't report that they do not support -Kthread,\n# so we need to run a program to see whether it really made the\n# function available.\nAC_MSG_CHECKING(whether $CC accepts -Kthread)\nAC_CACHE_VAL(ac_cv_kthread,\n[ac_save_cc=\"$CC\"\nCC=\"$CC -Kthread\"\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <stdio.h>\n#include <pthread.h>\n\nvoid* routine(void* p){return NULL;}\n\nint main(){\n  pthread_t p;\n  if(pthread_create(&p,NULL,routine,NULL)!=0)\n    return 1;\n  (void)pthread_detach(p);\n  return 0;\n}\n]])],[ac_cv_kthread=yes],[ac_cv_kthread=no],[ac_cv_kthread=no])\nCC=\"$ac_save_cc\"])\nAC_MSG_RESULT($ac_cv_kthread)\nfi\n\nif test $ac_cv_kthread = no -a $ac_cv_pthread_is_default = no\nthen\n# -pthread, if available, provides the right #defines\n# and linker options to make pthread_create available\n# Some compilers won't report that they do not support -pthread,\n# so we need to run a program to see whether it really made the\n# function available.\nAC_MSG_CHECKING(whether $CC accepts -pthread)\nAC_CACHE_VAL(ac_cv_pthread,\n[ac_save_cc=\"$CC\"\nCC=\"$CC -pthread\"\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <stdio.h>\n#include <pthread.h>\n\nvoid* routine(void* p){return NULL;}\n\nint main(){\n  pthread_t p;\n  if(pthread_create(&p,NULL,routine,NULL)!=0)\n    return 1;\n  (void)pthread_detach(p);\n  return 0;\n}\n]])],[ac_cv_pthread=yes],[ac_cv_pthread=no],[ac_cv_pthread=no])\nCC=\"$ac_save_cc\"])\nAC_MSG_RESULT($ac_cv_pthread)\nfi\n\n# If we have set a CC compiler flag for thread support then\n# check if it works for CXX, too.\nac_cv_cxx_thread=no\nif test ! -z \"$CXX\"\nthen\nAC_MSG_CHECKING(whether $CXX also accepts flags for thread support)\nac_save_cxx=\"$CXX\"\n\nif test \"$ac_cv_kpthread\" = \"yes\"\nthen\n  CXX=\"$CXX -Kpthread\"\n  ac_cv_cxx_thread=yes\nelif test \"$ac_cv_kthread\" = \"yes\"\nthen\n  CXX=\"$CXX -Kthread\"\n  ac_cv_cxx_thread=yes\nelif test \"$ac_cv_pthread\" = \"yes\"\nthen\n  CXX=\"$CXX -pthread\"\n  ac_cv_cxx_thread=yes\nfi\n\nif test $ac_cv_cxx_thread = yes\nthen\n  echo 'void foo();int main(){foo();}void foo(){}' > conftest.$ac_ext\n  $CXX -c conftest.$ac_ext 2>&5\n  if $CXX -o conftest$ac_exeext conftest.$ac_objext 2>&5 \\\n     && test -s conftest$ac_exeext && ./conftest$ac_exeext\n  then\n    ac_cv_cxx_thread=yes\n  else\n    ac_cv_cxx_thread=no\n  fi\n  rm -fr conftest*\nfi\nAC_MSG_RESULT($ac_cv_cxx_thread)\nfi\nCXX=\"$ac_save_cxx\"\n\ndnl # check for ANSI or K&R (\"traditional\") preprocessor\ndnl AC_MSG_CHECKING(for C preprocessor type)\ndnl AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\ndnl #define spam(name, doc) {#name, &name, #name \"() -- \" doc}\ndnl int foo;\ndnl struct {char *name; int *addr; char *doc;} desc = spam(foo, \"something\");\ndnl ]], [[;]])],[cpp_type=ansi],[AC_DEFINE(HAVE_OLD_CPP) cpp_type=traditional])\ndnl AC_MSG_RESULT($cpp_type)\n\n# checks for header files\nAC_HEADER_STDC\nAC_CHECK_HEADERS(asm/types.h conio.h direct.h dlfcn.h errno.h \\\nfcntl.h grp.h \\\nieeefp.h io.h langinfo.h libintl.h process.h pthread.h \\\nsched.h shadow.h signal.h stdint.h stropts.h termios.h \\\nunistd.h utime.h \\\npoll.h sys/devpoll.h sys/epoll.h sys/poll.h \\\nsys/audioio.h sys/xattr.h sys/bsdtty.h sys/event.h sys/file.h sys/ioctl.h \\\nsys/kern_control.h sys/loadavg.h sys/lock.h sys/mkdev.h sys/modem.h \\\nsys/param.h sys/random.h sys/select.h sys/sendfile.h sys/socket.h sys/statvfs.h \\\nsys/stat.h sys/syscall.h sys/sys_domain.h sys/termio.h sys/time.h \\\nsys/times.h sys/types.h sys/uio.h sys/un.h sys/utsname.h sys/wait.h pty.h \\\nlibutil.h sys/resource.h netpacket/packet.h sysexits.h bluetooth.h \\\nbluetooth/bluetooth.h linux/tipc.h linux/random.h spawn.h util.h alloca.h endian.h \\\nsys/endian.h)\nAC_HEADER_DIRENT\nAC_HEADER_MAJOR\n\n# On Darwin (OS X) net/if.h requires sys/socket.h to be imported first.\nAC_CHECK_HEADERS([net/if.h], [], [],\n[#include <stdio.h>\n#ifdef STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#else\n# ifdef HAVE_STDLIB_H\n#  include <stdlib.h>\n# endif\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n# include <sys/socket.h>\n#endif\n])\n\n# On Linux, netlink.h requires asm/types.h\nAC_CHECK_HEADERS(linux/netlink.h,,,[\n#ifdef HAVE_ASM_TYPES_H\n#include <asm/types.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n])\n\n# On Linux, can.h and can/raw.h require sys/socket.h\nAC_CHECK_HEADERS(linux/can.h linux/can/raw.h linux/can/bcm.h,,,[\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n])\n\n# checks for typedefs\nwas_it_defined=no\nAC_MSG_CHECKING(for clock_t in time.h)\nAC_EGREP_HEADER(clock_t, time.h, was_it_defined=yes, [\n    AC_DEFINE(clock_t, long, [Define to 'long' if <time.h> doesn't define.])\n])\nAC_MSG_RESULT($was_it_defined)\n\nAC_MSG_CHECKING(for makedev)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#if defined(MAJOR_IN_MKDEV)\n#include <sys/mkdev.h>\n#elif defined(MAJOR_IN_SYSMACROS)\n#include <sys/sysmacros.h>\n#else\n#include <sys/types.h>\n#endif\n]], [[\n  makedev(0, 0) ]])\n],[ac_cv_has_makedev=yes],[ac_cv_has_makedev=no])\nAC_MSG_RESULT($ac_cv_has_makedev)\nif test \"$ac_cv_has_makedev\" = \"yes\"; then\n    AC_DEFINE(HAVE_MAKEDEV, 1, [Define this if you have the makedev macro.])\nfi\n\n# byte swapping\nAC_MSG_CHECKING(for le64toh)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#ifdef HAVE_ENDIAN_H\n#include <endian.h>\n#elif defined(HAVE_SYS_ENDIAN_H)\n#include <sys/endian.h>\n#endif\n]], [[\n   le64toh(1) ]])\n],[ac_cv_has_le64toh=yes],[ac_cv_has_le64toh=no])\nAC_MSG_RESULT($ac_cv_has_le64toh)\nif test \"$ac_cv_has_le64toh\" = \"yes\"; then\n    AC_DEFINE(HAVE_HTOLE64, 1, [Define this if you have le64toh()])\nfi\n\n# Enabling LFS on Solaris (2.6 to 9) with gcc 2.95 triggers a bug in\n# the system headers: If _XOPEN_SOURCE and _LARGEFILE_SOURCE are\n# defined, but the compiler does not support pragma redefine_extname,\n# and _LARGEFILE64_SOURCE is not defined, the headers refer to 64-bit\n# structures (such as rlimit64) without declaring them. As a\n# work-around, disable LFS on such configurations\n\nuse_lfs=yes\nAC_MSG_CHECKING(Solaris LFS bug)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#define _LARGEFILE_SOURCE 1\n#define _FILE_OFFSET_BITS 64\n#include <sys/resource.h>\n]], [[struct rlimit foo;]])],[sol_lfs_bug=no],[sol_lfs_bug=yes])\nAC_MSG_RESULT($sol_lfs_bug)\nif test \"$sol_lfs_bug\" = \"yes\"; then\n  use_lfs=no\nfi\n\nif test \"$use_lfs\" = \"yes\"; then\n# Two defines needed to enable largefile support on various platforms\n# These may affect some typedefs\ncase $ac_sys_system/$ac_sys_release in\nAIX*)\n    AC_DEFINE(_LARGE_FILES, 1,\n    [This must be defined on AIX systems to enable large file support.])\n    ;;\nesac\nAC_DEFINE(_LARGEFILE_SOURCE, 1,\n[This must be defined on some systems to enable large file support.])\nAC_DEFINE(_FILE_OFFSET_BITS, 64,\n[This must be set to 64 on some systems to enable large file support.])\nfi\n\n# Add some code to confdefs.h so that the test for off_t works on SCO\ncat >> confdefs.h <<\\EOF\n#if defined(SCO_DS)\n#undef _OFF_T\n#endif\nEOF\n\n# Type availability checks\nAC_TYPE_MODE_T\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_DEFINE_UNQUOTED([RETSIGTYPE],[void],[assume C89 semantics that RETSIGTYPE is always void])\nAC_TYPE_SIZE_T\nAC_TYPE_UID_T\n\n# There are two separate checks for each of the exact-width integer types we\n# need.  First we check whether the type is available using the usual\n# AC_CHECK_TYPE macro with the default includes (which includes <inttypes.h>\n# and <stdint.h> where available).  We then also use the special type checks of\n# the form AC_TYPE_UINT32_T, which in the case that uint32_t is not available\n# directly, #define's uint32_t to be a suitable type.\n\nAC_CHECK_TYPE(uint32_t,\n  AC_DEFINE(HAVE_UINT32_T, 1, [Define if your compiler provides uint32_t.]),,)\nAC_TYPE_UINT32_T\n\nAC_CHECK_TYPE(uint64_t,\n  AC_DEFINE(HAVE_UINT64_T, 1, [Define if your compiler provides uint64_t.]),,)\nAC_TYPE_UINT64_T\n\nAC_CHECK_TYPE(int32_t,\n  AC_DEFINE(HAVE_INT32_T, 1, [Define if your compiler provides int32_t.]),,)\nAC_TYPE_INT32_T\n\nAC_CHECK_TYPE(int64_t,\n  AC_DEFINE(HAVE_INT64_T, 1, [Define if your compiler provides int64_t.]),,)\nAC_TYPE_INT64_T\n\nAC_CHECK_TYPE(ssize_t,\n  AC_DEFINE(HAVE_SSIZE_T, 1, [Define if your compiler provides ssize_t]),,)\nAC_CHECK_TYPE(__uint128_t,\n  AC_DEFINE(HAVE_GCC_UINT128_T, 1, [Define if your compiler provides __uint128_t]),,)\n\n# Sizes of various common basic types\n# ANSI C requires sizeof(char) == 1, so no need to check it\nAC_CHECK_SIZEOF(int, 4)\nAC_CHECK_SIZEOF(long, 4)\nAC_CHECK_SIZEOF(void *, 4)\nAC_CHECK_SIZEOF(short, 2)\nAC_CHECK_SIZEOF(float, 4)\nAC_CHECK_SIZEOF(double, 8)\nAC_CHECK_SIZEOF(fpos_t, 4)\nAC_CHECK_SIZEOF(size_t, 4)\nAC_CHECK_SIZEOF(pid_t, 4)\n\nAC_MSG_CHECKING(for long long support)\nhave_long_long=no\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[long long x; x = (long long)0;]])],[\n  AC_DEFINE(HAVE_LONG_LONG, 1, [Define this if you have the type long long.])\n  have_long_long=yes\n],[])\nAC_MSG_RESULT($have_long_long)\nif test \"$have_long_long\" = yes ; then\nAC_CHECK_SIZEOF(long long, 8)\nfi\n\nAC_MSG_CHECKING(for long double support)\nhave_long_double=no\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[long double x; x = (long double)0;]])],[\n  AC_DEFINE(HAVE_LONG_DOUBLE, 1, [Define this if you have the type long double.])\n  have_long_double=yes\n],[])\nAC_MSG_RESULT($have_long_double)\nif test \"$have_long_double\" = yes ; then\nAC_CHECK_SIZEOF(long double, 16)\nfi\n\n\nAC_MSG_CHECKING(for _Bool support)\nhave_c99_bool=no\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[_Bool x; x = (_Bool)0;]])],[\n  AC_DEFINE(HAVE_C99_BOOL, 1, [Define this if you have the type _Bool.])\n  have_c99_bool=yes\n],[])\nAC_MSG_RESULT($have_c99_bool)\nif test \"$have_c99_bool\" = yes ; then\nAC_CHECK_SIZEOF(_Bool, 1)\nfi\n\nAC_CHECK_TYPES(uintptr_t,\n   [AC_CHECK_SIZEOF(uintptr_t, 4)],\n   [], [#ifdef HAVE_STDINT_H\n        #include <stdint.h>\n        #endif\n        #ifdef HAVE_INTTYPES_H\n        #include <inttypes.h>\n        #endif])\n\nAC_CHECK_SIZEOF(off_t, [], [\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n])\n\nAC_MSG_CHECKING(whether to enable large file support)\nif test \"$have_long_long\" = yes\nthen\nif test \"$ac_cv_sizeof_off_t\" -gt \"$ac_cv_sizeof_long\" -a \\\n\t\"$ac_cv_sizeof_long_long\" -ge \"$ac_cv_sizeof_off_t\"; then\n  AC_DEFINE(HAVE_LARGEFILE_SUPPORT, 1,\n  [Defined to enable large file support when an off_t is bigger than a long\n   and long long is available and at least as big as an off_t. You may need\n   to add some flags for configuration and compilation to enable this mode.\n   (For Solaris and Linux, the necessary defines are already defined.)])\n  AC_MSG_RESULT(yes)\nelse\n  AC_MSG_RESULT(no)\nfi\nelse\n  AC_MSG_RESULT(no)\nfi\n\nAC_CHECK_SIZEOF(time_t, [], [\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_TIME_H\n#include <time.h>\n#endif\n])\n\n# if have pthread_t then define SIZEOF_PTHREAD_T\nac_save_cc=\"$CC\"\nif test \"$ac_cv_kpthread\" = \"yes\"\nthen CC=\"$CC -Kpthread\"\nelif test \"$ac_cv_kthread\" = \"yes\"\nthen CC=\"$CC -Kthread\"\nelif test \"$ac_cv_pthread\" = \"yes\"\nthen CC=\"$CC -pthread\"\nfi\n\nAC_MSG_CHECKING(for pthread_t)\nhave_pthread_t=no\nAC_COMPILE_IFELSE([\n  AC_LANG_PROGRAM([[#include <pthread.h>]], [[pthread_t x; x = *(pthread_t*)0;]])\n],[have_pthread_t=yes],[])\nAC_MSG_RESULT($have_pthread_t)\nif test \"$have_pthread_t\" = yes ; then\n  AC_CHECK_SIZEOF(pthread_t, [], [\n#ifdef HAVE_PTHREAD_H\n#include <pthread.h>\n#endif\n  ])\nfi\nCC=\"$ac_save_cc\"\n\nAC_SUBST(OTHER_LIBTOOL_OPT)\ncase $ac_sys_system/$ac_sys_release in\n  Darwin/@<:@01567@:>@\\..*)\n    OTHER_LIBTOOL_OPT=\"-prebind -seg1addr 0x10000000\"\n    ;;\n  Darwin/*)\n    OTHER_LIBTOOL_OPT=\"\"\n    ;;\nesac\n\n\nAC_SUBST(LIBTOOL_CRUFT)\ncase $ac_sys_system/$ac_sys_release in\n  Darwin/@<:@01567@:>@\\..*)\n    LIBTOOL_CRUFT=\"-framework System -lcc_dynamic\"\n    if test \"${enable_universalsdk}\"; then\n\t    :\n    else\n        LIBTOOL_CRUFT=\"${LIBTOOL_CRUFT} -arch_only `/usr/bin/arch`\"\n    fi\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -install_name $(PYTHONFRAMEWORKINSTALLDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -compatibility_version $(VERSION) -current_version $(VERSION)';;\n  Darwin/*)\n    gcc_version=`gcc -dumpversion`\n    if test ${gcc_version} '<' 4.0\n        then\n            LIBTOOL_CRUFT=\"-lcc_dynamic\"\n        else\n            LIBTOOL_CRUFT=\"\"\n    fi\n    AC_RUN_IFELSE([AC_LANG_SOURCE([[\n    #include <unistd.h>\n    int main(int argc, char*argv[])\n    {\n      if (sizeof(long) == 4) {\n    \t  return 0;\n      } else {\n      \t  return 1;\n      }\n    }\n    ]])],[ac_osx_32bit=yes],[ac_osx_32bit=no],[ac_osx_32bit=yes])\n\n    if test \"${ac_osx_32bit}\" = \"yes\"; then\n    \tcase `/usr/bin/arch` in\n    \ti386)\n    \t\tMACOSX_DEFAULT_ARCH=\"i386\"\n    \t\t;;\n    \tppc)\n    \t\tMACOSX_DEFAULT_ARCH=\"ppc\"\n    \t\t;;\n    \t*)\n    \t\tAC_MSG_ERROR([Unexpected output of 'arch' on OSX])\n    \t\t;;\n    \tesac\n    else\n    \tcase `/usr/bin/arch` in\n    \ti386)\n    \t\tMACOSX_DEFAULT_ARCH=\"x86_64\"\n    \t\t;;\n    \tppc)\n    \t\tMACOSX_DEFAULT_ARCH=\"ppc64\"\n    \t\t;;\n    \t*)\n    \t\tAC_MSG_ERROR([Unexpected output of 'arch' on OSX])\n    \t\t;;\n    \tesac\n\n    fi\n\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT\" -lSystem -lSystemStubs -arch_only ${MACOSX_DEFAULT_ARCH}\"\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -install_name $(PYTHONFRAMEWORKINSTALLDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -compatibility_version $(VERSION) -current_version $(VERSION)';;\nesac\nAC_MSG_CHECKING(for --enable-framework)\nif test \"$enable_framework\"\nthen\n\tBASECFLAGS=\"$BASECFLAGS -fno-common -dynamic\"\n\t# -F. is needed to allow linking to the framework while\n\t# in the build location.\n\tAC_DEFINE(WITH_NEXT_FRAMEWORK, 1,\n         [Define if you want to produce an OpenStep/Rhapsody framework\n         (shared library plus accessory files).])\n\tAC_MSG_RESULT(yes)\n\tif test $enable_shared = \"yes\"\n\tthen\n\t\tAC_MSG_ERROR([Specifying both --enable-shared and --enable-framework is not supported, use only --enable-framework instead])\n\tfi\nelse\n\tAC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING(for dyld)\ncase $ac_sys_system/$ac_sys_release in\n  Darwin/*)\n  \tAC_DEFINE(WITH_DYLD, 1,\n        [Define if you want to use the new-style (Openstep, Rhapsody, MacOS)\n         dynamic linker (dyld) instead of the old-style (NextStep) dynamic\n         linker (rld). Dyld is necessary to support frameworks.])\n  \tAC_MSG_RESULT(always on for Darwin)\n  \t;;\n  *)\n\tAC_MSG_RESULT(no)\n\t;;\nesac\n\n# Set info about shared libraries.\nAC_SUBST(SHLIB_SUFFIX)\nAC_SUBST(LDSHARED)\nAC_SUBST(LDCXXSHARED)\nAC_SUBST(BLDSHARED)\nAC_SUBST(CCSHARED)\nAC_SUBST(LINKFORSHARED)\n\n# SHLIB_SUFFIX is the extension of shared libraries `(including the dot!)\n# -- usually .so, .sl on HP-UX, .dll on Cygwin\nAC_MSG_CHECKING(the extension of shared libraries)\nif test -z \"$SHLIB_SUFFIX\"; then\n\tcase $ac_sys_system in\n\thp*|HP*)\n\t\tcase `uname -m` in\n\t\t\tia64) SHLIB_SUFFIX=.so;;\n\t  \t\t*)    SHLIB_SUFFIX=.sl;;\n\t\tesac\n\t\t;;\n\tCYGWIN*)   SHLIB_SUFFIX=.dll;;\n\t*)\t   SHLIB_SUFFIX=.so;;\n\tesac\nfi\nAC_MSG_RESULT($SHLIB_SUFFIX)\n\n# LDSHARED is the ld *command* used to create shared library\n# -- \"cc -G\" on SunOS 5.x, \"ld -shared\" on IRIX 5\n# (Shared libraries in this instance are shared modules to be loaded into\n# Python, as opposed to building Python itself as a shared library.)\nAC_MSG_CHECKING(LDSHARED)\nif test -z \"$LDSHARED\"\nthen\n\tcase $ac_sys_system/$ac_sys_release in\n\tAIX*)\n\t\tBLDSHARED=\"Modules/ld_so_aix \\$(CC) -bI:Modules/python.exp\"\n\t\tLDSHARED=\"\\$(LIBPL)/ld_so_aix \\$(CC) -bI:\\$(LIBPL)/python.exp\"\n\t\t;;\n\tIRIX/5*) LDSHARED=\"ld -shared\";;\n\tIRIX*/6*) LDSHARED=\"ld ${SGI_ABI} -shared -all\";;\n\tSunOS/5*)\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t\tLDSHARED='$(CC) -shared'\n\t\t\tLDCXXSHARED='$(CXX) -shared'\n\t\telse\n\t\t\tLDSHARED='$(CC) -G'\n\t\t\tLDCXXSHARED='$(CXX) -G'\n\t\tfi ;;\n\thp*|HP*)\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t\tLDSHARED='$(CC) -shared'\n\t\t\tLDCXXSHARED='$(CXX) -shared'\n\t\telse\n\t\t\tLDSHARED='ld -b'\n\t\tfi ;;\n\tDarwin/1.3*)\n\t\tLDSHARED='$(CC) -bundle'\n\t\tLDCXXSHARED='$(CXX) -bundle'\n\t\tif test \"$enable_framework\" ; then\n\t\t\t# Link against the framework. All externals should be defined.\n\t\t\tBLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\tLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\tLDCXXSHARED=\"$LDCXXSHARED \"'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\telse\n\t\t\t# No framework. Ignore undefined symbols, assuming they come from Python\n\t\t\tLDSHARED=\"$LDSHARED -undefined suppress\"\n\t\t\tLDCXXSHARED=\"$LDCXXSHARED -undefined suppress\"\n\t\tfi ;;\n\tDarwin/1.4*|Darwin/5.*|Darwin/6.*)\n\t\tLDSHARED='$(CC) -bundle'\n\t\tLDCXXSHARED='$(CXX) -bundle'\n\t\tif test \"$enable_framework\" ; then\n\t\t\t# Link against the framework. All externals should be defined.\n\t\t\tBLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\tLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\tLDCXXSHARED=\"$LDCXXSHARED \"'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\telse\n\t\t\t# No framework, use the Python app as bundle-loader\n\t\t\tBLDSHARED=\"$LDSHARED \"'-bundle_loader $(BUILDPYTHON)'\n\t\t\tLDSHARED=\"$LDSHARED \"'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'\n\t\t\tLDCXXSHARED=\"$LDCXXSHARED \"'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'\n\t\tfi ;;\n\tDarwin/*)\n\t\t# Use -undefined dynamic_lookup whenever possible (10.3 and later).\n\t\t# This allows an extension to be used in any Python\n\n\t\tdep_target_major=`echo ${MACOSX_DEPLOYMENT_TARGET} | \\\n\t\t\t\tsed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\).*/\\1/'`\n\t\tdep_target_minor=`echo ${MACOSX_DEPLOYMENT_TARGET} | \\\n\t\t\t\tsed 's/\\([[0-9]]*\\)\\.\\([[0-9]]*\\).*/\\2/'`\n\t\tif test ${dep_target_major} -eq 10 && \\\n\t\t   test ${dep_target_minor} -le 2\n\t\tthen\n\t\t\t# building for OS X 10.0 through 10.2\n\t\t\tLDSHARED='$(CC) -bundle'\n\t\t\tLDCXXSHARED='$(CXX) -bundle'\n\t\t\tif test \"$enable_framework\" ; then\n\t\t\t\t# Link against the framework. All externals should be defined.\n\t\t\t\tBLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\t\tLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\t\tLDCXXSHARED=\"$LDCXXSHARED \"'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\telse\n\t\t\t\t# No framework, use the Python app as bundle-loader\n\t\t\t\tBLDSHARED=\"$LDSHARED \"'-bundle_loader $(BUILDPYTHON)'\n\t\t\t\tLDSHARED=\"$LDSHARED \"'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'\n\t\t\t\tLDCXXSHARED=\"$LDCXXSHARED \"'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'\n\t\t\tfi\n\t\telse\n\t\t\t# building for OS X 10.3 and later\n\t\t\tLDSHARED='$(CC) -bundle -undefined dynamic_lookup'\n\t\t\tLDCXXSHARED='$(CXX) -bundle -undefined dynamic_lookup'\n\t\t\tBLDSHARED=\"$LDSHARED\"\n\t\tfi\n\t\t;;\n\tLinux*|GNU*|QNX*)\n\t\tLDSHARED='$(CC) -shared'\n\t\tLDCXXSHARED='$(CXX) -shared';;\n\tBSD/OS*/4*)\n\t\tLDSHARED=\"gcc -shared\"\n\t\tLDCXXSHARED=\"g++ -shared\";;\n\tFreeBSD*)\n\t\tif [[ \"`$CC -dM -E - </dev/null | grep __ELF__`\" != \"\" ]]\n\t\tthen\n\t\t\tLDSHARED='$(CC) -shared'\n\t\t\tLDCXXSHARED='$(CXX) -shared'\n\t\telse\n\t\t\tLDSHARED=\"ld -Bshareable\"\n\t\tfi;;\n\tOpenBSD*)\n\t\tif [[ \"`$CC -dM -E - </dev/null | grep __ELF__`\" != \"\" ]]\n\t\tthen\n\t\t\t\tLDSHARED='$(CC) -shared $(CCSHARED)'\n\t\t\t\tLDCXXSHARED='$(CXX) -shared $(CCSHARED)'\n\t\telse\n\t\t\t\tcase `uname -r` in\n\t\t\t\t[[01]].* | 2.[[0-7]] | 2.[[0-7]].*)\n\t\t\t\t   LDSHARED=\"ld -Bshareable ${LDFLAGS}\"\n\t\t\t\t   ;;\n\t\t\t\t*)\n\t\t\t\t   LDSHARED='$(CC) -shared $(CCSHARED)'\n\t\t\t\t   LDCXXSHARED='$(CXX) -shared $(CCSHARED)'\n\t\t\t\t   ;;\n\t\t\t\tesac\n\t\tfi;;\n\tNetBSD*|DragonFly*)\n\t\tLDSHARED='$(CC) -shared'\n\t\tLDCXXSHARED='$(CXX) -shared';;\n\tOpenUNIX*|UnixWare*)\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t\tLDSHARED='$(CC) -shared'\n\t\t\tLDCXXSHARED='$(CXX) -shared'\n\t\telse\n\t\t\tLDSHARED='$(CC) -G'\n\t\t\tLDCXXSHARED='$(CXX) -G'\n\t\tfi;;\n\tSCO_SV*)\n\t\tLDSHARED='$(CC) -Wl,-G,-Bexport'\n\t\tLDCXXSHARED='$(CXX) -Wl,-G,-Bexport';;\n\tCYGWIN*)\n\t\tLDSHARED=\"gcc -shared -Wl,--enable-auto-image-base\"\n\t\tLDCXXSHARED=\"g++ -shared -Wl,--enable-auto-image-base\";;\n\t*)\tLDSHARED=\"ld\";;\n\tesac\nfi\nAC_MSG_RESULT($LDSHARED)\nLDCXXSHARED=${LDCXXSHARED-$LDSHARED}\nBLDSHARED=${BLDSHARED-$LDSHARED}\n# CCSHARED are the C *flags* used to create objects to go into a shared\n# library (module) -- this is only needed for a few systems\nAC_MSG_CHECKING(CCSHARED)\nif test -z \"$CCSHARED\"\nthen\n\tcase $ac_sys_system/$ac_sys_release in\n\tSunOS*) if test \"$GCC\" = yes;\n\t\tthen CCSHARED=\"-fPIC\";\n\t\telif test `uname -p` = sparc;\n\t\tthen CCSHARED=\"-xcode=pic32\";\n\t\telse CCSHARED=\"-Kpic\";\n\t\tfi;;\n\thp*|HP*) if test \"$GCC\" = yes;\n\t\t then CCSHARED=\"-fPIC\";\n\t\t else CCSHARED=\"+z\";\n\t\t fi;;\n\tLinux*|GNU*) CCSHARED=\"-fPIC\";;\n\tBSD/OS*/4*) CCSHARED=\"-fpic\";;\n\tFreeBSD*|NetBSD*|OpenBSD*|DragonFly*) CCSHARED=\"-fPIC\";;\n\tOpenUNIX*|UnixWare*)\n\t\tif test \"$GCC\" = \"yes\"\n\t\tthen CCSHARED=\"-fPIC\"\n\t\telse CCSHARED=\"-KPIC\"\n\t\tfi;;\n\tSCO_SV*)\n\t\tif test \"$GCC\" = \"yes\"\n\t\tthen CCSHARED=\"-fPIC\"\n\t\telse CCSHARED=\"-Kpic -belf\"\n\t\tfi;;\n\tIRIX*/6*)  case $CC in\n\t\t   *gcc*) CCSHARED=\"-shared\";;\n\t\t   *) CCSHARED=\"\";;\n\t\t   esac;;\n\tesac\nfi\nAC_MSG_RESULT($CCSHARED)\n# LINKFORSHARED are the flags passed to the $(CC) command that links\n# the python executable -- this is only needed for a few systems\nAC_MSG_CHECKING(LINKFORSHARED)\nif test -z \"$LINKFORSHARED\"\nthen\n\tcase $ac_sys_system/$ac_sys_release in\n\tAIX*)\tLINKFORSHARED='-Wl,-bE:Modules/python.exp -lld';;\n\thp*|HP*)\n\t    LINKFORSHARED=\"-Wl,-E -Wl,+s\";;\n#\t    LINKFORSHARED=\"-Wl,-E -Wl,+s -Wl,+b\\$(BINLIBDEST)/lib-dynload\";;\n\tBSD/OS/4*) LINKFORSHARED=\"-Xlinker -export-dynamic\";;\n\tLinux*|GNU*) LINKFORSHARED=\"-Xlinker -export-dynamic\";;\n\t# -u libsys_s pulls in all symbols in libsys\n\tDarwin/*)\n\t\tLINKFORSHARED=\"$extra_undefs -framework CoreFoundation\"\n\n\t\t# Issue #18075: the default maximum stack size (8MBytes) is too\n\t\t# small for the default recursion limit. Increase the stack size\n\t\t# to ensure that tests don't crash\n\t\tLINKFORSHARED=\"-Wl,-stack_size,1000000 $LINKFORSHARED\"\n\n\t\tif test \"$enable_framework\"\n\t\tthen\n\t\t\tLINKFORSHARED=\"$LINKFORSHARED \"'$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\tfi\n\t\tLINKFORSHARED=\"$LINKFORSHARED\";;\n\tOpenUNIX*|UnixWare*) LINKFORSHARED=\"-Wl,-Bexport\";;\n\tSCO_SV*) LINKFORSHARED=\"-Wl,-Bexport\";;\n\tReliantUNIX*) LINKFORSHARED=\"-W1 -Blargedynsym\";;\n\tFreeBSD*|NetBSD*|OpenBSD*|DragonFly*)\n\t\tif [[ \"`$CC -dM -E - </dev/null | grep __ELF__`\" != \"\" ]]\n\t\tthen\n\t\t\tLINKFORSHARED=\"-Wl,--export-dynamic\"\n\t\tfi;;\n\tSunOS/5*) case $CC in\n\t\t  *gcc*)\n\t\t    if $CC -Xlinker --help 2>&1 | grep export-dynamic >/dev/null\n\t\t    then\n\t\t\tLINKFORSHARED=\"-Xlinker --export-dynamic\"\n\t\t    fi;;\n\t\t  esac;;\n\tCYGWIN*)\n\t\tif test $enable_shared = \"no\"\n\t\tthen\n\t\t\tLINKFORSHARED='-Wl,--out-implib=$(LDLIBRARY)'\n\t\tfi;;\n\tQNX*)\n\t\t# -Wl,-E causes the symbols to be added to the dynamic\n\t\t# symbol table so that they can be found when a module\n\t\t# is loaded.  -N 2048K causes the stack size to be set\n\t\t# to 2048 kilobytes so that the stack doesn't overflow\n\t\t# when running test_compile.py.\n\t\tLINKFORSHARED='-Wl,-E -N 2048K';;\n\tesac\nfi\nAC_MSG_RESULT($LINKFORSHARED)\n\n\nAC_SUBST(CFLAGSFORSHARED)\nAC_MSG_CHECKING(CFLAGSFORSHARED)\nif test ! \"$LIBRARY\" = \"$LDLIBRARY\"\nthen\n\tcase $ac_sys_system in\n\tCYGWIN*)\n\t\t# Cygwin needs CCSHARED when building extension DLLs\n\t\t# but not when building the interpreter DLL.\n\t\tCFLAGSFORSHARED='';;\n\t*)\n\t\tCFLAGSFORSHARED='$(CCSHARED)'\n\tesac\nfi\nAC_MSG_RESULT($CFLAGSFORSHARED)\n\n# SHLIBS are libraries (except -lc and -lm) to link to the python shared\n# library (with --enable-shared).\n# For platforms on which shared libraries are not allowed to have unresolved\n# symbols, this must be set to $(LIBS) (expanded by make). We do this even\n# if it is not required, since it creates a dependency of the shared library\n# to LIBS. This, in turn, means that applications linking the shared libpython\n# don't need to link LIBS explicitly. The default should be only changed\n# on systems where this approach causes problems.\nAC_SUBST(SHLIBS)\nAC_MSG_CHECKING(SHLIBS)\ncase \"$ac_sys_system\" in\n\t*)\n\t\tSHLIBS='$(LIBS)';;\nesac\nAC_MSG_RESULT($SHLIBS)\n\n\n# checks for libraries\nAC_CHECK_LIB(sendfile, sendfile)\nAC_CHECK_LIB(dl, dlopen)\t# Dynamic linking for SunOS/Solaris and SYSV\nAC_CHECK_LIB(dld, shl_load)\t# Dynamic linking for HP-UX\n\n# only check for sem_init if thread support is requested\nif test \"$with_threads\" = \"yes\" -o -z \"$with_threads\"; then\n    AC_SEARCH_LIBS(sem_init, pthread rt posix4) # 'Real Time' functions on Solaris\n\t\t\t\t\t\t# posix4 on Solaris 2.6\n\t\t\t\t\t\t# pthread (first!) on Linux\nfi\n\n# check if we need libintl for locale functions\nAC_CHECK_LIB(intl, textdomain,\n\t[AC_DEFINE(WITH_LIBINTL, 1,\n\t[Define to 1 if libintl is needed for locale functions.])\n        LIBS=\"-lintl $LIBS\"])\n\n# checks for system dependent C++ extensions support\ncase \"$ac_sys_system\" in\n\tAIX*)\tAC_MSG_CHECKING(for genuine AIX C++ extensions support)\n\t\tAC_LINK_IFELSE([\n\t\t  AC_LANG_PROGRAM([[#include <load.h>]],\n\t\t\t\t  [[loadAndInit(\"\", 0, \"\")]])\n\t\t],[\n\t\t  AC_DEFINE(AIX_GENUINE_CPLUSPLUS, 1,\n                      [Define for AIX if your compiler is a genuine IBM xlC/xlC_r\n                       and you want support for AIX C++ shared extension modules.])\n\t\t  AC_MSG_RESULT(yes)\n\t\t],[\n\t\t  AC_MSG_RESULT(no)\n\t\t]);;\n\t*) ;;\nesac\n\n# check for systems that require aligned memory access\nAC_MSG_CHECKING(aligned memory access is required)\nAC_TRY_RUN([\nint main()\n{\n    char s[16];\n    int i, *p1, *p2;\n    for (i=0; i < 16; i++)\n        s[i] = i;\n    p1 = (int*)(s+1);\n    p2 = (int*)(s+2);\n    if (*p1 == *p2)\n        return 1;\n    return 0;\n}\n              ],\n     [aligned_required=no],\n     [aligned_required=yes],\n     [aligned_required=yes])\n\nif test \"$aligned_required\" = yes ; then\n  AC_DEFINE([HAVE_ALIGNED_REQUIRED], [1],\n    [Define if aligned memory access is required])\nfi\nAC_MSG_RESULT($aligned_required)\n\n\n# str, bytes and memoryview hash algorithm\nAH_TEMPLATE(Py_HASH_ALGORITHM,\n  [Define hash algorithm for str, bytes and memoryview.\n   SipHash24: 1, FNV: 2, externally defined: 0])\n\nAC_MSG_CHECKING(for --with-hash-algorithm)\ndnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output\nAC_ARG_WITH(hash_algorithm,\n            AS_HELP_STRING([--with-hash-algorithm=@<:@fnv|siphash24@:>@],\n                           [select hash algorithm]),\n[\nAC_MSG_RESULT($withval)\ncase \"$withval\" in\n    siphash24)\n        AC_DEFINE(Py_HASH_ALGORITHM, 1)\n        ;;\n    fnv)\n        AC_DEFINE(Py_HASH_ALGORITHM, 2)\n        ;;\n    *)\n        AC_MSG_ERROR([unknown hash algorithm '$withval'])\n        ;;\nesac\n],\n[AC_MSG_RESULT(default)])\n\nAC_MSG_CHECKING(for --with-address-sanitizer)\nAC_ARG_WITH(address_sanitizer,\n            AS_HELP_STRING([--with-address-sanitizer],\n                           [enable AddressSanitizer]),\n[\nAC_MSG_RESULT($withval)\nBASECFLAGS=\"-fsanitize=address -fno-omit-frame-pointer $BASECFLAGS\"\nLDFLAGS=\"-fsanitize=address $LDFLAGS\"\n],\n[AC_MSG_RESULT(no)])\n\n# Most SVR4 platforms (e.g. Solaris) need -lsocket and -lnsl.\nAC_CHECK_LIB(nsl, t_open, [LIBS=\"-lnsl $LIBS\"]) # SVR4\nAC_CHECK_LIB(socket, socket, [LIBS=\"-lsocket $LIBS\"], [], $LIBS) # SVR4 sockets\n\nAC_MSG_CHECKING(for --with-libs)\nAC_ARG_WITH(libs,\n            AS_HELP_STRING([--with-libs='lib1 ...'], [link against additional libs]),\n[\nAC_MSG_RESULT($withval)\nLIBS=\"$withval $LIBS\"\n],\n[AC_MSG_RESULT(no)])\n\nPKG_PROG_PKG_CONFIG\n\n# Check for use of the system expat library\nAC_MSG_CHECKING(for --with-system-expat)\nAC_ARG_WITH(system_expat,\n            AS_HELP_STRING([--with-system-expat], [build pyexpat module using an installed expat library]),\n            [],\n            [with_system_expat=\"no\"])\n\nAC_MSG_RESULT($with_system_expat)\n\n# Check for use of the system libffi library\nAC_MSG_CHECKING(for --with-system-ffi)\nAC_ARG_WITH(system_ffi,\n            AS_HELP_STRING([--with-system-ffi], [build _ctypes module using an installed ffi library]),\n            [],\n            [with_system_ffi=\"no\"])\n\nif test \"$with_system_ffi\" = \"yes\" && test -n \"$PKG_CONFIG\"; then\n    LIBFFI_INCLUDEDIR=\"`\"$PKG_CONFIG\" libffi --cflags-only-I 2>/dev/null | sed -e 's/^-I//;s/ *$//'`\"\nelse\n    LIBFFI_INCLUDEDIR=\"\"\nfi\nAC_SUBST(LIBFFI_INCLUDEDIR)\n\nAC_MSG_RESULT($with_system_ffi)\n\n# Check for use of the system libmpdec library\nAC_MSG_CHECKING(for --with-system-libmpdec)\nAC_ARG_WITH(system_libmpdec,\n            AS_HELP_STRING([--with-system-libmpdec], [build _decimal module using an installed libmpdec library]),\n            [],\n            [with_system_libmpdec=\"no\"])\n\nAC_MSG_RESULT($with_system_libmpdec)\n\n# Check for support for loadable sqlite extensions\nAC_MSG_CHECKING(for --enable-loadable-sqlite-extensions)\nAC_ARG_ENABLE(loadable-sqlite-extensions,\n              AS_HELP_STRING([--enable-loadable-sqlite-extensions], [support loadable extensions in _sqlite module]),\n              [],\n              [enable_loadable_sqlite_extensions=\"no\"])\n\nAC_MSG_RESULT($enable_loadable_sqlite_extensions)\n\n# Check for --with-tcltk-includes=path and --with-tcltk-libs=path\nAC_SUBST(TCLTK_INCLUDES)\nAC_SUBST(TCLTK_LIBS)\nAC_MSG_CHECKING(for --with-tcltk-includes)\nAC_ARG_WITH(tcltk-includes,\n            AS_HELP_STRING([--with-tcltk-includes='-I...'], [override search for Tcl and Tk include files]),\n            [],\n            [with_tcltk_includes=\"default\"])\nAC_MSG_RESULT($with_tcltk_includes)\nAC_MSG_CHECKING(for --with-tcltk-libs)\nAC_ARG_WITH(tcltk-libs,\n            AS_HELP_STRING([--with-tcltk-libs='-L...'], [override search for Tcl and Tk libs]),\n            [],\n            [with_tcltk_libs=\"default\"])\nAC_MSG_RESULT($with_tcltk_libs)\nif test \"x$with_tcltk_includes\" = xdefault || test \"x$with_tcltk_libs\" = xdefault\nthen\n  if test \"x$with_tcltk_includes\" != \"x$with_tcltk_libs\"\n  then\n    AC_MSG_ERROR([use both --with-tcltk-includes='...' and --with-tcltk-libs='...' or neither])\n  fi\n  TCLTK_INCLUDES=\"\"\n  TCLTK_LIBS=\"\"\nelse\n  TCLTK_INCLUDES=\"$with_tcltk_includes\"\n  TCLTK_LIBS=\"$with_tcltk_libs\"\nfi\n\n# Check for --with-dbmliborder\nAC_MSG_CHECKING(for --with-dbmliborder)\nAC_ARG_WITH(dbmliborder,\n            AS_HELP_STRING([--with-dbmliborder=db1:db2:...], [order to check db backends for dbm. Valid value is a colon separated string with the backend names `ndbm', `gdbm' and `bdb'.]),\n[\nif test x$with_dbmliborder = xyes\nthen\nAC_MSG_ERROR([proper usage is --with-dbmliborder=db1:db2:...])\nelse\n  for db in `echo $with_dbmliborder | sed 's/:/ /g'`; do\n    if test x$db != xndbm && test x$db != xgdbm && test x$db != xbdb\n    then\n      AC_MSG_ERROR([proper usage is --with-dbmliborder=db1:db2:...])\n    fi\n  done\nfi])\nAC_MSG_RESULT($with_dbmliborder)\n\n# Determine if signalmodule should be used.\nAC_SUBST(USE_SIGNAL_MODULE)\nAC_SUBST(SIGNAL_OBJS)\nAC_MSG_CHECKING(for --with-signal-module)\nAC_ARG_WITH(signal-module,\n            AS_HELP_STRING([--with-signal-module], [disable/enable signal module]))\n\nif test -z \"$with_signal_module\"\nthen with_signal_module=\"yes\"\nfi\nAC_MSG_RESULT($with_signal_module)\n\nif test \"${with_signal_module}\" = \"yes\"; then\n\tUSE_SIGNAL_MODULE=\"\"\n\tSIGNAL_OBJS=\"\"\nelse\n\tUSE_SIGNAL_MODULE=\"#\"\n\tSIGNAL_OBJS=\"Parser/intrcheck.o Python/sigcheck.o\"\nfi\n\n# This is used to generate Setup.config\nAC_SUBST(USE_THREAD_MODULE)\nUSE_THREAD_MODULE=\"\"\n\nAC_SUBST(LDLAST)\n\n# Templates for things AC_DEFINEd more than once.\n# For a single AC_DEFINE, no template is needed.\nAH_TEMPLATE(_REENTRANT,\n  [Define to force use of thread-safe errno, h_errno, and other functions])\nAH_TEMPLATE(WITH_THREAD,\n  [Define if you want to compile in rudimentary thread support])\n\nAC_MSG_CHECKING(for --with-threads)\ndnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output\nAC_ARG_WITH(threads,\n            AS_HELP_STRING([--with(out)-threads@<:@=DIRECTORY@:>@], [disable/enable thread support]))\n\n# --with-thread is deprecated, but check for it anyway\ndnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output\nAC_ARG_WITH(thread,\n            AS_HELP_STRING([--with(out)-thread@<:@=DIRECTORY@:>@], [deprecated; use --with(out)-threads]),\n            [with_threads=$with_thread])\n\nif test -z \"$with_threads\"\nthen with_threads=\"yes\"\nfi\nAC_MSG_RESULT($with_threads)\n\nAC_SUBST(THREADOBJ)\nif test \"$with_threads\" = \"no\"\nthen\n    USE_THREAD_MODULE=\"#\"\nelif test \"$ac_cv_pthread_is_default\" = yes\nthen\n    AC_DEFINE(WITH_THREAD)\n    # Defining _REENTRANT on system with POSIX threads should not hurt.\n    AC_DEFINE(_REENTRANT)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"\nelif test \"$ac_cv_kpthread\" = \"yes\"\nthen\n    CC=\"$CC -Kpthread\"\n    if test \"$ac_cv_cxx_thread\" = \"yes\"; then\n        CXX=\"$CXX -Kpthread\"\n    fi\n    AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"\nelif test \"$ac_cv_kthread\" = \"yes\"\nthen\n    CC=\"$CC -Kthread\"\n    if test \"$ac_cv_cxx_thread\" = \"yes\"; then\n        CXX=\"$CXX -Kthread\"\n    fi\n    AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"\nelif test \"$ac_cv_pthread\" = \"yes\"\nthen\n    CC=\"$CC -pthread\"\n    if test \"$ac_cv_cxx_thread\" = \"yes\"; then\n        CXX=\"$CXX -pthread\"\n    fi\n    AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"\nelse\n    if test ! -z \"$with_threads\" -a -d \"$with_threads\"\n    then LDFLAGS=\"$LDFLAGS -L$with_threads\"\n    fi\n    if test ! -z \"$withval\" -a -d \"$withval\"\n    then LDFLAGS=\"$LDFLAGS -L$withval\"\n    fi\n\n    # According to the POSIX spec, a pthreads implementation must\n    # define _POSIX_THREADS in unistd.h. Some apparently don't\n    # (e.g. gnu pth with pthread emulation)\n    AC_MSG_CHECKING(for _POSIX_THREADS in unistd.h)\n    AC_EGREP_CPP(yes,\n    [\n#include <unistd.h>\n#ifdef _POSIX_THREADS\nyes\n#endif\n    ], unistd_defines_pthreads=yes, unistd_defines_pthreads=no)\n    AC_MSG_RESULT($unistd_defines_pthreads)\n\n    AC_DEFINE(_REENTRANT)\n    # Just looking for pthread_create in libpthread is not enough:\n    # on HP/UX, pthread.h renames pthread_create to a different symbol name.\n    # So we really have to include pthread.h, and then link.\n    _libs=$LIBS\n    LIBS=\"$LIBS -lpthread\"\n    AC_MSG_CHECKING([for pthread_create in -lpthread])\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <stdio.h>\n#include <pthread.h>\n\nvoid * start_routine (void *arg) { exit (0); }]], [[\npthread_create (NULL, NULL, start_routine, NULL)]])],[\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"],[\n    LIBS=$_libs\n    AC_CHECK_FUNC(pthread_detach, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"],[\n    AC_CHECK_LIB(pthreads, pthread_create, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    LIBS=\"$LIBS -lpthreads\"\n    THREADOBJ=\"Python/thread.o\"], [\n    AC_CHECK_LIB(c_r, pthread_create, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    LIBS=\"$LIBS -lc_r\"\n    THREADOBJ=\"Python/thread.o\"], [\n    AC_CHECK_LIB(pthread, __pthread_create_system, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    LIBS=\"$LIBS -lpthread\"\n    THREADOBJ=\"Python/thread.o\"], [\n    AC_CHECK_LIB(cma, pthread_create, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    LIBS=\"$LIBS -lcma\"\n    THREADOBJ=\"Python/thread.o\"],[\n    USE_THREAD_MODULE=\"#\"])\n    ])])])])])\n\n    AC_CHECK_LIB(mpc, usconfig, [AC_DEFINE(WITH_THREAD)\n    LIBS=\"$LIBS -lmpc\"\n    THREADOBJ=\"Python/thread.o\"\n    USE_THREAD_MODULE=\"\"])\n\n    if test \"$posix_threads\" != \"yes\"; then\n      AC_CHECK_LIB(thread, thr_create, [AC_DEFINE(WITH_THREAD)\n      LIBS=\"$LIBS -lthread\"\n      THREADOBJ=\"Python/thread.o\"\n      USE_THREAD_MODULE=\"\"])\n    fi\nfi\n\nif test \"$posix_threads\" = \"yes\"; then\n      if test \"$unistd_defines_pthreads\" = \"no\"; then\n         AC_DEFINE(_POSIX_THREADS, 1,\n         [Define if you have POSIX threads,\n          and your system does not define that.])\n      fi\n\n      # Bug 662787: Using semaphores causes unexplicable hangs on Solaris 8.\n      case  $ac_sys_system/$ac_sys_release in\n      SunOS/5.6) AC_DEFINE(HAVE_PTHREAD_DESTRUCTOR, 1,\n                       [Defined for Solaris 2.6 bug in pthread header.])\n\t\t       ;;\n      SunOS/5.8) AC_DEFINE(HAVE_BROKEN_POSIX_SEMAPHORES, 1,\n\t\t       [Define if the Posix semaphores do not work on your system])\n\t\t       ;;\n      AIX/*) AC_DEFINE(HAVE_BROKEN_POSIX_SEMAPHORES, 1,\n\t\t       [Define if the Posix semaphores do not work on your system])\n\t\t       ;;\n      esac\n\n      AC_MSG_CHECKING(if PTHREAD_SCOPE_SYSTEM is supported)\n      AC_CACHE_VAL(ac_cv_pthread_system_supported,\n      [AC_RUN_IFELSE([AC_LANG_SOURCE([[\n      #include <stdio.h>\n      #include <pthread.h>\n      void *foo(void *parm) {\n        return NULL;\n      }\n      main() {\n        pthread_attr_t attr;\n        pthread_t id;\n        if (pthread_attr_init(&attr)) exit(-1);\n        if (pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM)) exit(-1);\n        if (pthread_create(&id, &attr, foo, NULL)) exit(-1);\n        exit(0);\n      }]])],\n      [ac_cv_pthread_system_supported=yes],\n      [ac_cv_pthread_system_supported=no],\n      [ac_cv_pthread_system_supported=no])\n      ])\n      AC_MSG_RESULT($ac_cv_pthread_system_supported)\n      if test \"$ac_cv_pthread_system_supported\" = \"yes\"; then\n        AC_DEFINE(PTHREAD_SYSTEM_SCHED_SUPPORTED, 1, [Defined if PTHREAD_SCOPE_SYSTEM supported.])\n      fi\n      AC_CHECK_FUNCS(pthread_sigmask,\n        [case $ac_sys_system in\n        CYGWIN*)\n          AC_DEFINE(HAVE_BROKEN_PTHREAD_SIGMASK, 1,\n            [Define if pthread_sigmask() does not work on your system.])\n            ;;\n        esac])\n      AC_CHECK_FUNCS(pthread_atfork)\nfi\n\n\n# Check for enable-ipv6\nAH_TEMPLATE(ENABLE_IPV6, [Define if --enable-ipv6 is specified])\nAC_MSG_CHECKING([if --enable-ipv6 is specified])\nAC_ARG_ENABLE(ipv6,\n[  --enable-ipv6           Enable ipv6 (with ipv4) support\n  --disable-ipv6          Disable ipv6 support],\n[ case \"$enableval\" in\n  no)\n       AC_MSG_RESULT(no)\n       ipv6=no\n       ;;\n  *)   AC_MSG_RESULT(yes)\n       AC_DEFINE(ENABLE_IPV6)\n       ipv6=yes\n       ;;\n  esac ],\n\n[\ndnl the check does not work on cross compilation case...\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ /* AF_INET6 available check */\n#include <sys/types.h>\n#include <sys/socket.h>]],\n[[int domain = AF_INET6;]])],[\n  AC_MSG_RESULT(yes)\n  ipv6=yes\n],[\n  AC_MSG_RESULT(no)\n  ipv6=no\n])\n\nif test \"$ipv6\" = \"yes\"; then\n\tAC_MSG_CHECKING(if RFC2553 API is available)\n\tAC_COMPILE_IFELSE([\n\t  AC_LANG_PROGRAM([[#include <sys/types.h>\n#include <netinet/in.h>]],\n\t\t\t  [[struct sockaddr_in6 x;\n\t\t\t    x.sin6_scope_id;]])\n\t],[\n\t  AC_MSG_RESULT(yes)\n\t  ipv6=yes\n\t],[\n\t  AC_MSG_RESULT(no, IPv6 disabled)\n\t  ipv6=no\n\t])\nfi\n\nif test \"$ipv6\" = \"yes\"; then\n\tAC_DEFINE(ENABLE_IPV6)\nfi\n])\n\nipv6type=unknown\nipv6lib=none\nipv6trylibc=no\n\nif test \"$ipv6\" = \"yes\"; then\n\tAC_MSG_CHECKING([ipv6 stack type])\n\tfor i in inria kame linux-glibc linux-inet6 solaris toshiba v6d zeta;\n\tdo\n\t\tcase $i in\n\t\tinria)\n\t\t\tdnl http://www.kame.net/\n\t\t\tAC_EGREP_CPP(yes, [\n#include <netinet/in.h>\n#ifdef IPV6_INRIA_VERSION\nyes\n#endif],\n\t\t\t\t[ipv6type=$i])\n\t\t\t;;\n\t\tkame)\n\t\t\tdnl http://www.kame.net/\n\t\t\tAC_EGREP_CPP(yes, [\n#include <netinet/in.h>\n#ifdef __KAME__\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6lib=inet6\n\t\t\t\tipv6libdir=/usr/local/v6/lib\n\t\t\t\tipv6trylibc=yes])\n\t\t\t;;\n\t\tlinux-glibc)\n\t\t\tdnl http://www.v6.linux.or.jp/\n\t\t\tAC_EGREP_CPP(yes, [\n#include <features.h>\n#if defined(__GLIBC__) && ((__GLIBC__ == 2 && __GLIBC_MINOR__ >= 1) || (__GLIBC__ > 2))\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6trylibc=yes])\n\t\t\t;;\n\t\tlinux-inet6)\n\t\t\tdnl http://www.v6.linux.or.jp/\n\t\t\tif test -d /usr/inet6; then\n\t\t\t\tipv6type=$i\n\t\t\t\tipv6lib=inet6\n\t\t\t\tipv6libdir=/usr/inet6/lib\n\t\t\t\tBASECFLAGS=\"-I/usr/inet6/include $BASECFLAGS\"\n\t\t\tfi\n\t\t\t;;\n\t\tsolaris)\n\t\t\tif test -f /etc/netconfig; then\n                          if $GREP -q tcp6 /etc/netconfig; then\n\t\t\t\tipv6type=$i\n\t\t\t\tipv6trylibc=yes\n                          fi\n                        fi\n\t\t\t;;\n\t\ttoshiba)\n\t\t\tAC_EGREP_CPP(yes, [\n#include <sys/param.h>\n#ifdef _TOSHIBA_INET6\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6lib=inet6;\n\t\t\t\tipv6libdir=/usr/local/v6/lib])\n\t\t\t;;\n\t\tv6d)\n\t\t\tAC_EGREP_CPP(yes, [\n#include </usr/local/v6/include/sys/v6config.h>\n#ifdef __V6D__\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6lib=v6;\n\t\t\t\tipv6libdir=/usr/local/v6/lib;\n\t\t\t\tBASECFLAGS=\"-I/usr/local/v6/include $BASECFLAGS\"])\n\t\t\t;;\n\t\tzeta)\n\t\t\tAC_EGREP_CPP(yes, [\n#include <sys/param.h>\n#ifdef _ZETA_MINAMI_INET6\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6lib=inet6;\n\t\t\t\tipv6libdir=/usr/local/v6/lib])\n\t\t\t;;\n\t\tesac\n\t\tif test \"$ipv6type\" != \"unknown\"; then\n\t\t\tbreak\n\t\tfi\n\tdone\n\tAC_MSG_RESULT($ipv6type)\nfi\n\nif test \"$ipv6\" = \"yes\" -a \"$ipv6lib\" != \"none\"; then\n\tif test -d $ipv6libdir -a -f $ipv6libdir/lib$ipv6lib.a; then\n\t\tLIBS=\"-L$ipv6libdir -l$ipv6lib $LIBS\"\n\t\techo \"using lib$ipv6lib\"\n\telse\n\t\tif test $ipv6trylibc = \"yes\"; then\n\t\t\techo \"using libc\"\n\t\telse\n\t\t\techo 'Fatal: no $ipv6lib library found.  cannot continue.'\n\t\t\techo \"You need to fetch lib$ipv6lib.a from appropriate\"\n\t\t\techo 'ipv6 kit and compile beforehand.'\n\t\t\texit 1\n\t\tfi\n\tfi\nfi\n\nAC_MSG_CHECKING(for CAN_RAW_FD_FRAMES)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ /* CAN_RAW_FD_FRAMES available check */\n#include <linux/can/raw.h>]],\n[[int can_raw_fd_frames = CAN_RAW_FD_FRAMES;]])],[\n  AC_DEFINE(HAVE_LINUX_CAN_RAW_FD_FRAMES, 1, [Define if compiling using Linux 3.6 or later.])\n  AC_MSG_RESULT(yes)\n],[\n  AC_MSG_RESULT(no)\n])\n\nAC_MSG_CHECKING(for OSX 10.5 SDK or later)\nAC_COMPILE_IFELSE([\n  AC_LANG_PROGRAM([[#include <Carbon/Carbon.h>]], [[FSIORefNum fRef = 0]])\n],[\n  AC_DEFINE(HAVE_OSX105_SDK, 1, [Define if compiling using MacOS X 10.5 SDK or later.])\n  AC_MSG_RESULT(yes)\n],[\n  AC_MSG_RESULT(no)\n])\n\n# Check for --with-doc-strings\nAC_MSG_CHECKING(for --with-doc-strings)\nAC_ARG_WITH(doc-strings,\n            AS_HELP_STRING([--with(out)-doc-strings], [disable/enable documentation strings]))\n\nif test -z \"$with_doc_strings\"\nthen with_doc_strings=\"yes\"\nfi\nif test \"$with_doc_strings\" != \"no\"\nthen\n    AC_DEFINE(WITH_DOC_STRINGS, 1,\n      [Define if you want documentation strings in extension modules])\nfi\nAC_MSG_RESULT($with_doc_strings)\n\n# Check if eval loop should use timestamp counter profiling\nAC_MSG_CHECKING(for --with-tsc)\nAC_ARG_WITH(tsc,\n\t    AS_HELP_STRING([--with(out)-tsc],[enable/disable timestamp counter profile]),[\nif test \"$withval\" != no\nthen\n  AC_DEFINE(WITH_TSC, 1,\n    [Define to profile with the Pentium timestamp counter])\n    AC_MSG_RESULT(yes)\nelse AC_MSG_RESULT(no)\nfi],\n[AC_MSG_RESULT(no)])\n\n# Check for Python-specific malloc support\nAC_MSG_CHECKING(for --with-pymalloc)\nAC_ARG_WITH(pymalloc,\n            AS_HELP_STRING([--with(out)-pymalloc], [disable/enable specialized mallocs]))\n\nif test -z \"$with_pymalloc\"\nthen\n    with_pymalloc=\"yes\"\nfi\nif test \"$with_pymalloc\" != \"no\"\nthen\n    AC_DEFINE(WITH_PYMALLOC, 1,\n     [Define if you want to compile in Python-specific mallocs])\n    ABIFLAGS=\"${ABIFLAGS}m\"\nfi\nAC_MSG_RESULT($with_pymalloc)\n\n# Check for Valgrind support\nAC_MSG_CHECKING([for --with-valgrind])\nAC_ARG_WITH([valgrind],\n  AS_HELP_STRING([--with-valgrind], [Enable Valgrind support]),,\n  with_valgrind=no)\nAC_MSG_RESULT([$with_valgrind])\nif test \"$with_valgrind\" != no; then\n    AC_CHECK_HEADER([valgrind/valgrind.h],\n      [AC_DEFINE([WITH_VALGRIND], 1, [Define if you want pymalloc to be disabled when running under valgrind])],\n      [AC_MSG_ERROR([Valgrind support requested but headers not available])]\n    )\n    OPT=\"-DDYNAMIC_ANNOTATIONS_ENABLED=1 $OPT\"\nfi\n\n# -I${DLINCLDIR} is added to the compile rule for importdl.o\nAC_SUBST(DLINCLDIR)\nDLINCLDIR=.\n\n# the dlopen() function means we might want to use dynload_shlib.o. some\n# platforms, such as AIX, have dlopen(), but don't want to use it.\nAC_CHECK_FUNCS(dlopen)\n\n# DYNLOADFILE specifies which dynload_*.o file we will use for dynamic\n# loading of modules.\nAC_SUBST(DYNLOADFILE)\nAC_MSG_CHECKING(DYNLOADFILE)\nif test -z \"$DYNLOADFILE\"\nthen\n\tcase $ac_sys_system/$ac_sys_release in\n\tAIX*) # Use dynload_shlib.c and dlopen() if we have it; otherwise dynload_aix.c\n\tif test \"$ac_cv_func_dlopen\" = yes\n\tthen DYNLOADFILE=\"dynload_shlib.o\"\n\telse DYNLOADFILE=\"dynload_aix.o\"\n\tfi\n\t;;\n\thp*|HP*) DYNLOADFILE=\"dynload_hpux.o\";;\n\t# Use dynload_next.c only on 10.2 and below, which don't have native dlopen()\n\tDarwin/@<:@0156@:>@\\..*) DYNLOADFILE=\"dynload_next.o\";;\n\t*)\n\t# use dynload_shlib.c and dlopen() if we have it; otherwise stub\n\t# out any dynamic loading\n\tif test \"$ac_cv_func_dlopen\" = yes\n\tthen DYNLOADFILE=\"dynload_shlib.o\"\n\telse DYNLOADFILE=\"dynload_stub.o\"\n\tfi\n\t;;\n\tesac\nfi\nAC_MSG_RESULT($DYNLOADFILE)\nif test \"$DYNLOADFILE\" != \"dynload_stub.o\"\nthen\n\tAC_DEFINE(HAVE_DYNAMIC_LOADING, 1,\n        [Defined when any dynamic module loading is enabled.])\nfi\n\n# MACHDEP_OBJS can be set to platform-specific object files needed by Python\n\nAC_SUBST(MACHDEP_OBJS)\nAC_MSG_CHECKING(MACHDEP_OBJS)\nif test -z \"$MACHDEP_OBJS\"\nthen\n\tMACHDEP_OBJS=$extra_machdep_objs\nelse\n\tMACHDEP_OBJS=\"$MACHDEP_OBJS $extra_machdep_objs\"\nfi\nif test -z \"$MACHDEP_OBJS\"; then\n  AC_MSG_RESULT([none])\nelse\n  AC_MSG_RESULT([$MACHDEP_OBJS])\nfi\n\n# checks for library functions\nAC_CHECK_FUNCS(alarm accept4 setitimer getitimer bind_textdomain_codeset chown \\\n clock confstr ctermid dup3 execv faccessat fchmod fchmodat fchown fchownat \\\n fexecve fdopendir fork fpathconf fstatat ftime ftruncate futimesat \\\n futimens futimes gai_strerror getentropy \\\n getgrouplist getgroups getlogin getloadavg getpeername getpgid getpid \\\n getpriority getresuid getresgid getpwent getspnam getspent getsid getwd \\\n if_nameindex \\\n initgroups kill killpg lchmod lchown lockf linkat lstat lutimes mmap \\\n memrchr mbrtowc mkdirat mkfifo \\\n mkfifoat mknod mknodat mktime mremap nice openat pathconf pause pipe2 plock poll \\\n posix_fallocate posix_fadvise pread \\\n pthread_init pthread_kill putenv pwrite readlink readlinkat readv realpath renameat \\\n select sem_open sem_timedwait sem_getvalue sem_unlink sendfile setegid seteuid \\\n setgid sethostname \\\n setlocale setregid setreuid setresuid setresgid setsid setpgid setpgrp setpriority setuid setvbuf \\\n sched_get_priority_max sched_setaffinity sched_setscheduler sched_setparam \\\n sched_rr_get_interval \\\n sigaction sigaltstack siginterrupt sigpending sigrelse \\\n sigtimedwait sigwait sigwaitinfo snprintf strftime strlcpy symlinkat sync \\\n sysconf tcgetpgrp tcsetpgrp tempnam timegm times tmpfile tmpnam tmpnam_r \\\n truncate uname unlinkat unsetenv utimensat utimes waitid waitpid wait3 wait4 \\\n wcscoll wcsftime wcsxfrm wmemcmp writev _getpty)\n\nAC_CHECK_DECL(dirfd,\n    AC_DEFINE(HAVE_DIRFD, 1,\n              Define if you have the 'dirfd' function or macro.), ,\n      [#include <sys/types.h>\n       #include <dirent.h>])\n\n# For some functions, having a definition is not sufficient, since\n# we want to take their address.\nAC_MSG_CHECKING(for chroot)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]], [[void *x=chroot]])],\n  [AC_DEFINE(HAVE_CHROOT, 1, Define if you have the 'chroot' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\nAC_MSG_CHECKING(for link)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]], [[void *x=link]])],\n  [AC_DEFINE(HAVE_LINK, 1, Define if you have the 'link' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\nAC_MSG_CHECKING(for symlink)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]], [[void *x=symlink]])],\n  [AC_DEFINE(HAVE_SYMLINK, 1, Define if you have the 'symlink' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\nAC_MSG_CHECKING(for fchdir)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]], [[void *x=fchdir]])],\n  [AC_DEFINE(HAVE_FCHDIR, 1, Define if you have the 'fchdir' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\nAC_MSG_CHECKING(for fsync)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]], [[void *x=fsync]])],\n  [AC_DEFINE(HAVE_FSYNC, 1, Define if you have the 'fsync' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\nAC_MSG_CHECKING(for fdatasync)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]], [[void *x=fdatasync]])],\n  [AC_DEFINE(HAVE_FDATASYNC, 1, Define if you have the 'fdatasync' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\nAC_MSG_CHECKING(for epoll)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/epoll.h>]], [[void *x=epoll_create]])],\n  [AC_DEFINE(HAVE_EPOLL, 1, Define if you have the 'epoll' functions.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\nAC_MSG_CHECKING(for epoll_create1)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/epoll.h>]], [[void *x=epoll_create1]])],\n  [AC_DEFINE(HAVE_EPOLL_CREATE1, 1, Define if you have the 'epoll_create1' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\nAC_MSG_CHECKING(for kqueue)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/event.h>\n    ]], [[int x=kqueue()]])],\n  [AC_DEFINE(HAVE_KQUEUE, 1, Define if you have the 'kqueue' functions.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\nAC_MSG_CHECKING(for prlimit)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <sys/time.h>\n#include <sys/resource.h>\n    ]], [[void *x=prlimit]])],\n  [AC_DEFINE(HAVE_PRLIMIT, 1, Define if you have the 'prlimit' functions.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\n\n# On some systems (eg. FreeBSD 5), we would find a definition of the\n# functions ctermid_r, setgroups in the library, but no prototype\n# (e.g. because we use _XOPEN_SOURCE). See whether we can take their\n# address to avoid compiler warnings and potential miscompilations\n# because of the missing prototypes.\n\nAC_MSG_CHECKING(for ctermid_r)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <stdio.h>\n]], [[void* p = ctermid_r]])],\n  [AC_DEFINE(HAVE_CTERMID_R, 1, Define if you have the 'ctermid_r' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\n\nAC_CACHE_CHECK([for flock declaration], [ac_cv_flock_decl],\n  [AC_COMPILE_IFELSE(\n    [AC_LANG_PROGRAM(\n      [#include <sys/file.h>],\n      [void* p = flock]\n    )],\n    [ac_cv_flock_decl=yes],\n    [ac_cv_flock_decl=no]\n  )\n])\nif test \"x${ac_cv_flock_decl}\" = xyes; then\n  AC_CHECK_FUNCS(flock,,\n    AC_CHECK_LIB(bsd,flock,\n      [AC_DEFINE(HAVE_FLOCK)\n       AC_DEFINE(FLOCK_NEEDS_LIBBSD, 1, Define if flock needs to be linked with bsd library.)\n    ])\n  )\nfi\n\nAC_MSG_CHECKING(for getpagesize)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <unistd.h>\n]], [[void* p = getpagesize]])],\n  [AC_DEFINE(HAVE_GETPAGESIZE, 1, Define if you have the 'getpagesize' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\n\nAC_MSG_CHECKING(for broken unsetenv)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <stdlib.h>\n]], [[int res = unsetenv(\"DUMMY\")]])],\n  [AC_MSG_RESULT(no)],\n  [AC_DEFINE(HAVE_BROKEN_UNSETENV, 1, Define if `unsetenv` does not return an int.)\n   AC_MSG_RESULT(yes)\n])\n\ndnl check for true\nAC_CHECK_PROGS(TRUE, true, /bin/true)\n\ndnl On some systems (e.g. Solaris 9), hstrerror and inet_aton are in -lresolv\ndnl On others, they are in the C library, so we to take no action\nAC_CHECK_LIB(c, inet_aton, [$ac_cv_prog_TRUE],\n  AC_CHECK_LIB(resolv, inet_aton)\n)\n\n# On Tru64, chflags seems to be present, but calling it will\n# exit Python\nAC_CACHE_CHECK([for chflags], [ac_cv_have_chflags], [dnl\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <sys/stat.h>\n#include <unistd.h>\nint main(int argc, char*argv[])\n{\n  if(chflags(argv[0], 0) != 0)\n    return 1;\n  return 0;\n}\n]])],\n[ac_cv_have_chflags=yes],\n[ac_cv_have_chflags=no],\n[ac_cv_have_chflags=cross])\n])\nif test \"$ac_cv_have_chflags\" = cross ; then\n  AC_CHECK_FUNC([chflags], [ac_cv_have_chflags=\"yes\"], [ac_cv_have_chflags=\"no\"])\nfi\nif test \"$ac_cv_have_chflags\" = yes ; then\n  AC_DEFINE(HAVE_CHFLAGS, 1, [Define to 1 if you have the 'chflags' function.])\nfi\n\nAC_CACHE_CHECK([for lchflags], [ac_cv_have_lchflags], [dnl\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <sys/stat.h>\n#include <unistd.h>\nint main(int argc, char*argv[])\n{\n  if(lchflags(argv[0], 0) != 0)\n    return 1;\n  return 0;\n}\n]])],[ac_cv_have_lchflags=yes],[ac_cv_have_lchflags=no],[ac_cv_have_lchflags=cross])\n])\nif test \"$ac_cv_have_lchflags\" = cross ; then\n  AC_CHECK_FUNC([lchflags], [ac_cv_have_lchflags=\"yes\"], [ac_cv_have_lchflags=\"no\"])\nfi\nif test \"$ac_cv_have_lchflags\" = yes ; then\n  AC_DEFINE(HAVE_LCHFLAGS, 1, [Define to 1 if you have the 'lchflags' function.])\nfi\n\ndnl Check if system zlib has *Copy() functions\ndnl\ndnl On MacOSX the linker will search for dylibs on the entire linker path\ndnl before searching for static libraries. setup.py adds -Wl,-search_paths_first\ndnl to revert to a more traditional unix behaviour and make it possible to\ndnl override the system libz with a local static library of libz. Temporarily\ndnl add that flag to our CFLAGS as well to ensure that we check the version\ndnl of libz that will be used by setup.py.\ndnl The -L/usr/local/lib is needed as wel to get the same compilation\ndnl environment as setup.py (and leaving it out can cause configure to use the\ndnl wrong version of the library)\ncase $ac_sys_system/$ac_sys_release in\nDarwin/*)\n\t_CUR_CFLAGS=\"${CFLAGS}\"\n\t_CUR_LDFLAGS=\"${LDFLAGS}\"\n\tCFLAGS=\"${CFLAGS} -Wl,-search_paths_first\"\n\tLDFLAGS=\"${LDFLAGS} -Wl,-search_paths_first -L/usr/local/lib\"\n\t;;\nesac\n\nAC_CHECK_LIB(z, inflateCopy, AC_DEFINE(HAVE_ZLIB_COPY, 1, [Define if the zlib library has inflateCopy]))\n\ncase $ac_sys_system/$ac_sys_release in\nDarwin/*)\n\tCFLAGS=\"${_CUR_CFLAGS}\"\n\tLDFLAGS=\"${_CUR_LDFLAGS}\"\n\t;;\nesac\n\nAC_MSG_CHECKING(for hstrerror)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <netdb.h>\n]], [[void* p = hstrerror; hstrerror(0)]])],\n  [AC_DEFINE(HAVE_HSTRERROR, 1, Define if you have the 'hstrerror' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\n\nAC_MSG_CHECKING(for inet_aton)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n]], [[void* p = inet_aton;inet_aton(0,0)]])],\n  [AC_DEFINE(HAVE_INET_ATON, 1, Define if you have the 'inet_aton' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\n\nAC_MSG_CHECKING(for inet_pton)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n]], [[void* p = inet_pton]])],\n  [AC_DEFINE(HAVE_INET_PTON, 1, Define if you have the 'inet_pton' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\n\n# On some systems, setgroups is in unistd.h, on others, in grp.h\nAC_MSG_CHECKING(for setgroups)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <unistd.h>\n#ifdef HAVE_GRP_H\n#include <grp.h>\n#endif\n]], [[void* p = setgroups]])],\n  [AC_DEFINE(HAVE_SETGROUPS, 1, Define if you have the 'setgroups' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)\n])\n\n# check for openpty and forkpty\n\nAC_CHECK_FUNCS(openpty,,\n   AC_CHECK_LIB(util,openpty,\n     [AC_DEFINE(HAVE_OPENPTY) LIBS=\"$LIBS -lutil\"],\n     AC_CHECK_LIB(bsd,openpty, [AC_DEFINE(HAVE_OPENPTY) LIBS=\"$LIBS -lbsd\"])\n   )\n)\nAC_CHECK_FUNCS(forkpty,,\n   AC_CHECK_LIB(util,forkpty,\n     [AC_DEFINE(HAVE_FORKPTY) LIBS=\"$LIBS -lutil\"],\n     AC_CHECK_LIB(bsd,forkpty, [AC_DEFINE(HAVE_FORKPTY) LIBS=\"$LIBS -lbsd\"])\n   )\n)\n\n# Stuff for expat.\nAC_CHECK_FUNCS(memmove)\n\n# check for long file support functions\nAC_CHECK_FUNCS(fseek64 fseeko fstatvfs ftell64 ftello statvfs)\n\nAC_REPLACE_FUNCS(dup2 strdup)\nAC_CHECK_FUNCS(getpgrp,\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]], [[getpgrp(0);]])],\n    [AC_DEFINE(GETPGRP_HAVE_ARG, 1, [Define if getpgrp() must be called as getpgrp(0).])],\n    [])\n)\nAC_CHECK_FUNCS(setpgrp,\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]], [[setpgrp(0,0);]])],\n    [AC_DEFINE(SETPGRP_HAVE_ARG, 1, [Define if setpgrp() must be called as setpgrp(0, 0).])],\n    [])\n)\nAC_CHECK_FUNCS(gettimeofday,\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/time.h>]],\n  \t\t\t\t     [[gettimeofday((struct timeval*)0,(struct timezone*)0);]])],\n    [],\n    [AC_DEFINE(GETTIMEOFDAY_NO_TZ, 1,\n      [Define if gettimeofday() does not have second (timezone) argument\n       This is the case on Motorola V4 (R40V4.2)])\n    ])\n)\n\nAC_CHECK_FUNCS(clock_gettime, [], [\n    AC_CHECK_LIB(rt, clock_gettime, [\n        LIBS=\"$LIBS -lrt\"\n        AC_DEFINE(HAVE_CLOCK_GETTIME, 1)\n        AC_DEFINE(TIMEMODULE_LIB, [rt],\n                  [Library needed by timemodule.c: librt may be needed for clock_gettime()])\n    ])\n])\n\nAC_CHECK_FUNCS(clock_getres, [], [\n    AC_CHECK_LIB(rt, clock_getres, [\n        AC_DEFINE(HAVE_CLOCK_GETRES, 1)\n    ])\n])\n\nAC_MSG_CHECKING(for major, minor, and makedev)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#if defined(MAJOR_IN_MKDEV)\n#include <sys/mkdev.h>\n#elif defined(MAJOR_IN_SYSMACROS)\n#include <sys/sysmacros.h>\n#else\n#include <sys/types.h>\n#endif\n]], [[\n  makedev(major(0),minor(0));\n]])],[\n  AC_DEFINE(HAVE_DEVICE_MACROS, 1,\n\t    [Define to 1 if you have the device macros.])\n  AC_MSG_RESULT(yes)\n],[\n  AC_MSG_RESULT(no)\n])\n\n# On OSF/1 V5.1, getaddrinfo is available, but a define\n# for [no]getaddrinfo in netdb.h.\nAC_MSG_CHECKING(for getaddrinfo)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <stdio.h>\n]], [[getaddrinfo(NULL, NULL, NULL, NULL);]])],\n[have_getaddrinfo=yes],\n[have_getaddrinfo=no])\nAC_MSG_RESULT($have_getaddrinfo)\nif test $have_getaddrinfo = yes\nthen\n  AC_MSG_CHECKING(getaddrinfo bug)\n  AC_CACHE_VAL(ac_cv_buggy_getaddrinfo,\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[[\n#include <stdio.h>\n#include <sys/types.h>\n#include <netdb.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nint main()\n{\n  int passive, gaierr, inet4 = 0, inet6 = 0;\n  struct addrinfo hints, *ai, *aitop;\n  char straddr[INET6_ADDRSTRLEN], strport[16];\n\n  for (passive = 0; passive <= 1; passive++) {\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_family = AF_UNSPEC;\n    hints.ai_flags = passive ? AI_PASSIVE : 0;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n    if ((gaierr = getaddrinfo(NULL, \"54321\", &hints, &aitop)) != 0) {\n      (void)gai_strerror(gaierr);\n      goto bad;\n    }\n    for (ai = aitop; ai; ai = ai->ai_next) {\n      if (ai->ai_addr == NULL ||\n          ai->ai_addrlen == 0 ||\n          getnameinfo(ai->ai_addr, ai->ai_addrlen,\n                      straddr, sizeof(straddr), strport, sizeof(strport),\n                      NI_NUMERICHOST|NI_NUMERICSERV) != 0) {\n        goto bad;\n      }\n      switch (ai->ai_family) {\n      case AF_INET:\n        if (strcmp(strport, \"54321\") != 0) {\n          goto bad;\n        }\n        if (passive) {\n          if (strcmp(straddr, \"0.0.0.0\") != 0) {\n            goto bad;\n          }\n        } else {\n          if (strcmp(straddr, \"127.0.0.1\") != 0) {\n            goto bad;\n          }\n        }\n        inet4++;\n        break;\n      case AF_INET6:\n        if (strcmp(strport, \"54321\") != 0) {\n          goto bad;\n        }\n        if (passive) {\n          if (strcmp(straddr, \"::\") != 0) {\n            goto bad;\n          }\n        } else {\n          if (strcmp(straddr, \"::1\") != 0) {\n            goto bad;\n          }\n        }\n        inet6++;\n        break;\n      case AF_UNSPEC:\n        goto bad;\n        break;\n      default:\n        /* another family support? */\n        break;\n      }\n    }\n    freeaddrinfo(aitop);\n    aitop = NULL;\n  }\n\n  if (!(inet4 == 0 || inet4 == 2))\n    goto bad;\n  if (!(inet6 == 0 || inet6 == 2))\n    goto bad;\n\n  if (aitop)\n    freeaddrinfo(aitop);\n  return 0;\n\n bad:\n  if (aitop)\n    freeaddrinfo(aitop);\n  return 1;\n}\n]]])],\n[ac_cv_buggy_getaddrinfo=no],\n[ac_cv_buggy_getaddrinfo=yes],\n[\nif test \"${enable_ipv6+set}\" = set; then\n  ac_cv_buggy_getaddrinfo=\"no -- configured with --(en|dis)able-ipv6\"\nelse\n  ac_cv_buggy_getaddrinfo=yes\nfi]))\nfi\n\nAC_MSG_RESULT($ac_cv_buggy_getaddrinfo)\n\nif test $have_getaddrinfo = no || test \"$ac_cv_buggy_getaddrinfo\" = yes\nthen\n\tif test $ipv6 = yes\n\tthen\n\t\techo 'Fatal: You must get working getaddrinfo() function.'\n\t\techo '       or you can specify \"--disable-ipv6\"'.\n\t\texit 1\n\tfi\nelse\n\tAC_DEFINE(HAVE_GETADDRINFO, 1, [Define if you have the getaddrinfo function.])\nfi\n\nAC_CHECK_FUNCS(getnameinfo)\n\n# checks for structures\nAC_HEADER_TIME\nAC_STRUCT_TM\nAC_STRUCT_TIMEZONE\nAC_CHECK_MEMBERS([struct stat.st_rdev])\nAC_CHECK_MEMBERS([struct stat.st_blksize])\nAC_CHECK_MEMBERS([struct stat.st_flags])\nAC_CHECK_MEMBERS([struct stat.st_gen])\nAC_CHECK_MEMBERS([struct stat.st_birthtime])\nAC_CHECK_MEMBERS([struct stat.st_blocks])\n\nAC_MSG_CHECKING(for time.h that defines altzone)\nAC_CACHE_VAL(ac_cv_header_time_altzone,[\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <time.h>]], [[return altzone;]])],\n    [ac_cv_header_time_altzone=yes],\n    [ac_cv_header_time_altzone=no])\n  ])\nAC_MSG_RESULT($ac_cv_header_time_altzone)\nif test $ac_cv_header_time_altzone = yes; then\n  AC_DEFINE(HAVE_ALTZONE, 1, [Define this if your time.h defines altzone.])\nfi\n\nwas_it_defined=no\nAC_MSG_CHECKING(whether sys/select.h and sys/time.h may both be included)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/select.h>\n#include <sys/time.h>\n]], [[;]])],[\n  AC_DEFINE(SYS_SELECT_WITH_SYS_TIME, 1,\n  [Define if  you can safely include both <sys/select.h> and <sys/time.h>\n   (which you can't on SCO ODT 3.0).])\n  was_it_defined=yes\n],[])\nAC_MSG_RESULT($was_it_defined)\n\nAC_MSG_CHECKING(for addrinfo)\nAC_CACHE_VAL(ac_cv_struct_addrinfo,\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <netdb.h>]], [[struct addrinfo a]])],\n  [ac_cv_struct_addrinfo=yes],\n  [ac_cv_struct_addrinfo=no]))\nAC_MSG_RESULT($ac_cv_struct_addrinfo)\nif test $ac_cv_struct_addrinfo = yes; then\n\tAC_DEFINE(HAVE_ADDRINFO, 1, [struct addrinfo (netdb.h)])\nfi\n\nAC_MSG_CHECKING(for sockaddr_storage)\nAC_CACHE_VAL(ac_cv_struct_sockaddr_storage,\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#\t\tinclude <sys/types.h>\n#\t\tinclude <sys/socket.h>]], [[struct sockaddr_storage s]])],\n  [ac_cv_struct_sockaddr_storage=yes],\n  [ac_cv_struct_sockaddr_storage=no]))\nAC_MSG_RESULT($ac_cv_struct_sockaddr_storage)\nif test $ac_cv_struct_sockaddr_storage = yes; then\n\tAC_DEFINE(HAVE_SOCKADDR_STORAGE, 1, [struct sockaddr_storage (sys/socket.h)])\nfi\n\n# checks for compiler characteristics\n\nAC_C_CHAR_UNSIGNED\nAC_C_CONST\n\nworks=no\nAC_MSG_CHECKING(for working volatile)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[volatile int x; x = 0;]])],\n  [works=yes],\n  [AC_DEFINE(volatile, , [Define to empty if the keyword does not work.])]\n)\nAC_MSG_RESULT($works)\n\nworks=no\nAC_MSG_CHECKING(for working signed char)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[signed char c;]])],\n  [works=yes],\n  [AC_DEFINE(signed, , [Define to empty if the keyword does not work.])]\n)\nAC_MSG_RESULT($works)\n\nhave_prototypes=no\nAC_MSG_CHECKING(for prototypes)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[int foo(int x) { return 0; }]], [[return foo(10);]])],\n  [AC_DEFINE(HAVE_PROTOTYPES, 1,\n     [Define if your compiler supports function prototype])\n   have_prototypes=yes],\n  []\n)\nAC_MSG_RESULT($have_prototypes)\n\nworks=no\nAC_MSG_CHECKING(for variable length prototypes and stdarg.h)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <stdarg.h>\nint foo(int x, ...) {\n\tva_list va;\n\tva_start(va, x);\n\tva_arg(va, int);\n\tva_arg(va, char *);\n\tva_arg(va, double);\n\treturn 0;\n}\n]], [[return foo(10, \"\", 3.14);]])],[\n  AC_DEFINE(HAVE_STDARG_PROTOTYPES, 1,\n   [Define if your compiler supports variable length function prototypes\n   (e.g. void fprintf(FILE *, char *, ...);) *and* <stdarg.h>])\n  works=yes\n],[])\nAC_MSG_RESULT($works)\n\n# check for socketpair\nAC_MSG_CHECKING(for socketpair)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/socket.h>\n]], [[void *x=socketpair]])],\n  [AC_DEFINE(HAVE_SOCKETPAIR, 1, [Define if you have the 'socketpair' function.])\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)]\n)\n\n# check if sockaddr has sa_len member\nAC_MSG_CHECKING(if sockaddr has sa_len member)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n#include <sys/socket.h>]], [[struct sockaddr x;\nx.sa_len = 0;]])],\n  [AC_MSG_RESULT(yes)\n   AC_DEFINE(HAVE_SOCKADDR_SA_LEN, 1, [Define if sockaddr has sa_len member])],\n  [AC_MSG_RESULT(no)]\n)\n\nva_list_is_array=no\nAC_MSG_CHECKING(whether va_list is an array)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#ifdef HAVE_STDARG_PROTOTYPES\n#include <stdarg.h>\n#else\n#include <varargs.h>\n#endif\n]], [[va_list list1, list2; list1 = list2;]])],[],[\n AC_DEFINE(VA_LIST_IS_ARRAY, 1, [Define if a va_list is an array of some kind])\n va_list_is_array=yes\n])\nAC_MSG_RESULT($va_list_is_array)\n\n# sigh -- gethostbyname_r is a mess; it can have 3, 5 or 6 arguments :-(\nAH_TEMPLATE(HAVE_GETHOSTBYNAME_R,\n  [Define this if you have some version of gethostbyname_r()])\n\nAC_CHECK_FUNC(gethostbyname_r, [\n  AC_DEFINE(HAVE_GETHOSTBYNAME_R)\n  AC_MSG_CHECKING([gethostbyname_r with 6 args])\n  OLD_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS $MY_CPPFLAGS $MY_THREAD_CPPFLAGS $MY_CFLAGS\"\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#   include <netdb.h>\n  ]], [[\n    char *name;\n    struct hostent *he, *res;\n    char buffer[2048];\n    int buflen = 2048;\n    int h_errnop;\n\n    (void) gethostbyname_r(name, he, buffer, buflen, &res, &h_errnop)\n  ]])],[\n    AC_DEFINE(HAVE_GETHOSTBYNAME_R)\n    AC_DEFINE(HAVE_GETHOSTBYNAME_R_6_ARG, 1,\n    [Define this if you have the 6-arg version of gethostbyname_r().])\n    AC_MSG_RESULT(yes)\n  ],[\n    AC_MSG_RESULT(no)\n    AC_MSG_CHECKING([gethostbyname_r with 5 args])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#       include <netdb.h>\n      ]], [[\n        char *name;\n        struct hostent *he;\n        char buffer[2048];\n        int buflen = 2048;\n        int h_errnop;\n\n        (void) gethostbyname_r(name, he, buffer, buflen, &h_errnop)\n      ]])],\n      [\n        AC_DEFINE(HAVE_GETHOSTBYNAME_R)\n        AC_DEFINE(HAVE_GETHOSTBYNAME_R_5_ARG, 1,\n          [Define this if you have the 5-arg version of gethostbyname_r().])\n        AC_MSG_RESULT(yes)\n      ], [\n        AC_MSG_RESULT(no)\n        AC_MSG_CHECKING([gethostbyname_r with 3 args])\n        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#           include <netdb.h>\n          ]], [[\n            char *name;\n            struct hostent *he;\n            struct hostent_data data;\n\n            (void) gethostbyname_r(name, he, &data);\n          ]])],\n          [\n            AC_DEFINE(HAVE_GETHOSTBYNAME_R)\n            AC_DEFINE(HAVE_GETHOSTBYNAME_R_3_ARG, 1,\n              [Define this if you have the 3-arg version of gethostbyname_r().])\n            AC_MSG_RESULT(yes)\n          ], [\n           AC_MSG_RESULT(no)\n        ])\n    ])\n  ])\n  CFLAGS=$OLD_CFLAGS\n], [\n  AC_CHECK_FUNCS(gethostbyname)\n])\nAC_SUBST(HAVE_GETHOSTBYNAME_R_6_ARG)\nAC_SUBST(HAVE_GETHOSTBYNAME_R_5_ARG)\nAC_SUBST(HAVE_GETHOSTBYNAME_R_3_ARG)\nAC_SUBST(HAVE_GETHOSTBYNAME_R)\nAC_SUBST(HAVE_GETHOSTBYNAME)\n\n# checks for system services\n# (none yet)\n\n# Linux requires this for correct f.p. operations\nAC_CHECK_FUNC(__fpu_control,\n  [],\n  [AC_CHECK_LIB(ieee, __fpu_control)\n])\n\n# Check for --with-fpectl\nAC_MSG_CHECKING(for --with-fpectl)\nAC_ARG_WITH(fpectl,\n            AS_HELP_STRING([--with-fpectl], [enable SIGFPE catching]),\n[\nif test \"$withval\" != no\nthen\n  AC_DEFINE(WANT_SIGFPE_HANDLER, 1,\n  [Define if you want SIGFPE handled (see Include/pyfpe.h).])\n  AC_MSG_RESULT(yes)\nelse AC_MSG_RESULT(no)\nfi],\n[AC_MSG_RESULT(no)])\n\n# check for --with-libm=...\nAC_SUBST(LIBM)\ncase $ac_sys_system in\nDarwin) ;;\n*) LIBM=-lm\nesac\nAC_MSG_CHECKING(for --with-libm=STRING)\nAC_ARG_WITH(libm,\n            AS_HELP_STRING([--with-libm=STRING], [math library]),\n[\nif test \"$withval\" = no\nthen LIBM=\n     AC_MSG_RESULT(force LIBM empty)\nelif test \"$withval\" != yes\nthen LIBM=$withval\n     AC_MSG_RESULT(set LIBM=\"$withval\")\nelse AC_MSG_ERROR([proper usage is --with-libm=STRING])\nfi],\n[AC_MSG_RESULT(default LIBM=\"$LIBM\")])\n\n# check for --with-libc=...\nAC_SUBST(LIBC)\nAC_MSG_CHECKING(for --with-libc=STRING)\nAC_ARG_WITH(libc,\n            AS_HELP_STRING([--with-libc=STRING], [C library]),\n[\nif test \"$withval\" = no\nthen LIBC=\n     AC_MSG_RESULT(force LIBC empty)\nelif test \"$withval\" != yes\nthen LIBC=$withval\n     AC_MSG_RESULT(set LIBC=\"$withval\")\nelse AC_MSG_ERROR([proper usage is --with-libc=STRING])\nfi],\n[AC_MSG_RESULT(default LIBC=\"$LIBC\")])\n\n# **************************************\n# * Check for gcc x64 inline assembler *\n# **************************************\n\nAC_MSG_CHECKING(for x64 gcc inline assembler)\nAC_LINK_IFELSE(   [AC_LANG_PROGRAM([[]], [[\n  __asm__ __volatile__ (\"movq %rcx, %rax\");\n]])],[have_gcc_asm_for_x64=yes],[have_gcc_asm_for_x64=no])\nAC_MSG_RESULT($have_gcc_asm_for_x64)\nif test \"$have_gcc_asm_for_x64\" = yes\nthen\n    AC_DEFINE(HAVE_GCC_ASM_FOR_X64, 1,\n    [Define if we can use x64 gcc inline assembler])\nfi\n\n# **************************************************\n# * Check for various properties of floating point *\n# **************************************************\n\nAC_MSG_CHECKING(whether C doubles are little-endian IEEE 754 binary64)\nAC_CACHE_VAL(ac_cv_little_endian_double, [\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <string.h>\nint main() {\n    double x = 9006104071832581.0;\n    if (memcmp(&x, \"\\x05\\x04\\x03\\x02\\x01\\xff\\x3f\\x43\", 8) == 0)\n        return 0;\n    else\n        return 1;\n}\n]])],\n[ac_cv_little_endian_double=yes],\n[ac_cv_little_endian_double=no],\n[ac_cv_little_endian_double=no])])\nAC_MSG_RESULT($ac_cv_little_endian_double)\nif test \"$ac_cv_little_endian_double\" = yes\nthen\n  AC_DEFINE(DOUBLE_IS_LITTLE_ENDIAN_IEEE754, 1,\n  [Define if C doubles are 64-bit IEEE 754 binary format, stored\n   with the least significant byte first])\nfi\n\nAC_MSG_CHECKING(whether C doubles are big-endian IEEE 754 binary64)\nAC_CACHE_VAL(ac_cv_big_endian_double, [\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <string.h>\nint main() {\n    double x = 9006104071832581.0;\n    if (memcmp(&x, \"\\x43\\x3f\\xff\\x01\\x02\\x03\\x04\\x05\", 8) == 0)\n        return 0;\n    else\n        return 1;\n}\n]])],\n[ac_cv_big_endian_double=yes],\n[ac_cv_big_endian_double=no],\n[ac_cv_big_endian_double=no])])\nAC_MSG_RESULT($ac_cv_big_endian_double)\nif test \"$ac_cv_big_endian_double\" = yes\nthen\n  AC_DEFINE(DOUBLE_IS_BIG_ENDIAN_IEEE754, 1,\n  [Define if C doubles are 64-bit IEEE 754 binary format, stored\n   with the most significant byte first])\nfi\n\n# Some ARM platforms use a mixed-endian representation for doubles.\n# While Python doesn't currently have full support for these platforms\n# (see e.g., issue 1762561), we can at least make sure that float <-> string\n# conversions work.\nAC_MSG_CHECKING(whether C doubles are ARM mixed-endian IEEE 754 binary64)\nAC_CACHE_VAL(ac_cv_mixed_endian_double, [\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <string.h>\nint main() {\n    double x = 9006104071832581.0;\n    if (memcmp(&x, \"\\x01\\xff\\x3f\\x43\\x05\\x04\\x03\\x02\", 8) == 0)\n        return 0;\n    else\n        return 1;\n}\n]])],\n[ac_cv_mixed_endian_double=yes],\n[ac_cv_mixed_endian_double=no],\n[ac_cv_mixed_endian_double=no])])\nAC_MSG_RESULT($ac_cv_mixed_endian_double)\nif test \"$ac_cv_mixed_endian_double\" = yes\nthen\n  AC_DEFINE(DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754, 1,\n  [Define if C doubles are 64-bit IEEE 754 binary format, stored\n   in ARM mixed-endian order (byte order 45670123)])\nfi\n\n# The short float repr introduced in Python 3.1 requires the\n# correctly-rounded string <-> double conversion functions from\n# Python/dtoa.c, which in turn require that the FPU uses 53-bit\n# rounding; this is a problem on x86, where the x87 FPU has a default\n# rounding precision of 64 bits.  For gcc/x86, we can fix this by\n# using inline assembler to get and set the x87 FPU control word.\n\n# This inline assembler syntax may also work for suncc and icc,\n# so we try it on all platforms.\n\nAC_MSG_CHECKING(whether we can use gcc inline assembler to get and set x87 control word)\nAC_LINK_IFELSE(   [AC_LANG_PROGRAM([[]], [[\n  unsigned short cw;\n  __asm__ __volatile__ (\"fnstcw %0\" : \"=m\" (cw));\n  __asm__ __volatile__ (\"fldcw %0\" : : \"m\" (cw));\n]])],[have_gcc_asm_for_x87=yes],[have_gcc_asm_for_x87=no])\nAC_MSG_RESULT($have_gcc_asm_for_x87)\nif test \"$have_gcc_asm_for_x87\" = yes\nthen\n    AC_DEFINE(HAVE_GCC_ASM_FOR_X87, 1,\n    [Define if we can use gcc inline assembler to get and set x87 control word])\nfi\n\nAC_MSG_CHECKING(whether we can use gcc inline assembler to get and set mc68881 fpcr)\nAC_LINK_IFELSE(   [AC_LANG_PROGRAM([[]], [[\n  unsigned int fpcr;\n  __asm__ __volatile__ (\"fmove.l %%fpcr,%0\" : \"=g\" (fpcr));\n  __asm__ __volatile__ (\"fmove.l %0,%%fpcr\" : : \"g\" (fpcr));\n]])],[have_gcc_asm_for_mc68881=yes],[have_gcc_asm_for_mc68881=no])\nAC_MSG_RESULT($have_gcc_asm_for_mc68881)\nif test \"$have_gcc_asm_for_mc68881\" = yes\nthen\n    AC_DEFINE(HAVE_GCC_ASM_FOR_MC68881, 1,\n    [Define if we can use gcc inline assembler to get and set mc68881 fpcr])\nfi\n\n# Detect whether system arithmetic is subject to x87-style double\n# rounding issues.  The result of this test has little meaning on non\n# IEEE 754 platforms.  On IEEE 754, test should return 1 if rounding\n# mode is round-to-nearest and double rounding issues are present, and\n# 0 otherwise.  See http://bugs.python.org/issue2937 for more info.\nAC_MSG_CHECKING(for x87-style double rounding)\n# $BASECFLAGS may affect the result\nac_save_cc=\"$CC\"\nCC=\"$CC $BASECFLAGS\"\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <stdlib.h>\n#include <math.h>\nint main() {\n    volatile double x, y, z;\n    /* 1./(1-2**-53) -> 1+2**-52 (correct), 1.0 (double rounding) */\n    x = 0.99999999999999989; /* 1-2**-53 */\n    y = 1./x;\n    if (y != 1.)\n        exit(0);\n    /* 1e16+2.99999 -> 1e16+2. (correct), 1e16+4. (double rounding) */\n    x = 1e16;\n    y = 2.99999;\n    z = x + y;\n    if (z != 1e16+4.)\n        exit(0);\n    /* both tests show evidence of double rounding */\n    exit(1);\n}\n]])],\n[ac_cv_x87_double_rounding=no],\n[ac_cv_x87_double_rounding=yes],\n[ac_cv_x87_double_rounding=no])\nCC=\"$ac_save_cc\"\nAC_MSG_RESULT($ac_cv_x87_double_rounding)\nif test \"$ac_cv_x87_double_rounding\" = yes\nthen\n  AC_DEFINE(X87_DOUBLE_ROUNDING, 1,\n  [Define if arithmetic is subject to x87-style double rounding issue])\nfi\n\n# ************************************\n# * Check for mathematical functions *\n# ************************************\n\nLIBS_SAVE=$LIBS\nLIBS=\"$LIBS $LIBM\"\n\nAC_CHECK_FUNCS([acosh asinh atanh copysign erf erfc expm1 finite gamma])\nAC_CHECK_FUNCS([hypot lgamma log1p log2 round tgamma])\nAC_CHECK_DECLS([isinf, isnan, isfinite], [], [], [[#include <math.h>]])\n\n# On FreeBSD 6.2, it appears that tanh(-0.) returns 0. instead of\n# -0. on some architectures.\nAC_MSG_CHECKING(whether tanh preserves the sign of zero)\nAC_CACHE_VAL(ac_cv_tanh_preserves_zero_sign, [\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <math.h>\n#include <stdlib.h>\nint main() {\n    /* return 0 if either negative zeros don't exist\n       on this platform or if negative zeros exist\n       and tanh(-0.) == -0. */\n  if (atan2(0., -1.) == atan2(-0., -1.) ||\n      atan2(tanh(-0.), -1.) == atan2(-0., -1.)) exit(0);\n  else exit(1);\n}\n]])],\n[ac_cv_tanh_preserves_zero_sign=yes],\n[ac_cv_tanh_preserves_zero_sign=no],\n[ac_cv_tanh_preserves_zero_sign=no])])\nAC_MSG_RESULT($ac_cv_tanh_preserves_zero_sign)\nif test \"$ac_cv_tanh_preserves_zero_sign\" = yes\nthen\n  AC_DEFINE(TANH_PRESERVES_ZERO_SIGN, 1,\n  [Define if tanh(-0.) is -0., or if platform doesn't have signed zeros])\nfi\n\nif test \"$ac_cv_func_log1p\" = yes\nthen\n    # On some versions of AIX, log1p(-0.) returns 0. instead of\n    # -0.  See issue #9920.\n    AC_MSG_CHECKING(whether log1p drops the sign of negative zero)\n    AC_CACHE_VAL(ac_cv_log1p_drops_zero_sign, [\n    AC_RUN_IFELSE([AC_LANG_SOURCE([[\n    #include <math.h>\n    #include <stdlib.h>\n    int main() {\n        /* Fail if the signs of log1p(-0.) and -0. can be\n\t   distinguished. */\n        if (atan2(log1p(-0.), -1.) == atan2(-0., -1.))\n            return 0;\n        else\n            return 1;\n    }\n    ]])],\n    [ac_cv_log1p_drops_zero_sign=no],\n    [ac_cv_log1p_drops_zero_sign=yes],\n    [ac_cv_log1p_drops_zero_sign=no])])\n    AC_MSG_RESULT($ac_cv_log1p_drops_zero_sign)\nfi\nif test \"$ac_cv_log1p_drops_zero_sign\" = yes\nthen\n  AC_DEFINE(LOG1P_DROPS_ZERO_SIGN, 1,\n  [Define if log1p(-0.) is 0. rather than -0.])\nfi\n\nLIBS=$LIBS_SAVE\n\n# For multiprocessing module, check that sem_open\n# actually works.  For FreeBSD versions <= 7.2,\n# the kernel module that provides POSIX semaphores\n# isn't loaded by default, so an attempt to call\n# sem_open results in a 'Signal 12' error.\nAC_MSG_CHECKING(whether POSIX semaphores are enabled)\nAC_CACHE_VAL(ac_cv_posix_semaphores_enabled,\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <semaphore.h>\n#include <sys/stat.h>\n\nint main(void) {\n  sem_t *a = sem_open(\"/autoconf\", O_CREAT, S_IRUSR|S_IWUSR, 0);\n  if (a == SEM_FAILED) {\n    perror(\"sem_open\");\n    return 1;\n  }\n  sem_close(a);\n  sem_unlink(\"/autoconf\");\n  return 0;\n}\n]])],\n[ac_cv_posix_semaphores_enabled=yes],\n[ac_cv_posix_semaphores_enabled=no],\n[ac_cv_posix_semaphores_enabled=yes])\n)\nAC_MSG_RESULT($ac_cv_posix_semaphores_enabled)\nif test $ac_cv_posix_semaphores_enabled = no\nthen\n  AC_DEFINE(POSIX_SEMAPHORES_NOT_ENABLED, 1,\n            [Define if POSIX semaphores aren't enabled on your system])\nfi\n\n# Multiprocessing check for broken sem_getvalue\nAC_MSG_CHECKING(for broken sem_getvalue)\nAC_CACHE_VAL(ac_cv_broken_sem_getvalue,\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <semaphore.h>\n#include <sys/stat.h>\n\nint main(void){\n  sem_t *a = sem_open(\"/autocftw\", O_CREAT, S_IRUSR|S_IWUSR, 0);\n  int count;\n  int res;\n  if(a==SEM_FAILED){\n    perror(\"sem_open\");\n    return 1;\n\n  }\n  res = sem_getvalue(a, &count);\n  sem_close(a);\n  sem_unlink(\"/autocftw\");\n  return res==-1 ? 1 : 0;\n}\n]])],\n[ac_cv_broken_sem_getvalue=no],\n[ac_cv_broken_sem_getvalue=yes],\n[ac_cv_broken_sem_getvalue=yes])\n)\nAC_MSG_RESULT($ac_cv_broken_sem_getvalue)\nif test $ac_cv_broken_sem_getvalue = yes\nthen\n  AC_DEFINE(HAVE_BROKEN_SEM_GETVALUE, 1,\n  [define to 1 if your sem_getvalue is broken.])\nfi\n\n# determine what size digit to use for Python's longs\nAC_MSG_CHECKING([digit size for Python's longs])\nAC_ARG_ENABLE(big-digits,\nAS_HELP_STRING([--enable-big-digits@<:@=BITS@:>@],[use big digits for Python longs [[BITS=30]]]),\n[case $enable_big_digits in\nyes)\n  enable_big_digits=30 ;;\nno)\n  enable_big_digits=15 ;;\n[15|30])\n  ;;\n*)\n  AC_MSG_ERROR([bad value $enable_big_digits for --enable-big-digits; value should be 15 or 30]) ;;\nesac\nAC_MSG_RESULT($enable_big_digits)\nAC_DEFINE_UNQUOTED(PYLONG_BITS_IN_DIGIT, $enable_big_digits, [Define as the preferred size in bits of long digits])\n],\n[AC_MSG_RESULT(no value specified)])\n\n# check for wchar.h\nAC_CHECK_HEADER(wchar.h, [\n  AC_DEFINE(HAVE_WCHAR_H, 1,\n  [Define if the compiler provides a wchar.h header file.])\n  wchar_h=\"yes\"\n],\nwchar_h=\"no\"\n)\n\n# determine wchar_t size\nif test \"$wchar_h\" = yes\nthen\n  AC_CHECK_SIZEOF(wchar_t, 4, [#include <wchar.h>])\nfi\n\nAC_MSG_CHECKING(for UCS-4 tcl)\nhave_ucs4_tcl=no\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <tcl.h>\n#if TCL_UTF_MAX != 6\n# error \"NOT UCS4_TCL\"\n#endif]], [[]])],[\n  AC_DEFINE(HAVE_UCS4_TCL, 1, [Define this if you have tcl and TCL_UTF_MAX==6])\n  have_ucs4_tcl=yes\n],[])\nAC_MSG_RESULT($have_ucs4_tcl)\n\n# check whether wchar_t is signed or not\nif test \"$wchar_h\" = yes\nthen\n  # check whether wchar_t is signed or not\n  AC_MSG_CHECKING(whether wchar_t is signed)\n  AC_CACHE_VAL(ac_cv_wchar_t_signed, [\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[\n  #include <wchar.h>\n  int main()\n  {\n\t/* Success: exit code 0 */\n        exit((((wchar_t) -1) < ((wchar_t) 0)) ? 0 : 1);\n  }\n  ]])],\n  [ac_cv_wchar_t_signed=yes],\n  [ac_cv_wchar_t_signed=no],\n  [ac_cv_wchar_t_signed=yes])])\n  AC_MSG_RESULT($ac_cv_wchar_t_signed)\nfi\n\n# wchar_t is only usable if it maps to an unsigned type\nif test \"$ac_cv_sizeof_wchar_t\" -ge 2 \\\n          -a \"$ac_cv_wchar_t_signed\" = \"no\"\nthen\n  HAVE_USABLE_WCHAR_T=\"yes\"\n  AC_DEFINE(HAVE_USABLE_WCHAR_T, 1,\n  [Define if you have a useable wchar_t type defined in wchar.h; useable\n   means wchar_t must be an unsigned type with at least 16 bits. (see\n   Include/unicodeobject.h).])\nelse\n  HAVE_USABLE_WCHAR_T=\"no usable wchar_t found\"\nfi\nAC_MSG_RESULT($HAVE_USABLE_WCHAR_T)\n\n# check for endianness\nAC_C_BIGENDIAN\n\n# ABI version string for Python extension modules.  This appears between the\n# periods in shared library file names, e.g. foo.<SOABI>.so.  It is calculated\n# from the following attributes which affect the ABI of this Python build (in\n# this order):\n#\n# * The Python implementation (always 'cpython-' for us)\n# * The major and minor version numbers\n# * --with-pydebug (adds a 'd')\n# * --with-pymalloc (adds a 'm')\n# * --with-wide-unicode (adds a 'u')\n#\n# Thus for example, Python 3.2 built with wide unicode, pydebug, and pymalloc,\n# would get a shared library ABI version tag of 'cpython-32dmu' and shared\n# libraries would be named 'foo.cpython-32dmu.so'.\nAC_SUBST(SOABI)\nAC_MSG_CHECKING(ABIFLAGS)\nAC_MSG_RESULT($ABIFLAGS)\nAC_MSG_CHECKING(SOABI)\nSOABI='cpython-'`echo $VERSION | tr -d .`${ABIFLAGS}${PLATFORM_TRIPLET:+-$PLATFORM_TRIPLET}\nAC_MSG_RESULT($SOABI)\n\nAC_SUBST(EXT_SUFFIX)\ncase $ac_sys_system in\n    Linux*|GNU*|Darwin)\n\tEXT_SUFFIX=.${SOABI}${SHLIB_SUFFIX};;\n    *)\n\tEXT_SUFFIX=${SHLIB_SUFFIX};;\nesac\n\nAC_MSG_CHECKING(LDVERSION)\nLDVERSION='$(VERSION)$(ABIFLAGS)'\nAC_MSG_RESULT($LDVERSION)\n\ndnl define LIBPL after ABIFLAGS and LDVERSION is defined.\nAC_SUBST(PY_ENABLE_SHARED)\nLIBPL='$(prefix)'\"/lib/python${VERSION}/config-${LDVERSION}\"\nAC_SUBST(LIBPL)\n\n# Check whether right shifting a negative integer extends the sign bit\n# or fills with zeros (like the Cray J90, according to Tim Peters).\nAC_MSG_CHECKING(whether right shift extends the sign bit)\nAC_CACHE_VAL(ac_cv_rshift_extends_sign, [\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\nint main()\n{\n\texit(((-1)>>3 == -1) ? 0 : 1);\n}\n]])],\n[ac_cv_rshift_extends_sign=yes],\n[ac_cv_rshift_extends_sign=no],\n[ac_cv_rshift_extends_sign=yes])])\nAC_MSG_RESULT($ac_cv_rshift_extends_sign)\nif test \"$ac_cv_rshift_extends_sign\" = no\nthen\n  AC_DEFINE(SIGNED_RIGHT_SHIFT_ZERO_FILLS, 1,\n  [Define if i>>j for signed int i does not extend the sign bit\n   when i < 0])\nfi\n\n# check for getc_unlocked and related locking functions\nAC_MSG_CHECKING(for getc_unlocked() and friends)\nAC_CACHE_VAL(ac_cv_have_getc_unlocked, [\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <stdio.h>]], [[\n\tFILE *f = fopen(\"/dev/null\", \"r\");\n\tflockfile(f);\n\tgetc_unlocked(f);\n\tfunlockfile(f);\n]])],[ac_cv_have_getc_unlocked=yes],[ac_cv_have_getc_unlocked=no])])\nAC_MSG_RESULT($ac_cv_have_getc_unlocked)\nif test \"$ac_cv_have_getc_unlocked\" = yes\nthen\n  AC_DEFINE(HAVE_GETC_UNLOCKED, 1,\n  [Define this if you have flockfile(), getc_unlocked(), and funlockfile()])\nfi\n\n# check where readline lives\n# save the value of LIBS so we don't actually link Python with readline\nLIBS_no_readline=$LIBS\n\n# On some systems we need to link readline to a termcap compatible\n# library.  NOTE: Keep the precedence of listed libraries synchronised\n# with setup.py.\npy_cv_lib_readline=no\nAC_MSG_CHECKING([how to link readline libs])\nfor py_libtermcap in \"\" tinfo ncursesw ncurses curses termcap; do\n  if test -z \"$py_libtermcap\"; then\n    READLINE_LIBS=\"-lreadline\"\n  else\n    READLINE_LIBS=\"-lreadline -l$py_libtermcap\"\n  fi\n  LIBS=\"$READLINE_LIBS $LIBS_no_readline\"\n  AC_LINK_IFELSE(\n    [AC_LANG_CALL([],[readline])],\n    [py_cv_lib_readline=yes])\n  if test $py_cv_lib_readline = yes; then\n    break\n  fi\ndone\n# Uncomment this line if you want to use READINE_LIBS in Makefile or scripts\n#AC_SUBST([READLINE_LIBS])\nif test $py_cv_lib_readline = no; then\n  AC_MSG_RESULT([none])\nelse\n  AC_MSG_RESULT([$READLINE_LIBS])\n  AC_DEFINE(HAVE_LIBREADLINE, 1,\n    [Define if you have the readline library (-lreadline).])\nfi\n\n# check for readline 2.1\nAC_CHECK_LIB(readline, rl_callback_handler_install,\n\tAC_DEFINE(HAVE_RL_CALLBACK, 1,\n        [Define if you have readline 2.1]), ,$READLINE_LIBS)\n\n# check for readline 2.2\nAC_PREPROC_IFELSE([AC_LANG_SOURCE([[#include <readline/readline.h>]])],\n  [have_readline=yes],\n  [have_readline=no]\n)\nif test $have_readline = yes\nthen\n  AC_EGREP_HEADER([extern int rl_completion_append_character;],\n  [readline/readline.h],\n  AC_DEFINE(HAVE_RL_COMPLETION_APPEND_CHARACTER, 1,\n  [Define if you have readline 2.2]), )\n  AC_EGREP_HEADER([extern int rl_completion_suppress_append;],\n  [readline/readline.h],\n  AC_DEFINE(HAVE_RL_COMPLETION_SUPPRESS_APPEND, 1,\n  [Define if you have rl_completion_suppress_append]), )\nfi\n\n# check for readline 4.0\nAC_CHECK_LIB(readline, rl_pre_input_hook,\n\tAC_DEFINE(HAVE_RL_PRE_INPUT_HOOK, 1,\n        [Define if you have readline 4.0]), ,$READLINE_LIBS)\n\n# also in 4.0\nAC_CHECK_LIB(readline, rl_completion_display_matches_hook,\n\tAC_DEFINE(HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK, 1,\n        [Define if you have readline 4.0]), ,$READLINE_LIBS)\n\n# also in 4.0, but not in editline\nAC_CHECK_LIB(readline, rl_resize_terminal,\n\tAC_DEFINE(HAVE_RL_RESIZE_TERMINAL, 1,\n        [Define if you have readline 4.0]), ,$READLINE_LIBS)\n\n# check for readline 4.2\nAC_CHECK_LIB(readline, rl_completion_matches,\n\tAC_DEFINE(HAVE_RL_COMPLETION_MATCHES, 1,\n        [Define if you have readline 4.2]), ,$READLINE_LIBS)\n\n# also in readline 4.2\nAC_PREPROC_IFELSE([AC_LANG_SOURCE([[#include <readline/readline.h>]])],\n  [have_readline=yes],\n  [have_readline=no]\n)\nif test $have_readline = yes\nthen\n  AC_EGREP_HEADER([extern int rl_catch_signals;],\n  [readline/readline.h],\n  AC_DEFINE(HAVE_RL_CATCH_SIGNAL, 1,\n  [Define if you can turn off readline's signal handling.]), )\nfi\n\nAC_CHECK_LIB(readline, append_history,\n\tAC_DEFINE(HAVE_RL_APPEND_HISTORY, 1,\n        [Define if readline supports append_history]), ,$READLINE_LIBS)\n\n# End of readline checks: restore LIBS\nLIBS=$LIBS_no_readline\n\nAC_MSG_CHECKING(for broken nice())\nAC_CACHE_VAL(ac_cv_broken_nice, [\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\nint main()\n{\n\tint val1 = nice(1);\n\tif (val1 != -1 && val1 == nice(2))\n\t\texit(0);\n\texit(1);\n}\n]])],\n[ac_cv_broken_nice=yes],\n[ac_cv_broken_nice=no],\n[ac_cv_broken_nice=no])])\nAC_MSG_RESULT($ac_cv_broken_nice)\nif test \"$ac_cv_broken_nice\" = yes\nthen\n  AC_DEFINE(HAVE_BROKEN_NICE, 1,\n  [Define if nice() returns success/failure instead of the new priority.])\nfi\n\nAC_MSG_CHECKING(for broken poll())\nAC_CACHE_VAL(ac_cv_broken_poll,\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <poll.h>\n\nint main()\n{\n    struct pollfd poll_struct = { 42, POLLIN|POLLPRI|POLLOUT, 0 };\n    int poll_test;\n\n    close (42);\n\n    poll_test = poll(&poll_struct, 1, 0);\n    if (poll_test < 0)\n        return 0;\n    else if (poll_test == 0 && poll_struct.revents != POLLNVAL)\n        return 0;\n    else\n        return 1;\n}\n]])],\n[ac_cv_broken_poll=yes],\n[ac_cv_broken_poll=no],\n[ac_cv_broken_poll=no]))\nAC_MSG_RESULT($ac_cv_broken_poll)\nif test \"$ac_cv_broken_poll\" = yes\nthen\n  AC_DEFINE(HAVE_BROKEN_POLL, 1,\n      [Define if poll() sets errno on invalid file descriptors.])\nfi\n\n# Before we can test tzset, we need to check if struct tm has a tm_zone\n# (which is not required by ISO C or UNIX spec) and/or if we support\n# tzname[]\nAC_STRUCT_TIMEZONE\n\n# check tzset(3) exists and works like we expect it to\nAC_MSG_CHECKING(for working tzset())\nAC_CACHE_VAL(ac_cv_working_tzset, [\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\n#if HAVE_TZNAME\nextern char *tzname[];\n#endif\n\nint main()\n{\n\t/* Note that we need to ensure that not only does tzset(3)\n\t   do 'something' with localtime, but it works as documented\n\t   in the library reference and as expected by the test suite.\n\t   This includes making sure that tzname is set properly if\n\t   tm->tm_zone does not exist since it is the alternative way\n\t   of getting timezone info.\n\n\t   Red Hat 6.2 doesn't understand the southern hemisphere\n\t   after New Year's Day.\n\t*/\n\n\ttime_t groundhogday = 1044144000; /* GMT-based */\n\ttime_t midyear = groundhogday + (365 * 24 * 3600 / 2);\n\n\tputenv(\"TZ=UTC+0\");\n\ttzset();\n\tif (localtime(&groundhogday)->tm_hour != 0)\n\t    exit(1);\n#if HAVE_TZNAME\n\t/* For UTC, tzname[1] is sometimes \"\", sometimes \"   \" */\n\tif (strcmp(tzname[0], \"UTC\") ||\n\t\t(tzname[1][0] != 0 && tzname[1][0] != ' '))\n\t    exit(1);\n#endif\n\n\tputenv(\"TZ=EST+5EDT,M4.1.0,M10.5.0\");\n\ttzset();\n\tif (localtime(&groundhogday)->tm_hour != 19)\n\t    exit(1);\n#if HAVE_TZNAME\n\tif (strcmp(tzname[0], \"EST\") || strcmp(tzname[1], \"EDT\"))\n\t    exit(1);\n#endif\n\n\tputenv(\"TZ=AEST-10AEDT-11,M10.5.0,M3.5.0\");\n\ttzset();\n\tif (localtime(&groundhogday)->tm_hour != 11)\n\t    exit(1);\n#if HAVE_TZNAME\n\tif (strcmp(tzname[0], \"AEST\") || strcmp(tzname[1], \"AEDT\"))\n\t    exit(1);\n#endif\n\n#if HAVE_STRUCT_TM_TM_ZONE\n\tif (strcmp(localtime(&groundhogday)->tm_zone, \"AEDT\"))\n\t    exit(1);\n\tif (strcmp(localtime(&midyear)->tm_zone, \"AEST\"))\n\t    exit(1);\n#endif\n\n\texit(0);\n}\n]])],\n[ac_cv_working_tzset=yes],\n[ac_cv_working_tzset=no],\n[ac_cv_working_tzset=no])])\nAC_MSG_RESULT($ac_cv_working_tzset)\nif test \"$ac_cv_working_tzset\" = yes\nthen\n  AC_DEFINE(HAVE_WORKING_TZSET, 1,\n  [Define if tzset() actually switches the local timezone in a meaningful way.])\nfi\n\n# Look for subsecond timestamps in struct stat\nAC_MSG_CHECKING(for tv_nsec in struct stat)\nAC_CACHE_VAL(ac_cv_stat_tv_nsec,\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/stat.h>]], [[\nstruct stat st;\nst.st_mtim.tv_nsec = 1;\n]])],\n[ac_cv_stat_tv_nsec=yes],\n[ac_cv_stat_tv_nsec=no]))\nAC_MSG_RESULT($ac_cv_stat_tv_nsec)\nif test \"$ac_cv_stat_tv_nsec\" = yes\nthen\n  AC_DEFINE(HAVE_STAT_TV_NSEC, 1,\n  [Define if you have struct stat.st_mtim.tv_nsec])\nfi\n\n# Look for BSD style subsecond timestamps in struct stat\nAC_MSG_CHECKING(for tv_nsec2 in struct stat)\nAC_CACHE_VAL(ac_cv_stat_tv_nsec2,\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/stat.h>]], [[\nstruct stat st;\nst.st_mtimespec.tv_nsec = 1;\n]])],\n[ac_cv_stat_tv_nsec2=yes],\n[ac_cv_stat_tv_nsec2=no]))\nAC_MSG_RESULT($ac_cv_stat_tv_nsec2)\nif test \"$ac_cv_stat_tv_nsec2\" = yes\nthen\n  AC_DEFINE(HAVE_STAT_TV_NSEC2, 1,\n  [Define if you have struct stat.st_mtimensec])\nfi\n\n# first curses header check\nac_save_cppflags=\"$CPPFLAGS\"\nCPPFLAGS=\"$CPPFLAGS -I/usr/include/ncursesw\"\n\nAC_CHECK_HEADERS(curses.h ncurses.h)\n\n# On Solaris, term.h requires curses.h\nAC_CHECK_HEADERS(term.h,,,[\n#ifdef HAVE_CURSES_H\n#include <curses.h>\n#endif\n])\n\n# On HP/UX 11.0, mvwdelch is a block with a return statement\nAC_MSG_CHECKING(whether mvwdelch is an expression)\nAC_CACHE_VAL(ac_cv_mvwdelch_is_expression,\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[\n  int rtn;\n  rtn = mvwdelch(0,0,0);\n]])],\n[ac_cv_mvwdelch_is_expression=yes],\n[ac_cv_mvwdelch_is_expression=no]))\nAC_MSG_RESULT($ac_cv_mvwdelch_is_expression)\n\nif test \"$ac_cv_mvwdelch_is_expression\" = yes\nthen\n  AC_DEFINE(MVWDELCH_IS_EXPRESSION, 1,\n  [Define if mvwdelch in curses.h is an expression.])\nfi\n\nAC_MSG_CHECKING(whether WINDOW has _flags)\nAC_CACHE_VAL(ac_cv_window_has_flags,\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[\n  WINDOW *w;\n  w->_flags = 0;\n]])],\n[ac_cv_window_has_flags=yes],\n[ac_cv_window_has_flags=no]))\nAC_MSG_RESULT($ac_cv_window_has_flags)\n\n\nif test \"$ac_cv_window_has_flags\" = yes\nthen\n  AC_DEFINE(WINDOW_HAS_FLAGS, 1,\n  [Define if WINDOW in curses.h offers a field _flags.])\nfi\n\nAC_MSG_CHECKING(for is_term_resized)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[void *x=is_term_resized]])],\n  [AC_DEFINE(HAVE_CURSES_IS_TERM_RESIZED, 1, Define if you have the 'is_term_resized' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING(for resize_term)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[void *x=resize_term]])],\n  [AC_DEFINE(HAVE_CURSES_RESIZE_TERM, 1, Define if you have the 'resize_term' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING(for resizeterm)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[void *x=resizeterm]])],\n  [AC_DEFINE(HAVE_CURSES_RESIZETERM, 1, Define if you have the 'resizeterm' function.)\n   AC_MSG_RESULT(yes)],\n  [AC_MSG_RESULT(no)]\n)\n# last curses configure check\nCPPFLAGS=$ac_save_cppflags\n\nAC_MSG_NOTICE([checking for device files])\n\ndnl NOTE: Inform user how to proceed with files when cross compiling.\nif test \"x$cross_compiling\" = xyes; then\n  if test \"${ac_cv_file__dev_ptmx+set}\" != set; then\n    AC_MSG_CHECKING([for /dev/ptmx])\n    AC_MSG_RESULT([not set])\n    AC_MSG_ERROR([set ac_cv_file__dev_ptmx to yes/no in your CONFIG_SITE file when cross compiling])\n  fi\n  if test \"${ac_cv_file__dev_ptc+set}\" != set; then\n    AC_MSG_CHECKING([for /dev/ptc])\n    AC_MSG_RESULT([not set])\n    AC_MSG_ERROR([set ac_cv_file__dev_ptc to yes/no in your CONFIG_SITE file when cross compiling])\n  fi\nfi\n\nAC_CHECK_FILE(/dev/ptmx, [], [])\nif test \"x$ac_cv_file__dev_ptmx\" = xyes; then\n  AC_DEFINE(HAVE_DEV_PTMX, 1,\n  [Define to 1 if you have the /dev/ptmx device file.])\nfi\nAC_CHECK_FILE(/dev/ptc, [], [])\nif test \"x$ac_cv_file__dev_ptc\" = xyes; then\n  AC_DEFINE(HAVE_DEV_PTC, 1,\n  [Define to 1 if you have the /dev/ptc device file.])\nfi\n\nif test \"$have_long_long\" = yes\nthen\n  AC_MSG_CHECKING(for %lld and %llu printf() format support)\n  AC_CACHE_VAL(ac_cv_have_long_long_format,\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[[\n  #include <stdio.h>\n  #include <stddef.h>\n  #include <string.h>\n\n  #ifdef HAVE_SYS_TYPES_H\n  #include <sys/types.h>\n  #endif\n\n  int main()\n  {\n      char buffer[256];\n\n      if (sprintf(buffer, \"%lld\", (long long)123) < 0)\n          return 1;\n      if (strcmp(buffer, \"123\"))\n          return 1;\n\n      if (sprintf(buffer, \"%lld\", (long long)-123) < 0)\n          return 1;\n      if (strcmp(buffer, \"-123\"))\n          return 1;\n\n      if (sprintf(buffer, \"%llu\", (unsigned long long)123) < 0)\n          return 1;\n      if (strcmp(buffer, \"123\"))\n          return 1;\n\n      return 0;\n  }\n  ]]])],\n  [ac_cv_have_long_long_format=yes],\n  [ac_cv_have_long_long_format=no],\n  [ac_cv_have_long_long_format=\"cross -- assuming no\"\n   if test x$GCC = xyes; then\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -Wformat\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n        #include <stdio.h>\n        #include <stddef.h>\n      ]], [[\n      char *buffer;\n      sprintf(buffer, \"%lld\", (long long)123);\n      sprintf(buffer, \"%lld\", (long long)-123);\n      sprintf(buffer, \"%llu\", (unsigned long long)123);\n      ]])],\n      ac_cv_have_long_long_format=yes\n    )\n    CFLAGS=$save_CFLAGS\n   fi])\n  )\n  AC_MSG_RESULT($ac_cv_have_long_long_format)\nfi\n\nif test \"$ac_cv_have_long_long_format\" = yes\nthen\n  AC_DEFINE(PY_FORMAT_LONG_LONG, \"ll\",\n  [Define to printf format modifier for long long type])\nfi\n\nif test $ac_sys_system = Darwin\nthen\n\tLIBS=\"$LIBS -framework CoreFoundation\"\nfi\n\nAC_CACHE_CHECK([for %zd printf() format support], ac_cv_have_size_t_format, [dnl\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n\n#ifdef HAVE_SSIZE_T\ntypedef ssize_t Py_ssize_t;\n#elif SIZEOF_VOID_P == SIZEOF_LONG\ntypedef long Py_ssize_t;\n#else\ntypedef int Py_ssize_t;\n#endif\n\nint main()\n{\n    char buffer[256];\n\n    if(sprintf(buffer, \"%zd\", (size_t)123) < 0)\n       \treturn 1;\n\n    if (strcmp(buffer, \"123\"))\n\treturn 1;\n\n    if (sprintf(buffer, \"%zd\", (Py_ssize_t)-123) < 0)\n       \treturn 1;\n\n    if (strcmp(buffer, \"-123\"))\n\treturn 1;\n\n    return 0;\n}\n]])],\n  [ac_cv_have_size_t_format=yes],\n  [ac_cv_have_size_t_format=no],\n  [ac_cv_have_size_t_format=\"cross -- assuming yes\"\n])])\nif test \"$ac_cv_have_size_t_format\" != no ; then\n  AC_DEFINE(PY_FORMAT_SIZE_T, \"z\",\n  [Define to printf format modifier for Py_ssize_t])\nfi\n\nAC_CHECK_TYPE(socklen_t,,\n  AC_DEFINE(socklen_t,int,\n            [Define to `int' if <sys/socket.h> does not define.]),[\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n])\n\nAC_MSG_CHECKING(for broken mbstowcs)\nAC_CACHE_VAL(ac_cv_broken_mbstowcs,\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <stdio.h>\n#include<stdlib.h>\nint main() {\n    size_t len = -1;\n    const char *str = \"text\";\n    len = mbstowcs(NULL, str, 0);\n    return (len != 4);\n}\n]])],\n[ac_cv_broken_mbstowcs=no],\n[ac_cv_broken_mbstowcs=yes],\n[ac_cv_broken_mbstowcs=no]))\nAC_MSG_RESULT($ac_cv_broken_mbstowcs)\nif test \"$ac_cv_broken_mbstowcs\" = yes\nthen\n  AC_DEFINE(HAVE_BROKEN_MBSTOWCS, 1,\n  [Define if mbstowcs(NULL, \"text\", 0) does not return the number of\n   wide chars that would be converted.])\nfi\n\n# Check for --with-computed-gotos\nAC_MSG_CHECKING(for --with-computed-gotos)\nAC_ARG_WITH(computed-gotos,\n            AS_HELP_STRING([--with(out)-computed-gotos],\n                           [Use computed gotos in evaluation loop (enabled by default on supported compilers)]),\n[\nif test \"$withval\" = yes\nthen\n  AC_DEFINE(USE_COMPUTED_GOTOS, 1,\n  [Define if you want to use computed gotos in ceval.c.])\n  AC_MSG_RESULT(yes)\nfi\nif test \"$withval\" = no\nthen\n  AC_DEFINE(USE_COMPUTED_GOTOS, 0,\n  [Define if you want to use computed gotos in ceval.c.])\n  AC_MSG_RESULT(no)\nfi\n],\n[AC_MSG_RESULT(no value specified)])\n\nAC_MSG_CHECKING(whether $CC supports computed gotos)\nAC_CACHE_VAL(ac_cv_computed_gotos,\nAC_RUN_IFELSE([AC_LANG_SOURCE([[[\nint main(int argc, char **argv)\n{\n    static void *targets[1] = { &&LABEL1 };\n    goto LABEL2;\nLABEL1:\n    return 0;\nLABEL2:\n    goto *targets[0];\n    return 1;\n}\n]]])],\n[ac_cv_computed_gotos=yes],\n[ac_cv_computed_gotos=no],\n[if test \"${with_computed_gotos+set}\" = set; then\n   ac_cv_computed_gotos=\"$with_computed_gotos -- configured --with(out)-computed-gotos\"\n else\n   ac_cv_computed_gotos=no\n fi]))\nAC_MSG_RESULT($ac_cv_computed_gotos)\ncase \"$ac_cv_computed_gotos\" in yes*)\n  AC_DEFINE(HAVE_COMPUTED_GOTOS, 1,\n  [Define if the C compiler supports computed gotos.])\nesac\n\ncase $ac_sys_system in\nAIX*)\n  AC_DEFINE(HAVE_BROKEN_PIPE_BUF, 1, [Define if the system reports an invalid PIPE_BUF value.]) ;;\nesac\n\n\nAC_SUBST(THREADHEADERS)\n\nfor h in `(cd $srcdir;echo Python/thread_*.h)`\ndo\n  THREADHEADERS=\"$THREADHEADERS \\$(srcdir)/$h\"\ndone\n\nAC_SUBST(SRCDIRS)\nSRCDIRS=\"Parser Grammar Objects Python Modules Mac Programs\"\nAC_MSG_CHECKING(for build directories)\nfor dir in $SRCDIRS; do\n    if test ! -d $dir; then\n        mkdir $dir\n    fi\ndone\nAC_MSG_RESULT(done)\n\n# Availability of -O2:\nAC_MSG_CHECKING(for -O2)\nsaved_cflags=\"$CFLAGS\"\nCFLAGS=\"-O2\"\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[\n]])],[have_O2=yes],[have_O2=no])\nAC_MSG_RESULT($have_O2)\nCFLAGS=\"$saved_cflags\"\n\n# _FORTIFY_SOURCE wrappers for memmove and bcopy are incorrect:\n# http://sourceware.org/ml/libc-alpha/2010-12/msg00009.html\nAC_MSG_CHECKING(for glibc _FORTIFY_SOURCE/memmove bug)\nsaved_cflags=\"$CFLAGS\"\nCFLAGS=\"-O2 -D_FORTIFY_SOURCE=2\"\nif test \"$have_O2\" = no; then\n    CFLAGS=\"\"\nfi\nAC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid foo(void *p, void *q) { memmove(p, q, 19); }\nint main() {\n  char a[32] = \"123456789000000000\";\n  foo(&a[9], a);\n  if (strcmp(a, \"123456789123456789000000000\") != 0)\n    return 1;\n  foo(a, &a[9]);\n  if (strcmp(a, \"123456789000000000\") != 0)\n    return 1;\n  return 0;\n}\n]])],\n[have_glibc_memmove_bug=no],\n[have_glibc_memmove_bug=yes],\n[have_glibc_memmove_bug=undefined])\nCFLAGS=\"$saved_cflags\"\nAC_MSG_RESULT($have_glibc_memmove_bug)\nif test \"$have_glibc_memmove_bug\" = yes; then\n    AC_DEFINE(HAVE_GLIBC_MEMMOVE_BUG, 1,\n    [Define if glibc has incorrect _FORTIFY_SOURCE wrappers\n     for memmove and bcopy.])\nfi\n\nif test \"$have_gcc_asm_for_x87\" = yes; then\n    # Some versions of gcc miscompile inline asm:\n    # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=46491\n    # http://gcc.gnu.org/ml/gcc/2010-11/msg00366.html\n    case $CC in\n        *gcc*)\n            AC_MSG_CHECKING(for gcc ipa-pure-const bug)\n            saved_cflags=\"$CFLAGS\"\n            CFLAGS=\"-O2\"\n            AC_RUN_IFELSE([AC_LANG_SOURCE([[\n            __attribute__((noinline)) int\n            foo(int *p) {\n              int r;\n              asm ( \"movl \\$6, (%1)\\n\\t\"\n                    \"xorl %0, %0\\n\\t\"\n                    : \"=r\" (r) : \"r\" (p) : \"memory\"\n              );\n              return r;\n            }\n            int main() {\n              int p = 8;\n              if ((foo(&p) ? : p) != 6)\n                return 1;\n              return 0;\n            }\n            ]])],\n            [have_ipa_pure_const_bug=no],\n            [have_ipa_pure_const_bug=yes],\n            [have_ipa_pure_const_bug=undefined])\n            CFLAGS=\"$saved_cflags\"\n            AC_MSG_RESULT($have_ipa_pure_const_bug)\n            if test \"$have_ipa_pure_const_bug\" = yes; then\n                AC_DEFINE(HAVE_IPA_PURE_CONST_BUG, 1,\n                          [Define if gcc has the ipa-pure-const bug.])\n            fi\n        ;;\n    esac\nfi\n\n# Check for stdatomic.h\nAC_MSG_CHECKING(for stdatomic.h)\nAC_LINK_IFELSE(\n[\n  AC_LANG_SOURCE([[\n    #include <stdatomic.h>\n    atomic_int value = ATOMIC_VAR_INIT(1);\n    _Atomic void *py_atomic_address = (void*) &value;\n    int main() {\n      int loaded_value = atomic_load(&value);\n      return 0;\n    }\n  ]])\n],[have_stdatomic_h=yes],[have_stdatomic_h=no])\n\nAC_MSG_RESULT($have_stdatomic_h)\n\nif test \"$have_stdatomic_h\" = yes; then\n    AC_DEFINE(HAVE_STD_ATOMIC, 1,\n              [Has stdatomic.h, atomic_int and _Atomic void* types work])\nfi\n\n# Check for GCC >= 4.7 __atomic builtins\nAC_MSG_CHECKING(for GCC >= 4.7 __atomic builtins)\nAC_LINK_IFELSE(\n[\n  AC_LANG_SOURCE([[\n    volatile int val = 1;\n    int main() {\n      __atomic_load_n(&val, __ATOMIC_SEQ_CST);\n      return 0;\n    }\n  ]])\n],[have_builtin_atomic=yes],[have_builtin_atomic=no])\n\nAC_MSG_RESULT($have_builtin_atomic)\n\nif test \"$have_builtin_atomic\" = yes; then\n    AC_DEFINE(HAVE_BUILTIN_ATOMIC, 1, [Has builtin atomics])\nfi\n\n# ensurepip option\nAC_MSG_CHECKING(for ensurepip)\nAC_ARG_WITH(ensurepip,\n    [AS_HELP_STRING([--with(out)-ensurepip=@<:@=upgrade@:>@],\n        [\"install\" or \"upgrade\" using bundled pip])],\n    [],\n    [with_ensurepip=upgrade])\nAS_CASE($with_ensurepip,\n    [yes|upgrade],[ENSUREPIP=upgrade],\n    [install],[ENSUREPIP=install],\n    [no],[ENSUREPIP=no],\n    [AC_MSG_ERROR([--with-ensurepip=upgrade|install|no])])\nAC_MSG_RESULT($ENSUREPIP)\nAC_SUBST(ENSUREPIP)\n\n# check if the dirent structure of a d_type field and DT_UNKNOWN is defined\nAC_MSG_CHECKING(if the dirent structure of a d_type field)\nAC_LINK_IFELSE(\n[\n  AC_LANG_SOURCE([[\n    #include <dirent.h>\n\n    int main() {\n      struct dirent entry;\n      return entry.d_type == DT_UNKNOWN;\n    }\n  ]])\n],[have_dirent_d_type=yes],[have_dirent_d_type=no])\nAC_MSG_RESULT($have_dirent_d_type)\n\nif test \"$have_dirent_d_type\" = yes; then\n    AC_DEFINE(HAVE_DIRENT_D_TYPE, 1,\n              [Define to 1 if the dirent structure has a d_type field])\nfi\n\n# check if the Linux getrandom() syscall is available\nAC_MSG_CHECKING(for the Linux getrandom() syscall)\nAC_LINK_IFELSE(\n[\n  AC_LANG_SOURCE([[\n    #include <unistd.h>\n    #include <sys/syscall.h>\n    #include <linux/random.h>\n\n    int main() {\n        char buffer[1];\n        const size_t buflen = sizeof(buffer);\n        const int flags = GRND_NONBLOCK;\n        /* ignore the result, Python checks for ENOSYS and EAGAIN at runtime */\n        (void)syscall(SYS_getrandom, buffer, buflen, flags);\n        return 0;\n    }\n  ]])\n],[have_getrandom_syscall=yes],[have_getrandom_syscall=no])\nAC_MSG_RESULT($have_getrandom_syscall)\n\nif test \"$have_getrandom_syscall\" = yes; then\n    AC_DEFINE(HAVE_GETRANDOM_SYSCALL, 1,\n              [Define to 1 if the Linux getrandom() syscall is available])\nfi\n\n# check if the getrandom() function is available\n# the test was written for the Solaris function of <sys/random.h>\nAC_MSG_CHECKING(for the getrandom() function)\nAC_LINK_IFELSE(\n[\n  AC_LANG_SOURCE([[\n    #include <sys/random.h>\n\n    int main() {\n        char buffer[1];\n        const size_t buflen = sizeof(buffer);\n        const int flags = 0;\n        /* ignore the result, Python checks for ENOSYS at runtime */\n        (void)getrandom(buffer, buflen, flags);\n        return 0;\n    }\n  ]])\n],[have_getrandom=yes],[have_getrandom=no])\nAC_MSG_RESULT($have_getrandom)\n\nif test \"$have_getrandom\" = yes; then\n    AC_DEFINE(HAVE_GETRANDOM, 1,\n              [Define to 1 if the getrandom() function is available])\nfi\n\n# generate output files\nAC_CONFIG_FILES(Makefile.pre Modules/Setup.config Misc/python.pc Misc/python-config.sh)\nAC_CONFIG_FILES([Modules/ld_so_aix], [chmod +x Modules/ld_so_aix])\nAC_OUTPUT\n\necho \"creating Modules/Setup\" >&AS_MESSAGE_FD\nif test ! -f Modules/Setup\nthen\n\tcp $srcdir/Modules/Setup.dist Modules/Setup\nfi\n\necho \"creating Modules/Setup.local\" >&AS_MESSAGE_FD\nif test ! -f Modules/Setup.local\nthen\n\techo \"# Edit this file for local setup changes\" >Modules/Setup.local\nfi\n\necho \"creating Makefile\" >&AS_MESSAGE_FD\n$SHELL $srcdir/Modules/makesetup -c $srcdir/Modules/config.c.in \\\n\t\t\t-s Modules Modules/Setup.config \\\n\t\t\tModules/Setup.local Modules/Setup\nmv config.c Modules\n\nif test \"$Py_OPT\" = 'false' -a \"$Py_DEBUG\" != 'true'; then\n    echo \"\" >&AS_MESSAGE_FD\n    echo \"\" >&AS_MESSAGE_FD\n    echo \"If you want a release build with all stable optimizations active (PGO, etc),\"\n    echo \"please run ./configure --enable-optimizations\" >&AS_MESSAGE_FD\n    echo \"\" >&AS_MESSAGE_FD\n    echo \"\" >&AS_MESSAGE_FD\nfi\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/test_sys.py": "import unittest, test.support\nfrom test.support.script_helper import assert_python_ok, assert_python_failure\nimport sys, io, os\nimport struct\nimport subprocess\nimport textwrap\nimport warnings\nimport operator\nimport codecs\nimport gc\nimport sysconfig\nimport platform\n\n# count the number of test runs, used to create unique\n# strings to intern in test_intern()\nnumruns = 0\n\ntry:\n    import threading\nexcept ImportError:\n    threading = None\n\nclass SysModuleTest(unittest.TestCase):\n\n    def setUp(self):\n        self.orig_stdout = sys.stdout\n        self.orig_stderr = sys.stderr\n        self.orig_displayhook = sys.displayhook\n\n    def tearDown(self):\n        sys.stdout = self.orig_stdout\n        sys.stderr = self.orig_stderr\n        sys.displayhook = self.orig_displayhook\n        test.support.reap_children()\n\n    def test_original_displayhook(self):\n        import builtins\n        out = io.StringIO()\n        sys.stdout = out\n\n        dh = sys.__displayhook__\n\n        self.assertRaises(TypeError, dh)\n        if hasattr(builtins, \"_\"):\n            del builtins._\n\n        dh(None)\n        self.assertEqual(out.getvalue(), \"\")\n        self.assertTrue(not hasattr(builtins, \"_\"))\n        dh(42)\n        self.assertEqual(out.getvalue(), \"42\\n\")\n        self.assertEqual(builtins._, 42)\n\n        del sys.stdout\n        self.assertRaises(RuntimeError, dh, 42)\n\n    def test_lost_displayhook(self):\n        del sys.displayhook\n        code = compile(\"42\", \"<string>\", \"single\")\n        self.assertRaises(RuntimeError, eval, code)\n\n    def test_custom_displayhook(self):\n        def baddisplayhook(obj):\n            raise ValueError\n        sys.displayhook = baddisplayhook\n        code = compile(\"42\", \"<string>\", \"single\")\n        self.assertRaises(ValueError, eval, code)\n\n    def test_original_excepthook(self):\n        err = io.StringIO()\n        sys.stderr = err\n\n        eh = sys.__excepthook__\n\n        self.assertRaises(TypeError, eh)\n        try:\n            raise ValueError(42)\n        except ValueError as exc:\n            eh(*sys.exc_info())\n\n        self.assertTrue(err.getvalue().endswith(\"ValueError: 42\\n\"))\n\n    def test_excepthook(self):\n        with test.support.captured_output(\"stderr\") as stderr:\n            sys.excepthook(1, '1', 1)\n        self.assertTrue(\"TypeError: print_exception(): Exception expected for \" \\\n                         \"value, str found\" in stderr.getvalue())\n\n    # FIXME: testing the code for a lost or replaced excepthook in\n    # Python/pythonrun.c::PyErr_PrintEx() is tricky.\n\n    def test_exit(self):\n        # call with two arguments\n        self.assertRaises(TypeError, sys.exit, 42, 42)\n\n        # call without argument\n        with self.assertRaises(SystemExit) as cm:\n            sys.exit()\n        self.assertIsNone(cm.exception.code)\n\n        rc, out, err = assert_python_ok('-c', 'import sys; sys.exit()')\n        self.assertEqual(rc, 0)\n        self.assertEqual(out, b'')\n        self.assertEqual(err, b'')\n\n        # call with integer argument\n        with self.assertRaises(SystemExit) as cm:\n            sys.exit(42)\n        self.assertEqual(cm.exception.code, 42)\n\n        # call with tuple argument with one entry\n        # entry will be unpacked\n        with self.assertRaises(SystemExit) as cm:\n            sys.exit((42,))\n        self.assertEqual(cm.exception.code, 42)\n\n        # call with string argument\n        with self.assertRaises(SystemExit) as cm:\n            sys.exit(\"exit\")\n        self.assertEqual(cm.exception.code, \"exit\")\n\n        # call with tuple argument with two entries\n        with self.assertRaises(SystemExit) as cm:\n            sys.exit((17, 23))\n        self.assertEqual(cm.exception.code, (17, 23))\n\n        # test that the exit machinery handles SystemExits properly\n        rc, out, err = assert_python_failure('-c', 'raise SystemExit(47)')\n        self.assertEqual(rc, 47)\n        self.assertEqual(out, b'')\n        self.assertEqual(err, b'')\n\n        def check_exit_message(code, expected, **env_vars):\n            rc, out, err = assert_python_failure('-c', code, **env_vars)\n            self.assertEqual(rc, 1)\n            self.assertEqual(out, b'')\n            self.assertTrue(err.startswith(expected),\n                \"%s doesn't start with %s\" % (ascii(err), ascii(expected)))\n\n        # test that stderr buffer is flushed before the exit message is written\n        # into stderr\n        check_exit_message(\n            r'import sys; sys.stderr.write(\"unflushed,\"); sys.exit(\"message\")',\n            b\"unflushed,message\")\n\n        # test that the exit message is written with backslashreplace error\n        # handler to stderr\n        check_exit_message(\n            r'import sys; sys.exit(\"surrogates:\\uDCFF\")',\n            b\"surrogates:\\\\udcff\")\n\n        # test that the unicode message is encoded to the stderr encoding\n        # instead of the default encoding (utf8)\n        check_exit_message(\n            r'import sys; sys.exit(\"h\\xe9\")',\n            b\"h\\xe9\", PYTHONIOENCODING='latin-1')\n\n    def test_getdefaultencoding(self):\n        self.assertRaises(TypeError, sys.getdefaultencoding, 42)\n        # can't check more than the type, as the user might have changed it\n        self.assertIsInstance(sys.getdefaultencoding(), str)\n\n    # testing sys.settrace() is done in test_sys_settrace.py\n    # testing sys.setprofile() is done in test_sys_setprofile.py\n\n    def test_setcheckinterval(self):\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            self.assertRaises(TypeError, sys.setcheckinterval)\n            orig = sys.getcheckinterval()\n            for n in 0, 100, 120, orig: # orig last to restore starting state\n                sys.setcheckinterval(n)\n                self.assertEqual(sys.getcheckinterval(), n)\n\n    @unittest.skipUnless(threading, 'Threading required for this test.')\n    def test_switchinterval(self):\n        self.assertRaises(TypeError, sys.setswitchinterval)\n        self.assertRaises(TypeError, sys.setswitchinterval, \"a\")\n        self.assertRaises(ValueError, sys.setswitchinterval, -1.0)\n        self.assertRaises(ValueError, sys.setswitchinterval, 0.0)\n        orig = sys.getswitchinterval()\n        # sanity check\n        self.assertTrue(orig < 0.5, orig)\n        try:\n            for n in 0.00001, 0.05, 3.0, orig:\n                sys.setswitchinterval(n)\n                self.assertAlmostEqual(sys.getswitchinterval(), n)\n        finally:\n            sys.setswitchinterval(orig)\n\n    def test_recursionlimit(self):\n        self.assertRaises(TypeError, sys.getrecursionlimit, 42)\n        oldlimit = sys.getrecursionlimit()\n        self.assertRaises(TypeError, sys.setrecursionlimit)\n        self.assertRaises(ValueError, sys.setrecursionlimit, -42)\n        sys.setrecursionlimit(10000)\n        self.assertEqual(sys.getrecursionlimit(), 10000)\n        sys.setrecursionlimit(oldlimit)\n\n    def test_recursionlimit_recovery(self):\n        if hasattr(sys, 'gettrace') and sys.gettrace():\n            self.skipTest('fatal error if run with a trace function')\n\n        oldlimit = sys.getrecursionlimit()\n        def f():\n            f()\n        try:\n            for depth in (10, 25, 50, 75, 100, 250, 1000):\n                try:\n                    sys.setrecursionlimit(depth)\n                except RecursionError:\n                    # Issue #25274: The recursion limit is too low at the\n                    # current recursion depth\n                    continue\n\n                # Issue #5392: test stack overflow after hitting recursion\n                # limit twice\n                self.assertRaises(RecursionError, f)\n                self.assertRaises(RecursionError, f)\n        finally:\n            sys.setrecursionlimit(oldlimit)\n\n    @test.support.cpython_only\n    def test_setrecursionlimit_recursion_depth(self):\n        # Issue #25274: Setting a low recursion limit must be blocked if the\n        # current recursion depth is already higher than the \"lower-water\n        # mark\". Otherwise, it may not be possible anymore to\n        # reset the overflowed flag to 0.\n\n        from _testcapi import get_recursion_depth\n\n        def set_recursion_limit_at_depth(depth, limit):\n            recursion_depth = get_recursion_depth()\n            if recursion_depth >= depth:\n                with self.assertRaises(RecursionError) as cm:\n                    sys.setrecursionlimit(limit)\n                self.assertRegex(str(cm.exception),\n                                 \"cannot set the recursion limit to [0-9]+ \"\n                                 \"at the recursion depth [0-9]+: \"\n                                 \"the limit is too low\")\n            else:\n                set_recursion_limit_at_depth(depth, limit)\n\n        oldlimit = sys.getrecursionlimit()\n        try:\n            sys.setrecursionlimit(1000)\n\n            for limit in (10, 25, 50, 75, 100, 150, 200):\n                # formula extracted from _Py_RecursionLimitLowerWaterMark()\n                if limit > 200:\n                    depth = limit - 50\n                else:\n                    depth = limit * 3 // 4\n                set_recursion_limit_at_depth(depth, limit)\n        finally:\n            sys.setrecursionlimit(oldlimit)\n\n    def test_recursionlimit_fatalerror(self):\n        # A fatal error occurs if a second recursion limit is hit when recovering\n        # from a first one.\n        code = textwrap.dedent(\"\"\"\n            import sys\n\n            def f():\n                try:\n                    f()\n                except RecursionError:\n                    f()\n\n            sys.setrecursionlimit(%d)\n            f()\"\"\")\n        with test.support.SuppressCrashReport():\n            for i in (50, 1000):\n                sub = subprocess.Popen([sys.executable, '-c', code % i],\n                    stderr=subprocess.PIPE)\n                err = sub.communicate()[1]\n                self.assertTrue(sub.returncode, sub.returncode)\n                self.assertIn(\n                    b\"Fatal Python error: Cannot recover from stack overflow\",\n                    err)\n\n    def test_getwindowsversion(self):\n        # Raise SkipTest if sys doesn't have getwindowsversion attribute\n        test.support.get_attribute(sys, \"getwindowsversion\")\n        v = sys.getwindowsversion()\n        self.assertEqual(len(v), 5)\n        self.assertIsInstance(v[0], int)\n        self.assertIsInstance(v[1], int)\n        self.assertIsInstance(v[2], int)\n        self.assertIsInstance(v[3], int)\n        self.assertIsInstance(v[4], str)\n        self.assertRaises(IndexError, operator.getitem, v, 5)\n        self.assertIsInstance(v.major, int)\n        self.assertIsInstance(v.minor, int)\n        self.assertIsInstance(v.build, int)\n        self.assertIsInstance(v.platform, int)\n        self.assertIsInstance(v.service_pack, str)\n        self.assertIsInstance(v.service_pack_minor, int)\n        self.assertIsInstance(v.service_pack_major, int)\n        self.assertIsInstance(v.suite_mask, int)\n        self.assertIsInstance(v.product_type, int)\n        self.assertEqual(v[0], v.major)\n        self.assertEqual(v[1], v.minor)\n        self.assertEqual(v[2], v.build)\n        self.assertEqual(v[3], v.platform)\n        self.assertEqual(v[4], v.service_pack)\n\n        # This is how platform.py calls it. Make sure tuple\n        #  still has 5 elements\n        maj, min, buildno, plat, csd = sys.getwindowsversion()\n\n    def test_call_tracing(self):\n        self.assertRaises(TypeError, sys.call_tracing, type, 2)\n\n    @unittest.skipUnless(hasattr(sys, \"setdlopenflags\"),\n                         'test needs sys.setdlopenflags()')\n    def test_dlopenflags(self):\n        self.assertTrue(hasattr(sys, \"getdlopenflags\"))\n        self.assertRaises(TypeError, sys.getdlopenflags, 42)\n        oldflags = sys.getdlopenflags()\n        self.assertRaises(TypeError, sys.setdlopenflags)\n        sys.setdlopenflags(oldflags+1)\n        self.assertEqual(sys.getdlopenflags(), oldflags+1)\n        sys.setdlopenflags(oldflags)\n\n    @test.support.refcount_test\n    def test_refcount(self):\n        # n here must be a global in order for this test to pass while\n        # tracing with a python function.  Tracing calls PyFrame_FastToLocals\n        # which will add a copy of any locals to the frame object, causing\n        # the reference count to increase by 2 instead of 1.\n        global n\n        self.assertRaises(TypeError, sys.getrefcount)\n        c = sys.getrefcount(None)\n        n = None\n        self.assertEqual(sys.getrefcount(None), c+1)\n        del n\n        self.assertEqual(sys.getrefcount(None), c)\n        if hasattr(sys, \"gettotalrefcount\"):\n            self.assertIsInstance(sys.gettotalrefcount(), int)\n\n    def test_getframe(self):\n        self.assertRaises(TypeError, sys._getframe, 42, 42)\n        self.assertRaises(ValueError, sys._getframe, 2000000000)\n        self.assertTrue(\n            SysModuleTest.test_getframe.__code__ \\\n            is sys._getframe().f_code\n        )\n\n    # sys._current_frames() is a CPython-only gimmick.\n    def test_current_frames(self):\n        have_threads = True\n        try:\n            import _thread\n        except ImportError:\n            have_threads = False\n\n        if have_threads:\n            self.current_frames_with_threads()\n        else:\n            self.current_frames_without_threads()\n\n    # Test sys._current_frames() in a WITH_THREADS build.\n    @test.support.reap_threads\n    def current_frames_with_threads(self):\n        import threading\n        import traceback\n\n        # Spawn a thread that blocks at a known place.  Then the main\n        # thread does sys._current_frames(), and verifies that the frames\n        # returned make sense.\n        entered_g = threading.Event()\n        leave_g = threading.Event()\n        thread_info = []  # the thread's id\n\n        def f123():\n            g456()\n\n        def g456():\n            thread_info.append(threading.get_ident())\n            entered_g.set()\n            leave_g.wait()\n\n        t = threading.Thread(target=f123)\n        t.start()\n        entered_g.wait()\n\n        # At this point, t has finished its entered_g.set(), although it's\n        # impossible to guess whether it's still on that line or has moved on\n        # to its leave_g.wait().\n        self.assertEqual(len(thread_info), 1)\n        thread_id = thread_info[0]\n\n        d = sys._current_frames()\n\n        main_id = threading.get_ident()\n        self.assertIn(main_id, d)\n        self.assertIn(thread_id, d)\n\n        # Verify that the captured main-thread frame is _this_ frame.\n        frame = d.pop(main_id)\n        self.assertTrue(frame is sys._getframe())\n\n        # Verify that the captured thread frame is blocked in g456, called\n        # from f123.  This is a litte tricky, since various bits of\n        # threading.py are also in the thread's call stack.\n        frame = d.pop(thread_id)\n        stack = traceback.extract_stack(frame)\n        for i, (filename, lineno, funcname, sourceline) in enumerate(stack):\n            if funcname == \"f123\":\n                break\n        else:\n            self.fail(\"didn't find f123() on thread's call stack\")\n\n        self.assertEqual(sourceline, \"g456()\")\n\n        # And the next record must be for g456().\n        filename, lineno, funcname, sourceline = stack[i+1]\n        self.assertEqual(funcname, \"g456\")\n        self.assertIn(sourceline, [\"leave_g.wait()\", \"entered_g.set()\"])\n\n        # Reap the spawned thread.\n        leave_g.set()\n        t.join()\n\n    # Test sys._current_frames() when thread support doesn't exist.\n    def current_frames_without_threads(self):\n        # Not much happens here:  there is only one thread, with artificial\n        # \"thread id\" 0.\n        d = sys._current_frames()\n        self.assertEqual(len(d), 1)\n        self.assertIn(0, d)\n        self.assertTrue(d[0] is sys._getframe())\n\n    def test_attributes(self):\n        self.assertIsInstance(sys.api_version, int)\n        self.assertIsInstance(sys.argv, list)\n        self.assertIn(sys.byteorder, (\"little\", \"big\"))\n        self.assertIsInstance(sys.builtin_module_names, tuple)\n        self.assertIsInstance(sys.copyright, str)\n        self.assertIsInstance(sys.exec_prefix, str)\n        self.assertIsInstance(sys.base_exec_prefix, str)\n        self.assertIsInstance(sys.executable, str)\n        self.assertEqual(len(sys.float_info), 11)\n        self.assertEqual(sys.float_info.radix, 2)\n        self.assertEqual(len(sys.int_info), 2)\n        self.assertTrue(sys.int_info.bits_per_digit % 5 == 0)\n        self.assertTrue(sys.int_info.sizeof_digit >= 1)\n        self.assertEqual(type(sys.int_info.bits_per_digit), int)\n        self.assertEqual(type(sys.int_info.sizeof_digit), int)\n        self.assertIsInstance(sys.hexversion, int)\n\n        self.assertEqual(len(sys.hash_info), 9)\n        self.assertLess(sys.hash_info.modulus, 2**sys.hash_info.width)\n        # sys.hash_info.modulus should be a prime; we do a quick\n        # probable primality test (doesn't exclude the possibility of\n        # a Carmichael number)\n        for x in range(1, 100):\n            self.assertEqual(\n                pow(x, sys.hash_info.modulus-1, sys.hash_info.modulus),\n                1,\n                \"sys.hash_info.modulus {} is a non-prime\".format(\n                    sys.hash_info.modulus)\n                )\n        self.assertIsInstance(sys.hash_info.inf, int)\n        self.assertIsInstance(sys.hash_info.nan, int)\n        self.assertIsInstance(sys.hash_info.imag, int)\n        algo = sysconfig.get_config_var(\"Py_HASH_ALGORITHM\")\n        if sys.hash_info.algorithm in {\"fnv\", \"siphash24\"}:\n            self.assertIn(sys.hash_info.hash_bits, {32, 64})\n            self.assertIn(sys.hash_info.seed_bits, {32, 64, 128})\n\n            if algo == 1:\n                self.assertEqual(sys.hash_info.algorithm, \"siphash24\")\n            elif algo == 2:\n                self.assertEqual(sys.hash_info.algorithm, \"fnv\")\n            else:\n                self.assertIn(sys.hash_info.algorithm, {\"fnv\", \"siphash24\"})\n        else:\n            # PY_HASH_EXTERNAL\n            self.assertEqual(algo, 0)\n        self.assertGreaterEqual(sys.hash_info.cutoff, 0)\n        self.assertLess(sys.hash_info.cutoff, 8)\n\n        self.assertIsInstance(sys.maxsize, int)\n        self.assertIsInstance(sys.maxunicode, int)\n        self.assertEqual(sys.maxunicode, 0x10FFFF)\n        self.assertIsInstance(sys.platform, str)\n        self.assertIsInstance(sys.prefix, str)\n        self.assertIsInstance(sys.base_prefix, str)\n        self.assertIsInstance(sys.version, str)\n        vi = sys.version_info\n        self.assertIsInstance(vi[:], tuple)\n        self.assertEqual(len(vi), 5)\n        self.assertIsInstance(vi[0], int)\n        self.assertIsInstance(vi[1], int)\n        self.assertIsInstance(vi[2], int)\n        self.assertIn(vi[3], (\"alpha\", \"beta\", \"candidate\", \"final\"))\n        self.assertIsInstance(vi[4], int)\n        self.assertIsInstance(vi.major, int)\n        self.assertIsInstance(vi.minor, int)\n        self.assertIsInstance(vi.micro, int)\n        self.assertIn(vi.releaselevel, (\"alpha\", \"beta\", \"candidate\", \"final\"))\n        self.assertIsInstance(vi.serial, int)\n        self.assertEqual(vi[0], vi.major)\n        self.assertEqual(vi[1], vi.minor)\n        self.assertEqual(vi[2], vi.micro)\n        self.assertEqual(vi[3], vi.releaselevel)\n        self.assertEqual(vi[4], vi.serial)\n        self.assertTrue(vi > (1,0,0))\n        self.assertIsInstance(sys.float_repr_style, str)\n        self.assertIn(sys.float_repr_style, ('short', 'legacy'))\n        if not sys.platform.startswith('win'):\n            self.assertIsInstance(sys.abiflags, str)\n\n    @unittest.skipUnless(hasattr(sys, 'thread_info'),\n                         'Threading required for this test.')\n    def test_thread_info(self):\n        info = sys.thread_info\n        self.assertEqual(len(info), 3)\n        self.assertIn(info.name, ('nt', 'pthread', 'solaris', None))\n        self.assertIn(info.lock, ('semaphore', 'mutex+cond', None))\n\n    def test_43581(self):\n        # Can't use sys.stdout, as this is a StringIO object when\n        # the test runs under regrtest.\n        self.assertEqual(sys.__stdout__.encoding, sys.__stderr__.encoding)\n\n    def test_intern(self):\n        global numruns\n        numruns += 1\n        self.assertRaises(TypeError, sys.intern)\n        s = \"never interned before\" + str(numruns)\n        self.assertTrue(sys.intern(s) is s)\n        s2 = s.swapcase().swapcase()\n        self.assertTrue(sys.intern(s2) is s)\n\n        # Subclasses of string can't be interned, because they\n        # provide too much opportunity for insane things to happen.\n        # We don't want them in the interned dict and if they aren't\n        # actually interned, we don't want to create the appearance\n        # that they are by allowing intern() to succeed.\n        class S(str):\n            def __hash__(self):\n                return 123\n\n        self.assertRaises(TypeError, sys.intern, S(\"abc\"))\n\n    def test_sys_flags(self):\n        self.assertTrue(sys.flags)\n        attrs = (\"debug\",\n                 \"inspect\", \"interactive\", \"optimize\", \"dont_write_bytecode\",\n                 \"no_user_site\", \"no_site\", \"ignore_environment\", \"verbose\",\n                 \"bytes_warning\", \"quiet\", \"hash_randomization\", \"isolated\")\n        for attr in attrs:\n            self.assertTrue(hasattr(sys.flags, attr), attr)\n            self.assertEqual(type(getattr(sys.flags, attr)), int, attr)\n        self.assertTrue(repr(sys.flags))\n        self.assertEqual(len(sys.flags), len(attrs))\n\n    def assert_raise_on_new_sys_type(self, sys_attr):\n        # Users are intentionally prevented from creating new instances of\n        # sys.flags, sys.version_info, and sys.getwindowsversion.\n        attr_type = type(sys_attr)\n        with self.assertRaises(TypeError):\n            attr_type()\n        with self.assertRaises(TypeError):\n            attr_type.__new__(attr_type)\n\n    def test_sys_flags_no_instantiation(self):\n        self.assert_raise_on_new_sys_type(sys.flags)\n\n    def test_sys_version_info_no_instantiation(self):\n        self.assert_raise_on_new_sys_type(sys.version_info)\n\n    def test_sys_getwindowsversion_no_instantiation(self):\n        # Skip if not being run on Windows.\n        test.support.get_attribute(sys, \"getwindowsversion\")\n        self.assert_raise_on_new_sys_type(sys.getwindowsversion())\n\n    @test.support.cpython_only\n    def test_clear_type_cache(self):\n        sys._clear_type_cache()\n\n    def test_ioencoding(self):\n        env = dict(os.environ)\n\n        # Test character: cent sign, encoded as 0x4A (ASCII J) in CP424,\n        # not representable in ASCII.\n\n        env[\"PYTHONIOENCODING\"] = \"cp424\"\n        p = subprocess.Popen([sys.executable, \"-c\", 'print(chr(0xa2))'],\n                             stdout = subprocess.PIPE, env=env)\n        out = p.communicate()[0].strip()\n        expected = (\"\\xa2\" + os.linesep).encode(\"cp424\")\n        self.assertEqual(out, expected)\n\n        env[\"PYTHONIOENCODING\"] = \"ascii:replace\"\n        p = subprocess.Popen([sys.executable, \"-c\", 'print(chr(0xa2))'],\n                             stdout = subprocess.PIPE, env=env)\n        out = p.communicate()[0].strip()\n        self.assertEqual(out, b'?')\n\n        env[\"PYTHONIOENCODING\"] = \"ascii\"\n        p = subprocess.Popen([sys.executable, \"-c\", 'print(chr(0xa2))'],\n                             stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                             env=env)\n        out, err = p.communicate()\n        self.assertEqual(out, b'')\n        self.assertIn(b'UnicodeEncodeError:', err)\n        self.assertIn(rb\"'\\xa2'\", err)\n\n        env[\"PYTHONIOENCODING\"] = \"ascii:\"\n        p = subprocess.Popen([sys.executable, \"-c\", 'print(chr(0xa2))'],\n                             stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                             env=env)\n        out, err = p.communicate()\n        self.assertEqual(out, b'')\n        self.assertIn(b'UnicodeEncodeError:', err)\n        self.assertIn(rb\"'\\xa2'\", err)\n\n        env[\"PYTHONIOENCODING\"] = \":surrogateescape\"\n        p = subprocess.Popen([sys.executable, \"-c\", 'print(chr(0xdcbd))'],\n                             stdout=subprocess.PIPE, env=env)\n        out = p.communicate()[0].strip()\n        self.assertEqual(out, b'\\xbd')\n\n    @unittest.skipUnless(test.support.FS_NONASCII,\n                         'requires OS support of non-ASCII encodings')\n    def test_ioencoding_nonascii(self):\n        env = dict(os.environ)\n\n        env[\"PYTHONIOENCODING\"] = \"\"\n        p = subprocess.Popen([sys.executable, \"-c\",\n                                'print(%a)' % test.support.FS_NONASCII],\n                                stdout=subprocess.PIPE, env=env)\n        out = p.communicate()[0].strip()\n        self.assertEqual(out, os.fsencode(test.support.FS_NONASCII))\n\n    @unittest.skipIf(sys.base_prefix != sys.prefix,\n                     'Test is not venv-compatible')\n    def test_executable(self):\n        # sys.executable should be absolute\n        self.assertEqual(os.path.abspath(sys.executable), sys.executable)\n\n        # Issue #7774: Ensure that sys.executable is an empty string if argv[0]\n        # has been set to a non existent program name and Python is unable to\n        # retrieve the real program name\n\n        # For a normal installation, it should work without 'cwd'\n        # argument. For test runs in the build directory, see #7774.\n        python_dir = os.path.dirname(os.path.realpath(sys.executable))\n        p = subprocess.Popen(\n            [\"nonexistent\", \"-c\",\n             'import sys; print(sys.executable.encode(\"ascii\", \"backslashreplace\"))'],\n            executable=sys.executable, stdout=subprocess.PIPE, cwd=python_dir)\n        stdout = p.communicate()[0]\n        executable = stdout.strip().decode(\"ASCII\")\n        p.wait()\n        self.assertIn(executable, [\"b''\", repr(sys.executable.encode(\"ascii\", \"backslashreplace\"))])\n\n    def check_fsencoding(self, fs_encoding, expected=None):\n        self.assertIsNotNone(fs_encoding)\n        codecs.lookup(fs_encoding)\n        if expected:\n            self.assertEqual(fs_encoding, expected)\n\n    def test_getfilesystemencoding(self):\n        fs_encoding = sys.getfilesystemencoding()\n        if sys.platform == 'darwin':\n            expected = 'utf-8'\n        elif sys.platform == 'win32':\n            expected = 'mbcs'\n        else:\n            expected = None\n        self.check_fsencoding(fs_encoding, expected)\n\n    def c_locale_get_error_handler(self, isolated=False, encoding=None):\n        # Force the POSIX locale\n        env = os.environ.copy()\n        env[\"LC_ALL\"] = \"C\"\n        code = '\\n'.join((\n            'import sys',\n            'def dump(name):',\n            '    std = getattr(sys, name)',\n            '    print(\"%s: %s\" % (name, std.errors))',\n            'dump(\"stdin\")',\n            'dump(\"stdout\")',\n            'dump(\"stderr\")',\n        ))\n        args = [sys.executable, \"-c\", code]\n        if isolated:\n            args.append(\"-I\")\n        if encoding is not None:\n            env['PYTHONIOENCODING'] = encoding\n        else:\n            env.pop('PYTHONIOENCODING', None)\n        p = subprocess.Popen(args,\n                              stdout=subprocess.PIPE,\n                              stderr=subprocess.STDOUT,\n                              env=env,\n                              universal_newlines=True)\n        stdout, stderr = p.communicate()\n        return stdout\n\n    def test_c_locale_surrogateescape(self):\n        out = self.c_locale_get_error_handler(isolated=True)\n        self.assertEqual(out,\n                         'stdin: surrogateescape\\n'\n                         'stdout: surrogateescape\\n'\n                         'stderr: backslashreplace\\n')\n\n        # replace the default error handler\n        out = self.c_locale_get_error_handler(encoding=':ignore')\n        self.assertEqual(out,\n                         'stdin: ignore\\n'\n                         'stdout: ignore\\n'\n                         'stderr: backslashreplace\\n')\n\n        # force the encoding\n        out = self.c_locale_get_error_handler(encoding='iso8859-1')\n        self.assertEqual(out,\n                         'stdin: strict\\n'\n                         'stdout: strict\\n'\n                         'stderr: backslashreplace\\n')\n        out = self.c_locale_get_error_handler(encoding='iso8859-1:')\n        self.assertEqual(out,\n                         'stdin: strict\\n'\n                         'stdout: strict\\n'\n                         'stderr: backslashreplace\\n')\n\n        # have no any effect\n        out = self.c_locale_get_error_handler(encoding=':')\n        self.assertEqual(out,\n                         'stdin: surrogateescape\\n'\n                         'stdout: surrogateescape\\n'\n                         'stderr: backslashreplace\\n')\n        out = self.c_locale_get_error_handler(encoding='')\n        self.assertEqual(out,\n                         'stdin: surrogateescape\\n'\n                         'stdout: surrogateescape\\n'\n                         'stderr: backslashreplace\\n')\n\n    def test_implementation(self):\n        # This test applies to all implementations equally.\n\n        levels = {'alpha': 0xA, 'beta': 0xB, 'candidate': 0xC, 'final': 0xF}\n\n        self.assertTrue(hasattr(sys.implementation, 'name'))\n        self.assertTrue(hasattr(sys.implementation, 'version'))\n        self.assertTrue(hasattr(sys.implementation, 'hexversion'))\n        self.assertTrue(hasattr(sys.implementation, 'cache_tag'))\n\n        version = sys.implementation.version\n        self.assertEqual(version[:2], (version.major, version.minor))\n\n        hexversion = (version.major << 24 | version.minor << 16 |\n                      version.micro << 8 | levels[version.releaselevel] << 4 |\n                      version.serial << 0)\n        self.assertEqual(sys.implementation.hexversion, hexversion)\n\n        # PEP 421 requires that .name be lower case.\n        self.assertEqual(sys.implementation.name,\n                         sys.implementation.name.lower())\n\n    @test.support.cpython_only\n    def test_debugmallocstats(self):\n        # Test sys._debugmallocstats()\n        from test.support.script_helper import assert_python_ok\n        args = ['-c', 'import sys; sys._debugmallocstats()']\n        ret, out, err = assert_python_ok(*args)\n        self.assertIn(b\"free PyDictObjects\", err)\n\n        # The function has no parameter\n        self.assertRaises(TypeError, sys._debugmallocstats, True)\n\n    @unittest.skipUnless(hasattr(sys, \"getallocatedblocks\"),\n                         \"sys.getallocatedblocks unavailable on this build\")\n    def test_getallocatedblocks(self):\n        # Some sanity checks\n        with_pymalloc = sysconfig.get_config_var('WITH_PYMALLOC')\n        a = sys.getallocatedblocks()\n        self.assertIs(type(a), int)\n        if with_pymalloc:\n            self.assertGreater(a, 0)\n        else:\n            # When WITH_PYMALLOC isn't available, we don't know anything\n            # about the underlying implementation: the function might\n            # return 0 or something greater.\n            self.assertGreaterEqual(a, 0)\n        try:\n            # While we could imagine a Python session where the number of\n            # multiple buffer objects would exceed the sharing of references,\n            # it is unlikely to happen in a normal test run.\n            self.assertLess(a, sys.gettotalrefcount())\n        except AttributeError:\n            # gettotalrefcount() not available\n            pass\n        gc.collect()\n        b = sys.getallocatedblocks()\n        self.assertLessEqual(b, a)\n        gc.collect()\n        c = sys.getallocatedblocks()\n        self.assertIn(c, range(b - 50, b + 50))\n\n    @test.support.requires_type_collecting\n    def test_is_finalizing(self):\n        self.assertIs(sys.is_finalizing(), False)\n        # Don't use the atexit module because _Py_Finalizing is only set\n        # after calling atexit callbacks\n        code = \"\"\"if 1:\n            import sys\n\n            class AtExit:\n                is_finalizing = sys.is_finalizing\n                print = print\n\n                def __del__(self):\n                    self.print(self.is_finalizing(), flush=True)\n\n            # Keep a reference in the __main__ module namespace, so the\n            # AtExit destructor will be called at Python exit\n            ref = AtExit()\n        \"\"\"\n        rc, stdout, stderr = assert_python_ok('-c', code)\n        self.assertEqual(stdout.rstrip(), b'True')\n\n\n@test.support.cpython_only\nclass SizeofTest(unittest.TestCase):\n\n    def setUp(self):\n        self.P = struct.calcsize('P')\n        self.longdigit = sys.int_info.sizeof_digit\n        import _testcapi\n        self.gc_headsize = _testcapi.SIZEOF_PYGC_HEAD\n\n    check_sizeof = test.support.check_sizeof\n\n    def test_gc_head_size(self):\n        # Check that the gc header size is added to objects tracked by the gc.\n        vsize = test.support.calcvobjsize\n        gc_header_size = self.gc_headsize\n        # bool objects are not gc tracked\n        self.assertEqual(sys.getsizeof(True), vsize('') + self.longdigit)\n        # but lists are\n        self.assertEqual(sys.getsizeof([]), vsize('Pn') + gc_header_size)\n\n    def test_errors(self):\n        class BadSizeof:\n            def __sizeof__(self):\n                raise ValueError\n        self.assertRaises(ValueError, sys.getsizeof, BadSizeof())\n\n        class InvalidSizeof:\n            def __sizeof__(self):\n                return None\n        self.assertRaises(TypeError, sys.getsizeof, InvalidSizeof())\n        sentinel = [\"sentinel\"]\n        self.assertIs(sys.getsizeof(InvalidSizeof(), sentinel), sentinel)\n\n        class FloatSizeof:\n            def __sizeof__(self):\n                return 4.5\n        self.assertRaises(TypeError, sys.getsizeof, FloatSizeof())\n        self.assertIs(sys.getsizeof(FloatSizeof(), sentinel), sentinel)\n\n        class OverflowSizeof(int):\n            def __sizeof__(self):\n                return int(self)\n        self.assertEqual(sys.getsizeof(OverflowSizeof(sys.maxsize)),\n                         sys.maxsize + self.gc_headsize)\n        with self.assertRaises(OverflowError):\n            sys.getsizeof(OverflowSizeof(sys.maxsize + 1))\n        with self.assertRaises(ValueError):\n            sys.getsizeof(OverflowSizeof(-1))\n        with self.assertRaises((ValueError, OverflowError)):\n            sys.getsizeof(OverflowSizeof(-sys.maxsize - 1))\n\n    def test_default(self):\n        size = test.support.calcvobjsize\n        self.assertEqual(sys.getsizeof(True), size('') + self.longdigit)\n        self.assertEqual(sys.getsizeof(True, -1), size('') + self.longdigit)\n\n    def test_objecttypes(self):\n        # check all types defined in Objects/\n        calcsize = struct.calcsize\n        size = test.support.calcobjsize\n        vsize = test.support.calcvobjsize\n        check = self.check_sizeof\n        # bool\n        check(True, vsize('') + self.longdigit)\n        # buffer\n        # XXX\n        # builtin_function_or_method\n        check(len, size('4P')) # XXX check layout\n        # bytearray\n        samples = [b'', b'u'*100000]\n        for sample in samples:\n            x = bytearray(sample)\n            check(x, vsize('n2Pi') + x.__alloc__())\n        # bytearray_iterator\n        check(iter(bytearray()), size('nP'))\n        # bytes\n        check(b'', vsize('n') + 1)\n        check(b'x' * 10, vsize('n') + 11)\n        # cell\n        def get_cell():\n            x = 42\n            def inner():\n                return x\n            return inner\n        check(get_cell().__closure__[0], size('P'))\n        # code\n        check(get_cell().__code__, size('5i9Pi3P'))\n        check(get_cell.__code__, size('5i9Pi3P'))\n        def get_cell2(x):\n            def inner():\n                return x\n            return inner\n        check(get_cell2.__code__, size('5i9Pi3P') + 1)\n        # complex\n        check(complex(0,1), size('2d'))\n        # method_descriptor (descriptor object)\n        check(str.lower, size('3PP'))\n        # classmethod_descriptor (descriptor object)\n        # XXX\n        # member_descriptor (descriptor object)\n        import datetime\n        check(datetime.timedelta.days, size('3PP'))\n        # getset_descriptor (descriptor object)\n        import collections\n        check(collections.defaultdict.default_factory, size('3PP'))\n        # wrapper_descriptor (descriptor object)\n        check(int.__add__, size('3P2P'))\n        # method-wrapper (descriptor object)\n        check({}.__iter__, size('2P'))\n        # dict\n        check({}, size('n2P') + calcsize('2nPn') + 8*calcsize('n2P'))\n        longdict = {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8}\n        check(longdict, size('n2P') + calcsize('2nPn') + 16*calcsize('n2P'))\n        # dictionary-keyview\n        check({}.keys(), size('P'))\n        # dictionary-valueview\n        check({}.values(), size('P'))\n        # dictionary-itemview\n        check({}.items(), size('P'))\n        # dictionary iterator\n        check(iter({}), size('P2nPn'))\n        # dictionary-keyiterator\n        check(iter({}.keys()), size('P2nPn'))\n        # dictionary-valueiterator\n        check(iter({}.values()), size('P2nPn'))\n        # dictionary-itemiterator\n        check(iter({}.items()), size('P2nPn'))\n        # dictproxy\n        class C(object): pass\n        check(C.__dict__, size('P'))\n        # BaseException\n        check(BaseException(), size('5Pb'))\n        # UnicodeEncodeError\n        check(UnicodeEncodeError(\"\", \"\", 0, 0, \"\"), size('5Pb 2P2nP'))\n        # UnicodeDecodeError\n        check(UnicodeDecodeError(\"\", b\"\", 0, 0, \"\"), size('5Pb 2P2nP'))\n        # UnicodeTranslateError\n        check(UnicodeTranslateError(\"\", 0, 1, \"\"), size('5Pb 2P2nP'))\n        # ellipses\n        check(Ellipsis, size(''))\n        # EncodingMap\n        import codecs, encodings.iso8859_3\n        x = codecs.charmap_build(encodings.iso8859_3.decoding_table)\n        check(x, size('32B2iB'))\n        # enumerate\n        check(enumerate([]), size('n3P'))\n        # reverse\n        check(reversed(''), size('nP'))\n        # float\n        check(float(0), size('d'))\n        # sys.floatinfo\n        check(sys.float_info, vsize('') + self.P * len(sys.float_info))\n        # frame\n        import inspect\n        CO_MAXBLOCKS = 20\n        x = inspect.currentframe()\n        ncells = len(x.f_code.co_cellvars)\n        nfrees = len(x.f_code.co_freevars)\n        extras = x.f_code.co_stacksize + x.f_code.co_nlocals +\\\n                  ncells + nfrees - 1\n        check(x, vsize('12P3ic' + CO_MAXBLOCKS*'3i' + 'P' + extras*'P'))\n        # function\n        def func(): pass\n        check(func, size('12P'))\n        class c():\n            @staticmethod\n            def foo():\n                pass\n            @classmethod\n            def bar(cls):\n                pass\n            # staticmethod\n            check(foo, size('PP'))\n            # classmethod\n            check(bar, size('PP'))\n        # generator\n        def get_gen(): yield 1\n        check(get_gen(), size('Pb2PPP'))\n        # iterator\n        check(iter('abc'), size('lP'))\n        # callable-iterator\n        import re\n        check(re.finditer('',''), size('2P'))\n        # list\n        samples = [[], [1,2,3], ['1', '2', '3']]\n        for sample in samples:\n            check(sample, vsize('Pn') + len(sample)*self.P)\n        # sortwrapper (list)\n        # XXX\n        # cmpwrapper (list)\n        # XXX\n        # listiterator (list)\n        check(iter([]), size('lP'))\n        # listreverseiterator (list)\n        check(reversed([]), size('nP'))\n        # int\n        check(0, vsize(''))\n        check(1, vsize('') + self.longdigit)\n        check(-1, vsize('') + self.longdigit)\n        PyLong_BASE = 2**sys.int_info.bits_per_digit\n        check(int(PyLong_BASE), vsize('') + 2*self.longdigit)\n        check(int(PyLong_BASE**2-1), vsize('') + 2*self.longdigit)\n        check(int(PyLong_BASE**2), vsize('') + 3*self.longdigit)\n        # module\n        check(unittest, size('PnPPP'))\n        # None\n        check(None, size(''))\n        # NotImplementedType\n        check(NotImplemented, size(''))\n        # object\n        check(object(), size(''))\n        # property (descriptor object)\n        class C(object):\n            def getx(self): return self.__x\n            def setx(self, value): self.__x = value\n            def delx(self): del self.__x\n            x = property(getx, setx, delx, \"\")\n            check(x, size('4Pi'))\n        # PyCapsule\n        # XXX\n        # rangeiterator\n        check(iter(range(1)), size('4l'))\n        # reverse\n        check(reversed(''), size('nP'))\n        # range\n        check(range(1), size('4P'))\n        check(range(66000), size('4P'))\n        # set\n        # frozenset\n        PySet_MINSIZE = 8\n        samples = [[], range(10), range(50)]\n        s = size('3nP' + PySet_MINSIZE*'nP' + '2nP')\n        for sample in samples:\n            minused = len(sample)\n            if minused == 0: tmp = 1\n            # the computation of minused is actually a bit more complicated\n            # but this suffices for the sizeof test\n            minused = minused*2\n            newsize = PySet_MINSIZE\n            while newsize <= minused:\n                newsize = newsize << 1\n            if newsize <= 8:\n                check(set(sample), s)\n                check(frozenset(sample), s)\n            else:\n                check(set(sample), s + newsize*calcsize('nP'))\n                check(frozenset(sample), s + newsize*calcsize('nP'))\n        # setiterator\n        check(iter(set()), size('P3n'))\n        # slice\n        check(slice(0), size('3P'))\n        # super\n        check(super(int), size('3P'))\n        # tuple\n        check((), vsize(''))\n        check((1,2,3), vsize('') + 3*self.P)\n        # type\n        # static type: PyTypeObject\n        fmt = 'P2n15Pl4Pn9Pn11PIP'\n        if hasattr(sys, 'getcounts'):\n            fmt += '3n2P'\n        s = vsize(fmt)\n        check(int, s)\n        s = vsize(fmt +                 # PyTypeObject\n                  '3P'                  # PyAsyncMethods\n                  '36P'                 # PyNumberMethods\n                  '3P'                  # PyMappingMethods\n                  '10P'                 # PySequenceMethods\n                  '2P'                  # PyBufferProcs\n                  '4P')\n        # Separate block for PyDictKeysObject with 4 entries\n        s += calcsize(\"2nPn\") + 4*calcsize(\"n2P\")\n        # class\n        class newstyleclass(object): pass\n        check(newstyleclass, s)\n        # dict with shared keys\n        check(newstyleclass().__dict__, size('n2P' + '2nPn'))\n        # unicode\n        # each tuple contains a string and its expected character size\n        # don't put any static strings here, as they may contain\n        # wchar_t or UTF-8 representations\n        samples = ['1'*100, '\\xff'*50,\n                   '\\u0100'*40, '\\uffff'*100,\n                   '\\U00010000'*30, '\\U0010ffff'*100]\n        asciifields = \"nnbP\"\n        compactfields = asciifields + \"nPn\"\n        unicodefields = compactfields + \"P\"\n        for s in samples:\n            maxchar = ord(max(s))\n            if maxchar < 128:\n                L = size(asciifields) + len(s) + 1\n            elif maxchar < 256:\n                L = size(compactfields) + len(s) + 1\n            elif maxchar < 65536:\n                L = size(compactfields) + 2*(len(s) + 1)\n            else:\n                L = size(compactfields) + 4*(len(s) + 1)\n            check(s, L)\n        # verify that the UTF-8 size is accounted for\n        s = chr(0x4000)   # 4 bytes canonical representation\n        check(s, size(compactfields) + 4)\n        # compile() will trigger the generation of the UTF-8\n        # representation as a side effect\n        compile(s, \"<stdin>\", \"eval\")\n        check(s, size(compactfields) + 4 + 4)\n        # TODO: add check that forces the presence of wchar_t representation\n        # TODO: add check that forces layout of unicodefields\n        # weakref\n        import weakref\n        check(weakref.ref(int), size('2Pn2P'))\n        # weakproxy\n        # XXX\n        # weakcallableproxy\n        check(weakref.proxy(int), size('2Pn2P'))\n\n    def check_slots(self, obj, base, extra):\n        expected = sys.getsizeof(base) + struct.calcsize(extra)\n        if gc.is_tracked(obj) and not gc.is_tracked(base):\n            expected += self.gc_headsize\n        self.assertEqual(sys.getsizeof(obj), expected)\n\n    def test_slots(self):\n        # check all subclassable types defined in Objects/ that allow\n        # non-empty __slots__\n        check = self.check_slots\n        class BA(bytearray):\n            __slots__ = 'a', 'b', 'c'\n        check(BA(), bytearray(), '3P')\n        class D(dict):\n            __slots__ = 'a', 'b', 'c'\n        check(D(x=[]), {'x': []}, '3P')\n        class L(list):\n            __slots__ = 'a', 'b', 'c'\n        check(L(), [], '3P')\n        class S(set):\n            __slots__ = 'a', 'b', 'c'\n        check(S(), set(), '3P')\n        class FS(frozenset):\n            __slots__ = 'a', 'b', 'c'\n        check(FS(), frozenset(), '3P')\n        from collections import OrderedDict\n        class OD(OrderedDict):\n            __slots__ = 'a', 'b', 'c'\n        check(OD(x=[]), OrderedDict(x=[]), '3P')\n\n    def test_pythontypes(self):\n        # check all types defined in Python/\n        size = test.support.calcobjsize\n        vsize = test.support.calcvobjsize\n        check = self.check_sizeof\n        # _ast.AST\n        import _ast\n        check(_ast.AST(), size('P'))\n        try:\n            raise TypeError\n        except TypeError:\n            tb = sys.exc_info()[2]\n            # traceback\n            if tb is not None:\n                check(tb, size('2P2i'))\n        # symtable entry\n        # XXX\n        # sys.flags\n        check(sys.flags, vsize('') + self.P * len(sys.flags))\n\n\ndef test_main():\n    test.support.run_unittest(SysModuleTest, SizeofTest)\n\nif __name__ == \"__main__\":\n    test_main()\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/ctypes/__init__.py": "\"\"\"create and manipulate C data types in Python\"\"\"\n\nimport os as _os, sys as _sys\n\n__version__ = \"1.1.0\"\n\nfrom _ctypes import Union, Structure, Array\nfrom _ctypes import _Pointer\nfrom _ctypes import CFuncPtr as _CFuncPtr\nfrom _ctypes import __version__ as _ctypes_version\nfrom _ctypes import RTLD_LOCAL, RTLD_GLOBAL\nfrom _ctypes import ArgumentError\n\nfrom struct import calcsize as _calcsize\n\nif __version__ != _ctypes_version:\n    raise Exception(\"Version number mismatch\", __version__, _ctypes_version)\n\nif _os.name in (\"nt\", \"ce\"):\n    from _ctypes import FormatError\n\nDEFAULT_MODE = RTLD_LOCAL\nif _os.name == \"posix\" and _sys.platform == \"darwin\":\n    # On OS X 10.3, we use RTLD_GLOBAL as default mode\n    # because RTLD_LOCAL does not work at least on some\n    # libraries.  OS X 10.3 is Darwin 7, so we check for\n    # that.\n\n    if int(_os.uname().release.split('.')[0]) < 8:\n        DEFAULT_MODE = RTLD_GLOBAL\n\nfrom _ctypes import FUNCFLAG_CDECL as _FUNCFLAG_CDECL, \\\n     FUNCFLAG_PYTHONAPI as _FUNCFLAG_PYTHONAPI, \\\n     FUNCFLAG_USE_ERRNO as _FUNCFLAG_USE_ERRNO, \\\n     FUNCFLAG_USE_LASTERROR as _FUNCFLAG_USE_LASTERROR\n\n# WINOLEAPI -> HRESULT\n# WINOLEAPI_(type)\n#\n# STDMETHODCALLTYPE\n#\n# STDMETHOD(name)\n# STDMETHOD_(type, name)\n#\n# STDAPICALLTYPE\n\ndef create_string_buffer(init, size=None):\n    \"\"\"create_string_buffer(aBytes) -> character array\n    create_string_buffer(anInteger) -> character array\n    create_string_buffer(aBytes, anInteger) -> character array\n    \"\"\"\n    if isinstance(init, bytes):\n        if size is None:\n            size = len(init)+1\n        buftype = c_char * size\n        buf = buftype()\n        buf.value = init\n        return buf\n    elif isinstance(init, int):\n        buftype = c_char * init\n        buf = buftype()\n        return buf\n    raise TypeError(init)\n\ndef c_buffer(init, size=None):\n##    \"deprecated, use create_string_buffer instead\"\n##    import warnings\n##    warnings.warn(\"c_buffer is deprecated, use create_string_buffer instead\",\n##                  DeprecationWarning, stacklevel=2)\n    return create_string_buffer(init, size)\n\n_c_functype_cache = {}\ndef CFUNCTYPE(restype, *argtypes, **kw):\n    \"\"\"CFUNCTYPE(restype, *argtypes,\n                 use_errno=False, use_last_error=False) -> function prototype.\n\n    restype: the result type\n    argtypes: a sequence specifying the argument types\n\n    The function prototype can be called in different ways to create a\n    callable object:\n\n    prototype(integer address) -> foreign function\n    prototype(callable) -> create and return a C callable function from callable\n    prototype(integer index, method name[, paramflags]) -> foreign function calling a COM method\n    prototype((ordinal number, dll object)[, paramflags]) -> foreign function exported by ordinal\n    prototype((function name, dll object)[, paramflags]) -> foreign function exported by name\n    \"\"\"\n    flags = _FUNCFLAG_CDECL\n    if kw.pop(\"use_errno\", False):\n        flags |= _FUNCFLAG_USE_ERRNO\n    if kw.pop(\"use_last_error\", False):\n        flags |= _FUNCFLAG_USE_LASTERROR\n    if kw:\n        raise ValueError(\"unexpected keyword argument(s) %s\" % kw.keys())\n    try:\n        return _c_functype_cache[(restype, argtypes, flags)]\n    except KeyError:\n        class CFunctionType(_CFuncPtr):\n            _argtypes_ = argtypes\n            _restype_ = restype\n            _flags_ = flags\n        _c_functype_cache[(restype, argtypes, flags)] = CFunctionType\n        return CFunctionType\n\nif _os.name in (\"nt\", \"ce\"):\n    from _ctypes import LoadLibrary as _dlopen\n    from _ctypes import FUNCFLAG_STDCALL as _FUNCFLAG_STDCALL\n    if _os.name == \"ce\":\n        # 'ce' doesn't have the stdcall calling convention\n        _FUNCFLAG_STDCALL = _FUNCFLAG_CDECL\n\n    _win_functype_cache = {}\n    def WINFUNCTYPE(restype, *argtypes, **kw):\n        # docstring set later (very similar to CFUNCTYPE.__doc__)\n        flags = _FUNCFLAG_STDCALL\n        if kw.pop(\"use_errno\", False):\n            flags |= _FUNCFLAG_USE_ERRNO\n        if kw.pop(\"use_last_error\", False):\n            flags |= _FUNCFLAG_USE_LASTERROR\n        if kw:\n            raise ValueError(\"unexpected keyword argument(s) %s\" % kw.keys())\n        try:\n            return _win_functype_cache[(restype, argtypes, flags)]\n        except KeyError:\n            class WinFunctionType(_CFuncPtr):\n                _argtypes_ = argtypes\n                _restype_ = restype\n                _flags_ = flags\n            _win_functype_cache[(restype, argtypes, flags)] = WinFunctionType\n            return WinFunctionType\n    if WINFUNCTYPE.__doc__:\n        WINFUNCTYPE.__doc__ = CFUNCTYPE.__doc__.replace(\"CFUNCTYPE\", \"WINFUNCTYPE\")\n\nelif _os.name == \"posix\":\n    from _ctypes import dlopen as _dlopen\n\nfrom _ctypes import sizeof, byref, addressof, alignment, resize\nfrom _ctypes import get_errno, set_errno\nfrom _ctypes import _SimpleCData\n\ndef _check_size(typ, typecode=None):\n    # Check if sizeof(ctypes_type) against struct.calcsize.  This\n    # should protect somewhat against a misconfigured libffi.\n    from struct import calcsize\n    if typecode is None:\n        # Most _type_ codes are the same as used in struct\n        typecode = typ._type_\n    actual, required = sizeof(typ), calcsize(typecode)\n    if actual != required:\n        raise SystemError(\"sizeof(%s) wrong: %d instead of %d\" % \\\n                          (typ, actual, required))\n\nclass py_object(_SimpleCData):\n    _type_ = \"O\"\n    def __repr__(self):\n        try:\n            return super().__repr__()\n        except ValueError:\n            return \"%s(<NULL>)\" % type(self).__name__\n_check_size(py_object, \"P\")\n\nclass c_short(_SimpleCData):\n    _type_ = \"h\"\n_check_size(c_short)\n\nclass c_ushort(_SimpleCData):\n    _type_ = \"H\"\n_check_size(c_ushort)\n\nclass c_long(_SimpleCData):\n    _type_ = \"l\"\n_check_size(c_long)\n\nclass c_ulong(_SimpleCData):\n    _type_ = \"L\"\n_check_size(c_ulong)\n\nif _calcsize(\"i\") == _calcsize(\"l\"):\n    # if int and long have the same size, make c_int an alias for c_long\n    c_int = c_long\n    c_uint = c_ulong\nelse:\n    class c_int(_SimpleCData):\n        _type_ = \"i\"\n    _check_size(c_int)\n\n    class c_uint(_SimpleCData):\n        _type_ = \"I\"\n    _check_size(c_uint)\n\nclass c_float(_SimpleCData):\n    _type_ = \"f\"\n_check_size(c_float)\n\nclass c_double(_SimpleCData):\n    _type_ = \"d\"\n_check_size(c_double)\n\nclass c_longdouble(_SimpleCData):\n    _type_ = \"g\"\nif sizeof(c_longdouble) == sizeof(c_double):\n    c_longdouble = c_double\n\nif _calcsize(\"l\") == _calcsize(\"q\"):\n    # if long and long long have the same size, make c_longlong an alias for c_long\n    c_longlong = c_long\n    c_ulonglong = c_ulong\nelse:\n    class c_longlong(_SimpleCData):\n        _type_ = \"q\"\n    _check_size(c_longlong)\n\n    class c_ulonglong(_SimpleCData):\n        _type_ = \"Q\"\n    ##    def from_param(cls, val):\n    ##        return ('d', float(val), val)\n    ##    from_param = classmethod(from_param)\n    _check_size(c_ulonglong)\n\nclass c_ubyte(_SimpleCData):\n    _type_ = \"B\"\nc_ubyte.__ctype_le__ = c_ubyte.__ctype_be__ = c_ubyte\n# backward compatibility:\n##c_uchar = c_ubyte\n_check_size(c_ubyte)\n\nclass c_byte(_SimpleCData):\n    _type_ = \"b\"\nc_byte.__ctype_le__ = c_byte.__ctype_be__ = c_byte\n_check_size(c_byte)\n\nclass c_char(_SimpleCData):\n    _type_ = \"c\"\nc_char.__ctype_le__ = c_char.__ctype_be__ = c_char\n_check_size(c_char)\n\nclass c_char_p(_SimpleCData):\n    _type_ = \"z\"\n    def __repr__(self):\n        return \"%s(%s)\" % (self.__class__.__name__, c_void_p.from_buffer(self).value)\n_check_size(c_char_p, \"P\")\n\nclass c_void_p(_SimpleCData):\n    _type_ = \"P\"\nc_voidp = c_void_p # backwards compatibility (to a bug)\n_check_size(c_void_p)\n\nclass c_bool(_SimpleCData):\n    _type_ = \"?\"\n\nfrom _ctypes import POINTER, pointer, _pointer_type_cache\n\nclass c_wchar_p(_SimpleCData):\n    _type_ = \"Z\"\n    def __repr__(self):\n        return \"%s(%s)\" % (self.__class__.__name__, c_void_p.from_buffer(self).value)\n\nclass c_wchar(_SimpleCData):\n    _type_ = \"u\"\n\ndef _reset_cache():\n    _pointer_type_cache.clear()\n    _c_functype_cache.clear()\n    if _os.name in (\"nt\", \"ce\"):\n        _win_functype_cache.clear()\n    # _SimpleCData.c_wchar_p_from_param\n    POINTER(c_wchar).from_param = c_wchar_p.from_param\n    # _SimpleCData.c_char_p_from_param\n    POINTER(c_char).from_param = c_char_p.from_param\n    _pointer_type_cache[None] = c_void_p\n    # XXX for whatever reasons, creating the first instance of a callback\n    # function is needed for the unittests on Win64 to succeed.  This MAY\n    # be a compiler bug, since the problem occurs only when _ctypes is\n    # compiled with the MS SDK compiler.  Or an uninitialized variable?\n    CFUNCTYPE(c_int)(lambda: None)\n\ndef create_unicode_buffer(init, size=None):\n    \"\"\"create_unicode_buffer(aString) -> character array\n    create_unicode_buffer(anInteger) -> character array\n    create_unicode_buffer(aString, anInteger) -> character array\n    \"\"\"\n    if isinstance(init, str):\n        if size is None:\n            size = len(init)+1\n        buftype = c_wchar * size\n        buf = buftype()\n        buf.value = init\n        return buf\n    elif isinstance(init, int):\n        buftype = c_wchar * init\n        buf = buftype()\n        return buf\n    raise TypeError(init)\n\n\n# XXX Deprecated\ndef SetPointerType(pointer, cls):\n    if _pointer_type_cache.get(cls, None) is not None:\n        raise RuntimeError(\"This type already exists in the cache\")\n    if id(pointer) not in _pointer_type_cache:\n        raise RuntimeError(\"What's this???\")\n    pointer.set_type(cls)\n    _pointer_type_cache[cls] = pointer\n    del _pointer_type_cache[id(pointer)]\n\n# XXX Deprecated\ndef ARRAY(typ, len):\n    return typ * len\n\n################################################################\n\n\nclass CDLL(object):\n    \"\"\"An instance of this class represents a loaded dll/shared\n    library, exporting functions using the standard C calling\n    convention (named 'cdecl' on Windows).\n\n    The exported functions can be accessed as attributes, or by\n    indexing with the function name.  Examples:\n\n    <obj>.qsort -> callable object\n    <obj>['qsort'] -> callable object\n\n    Calling the functions releases the Python GIL during the call and\n    reacquires it afterwards.\n    \"\"\"\n    _func_flags_ = _FUNCFLAG_CDECL\n    _func_restype_ = c_int\n    # default values for repr\n    _name = '<uninitialized>'\n    _handle = 0\n    _FuncPtr = None\n\n    def __init__(self, name, mode=DEFAULT_MODE, handle=None,\n                 use_errno=False,\n                 use_last_error=False):\n        self._name = name\n        flags = self._func_flags_\n        if use_errno:\n            flags |= _FUNCFLAG_USE_ERRNO\n        if use_last_error:\n            flags |= _FUNCFLAG_USE_LASTERROR\n\n        class _FuncPtr(_CFuncPtr):\n            _flags_ = flags\n            _restype_ = self._func_restype_\n        self._FuncPtr = _FuncPtr\n\n        if handle is None:\n            self._handle = _dlopen(self._name, mode)\n        else:\n            self._handle = handle\n\n    def __repr__(self):\n        return \"<%s '%s', handle %x at %#x>\" % \\\n               (self.__class__.__name__, self._name,\n                (self._handle & (_sys.maxsize*2 + 1)),\n                id(self) & (_sys.maxsize*2 + 1))\n\n    def __getattr__(self, name):\n        if name.startswith('__') and name.endswith('__'):\n            raise AttributeError(name)\n        func = self.__getitem__(name)\n        setattr(self, name, func)\n        return func\n\n    def __getitem__(self, name_or_ordinal):\n        func = self._FuncPtr((name_or_ordinal, self))\n        if not isinstance(name_or_ordinal, int):\n            func.__name__ = name_or_ordinal\n        return func\n\nclass PyDLL(CDLL):\n    \"\"\"This class represents the Python library itself.  It allows\n    accessing Python API functions.  The GIL is not released, and\n    Python exceptions are handled correctly.\n    \"\"\"\n    _func_flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI\n\nif _os.name in (\"nt\", \"ce\"):\n\n    class WinDLL(CDLL):\n        \"\"\"This class represents a dll exporting functions using the\n        Windows stdcall calling convention.\n        \"\"\"\n        _func_flags_ = _FUNCFLAG_STDCALL\n\n    # XXX Hm, what about HRESULT as normal parameter?\n    # Mustn't it derive from c_long then?\n    from _ctypes import _check_HRESULT, _SimpleCData\n    class HRESULT(_SimpleCData):\n        _type_ = \"l\"\n        # _check_retval_ is called with the function's result when it\n        # is used as restype.  It checks for the FAILED bit, and\n        # raises an OSError if it is set.\n        #\n        # The _check_retval_ method is implemented in C, so that the\n        # method definition itself is not included in the traceback\n        # when it raises an error - that is what we want (and Python\n        # doesn't have a way to raise an exception in the caller's\n        # frame).\n        _check_retval_ = _check_HRESULT\n\n    class OleDLL(CDLL):\n        \"\"\"This class represents a dll exporting functions using the\n        Windows stdcall calling convention, and returning HRESULT.\n        HRESULT error values are automatically raised as OSError\n        exceptions.\n        \"\"\"\n        _func_flags_ = _FUNCFLAG_STDCALL\n        _func_restype_ = HRESULT\n\nclass LibraryLoader(object):\n    def __init__(self, dlltype):\n        self._dlltype = dlltype\n\n    def __getattr__(self, name):\n        if name[0] == '_':\n            raise AttributeError(name)\n        dll = self._dlltype(name)\n        setattr(self, name, dll)\n        return dll\n\n    def __getitem__(self, name):\n        return getattr(self, name)\n\n    def LoadLibrary(self, name):\n        return self._dlltype(name)\n\ncdll = LibraryLoader(CDLL)\npydll = LibraryLoader(PyDLL)\n\nif _os.name in (\"nt\", \"ce\"):\n    pythonapi = PyDLL(\"python dll\", None, _sys.dllhandle)\nelif _sys.platform == \"cygwin\":\n    pythonapi = PyDLL(\"libpython%d.%d.dll\" % _sys.version_info[:2])\nelse:\n    pythonapi = PyDLL(None)\n\n\nif _os.name in (\"nt\", \"ce\"):\n    windll = LibraryLoader(WinDLL)\n    oledll = LibraryLoader(OleDLL)\n\n    if _os.name == \"nt\":\n        GetLastError = windll.kernel32.GetLastError\n    else:\n        GetLastError = windll.coredll.GetLastError\n    from _ctypes import get_last_error, set_last_error\n\n    def WinError(code=None, descr=None):\n        if code is None:\n            code = GetLastError()\n        if descr is None:\n            descr = FormatError(code).strip()\n        return OSError(None, descr, None, code)\n\nif sizeof(c_uint) == sizeof(c_void_p):\n    c_size_t = c_uint\n    c_ssize_t = c_int\nelif sizeof(c_ulong) == sizeof(c_void_p):\n    c_size_t = c_ulong\n    c_ssize_t = c_long\nelif sizeof(c_ulonglong) == sizeof(c_void_p):\n    c_size_t = c_ulonglong\n    c_ssize_t = c_longlong\n\n# functions\n\nfrom _ctypes import _memmove_addr, _memset_addr, _string_at_addr, _cast_addr\n\n## void *memmove(void *, const void *, size_t);\nmemmove = CFUNCTYPE(c_void_p, c_void_p, c_void_p, c_size_t)(_memmove_addr)\n\n## void *memset(void *, int, size_t)\nmemset = CFUNCTYPE(c_void_p, c_void_p, c_int, c_size_t)(_memset_addr)\n\ndef PYFUNCTYPE(restype, *argtypes):\n    class CFunctionType(_CFuncPtr):\n        _argtypes_ = argtypes\n        _restype_ = restype\n        _flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI\n    return CFunctionType\n\n_cast = PYFUNCTYPE(py_object, c_void_p, py_object, py_object)(_cast_addr)\ndef cast(obj, typ):\n    return _cast(obj, obj, typ)\n\n_string_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_string_at_addr)\ndef string_at(ptr, size=-1):\n    \"\"\"string_at(addr[, size]) -> string\n\n    Return the string at addr.\"\"\"\n    return _string_at(ptr, size)\n\ntry:\n    from _ctypes import _wstring_at_addr\nexcept ImportError:\n    pass\nelse:\n    _wstring_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_wstring_at_addr)\n    def wstring_at(ptr, size=-1):\n        \"\"\"wstring_at(addr[, size]) -> string\n\n        Return the string at addr.\"\"\"\n        return _wstring_at(ptr, size)\n\n\nif _os.name in (\"nt\", \"ce\"): # COM stuff\n    def DllGetClassObject(rclsid, riid, ppv):\n        try:\n            ccom = __import__(\"comtypes.server.inprocserver\", globals(), locals(), ['*'])\n        except ImportError:\n            return -2147221231 # CLASS_E_CLASSNOTAVAILABLE\n        else:\n            return ccom.DllGetClassObject(rclsid, riid, ppv)\n\n    def DllCanUnloadNow():\n        try:\n            ccom = __import__(\"comtypes.server.inprocserver\", globals(), locals(), ['*'])\n        except ImportError:\n            return 0 # S_OK\n        return ccom.DllCanUnloadNow()\n\nfrom ctypes._endian import BigEndianStructure, LittleEndianStructure\n\n# Fill in specifically-sized types\nc_int8 = c_byte\nc_uint8 = c_ubyte\nfor kind in [c_short, c_int, c_long, c_longlong]:\n    if sizeof(kind) == 2: c_int16 = kind\n    elif sizeof(kind) == 4: c_int32 = kind\n    elif sizeof(kind) == 8: c_int64 = kind\nfor kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:\n    if sizeof(kind) == 2: c_uint16 = kind\n    elif sizeof(kind) == 4: c_uint32 = kind\n    elif sizeof(kind) == 8: c_uint64 = kind\ndel(kind)\n\n_reset_cache()\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/library/os.rst": ":mod:`os` --- Miscellaneous operating system interfaces\n=======================================================\n\n.. module:: os\n   :synopsis: Miscellaneous operating system interfaces.\n\n**Source code:** :source:`Lib/os.py`\n\n--------------\n\nThis module provides a portable way of using operating system dependent\nfunctionality.  If you just want to read or write a file see :func:`open`, if\nyou want to manipulate paths, see the :mod:`os.path` module, and if you want to\nread all the lines in all the files on the command line see the :mod:`fileinput`\nmodule.  For creating temporary files and directories see the :mod:`tempfile`\nmodule, and for high-level file and directory handling see the :mod:`shutil`\nmodule.\n\nNotes on the availability of these functions:\n\n* The design of all built-in operating system dependent modules of Python is\n  such that as long as the same functionality is available, it uses the same\n  interface; for example, the function ``os.stat(path)`` returns stat\n  information about *path* in the same format (which happens to have originated\n  with the POSIX interface).\n\n* Extensions peculiar to a particular operating system are also available\n  through the :mod:`os` module, but using them is of course a threat to\n  portability.\n\n* All functions accepting path or file names accept both bytes and string\n  objects, and result in an object of the same type, if a path or file name is\n  returned.\n\n* An \"Availability: Unix\" note means that this function is commonly found on\n  Unix systems.  It does not make any claims about its existence on a specific\n  operating system.\n\n* If not separately noted, all functions that claim \"Availability: Unix\" are\n  supported on Mac OS X, which builds on a Unix core.\n\n.. Availability notes get their own line and occur at the end of the function\n.. documentation.\n\n.. note::\n\n   All functions in this module raise :exc:`OSError` in the case of invalid or\n   inaccessible file names and paths, or other arguments that have the correct\n   type, but are not accepted by the operating system.\n\n.. exception:: error\n\n   An alias for the built-in :exc:`OSError` exception.\n\n\n.. data:: name\n\n   The name of the operating system dependent module imported.  The following\n   names have currently been registered: ``'posix'``, ``'nt'``,\n   ``'ce'``, ``'java'``.\n\n   .. seealso::\n      :attr:`sys.platform` has a finer granularity.  :func:`os.uname` gives\n      system-dependent version information.\n\n      The :mod:`platform` module provides detailed checks for the\n      system's identity.\n\n\n.. _os-filenames:\n.. _filesystem-encoding:\n\nFile Names, Command Line Arguments, and Environment Variables\n-------------------------------------------------------------\n\nIn Python, file names, command line arguments, and environment variables are\nrepresented using the string type. On some systems, decoding these strings to\nand from bytes is necessary before passing them to the operating system. Python\nuses the file system encoding to perform this conversion (see\n:func:`sys.getfilesystemencoding`).\n\n.. versionchanged:: 3.1\n   On some systems, conversion using the file system encoding may fail. In this\n   case, Python uses the :ref:`surrogateescape encoding error handler\n   <surrogateescape>`, which means that undecodable bytes are replaced by a\n   Unicode character U+DCxx on decoding, and these are again translated to the\n   original byte on encoding.\n\n\nThe file system encoding must guarantee to successfully decode all bytes\nbelow 128. If the file system encoding fails to provide this guarantee, API\nfunctions may raise UnicodeErrors.\n\n\n.. _os-procinfo:\n\nProcess Parameters\n------------------\n\nThese functions and data items provide information and operate on the current\nprocess and user.\n\n\n.. function:: ctermid()\n\n   Return the filename corresponding to the controlling terminal of the process.\n\n   Availability: Unix.\n\n\n.. data:: environ\n\n   A :term:`mapping` object representing the string environment. For example,\n   ``environ['HOME']`` is the pathname of your home directory (on some platforms),\n   and is equivalent to ``getenv(\"HOME\")`` in C.\n\n   This mapping is captured the first time the :mod:`os` module is imported,\n   typically during Python startup as part of processing :file:`site.py`.  Changes\n   to the environment made after this time are not reflected in ``os.environ``,\n   except for changes made by modifying ``os.environ`` directly.\n\n   If the platform supports the :func:`putenv` function, this mapping may be used\n   to modify the environment as well as query the environment.  :func:`putenv` will\n   be called automatically when the mapping is modified.\n\n   On Unix, keys and values use :func:`sys.getfilesystemencoding` and\n   ``'surrogateescape'`` error handler. Use :data:`environb` if you would like\n   to use a different encoding.\n\n   .. note::\n\n      Calling :func:`putenv` directly does not change ``os.environ``, so it's better\n      to modify ``os.environ``.\n\n   .. note::\n\n      On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may\n      cause memory leaks.  Refer to the system documentation for\n      :c:func:`putenv`.\n\n   If :func:`putenv` is not provided, a modified copy of this mapping  may be\n   passed to the appropriate process-creation functions to cause  child processes\n   to use a modified environment.\n\n   If the platform supports the :func:`unsetenv` function, you can delete items in\n   this mapping to unset environment variables. :func:`unsetenv` will be called\n   automatically when an item is deleted from ``os.environ``, and when\n   one of the :meth:`pop` or :meth:`clear` methods is called.\n\n\n.. data:: environb\n\n   Bytes version of :data:`environ`: a :term:`mapping` object representing the\n   environment as byte strings. :data:`environ` and :data:`environb` are\n   synchronized (modify :data:`environb` updates :data:`environ`, and vice\n   versa).\n\n   :data:`environb` is only available if :data:`supports_bytes_environ` is\n   True.\n\n   .. versionadded:: 3.2\n\n\n.. function:: chdir(path)\n              fchdir(fd)\n              getcwd()\n   :noindex:\n\n   These functions are described in :ref:`os-file-dir`.\n\n\n.. function:: fsencode(filename)\n\n   Encode *filename* to the filesystem encoding with ``'surrogateescape'``\n   error handler, or ``'strict'`` on Windows; return :class:`bytes` unchanged.\n\n   :func:`fsdecode` is the reverse function.\n\n   .. versionadded:: 3.2\n\n\n.. function:: fsdecode(filename)\n\n   Decode *filename* from the filesystem encoding with ``'surrogateescape'``\n   error handler, or ``'strict'`` on Windows; return :class:`str` unchanged.\n\n   :func:`fsencode` is the reverse function.\n\n   .. versionadded:: 3.2\n\n\n.. function:: getenv(key, default=None)\n\n   Return the value of the environment variable *key* if it exists, or\n   *default* if it doesn't. *key*, *default* and the result are str.\n\n   On Unix, keys and values are decoded with :func:`sys.getfilesystemencoding`\n   and ``'surrogateescape'`` error handler. Use :func:`os.getenvb` if you\n   would like to use a different encoding.\n\n   Availability: most flavors of Unix, Windows.\n\n\n.. function:: getenvb(key, default=None)\n\n   Return the value of the environment variable *key* if it exists, or\n   *default* if it doesn't. *key*, *default* and the result are bytes.\n\n   :func:`getenvb` is only available if :data:`supports_bytes_environ`\n   is True.\n\n   Availability: most flavors of Unix.\n\n   .. versionadded:: 3.2\n\n\n.. function:: get_exec_path(env=None)\n\n   Returns the list of directories that will be searched for a named\n   executable, similar to a shell, when launching a process.\n   *env*, when specified, should be an environment variable dictionary\n   to lookup the PATH in.\n   By default, when *env* is ``None``, :data:`environ` is used.\n\n   .. versionadded:: 3.2\n\n\n.. function:: getegid()\n\n   Return the effective group id of the current process.  This corresponds to the\n   \"set id\" bit on the file being executed in the current process.\n\n   Availability: Unix.\n\n\n.. function:: geteuid()\n\n   .. index:: single: user; effective id\n\n   Return the current process's effective user id.\n\n   Availability: Unix.\n\n\n.. function:: getgid()\n\n   .. index:: single: process; group\n\n   Return the real group id of the current process.\n\n   Availability: Unix.\n\n\n.. function:: getgrouplist(user, group)\n\n   Return list of group ids that *user* belongs to. If *group* is not in the\n   list, it is included; typically, *group* is specified as the group ID\n   field from the password record for *user*.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: getgroups()\n\n   Return list of supplemental group ids associated with the current process.\n\n   Availability: Unix.\n\n   .. note::\n\n      On Mac OS X, :func:`getgroups` behavior differs somewhat from\n      other Unix platforms. If the Python interpreter was built with a\n      deployment target of :const:`10.5` or earlier, :func:`getgroups` returns\n      the list of effective group ids associated with the current user process;\n      this list is limited to a system-defined number of entries, typically 16,\n      and may be modified by calls to :func:`setgroups` if suitably privileged.\n      If built with a deployment target greater than :const:`10.5`,\n      :func:`getgroups` returns the current group access list for the user\n      associated with the effective user id of the process; the group access\n      list may change over the lifetime of the process, it is not affected by\n      calls to :func:`setgroups`, and its length is not limited to 16.  The\n      deployment target value, :const:`MACOSX_DEPLOYMENT_TARGET`, can be\n      obtained with :func:`sysconfig.get_config_var`.\n\n\n.. function:: getlogin()\n\n   Return the name of the user logged in on the controlling terminal of the\n   process.  For most purposes, it is more useful to use the environment\n   variables :envvar:`LOGNAME` or :envvar:`USERNAME` to find out who the user\n   is, or ``pwd.getpwuid(os.getuid())[0]`` to get the login name of the current\n   real user id.\n\n   Availability: Unix, Windows.\n\n\n.. function:: getpgid(pid)\n\n   Return the process group id of the process with process id *pid*. If *pid* is 0,\n   the process group id of the current process is returned.\n\n   Availability: Unix.\n\n.. function:: getpgrp()\n\n   .. index:: single: process; group\n\n   Return the id of the current process group.\n\n   Availability: Unix.\n\n\n.. function:: getpid()\n\n   .. index:: single: process; id\n\n   Return the current process id.\n\n\n.. function:: getppid()\n\n   .. index:: single: process; id of parent\n\n   Return the parent's process id.  When the parent process has exited, on Unix\n   the id returned is the one of the init process (1), on Windows it is still\n   the same id, which may be already reused by another process.\n\n   Availability: Unix, Windows.\n\n   .. versionchanged:: 3.2\n      Added support for Windows.\n\n\n.. function:: getpriority(which, who)\n\n   .. index:: single: process; scheduling priority\n\n   Get program scheduling priority.  The value *which* is one of\n   :const:`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and *who*\n   is interpreted relative to *which* (a process identifier for\n   :const:`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, and a\n   user ID for :const:`PRIO_USER`).  A zero value for *who* denotes\n   (respectively) the calling process, the process group of the calling process,\n   or the real user ID of the calling process.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. data:: PRIO_PROCESS\n          PRIO_PGRP\n          PRIO_USER\n\n   Parameters for the :func:`getpriority` and :func:`setpriority` functions.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: getresuid()\n\n   Return a tuple (ruid, euid, suid) denoting the current process's\n   real, effective, and saved user ids.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.2\n\n\n.. function:: getresgid()\n\n   Return a tuple (rgid, egid, sgid) denoting the current process's\n   real, effective, and saved group ids.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.2\n\n\n.. function:: getuid()\n\n   .. index:: single: user; id\n\n   Return the current process's real user id.\n\n   Availability: Unix.\n\n\n.. function:: initgroups(username, gid)\n\n   Call the system initgroups() to initialize the group access list with all of\n   the groups of which the specified username is a member, plus the specified\n   group id.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.2\n\n\n.. function:: putenv(key, value)\n\n   .. index:: single: environment variables; setting\n\n   Set the environment variable named *key* to the string *value*.  Such\n   changes to the environment affect subprocesses started with :func:`os.system`,\n   :func:`popen` or :func:`fork` and :func:`execv`.\n\n   Availability: most flavors of Unix, Windows.\n\n   .. note::\n\n      On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may\n      cause memory leaks. Refer to the system documentation for putenv.\n\n   When :func:`putenv` is supported, assignments to items in ``os.environ`` are\n   automatically translated into corresponding calls to :func:`putenv`; however,\n   calls to :func:`putenv` don't update ``os.environ``, so it is actually\n   preferable to assign to items of ``os.environ``.\n\n\n.. function:: setegid(egid)\n\n   Set the current process's effective group id.\n\n   Availability: Unix.\n\n\n.. function:: seteuid(euid)\n\n   Set the current process's effective user id.\n\n   Availability: Unix.\n\n\n.. function:: setgid(gid)\n\n   Set the current process' group id.\n\n   Availability: Unix.\n\n\n.. function:: setgroups(groups)\n\n   Set the list of supplemental group ids associated with the current process to\n   *groups*. *groups* must be a sequence, and each element must be an integer\n   identifying a group. This operation is typically available only to the superuser.\n\n   Availability: Unix.\n\n   .. note:: On Mac OS X, the length of *groups* may not exceed the\n      system-defined maximum number of effective group ids, typically 16.\n      See the documentation for :func:`getgroups` for cases where it may not\n      return the same group list set by calling setgroups().\n\n.. function:: setpgrp()\n\n   Call the system call :c:func:`setpgrp` or ``setpgrp(0, 0)`` depending on\n   which version is implemented (if any).  See the Unix manual for the semantics.\n\n   Availability: Unix.\n\n\n.. function:: setpgid(pid, pgrp)\n\n   Call the system call :c:func:`setpgid` to set the process group id of the\n   process with id *pid* to the process group with id *pgrp*.  See the Unix manual\n   for the semantics.\n\n   Availability: Unix.\n\n\n.. function:: setpriority(which, who, priority)\n\n   .. index:: single: process; scheduling priority\n\n   Set program scheduling priority. The value *which* is one of\n   :const:`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and *who*\n   is interpreted relative to *which* (a process identifier for\n   :const:`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, and a\n   user ID for :const:`PRIO_USER`). A zero value for *who* denotes\n   (respectively) the calling process, the process group of the calling process,\n   or the real user ID of the calling process.\n   *priority* is a value in the range -20 to 19. The default priority is 0;\n   lower priorities cause more favorable scheduling.\n\n   Availability: Unix\n\n   .. versionadded:: 3.3\n\n\n.. function:: setregid(rgid, egid)\n\n   Set the current process's real and effective group ids.\n\n   Availability: Unix.\n\n\n.. function:: setresgid(rgid, egid, sgid)\n\n   Set the current process's real, effective, and saved group ids.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.2\n\n\n.. function:: setresuid(ruid, euid, suid)\n\n   Set the current process's real, effective, and saved user ids.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.2\n\n\n.. function:: setreuid(ruid, euid)\n\n   Set the current process's real and effective user ids.\n\n   Availability: Unix.\n\n\n.. function:: getsid(pid)\n\n   Call the system call :c:func:`getsid`.  See the Unix manual for the semantics.\n\n   Availability: Unix.\n\n\n.. function:: setsid()\n\n   Call the system call :c:func:`setsid`.  See the Unix manual for the semantics.\n\n   Availability: Unix.\n\n\n.. function:: setuid(uid)\n\n   .. index:: single: user; id, setting\n\n   Set the current process's user id.\n\n   Availability: Unix.\n\n\n.. placed in this section since it relates to errno.... a little weak\n.. function:: strerror(code)\n\n   Return the error message corresponding to the error code in *code*.\n   On platforms where :c:func:`strerror` returns ``NULL`` when given an unknown\n   error number, :exc:`ValueError` is raised.\n\n\n.. data:: supports_bytes_environ\n\n   ``True`` if the native OS type of the environment is bytes (eg. ``False`` on\n   Windows).\n\n   .. versionadded:: 3.2\n\n\n.. function:: umask(mask)\n\n   Set the current numeric umask and return the previous umask.\n\n\n.. function:: uname()\n\n   .. index::\n      single: gethostname() (in module socket)\n      single: gethostbyaddr() (in module socket)\n\n   Returns information identifying the current operating system.\n   The return value is an object with five attributes:\n\n   * :attr:`sysname` - operating system name\n   * :attr:`nodename` - name of machine on network (implementation-defined)\n   * :attr:`release` - operating system release\n   * :attr:`version` - operating system version\n   * :attr:`machine` - hardware identifier\n\n   For backwards compatibility, this object is also iterable, behaving\n   like a five-tuple containing :attr:`sysname`, :attr:`nodename`,\n   :attr:`release`, :attr:`version`, and :attr:`machine`\n   in that order.\n\n   Some systems truncate :attr:`nodename` to 8 characters or to the\n   leading component; a better way to get the hostname is\n   :func:`socket.gethostname`  or even\n   ``socket.gethostbyaddr(socket.gethostname())``.\n\n   Availability: recent flavors of Unix.\n\n   .. versionchanged:: 3.3\n      Return type changed from a tuple to a tuple-like object\n      with named attributes.\n\n\n.. function:: unsetenv(key)\n\n   .. index:: single: environment variables; deleting\n\n   Unset (delete) the environment variable named *key*. Such changes to the\n   environment affect subprocesses started with :func:`os.system`, :func:`popen` or\n   :func:`fork` and :func:`execv`.\n\n   When :func:`unsetenv` is supported, deletion of items in ``os.environ`` is\n   automatically translated into a corresponding call to :func:`unsetenv`; however,\n   calls to :func:`unsetenv` don't update ``os.environ``, so it is actually\n   preferable to delete items of ``os.environ``.\n\n   Availability: most flavors of Unix, Windows.\n\n\n.. _os-newstreams:\n\nFile Object Creation\n--------------------\n\nThis function creates new :term:`file objects <file object>`.  (See also\n:func:`~os.open` for opening file descriptors.)\n\n\n.. function:: fdopen(fd, *args, **kwargs)\n\n   Return an open file object connected to the file descriptor *fd*.  This is an\n   alias of the :func:`open` built-in function and accepts the same arguments.\n   The only difference is that the first argument of :func:`fdopen` must always\n   be an integer.\n\n\n.. _os-fd-ops:\n\nFile Descriptor Operations\n--------------------------\n\nThese functions operate on I/O streams referenced using file descriptors.\n\nFile descriptors are small integers corresponding to a file that has been opened\nby the current process.  For example, standard input is usually file descriptor\n0, standard output is 1, and standard error is 2.  Further files opened by a\nprocess will then be assigned 3, 4, 5, and so forth.  The name \"file descriptor\"\nis slightly deceptive; on Unix platforms, sockets and pipes are also referenced\nby file descriptors.\n\nThe :meth:`~io.IOBase.fileno` method can be used to obtain the file descriptor\nassociated with a :term:`file object` when required.  Note that using the file\ndescriptor directly will bypass the file object methods, ignoring aspects such\nas internal buffering of data.\n\n\n.. function:: close(fd)\n\n   Close file descriptor *fd*.\n\n   .. note::\n\n      This function is intended for low-level I/O and must be applied to a file\n      descriptor as returned by :func:`os.open` or :func:`pipe`.  To close a \"file\n      object\" returned by the built-in function :func:`open` or by :func:`popen` or\n      :func:`fdopen`, use its :meth:`~io.IOBase.close` method.\n\n\n.. function:: closerange(fd_low, fd_high)\n\n   Close all file descriptors from *fd_low* (inclusive) to *fd_high* (exclusive),\n   ignoring errors. Equivalent to (but much faster than)::\n\n      for fd in range(fd_low, fd_high):\n          try:\n              os.close(fd)\n          except OSError:\n              pass\n\n\n.. function:: device_encoding(fd)\n\n   Return a string describing the encoding of the device associated with *fd*\n   if it is connected to a terminal; else return :const:`None`.\n\n\n.. function:: dup(fd)\n\n   Return a duplicate of file descriptor *fd*. The new file descriptor is\n   :ref:`non-inheritable <fd_inheritance>`.\n\n   On Windows, when duplicating a standard stream (0: stdin, 1: stdout,\n   2: stderr), the new file descriptor is :ref:`inheritable\n   <fd_inheritance>`.\n\n   .. versionchanged:: 3.4\n      The new file descriptor is now non-inheritable.\n\n\n.. function:: dup2(fd, fd2, inheritable=True)\n\n   Duplicate file descriptor *fd* to *fd2*, closing the latter first if necessary.\n   The file descriptor *fd2* is :ref:`inheritable <fd_inheritance>` by default,\n   or non-inheritable if *inheritable* is ``False``.\n\n   .. versionchanged:: 3.4\n      Add the optional *inheritable* parameter.\n\n\n.. function:: fchmod(fd, mode)\n\n   Change the mode of the file given by *fd* to the numeric *mode*.  See the\n   docs for :func:`chmod` for possible values of *mode*.  As of Python 3.3, this\n   is equivalent to ``os.chmod(fd, mode)``.\n\n   Availability: Unix.\n\n\n.. function:: fchown(fd, uid, gid)\n\n   Change the owner and group id of the file given by *fd* to the numeric *uid*\n   and *gid*.  To leave one of the ids unchanged, set it to -1.  See\n   :func:`chown`.  As of Python 3.3, this is equivalent to ``os.chown(fd, uid,\n   gid)``.\n\n   Availability: Unix.\n\n\n.. function:: fdatasync(fd)\n\n   Force write of file with filedescriptor *fd* to disk. Does not force update of\n   metadata.\n\n   Availability: Unix.\n\n   .. note::\n      This function is not available on MacOS.\n\n\n.. function:: fpathconf(fd, name)\n\n   Return system configuration information relevant to an open file. *name*\n   specifies the configuration value to retrieve; it may be a string which is the\n   name of a defined system value; these names are specified in a number of\n   standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define\n   additional names as well.  The names known to the host operating system are\n   given in the ``pathconf_names`` dictionary.  For configuration variables not\n   included in that mapping, passing an integer for *name* is also accepted.\n\n   If *name* is a string and is not known, :exc:`ValueError` is raised.  If a\n   specific value for *name* is not supported by the host system, even if it is\n   included in ``pathconf_names``, an :exc:`OSError` is raised with\n   :const:`errno.EINVAL` for the error number.\n\n   As of Python 3.3, this is equivalent to ``os.pathconf(fd, name)``.\n\n   Availability: Unix.\n\n\n.. function:: fstat(fd)\n\n   Get the status of the file descriptor *fd*. Return a :class:`stat_result`\n   object.\n\n   As of Python 3.3, this is equivalent to ``os.stat(fd)``.\n\n   .. seealso::\n\n      The :func:`.stat` function.\n\n\n.. function:: fstatvfs(fd)\n\n   Return information about the filesystem containing the file associated with\n   file descriptor *fd*, like :func:`statvfs`.  As of Python 3.3, this is\n   equivalent to ``os.statvfs(fd)``.\n\n   Availability: Unix.\n\n\n.. function:: fsync(fd)\n\n   Force write of file with filedescriptor *fd* to disk.  On Unix, this calls the\n   native :c:func:`fsync` function; on Windows, the MS :c:func:`_commit` function.\n\n   If you're starting with a buffered Python :term:`file object` *f*, first do\n   ``f.flush()``, and then do ``os.fsync(f.fileno())``, to ensure that all internal\n   buffers associated with *f* are written to disk.\n\n   Availability: Unix, Windows.\n\n\n.. function:: ftruncate(fd, length)\n\n   Truncate the file corresponding to file descriptor *fd*, so that it is at\n   most *length* bytes in size.  As of Python 3.3, this is equivalent to\n   ``os.truncate(fd, length)``.\n\n   Availability: Unix, Windows.\n\n   .. versionchanged:: 3.5\n      Added support for Windows\n\n.. function:: get_blocking(fd)\n\n   Get the blocking mode of the file descriptor: ``False`` if the\n   :data:`O_NONBLOCK` flag is set, ``True`` if the flag is cleared.\n\n   See also :func:`set_blocking` and :meth:`socket.socket.setblocking`.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.5\n\n.. function:: isatty(fd)\n\n   Return ``True`` if the file descriptor *fd* is open and connected to a\n   tty(-like) device, else ``False``.\n\n\n.. function:: lockf(fd, cmd, len)\n\n   Apply, test or remove a POSIX lock on an open file descriptor.\n   *fd* is an open file descriptor.\n   *cmd* specifies the command to use - one of :data:`F_LOCK`, :data:`F_TLOCK`,\n   :data:`F_ULOCK` or :data:`F_TEST`.\n   *len* specifies the section of the file to lock.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. data:: F_LOCK\n          F_TLOCK\n          F_ULOCK\n          F_TEST\n\n   Flags that specify what action :func:`lockf` will take.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: lseek(fd, pos, how)\n\n   Set the current position of file descriptor *fd* to position *pos*, modified\n   by *how*: :const:`SEEK_SET` or ``0`` to set the position relative to the\n   beginning of the file; :const:`SEEK_CUR` or ``1`` to set it relative to the\n   current position; :const:`SEEK_END` or ``2`` to set it relative to the end of\n   the file. Return the new cursor position in bytes, starting from the beginning.\n\n\n.. data:: SEEK_SET\n          SEEK_CUR\n          SEEK_END\n\n   Parameters to the :func:`lseek` function. Their values are 0, 1, and 2,\n   respectively.\n\n   .. versionadded:: 3.3\n      Some operating systems could support additional values, like\n      :data:`os.SEEK_HOLE` or :data:`os.SEEK_DATA`.\n\n\n.. function:: open(path, flags, mode=0o777, *, dir_fd=None)\n\n   Open the file *path* and set various flags according to *flags* and possibly\n   its mode according to *mode*.  When computing *mode*, the current umask value\n   is first masked out.  Return the file descriptor for the newly opened file.\n   The new file descriptor is :ref:`non-inheritable <fd_inheritance>`.\n\n   For a description of the flag and mode values, see the C run-time documentation;\n   flag constants (like :const:`O_RDONLY` and :const:`O_WRONLY`) are defined in\n   the :mod:`os` module.  In particular, on Windows adding\n   :const:`O_BINARY` is needed to open files in binary mode.\n\n   This function can support :ref:`paths relative to directory descriptors\n   <dir_fd>` with the *dir_fd* parameter.\n\n   .. versionchanged:: 3.4\n      The new file descriptor is now non-inheritable.\n\n   .. note::\n\n      This function is intended for low-level I/O.  For normal usage, use the\n      built-in function :func:`open`, which returns a :term:`file object` with\n      :meth:`~file.read` and :meth:`~file.write` methods (and many more).  To\n      wrap a file descriptor in a file object, use :func:`fdopen`.\n\n   .. versionadded:: 3.3\n      The *dir_fd* argument.\n\n   .. versionchanged:: 3.5\n      If the system call is interrupted and the signal handler does not raise an\n      exception, the function now retries the system call instead of raising an\n      :exc:`InterruptedError` exception (see :pep:`475` for the rationale).\n\nThe following constants are options for the *flags* parameter to the\n:func:`~os.open` function.  They can be combined using the bitwise OR operator\n``|``.  Some of them are not available on all platforms.  For descriptions of\ntheir availability and use, consult the :manpage:`open(2)` manual page on Unix\nor `the MSDN <https://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx>`_ on Windows.\n\n\n.. data:: O_RDONLY\n          O_WRONLY\n          O_RDWR\n          O_APPEND\n          O_CREAT\n          O_EXCL\n          O_TRUNC\n\n   The above constants are available on Unix and Windows.\n\n\n.. data:: O_DSYNC\n          O_RSYNC\n          O_SYNC\n          O_NDELAY\n          O_NONBLOCK\n          O_NOCTTY\n          O_CLOEXEC\n\n   The above constants are only available on Unix.\n\n   .. versionchanged:: 3.3\n      Add :data:`O_CLOEXEC` constant.\n\n.. data:: O_BINARY\n          O_NOINHERIT\n          O_SHORT_LIVED\n          O_TEMPORARY\n          O_RANDOM\n          O_SEQUENTIAL\n          O_TEXT\n\n   The above constants are only available on Windows.\n\n\n.. data:: O_ASYNC\n          O_DIRECT\n          O_DIRECTORY\n          O_NOFOLLOW\n          O_NOATIME\n          O_PATH\n          O_TMPFILE\n          O_SHLOCK\n          O_EXLOCK\n\n   The above constants are extensions and not present if they are not defined by\n   the C library.\n\n   .. versionchanged:: 3.4\n      Add :data:`O_PATH` on systems that support it.\n      Add :data:`O_TMPFILE`, only available on Linux Kernel 3.11\n        or newer.\n\n\n.. function:: openpty()\n\n   .. index:: module: pty\n\n   Open a new pseudo-terminal pair. Return a pair of file descriptors\n   ``(master, slave)`` for the pty and the tty, respectively. The new file\n   descriptors are :ref:`non-inheritable <fd_inheritance>`. For a (slightly) more\n   portable approach, use the :mod:`pty` module.\n\n   Availability: some flavors of Unix.\n\n   .. versionchanged:: 3.4\n      The new file descriptors are now non-inheritable.\n\n\n.. function:: pipe()\n\n   Create a pipe.  Return a pair of file descriptors ``(r, w)`` usable for\n   reading and writing, respectively. The new file descriptor is\n   :ref:`non-inheritable <fd_inheritance>`.\n\n   Availability: Unix, Windows.\n\n   .. versionchanged:: 3.4\n      The new file descriptors are now non-inheritable.\n\n\n.. function:: pipe2(flags)\n\n   Create a pipe with *flags* set atomically.\n   *flags* can be constructed by ORing together one or more of these values:\n   :data:`O_NONBLOCK`, :data:`O_CLOEXEC`.\n   Return a pair of file descriptors ``(r, w)`` usable for reading and writing,\n   respectively.\n\n   Availability: some flavors of Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: posix_fallocate(fd, offset, len)\n\n   Ensures that enough disk space is allocated for the file specified by *fd*\n   starting from *offset* and continuing for *len* bytes.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: posix_fadvise(fd, offset, len, advice)\n\n   Announces an intention to access data in a specific pattern thus allowing\n   the kernel to make optimizations.\n   The advice applies to the region of the file specified by *fd* starting at\n   *offset* and continuing for *len* bytes.\n   *advice* is one of :data:`POSIX_FADV_NORMAL`, :data:`POSIX_FADV_SEQUENTIAL`,\n   :data:`POSIX_FADV_RANDOM`, :data:`POSIX_FADV_NOREUSE`,\n   :data:`POSIX_FADV_WILLNEED` or :data:`POSIX_FADV_DONTNEED`.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. data:: POSIX_FADV_NORMAL\n          POSIX_FADV_SEQUENTIAL\n          POSIX_FADV_RANDOM\n          POSIX_FADV_NOREUSE\n          POSIX_FADV_WILLNEED\n          POSIX_FADV_DONTNEED\n\n   Flags that can be used in *advice* in :func:`posix_fadvise` that specify\n   the access pattern that is likely to be used.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: pread(fd, buffersize, offset)\n\n   Read from a file descriptor, *fd*, at a position of *offset*. It will read up\n   to *buffersize* number of bytes. The file offset remains unchanged.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: pwrite(fd, str, offset)\n\n   Write *bytestring* to a file descriptor, *fd*, from *offset*,\n   leaving the file offset unchanged.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: read(fd, n)\n\n   Read at most *n* bytes from file descriptor *fd*. Return a bytestring containing the\n   bytes read.  If the end of the file referred to by *fd* has been reached, an\n   empty bytes object is returned.\n\n   .. note::\n\n      This function is intended for low-level I/O and must be applied to a file\n      descriptor as returned by :func:`os.open` or :func:`pipe`.  To read a\n      \"file object\" returned by the built-in function :func:`open` or by\n      :func:`popen` or :func:`fdopen`, or :data:`sys.stdin`, use its\n      :meth:`~file.read` or :meth:`~file.readline` methods.\n\n   .. versionchanged:: 3.5\n      If the system call is interrupted and the signal handler does not raise an\n      exception, the function now retries the system call instead of raising an\n      :exc:`InterruptedError` exception (see :pep:`475` for the rationale).\n\n\n.. function:: sendfile(out, in, offset, count)\n              sendfile(out, in, offset, count, [headers], [trailers], flags=0)\n\n   Copy *count* bytes from file descriptor *in* to file descriptor *out*\n   starting at *offset*.\n   Return the number of bytes sent. When EOF is reached return 0.\n\n   The first function notation is supported by all platforms that define\n   :func:`sendfile`.\n\n   On Linux, if *offset* is given as ``None``, the bytes are read from the\n   current position of *in* and the position of *in* is updated.\n\n   The second case may be used on Mac OS X and FreeBSD where *headers* and\n   *trailers* are arbitrary sequences of buffers that are written before and\n   after the data from *in* is written. It returns the same as the first case.\n\n   On Mac OS X and FreeBSD, a value of 0 for *count* specifies to send until\n   the end of *in* is reached.\n\n   All platforms support sockets as *out* file descriptor, and some platforms\n   allow other types (e.g. regular file, pipe) as well.\n\n   Cross-platform applications should not use *headers*, *trailers* and *flags*\n   arguments.\n\n   Availability: Unix.\n\n   .. note::\n\n      For a higher-level wrapper of :func:`sendfile`, see\n      :meth:`socket.socket.sendfile`.\n\n   .. versionadded:: 3.3\n\n\n.. function:: set_blocking(fd, blocking)\n\n   Set the blocking mode of the specified file descriptor. Set the\n   :data:`O_NONBLOCK` flag if blocking is ``False``, clear the flag otherwise.\n\n   See also :func:`get_blocking` and :meth:`socket.socket.setblocking`.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.5\n\n\n.. data:: SF_NODISKIO\n          SF_MNOWAIT\n          SF_SYNC\n\n   Parameters to the :func:`sendfile` function, if the implementation supports\n   them.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: readv(fd, buffers)\n\n   Read from a file descriptor *fd* into a number of mutable :term:`bytes-like\n   objects <bytes-like object>` *buffers*. :func:`~os.readv` will transfer data\n   into each buffer until it is full and then move on to the next buffer in the\n   sequence to hold the rest of the data. :func:`~os.readv` returns the total\n   number of bytes read (which may be less than the total capacity of all the\n   objects).\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: tcgetpgrp(fd)\n\n   Return the process group associated with the terminal given by *fd* (an open\n   file descriptor as returned by :func:`os.open`).\n\n   Availability: Unix.\n\n\n.. function:: tcsetpgrp(fd, pg)\n\n   Set the process group associated with the terminal given by *fd* (an open file\n   descriptor as returned by :func:`os.open`) to *pg*.\n\n   Availability: Unix.\n\n\n.. function:: ttyname(fd)\n\n   Return a string which specifies the terminal device associated with\n   file descriptor *fd*.  If *fd* is not associated with a terminal device, an\n   exception is raised.\n\n   Availability: Unix.\n\n\n.. function:: write(fd, str)\n\n   Write the bytestring in *str* to file descriptor *fd*. Return the number of\n   bytes actually written.\n\n   .. note::\n\n      This function is intended for low-level I/O and must be applied to a file\n      descriptor as returned by :func:`os.open` or :func:`pipe`.  To write a \"file\n      object\" returned by the built-in function :func:`open` or by :func:`popen` or\n      :func:`fdopen`, or :data:`sys.stdout` or :data:`sys.stderr`, use its\n      :meth:`~file.write` method.\n\n   .. versionchanged:: 3.5\n      If the system call is interrupted and the signal handler does not raise an\n      exception, the function now retries the system call instead of raising an\n      :exc:`InterruptedError` exception (see :pep:`475` for the rationale).\n\n\n.. function:: writev(fd, buffers)\n\n   Write the contents of *buffers* to file descriptor *fd*. *buffers* must be a\n   sequence of :term:`bytes-like objects <bytes-like object>`. Buffers are\n   processed in array order. Entire contents of first buffer is written before\n   proceeding to second, and so on. The operating system may set a limit\n   (sysconf() value SC_IOV_MAX) on the number of buffers that can be used.\n\n   :func:`~os.writev` writes the contents of each object to the file descriptor\n   and returns the total number of bytes written.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. _terminal-size:\n\nQuerying the size of a terminal\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 3.3\n\n.. function:: get_terminal_size(fd=STDOUT_FILENO)\n\n   Return the size of the terminal window as ``(columns, lines)``,\n   tuple of type :class:`terminal_size`.\n\n   The optional argument ``fd`` (default ``STDOUT_FILENO``, or standard\n   output) specifies which file descriptor should be queried.\n\n   If the file descriptor is not connected to a terminal, an :exc:`OSError`\n   is raised.\n\n   :func:`shutil.get_terminal_size` is the high-level function which\n   should normally be used, ``os.get_terminal_size`` is the low-level\n   implementation.\n\n   Availability: Unix, Windows.\n\n.. class:: terminal_size\n\n   A subclass of tuple, holding ``(columns, lines)`` of the terminal window size.\n\n   .. attribute:: columns\n\n      Width of the terminal window in characters.\n\n   .. attribute:: lines\n\n      Height of the terminal window in characters.\n\n\n.. _fd_inheritance:\n\nInheritance of File Descriptors\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 3.4\n\nA file descriptor has an \"inheritable\" flag which indicates if the file descriptor\ncan be inherited by child processes.  Since Python 3.4, file descriptors\ncreated by Python are non-inheritable by default.\n\nOn UNIX, non-inheritable file descriptors are closed in child processes at the\nexecution of a new program, other file descriptors are inherited.\n\nOn Windows, non-inheritable handles and file descriptors are closed in child\nprocesses, except for standard streams (file descriptors 0, 1 and 2: stdin, stdout\nand stderr), which are always inherited.  Using :func:`spawn\\* <spawnl>` functions,\nall inheritable handles and all inheritable file descriptors are inherited.\nUsing the :mod:`subprocess` module, all file descriptors except standard\nstreams are closed, and inheritable handles are only inherited if the\n*close_fds* parameter is ``False``.\n\n.. function:: get_inheritable(fd)\n\n   Get the \"inheritable\" flag of the specified file descriptor (a boolean).\n\n.. function:: set_inheritable(fd, inheritable)\n\n   Set the \"inheritable\" flag of the specified file descriptor.\n\n.. function:: get_handle_inheritable(handle)\n\n   Get the \"inheritable\" flag of the specified handle (a boolean).\n\n   Availability: Windows.\n\n.. function:: set_handle_inheritable(handle, inheritable)\n\n   Set the \"inheritable\" flag of the specified handle.\n\n   Availability: Windows.\n\n\n.. _os-file-dir:\n\nFiles and Directories\n---------------------\n\nOn some Unix platforms, many of these functions support one or more of these\nfeatures:\n\n.. _path_fd:\n\n* **specifying a file descriptor:**\n  For some functions, the *path* argument can be not only a string giving a path\n  name, but also a file descriptor.  The function will then operate on the file\n  referred to by the descriptor.  (For POSIX systems, Python will call the\n  ``f...`` version of the function.)\n\n  You can check whether or not *path* can be specified as a file descriptor on\n  your platform using :data:`os.supports_fd`.  If it is unavailable, using it\n  will raise a :exc:`NotImplementedError`.\n\n  If the function also supports *dir_fd* or *follow_symlinks* arguments, it is\n  an error to specify one of those when supplying *path* as a file descriptor.\n\n.. _dir_fd:\n\n* **paths relative to directory descriptors:** If *dir_fd* is not ``None``, it\n  should be a file descriptor referring to a directory, and the path to operate\n  on should be relative; path will then be relative to that directory.  If the\n  path is absolute, *dir_fd* is ignored.  (For POSIX systems, Python will call\n  the ``...at`` or ``f...at`` version of the function.)\n\n  You can check whether or not *dir_fd* is supported on your platform using\n  :data:`os.supports_dir_fd`.  If it is unavailable, using it will raise a\n  :exc:`NotImplementedError`.\n\n.. _follow_symlinks:\n\n* **not following symlinks:** If *follow_symlinks* is\n  ``False``, and the last element of the path to operate on is a symbolic link,\n  the function will operate on the symbolic link itself instead of the file the\n  link points to.  (For POSIX systems, Python will call the ``l...`` version of\n  the function.)\n\n  You can check whether or not *follow_symlinks* is supported on your platform\n  using :data:`os.supports_follow_symlinks`.  If it is unavailable, using it\n  will raise a :exc:`NotImplementedError`.\n\n\n\n.. function:: access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)\n\n   Use the real uid/gid to test for access to *path*.  Note that most operations\n   will use the effective uid/gid, therefore this routine can be used in a\n   suid/sgid environment to test if the invoking user has the specified access to\n   *path*.  *mode* should be :const:`F_OK` to test the existence of *path*, or it\n   can be the inclusive OR of one or more of :const:`R_OK`, :const:`W_OK`, and\n   :const:`X_OK` to test permissions.  Return :const:`True` if access is allowed,\n   :const:`False` if not. See the Unix man page :manpage:`access(2)` for more\n   information.\n\n   This function can support specifying :ref:`paths relative to directory\n   descriptors <dir_fd>` and :ref:`not following symlinks <follow_symlinks>`.\n\n   If *effective_ids* is ``True``, :func:`access` will perform its access\n   checks using the effective uid/gid instead of the real uid/gid.\n   *effective_ids* may not be supported on your platform; you can check whether\n   or not it is available using :data:`os.supports_effective_ids`.  If it is\n   unavailable, using it will raise a :exc:`NotImplementedError`.\n\n   .. note::\n\n      Using :func:`access` to check if a user is authorized to e.g. open a file\n      before actually doing so using :func:`open` creates a security hole,\n      because the user might exploit the short time interval between checking\n      and opening the file to manipulate it. It's preferable to use :term:`EAFP`\n      techniques. For example::\n\n         if os.access(\"myfile\", os.R_OK):\n             with open(\"myfile\") as fp:\n                 return fp.read()\n         return \"some default data\"\n\n      is better written as::\n\n         try:\n             fp = open(\"myfile\")\n         except PermissionError:\n             return \"some default data\"\n         else:\n             with fp:\n                 return fp.read()\n\n   .. note::\n\n      I/O operations may fail even when :func:`access` indicates that they would\n      succeed, particularly for operations on network filesystems which may have\n      permissions semantics beyond the usual POSIX permission-bit model.\n\n   .. versionchanged:: 3.3\n      Added the *dir_fd*, *effective_ids*, and *follow_symlinks* parameters.\n\n\n.. data:: F_OK\n          R_OK\n          W_OK\n          X_OK\n\n   Values to pass as the *mode* parameter of :func:`access` to test the\n   existence, readability, writability and executability of *path*,\n   respectively.\n\n\n.. function:: chdir(path)\n\n   .. index:: single: directory; changing\n\n   Change the current working directory to *path*.\n\n   This function can support :ref:`specifying a file descriptor <path_fd>`.  The\n   descriptor must refer to an opened directory, not an open file.\n\n   .. versionadded:: 3.3\n      Added support for specifying *path* as a file descriptor\n      on some platforms.\n\n\n.. function:: chflags(path, flags, *, follow_symlinks=True)\n\n   Set the flags of *path* to the numeric *flags*. *flags* may take a combination\n   (bitwise OR) of the following values (as defined in the :mod:`stat` module):\n\n   * :data:`stat.UF_NODUMP`\n   * :data:`stat.UF_IMMUTABLE`\n   * :data:`stat.UF_APPEND`\n   * :data:`stat.UF_OPAQUE`\n   * :data:`stat.UF_NOUNLINK`\n   * :data:`stat.UF_COMPRESSED`\n   * :data:`stat.UF_HIDDEN`\n   * :data:`stat.SF_ARCHIVED`\n   * :data:`stat.SF_IMMUTABLE`\n   * :data:`stat.SF_APPEND`\n   * :data:`stat.SF_NOUNLINK`\n   * :data:`stat.SF_SNAPSHOT`\n\n   This function can support :ref:`not following symlinks <follow_symlinks>`.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n      The *follow_symlinks* argument.\n\n\n.. function:: chmod(path, mode, *, dir_fd=None, follow_symlinks=True)\n\n   Change the mode of *path* to the numeric *mode*. *mode* may take one of the\n   following values (as defined in the :mod:`stat` module) or bitwise ORed\n   combinations of them:\n\n   * :data:`stat.S_ISUID`\n   * :data:`stat.S_ISGID`\n   * :data:`stat.S_ENFMT`\n   * :data:`stat.S_ISVTX`\n   * :data:`stat.S_IREAD`\n   * :data:`stat.S_IWRITE`\n   * :data:`stat.S_IEXEC`\n   * :data:`stat.S_IRWXU`\n   * :data:`stat.S_IRUSR`\n   * :data:`stat.S_IWUSR`\n   * :data:`stat.S_IXUSR`\n   * :data:`stat.S_IRWXG`\n   * :data:`stat.S_IRGRP`\n   * :data:`stat.S_IWGRP`\n   * :data:`stat.S_IXGRP`\n   * :data:`stat.S_IRWXO`\n   * :data:`stat.S_IROTH`\n   * :data:`stat.S_IWOTH`\n   * :data:`stat.S_IXOTH`\n\n   This function can support :ref:`specifying a file descriptor <path_fd>`,\n   :ref:`paths relative to directory descriptors <dir_fd>` and :ref:`not\n   following symlinks <follow_symlinks>`.\n\n   .. note::\n\n      Although Windows supports :func:`chmod`, you can only set the file's\n      read-only flag with it (via the ``stat.S_IWRITE`` and ``stat.S_IREAD``\n      constants or a corresponding integer value).  All other bits are ignored.\n\n   .. versionadded:: 3.3\n      Added support for specifying *path* as an open file descriptor,\n      and the *dir_fd* and *follow_symlinks* arguments.\n\n\n.. function:: chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)\n\n   Change the owner and group id of *path* to the numeric *uid* and *gid*.  To\n   leave one of the ids unchanged, set it to -1.\n\n   This function can support :ref:`specifying a file descriptor <path_fd>`,\n   :ref:`paths relative to directory descriptors <dir_fd>` and :ref:`not\n   following symlinks <follow_symlinks>`.\n\n   See :func:`shutil.chown` for a higher-level function that accepts names in\n   addition to numeric ids.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n      Added support for specifying an open file descriptor for *path*,\n      and the *dir_fd* and *follow_symlinks* arguments.\n\n\n.. function:: chroot(path)\n\n   Change the root directory of the current process to *path*.\n\n   Availability: Unix.\n\n\n.. function:: fchdir(fd)\n\n   Change the current working directory to the directory represented by the file\n   descriptor *fd*.  The descriptor must refer to an opened directory, not an\n   open file.  As of Python 3.3, this is equivalent to ``os.chdir(fd)``.\n\n   Availability: Unix.\n\n\n.. function:: getcwd()\n\n   Return a string representing the current working directory.\n\n\n.. function:: getcwdb()\n\n   Return a bytestring representing the current working directory.\n\n\n.. function:: lchflags(path, flags)\n\n   Set the flags of *path* to the numeric *flags*, like :func:`chflags`, but do\n   not follow symbolic links.  As of Python 3.3, this is equivalent to\n   ``os.chflags(path, flags, follow_symlinks=False)``.\n\n   Availability: Unix.\n\n\n.. function:: lchmod(path, mode)\n\n   Change the mode of *path* to the numeric *mode*. If path is a symlink, this\n   affects the symlink rather than the target.  See the docs for :func:`chmod`\n   for possible values of *mode*.  As of Python 3.3, this is equivalent to\n   ``os.chmod(path, mode, follow_symlinks=False)``.\n\n   Availability: Unix.\n\n\n.. function:: lchown(path, uid, gid)\n\n   Change the owner and group id of *path* to the numeric *uid* and *gid*.  This\n   function will not follow symbolic links.  As of Python 3.3, this is equivalent\n   to ``os.chown(path, uid, gid, follow_symlinks=False)``.\n\n   Availability: Unix.\n\n\n.. function:: link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)\n\n   Create a hard link pointing to *src* named *dst*.\n\n   This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to\n   supply :ref:`paths relative to directory descriptors <dir_fd>`, and :ref:`not\n   following symlinks <follow_symlinks>`.\n\n   Availability: Unix, Windows.\n\n   .. versionchanged:: 3.2\n      Added Windows support.\n\n   .. versionadded:: 3.3\n      Added the *src_dir_fd*, *dst_dir_fd*, and *follow_symlinks* arguments.\n\n\n.. function:: listdir(path='.')\n\n   Return a list containing the names of the entries in the directory given by\n   *path*.  The list is in arbitrary order, and does not include the special\n   entries ``'.'`` and ``'..'`` even if they are present in the directory.\n\n   *path* may be either of type ``str`` or of type ``bytes``.  If *path*\n   is of type ``bytes``, the filenames returned will also be of type ``bytes``;\n   in all other circumstances, they will be of type ``str``.\n\n   This function can also support :ref:`specifying a file descriptor\n   <path_fd>`; the file descriptor must refer to a directory.\n\n   .. note::\n      To encode ``str`` filenames to ``bytes``, use :func:`~os.fsencode`.\n\n   .. seealso::\n\n      The :func:`scandir` function returns directory entries along with\n      file attribute information, giving better performance for many\n      common use cases.\n\n   .. versionchanged:: 3.2\n      The *path* parameter became optional.\n\n   .. versionadded:: 3.3\n      Added support for specifying an open file descriptor for *path*.\n\n\n.. function:: lstat(path, \\*, dir_fd=None)\n\n   Perform the equivalent of an :c:func:`lstat` system call on the given path.\n   Similar to :func:`~os.stat`, but does not follow symbolic links. Return a\n   :class:`stat_result` object.\n\n   On platforms that do not support symbolic links, this is an alias for\n   :func:`~os.stat`.\n\n   As of Python 3.3, this is equivalent to ``os.stat(path, dir_fd=dir_fd,\n   follow_symlinks=False)``.\n\n   This function can also support :ref:`paths relative to directory descriptors\n   <dir_fd>`.\n\n   .. seealso::\n\n      The :func:`.stat` function.\n\n   .. versionchanged:: 3.2\n      Added support for Windows 6.0 (Vista) symbolic links.\n\n   .. versionchanged:: 3.3\n      Added the *dir_fd* parameter.\n\n\n.. function:: mkdir(path, mode=0o777, *, dir_fd=None)\n\n   Create a directory named *path* with numeric mode *mode*.\n\n   If the directory already exists, :exc:`FileExistsError` is raised.\n\n   .. _mkdir_modebits:\n\n   On some systems, *mode* is ignored.  Where it is used, the current umask\n   value is first masked out.  If bits other than the last 9 (i.e. the last 3\n   digits of the octal representation of the *mode*) are set, their meaning is\n   platform-dependent.  On some platforms, they are ignored and you should call\n   :func:`chmod` explicitly to set them.\n\n   This function can also support :ref:`paths relative to directory descriptors\n   <dir_fd>`.\n\n   It is also possible to create temporary directories; see the\n   :mod:`tempfile` module's :func:`tempfile.mkdtemp` function.\n\n   .. versionadded:: 3.3\n      The *dir_fd* argument.\n\n\n.. function:: makedirs(name, mode=0o777, exist_ok=False)\n\n   .. index::\n      single: directory; creating\n      single: UNC paths; and os.makedirs()\n\n   Recursive directory creation function.  Like :func:`mkdir`, but makes all\n   intermediate-level directories needed to contain the leaf directory.\n\n   The *mode* parameter is passed to :func:`mkdir`; see :ref:`the mkdir()\n   description <mkdir_modebits>` for how it is interpreted.\n\n   If *exist_ok* is ``False`` (the default), an :exc:`OSError` is raised if the\n   target directory already exists.\n\n   .. note::\n\n      :func:`makedirs` will become confused if the path elements to create\n      include :data:`pardir` (eg. \"..\" on UNIX systems).\n\n   This function handles UNC paths correctly.\n\n   .. versionadded:: 3.2\n      The *exist_ok* parameter.\n\n   .. versionchanged:: 3.4.1\n\n      Before Python 3.4.1, if *exist_ok* was ``True`` and the directory existed,\n      :func:`makedirs` would still raise an error if *mode* did not match the\n      mode of the existing directory. Since this behavior was impossible to\n      implement safely, it was removed in Python 3.4.1. See :issue:`21082`.\n\n\n.. function:: mkfifo(path, mode=0o666, *, dir_fd=None)\n\n   Create a FIFO (a named pipe) named *path* with numeric mode *mode*.\n   The current umask value is first masked out from the mode.\n\n   This function can also support :ref:`paths relative to directory descriptors\n   <dir_fd>`.\n\n   FIFOs are pipes that can be accessed like regular files.  FIFOs exist until they\n   are deleted (for example with :func:`os.unlink`). Generally, FIFOs are used as\n   rendezvous between \"client\" and \"server\" type processes: the server opens the\n   FIFO for reading, and the client opens it for writing.  Note that :func:`mkfifo`\n   doesn't open the FIFO --- it just creates the rendezvous point.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n      The *dir_fd* argument.\n\n\n.. function:: mknod(path, mode=0o600, device=0, *, dir_fd=None)\n\n   Create a filesystem node (file, device special file or named pipe) named\n   *path*. *mode* specifies both the permissions to use and the type of node\n   to be created, being combined (bitwise OR) with one of ``stat.S_IFREG``,\n   ``stat.S_IFCHR``, ``stat.S_IFBLK``, and ``stat.S_IFIFO`` (those constants are\n   available in :mod:`stat`).  For ``stat.S_IFCHR`` and ``stat.S_IFBLK``,\n   *device* defines the newly created device special file (probably using\n   :func:`os.makedev`), otherwise it is ignored.\n\n   This function can also support :ref:`paths relative to directory descriptors\n   <dir_fd>`.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n      The *dir_fd* argument.\n\n\n.. function:: major(device)\n\n   Extract the device major number from a raw device number (usually the\n   :attr:`st_dev` or :attr:`st_rdev` field from :c:type:`stat`).\n\n\n.. function:: minor(device)\n\n   Extract the device minor number from a raw device number (usually the\n   :attr:`st_dev` or :attr:`st_rdev` field from :c:type:`stat`).\n\n\n.. function:: makedev(major, minor)\n\n   Compose a raw device number from the major and minor device numbers.\n\n\n.. function:: pathconf(path, name)\n\n   Return system configuration information relevant to a named file. *name*\n   specifies the configuration value to retrieve; it may be a string which is the\n   name of a defined system value; these names are specified in a number of\n   standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define\n   additional names as well.  The names known to the host operating system are\n   given in the ``pathconf_names`` dictionary.  For configuration variables not\n   included in that mapping, passing an integer for *name* is also accepted.\n\n   If *name* is a string and is not known, :exc:`ValueError` is raised.  If a\n   specific value for *name* is not supported by the host system, even if it is\n   included in ``pathconf_names``, an :exc:`OSError` is raised with\n   :const:`errno.EINVAL` for the error number.\n\n   This function can support :ref:`specifying a file descriptor\n   <path_fd>`.\n\n   Availability: Unix.\n\n\n.. data:: pathconf_names\n\n   Dictionary mapping names accepted by :func:`pathconf` and :func:`fpathconf` to\n   the integer values defined for those names by the host operating system.  This\n   can be used to determine the set of names known to the system.\n\n   Availability: Unix.\n\n\n.. function:: readlink(path, *, dir_fd=None)\n\n   Return a string representing the path to which the symbolic link points.  The\n   result may be either an absolute or relative pathname; if it is relative, it\n   may be converted to an absolute pathname using\n   ``os.path.join(os.path.dirname(path), result)``.\n\n   If the *path* is a string object, the result will also be a string object,\n   and the call may raise a UnicodeDecodeError. If the *path* is a bytes\n   object, the result will be a bytes object.\n\n   This function can also support :ref:`paths relative to directory descriptors\n   <dir_fd>`.\n\n   Availability: Unix, Windows\n\n   .. versionchanged:: 3.2\n      Added support for Windows 6.0 (Vista) symbolic links.\n\n   .. versionadded:: 3.3\n      The *dir_fd* argument.\n\n\n.. function:: remove(path, *, dir_fd=None)\n\n   Remove (delete) the file *path*.  If *path* is a directory, :exc:`OSError` is\n   raised.  Use :func:`rmdir` to remove directories.\n\n   This function can support :ref:`paths relative to directory descriptors\n   <dir_fd>`.\n\n   On Windows, attempting to remove a file that is in use causes an exception to\n   be raised; on Unix, the directory entry is removed but the storage allocated\n   to the file is not made available until the original file is no longer in use.\n\n   This function is semantically identical to :func:`unlink`.\n\n   .. versionadded:: 3.3\n      The *dir_fd* argument.\n\n\n.. function:: removedirs(name)\n\n   .. index:: single: directory; deleting\n\n   Remove directories recursively.  Works like :func:`rmdir` except that, if the\n   leaf directory is successfully removed, :func:`removedirs`  tries to\n   successively remove every parent directory mentioned in  *path* until an error\n   is raised (which is ignored, because it generally means that a parent directory\n   is not empty). For example, ``os.removedirs('foo/bar/baz')`` will first remove\n   the directory ``'foo/bar/baz'``, and then remove ``'foo/bar'`` and ``'foo'`` if\n   they are empty. Raises :exc:`OSError` if the leaf directory could not be\n   successfully removed.\n\n\n.. function:: rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)\n\n   Rename the file or directory *src* to *dst*.  If *dst* is a directory,\n   :exc:`OSError` will be raised.  On Unix, if *dst* exists and is a file, it will\n   be replaced silently if the user has permission.  The operation may fail on some\n   Unix flavors if *src* and *dst* are on different filesystems.  If successful,\n   the renaming will be an atomic operation (this is a POSIX requirement).  On\n   Windows, if *dst* already exists, :exc:`OSError` will be raised even if it is a\n   file.\n\n   This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to\n   supply :ref:`paths relative to directory descriptors <dir_fd>`.\n\n   If you want cross-platform overwriting of the destination, use :func:`replace`.\n\n   .. versionadded:: 3.3\n      The *src_dir_fd* and *dst_dir_fd* arguments.\n\n\n.. function:: renames(old, new)\n\n   Recursive directory or file renaming function. Works like :func:`rename`, except\n   creation of any intermediate directories needed to make the new pathname good is\n   attempted first. After the rename, directories corresponding to rightmost path\n   segments of the old name will be pruned away using :func:`removedirs`.\n\n   .. note::\n\n      This function can fail with the new directory structure made if you lack\n      permissions needed to remove the leaf directory or file.\n\n\n.. function:: replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)\n\n   Rename the file or directory *src* to *dst*.  If *dst* is a directory,\n   :exc:`OSError` will be raised.  If *dst* exists and is a file, it will\n   be replaced silently if the user has permission.  The operation may fail\n   if *src* and *dst* are on different filesystems.  If successful,\n   the renaming will be an atomic operation (this is a POSIX requirement).\n\n   This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to\n   supply :ref:`paths relative to directory descriptors <dir_fd>`.\n\n   .. versionadded:: 3.3\n\n\n.. function:: rmdir(path, *, dir_fd=None)\n\n   Remove (delete) the directory *path*.  Only works when the directory is\n   empty, otherwise, :exc:`OSError` is raised.  In order to remove whole\n   directory trees, :func:`shutil.rmtree` can be used.\n\n   This function can support :ref:`paths relative to directory descriptors\n   <dir_fd>`.\n\n   .. versionadded:: 3.3\n      The *dir_fd* parameter.\n\n\n.. function:: scandir(path='.')\n\n   Return an iterator of :class:`DirEntry` objects corresponding to the entries\n   in the directory given by *path*. The entries are yielded in arbitrary\n   order, and the special entries ``'.'`` and ``'..'`` are not included.\n\n   Using :func:`scandir` instead of :func:`listdir` can significantly\n   increase the performance of code that also needs file type or file\n   attribute information, because :class:`DirEntry` objects expose this\n   information if the operating system provides it when scanning a directory.\n   All :class:`DirEntry` methods may perform a system call, but\n   :func:`~DirEntry.is_dir` and :func:`~DirEntry.is_file` usually only\n   require a system call for symbolic links; :func:`DirEntry.stat`\n   always requires a system call on Unix but only requires one for\n   symbolic links on Windows.\n\n   On Unix, *path* can be of type :class:`str` or :class:`bytes` (use\n   :func:`~os.fsencode` and :func:`~os.fsdecode` to encode and decode\n   :class:`bytes` paths). On Windows, *path* must be of type :class:`str`.\n   On both systems, the type of the :attr:`~DirEntry.name` and\n   :attr:`~DirEntry.path` attributes of each :class:`DirEntry` will be of\n   the same type as *path*.\n\n   The following example shows a simple use of :func:`scandir` to display all\n   the files (excluding directories) in the given *path* that don't start with\n   ``'.'``. The ``entry.is_file()`` call will generally not make an additional\n   system call::\n\n      for entry in os.scandir(path):\n         if not entry.name.startswith('.') and entry.is_file():\n             print(entry.name)\n\n   .. note::\n\n      On Unix-based systems, :func:`scandir` uses the system's\n      `opendir() <http://pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html>`_\n      and\n      `readdir() <http://pubs.opengroup.org/onlinepubs/009695399/functions/readdir_r.html>`_\n      functions. On Windows, it uses the Win32\n      `FindFirstFileW <https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85).aspx>`_\n      and\n      `FindNextFileW <https://msdn.microsoft.com/en-us/library/windows/desktop/aa364428(v=vs.85).aspx>`_\n      functions.\n\n   .. versionadded:: 3.5\n\n\n.. class:: DirEntry\n\n   Object yielded by :func:`scandir` to expose the file path and other file\n   attributes of a directory entry.\n\n   :func:`scandir` will provide as much of this information as possible without\n   making additional system calls. When a ``stat()`` or ``lstat()`` system call\n   is made, the ``DirEntry`` object will cache the result.\n\n   ``DirEntry`` instances are not intended to be stored in long-lived data\n   structures; if you know the file metadata has changed or if a long time has\n   elapsed since calling :func:`scandir`, call ``os.stat(entry.path)`` to fetch\n   up-to-date information.\n\n   Because the ``DirEntry`` methods can make operating system calls, they may\n   also raise :exc:`OSError`. If you need very fine-grained\n   control over errors, you can catch :exc:`OSError` when calling one of the\n   ``DirEntry`` methods and handle as appropriate.\n\n   Attributes and methods on a ``DirEntry`` instance are as follows:\n\n   .. attribute:: name\n\n      The entry's base filename, relative to the :func:`scandir` *path*\n      argument.\n\n      The :attr:`name` attribute will be of the same type (``str`` or\n      ``bytes``) as the :func:`scandir` *path* argument. Use\n      :func:`~os.fsdecode` to decode byte filenames.\n\n   .. attribute:: path\n\n      The entry's full path name: equivalent to ``os.path.join(scandir_path,\n      entry.name)`` where *scandir_path* is the :func:`scandir` *path*\n      argument.  The path is only absolute if the :func:`scandir` *path*\n      argument was absolute.\n\n      The :attr:`path` attribute will be of the same type (``str`` or\n      ``bytes``) as the :func:`scandir` *path* argument. Use\n      :func:`~os.fsdecode` to decode byte filenames.\n\n   .. method:: inode()\n\n      Return the inode number of the entry.\n\n      The result is cached on the ``DirEntry`` object. Use ``os.stat(entry.path,\n      follow_symlinks=False).st_ino`` to fetch up-to-date information.\n\n      On the first, uncached call, a system call is required on Windows but\n      not on Unix.\n\n   .. method:: is_dir(\\*, follow_symlinks=True)\n\n      Return ``True`` if this entry is a directory or a symbolic link pointing\n      to a directory; return ``False`` if the entry is or points to any other\n      kind of file, or if it doesn't exist anymore.\n\n      If *follow_symlinks* is ``False``, return ``True`` only if this entry\n      is a directory (without following symlinks); return ``False`` if the\n      entry is any other kind of file or if it doesn't exist anymore.\n\n      The result is cached on the ``DirEntry`` object, with a separate cache\n      for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` along\n      with :func:`stat.S_ISDIR` to fetch up-to-date information.\n\n      On the first, uncached call, no system call is required in most cases.\n      Specifically, for non-symlinks, neither Windows or Unix require a system\n      call, except on certain Unix file systems, such as network file systems,\n      that return ``dirent.d_type == DT_UNKNOWN``. If the entry is a symlink,\n      a system call will be required to follow the symlink unless\n      *follow_symlinks* is ``False``.\n\n      This method can raise :exc:`OSError`, such as :exc:`PermissionError`,\n      but :exc:`FileNotFoundError` is caught and not raised.\n\n   .. method:: is_file(\\*, follow_symlinks=True)\n\n      Return ``True`` if this entry is a file or a symbolic link pointing to a\n      file; return ``False`` if the entry is or points to a directory or other\n      non-file entry, or if it doesn't exist anymore.\n\n      If *follow_symlinks* is ``False``, return ``True`` only if this entry\n      is a file (without following symlinks); return ``False`` if the entry is\n      a directory or other non-file entry, or if it doesn't exist anymore.\n\n      The result is cached on the ``DirEntry`` object. Caching, system calls\n      made, and exceptions raised are as per :func:`~DirEntry.is_dir`.\n\n   .. method:: is_symlink()\n\n      Return ``True`` if this entry is a symbolic link (even if broken);\n      return ``False`` if the entry points to a directory or any kind of file,\n      or if it doesn't exist anymore.\n\n      The result is cached on the ``DirEntry`` object. Call\n      :func:`os.path.islink` to fetch up-to-date information.\n\n      On the first, uncached call, no system call is required in most cases.\n      Specifically, neither Windows or Unix require a system call, except on\n      certain Unix file systems, such as network file systems, that return\n      ``dirent.d_type == DT_UNKNOWN``.\n\n      This method can raise :exc:`OSError`, such as :exc:`PermissionError`,\n      but :exc:`FileNotFoundError` is caught and not raised.\n\n   .. method:: stat(\\*, follow_symlinks=True)\n\n      Return a :class:`stat_result` object for this entry. This method\n      follows symbolic links by default; to stat a symbolic link add the\n      ``follow_symlinks=False`` argument.\n\n      On Unix, this method always requires a system call. On Windows, it\n      only requires a system call if *follow_symlinks* is ``True`` and the\n      entry is a symbolic link.\n\n      On Windows, the ``st_ino``, ``st_dev`` and ``st_nlink`` attributes of the\n      :class:`stat_result` are always set to zero. Call :func:`os.stat` to\n      get these attributes.\n\n      The result is cached on the ``DirEntry`` object, with a separate cache\n      for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` to\n      fetch up-to-date information.\n\n   Note that there is a nice correspondence between several attributes\n   and methods of ``DirEntry`` and of :class:`pathlib.Path`.  In\n   particular, the ``name`` attribute has the same meaning, as do the\n   ``is_dir()``, ``is_file()``, ``is_symlink()`` and ``stat()`` methods.\n\n   .. versionadded:: 3.5\n\n\n.. function:: stat(path, \\*, dir_fd=None, follow_symlinks=True)\n\n   Get the status of a file or a file descriptor. Perform the equivalent of a\n   :c:func:`stat` system call on the given path. *path* may be specified as\n   either a string, a bytes or as an open file descriptor. Return a :class:`stat_result`\n   object.\n\n   This function normally follows symlinks; to stat a symlink add the argument\n   ``follow_symlinks=False``, or use :func:`lstat`.\n\n   This function can support :ref:`specifying a file descriptor <path_fd>` and\n   :ref:`not following symlinks <follow_symlinks>`.\n\n   .. index:: module: stat\n\n   Example::\n\n      >>> import os\n      >>> statinfo = os.stat('somefile.txt')\n      >>> statinfo\n      os.stat_result(st_mode=33188, st_ino=7876932, st_dev=234881026,\n      st_nlink=1, st_uid=501, st_gid=501, st_size=264, st_atime=1297230295,\n      st_mtime=1297230027, st_ctime=1297230027)\n      >>> statinfo.st_size\n      264\n\n   .. seealso::\n\n      :func:`fstat` and :func:`lstat` functions.\n\n   .. versionadded:: 3.3\n      Added the *dir_fd* and *follow_symlinks* arguments, specifying a file\n      descriptor instead of a path.\n\n\n.. class:: stat_result\n\n   Object whose attributes correspond roughly to the members of the\n   :c:type:`stat` structure. It is used for the result of :func:`os.stat`,\n   :func:`os.fstat` and :func:`os.lstat`.\n\n   Attributes:\n\n   .. attribute:: st_mode\n\n      File mode: file type and file mode bits (permissions).\n\n   .. attribute:: st_ino\n\n      Inode number.\n\n   .. attribute:: st_dev\n\n      Identifier of the device on which this file resides.\n\n   .. attribute:: st_nlink\n\n      Number of hard links.\n\n   .. attribute:: st_uid\n\n      User identifier of the file owner.\n\n   .. attribute:: st_gid\n\n      Group identifier of the file owner.\n\n   .. attribute:: st_size\n\n      Size of the file in bytes, if it is a regular file or a symbolic link.\n      The size of a symbolic link is the length of the pathname it contains,\n      without a terminating null byte.\n\n   Timestamps:\n\n   .. attribute:: st_atime\n\n      Time of most recent access expressed in seconds.\n\n   .. attribute:: st_mtime\n\n      Time of most recent content modification expressed in seconds.\n\n   .. attribute:: st_ctime\n\n      Platform dependent:\n\n      * the time of most recent metadata change on Unix,\n      * the time of creation on Windows, expressed in seconds.\n\n   .. attribute:: st_atime_ns\n\n      Time of most recent access expressed in nanoseconds as an integer.\n\n   .. attribute:: st_mtime_ns\n\n      Time of most recent content modification expressed in nanoseconds as an\n      integer.\n\n   .. attribute:: st_ctime_ns\n\n      Platform dependent:\n\n      * the time of most recent metadata change on Unix,\n      * the time of creation on Windows, expressed in nanoseconds as an\n        integer.\n\n   See also the :func:`stat_float_times` function.\n\n   .. note::\n\n      The exact meaning and resolution of the :attr:`st_atime`,\n      :attr:`st_mtime`, and :attr:`st_ctime` attributes depend on the operating\n      system and the file system. For example, on Windows systems using the FAT\n      or FAT32 file systems, :attr:`st_mtime` has 2-second resolution, and\n      :attr:`st_atime` has only 1-day resolution.  See your operating system\n      documentation for details.\n\n      Similarly, although :attr:`st_atime_ns`, :attr:`st_mtime_ns`,\n      and :attr:`st_ctime_ns` are always expressed in nanoseconds, many\n      systems do not provide nanosecond precision.  On systems that do\n      provide nanosecond precision, the floating-point object used to\n      store :attr:`st_atime`, :attr:`st_mtime`, and :attr:`st_ctime`\n      cannot preserve all of it, and as such will be slightly inexact.\n      If you need the exact timestamps you should always use\n      :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and :attr:`st_ctime_ns`.\n\n   On some Unix systems (such as Linux), the following attributes may also be\n   available:\n\n   .. attribute:: st_blocks\n\n      Number of 512-byte blocks allocated for file.\n      This may be smaller than :attr:`st_size`/512 when the file has holes.\n\n   .. attribute:: st_blksize\n\n      \"Preferred\" blocksize for efficient file system I/O. Writing to a file in\n      smaller chunks may cause an inefficient read-modify-rewrite.\n\n   .. attribute:: st_rdev\n\n      Type of device if an inode device.\n\n   .. attribute:: st_flags\n\n      User defined flags for file.\n\n   On other Unix systems (such as FreeBSD), the following attributes may be\n   available (but may be only filled out if root tries to use them):\n\n   .. attribute:: st_gen\n\n      File generation number.\n\n   .. attribute:: st_birthtime\n\n      Time of file creation.\n\n   On Mac OS systems, the following attributes may also be available:\n\n   .. attribute:: st_rsize\n\n      Real size of the file.\n\n   .. attribute:: st_creator\n\n      Creator of the file.\n\n   .. attribute:: st_type\n\n      File type.\n\n   On Windows systems, the following attribute is also available:\n\n   .. attribute:: st_file_attributes\n\n      Windows file attributes: ``dwFileAttributes`` member of the\n      ``BY_HANDLE_FILE_INFORMATION`` structure returned by\n      :c:func:`GetFileInformationByHandle`. See the ``FILE_ATTRIBUTE_*``\n      constants in the :mod:`stat` module.\n\n   The standard module :mod:`stat` defines functions and constants that are\n   useful for extracting information from a :c:type:`stat` structure. (On\n   Windows, some items are filled with dummy values.)\n\n   For backward compatibility, a :class:`stat_result` instance is also\n   accessible as a tuple of at least 10 integers giving the most important (and\n   portable) members of the :c:type:`stat` structure, in the order\n   :attr:`st_mode`, :attr:`st_ino`, :attr:`st_dev`, :attr:`st_nlink`,\n   :attr:`st_uid`, :attr:`st_gid`, :attr:`st_size`, :attr:`st_atime`,\n   :attr:`st_mtime`, :attr:`st_ctime`. More items may be added at the end by\n   some implementations. For compatibility with older Python versions,\n   accessing :class:`stat_result` as a tuple always returns integers.\n\n   .. versionadded:: 3.3\n      Added the :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and\n      :attr:`st_ctime_ns` members.\n\n   .. versionadded:: 3.5\n      Added the :attr:`st_file_attributes` member on Windows.\n\n\n.. function:: stat_float_times([newvalue])\n\n   Determine whether :class:`stat_result` represents time stamps as float objects.\n   If *newvalue* is ``True``, future calls to :func:`~os.stat` return floats, if it is\n   ``False``, future calls return ints. If *newvalue* is omitted, return the\n   current setting.\n\n   For compatibility with older Python versions, accessing :class:`stat_result` as\n   a tuple always returns integers.\n\n   Python now returns float values by default. Applications which do not work\n   correctly with floating point time stamps can use this function to restore the\n   old behaviour.\n\n   The resolution of the timestamps (that is the smallest possible fraction)\n   depends on the system. Some systems only support second resolution; on these\n   systems, the fraction will always be zero.\n\n   It is recommended that this setting is only changed at program startup time in\n   the *__main__* module; libraries should never change this setting. If an\n   application uses a library that works incorrectly if floating point time stamps\n   are processed, this application should turn the feature off until the library\n   has been corrected.\n\n   .. deprecated:: 3.3\n\n\n.. function:: statvfs(path)\n\n   Perform a :c:func:`statvfs` system call on the given path.  The return value is\n   an object whose attributes describe the filesystem on the given path, and\n   correspond to the members of the :c:type:`statvfs` structure, namely:\n   :attr:`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`, :attr:`f_bfree`,\n   :attr:`f_bavail`, :attr:`f_files`, :attr:`f_ffree`, :attr:`f_favail`,\n   :attr:`f_flag`, :attr:`f_namemax`.\n\n   Two module-level constants are defined for the :attr:`f_flag` attribute's\n   bit-flags: if :const:`ST_RDONLY` is set, the filesystem is mounted\n   read-only, and if :const:`ST_NOSUID` is set, the semantics of\n   setuid/setgid bits are disabled or not supported.\n\n   Additional module-level constants are defined for GNU/glibc based systems.\n   These are :const:`ST_NODEV` (disallow access to device special files),\n   :const:`ST_NOEXEC` (disallow program execution), :const:`ST_SYNCHRONOUS`\n   (writes are synced at once), :const:`ST_MANDLOCK` (allow mandatory locks on an FS),\n   :const:`ST_WRITE` (write on file/directory/symlink), :const:`ST_APPEND`\n   (append-only file), :const:`ST_IMMUTABLE` (immutable file), :const:`ST_NOATIME`\n   (do not update access times), :const:`ST_NODIRATIME` (do not update directory access\n   times), :const:`ST_RELATIME` (update atime relative to mtime/ctime).\n\n   This function can support :ref:`specifying a file descriptor <path_fd>`.\n\n   .. versionchanged:: 3.2\n      The :const:`ST_RDONLY` and :const:`ST_NOSUID` constants were added.\n\n   .. versionchanged:: 3.4\n      The :const:`ST_NODEV`, :const:`ST_NOEXEC`, :const:`ST_SYNCHRONOUS`,\n      :const:`ST_MANDLOCK`, :const:`ST_WRITE`, :const:`ST_APPEND`,\n      :const:`ST_IMMUTABLE`, :const:`ST_NOATIME`, :const:`ST_NODIRATIME`,\n      and :const:`ST_RELATIME` constants were added.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n      Added support for specifying an open file descriptor for *path*.\n\n\n.. data:: supports_dir_fd\n\n   A :class:`~collections.abc.Set` object indicating which functions in the\n   :mod:`os` module permit use of their *dir_fd* parameter.  Different platforms\n   provide different functionality, and an option that might work on one might\n   be unsupported on another.  For consistency's sakes, functions that support\n   *dir_fd* always allow specifying the parameter, but will raise an exception\n   if the functionality is not actually available.\n\n   To check whether a particular function permits use of its *dir_fd*\n   parameter, use the ``in`` operator on ``supports_dir_fd``.  As an example,\n   this expression determines whether the *dir_fd* parameter of :func:`os.stat`\n   is locally available::\n\n       os.stat in os.supports_dir_fd\n\n   Currently *dir_fd* parameters only work on Unix platforms; none of them work\n   on Windows.\n\n   .. versionadded:: 3.3\n\n\n.. data:: supports_effective_ids\n\n   A :class:`~collections.abc.Set` object indicating which functions in the\n   :mod:`os` module permit use of the *effective_ids* parameter for\n   :func:`os.access`.  If the local platform supports it, the collection will\n   contain :func:`os.access`, otherwise it will be empty.\n\n   To check whether you can use the *effective_ids* parameter for\n   :func:`os.access`, use the ``in`` operator on ``supports_effective_ids``,\n   like so::\n\n       os.access in os.supports_effective_ids\n\n   Currently *effective_ids* only works on Unix platforms; it does not work on\n   Windows.\n\n   .. versionadded:: 3.3\n\n\n.. data:: supports_fd\n\n   A :class:`~collections.abc.Set` object indicating which functions in the\n   :mod:`os` module permit specifying their *path* parameter as an open file\n   descriptor.  Different platforms provide different functionality, and an\n   option that might work on one might be unsupported on another.  For\n   consistency's sakes, functions that support *fd* always allow specifying\n   the parameter, but will raise an exception if the functionality is not\n   actually available.\n\n   To check whether a particular function permits specifying an open file\n   descriptor for its *path* parameter, use the ``in`` operator on\n   ``supports_fd``. As an example, this expression determines whether\n   :func:`os.chdir` accepts open file descriptors when called on your local\n   platform::\n\n       os.chdir in os.supports_fd\n\n   .. versionadded:: 3.3\n\n\n.. data:: supports_follow_symlinks\n\n   A :class:`~collections.abc.Set` object indicating which functions in the\n   :mod:`os` module permit use of their *follow_symlinks* parameter.  Different\n   platforms provide different functionality, and an option that might work on\n   one might be unsupported on another.  For consistency's sakes, functions that\n   support *follow_symlinks* always allow specifying the parameter, but will\n   raise an exception if the functionality is not actually available.\n\n   To check whether a particular function permits use of its *follow_symlinks*\n   parameter, use the ``in`` operator on ``supports_follow_symlinks``.  As an\n   example, this expression determines whether the *follow_symlinks* parameter\n   of :func:`os.stat` is locally available::\n\n       os.stat in os.supports_follow_symlinks\n\n   .. versionadded:: 3.3\n\n\n.. function:: symlink(src, dst, target_is_directory=False, *, dir_fd=None)\n\n   Create a symbolic link pointing to *src* named *dst*.\n\n   On Windows, a symlink represents either a file or a directory, and does not\n   morph to the target dynamically.  If the target is present, the type of the\n   symlink will be created to match. Otherwise, the symlink will be created\n   as a directory if *target_is_directory* is ``True`` or a file symlink (the\n   default) otherwise.  On non-Window platforms, *target_is_directory* is ignored.\n\n   Symbolic link support was introduced in Windows 6.0 (Vista).  :func:`symlink`\n   will raise a :exc:`NotImplementedError` on Windows versions earlier than 6.0.\n\n   This function can support :ref:`paths relative to directory descriptors\n   <dir_fd>`.\n\n   .. note::\n\n      On Windows, the *SeCreateSymbolicLinkPrivilege* is required in order to\n      successfully create symlinks. This privilege is not typically granted to\n      regular users but is available to accounts which can escalate privileges\n      to the administrator level. Either obtaining the privilege or running your\n      application as an administrator are ways to successfully create symlinks.\n\n\n      :exc:`OSError` is raised when the function is called by an unprivileged\n      user.\n\n   Availability: Unix, Windows.\n\n   .. versionchanged:: 3.2\n      Added support for Windows 6.0 (Vista) symbolic links.\n\n   .. versionadded:: 3.3\n      Added the *dir_fd* argument, and now allow *target_is_directory*\n      on non-Windows platforms.\n\n\n.. function:: sync()\n\n   Force write of everything to disk.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: truncate(path, length)\n\n   Truncate the file corresponding to *path*, so that it is at most\n   *length* bytes in size.\n\n   This function can support :ref:`specifying a file descriptor <path_fd>`.\n\n   Availability: Unix, Windows.\n\n   .. versionadded:: 3.3\n\n   .. versionchanged:: 3.5\n      Added support for Windows\n\n.. function:: unlink(path, *, dir_fd=None)\n\n   Remove (delete) the file *path*.  This function is semantically\n   identical to :func:`remove`; the ``unlink`` name is its\n   traditional Unix name.  Please see the documentation for\n   :func:`remove` for further information.\n\n   .. versionadded:: 3.3\n      The *dir_fd* parameter.\n\n\n.. function:: utime(path, times=None, *[, ns], dir_fd=None, follow_symlinks=True)\n\n   Set the access and modified times of the file specified by *path*.\n\n   :func:`utime` takes two optional parameters, *times* and *ns*.\n   These specify the times set on *path* and are used as follows:\n\n   - If *ns* is specified,\n     it must be a 2-tuple of the form ``(atime_ns, mtime_ns)``\n     where each member is an int expressing nanoseconds.\n   - If *times* is not ``None``,\n     it must be a 2-tuple of the form ``(atime, mtime)``\n     where each member is an int or float expressing seconds.\n   - If *times* is ``None`` and *ns* is unspecified,\n     this is equivalent to specifying ``ns=(atime_ns, mtime_ns)``\n     where both times are the current time.\n\n   It is an error to specify tuples for both *times* and *ns*.\n\n   Whether a directory can be given for *path*\n   depends on whether the operating system implements directories as files\n   (for example, Windows does not).  Note that the exact times you set here may\n   not be returned by a subsequent :func:`~os.stat` call, depending on the\n   resolution with which your operating system records access and modification\n   times; see :func:`~os.stat`.  The best way to preserve exact times is to\n   use the *st_atime_ns* and *st_mtime_ns* fields from the :func:`os.stat`\n   result object with the *ns* parameter to `utime`.\n\n   This function can support :ref:`specifying a file descriptor <path_fd>`,\n   :ref:`paths relative to directory descriptors <dir_fd>` and :ref:`not\n   following symlinks <follow_symlinks>`.\n\n   .. versionadded:: 3.3\n      Added support for specifying an open file descriptor for *path*,\n      and the *dir_fd*, *follow_symlinks*, and *ns* parameters.\n\n\n.. function:: walk(top, topdown=True, onerror=None, followlinks=False)\n\n   .. index::\n      single: directory; walking\n      single: directory; traversal\n\n   Generate the file names in a directory tree by walking the tree\n   either top-down or bottom-up. For each directory in the tree rooted at directory\n   *top* (including *top* itself), it yields a 3-tuple ``(dirpath, dirnames,\n   filenames)``.\n\n   *dirpath* is a string, the path to the directory.  *dirnames* is a list of the\n   names of the subdirectories in *dirpath* (excluding ``'.'`` and ``'..'``).\n   *filenames* is a list of the names of the non-directory files in *dirpath*.\n   Note that the names in the lists contain no path components.  To get a full path\n   (which begins with *top*) to a file or directory in *dirpath*, do\n   ``os.path.join(dirpath, name)``.\n\n   If optional argument *topdown* is ``True`` or not specified, the triple for a\n   directory is generated before the triples for any of its subdirectories\n   (directories are generated top-down).  If *topdown* is ``False``, the triple\n   for a directory is generated after the triples for all of its subdirectories\n   (directories are generated bottom-up). No matter the value of *topdown*, the\n   list of subdirectories is retrieved before the tuples for the directory and\n   its subdirectories are generated.\n\n   When *topdown* is ``True``, the caller can modify the *dirnames* list in-place\n   (perhaps using :keyword:`del` or slice assignment), and :func:`walk` will only\n   recurse into the subdirectories whose names remain in *dirnames*; this can be\n   used to prune the search, impose a specific order of visiting, or even to inform\n   :func:`walk` about directories the caller creates or renames before it resumes\n   :func:`walk` again.  Modifying *dirnames* when *topdown* is ``False`` has\n   no effect on the behavior of the walk, because in bottom-up mode the directories\n   in *dirnames* are generated before *dirpath* itself is generated.\n\n   By default, errors from the :func:`listdir` call are ignored.  If optional\n   argument *onerror* is specified, it should be a function; it will be called with\n   one argument, an :exc:`OSError` instance.  It can report the error to continue\n   with the walk, or raise the exception to abort the walk.  Note that the filename\n   is available as the ``filename`` attribute of the exception object.\n\n   By default, :func:`walk` will not walk down into symbolic links that resolve to\n   directories. Set *followlinks* to ``True`` to visit directories pointed to by\n   symlinks, on systems that support them.\n\n   .. note::\n\n      Be aware that setting *followlinks* to ``True`` can lead to infinite\n      recursion if a link points to a parent directory of itself. :func:`walk`\n      does not keep track of the directories it visited already.\n\n   .. note::\n\n      If you pass a relative pathname, don't change the current working directory\n      between resumptions of :func:`walk`.  :func:`walk` never changes the current\n      directory, and assumes that its caller doesn't either.\n\n   This example displays the number of bytes taken by non-directory files in each\n   directory under the starting directory, except that it doesn't look under any\n   CVS subdirectory::\n\n      import os\n      from os.path import join, getsize\n      for root, dirs, files in os.walk('python/Lib/email'):\n          print(root, \"consumes\", end=\" \")\n          print(sum(getsize(join(root, name)) for name in files), end=\" \")\n          print(\"bytes in\", len(files), \"non-directory files\")\n          if 'CVS' in dirs:\n              dirs.remove('CVS')  # don't visit CVS directories\n\n   In the next example (simple implementation of :func:`shutil.rmtree`),\n   walking the tree bottom-up is essential, :func:`rmdir` doesn't allow\n   deleting a directory before the directory is empty::\n\n      # Delete everything reachable from the directory named in \"top\",\n      # assuming there are no symbolic links.\n      # CAUTION:  This is dangerous!  For example, if top == '/', it\n      # could delete all your disk files.\n      import os\n      for root, dirs, files in os.walk(top, topdown=False):\n          for name in files:\n              os.remove(os.path.join(root, name))\n          for name in dirs:\n              os.rmdir(os.path.join(root, name))\n\n   .. versionchanged:: 3.5\n      This function now calls :func:`os.scandir` instead of :func:`os.listdir`,\n      making it faster by reducing the number of calls to :func:`os.stat`.\n\n\n.. function:: fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)\n\n   .. index::\n      single: directory; walking\n      single: directory; traversal\n\n   This behaves exactly like :func:`walk`, except that it yields a 4-tuple\n   ``(dirpath, dirnames, filenames, dirfd)``, and it supports ``dir_fd``.\n\n   *dirpath*, *dirnames* and *filenames* are identical to :func:`walk` output,\n   and *dirfd* is a file descriptor referring to the directory *dirpath*.\n\n   This function always supports :ref:`paths relative to directory descriptors\n   <dir_fd>` and :ref:`not following symlinks <follow_symlinks>`.  Note however\n   that, unlike other functions, the :func:`fwalk` default value for\n   *follow_symlinks* is ``False``.\n\n   .. note::\n\n      Since :func:`fwalk` yields file descriptors, those are only valid until\n      the next iteration step, so you should duplicate them (e.g. with\n      :func:`dup`) if you want to keep them longer.\n\n   This example displays the number of bytes taken by non-directory files in each\n   directory under the starting directory, except that it doesn't look under any\n   CVS subdirectory::\n\n      import os\n      for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n          print(root, \"consumes\", end=\"\")\n          print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n                end=\"\")\n          print(\"bytes in\", len(files), \"non-directory files\")\n          if 'CVS' in dirs:\n              dirs.remove('CVS')  # don't visit CVS directories\n\n   In the next example, walking the tree bottom-up is essential:\n   :func:`rmdir` doesn't allow deleting a directory before the directory is\n   empty::\n\n      # Delete everything reachable from the directory named in \"top\",\n      # assuming there are no symbolic links.\n      # CAUTION:  This is dangerous!  For example, if top == '/', it\n      # could delete all your disk files.\n      import os\n      for root, dirs, files, rootfd in os.fwalk(top, topdown=False):\n          for name in files:\n              os.unlink(name, dir_fd=rootfd)\n          for name in dirs:\n              os.rmdir(name, dir_fd=rootfd)\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\nLinux extended attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. versionadded:: 3.3\n\nThese functions are all available on Linux only.\n\n.. function:: getxattr(path, attribute, *, follow_symlinks=True)\n\n   Return the value of the extended filesystem attribute *attribute* for\n   *path*. *attribute* can be bytes or str. If it is str, it is encoded\n   with the filesystem encoding.\n\n   This function can support :ref:`specifying a file descriptor <path_fd>` and\n   :ref:`not following symlinks <follow_symlinks>`.\n\n\n.. function:: listxattr(path=None, *, follow_symlinks=True)\n\n   Return a list of the extended filesystem attributes on *path*.  The\n   attributes in the list are represented as strings decoded with the filesystem\n   encoding.  If *path* is ``None``, :func:`listxattr` will examine the current\n   directory.\n\n   This function can support :ref:`specifying a file descriptor <path_fd>` and\n   :ref:`not following symlinks <follow_symlinks>`.\n\n\n.. function:: removexattr(path, attribute, *, follow_symlinks=True)\n\n   Removes the extended filesystem attribute *attribute* from *path*.\n   *attribute* should be bytes or str. If it is a string, it is encoded\n   with the filesystem encoding.\n\n   This function can support :ref:`specifying a file descriptor <path_fd>` and\n   :ref:`not following symlinks <follow_symlinks>`.\n\n\n.. function:: setxattr(path, attribute, value, flags=0, *, follow_symlinks=True)\n\n   Set the extended filesystem attribute *attribute* on *path* to *value*.\n   *attribute* must be a bytes or str with no embedded NULs. If it is a str,\n   it is encoded with the filesystem encoding.  *flags* may be\n   :data:`XATTR_REPLACE` or :data:`XATTR_CREATE`. If :data:`XATTR_REPLACE` is\n   given and the attribute does not exist, ``EEXISTS`` will be raised.\n   If :data:`XATTR_CREATE` is given and the attribute already exists, the\n   attribute will not be created and ``ENODATA`` will be raised.\n\n   This function can support :ref:`specifying a file descriptor <path_fd>` and\n   :ref:`not following symlinks <follow_symlinks>`.\n\n   .. note::\n\n      A bug in Linux kernel versions less than 2.6.39 caused the flags argument\n      to be ignored on some filesystems.\n\n\n.. data:: XATTR_SIZE_MAX\n\n   The maximum size the value of an extended attribute can be. Currently, this\n   is 64 KiB on Linux.\n\n\n.. data:: XATTR_CREATE\n\n   This is a possible value for the flags argument in :func:`setxattr`. It\n   indicates the operation must create an attribute.\n\n\n.. data:: XATTR_REPLACE\n\n   This is a possible value for the flags argument in :func:`setxattr`. It\n   indicates the operation must replace an existing attribute.\n\n\n.. _os-process:\n\nProcess Management\n------------------\n\nThese functions may be used to create and manage processes.\n\nThe various :func:`exec\\* <execl>` functions take a list of arguments for the new\nprogram loaded into the process.  In each case, the first of these arguments is\npassed to the new program as its own name rather than as an argument a user may\nhave typed on a command line.  For the C programmer, this is the ``argv[0]``\npassed to a program's :c:func:`main`.  For example, ``os.execv('/bin/echo',\n['foo', 'bar'])`` will only print ``bar`` on standard output; ``foo`` will seem\nto be ignored.\n\n\n.. function:: abort()\n\n   Generate a :const:`SIGABRT` signal to the current process.  On Unix, the default\n   behavior is to produce a core dump; on Windows, the process immediately returns\n   an exit code of ``3``.  Be aware that calling this function will not call the\n   Python signal handler registered for :const:`SIGABRT` with\n   :func:`signal.signal`.\n\n\n.. function:: execl(path, arg0, arg1, ...)\n              execle(path, arg0, arg1, ..., env)\n              execlp(file, arg0, arg1, ...)\n              execlpe(file, arg0, arg1, ..., env)\n              execv(path, args)\n              execve(path, args, env)\n              execvp(file, args)\n              execvpe(file, args, env)\n\n   These functions all execute a new program, replacing the current process; they\n   do not return.  On Unix, the new executable is loaded into the current process,\n   and will have the same process id as the caller.  Errors will be reported as\n   :exc:`OSError` exceptions.\n\n   The current process is replaced immediately. Open file objects and\n   descriptors are not flushed, so if there may be data buffered\n   on these open files, you should flush them using\n   :func:`sys.stdout.flush` or :func:`os.fsync` before calling an\n   :func:`exec\\* <execl>` function.\n\n   The \"l\" and \"v\" variants of the :func:`exec\\* <execl>` functions differ in how\n   command-line arguments are passed.  The \"l\" variants are perhaps the easiest\n   to work with if the number of parameters is fixed when the code is written; the\n   individual parameters simply become additional parameters to the :func:`execl\\*`\n   functions.  The \"v\" variants are good when the number of parameters is\n   variable, with the arguments being passed in a list or tuple as the *args*\n   parameter.  In either case, the arguments to the child process should start with\n   the name of the command being run, but this is not enforced.\n\n   The variants which include a \"p\" near the end (:func:`execlp`,\n   :func:`execlpe`, :func:`execvp`, and :func:`execvpe`) will use the\n   :envvar:`PATH` environment variable to locate the program *file*.  When the\n   environment is being replaced (using one of the :func:`exec\\*e <execl>` variants,\n   discussed in the next paragraph), the new environment is used as the source of\n   the :envvar:`PATH` variable. The other variants, :func:`execl`, :func:`execle`,\n   :func:`execv`, and :func:`execve`, will not use the :envvar:`PATH` variable to\n   locate the executable; *path* must contain an appropriate absolute or relative\n   path.\n\n   For :func:`execle`, :func:`execlpe`, :func:`execve`, and :func:`execvpe` (note\n   that these all end in \"e\"), the *env* parameter must be a mapping which is\n   used to define the environment variables for the new process (these are used\n   instead of the current process' environment); the functions :func:`execl`,\n   :func:`execlp`, :func:`execv`, and :func:`execvp` all cause the new process to\n   inherit the environment of the current process.\n\n   For :func:`execve` on some platforms, *path* may also be specified as an open\n   file descriptor.  This functionality may not be supported on your platform;\n   you can check whether or not it is available using :data:`os.supports_fd`.\n   If it is unavailable, using it will raise a :exc:`NotImplementedError`.\n\n   Availability: Unix, Windows.\n\n   .. versionadded:: 3.3\n      Added support for specifying an open file descriptor for *path*\n      for :func:`execve`.\n\n.. function:: _exit(n)\n\n   Exit the process with status *n*, without calling cleanup handlers, flushing\n   stdio buffers, etc.\n\n   .. note::\n\n      The standard way to exit is ``sys.exit(n)``.  :func:`_exit` should\n      normally only be used in the child process after a :func:`fork`.\n\nThe following exit codes are defined and can be used with :func:`_exit`,\nalthough they are not required.  These are typically used for system programs\nwritten in Python, such as a mail server's external command delivery program.\n\n.. note::\n\n   Some of these may not be available on all Unix platforms, since there is some\n   variation.  These constants are defined where they are defined by the underlying\n   platform.\n\n\n.. data:: EX_OK\n\n   Exit code that means no error occurred.\n\n   Availability: Unix.\n\n\n.. data:: EX_USAGE\n\n   Exit code that means the command was used incorrectly, such as when the wrong\n   number of arguments are given.\n\n   Availability: Unix.\n\n\n.. data:: EX_DATAERR\n\n   Exit code that means the input data was incorrect.\n\n   Availability: Unix.\n\n\n.. data:: EX_NOINPUT\n\n   Exit code that means an input file did not exist or was not readable.\n\n   Availability: Unix.\n\n\n.. data:: EX_NOUSER\n\n   Exit code that means a specified user did not exist.\n\n   Availability: Unix.\n\n\n.. data:: EX_NOHOST\n\n   Exit code that means a specified host did not exist.\n\n   Availability: Unix.\n\n\n.. data:: EX_UNAVAILABLE\n\n   Exit code that means that a required service is unavailable.\n\n   Availability: Unix.\n\n\n.. data:: EX_SOFTWARE\n\n   Exit code that means an internal software error was detected.\n\n   Availability: Unix.\n\n\n.. data:: EX_OSERR\n\n   Exit code that means an operating system error was detected, such as the\n   inability to fork or create a pipe.\n\n   Availability: Unix.\n\n\n.. data:: EX_OSFILE\n\n   Exit code that means some system file did not exist, could not be opened, or had\n   some other kind of error.\n\n   Availability: Unix.\n\n\n.. data:: EX_CANTCREAT\n\n   Exit code that means a user specified output file could not be created.\n\n   Availability: Unix.\n\n\n.. data:: EX_IOERR\n\n   Exit code that means that an error occurred while doing I/O on some file.\n\n   Availability: Unix.\n\n\n.. data:: EX_TEMPFAIL\n\n   Exit code that means a temporary failure occurred.  This indicates something\n   that may not really be an error, such as a network connection that couldn't be\n   made during a retryable operation.\n\n   Availability: Unix.\n\n\n.. data:: EX_PROTOCOL\n\n   Exit code that means that a protocol exchange was illegal, invalid, or not\n   understood.\n\n   Availability: Unix.\n\n\n.. data:: EX_NOPERM\n\n   Exit code that means that there were insufficient permissions to perform the\n   operation (but not intended for file system problems).\n\n   Availability: Unix.\n\n\n.. data:: EX_CONFIG\n\n   Exit code that means that some kind of configuration error occurred.\n\n   Availability: Unix.\n\n\n.. data:: EX_NOTFOUND\n\n   Exit code that means something like \"an entry was not found\".\n\n   Availability: Unix.\n\n\n.. function:: fork()\n\n   Fork a child process.  Return ``0`` in the child and the child's process id in the\n   parent.  If an error occurs :exc:`OSError` is raised.\n\n   Note that some platforms including FreeBSD <= 6.3 and Cygwin have\n   known issues when using fork() from a thread.\n\n   .. warning::\n\n      See :mod:`ssl` for applications that use the SSL module with fork().\n\n   Availability: Unix.\n\n\n.. function:: forkpty()\n\n   Fork a child process, using a new pseudo-terminal as the child's controlling\n   terminal. Return a pair of ``(pid, fd)``, where *pid* is ``0`` in the child, the\n   new child's process id in the parent, and *fd* is the file descriptor of the\n   master end of the pseudo-terminal.  For a more portable approach, use the\n   :mod:`pty` module.  If an error occurs :exc:`OSError` is raised.\n\n   Availability: some flavors of Unix.\n\n\n.. function:: kill(pid, sig)\n\n   .. index::\n      single: process; killing\n      single: process; signalling\n\n   Send signal *sig* to the process *pid*.  Constants for the specific signals\n   available on the host platform are defined in the :mod:`signal` module.\n\n   Windows: The :data:`signal.CTRL_C_EVENT` and\n   :data:`signal.CTRL_BREAK_EVENT` signals are special signals which can\n   only be sent to console processes which share a common console window,\n   e.g., some subprocesses. Any other value for *sig* will cause the process\n   to be unconditionally killed by the TerminateProcess API, and the exit code\n   will be set to *sig*. The Windows version of :func:`kill` additionally takes\n   process handles to be killed.\n\n   See also :func:`signal.pthread_kill`.\n\n   .. versionadded:: 3.2\n      Windows support.\n\n\n.. function:: killpg(pgid, sig)\n\n   .. index::\n      single: process; killing\n      single: process; signalling\n\n   Send the signal *sig* to the process group *pgid*.\n\n   Availability: Unix.\n\n\n.. function:: nice(increment)\n\n   Add *increment* to the process's \"niceness\".  Return the new niceness.\n\n   Availability: Unix.\n\n\n.. function:: plock(op)\n\n   Lock program segments into memory.  The value of *op* (defined in\n   ``<sys/lock.h>``) determines which segments are locked.\n\n   Availability: Unix.\n\n\n.. function:: popen(cmd, mode='r', buffering=-1)\n\n   Open a pipe to or from command *cmd*.\n   The return value is an open file object\n   connected to the pipe, which can be read or written depending on whether *mode*\n   is ``'r'`` (default) or ``'w'``. The *buffering* argument has the same meaning as\n   the corresponding argument to the built-in :func:`open` function. The\n   returned file object reads or writes text strings rather than bytes.\n\n   The ``close`` method returns :const:`None` if the subprocess exited\n   successfully, or the subprocess's return code if there was an\n   error. On POSIX systems, if the return code is positive it\n   represents the return value of the process left-shifted by one\n   byte.  If the return code is negative, the process was terminated\n   by the signal given by the negated value of the return code.  (For\n   example, the return value might be ``- signal.SIGKILL`` if the\n   subprocess was killed.)  On Windows systems, the return value\n   contains the signed integer return code from the child process.\n\n   This is implemented using :class:`subprocess.Popen`; see that class's\n   documentation for more powerful ways to manage and communicate with\n   subprocesses.\n\n\n.. function:: spawnl(mode, path, ...)\n              spawnle(mode, path, ..., env)\n              spawnlp(mode, file, ...)\n              spawnlpe(mode, file, ..., env)\n              spawnv(mode, path, args)\n              spawnve(mode, path, args, env)\n              spawnvp(mode, file, args)\n              spawnvpe(mode, file, args, env)\n\n   Execute the program *path* in a new process.\n\n   (Note that the :mod:`subprocess` module provides more powerful facilities for\n   spawning new processes and retrieving their results; using that module is\n   preferable to using these functions.  Check especially the\n   :ref:`subprocess-replacements` section.)\n\n   If *mode* is :const:`P_NOWAIT`, this function returns the process id of the new\n   process; if *mode* is :const:`P_WAIT`, returns the process's exit code if it\n   exits normally, or ``-signal``, where *signal* is the signal that killed the\n   process.  On Windows, the process id will actually be the process handle, so can\n   be used with the :func:`waitpid` function.\n\n   The \"l\" and \"v\" variants of the :func:`spawn\\* <spawnl>` functions differ in how\n   command-line arguments are passed.  The \"l\" variants are perhaps the easiest\n   to work with if the number of parameters is fixed when the code is written; the\n   individual parameters simply become additional parameters to the\n   :func:`spawnl\\*` functions.  The \"v\" variants are good when the number of\n   parameters is variable, with the arguments being passed in a list or tuple as\n   the *args* parameter.  In either case, the arguments to the child process must\n   start with the name of the command being run.\n\n   The variants which include a second \"p\" near the end (:func:`spawnlp`,\n   :func:`spawnlpe`, :func:`spawnvp`, and :func:`spawnvpe`) will use the\n   :envvar:`PATH` environment variable to locate the program *file*.  When the\n   environment is being replaced (using one of the :func:`spawn\\*e <spawnl>` variants,\n   discussed in the next paragraph), the new environment is used as the source of\n   the :envvar:`PATH` variable.  The other variants, :func:`spawnl`,\n   :func:`spawnle`, :func:`spawnv`, and :func:`spawnve`, will not use the\n   :envvar:`PATH` variable to locate the executable; *path* must contain an\n   appropriate absolute or relative path.\n\n   For :func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, and :func:`spawnvpe`\n   (note that these all end in \"e\"), the *env* parameter must be a mapping\n   which is used to define the environment variables for the new process (they are\n   used instead of the current process' environment); the functions\n   :func:`spawnl`, :func:`spawnlp`, :func:`spawnv`, and :func:`spawnvp` all cause\n   the new process to inherit the environment of the current process.  Note that\n   keys and values in the *env* dictionary must be strings; invalid keys or\n   values will cause the function to fail, with a return value of ``127``.\n\n   As an example, the following calls to :func:`spawnlp` and :func:`spawnvpe` are\n   equivalent::\n\n      import os\n      os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')\n\n      L = ['cp', 'index.html', '/dev/null']\n      os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)\n\n   Availability: Unix, Windows.  :func:`spawnlp`, :func:`spawnlpe`, :func:`spawnvp`\n   and :func:`spawnvpe` are not available on Windows.  :func:`spawnle` and\n   :func:`spawnve` are not thread-safe on Windows; we advise you to use the\n   :mod:`subprocess` module instead.\n\n\n.. data:: P_NOWAIT\n          P_NOWAITO\n\n   Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` family of\n   functions.  If either of these values is given, the :func:`spawn\\*` functions\n   will return as soon as the new process has been created, with the process id as\n   the return value.\n\n   Availability: Unix, Windows.\n\n\n.. data:: P_WAIT\n\n   Possible value for the *mode* parameter to the :func:`spawn\\* <spawnl>` family of\n   functions.  If this is given as *mode*, the :func:`spawn\\*` functions will not\n   return until the new process has run to completion and will return the exit code\n   of the process the run is successful, or ``-signal`` if a signal kills the\n   process.\n\n   Availability: Unix, Windows.\n\n\n.. data:: P_DETACH\n          P_OVERLAY\n\n   Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` family of\n   functions.  These are less portable than those listed above. :const:`P_DETACH`\n   is similar to :const:`P_NOWAIT`, but the new process is detached from the\n   console of the calling process. If :const:`P_OVERLAY` is used, the current\n   process will be replaced; the :func:`spawn\\* <spawnl>` function will not return.\n\n   Availability: Windows.\n\n\n.. function:: startfile(path[, operation])\n\n   Start a file with its associated application.\n\n   When *operation* is not specified or ``'open'``, this acts like double-clicking\n   the file in Windows Explorer, or giving the file name as an argument to the\n   :program:`start` command from the interactive command shell: the file is opened\n   with whatever application (if any) its extension is associated.\n\n   When another *operation* is given, it must be a \"command verb\" that specifies\n   what should be done with the file. Common verbs documented by Microsoft are\n   ``'print'`` and  ``'edit'`` (to be used on files) as well as ``'explore'`` and\n   ``'find'`` (to be used on directories).\n\n   :func:`startfile` returns as soon as the associated application is launched.\n   There is no option to wait for the application to close, and no way to retrieve\n   the application's exit status.  The *path* parameter is relative to the current\n   directory.  If you want to use an absolute path, make sure the first character\n   is not a slash (``'/'``); the underlying Win32 :c:func:`ShellExecute` function\n   doesn't work if it is.  Use the :func:`os.path.normpath` function to ensure that\n   the path is properly encoded for Win32.\n\n   To reduce interpreter startup overhead, the Win32 :c:func:`ShellExecute`\n   function is not resolved until this function is first called.  If the function\n   cannot be resolved, :exc:`NotImplementedError` will be raised.\n\n   Availability: Windows.\n\n\n.. function:: system(command)\n\n   Execute the command (a string) in a subshell.  This is implemented by calling\n   the Standard C function :c:func:`system`, and has the same limitations.\n   Changes to :data:`sys.stdin`, etc. are not reflected in the environment of\n   the executed command. If *command* generates any output, it will be sent to\n   the interpreter standard output stream.\n\n   On Unix, the return value is the exit status of the process encoded in the\n   format specified for :func:`wait`.  Note that POSIX does not specify the\n   meaning of the return value of the C :c:func:`system` function, so the return\n   value of the Python function is system-dependent.\n\n   On Windows, the return value is that returned by the system shell after\n   running *command*.  The shell is given by the Windows environment variable\n   :envvar:`COMSPEC`: it is usually :program:`cmd.exe`, which returns the exit\n   status of the command run; on systems using a non-native shell, consult your\n   shell documentation.\n\n   The :mod:`subprocess` module provides more powerful facilities for spawning\n   new processes and retrieving their results; using that module is preferable\n   to using this function.  See the :ref:`subprocess-replacements` section in\n   the :mod:`subprocess` documentation for some helpful recipes.\n\n   Availability: Unix, Windows.\n\n\n.. function:: times()\n\n   Returns the current global process times.\n   The return value is an object with five attributes:\n\n   * :attr:`user` - user time\n   * :attr:`system` - system time\n   * :attr:`children_user` - user time of all child processes\n   * :attr:`children_system` - system time of all child processes\n   * :attr:`elapsed` - elapsed real time since a fixed point in the past\n\n   For backwards compatibility, this object also behaves like a five-tuple\n   containing :attr:`user`, :attr:`system`, :attr:`children_user`,\n   :attr:`children_system`, and :attr:`elapsed` in that order.\n\n   See the Unix manual page\n   :manpage:`times(2)` or the corresponding Windows Platform API documentation.\n   On Windows, only :attr:`user` and :attr:`system` are known; the other\n   attributes are zero.\n\n   Availability: Unix, Windows.\n\n   .. versionchanged:: 3.3\n      Return type changed from a tuple to a tuple-like object\n      with named attributes.\n\n\n.. function:: wait()\n\n   Wait for completion of a child process, and return a tuple containing its pid\n   and exit status indication: a 16-bit number, whose low byte is the signal number\n   that killed the process, and whose high byte is the exit status (if the signal\n   number is zero); the high bit of the low byte is set if a core file was\n   produced.\n\n   Availability: Unix.\n\n.. function:: waitid(idtype, id, options)\n\n   Wait for the completion of one or more child processes.\n   *idtype* can be :data:`P_PID`, :data:`P_PGID` or :data:`P_ALL`.\n   *id* specifies the pid to wait on.\n   *options* is constructed from the ORing of one or more of :data:`WEXITED`,\n   :data:`WSTOPPED` or :data:`WCONTINUED` and additionally may be ORed with\n   :data:`WNOHANG` or :data:`WNOWAIT`. The return value is an object\n   representing the data contained in the :c:type:`siginfo_t` structure, namely:\n   :attr:`si_pid`, :attr:`si_uid`, :attr:`si_signo`, :attr:`si_status`,\n   :attr:`si_code` or ``None`` if :data:`WNOHANG` is specified and there are no\n   children in a waitable state.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n.. data:: P_PID\n          P_PGID\n          P_ALL\n\n   These are the possible values for *idtype* in :func:`waitid`. They affect\n   how *id* is interpreted.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n.. data:: WEXITED\n          WSTOPPED\n          WNOWAIT\n\n   Flags that can be used in *options* in :func:`waitid` that specify what\n   child signal to wait for.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. data:: CLD_EXITED\n          CLD_DUMPED\n          CLD_TRAPPED\n          CLD_CONTINUED\n\n   These are the possible values for :attr:`si_code` in the result returned by\n   :func:`waitid`.\n\n   Availability: Unix.\n\n   .. versionadded:: 3.3\n\n\n.. function:: waitpid(pid, options)\n\n   The details of this function differ on Unix and Windows.\n\n   On Unix: Wait for completion of a child process given by process id *pid*, and\n   return a tuple containing its process id and exit status indication (encoded as\n   for :func:`wait`).  The semantics of the call are affected by the value of the\n   integer *options*, which should be ``0`` for normal operation.\n\n   If *pid* is greater than ``0``, :func:`waitpid` requests status information for\n   that specific process.  If *pid* is ``0``, the request is for the status of any\n   child in the process group of the current process.  If *pid* is ``-1``, the\n   request pertains to any child of the current process.  If *pid* is less than\n   ``-1``, status is requested for any process in the process group ``-pid`` (the\n   absolute value of *pid*).\n\n   An :exc:`OSError` is raised with the value of errno when the syscall\n   returns -1.\n\n   On Windows: Wait for completion of a process given by process handle *pid*, and\n   return a tuple containing *pid*, and its exit status shifted left by 8 bits\n   (shifting makes cross-platform use of the function easier). A *pid* less than or\n   equal to ``0`` has no special meaning on Windows, and raises an exception. The\n   value of integer *options* has no effect. *pid* can refer to any process whose\n   id is known, not necessarily a child process. The :func:`spawn\\* <spawnl>`\n   functions called with :const:`P_NOWAIT` return suitable process handles.\n\n   .. versionchanged:: 3.5\n      If the system call is interrupted and the signal handler does not raise an\n      exception, the function now retries the system call instead of raising an\n      :exc:`InterruptedError` exception (see :pep:`475` for the rationale).\n\n\n.. function:: wait3(options)\n\n   Similar to :func:`waitpid`, except no process id argument is given and a\n   3-element tuple containing the child's process id, exit status indication, and\n   resource usage information is returned.  Refer to :mod:`resource`.\\\n   :func:`~resource.getrusage` for details on resource usage information.  The\n   option argument is the same as that provided to :func:`waitpid` and\n   :func:`wait4`.\n\n   Availability: Unix.\n\n\n.. function:: wait4(pid, options)\n\n   Similar to :func:`waitpid`, except a 3-element tuple, containing the child's\n   process id, exit status indication, and resource usage information is returned.\n   Refer to :mod:`resource`.\\ :func:`~resource.getrusage` for details on\n   resource usage information.  The arguments to :func:`wait4` are the same\n   as those provided to :func:`waitpid`.\n\n   Availability: Unix.\n\n\n.. data:: WNOHANG\n\n   The option for :func:`waitpid` to return immediately if no child process status\n   is available immediately. The function returns ``(0, 0)`` in this case.\n\n   Availability: Unix.\n\n\n.. data:: WCONTINUED\n\n   This option causes child processes to be reported if they have been continued\n   from a job control stop since their status was last reported.\n\n   Availability: some Unix systems.\n\n\n.. data:: WUNTRACED\n\n   This option causes child processes to be reported if they have been stopped but\n   their current state has not been reported since they were stopped.\n\n   Availability: Unix.\n\n\nThe following functions take a process status code as returned by\n:func:`system`, :func:`wait`, or :func:`waitpid` as a parameter.  They may be\nused to determine the disposition of a process.\n\n.. function:: WCOREDUMP(status)\n\n   Return ``True`` if a core dump was generated for the process, otherwise\n   return ``False``.\n\n   Availability: Unix.\n\n\n.. function:: WIFCONTINUED(status)\n\n   Return ``True`` if the process has been continued from a job control stop,\n   otherwise return ``False``.\n\n   Availability: Unix.\n\n\n.. function:: WIFSTOPPED(status)\n\n   Return ``True`` if the process has been stopped, otherwise return\n   ``False``.\n\n   Availability: Unix.\n\n\n.. function:: WIFSIGNALED(status)\n\n   Return ``True`` if the process exited due to a signal, otherwise return\n   ``False``.\n\n   Availability: Unix.\n\n\n.. function:: WIFEXITED(status)\n\n   Return ``True`` if the process exited using the :manpage:`exit(2)` system call,\n   otherwise return ``False``.\n\n   Availability: Unix.\n\n\n.. function:: WEXITSTATUS(status)\n\n   If ``WIFEXITED(status)`` is true, return the integer parameter to the\n   :manpage:`exit(2)` system call.  Otherwise, the return value is meaningless.\n\n   Availability: Unix.\n\n\n.. function:: WSTOPSIG(status)\n\n   Return the signal which caused the process to stop.\n\n   Availability: Unix.\n\n\n.. function:: WTERMSIG(status)\n\n   Return the signal which caused the process to exit.\n\n   Availability: Unix.\n\n\nInterface to the scheduler\n--------------------------\n\nThese functions control how a process is allocated CPU time by the operating\nsystem. They are only available on some Unix platforms. For more detailed\ninformation, consult your Unix manpages.\n\n.. versionadded:: 3.3\n\nThe following scheduling policies are exposed if they are supported by the\noperating system.\n\n.. data:: SCHED_OTHER\n\n   The default scheduling policy.\n\n.. data:: SCHED_BATCH\n\n   Scheduling policy for CPU-intensive processes that tries to preserve\n   interactivity on the rest of the computer.\n\n.. data:: SCHED_IDLE\n\n   Scheduling policy for extremely low priority background tasks.\n\n.. data:: SCHED_SPORADIC\n\n   Scheduling policy for sporadic server programs.\n\n.. data:: SCHED_FIFO\n\n   A First In First Out scheduling policy.\n\n.. data:: SCHED_RR\n\n   A round-robin scheduling policy.\n\n.. data:: SCHED_RESET_ON_FORK\n\n   This flag can be OR'ed with any other scheduling policy. When a process with\n   this flag set forks, its child's scheduling policy and priority are reset to\n   the default.\n\n\n.. class:: sched_param(sched_priority)\n\n   This class represents tunable scheduling parameters used in\n   :func:`sched_setparam`, :func:`sched_setscheduler`, and\n   :func:`sched_getparam`. It is immutable.\n\n   At the moment, there is only one possible parameter:\n\n   .. attribute:: sched_priority\n\n      The scheduling priority for a scheduling policy.\n\n\n.. function:: sched_get_priority_min(policy)\n\n   Get the minimum priority value for *policy*. *policy* is one of the\n   scheduling policy constants above.\n\n\n.. function:: sched_get_priority_max(policy)\n\n   Get the maximum priority value for *policy*. *policy* is one of the\n   scheduling policy constants above.\n\n\n.. function:: sched_setscheduler(pid, policy, param)\n\n   Set the scheduling policy for the process with PID *pid*. A *pid* of 0 means\n   the calling process. *policy* is one of the scheduling policy constants\n   above. *param* is a :class:`sched_param` instance.\n\n\n.. function:: sched_getscheduler(pid)\n\n   Return the scheduling policy for the process with PID *pid*. A *pid* of 0\n   means the calling process. The result is one of the scheduling policy\n   constants above.\n\n\n.. function:: sched_setparam(pid, param)\n\n   Set a scheduling parameters for the process with PID *pid*. A *pid* of 0 means\n   the calling process. *param* is a :class:`sched_param` instance.\n\n\n.. function:: sched_getparam(pid)\n\n   Return the scheduling parameters as a :class:`sched_param` instance for the\n   process with PID *pid*. A *pid* of 0 means the calling process.\n\n\n.. function:: sched_rr_get_interval(pid)\n\n   Return the round-robin quantum in seconds for the process with PID *pid*. A\n   *pid* of 0 means the calling process.\n\n\n.. function:: sched_yield()\n\n   Voluntarily relinquish the CPU.\n\n\n.. function:: sched_setaffinity(pid, mask)\n\n   Restrict the process with PID *pid* (or the current process if zero) to a\n   set of CPUs.  *mask* is an iterable of integers representing the set of\n   CPUs to which the process should be restricted.\n\n\n.. function:: sched_getaffinity(pid)\n\n   Return the set of CPUs the process with PID *pid* (or the current process\n   if zero) is restricted to.\n\n\n.. _os-path:\n\nMiscellaneous System Information\n--------------------------------\n\n\n.. function:: confstr(name)\n\n   Return string-valued system configuration values. *name* specifies the\n   configuration value to retrieve; it may be a string which is the name of a\n   defined system value; these names are specified in a number of standards (POSIX,\n   Unix 95, Unix 98, and others).  Some platforms define additional names as well.\n   The names known to the host operating system are given as the keys of the\n   ``confstr_names`` dictionary.  For configuration variables not included in that\n   mapping, passing an integer for *name* is also accepted.\n\n   If the configuration value specified by *name* isn't defined, ``None`` is\n   returned.\n\n   If *name* is a string and is not known, :exc:`ValueError` is raised.  If a\n   specific value for *name* is not supported by the host system, even if it is\n   included in ``confstr_names``, an :exc:`OSError` is raised with\n   :const:`errno.EINVAL` for the error number.\n\n   Availability: Unix.\n\n\n.. data:: confstr_names\n\n   Dictionary mapping names accepted by :func:`confstr` to the integer values\n   defined for those names by the host operating system. This can be used to\n   determine the set of names known to the system.\n\n   Availability: Unix.\n\n\n.. function:: cpu_count()\n\n   Return the number of CPUs in the system. Returns ``None`` if undetermined.\n\n   .. versionadded:: 3.4\n\n\n.. function:: getloadavg()\n\n   Return the number of processes in the system run queue averaged over the last\n   1, 5, and 15 minutes or raises :exc:`OSError` if the load average was\n   unobtainable.\n\n   Availability: Unix.\n\n\n.. function:: sysconf(name)\n\n   Return integer-valued system configuration values. If the configuration value\n   specified by *name* isn't defined, ``-1`` is returned.  The comments regarding\n   the *name* parameter for :func:`confstr` apply here as well; the dictionary that\n   provides information on the known names is given by ``sysconf_names``.\n\n   Availability: Unix.\n\n\n.. data:: sysconf_names\n\n   Dictionary mapping names accepted by :func:`sysconf` to the integer values\n   defined for those names by the host operating system. This can be used to\n   determine the set of names known to the system.\n\n   Availability: Unix.\n\nThe following data values are used to support path manipulation operations.  These\nare defined for all platforms.\n\nHigher-level operations on pathnames are defined in the :mod:`os.path` module.\n\n\n.. data:: curdir\n\n   The constant string used by the operating system to refer to the current\n   directory. This is ``'.'`` for Windows and POSIX. Also available via\n   :mod:`os.path`.\n\n\n.. data:: pardir\n\n   The constant string used by the operating system to refer to the parent\n   directory. This is ``'..'`` for Windows and POSIX. Also available via\n   :mod:`os.path`.\n\n\n.. data:: sep\n\n   The character used by the operating system to separate pathname components.\n   This is ``'/'`` for POSIX and ``'\\\\'`` for Windows.  Note that knowing this\n   is not sufficient to be able to parse or concatenate pathnames --- use\n   :func:`os.path.split` and :func:`os.path.join` --- but it is occasionally\n   useful. Also available via :mod:`os.path`.\n\n\n.. data:: altsep\n\n   An alternative character used by the operating system to separate pathname\n   components, or ``None`` if only one separator character exists.  This is set to\n   ``'/'`` on Windows systems where ``sep`` is a backslash. Also available via\n   :mod:`os.path`.\n\n\n.. data:: extsep\n\n   The character which separates the base filename from the extension; for example,\n   the ``'.'`` in :file:`os.py`. Also available via :mod:`os.path`.\n\n\n.. data:: pathsep\n\n   The character conventionally used by the operating system to separate search\n   path components (as in :envvar:`PATH`), such as ``':'`` for POSIX or ``';'`` for\n   Windows. Also available via :mod:`os.path`.\n\n\n.. data:: defpath\n\n   The default search path used by :func:`exec\\*p\\* <execl>` and\n   :func:`spawn\\*p\\* <spawnl>` if the environment doesn't have a ``'PATH'``\n   key. Also available via :mod:`os.path`.\n\n\n.. data:: linesep\n\n   The string used to separate (or, rather, terminate) lines on the current\n   platform.  This may be a single character, such as ``'\\n'`` for POSIX, or\n   multiple characters, for example, ``'\\r\\n'`` for Windows. Do not use\n   *os.linesep* as a line terminator when writing files opened in text mode (the\n   default); use a single ``'\\n'`` instead, on all platforms.\n\n\n.. data:: devnull\n\n   The file path of the null device. For example: ``'/dev/null'`` for\n   POSIX, ``'nul'`` for Windows.  Also available via :mod:`os.path`.\n\n.. data:: RTLD_LAZY\n          RTLD_NOW\n          RTLD_GLOBAL\n          RTLD_LOCAL\n          RTLD_NODELETE\n          RTLD_NOLOAD\n          RTLD_DEEPBIND\n\n   Flags for use with the :func:`~sys.setdlopenflags` and\n   :func:`~sys.getdlopenflags` functions.  See the Unix manual page\n   :manpage:`dlopen(3)` for what the different flags mean.\n\n   .. versionadded:: 3.3\n\n.. _os-miscfunc:\n\nMiscellaneous Functions\n-----------------------\n\n\n.. function:: urandom(n)\n\n   Return a string of *n* random bytes suitable for cryptographic use.\n\n   This function returns random bytes from an OS-specific randomness source.  The\n   returned data should be unpredictable enough for cryptographic applications,\n   though its exact quality depends on the OS implementation.\n\n   On Linux, ``getrandom()`` syscall is used if available and the urandom\n   entropy pool is initialized (``getrandom()`` does not block).\n   On a Unix-like system this will query ``/dev/urandom``. On Windows, it\n   will use ``CryptGenRandom()``.  If a randomness source is not found,\n   :exc:`NotImplementedError` will be raised.\n\n   For an easy-to-use interface to the random number generator\n   provided by your platform, please see :class:`random.SystemRandom`.\n\n   .. versionchanged:: 3.5.2\n      On Linux, if ``getrandom()`` blocks (the urandom entropy pool is not\n      initialized yet), fall back on reading ``/dev/urandom``.\n\n   .. versionchanged:: 3.5\n      On Linux 3.17 and newer, the ``getrandom()`` syscall is now used\n      when available.  On OpenBSD 5.6 and newer, the C ``getentropy()``\n      function is now used. These functions avoid the usage of an internal file\n      descriptor.\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/library/sys.rst": ":mod:`sys` --- System-specific parameters and functions\n=======================================================\n\n.. module:: sys\n   :synopsis: Access system-specific parameters and functions.\n\n--------------\n\nThis module provides access to some variables used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter. It is\nalways available.\n\n\n.. data:: abiflags\n\n   On POSIX systems where Python was built with the standard ``configure``\n   script, this contains the ABI flags as specified by :pep:`3149`.\n\n   .. versionadded:: 3.2\n\n\n.. data:: argv\n\n   The list of command line arguments passed to a Python script. ``argv[0]`` is the\n   script name (it is operating system dependent whether this is a full pathname or\n   not).  If the command was executed using the :option:`-c` command line option to\n   the interpreter, ``argv[0]`` is set to the string ``'-c'``.  If no script name\n   was passed to the Python interpreter, ``argv[0]`` is the empty string.\n\n   To loop over the standard input, or the list of files given on the\n   command line, see the :mod:`fileinput` module.\n\n\n.. data:: base_exec_prefix\n\n   Set during Python startup, before ``site.py`` is run, to the same value as\n   :data:`exec_prefix`. If not running in a\n   :ref:`virtual environment <venv-def>`, the values will stay the same; if\n   ``site.py`` finds that a virtual environment is in use, the values of\n   :data:`prefix` and :data:`exec_prefix` will be changed to point to the\n   virtual environment, whereas :data:`base_prefix` and\n   :data:`base_exec_prefix` will remain pointing to the base Python\n   installation (the one which the virtual environment was created from).\n\n   .. versionadded:: 3.3\n\n\n.. data:: base_prefix\n\n   Set during Python startup, before ``site.py`` is run, to the same value as\n   :data:`prefix`. If not running in a :ref:`virtual environment <venv-def>`, the values\n   will stay the same; if ``site.py`` finds that a virtual environment is in\n   use, the values of :data:`prefix` and :data:`exec_prefix` will be changed to\n   point to the virtual environment, whereas :data:`base_prefix` and\n   :data:`base_exec_prefix` will remain pointing to the base Python\n   installation (the one which the virtual environment was created from).\n\n   .. versionadded:: 3.3\n\n\n.. data:: byteorder\n\n   An indicator of the native byte order.  This will have the value ``'big'`` on\n   big-endian (most-significant byte first) platforms, and ``'little'`` on\n   little-endian (least-significant byte first) platforms.\n\n\n.. data:: builtin_module_names\n\n   A tuple of strings giving the names of all modules that are compiled into this\n   Python interpreter.  (This information is not available in any other way ---\n   ``modules.keys()`` only lists the imported modules.)\n\n\n.. function:: call_tracing(func, args)\n\n   Call ``func(*args)``, while tracing is enabled.  The tracing state is saved,\n   and restored afterwards.  This is intended to be called from a debugger from\n   a checkpoint, to recursively debug some other code.\n\n\n.. data:: copyright\n\n   A string containing the copyright pertaining to the Python interpreter.\n\n\n.. function:: _clear_type_cache()\n\n   Clear the internal type cache. The type cache is used to speed up attribute\n   and method lookups. Use the function *only* to drop unnecessary references\n   during reference leak debugging.\n\n   This function should be used for internal and specialized purposes only.\n\n\n.. function:: _current_frames()\n\n   Return a dictionary mapping each thread's identifier to the topmost stack frame\n   currently active in that thread at the time the function is called. Note that\n   functions in the :mod:`traceback` module can build the call stack given such a\n   frame.\n\n   This is most useful for debugging deadlock:  this function does not require the\n   deadlocked threads' cooperation, and such threads' call stacks are frozen for as\n   long as they remain deadlocked.  The frame returned for a non-deadlocked thread\n   may bear no relationship to that thread's current activity by the time calling\n   code examines the frame.\n\n   This function should be used for internal and specialized purposes only.\n\n\n.. function:: _debugmallocstats()\n\n   Print low-level information to stderr about the state of CPython's memory\n   allocator.\n\n   If Python is configured --with-pydebug, it also performs some expensive\n   internal consistency checks.\n\n   .. versionadded:: 3.3\n\n   .. impl-detail::\n\n      This function is specific to CPython.  The exact output format is not\n      defined here, and may change.\n\n\n.. data:: dllhandle\n\n   Integer specifying the handle of the Python DLL. Availability: Windows.\n\n\n.. function:: displayhook(value)\n\n   If *value* is not ``None``, this function prints ``repr(value)`` to\n   ``sys.stdout``, and saves *value* in ``builtins._``. If ``repr(value)`` is\n   not encodable to ``sys.stdout.encoding`` with ``sys.stdout.errors`` error\n   handler (which is probably ``'strict'``), encode it to\n   ``sys.stdout.encoding`` with ``'backslashreplace'`` error handler.\n\n   ``sys.displayhook`` is called on the result of evaluating an :term:`expression`\n   entered in an interactive Python session.  The display of these values can be\n   customized by assigning another one-argument function to ``sys.displayhook``.\n\n   Pseudo-code::\n\n       def displayhook(value):\n           if value is None:\n               return\n           # Set '_' to None to avoid recursion\n           builtins._ = None\n           text = repr(value)\n           try:\n               sys.stdout.write(text)\n           except UnicodeEncodeError:\n               bytes = text.encode(sys.stdout.encoding, 'backslashreplace')\n               if hasattr(sys.stdout, 'buffer'):\n                   sys.stdout.buffer.write(bytes)\n               else:\n                   text = bytes.decode(sys.stdout.encoding, 'strict')\n                   sys.stdout.write(text)\n           sys.stdout.write(\"\\n\")\n           builtins._ = value\n\n   .. versionchanged:: 3.2\n      Use ``'backslashreplace'`` error handler on :exc:`UnicodeEncodeError`.\n\n\n.. data:: dont_write_bytecode\n\n   If this is true, Python won't try to write ``.pyc`` files on the\n   import of source modules.  This value is initially set to ``True`` or\n   ``False`` depending on the :option:`-B` command line option and the\n   :envvar:`PYTHONDONTWRITEBYTECODE` environment variable, but you can set it\n   yourself to control bytecode file generation.\n\n\n.. function:: excepthook(type, value, traceback)\n\n   This function prints out a given traceback and exception to ``sys.stderr``.\n\n   When an exception is raised and uncaught, the interpreter calls\n   ``sys.excepthook`` with three arguments, the exception class, exception\n   instance, and a traceback object.  In an interactive session this happens just\n   before control is returned to the prompt; in a Python program this happens just\n   before the program exits.  The handling of such top-level exceptions can be\n   customized by assigning another three-argument function to ``sys.excepthook``.\n\n\n.. data:: __displayhook__\n          __excepthook__\n\n   These objects contain the original values of ``displayhook`` and ``excepthook``\n   at the start of the program.  They are saved so that ``displayhook`` and\n   ``excepthook`` can be restored in case they happen to get replaced with broken\n   objects.\n\n\n.. function:: exc_info()\n\n   This function returns a tuple of three values that give information about the\n   exception that is currently being handled.  The information returned is specific\n   both to the current thread and to the current stack frame.  If the current stack\n   frame is not handling an exception, the information is taken from the calling\n   stack frame, or its caller, and so on until a stack frame is found that is\n   handling an exception.  Here, \"handling an exception\" is defined as \"executing\n   an except clause.\"  For any stack frame, only information about the exception\n   being currently handled is accessible.\n\n   .. index:: object: traceback\n\n   If no exception is being handled anywhere on the stack, a tuple containing\n   three ``None`` values is returned.  Otherwise, the values returned are\n   ``(type, value, traceback)``.  Their meaning is: *type* gets the type of the\n   exception being handled (a subclass of :exc:`BaseException`); *value* gets\n   the exception instance (an instance of the exception type); *traceback* gets\n   a traceback object (see the Reference Manual) which encapsulates the call\n   stack at the point where the exception originally occurred.\n\n\n.. data:: exec_prefix\n\n   A string giving the site-specific directory prefix where the platform-dependent\n   Python files are installed; by default, this is also ``'/usr/local'``.  This can\n   be set at build time with the ``--exec-prefix`` argument to the\n   :program:`configure` script.  Specifically, all configuration files (e.g. the\n   :file:`pyconfig.h` header file) are installed in the directory\n   :file:`{exec_prefix}/lib/python{X.Y}/config`, and shared library modules are\n   installed in :file:`{exec_prefix}/lib/python{X.Y}/lib-dynload`, where *X.Y*\n   is the version number of Python, for example ``3.2``.\n\n   .. note::\n\n      If a :ref:`virtual environment <venv-def>` is in effect, this\n      value will be changed in ``site.py`` to point to the virtual environment.\n      The value for the Python installation will still be available, via\n      :data:`base_exec_prefix`.\n\n\n.. data:: executable\n\n   A string giving the absolute path of the executable binary for the Python\n   interpreter, on systems where this makes sense. If Python is unable to retrieve\n   the real path to its executable, :data:`sys.executable` will be an empty string\n   or ``None``.\n\n\n.. function:: exit([arg])\n\n   Exit from Python.  This is implemented by raising the :exc:`SystemExit`\n   exception, so cleanup actions specified by finally clauses of :keyword:`try`\n   statements are honored, and it is possible to intercept the exit attempt at\n   an outer level.\n\n   The optional argument *arg* can be an integer giving the exit status\n   (defaulting to zero), or another type of object.  If it is an integer, zero\n   is considered \"successful termination\" and any nonzero value is considered\n   \"abnormal termination\" by shells and the like.  Most systems require it to be\n   in the range 0--127, and produce undefined results otherwise.  Some systems\n   have a convention for assigning specific meanings to specific exit codes, but\n   these are generally underdeveloped; Unix programs generally use 2 for command\n   line syntax errors and 1 for all other kind of errors.  If another type of\n   object is passed, ``None`` is equivalent to passing zero, and any other\n   object is printed to :data:`stderr` and results in an exit code of 1.  In\n   particular, ``sys.exit(\"some error message\")`` is a quick way to exit a\n   program when an error occurs.\n\n   Since :func:`exit` ultimately \"only\" raises an exception, it will only exit\n   the process when called from the main thread, and the exception is not\n   intercepted.\n\n\n.. data:: flags\n\n   The :term:`struct sequence` *flags* exposes the status of command line\n   flags. The attributes are read only.\n\n   ============================= =============================\n   attribute                     flag\n   ============================= =============================\n   :const:`debug`                :option:`-d`\n   :const:`inspect`              :option:`-i`\n   :const:`interactive`          :option:`-i`\n   :const:`optimize`             :option:`-O` or :option:`-OO`\n   :const:`dont_write_bytecode`  :option:`-B`\n   :const:`no_user_site`         :option:`-s`\n   :const:`no_site`              :option:`-S`\n   :const:`ignore_environment`   :option:`-E`\n   :const:`verbose`              :option:`-v`\n   :const:`bytes_warning`        :option:`-b`\n   :const:`quiet`                :option:`-q`\n   :const:`hash_randomization`   :option:`-R`\n   ============================= =============================\n\n   .. versionchanged:: 3.2\n      Added ``quiet`` attribute for the new :option:`-q` flag.\n\n   .. versionadded:: 3.2.3\n      The ``hash_randomization`` attribute.\n\n   .. versionchanged:: 3.3\n      Removed obsolete ``division_warning`` attribute.\n\n\n.. data:: float_info\n\n   A :term:`struct sequence` holding information about the float type. It\n   contains low level information about the precision and internal\n   representation.  The values correspond to the various floating-point\n   constants defined in the standard header file :file:`float.h` for the 'C'\n   programming language; see section 5.2.4.2.2 of the 1999 ISO/IEC C standard\n   [C99]_, 'Characteristics of floating types', for details.\n\n   .. tabularcolumns:: |l|l|L|\n\n   +---------------------+----------------+--------------------------------------------------+\n   | attribute           | float.h macro  | explanation                                      |\n   +=====================+================+==================================================+\n   | :const:`epsilon`    | DBL_EPSILON    | difference between 1 and the least value greater |\n   |                     |                | than 1 that is representable as a float          |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`dig`        | DBL_DIG        | maximum number of decimal digits that can be     |\n   |                     |                | faithfully represented in a float;  see below    |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`mant_dig`   | DBL_MANT_DIG   | float precision: the number of base-``radix``    |\n   |                     |                | digits in the significand of a float             |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`max`        | DBL_MAX        | maximum representable finite float               |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`max_exp`    | DBL_MAX_EXP    | maximum integer e such that ``radix**(e-1)`` is  |\n   |                     |                | a representable finite float                     |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`max_10_exp` | DBL_MAX_10_EXP | maximum integer e such that ``10**e`` is in the  |\n   |                     |                | range of representable finite floats             |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`min`        | DBL_MIN        | minimum positive normalized float                |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`min_exp`    | DBL_MIN_EXP    | minimum integer e such that ``radix**(e-1)`` is  |\n   |                     |                | a normalized float                               |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`min_10_exp` | DBL_MIN_10_EXP | minimum integer e such that ``10**e`` is a       |\n   |                     |                | normalized float                                 |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`radix`      | FLT_RADIX      | radix of exponent representation                 |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`rounds`     | FLT_ROUNDS     | integer constant representing the rounding mode  |\n   |                     |                | used for arithmetic operations.  This reflects   |\n   |                     |                | the value of the system FLT_ROUNDS macro at      |\n   |                     |                | interpreter startup time.  See section 5.2.4.2.2 |\n   |                     |                | of the C99 standard for an explanation of the    |\n   |                     |                | possible values and their meanings.              |\n   +---------------------+----------------+--------------------------------------------------+\n\n   The attribute :attr:`sys.float_info.dig` needs further explanation.  If\n   ``s`` is any string representing a decimal number with at most\n   :attr:`sys.float_info.dig` significant digits, then converting ``s`` to a\n   float and back again will recover a string representing the same decimal\n   value::\n\n      >>> import sys\n      >>> sys.float_info.dig\n      15\n      >>> s = '3.14159265358979'    # decimal string with 15 significant digits\n      >>> format(float(s), '.15g')  # convert to float and back -> same value\n      '3.14159265358979'\n\n   But for strings with more than :attr:`sys.float_info.dig` significant digits,\n   this isn't always true::\n\n      >>> s = '9876543211234567'    # 16 significant digits is too many!\n      >>> format(float(s), '.16g')  # conversion changes value\n      '9876543211234568'\n\n.. data:: float_repr_style\n\n   A string indicating how the :func:`repr` function behaves for\n   floats.  If the string has value ``'short'`` then for a finite\n   float ``x``, ``repr(x)`` aims to produce a short string with the\n   property that ``float(repr(x)) == x``.  This is the usual behaviour\n   in Python 3.1 and later.  Otherwise, ``float_repr_style`` has value\n   ``'legacy'`` and ``repr(x)`` behaves in the same way as it did in\n   versions of Python prior to 3.1.\n\n   .. versionadded:: 3.1\n\n\n.. function:: getallocatedblocks()\n\n   Return the number of memory blocks currently allocated by the interpreter,\n   regardless of their size.  This function is mainly useful for tracking\n   and debugging memory leaks.  Because of the interpreter's internal\n   caches, the result can vary from call to call; you may have to call\n   :func:`_clear_type_cache()` and :func:`gc.collect()` to get more\n   predictable results.\n\n   If a Python build or implementation cannot reasonably compute this\n   information, :func:`getallocatedblocks()` is allowed to return 0 instead.\n\n   .. versionadded:: 3.4\n\n\n.. function:: getcheckinterval()\n\n   Return the interpreter's \"check interval\"; see :func:`setcheckinterval`.\n\n   .. deprecated:: 3.2\n      Use :func:`getswitchinterval` instead.\n\n\n.. function:: getdefaultencoding()\n\n   Return the name of the current default string encoding used by the Unicode\n   implementation.\n\n\n.. function:: getdlopenflags()\n\n   Return the current value of the flags that are used for\n   :c:func:`dlopen` calls.  Symbolic names for the flag values can be\n   found in the :mod:`os` module (``RTLD_xxx`` constants, e.g.\n   :data:`os.RTLD_LAZY`).  Availability: Unix.\n\n\n.. function:: getfilesystemencoding()\n\n   Return the name of the encoding used to convert Unicode filenames into\n   system file names. The result value depends on the operating system:\n\n   * On Mac OS X, the encoding is ``'utf-8'``.\n\n   * On Unix, the encoding is the user's preference according to the result of\n     nl_langinfo(CODESET).\n\n   * On Windows NT+, file names are Unicode natively, so no conversion is\n     performed. :func:`getfilesystemencoding` still returns ``'mbcs'``, as\n     this is the encoding that applications should use when they explicitly\n     want to convert Unicode strings to byte strings that are equivalent when\n     used as file names.\n\n   * On Windows 9x, the encoding is ``'mbcs'``.\n\n   .. versionchanged:: 3.2\n      :func:`getfilesystemencoding` result cannot be ``None`` anymore.\n\n\n.. function:: getrefcount(object)\n\n   Return the reference count of the *object*.  The count returned is generally one\n   higher than you might expect, because it includes the (temporary) reference as\n   an argument to :func:`getrefcount`.\n\n\n.. function:: getrecursionlimit()\n\n   Return the current value of the recursion limit, the maximum depth of the Python\n   interpreter stack.  This limit prevents infinite recursion from causing an\n   overflow of the C stack and crashing Python.  It can be set by\n   :func:`setrecursionlimit`.\n\n\n.. function:: getsizeof(object[, default])\n\n   Return the size of an object in bytes. The object can be any type of\n   object. All built-in objects will return correct results, but this\n   does not have to hold true for third-party extensions as it is implementation\n   specific.\n\n   Only the memory consumption directly attributed to the object is\n   accounted for, not the memory consumption of objects it refers to.\n\n   If given, *default* will be returned if the object does not provide means to\n   retrieve the size.  Otherwise a :exc:`TypeError` will be raised.\n\n   :func:`getsizeof` calls the object's ``__sizeof__`` method and adds an\n   additional garbage collector overhead if the object is managed by the garbage\n   collector.\n\n   See `recursive sizeof recipe <https://code.activestate.com/recipes/577504>`_\n   for an example of using :func:`getsizeof` recursively to find the size of\n   containers and all their contents.\n\n.. function:: getswitchinterval()\n\n   Return the interpreter's \"thread switch interval\"; see\n   :func:`setswitchinterval`.\n\n   .. versionadded:: 3.2\n\n\n.. function:: _getframe([depth])\n\n   Return a frame object from the call stack.  If optional integer *depth* is\n   given, return the frame object that many calls below the top of the stack.  If\n   that is deeper than the call stack, :exc:`ValueError` is raised.  The default\n   for *depth* is zero, returning the frame at the top of the call stack.\n\n   .. impl-detail::\n\n      This function should be used for internal and specialized purposes only.\n      It is not guaranteed to exist in all implementations of Python.\n\n\n.. function:: getprofile()\n\n   .. index::\n      single: profile function\n      single: profiler\n\n   Get the profiler function as set by :func:`setprofile`.\n\n\n.. function:: gettrace()\n\n   .. index::\n      single: trace function\n      single: debugger\n\n   Get the trace function as set by :func:`settrace`.\n\n   .. impl-detail::\n\n      The :func:`gettrace` function is intended only for implementing debuggers,\n      profilers, coverage tools and the like.  Its behavior is part of the\n      implementation platform, rather than part of the language definition, and\n      thus may not be available in all Python implementations.\n\n\n.. function:: getwindowsversion()\n\n   Return a named tuple describing the Windows version\n   currently running.  The named elements are *major*, *minor*,\n   *build*, *platform*, *service_pack*, *service_pack_minor*,\n   *service_pack_major*, *suite_mask*, and *product_type*.\n   *service_pack* contains a string while all other values are\n   integers. The components can also be accessed by name, so\n   ``sys.getwindowsversion()[0]`` is equivalent to\n   ``sys.getwindowsversion().major``. For compatibility with prior\n   versions, only the first 5 elements are retrievable by indexing.\n\n   *platform* may be one of the following values:\n\n   +-----------------------------------------+-------------------------+\n   | Constant                                | Platform                |\n   +=========================================+=========================+\n   | :const:`0 (VER_PLATFORM_WIN32s)`        | Win32s on Windows 3.1   |\n   +-----------------------------------------+-------------------------+\n   | :const:`1 (VER_PLATFORM_WIN32_WINDOWS)` | Windows 95/98/ME        |\n   +-----------------------------------------+-------------------------+\n   | :const:`2 (VER_PLATFORM_WIN32_NT)`      | Windows NT/2000/XP/x64  |\n   +-----------------------------------------+-------------------------+\n   | :const:`3 (VER_PLATFORM_WIN32_CE)`      | Windows CE              |\n   +-----------------------------------------+-------------------------+\n\n   *product_type* may be one of the following values:\n\n   +---------------------------------------+---------------------------------+\n   | Constant                              | Meaning                         |\n   +=======================================+=================================+\n   | :const:`1 (VER_NT_WORKSTATION)`       | The system is a workstation.    |\n   +---------------------------------------+---------------------------------+\n   | :const:`2 (VER_NT_DOMAIN_CONTROLLER)` | The system is a domain          |\n   |                                       | controller.                     |\n   +---------------------------------------+---------------------------------+\n   | :const:`3 (VER_NT_SERVER)`            | The system is a server, but not |\n   |                                       | a domain controller.            |\n   +---------------------------------------+---------------------------------+\n\n\n   This function wraps the Win32 :c:func:`GetVersionEx` function; see the\n   Microsoft documentation on :c:func:`OSVERSIONINFOEX` for more information\n   about these fields.\n\n   Availability: Windows.\n\n   .. versionchanged:: 3.2\n      Changed to a named tuple and added *service_pack_minor*,\n      *service_pack_major*, *suite_mask*, and *product_type*.\n\n\n.. function:: get_coroutine_wrapper()\n\n   Returns ``None``, or a wrapper set by :func:`set_coroutine_wrapper`.\n\n   .. versionadded:: 3.5\n      See :pep:`492` for more details.\n\n   .. note::\n      This function has been added on a provisional basis (see :pep:`411`\n      for details.)  Use it only for debugging purposes.\n\n\n.. data:: hash_info\n\n   A :term:`struct sequence` giving parameters of the numeric hash\n   implementation.  For more details about hashing of numeric types, see\n   :ref:`numeric-hash`.\n\n   +---------------------+--------------------------------------------------+\n   | attribute           | explanation                                      |\n   +=====================+==================================================+\n   | :const:`width`      | width in bits used for hash values               |\n   +---------------------+--------------------------------------------------+\n   | :const:`modulus`    | prime modulus P used for numeric hash scheme     |\n   +---------------------+--------------------------------------------------+\n   | :const:`inf`        | hash value returned for a positive infinity      |\n   +---------------------+--------------------------------------------------+\n   | :const:`nan`        | hash value returned for a nan                    |\n   +---------------------+--------------------------------------------------+\n   | :const:`imag`       | multiplier used for the imaginary part of a      |\n   |                     | complex number                                   |\n   +---------------------+--------------------------------------------------+\n   | :const:`algorithm`  | name of the algorithm for hashing of str, bytes, |\n   |                     | and memoryview                                   |\n   +---------------------+--------------------------------------------------+\n   | :const:`hash_bits`  | internal output size of the hash algorithm       |\n   +---------------------+--------------------------------------------------+\n   | :const:`seed_bits`  | size of the seed key of the hash algorithm       |\n   +---------------------+--------------------------------------------------+\n\n\n   .. versionadded:: 3.2\n\n   .. versionchanged:: 3.4\n      Added *algorithm*, *hash_bits* and *seed_bits*\n\n\n.. data:: hexversion\n\n   The version number encoded as a single integer.  This is guaranteed to increase\n   with each version, including proper support for non-production releases.  For\n   example, to test that the Python interpreter is at least version 1.5.2, use::\n\n      if sys.hexversion >= 0x010502F0:\n          # use some advanced feature\n          ...\n      else:\n          # use an alternative implementation or warn the user\n          ...\n\n   This is called ``hexversion`` since it only really looks meaningful when viewed\n   as the result of passing it to the built-in :func:`hex` function.  The\n   :term:`struct sequence`  :data:`sys.version_info` may be used for a more\n   human-friendly encoding of the same information.\n\n   More details of ``hexversion`` can be found at :ref:`apiabiversion`.\n\n\n.. data:: implementation\n\n   An object containing information about the implementation of the\n   currently running Python interpreter.  The following attributes are\n   required to exist in all Python implementations.\n\n   *name* is the implementation's identifier, e.g. ``'cpython'``.  The actual\n   string is defined by the Python implementation, but it is guaranteed to be\n   lower case.\n\n   *version* is a named tuple, in the same format as\n   :data:`sys.version_info`.  It represents the version of the Python\n   *implementation*.  This has a distinct meaning from the specific\n   version of the Python *language* to which the currently running\n   interpreter conforms, which ``sys.version_info`` represents.  For\n   example, for PyPy 1.8 ``sys.implementation.version`` might be\n   ``sys.version_info(1, 8, 0, 'final', 0)``, whereas ``sys.version_info``\n   would be ``sys.version_info(2, 7, 2, 'final', 0)``.  For CPython they\n   are the same value, since it is the reference implementation.\n\n   *hexversion* is the implementation version in hexadecimal format, like\n   :data:`sys.hexversion`.\n\n   *cache_tag* is the tag used by the import machinery in the filenames of\n   cached modules.  By convention, it would be a composite of the\n   implementation's name and version, like ``'cpython-33'``.  However, a\n   Python implementation may use some other value if appropriate.  If\n   ``cache_tag`` is set to ``None``, it indicates that module caching should\n   be disabled.\n\n   :data:`sys.implementation` may contain additional attributes specific to\n   the Python implementation.  These non-standard attributes must start with\n   an underscore, and are not described here.  Regardless of its contents,\n   :data:`sys.implementation` will not change during a run of the interpreter,\n   nor between implementation versions.  (It may change between Python\n   language versions, however.)  See :pep:`421` for more information.\n\n   .. versionadded:: 3.3\n\n\n.. data:: int_info\n\n   A :term:`struct sequence` that holds information about Python's internal\n   representation of integers.  The attributes are read only.\n\n   .. tabularcolumns:: |l|L|\n\n   +-------------------------+----------------------------------------------+\n   | Attribute               | Explanation                                  |\n   +=========================+==============================================+\n   | :const:`bits_per_digit` | number of bits held in each digit.  Python   |\n   |                         | integers are stored internally in base       |\n   |                         | ``2**int_info.bits_per_digit``               |\n   +-------------------------+----------------------------------------------+\n   | :const:`sizeof_digit`   | size in bytes of the C type used to          |\n   |                         | represent a digit                            |\n   +-------------------------+----------------------------------------------+\n\n   .. versionadded:: 3.1\n\n\n.. data:: __interactivehook__\n\n   When this attribute exists, its value is automatically called (with no\n   arguments) when the interpreter is launched in :ref:`interactive mode\n   <tut-interactive>`.  This is done after the :envvar:`PYTHONSTARTUP` file is\n   read, so that you can set this hook there.  The :mod:`site` module\n   :ref:`sets this <rlcompleter-config>`.\n\n   .. versionadded:: 3.4\n\n\n.. function:: intern(string)\n\n   Enter *string* in the table of \"interned\" strings and return the interned string\n   -- which is *string* itself or a copy. Interning strings is useful to gain a\n   little performance on dictionary lookup -- if the keys in a dictionary are\n   interned, and the lookup key is interned, the key comparisons (after hashing)\n   can be done by a pointer compare instead of a string compare.  Normally, the\n   names used in Python programs are automatically interned, and the dictionaries\n   used to hold module, class or instance attributes have interned keys.\n\n   Interned strings are not immortal; you must keep a reference to the return\n   value of :func:`intern` around to benefit from it.\n\n\n.. function:: is_finalizing()\n\n   Return :const:`True` if the Python interpreter is\n   :term:`shutting down <interpreter shutdown>`, :const:`False` otherwise.\n\n   .. versionadded:: 3.5\n\n\n.. data:: last_type\n          last_value\n          last_traceback\n\n   These three variables are not always defined; they are set when an exception is\n   not handled and the interpreter prints an error message and a stack traceback.\n   Their intended use is to allow an interactive user to import a debugger module\n   and engage in post-mortem debugging without having to re-execute the command\n   that caused the error.  (Typical use is ``import pdb; pdb.pm()`` to enter the\n   post-mortem debugger; see :mod:`pdb` module for\n   more information.)\n\n   The meaning of the variables is the same as that of the return values from\n   :func:`exc_info` above.\n\n\n.. data:: maxsize\n\n   An integer giving the maximum value a variable of type :c:type:`Py_ssize_t` can\n   take.  It's usually ``2**31 - 1`` on a 32-bit platform and ``2**63 - 1`` on a\n   64-bit platform.\n\n\n.. data:: maxunicode\n\n   An integer giving the value of the largest Unicode code point,\n   i.e. ``1114111`` (``0x10FFFF`` in hexadecimal).\n\n   .. versionchanged:: 3.3\n      Before :pep:`393`, ``sys.maxunicode`` used to be either ``0xFFFF``\n      or ``0x10FFFF``, depending on the configuration option that specified\n      whether Unicode characters were stored as UCS-2 or UCS-4.\n\n\n.. data:: meta_path\n\n    A list of :term:`meta path finder` objects that have their\n    :meth:`~importlib.abc.MetaPathFinder.find_spec` methods called to see if one\n    of the objects can find the module to be imported. The\n    :meth:`~importlib.abc.MetaPathFinder.find_spec` method is called with at\n    least the absolute name of the module being imported. If the module to be\n    imported is contained in a package, then the parent package's :attr:`__path__`\n    attribute is passed in as a second argument. The method returns a\n    :term:`module spec`, or ``None`` if the module cannot be found.\n\n    .. seealso::\n\n        :class:`importlib.abc.MetaPathFinder`\n          The abstract base class defining the interface of finder objects on\n          :data:`meta_path`.\n        :class:`importlib.machinery.ModuleSpec`\n          The concrete class which\n          :meth:`~importlib.abc.MetaPathFinder.find_spec` should return\n          instances of.\n\n    .. versionchanged:: 3.4\n\n        :term:`Module specs <module spec>` were introduced in Python 3.4, by\n        :pep:`451`. Earlier versions of Python looked for a method called\n        :meth:`~importlib.abc.MetaPathFinder.find_module`.\n        This is still called as a fallback if a :data:`meta_path` entry doesn't\n        have a :meth:`~importlib.abc.MetaPathFinder.find_spec` method.\n\n.. data:: modules\n\n   This is a dictionary that maps module names to modules which have already been\n   loaded.  This can be manipulated to force reloading of modules and other tricks.\n   However, replacing the dictionary will not necessarily work as expected and\n   deleting essential items from the dictionary may cause Python to fail.\n\n\n.. data:: path\n\n   .. index:: triple: module; search; path\n\n   A list of strings that specifies the search path for modules. Initialized from\n   the environment variable :envvar:`PYTHONPATH`, plus an installation-dependent\n   default.\n\n   As initialized upon program startup, the first item of this list, ``path[0]``,\n   is the directory containing the script that was used to invoke the Python\n   interpreter.  If the script directory is not available (e.g.  if the interpreter\n   is invoked interactively or if the script is read from standard input),\n   ``path[0]`` is the empty string, which directs Python to search modules in the\n   current directory first.  Notice that the script directory is inserted *before*\n   the entries inserted as a result of :envvar:`PYTHONPATH`.\n\n   A program is free to modify this list for its own purposes.  Only strings\n   and bytes should be added to :data:`sys.path`; all other data types are\n   ignored during import.\n\n\n   .. seealso::\n      Module :mod:`site` This describes how to use .pth files to extend\n      :data:`sys.path`.\n\n\n.. data:: path_hooks\n\n    A list of callables that take a path argument to try to create a\n    :term:`finder` for the path. If a finder can be created, it is to be\n    returned by the callable, else raise :exc:`ImportError`.\n\n    Originally specified in :pep:`302`.\n\n\n.. data:: path_importer_cache\n\n    A dictionary acting as a cache for :term:`finder` objects. The keys are\n    paths that have been passed to :data:`sys.path_hooks` and the values are\n    the finders that are found. If a path is a valid file system path but no\n    finder is found on :data:`sys.path_hooks` then ``None`` is\n    stored.\n\n    Originally specified in :pep:`302`.\n\n    .. versionchanged:: 3.3\n       ``None`` is stored instead of :class:`imp.NullImporter` when no finder\n       is found.\n\n\n.. data:: platform\n\n   This string contains a platform identifier that can be used to append\n   platform-specific components to :data:`sys.path`, for instance.\n\n   For Unix systems, except on Linux, this is the lowercased OS name as\n   returned by ``uname -s`` with the first part of the version as returned by\n   ``uname -r`` appended, e.g. ``'sunos5'`` or ``'freebsd8'``, *at the time\n   when Python was built*.  Unless you want to test for a specific system\n   version, it is therefore recommended to use the following idiom::\n\n      if sys.platform.startswith('freebsd'):\n          # FreeBSD-specific code here...\n      elif sys.platform.startswith('linux'):\n          # Linux-specific code here...\n\n   For other systems, the values are:\n\n   ================ ===========================\n   System           ``platform`` value\n   ================ ===========================\n   Linux            ``'linux'``\n   Windows          ``'win32'``\n   Windows/Cygwin   ``'cygwin'``\n   Mac OS X         ``'darwin'``\n   ================ ===========================\n\n   .. versionchanged:: 3.3\n      On Linux, :attr:`sys.platform` doesn't contain the major version anymore.\n      It is always ``'linux'``, instead of ``'linux2'`` or ``'linux3'``.  Since\n      older Python versions include the version number, it is recommended to\n      always use the ``startswith`` idiom presented above.\n\n   .. seealso::\n\n      :attr:`os.name` has a coarser granularity.  :func:`os.uname` gives\n      system-dependent version information.\n\n      The :mod:`platform` module provides detailed checks for the\n      system's identity.\n\n\n.. data:: prefix\n\n   A string giving the site-specific directory prefix where the platform\n   independent Python files are installed; by default, this is the string\n   ``'/usr/local'``.  This can be set at build time with the ``--prefix``\n   argument to the :program:`configure` script.  The main collection of Python\n   library modules is installed in the directory :file:`{prefix}/lib/python{X.Y}`\n   while the platform independent header files (all except :file:`pyconfig.h`) are\n   stored in :file:`{prefix}/include/python{X.Y}`, where *X.Y* is the version\n   number of Python, for example ``3.2``.\n\n   .. note:: If a :ref:`virtual environment <venv-def>` is in effect, this\n      value will be changed in ``site.py`` to point to the virtual\n      environment. The value for the Python installation will still be\n      available, via :data:`base_prefix`.\n\n\n.. data:: ps1\n          ps2\n\n   .. index::\n      single: interpreter prompts\n      single: prompts, interpreter\n\n   Strings specifying the primary and secondary prompt of the interpreter.  These\n   are only defined if the interpreter is in interactive mode.  Their initial\n   values in this case are ``'>>> '`` and ``'... '``.  If a non-string object is\n   assigned to either variable, its :func:`str` is re-evaluated each time the\n   interpreter prepares to read a new interactive command; this can be used to\n   implement a dynamic prompt.\n\n\n.. function:: setcheckinterval(interval)\n\n   Set the interpreter's \"check interval\".  This integer value determines how often\n   the interpreter checks for periodic things such as thread switches and signal\n   handlers.  The default is ``100``, meaning the check is performed every 100\n   Python virtual instructions. Setting it to a larger value may increase\n   performance for programs using threads.  Setting it to a value ``<=`` 0 checks\n   every virtual instruction, maximizing responsiveness as well as overhead.\n\n   .. deprecated:: 3.2\n      This function doesn't have an effect anymore, as the internal logic for\n      thread switching and asynchronous tasks has been rewritten.  Use\n      :func:`setswitchinterval` instead.\n\n\n.. function:: setdlopenflags(n)\n\n   Set the flags used by the interpreter for :c:func:`dlopen` calls, such as when\n   the interpreter loads extension modules.  Among other things, this will enable a\n   lazy resolving of symbols when importing a module, if called as\n   ``sys.setdlopenflags(0)``.  To share symbols across extension modules, call as\n   ``sys.setdlopenflags(os.RTLD_GLOBAL)``.  Symbolic names for the flag values\n   can be found in the :mod:`os` module (``RTLD_xxx`` constants, e.g.\n   :data:`os.RTLD_LAZY`).\n\n   Availability: Unix.\n\n.. function:: setprofile(profilefunc)\n\n   .. index::\n      single: profile function\n      single: profiler\n\n   Set the system's profile function, which allows you to implement a Python source\n   code profiler in Python.  See chapter :ref:`profile` for more information on the\n   Python profiler.  The system's profile function is called similarly to the\n   system's trace function (see :func:`settrace`), but it isn't called for each\n   executed line of code (only on call and return, but the return event is reported\n   even when an exception has been set).  The function is thread-specific, but\n   there is no way for the profiler to know about context switches between threads,\n   so it does not make sense to use this in the presence of multiple threads. Also,\n   its return value is not used, so it can simply return ``None``.\n\n\n.. function:: setrecursionlimit(limit)\n\n   Set the maximum depth of the Python interpreter stack to *limit*.  This limit\n   prevents infinite recursion from causing an overflow of the C stack and crashing\n   Python.\n\n   The highest possible limit is platform-dependent.  A user may need to set the\n   limit higher when they have a program that requires deep recursion and a platform\n   that supports a higher limit.  This should be done with care, because a too-high\n   limit can lead to a crash.\n\n   If the new limit is too low at the current recursion depth, a\n   :exc:`RecursionError` exception is raised.\n\n   .. versionchanged:: 3.5.1\n      A :exc:`RecursionError` exception is now raised if the new limit is too\n      low at the current recursion depth.\n\n\n.. function:: setswitchinterval(interval)\n\n   Set the interpreter's thread switch interval (in seconds).  This floating-point\n   value determines the ideal duration of the \"timeslices\" allocated to\n   concurrently running Python threads.  Please note that the actual value\n   can be higher, especially if long-running internal functions or methods\n   are used.  Also, which thread becomes scheduled at the end of the interval\n   is the operating system's decision.  The interpreter doesn't have its\n   own scheduler.\n\n   .. versionadded:: 3.2\n\n\n.. function:: settrace(tracefunc)\n\n   .. index::\n      single: trace function\n      single: debugger\n\n   Set the system's trace function, which allows you to implement a Python\n   source code debugger in Python.  The function is thread-specific; for a\n   debugger to support multiple threads, it must be registered using\n   :func:`settrace` for each thread being debugged.\n\n   Trace functions should have three arguments: *frame*, *event*, and\n   *arg*. *frame* is the current stack frame.  *event* is a string: ``'call'``,\n   ``'line'``, ``'return'``, ``'exception'``, ``'c_call'``, ``'c_return'``, or\n   ``'c_exception'``. *arg* depends on the event type.\n\n   The trace function is invoked (with *event* set to ``'call'``) whenever a new\n   local scope is entered; it should return a reference to a local trace\n   function to be used that scope, or ``None`` if the scope shouldn't be traced.\n\n   The local trace function should return a reference to itself (or to another\n   function for further tracing in that scope), or ``None`` to turn off tracing\n   in that scope.\n\n   The events have the following meaning:\n\n   ``'call'``\n      A function is called (or some other code block entered).  The\n      global trace function is called; *arg* is ``None``; the return value\n      specifies the local trace function.\n\n   ``'line'``\n      The interpreter is about to execute a new line of code or re-execute the\n      condition of a loop.  The local trace function is called; *arg* is\n      ``None``; the return value specifies the new local trace function.  See\n      :file:`Objects/lnotab_notes.txt` for a detailed explanation of how this\n      works.\n\n   ``'return'``\n      A function (or other code block) is about to return.  The local trace\n      function is called; *arg* is the value that will be returned, or ``None``\n      if the event is caused by an exception being raised.  The trace function's\n      return value is ignored.\n\n   ``'exception'``\n      An exception has occurred.  The local trace function is called; *arg* is a\n      tuple ``(exception, value, traceback)``; the return value specifies the\n      new local trace function.\n\n   ``'c_call'``\n      A C function is about to be called.  This may be an extension function or\n      a built-in.  *arg* is the C function object.\n\n   ``'c_return'``\n      A C function has returned. *arg* is the C function object.\n\n   ``'c_exception'``\n      A C function has raised an exception.  *arg* is the C function object.\n\n   Note that as an exception is propagated down the chain of callers, an\n   ``'exception'`` event is generated at each level.\n\n   For more information on code and frame objects, refer to :ref:`types`.\n\n   .. impl-detail::\n\n      The :func:`settrace` function is intended only for implementing debuggers,\n      profilers, coverage tools and the like.  Its behavior is part of the\n      implementation platform, rather than part of the language definition, and\n      thus may not be available in all Python implementations.\n\n\n.. function:: settscdump(on_flag)\n\n   Activate dumping of VM measurements using the Pentium timestamp counter, if\n   *on_flag* is true. Deactivate these dumps if *on_flag* is off. The function is\n   available only if Python was compiled with ``--with-tsc``. To understand\n   the output of this dump, read :file:`Python/ceval.c` in the Python sources.\n\n   .. impl-detail::\n      This function is intimately bound to CPython implementation details and\n      thus not likely to be implemented elsewhere.\n\n\n.. function:: set_coroutine_wrapper(wrapper)\n\n   Allows intercepting creation of :term:`coroutine` objects (only ones that\n   are created by an :keyword:`async def` function; generators decorated with\n   :func:`types.coroutine` or :func:`asyncio.coroutine` will not be\n   intercepted).\n\n   The *wrapper* argument must be either:\n\n   * a callable that accepts one argument (a coroutine object);\n   * ``None``, to reset the wrapper.\n\n   If called twice, the new wrapper replaces the previous one.  The function\n   is thread-specific.\n\n   The *wrapper* callable cannot define new coroutines directly or indirectly::\n\n        def wrapper(coro):\n            async def wrap(coro):\n                return await coro\n            return wrap(coro)\n        sys.set_coroutine_wrapper(wrapper)\n\n        async def foo():\n            pass\n\n        # The following line will fail with a RuntimeError, because\n        # ``wrapper`` creates a ``wrap(coro)`` coroutine:\n        foo()\n\n   See also :func:`get_coroutine_wrapper`.\n\n   .. versionadded:: 3.5\n      See :pep:`492` for more details.\n\n   .. note::\n      This function has been added on a provisional basis (see :pep:`411`\n      for details.)  Use it only for debugging purposes.\n\n\n.. data:: stdin\n          stdout\n          stderr\n\n   :term:`File objects <file object>` used by the interpreter for standard\n   input, output and errors:\n\n   * ``stdin`` is used for all interactive input (including calls to\n     :func:`input`);\n   * ``stdout`` is used for the output of :func:`print` and :term:`expression`\n     statements and for the prompts of :func:`input`;\n   * The interpreter's own prompts and its error messages go to ``stderr``.\n\n   These streams are regular :term:`text files <text file>` like those\n   returned by the :func:`open` function.  Their parameters are chosen as\n   follows:\n\n   * The character encoding is platform-dependent.  Under Windows, if the stream\n     is interactive (that is, if its :meth:`isatty` method returns ``True``), the\n     console codepage is used, otherwise the ANSI code page.  Under other\n     platforms, the locale encoding is used (see :meth:`locale.getpreferredencoding`).\n\n     Under all platforms though, you can override this value by setting the\n     :envvar:`PYTHONIOENCODING` environment variable before starting Python.\n\n   * When interactive, standard streams are line-buffered.  Otherwise, they\n     are block-buffered like regular text files.  You can override this\n     value with the :option:`-u` command-line option.\n\n   .. note::\n\n      To write or read binary data from/to the standard streams, use the\n      underlying binary :data:`~io.TextIOBase.buffer` object.  For example, to\n      write bytes to :data:`stdout`, use ``sys.stdout.buffer.write(b'abc')``.\n\n      However, if you are writing a library (and do not control in which\n      context its code will be executed), be aware that the standard streams\n      may be replaced with file-like objects like :class:`io.StringIO` which\n      do not support the :attr:`~io.BufferedIOBase.buffer` attribute.\n\n\n.. data:: __stdin__\n          __stdout__\n          __stderr__\n\n   These objects contain the original values of ``stdin``, ``stderr`` and\n   ``stdout`` at the start of the program.  They are used during finalization,\n   and could be useful to print to the actual standard stream no matter if the\n   ``sys.std*`` object has been redirected.\n\n   It can also be used to restore the actual files to known working file objects\n   in case they have been overwritten with a broken object.  However, the\n   preferred way to do this is to explicitly save the previous stream before\n   replacing it, and restore the saved object.\n\n   .. note::\n       Under some conditions ``stdin``, ``stdout`` and ``stderr`` as well as the\n       original values ``__stdin__``, ``__stdout__`` and ``__stderr__`` can be\n       ``None``. It is usually the case for Windows GUI apps that aren't connected\n       to a console and Python apps started with :program:`pythonw`.\n\n\n.. data:: thread_info\n\n   A :term:`struct sequence` holding information about the thread\n   implementation.\n\n   .. tabularcolumns:: |l|p{0.7\\linewidth}|\n\n   +------------------+---------------------------------------------------------+\n   | Attribute        | Explanation                                             |\n   +==================+=========================================================+\n   | :const:`name`    | Name of the thread implementation:                      |\n   |                  |                                                         |\n   |                  |  * ``'nt'``: Windows threads                            |\n   |                  |  * ``'pthread'``: POSIX threads                         |\n   |                  |  * ``'solaris'``: Solaris threads                       |\n   +------------------+---------------------------------------------------------+\n   | :const:`lock`    | Name of the lock implementation:                        |\n   |                  |                                                         |\n   |                  |  * ``'semaphore'``: a lock uses a semaphore             |\n   |                  |  * ``'mutex+cond'``: a lock uses a mutex                |\n   |                  |    and a condition variable                             |\n   |                  |  * ``None`` if this information is unknown              |\n   +------------------+---------------------------------------------------------+\n   | :const:`version` | Name and version of the thread library. It is a string, |\n   |                  | or ``None`` if this information is unknown.             |\n   +------------------+---------------------------------------------------------+\n\n   .. versionadded:: 3.3\n\n\n.. data:: tracebacklimit\n\n   When this variable is set to an integer value, it determines the maximum number\n   of levels of traceback information printed when an unhandled exception occurs.\n   The default is ``1000``.  When set to ``0`` or less, all traceback information\n   is suppressed and only the exception type and value are printed.\n\n\n.. data:: version\n\n   A string containing the version number of the Python interpreter plus additional\n   information on the build number and compiler used.  This string is displayed\n   when the interactive interpreter is started.  Do not extract version information\n   out of it, rather, use :data:`version_info` and the functions provided by the\n   :mod:`platform` module.\n\n\n.. data:: api_version\n\n   The C API version for this interpreter.  Programmers may find this useful when\n   debugging version conflicts between Python and extension modules.\n\n\n.. data:: version_info\n\n   A tuple containing the five components of the version number: *major*, *minor*,\n   *micro*, *releaselevel*, and *serial*.  All values except *releaselevel* are\n   integers; the release level is ``'alpha'``, ``'beta'``, ``'candidate'``, or\n   ``'final'``.  The ``version_info`` value corresponding to the Python version 2.0\n   is ``(2, 0, 0, 'final', 0)``.  The components can also be accessed by name,\n   so ``sys.version_info[0]`` is equivalent to ``sys.version_info.major``\n   and so on.\n\n   .. versionchanged:: 3.1\n      Added named component attributes.\n\n.. data:: warnoptions\n\n   This is an implementation detail of the warnings framework; do not modify this\n   value.  Refer to the :mod:`warnings` module for more information on the warnings\n   framework.\n\n\n.. data:: winver\n\n   The version number used to form registry keys on Windows platforms. This is\n   stored as string resource 1000 in the Python DLL.  The value is normally the\n   first three characters of :const:`version`.  It is provided in the :mod:`sys`\n   module for informational purposes; modifying this value has no effect on the\n   registry keys used by Python. Availability: Windows.\n\n\n.. data:: _xoptions\n\n   A dictionary of the various implementation-specific flags passed through\n   the :option:`-X` command-line option.  Option names are either mapped to\n   their values, if given explicitly, or to :const:`True`.  Example:\n\n   .. code-block:: shell-session\n\n      $ ./python -Xa=b -Xc\n      Python 3.2a3+ (py3k, Oct 16 2010, 20:14:50)\n      [GCC 4.4.3] on linux2\n      Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n      >>> import sys\n      >>> sys._xoptions\n      {'a': 'b', 'c': True}\n\n   .. impl-detail::\n\n      This is a CPython-specific way of accessing options passed through\n      :option:`-X`.  Other implementations may export them through other\n      means, or not at all.\n\n   .. versionadded:: 3.2\n\n\n.. rubric:: Citations\n\n.. [C99] ISO/IEC 9899:1999.  \"Programming languages -- C.\"  A public draft of this standard is available at http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\\ .\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/library/ctypes.rst": ":mod:`ctypes` --- A foreign function library for Python\n=======================================================\n\n.. module:: ctypes\n   :synopsis: A foreign function library for Python.\n\n.. moduleauthor:: Thomas Heller <theller@python.net>\n\n--------------\n\n:mod:`ctypes` is a foreign function library for Python.  It provides C compatible\ndata types, and allows calling functions in DLLs or shared libraries.  It can be\nused to wrap these libraries in pure Python.\n\n\n.. _ctypes-ctypes-tutorial:\n\nctypes tutorial\n---------------\n\nNote: The code samples in this tutorial use :mod:`doctest` to make sure that\nthey actually work.  Since some code samples behave differently under Linux,\nWindows, or Mac OS X, they contain doctest directives in comments.\n\nNote: Some code samples reference the ctypes :class:`c_int` type.  On platforms\nwhere ``sizeof(long) == sizeof(int)`` it is an alias to :class:`c_long`.\nSo, you should not be confused if :class:`c_long` is printed if you would expect\n:class:`c_int` --- they are actually the same type.\n\n.. _ctypes-loading-dynamic-link-libraries:\n\nLoading dynamic link libraries\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:mod:`ctypes` exports the *cdll*, and on Windows *windll* and *oledll*\nobjects, for loading dynamic link libraries.\n\nYou load libraries by accessing them as attributes of these objects. *cdll*\nloads libraries which export functions using the standard ``cdecl`` calling\nconvention, while *windll* libraries call functions using the ``stdcall``\ncalling convention. *oledll* also uses the ``stdcall`` calling convention, and\nassumes the functions return a Windows :c:type:`HRESULT` error code. The error\ncode is used to automatically raise an :class:`OSError` exception when the\nfunction call fails.\n\n.. versionchanged:: 3.3\n   Windows errors used to raise :exc:`WindowsError`, which is now an alias\n   of :exc:`OSError`.\n\n\nHere are some examples for Windows. Note that ``msvcrt`` is the MS standard C\nlibrary containing most standard C functions, and uses the cdecl calling\nconvention::\n\n   >>> from ctypes import *\n   >>> print(windll.kernel32)  # doctest: +WINDOWS\n   <WinDLL 'kernel32', handle ... at ...>\n   >>> print(cdll.msvcrt)      # doctest: +WINDOWS\n   <CDLL 'msvcrt', handle ... at ...>\n   >>> libc = cdll.msvcrt      # doctest: +WINDOWS\n   >>>\n\nWindows appends the usual ``.dll`` file suffix automatically.\n\n.. note::\n    Accessing the standard C library through ``cdll.msvcrt`` will use an\n    outdated version of the library that may be incompatible with the one\n    being used by Python. Where possible, use native Python functionality,\n    or else import and use the ``msvcrt`` module.\n\nOn Linux, it is required to specify the filename *including* the extension to\nload a library, so attribute access can not be used to load libraries. Either the\n:meth:`LoadLibrary` method of the dll loaders should be used, or you should load\nthe library by creating an instance of CDLL by calling the constructor::\n\n   >>> cdll.LoadLibrary(\"libc.so.6\")  # doctest: +LINUX\n   <CDLL 'libc.so.6', handle ... at ...>\n   >>> libc = CDLL(\"libc.so.6\")       # doctest: +LINUX\n   >>> libc                           # doctest: +LINUX\n   <CDLL 'libc.so.6', handle ... at ...>\n   >>>\n\n.. XXX Add section for Mac OS X.\n\n\n.. _ctypes-accessing-functions-from-loaded-dlls:\n\nAccessing functions from loaded dlls\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFunctions are accessed as attributes of dll objects::\n\n   >>> from ctypes import *\n   >>> libc.printf\n   <_FuncPtr object at 0x...>\n   >>> print(windll.kernel32.GetModuleHandleA)  # doctest: +WINDOWS\n   <_FuncPtr object at 0x...>\n   >>> print(windll.kernel32.MyOwnFunction)     # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"ctypes.py\", line 239, in __getattr__\n       func = _StdcallFuncPtr(name, self)\n   AttributeError: function 'MyOwnFunction' not found\n   >>>\n\nNote that win32 system dlls like ``kernel32`` and ``user32`` often export ANSI\nas well as UNICODE versions of a function. The UNICODE version is exported with\nan ``W`` appended to the name, while the ANSI version is exported with an ``A``\nappended to the name. The win32 ``GetModuleHandle`` function, which returns a\n*module handle* for a given module name, has the following C prototype, and a\nmacro is used to expose one of them as ``GetModuleHandle`` depending on whether\nUNICODE is defined or not::\n\n   /* ANSI version */\n   HMODULE GetModuleHandleA(LPCSTR lpModuleName);\n   /* UNICODE version */\n   HMODULE GetModuleHandleW(LPCWSTR lpModuleName);\n\n*windll* does not try to select one of them by magic, you must access the\nversion you need by specifying ``GetModuleHandleA`` or ``GetModuleHandleW``\nexplicitly, and then call it with bytes or string objects respectively.\n\nSometimes, dlls export functions with names which aren't valid Python\nidentifiers, like ``\"??2@YAPAXI@Z\"``. In this case you have to use\n:func:`getattr` to retrieve the function::\n\n   >>> getattr(cdll.msvcrt, \"??2@YAPAXI@Z\")  # doctest: +WINDOWS\n   <_FuncPtr object at 0x...>\n   >>>\n\nOn Windows, some dlls export functions not by name but by ordinal. These\nfunctions can be accessed by indexing the dll object with the ordinal number::\n\n   >>> cdll.kernel32[1]  # doctest: +WINDOWS\n   <_FuncPtr object at 0x...>\n   >>> cdll.kernel32[0]  # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"ctypes.py\", line 310, in __getitem__\n       func = _StdcallFuncPtr(name, self)\n   AttributeError: function ordinal 0 not found\n   >>>\n\n\n.. _ctypes-calling-functions:\n\nCalling functions\n^^^^^^^^^^^^^^^^^\n\nYou can call these functions like any other Python callable. This example uses\nthe ``time()`` function, which returns system time in seconds since the Unix\nepoch, and the ``GetModuleHandleA()`` function, which returns a win32 module\nhandle.\n\nThis example calls both functions with a NULL pointer (``None`` should be used\nas the NULL pointer)::\n\n   >>> print(libc.time(None))  # doctest: +SKIP\n   1150640792\n   >>> print(hex(windll.kernel32.GetModuleHandleA(None)))  # doctest: +WINDOWS\n   0x1d000000\n   >>>\n\n:mod:`ctypes` tries to protect you from calling functions with the wrong number\nof arguments or the wrong calling convention.  Unfortunately this only works on\nWindows.  It does this by examining the stack after the function returns, so\nalthough an error is raised the function *has* been called::\n\n   >>> windll.kernel32.GetModuleHandleA()      # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   ValueError: Procedure probably called with not enough arguments (4 bytes missing)\n   >>> windll.kernel32.GetModuleHandleA(0, 0)  # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   ValueError: Procedure probably called with too many arguments (4 bytes in excess)\n   >>>\n\nThe same exception is raised when you call an ``stdcall`` function with the\n``cdecl`` calling convention, or vice versa::\n\n   >>> cdll.kernel32.GetModuleHandleA(None)  # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   ValueError: Procedure probably called with not enough arguments (4 bytes missing)\n   >>>\n\n   >>> windll.msvcrt.printf(b\"spam\")  # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   ValueError: Procedure probably called with too many arguments (4 bytes in excess)\n   >>>\n\nTo find out the correct calling convention you have to look into the C header\nfile or the documentation for the function you want to call.\n\nOn Windows, :mod:`ctypes` uses win32 structured exception handling to prevent\ncrashes from general protection faults when functions are called with invalid\nargument values::\n\n   >>> windll.kernel32.GetModuleHandleA(32)  # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   OSError: exception: access violation reading 0x00000020\n   >>>\n\nThere are, however, enough ways to crash Python with :mod:`ctypes`, so you\nshould be careful anyway.  The :mod:`faulthandler` module can be helpful in\ndebugging crashes (e.g. from segmentation faults produced by erroneous C library\ncalls).\n\n``None``, integers, bytes objects and (unicode) strings are the only native\nPython objects that can directly be used as parameters in these function calls.\n``None`` is passed as a C ``NULL`` pointer, bytes objects and strings are passed\nas pointer to the memory block that contains their data (:c:type:`char *` or\n:c:type:`wchar_t *`).  Python integers are passed as the platforms default C\n:c:type:`int` type, their value is masked to fit into the C type.\n\nBefore we move on calling functions with other parameter types, we have to learn\nmore about :mod:`ctypes` data types.\n\n\n.. _ctypes-fundamental-data-types:\n\nFundamental data types\n^^^^^^^^^^^^^^^^^^^^^^\n\n:mod:`ctypes` defines a number of primitive C compatible data types:\n\n+----------------------+------------------------------------------+----------------------------+\n| ctypes type          | C type                                   | Python type                |\n+======================+==========================================+============================+\n| :class:`c_bool`      | :c:type:`_Bool`                          | bool (1)                   |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_char`      | :c:type:`char`                           | 1-character bytes object   |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_wchar`     | :c:type:`wchar_t`                        | 1-character string         |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_byte`      | :c:type:`char`                           | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_ubyte`     | :c:type:`unsigned char`                  | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_short`     | :c:type:`short`                          | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_ushort`    | :c:type:`unsigned short`                 | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_int`       | :c:type:`int`                            | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_uint`      | :c:type:`unsigned int`                   | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_long`      | :c:type:`long`                           | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_ulong`     | :c:type:`unsigned long`                  | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_longlong`  | :c:type:`__int64` or :c:type:`long long` | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_ulonglong` | :c:type:`unsigned __int64` or            | int                        |\n|                      | :c:type:`unsigned long long`             |                            |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_size_t`    | :c:type:`size_t`                         | int                        |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_ssize_t`   | :c:type:`ssize_t` or                     | int                        |\n|                      | :c:type:`Py_ssize_t`                     |                            |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_float`     | :c:type:`float`                          | float                      |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_double`    | :c:type:`double`                         | float                      |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_longdouble`| :c:type:`long double`                    | float                      |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_char_p`    | :c:type:`char *` (NUL terminated)        | bytes object or ``None``   |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_wchar_p`   | :c:type:`wchar_t *` (NUL terminated)     | string or ``None``         |\n+----------------------+------------------------------------------+----------------------------+\n| :class:`c_void_p`    | :c:type:`void *`                         | int or ``None``            |\n+----------------------+------------------------------------------+----------------------------+\n\n(1)\n   The constructor accepts any object with a truth value.\n\nAll these types can be created by calling them with an optional initializer of\nthe correct type and value::\n\n   >>> c_int()\n   c_long(0)\n   >>> c_wchar_p(\"Hello, World\")\n   c_wchar_p(140018365411392)\n   >>> c_ushort(-3)\n   c_ushort(65533)\n   >>>\n\nSince these types are mutable, their value can also be changed afterwards::\n\n   >>> i = c_int(42)\n   >>> print(i)\n   c_long(42)\n   >>> print(i.value)\n   42\n   >>> i.value = -99\n   >>> print(i.value)\n   -99\n   >>>\n\nAssigning a new value to instances of the pointer types :class:`c_char_p`,\n:class:`c_wchar_p`, and :class:`c_void_p` changes the *memory location* they\npoint to, *not the contents* of the memory block (of course not, because Python\nbytes objects are immutable)::\n\n   >>> s = \"Hello, World\"\n   >>> c_s = c_wchar_p(s)\n   >>> print(c_s)\n   c_wchar_p(139966785747344)\n   >>> print(c_s.value)\n   Hello World\n   >>> c_s.value = \"Hi, there\"\n   >>> print(c_s)              # the memory location has changed\n   c_wchar_p(139966783348904)\n   >>> print(c_s.value)\n   Hi, there\n   >>> print(s)                # first object is unchanged\n   Hello, World\n   >>>\n\nYou should be careful, however, not to pass them to functions expecting pointers\nto mutable memory. If you need mutable memory blocks, ctypes has a\n:func:`create_string_buffer` function which creates these in various ways.  The\ncurrent memory block contents can be accessed (or changed) with the ``raw``\nproperty; if you want to access it as NUL terminated string, use the ``value``\nproperty::\n\n   >>> from ctypes import *\n   >>> p = create_string_buffer(3)            # create a 3 byte buffer, initialized to NUL bytes\n   >>> print(sizeof(p), repr(p.raw))\n   3 b'\\x00\\x00\\x00'\n   >>> p = create_string_buffer(b\"Hello\")     # create a buffer containing a NUL terminated string\n   >>> print(sizeof(p), repr(p.raw))\n   6 b'Hello\\x00'\n   >>> print(repr(p.value))\n   b'Hello'\n   >>> p = create_string_buffer(b\"Hello\", 10) # create a 10 byte buffer\n   >>> print(sizeof(p), repr(p.raw))\n   10 b'Hello\\x00\\x00\\x00\\x00\\x00'\n   >>> p.value = b\"Hi\"\n   >>> print(sizeof(p), repr(p.raw))\n   10 b'Hi\\x00lo\\x00\\x00\\x00\\x00\\x00'\n   >>>\n\nThe :func:`create_string_buffer` function replaces the :func:`c_buffer` function\n(which is still available as an alias), as well as the :func:`c_string` function\nfrom earlier ctypes releases.  To create a mutable memory block containing\nunicode characters of the C type :c:type:`wchar_t` use the\n:func:`create_unicode_buffer` function.\n\n\n.. _ctypes-calling-functions-continued:\n\nCalling functions, continued\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNote that printf prints to the real standard output channel, *not* to\n:data:`sys.stdout`, so these examples will only work at the console prompt, not\nfrom within *IDLE* or *PythonWin*::\n\n   >>> printf = libc.printf\n   >>> printf(b\"Hello, %s\\n\", b\"World!\")\n   Hello, World!\n   14\n   >>> printf(b\"Hello, %S\\n\", \"World!\")\n   Hello, World!\n   14\n   >>> printf(b\"%d bottles of beer\\n\", 42)\n   42 bottles of beer\n   19\n   >>> printf(b\"%f bottles of beer\\n\", 42.5)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   ArgumentError: argument 2: exceptions.TypeError: Don't know how to convert parameter 2\n   >>>\n\nAs has been mentioned before, all Python types except integers, strings, and\nbytes objects have to be wrapped in their corresponding :mod:`ctypes` type, so\nthat they can be converted to the required C data type::\n\n   >>> printf(b\"An int %d, a double %f\\n\", 1234, c_double(3.14))\n   An int 1234, a double 3.140000\n   31\n   >>>\n\n\n.. _ctypes-calling-functions-with-own-custom-data-types:\n\nCalling functions with your own custom data types\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can also customize :mod:`ctypes` argument conversion to allow instances of\nyour own classes be used as function arguments.  :mod:`ctypes` looks for an\n:attr:`_as_parameter_` attribute and uses this as the function argument.  Of\ncourse, it must be one of integer, string, or bytes::\n\n   >>> class Bottles:\n   ...     def __init__(self, number):\n   ...         self._as_parameter_ = number\n   ...\n   >>> bottles = Bottles(42)\n   >>> printf(b\"%d bottles of beer\\n\", bottles)\n   42 bottles of beer\n   19\n   >>>\n\nIf you don't want to store the instance's data in the :attr:`_as_parameter_`\ninstance variable, you could define a :class:`property` which makes the\nattribute available on request.\n\n\n.. _ctypes-specifying-required-argument-types:\n\nSpecifying the required argument types (function prototypes)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is possible to specify the required argument types of functions exported from\nDLLs by setting the :attr:`argtypes` attribute.\n\n:attr:`argtypes` must be a sequence of C data types (the ``printf`` function is\nprobably not a good example here, because it takes a variable number and\ndifferent types of parameters depending on the format string, on the other hand\nthis is quite handy to experiment with this feature)::\n\n   >>> printf.argtypes = [c_char_p, c_char_p, c_int, c_double]\n   >>> printf(b\"String '%s', Int %d, Double %f\\n\", b\"Hi\", 10, 2.2)\n   String 'Hi', Int 10, Double 2.200000\n   37\n   >>>\n\nSpecifying a format protects against incompatible argument types (just as a\nprototype for a C function), and tries to convert the arguments to valid types::\n\n   >>> printf(b\"%d %d %d\", 1, 2, 3)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   ArgumentError: argument 2: exceptions.TypeError: wrong type\n   >>> printf(b\"%s %d %f\\n\", b\"X\", 2, 3)\n   X 2 3.000000\n   13\n   >>>\n\nIf you have defined your own classes which you pass to function calls, you have\nto implement a :meth:`from_param` class method for them to be able to use them\nin the :attr:`argtypes` sequence. The :meth:`from_param` class method receives\nthe Python object passed to the function call, it should do a typecheck or\nwhatever is needed to make sure this object is acceptable, and then return the\nobject itself, its :attr:`_as_parameter_` attribute, or whatever you want to\npass as the C function argument in this case. Again, the result should be an\ninteger, string, bytes, a :mod:`ctypes` instance, or an object with an\n:attr:`_as_parameter_` attribute.\n\n\n.. _ctypes-return-types:\n\nReturn types\n^^^^^^^^^^^^\n\nBy default functions are assumed to return the C :c:type:`int` type.  Other\nreturn types can be specified by setting the :attr:`restype` attribute of the\nfunction object.\n\nHere is a more advanced example, it uses the ``strchr`` function, which expects\na string pointer and a char, and returns a pointer to a string::\n\n   >>> strchr = libc.strchr\n   >>> strchr(b\"abcdef\", ord(\"d\"))  # doctest: +SKIP\n   8059983\n   >>> strchr.restype = c_char_p    # c_char_p is a pointer to a string\n   >>> strchr(b\"abcdef\", ord(\"d\"))\n   b'def'\n   >>> print(strchr(b\"abcdef\", ord(\"x\")))\n   None\n   >>>\n\nIf you want to avoid the ``ord(\"x\")`` calls above, you can set the\n:attr:`argtypes` attribute, and the second argument will be converted from a\nsingle character Python bytes object into a C char::\n\n   >>> strchr.restype = c_char_p\n   >>> strchr.argtypes = [c_char_p, c_char]\n   >>> strchr(b\"abcdef\", b\"d\")\n   'def'\n   >>> strchr(b\"abcdef\", b\"def\")\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   ArgumentError: argument 2: exceptions.TypeError: one character string expected\n   >>> print(strchr(b\"abcdef\", b\"x\"))\n   None\n   >>> strchr(b\"abcdef\", b\"d\")\n   'def'\n   >>>\n\nYou can also use a callable Python object (a function or a class for example) as\nthe :attr:`restype` attribute, if the foreign function returns an integer.  The\ncallable will be called with the *integer* the C function returns, and the\nresult of this call will be used as the result of your function call. This is\nuseful to check for error return values and automatically raise an exception::\n\n   >>> GetModuleHandle = windll.kernel32.GetModuleHandleA  # doctest: +WINDOWS\n   >>> def ValidHandle(value):\n   ...     if value == 0:\n   ...         raise WinError()\n   ...     return value\n   ...\n   >>>\n   >>> GetModuleHandle.restype = ValidHandle  # doctest: +WINDOWS\n   >>> GetModuleHandle(None)  # doctest: +WINDOWS\n   486539264\n   >>> GetModuleHandle(\"something silly\")  # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"<stdin>\", line 3, in ValidHandle\n   OSError: [Errno 126] The specified module could not be found.\n   >>>\n\n``WinError`` is a function which will call Windows ``FormatMessage()`` api to\nget the string representation of an error code, and *returns* an exception.\n``WinError`` takes an optional error code parameter, if no one is used, it calls\n:func:`GetLastError` to retrieve it.\n\nPlease note that a much more powerful error checking mechanism is available\nthrough the :attr:`errcheck` attribute; see the reference manual for details.\n\n\n.. _ctypes-passing-pointers:\n\nPassing pointers (or: passing parameters by reference)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSometimes a C api function expects a *pointer* to a data type as parameter,\nprobably to write into the corresponding location, or if the data is too large\nto be passed by value. This is also known as *passing parameters by reference*.\n\n:mod:`ctypes` exports the :func:`byref` function which is used to pass parameters\nby reference.  The same effect can be achieved with the :func:`pointer` function,\nalthough :func:`pointer` does a lot more work since it constructs a real pointer\nobject, so it is faster to use :func:`byref` if you don't need the pointer\nobject in Python itself::\n\n   >>> i = c_int()\n   >>> f = c_float()\n   >>> s = create_string_buffer(b'\\000' * 32)\n   >>> print(i.value, f.value, repr(s.value))\n   0 0.0 b''\n   >>> libc.sscanf(b\"1 3.14 Hello\", b\"%d %f %s\",\n   ...             byref(i), byref(f), s)\n   3\n   >>> print(i.value, f.value, repr(s.value))\n   1 3.1400001049 b'Hello'\n   >>>\n\n\n.. _ctypes-structures-unions:\n\nStructures and unions\n^^^^^^^^^^^^^^^^^^^^^\n\nStructures and unions must derive from the :class:`Structure` and :class:`Union`\nbase classes which are defined in the :mod:`ctypes` module. Each subclass must\ndefine a :attr:`_fields_` attribute.  :attr:`_fields_` must be a list of\n*2-tuples*, containing a *field name* and a *field type*.\n\nThe field type must be a :mod:`ctypes` type like :class:`c_int`, or any other\nderived :mod:`ctypes` type: structure, union, array, pointer.\n\nHere is a simple example of a POINT structure, which contains two integers named\n*x* and *y*, and also shows how to initialize a structure in the constructor::\n\n   >>> from ctypes import *\n   >>> class POINT(Structure):\n   ...     _fields_ = [(\"x\", c_int),\n   ...                 (\"y\", c_int)]\n   ...\n   >>> point = POINT(10, 20)\n   >>> print(point.x, point.y)\n   10 20\n   >>> point = POINT(y=5)\n   >>> print(point.x, point.y)\n   0 5\n   >>> POINT(1, 2, 3)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   ValueError: too many initializers\n   >>>\n\nYou can, however, build much more complicated structures.  A structure can\nitself contain other structures by using a structure as a field type.\n\nHere is a RECT structure which contains two POINTs named *upperleft* and\n*lowerright*::\n\n   >>> class RECT(Structure):\n   ...     _fields_ = [(\"upperleft\", POINT),\n   ...                 (\"lowerright\", POINT)]\n   ...\n   >>> rc = RECT(point)\n   >>> print(rc.upperleft.x, rc.upperleft.y)\n   0 5\n   >>> print(rc.lowerright.x, rc.lowerright.y)\n   0 0\n   >>>\n\nNested structures can also be initialized in the constructor in several ways::\n\n   >>> r = RECT(POINT(1, 2), POINT(3, 4))\n   >>> r = RECT((1, 2), (3, 4))\n\nField :term:`descriptor`\\s can be retrieved from the *class*, they are useful\nfor debugging because they can provide useful information::\n\n   >>> print(POINT.x)\n   <Field type=c_long, ofs=0, size=4>\n   >>> print(POINT.y)\n   <Field type=c_long, ofs=4, size=4>\n   >>>\n\n\n.. _ctypes-structureunion-alignment-byte-order:\n\n.. warning::\n\n   :mod:`ctypes` does not support passing unions or structures with bit-fields\n   to functions by value.  While this may work on 32-bit x86, it's not\n   guaranteed by the library to work in the general case.  Unions and\n   structures with bit-fields should always be passed to functions by pointer.\n\nStructure/union alignment and byte order\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default, Structure and Union fields are aligned in the same way the C\ncompiler does it. It is possible to override this behavior be specifying a\n:attr:`_pack_` class attribute in the subclass definition. This must be set to a\npositive integer and specifies the maximum alignment for the fields. This is\nwhat ``#pragma pack(n)`` also does in MSVC.\n\n:mod:`ctypes` uses the native byte order for Structures and Unions.  To build\nstructures with non-native byte order, you can use one of the\n:class:`BigEndianStructure`, :class:`LittleEndianStructure`,\n:class:`BigEndianUnion`, and :class:`LittleEndianUnion` base classes.  These\nclasses cannot contain pointer fields.\n\n\n.. _ctypes-bit-fields-in-structures-unions:\n\nBit fields in structures and unions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is possible to create structures and unions containing bit fields. Bit fields\nare only possible for integer fields, the bit width is specified as the third\nitem in the :attr:`_fields_` tuples::\n\n   >>> class Int(Structure):\n   ...     _fields_ = [(\"first_16\", c_int, 16),\n   ...                 (\"second_16\", c_int, 16)]\n   ...\n   >>> print(Int.first_16)\n   <Field type=c_long, ofs=0:0, bits=16>\n   >>> print(Int.second_16)\n   <Field type=c_long, ofs=0:16, bits=16>\n   >>>\n\n\n.. _ctypes-arrays:\n\nArrays\n^^^^^^\n\nArrays are sequences, containing a fixed number of instances of the same type.\n\nThe recommended way to create array types is by multiplying a data type with a\npositive integer::\n\n   TenPointsArrayType = POINT * 10\n\nHere is an example of a somewhat artificial data type, a structure containing 4\nPOINTs among other stuff::\n\n   >>> from ctypes import *\n   >>> class POINT(Structure):\n   ...     _fields_ = (\"x\", c_int), (\"y\", c_int)\n   ...\n   >>> class MyStruct(Structure):\n   ...     _fields_ = [(\"a\", c_int),\n   ...                 (\"b\", c_float),\n   ...                 (\"point_array\", POINT * 4)]\n   >>>\n   >>> print(len(MyStruct().point_array))\n   4\n   >>>\n\nInstances are created in the usual way, by calling the class::\n\n   arr = TenPointsArrayType()\n   for pt in arr:\n       print(pt.x, pt.y)\n\nThe above code print a series of ``0 0`` lines, because the array contents is\ninitialized to zeros.\n\nInitializers of the correct type can also be specified::\n\n   >>> from ctypes import *\n   >>> TenIntegers = c_int * 10\n   >>> ii = TenIntegers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n   >>> print(ii)\n   <c_long_Array_10 object at 0x...>\n   >>> for i in ii: print(i, end=\" \")\n   ...\n   1 2 3 4 5 6 7 8 9 10\n   >>>\n\n\n.. _ctypes-pointers:\n\nPointers\n^^^^^^^^\n\nPointer instances are created by calling the :func:`pointer` function on a\n:mod:`ctypes` type::\n\n   >>> from ctypes import *\n   >>> i = c_int(42)\n   >>> pi = pointer(i)\n   >>>\n\nPointer instances have a :attr:`~_Pointer.contents` attribute which\nreturns the object to which the pointer points, the ``i`` object above::\n\n   >>> pi.contents\n   c_long(42)\n   >>>\n\nNote that :mod:`ctypes` does not have OOR (original object return), it constructs a\nnew, equivalent object each time you retrieve an attribute::\n\n   >>> pi.contents is i\n   False\n   >>> pi.contents is pi.contents\n   False\n   >>>\n\nAssigning another :class:`c_int` instance to the pointer's contents attribute\nwould cause the pointer to point to the memory location where this is stored::\n\n   >>> i = c_int(99)\n   >>> pi.contents = i\n   >>> pi.contents\n   c_long(99)\n   >>>\n\n.. XXX Document dereferencing pointers, and that it is preferred over the\n   .contents attribute.\n\nPointer instances can also be indexed with integers::\n\n   >>> pi[0]\n   99\n   >>>\n\nAssigning to an integer index changes the pointed to value::\n\n   >>> print(i)\n   c_long(99)\n   >>> pi[0] = 22\n   >>> print(i)\n   c_long(22)\n   >>>\n\nIt is also possible to use indexes different from 0, but you must know what\nyou're doing, just as in C: You can access or change arbitrary memory locations.\nGenerally you only use this feature if you receive a pointer from a C function,\nand you *know* that the pointer actually points to an array instead of a single\nitem.\n\nBehind the scenes, the :func:`pointer` function does more than simply create\npointer instances, it has to create pointer *types* first. This is done with the\n:func:`POINTER` function, which accepts any :mod:`ctypes` type, and returns a\nnew type::\n\n   >>> PI = POINTER(c_int)\n   >>> PI\n   <class 'ctypes.LP_c_long'>\n   >>> PI(42)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   TypeError: expected c_long instead of int\n   >>> PI(c_int(42))\n   <ctypes.LP_c_long object at 0x...>\n   >>>\n\nCalling the pointer type without an argument creates a ``NULL`` pointer.\n``NULL`` pointers have a ``False`` boolean value::\n\n   >>> null_ptr = POINTER(c_int)()\n   >>> print(bool(null_ptr))\n   False\n   >>>\n\n:mod:`ctypes` checks for ``NULL`` when dereferencing pointers (but dereferencing\ninvalid non-\\ ``NULL`` pointers would crash Python)::\n\n   >>> null_ptr[0]\n   Traceback (most recent call last):\n       ....\n   ValueError: NULL pointer access\n   >>>\n\n   >>> null_ptr[0] = 1234\n   Traceback (most recent call last):\n       ....\n   ValueError: NULL pointer access\n   >>>\n\n\n.. _ctypes-type-conversions:\n\nType conversions\n^^^^^^^^^^^^^^^^\n\nUsually, ctypes does strict type checking.  This means, if you have\n``POINTER(c_int)`` in the :attr:`argtypes` list of a function or as the type of\na member field in a structure definition, only instances of exactly the same\ntype are accepted.  There are some exceptions to this rule, where ctypes accepts\nother objects.  For example, you can pass compatible array instances instead of\npointer types.  So, for ``POINTER(c_int)``, ctypes accepts an array of c_int::\n\n   >>> class Bar(Structure):\n   ...     _fields_ = [(\"count\", c_int), (\"values\", POINTER(c_int))]\n   ...\n   >>> bar = Bar()\n   >>> bar.values = (c_int * 3)(1, 2, 3)\n   >>> bar.count = 3\n   >>> for i in range(bar.count):\n   ...     print(bar.values[i])\n   ...\n   1\n   2\n   3\n   >>>\n\nIn addition, if a function argument is explicitly declared to be a pointer type\n(such as ``POINTER(c_int)``) in :attr:`argtypes`, an object of the pointed\ntype (``c_int`` in this case) can be passed to the function.  ctypes will apply\nthe required :func:`byref` conversion in this case automatically.\n\nTo set a POINTER type field to ``NULL``, you can assign ``None``::\n\n   >>> bar.values = None\n   >>>\n\n.. XXX list other conversions...\n\nSometimes you have instances of incompatible types.  In C, you can cast one type\ninto another type.  :mod:`ctypes` provides a :func:`cast` function which can be\nused in the same way.  The ``Bar`` structure defined above accepts\n``POINTER(c_int)`` pointers or :class:`c_int` arrays for its ``values`` field,\nbut not instances of other types::\n\n   >>> bar.values = (c_byte * 4)()\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n   TypeError: incompatible types, c_byte_Array_4 instance instead of LP_c_long instance\n   >>>\n\nFor these cases, the :func:`cast` function is handy.\n\nThe :func:`cast` function can be used to cast a ctypes instance into a pointer\nto a different ctypes data type.  :func:`cast` takes two parameters, a ctypes\nobject that is or can be converted to a pointer of some kind, and a ctypes\npointer type.  It returns an instance of the second argument, which references\nthe same memory block as the first argument::\n\n   >>> a = (c_byte * 4)()\n   >>> cast(a, POINTER(c_int))\n   <ctypes.LP_c_long object at ...>\n   >>>\n\nSo, :func:`cast` can be used to assign to the ``values`` field of ``Bar`` the\nstructure::\n\n   >>> bar = Bar()\n   >>> bar.values = cast((c_byte * 4)(), POINTER(c_int))\n   >>> print(bar.values[0])\n   0\n   >>>\n\n\n.. _ctypes-incomplete-types:\n\nIncomplete Types\n^^^^^^^^^^^^^^^^\n\n*Incomplete Types* are structures, unions or arrays whose members are not yet\nspecified. In C, they are specified by forward declarations, which are defined\nlater::\n\n   struct cell; /* forward declaration */\n\n   struct cell {\n       char *name;\n       struct cell *next;\n   };\n\nThe straightforward translation into ctypes code would be this, but it does not\nwork::\n\n   >>> class cell(Structure):\n   ...     _fields_ = [(\"name\", c_char_p),\n   ...                 (\"next\", POINTER(cell))]\n   ...\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"<stdin>\", line 2, in cell\n   NameError: name 'cell' is not defined\n   >>>\n\nbecause the new ``class cell`` is not available in the class statement itself.\nIn :mod:`ctypes`, we can define the ``cell`` class and set the :attr:`_fields_`\nattribute later, after the class statement::\n\n   >>> from ctypes import *\n   >>> class cell(Structure):\n   ...     pass\n   ...\n   >>> cell._fields_ = [(\"name\", c_char_p),\n   ...                  (\"next\", POINTER(cell))]\n   >>>\n\nLets try it. We create two instances of ``cell``, and let them point to each\nother, and finally follow the pointer chain a few times::\n\n   >>> c1 = cell()\n   >>> c1.name = \"foo\"\n   >>> c2 = cell()\n   >>> c2.name = \"bar\"\n   >>> c1.next = pointer(c2)\n   >>> c2.next = pointer(c1)\n   >>> p = c1\n   >>> for i in range(8):\n   ...     print(p.name, end=\" \")\n   ...     p = p.next[0]\n   ...\n   foo bar foo bar foo bar foo bar\n   >>>\n\n\n.. _ctypes-callback-functions:\n\nCallback functions\n^^^^^^^^^^^^^^^^^^\n\n:mod:`ctypes` allows creating C callable function pointers from Python callables.\nThese are sometimes called *callback functions*.\n\nFirst, you must create a class for the callback function. The class knows the\ncalling convention, the return type, and the number and types of arguments this\nfunction will receive.\n\nThe :func:`CFUNCTYPE` factory function creates types for callback functions\nusing the ``cdecl`` calling convention. On Windows, the :func:`WINFUNCTYPE`\nfactory function creates types for callback functions using the ``stdcall``\ncalling convention.\n\nBoth of these factory functions are called with the result type as first\nargument, and the callback functions expected argument types as the remaining\narguments.\n\nI will present an example here which uses the standard C library's\n:c:func:`qsort` function, that is used to sort items with the help of a callback\nfunction.  :c:func:`qsort` will be used to sort an array of integers::\n\n   >>> IntArray5 = c_int * 5\n   >>> ia = IntArray5(5, 1, 7, 33, 99)\n   >>> qsort = libc.qsort\n   >>> qsort.restype = None\n   >>>\n\n:func:`qsort` must be called with a pointer to the data to sort, the number of\nitems in the data array, the size of one item, and a pointer to the comparison\nfunction, the callback. The callback will then be called with two pointers to\nitems, and it must return a negative integer if the first item is smaller than\nthe second, a zero if they are equal, and a positive integer otherwise.\n\nSo our callback function receives pointers to integers, and must return an\ninteger. First we create the ``type`` for the callback function::\n\n   >>> CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))\n   >>>\n\nTo get started, here is a simple callback that shows the values it gets\npassed::\n\n   >>> def py_cmp_func(a, b):\n   ...     print(\"py_cmp_func\", a[0], b[0])\n   ...     return 0\n   ...\n   >>> cmp_func = CMPFUNC(py_cmp_func)\n   >>>\n\nThe result::\n\n   >>> qsort(ia, len(ia), sizeof(c_int), cmp_func)  # doctest: +LINUX\n   py_cmp_func 5 1\n   py_cmp_func 33 99\n   py_cmp_func 7 33\n   py_cmp_func 5 7\n   py_cmp_func 1 7\n   >>>\n\nNow we can actually compare the two items and return a useful result::\n\n   >>> def py_cmp_func(a, b):\n   ...     print(\"py_cmp_func\", a[0], b[0])\n   ...     return a[0] - b[0]\n   ...\n   >>>\n   >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +LINUX\n   py_cmp_func 5 1\n   py_cmp_func 33 99\n   py_cmp_func 7 33\n   py_cmp_func 1 7\n   py_cmp_func 5 7\n   >>>\n\nAs we can easily check, our array is sorted now::\n\n   >>> for i in ia: print(i, end=\" \")\n   ...\n   1 5 7 33 99\n   >>>\n\n.. note::\n\n   Make sure you keep references to :func:`CFUNCTYPE` objects as long as they\n   are used from C code. :mod:`ctypes` doesn't, and if you don't, they may be\n   garbage collected, crashing your program when a callback is made.\n\n   Also, note that if the callback function is called in a thread created\n   outside of Python's control (e.g. by the foreign code that calls the\n   callback), ctypes creates a new dummy Python thread on every invocation. This\n   behavior is correct for most purposes, but it means that values stored with\n   :class:`threading.local` will *not* survive across different callbacks, even when\n   those calls are made from the same C thread.\n\n.. _ctypes-accessing-values-exported-from-dlls:\n\nAccessing values exported from dlls\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSome shared libraries not only export functions, they also export variables. An\nexample in the Python library itself is the :c:data:`Py_OptimizeFlag`, an integer\nset to 0, 1, or 2, depending on the :option:`-O` or :option:`-OO` flag given on\nstartup.\n\n:mod:`ctypes` can access values like this with the :meth:`in_dll` class methods of\nthe type.  *pythonapi* is a predefined symbol giving access to the Python C\napi::\n\n   >>> opt_flag = c_int.in_dll(pythonapi, \"Py_OptimizeFlag\")\n   >>> print(opt_flag)\n   c_long(0)\n   >>>\n\nIf the interpreter would have been started with :option:`-O`, the sample would\nhave printed ``c_long(1)``, or ``c_long(2)`` if :option:`-OO` would have been\nspecified.\n\nAn extended example which also demonstrates the use of pointers accesses the\n:c:data:`PyImport_FrozenModules` pointer exported by Python.\n\nQuoting the docs for that value:\n\n   This pointer is initialized to point to an array of :c:type:`struct _frozen`\n   records, terminated by one whose members are all *NULL* or zero.  When a frozen\n   module is imported, it is searched in this table.  Third-party code could play\n   tricks with this to provide a dynamically created collection of frozen modules.\n\nSo manipulating this pointer could even prove useful. To restrict the example\nsize, we show only how this table can be read with :mod:`ctypes`::\n\n   >>> from ctypes import *\n   >>>\n   >>> class struct_frozen(Structure):\n   ...     _fields_ = [(\"name\", c_char_p),\n   ...                 (\"code\", POINTER(c_ubyte)),\n   ...                 (\"size\", c_int)]\n   ...\n   >>>\n\nWe have defined the :c:type:`struct _frozen` data type, so we can get the pointer\nto the table::\n\n   >>> FrozenTable = POINTER(struct_frozen)\n   >>> table = FrozenTable.in_dll(pythonapi, \"PyImport_FrozenModules\")\n   >>>\n\nSince ``table`` is a ``pointer`` to the array of ``struct_frozen`` records, we\ncan iterate over it, but we just have to make sure that our loop terminates,\nbecause pointers have no size. Sooner or later it would probably crash with an\naccess violation or whatever, so it's better to break out of the loop when we\nhit the NULL entry::\n\n   >>> for item in table:\n   ...     if item.name is None:\n   ...         break\n   ...     print(item.name.decode(\"ascii\"), item.size)\n   ...\n   _frozen_importlib 31764\n   _frozen_importlib_external 41499\n   __hello__ 161\n   __phello__ -161\n   __phello__.spam 161\n   >>>\n\nThe fact that standard Python has a frozen module and a frozen package\n(indicated by the negative size member) is not well known, it is only used for\ntesting. Try it out with ``import __hello__`` for example.\n\n\n.. _ctypes-surprises:\n\nSurprises\n^^^^^^^^^\n\nThere are some edges in :mod:`ctypes` where you might expect something other\nthan what actually happens.\n\nConsider the following example::\n\n   >>> from ctypes import *\n   >>> class POINT(Structure):\n   ...     _fields_ = (\"x\", c_int), (\"y\", c_int)\n   ...\n   >>> class RECT(Structure):\n   ...     _fields_ = (\"a\", POINT), (\"b\", POINT)\n   ...\n   >>> p1 = POINT(1, 2)\n   >>> p2 = POINT(3, 4)\n   >>> rc = RECT(p1, p2)\n   >>> print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)\n   1 2 3 4\n   >>> # now swap the two points\n   >>> rc.a, rc.b = rc.b, rc.a\n   >>> print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)\n   3 4 3 4\n   >>>\n\nHm. We certainly expected the last statement to print ``3 4 1 2``. What\nhappened? Here are the steps of the ``rc.a, rc.b = rc.b, rc.a`` line above::\n\n   >>> temp0, temp1 = rc.b, rc.a\n   >>> rc.a = temp0\n   >>> rc.b = temp1\n   >>>\n\nNote that ``temp0`` and ``temp1`` are objects still using the internal buffer of\nthe ``rc`` object above. So executing ``rc.a = temp0`` copies the buffer\ncontents of ``temp0`` into ``rc`` 's buffer.  This, in turn, changes the\ncontents of ``temp1``. So, the last assignment ``rc.b = temp1``, doesn't have\nthe expected effect.\n\nKeep in mind that retrieving sub-objects from Structure, Unions, and Arrays\ndoesn't *copy* the sub-object, instead it retrieves a wrapper object accessing\nthe root-object's underlying buffer.\n\nAnother example that may behave different from what one would expect is this::\n\n   >>> s = c_char_p()\n   >>> s.value = \"abc def ghi\"\n   >>> s.value\n   'abc def ghi'\n   >>> s.value is s.value\n   False\n   >>>\n\nWhy is it printing ``False``?  ctypes instances are objects containing a memory\nblock plus some :term:`descriptor`\\s accessing the contents of the memory.\nStoring a Python object in the memory block does not store the object itself,\ninstead the ``contents`` of the object is stored.  Accessing the contents again\nconstructs a new Python object each time!\n\n\n.. _ctypes-variable-sized-data-types:\n\nVariable-sized data types\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:mod:`ctypes` provides some support for variable-sized arrays and structures.\n\nThe :func:`resize` function can be used to resize the memory buffer of an\nexisting ctypes object.  The function takes the object as first argument, and\nthe requested size in bytes as the second argument.  The memory block cannot be\nmade smaller than the natural memory block specified by the objects type, a\n:exc:`ValueError` is raised if this is tried::\n\n   >>> short_array = (c_short * 4)()\n   >>> print(sizeof(short_array))\n   8\n   >>> resize(short_array, 4)\n   Traceback (most recent call last):\n       ...\n   ValueError: minimum size is 8\n   >>> resize(short_array, 32)\n   >>> sizeof(short_array)\n   32\n   >>> sizeof(type(short_array))\n   8\n   >>>\n\nThis is nice and fine, but how would one access the additional elements\ncontained in this array?  Since the type still only knows about 4 elements, we\nget errors accessing other elements::\n\n   >>> short_array[:]\n   [0, 0, 0, 0]\n   >>> short_array[7]\n   Traceback (most recent call last):\n       ...\n   IndexError: invalid index\n   >>>\n\nAnother way to use variable-sized data types with :mod:`ctypes` is to use the\ndynamic nature of Python, and (re-)define the data type after the required size\nis already known, on a case by case basis.\n\n\n.. _ctypes-ctypes-reference:\n\nctypes reference\n----------------\n\n\n.. _ctypes-finding-shared-libraries:\n\nFinding shared libraries\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen programming in a compiled language, shared libraries are accessed when\ncompiling/linking a program, and when the program is run.\n\nThe purpose of the :func:`find_library` function is to locate a library in a way\nsimilar to what the compiler does (on platforms with several versions of a\nshared library the most recent should be loaded), while the ctypes library\nloaders act like when a program is run, and call the runtime loader directly.\n\nThe :mod:`ctypes.util` module provides a function which can help to determine\nthe library to load.\n\n\n.. data:: find_library(name)\n   :module: ctypes.util\n   :noindex:\n\n   Try to find a library and return a pathname.  *name* is the library name without\n   any prefix like *lib*, suffix like ``.so``, ``.dylib`` or version number (this\n   is the form used for the posix linker option :option:`!-l`).  If no library can\n   be found, returns ``None``.\n\nThe exact functionality is system dependent.\n\nOn Linux, :func:`find_library` tries to run external programs\n(``/sbin/ldconfig``, ``gcc``, and ``objdump``) to find the library file.  It\nreturns the filename of the library file.  Here are some examples::\n\n   >>> from ctypes.util import find_library\n   >>> find_library(\"m\")\n   'libm.so.6'\n   >>> find_library(\"c\")\n   'libc.so.6'\n   >>> find_library(\"bz2\")\n   'libbz2.so.1.0'\n   >>>\n\nOn OS X, :func:`find_library` tries several predefined naming schemes and paths\nto locate the library, and returns a full pathname if successful::\n\n   >>> from ctypes.util import find_library\n   >>> find_library(\"c\")\n   '/usr/lib/libc.dylib'\n   >>> find_library(\"m\")\n   '/usr/lib/libm.dylib'\n   >>> find_library(\"bz2\")\n   '/usr/lib/libbz2.dylib'\n   >>> find_library(\"AGL\")\n   '/System/Library/Frameworks/AGL.framework/AGL'\n   >>>\n\nOn Windows, :func:`find_library` searches along the system search path, and\nreturns the full pathname, but since there is no predefined naming scheme a call\nlike ``find_library(\"c\")`` will fail and return ``None``.\n\nIf wrapping a shared library with :mod:`ctypes`, it *may* be better to determine\nthe shared library name at development time, and hardcode that into the wrapper\nmodule instead of using :func:`find_library` to locate the library at runtime.\n\n\n.. _ctypes-loading-shared-libraries:\n\nLoading shared libraries\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThere are several ways to load shared libraries into the Python process.  One\nway is to instantiate one of the following classes:\n\n\n.. class:: CDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)\n\n   Instances of this class represent loaded shared libraries. Functions in these\n   libraries use the standard C calling convention, and are assumed to return\n   :c:type:`int`.\n\n\n.. class:: OleDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)\n\n   Windows only: Instances of this class represent loaded shared libraries,\n   functions in these libraries use the ``stdcall`` calling convention, and are\n   assumed to return the windows specific :class:`HRESULT` code.  :class:`HRESULT`\n   values contain information specifying whether the function call failed or\n   succeeded, together with additional error code.  If the return value signals a\n   failure, an :class:`OSError` is automatically raised.\n\n   .. versionchanged:: 3.3\n      :exc:`WindowsError` used to be raised.\n\n\n.. class:: WinDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)\n\n   Windows only: Instances of this class represent loaded shared libraries,\n   functions in these libraries use the ``stdcall`` calling convention, and are\n   assumed to return :c:type:`int` by default.\n\n   On Windows CE only the standard calling convention is used, for convenience the\n   :class:`WinDLL` and :class:`OleDLL` use the standard calling convention on this\n   platform.\n\nThe Python :term:`global interpreter lock` is released before calling any\nfunction exported by these libraries, and reacquired afterwards.\n\n\n.. class:: PyDLL(name, mode=DEFAULT_MODE, handle=None)\n\n   Instances of this class behave like :class:`CDLL` instances, except that the\n   Python GIL is *not* released during the function call, and after the function\n   execution the Python error flag is checked. If the error flag is set, a Python\n   exception is raised.\n\n   Thus, this is only useful to call Python C api functions directly.\n\nAll these classes can be instantiated by calling them with at least one\nargument, the pathname of the shared library.  If you have an existing handle to\nan already loaded shared library, it can be passed as the ``handle`` named\nparameter, otherwise the underlying platforms ``dlopen`` or ``LoadLibrary``\nfunction is used to load the library into the process, and to get a handle to\nit.\n\nThe *mode* parameter can be used to specify how the library is loaded.  For\ndetails, consult the :manpage:`dlopen(3)` manpage.  On Windows, *mode* is\nignored.  On posix systems, RTLD_NOW is always added, and is not\nconfigurable.\n\nThe *use_errno* parameter, when set to true, enables a ctypes mechanism that\nallows accessing the system :data:`errno` error number in a safe way.\n:mod:`ctypes` maintains a thread-local copy of the systems :data:`errno`\nvariable; if you call foreign functions created with ``use_errno=True`` then the\n:data:`errno` value before the function call is swapped with the ctypes private\ncopy, the same happens immediately after the function call.\n\nThe function :func:`ctypes.get_errno` returns the value of the ctypes private\ncopy, and the function :func:`ctypes.set_errno` changes the ctypes private copy\nto a new value and returns the former value.\n\nThe *use_last_error* parameter, when set to true, enables the same mechanism for\nthe Windows error code which is managed by the :func:`GetLastError` and\n:func:`SetLastError` Windows API functions; :func:`ctypes.get_last_error` and\n:func:`ctypes.set_last_error` are used to request and change the ctypes private\ncopy of the windows error code.\n\n.. data:: RTLD_GLOBAL\n   :noindex:\n\n   Flag to use as *mode* parameter.  On platforms where this flag is not available,\n   it is defined as the integer zero.\n\n\n.. data:: RTLD_LOCAL\n   :noindex:\n\n   Flag to use as *mode* parameter.  On platforms where this is not available, it\n   is the same as *RTLD_GLOBAL*.\n\n\n.. data:: DEFAULT_MODE\n   :noindex:\n\n   The default mode which is used to load shared libraries.  On OSX 10.3, this is\n   *RTLD_GLOBAL*, otherwise it is the same as *RTLD_LOCAL*.\n\nInstances of these classes have no public methods.  Functions exported by the\nshared library can be accessed as attributes or by index.  Please note that\naccessing the function through an attribute caches the result and therefore\naccessing it repeatedly returns the same object each time.  On the other hand,\naccessing it through an index returns a new object each time:\n\n   >>> libc.time == libc.time\n   True\n   >>> libc['time'] == libc['time']\n   False\n\nThe following public attributes are available, their name starts with an\nunderscore to not clash with exported function names:\n\n\n.. attribute:: PyDLL._handle\n\n   The system handle used to access the library.\n\n\n.. attribute:: PyDLL._name\n\n   The name of the library passed in the constructor.\n\nShared libraries can also be loaded by using one of the prefabricated objects,\nwhich are instances of the :class:`LibraryLoader` class, either by calling the\n:meth:`LoadLibrary` method, or by retrieving the library as attribute of the\nloader instance.\n\n\n.. class:: LibraryLoader(dlltype)\n\n   Class which loads shared libraries.  *dlltype* should be one of the\n   :class:`CDLL`, :class:`PyDLL`, :class:`WinDLL`, or :class:`OleDLL` types.\n\n   :meth:`__getattr__` has special behavior: It allows loading a shared library by\n   accessing it as attribute of a library loader instance.  The result is cached,\n   so repeated attribute accesses return the same library each time.\n\n   .. method:: LoadLibrary(name)\n\n      Load a shared library into the process and return it.  This method always\n      returns a new instance of the library.\n\n\nThese prefabricated library loaders are available:\n\n.. data:: cdll\n   :noindex:\n\n   Creates :class:`CDLL` instances.\n\n\n.. data:: windll\n   :noindex:\n\n   Windows only: Creates :class:`WinDLL` instances.\n\n\n.. data:: oledll\n   :noindex:\n\n   Windows only: Creates :class:`OleDLL` instances.\n\n\n.. data:: pydll\n   :noindex:\n\n   Creates :class:`PyDLL` instances.\n\n\nFor accessing the C Python api directly, a ready-to-use Python shared library\nobject is available:\n\n.. data:: pythonapi\n   :noindex:\n\n   An instance of :class:`PyDLL` that exposes Python C API functions as\n   attributes.  Note that all these functions are assumed to return C\n   :c:type:`int`, which is of course not always the truth, so you have to assign\n   the correct :attr:`restype` attribute to use these functions.\n\n\n.. _ctypes-foreign-functions:\n\nForeign functions\n^^^^^^^^^^^^^^^^^\n\nAs explained in the previous section, foreign functions can be accessed as\nattributes of loaded shared libraries.  The function objects created in this way\nby default accept any number of arguments, accept any ctypes data instances as\narguments, and return the default result type specified by the library loader.\nThey are instances of a private class:\n\n\n.. class:: _FuncPtr\n\n   Base class for C callable foreign functions.\n\n   Instances of foreign functions are also C compatible data types; they\n   represent C function pointers.\n\n   This behavior can be customized by assigning to special attributes of the\n   foreign function object.\n\n   .. attribute:: restype\n\n      Assign a ctypes type to specify the result type of the foreign function.\n      Use ``None`` for :c:type:`void`, a function not returning anything.\n\n      It is possible to assign a callable Python object that is not a ctypes\n      type, in this case the function is assumed to return a C :c:type:`int`, and\n      the callable will be called with this integer, allowing further\n      processing or error checking.  Using this is deprecated, for more flexible\n      post processing or error checking use a ctypes data type as\n      :attr:`restype` and assign a callable to the :attr:`errcheck` attribute.\n\n   .. attribute:: argtypes\n\n      Assign a tuple of ctypes types to specify the argument types that the\n      function accepts.  Functions using the ``stdcall`` calling convention can\n      only be called with the same number of arguments as the length of this\n      tuple; functions using the C calling convention accept additional,\n      unspecified arguments as well.\n\n      When a foreign function is called, each actual argument is passed to the\n      :meth:`from_param` class method of the items in the :attr:`argtypes`\n      tuple, this method allows adapting the actual argument to an object that\n      the foreign function accepts.  For example, a :class:`c_char_p` item in\n      the :attr:`argtypes` tuple will convert a string passed as argument into\n      a bytes object using ctypes conversion rules.\n\n      New: It is now possible to put items in argtypes which are not ctypes\n      types, but each item must have a :meth:`from_param` method which returns a\n      value usable as argument (integer, string, ctypes instance).  This allows\n      defining adapters that can adapt custom objects as function parameters.\n\n   .. attribute:: errcheck\n\n      Assign a Python function or another callable to this attribute. The\n      callable will be called with three or more arguments:\n\n      .. function:: callable(result, func, arguments)\n         :noindex:\n         :module:\n\n         *result* is what the foreign function returns, as specified by the\n         :attr:`restype` attribute.\n\n         *func* is the foreign function object itself, this allows reusing the\n         same callable object to check or post process the results of several\n         functions.\n\n         *arguments* is a tuple containing the parameters originally passed to\n         the function call, this allows specializing the behavior on the\n         arguments used.\n\n      The object that this function returns will be returned from the\n      foreign function call, but it can also check the result value\n      and raise an exception if the foreign function call failed.\n\n\n.. exception:: ArgumentError\n\n   This exception is raised when a foreign function call cannot convert one of the\n   passed arguments.\n\n\n.. _ctypes-function-prototypes:\n\nFunction prototypes\n^^^^^^^^^^^^^^^^^^^\n\nForeign functions can also be created by instantiating function prototypes.\nFunction prototypes are similar to function prototypes in C; they describe a\nfunction (return type, argument types, calling convention) without defining an\nimplementation.  The factory functions must be called with the desired result\ntype and the argument types of the function.\n\n\n.. function:: CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)\n\n   The returned function prototype creates functions that use the standard C\n   calling convention.  The function will release the GIL during the call.  If\n   *use_errno* is set to true, the ctypes private copy of the system\n   :data:`errno` variable is exchanged with the real :data:`errno` value before\n   and after the call; *use_last_error* does the same for the Windows error\n   code.\n\n\n.. function:: WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)\n\n   Windows only: The returned function prototype creates functions that use the\n   ``stdcall`` calling convention, except on Windows CE where\n   :func:`WINFUNCTYPE` is the same as :func:`CFUNCTYPE`.  The function will\n   release the GIL during the call.  *use_errno* and *use_last_error* have the\n   same meaning as above.\n\n\n.. function:: PYFUNCTYPE(restype, *argtypes)\n\n   The returned function prototype creates functions that use the Python calling\n   convention.  The function will *not* release the GIL during the call.\n\nFunction prototypes created by these factory functions can be instantiated in\ndifferent ways, depending on the type and number of the parameters in the call:\n\n\n   .. function:: prototype(address)\n      :noindex:\n      :module:\n\n      Returns a foreign function at the specified address which must be an integer.\n\n\n   .. function:: prototype(callable)\n      :noindex:\n      :module:\n\n      Create a C callable function (a callback function) from a Python *callable*.\n\n\n   .. function:: prototype(func_spec[, paramflags])\n      :noindex:\n      :module:\n\n      Returns a foreign function exported by a shared library. *func_spec* must\n      be a 2-tuple ``(name_or_ordinal, library)``. The first item is the name of\n      the exported function as string, or the ordinal of the exported function\n      as small integer.  The second item is the shared library instance.\n\n\n   .. function:: prototype(vtbl_index, name[, paramflags[, iid]])\n      :noindex:\n      :module:\n\n      Returns a foreign function that will call a COM method. *vtbl_index* is\n      the index into the virtual function table, a small non-negative\n      integer. *name* is name of the COM method. *iid* is an optional pointer to\n      the interface identifier which is used in extended error reporting.\n\n      COM methods use a special calling convention: They require a pointer to\n      the COM interface as first argument, in addition to those parameters that\n      are specified in the :attr:`argtypes` tuple.\n\n   The optional *paramflags* parameter creates foreign function wrappers with much\n   more functionality than the features described above.\n\n   *paramflags* must be a tuple of the same length as :attr:`argtypes`.\n\n   Each item in this tuple contains further information about a parameter, it must\n   be a tuple containing one, two, or three items.\n\n   The first item is an integer containing a combination of direction\n   flags for the parameter:\n\n      1\n         Specifies an input parameter to the function.\n\n      2\n         Output parameter.  The foreign function fills in a value.\n\n      4\n         Input parameter which defaults to the integer zero.\n\n   The optional second item is the parameter name as string.  If this is specified,\n   the foreign function can be called with named parameters.\n\n   The optional third item is the default value for this parameter.\n\nThis example demonstrates how to wrap the Windows ``MessageBoxW`` function so\nthat it supports default parameters and named arguments. The C declaration from\nthe windows header file is this::\n\n   WINUSERAPI int WINAPI\n   MessageBoxW(\n       HWND hWnd,\n       LPCWSTR lpText,\n       LPCWSTR lpCaption,\n       UINT uType);\n\nHere is the wrapping with :mod:`ctypes`::\n\n   >>> from ctypes import c_int, WINFUNCTYPE, windll\n   >>> from ctypes.wintypes import HWND, LPCWSTR, UINT\n   >>> prototype = WINFUNCTYPE(c_int, HWND, LPCWSTR, LPCWSTR, UINT)\n   >>> paramflags = (1, \"hwnd\", 0), (1, \"text\", \"Hi\"), (1, \"caption\", \"Hello from ctypes\"), (1, \"flags\", 0)\n   >>> MessageBox = prototype((\"MessageBoxW\", windll.user32), paramflags)\n\nThe ``MessageBox`` foreign function can now be called in these ways::\n\n   >>> MessageBox()\n   >>> MessageBox(text=\"Spam, spam, spam\")\n   >>> MessageBox(flags=2, text=\"foo bar\")\n\nA second example demonstrates output parameters.  The win32 ``GetWindowRect``\nfunction retrieves the dimensions of a specified window by copying them into\n``RECT`` structure that the caller has to supply.  Here is the C declaration::\n\n   WINUSERAPI BOOL WINAPI\n   GetWindowRect(\n        HWND hWnd,\n        LPRECT lpRect);\n\nHere is the wrapping with :mod:`ctypes`::\n\n   >>> from ctypes import POINTER, WINFUNCTYPE, windll, WinError\n   >>> from ctypes.wintypes import BOOL, HWND, RECT\n   >>> prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT))\n   >>> paramflags = (1, \"hwnd\"), (2, \"lprect\")\n   >>> GetWindowRect = prototype((\"GetWindowRect\", windll.user32), paramflags)\n   >>>\n\nFunctions with output parameters will automatically return the output parameter\nvalue if there is a single one, or a tuple containing the output parameter\nvalues when there are more than one, so the GetWindowRect function now returns a\nRECT instance, when called.\n\nOutput parameters can be combined with the :attr:`errcheck` protocol to do\nfurther output processing and error checking.  The win32 ``GetWindowRect`` api\nfunction returns a ``BOOL`` to signal success or failure, so this function could\ndo the error checking, and raises an exception when the api call failed::\n\n   >>> def errcheck(result, func, args):\n   ...     if not result:\n   ...         raise WinError()\n   ...     return args\n   ...\n   >>> GetWindowRect.errcheck = errcheck\n   >>>\n\nIf the :attr:`errcheck` function returns the argument tuple it receives\nunchanged, :mod:`ctypes` continues the normal processing it does on the output\nparameters.  If you want to return a tuple of window coordinates instead of a\n``RECT`` instance, you can retrieve the fields in the function and return them\ninstead, the normal processing will no longer take place::\n\n   >>> def errcheck(result, func, args):\n   ...     if not result:\n   ...         raise WinError()\n   ...     rc = args[1]\n   ...     return rc.left, rc.top, rc.bottom, rc.right\n   ...\n   >>> GetWindowRect.errcheck = errcheck\n   >>>\n\n\n.. _ctypes-utility-functions:\n\nUtility functions\n^^^^^^^^^^^^^^^^^\n\n.. function:: addressof(obj)\n\n   Returns the address of the memory buffer as integer.  *obj* must be an\n   instance of a ctypes type.\n\n\n.. function:: alignment(obj_or_type)\n\n   Returns the alignment requirements of a ctypes type. *obj_or_type* must be a\n   ctypes type or instance.\n\n\n.. function:: byref(obj[, offset])\n\n   Returns a light-weight pointer to *obj*, which must be an instance of a\n   ctypes type.  *offset* defaults to zero, and must be an integer that will be\n   added to the internal pointer value.\n\n   ``byref(obj, offset)`` corresponds to this C code::\n\n      (((char *)&obj) + offset)\n\n   The returned object can only be used as a foreign function call parameter.\n   It behaves similar to ``pointer(obj)``, but the construction is a lot faster.\n\n\n.. function:: cast(obj, type)\n\n   This function is similar to the cast operator in C. It returns a new instance\n   of *type* which points to the same memory block as *obj*.  *type* must be a\n   pointer type, and *obj* must be an object that can be interpreted as a\n   pointer.\n\n\n.. function:: create_string_buffer(init_or_size, size=None)\n\n   This function creates a mutable character buffer. The returned object is a\n   ctypes array of :class:`c_char`.\n\n   *init_or_size* must be an integer which specifies the size of the array, or a\n   bytes object which will be used to initialize the array items.\n\n   If a bytes object is specified as first argument, the buffer is made one item\n   larger than its length so that the last element in the array is a NUL\n   termination character. An integer can be passed as second argument which allows\n   specifying the size of the array if the length of the bytes should not be used.\n\n\n\n.. function:: create_unicode_buffer(init_or_size, size=None)\n\n   This function creates a mutable unicode character buffer. The returned object is\n   a ctypes array of :class:`c_wchar`.\n\n   *init_or_size* must be an integer which specifies the size of the array, or a\n   string which will be used to initialize the array items.\n\n   If a string is specified as first argument, the buffer is made one item\n   larger than the length of the string so that the last element in the array is a\n   NUL termination character. An integer can be passed as second argument which\n   allows specifying the size of the array if the length of the string should not\n   be used.\n\n\n\n.. function:: DllCanUnloadNow()\n\n   Windows only: This function is a hook which allows implementing in-process\n   COM servers with ctypes.  It is called from the DllCanUnloadNow function that\n   the _ctypes extension dll exports.\n\n\n.. function:: DllGetClassObject()\n\n   Windows only: This function is a hook which allows implementing in-process\n   COM servers with ctypes.  It is called from the DllGetClassObject function\n   that the ``_ctypes`` extension dll exports.\n\n\n.. function:: find_library(name)\n   :module: ctypes.util\n\n   Try to find a library and return a pathname.  *name* is the library name\n   without any prefix like ``lib``, suffix like ``.so``, ``.dylib`` or version\n   number (this is the form used for the posix linker option :option:`!-l`).  If\n   no library can be found, returns ``None``.\n\n   The exact functionality is system dependent.\n\n\n.. function:: find_msvcrt()\n   :module: ctypes.util\n\n   Windows only: return the filename of the VC runtime library used by Python,\n   and by the extension modules.  If the name of the library cannot be\n   determined, ``None`` is returned.\n\n   If you need to free memory, for example, allocated by an extension module\n   with a call to the ``free(void *)``, it is important that you use the\n   function in the same library that allocated the memory.\n\n\n.. function:: FormatError([code])\n\n   Windows only: Returns a textual description of the error code *code*.  If no\n   error code is specified, the last error code is used by calling the Windows\n   api function GetLastError.\n\n\n.. function:: GetLastError()\n\n   Windows only: Returns the last error code set by Windows in the calling thread.\n   This function calls the Windows `GetLastError()` function directly,\n   it does not return the ctypes-private copy of the error code.\n\n.. function:: get_errno()\n\n   Returns the current value of the ctypes-private copy of the system\n   :data:`errno` variable in the calling thread.\n\n.. function:: get_last_error()\n\n   Windows only: returns the current value of the ctypes-private copy of the system\n   :data:`LastError` variable in the calling thread.\n\n.. function:: memmove(dst, src, count)\n\n   Same as the standard C memmove library function: copies *count* bytes from\n   *src* to *dst*. *dst* and *src* must be integers or ctypes instances that can\n   be converted to pointers.\n\n\n.. function:: memset(dst, c, count)\n\n   Same as the standard C memset library function: fills the memory block at\n   address *dst* with *count* bytes of value *c*. *dst* must be an integer\n   specifying an address, or a ctypes instance.\n\n\n.. function:: POINTER(type)\n\n   This factory function creates and returns a new ctypes pointer type. Pointer\n   types are cached and reused internally, so calling this function repeatedly is\n   cheap. *type* must be a ctypes type.\n\n\n.. function:: pointer(obj)\n\n   This function creates a new pointer instance, pointing to *obj*. The returned\n   object is of the type ``POINTER(type(obj))``.\n\n   Note: If you just want to pass a pointer to an object to a foreign function\n   call, you should use ``byref(obj)`` which is much faster.\n\n\n.. function:: resize(obj, size)\n\n   This function resizes the internal memory buffer of *obj*, which must be an\n   instance of a ctypes type.  It is not possible to make the buffer smaller\n   than the native size of the objects type, as given by ``sizeof(type(obj))``,\n   but it is possible to enlarge the buffer.\n\n\n.. function:: set_errno(value)\n\n   Set the current value of the ctypes-private copy of the system :data:`errno`\n   variable in the calling thread to *value* and return the previous value.\n\n\n\n.. function:: set_last_error(value)\n\n   Windows only: set the current value of the ctypes-private copy of the system\n   :data:`LastError` variable in the calling thread to *value* and return the\n   previous value.\n\n\n\n.. function:: sizeof(obj_or_type)\n\n   Returns the size in bytes of a ctypes type or instance memory buffer.\n   Does the same as the C ``sizeof`` operator.\n\n\n.. function:: string_at(address, size=-1)\n\n   This function returns the C string starting at memory address *address* as a bytes\n   object. If size is specified, it is used as size, otherwise the string is assumed\n   to be zero-terminated.\n\n\n.. function:: WinError(code=None, descr=None)\n\n   Windows only: this function is probably the worst-named thing in ctypes. It\n   creates an instance of OSError.  If *code* is not specified,\n   ``GetLastError`` is called to determine the error code. If *descr* is not\n   specified, :func:`FormatError` is called to get a textual description of the\n   error.\n\n   .. versionchanged:: 3.3\n      An instance of :exc:`WindowsError` used to be created.\n\n\n.. function:: wstring_at(address, size=-1)\n\n   This function returns the wide character string starting at memory address\n   *address* as a string.  If *size* is specified, it is used as the number of\n   characters of the string, otherwise the string is assumed to be\n   zero-terminated.\n\n\n.. _ctypes-data-types:\n\nData types\n^^^^^^^^^^\n\n\n.. class:: _CData\n\n   This non-public class is the common base class of all ctypes data types.\n   Among other things, all ctypes type instances contain a memory block that\n   hold C compatible data; the address of the memory block is returned by the\n   :func:`addressof` helper function. Another instance variable is exposed as\n   :attr:`_objects`; this contains other Python objects that need to be kept\n   alive in case the memory block contains pointers.\n\n   Common methods of ctypes data types, these are all class methods (to be\n   exact, they are methods of the :term:`metaclass`):\n\n   .. method:: _CData.from_buffer(source[, offset])\n\n      This method returns a ctypes instance that shares the buffer of the\n      *source* object.  The *source* object must support the writeable buffer\n      interface.  The optional *offset* parameter specifies an offset into the\n      source buffer in bytes; the default is zero.  If the source buffer is not\n      large enough a :exc:`ValueError` is raised.\n\n\n   .. method:: _CData.from_buffer_copy(source[, offset])\n\n      This method creates a ctypes instance, copying the buffer from the\n      *source* object buffer which must be readable.  The optional *offset*\n      parameter specifies an offset into the source buffer in bytes; the default\n      is zero.  If the source buffer is not large enough a :exc:`ValueError` is\n      raised.\n\n   .. method:: from_address(address)\n\n      This method returns a ctypes type instance using the memory specified by\n      *address* which must be an integer.\n\n   .. method:: from_param(obj)\n\n      This method adapts *obj* to a ctypes type.  It is called with the actual\n      object used in a foreign function call when the type is present in the\n      foreign function's :attr:`argtypes` tuple; it must return an object that\n      can be used as a function call parameter.\n\n      All ctypes data types have a default implementation of this classmethod\n      that normally returns *obj* if that is an instance of the type.  Some\n      types accept other objects as well.\n\n   .. method:: in_dll(library, name)\n\n      This method returns a ctypes type instance exported by a shared\n      library. *name* is the name of the symbol that exports the data, *library*\n      is the loaded shared library.\n\n   Common instance variables of ctypes data types:\n\n   .. attribute:: _b_base_\n\n      Sometimes ctypes data instances do not own the memory block they contain,\n      instead they share part of the memory block of a base object.  The\n      :attr:`_b_base_` read-only member is the root ctypes object that owns the\n      memory block.\n\n   .. attribute:: _b_needsfree_\n\n      This read-only variable is true when the ctypes data instance has\n      allocated the memory block itself, false otherwise.\n\n   .. attribute:: _objects\n\n      This member is either ``None`` or a dictionary containing Python objects\n      that need to be kept alive so that the memory block contents is kept\n      valid.  This object is only exposed for debugging; never modify the\n      contents of this dictionary.\n\n\n.. _ctypes-fundamental-data-types-2:\n\nFundamental data types\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. class:: _SimpleCData\n\n   This non-public class is the base class of all fundamental ctypes data\n   types. It is mentioned here because it contains the common attributes of the\n   fundamental ctypes data types.  :class:`_SimpleCData` is a subclass of\n   :class:`_CData`, so it inherits their methods and attributes. ctypes data\n   types that are not and do not contain pointers can now be pickled.\n\n   Instances have a single attribute:\n\n   .. attribute:: value\n\n      This attribute contains the actual value of the instance. For integer and\n      pointer types, it is an integer, for character types, it is a single\n      character bytes object or string, for character pointer types it is a\n      Python bytes object or string.\n\n      When the ``value`` attribute is retrieved from a ctypes instance, usually\n      a new object is returned each time.  :mod:`ctypes` does *not* implement\n      original object return, always a new object is constructed.  The same is\n      true for all other ctypes object instances.\n\n\nFundamental data types, when returned as foreign function call results, or, for\nexample, by retrieving structure field members or array items, are transparently\nconverted to native Python types.  In other words, if a foreign function has a\n:attr:`restype` of :class:`c_char_p`, you will always receive a Python bytes\nobject, *not* a :class:`c_char_p` instance.\n\n.. XXX above is false, it actually returns a Unicode string\n\nSubclasses of fundamental data types do *not* inherit this behavior. So, if a\nforeign functions :attr:`restype` is a subclass of :class:`c_void_p`, you will\nreceive an instance of this subclass from the function call. Of course, you can\nget the value of the pointer by accessing the ``value`` attribute.\n\nThese are the fundamental ctypes data types:\n\n.. class:: c_byte\n\n   Represents the C :c:type:`signed char` datatype, and interprets the value as\n   small integer.  The constructor accepts an optional integer initializer; no\n   overflow checking is done.\n\n\n.. class:: c_char\n\n   Represents the C :c:type:`char` datatype, and interprets the value as a single\n   character.  The constructor accepts an optional string initializer, the\n   length of the string must be exactly one character.\n\n\n.. class:: c_char_p\n\n   Represents the C :c:type:`char *` datatype when it points to a zero-terminated\n   string.  For a general character pointer that may also point to binary data,\n   ``POINTER(c_char)`` must be used.  The constructor accepts an integer\n   address, or a bytes object.\n\n\n.. class:: c_double\n\n   Represents the C :c:type:`double` datatype.  The constructor accepts an\n   optional float initializer.\n\n\n.. class:: c_longdouble\n\n   Represents the C :c:type:`long double` datatype.  The constructor accepts an\n   optional float initializer.  On platforms where ``sizeof(long double) ==\n   sizeof(double)`` it is an alias to :class:`c_double`.\n\n.. class:: c_float\n\n   Represents the C :c:type:`float` datatype.  The constructor accepts an\n   optional float initializer.\n\n\n.. class:: c_int\n\n   Represents the C :c:type:`signed int` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.  On platforms\n   where ``sizeof(int) == sizeof(long)`` it is an alias to :class:`c_long`.\n\n\n.. class:: c_int8\n\n   Represents the C 8-bit :c:type:`signed int` datatype.  Usually an alias for\n   :class:`c_byte`.\n\n\n.. class:: c_int16\n\n   Represents the C 16-bit :c:type:`signed int` datatype.  Usually an alias for\n   :class:`c_short`.\n\n\n.. class:: c_int32\n\n   Represents the C 32-bit :c:type:`signed int` datatype.  Usually an alias for\n   :class:`c_int`.\n\n\n.. class:: c_int64\n\n   Represents the C 64-bit :c:type:`signed int` datatype.  Usually an alias for\n   :class:`c_longlong`.\n\n\n.. class:: c_long\n\n   Represents the C :c:type:`signed long` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_longlong\n\n   Represents the C :c:type:`signed long long` datatype.  The constructor accepts\n   an optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_short\n\n   Represents the C :c:type:`signed short` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_size_t\n\n   Represents the C :c:type:`size_t` datatype.\n\n\n.. class:: c_ssize_t\n\n   Represents the C :c:type:`ssize_t` datatype.\n\n   .. versionadded:: 3.2\n\n\n.. class:: c_ubyte\n\n   Represents the C :c:type:`unsigned char` datatype, it interprets the value as\n   small integer.  The constructor accepts an optional integer initializer; no\n   overflow checking is done.\n\n\n.. class:: c_uint\n\n   Represents the C :c:type:`unsigned int` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.  On platforms\n   where ``sizeof(int) == sizeof(long)`` it is an alias for :class:`c_ulong`.\n\n\n.. class:: c_uint8\n\n   Represents the C 8-bit :c:type:`unsigned int` datatype.  Usually an alias for\n   :class:`c_ubyte`.\n\n\n.. class:: c_uint16\n\n   Represents the C 16-bit :c:type:`unsigned int` datatype.  Usually an alias for\n   :class:`c_ushort`.\n\n\n.. class:: c_uint32\n\n   Represents the C 32-bit :c:type:`unsigned int` datatype.  Usually an alias for\n   :class:`c_uint`.\n\n\n.. class:: c_uint64\n\n   Represents the C 64-bit :c:type:`unsigned int` datatype.  Usually an alias for\n   :class:`c_ulonglong`.\n\n\n.. class:: c_ulong\n\n   Represents the C :c:type:`unsigned long` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_ulonglong\n\n   Represents the C :c:type:`unsigned long long` datatype.  The constructor\n   accepts an optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_ushort\n\n   Represents the C :c:type:`unsigned short` datatype.  The constructor accepts\n   an optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_void_p\n\n   Represents the C :c:type:`void *` type.  The value is represented as integer.\n   The constructor accepts an optional integer initializer.\n\n\n.. class:: c_wchar\n\n   Represents the C :c:type:`wchar_t` datatype, and interprets the value as a\n   single character unicode string.  The constructor accepts an optional string\n   initializer, the length of the string must be exactly one character.\n\n\n.. class:: c_wchar_p\n\n   Represents the C :c:type:`wchar_t *` datatype, which must be a pointer to a\n   zero-terminated wide character string.  The constructor accepts an integer\n   address, or a string.\n\n\n.. class:: c_bool\n\n   Represent the C :c:type:`bool` datatype (more accurately, :c:type:`_Bool` from\n   C99).  Its value can be ``True`` or ``False``, and the constructor accepts any object\n   that has a truth value.\n\n\n.. class:: HRESULT\n\n   Windows only: Represents a :c:type:`HRESULT` value, which contains success or\n   error information for a function or method call.\n\n\n.. class:: py_object\n\n   Represents the C :c:type:`PyObject *` datatype.  Calling this without an\n   argument creates a ``NULL`` :c:type:`PyObject *` pointer.\n\nThe :mod:`ctypes.wintypes` module provides quite some other Windows specific\ndata types, for example :c:type:`HWND`, :c:type:`WPARAM`, or :c:type:`DWORD`.  Some\nuseful structures like :c:type:`MSG` or :c:type:`RECT` are also defined.\n\n\n.. _ctypes-structured-data-types:\n\nStructured data types\n^^^^^^^^^^^^^^^^^^^^^\n\n\n.. class:: Union(*args, **kw)\n\n   Abstract base class for unions in native byte order.\n\n\n.. class:: BigEndianStructure(*args, **kw)\n\n   Abstract base class for structures in *big endian* byte order.\n\n\n.. class:: LittleEndianStructure(*args, **kw)\n\n   Abstract base class for structures in *little endian* byte order.\n\nStructures with non-native byte order cannot contain pointer type fields, or any\nother data types containing pointer type fields.\n\n\n.. class:: Structure(*args, **kw)\n\n   Abstract base class for structures in *native* byte order.\n\n   Concrete structure and union types must be created by subclassing one of these\n   types, and at least define a :attr:`_fields_` class variable. :mod:`ctypes` will\n   create :term:`descriptor`\\s which allow reading and writing the fields by direct\n   attribute accesses.  These are the\n\n\n   .. attribute:: _fields_\n\n      A sequence defining the structure fields.  The items must be 2-tuples or\n      3-tuples.  The first item is the name of the field, the second item\n      specifies the type of the field; it can be any ctypes data type.\n\n      For integer type fields like :class:`c_int`, a third optional item can be\n      given.  It must be a small positive integer defining the bit width of the\n      field.\n\n      Field names must be unique within one structure or union.  This is not\n      checked, only one field can be accessed when names are repeated.\n\n      It is possible to define the :attr:`_fields_` class variable *after* the\n      class statement that defines the Structure subclass, this allows creating\n      data types that directly or indirectly reference themselves::\n\n         class List(Structure):\n             pass\n         List._fields_ = [(\"pnext\", POINTER(List)),\n                          ...\n                         ]\n\n      The :attr:`_fields_` class variable must, however, be defined before the\n      type is first used (an instance is created, :func:`sizeof` is called on it,\n      and so on).  Later assignments to the :attr:`_fields_` class variable will\n      raise an AttributeError.\n\n      It is possible to defined sub-subclasses of structure types, they inherit\n      the fields of the base class plus the :attr:`_fields_` defined in the\n      sub-subclass, if any.\n\n\n   .. attribute:: _pack_\n\n      An optional small integer that allows overriding the alignment of\n      structure fields in the instance.  :attr:`_pack_` must already be defined\n      when :attr:`_fields_` is assigned, otherwise it will have no effect.\n\n\n   .. attribute:: _anonymous_\n\n      An optional sequence that lists the names of unnamed (anonymous) fields.\n      :attr:`_anonymous_` must be already defined when :attr:`_fields_` is\n      assigned, otherwise it will have no effect.\n\n      The fields listed in this variable must be structure or union type fields.\n      :mod:`ctypes` will create descriptors in the structure type that allows\n      accessing the nested fields directly, without the need to create the\n      structure or union field.\n\n      Here is an example type (Windows)::\n\n         class _U(Union):\n             _fields_ = [(\"lptdesc\", POINTER(TYPEDESC)),\n                         (\"lpadesc\", POINTER(ARRAYDESC)),\n                         (\"hreftype\", HREFTYPE)]\n\n         class TYPEDESC(Structure):\n             _anonymous_ = (\"u\",)\n             _fields_ = [(\"u\", _U),\n                         (\"vt\", VARTYPE)]\n\n\n      The ``TYPEDESC`` structure describes a COM data type, the ``vt`` field\n      specifies which one of the union fields is valid.  Since the ``u`` field\n      is defined as anonymous field, it is now possible to access the members\n      directly off the TYPEDESC instance. ``td.lptdesc`` and ``td.u.lptdesc``\n      are equivalent, but the former is faster since it does not need to create\n      a temporary union instance::\n\n         td = TYPEDESC()\n         td.vt = VT_PTR\n         td.lptdesc = POINTER(some_type)\n         td.u.lptdesc = POINTER(some_type)\n\n   It is possible to defined sub-subclasses of structures, they inherit the\n   fields of the base class.  If the subclass definition has a separate\n   :attr:`_fields_` variable, the fields specified in this are appended to the\n   fields of the base class.\n\n   Structure and union constructors accept both positional and keyword\n   arguments.  Positional arguments are used to initialize member fields in the\n   same order as they are appear in :attr:`_fields_`.  Keyword arguments in the\n   constructor are interpreted as attribute assignments, so they will initialize\n   :attr:`_fields_` with the same name, or create new attributes for names not\n   present in :attr:`_fields_`.\n\n\n.. _ctypes-arrays-pointers:\n\nArrays and pointers\n^^^^^^^^^^^^^^^^^^^\n\n.. class:: Array(\\*args)\n\n   Abstract base class for arrays.\n\n   The recommended way to create concrete array types is by multiplying any\n   :mod:`ctypes` data type with a positive integer.  Alternatively, you can subclass\n   this type and define :attr:`_length_` and :attr:`_type_` class variables.\n   Array elements can be read and written using standard\n   subscript and slice accesses; for slice reads, the resulting object is\n   *not* itself an :class:`Array`.\n\n\n   .. attribute:: _length_\n\n        A positive integer specifying the number of elements in the array.\n        Out-of-range subscripts result in an :exc:`IndexError`. Will be\n        returned by :func:`len`.\n\n\n   .. attribute:: _type_\n\n        Specifies the type of each element in the array.\n\n\n   Array subclass constructors accept positional arguments, used to\n   initialize the elements in order.\n\n\n.. class:: _Pointer\n\n   Private, abstract base class for pointers.\n\n   Concrete pointer types are created by calling :func:`POINTER` with the\n   type that will be pointed to; this is done automatically by\n   :func:`pointer`.\n\n   If a pointer points to an array, its elements can be read and\n   written using standard subscript and slice accesses.  Pointer objects\n   have no size, so :func:`len` will raise :exc:`TypeError`.  Negative\n   subscripts will read from the memory *before* the pointer (as in C), and\n   out-of-range subscripts will probably crash with an access violation (if\n   you're lucky).\n\n\n   .. attribute:: _type_\n\n        Specifies the type pointed to.\n\n   .. attribute:: contents\n\n        Returns the object to which to pointer points.  Assigning to this\n        attribute changes the pointer to point to the assigned object.\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/tutorial/modules.rst": ".. _tut-modules:\n\n*******\nModules\n*******\n\nIf you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a *script*.  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you've written in several programs without copying its\ndefinition into each program.\n\nTo support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n*module*; definitions from a module can be *imported* into other modules or into\nthe *main* module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).\n\nA module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix :file:`.py` appended.  Within a module, the\nmodule's name (as a string) is available as the value of the global variable\n``__name__``.  For instance, use your favorite text editor to create a file\ncalled :file:`fibo.py` in the current directory with the following contents::\n\n   # Fibonacci numbers module\n\n   def fib(n):    # write Fibonacci series up to n\n       a, b = 0, 1\n       while b < n:\n           print(b, end=' ')\n           a, b = b, a+b\n       print()\n\n   def fib2(n):   # return Fibonacci series up to n\n       result = []\n       a, b = 0, 1\n       while b < n:\n           result.append(b)\n           a, b = b, a+b\n       return result\n\nNow enter the Python interpreter and import this module with the following\ncommand::\n\n   >>> import fibo\n\nThis does not enter the names of the functions defined in ``fibo``  directly in\nthe current symbol table; it only enters the module name ``fibo`` there. Using\nthe module name you can access the functions::\n\n   >>> fibo.fib(1000)\n   1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n   >>> fibo.fib2(100)\n   [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n   >>> fibo.__name__\n   'fibo'\n\nIf you intend to use a function often you can assign it to a local name::\n\n   >>> fib = fibo.fib\n   >>> fib(500)\n   1 1 2 3 5 8 13 21 34 55 89 144 233 377\n\n\n.. _tut-moremodules:\n\nMore on Modules\n===============\n\nA module can contain executable statements as well as function definitions.\nThese statements are intended to initialize the module. They are executed only\nthe *first* time the module name is encountered in an import statement. [#]_\n(They are also run if the file is executed as a script.)\n\nEach module has its own private symbol table, which is used as the global symbol\ntable by all functions defined in the module. Thus, the author of a module can\nuse global variables in the module without worrying about accidental clashes\nwith a user's global variables. On the other hand, if you know what you are\ndoing you can touch a module's global variables with the same notation used to\nrefer to its functions, ``modname.itemname``.\n\nModules can import other modules.  It is customary but not required to place all\n:keyword:`import` statements at the beginning of a module (or script, for that\nmatter).  The imported module names are placed in the importing module's global\nsymbol table.\n\nThere is a variant of the :keyword:`import` statement that imports names from a\nmodule directly into the importing module's symbol table.  For example::\n\n   >>> from fibo import fib, fib2\n   >>> fib(500)\n   1 1 2 3 5 8 13 21 34 55 89 144 233 377\n\nThis does not introduce the module name from which the imports are taken in the\nlocal symbol table (so in the example, ``fibo`` is not defined).\n\nThere is even a variant to import all names that a module defines::\n\n   >>> from fibo import *\n   >>> fib(500)\n   1 1 2 3 5 8 13 21 34 55 89 144 233 377\n\nThis imports all names except those beginning with an underscore (``_``).\nIn most cases Python programmers do not use this facility since it introduces\nan unknown set of names into the interpreter, possibly hiding some things\nyou have already defined.\n\nNote that in general the practice of importing ``*`` from a module or package is\nfrowned upon, since it often causes poorly readable code. However, it is okay to\nuse it to save typing in interactive sessions.\n\n.. note::\n\n   For efficiency reasons, each module is only imported once per interpreter\n   session.  Therefore, if you change your modules, you must restart the\n   interpreter -- or, if it's just one module you want to test interactively,\n   use :func:`importlib.reload`, e.g. ``import importlib;\n   importlib.reload(modulename)``.\n\n\n.. _tut-modulesasscripts:\n\nExecuting modules as scripts\n----------------------------\n\nWhen you run a Python module with ::\n\n   python fibo.py <arguments>\n\nthe code in the module will be executed, just as if you imported it, but with\nthe ``__name__`` set to ``\"__main__\"``.  That means that by adding this code at\nthe end of your module::\n\n   if __name__ == \"__main__\":\n       import sys\n       fib(int(sys.argv[1]))\n\nyou can make the file usable as a script as well as an importable module,\nbecause the code that parses the command line only runs if the module is\nexecuted as the \"main\" file:\n\n.. code-block:: shell-session\n\n   $ python fibo.py 50\n   1 1 2 3 5 8 13 21 34\n\nIf the module is imported, the code is not run::\n\n   >>> import fibo\n   >>>\n\nThis is often used either to provide a convenient user interface to a module, or\nfor testing purposes (running the module as a script executes a test suite).\n\n\n.. _tut-searchpath:\n\nThe Module Search Path\n----------------------\n\n.. index:: triple: module; search; path\n\nWhen a module named :mod:`spam` is imported, the interpreter first searches for\na built-in module with that name. If not found, it then searches for a file\nnamed :file:`spam.py` in a list of directories given by the variable\n:data:`sys.path`.  :data:`sys.path` is initialized from these locations:\n\n* The directory containing the input script (or the current directory when no\n  file is specified).\n* :envvar:`PYTHONPATH` (a list of directory names, with the same syntax as the\n  shell variable :envvar:`PATH`).\n* The installation-dependent default.\n\n.. note::\n   On file systems which support symlinks, the directory containing the input\n   script is calculated after the symlink is followed. In other words the\n   directory containing the symlink is **not** added to the module search path.\n\nAfter initialization, Python programs can modify :data:`sys.path`.  The\ndirectory containing the script being run is placed at the beginning of the\nsearch path, ahead of the standard library path. This means that scripts in that\ndirectory will be loaded instead of modules of the same name in the library\ndirectory. This is an error unless the replacement is intended.  See section\n:ref:`tut-standardmodules` for more information.\n\n.. %\n    Do we need stuff on zip files etc. ? DUBOIS\n\n\"Compiled\" Python files\n-----------------------\n\nTo speed up loading modules, Python caches the compiled version of each module\nin the ``__pycache__`` directory under the name :file:`module.{version}.pyc`,\nwhere the version encodes the format of the compiled file; it generally contains\nthe Python version number.  For example, in CPython release 3.3 the compiled\nversion of spam.py would be cached as ``__pycache__/spam.cpython-33.pyc``.  This\nnaming convention allows compiled modules from different releases and different\nversions of Python to coexist.\n\nPython checks the modification date of the source against the compiled version\nto see if it's out of date and needs to be recompiled.  This is a completely\nautomatic process.  Also, the compiled modules are platform-independent, so the\nsame library can be shared among systems with different architectures.\n\nPython does not check the cache in two circumstances.  First, it always\nrecompiles and does not store the result for the module that's loaded directly\nfrom the command line.  Second, it does not check the cache if there is no\nsource module.  To support a non-source (compiled only) distribution, the\ncompiled module must be in the source directory, and there must not be a source\nmodule.\n\nSome tips for experts:\n\n* You can use the :option:`-O` or :option:`-OO` switches on the Python command\n  to reduce the size of a compiled module.  The ``-O`` switch removes assert\n  statements, the ``-OO`` switch removes both assert statements and __doc__\n  strings.  Since some programs may rely on having these available, you should\n  only use this option if you know what you're doing.  \"Optimized\" modules have\n  an ``opt-`` tag and are usually smaller.  Future releases may\n  change the effects of optimization.\n\n* A program doesn't run any faster when it is read from a ``.pyc``\n  file than when it is read from a ``.py`` file; the only thing that's faster\n  about ``.pyc`` files is the speed with which they are loaded.\n\n* The module :mod:`compileall` can create .pyc files for all modules in a\n  directory.\n\n* There is more detail on this process, including a flow chart of the\n  decisions, in PEP 3147.\n\n\n.. _tut-standardmodules:\n\nStandard Modules\n================\n\n.. index:: module: sys\n\nPython comes with a library of standard modules, described in a separate\ndocument, the Python Library Reference (\"Library Reference\" hereafter).  Some\nmodules are built into the interpreter; these provide access to operations that\nare not part of the core of the language but are nevertheless built in, either\nfor efficiency or to provide access to operating system primitives such as\nsystem calls.  The set of such modules is a configuration option which also\ndepends on the underlying platform.  For example, the :mod:`winreg` module is only\nprovided on Windows systems. One particular module deserves some attention:\n:mod:`sys`, which is built into every Python interpreter.  The variables\n``sys.ps1`` and ``sys.ps2`` define the strings used as primary and secondary\nprompts::\n\n   >>> import sys\n   >>> sys.ps1\n   '>>> '\n   >>> sys.ps2\n   '... '\n   >>> sys.ps1 = 'C> '\n   C> print('Yuck!')\n   Yuck!\n   C>\n\n\nThese two variables are only defined if the interpreter is in interactive mode.\n\nThe variable ``sys.path`` is a list of strings that determines the interpreter's\nsearch path for modules. It is initialized to a default path taken from the\nenvironment variable :envvar:`PYTHONPATH`, or from a built-in default if\n:envvar:`PYTHONPATH` is not set.  You can modify it using standard list\noperations::\n\n   >>> import sys\n   >>> sys.path.append('/ufs/guido/lib/python')\n\n\n.. _tut-dir:\n\nThe :func:`dir` Function\n========================\n\nThe built-in function :func:`dir` is used to find out which names a module\ndefines.  It returns a sorted list of strings::\n\n   >>> import fibo, sys\n   >>> dir(fibo)\n   ['__name__', 'fib', 'fib2']\n   >>> dir(sys)  # doctest: +NORMALIZE_WHITESPACE\n   ['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__',\n    '__package__', '__stderr__', '__stdin__', '__stdout__',\n    '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',\n    '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv',\n    'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder',\n    'call_tracing', 'callstats', 'copyright', 'displayhook',\n    'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',\n    'executable', 'exit', 'flags', 'float_info', 'float_repr_style',\n    'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',\n    'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',\n    'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount',\n    'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',\n    'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path',\n    'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',\n    'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit',\n    'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout',\n    'thread_info', 'version', 'version_info', 'warnoptions']\n\nWithout arguments, :func:`dir` lists the names you have defined currently::\n\n   >>> a = [1, 2, 3, 4, 5]\n   >>> import fibo\n   >>> fib = fibo.fib\n   >>> dir()\n   ['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']\n\nNote that it lists all types of names: variables, modules, functions, etc.\n\n.. index:: module: builtins\n\n:func:`dir` does not list the names of built-in functions and variables.  If you\nwant a list of those, they are defined in the standard module\n:mod:`builtins`::\n\n   >>> import builtins\n   >>> dir(builtins)  # doctest: +NORMALIZE_WHITESPACE\n   ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',\n    'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',\n    'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',\n    'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',\n    'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',\n    'FileExistsError', 'FileNotFoundError', 'FloatingPointError',\n    'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',\n    'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',\n    'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',\n    'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',\n    'NotImplementedError', 'OSError', 'OverflowError',\n    'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',\n    'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',\n    'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',\n    'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',\n    'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',\n    'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',\n    'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',\n    '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',\n    'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',\n    'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',\n    'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',\n    'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',\n    'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',\n    'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',\n    'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',\n    'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',\n    'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',\n    'zip']\n\n.. _tut-packages:\n\nPackages\n========\n\nPackages are a way of structuring Python's module namespace by using \"dotted\nmodule names\".  For example, the module name :mod:`A.B` designates a submodule\nnamed ``B`` in a package named ``A``.  Just like the use of modules saves the\nauthors of different modules from having to worry about each other's global\nvariable names, the use of dotted module names saves the authors of multi-module\npackages like NumPy or the Python Imaging Library from having to worry about\neach other's module names.\n\nSuppose you want to design a collection of modules (a \"package\") for the uniform\nhandling of sound files and sound data.  There are many different sound file\nformats (usually recognized by their extension, for example: :file:`.wav`,\n:file:`.aiff`, :file:`.au`), so you may need to create and maintain a growing\ncollection of modules for the conversion between the various file formats.\nThere are also many different operations you might want to perform on sound data\n(such as mixing, adding echo, applying an equalizer function, creating an\nartificial stereo effect), so in addition you will be writing a never-ending\nstream of modules to perform these operations.  Here's a possible structure for\nyour package (expressed in terms of a hierarchical filesystem):\n\n.. code-block:: text\n\n   sound/                          Top-level package\n         __init__.py               Initialize the sound package\n         formats/                  Subpackage for file format conversions\n                 __init__.py\n                 wavread.py\n                 wavwrite.py\n                 aiffread.py\n                 aiffwrite.py\n                 auread.py\n                 auwrite.py\n                 ...\n         effects/                  Subpackage for sound effects\n                 __init__.py\n                 echo.py\n                 surround.py\n                 reverse.py\n                 ...\n         filters/                  Subpackage for filters\n                 __init__.py\n                 equalizer.py\n                 vocoder.py\n                 karaoke.py\n                 ...\n\nWhen importing the package, Python searches through the directories on\n``sys.path`` looking for the package subdirectory.\n\nThe :file:`__init__.py` files are required to make Python treat the directories\nas containing packages; this is done to prevent directories with a common name,\nsuch as ``string``, from unintentionally hiding valid modules that occur later\non the module search path. In the simplest case, :file:`__init__.py` can just be\nan empty file, but it can also execute initialization code for the package or\nset the ``__all__`` variable, described later.\n\nUsers of the package can import individual modules from the package, for\nexample::\n\n   import sound.effects.echo\n\nThis loads the submodule :mod:`sound.effects.echo`.  It must be referenced with\nits full name. ::\n\n   sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)\n\nAn alternative way of importing the submodule is::\n\n   from sound.effects import echo\n\nThis also loads the submodule :mod:`echo`, and makes it available without its\npackage prefix, so it can be used as follows::\n\n   echo.echofilter(input, output, delay=0.7, atten=4)\n\nYet another variation is to import the desired function or variable directly::\n\n   from sound.effects.echo import echofilter\n\nAgain, this loads the submodule :mod:`echo`, but this makes its function\n:func:`echofilter` directly available::\n\n   echofilter(input, output, delay=0.7, atten=4)\n\nNote that when using ``from package import item``, the item can be either a\nsubmodule (or subpackage) of the package, or some  other name defined in the\npackage, like a function, class or variable.  The ``import`` statement first\ntests whether the item is defined in the package; if not, it assumes it is a\nmodule and attempts to load it.  If it fails to find it, an :exc:`ImportError`\nexception is raised.\n\nContrarily, when using syntax like ``import item.subitem.subsubitem``, each item\nexcept for the last must be a package; the last item can be a module or a\npackage but can't be a class or function or variable defined in the previous\nitem.\n\n\n.. _tut-pkg-import-star:\n\nImporting \\* From a Package\n---------------------------\n\n.. index:: single: __all__\n\nNow what happens when the user writes ``from sound.effects import *``?  Ideally,\none would hope that this somehow goes out to the filesystem, finds which\nsubmodules are present in the package, and imports them all.  This could take a\nlong time and importing sub-modules might have unwanted side-effects that should\nonly happen when the sub-module is explicitly imported.\n\nThe only solution is for the package author to provide an explicit index of the\npackage.  The :keyword:`import` statement uses the following convention: if a package's\n:file:`__init__.py` code defines a list named ``__all__``, it is taken to be the\nlist of module names that should be imported when ``from package import *`` is\nencountered.  It is up to the package author to keep this list up-to-date when a\nnew version of the package is released.  Package authors may also decide not to\nsupport it, if they don't see a use for importing \\* from their package.  For\nexample, the file :file:`sound/effects/__init__.py` could contain the following\ncode::\n\n   __all__ = [\"echo\", \"surround\", \"reverse\"]\n\nThis would mean that ``from sound.effects import *`` would import the three\nnamed submodules of the :mod:`sound` package.\n\nIf ``__all__`` is not defined, the statement ``from sound.effects import *``\ndoes *not* import all submodules from the package :mod:`sound.effects` into the\ncurrent namespace; it only ensures that the package :mod:`sound.effects` has\nbeen imported (possibly running any initialization code in :file:`__init__.py`)\nand then imports whatever names are defined in the package.  This includes any\nnames defined (and submodules explicitly loaded) by :file:`__init__.py`.  It\nalso includes any submodules of the package that were explicitly loaded by\nprevious :keyword:`import` statements.  Consider this code::\n\n   import sound.effects.echo\n   import sound.effects.surround\n   from sound.effects import *\n\nIn this example, the :mod:`echo` and :mod:`surround` modules are imported in the\ncurrent namespace because they are defined in the :mod:`sound.effects` package\nwhen the ``from...import`` statement is executed.  (This also works when\n``__all__`` is defined.)\n\nAlthough certain modules are designed to export only names that follow certain\npatterns when you use ``import *``, it is still considered bad practice in\nproduction code.\n\nRemember, there is nothing wrong with using ``from Package import\nspecific_submodule``!  In fact, this is the recommended notation unless the\nimporting module needs to use submodules with the same name from different\npackages.\n\n\nIntra-package References\n------------------------\n\nWhen packages are structured into subpackages (as with the :mod:`sound` package\nin the example), you can use absolute imports to refer to submodules of siblings\npackages.  For example, if the module :mod:`sound.filters.vocoder` needs to use\nthe :mod:`echo` module in the :mod:`sound.effects` package, it can use ``from\nsound.effects import echo``.\n\nYou can also write relative imports, with the ``from module import name`` form\nof import statement.  These imports use leading dots to indicate the current and\nparent packages involved in the relative import.  From the :mod:`surround`\nmodule for example, you might use::\n\n   from . import echo\n   from .. import formats\n   from ..filters import equalizer\n\nNote that relative imports are based on the name of the current module.  Since\nthe name of the main module is always ``\"__main__\"``, modules intended for use\nas the main module of a Python application must always use absolute imports.\n\n\nPackages in Multiple Directories\n--------------------------------\n\nPackages support one more special attribute, :attr:`__path__`.  This is\ninitialized to be a list containing the name of the directory holding the\npackage's :file:`__init__.py` before the code in that file is executed.  This\nvariable can be modified; doing so affects future searches for modules and\nsubpackages contained in the package.\n\nWhile this feature is not often needed, it can be used to extend the set of\nmodules found in a package.\n\n\n.. rubric:: Footnotes\n\n.. [#] In fact function definitions are also 'statements' that are 'executed'; the\n   execution of a module-level function definition enters the function name in\n   the module's global symbol table.\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/whatsnew/2.2.rst": "****************************\n  What's New in Python 2.2\n****************************\n\n:Author: A.M. Kuchling\n\n.. |release| replace:: 1.02\n\n.. $Id: whatsnew22.tex 37315 2004-09-10 19:33:00Z akuchling $\n\n\nIntroduction\n============\n\nThis article explains the new features in Python 2.2.2, released on October 14,\n2002.  Python 2.2.2 is a bugfix release of Python 2.2, originally released on\nDecember 21, 2001.\n\nPython 2.2 can be thought of as the \"cleanup release\".  There are some features\nsuch as generators and iterators that are completely new, but most of the\nchanges, significant and far-reaching though they may be, are aimed at cleaning\nup irregularities and dark corners of the language design.\n\nThis article doesn't attempt to provide a complete specification of the new\nfeatures, but instead provides a convenient overview.  For full details, you\nshould refer to the documentation for Python 2.2, such as the `Python Library\nReference <https://docs.python.org/2.2/lib/lib.html>`_ and the `Python\nReference Manual <https://docs.python.org/2.2/ref/ref.html>`_.  If you want to\nunderstand the complete implementation and design rationale for a change, refer\nto the PEP for a particular new feature.\n\n\n.. see also, now defunct\n\n   http://www.unixreview.com/documents/s=1356/urm0109h/0109h.htm\n      \"What's So Special About Python 2.2?\" is also about the new 2.2 features, and\n      was written by Cameron Laird and Kathryn Soraiz.\n\n.. ======================================================================\n\n\nPEPs 252 and 253: Type and Class Changes\n========================================\n\nThe largest and most far-reaching changes in Python 2.2 are to Python's model of\nobjects and classes.  The changes should be backward compatible, so it's likely\nthat your code will continue to run unchanged, but the changes provide some\namazing new capabilities. Before beginning this, the longest and most\ncomplicated section of this article, I'll provide an overview of the changes and\noffer some comments.\n\nA long time ago I wrote a Web page listing flaws in Python's design.  One of the\nmost significant flaws was that it's impossible to subclass Python types\nimplemented in C.  In particular, it's not possible to subclass built-in types,\nso you can't just subclass, say, lists in order to add a single useful method to\nthem. The :mod:`UserList` module provides a class that supports all of the\nmethods of lists and that can be subclassed further, but there's lots of C code\nthat expects a regular Python list and won't accept a :class:`UserList`\ninstance.\n\nPython 2.2 fixes this, and in the process adds some exciting new capabilities.\nA brief summary:\n\n* You can subclass built-in types such as lists and even integers, and your\n  subclasses should work in every place that requires the original type.\n\n* It's now possible to define static and class methods, in addition to the\n  instance methods available in previous versions of Python.\n\n* It's also possible to automatically call methods on accessing or setting an\n  instance attribute by using a new mechanism called :dfn:`properties`.  Many uses\n  of :meth:`__getattr__` can be rewritten to use properties instead, making the\n  resulting code simpler and faster.  As a small side benefit, attributes can now\n  have docstrings, too.\n\n* The list of legal attributes for an instance can be limited to a particular\n  set using :dfn:`slots`, making it possible to safeguard against typos and\n  perhaps make more optimizations possible in future versions of Python.\n\nSome users have voiced concern about all these changes.  Sure, they say, the new\nfeatures are neat and lend themselves to all sorts of tricks that weren't\npossible in previous versions of Python, but they also make the language more\ncomplicated.  Some people have said that they've always recommended Python for\nits simplicity, and feel that its simplicity is being lost.\n\nPersonally, I think there's no need to worry.  Many of the new features are\nquite esoteric, and you can write a lot of Python code without ever needed to be\naware of them.  Writing a simple class is no more difficult than it ever was, so\nyou don't need to bother learning or teaching them unless they're actually\nneeded.  Some very complicated tasks that were previously only possible from C\nwill now be possible in pure Python, and to my mind that's all for the better.\n\nI'm not going to attempt to cover every single corner case and small change that\nwere required to make the new features work.  Instead this section will paint\nonly the broad strokes.  See section :ref:`sect-rellinks`, \"Related Links\", for\nfurther sources of information about Python 2.2's new object model.\n\n\nOld and New Classes\n-------------------\n\nFirst, you should know that Python 2.2 really has two kinds of classes: classic\nor old-style classes, and new-style classes.  The old-style class model is\nexactly the same as the class model in earlier versions of Python.  All the new\nfeatures described in this section apply only to new-style classes. This\ndivergence isn't intended to last forever; eventually old-style classes will be\ndropped, possibly in Python 3.0.\n\nSo how do you define a new-style class?  You do it by subclassing an existing\nnew-style class.  Most of Python's built-in types, such as integers, lists,\ndictionaries, and even files, are new-style classes now.  A new-style class\nnamed :class:`object`, the base class for all built-in types, has also been\nadded so if no built-in type is suitable, you can just subclass\n:class:`object`::\n\n   class C(object):\n       def __init__ (self):\n           ...\n       ...\n\nThis means that :keyword:`class` statements that don't have any base classes are\nalways classic classes in Python 2.2.  (Actually you can also change this by\nsetting a module-level variable named :attr:`__metaclass__` --- see :pep:`253`\nfor the details --- but it's easier to just subclass :keyword:`object`.)\n\nThe type objects for the built-in types are available as built-ins, named using\na clever trick.  Python has always had built-in functions named :func:`int`,\n:func:`float`, and :func:`str`.  In 2.2, they aren't functions any more, but\ntype objects that behave as factories when called. ::\n\n   >>> int\n   <type 'int'>\n   >>> int('123')\n   123\n\nTo make the set of types complete, new type objects such as :func:`dict` and\n:func:`file` have been added.  Here's a more interesting example, adding a\n:meth:`lock` method to file objects::\n\n   class LockableFile(file):\n       def lock (self, operation, length=0, start=0, whence=0):\n           import fcntl\n           return fcntl.lockf(self.fileno(), operation,\n                              length, start, whence)\n\nThe now-obsolete :mod:`posixfile` module contained a class that emulated all of\na file object's methods and also added a :meth:`lock` method, but this class\ncouldn't be passed to internal functions that expected a built-in file,\nsomething which is possible with our new :class:`LockableFile`.\n\n\nDescriptors\n-----------\n\nIn previous versions of Python, there was no consistent way to discover what\nattributes and methods were supported by an object. There were some informal\nconventions, such as defining :attr:`__members__` and :attr:`__methods__`\nattributes that were lists of names, but often the author of an extension type\nor a class wouldn't bother to define them.  You could fall back on inspecting\nthe :attr:`~object.__dict__` of an object, but when class inheritance or an arbitrary\n:meth:`__getattr__` hook were in use this could still be inaccurate.\n\nThe one big idea underlying the new class model is that an API for describing\nthe attributes of an object using :dfn:`descriptors` has been formalized.\nDescriptors specify the value of an attribute, stating whether it's a method or\na field.  With the descriptor API, static methods and class methods become\npossible, as well as more exotic constructs.\n\nAttribute descriptors are objects that live inside class objects, and have a few\nattributes of their own:\n\n* :attr:`~definition.__name__` is the attribute's name.\n\n* :attr:`__doc__` is the attribute's docstring.\n\n* ``__get__(object)`` is a method that retrieves the attribute value from\n  *object*.\n\n* ``__set__(object, value)`` sets the attribute on *object* to *value*.\n\n* ``__delete__(object, value)`` deletes the *value*  attribute of *object*.\n\nFor example, when you write ``obj.x``, the steps that Python actually performs\nare::\n\n   descriptor = obj.__class__.x\n   descriptor.__get__(obj)\n\nFor methods, :meth:`descriptor.__get__` returns a temporary object that's\ncallable, and wraps up the instance and the method to be called on it. This is\nalso why static methods and class methods are now possible; they have\ndescriptors that wrap up just the method, or the method and the class.  As a\nbrief explanation of these new kinds of methods, static methods aren't passed\nthe instance, and therefore resemble regular functions.  Class methods are\npassed the class of the object, but not the object itself.  Static and class\nmethods are defined like this::\n\n   class C(object):\n       def f(arg1, arg2):\n           ...\n       f = staticmethod(f)\n\n       def g(cls, arg1, arg2):\n           ...\n       g = classmethod(g)\n\nThe :func:`staticmethod` function takes the function :func:`f`, and returns it\nwrapped up in a descriptor so it can be stored in the class object.  You might\nexpect there to be special syntax for creating such methods (``def static f``,\n``defstatic f()``, or something like that) but no such syntax has been defined\nyet; that's been left for future versions of Python.\n\nMore new features, such as slots and properties, are also implemented as new\nkinds of descriptors, and it's not difficult to write a descriptor class that\ndoes something novel.  For example, it would be possible to write a descriptor\nclass that made it possible to write Eiffel-style preconditions and\npostconditions for a method.  A class that used this feature might be defined\nlike this::\n\n   from eiffel import eiffelmethod\n\n   class C(object):\n       def f(self, arg1, arg2):\n           # The actual function\n           ...\n       def pre_f(self):\n           # Check preconditions\n           ...\n       def post_f(self):\n           # Check postconditions\n           ...\n\n       f = eiffelmethod(f, pre_f, post_f)\n\nNote that a person using the new :func:`eiffelmethod` doesn't have to understand\nanything about descriptors.  This is why I think the new features don't increase\nthe basic complexity of the language. There will be a few wizards who need to\nknow about it in order to write :func:`eiffelmethod` or the ZODB or whatever,\nbut most users will just write code on top of the resulting libraries and ignore\nthe implementation details.\n\n\nMultiple Inheritance: The Diamond Rule\n--------------------------------------\n\nMultiple inheritance has also been made more useful through changing the rules\nunder which names are resolved.  Consider this set of classes (diagram taken\nfrom :pep:`253` by Guido van Rossum)::\n\n         class A:\n           ^ ^  def save(self): ...\n          /   \\\n         /     \\\n        /       \\\n       /         \\\n   class B     class C:\n       ^         ^  def save(self): ...\n        \\       /\n         \\     /\n          \\   /\n           \\ /\n         class D\n\nThe lookup rule for classic classes is simple but not very smart; the base\nclasses are searched depth-first, going from left to right.  A reference to\n:meth:`D.save` will search the classes :class:`D`, :class:`B`, and then\n:class:`A`, where :meth:`save` would be found and returned.  :meth:`C.save`\nwould never be found at all.  This is bad, because if :class:`C`'s :meth:`save`\nmethod is saving some internal state specific to :class:`C`, not calling it will\nresult in that state never getting saved.\n\nNew-style classes follow a different algorithm that's a bit more complicated to\nexplain, but does the right thing in this situation. (Note that Python 2.3\nchanges this algorithm to one that produces the same results in most cases, but\nproduces more useful results for really complicated inheritance graphs.)\n\n#. List all the base classes, following the classic lookup rule and include a\n   class multiple times if it's visited repeatedly.  In the above example, the list\n   of visited classes is [:class:`D`, :class:`B`, :class:`A`, :class:`C`,\n   :class:`A`].\n\n#. Scan the list for duplicated classes.  If any are found, remove all but one\n   occurrence, leaving the *last* one in the list.  In the above example, the list\n   becomes [:class:`D`, :class:`B`, :class:`C`, :class:`A`] after dropping\n   duplicates.\n\nFollowing this rule, referring to :meth:`D.save` will return :meth:`C.save`,\nwhich is the behaviour we're after.  This lookup rule is the same as the one\nfollowed by Common Lisp.  A new built-in function, :func:`super`, provides a way\nto get at a class's superclasses without having to reimplement Python's\nalgorithm. The most commonly used form will be  ``super(class, obj)``, which\nreturns  a bound superclass object (not the actual class object).  This form\nwill be used in methods to call a method in the superclass; for example,\n:class:`D`'s :meth:`save` method would look like this::\n\n   class D (B,C):\n       def save (self):\n           # Call superclass .save()\n           super(D, self).save()\n           # Save D's private information here\n           ...\n\n:func:`super` can also return unbound superclass objects when called as\n``super(class)`` or ``super(class1, class2)``, but this probably won't\noften be useful.\n\n\nAttribute Access\n----------------\n\nA fair number of sophisticated Python classes define hooks for attribute access\nusing :meth:`__getattr__`; most commonly this is done for convenience, to make\ncode more readable by automatically mapping an attribute access such as\n``obj.parent`` into a method call such as ``obj.get_parent``.  Python 2.2 adds\nsome new ways of controlling attribute access.\n\nFirst, ``__getattr__(attr_name)`` is still supported by new-style classes,\nand nothing about it has changed.  As before, it will be called when an attempt\nis made to access ``obj.foo`` and no attribute named ``foo`` is found in the\ninstance's dictionary.\n\nNew-style classes also support a new method,\n``__getattribute__(attr_name)``.  The difference between the two methods is\nthat :meth:`__getattribute__` is *always* called whenever any attribute is\naccessed, while the old :meth:`__getattr__` is only called if ``foo`` isn't\nfound in the instance's dictionary.\n\nHowever, Python 2.2's support for :dfn:`properties` will often be a simpler way\nto trap attribute references.  Writing a :meth:`__getattr__` method is\ncomplicated because to avoid recursion you can't use regular attribute accesses\ninside them, and instead have to mess around with the contents of\n:attr:`~object.__dict__`. :meth:`__getattr__` methods also end up being called by Python\nwhen it checks for other methods such as :meth:`__repr__` or :meth:`__coerce__`,\nand so have to be written with this in mind. Finally, calling a function on\nevery attribute access results in a sizable performance loss.\n\n:class:`property` is a new built-in type that packages up three functions that\nget, set, or delete an attribute, and a docstring.  For example, if you want to\ndefine a :attr:`size` attribute that's computed, but also settable, you could\nwrite::\n\n   class C(object):\n       def get_size (self):\n           result = ... computation ...\n           return result\n       def set_size (self, size):\n           ... compute something based on the size\n           and set internal state appropriately ...\n\n       # Define a property.  The 'delete this attribute'\n       # method is defined as None, so the attribute\n       # can't be deleted.\n       size = property(get_size, set_size,\n                       None,\n                       \"Storage size of this instance\")\n\nThat is certainly clearer and easier to write than a pair of\n:meth:`__getattr__`/:meth:`__setattr__` methods that check for the :attr:`size`\nattribute and handle it specially while retrieving all other attributes from the\ninstance's :attr:`~object.__dict__`.  Accesses to :attr:`size` are also the only ones\nwhich have to perform the work of calling a function, so references to other\nattributes run at their usual speed.\n\nFinally, it's possible to constrain the list of attributes that can be\nreferenced on an object using the new :attr:`~object.__slots__` class attribute. Python\nobjects are usually very dynamic; at any time it's possible to define a new\nattribute on an instance by just doing ``obj.new_attr=1``.   A new-style class\ncan define a class attribute named :attr:`~object.__slots__` to limit the legal\nattributes  to a particular set of names.  An example will make this clear::\n\n   >>> class C(object):\n   ...     __slots__ = ('template', 'name')\n   ...\n   >>> obj = C()\n   >>> print obj.template\n   None\n   >>> obj.template = 'Test'\n   >>> print obj.template\n   Test\n   >>> obj.newattr = None\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   AttributeError: 'C' object has no attribute 'newattr'\n\nNote how you get an :exc:`AttributeError` on the attempt to assign to an\nattribute not listed in :attr:`~object.__slots__`.\n\n\n.. _sect-rellinks:\n\nRelated Links\n-------------\n\nThis section has just been a quick overview of the new features, giving enough\nof an explanation to start you programming, but many details have been\nsimplified or ignored.  Where should you go to get a more complete picture?\n\nhttps://docs.python.org/dev/howto/descriptor.html is a lengthy tutorial introduction to\nthe descriptor features, written by Guido van Rossum. If my description has\nwhetted your appetite, go read this tutorial next, because it goes into much\nmore detail about the new features while still remaining quite easy to read.\n\nNext, there are two relevant PEPs, :pep:`252` and :pep:`253`.  :pep:`252` is\ntitled \"Making Types Look More Like Classes\", and covers the descriptor API.\n:pep:`253` is titled \"Subtyping Built-in Types\", and describes the changes to\ntype objects that make it possible to subtype built-in objects.  :pep:`253` is\nthe more complicated PEP of the two, and at a few points the necessary\nexplanations of types and meta-types may cause your head to explode.  Both PEPs\nwere written and implemented by Guido van Rossum, with substantial assistance\nfrom the rest of the Zope Corp. team.\n\nFinally, there's the ultimate authority: the source code.  Most of the machinery\nfor the type handling is in :file:`Objects/typeobject.c`, but you should only\nresort to it after all other avenues have been exhausted, including posting a\nquestion to python-list or python-dev.\n\n.. ======================================================================\n\n\nPEP 234: Iterators\n==================\n\nAnother significant addition to 2.2 is an iteration interface at both the C and\nPython levels.  Objects can define how they can be looped over by callers.\n\nIn Python versions up to 2.1, the usual way to make ``for item in obj`` work is\nto define a :meth:`__getitem__` method that looks something like this::\n\n   def __getitem__(self, index):\n       return <next item>\n\n:meth:`__getitem__` is more properly used to define an indexing operation on an\nobject so that you can write ``obj[5]`` to retrieve the sixth element.  It's a\nbit misleading when you're using this only to support :keyword:`for` loops.\nConsider some file-like object that wants to be looped over; the *index*\nparameter is essentially meaningless, as the class probably assumes that a\nseries of :meth:`__getitem__` calls will be made with *index* incrementing by\none each time.  In other words, the presence of the :meth:`__getitem__` method\ndoesn't mean that using ``file[5]``  to randomly access the sixth element will\nwork, though it really should.\n\nIn Python 2.2, iteration can be implemented separately, and :meth:`__getitem__`\nmethods can be limited to classes that really do support random access.  The\nbasic idea of iterators is  simple.  A new built-in function, ``iter(obj)``\nor ``iter(C, sentinel)``, is used to get an iterator. ``iter(obj)`` returns\nan iterator for the object *obj*, while ``iter(C, sentinel)`` returns an\niterator that will invoke the callable object *C* until it returns *sentinel* to\nsignal that the iterator is done.\n\nPython classes can define an :meth:`__iter__` method, which should create and\nreturn a new iterator for the object; if the object is its own iterator, this\nmethod can just return ``self``.  In particular, iterators will usually be their\nown iterators.  Extension types implemented in C can implement a :c:member:`~PyTypeObject.tp_iter`\nfunction in order to return an iterator, and extension types that want to behave\nas iterators can define a :c:member:`~PyTypeObject.tp_iternext` function.\n\nSo, after all this, what do iterators actually do?  They have one required\nmethod, :meth:`next`, which takes no arguments and returns the next value.  When\nthere are no more values to be returned, calling :meth:`next` should raise the\n:exc:`StopIteration` exception. ::\n\n   >>> L = [1,2,3]\n   >>> i = iter(L)\n   >>> print i\n   <iterator object at 0x8116870>\n   >>> i.next()\n   1\n   >>> i.next()\n   2\n   >>> i.next()\n   3\n   >>> i.next()\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   StopIteration\n   >>>\n\nIn 2.2, Python's :keyword:`for` statement no longer expects a sequence; it\nexpects something for which :func:`iter` will return an iterator. For backward\ncompatibility and convenience, an iterator is automatically constructed for\nsequences that don't implement :meth:`__iter__` or a :c:member:`~PyTypeObject.tp_iter` slot, so\n``for i in [1,2,3]`` will still work.  Wherever the Python interpreter loops\nover a sequence, it's been changed to use the iterator protocol.  This means you\ncan do things like this::\n\n   >>> L = [1,2,3]\n   >>> i = iter(L)\n   >>> a,b,c = i\n   >>> a,b,c\n   (1, 2, 3)\n\nIterator support has been added to some of Python's basic types.   Calling\n:func:`iter` on a dictionary will return an iterator which loops over its keys::\n\n   >>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,\n   ...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\n   >>> for key in m: print key, m[key]\n   ...\n   Mar 3\n   Feb 2\n   Aug 8\n   Sep 9\n   May 5\n   Jun 6\n   Jul 7\n   Jan 1\n   Apr 4\n   Nov 11\n   Dec 12\n   Oct 10\n\nThat's just the default behaviour.  If you want to iterate over keys, values, or\nkey/value pairs, you can explicitly call the :meth:`iterkeys`,\n:meth:`itervalues`, or :meth:`iteritems` methods to get an appropriate iterator.\nIn a minor related change, the :keyword:`in` operator now works on dictionaries,\nso ``key in dict`` is now equivalent to ``dict.has_key(key)``.\n\nFiles also provide an iterator, which calls the :meth:`readline` method until\nthere are no more lines in the file.  This means you can now read each line of a\nfile using code like this::\n\n   for line in file:\n       # do something for each line\n       ...\n\nNote that you can only go forward in an iterator; there's no way to get the\nprevious element, reset the iterator, or make a copy of it. An iterator object\ncould provide such additional capabilities, but the iterator protocol only\nrequires a :meth:`next` method.\n\n\n.. seealso::\n\n   :pep:`234` - Iterators\n      Written by Ka-Ping Yee and GvR; implemented  by the Python Labs crew, mostly by\n      GvR and Tim Peters.\n\n.. ======================================================================\n\n\nPEP 255: Simple Generators\n==========================\n\nGenerators are another new feature, one that interacts with the introduction of\niterators.\n\nYou're doubtless familiar with how function calls work in Python or C.  When you\ncall a function, it gets a private namespace where its local variables are\ncreated.  When the function reaches a :keyword:`return` statement, the local\nvariables are destroyed and the resulting value is returned to the caller.  A\nlater call to the same function will get a fresh new set of local variables.\nBut, what if the local variables weren't thrown away on exiting a function?\nWhat if you could later resume the function where it left off?  This is what\ngenerators provide; they can be thought of as resumable functions.\n\nHere's the simplest example of a generator function::\n\n   def generate_ints(N):\n       for i in range(N):\n           yield i\n\nA new keyword, :keyword:`yield`, was introduced for generators.  Any function\ncontaining a :keyword:`yield` statement is a generator function; this is\ndetected by Python's bytecode compiler which compiles the function specially as\na result.  Because a new keyword was introduced, generators must be explicitly\nenabled in a module by including a ``from __future__ import generators``\nstatement near the top of the module's source code.  In Python 2.3 this\nstatement will become unnecessary.\n\nWhen you call a generator function, it doesn't return a single value; instead it\nreturns a generator object that supports the iterator protocol.  On executing\nthe :keyword:`yield` statement, the generator outputs the value of ``i``,\nsimilar to a :keyword:`return` statement.  The big difference between\n:keyword:`yield` and a :keyword:`return` statement is that on reaching a\n:keyword:`yield` the generator's state of execution is suspended and local\nvariables are preserved.  On the next call to the generator's ``next()`` method,\nthe function will resume executing immediately after the :keyword:`yield`\nstatement.  (For complicated reasons, the :keyword:`yield` statement isn't\nallowed inside the :keyword:`try` block of a :keyword:`try`...\\\n:keyword:`finally` statement; read :pep:`255` for a full explanation of the\ninteraction between :keyword:`yield` and exceptions.)\n\nHere's a sample usage of the :func:`generate_ints` generator::\n\n   >>> gen = generate_ints(3)\n   >>> gen\n   <generator object at 0x8117f90>\n   >>> gen.next()\n   0\n   >>> gen.next()\n   1\n   >>> gen.next()\n   2\n   >>> gen.next()\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n     File \"<stdin>\", line 2, in generate_ints\n   StopIteration\n\nYou could equally write ``for i in generate_ints(5)``, or ``a,b,c =\ngenerate_ints(3)``.\n\nInside a generator function, the :keyword:`return` statement can only be used\nwithout a value, and signals the end of the procession of values; afterwards the\ngenerator cannot return any further values. :keyword:`return` with a value, such\nas ``return 5``, is a syntax error inside a generator function.  The end of the\ngenerator's results can also be indicated by raising :exc:`StopIteration`\nmanually, or by just letting the flow of execution fall off the bottom of the\nfunction.\n\nYou could achieve the effect of generators manually by writing your own class\nand storing all the local variables of the generator as instance variables.  For\nexample, returning a list of integers could be done by setting ``self.count`` to\n0, and having the :meth:`next` method increment ``self.count`` and return it.\nHowever, for a moderately complicated generator, writing a corresponding class\nwould be much messier. :file:`Lib/test/test_generators.py` contains a number of\nmore interesting examples.  The simplest one implements an in-order traversal of\na tree using generators recursively. ::\n\n   # A recursive generator that generates Tree leaves in in-order.\n   def inorder(t):\n       if t:\n           for x in inorder(t.left):\n               yield x\n           yield t.label\n           for x in inorder(t.right):\n               yield x\n\nTwo other examples in :file:`Lib/test/test_generators.py` produce solutions for\nthe N-Queens problem (placing $N$ queens on an $NxN$ chess board so that no\nqueen threatens another) and the Knight's Tour (a route that takes a knight to\nevery square of an $NxN$ chessboard without visiting any square twice).\n\nThe idea of generators comes from other programming languages, especially Icon\n(https://www.cs.arizona.edu/icon/), where the idea of generators is central.  In\nIcon, every expression and function call behaves like a generator.  One example\nfrom \"An Overview of the Icon Programming Language\" at\nhttps://www.cs.arizona.edu/icon/docs/ipd266.htm gives an idea of what this looks\nlike::\n\n   sentence := \"Store it in the neighboring harbor\"\n   if (i := find(\"or\", sentence)) > 5 then write(i)\n\nIn Icon the :func:`find` function returns the indexes at which the substring\n\"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i`` is first\nassigned a value of 3, but 3 is less than 5, so the comparison fails, and Icon\nretries it with the second value of 23.  23 is greater than 5, so the comparison\nnow succeeds, and the code prints the value 23 to the screen.\n\nPython doesn't go nearly as far as Icon in adopting generators as a central\nconcept.  Generators are considered a new part of the core Python language, but\nlearning or using them isn't compulsory; if they don't solve any problems that\nyou have, feel free to ignore them. One novel feature of Python's interface as\ncompared to Icon's is that a generator's state is represented as a concrete\nobject (the iterator) that can be passed around to other functions or stored in\na data structure.\n\n\n.. seealso::\n\n   :pep:`255` - Simple Generators\n      Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented mostly\n      by Neil Schemenauer and Tim Peters, with other fixes from the Python Labs crew.\n\n.. ======================================================================\n\n\nPEP 237: Unifying Long Integers and Integers\n============================================\n\nIn recent versions, the distinction between regular integers, which are 32-bit\nvalues on most machines, and long integers, which can be of arbitrary size, was\nbecoming an annoyance.  For example, on platforms that support files larger than\n``2**32`` bytes, the :meth:`tell` method of file objects has to return a long\ninteger. However, there were various bits of Python that expected plain integers\nand would raise an error if a long integer was provided instead.  For example,\nin Python 1.5, only regular integers could be used as a slice index, and\n``'abc'[1L:]`` would raise a :exc:`TypeError` exception with the message 'slice\nindex must be int'.\n\nPython 2.2 will shift values from short to long integers as required. The 'L'\nsuffix is no longer needed to indicate a long integer literal, as now the\ncompiler will choose the appropriate type.  (Using the 'L' suffix will be\ndiscouraged in future 2.x versions of Python, triggering a warning in Python\n2.4, and probably dropped in Python 3.0.)  Many operations that used to raise an\n:exc:`OverflowError` will now return a long integer as their result.  For\nexample::\n\n   >>> 1234567890123\n   1234567890123L\n   >>> 2 ** 64\n   18446744073709551616L\n\nIn most cases, integers and long integers will now be treated identically.  You\ncan still distinguish them with the :func:`type` built-in function, but that's\nrarely needed.\n\n\n.. seealso::\n\n   :pep:`237` - Unifying Long Integers and Integers\n      Written by Moshe Zadka and Guido van Rossum.  Implemented mostly by Guido van\n      Rossum.\n\n.. ======================================================================\n\n\nPEP 238: Changing the Division Operator\n=======================================\n\nThe most controversial change in Python 2.2 heralds the start of an effort to\nfix an old design flaw that's been in Python from the beginning. Currently\nPython's division operator, ``/``, behaves like C's division operator when\npresented with two integer arguments: it returns an integer result that's\ntruncated down when there would be a fractional part.  For example, ``3/2`` is\n1, not 1.5, and ``(-1)/2`` is -1, not -0.5.  This means that the results of\ndivision can vary unexpectedly depending on the type of the two operands and\nbecause Python is dynamically typed, it can be difficult to determine the\npossible types of the operands.\n\n(The controversy is over whether this is *really* a design flaw, and whether\nit's worth breaking existing code to fix this.  It's caused endless discussions\non python-dev, and in July 2001 erupted into a storm of acidly sarcastic\npostings on :newsgroup:`comp.lang.python`. I won't argue for either side here\nand will stick to describing what's  implemented in 2.2.  Read :pep:`238` for a\nsummary of arguments and counter-arguments.)\n\nBecause this change might break code, it's being introduced very gradually.\nPython 2.2 begins the transition, but the switch won't be complete until Python\n3.0.\n\nFirst, I'll borrow some terminology from :pep:`238`.  \"True division\" is the\ndivision that most non-programmers are familiar with: 3/2 is 1.5, 1/4 is 0.25,\nand so forth.  \"Floor division\" is what Python's ``/`` operator currently does\nwhen given integer operands; the result is the floor of the value returned by\ntrue division.  \"Classic division\" is the current mixed behaviour of ``/``; it\nreturns the result of floor division when the operands are integers, and returns\nthe result of true division when one of the operands is a floating-point number.\n\nHere are the changes 2.2 introduces:\n\n* A new operator, ``//``, is the floor division operator. (Yes, we know it looks\n  like C++'s comment symbol.)  ``//`` *always* performs floor division no matter\n  what the types of its operands are, so ``1 // 2`` is 0 and ``1.0 // 2.0`` is\n  also 0.0.\n\n  ``//`` is always available in Python 2.2; you don't need to enable it using a\n  ``__future__`` statement.\n\n* By including a ``from __future__ import division`` in a module, the ``/``\n  operator will be changed to return the result of true division, so ``1/2`` is\n  0.5.  Without the ``__future__`` statement, ``/`` still means classic division.\n  The default meaning of ``/`` will not change until Python 3.0.\n\n* Classes can define methods called :meth:`__truediv__` and :meth:`__floordiv__`\n  to overload the two division operators.  At the C level, there are also slots in\n  the :c:type:`PyNumberMethods` structure so extension types can define the two\n  operators.\n\n* Python 2.2 supports some command-line arguments for testing whether code will\n  work with the changed division semantics.  Running python with :option:`!-Q\n  warn` will cause a warning to be issued whenever division is applied to two\n  integers.  You can use this to find code that's affected by the change and fix\n  it.  By default, Python 2.2 will simply perform classic division without a\n  warning; the warning will be turned on by default in Python 2.3.\n\n\n.. seealso::\n\n   :pep:`238` - Changing the Division Operator\n      Written by Moshe Zadka and  Guido van Rossum.  Implemented by Guido van Rossum..\n\n.. ======================================================================\n\n\nUnicode Changes\n===============\n\nPython's Unicode support has been enhanced a bit in 2.2.  Unicode strings are\nusually stored as UCS-2, as 16-bit unsigned integers. Python 2.2 can also be\ncompiled to use UCS-4, 32-bit unsigned integers, as its internal encoding by\nsupplying :option:`!--enable-unicode=ucs4` to the configure script.   (It's also\npossible to specify :option:`!--disable-unicode` to completely disable Unicode\nsupport.)\n\nWhen built to use UCS-4 (a \"wide Python\"), the interpreter can natively handle\nUnicode characters from U+000000 to U+110000, so the range of legal values for\nthe :func:`unichr` function is expanded accordingly.  Using an interpreter\ncompiled to use UCS-2 (a \"narrow Python\"), values greater than 65535 will still\ncause :func:`unichr` to raise a :exc:`ValueError` exception. This is all\ndescribed in :pep:`261`, \"Support for 'wide' Unicode characters\"; consult it for\nfurther details.\n\nAnother change is simpler to explain. Since their introduction, Unicode strings\nhave supported an :meth:`encode` method to convert the string to a selected\nencoding such as UTF-8 or Latin-1.  A symmetric ``decode([*encoding*])``\nmethod has been added to 8-bit strings (though not to Unicode strings) in 2.2.\n:meth:`decode` assumes that the string is in the specified encoding and decodes\nit, returning whatever is returned by the codec.\n\nUsing this new feature, codecs have been added for tasks not directly related to\nUnicode.  For example, codecs have been added for uu-encoding, MIME's base64\nencoding, and compression with the :mod:`zlib` module::\n\n   >>> s = \"\"\"Here is a lengthy piece of redundant, overly verbose,\n   ... and repetitive text.\n   ... \"\"\"\n   >>> data = s.encode('zlib')\n   >>> data\n   'x\\x9c\\r\\xc9\\xc1\\r\\x80 \\x10\\x04\\xc0?Ul...'\n   >>> data.decode('zlib')\n   'Here is a lengthy piece of redundant, overly verbose,\\nand repetitive text.\\n'\n   >>> print s.encode('uu')\n   begin 666 <data>\n   M2&5R92!I<R!A(&QE;F=T:'D@<&EE8V4@;V8@<F5D=6YD86YT+\"!O=F5R;'D@\n   >=F5R8F]S92P*86YD(')E<&5T:71I=F4@=&5X=\"X*\n\n   end\n   >>> \"sheesh\".encode('rot-13')\n   'furrfu'\n\nTo convert a class instance to Unicode, a :meth:`__unicode__` method can be\ndefined by a class, analogous to :meth:`__str__`.\n\n:meth:`encode`, :meth:`decode`, and :meth:`__unicode__` were implemented by\nMarc-Andr\u00e9 Lemburg.  The changes to support using UCS-4 internally were\nimplemented by Fredrik Lundh and Martin von L\u00f6wis.\n\n\n.. seealso::\n\n   :pep:`261` - Support for 'wide' Unicode characters\n      Written by Paul Prescod.\n\n.. ======================================================================\n\n\nPEP 227: Nested Scopes\n======================\n\nIn Python 2.1, statically nested scopes were added as an optional feature, to be\nenabled by a ``from __future__ import nested_scopes`` directive.  In 2.2 nested\nscopes no longer need to be specially enabled, and are now always present.  The\nrest of this section is a copy of the description of nested scopes from my\n\"What's New in Python 2.1\" document; if you read it when 2.1 came out, you can\nskip the rest of this section.\n\nThe largest change introduced in Python 2.1, and made complete in 2.2, is to\nPython's scoping rules.  In Python 2.0, at any given time there are at most\nthree namespaces used to look up variable names: local, module-level, and the\nbuilt-in namespace.  This often surprised people because it didn't match their\nintuitive expectations.  For example, a nested recursive function definition\ndoesn't work::\n\n   def f():\n       ...\n       def g(value):\n           ...\n           return g(value-1) + 1\n       ...\n\nThe function :func:`g` will always raise a :exc:`NameError` exception, because\nthe binding of the name ``g`` isn't in either its local namespace or in the\nmodule-level namespace.  This isn't much of a problem in practice (how often do\nyou recursively define interior functions like this?), but this also made using\nthe :keyword:`lambda` statement clumsier, and this was a problem in practice.\nIn code which uses :keyword:`lambda` you can often find local variables being\ncopied by passing them as the default values of arguments. ::\n\n   def find(self, name):\n       \"Return list of any entries equal to 'name'\"\n       L = filter(lambda x, name=name: x == name,\n                  self.list_attribute)\n       return L\n\nThe readability of Python code written in a strongly functional style suffers\ngreatly as a result.\n\nThe most significant change to Python 2.2 is that static scoping has been added\nto the language to fix this problem.  As a first effect, the ``name=name``\ndefault argument is now unnecessary in the above example.  Put simply, when a\ngiven variable name is not assigned a value within a function (by an assignment,\nor the :keyword:`def`, :keyword:`class`, or :keyword:`import` statements),\nreferences to the variable will be looked up in the local namespace of the\nenclosing scope.  A more detailed explanation of the rules, and a dissection of\nthe implementation, can be found in the PEP.\n\nThis change may cause some compatibility problems for code where the same\nvariable name is used both at the module level and as a local variable within a\nfunction that contains further function definitions. This seems rather unlikely\nthough, since such code would have been pretty confusing to read in the first\nplace.\n\nOne side effect of the change is that the ``from module import *`` and\n``exec`` statements have been made illegal inside a function scope under\ncertain conditions.  The Python reference manual has said all along that ``from\nmodule import *`` is only legal at the top level of a module, but the CPython\ninterpreter has never enforced this before.  As part of the implementation of\nnested scopes, the compiler which turns Python source into bytecodes has to\ngenerate different code to access variables in a containing scope.  ``from\nmodule import *`` and ``exec`` make it impossible for the compiler to\nfigure this out, because they add names to the local namespace that are\nunknowable at compile time. Therefore, if a function contains function\ndefinitions or :keyword:`lambda` expressions with free variables, the compiler\nwill flag this by raising a :exc:`SyntaxError` exception.\n\nTo make the preceding explanation a bit clearer, here's an example::\n\n   x = 1\n   def f():\n       # The next line is a syntax error\n       exec 'x=2'\n       def g():\n           return x\n\nLine 4 containing the ``exec`` statement is a syntax error, since\n``exec`` would define a new local variable named ``x`` whose value should\nbe accessed by :func:`g`.\n\nThis shouldn't be much of a limitation, since ``exec`` is rarely used in\nmost Python code (and when it is used, it's often a sign of a poor design\nanyway).\n\n\n.. seealso::\n\n   :pep:`227` - Statically Nested Scopes\n      Written and implemented by Jeremy Hylton.\n\n.. ======================================================================\n\n\nNew and Improved Modules\n========================\n\n* The :mod:`xmlrpclib` module was contributed to the standard library by Fredrik\n  Lundh, providing support for writing XML-RPC clients.  XML-RPC is a simple\n  remote procedure call protocol built on top of HTTP and XML. For example, the\n  following snippet retrieves a list of RSS channels from the O'Reilly Network,\n  and then  lists the recent headlines for one channel::\n\n     import xmlrpclib\n     s = xmlrpclib.Server(\n           'http://www.oreillynet.com/meerkat/xml-rpc/server.php')\n     channels = s.meerkat.getChannels()\n     # channels is a list of dictionaries, like this:\n     # [{'id': 4, 'title': 'Freshmeat Daily News'}\n     #  {'id': 190, 'title': '32Bits Online'},\n     #  {'id': 4549, 'title': '3DGamers'}, ... ]\n\n     # Get the items for one channel\n     items = s.meerkat.getItems( {'channel': 4} )\n\n     # 'items' is another list of dictionaries, like this:\n     # [{'link': 'http://freshmeat.net/releases/52719/',\n     #   'description': 'A utility which converts HTML to XSL FO.',\n     #   'title': 'html2fo 0.3 (Default)'}, ... ]\n\n  The :mod:`SimpleXMLRPCServer` module makes it easy to create straightforward\n  XML-RPC servers.  See http://www.xmlrpc.com/ for more information about XML-RPC.\n\n* The new :mod:`hmac` module implements the HMAC algorithm described by\n  :rfc:`2104`. (Contributed by Gerhard H\u00e4ring.)\n\n* Several functions that originally returned lengthy tuples now return\n  pseudo-sequences that still behave like tuples but also have mnemonic attributes such\n  as memberst_mtime or :attr:`tm_year`. The enhanced functions include\n  :func:`stat`, :func:`fstat`, :func:`statvfs`, and :func:`fstatvfs` in the\n  :mod:`os` module, and :func:`localtime`, :func:`gmtime`, and :func:`strptime` in\n  the :mod:`time` module.\n\n  For example, to obtain a file's size using the old tuples, you'd end up writing\n  something like ``file_size = os.stat(filename)[stat.ST_SIZE]``, but now this can\n  be written more clearly as ``file_size = os.stat(filename).st_size``.\n\n  The original patch for this feature was contributed by Nick Mathewson.\n\n* The Python profiler has been extensively reworked and various errors in its\n  output have been corrected.  (Contributed by Fred L. Drake, Jr. and Tim Peters.)\n\n* The :mod:`socket` module can be compiled to support IPv6; specify the\n  :option:`!--enable-ipv6` option to Python's configure script.  (Contributed by\n  Jun-ichiro \"itojun\" Hagino.)\n\n* Two new format characters were added to the :mod:`struct` module for 64-bit\n  integers on platforms that support the C :c:type:`long long` type.  ``q`` is for\n  a signed 64-bit integer, and ``Q`` is for an unsigned one.  The value is\n  returned in Python's long integer type.  (Contributed by Tim Peters.)\n\n* In the interpreter's interactive mode, there's a new built-in function\n  :func:`help` that uses the :mod:`pydoc` module introduced in Python 2.1 to\n  provide interactive help. ``help(object)`` displays any available help text\n  about *object*.  :func:`help` with no argument puts you in an online help\n  utility, where you can enter the names of functions, classes, or modules to read\n  their help text. (Contributed by Guido van Rossum, using Ka-Ping Yee's\n  :mod:`pydoc` module.)\n\n* Various bugfixes and performance improvements have been made to the SRE engine\n  underlying the :mod:`re` module.  For example, the :func:`re.sub` and\n  :func:`re.split` functions have been rewritten in C.  Another contributed patch\n  speeds up certain Unicode character ranges by a factor of two, and a new\n  :meth:`finditer`  method that returns an iterator over all the non-overlapping\n  matches in  a given string.  (SRE is maintained by Fredrik Lundh.  The\n  BIGCHARSET patch was contributed by Martin von L\u00f6wis.)\n\n* The :mod:`smtplib` module now supports :rfc:`2487`, \"Secure SMTP over TLS\", so\n  it's now possible to encrypt the SMTP traffic between a Python program and the\n  mail transport agent being handed a message.  :mod:`smtplib` also supports SMTP\n  authentication.  (Contributed by Gerhard H\u00e4ring.)\n\n* The :mod:`imaplib` module, maintained by Piers Lauder, has support for several\n  new extensions: the NAMESPACE extension defined in :rfc:`2342`, SORT, GETACL and\n  SETACL.  (Contributed by Anthony Baxter and Michel Pelletier.)\n\n* The :mod:`rfc822` module's parsing of email addresses is now compliant with\n  :rfc:`2822`, an update to :rfc:`822`.  (The module's name is *not* going to be\n  changed to ``rfc2822``.)  A new package, :mod:`email`, has also been added for\n  parsing and generating e-mail messages.  (Contributed by Barry Warsaw, and\n  arising out of his work on Mailman.)\n\n* The :mod:`difflib` module now contains a new :class:`Differ` class for\n  producing human-readable lists of changes (a \"delta\") between two sequences of\n  lines of text.  There are also two generator functions, :func:`ndiff` and\n  :func:`restore`, which respectively return a delta from two sequences, or one of\n  the original sequences from a delta. (Grunt work contributed by David Goodger,\n  from ndiff.py code by Tim Peters who then did the generatorization.)\n\n* New constants :const:`ascii_letters`, :const:`ascii_lowercase`, and\n  :const:`ascii_uppercase` were added to the :mod:`string` module.  There were\n  several modules in the standard library that used :const:`string.letters` to\n  mean the ranges A-Za-z, but that assumption is incorrect when locales are in\n  use, because :const:`string.letters` varies depending on the set of legal\n  characters defined by the current locale.  The buggy modules have all been fixed\n  to use :const:`ascii_letters` instead. (Reported by an unknown person; fixed by\n  Fred L. Drake, Jr.)\n\n* The :mod:`mimetypes` module now makes it easier to use alternative MIME-type\n  databases by the addition of a :class:`MimeTypes` class, which takes a list of\n  filenames to be parsed.  (Contributed by Fred L. Drake, Jr.)\n\n* A :class:`Timer` class was added to the :mod:`threading` module that allows\n  scheduling an activity to happen at some future time.  (Contributed by Itamar\n  Shtull-Trauring.)\n\n.. ======================================================================\n\n\nInterpreter Changes and Fixes\n=============================\n\nSome of the changes only affect people who deal with the Python interpreter at\nthe C level because they're writing Python extension modules, embedding the\ninterpreter, or just hacking on the interpreter itself. If you only write Python\ncode, none of the changes described here will affect you very much.\n\n* Profiling and tracing functions can now be implemented in C, which can operate\n  at much higher speeds than Python-based functions and should reduce the overhead\n  of profiling and tracing.  This  will be of interest to authors of development\n  environments for Python.  Two new C functions were added to Python's API,\n  :c:func:`PyEval_SetProfile` and :c:func:`PyEval_SetTrace`. The existing\n  :func:`sys.setprofile` and :func:`sys.settrace` functions still exist, and have\n  simply been changed to use the new C-level interface.  (Contributed by Fred L.\n  Drake, Jr.)\n\n* Another low-level API, primarily of interest to implementors of Python\n  debuggers and development tools, was added. :c:func:`PyInterpreterState_Head` and\n  :c:func:`PyInterpreterState_Next` let a caller walk through all the existing\n  interpreter objects; :c:func:`PyInterpreterState_ThreadHead` and\n  :c:func:`PyThreadState_Next` allow looping over all the thread states for a given\n  interpreter.  (Contributed by David Beazley.)\n\n* The C-level interface to the garbage collector has been changed to make it\n  easier to write extension types that support garbage collection and to debug\n  misuses of the functions. Various functions have slightly different semantics,\n  so a bunch of functions had to be renamed.  Extensions that use the old API will\n  still compile but will *not* participate in garbage collection, so updating them\n  for 2.2 should be considered fairly high priority.\n\n  To upgrade an extension module to the new API, perform the following steps:\n\n* Rename :c:func:`Py_TPFLAGS_GC` to :c:func:`PyTPFLAGS_HAVE_GC`.\n\n* Use :c:func:`PyObject_GC_New` or :c:func:`PyObject_GC_NewVar` to allocate\n    objects, and :c:func:`PyObject_GC_Del` to deallocate them.\n\n* Rename :c:func:`PyObject_GC_Init` to :c:func:`PyObject_GC_Track` and\n    :c:func:`PyObject_GC_Fini` to :c:func:`PyObject_GC_UnTrack`.\n\n* Remove :c:func:`PyGC_HEAD_SIZE` from object size calculations.\n\n* Remove calls to :c:func:`PyObject_AS_GC` and :c:func:`PyObject_FROM_GC`.\n\n* A new ``et`` format sequence was added to :c:func:`PyArg_ParseTuple`; ``et``\n  takes both a parameter and an encoding name, and converts the parameter to the\n  given encoding if the parameter turns out to be a Unicode string, or leaves it\n  alone if it's an 8-bit string, assuming it to already be in the desired\n  encoding.  This differs from the ``es`` format character, which assumes that\n  8-bit strings are in Python's default ASCII encoding and converts them to the\n  specified new encoding. (Contributed by M.-A. Lemburg, and used for the MBCS\n  support on Windows described in the following section.)\n\n* A different argument parsing function, :c:func:`PyArg_UnpackTuple`, has been\n  added that's simpler and presumably faster.  Instead of specifying a format\n  string, the caller simply gives the minimum and maximum number of arguments\n  expected, and a set of pointers to :c:type:`PyObject\\*` variables that will be\n  filled in with argument values.\n\n* Two new flags :const:`METH_NOARGS` and :const:`METH_O` are available in method\n  definition tables to simplify implementation of methods with no arguments or a\n  single untyped argument. Calling such methods is more efficient than calling a\n  corresponding method that uses :const:`METH_VARARGS`.  Also, the old\n  :const:`METH_OLDARGS` style of writing C methods is  now officially deprecated.\n\n* Two new wrapper functions, :c:func:`PyOS_snprintf` and :c:func:`PyOS_vsnprintf`\n  were added to provide  cross-platform implementations for the relatively new\n  :c:func:`snprintf` and :c:func:`vsnprintf` C lib APIs. In contrast to the standard\n  :c:func:`sprintf` and :c:func:`vsprintf` functions, the Python versions check the\n  bounds of the buffer used to protect against buffer overruns. (Contributed by\n  M.-A. Lemburg.)\n\n* The :c:func:`_PyTuple_Resize` function has lost an unused parameter, so now it\n  takes 2 parameters instead of 3.  The third argument was never used, and can\n  simply be discarded when porting code from earlier versions to Python 2.2.\n\n.. ======================================================================\n\n\nOther Changes and Fixes\n=======================\n\nAs usual there were a bunch of other improvements and bugfixes scattered\nthroughout the source tree.  A search through the CVS change logs finds there\nwere 527 patches applied and 683 bugs fixed between Python 2.1 and 2.2; 2.2.1\napplied 139 patches and fixed 143 bugs; 2.2.2 applied 106 patches and fixed 82\nbugs.  These figures are likely to be underestimates.\n\nSome of the more notable changes are:\n\n* The code for the MacOS port for Python, maintained by Jack Jansen, is now kept\n  in the main Python CVS tree, and many changes have been made to support MacOS X.\n\n  The most significant change is the ability to build Python as a framework,\n  enabled by supplying the :option:`!--enable-framework` option to the configure\n  script when compiling Python.  According to Jack Jansen, \"This installs a\n  self-contained Python installation plus the OS X framework \"glue\" into\n  :file:`/Library/Frameworks/Python.framework` (or another location of choice).\n  For now there is little immediate added benefit to this (actually, there is the\n  disadvantage that you have to change your PATH to be able to find Python), but\n  it is the basis for creating a full-blown Python application, porting the\n  MacPython IDE, possibly using Python as a standard OSA scripting language and\n  much more.\"\n\n  Most of the MacPython toolbox modules, which interface to MacOS APIs such as\n  windowing, QuickTime, scripting, etc. have been ported to OS X, but they've been\n  left commented out in :file:`setup.py`.  People who want to experiment with\n  these modules can uncomment them manually.\n\n  .. Jack's original comments:\n     The main change is the possibility to build Python as a\n     framework. This installs a self-contained Python installation plus the\n     OSX framework \"glue\" into /Library/Frameworks/Python.framework (or\n     another location of choice). For now there is little immediate added\n     benefit to this (actually, there is the disadvantage that you have to\n     change your PATH to be able to find Python), but it is the basis for\n     creating a fullblown Python application, porting the MacPython IDE,\n     possibly using Python as a standard OSA scripting language and much\n     more. You enable this with \"configure --enable-framework\".\n     The other change is that most MacPython toolbox modules, which\n     interface to all the MacOS APIs such as windowing, quicktime,\n     scripting, etc. have been ported. Again, most of these are not of\n     immediate use, as they need a full application to be really useful, so\n     they have been commented out in setup.py. People wanting to experiment\n     can uncomment them. Gestalt and Internet Config modules are enabled by\n     default.\n\n* Keyword arguments passed to built-in functions that don't take them now cause a\n  :exc:`TypeError` exception to be raised, with the message \"*function* takes no\n  keyword arguments\".\n\n* Weak references, added in Python 2.1 as an extension module, are now part of\n  the core because they're used in the implementation of new-style classes.  The\n  :exc:`ReferenceError` exception has therefore moved from the :mod:`weakref`\n  module to become a built-in exception.\n\n* A new script, :file:`Tools/scripts/cleanfuture.py` by Tim Peters,\n  automatically removes obsolete ``__future__`` statements from Python source\n  code.\n\n* An additional *flags* argument has been added to the built-in function\n  :func:`compile`, so the behaviour of ``__future__`` statements can now be\n  correctly observed in simulated shells, such as those presented by IDLE and\n  other development environments.  This is described in :pep:`264`. (Contributed\n  by Michael Hudson.)\n\n* The new license introduced with Python 1.6 wasn't GPL-compatible.  This is\n  fixed by some minor textual changes to the 2.2 license, so it's now legal to\n  embed Python inside a GPLed program again.  Note that Python itself is not\n  GPLed, but instead is under a license that's essentially equivalent to the BSD\n  license, same as it always was.  The license changes were also applied to the\n  Python 2.0.1 and 2.1.1 releases.\n\n* When presented with a Unicode filename on Windows, Python will now convert it\n  to an MBCS encoded string, as used by the Microsoft file APIs.  As MBCS is\n  explicitly used by the file APIs, Python's choice of ASCII as the default\n  encoding turns out to be an annoyance.  On Unix, the locale's character set is\n  used if ``locale.nl_langinfo(CODESET)`` is available.  (Windows support was\n  contributed by Mark Hammond with assistance from Marc-Andr\u00e9 Lemburg. Unix\n  support was added by Martin von L\u00f6wis.)\n\n* Large file support is now enabled on Windows.  (Contributed by Tim Peters.)\n\n* The :file:`Tools/scripts/ftpmirror.py` script now parses a :file:`.netrc`\n  file, if you have one. (Contributed by Mike Romberg.)\n\n* Some features of the object returned by the :func:`xrange` function are now\n  deprecated, and trigger warnings when they're accessed; they'll disappear in\n  Python 2.3. :class:`xrange` objects tried to pretend they were full sequence\n  types by supporting slicing, sequence multiplication, and the :keyword:`in`\n  operator, but these features were rarely used and therefore buggy.  The\n  :meth:`tolist` method and the :attr:`start`, :attr:`stop`, and :attr:`step`\n  attributes are also being deprecated.  At the C level, the fourth argument to\n  the :c:func:`PyRange_New` function, ``repeat``, has also been deprecated.\n\n* There were a bunch of patches to the dictionary implementation, mostly to fix\n  potential core dumps if a dictionary contains objects that sneakily changed\n  their hash value, or mutated the dictionary they were contained in. For a while\n  python-dev fell into a gentle rhythm of Michael Hudson finding a case that\n  dumped core, Tim Peters fixing the bug, Michael finding another case, and round\n  and round it went.\n\n* On Windows, Python can now be compiled with Borland C thanks to a number of\n  patches contributed by Stephen Hansen, though the result isn't fully functional\n  yet.  (But this *is* progress...)\n\n* Another Windows enhancement: Wise Solutions generously offered PythonLabs use\n  of their InstallerMaster 8.1 system.  Earlier PythonLabs Windows installers used\n  Wise 5.0a, which was beginning to show its age.  (Packaged up by Tim Peters.)\n\n* Files ending in ``.pyw`` can now be imported on Windows. ``.pyw`` is a\n  Windows-only thing, used to indicate that a script needs to be run using\n  PYTHONW.EXE instead of PYTHON.EXE in order to prevent a DOS console from popping\n  up to display the output.  This patch makes it possible to import such scripts,\n  in case they're also usable as modules.  (Implemented by David Bolen.)\n\n* On platforms where Python uses the C :c:func:`dlopen` function  to load\n  extension modules, it's now possible to set the flags used  by :c:func:`dlopen`\n  using the :func:`sys.getdlopenflags` and :func:`sys.setdlopenflags` functions.\n  (Contributed by Bram Stolk.)\n\n* The :func:`pow` built-in function no longer supports 3 arguments when\n  floating-point numbers are supplied. ``pow(x, y, z)`` returns ``(x**y) % z``,\n  but this is never useful for floating point numbers, and the final result varies\n  unpredictably depending on the platform.  A call such as ``pow(2.0, 8.0, 7.0)``\n  will now raise a :exc:`TypeError` exception.\n\n.. ======================================================================\n\n\nAcknowledgements\n================\n\nThe author would like to thank the following people for offering suggestions,\ncorrections and assistance with various drafts of this article: Fred Bremmer,\nKeith Briggs, Andrew Dalke, Fred L. Drake, Jr., Carel Fellinger, David Goodger,\nMark Hammond, Stephen Hansen, Michael Hudson, Jack Jansen, Marc-Andr\u00e9 Lemburg,\nMartin von L\u00f6wis, Fredrik Lundh, Michael McLay, Nick Mathewson, Paul Moore,\nGustavo Niemeyer, Don O'Donnell, Joonas Paalasma, Tim Peters, Jens Quade, Tom\nReinhardt, Neil Schemenauer, Guido van Rossum, Greg Ward, Edward Welbourne.\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/whatsnew/2.5.rst": "****************************\n  What's New in Python 2.5\n****************************\n\n:Author: A.M. Kuchling\n\n.. |release| replace:: 1.01\n\n.. $Id: whatsnew25.tex 56611 2007-07-29 08:26:10Z georg.brandl $\n.. Fix XXX comments\n\nThis article explains the new features in Python 2.5.  The final release of\nPython 2.5 is scheduled for August 2006; :pep:`356` describes the planned\nrelease schedule.\n\nThe changes in Python 2.5 are an interesting mix of language and library\nimprovements. The library enhancements will be more important to Python's user\ncommunity, I think, because several widely-useful packages were added.  New\nmodules include ElementTree for XML processing (:mod:`xml.etree`),\nthe SQLite database module (:mod:`sqlite`), and the :mod:`ctypes`\nmodule for calling C functions.\n\nThe language changes are of middling significance.  Some pleasant new features\nwere added, but most of them aren't features that you'll use every day.\nConditional expressions were finally added to the language using a novel syntax;\nsee section :ref:`pep-308`.  The new ':keyword:`with`' statement will make\nwriting cleanup code easier (section :ref:`pep-343`).  Values can now be passed\ninto generators (section :ref:`pep-342`).  Imports are now visible as either\nabsolute or relative (section :ref:`pep-328`).  Some corner cases of exception\nhandling are handled better (section :ref:`pep-341`).  All these improvements\nare worthwhile, but they're improvements to one specific language feature or\nanother; none of them are broad modifications to Python's semantics.\n\nAs well as the language and library additions, other improvements and bugfixes\nwere made throughout the source tree.  A search through the SVN change logs\nfinds there were 353 patches applied and 458 bugs fixed between Python 2.4 and\n2.5.  (Both figures are likely to be underestimates.)\n\nThis article doesn't try to be a complete specification of the new features;\ninstead changes are briefly introduced using helpful examples.  For full\ndetails, you should always refer to the documentation for Python 2.5 at\nhttps://docs.python.org. If you want to understand the complete implementation\nand design rationale, refer to the PEP for a particular new feature.\n\nComments, suggestions, and error reports for this document are welcome; please\ne-mail them to the author or open a bug in the Python bug tracker.\n\n.. ======================================================================\n\n\n.. _pep-308:\n\nPEP 308: Conditional Expressions\n================================\n\nFor a long time, people have been requesting a way to write conditional\nexpressions, which are expressions that return value A or value B depending on\nwhether a Boolean value is true or false.  A conditional expression lets you\nwrite a single assignment statement that has the same effect as the following::\n\n   if condition:\n       x = true_value\n   else:\n       x = false_value\n\nThere have been endless tedious discussions of syntax on both python-dev and\ncomp.lang.python.  A vote was even held that found the majority of voters wanted\nconditional expressions in some form, but there was no syntax that was preferred\nby a clear majority. Candidates included C's ``cond ? true_v : false_v``, ``if\ncond then true_v else false_v``, and 16 other variations.\n\nGuido van Rossum eventually chose a surprising syntax::\n\n   x = true_value if condition else false_value\n\nEvaluation is still lazy as in existing Boolean expressions, so the order of\nevaluation jumps around a bit.  The *condition* expression in the middle is\nevaluated first, and the *true_value* expression is evaluated only if the\ncondition was true.  Similarly, the *false_value* expression is only evaluated\nwhen the condition is false.\n\nThis syntax may seem strange and backwards; why does the condition go in the\n*middle* of the expression, and not in the front as in C's ``c ? x : y``?  The\ndecision was checked by applying the new syntax to the modules in the standard\nlibrary and seeing how the resulting code read.  In many cases where a\nconditional expression is used, one value seems to be the 'common case' and one\nvalue is an 'exceptional case', used only on rarer occasions when the condition\nisn't met.  The conditional syntax makes this pattern a bit more obvious::\n\n   contents = ((doc + '\\n') if doc else '')\n\nI read the above statement as meaning \"here *contents* is  usually assigned a\nvalue of ``doc+'\\n'``; sometimes  *doc* is empty, in which special case an empty\nstring is returned.\"   I doubt I will use conditional expressions very often\nwhere there  isn't a clear common and uncommon case.\n\nThere was some discussion of whether the language should require surrounding\nconditional expressions with parentheses.  The decision was made to *not*\nrequire parentheses in the Python language's grammar, but as a matter of style I\nthink you should always use them. Consider these two statements::\n\n   # First version -- no parens\n   level = 1 if logging else 0\n\n   # Second version -- with parens\n   level = (1 if logging else 0)\n\nIn the first version, I think a reader's eye might group the statement into\n'level = 1', 'if logging', 'else 0', and think that the condition decides\nwhether the assignment to *level* is performed.  The second version reads\nbetter, in my opinion, because it makes it clear that the assignment is always\nperformed and the choice is being made between two values.\n\nAnother reason for including the brackets: a few odd combinations of list\ncomprehensions and lambdas could look like incorrect conditional expressions.\nSee :pep:`308` for some examples.  If you put parentheses around your\nconditional expressions, you won't run into this case.\n\n\n.. seealso::\n\n   :pep:`308` - Conditional Expressions\n      PEP written by Guido van Rossum and Raymond D. Hettinger; implemented by Thomas\n      Wouters.\n\n.. ======================================================================\n\n\n.. _pep-309:\n\nPEP 309: Partial Function Application\n=====================================\n\nThe :mod:`functools` module is intended to contain tools for functional-style\nprogramming.\n\nOne useful tool in this module is the :func:`partial` function. For programs\nwritten in a functional style, you'll sometimes want to construct variants of\nexisting functions that have some of the parameters filled in.  Consider a\nPython function ``f(a, b, c)``; you could create a new function ``g(b, c)`` that\nwas equivalent to ``f(1, b, c)``.  This is called \"partial function\napplication\".\n\n:func:`partial` takes the arguments ``(function, arg1, arg2, ... kwarg1=value1,\nkwarg2=value2)``.  The resulting object is callable, so you can just call it to\ninvoke *function* with the filled-in arguments.\n\nHere's a small but realistic example::\n\n   import functools\n\n   def log (message, subsystem):\n       \"Write the contents of 'message' to the specified subsystem.\"\n       print '%s: %s' % (subsystem, message)\n       ...\n\n   server_log = functools.partial(log, subsystem='server')\n   server_log('Unable to open socket')\n\nHere's another example, from a program that uses PyGTK.  Here a context-sensitive\npop-up menu is being constructed dynamically.  The callback provided\nfor the menu option is a partially applied version of the :meth:`open_item`\nmethod, where the first argument has been provided. ::\n\n   ...\n   class Application:\n       def open_item(self, path):\n          ...\n       def init (self):\n           open_func = functools.partial(self.open_item, item_path)\n           popup_menu.append( (\"Open\", open_func, 1) )\n\nAnother function in the :mod:`functools` module is the\n``update_wrapper(wrapper, wrapped)`` function that helps you write\nwell-behaved decorators.  :func:`update_wrapper` copies the name, module, and\ndocstring attribute to a wrapper function so that tracebacks inside the wrapped\nfunction are easier to understand.  For example, you might write::\n\n   def my_decorator(f):\n       def wrapper(*args, **kwds):\n           print 'Calling decorated function'\n           return f(*args, **kwds)\n       functools.update_wrapper(wrapper, f)\n       return wrapper\n\n:func:`wraps` is a decorator that can be used inside your own decorators to copy\nthe wrapped function's information.  An alternate  version of the previous\nexample would be::\n\n   def my_decorator(f):\n       @functools.wraps(f)\n       def wrapper(*args, **kwds):\n           print 'Calling decorated function'\n           return f(*args, **kwds)\n       return wrapper\n\n\n.. seealso::\n\n   :pep:`309` - Partial Function Application\n      PEP proposed and written by Peter Harris; implemented by Hye-Shik Chang and Nick\n      Coghlan, with adaptations by Raymond Hettinger.\n\n.. ======================================================================\n\n\n.. _pep-314:\n\nPEP 314: Metadata for Python Software Packages v1.1\n===================================================\n\nSome simple dependency support was added to Distutils.  The :func:`setup`\nfunction now has ``requires``, ``provides``, and ``obsoletes`` keyword\nparameters.  When you build a source distribution using the ``sdist`` command,\nthe dependency information will be recorded in the :file:`PKG-INFO` file.\n\nAnother new keyword parameter is ``download_url``, which should be set to a URL\nfor the package's source code.  This means it's now possible to look up an entry\nin the package index, determine the dependencies for a package, and download the\nrequired packages. ::\n\n   VERSION = '1.0'\n   setup(name='PyPackage',\n         version=VERSION,\n         requires=['numarray', 'zlib (>=1.1.4)'],\n         obsoletes=['OldPackage']\n         download_url=('http://www.example.com/pypackage/dist/pkg-%s.tar.gz'\n                       % VERSION),\n        )\n\nAnother new enhancement to the Python package index at\nhttps://pypi.python.org is storing source and binary archives for a\npackage.  The new :command:`upload` Distutils command will upload a package to\nthe repository.\n\nBefore a package can be uploaded, you must be able to build a distribution using\nthe :command:`sdist` Distutils command.  Once that works, you can run ``python\nsetup.py upload`` to add your package to the PyPI archive.  Optionally you can\nGPG-sign the package by supplying the :option:`!--sign` and :option:`!--identity`\noptions.\n\nPackage uploading was implemented by Martin von L\u00f6wis and Richard Jones.\n\n\n.. seealso::\n\n   :pep:`314` - Metadata for Python Software Packages v1.1\n      PEP proposed and written by A.M. Kuchling, Richard Jones, and Fred Drake;\n      implemented by Richard Jones and Fred Drake.\n\n.. ======================================================================\n\n\n.. _pep-328:\n\nPEP 328: Absolute and Relative Imports\n======================================\n\nThe simpler part of PEP 328 was implemented in Python 2.4: parentheses could now\nbe used to enclose the names imported from a module using the ``from ... import\n...`` statement, making it easier to import many different names.\n\nThe more complicated part has been implemented in Python 2.5: importing a module\ncan be specified to use absolute or package-relative imports.  The plan is to\nmove toward making absolute imports the default in future versions of Python.\n\nLet's say you have a package directory like this::\n\n   pkg/\n   pkg/__init__.py\n   pkg/main.py\n   pkg/string.py\n\nThis defines a package named :mod:`pkg` containing the :mod:`pkg.main` and\n:mod:`pkg.string` submodules.\n\nConsider the code in the :file:`main.py` module.  What happens if it executes\nthe statement ``import string``?  In Python 2.4 and earlier, it will first look\nin the package's directory to perform a relative import, finds\n:file:`pkg/string.py`, imports the contents of that file as the\n:mod:`pkg.string` module, and that module is bound to the name ``string`` in the\n:mod:`pkg.main` module's namespace.\n\nThat's fine if :mod:`pkg.string` was what you wanted.  But what if you wanted\nPython's standard :mod:`string` module?  There's no clean way to ignore\n:mod:`pkg.string` and look for the standard module; generally you had to look at\nthe contents of ``sys.modules``, which is slightly unclean.    Holger Krekel's\n:mod:`py.std` package provides a tidier way to perform imports from the standard\nlibrary, ``import py; py.std.string.join()``, but that package isn't available\non all Python installations.\n\nReading code which relies on relative imports is also less clear, because a\nreader may be confused about which module, :mod:`string` or :mod:`pkg.string`,\nis intended to be used.  Python users soon learned not to duplicate the names of\nstandard library modules in the names of their packages' submodules, but you\ncan't protect against having your submodule's name being used for a new module\nadded in a future version of Python.\n\nIn Python 2.5, you can switch :keyword:`import`'s behaviour to  absolute imports\nusing a ``from __future__ import absolute_import`` directive.  This absolute-import\nbehaviour will become the default in a future version (probably Python\n2.7).  Once absolute imports  are the default, ``import string`` will always\nfind the standard library's version. It's suggested that users should begin\nusing absolute imports as much as possible, so it's preferable to begin writing\n``from pkg import string`` in your code.\n\nRelative imports are still possible by adding a leading period  to the module\nname when using the ``from ... import`` form::\n\n   # Import names from pkg.string\n   from .string import name1, name2\n   # Import pkg.string\n   from . import string\n\nThis imports the :mod:`string` module relative to the current package, so in\n:mod:`pkg.main` this will import *name1* and *name2* from :mod:`pkg.string`.\nAdditional leading periods perform the relative import starting from the parent\nof the current package.  For example, code in the :mod:`A.B.C` module can do::\n\n   from . import D                 # Imports A.B.D\n   from .. import E                # Imports A.E\n   from ..F import G               # Imports A.F.G\n\nLeading periods cannot be used with the ``import modname``  form of the import\nstatement, only the ``from ... import`` form.\n\n\n.. seealso::\n\n   :pep:`328` - Imports: Multi-Line and Absolute/Relative\n      PEP written by Aahz; implemented by Thomas Wouters.\n\n   https://pylib.readthedocs.org/\n      The py library by Holger Krekel, which contains the :mod:`py.std` package.\n\n.. ======================================================================\n\n\n.. _pep-338:\n\nPEP 338: Executing Modules as Scripts\n=====================================\n\nThe :option:`-m` switch added in Python 2.4 to execute a module as a script\ngained a few more abilities.  Instead of being implemented in C code inside the\nPython interpreter, the switch now uses an implementation in a new module,\n:mod:`runpy`.\n\nThe :mod:`runpy` module implements a more sophisticated import mechanism so that\nit's now possible to run modules in a package such as :mod:`pychecker.checker`.\nThe module also supports alternative import mechanisms such as the\n:mod:`zipimport` module.  This means you can add a .zip archive's path to\n``sys.path`` and then use the :option:`-m` switch to execute code from the\narchive.\n\n\n.. seealso::\n\n   :pep:`338` - Executing modules as scripts\n      PEP written and  implemented by Nick Coghlan.\n\n.. ======================================================================\n\n\n.. _pep-341:\n\nPEP 341: Unified try/except/finally\n===================================\n\nUntil Python 2.5, the :keyword:`try` statement came in two flavours. You could\nuse a :keyword:`finally` block to ensure that code is always executed, or one or\nmore :keyword:`except` blocks to catch  specific exceptions.  You couldn't\ncombine both :keyword:`except` blocks and a :keyword:`finally` block, because\ngenerating the right bytecode for the combined version was complicated and it\nwasn't clear what the semantics of the combined statement should be.\n\nGuido van Rossum spent some time working with Java, which does support the\nequivalent of combining :keyword:`except` blocks and a :keyword:`finally` block,\nand this clarified what the statement should mean.  In Python 2.5, you can now\nwrite::\n\n   try:\n       block-1 ...\n   except Exception1:\n       handler-1 ...\n   except Exception2:\n       handler-2 ...\n   else:\n       else-block\n   finally:\n       final-block\n\nThe code in *block-1* is executed.  If the code raises an exception, the various\n:keyword:`except` blocks are tested: if the exception is of class\n:class:`Exception1`, *handler-1* is executed; otherwise if it's of class\n:class:`Exception2`, *handler-2* is executed, and so forth.  If no exception is\nraised, the *else-block* is executed.\n\nNo matter what happened previously, the *final-block* is executed once the code\nblock is complete and any raised exceptions handled. Even if there's an error in\nan exception handler or the *else-block* and a new exception is raised, the code\nin the *final-block* is still run.\n\n\n.. seealso::\n\n   :pep:`341` - Unifying try-except and try-finally\n      PEP written by Georg Brandl;  implementation by Thomas Lee.\n\n.. ======================================================================\n\n\n.. _pep-342:\n\nPEP 342: New Generator Features\n===============================\n\nPython 2.5 adds a simple way to pass values *into* a generator. As introduced in\nPython 2.3, generators only produce output; once a generator's code was invoked\nto create an iterator, there was no way to pass any new information into the\nfunction when its execution is resumed.  Sometimes the ability to pass in some\ninformation would be useful.  Hackish solutions to this include making the\ngenerator's code look at a global variable and then changing the global\nvariable's value, or passing in some mutable object that callers then modify.\n\nTo refresh your memory of basic generators, here's a simple example::\n\n   def counter (maximum):\n       i = 0\n       while i < maximum:\n           yield i\n           i += 1\n\nWhen you call ``counter(10)``, the result is an iterator that returns the values\nfrom 0 up to 9.  On encountering the :keyword:`yield` statement, the iterator\nreturns the provided value and suspends the function's execution, preserving the\nlocal variables. Execution resumes on the following call to the iterator's\n:meth:`next` method, picking up after the :keyword:`yield` statement.\n\nIn Python 2.3, :keyword:`yield` was a statement; it didn't return any value.  In\n2.5, :keyword:`yield` is now an expression, returning a value that can be\nassigned to a variable or otherwise operated on::\n\n   val = (yield i)\n\nI recommend that you always put parentheses around a :keyword:`yield` expression\nwhen you're doing something with the returned value, as in the above example.\nThe parentheses aren't always necessary, but it's easier to always add them\ninstead of having to remember when they're needed.\n\n(:pep:`342` explains the exact rules, which are that a :keyword:`yield`\\\n-expression must always be parenthesized except when it occurs at the top-level\nexpression on the right-hand side of an assignment.  This means you can write\n``val = yield i`` but have to use parentheses when there's an operation, as in\n``val = (yield i) + 12``.)\n\nValues are sent into a generator by calling its ``send(value)`` method.  The\ngenerator's code is then resumed and the :keyword:`yield` expression returns the\nspecified *value*.  If the regular :meth:`next` method is called, the\n:keyword:`yield` returns :const:`None`.\n\nHere's the previous example, modified to allow changing the value of the\ninternal counter. ::\n\n   def counter (maximum):\n       i = 0\n       while i < maximum:\n           val = (yield i)\n           # If value provided, change counter\n           if val is not None:\n               i = val\n           else:\n               i += 1\n\nAnd here's an example of changing the counter::\n\n   >>> it = counter(10)\n   >>> print it.next()\n   0\n   >>> print it.next()\n   1\n   >>> print it.send(8)\n   8\n   >>> print it.next()\n   9\n   >>> print it.next()\n   Traceback (most recent call last):\n     File \"t.py\", line 15, in ?\n       print it.next()\n   StopIteration\n\n:keyword:`yield` will usually return :const:`None`, so you should always check\nfor this case.  Don't just use its value in expressions unless you're sure that\nthe :meth:`send` method will be the only method used to resume your generator\nfunction.\n\nIn addition to :meth:`send`, there are two other new methods on generators:\n\n* ``throw(type, value=None, traceback=None)`` is used to raise an exception\n  inside the generator; the exception is raised by the :keyword:`yield` expression\n  where the generator's execution is paused.\n\n* :meth:`close` raises a new :exc:`GeneratorExit` exception inside the generator\n  to terminate the iteration.  On receiving this exception, the generator's code\n  must either raise :exc:`GeneratorExit` or :exc:`StopIteration`.  Catching the\n  :exc:`GeneratorExit` exception and returning a value is illegal and will trigger\n  a :exc:`RuntimeError`; if the function raises some other exception, that\n  exception is propagated to the caller.  :meth:`close` will also be called by\n  Python's garbage collector when the generator is garbage-collected.\n\n  If you need to run cleanup code when a :exc:`GeneratorExit` occurs, I suggest\n  using a ``try: ... finally:`` suite instead of  catching :exc:`GeneratorExit`.\n\nThe cumulative effect of these changes is to turn generators from one-way\nproducers of information into both producers and consumers.\n\nGenerators also become *coroutines*, a more generalized form of subroutines.\nSubroutines are entered at one point and exited at another point (the top of the\nfunction, and a :keyword:`return` statement), but coroutines can be entered,\nexited, and resumed at many different points (the :keyword:`yield` statements).\nWe'll have to figure out patterns for using coroutines effectively in Python.\n\nThe addition of the :meth:`close` method has one side effect that isn't obvious.\n:meth:`close` is called when a generator is garbage-collected, so this means the\ngenerator's code gets one last chance to run before the generator is destroyed.\nThis last chance means that ``try...finally`` statements in generators can now\nbe guaranteed to work; the :keyword:`finally` clause will now always get a\nchance to run.  The syntactic restriction that you couldn't mix :keyword:`yield`\nstatements with a ``try...finally`` suite has therefore been removed.  This\nseems like a minor bit of language trivia, but using generators and\n``try...finally`` is actually necessary in order to implement the\n:keyword:`with` statement described by PEP 343.  I'll look at this new statement\nin the following  section.\n\nAnother even more esoteric effect of this change: previously, the\n:attr:`gi_frame` attribute of a generator was always a frame object. It's now\npossible for :attr:`gi_frame` to be ``None`` once the generator has been\nexhausted.\n\n\n.. seealso::\n\n   :pep:`342` - Coroutines via Enhanced Generators\n      PEP written by  Guido van Rossum and Phillip J. Eby; implemented by Phillip J.\n      Eby.  Includes examples of  some fancier uses of generators as coroutines.\n\n      Earlier versions of these features were proposed in  :pep:`288` by Raymond\n      Hettinger and :pep:`325` by Samuele Pedroni.\n\n   https://en.wikipedia.org/wiki/Coroutine\n      The Wikipedia entry for  coroutines.\n\n   http://www.sidhe.org/~dan/blog/archives/000178.html\n      An explanation of coroutines from a Perl point of view, written by Dan Sugalski.\n\n.. ======================================================================\n\n\n.. _pep-343:\n\nPEP 343: The 'with' statement\n=============================\n\nThe ':keyword:`with`' statement clarifies code that previously would use\n``try...finally`` blocks to ensure that clean-up code is executed.  In this\nsection, I'll discuss the statement as it will commonly be used.  In the next\nsection, I'll examine the implementation details and show how to write objects\nfor use with this statement.\n\nThe ':keyword:`with`' statement is a new control-flow structure whose basic\nstructure is::\n\n   with expression [as variable]:\n       with-block\n\nThe expression is evaluated, and it should result in an object that supports the\ncontext management protocol (that is, has :meth:`__enter__` and :meth:`__exit__`\nmethods.\n\nThe object's :meth:`__enter__` is called before *with-block* is executed and\ntherefore can run set-up code. It also may return a value that is bound to the\nname *variable*, if given.  (Note carefully that *variable* is *not* assigned\nthe result of *expression*.)\n\nAfter execution of the *with-block* is finished, the object's :meth:`__exit__`\nmethod is called, even if the block raised an exception, and can therefore run\nclean-up code.\n\nTo enable the statement in Python 2.5, you need to add the following directive\nto your module::\n\n   from __future__ import with_statement\n\nThe statement will always be enabled in Python 2.6.\n\nSome standard Python objects now support the context management protocol and can\nbe used with the ':keyword:`with`' statement. File objects are one example::\n\n   with open('/etc/passwd', 'r') as f:\n       for line in f:\n           print line\n           ... more processing code ...\n\nAfter this statement has executed, the file object in *f* will have been\nautomatically closed, even if the :keyword:`for` loop raised an exception\npart-way through the block.\n\n.. note::\n\n   In this case, *f* is the same object created by :func:`open`, because\n   :meth:`file.__enter__` returns *self*.\n\nThe :mod:`threading` module's locks and condition variables  also support the\n':keyword:`with`' statement::\n\n   lock = threading.Lock()\n   with lock:\n       # Critical section of code\n       ...\n\nThe lock is acquired before the block is executed and always released once  the\nblock is complete.\n\nThe new :func:`localcontext` function in the :mod:`decimal` module makes it easy\nto save and restore the current decimal context, which encapsulates the desired\nprecision and rounding characteristics for computations::\n\n   from decimal import Decimal, Context, localcontext\n\n   # Displays with default precision of 28 digits\n   v = Decimal('578')\n   print v.sqrt()\n\n   with localcontext(Context(prec=16)):\n       # All code in this block uses a precision of 16 digits.\n       # The original context is restored on exiting the block.\n       print v.sqrt()\n\n\n.. _new-25-context-managers:\n\nWriting Context Managers\n------------------------\n\nUnder the hood, the ':keyword:`with`' statement is fairly complicated. Most\npeople will only use ':keyword:`with`' in company with existing objects and\ndon't need to know these details, so you can skip the rest of this section if\nyou like.  Authors of new objects will need to understand the details of the\nunderlying implementation and should keep reading.\n\nA high-level explanation of the context management protocol is:\n\n* The expression is evaluated and should result in an object called a \"context\n  manager\".  The context manager must have :meth:`__enter__` and :meth:`__exit__`\n  methods.\n\n* The context manager's :meth:`__enter__` method is called.  The value returned\n  is assigned to *VAR*.  If no ``'as VAR'`` clause is present, the value is simply\n  discarded.\n\n* The code in *BLOCK* is executed.\n\n* If *BLOCK* raises an exception, the ``__exit__(type, value, traceback)``\n  is called with the exception details, the same values returned by\n  :func:`sys.exc_info`.  The method's return value controls whether the exception\n  is re-raised: any false value re-raises the exception, and ``True`` will result\n  in suppressing it.  You'll only rarely want to suppress the exception, because\n  if you do the author of the code containing the ':keyword:`with`' statement will\n  never realize anything went wrong.\n\n* If *BLOCK* didn't raise an exception,  the :meth:`__exit__` method is still\n  called, but *type*, *value*, and *traceback* are all ``None``.\n\nLet's think through an example.  I won't present detailed code but will only\nsketch the methods necessary for a database that supports transactions.\n\n(For people unfamiliar with database terminology: a set of changes to the\ndatabase are grouped into a transaction.  Transactions can be either committed,\nmeaning that all the changes are written into the database, or rolled back,\nmeaning that the changes are all discarded and the database is unchanged.  See\nany database textbook for more information.)\n\nLet's assume there's an object representing a database connection. Our goal will\nbe to let the user write code like this::\n\n   db_connection = DatabaseConnection()\n   with db_connection as cursor:\n       cursor.execute('insert into ...')\n       cursor.execute('delete from ...')\n       # ... more operations ...\n\nThe transaction should be committed if the code in the block runs flawlessly or\nrolled back if there's an exception. Here's the basic interface for\n:class:`DatabaseConnection` that I'll assume::\n\n   class DatabaseConnection:\n       # Database interface\n       def cursor (self):\n           \"Returns a cursor object and starts a new transaction\"\n       def commit (self):\n           \"Commits current transaction\"\n       def rollback (self):\n           \"Rolls back current transaction\"\n\nThe :meth:`__enter__` method is pretty easy, having only to start a new\ntransaction.  For this application the resulting cursor object would be a useful\nresult, so the method will return it.  The user can then add ``as cursor`` to\ntheir ':keyword:`with`' statement to bind the cursor to a variable name. ::\n\n   class DatabaseConnection:\n       ...\n       def __enter__ (self):\n           # Code to start a new transaction\n           cursor = self.cursor()\n           return cursor\n\nThe :meth:`__exit__` method is the most complicated because it's where most of\nthe work has to be done.  The method has to check if an exception occurred.  If\nthere was no exception, the transaction is committed.  The transaction is rolled\nback if there was an exception.\n\nIn the code below, execution will just fall off the end of the function,\nreturning the default value of ``None``.  ``None`` is false, so the exception\nwill be re-raised automatically.  If you wished, you could be more explicit and\nadd a :keyword:`return` statement at the marked location. ::\n\n   class DatabaseConnection:\n       ...\n       def __exit__ (self, type, value, tb):\n           if tb is None:\n               # No exception, so commit\n               self.commit()\n           else:\n               # Exception occurred, so rollback.\n               self.rollback()\n               # return False\n\n\n.. _contextlibmod:\n\nThe contextlib module\n---------------------\n\nThe new :mod:`contextlib` module provides some functions and a decorator that\nare useful for writing objects for use with the ':keyword:`with`' statement.\n\nThe decorator is called :func:`contextmanager`, and lets you write a single\ngenerator function instead of defining a new class.  The generator should yield\nexactly one value.  The code up to the :keyword:`yield` will be executed as the\n:meth:`__enter__` method, and the value yielded will be the method's return\nvalue that will get bound to the variable in the ':keyword:`with`' statement's\n:keyword:`as` clause, if any.  The code after the :keyword:`yield` will be\nexecuted in the :meth:`__exit__` method.  Any exception raised in the block will\nbe raised by the :keyword:`yield` statement.\n\nOur database example from the previous section could be written  using this\ndecorator as::\n\n   from contextlib import contextmanager\n\n   @contextmanager\n   def db_transaction (connection):\n       cursor = connection.cursor()\n       try:\n           yield cursor\n       except:\n           connection.rollback()\n           raise\n       else:\n           connection.commit()\n\n   db = DatabaseConnection()\n   with db_transaction(db) as cursor:\n       ...\n\nThe :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` function\nthat combines a number of context managers so you don't need to write nested\n':keyword:`with`' statements.  In this example, the single ':keyword:`with`'\nstatement both starts a database transaction and acquires a thread lock::\n\n   lock = threading.Lock()\n   with nested (db_transaction(db), lock) as (cursor, locked):\n       ...\n\nFinally, the ``closing(object)`` function returns *object* so that it can be\nbound to a variable, and calls ``object.close`` at the end of the block. ::\n\n   import urllib, sys\n   from contextlib import closing\n\n   with closing(urllib.urlopen('http://www.yahoo.com')) as f:\n       for line in f:\n           sys.stdout.write(line)\n\n\n.. seealso::\n\n   :pep:`343` - The \"with\" statement\n      PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland,\n      Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a\n      ':keyword:`with`' statement, which can be helpful in learning how the statement\n      works.\n\n   The documentation  for the :mod:`contextlib` module.\n\n.. ======================================================================\n\n\n.. _pep-352:\n\nPEP 352: Exceptions as New-Style Classes\n========================================\n\nException classes can now be new-style classes, not just classic classes, and\nthe built-in :exc:`Exception` class and all the standard built-in exceptions\n(:exc:`NameError`, :exc:`ValueError`, etc.) are now new-style classes.\n\nThe inheritance hierarchy for exceptions has been rearranged a bit. In 2.5, the\ninheritance relationships are::\n\n   BaseException       # New in Python 2.5\n   |- KeyboardInterrupt\n   |- SystemExit\n   |- Exception\n      |- (all other current built-in exceptions)\n\nThis rearrangement was done because people often want to catch all exceptions\nthat indicate program errors.  :exc:`KeyboardInterrupt` and :exc:`SystemExit`\naren't errors, though, and usually represent an explicit action such as the user\nhitting :kbd:`Control-C` or code calling :func:`sys.exit`.  A bare ``except:`` will\ncatch all exceptions, so you commonly need to list :exc:`KeyboardInterrupt` and\n:exc:`SystemExit` in order to re-raise them.  The usual pattern is::\n\n   try:\n       ...\n   except (KeyboardInterrupt, SystemExit):\n       raise\n   except:\n       # Log error...\n       # Continue running program...\n\nIn Python 2.5, you can now write ``except Exception`` to achieve the same\nresult, catching all the exceptions that usually indicate errors  but leaving\n:exc:`KeyboardInterrupt` and :exc:`SystemExit` alone.  As in previous versions,\na bare ``except:`` still catches all exceptions.\n\nThe goal for Python 3.0 is to require any class raised as an exception to derive\nfrom :exc:`BaseException` or some descendant of :exc:`BaseException`, and future\nreleases in the Python 2.x series may begin to enforce this constraint.\nTherefore, I suggest you begin making all your exception classes derive from\n:exc:`Exception` now.  It's been suggested that the bare ``except:`` form should\nbe removed in Python 3.0, but Guido van Rossum hasn't decided whether to do this\nor not.\n\nRaising of strings as exceptions, as in the statement ``raise \"Error\noccurred\"``, is deprecated in Python 2.5 and will trigger a warning.  The aim is\nto be able to remove the string-exception feature in a few releases.\n\n\n.. seealso::\n\n   :pep:`352` - Required Superclass for Exceptions\n      PEP written by  Brett Cannon and Guido van Rossum; implemented by Brett Cannon.\n\n.. ======================================================================\n\n\n.. _pep-353:\n\nPEP 353: Using ssize_t as the index type\n========================================\n\nA wide-ranging change to Python's C API, using a new  :c:type:`Py_ssize_t` type\ndefinition instead of :c:type:`int`,  will permit the interpreter to handle more\ndata on 64-bit platforms. This change doesn't affect Python's capacity on 32-bit\nplatforms.\n\nVarious pieces of the Python interpreter used C's :c:type:`int` type to store\nsizes or counts; for example, the number of items in a list or tuple were stored\nin an :c:type:`int`.  The C compilers for most 64-bit platforms still define\n:c:type:`int` as a 32-bit type, so that meant that lists could only hold up to\n``2**31 - 1`` = 2147483647 items. (There are actually a few different\nprogramming models that 64-bit C compilers can use -- see\nhttp://www.unix.org/version2/whatsnew/lp64_wp.html for a discussion -- but the\nmost commonly available model leaves :c:type:`int` as 32 bits.)\n\nA limit of 2147483647 items doesn't really matter on a 32-bit platform because\nyou'll run out of memory before hitting the length limit. Each list item\nrequires space for a pointer, which is 4 bytes, plus space for a\n:c:type:`PyObject` representing the item.  2147483647\\*4 is already more bytes\nthan a 32-bit address space can contain.\n\nIt's possible to address that much memory on a 64-bit platform, however.  The\npointers for a list that size would only require 16 GiB of space, so it's not\nunreasonable that Python programmers might construct lists that large.\nTherefore, the Python interpreter had to be changed to use some type other than\n:c:type:`int`, and this will be a 64-bit type on 64-bit platforms.  The change\nwill cause incompatibilities on 64-bit machines, so it was deemed worth making\nthe transition now, while the number of 64-bit users is still relatively small.\n(In 5 or 10 years, we may *all* be on 64-bit machines, and the transition would\nbe more painful then.)\n\nThis change most strongly affects authors of C extension modules.   Python\nstrings and container types such as lists and tuples  now use\n:c:type:`Py_ssize_t` to store their size.   Functions such as\n:c:func:`PyList_Size`  now return :c:type:`Py_ssize_t`.  Code in extension modules\nmay therefore need to have some variables changed to :c:type:`Py_ssize_t`.\n\nThe :c:func:`PyArg_ParseTuple` and :c:func:`Py_BuildValue` functions have a new\nconversion code, ``n``, for :c:type:`Py_ssize_t`.   :c:func:`PyArg_ParseTuple`'s\n``s#`` and ``t#`` still output :c:type:`int` by default, but you can define the\nmacro  :c:macro:`PY_SSIZE_T_CLEAN` before including :file:`Python.h`  to make\nthem return :c:type:`Py_ssize_t`.\n\n:pep:`353` has a section on conversion guidelines that  extension authors should\nread to learn about supporting 64-bit platforms.\n\n\n.. seealso::\n\n   :pep:`353` - Using ssize_t as the index type\n      PEP written and implemented by Martin von L\u00f6wis.\n\n.. ======================================================================\n\n\n.. _pep-357:\n\nPEP 357: The '__index__' method\n===============================\n\nThe NumPy developers had a problem that could only be solved by adding a new\nspecial method, :meth:`__index__`.  When using slice notation, as in\n``[start:stop:step]``, the values of the *start*, *stop*, and *step* indexes\nmust all be either integers or long integers.  NumPy defines a variety of\nspecialized integer types corresponding to unsigned and signed integers of 8,\n16, 32, and 64 bits, but there was no way to signal that these types could be\nused as slice indexes.\n\nSlicing can't just use the existing :meth:`__int__` method because that method\nis also used to implement coercion to integers.  If slicing used\n:meth:`__int__`, floating-point numbers would also become legal slice indexes\nand that's clearly an undesirable behaviour.\n\nInstead, a new special method called :meth:`__index__` was added.  It takes no\narguments and returns an integer giving the slice index to use.  For example::\n\n   class C:\n       def __index__ (self):\n           return self.value\n\nThe return value must be either a Python integer or long integer. The\ninterpreter will check that the type returned is correct, and raises a\n:exc:`TypeError` if this requirement isn't met.\n\nA corresponding :attr:`nb_index` slot was added to the C-level\n:c:type:`PyNumberMethods` structure to let C extensions implement this protocol.\n``PyNumber_Index(obj)`` can be used in extension code to call the\n:meth:`__index__` function and retrieve its result.\n\n\n.. seealso::\n\n   :pep:`357` - Allowing Any Object to be Used for Slicing\n      PEP written  and implemented by Travis Oliphant.\n\n.. ======================================================================\n\n\n.. _other-lang:\n\nOther Language Changes\n======================\n\nHere are all of the changes that Python 2.5 makes to the core Python language.\n\n* The :class:`dict` type has a new hook for letting subclasses provide a default\n  value when a key isn't contained in the dictionary. When a key isn't found, the\n  dictionary's ``__missing__(key)`` method will be called.  This hook is used\n  to implement the new :class:`defaultdict` class in the :mod:`collections`\n  module.  The following example defines a dictionary  that returns zero for any\n  missing key::\n\n     class zerodict (dict):\n         def __missing__ (self, key):\n             return 0\n\n     d = zerodict({1:1, 2:2})\n     print d[1], d[2]   # Prints 1, 2\n     print d[3], d[4]   # Prints 0, 0\n\n* Both 8-bit and Unicode strings have new ``partition(sep)``  and\n  ``rpartition(sep)`` methods that simplify a common use case.\n\n  The ``find(S)`` method is often used to get an index which is then used to\n  slice the string and obtain the pieces that are before and after the separator.\n  ``partition(sep)`` condenses this pattern into a single method call that\n  returns a 3-tuple containing the substring before the separator, the separator\n  itself, and the substring after the separator.  If the separator isn't found,\n  the first element of the tuple is the entire string and the other two elements\n  are empty.  ``rpartition(sep)`` also returns a 3-tuple but starts searching\n  from the end of the string; the ``r`` stands for 'reverse'.\n\n  Some examples::\n\n     >>> ('http://www.python.org').partition('://')\n     ('http', '://', 'www.python.org')\n     >>> ('file:/usr/share/doc/index.html').partition('://')\n     ('file:/usr/share/doc/index.html', '', '')\n     >>> (u'Subject: a quick question').partition(':')\n     (u'Subject', u':', u' a quick question')\n     >>> 'www.python.org'.rpartition('.')\n     ('www.python', '.', 'org')\n     >>> 'www.python.org'.rpartition(':')\n     ('', '', 'www.python.org')\n\n  (Implemented by Fredrik Lundh following a suggestion by Raymond Hettinger.)\n\n* The :meth:`startswith` and :meth:`endswith` methods of string types now accept\n  tuples of strings to check for. ::\n\n     def is_image_file (filename):\n         return filename.endswith(('.gif', '.jpg', '.tiff'))\n\n  (Implemented by Georg Brandl following a suggestion by Tom Lynn.)\n\n  .. RFE #1491485\n\n* The :func:`min` and :func:`max` built-in functions gained a ``key`` keyword\n  parameter analogous to the ``key`` argument for :meth:`sort`.  This parameter\n  supplies a function that takes a single argument and is called for every value\n  in the list; :func:`min`/:func:`max` will return the element with the\n  smallest/largest return value from this function. For example, to find the\n  longest string in a list, you can do::\n\n     L = ['medium', 'longest', 'short']\n     # Prints 'longest'\n     print max(L, key=len)\n     # Prints 'short', because lexicographically 'short' has the largest value\n     print max(L)\n\n  (Contributed by Steven Bethard and Raymond Hettinger.)\n\n* Two new built-in functions, :func:`any` and :func:`all`, evaluate whether an\n  iterator contains any true or false values.  :func:`any` returns :const:`True`\n  if any value returned by the iterator is true; otherwise it will return\n  :const:`False`.  :func:`all` returns :const:`True` only if all of the values\n  returned by the iterator evaluate as true. (Suggested by Guido van Rossum, and\n  implemented by Raymond Hettinger.)\n\n* The result of a class's :meth:`__hash__` method can now be either a long\n  integer or a regular integer.  If a long integer is returned, the hash of that\n  value is taken.  In earlier versions the hash value was required to be a\n  regular integer, but in 2.5 the :func:`id` built-in was changed to always\n  return non-negative numbers, and users often seem to use ``id(self)`` in\n  :meth:`__hash__` methods (though this is discouraged).\n\n  .. Bug #1536021\n\n* ASCII is now the default encoding for modules.  It's now  a syntax error if a\n  module contains string literals with 8-bit characters but doesn't have an\n  encoding declaration.  In Python 2.4 this triggered a warning, not a syntax\n  error.  See :pep:`263`  for how to declare a module's encoding; for example, you\n  might add  a line like this near the top of the source file::\n\n     # -*- coding: latin1 -*-\n\n* A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to\n  compare a Unicode string and an 8-bit string  that can't be converted to Unicode\n  using the default ASCII encoding.   The result of the comparison is false::\n\n     >>> chr(128) == unichr(128)   # Can't convert chr(128) to Unicode\n     __main__:1: UnicodeWarning: Unicode equal comparison failed\n       to convert both arguments to Unicode - interpreting them\n       as being unequal\n     False\n     >>> chr(127) == unichr(127)   # chr(127) can be converted\n     True\n\n  Previously this would raise a :class:`UnicodeDecodeError` exception, but in 2.5\n  this could result in puzzling problems when accessing a dictionary.  If you\n  looked up ``unichr(128)`` and ``chr(128)`` was being used as a key, you'd get a\n  :class:`UnicodeDecodeError` exception.  Other changes in 2.5 resulted in this\n  exception being raised instead of suppressed by the code in :file:`dictobject.c`\n  that implements dictionaries.\n\n  Raising an exception for such a comparison is strictly correct, but the change\n  might have broken code, so instead  :class:`UnicodeWarning` was introduced.\n\n  (Implemented by Marc-Andr\u00e9 Lemburg.)\n\n* One error that Python programmers sometimes make is forgetting to include an\n  :file:`__init__.py` module in a package directory. Debugging this mistake can be\n  confusing, and usually requires running Python with the :option:`-v` switch to\n  log all the paths searched. In Python 2.5, a new :exc:`ImportWarning` warning is\n  triggered when an import would have picked up a directory as a package but no\n  :file:`__init__.py` was found.  This warning is silently ignored by default;\n  provide the :option:`-Wd <-W>` option when running the Python executable to display\n  the warning message. (Implemented by Thomas Wouters.)\n\n* The list of base classes in a class definition can now be empty.   As an\n  example, this is now legal::\n\n     class C():\n         pass\n\n  (Implemented by Brett Cannon.)\n\n.. ======================================================================\n\n\n.. _25interactive:\n\nInteractive Interpreter Changes\n-------------------------------\n\nIn the interactive interpreter, ``quit`` and ``exit``  have long been strings so\nthat new users get a somewhat helpful message when they try to quit::\n\n   >>> quit\n   'Use Ctrl-D (i.e. EOF) to exit.'\n\nIn Python 2.5, ``quit`` and ``exit`` are now objects that still produce string\nrepresentations of themselves, but are also callable. Newbies who try ``quit()``\nor ``exit()`` will now exit the interpreter as they expect.  (Implemented by\nGeorg Brandl.)\n\nThe Python executable now accepts the standard long options  :option:`--help`\nand :option:`--version`; on Windows,  it also accepts the :option:`/? <-?>` option\nfor displaying a help message. (Implemented by Georg Brandl.)\n\n.. ======================================================================\n\n\n.. _opts:\n\nOptimizations\n-------------\n\nSeveral of the optimizations were developed at the NeedForSpeed sprint, an event\nheld in Reykjavik, Iceland, from May 21--28 2006. The sprint focused on speed\nenhancements to the CPython implementation and was funded by EWT LLC with local\nsupport from CCP Games.  Those optimizations added at this sprint are specially\nmarked in the following list.\n\n* When they were introduced  in Python 2.4, the built-in :class:`set` and\n  :class:`frozenset` types were built on top of Python's dictionary type.   In 2.5\n  the internal data structure has been customized for implementing sets, and as a\n  result sets will use a third less memory and are somewhat faster. (Implemented\n  by Raymond Hettinger.)\n\n* The speed of some Unicode operations, such as finding substrings, string\n  splitting, and character map encoding and decoding, has been improved.\n  (Substring search and splitting improvements were added by Fredrik Lundh and\n  Andrew Dalke at the NeedForSpeed sprint. Character maps were improved by Walter\n  D\u00f6rwald and Martin von L\u00f6wis.)\n\n  .. Patch 1313939, 1359618\n\n* The ``long(str, base)`` function is now faster on long digit strings\n  because fewer intermediate results are calculated.  The peak is for strings of\n  around 800--1000 digits where  the function is 6 times faster. (Contributed by\n  Alan McIntyre and committed at the NeedForSpeed sprint.)\n\n  .. Patch 1442927\n\n* It's now illegal to mix iterating over a file  with ``for line in file`` and\n  calling  the file object's :meth:`read`/:meth:`readline`/:meth:`readlines`\n  methods.  Iteration uses an internal buffer and the  :meth:`read\\*` methods\n  don't use that buffer.   Instead they would return the data following the\n  buffer, causing the data to appear out of order.  Mixing iteration and these\n  methods will now trigger a :exc:`ValueError` from the :meth:`read\\*` method.\n  (Implemented by Thomas Wouters.)\n\n  .. Patch 1397960\n\n* The :mod:`struct` module now compiles structure format  strings into an\n  internal representation and caches this representation, yielding a 20% speedup.\n  (Contributed by Bob Ippolito at the NeedForSpeed sprint.)\n\n* The :mod:`re` module got a 1 or 2% speedup by switching to  Python's allocator\n  functions instead of the system's  :c:func:`malloc` and :c:func:`free`.\n  (Contributed by Jack Diederich at the NeedForSpeed sprint.)\n\n* The code generator's peephole optimizer now performs simple constant folding\n  in expressions.  If you write something like ``a = 2+3``, the code generator\n  will do the arithmetic and produce code corresponding to ``a = 5``.  (Proposed\n  and implemented  by Raymond Hettinger.)\n\n* Function calls are now faster because code objects now keep  the most recently\n  finished frame (a \"zombie frame\") in an internal field of the code object,\n  reusing it the next time the code object is invoked.  (Original patch by Michael\n  Hudson, modified by Armin Rigo and Richard Jones; committed at the NeedForSpeed\n  sprint.)  Frame objects are also slightly smaller, which may improve cache\n  locality and reduce memory usage a bit.  (Contributed by Neal Norwitz.)\n\n  .. Patch 876206\n  .. Patch 1337051\n\n* Python's built-in exceptions are now new-style classes, a change that speeds\n  up instantiation considerably.  Exception handling in Python 2.5 is therefore\n  about 30% faster than in 2.4. (Contributed by Richard Jones, Georg Brandl and\n  Sean Reifschneider at the NeedForSpeed sprint.)\n\n* Importing now caches the paths tried, recording whether  they exist or not so\n  that the interpreter makes fewer  :c:func:`open` and :c:func:`stat` calls on\n  startup. (Contributed by Martin von L\u00f6wis and Georg Brandl.)\n\n  .. Patch 921466\n\n.. ======================================================================\n\n\n.. _25modules:\n\nNew, Improved, and Removed Modules\n==================================\n\nThe standard library received many enhancements and bug fixes in Python 2.5.\nHere's a partial list of the most notable changes, sorted alphabetically by\nmodule name. Consult the :file:`Misc/NEWS` file in the source tree for a more\ncomplete list of changes, or look through the SVN logs for all the details.\n\n* The :mod:`audioop` module now supports the a-LAW encoding, and the code for\n  u-LAW encoding has been improved.  (Contributed by Lars Immisch.)\n\n* The :mod:`codecs` module gained support for incremental codecs.  The\n  :func:`codec.lookup` function now returns a :class:`CodecInfo` instance instead\n  of a tuple. :class:`CodecInfo` instances behave like a 4-tuple to preserve\n  backward compatibility but also have the attributes :attr:`encode`,\n  :attr:`decode`, :attr:`incrementalencoder`, :attr:`incrementaldecoder`,\n  :attr:`streamwriter`, and :attr:`streamreader`.  Incremental codecs  can receive\n  input and produce output in multiple chunks; the output is the same as if the\n  entire input was fed to the non-incremental codec. See the :mod:`codecs` module\n  documentation for details. (Designed and implemented by Walter D\u00f6rwald.)\n\n  .. Patch  1436130\n\n* The :mod:`collections` module gained a new type, :class:`defaultdict`, that\n  subclasses the standard :class:`dict` type.  The new type mostly behaves like a\n  dictionary but constructs a default value when a key isn't present,\n  automatically adding it to the dictionary for the requested key value.\n\n  The first argument to :class:`defaultdict`'s constructor is a factory function\n  that gets called whenever a key is requested but not found. This factory\n  function receives no arguments, so you can use built-in type constructors such\n  as :func:`list` or :func:`int`.  For example,  you can make an index of words\n  based on their initial letter like this::\n\n     words = \"\"\"Nel mezzo del cammin di nostra vita\n     mi ritrovai per una selva oscura\n     che la diritta via era smarrita\"\"\".lower().split()\n\n     index = defaultdict(list)\n\n     for w in words:\n         init_letter = w[0]\n         index[init_letter].append(w)\n\n  Printing ``index`` results in the following output::\n\n     defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'],\n             'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'],\n             'l': ['la'], 'o': ['oscura'], 'n': ['nel', 'nostra'],\n             'p': ['per'], 's': ['selva', 'smarrita'],\n             'r': ['ritrovai'], 'u': ['una'], 'v': ['vita', 'via']}\n\n  (Contributed by Guido van Rossum.)\n\n* The :class:`deque` double-ended queue type supplied by the :mod:`collections`\n  module now has a ``remove(value)`` method that removes the first occurrence\n  of *value* in the queue, raising :exc:`ValueError` if the value isn't found.\n  (Contributed by Raymond Hettinger.)\n\n* New module: The :mod:`contextlib` module contains helper functions for use\n  with the new ':keyword:`with`' statement.  See section :ref:`contextlibmod`\n  for more about this module.\n\n* New module: The :mod:`cProfile` module is a C implementation of  the existing\n  :mod:`profile` module that has much lower overhead. The module's interface is\n  the same as :mod:`profile`: you run ``cProfile.run('main()')`` to profile a\n  function, can save profile data to a file, etc.  It's not yet known if the\n  Hotshot profiler, which is also written in C but doesn't match the\n  :mod:`profile` module's interface, will continue to be maintained in future\n  versions of Python.  (Contributed by Armin Rigo.)\n\n  Also, the :mod:`pstats` module for analyzing the data measured by the profiler\n  now supports directing the output to any file object by supplying a *stream*\n  argument to the :class:`Stats` constructor. (Contributed by Skip Montanaro.)\n\n* The :mod:`csv` module, which parses files in comma-separated value format,\n  received several enhancements and a number of bugfixes.  You can now set the\n  maximum size in bytes of a field by calling the\n  ``csv.field_size_limit(new_limit)`` function; omitting the *new_limit*\n  argument will return the currently-set limit.  The :class:`reader` class now has\n  a :attr:`line_num` attribute that counts the number of physical lines read from\n  the source; records can span multiple physical lines, so :attr:`line_num` is not\n  the same as the number of records read.\n\n  The CSV parser is now stricter about multi-line quoted fields. Previously, if a\n  line ended within a quoted field without a terminating newline character, a\n  newline would be inserted into the returned field. This behavior caused problems\n  when reading files that contained carriage return characters within fields, so\n  the code was changed to return the field without inserting newlines. As a\n  consequence, if newlines embedded within fields are important, the input should\n  be split into lines in a manner that preserves the newline characters.\n\n  (Contributed by Skip Montanaro and Andrew McNamara.)\n\n* The :class:`~datetime.datetime` class in the :mod:`datetime`  module now has a\n  ``strptime(string, format)``  method for parsing date strings, contributed\n  by Josh Spoerri. It uses the same format characters as :func:`time.strptime` and\n  :func:`time.strftime`::\n\n     from datetime import datetime\n\n     ts = datetime.strptime('10:13:15 2006-03-07',\n                            '%H:%M:%S %Y-%m-%d')\n\n* The :meth:`SequenceMatcher.get_matching_blocks` method in the :mod:`difflib`\n  module now guarantees to return a minimal list of blocks describing matching\n  subsequences.  Previously, the algorithm would occasionally break a block of\n  matching elements into two list entries. (Enhancement by Tim Peters.)\n\n* The :mod:`doctest` module gained a ``SKIP`` option that keeps an example from\n  being executed at all.  This is intended for code snippets that are usage\n  examples intended for the reader and aren't actually test cases.\n\n  An *encoding* parameter was added to the :func:`testfile` function and the\n  :class:`DocFileSuite` class to specify the file's encoding.  This makes it\n  easier to use non-ASCII characters in  tests contained within a docstring.\n  (Contributed by Bjorn Tillenius.)\n\n  .. Patch 1080727\n\n* The :mod:`email` package has been updated to version 4.0. (Contributed by\n  Barry Warsaw.)\n\n  .. XXX need to provide some more detail here\n\n  .. index::\n     single: universal newlines; What's new\n\n* The :mod:`fileinput` module was made more flexible. Unicode filenames are now\n  supported, and a *mode* parameter that defaults to ``\"r\"`` was added to the\n  :func:`input` function to allow opening files in binary or :term:`universal\n  newlines` mode.  Another new parameter, *openhook*, lets you use a function\n  other than :func:`open`  to open the input files.  Once you're iterating over\n  the set of files, the :class:`FileInput` object's new :meth:`fileno` returns\n  the file descriptor for the currently opened file. (Contributed by Georg\n  Brandl.)\n\n* In the :mod:`gc` module, the new :func:`get_count` function returns a 3-tuple\n  containing the current collection counts for the three GC generations.  This is\n  accounting information for the garbage collector; when these counts reach a\n  specified threshold, a garbage collection sweep will be made.  The existing\n  :func:`gc.collect` function now takes an optional *generation* argument of 0, 1,\n  or 2 to specify which generation to collect. (Contributed by Barry Warsaw.)\n\n* The :func:`nsmallest` and  :func:`nlargest` functions in the :mod:`heapq`\n  module  now support a ``key`` keyword parameter similar to the one provided by\n  the :func:`min`/:func:`max` functions and the :meth:`sort` methods.  For\n  example::\n\n     >>> import heapq\n     >>> L = [\"short\", 'medium', 'longest', 'longer still']\n     >>> heapq.nsmallest(2, L)  # Return two lowest elements, lexicographically\n     ['longer still', 'longest']\n     >>> heapq.nsmallest(2, L, key=len)   # Return two shortest elements\n     ['short', 'medium']\n\n  (Contributed by Raymond Hettinger.)\n\n* The :func:`itertools.islice` function now accepts ``None`` for the start and\n  step arguments.  This makes it more compatible with the attributes of slice\n  objects, so that you can now write the following::\n\n     s = slice(5)     # Create slice object\n     itertools.islice(iterable, s.start, s.stop, s.step)\n\n  (Contributed by Raymond Hettinger.)\n\n* The :func:`format` function in the :mod:`locale` module has been modified and\n  two new functions were added, :func:`format_string` and :func:`currency`.\n\n  The :func:`format` function's *val* parameter could previously be a string as\n  long as no more than one %char specifier appeared; now the parameter must be\n  exactly one %char specifier with no surrounding text.  An optional *monetary*\n  parameter was also added which, if ``True``, will use the locale's rules for\n  formatting currency in placing a separator between groups of three digits.\n\n  To format strings with multiple %char specifiers, use the new\n  :func:`format_string` function that works like :func:`format` but also supports\n  mixing %char specifiers with arbitrary text.\n\n  A new :func:`currency` function was also added that formats a number according\n  to the current locale's settings.\n\n  (Contributed by Georg Brandl.)\n\n  .. Patch 1180296\n\n* The :mod:`mailbox` module underwent a massive rewrite to add the capability to\n  modify mailboxes in addition to reading them.  A new set of classes that include\n  :class:`mbox`, :class:`MH`, and :class:`Maildir` are used to read mailboxes, and\n  have an ``add(message)`` method to add messages, ``remove(key)`` to\n  remove messages, and :meth:`lock`/:meth:`unlock` to lock/unlock the mailbox.\n  The following example converts a maildir-format mailbox into an mbox-format\n  one::\n\n     import mailbox\n\n     # 'factory=None' uses email.Message.Message as the class representing\n     # individual messages.\n     src = mailbox.Maildir('maildir', factory=None)\n     dest = mailbox.mbox('/tmp/mbox')\n\n     for msg in src:\n         dest.add(msg)\n\n  (Contributed by Gregory K. Johnson.  Funding was provided by Google's 2005\n  Summer of Code.)\n\n* New module: the :mod:`msilib` module allows creating Microsoft Installer\n  :file:`.msi` files and CAB files.  Some support for reading the :file:`.msi`\n  database is also included. (Contributed by Martin von L\u00f6wis.)\n\n* The :mod:`nis` module now supports accessing domains other than the system\n  default domain by supplying a *domain* argument to the :func:`nis.match` and\n  :func:`nis.maps` functions. (Contributed by Ben Bell.)\n\n* The :mod:`operator` module's :func:`itemgetter`  and :func:`attrgetter`\n  functions now support multiple fields.   A call such as\n  ``operator.attrgetter('a', 'b')`` will return a function  that retrieves the\n  :attr:`a` and :attr:`b` attributes.  Combining  this new feature with the\n  :meth:`sort` method's ``key`` parameter  lets you easily sort lists using\n  multiple fields. (Contributed by Raymond Hettinger.)\n\n* The :mod:`optparse` module was updated to version 1.5.1 of the Optik library.\n  The :class:`OptionParser` class gained an :attr:`epilog` attribute, a string\n  that will be printed after the help message, and a :meth:`destroy` method to\n  break reference cycles created by the object. (Contributed by Greg Ward.)\n\n* The :mod:`os` module underwent several changes.  The :attr:`stat_float_times`\n  variable now defaults to true, meaning that :func:`os.stat` will now return time\n  values as floats.  (This doesn't necessarily mean that :func:`os.stat` will\n  return times that are precise to fractions of a second; not all systems support\n  such precision.)\n\n  Constants named :attr:`os.SEEK_SET`, :attr:`os.SEEK_CUR`, and\n  :attr:`os.SEEK_END` have been added; these are the parameters to the\n  :func:`os.lseek` function.  Two new constants for locking are\n  :attr:`os.O_SHLOCK` and :attr:`os.O_EXLOCK`.\n\n  Two new functions, :func:`wait3` and :func:`wait4`, were added.  They're similar\n  the :func:`waitpid` function which waits for a child process to exit and returns\n  a tuple of the process ID and its exit status, but :func:`wait3` and\n  :func:`wait4` return additional information.  :func:`wait3` doesn't take a\n  process ID as input, so it waits for any child process to exit and returns a\n  3-tuple of *process-id*, *exit-status*, *resource-usage* as returned from the\n  :func:`resource.getrusage` function. ``wait4(pid)`` does take a process ID.\n  (Contributed by Chad J. Schroeder.)\n\n  On FreeBSD, the :func:`os.stat` function now returns  times with nanosecond\n  resolution, and the returned object now has :attr:`st_gen` and\n  :attr:`st_birthtime`. The :attr:`st_flags` attribute is also available, if the\n  platform supports it. (Contributed by Antti Louko and  Diego Petten\u00f2.)\n\n  .. (Patch 1180695, 1212117)\n\n* The Python debugger provided by the :mod:`pdb` module can now store lists of\n  commands to execute when a breakpoint is reached and execution stops.  Once\n  breakpoint #1 has been created, enter ``commands 1`` and enter a series of\n  commands to be executed, finishing the list with ``end``.  The command list can\n  include commands that resume execution, such as ``continue`` or ``next``.\n  (Contributed by Gr\u00e9goire Dooms.)\n\n  .. Patch 790710\n\n* The :mod:`pickle` and :mod:`cPickle` modules no longer accept a return value\n  of ``None`` from the :meth:`__reduce__` method; the method must return a tuple\n  of arguments instead.  The ability to return ``None`` was deprecated in Python\n  2.4, so this completes the removal of the feature.\n\n* The :mod:`pkgutil` module, containing various utility functions for finding\n  packages, was enhanced to support PEP 302's import hooks and now also works for\n  packages stored in ZIP-format archives. (Contributed by Phillip J. Eby.)\n\n* The pybench benchmark suite by Marc-Andr\u00e9 Lemburg is now included in the\n  :file:`Tools/pybench` directory.  The pybench suite is an improvement on the\n  commonly used :file:`pystone.py` program because pybench provides a more\n  detailed measurement of the interpreter's speed.  It times particular operations\n  such as function calls, tuple slicing, method lookups, and numeric operations,\n  instead of performing many different operations and reducing the result to a\n  single number as :file:`pystone.py` does.\n\n* The :mod:`pyexpat` module now uses version 2.0 of the Expat parser.\n  (Contributed by Trent Mick.)\n\n* The :class:`~queue.Queue` class provided by the :mod:`Queue` module gained two new\n  methods.  :meth:`join` blocks until all items in the queue have been retrieved\n  and all processing work on the items  have been completed.  Worker threads call\n  the other new method,  :meth:`task_done`, to signal that processing for an item\n  has been completed.  (Contributed by Raymond Hettinger.)\n\n* The old :mod:`regex` and :mod:`regsub` modules, which have been  deprecated\n  ever since Python 2.0, have finally been deleted.   Other deleted modules:\n  :mod:`statcache`, :mod:`tzparse`, :mod:`whrandom`.\n\n* Also deleted: the :file:`lib-old` directory, which includes ancient modules\n  such as :mod:`dircmp` and :mod:`ni`, was removed.  :file:`lib-old` wasn't on the\n  default ``sys.path``, so unless your programs explicitly added the directory to\n  ``sys.path``, this removal shouldn't affect your code.\n\n* The :mod:`rlcompleter` module is no longer  dependent on importing the\n  :mod:`readline` module and therefore now works on non-Unix platforms. (Patch\n  from Robert Kiendl.)\n\n  .. Patch #1472854\n\n* The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  classes now have a\n  :attr:`rpc_paths` attribute that constrains XML-RPC operations to a limited set\n  of URL paths; the default is to allow only ``'/'`` and ``'/RPC2'``.  Setting\n  :attr:`rpc_paths` to ``None`` or an empty tuple disables  this path checking.\n\n  .. Bug #1473048\n\n* The :mod:`socket` module now supports :const:`AF_NETLINK` sockets on Linux,\n  thanks to a patch from Philippe Biondi.   Netlink sockets are a Linux-specific\n  mechanism for communications between a user-space process and kernel code; an\n  introductory  article about them is at https://www.linuxjournal.com/article/7356.\n  In Python code, netlink addresses are represented as a tuple of 2 integers,\n  ``(pid, group_mask)``.\n\n  Two new methods on socket objects, ``recv_into(buffer)`` and\n  ``recvfrom_into(buffer)``, store the received data in an object  that\n  supports the buffer protocol instead of returning the data as a string.  This\n  means you can put the data directly into an array or a memory-mapped file.\n\n  Socket objects also gained :meth:`getfamily`, :meth:`gettype`, and\n  :meth:`getproto` accessor methods to retrieve the family, type, and protocol\n  values for the socket.\n\n* New module: the :mod:`spwd` module provides functions for accessing the shadow\n  password database on systems that support  shadow passwords.\n\n* The :mod:`struct` is now faster because it  compiles format strings into\n  :class:`Struct` objects with :meth:`pack` and :meth:`unpack` methods.  This is\n  similar to how the :mod:`re` module lets you create compiled regular expression\n  objects.  You can still use the module-level  :func:`pack` and :func:`unpack`\n  functions; they'll create  :class:`Struct` objects and cache them.  Or you can\n  use  :class:`Struct` instances directly::\n\n     s = struct.Struct('ih3s')\n\n     data = s.pack(1972, 187, 'abc')\n     year, number, name = s.unpack(data)\n\n  You can also pack and unpack data to and from buffer objects directly using the\n  ``pack_into(buffer, offset, v1, v2, ...)`` and ``unpack_from(buffer,\n  offset)`` methods.  This lets you store data directly into an array or a\n  memory-mapped file.\n\n  (:class:`Struct` objects were implemented by Bob Ippolito at the NeedForSpeed\n  sprint.  Support for buffer objects was added by Martin Blais, also at the\n  NeedForSpeed sprint.)\n\n* The Python developers switched from CVS to Subversion during the 2.5\n  development process.  Information about the exact build version is available as\n  the ``sys.subversion`` variable, a 3-tuple of ``(interpreter-name, branch-name,\n  revision-range)``.  For example, at the time of writing my copy of 2.5 was\n  reporting ``('CPython', 'trunk', '45313:45315')``.\n\n  This information is also available to C extensions via the\n  :c:func:`Py_GetBuildInfo` function that returns a  string of build information\n  like this: ``\"trunk:45355:45356M, Apr 13 2006, 07:42:19\"``.   (Contributed by\n  Barry Warsaw.)\n\n* Another new function, :func:`sys._current_frames`, returns the current stack\n  frames for all running threads as a dictionary mapping thread identifiers to the\n  topmost stack frame currently active in that thread at the time the function is\n  called.  (Contributed by Tim Peters.)\n\n* The :class:`TarFile` class in the :mod:`tarfile` module now has an\n  :meth:`extractall` method that extracts all members from the archive into the\n  current working directory.  It's also possible to set a different directory as\n  the extraction target, and to unpack only a subset of the archive's members.\n\n  The compression used for a tarfile opened in stream mode can now be autodetected\n  using the mode ``'r|*'``. (Contributed by Lars Gust\u00e4bel.)\n\n  .. patch 918101\n\n* The :mod:`threading` module now lets you set the stack size used when new\n  threads are created. The ``stack_size([*size*])`` function returns the\n  currently configured stack size, and supplying the optional *size* parameter\n  sets a new value.  Not all platforms support changing the stack size, but\n  Windows, POSIX threading, and OS/2 all do. (Contributed by Andrew MacIntyre.)\n\n  .. Patch 1454481\n\n* The :mod:`unicodedata` module has been updated to use version 4.1.0 of the\n  Unicode character database.  Version 3.2.0 is required  by some specifications,\n  so it's still available as  :attr:`unicodedata.ucd_3_2_0`.\n\n* New module: the  :mod:`uuid` module generates  universally unique identifiers\n  (UUIDs) according to :rfc:`4122`.  The RFC defines several different UUID\n  versions that are generated from a starting string, from system properties, or\n  purely randomly.  This module contains a :class:`UUID` class and  functions\n  named :func:`uuid1`, :func:`uuid3`, :func:`uuid4`,  and  :func:`uuid5` to\n  generate different versions of UUID.  (Version 2 UUIDs  are not specified in\n  :rfc:`4122` and are not supported by this module.) ::\n\n     >>> import uuid\n     >>> # make a UUID based on the host ID and current time\n     >>> uuid.uuid1()\n     UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')\n\n     >>> # make a UUID using an MD5 hash of a namespace UUID and a name\n     >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')\n     UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')\n\n     >>> # make a random UUID\n     >>> uuid.uuid4()\n     UUID('16fd2706-8baf-433b-82eb-8c7fada847da')\n\n     >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name\n     >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')\n     UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')\n\n  (Contributed by Ka-Ping Yee.)\n\n* The :mod:`weakref` module's :class:`WeakKeyDictionary` and\n  :class:`WeakValueDictionary` types gained new methods for iterating over the\n  weak references contained in the dictionary.  :meth:`iterkeyrefs` and\n  :meth:`keyrefs` methods were added to :class:`WeakKeyDictionary`, and\n  :meth:`itervaluerefs` and :meth:`valuerefs` were added to\n  :class:`WeakValueDictionary`.  (Contributed by Fred L. Drake, Jr.)\n\n* The :mod:`webbrowser` module received a number of enhancements. It's now\n  usable as a script with ``python -m webbrowser``, taking a URL as the argument;\n  there are a number of switches  to control the behaviour (:option:`!-n` for a new\n  browser window,  :option:`!-t` for a new tab).  New module-level functions,\n  :func:`open_new` and :func:`open_new_tab`, were added  to support this.  The\n  module's :func:`open` function supports an additional feature, an *autoraise*\n  parameter that signals whether to raise the open window when possible. A number\n  of additional browsers were added to the supported list such as Firefox, Opera,\n  Konqueror, and elinks.  (Contributed by Oleg Broytmann and Georg Brandl.)\n\n  .. Patch #754022\n\n* The :mod:`xmlrpclib` module now supports returning  :class:`~datetime.datetime` objects\n  for the XML-RPC date type.  Supply  ``use_datetime=True`` to the :func:`loads`\n  function or the :class:`Unmarshaller` class to enable this feature. (Contributed\n  by Skip Montanaro.)\n\n  .. Patch 1120353\n\n* The :mod:`zipfile` module now supports the ZIP64 version of the  format,\n  meaning that a .zip archive can now be larger than 4 GiB and can contain\n  individual files larger than 4 GiB.  (Contributed by Ronald Oussoren.)\n\n  .. Patch 1446489\n\n* The :mod:`zlib` module's :class:`Compress` and :class:`Decompress` objects now\n  support a :meth:`copy` method that makes a copy of the  object's internal state\n  and returns a new  :class:`Compress` or :class:`Decompress` object.\n  (Contributed by Chris AtLee.)\n\n  .. Patch 1435422\n\n.. ======================================================================\n\n\n.. _module-ctypes:\n\nThe ctypes package\n------------------\n\nThe :mod:`ctypes` package, written by Thomas Heller, has been added  to the\nstandard library.  :mod:`ctypes` lets you call arbitrary functions  in shared\nlibraries or DLLs.  Long-time users may remember the :mod:`dl` module, which\nprovides functions for loading shared libraries and calling functions in them.\nThe :mod:`ctypes` package is much fancier.\n\nTo load a shared library or DLL, you must create an instance of the\n:class:`CDLL` class and provide the name or path of the shared library or DLL.\nOnce that's done, you can call arbitrary functions by accessing them as\nattributes of the :class:`CDLL` object.   ::\n\n   import ctypes\n\n   libc = ctypes.CDLL('libc.so.6')\n   result = libc.printf(\"Line of output\\n\")\n\nType constructors for the various C types are provided: :func:`c_int`,\n:func:`c_float`, :func:`c_double`, :func:`c_char_p` (equivalent to :c:type:`char\n\\*`), and so forth.  Unlike Python's types, the C versions are all mutable; you\ncan assign to their :attr:`value` attribute to change the wrapped value.  Python\nintegers and strings will be automatically converted to the corresponding C\ntypes, but for other types you  must call the correct type constructor.  (And I\nmean *must*;  getting it wrong will often result in the interpreter crashing\nwith a segmentation fault.)\n\nYou shouldn't use :func:`c_char_p` with a Python string when the C function will\nbe modifying the memory area, because Python strings are  supposed to be\nimmutable; breaking this rule will cause puzzling bugs.  When you need a\nmodifiable memory area, use :func:`create_string_buffer`::\n\n   s = \"this is a string\"\n   buf = ctypes.create_string_buffer(s)\n   libc.strfry(buf)\n\nC functions are assumed to return integers, but you can set the :attr:`restype`\nattribute of the function object to  change this::\n\n   >>> libc.atof('2.71828')\n   -1783957616\n   >>> libc.atof.restype = ctypes.c_double\n   >>> libc.atof('2.71828')\n   2.71828\n\n:mod:`ctypes` also provides a wrapper for Python's C API  as the\n``ctypes.pythonapi`` object.  This object does *not*  release the global\ninterpreter lock before calling a function, because the lock must be held when\ncalling into the interpreter's code.   There's a :class:`py_object()` type\nconstructor that will create a  :c:type:`PyObject \\*` pointer.  A simple usage::\n\n   import ctypes\n\n   d = {}\n   ctypes.pythonapi.PyObject_SetItem(ctypes.py_object(d),\n             ctypes.py_object(\"abc\"),  ctypes.py_object(1))\n   # d is now {'abc', 1}.\n\nDon't forget to use :class:`py_object()`; if it's omitted you end  up with a\nsegmentation fault.\n\n:mod:`ctypes` has been around for a while, but people still write  and\ndistribution hand-coded extension modules because you can't rely on\n:mod:`ctypes` being present. Perhaps developers will begin to write  Python\nwrappers atop a library accessed through :mod:`ctypes` instead of extension\nmodules, now that :mod:`ctypes` is included with core Python.\n\n\n.. seealso::\n\n   http://starship.python.net/crew/theller/ctypes/\n      The ctypes web page, with a tutorial, reference, and FAQ.\n\n   The documentation  for the :mod:`ctypes` module.\n\n.. ======================================================================\n\n\n.. _module-etree:\n\nThe ElementTree package\n-----------------------\n\nA subset of Fredrik Lundh's ElementTree library for processing XML has been\nadded to the standard library as :mod:`xml.etree`.  The available modules are\n:mod:`ElementTree`, :mod:`ElementPath`, and :mod:`ElementInclude` from\nElementTree 1.2.6.    The :mod:`cElementTree` accelerator module is also\nincluded.\n\nThe rest of this section will provide a brief overview of using ElementTree.\nFull documentation for ElementTree is available at\nhttp://effbot.org/zone/element-index.htm.\n\nElementTree represents an XML document as a tree of element nodes. The text\ncontent of the document is stored as the :attr:`text` and :attr:`tail`\nattributes of  (This is one of the major differences between ElementTree and\nthe Document Object Model; in the DOM there are many different types of node,\nincluding :class:`TextNode`.)\n\nThe most commonly used parsing function is :func:`parse`, that takes either a\nstring (assumed to contain a filename) or a file-like object and returns an\n:class:`ElementTree` instance::\n\n   from xml.etree import ElementTree as ET\n\n   tree = ET.parse('ex-1.xml')\n\n   feed = urllib.urlopen(\n             'http://planet.python.org/rss10.xml')\n   tree = ET.parse(feed)\n\nOnce you have an :class:`ElementTree` instance, you can call its :meth:`getroot`\nmethod to get the root :class:`Element` node.\n\nThere's also an :func:`XML` function that takes a string literal and returns an\n:class:`Element` node (not an :class:`ElementTree`).   This function provides a\ntidy way to incorporate XML fragments, approaching the convenience of an XML\nliteral::\n\n   svg = ET.XML(\"\"\"<svg width=\"10px\" version=\"1.0\">\n                </svg>\"\"\")\n   svg.set('height', '320px')\n   svg.append(elem1)\n\nEach XML element supports some dictionary-like and some list-like access\nmethods.  Dictionary-like operations are used to access attribute values, and\nlist-like operations are used to access child nodes.\n\n+-------------------------------+--------------------------------------------+\n| Operation                     | Result                                     |\n+===============================+============================================+\n| ``elem[n]``                   | Returns n'th child element.                |\n+-------------------------------+--------------------------------------------+\n| ``elem[m:n]``                 | Returns list of m'th through n'th child    |\n|                               | elements.                                  |\n+-------------------------------+--------------------------------------------+\n| ``len(elem)``                 | Returns number of child elements.          |\n+-------------------------------+--------------------------------------------+\n| ``list(elem)``                | Returns list of child elements.            |\n+-------------------------------+--------------------------------------------+\n| ``elem.append(elem2)``        | Adds *elem2* as a child.                   |\n+-------------------------------+--------------------------------------------+\n| ``elem.insert(index, elem2)`` | Inserts *elem2* at the specified location. |\n+-------------------------------+--------------------------------------------+\n| ``del elem[n]``               | Deletes n'th child element.                |\n+-------------------------------+--------------------------------------------+\n| ``elem.keys()``               | Returns list of attribute names.           |\n+-------------------------------+--------------------------------------------+\n| ``elem.get(name)``            | Returns value of attribute *name*.         |\n+-------------------------------+--------------------------------------------+\n| ``elem.set(name, value)``     | Sets new value for attribute *name*.       |\n+-------------------------------+--------------------------------------------+\n| ``elem.attrib``               | Retrieves the dictionary containing        |\n|                               | attributes.                                |\n+-------------------------------+--------------------------------------------+\n| ``del elem.attrib[name]``     | Deletes attribute *name*.                  |\n+-------------------------------+--------------------------------------------+\n\nComments and processing instructions are also represented as :class:`Element`\nnodes.  To check if a node is a comment or processing instructions::\n\n   if elem.tag is ET.Comment:\n       ...\n   elif elem.tag is ET.ProcessingInstruction:\n       ...\n\nTo generate XML output, you should call the :meth:`ElementTree.write` method.\nLike :func:`parse`, it can take either a string or a file-like object::\n\n   # Encoding is US-ASCII\n   tree.write('output.xml')\n\n   # Encoding is UTF-8\n   f = open('output.xml', 'w')\n   tree.write(f, encoding='utf-8')\n\n(Caution: the default encoding used for output is ASCII.  For general XML work,\nwhere an element's name may contain arbitrary Unicode characters, ASCII isn't a\nvery useful encoding because it will raise an exception if an element's name\ncontains any characters with values greater than 127.  Therefore, it's best to\nspecify a different encoding such as UTF-8 that can handle any Unicode\ncharacter.)\n\nThis section is only a partial description of the ElementTree interfaces. Please\nread the package's official documentation for more details.\n\n\n.. seealso::\n\n   http://effbot.org/zone/element-index.htm\n      Official documentation for ElementTree.\n\n.. ======================================================================\n\n\n.. _module-hashlib:\n\nThe hashlib package\n-------------------\n\nA new :mod:`hashlib` module, written by Gregory P. Smith,  has been added to\nreplace the :mod:`md5` and :mod:`sha` modules.  :mod:`hashlib` adds support for\nadditional secure hashes (SHA-224, SHA-256, SHA-384, and SHA-512). When\navailable, the module uses OpenSSL for fast platform optimized implementations\nof algorithms.\n\nThe old :mod:`md5` and :mod:`sha` modules still exist as wrappers around hashlib\nto preserve backwards compatibility.  The new module's interface is very close\nto that of the old modules, but not identical. The most significant difference\nis that the constructor functions for creating new hashing objects are named\ndifferently. ::\n\n   # Old versions\n   h = md5.md5()\n   h = md5.new()\n\n   # New version\n   h = hashlib.md5()\n\n   # Old versions\n   h = sha.sha()\n   h = sha.new()\n\n   # New version\n   h = hashlib.sha1()\n\n   # Hash that weren't previously available\n   h = hashlib.sha224()\n   h = hashlib.sha256()\n   h = hashlib.sha384()\n   h = hashlib.sha512()\n\n   # Alternative form\n   h = hashlib.new('md5')          # Provide algorithm as a string\n\nOnce a hash object has been created, its methods are the same as before:\n``update(string)`` hashes the specified string into the  current digest\nstate, :meth:`digest` and :meth:`hexdigest` return the digest value as a binary\nstring or a string of hex digits, and :meth:`copy` returns a new hashing object\nwith the same digest state.\n\n\n.. seealso::\n\n   The documentation  for the :mod:`hashlib` module.\n\n.. ======================================================================\n\n\n.. _module-sqlite:\n\nThe sqlite3 package\n-------------------\n\nThe pysqlite module (http://www.pysqlite.org), a wrapper for the SQLite embedded\ndatabase, has been added to the standard library under the package name\n:mod:`sqlite3`.\n\nSQLite is a C library that provides a lightweight disk-based database that\ndoesn't require a separate server process and allows accessing the database\nusing a nonstandard variant of the SQL query language. Some applications can use\nSQLite for internal data storage.  It's also possible to prototype an\napplication using SQLite and then port the code to a larger database such as\nPostgreSQL or Oracle.\n\npysqlite was written by Gerhard H\u00e4ring and provides a SQL interface compliant\nwith the DB-API 2.0 specification described by :pep:`249`.\n\nIf you're compiling the Python source yourself, note that the source tree\ndoesn't include the SQLite code, only the wrapper module. You'll need to have\nthe SQLite libraries and headers installed before compiling Python, and the\nbuild process will compile the module when the necessary headers are available.\n\nTo use the module, you must first create a :class:`Connection` object that\nrepresents the database.  Here the data will be stored in the\n:file:`/tmp/example` file::\n\n   conn = sqlite3.connect('/tmp/example')\n\nYou can also supply the special name ``:memory:`` to create a database in RAM.\n\nOnce you have a :class:`Connection`, you can create a :class:`Cursor`  object\nand call its :meth:`execute` method to perform SQL commands::\n\n   c = conn.cursor()\n\n   # Create table\n   c.execute('''create table stocks\n   (date text, trans text, symbol text,\n    qty real, price real)''')\n\n   # Insert a row of data\n   c.execute(\"\"\"insert into stocks\n             values ('2006-01-05','BUY','RHAT',100,35.14)\"\"\")\n\nUsually your SQL operations will need to use values from Python variables.  You\nshouldn't assemble your query using Python's string operations because doing so\nis insecure; it makes your program vulnerable to an SQL injection attack.\n\nInstead, use the DB-API's parameter substitution.  Put ``?`` as a placeholder\nwherever you want to use a value, and then provide a tuple of values as the\nsecond argument to the cursor's :meth:`execute` method.  (Other database modules\nmay use a different placeholder, such as ``%s`` or ``:1``.) For example::\n\n   # Never do this -- insecure!\n   symbol = 'IBM'\n   c.execute(\"... where symbol = '%s'\" % symbol)\n\n   # Do this instead\n   t = (symbol,)\n   c.execute('select * from stocks where symbol=?', t)\n\n   # Larger example\n   for t in (('2006-03-28', 'BUY', 'IBM', 1000, 45.00),\n             ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),\n             ('2006-04-06', 'SELL', 'IBM', 500, 53.00),\n            ):\n       c.execute('insert into stocks values (?,?,?,?,?)', t)\n\nTo retrieve data after executing a SELECT statement, you can either  treat the\ncursor as an iterator, call the cursor's :meth:`fetchone` method to retrieve a\nsingle matching row,  or call :meth:`fetchall` to get a list of the matching\nrows.\n\nThis example uses the iterator form::\n\n   >>> c = conn.cursor()\n   >>> c.execute('select * from stocks order by price')\n   >>> for row in c:\n   ...    print row\n   ...\n   (u'2006-01-05', u'BUY', u'RHAT', 100, 35.140000000000001)\n   (u'2006-03-28', u'BUY', u'IBM', 1000, 45.0)\n   (u'2006-04-06', u'SELL', u'IBM', 500, 53.0)\n   (u'2006-04-05', u'BUY', u'MSOFT', 1000, 72.0)\n   >>>\n\nFor more information about the SQL dialect supported by SQLite, see\nhttps://www.sqlite.org.\n\n\n.. seealso::\n\n   http://www.pysqlite.org\n      The pysqlite web page.\n\n   https://www.sqlite.org\n      The SQLite web page; the documentation describes the syntax and the available\n      data types for the supported SQL dialect.\n\n   The documentation  for the :mod:`sqlite3` module.\n\n   :pep:`249` - Database API Specification 2.0\n      PEP written by Marc-Andr\u00e9 Lemburg.\n\n.. ======================================================================\n\n\n.. _module-wsgiref:\n\nThe wsgiref package\n-------------------\n\nThe Web Server Gateway Interface (WSGI) v1.0 defines a standard interface\nbetween web servers and Python web applications and is described in :pep:`333`.\nThe :mod:`wsgiref` package is a reference implementation of the WSGI\nspecification.\n\n.. XXX should this be in a PEP 333 section instead?\n\nThe package includes a basic HTTP server that will run a WSGI application; this\nserver is useful for debugging but isn't intended for  production use.  Setting\nup a server takes only a few lines of code::\n\n   from wsgiref import simple_server\n\n   wsgi_app = ...\n\n   host = ''\n   port = 8000\n   httpd = simple_server.make_server(host, port, wsgi_app)\n   httpd.serve_forever()\n\n.. XXX discuss structure of WSGI applications?\n.. XXX provide an example using Django or some other framework?\n\n\n.. seealso::\n\n   http://www.wsgi.org\n      A central web site for WSGI-related resources.\n\n   :pep:`333` - Python Web Server Gateway Interface v1.0\n      PEP written by Phillip J. Eby.\n\n.. ======================================================================\n\n\n.. _build-api:\n\nBuild and C API Changes\n=======================\n\nChanges to Python's build process and to the C API include:\n\n* The Python source tree was converted from CVS to Subversion,  in a complex\n  migration procedure that was supervised and flawlessly carried out by Martin von\n  L\u00f6wis.  The procedure was developed as :pep:`347`.\n\n* Coverity, a company that markets a source code analysis tool called Prevent,\n  provided the results of their examination of the Python source code.  The\n  analysis found about 60 bugs that  were quickly fixed.  Many of the bugs were\n  refcounting problems, often occurring in error-handling code.  See\n  https://scan.coverity.com for the statistics.\n\n* The largest change to the C API came from :pep:`353`, which modifies the\n  interpreter to use a :c:type:`Py_ssize_t` type definition instead of\n  :c:type:`int`.  See the earlier section :ref:`pep-353` for a discussion of this\n  change.\n\n* The design of the bytecode compiler has changed a great deal,  no longer\n  generating bytecode by traversing the parse tree.  Instead the parse tree is\n  converted to an abstract syntax tree (or AST), and it is  the abstract syntax\n  tree that's traversed to produce the bytecode.\n\n  It's possible for Python code to obtain AST objects by using the\n  :func:`compile` built-in and specifying ``_ast.PyCF_ONLY_AST`` as the value of\n  the  *flags* parameter::\n\n     from _ast import PyCF_ONLY_AST\n     ast = compile(\"\"\"a=0\n     for i in range(10):\n         a += i\n     \"\"\", \"<string>\", 'exec', PyCF_ONLY_AST)\n\n     assignment = ast.body[0]\n     for_loop = ast.body[1]\n\n  No official documentation has been written for the AST code yet, but :pep:`339`\n  discusses the design.  To start learning about the code, read the definition of\n  the various AST nodes in :file:`Parser/Python.asdl`.  A Python script reads this\n  file and generates a set of C structure definitions in\n  :file:`Include/Python-ast.h`.  The :c:func:`PyParser_ASTFromString` and\n  :c:func:`PyParser_ASTFromFile`, defined in :file:`Include/pythonrun.h`, take\n  Python source as input and return the root of an AST representing the contents.\n  This AST can then be turned into a code object by :c:func:`PyAST_Compile`.  For\n  more information, read the source code, and then ask questions on python-dev.\n\n  The AST code was developed under Jeremy Hylton's management, and implemented by\n  (in alphabetical order) Brett Cannon, Nick Coghlan, Grant Edwards, John\n  Ehresman, Kurt Kaiser, Neal Norwitz, Tim Peters, Armin Rigo, and Neil\n  Schemenauer, plus the participants in a number of AST sprints at conferences\n  such as PyCon.\n\n  .. List of names taken from Jeremy's python-dev post at\n  .. https://mail.python.org/pipermail/python-dev/2005-October/057500.html\n\n* Evan Jones's patch to obmalloc, first described in a talk at PyCon DC 2005,\n  was applied.  Python 2.4 allocated small objects in 256K-sized arenas, but never\n  freed arenas.  With this patch, Python will free arenas when they're empty.  The\n  net effect is that on some platforms, when you allocate many objects, Python's\n  memory usage may actually drop when you delete them and the memory may be\n  returned to the operating system.  (Implemented by Evan Jones, and reworked by\n  Tim Peters.)\n\n  Note that this change means extension modules must be more careful when\n  allocating memory.  Python's API has many different functions for allocating\n  memory that are grouped into families.  For example, :c:func:`PyMem_Malloc`,\n  :c:func:`PyMem_Realloc`, and :c:func:`PyMem_Free` are one family that allocates\n  raw memory, while :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, and\n  :c:func:`PyObject_Free` are another family that's supposed to be used for\n  creating Python objects.\n\n  Previously these different families all reduced to the platform's\n  :c:func:`malloc` and :c:func:`free` functions.  This meant  it didn't matter if\n  you got things wrong and allocated memory with the :c:func:`PyMem` function but\n  freed it with the :c:func:`PyObject` function.  With 2.5's changes to obmalloc,\n  these families now do different things and mismatches will probably result in a\n  segfault.  You should carefully test your C extension modules with Python 2.5.\n\n* The built-in set types now have an official C API.  Call :c:func:`PySet_New`\n  and :c:func:`PyFrozenSet_New` to create a new set, :c:func:`PySet_Add` and\n  :c:func:`PySet_Discard` to add and remove elements, and :c:func:`PySet_Contains`\n  and :c:func:`PySet_Size` to examine the set's state. (Contributed by Raymond\n  Hettinger.)\n\n* C code can now obtain information about the exact revision of the Python\n  interpreter by calling the  :c:func:`Py_GetBuildInfo` function that returns a\n  string of build information like this: ``\"trunk:45355:45356M, Apr 13 2006,\n  07:42:19\"``.   (Contributed by Barry Warsaw.)\n\n* Two new macros can be used to indicate C functions that are local to the\n  current file so that a faster calling convention can be used.\n  ``Py_LOCAL(type)`` declares the function as returning a value of the\n  specified *type* and uses a fast-calling qualifier.\n  ``Py_LOCAL_INLINE(type)`` does the same thing and also requests the\n  function be inlined.  If :c:func:`PY_LOCAL_AGGRESSIVE` is defined before\n  :file:`python.h` is included, a set of more aggressive optimizations are enabled\n  for the module; you should benchmark the results to find out if these\n  optimizations actually make the code faster.  (Contributed by Fredrik Lundh at\n  the NeedForSpeed sprint.)\n\n* ``PyErr_NewException(name, base, dict)`` can now accept a tuple of base\n  classes as its *base* argument.  (Contributed by Georg Brandl.)\n\n* The :c:func:`PyErr_Warn` function for issuing warnings is now deprecated in\n  favour of ``PyErr_WarnEx(category, message, stacklevel)`` which lets you\n  specify the number of stack frames separating this function and the caller.  A\n  *stacklevel* of 1 is the function calling :c:func:`PyErr_WarnEx`, 2 is the\n  function above that, and so forth.  (Added by Neal Norwitz.)\n\n* The CPython interpreter is still written in C, but  the code can now be\n  compiled with a C++ compiler without errors.   (Implemented by Anthony Baxter,\n  Martin von L\u00f6wis, Skip Montanaro.)\n\n* The :c:func:`PyRange_New` function was removed.  It was never documented, never\n  used in the core code, and had dangerously lax error checking.  In the unlikely\n  case that your extensions were using it, you can replace it by something like\n  the following::\n\n     range = PyObject_CallFunction((PyObject*) &PyRange_Type, \"lll\",\n                                   start, stop, step);\n\n.. ======================================================================\n\n\n.. _ports:\n\nPort-Specific Changes\n---------------------\n\n* MacOS X (10.3 and higher): dynamic loading of modules now uses the\n  :c:func:`dlopen` function instead of MacOS-specific functions.\n\n* MacOS X: an :option:`!--enable-universalsdk` switch was added to the\n  :program:`configure` script that compiles the interpreter as a universal binary\n  able to run on both PowerPC and Intel processors. (Contributed by Ronald\n  Oussoren; :issue:`2573`.)\n\n* Windows: :file:`.dll` is no longer supported as a filename extension for\n  extension modules.  :file:`.pyd` is now the only filename extension that will be\n  searched for.\n\n.. ======================================================================\n\n\n.. _porting:\n\nPorting to Python 2.5\n=====================\n\nThis section lists previously described changes that may require changes to your\ncode:\n\n* ASCII is now the default encoding for modules.  It's now  a syntax error if a\n  module contains string literals with 8-bit characters but doesn't have an\n  encoding declaration.  In Python 2.4 this triggered a warning, not a syntax\n  error.\n\n* Previously, the :attr:`gi_frame` attribute of a generator was always a frame\n  object.  Because of the :pep:`342` changes described in section :ref:`pep-342`,\n  it's now possible for :attr:`gi_frame` to be ``None``.\n\n* A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to\n  compare a Unicode string and an 8-bit string that can't be converted to Unicode\n  using the default ASCII encoding.  Previously such comparisons would raise a\n  :class:`UnicodeDecodeError` exception.\n\n* Library: the :mod:`csv` module is now stricter about multi-line quoted fields.\n  If your files contain newlines embedded within fields, the input should be split\n  into lines in a manner which preserves the newline characters.\n\n* Library: the :mod:`locale` module's  :func:`format` function's would\n  previously  accept any string as long as no more than one %char specifier\n  appeared.  In Python 2.5, the argument must be exactly one %char specifier with\n  no surrounding text.\n\n* Library: The :mod:`pickle` and :mod:`cPickle` modules no longer accept a\n  return value of ``None`` from the :meth:`__reduce__` method; the method must\n  return a tuple of arguments instead.  The modules also no longer accept the\n  deprecated *bin* keyword parameter.\n\n* Library: The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  classes now\n  have a :attr:`rpc_paths` attribute that constrains XML-RPC operations to a\n  limited set of URL paths; the default is to allow only ``'/'`` and ``'/RPC2'``.\n  Setting  :attr:`rpc_paths` to ``None`` or an empty tuple disables  this path\n  checking.\n\n* C API: Many functions now use :c:type:`Py_ssize_t`  instead of :c:type:`int` to\n  allow processing more data on 64-bit machines.  Extension code may need to make\n  the same change to avoid warnings and to support 64-bit machines.  See the\n  earlier section :ref:`pep-353` for a discussion of this change.\n\n* C API:  The obmalloc changes mean that  you must be careful to not mix usage\n  of the :c:func:`PyMem_\\*` and :c:func:`PyObject_\\*` families of functions. Memory\n  allocated with  one family's :c:func:`\\*_Malloc` must be  freed with the\n  corresponding family's :c:func:`\\*_Free` function.\n\n.. ======================================================================\n\n\nAcknowledgements\n================\n\nThe author would like to thank the following people for offering suggestions,\ncorrections and assistance with various drafts of this article: Georg Brandl,\nNick Coghlan, Phillip J. Eby, Lars Gust\u00e4bel, Raymond Hettinger, Ralf W.\nGrosse-Kunstleve, Kent Johnson, Iain Lowe, Martin von L\u00f6wis, Fredrik Lundh, Andrew\nMcNamara, Skip Montanaro, Gustavo Niemeyer, Paul Prescod, James Pryor, Mike\nRovner, Scott Weikart, Barry Warsaw, Thomas Wouters.\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/whatsnew/3.3.rst": "****************************\n  What's New In Python 3.3\n****************************\n\n.. Rules for maintenance:\n\n   * Anyone can add text to this document.  Do not spend very much time\n   on the wording of your changes, because your text will probably\n   get rewritten to some degree.\n\n   * The maintainer will go through Misc/NEWS periodically and add\n   changes; it's therefore more important to add your changes to\n   Misc/NEWS than to this file.\n\n   * This is not a complete list of every single change; completeness\n   is the purpose of Misc/NEWS.  Some changes I consider too small\n   or esoteric to include.  If such a change is added to the text,\n   I'll just remove it.  (This is another reason you shouldn't spend\n   too much time on writing your addition.)\n\n   * If you want to draw your new text to the attention of the\n   maintainer, add 'XXX' to the beginning of the paragraph or\n   section.\n\n   * It's OK to just add a fragmentary note about a change.  For\n   example: \"XXX Describe the transmogrify() function added to the\n   socket module.\"  The maintainer will research the change and\n   write the necessary text.\n\n   * You can comment out your additions if you like, but it's not\n   necessary (especially when a final release is some months away).\n\n   * Credit the author of a patch or bugfix.   Just the name is\n   sufficient; the e-mail address isn't necessary.\n\n   * It's helpful to add the bug/patch number as a comment:\n\n   XXX Describe the transmogrify() function added to the socket\n   module.\n   (Contributed by P.Y. Developer in :issue:`12345`.)\n\n   This saves the maintainer the effort of going through the Mercurial log\n   when researching a change.\n\nThis article explains the new features in Python 3.3, compared to 3.2.\nPython 3.3 was released on September 29, 2012.  For full details,\nsee the `changelog <https://docs.python.org/3.3/whatsnew/changelog.html>`_.\n\n.. seealso::\n\n    :pep:`398` - Python 3.3 Release Schedule\n\n\nSummary -- Release highlights\n=============================\n\n.. This section singles out the most important changes in Python 3.3.\n   Brevity is key.\n\nNew syntax features:\n\n* New ``yield from`` expression for :ref:`generator delegation <pep-380>`.\n* The ``u'unicode'`` syntax is accepted again for :class:`str` objects.\n\nNew library modules:\n\n* :mod:`faulthandler` (helps debugging low-level crashes)\n* :mod:`ipaddress` (high-level objects representing IP addresses and masks)\n* :mod:`lzma` (compress data using the XZ / LZMA algorithm)\n* :mod:`unittest.mock` (replace parts of your system under test with mock objects)\n* :mod:`venv` (Python :ref:`virtual environments <pep-405>`, as in the\n  popular ``virtualenv`` package)\n\nNew built-in features:\n\n* Reworked :ref:`I/O exception hierarchy <pep-3151>`.\n\nImplementation improvements:\n\n* Rewritten :ref:`import machinery <importlib>` based on :mod:`importlib`.\n* More compact :ref:`unicode strings <pep-393>`.\n* More compact :ref:`attribute dictionaries <pep-412>`.\n\nSignificantly Improved Library Modules:\n\n* C Accelerator for the :ref:`decimal <new-decimal>` module.\n* Better unicode handling in the :ref:`email <new-email>` module\n  (:term:`provisional <provisional package>`).\n\nSecurity improvements:\n\n* Hash randomization is switched on by default.\n\nPlease read on for a comprehensive list of user-facing changes.\n\n\n.. _pep-405:\n\nPEP 405: Virtual Environments\n=============================\n\nVirtual environments help create separate Python setups while sharing a\nsystem-wide base install, for ease of maintenance.  Virtual environments\nhave their own set of private site packages (i.e. locally-installed\nlibraries), and are optionally segregated from the system-wide site\npackages.  Their concept and implementation are inspired by the popular\n``virtualenv`` third-party package, but benefit from tighter integration\nwith the interpreter core.\n\nThis PEP adds the :mod:`venv` module for programmatic access, and the\n:ref:`pyvenv <scripts-pyvenv>` script for command-line access and\nadministration.  The Python interpreter checks for a ``pyvenv.cfg``,\nfile whose existence signals the base of a virtual environment's directory\ntree.\n\n.. seealso::\n\n    :pep:`405` - Python Virtual Environments\n       PEP written by Carl Meyer; implementation by Carl Meyer and Vinay Sajip\n\n\nPEP 420: Implicit Namespace Packages\n====================================\n\nNative support for package directories that don't require ``__init__.py``\nmarker files and can automatically span multiple path segments (inspired by\nvarious third party approaches to namespace packages, as described in\n:pep:`420`)\n\n.. seealso::\n\n   :pep:`420` - Implicit Namespace Packages\n      PEP written by Eric V. Smith; implementation by Eric V. Smith\n      and Barry Warsaw\n\n\n.. _pep-3118-update:\n\nPEP 3118: New memoryview implementation and buffer protocol documentation\n=========================================================================\n\nThe implementation of :pep:`3118` has been significantly improved.\n\nThe new memoryview implementation comprehensively fixes all ownership and\nlifetime issues of dynamically allocated fields in the Py_buffer struct\nthat led to multiple crash reports. Additionally, several functions that\ncrashed or returned incorrect results for non-contiguous or multi-dimensional\ninput have been fixed.\n\nThe memoryview object now has a PEP-3118 compliant getbufferproc()\nthat checks the consumer's request type. Many new features have been\nadded, most of them work in full generality for non-contiguous arrays\nand arrays with suboffsets.\n\nThe documentation has been updated, clearly spelling out responsibilities\nfor both exporters and consumers. Buffer request flags are grouped into\nbasic and compound flags. The memory layout of non-contiguous and\nmulti-dimensional NumPy-style arrays is explained.\n\nFeatures\n--------\n\n* All native single character format specifiers in struct module syntax\n  (optionally prefixed with '@') are now supported.\n\n* With some restrictions, the cast() method allows changing of format and\n  shape of C-contiguous arrays.\n\n* Multi-dimensional list representations are supported for any array type.\n\n* Multi-dimensional comparisons are supported for any array type.\n\n* One-dimensional memoryviews of hashable (read-only) types with formats B,\n  b or c are now hashable.  (Contributed by Antoine Pitrou in :issue:`13411`.)\n\n* Arbitrary slicing of any 1-D arrays type is supported. For example, it\n  is now possible to reverse a memoryview in O(1) by using a negative step.\n\nAPI changes\n-----------\n\n* The maximum number of dimensions is officially limited to 64.\n\n* The representation of empty shape, strides and suboffsets is now\n  an empty tuple instead of ``None``.\n\n* Accessing a memoryview element with format 'B' (unsigned bytes)\n  now returns an integer (in accordance with the struct module syntax).\n  For returning a bytes object the view must be cast to 'c' first.\n\n* memoryview comparisons now use the logical structure of the operands\n  and compare all array elements by value. All format strings in struct\n  module syntax are supported. Views with unrecognised format strings\n  are still permitted, but will always compare as unequal, regardless\n  of view contents.\n\n* For further changes see `Build and C API Changes`_ and `Porting C code`_.\n\n(Contributed by Stefan Krah in :issue:`10181`.)\n\n.. seealso::\n\n   :pep:`3118` - Revising the Buffer Protocol\n\n\n.. _pep-393:\n\nPEP 393: Flexible String Representation\n=======================================\n\nThe Unicode string type is changed to support multiple internal\nrepresentations, depending on the character with the largest Unicode ordinal\n(1, 2, or 4 bytes) in the represented string.  This allows a space-efficient\nrepresentation in common cases, but gives access to full UCS-4 on all\nsystems.  For compatibility with existing APIs, several representations may\nexist in parallel; over time, this compatibility should be phased out.\n\nOn the Python side, there should be no downside to this change.\n\nOn the C API side, PEP 393 is fully backward compatible.  The legacy API\nshould remain available at least five years.  Applications using the legacy\nAPI will not fully benefit of the memory reduction, or - worse - may use\na bit more memory, because Python may have to maintain two versions of each\nstring (in the legacy format and in the new efficient storage).\n\nFunctionality\n-------------\n\nChanges introduced by :pep:`393` are the following:\n\n* Python now always supports the full range of Unicode code points, including\n  non-BMP ones (i.e. from ``U+0000`` to ``U+10FFFF``).  The distinction between\n  narrow and wide builds no longer exists and Python now behaves like a wide\n  build, even under Windows.\n\n* With the death of narrow builds, the problems specific to narrow builds have\n  also been fixed, for example:\n\n  * :func:`len` now always returns 1 for non-BMP characters,\n    so ``len('\\U0010FFFF') == 1``;\n\n  * surrogate pairs are not recombined in string literals,\n    so ``'\\uDBFF\\uDFFF' != '\\U0010FFFF'``;\n\n  * indexing or slicing non-BMP characters returns the expected value,\n    so ``'\\U0010FFFF'[0]`` now returns ``'\\U0010FFFF'`` and not ``'\\uDBFF'``;\n\n  * all other functions in the standard library now correctly handle\n    non-BMP code points.\n\n* The value of :data:`sys.maxunicode` is now always ``1114111`` (``0x10FFFF``\n  in hexadecimal).  The :c:func:`PyUnicode_GetMax` function still returns\n  either ``0xFFFF`` or ``0x10FFFF`` for backward compatibility, and it should\n  not be used with the new Unicode API (see :issue:`13054`).\n\n* The :file:`./configure` flag ``--with-wide-unicode`` has been removed.\n\nPerformance and resource usage\n------------------------------\n\nThe storage of Unicode strings now depends on the highest code point in the string:\n\n* pure ASCII and Latin1 strings (``U+0000-U+00FF``) use 1 byte per code point;\n\n* BMP strings (``U+0000-U+FFFF``) use 2 bytes per code point;\n\n* non-BMP strings (``U+10000-U+10FFFF``) use 4 bytes per code point.\n\nThe net effect is that for most applications, memory usage of string\nstorage should decrease significantly - especially compared to former\nwide unicode builds - as, in many cases, strings will be pure ASCII\neven in international contexts (because many strings store non-human\nlanguage data, such as XML fragments, HTTP headers, JSON-encoded data,\netc.).  We also hope that it will, for the same reasons, increase CPU\ncache efficiency on non-trivial applications. The memory usage of\nPython 3.3 is two to three times smaller than Python 3.2, and a little\nbit better than Python 2.7, on a Django benchmark (see the PEP for\ndetails).\n\n.. seealso::\n\n   :pep:`393` - Flexible String Representation\n      PEP written by Martin von L\u00f6wis; implementation by Torsten Becker\n      and Martin von L\u00f6wis.\n\n\n.. _pep-397:\n\nPEP 397: Python Launcher for Windows\n====================================\n\nThe Python 3.3 Windows installer now includes a ``py`` launcher application\nthat can be used to launch Python applications in a version independent\nfashion.\n\nThis launcher is invoked implicitly when double-clicking ``*.py`` files.\nIf only a single Python version is installed on the system, that version\nwill be used to run the file. If multiple versions are installed, the most\nrecent version is used by default, but this can be overridden by including\na Unix-style \"shebang line\" in the Python script.\n\nThe launcher can also be used explicitly from the command line as the ``py``\napplication. Running ``py`` follows the same version selection rules as\nimplicitly launching scripts, but a more specific version can be selected\nby passing appropriate arguments (such as ``-3`` to request Python 3 when\nPython 2 is also installed, or ``-2.6`` to specifclly request an earlier\nPython version when a more recent version is installed).\n\nIn addition to the launcher, the Windows installer now includes an\noption to add the newly installed Python to the system PATH.  (Contributed\nby Brian Curtin in :issue:`3561`.)\n\n.. seealso::\n\n   :pep:`397` - Python Launcher for Windows\n      PEP written by Mark Hammond and Martin v. L\u00f6wis; implementation by\n      Vinay Sajip.\n\n   Launcher documentation: :ref:`launcher`\n\n   Installer PATH modification: :ref:`windows-path-mod`\n\n\n.. _pep-3151:\n\nPEP 3151: Reworking the OS and IO exception hierarchy\n=====================================================\n\nThe hierarchy of exceptions raised by operating system errors is now both\nsimplified and finer-grained.\n\nYou don't have to worry anymore about choosing the appropriate exception\ntype between :exc:`OSError`, :exc:`IOError`, :exc:`EnvironmentError`,\n:exc:`WindowsError`, :exc:`mmap.error`, :exc:`socket.error` or\n:exc:`select.error`.  All these exception types are now only one:\n:exc:`OSError`.  The other names are kept as aliases for compatibility\nreasons.\n\nAlso, it is now easier to catch a specific error condition.  Instead of\ninspecting the ``errno`` attribute (or ``args[0]``) for a particular\nconstant from the :mod:`errno` module, you can catch the adequate\n:exc:`OSError` subclass.  The available subclasses are the following:\n\n* :exc:`BlockingIOError`\n* :exc:`ChildProcessError`\n* :exc:`ConnectionError`\n* :exc:`FileExistsError`\n* :exc:`FileNotFoundError`\n* :exc:`InterruptedError`\n* :exc:`IsADirectoryError`\n* :exc:`NotADirectoryError`\n* :exc:`PermissionError`\n* :exc:`ProcessLookupError`\n* :exc:`TimeoutError`\n\nAnd the :exc:`ConnectionError` itself has finer-grained subclasses:\n\n* :exc:`BrokenPipeError`\n* :exc:`ConnectionAbortedError`\n* :exc:`ConnectionRefusedError`\n* :exc:`ConnectionResetError`\n\nThanks to the new exceptions, common usages of the :mod:`errno` can now be\navoided.  For example, the following code written for Python 3.2::\n\n    from errno import ENOENT, EACCES, EPERM\n\n    try:\n        with open(\"document.txt\") as f:\n            content = f.read()\n    except IOError as err:\n        if err.errno == ENOENT:\n            print(\"document.txt file is missing\")\n        elif err.errno in (EACCES, EPERM):\n            print(\"You are not allowed to read document.txt\")\n        else:\n            raise\n\ncan now be written without the :mod:`errno` import and without manual\ninspection of exception attributes::\n\n    try:\n        with open(\"document.txt\") as f:\n            content = f.read()\n    except FileNotFoundError:\n        print(\"document.txt file is missing\")\n    except PermissionError:\n        print(\"You are not allowed to read document.txt\")\n\n.. seealso::\n\n   :pep:`3151` - Reworking the OS and IO Exception Hierarchy\n      PEP written and implemented by Antoine Pitrou\n\n\n.. index::\n   single: yield; yield from (in What's New)\n\n.. _pep-380:\n\nPEP 380: Syntax for Delegating to a Subgenerator\n================================================\n\nPEP 380 adds the ``yield from`` expression, allowing a :term:`generator` to\ndelegate\npart of its operations to another generator. This allows a section of code\ncontaining :keyword:`yield` to be factored out and placed in another generator.\nAdditionally, the subgenerator is allowed to return with a value, and the\nvalue is made available to the delegating generator.\n\nWhile designed primarily for use in delegating to a subgenerator, the ``yield\nfrom`` expression actually allows delegation to arbitrary subiterators.\n\nFor simple iterators, ``yield from iterable`` is essentially just a shortened\nform of ``for item in iterable: yield item``::\n\n    >>> def g(x):\n    ...     yield from range(x, 0, -1)\n    ...     yield from range(x)\n    ...\n    >>> list(g(5))\n    [5, 4, 3, 2, 1, 0, 1, 2, 3, 4]\n\nHowever, unlike an ordinary loop, ``yield from`` allows subgenerators to\nreceive sent and thrown values directly from the calling scope, and\nreturn a final value to the outer generator::\n\n    >>> def accumulate():\n    ...     tally = 0\n    ...     while 1:\n    ...         next = yield\n    ...         if next is None:\n    ...             return tally\n    ...         tally += next\n    ...\n    >>> def gather_tallies(tallies):\n    ...     while 1:\n    ...         tally = yield from accumulate()\n    ...         tallies.append(tally)\n    ...\n    >>> tallies = []\n    >>> acc = gather_tallies(tallies)\n    >>> next(acc)  # Ensure the accumulator is ready to accept values\n    >>> for i in range(4):\n    ...     acc.send(i)\n    ...\n    >>> acc.send(None)  # Finish the first tally\n    >>> for i in range(5):\n    ...     acc.send(i)\n    ...\n    >>> acc.send(None)  # Finish the second tally\n    >>> tallies\n    [6, 10]\n\nThe main principle driving this change is to allow even generators that are\ndesigned to be used with the ``send`` and ``throw`` methods to be split into\nmultiple subgenerators as easily as a single large function can be split into\nmultiple subfunctions.\n\n.. seealso::\n\n   :pep:`380` - Syntax for Delegating to a Subgenerator\n      PEP written by Greg Ewing; implementation by Greg Ewing, integrated into\n      3.3 by Renaud Blanch, Ryan Kelly and Nick Coghlan; documentation by\n      Zbigniew J\u0119drzejewski-Szmek and Nick Coghlan\n\n\nPEP 409: Suppressing exception context\n======================================\n\nPEP 409 introduces new syntax that allows the display of the chained\nexception context to be disabled. This allows cleaner error messages in\napplications that convert between exception types::\n\n    >>> class D:\n    ...     def __init__(self, extra):\n    ...         self._extra_attributes = extra\n    ...     def __getattr__(self, attr):\n    ...         try:\n    ...             return self._extra_attributes[attr]\n    ...         except KeyError:\n    ...             raise AttributeError(attr) from None\n    ...\n    >>> D({}).x\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"<stdin>\", line 8, in __getattr__\n    AttributeError: x\n\nWithout the ``from None`` suffix to suppress the cause, the original\nexception would be displayed by default::\n\n    >>> class C:\n    ...     def __init__(self, extra):\n    ...         self._extra_attributes = extra\n    ...     def __getattr__(self, attr):\n    ...         try:\n    ...             return self._extra_attributes[attr]\n    ...         except KeyError:\n    ...             raise AttributeError(attr)\n    ...\n    >>> C({}).x\n    Traceback (most recent call last):\n      File \"<stdin>\", line 6, in __getattr__\n    KeyError: 'x'\n\n    During handling of the above exception, another exception occurred:\n\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"<stdin>\", line 8, in __getattr__\n    AttributeError: x\n\nNo debugging capability is lost, as the original exception context remains\navailable if needed (for example, if an intervening library has incorrectly\nsuppressed valuable underlying details)::\n\n    >>> try:\n    ...     D({}).x\n    ... except AttributeError as exc:\n    ...     print(repr(exc.__context__))\n    ...\n    KeyError('x',)\n\n.. seealso::\n\n   :pep:`409` - Suppressing exception context\n      PEP written by Ethan Furman; implemented by Ethan Furman and Nick\n      Coghlan.\n\n\nPEP 414: Explicit Unicode literals\n======================================\n\nTo ease the transition from Python 2 for Unicode aware Python applications\nthat make heavy use of Unicode literals, Python 3.3 once again supports the\n\"``u``\" prefix for string literals. This prefix has no semantic significance\nin Python 3, it is provided solely to reduce the number of purely mechanical\nchanges in migrating to Python 3, making it easier for developers to focus on\nthe more significant semantic changes (such as the stricter default\nseparation of binary and text data).\n\n.. seealso::\n\n   :pep:`414` - Explicit Unicode literals\n      PEP written by Armin Ronacher.\n\n\nPEP 3155: Qualified name for classes and functions\n==================================================\n\nFunctions and class objects have a new ``__qualname__`` attribute representing\nthe \"path\" from the module top-level to their definition.  For global functions\nand classes, this is the same as ``__name__``.  For other functions and classes,\nit provides better information about where they were actually defined, and\nhow they might be accessible from the global scope.\n\nExample with (non-bound) methods::\n\n   >>> class C:\n   ...     def meth(self):\n   ...         pass\n   >>> C.meth.__name__\n   'meth'\n   >>> C.meth.__qualname__\n   'C.meth'\n\nExample with nested classes::\n\n   >>> class C:\n   ...     class D:\n   ...         def meth(self):\n   ...             pass\n   ...\n   >>> C.D.__name__\n   'D'\n   >>> C.D.__qualname__\n   'C.D'\n   >>> C.D.meth.__name__\n   'meth'\n   >>> C.D.meth.__qualname__\n   'C.D.meth'\n\nExample with nested functions::\n\n   >>> def outer():\n   ...     def inner():\n   ...         pass\n   ...     return inner\n   ...\n   >>> outer().__name__\n   'inner'\n   >>> outer().__qualname__\n   'outer.<locals>.inner'\n\nThe string representation of those objects is also changed to include the\nnew, more precise information::\n\n   >>> str(C.D)\n   \"<class '__main__.C.D'>\"\n   >>> str(C.D.meth)\n   '<function C.D.meth at 0x7f46b9fe31e0>'\n\n.. seealso::\n\n   :pep:`3155` - Qualified name for classes and functions\n      PEP written and implemented by Antoine Pitrou.\n\n\n.. _pep-412:\n\nPEP 412: Key-Sharing Dictionary\n===============================\n\nDictionaries used for the storage of objects' attributes are now able to\nshare part of their internal storage between each other (namely, the part\nwhich stores the keys and their respective hashes).  This reduces the memory\nconsumption of programs creating many instances of non-builtin types.\n\n.. seealso::\n\n   :pep:`412` - Key-Sharing Dictionary\n      PEP written and implemented by Mark Shannon.\n\n\nPEP 362: Function Signature Object\n==================================\n\nA new function :func:`inspect.signature` makes introspection of python\ncallables easy and straightforward.  A broad range of callables is supported:\npython functions, decorated or not, classes, and :func:`functools.partial`\nobjects.  New classes :class:`inspect.Signature`, :class:`inspect.Parameter`\nand :class:`inspect.BoundArguments` hold information about the call signatures,\nsuch as, annotations, default values, parameters kinds, and bound arguments,\nwhich considerably simplifies writing decorators and any code that validates\nor amends calling signatures or arguments.\n\n.. seealso::\n\n   :pep:`362`: -  Function Signature Object\n      PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon Seo;\n      implemented by Yury Selivanov.\n\n\nPEP 421: Adding sys.implementation\n==================================\n\nA new attribute on the :mod:`sys` module exposes details specific to the\nimplementation of the currently running interpreter.  The initial set of\nattributes on :attr:`sys.implementation` are ``name``, ``version``,\n``hexversion``, and ``cache_tag``.\n\nThe intention of ``sys.implementation`` is to consolidate into one namespace\nthe implementation-specific data used by the standard library.  This allows\ndifferent Python implementations to share a single standard library code base\nmuch more easily.  In its initial state, ``sys.implementation`` holds only a\nsmall portion of the implementation-specific data.  Over time that ratio will\nshift in order to make the standard library more portable.\n\nOne example of improved standard library portability is ``cache_tag``.  As of\nPython 3.3, ``sys.implementation.cache_tag`` is used by :mod:`importlib` to\nsupport :pep:`3147` compliance.  Any Python implementation that uses\n``importlib`` for its built-in import system may use ``cache_tag`` to control\nthe caching behavior for modules.\n\nSimpleNamespace\n---------------\n\nThe implementation of ``sys.implementation`` also introduces a new type to\nPython: :class:`types.SimpleNamespace`.  In contrast to a mapping-based\nnamespace, like :class:`dict`, ``SimpleNamespace`` is attribute-based, like\n:class:`object`.  However, unlike ``object``, ``SimpleNamespace`` instances\nare writable.  This means that you can add, remove, and modify the namespace\nthrough normal attribute access.\n\n.. seealso::\n\n   :pep:`421` - Adding sys.implementation\n      PEP written and implemented by Eric Snow.\n\n\n.. _importlib:\n\nUsing importlib as the Implementation of Import\n===============================================\n:issue:`2377` - Replace __import__ w/ importlib.__import__\n:issue:`13959` - Re-implement parts of :mod:`imp` in pure Python\n:issue:`14605` - Make import machinery explicit\n:issue:`14646` - Require loaders set __loader__ and __package__\n\nThe :func:`__import__` function is now powered by :func:`importlib.__import__`.\nThis work leads to the completion of \"phase 2\" of :pep:`302`. There are\nmultiple benefits to this change. First, it has allowed for more of the\nmachinery powering import to be exposed instead of being implicit and hidden\nwithin the C code. It also provides a single implementation for all Python VMs\nsupporting Python 3.3 to use, helping to end any VM-specific deviations in\nimport semantics. And finally it eases the maintenance of import, allowing for\nfuture growth to occur.\n\nFor the common user, there should be no visible change in semantics.  For\nthose whose code currently manipulates import or calls import\nprogrammatically, the code changes that might possibly be required are covered\nin the `Porting Python code`_ section of this document.\n\nNew APIs\n--------\nOne of the large benefits of this work is the exposure of what goes into\nmaking the import statement work. That means the various importers that were\nonce implicit are now fully exposed as part of the :mod:`importlib` package.\n\nThe abstract base classes defined in :mod:`importlib.abc` have been expanded\nto properly delineate between :term:`meta path finders <meta path finder>`\nand :term:`path entry finders <path entry finder>` by introducing\n:class:`importlib.abc.MetaPathFinder` and\n:class:`importlib.abc.PathEntryFinder`, respectively. The old ABC of\n:class:`importlib.abc.Finder` is now only provided for backwards-compatibility\nand does not enforce any method requirements.\n\nIn terms of finders, :class:`importlib.machinery.FileFinder` exposes the\nmechanism used to search for source and bytecode files of a module. Previously\nthis class was an implicit member of :attr:`sys.path_hooks`.\n\nFor loaders, the new abstract base class :class:`importlib.abc.FileLoader` helps\nwrite a loader that uses the file system as the storage mechanism for a module's\ncode. The loader for source files\n(:class:`importlib.machinery.SourceFileLoader`), sourceless bytecode files\n(:class:`importlib.machinery.SourcelessFileLoader`), and extension modules\n(:class:`importlib.machinery.ExtensionFileLoader`) are now available for\ndirect use.\n\n:exc:`ImportError` now has ``name`` and ``path`` attributes which are set when\nthere is relevant data to provide. The message for failed imports will also\nprovide the full name of the module now instead of just the tail end of the\nmodule's name.\n\nThe :func:`importlib.invalidate_caches` function will now call the method with\nthe same name on all finders cached in :attr:`sys.path_importer_cache` to help\nclean up any stored state as necessary.\n\nVisible Changes\n---------------\n\nFor potential required changes to code, see the `Porting Python code`_\nsection.\n\nBeyond the expanse of what :mod:`importlib` now exposes, there are other\nvisible changes to import. The biggest is that :attr:`sys.meta_path` and\n:attr:`sys.path_hooks` now store all of the meta path finders and path entry\nhooks used by import.  Previously the finders were implicit and hidden within\nthe C code of import instead of being directly exposed. This means that one can\nnow easily remove or change the order of the various finders to fit one's needs.\n\nAnother change is that all modules have a ``__loader__`` attribute, storing the\nloader used to create the module. :pep:`302` has been updated to make this\nattribute mandatory for loaders to implement, so in the future once 3rd-party\nloaders have been updated people will be able to rely on the existence of the\nattribute. Until such time, though, import is setting the module post-load.\n\nLoaders are also now expected to set the ``__package__`` attribute from\n:pep:`366`. Once again, import itself is already setting this on all loaders\nfrom :mod:`importlib` and import itself is setting the attribute post-load.\n\n``None`` is now inserted into :attr:`sys.path_importer_cache` when no finder\ncan be found on :attr:`sys.path_hooks`. Since :class:`imp.NullImporter` is not\ndirectly exposed on :attr:`sys.path_hooks` it could no longer be relied upon to\nalways be available to use as a value representing no finder found.\n\nAll other changes relate to semantic changes which should be taken into\nconsideration when updating code for Python 3.3, and thus should be read about\nin the `Porting Python code`_ section of this document.\n\n(Implementation by Brett Cannon)\n\n\nOther Language Changes\n======================\n\nSome smaller changes made to the core Python language are:\n\n* Added support for Unicode name aliases and named sequences.\n  Both :func:`unicodedata.lookup()` and ``'\\N{...}'`` now resolve name aliases,\n  and :func:`unicodedata.lookup()` resolves named sequences too.\n\n  (Contributed by Ezio Melotti in :issue:`12753`.)\n\n* Unicode database updated to UCD version 6.1.0\n\n* Equality comparisons on :func:`range` objects now return a result reflecting\n  the equality of the underlying sequences generated by those range objects.\n  (:issue:`13201`)\n\n* The ``count()``, ``find()``, ``rfind()``, ``index()`` and ``rindex()``\n  methods of :class:`bytes` and :class:`bytearray` objects now accept an\n  integer between 0 and 255 as their first argument.\n\n  (Contributed by Petri Lehtinen in :issue:`12170`.)\n\n* The ``rjust()``, ``ljust()``, and ``center()`` methods of :class:`bytes`\n  and :class:`bytearray` now accept a :class:`bytearray` for the ``fill``\n  argument.  (Contributed by Petri Lehtinen in :issue:`12380`.)\n\n* New methods have been added to :class:`list` and :class:`bytearray`:\n  ``copy()`` and ``clear()`` (:issue:`10516`).  Consequently,\n  :class:`~collections.abc.MutableSequence` now also defines a\n  :meth:`~collections.abc.MutableSequence.clear` method (:issue:`11388`).\n\n* Raw bytes literals can now be written ``rb\"...\"`` as well as ``br\"...\"``.\n\n  (Contributed by Antoine Pitrou in :issue:`13748`.)\n\n* :meth:`dict.setdefault` now does only one lookup for the given key, making\n  it atomic when used with built-in types.\n\n  (Contributed by Filip Gruszczy\u0144ski in :issue:`13521`.)\n\n* The error messages produced when a function call does not match the function\n  signature have been significantly improved.\n\n  (Contributed by Benjamin Peterson.)\n\n\nA Finer-Grained Import Lock\n===========================\n\nPrevious versions of CPython have always relied on a global import lock.\nThis led to unexpected annoyances, such as deadlocks when importing a module\nwould trigger code execution in a different thread as a side-effect.\nClumsy workarounds were sometimes employed, such as the\n:c:func:`PyImport_ImportModuleNoBlock` C API function.\n\nIn Python 3.3, importing a module takes a per-module lock.  This correctly\nserializes importation of a given module from multiple threads (preventing\nthe exposure of incompletely initialized modules), while eliminating the\naforementioned annoyances.\n\n(Contributed by Antoine Pitrou in :issue:`9260`.)\n\n\nBuiltin functions and types\n===========================\n\n* :func:`open` gets a new *opener* parameter: the underlying file descriptor\n  for the file object is then obtained by calling *opener* with (*file*,\n  *flags*). It can be used to use custom flags like :data:`os.O_CLOEXEC` for\n  example. The ``'x'`` mode was added: open for exclusive creation, failing if\n  the file already exists.\n* :func:`print`: added the *flush* keyword argument. If the *flush* keyword\n  argument is true, the stream is forcibly flushed.\n* :func:`hash`: hash randomization is enabled by default, see\n  :meth:`object.__hash__` and :envvar:`PYTHONHASHSEED`.\n* The :class:`str` type gets a new :meth:`~str.casefold` method: return a\n  casefolded copy of the string, casefolded strings may be used for caseless\n  matching. For example, ``'\u00df'.casefold()`` returns ``'ss'``.\n* The sequence documentation has been substantially rewritten to better\n  explain the binary/text sequence distinction and to provide specific\n  documentation sections for the individual builtin sequence types\n  (:issue:`4966`).\n\n\nNew Modules\n===========\n\nfaulthandler\n------------\n\nThis new debug module :mod:`faulthandler` contains functions to dump Python tracebacks explicitly,\non a fault (a crash like a segmentation fault), after a timeout, or on a user\nsignal. Call :func:`faulthandler.enable` to install fault handlers for the\n:const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS`, and\n:const:`SIGILL` signals. You can also enable them at startup by setting the\n:envvar:`PYTHONFAULTHANDLER` environment variable or by using :option:`-X`\n``faulthandler`` command line option.\n\nExample of a segmentation fault on Linux:\n\n.. code-block:: shell-session\n\n    $ python -q -X faulthandler\n    >>> import ctypes\n    >>> ctypes.string_at(0)\n    Fatal Python error: Segmentation fault\n\n    Current thread 0x00007fb899f39700:\n      File \"/home/python/cpython/Lib/ctypes/__init__.py\", line 486 in string_at\n      File \"<stdin>\", line 1 in <module>\n    Segmentation fault\n\n\nipaddress\n---------\n\nThe new :mod:`ipaddress` module provides tools for creating and manipulating\nobjects representing IPv4 and IPv6 addresses, networks and interfaces (i.e.\nan IP address associated with a specific IP subnet).\n\n(Contributed by Google and Peter Moody in :pep:`3144`.)\n\nlzma\n----\n\nThe newly-added :mod:`lzma` module provides data compression and decompression\nusing the LZMA algorithm, including support for the ``.xz`` and ``.lzma``\nfile formats.\n\n(Contributed by Nadeem Vawda and Per \u00d8yvind Karlsen in :issue:`6715`.)\n\n\nImproved Modules\n================\n\nabc\n---\n\nImproved support for abstract base classes containing descriptors composed with\nabstract methods. The recommended approach to declaring abstract descriptors is\nnow to provide :attr:`__isabstractmethod__` as a dynamically updated\nproperty. The built-in descriptors have been updated accordingly.\n\n  * :class:`abc.abstractproperty` has been deprecated, use :class:`property`\n    with :func:`abc.abstractmethod` instead.\n  * :class:`abc.abstractclassmethod` has been deprecated, use\n    :class:`classmethod` with :func:`abc.abstractmethod` instead.\n  * :class:`abc.abstractstaticmethod` has been deprecated, use\n    :class:`staticmethod` with :func:`abc.abstractmethod` instead.\n\n(Contributed by Darren Dale in :issue:`11610`.)\n\n:meth:`abc.ABCMeta.register` now returns the registered subclass, which means\nit can now be used as a class decorator (:issue:`10868`).\n\n\narray\n-----\n\nThe :mod:`array` module supports the :c:type:`long long` type using ``q`` and\n``Q`` type codes.\n\n(Contributed by Oren Tirosh and Hirokazu Yamamoto in :issue:`1172711`.)\n\n\nbase64\n------\n\nASCII-only Unicode strings are now accepted by the decoding functions of the\n:mod:`base64` modern interface. For example, ``base64.b64decode('YWJj')``\nreturns ``b'abc'``.  (Contributed by Catalin Iacob in :issue:`13641`.)\n\n\nbinascii\n--------\n\nIn addition to the binary objects they normally accept, the ``a2b_`` functions\nnow all also accept ASCII-only strings as input.  (Contributed by Antoine\nPitrou in :issue:`13637`.)\n\n\nbz2\n---\n\nThe :mod:`bz2` module has been rewritten from scratch. In the process, several\nnew features have been added:\n\n* New :func:`bz2.open` function: open a bzip2-compressed file in binary or\n  text mode.\n\n* :class:`bz2.BZ2File` can now read from and write to arbitrary file-like\n  objects, by means of its constructor's *fileobj* argument.\n\n  (Contributed by Nadeem Vawda in :issue:`5863`.)\n\n* :class:`bz2.BZ2File` and :func:`bz2.decompress` can now decompress\n  multi-stream inputs (such as those produced by the :program:`pbzip2` tool).\n  :class:`bz2.BZ2File` can now also be used to create this type of file, using\n  the ``'a'`` (append) mode.\n\n  (Contributed by Nir Aides in :issue:`1625`.)\n\n* :class:`bz2.BZ2File` now implements all of the :class:`io.BufferedIOBase` API,\n  except for the :meth:`detach` and :meth:`truncate` methods.\n\n\ncodecs\n------\n\nThe :mod:`~encodings.mbcs` codec has been rewritten to handle correctly\n``replace`` and ``ignore`` error handlers on all Windows versions.  The\n:mod:`~encodings.mbcs` codec now supports all error handlers, instead of only\n``replace`` to encode and ``ignore`` to decode.\n\nA new Windows-only codec has been added: ``cp65001`` (:issue:`13216`). It is the\nWindows code page 65001 (Windows UTF-8, ``CP_UTF8``).  For example, it is used\nby ``sys.stdout`` if the console output code page is set to cp65001 (e.g., using\n``chcp 65001`` command).\n\nMultibyte CJK decoders now resynchronize faster.  They only ignore the first\nbyte of an invalid byte sequence. For example, ``b'\\xff\\n'.decode('gb2312',\n'replace')`` now returns a ``\\n`` after the replacement character.\n\n(:issue:`12016`)\n\nIncremental CJK codec encoders are no longer reset at each call to their\nencode() methods. For example::\n\n    >>> import codecs\n    >>> encoder = codecs.getincrementalencoder('hz')('strict')\n    >>> b''.join(encoder.encode(x) for x in '\\u52ff\\u65bd\\u65bc\\u4eba\\u3002 Bye.')\n    b'~{NpJ)l6HK!#~} Bye.'\n\nThis example gives ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'`` with older Python\nversions.\n\n(:issue:`12100`)\n\nThe ``unicode_internal`` codec has been deprecated.\n\n\ncollections\n-----------\n\nAddition of a new :class:`~collections.ChainMap` class to allow treating a\nnumber of mappings as a single unit.  (Written by Raymond Hettinger for\n:issue:`11089`, made public in :issue:`11297`.)\n\nThe abstract base classes have been moved in a new :mod:`collections.abc`\nmodule, to better differentiate between the abstract and the concrete\ncollections classes.  Aliases for ABCs are still present in the\n:mod:`collections` module to preserve existing imports.  (:issue:`11085`)\n\n.. XXX addition of __slots__ to ABCs not recorded here: internal detail\n\nThe :class:`~collections.Counter` class now supports the unary ``+`` and ``-``\noperators, as well as the in-place operators ``+=``, ``-=``, ``|=``, and\n``&=``.  (Contributed by Raymond Hettinger in :issue:`13121`.)\n\n\ncontextlib\n----------\n\n:class:`~contextlib.ExitStack` now provides a solid foundation for\nprogrammatic manipulation of context managers and similar cleanup\nfunctionality. Unlike the previous ``contextlib.nested`` API (which was\ndeprecated and removed), the new API is designed to work correctly\nregardless of whether context managers acquire their resources in\ntheir ``__init__`` method (for example, file objects) or in their\n``__enter__`` method (for example, synchronisation objects from the\n:mod:`threading` module).\n\n(:issue:`13585`)\n\n\ncrypt\n-----\n\nAddition of salt and modular crypt format (hashing method) and the :func:`~crypt.mksalt`\nfunction to the :mod:`crypt` module.\n\n(:issue:`10924`)\n\ncurses\n------\n\n * If the :mod:`curses` module is linked to the ncursesw library, use Unicode\n   functions when Unicode strings or characters are passed (e.g.\n   :c:func:`waddwstr`), and bytes functions otherwise (e.g. :c:func:`waddstr`).\n * Use the locale encoding instead of ``utf-8`` to encode Unicode strings.\n * :class:`curses.window` has a new :attr:`curses.window.encoding` attribute.\n * The :class:`curses.window` class has a new :meth:`~curses.window.get_wch`\n   method to get a wide character\n * The :mod:`curses` module has a new :meth:`~curses.unget_wch` function to\n   push a wide character so the next :meth:`~curses.window.get_wch` will return\n   it\n\n(Contributed by I\u00f1igo Serna in :issue:`6755`.)\n\ndatetime\n--------\n\n * Equality comparisons between naive and aware :class:`~datetime.datetime`\n   instances now return :const:`False` instead of raising :exc:`TypeError`\n   (:issue:`15006`).\n * New :meth:`datetime.datetime.timestamp` method: Return POSIX timestamp\n   corresponding to the :class:`~datetime.datetime` instance.\n * The :meth:`datetime.datetime.strftime` method supports formatting years\n   older than 1000.\n * The :meth:`datetime.datetime.astimezone` method can now be\n   called without arguments to convert datetime instance to the system\n   timezone.\n\n\n.. _new-decimal:\n\ndecimal\n-------\n\n:issue:`7652` - integrate fast native decimal arithmetic.\n   C-module and libmpdec written by Stefan Krah.\n\nThe new C version of the decimal module integrates the high speed libmpdec\nlibrary for arbitrary precision correctly-rounded decimal floating point\narithmetic. libmpdec conforms to IBM's General Decimal Arithmetic Specification.\n\nPerformance gains range from 10x for database applications to 100x for\nnumerically intensive applications. These numbers are expected gains\nfor standard precisions used in decimal floating point arithmetic. Since\nthe precision is user configurable, the exact figures may vary. For example,\nin integer bignum arithmetic the differences can be significantly higher.\n\nThe following table is meant as an illustration. Benchmarks are available\nat http://www.bytereef.org/mpdecimal/quickstart.html.\n\n   +---------+-------------+--------------+-------------+\n   |         |  decimal.py |   _decimal   |   speedup   |\n   +=========+=============+==============+=============+\n   |   pi    |    42.02s   |    0.345s    |    120x     |\n   +---------+-------------+--------------+-------------+\n   | telco   |   172.19s   |    5.68s     |     30x     |\n   +---------+-------------+--------------+-------------+\n   | psycopg |     3.57s   |    0.29s     |     12x     |\n   +---------+-------------+--------------+-------------+\n\nFeatures\n~~~~~~~~\n\n* The :exc:`~decimal.FloatOperation` signal optionally enables stricter\n  semantics for mixing floats and Decimals.\n\n* If Python is compiled without threads, the C version automatically\n  disables the expensive thread local context machinery. In this case,\n  the variable :data:`~decimal.HAVE_THREADS` is set to ``False``.\n\nAPI changes\n~~~~~~~~~~~\n\n* The C module has the following context limits, depending on the machine\n  architecture:\n\n   +-------------------+---------------------+------------------------------+\n   |                   |       32-bit        |            64-bit            |\n   +===================+=====================+==============================+\n   | :const:`MAX_PREC` | :const:`425000000`  | :const:`999999999999999999`  |\n   +-------------------+---------------------+------------------------------+\n   | :const:`MAX_EMAX` | :const:`425000000`  | :const:`999999999999999999`  |\n   +-------------------+---------------------+------------------------------+\n   | :const:`MIN_EMIN` | :const:`-425000000` | :const:`-999999999999999999` |\n   +-------------------+---------------------+------------------------------+\n\n* In the context templates (:class:`~decimal.DefaultContext`,\n  :class:`~decimal.BasicContext` and :class:`~decimal.ExtendedContext`)\n  the magnitude of :attr:`~decimal.Context.Emax` and\n  :attr:`~decimal.Context.Emin` has changed to :const:`999999`.\n\n* The :class:`~decimal.Decimal` constructor in decimal.py does not observe\n  the context limits and converts values with arbitrary exponents or precision\n  exactly. Since the C version has internal limits, the following scheme is\n  used: If possible, values are converted exactly, otherwise\n  :exc:`~decimal.InvalidOperation` is raised and the result is NaN. In the\n  latter case it is always possible to use :meth:`~decimal.Context.create_decimal`\n  in order to obtain a rounded or inexact value.\n\n\n* The power function in decimal.py is always correctly-rounded. In the\n  C version, it is defined in terms of the correctly-rounded\n  :meth:`~decimal.Decimal.exp` and :meth:`~decimal.Decimal.ln` functions,\n  but the final result is only \"almost always correctly rounded\".\n\n\n* In the C version, the context dictionary containing the signals is a\n  :class:`~collections.abc.MutableMapping`.  For speed reasons,\n  :attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps` always\n  refer to the same :class:`~collections.abc.MutableMapping` that the context\n  was initialized with. If a new signal dictionary is assigned,\n  :attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps`\n  are updated with the new values, but they do not reference the RHS\n  dictionary.\n\n\n* Pickling a :class:`~decimal.Context` produces a different output in order\n  to have a common interchange format for the Python and C versions.\n\n\n* The order of arguments in the :class:`~decimal.Context` constructor has been\n  changed to match the order displayed by :func:`repr`.\n\n\n* The ``watchexp`` parameter in the :meth:`~decimal.Decimal.quantize` method\n  is deprecated.\n\n\n.. _new-email:\n\nemail\n-----\n\nPolicy Framework\n~~~~~~~~~~~~~~~~\n\nThe email package now has a :mod:`~email.policy` framework.  A\n:class:`~email.policy.Policy` is an object with several methods and properties\nthat control how the email package behaves.  The primary policy for Python 3.3\nis the :class:`~email.policy.Compat32` policy, which provides backward\ncompatibility with the email package in Python 3.2.  A ``policy`` can be\nspecified when an email message is parsed by a :mod:`~email.parser`, or when a\n:class:`~email.message.Message` object is created, or when an email is\nserialized using a :mod:`~email.generator`.  Unless overridden, a policy passed\nto a ``parser`` is inherited by all the ``Message`` object and sub-objects\ncreated by the ``parser``.  By default a ``generator`` will use the policy of\nthe ``Message`` object it is serializing.  The default policy is\n:data:`~email.policy.compat32`.\n\nThe minimum set of controls implemented by all ``policy`` objects are:\n\n    .. tabularcolumns:: |l|L|\n\n    ===============     =======================================================\n    max_line_length     The maximum length, excluding the linesep character(s),\n                        individual lines may have when a ``Message`` is\n                        serialized.  Defaults to 78.\n\n    linesep             The character used to separate individual lines when a\n                        ``Message`` is serialized.  Defaults to ``\\n``.\n\n    cte_type            ``7bit`` or ``8bit``.  ``8bit`` applies only to a\n                        ``Bytes`` ``generator``, and means that non-ASCII may\n                        be used where allowed by the protocol (or where it\n                        exists in the original input).\n\n    raise_on_defect     Causes a ``parser`` to raise error when defects are\n                        encountered instead of adding them to the ``Message``\n                        object's ``defects`` list.\n    ===============     =======================================================\n\nA new policy instance, with new settings, is created using the\n:meth:`~email.policy.Policy.clone` method of policy objects.  ``clone`` takes\nany of the above controls as keyword arguments.  Any control not specified in\nthe call retains its default value.  Thus you can create a policy that uses\n``\\r\\n`` linesep characters like this::\n\n    mypolicy = compat32.clone(linesep='\\r\\n')\n\nPolicies can be used to make the generation of messages in the format needed by\nyour application simpler.  Instead of having to remember to specify\n``linesep='\\r\\n'`` in all the places you call a ``generator``, you can specify\nit once, when you set the policy used by the ``parser`` or the ``Message``,\nwhichever your program uses to create ``Message`` objects.  On the other hand,\nif you need to generate messages in multiple forms, you can still specify the\nparameters in the appropriate ``generator`` call.  Or you can have custom\npolicy instances for your different cases, and pass those in when you create\nthe ``generator``.\n\n\nProvisional Policy with New Header API\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhile the policy framework is worthwhile all by itself, the main motivation for\nintroducing it is to allow the creation of new policies that implement new\nfeatures for the email package in a way that maintains backward compatibility\nfor those who do not use the new policies.  Because the new policies introduce a\nnew API, we are releasing them in Python 3.3 as a :term:`provisional policy\n<provisional package>`.  Backwards incompatible changes (up to and including\nremoval of the code) may occur if deemed necessary by the core developers.\n\nThe new policies are instances of :class:`~email.policy.EmailPolicy`,\nand add the following additional controls:\n\n    .. tabularcolumns:: |l|L|\n\n    ===============     =======================================================\n    refold_source       Controls whether or not headers parsed by a\n                        :mod:`~email.parser` are refolded by the\n                        :mod:`~email.generator`.  It can be ``none``, ``long``,\n                        or ``all``.  The default is ``long``, which means that\n                        source headers with a line longer than\n                        ``max_line_length`` get refolded.  ``none`` means no\n                        line get refolded, and ``all`` means that all lines\n                        get refolded.\n\n    header_factory      A callable that take a ``name`` and ``value`` and\n                        produces a custom header object.\n    ===============     =======================================================\n\nThe ``header_factory`` is the key to the new features provided by the new\npolicies.  When one of the new policies is used, any header retrieved from\na ``Message`` object is an object produced by the ``header_factory``, and any\ntime you set a header on a ``Message`` it becomes an object produced by\n``header_factory``.  All such header objects have a ``name`` attribute equal\nto the header name.  Address and Date headers have additional attributes\nthat give you access to the parsed data of the header.  This means you can now\ndo things like this::\n\n    >>> m = Message(policy=SMTP)\n    >>> m['To'] = '\u00c9ric <foo@example.com>'\n    >>> m['to']\n    '\u00c9ric <foo@example.com>'\n    >>> m['to'].addresses\n    (Address(display_name='\u00c9ric', username='foo', domain='example.com'),)\n    >>> m['to'].addresses[0].username\n    'foo'\n    >>> m['to'].addresses[0].display_name\n    '\u00c9ric'\n    >>> m['Date'] = email.utils.localtime()\n    >>> m['Date'].datetime\n    datetime.datetime(2012, 5, 25, 21, 39, 24, 465484, tzinfo=datetime.timezone(datetime.timedelta(-1, 72000), 'EDT'))\n    >>> m['Date']\n    'Fri, 25 May 2012 21:44:27 -0400'\n    >>> print(m)\n    To: =?utf-8?q?=C3=89ric?= <foo@example.com>\n    Date: Fri, 25 May 2012 21:44:27 -0400\n\nYou will note that the unicode display name is automatically encoded as\n``utf-8`` when the message is serialized, but that when the header is accessed\ndirectly, you get the unicode version.  This eliminates any need to deal with\nthe :mod:`email.header` :meth:`~email.header.decode_header` or\n:meth:`~email.header.make_header` functions.\n\nYou can also create addresses from parts::\n\n    >>> m['cc'] = [Group('pals', [Address('Bob', 'bob', 'example.com'),\n    ...                           Address('Sally', 'sally', 'example.com')]),\n    ...            Address('Bonzo', addr_spec='bonz@laugh.com')]\n    >>> print(m)\n    To: =?utf-8?q?=C3=89ric?= <foo@example.com>\n    Date: Fri, 25 May 2012 21:44:27 -0400\n    cc: pals: Bob <bob@example.com>, Sally <sally@example.com>;, Bonzo <bonz@laugh.com>\n\nDecoding to unicode is done automatically::\n\n    >>> m2 = message_from_string(str(m))\n    >>> m2['to']\n    '\u00c9ric <foo@example.com>'\n\nWhen you parse a message, you can use the ``addresses`` and ``groups``\nattributes of the header objects to access the groups and individual\naddresses::\n\n    >>> m2['cc'].addresses\n    (Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com'), Address(display_name='Bonzo', username='bonz', domain='laugh.com'))\n    >>> m2['cc'].groups\n    (Group(display_name='pals', addresses=(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com')), Group(display_name=None, addresses=(Address(display_name='Bonzo', username='bonz', domain='laugh.com'),))\n\nIn summary, if you use one of the new policies, header manipulation works the\nway it ought to:  your application works with unicode strings, and the email\npackage transparently encodes and decodes the unicode to and from the RFC\nstandard Content Transfer Encodings.\n\nOther API Changes\n~~~~~~~~~~~~~~~~~\n\nNew :class:`~email.parser.BytesHeaderParser`, added to the :mod:`~email.parser`\nmodule to complement :class:`~email.parser.HeaderParser` and complete the Bytes\nAPI.\n\nNew utility functions:\n\n   * :func:`~email.utils.format_datetime`: given a :class:`~datetime.datetime`,\n     produce a string formatted for use in an email header.\n\n   * :func:`~email.utils.parsedate_to_datetime`: given a date string from\n     an email header, convert it into an aware :class:`~datetime.datetime`,\n     or a naive :class:`~datetime.datetime` if the offset is ``-0000``.\n\n   * :func:`~email.utils.localtime`: With no argument, returns the\n     current local time as an aware :class:`~datetime.datetime` using the local\n     :class:`~datetime.timezone`.  Given an aware :class:`~datetime.datetime`,\n     converts it into an aware :class:`~datetime.datetime` using the\n     local :class:`~datetime.timezone`.\n\n\nftplib\n------\n\n* :class:`ftplib.FTP` now accepts a ``source_address`` keyword argument to\n  specify the ``(host, port)`` to use as the source address in the bind call\n  when creating the outgoing socket.  (Contributed by Giampaolo Rodol\u00e0\n  in :issue:`8594`.)\n\n* The :class:`~ftplib.FTP_TLS` class now provides a new\n  :func:`~ftplib.FTP_TLS.ccc` function to revert control channel back to\n  plaintext.  This can be useful to take advantage of firewalls that know how\n  to handle NAT with non-secure FTP without opening fixed ports.  (Contributed\n  by Giampaolo Rodol\u00e0 in :issue:`12139`.)\n\n* Added :meth:`ftplib.FTP.mlsd` method which provides a parsable directory\n  listing format and deprecates :meth:`ftplib.FTP.nlst` and\n  :meth:`ftplib.FTP.dir`.  (Contributed by Giampaolo Rodol\u00e0 in :issue:`11072`.)\n\n\nfunctools\n---------\n\nThe :func:`functools.lru_cache` decorator now accepts a ``typed`` keyword\nargument (that defaults to ``False`` to ensure that it caches values of\ndifferent types that compare equal in separate cache slots.  (Contributed\nby Raymond Hettinger in :issue:`13227`.)\n\n\ngc\n--\n\nIt is now possible to register callbacks invoked by the garbage collector\nbefore and after collection using the new :data:`~gc.callbacks` list.\n\n\nhmac\n----\n\nA new :func:`~hmac.compare_digest` function has been added to prevent side\nchannel attacks on digests through timing analysis.  (Contributed by Nick\nCoghlan and Christian Heimes in :issue:`15061`.)\n\n\nhttp\n----\n\n:class:`http.server.BaseHTTPRequestHandler` now buffers the headers and writes\nthem all at once when :meth:`~http.server.BaseHTTPRequestHandler.end_headers` is\ncalled.  A new method :meth:`~http.server.BaseHTTPRequestHandler.flush_headers`\ncan be used to directly manage when the accumlated headers are sent.\n(Contributed by Andrew Schaaf in :issue:`3709`.)\n\n:class:`http.server` now produces valid ``HTML 4.01 strict`` output.\n(Contributed by Ezio Melotti in :issue:`13295`.)\n\n:class:`http.client.HTTPResponse` now has a\n:meth:`~http.client.HTTPResponse.readinto` method, which means it can be used\nas an :class:`io.RawIOBase` class.  (Contributed by John Kuhn in\n:issue:`13464`.)\n\n\nhtml\n----\n\n:class:`html.parser.HTMLParser` is now able to parse broken markup without\nraising errors, therefore the *strict* argument of the constructor and the\n:exc:`~html.parser.HTMLParseError` exception are now deprecated.\nThe ability to parse broken markup is the result of a number of bug fixes that\nare also available on the latest bug fix releases of Python 2.7/3.2.\n(Contributed by Ezio Melotti in :issue:`15114`, and :issue:`14538`,\n:issue:`13993`, :issue:`13960`, :issue:`13358`, :issue:`1745761`,\n:issue:`755670`, :issue:`13357`, :issue:`12629`, :issue:`1200313`,\n:issue:`670664`, :issue:`13273`, :issue:`12888`, :issue:`7311`.)\n\nA new :data:`~html.entities.html5` dictionary that maps HTML5 named character\nreferences to the equivalent Unicode character(s) (e.g. ``html5['gt;'] ==\n'>'``) has been added to the :mod:`html.entities` module.  The dictionary is\nnow also used by :class:`~html.parser.HTMLParser`.  (Contributed by Ezio\nMelotti in :issue:`11113` and :issue:`15156`.)\n\n\nimaplib\n-------\n\nThe :class:`~imaplib.IMAP4_SSL` constructor now accepts an SSLContext\nparameter to control parameters of the secure channel.\n\n(Contributed by Sijin Joseph in :issue:`8808`.)\n\n\ninspect\n-------\n\nA new :func:`~inspect.getclosurevars` function has been added. This function\nreports the current binding of all names referenced from the function body and\nwhere those names were resolved, making it easier to verify correct internal\nstate when testing code that relies on stateful closures.\n\n(Contributed by Meador Inge and Nick Coghlan in :issue:`13062`.)\n\nA new :func:`~inspect.getgeneratorlocals` function has been added. This\nfunction reports the current binding of local variables in the generator's\nstack frame, making it easier to verify correct internal state when testing\ngenerators.\n\n(Contributed by Meador Inge in :issue:`15153`.)\n\nio\n--\n\nThe :func:`~io.open` function has a new ``'x'`` mode that can be used to\nexclusively create a new file, and raise a :exc:`FileExistsError` if the file\nalready exists. It is based on the C11 'x' mode to fopen().\n\n(Contributed by David Townshend in :issue:`12760`.)\n\nThe constructor of the :class:`~io.TextIOWrapper` class has a new\n*write_through* optional argument. If *write_through* is ``True``, calls to\n:meth:`~io.TextIOWrapper.write` are guaranteed not to be buffered: any data\nwritten on the :class:`~io.TextIOWrapper` object is immediately handled to its\nunderlying binary buffer.\n\n\nitertools\n---------\n\n:func:`~itertools.accumulate` now takes an optional ``func`` argument for\nproviding a user-supplied binary function.\n\n\nlogging\n-------\n\nThe :func:`~logging.basicConfig` function now supports an optional ``handlers``\nargument taking an iterable of handlers to be added to the root logger.\n\nA class level attribute :attr:`~logging.handlers.SysLogHandler.append_nul` has\nbeen added to :class:`~logging.handlers.SysLogHandler` to allow control of the\nappending of the ``NUL`` (``\\000``) byte to syslog records, since for some\ndeamons it is required while for others it is passed through to the log.\n\n\n\nmath\n----\n\nThe :mod:`math` module has a new function, :func:`~math.log2`,  which returns\nthe base-2 logarithm of *x*.\n\n(Written by Mark Dickinson in :issue:`11888`.)\n\n\nmmap\n----\n\nThe :meth:`~mmap.mmap.read` method is now more compatible with other file-like\nobjects: if the argument is omitted or specified as ``None``, it returns the\nbytes from the current file position to the end of the mapping.  (Contributed\nby Petri Lehtinen in :issue:`12021`.)\n\n\nmultiprocessing\n---------------\n\nThe new :func:`multiprocessing.connection.wait` function allows polling\nmultiple objects (such as connections, sockets and pipes) with a timeout.\n(Contributed by Richard Oudkerk in :issue:`12328`.)\n\n:class:`multiprocessing.Connection` objects can now be transferred over\nmultiprocessing connections.\n(Contributed by Richard Oudkerk in :issue:`4892`.)\n\n:class:`multiprocessing.Process` now accepts a ``daemon`` keyword argument\nto override the default behavior of inheriting the ``daemon`` flag from\nthe parent process (:issue:`6064`).\n\nNew attribute :data:`multiprocessing.Process.sentinel` allows a\nprogram to wait on multiple :class:`~multiprocessing.Process` objects at one\ntime using the appropriate OS primitives (for example, :mod:`select` on\nposix systems).\n\nNew methods :meth:`multiprocessing.pool.Pool.starmap` and\n:meth:`~multiprocessing.pool.Pool.starmap_async` provide\n:func:`itertools.starmap` equivalents to the existing\n:meth:`multiprocessing.pool.Pool.map` and\n:meth:`~multiprocessing.pool.Pool.map_async` functions.  (Contributed by Hynek\nSchlawack in :issue:`12708`.)\n\n\nnntplib\n-------\n\nThe :class:`nntplib.NNTP` class now supports the context management protocol to\nunconditionally consume :exc:`socket.error` exceptions and to close the NNTP\nconnection when done::\n\n  >>> from nntplib import NNTP\n  >>> with NNTP('news.gmane.org') as n:\n  ...     n.group('gmane.comp.python.committers')\n  ...\n  ('211 1755 1 1755 gmane.comp.python.committers', 1755, 1, 1755, 'gmane.comp.python.committers')\n  >>>\n\n(Contributed by Giampaolo Rodol\u00e0 in :issue:`9795`.)\n\n\nos\n--\n\n* The :mod:`os` module has a new :func:`~os.pipe2` function that makes it\n  possible to create a pipe with :data:`~os.O_CLOEXEC` or\n  :data:`~os.O_NONBLOCK` flags set atomically. This is especially useful to\n  avoid race conditions in multi-threaded programs.\n\n* The :mod:`os` module has a new :func:`~os.sendfile` function which provides\n  an efficient \"zero-copy\" way for copying data from one file (or socket)\n  descriptor to another. The phrase \"zero-copy\" refers to the fact that all of\n  the copying of data between the two descriptors is done entirely by the\n  kernel, with no copying of data into userspace buffers. :func:`~os.sendfile`\n  can be used to efficiently copy data from a file on disk to a network socket,\n  e.g. for downloading a file.\n\n  (Patch submitted by Ross Lagerwall and Giampaolo Rodol\u00e0 in :issue:`10882`.)\n\n* To avoid race conditions like symlink attacks and issues with temporary\n  files and directories, it is more reliable (and also faster) to manipulate\n  file descriptors instead of file names. Python 3.3 enhances existing functions\n  and introduces new functions to work on file descriptors (:issue:`4761`,\n  :issue:`10755` and :issue:`14626`).\n\n  - The :mod:`os` module has a new :func:`~os.fwalk` function similar to\n    :func:`~os.walk` except that it also yields file descriptors referring to the\n    directories visited. This is especially useful to avoid symlink races.\n\n  - The following functions get new optional *dir_fd* (:ref:`paths relative to\n    directory descriptors <dir_fd>`) and/or *follow_symlinks* (:ref:`not\n    following symlinks <follow_symlinks>`):\n    :func:`~os.access`, :func:`~os.chflags`, :func:`~os.chmod`, :func:`~os.chown`,\n    :func:`~os.link`, :func:`~os.lstat`, :func:`~os.mkdir`, :func:`~os.mkfifo`,\n    :func:`~os.mknod`, :func:`~os.open`, :func:`~os.readlink`, :func:`~os.remove`,\n    :func:`~os.rename`, :func:`~os.replace`, :func:`~os.rmdir`, :func:`~os.stat`,\n    :func:`~os.symlink`, :func:`~os.unlink`, :func:`~os.utime`.  Platform\n    support for using these parameters can be checked via the sets\n    :data:`os.supports_dir_fd` and :data:`os.supports_follows_symlinks`.\n\n  - The following functions now support a file descriptor for their path argument:\n    :func:`~os.chdir`, :func:`~os.chmod`, :func:`~os.chown`,\n    :func:`~os.execve`, :func:`~os.listdir`, :func:`~os.pathconf`, :func:`~os.path.exists`,\n    :func:`~os.stat`, :func:`~os.statvfs`, :func:`~os.utime`.  Platform support\n    for this can be checked via the :data:`os.supports_fd` set.\n\n* :func:`~os.access` accepts an ``effective_ids`` keyword argument to turn on\n  using the effective uid/gid rather than the real uid/gid in the access check.\n  Platform support for this can be checked via the\n  :data:`~os.supports_effective_ids` set.\n\n* The :mod:`os` module has two new functions: :func:`~os.getpriority` and\n  :func:`~os.setpriority`. They can be used to get or set process\n  niceness/priority in a fashion similar to :func:`os.nice` but extended to all\n  processes instead of just the current one.\n\n  (Patch submitted by Giampaolo Rodol\u00e0 in :issue:`10784`.)\n\n* The new :func:`os.replace` function allows cross-platform renaming of a\n  file with overwriting the destination.  With :func:`os.rename`, an existing\n  destination file is overwritten under POSIX, but raises an error under\n  Windows.\n  (Contributed by Antoine Pitrou in :issue:`8828`.)\n\n* The stat family of functions (:func:`~os.stat`, :func:`~os.fstat`,\n  and :func:`~os.lstat`) now support reading a file's timestamps\n  with nanosecond precision.  Symmetrically, :func:`~os.utime`\n  can now write file timestamps with nanosecond precision.  (Contributed by\n  Larry Hastings in :issue:`14127`.)\n\n* The new :func:`os.get_terminal_size` function queries the size of the\n  terminal attached to a file descriptor. See also\n  :func:`shutil.get_terminal_size`.\n  (Contributed by Zbigniew J\u0119drzejewski-Szmek in :issue:`13609`.)\n\n.. XXX sort out this mess after beta1\n\n* New functions to support Linux extended attributes (:issue:`12720`):\n  :func:`~os.getxattr`, :func:`~os.listxattr`, :func:`~os.removexattr`,\n  :func:`~os.setxattr`.\n\n* New interface to the scheduler. These functions\n  control how a process is allocated CPU time by the operating system. New\n  functions:\n  :func:`~os.sched_get_priority_max`, :func:`~os.sched_get_priority_min`,\n  :func:`~os.sched_getaffinity`, :func:`~os.sched_getparam`,\n  :func:`~os.sched_getscheduler`, :func:`~os.sched_rr_get_interval`,\n  :func:`~os.sched_setaffinity`, :func:`~os.sched_setparam`,\n  :func:`~os.sched_setscheduler`, :func:`~os.sched_yield`,\n\n* New functions to control the file system:\n\n  * :func:`~os.posix_fadvise`: Announces an intention to access data in a\n    specific pattern thus allowing the kernel to make optimizations.\n  * :func:`~os.posix_fallocate`: Ensures that enough disk space is allocated\n    for a file.\n  * :func:`~os.sync`: Force write of everything to disk.\n\n* Additional new  posix functions:\n\n  * :func:`~os.lockf`: Apply, test or remove a POSIX lock on an open file descriptor.\n  * :func:`~os.pread`: Read from a file descriptor at an offset, the file\n    offset remains unchanged.\n  * :func:`~os.pwrite`: Write to a file descriptor from an offset, leaving\n    the file offset unchanged.\n  * :func:`~os.readv`: Read from a file descriptor into a number of writable buffers.\n  * :func:`~os.truncate`: Truncate the file corresponding to *path*, so that\n    it is at most *length* bytes in size.\n  * :func:`~os.waitid`: Wait for the completion of one or more child processes.\n  * :func:`~os.writev`: Write the contents of *buffers* to a file descriptor,\n    where *buffers* is an arbitrary sequence of buffers.\n  * :func:`~os.getgrouplist` (:issue:`9344`): Return list of group ids that\n    specified user belongs to.\n\n* :func:`~os.times` and :func:`~os.uname`: Return type changed from a tuple to\n  a tuple-like object with named attributes.\n\n* Some platforms now support additional constants for the :func:`~os.lseek`\n  function, such as ``os.SEEK_HOLE`` and ``os.SEEK_DATA``.\n\n* New constants :data:`~os.RTLD_LAZY`, :data:`~os.RTLD_NOW`,\n  :data:`~os.RTLD_GLOBAL`, :data:`~os.RTLD_LOCAL`, :data:`~os.RTLD_NODELETE`,\n  :data:`~os.RTLD_NOLOAD`, and :data:`~os.RTLD_DEEPBIND` are available on\n  platforms that support them.   These are for use with the\n  :func:`sys.setdlopenflags` function, and supersede the similar constants\n  defined in :mod:`ctypes` and :mod:`DLFCN`.  (Contributed by Victor Stinner\n  in :issue:`13226`.)\n\n* :func:`os.symlink` now accepts (and ignores) the ``target_is_directory``\n  keyword argument on non-Windows platforms, to ease cross-platform support.\n\n\npdb\n---\n\nTab-completion is now available not only for command names, but also their\narguments.  For example, for the ``break`` command, function and file names\nare completed.\n\n(Contributed by Georg Brandl in :issue:`14210`)\n\n\npickle\n------\n\n:class:`pickle.Pickler` objects now have an optional\n:attr:`~pickle.Pickler.dispatch_table` attribute allowing per-pickler\nreduction functions to be set.\n\n(Contributed by Richard Oudkerk in :issue:`14166`.)\n\n\npydoc\n-----\n\nThe Tk GUI and the :func:`~pydoc.serve` function have been removed from the\n:mod:`pydoc` module: ``pydoc -g`` and :func:`~pydoc.serve` have been deprecated\nin Python 3.2.\n\n\nre\n--\n\n:class:`str` regular expressions now support ``\\u`` and ``\\U`` escapes.\n\n(Contributed by Serhiy Storchaka in :issue:`3665`.)\n\n\nsched\n-----\n\n* :meth:`~sched.scheduler.run` now accepts a *blocking* parameter which when\n  set to false makes the method execute the scheduled events due to expire\n  soonest (if any) and then return immediately.\n  This is useful in case you want to use the :class:`~sched.scheduler` in\n  non-blocking applications.  (Contributed by Giampaolo Rodol\u00e0 in :issue:`13449`.)\n\n* :class:`~sched.scheduler` class can now be safely used in multi-threaded\n  environments.  (Contributed by Josiah Carlson and Giampaolo Rodol\u00e0 in\n  :issue:`8684`.)\n\n* *timefunc* and *delayfunct* parameters of :class:`~sched.scheduler` class\n  constructor are now optional and defaults to :func:`time.time` and\n  :func:`time.sleep` respectively.  (Contributed by Chris Clark in\n  :issue:`13245`.)\n\n* :meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs`\n  *argument* parameter is now optional.  (Contributed by Chris Clark in\n  :issue:`13245`.)\n\n* :meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs`\n  now accept a *kwargs* parameter.  (Contributed by Chris Clark in\n  :issue:`13245`.)\n\n\nselect\n------\n\nSolaris and derivative platforms have a new class :class:`select.devpoll`\nfor high performance asynchronous sockets via :file:`/dev/poll`.\n(Contributed by Jes\u00fas Cea Avi\u00f3n in :issue:`6397`.)\n\n\nshlex\n-----\n\nThe previously undocumented helper function ``quote`` from the\n:mod:`pipes` modules has been moved to the :mod:`shlex` module and\ndocumented.  :func:`~shlex.quote` properly escapes all characters in a string\nthat might be otherwise given special meaning by the shell.\n\n\nshutil\n------\n\n* New functions:\n\n  * :func:`~shutil.disk_usage`: provides total, used and free disk space\n    statistics.  (Contributed by Giampaolo Rodol\u00e0 in :issue:`12442`.)\n  * :func:`~shutil.chown`: allows one to change user and/or group of the given\n    path also specifying the user/group names and not only their numeric\n    ids.  (Contributed by Sandro Tosi in :issue:`12191`.)\n  * :func:`shutil.get_terminal_size`: returns the size of the terminal window\n    to which the interpreter is attached.  (Contributed by Zbigniew\n    J\u0119drzejewski-Szmek in :issue:`13609`.)\n\n* :func:`~shutil.copy2` and :func:`~shutil.copystat` now preserve file\n  timestamps with nanosecond precision on platforms that support it.\n  They also preserve file \"extended attributes\" on Linux.  (Contributed\n  by Larry Hastings in :issue:`14127` and  :issue:`15238`.)\n\n* Several functions now take an optional ``symlinks`` argument: when that\n  parameter is true, symlinks aren't dereferenced and the operation instead\n  acts on the symlink itself (or creates one, if relevant).\n  (Contributed by Hynek Schlawack in :issue:`12715`.)\n\n* When copying files to a different file system, :func:`~shutil.move` now\n  handles symlinks the way the posix ``mv`` command does, recreating the\n  symlink rather than copying the target file contents.  (Contributed by\n  Jonathan Niehof in :issue:`9993`.)  :func:`~shutil.move` now also returns\n  the ``dst`` argument as its result.\n\n* :func:`~shutil.rmtree` is now resistant to symlink attacks on platforms\n  which support the new ``dir_fd`` parameter in :func:`os.open` and\n  :func:`os.unlink`.  (Contributed by Martin von L\u00f6wis and Hynek Schlawack\n  in :issue:`4489`.)\n\n\nsignal\n------\n\n* The :mod:`signal` module has new functions:\n\n  * :func:`~signal.pthread_sigmask`: fetch and/or change the signal mask of the\n    calling thread (Contributed by Jean-Paul Calderone in :issue:`8407`);\n  * :func:`~signal.pthread_kill`: send a signal to a thread;\n  * :func:`~signal.sigpending`: examine pending functions;\n  * :func:`~signal.sigwait`: wait a signal;\n  * :func:`~signal.sigwaitinfo`: wait for a signal, returning detailed\n    information about it;\n  * :func:`~signal.sigtimedwait`: like :func:`~signal.sigwaitinfo` but with a\n    timeout.\n\n* The signal handler writes the signal number as a single byte instead of\n  a nul byte into the wakeup file descriptor. So it is possible to wait more\n  than one signal and know which signals were raised.\n\n* :func:`signal.signal` and :func:`signal.siginterrupt` raise an OSError,\n  instead of a RuntimeError: OSError has an errno attribute.\n\n\nsmtpd\n-----\n\nThe :mod:`smtpd` module now supports :rfc:`5321` (extended SMTP) and :rfc:`1870`\n(size extension).  Per the standard, these extensions are enabled if and only\nif the client initiates the session with an ``EHLO`` command.\n\n(Initial ``ELHO`` support by Alberto Trevino.  Size extension by Juhana\nJauhiainen.  Substantial additional work on the patch contributed by Michele\nOrr\u00f9 and Dan Boswell.  :issue:`8739`)\n\n\nsmtplib\n-------\n\nThe :class:`~smtplib.SMTP`, :class:`~smtplib.SMTP_SSL`, and\n:class:`~smtplib.LMTP` classes now accept a ``source_address`` keyword argument\nto specify the ``(host, port)`` to use as the source address in the bind call\nwhen creating the outgoing socket.  (Contributed by Paulo Scardine in\n:issue:`11281`.)\n\n:class:`~smtplib.SMTP` now supports the context management protocol, allowing an\n``SMTP`` instance to be used in a ``with`` statement.  (Contributed\nby Giampaolo Rodol\u00e0 in :issue:`11289`.)\n\nThe :class:`~smtplib.SMTP_SSL` constructor and the :meth:`~smtplib.SMTP.starttls`\nmethod now accept an SSLContext parameter to control parameters of the secure\nchannel.  (Contributed by Kasun Herath in :issue:`8809`.)\n\n\nsocket\n------\n\n* The :class:`~socket.socket` class now exposes additional methods to process\n  ancillary data when supported by the underlying platform:\n\n  * :func:`~socket.socket.sendmsg`\n  * :func:`~socket.socket.recvmsg`\n  * :func:`~socket.socket.recvmsg_into`\n\n  (Contributed by David Watson in :issue:`6560`, based on an earlier patch by\n  Heiko Wundram)\n\n* The :class:`~socket.socket` class now supports the PF_CAN protocol family\n  (https://en.wikipedia.org/wiki/Socketcan), on Linux\n  (https://lwn.net/Articles/253425).\n\n  (Contributed by Matthias Fuchs, updated by Tiago Gon\u00e7alves in :issue:`10141`.)\n\n* The :class:`~socket.socket` class now supports the PF_RDS protocol family\n  (https://en.wikipedia.org/wiki/Reliable_Datagram_Sockets and\n  https://oss.oracle.com/projects/rds/).\n\n* The :class:`~socket.socket` class now supports the ``PF_SYSTEM`` protocol\n  family on OS X.  (Contributed by Michael Goderbauer in :issue:`13777`.)\n\n* New function :func:`~socket.sethostname` allows the hostname to be set\n  on unix systems if the calling process has sufficient privileges.\n  (Contributed by Ross Lagerwall in :issue:`10866`.)\n\n\nsocketserver\n------------\n\n:class:`~socketserver.BaseServer` now has an overridable method\n:meth:`~socketserver.BaseServer.service_actions` that is called by the\n:meth:`~socketserver.BaseServer.serve_forever` method in the service loop.\n:class:`~socketserver.ForkingMixIn` now uses this to clean up zombie\nchild processes.  (Contributed by Justin Warkentin in :issue:`11109`.)\n\n\nsqlite3\n-------\n\nNew :class:`sqlite3.Connection` method\n:meth:`~sqlite3.Connection.set_trace_callback` can be used to capture a trace of\nall sql commands processed by sqlite.  (Contributed by Torsten Landschoff\nin :issue:`11688`.)\n\n\nssl\n---\n\n* The :mod:`ssl` module has two new random generation functions:\n\n  * :func:`~ssl.RAND_bytes`: generate cryptographically strong\n    pseudo-random bytes.\n  * :func:`~ssl.RAND_pseudo_bytes`: generate pseudo-random bytes.\n\n  (Contributed by Victor Stinner in :issue:`12049`.)\n\n* The :mod:`ssl` module now exposes a finer-grained exception hierarchy\n  in order to make it easier to inspect the various kinds of errors.\n  (Contributed by Antoine Pitrou in :issue:`11183`.)\n\n* :meth:`~ssl.SSLContext.load_cert_chain` now accepts a *password* argument\n  to be used if the private key is encrypted.\n  (Contributed by Adam Simpkins in :issue:`12803`.)\n\n* Diffie-Hellman key exchange, both regular and Elliptic Curve-based, is\n  now supported through the :meth:`~ssl.SSLContext.load_dh_params` and\n  :meth:`~ssl.SSLContext.set_ecdh_curve` methods.\n  (Contributed by Antoine Pitrou in :issue:`13626` and :issue:`13627`.)\n\n* SSL sockets have a new :meth:`~ssl.SSLSocket.get_channel_binding` method\n  allowing the implementation of certain authentication mechanisms such as\n  SCRAM-SHA-1-PLUS.  (Contributed by Jacek Konieczny in :issue:`12551`.)\n\n* You can query the SSL compression algorithm used by an SSL socket, thanks\n  to its new :meth:`~ssl.SSLSocket.compression` method.  The new attribute\n  :attr:`~ssl.OP_NO_COMPRESSION` can be used to disable compression.\n  (Contributed by Antoine Pitrou in :issue:`13634`.)\n\n* Support has been added for the Next Protocol Negotiation extension using\n  the :meth:`ssl.SSLContext.set_npn_protocols` method.\n  (Contributed by Colin Marc in :issue:`14204`.)\n\n* SSL errors can now be introspected more easily thanks to\n  :attr:`~ssl.SSLError.library` and :attr:`~ssl.SSLError.reason` attributes.\n  (Contributed by Antoine Pitrou in :issue:`14837`.)\n\n* The :func:`~ssl.get_server_certificate` function now supports IPv6.\n  (Contributed by Charles-Fran\u00e7ois Natali in :issue:`11811`.)\n\n* New attribute :attr:`~ssl.OP_CIPHER_SERVER_PREFERENCE` allows setting\n  SSLv3 server sockets to use the server's cipher ordering preference rather\n  than the client's (:issue:`13635`).\n\n\nstat\n----\n\nThe undocumented tarfile.filemode function has been moved to\n:func:`stat.filemode`. It can be used to convert a file's mode to a string of\nthe form '-rwxrwxrwx'.\n\n(Contributed by Giampaolo Rodol\u00e0 in :issue:`14807`.)\n\n\nstruct\n------\n\nThe :mod:`struct` module now supports ``ssize_t`` and ``size_t`` via the\nnew codes ``n`` and ``N``, respectively.  (Contributed by Antoine Pitrou\nin :issue:`3163`.)\n\n\nsubprocess\n----------\n\nCommand strings can now be bytes objects on posix platforms.  (Contributed by\nVictor Stinner in :issue:`8513`.)\n\nA new constant :data:`~subprocess.DEVNULL` allows suppressing output in a\nplatform-independent fashion.  (Contributed by Ross Lagerwall in\n:issue:`5870`.)\n\n\nsys\n---\n\nThe :mod:`sys` module has a new :data:`~sys.thread_info` :term:`struct\nsequence` holding informations about the thread implementation\n(:issue:`11223`).\n\n\ntarfile\n-------\n\n:mod:`tarfile` now supports ``lzma`` encoding via the :mod:`lzma` module.\n(Contributed by Lars Gust\u00e4bel in :issue:`5689`.)\n\n\ntempfile\n--------\n\n:class:`tempfile.SpooledTemporaryFile`\\'s\n:meth:`~tempfile.SpooledTemporaryFile.truncate` method now accepts\na ``size`` parameter.  (Contributed by Ryan Kelly in :issue:`9957`.)\n\n\ntextwrap\n--------\n\nThe :mod:`textwrap` module has a new :func:`~textwrap.indent` that makes\nit straightforward to add a common prefix to selected lines in a block\nof text  (:issue:`13857`).\n\n\nthreading\n---------\n\n:class:`threading.Condition`, :class:`threading.Semaphore`,\n:class:`threading.BoundedSemaphore`, :class:`threading.Event`, and\n:class:`threading.Timer`, all of which used to be factory functions returning a\nclass instance, are now classes and may be subclassed.  (Contributed by \u00c9ric\nAraujo in :issue:`10968`.)\n\nThe :class:`threading.Thread` constructor now accepts a ``daemon`` keyword\nargument to override the default behavior of inheriting the ``deamon`` flag\nvalue from the parent thread (:issue:`6064`).\n\nThe formerly private function ``_thread.get_ident`` is now available as the\npublic function :func:`threading.get_ident`.  This eliminates several cases of\ndirect access to the ``_thread`` module in the stdlib.  Third party code that\nused ``_thread.get_ident`` should likewise be changed to use the new public\ninterface.\n\n\ntime\n----\n\nThe :pep:`418` added new functions to the :mod:`time` module:\n\n* :func:`~time.get_clock_info`: Get information on a clock.\n* :func:`~time.monotonic`: Monotonic clock (cannot go backward), not affected\n  by system clock updates.\n* :func:`~time.perf_counter`: Performance counter with the highest available\n  resolution to measure a short duration.\n* :func:`~time.process_time`: Sum of the system and user CPU time of the\n  current process.\n\nOther new functions:\n\n* :func:`~time.clock_getres`, :func:`~time.clock_gettime` and\n  :func:`~time.clock_settime` functions with ``CLOCK_xxx`` constants.\n  (Contributed by Victor Stinner in :issue:`10278`.)\n\nTo improve cross platform consistency, :func:`~time.sleep` now raises a\n:exc:`ValueError` when passed a negative sleep value.  Previously this was an\nerror on posix, but produced an infinite sleep on Windows.\n\n\ntypes\n-----\n\nAdd a new :class:`types.MappingProxyType` class: Read-only proxy of a mapping.\n(:issue:`14386`)\n\n\nThe new functions :func:`types.new_class` and :func:`types.prepare_class` provide support\nfor PEP 3115 compliant dynamic type creation. (:issue:`14588`)\n\n\nunittest\n--------\n\n:meth:`.assertRaises`, :meth:`.assertRaisesRegex`, :meth:`.assertWarns`, and\n:meth:`.assertWarnsRegex` now accept a keyword argument *msg* when used as\ncontext managers.  (Contributed by Ezio Melotti and Winston Ewert in\n:issue:`10775`.)\n\n:meth:`unittest.TestCase.run` now returns the :class:`~unittest.TestResult`\nobject.\n\n\nurllib\n------\n\nThe :class:`~urllib.request.Request` class, now accepts a *method* argument\nused by :meth:`~urllib.request.Request.get_method` to determine what HTTP method\nshould be used.  For example, this will send a ``'HEAD'`` request::\n\n   >>> urlopen(Request('https://www.python.org', method='HEAD'))\n\n(:issue:`1673007`)\n\n\nwebbrowser\n----------\n\nThe :mod:`webbrowser` module supports more \"browsers\": Google Chrome (named\n:program:`chrome`, :program:`chromium`, :program:`chrome-browser` or\n:program:`chromium-browser` depending on the version and operating system),\nand the generic launchers :program:`xdg-open`, from the FreeDesktop.org\nproject, and :program:`gvfs-open`, which is the default URI handler for GNOME\n3.  (The former contributed by Arnaud Calmettes in :issue:`13620`, the latter\nby Matthias Klose in :issue:`14493`.)\n\n\nxml.etree.ElementTree\n---------------------\n\nThe :mod:`xml.etree.ElementTree` module now imports its C accelerator by\ndefault; there is no longer a need to explicitly import\n:mod:`xml.etree.cElementTree` (this module stays for backwards compatibility,\nbut is now deprecated).  In addition,  the ``iter`` family of methods of\n:class:`~xml.etree.ElementTree.Element` has been optimized (rewritten in C).\nThe module's documentation has also been greatly improved with added examples\nand a more detailed reference.\n\n\nzlib\n----\n\nNew attribute :attr:`zlib.Decompress.eof` makes it possible to distinguish\nbetween a properly-formed compressed stream and an incomplete or truncated one.\n(Contributed by Nadeem Vawda in :issue:`12646`.)\n\nNew attribute :attr:`zlib.ZLIB_RUNTIME_VERSION` reports the version string of\nthe underlying ``zlib`` library that is loaded at runtime.  (Contributed by\nTorsten Landschoff in :issue:`12306`.)\n\n\nOptimizations\n=============\n\nMajor performance enhancements have been added:\n\n* Thanks to :pep:`393`, some operations on Unicode strings have been optimized:\n\n  * the memory footprint is divided by 2 to 4 depending on the text\n  * encode an ASCII string to UTF-8 doesn't need to encode characters anymore,\n    the UTF-8 representation is shared with the ASCII representation\n  * the UTF-8 encoder has been optimized\n  * repeating a single ASCII letter and getting a substring of an ASCII string\n    is 4 times faster\n\n* UTF-8 is now 2x to 4x faster.  UTF-16 encoding is now up to 10x faster.\n\n  (Contributed by Serhiy Storchaka, :issue:`14624`, :issue:`14738` and\n  :issue:`15026`.)\n\n\nBuild and C API Changes\n=======================\n\nChanges to Python's build process and to the C API include:\n\n* New :pep:`3118` related function:\n\n  * :c:func:`PyMemoryView_FromMemory`\n\n* :pep:`393` added new Unicode types, macros and functions:\n\n  * High-level API:\n\n    * :c:func:`PyUnicode_CopyCharacters`\n    * :c:func:`PyUnicode_FindChar`\n    * :c:func:`PyUnicode_GetLength`, :c:macro:`PyUnicode_GET_LENGTH`\n    * :c:func:`PyUnicode_New`\n    * :c:func:`PyUnicode_Substring`\n    * :c:func:`PyUnicode_ReadChar`, :c:func:`PyUnicode_WriteChar`\n\n  * Low-level API:\n\n    * :c:type:`Py_UCS1`, :c:type:`Py_UCS2`, :c:type:`Py_UCS4` types\n    * :c:type:`PyASCIIObject` and :c:type:`PyCompactUnicodeObject` structures\n    * :c:macro:`PyUnicode_READY`\n    * :c:func:`PyUnicode_FromKindAndData`\n    * :c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsUCS4Copy`\n    * :c:macro:`PyUnicode_DATA`, :c:macro:`PyUnicode_1BYTE_DATA`,\n      :c:macro:`PyUnicode_2BYTE_DATA`, :c:macro:`PyUnicode_4BYTE_DATA`\n    * :c:macro:`PyUnicode_KIND` with :c:type:`PyUnicode_Kind` enum:\n      :c:data:`PyUnicode_WCHAR_KIND`, :c:data:`PyUnicode_1BYTE_KIND`,\n      :c:data:`PyUnicode_2BYTE_KIND`, :c:data:`PyUnicode_4BYTE_KIND`\n    * :c:macro:`PyUnicode_READ`, :c:macro:`PyUnicode_READ_CHAR`, :c:macro:`PyUnicode_WRITE`\n    * :c:macro:`PyUnicode_MAX_CHAR_VALUE`\n\n* :c:macro:`PyArg_ParseTuple` now accepts a :class:`bytearray` for the ``c``\n  format (:issue:`12380`).\n\n\n\nDeprecated\n==========\n\nUnsupported Operating Systems\n-----------------------------\n\nOS/2 and VMS are no longer supported due to the lack of a maintainer.\n\nWindows 2000 and Windows platforms which set ``COMSPEC`` to ``command.com``\nare no longer supported due to maintenance burden.\n\nOSF support, which was deprecated in 3.2, has been completely removed.\n\n\nDeprecated Python modules, functions and methods\n------------------------------------------------\n\n* Passing a non-empty string to ``object.__format__()`` is deprecated, and\n  will produce a :exc:`TypeError` in Python 3.4 (:issue:`9856`).\n* The ``unicode_internal`` codec has been deprecated because of the\n  :pep:`393`, use UTF-8, UTF-16 (``utf-16-le`` or ``utf-16-be``), or UTF-32\n  (``utf-32-le`` or ``utf-32-be``)\n* :meth:`ftplib.FTP.nlst` and :meth:`ftplib.FTP.dir`: use\n  :meth:`ftplib.FTP.mlsd`\n* :func:`platform.popen`: use the :mod:`subprocess` module. Check especially\n  the :ref:`subprocess-replacements` section (:issue:`11377`).\n* :issue:`13374`: The Windows bytes API has been deprecated in the :mod:`os`\n  module. Use Unicode filenames, instead of bytes filenames, to not depend on\n  the ANSI code page anymore and to support any filename.\n* :issue:`13988`: The :mod:`xml.etree.cElementTree` module is deprecated.  The\n  accelerator is used automatically whenever available.\n* The behaviour of :func:`time.clock` depends on the platform: use the new\n  :func:`time.perf_counter` or :func:`time.process_time` function instead,\n  depending on your requirements, to have a well defined behaviour.\n* The :func:`os.stat_float_times` function is deprecated.\n* :mod:`abc` module:\n\n  * :class:`abc.abstractproperty` has been deprecated, use :class:`property`\n    with :func:`abc.abstractmethod` instead.\n  * :class:`abc.abstractclassmethod` has been deprecated, use\n    :class:`classmethod` with :func:`abc.abstractmethod` instead.\n  * :class:`abc.abstractstaticmethod` has been deprecated, use\n    :class:`staticmethod` with :func:`abc.abstractmethod` instead.\n\n* :mod:`importlib` package:\n\n  * :meth:`importlib.abc.SourceLoader.path_mtime` is now deprecated in favour of\n    :meth:`importlib.abc.SourceLoader.path_stats` as bytecode files now store\n    both the modification time and size of the source file the bytecode file was\n    compiled from.\n\n\n\n\n\nDeprecated functions and types of the C API\n-------------------------------------------\n\nThe :c:type:`Py_UNICODE` has been deprecated by :pep:`393` and will be\nremoved in Python 4. All functions using this type are deprecated:\n\nUnicode functions and methods using :c:type:`Py_UNICODE` and\n:c:type:`Py_UNICODE*` types:\n\n* :c:macro:`PyUnicode_FromUnicode`: use :c:func:`PyUnicode_FromWideChar` or\n  :c:func:`PyUnicode_FromKindAndData`\n* :c:macro:`PyUnicode_AS_UNICODE`, :c:func:`PyUnicode_AsUnicode`,\n  :c:func:`PyUnicode_AsUnicodeAndSize`: use :c:func:`PyUnicode_AsWideCharString`\n* :c:macro:`PyUnicode_AS_DATA`: use :c:macro:`PyUnicode_DATA` with\n  :c:macro:`PyUnicode_READ` and :c:macro:`PyUnicode_WRITE`\n* :c:macro:`PyUnicode_GET_SIZE`, :c:func:`PyUnicode_GetSize`: use\n  :c:macro:`PyUnicode_GET_LENGTH` or :c:func:`PyUnicode_GetLength`\n* :c:macro:`PyUnicode_GET_DATA_SIZE`: use\n  ``PyUnicode_GET_LENGTH(str) * PyUnicode_KIND(str)`` (only work on ready\n  strings)\n* :c:func:`PyUnicode_AsUnicodeCopy`: use :c:func:`PyUnicode_AsUCS4Copy` or\n  :c:func:`PyUnicode_AsWideCharString`\n* :c:func:`PyUnicode_GetMax`\n\n\nFunctions and macros manipulating Py_UNICODE* strings:\n\n* :c:macro:`Py_UNICODE_strlen`: use :c:func:`PyUnicode_GetLength` or\n  :c:macro:`PyUnicode_GET_LENGTH`\n* :c:macro:`Py_UNICODE_strcat`: use :c:func:`PyUnicode_CopyCharacters` or\n  :c:func:`PyUnicode_FromFormat`\n* :c:macro:`Py_UNICODE_strcpy`, :c:macro:`Py_UNICODE_strncpy`,\n  :c:macro:`Py_UNICODE_COPY`: use :c:func:`PyUnicode_CopyCharacters` or\n  :c:func:`PyUnicode_Substring`\n* :c:macro:`Py_UNICODE_strcmp`: use :c:func:`PyUnicode_Compare`\n* :c:macro:`Py_UNICODE_strncmp`: use :c:func:`PyUnicode_Tailmatch`\n* :c:macro:`Py_UNICODE_strchr`, :c:macro:`Py_UNICODE_strrchr`: use\n  :c:func:`PyUnicode_FindChar`\n* :c:macro:`Py_UNICODE_FILL`: use :c:func:`PyUnicode_Fill`\n* :c:macro:`Py_UNICODE_MATCH`\n\nEncoders:\n\n* :c:func:`PyUnicode_Encode`: use :c:func:`PyUnicode_AsEncodedObject`\n* :c:func:`PyUnicode_EncodeUTF7`\n* :c:func:`PyUnicode_EncodeUTF8`: use :c:func:`PyUnicode_AsUTF8` or\n  :c:func:`PyUnicode_AsUTF8String`\n* :c:func:`PyUnicode_EncodeUTF32`\n* :c:func:`PyUnicode_EncodeUTF16`\n* :c:func:`PyUnicode_EncodeUnicodeEscape:` use\n  :c:func:`PyUnicode_AsUnicodeEscapeString`\n* :c:func:`PyUnicode_EncodeRawUnicodeEscape:` use\n  :c:func:`PyUnicode_AsRawUnicodeEscapeString`\n* :c:func:`PyUnicode_EncodeLatin1`: use :c:func:`PyUnicode_AsLatin1String`\n* :c:func:`PyUnicode_EncodeASCII`: use :c:func:`PyUnicode_AsASCIIString`\n* :c:func:`PyUnicode_EncodeCharmap`\n* :c:func:`PyUnicode_TranslateCharmap`\n* :c:func:`PyUnicode_EncodeMBCS`: use :c:func:`PyUnicode_AsMBCSString` or\n  :c:func:`PyUnicode_EncodeCodePage` (with ``CP_ACP`` code_page)\n* :c:func:`PyUnicode_EncodeDecimal`,\n  :c:func:`PyUnicode_TransformDecimalToASCII`\n\n\nDeprecated features\n-------------------\n\nThe :mod:`array` module's ``'u'`` format code is now deprecated and will be\nremoved in Python 4 together with the rest of the (:c:type:`Py_UNICODE`) API.\n\n\nPorting to Python 3.3\n=====================\n\nThis section lists previously described changes and other bugfixes\nthat may require changes to your code.\n\n.. _portingpythoncode:\n\nPorting Python code\n-------------------\n\n* Hash randomization is enabled by default. Set the :envvar:`PYTHONHASHSEED`\n  environment variable to ``0`` to disable hash randomization. See also the\n  :meth:`object.__hash__` method.\n\n* :issue:`12326`: On Linux, sys.platform doesn't contain the major version\n  anymore. It is now always 'linux', instead of 'linux2' or 'linux3' depending\n  on the Linux version used to build Python. Replace sys.platform == 'linux2'\n  with sys.platform.startswith('linux'), or directly sys.platform == 'linux' if\n  you don't need to support older Python versions.\n\n* :issue:`13847`, :issue:`14180`: :mod:`time` and :mod:`datetime`:\n  :exc:`OverflowError` is now raised instead of :exc:`ValueError` if a\n  timestamp is out of range. :exc:`OSError` is now raised if C functions\n  :c:func:`gmtime` or :c:func:`localtime` failed.\n\n* The default finders used by import now utilize a cache of what is contained\n  within a specific directory. If you create a Python source file or sourceless\n  bytecode file, make sure to call :func:`importlib.invalidate_caches` to clear\n  out the cache for the finders to notice the new file.\n\n* :exc:`ImportError` now uses the full name of the module that was attempted to\n  be imported. Doctests that check ImportErrors' message will need to be\n  updated to use the full name of the module instead of just the tail of the\n  name.\n\n* The *index* argument to :func:`__import__` now defaults to 0 instead of -1\n  and no longer support negative values. It was an oversight when :pep:`328` was\n  implemented that the default value remained -1. If you need to continue to\n  perform a relative import followed by an absolute import, then perform the\n  relative import using an index of 1, followed by another import using an\n  index of 0. It is preferred, though, that you use\n  :func:`importlib.import_module` rather than call :func:`__import__` directly.\n\n* :func:`__import__` no longer allows one to use an index value other than 0\n  for top-level modules. E.g. ``__import__('sys', level=1)`` is now an error.\n\n* Because :attr:`sys.meta_path` and :attr:`sys.path_hooks` now have finders on\n  them by default, you will most likely want to use :meth:`list.insert` instead\n  of :meth:`list.append` to add to those lists.\n\n* Because ``None`` is now inserted into :attr:`sys.path_importer_cache`, if you\n  are clearing out entries in the dictionary of paths that do not have a\n  finder, you will need to remove keys paired with values of ``None`` **and**\n  :class:`imp.NullImporter` to be backwards-compatible. This will lead to extra\n  overhead on older versions of Python that re-insert ``None`` into\n  :attr:`sys.path_importer_cache` where it repesents the use of implicit\n  finders, but semantically it should not change anything.\n\n* :class:`importlib.abc.Finder` no longer specifies a `find_module()` abstract\n  method that must be implemented. If you were relying on subclasses to\n  implement that method, make sure to check for the method's existence first.\n  You will probably want to check for `find_loader()` first, though, in the\n  case of working with :term:`path entry finders <path entry finder>`.\n\n* :mod:`pkgutil` has been converted to use :mod:`importlib` internally. This\n  eliminates many edge cases where the old behaviour of the PEP 302 import\n  emulation failed to match the behaviour of the real import system. The\n  import emulation itself is still present, but is now deprecated. The\n  :func:`pkgutil.iter_importers` and :func:`pkgutil.walk_packages` functions\n  special case the standard import hooks so they are still supported even\n  though they do not provide the non-standard ``iter_modules()`` method.\n\n* A longstanding RFC-compliance bug (:issue:`1079`) in the parsing done by\n  :func:`email.header.decode_header` has been fixed.  Code that uses the\n  standard idiom to convert encoded headers into unicode\n  (``str(make_header(decode_header(h))``) will see no change, but code that\n  looks at the individual tuples returned by decode_header will see that\n  whitespace that precedes or follows ``ASCII`` sections is now included in the\n  ``ASCII`` section.  Code that builds headers using ``make_header`` should\n  also continue to work without change, since ``make_header`` continues to add\n  whitespace between ``ASCII`` and non-``ASCII`` sections if it is not already\n  present in the input strings.\n\n* :func:`email.utils.formataddr` now does the correct content transfer\n  encoding when passed non-``ASCII`` display names.  Any code that depended on\n  the previous buggy behavior that preserved the non-``ASCII`` unicode in the\n  formatted output string will need to be changed (:issue:`1690608`).\n\n* :meth:`poplib.POP3.quit` may now raise protocol errors like all other\n  ``poplib`` methods.  Code that assumes ``quit`` does not raise\n  :exc:`poplib.error_proto` errors may need to be changed if errors on ``quit``\n  are encountered by a particular application (:issue:`11291`).\n\n* The ``strict`` argument to :class:`email.parser.Parser`, deprecated since\n  Python 2.4, has finally been removed.\n\n* The deprecated method ``unittest.TestCase.assertSameElements`` has been\n  removed.\n\n* The deprecated variable ``time.accept2dyear`` has been removed.\n\n* The deprecated ``Context._clamp`` attribute has been removed from the\n  :mod:`decimal` module.  It was previously replaced by the public attribute\n  :attr:`~decimal.Context.clamp`.  (See :issue:`8540`.)\n\n* The undocumented internal helper class ``SSLFakeFile`` has been removed\n  from :mod:`smtplib`, since its functionality has long been provided directly\n  by :meth:`socket.socket.makefile`.\n\n* Passing a negative value to :func:`time.sleep` on Windows now raises an\n  error instead of sleeping forever.  It has always raised an error on posix.\n\n* The ``ast.__version__`` constant has been removed.  If you need to\n  make decisions affected by the AST version, use :attr:`sys.version_info`\n  to make the decision.\n\n* Code that used to work around the fact that the :mod:`threading` module used\n  factory functions by subclassing the private classes will need to change to\n  subclass the now-public classes.\n\n* The undocumented debugging machinery in the threading module has been\n  removed, simplifying the code.  This should have no effect on production\n  code, but is mentioned here in case any application debug frameworks were\n  interacting with it (:issue:`13550`).\n\n\nPorting C code\n--------------\n\n* In the course of changes to the buffer API the undocumented\n  :c:member:`~Py_buffer.smalltable` member of the\n  :c:type:`Py_buffer` structure has been removed and the\n  layout of the :c:type:`PyMemoryViewObject` has changed.\n\n  All extensions relying on the relevant parts in ``memoryobject.h``\n  or ``object.h`` must be rebuilt.\n\n* Due to :ref:`PEP 393 <pep-393>`, the :c:type:`Py_UNICODE` type and all\n  functions using this type are deprecated (but will stay available for\n  at least five years).  If you were using low-level Unicode APIs to\n  construct and access unicode objects and you want to benefit of the\n  memory footprint reduction provided by PEP 393, you have to convert\n  your code to the new :doc:`Unicode API <../c-api/unicode>`.\n\n  However, if you only have been using high-level functions such as\n  :c:func:`PyUnicode_Concat()`, :c:func:`PyUnicode_Join` or\n  :c:func:`PyUnicode_FromFormat()`, your code will automatically take\n  advantage of the new unicode representations.\n\n* :c:func:`PyImport_GetMagicNumber` now returns -1 upon failure.\n\n* As a negative value for the *level* argument to :func:`__import__` is no\n  longer valid, the same now holds for :c:func:`PyImport_ImportModuleLevel`.\n  This also means that the value of *level* used by\n  :c:func:`PyImport_ImportModuleEx` is now 0 instead of -1.\n\n\nBuilding C extensions\n---------------------\n\n* The range of possible file names for C extensions has been narrowed.\n  Very rarely used spellings have been suppressed: under POSIX, files\n  named ``xxxmodule.so``, ``xxxmodule.abi3.so`` and\n  ``xxxmodule.cpython-*.so`` are no longer recognized as implementing\n  the ``xxx`` module.  If you had been generating such files, you have\n  to switch to the other spellings (i.e., remove the ``module`` string\n  from the file names).\n\n  (implemented in :issue:`14040`.)\n\n\nCommand Line Switch Changes\n---------------------------\n\n* The -Q command-line flag and related artifacts have been removed.  Code\n  checking sys.flags.division_warning will need updating.\n\n  (:issue:`10998`, contributed by \u00c9ric Araujo.)\n\n* When :program:`python` is started with :option:`-S`, ``import site``\n  will no longer add site-specific paths to the module search paths.  In\n  previous versions, it did.\n\n  (:issue:`11591`, contributed by Carl Meyer with editions by \u00c9ric Araujo.)\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Python/dynload_shlib.c": "\n/* Support for dynamic loading of extension modules */\n\n#include \"Python.h\"\n#include \"importdl.h\"\n\n#include <sys/types.h>\n#include <sys/stat.h>\n\n#if defined(__NetBSD__)\n#include <sys/param.h>\n#if (NetBSD < 199712)\n#include <nlist.h>\n#include <link.h>\n#define dlerror() \"error in dynamic linking\"\n#endif\n#endif /* NetBSD */\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#if (defined(__OpenBSD__) || defined(__NetBSD__)) && !defined(__ELF__)\n#define LEAD_UNDERSCORE \"_\"\n#else\n#define LEAD_UNDERSCORE \"\"\n#endif\n\n/* The .so extension module ABI tag, supplied by the Makefile via\n   Makefile.pre.in and configure.  This is used to discriminate between\n   incompatible .so files so that extensions for different Python builds can\n   live in the same directory.  E.g. foomodule.cpython-32.so\n*/\n\nconst char *_PyImport_DynLoadFiletab[] = {\n#ifdef __CYGWIN__\n    \".dll\",\n#else  /* !__CYGWIN__ */\n    \".\" SOABI \".so\",\n    \".abi\" PYTHON_ABI_STRING \".so\",\n    \".so\",\n#endif  /* __CYGWIN__ */\n    NULL,\n};\n\nstatic struct {\n    dev_t dev;\n    ino_t ino;\n    void *handle;\n} handles[128];\nstatic int nhandles = 0;\n\n\ndl_funcptr\n_PyImport_FindSharedFuncptr(const char *prefix,\n                            const char *shortname,\n                            const char *pathname, FILE *fp)\n{\n    dl_funcptr p;\n    void *handle;\n    char funcname[258];\n    char pathbuf[260];\n    int dlopenflags=0;\n\n    if (strchr(pathname, '/') == NULL) {\n        /* Prefix bare filename with \"./\" */\n        PyOS_snprintf(pathbuf, sizeof(pathbuf), \"./%-.255s\", pathname);\n        pathname = pathbuf;\n    }\n\n    PyOS_snprintf(funcname, sizeof(funcname),\n                  LEAD_UNDERSCORE \"%.20s_%.200s\", prefix, shortname);\n\n    if (fp != NULL) {\n        int i;\n        struct _Py_stat_struct status;\n        if (_Py_fstat(fileno(fp), &status) == -1)\n            return NULL;\n        for (i = 0; i < nhandles; i++) {\n            if (status.st_dev == handles[i].dev &&\n                status.st_ino == handles[i].ino) {\n                p = (dl_funcptr) dlsym(handles[i].handle,\n                                       funcname);\n                return p;\n            }\n        }\n        if (nhandles < 128) {\n            handles[nhandles].dev = status.st_dev;\n            handles[nhandles].ino = status.st_ino;\n        }\n    }\n\n    dlopenflags = PyThreadState_GET()->interp->dlopenflags;\n\n    handle = dlopen(pathname, dlopenflags);\n\n    if (handle == NULL) {\n        PyObject *mod_name;\n        PyObject *path;\n        PyObject *error_ob;\n        const char *error = dlerror();\n        if (error == NULL)\n            error = \"unknown dlopen() error\";\n        error_ob = PyUnicode_FromString(error);\n        if (error_ob == NULL)\n            return NULL;\n        mod_name = PyUnicode_FromString(shortname);\n        if (mod_name == NULL) {\n            Py_DECREF(error_ob);\n            return NULL;\n        }\n        path = PyUnicode_FromString(pathname);\n        if (path == NULL) {\n            Py_DECREF(error_ob);\n            Py_DECREF(mod_name);\n            return NULL;\n        }\n        PyErr_SetImportError(error_ob, mod_name, path);\n        Py_DECREF(error_ob);\n        Py_DECREF(mod_name);\n        Py_DECREF(path);\n        return NULL;\n    }\n    if (fp != NULL && nhandles < 128)\n        handles[nhandles++].handle = handle;\n    p = (dl_funcptr) dlsym(handle, funcname);\n    return p;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Python/sysmodule.c": "\n/* System module */\n\n/*\nVarious bits of information used by the interpreter are collected in\nmodule 'sys'.\nFunction member:\n- exit(sts): raise SystemExit\nData members:\n- stdin, stdout, stderr: standard file objects\n- modules: the table of modules (dictionary)\n- path: module search path (list of strings)\n- argv: script arguments (list of strings)\n- ps1, ps2: optional primary and secondary prompts (strings)\n*/\n\n#include \"Python.h\"\n#include \"code.h\"\n#include \"frameobject.h\"\n#include \"pythread.h\"\n\n#include \"osdefs.h\"\n\n#ifdef MS_WINDOWS\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#endif /* MS_WINDOWS */\n\n#ifdef MS_COREDLL\nextern void *PyWin_DLLhModule;\n/* A string loaded from the DLL at startup: */\nextern const char *PyWin_DLLVersionString;\n#endif\n\n#ifdef HAVE_LANGINFO_H\n#include <locale.h>\n#include <langinfo.h>\n#endif\n\n_Py_IDENTIFIER(_);\n_Py_IDENTIFIER(__sizeof__);\n_Py_IDENTIFIER(buffer);\n_Py_IDENTIFIER(builtins);\n_Py_IDENTIFIER(encoding);\n_Py_IDENTIFIER(path);\n_Py_IDENTIFIER(stdout);\n_Py_IDENTIFIER(stderr);\n_Py_IDENTIFIER(write);\n\nPyObject *\n_PySys_GetObjectId(_Py_Identifier *key)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *sd = tstate->interp->sysdict;\n    if (sd == NULL)\n        return NULL;\n    return _PyDict_GetItemId(sd, key);\n}\n\nPyObject *\nPySys_GetObject(const char *name)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *sd = tstate->interp->sysdict;\n    if (sd == NULL)\n        return NULL;\n    return PyDict_GetItemString(sd, name);\n}\n\nint\n_PySys_SetObjectId(_Py_Identifier *key, PyObject *v)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *sd = tstate->interp->sysdict;\n    if (v == NULL) {\n        if (_PyDict_GetItemId(sd, key) == NULL)\n            return 0;\n        else\n            return _PyDict_DelItemId(sd, key);\n    }\n    else\n        return _PyDict_SetItemId(sd, key, v);\n}\n\nint\nPySys_SetObject(const char *name, PyObject *v)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *sd = tstate->interp->sysdict;\n    if (v == NULL) {\n        if (PyDict_GetItemString(sd, name) == NULL)\n            return 0;\n        else\n            return PyDict_DelItemString(sd, name);\n    }\n    else\n        return PyDict_SetItemString(sd, name, v);\n}\n\n/* Write repr(o) to sys.stdout using sys.stdout.encoding and 'backslashreplace'\n   error handler. If sys.stdout has a buffer attribute, use\n   sys.stdout.buffer.write(encoded), otherwise redecode the string and use\n   sys.stdout.write(redecoded).\n\n   Helper function for sys_displayhook(). */\nstatic int\nsys_displayhook_unencodable(PyObject *outf, PyObject *o)\n{\n    PyObject *stdout_encoding = NULL;\n    PyObject *encoded, *escaped_str, *repr_str, *buffer, *result;\n    char *stdout_encoding_str;\n    int ret;\n\n    stdout_encoding = _PyObject_GetAttrId(outf, &PyId_encoding);\n    if (stdout_encoding == NULL)\n        goto error;\n    stdout_encoding_str = _PyUnicode_AsString(stdout_encoding);\n    if (stdout_encoding_str == NULL)\n        goto error;\n\n    repr_str = PyObject_Repr(o);\n    if (repr_str == NULL)\n        goto error;\n    encoded = PyUnicode_AsEncodedString(repr_str,\n                                        stdout_encoding_str,\n                                        \"backslashreplace\");\n    Py_DECREF(repr_str);\n    if (encoded == NULL)\n        goto error;\n\n    buffer = _PyObject_GetAttrId(outf, &PyId_buffer);\n    if (buffer) {\n        result = _PyObject_CallMethodId(buffer, &PyId_write, \"(O)\", encoded);\n        Py_DECREF(buffer);\n        Py_DECREF(encoded);\n        if (result == NULL)\n            goto error;\n        Py_DECREF(result);\n    }\n    else {\n        PyErr_Clear();\n        escaped_str = PyUnicode_FromEncodedObject(encoded,\n                                                  stdout_encoding_str,\n                                                  \"strict\");\n        Py_DECREF(encoded);\n        if (PyFile_WriteObject(escaped_str, outf, Py_PRINT_RAW) != 0) {\n            Py_DECREF(escaped_str);\n            goto error;\n        }\n        Py_DECREF(escaped_str);\n    }\n    ret = 0;\n    goto finally;\n\nerror:\n    ret = -1;\nfinally:\n    Py_XDECREF(stdout_encoding);\n    return ret;\n}\n\nstatic PyObject *\nsys_displayhook(PyObject *self, PyObject *o)\n{\n    PyObject *outf;\n    PyInterpreterState *interp = PyThreadState_GET()->interp;\n    PyObject *modules = interp->modules;\n    PyObject *builtins;\n    static PyObject *newline = NULL;\n    int err;\n\n    builtins = _PyDict_GetItemId(modules, &PyId_builtins);\n    if (builtins == NULL) {\n        PyErr_SetString(PyExc_RuntimeError, \"lost builtins module\");\n        return NULL;\n    }\n\n    /* Print value except if None */\n    /* After printing, also assign to '_' */\n    /* Before, set '_' to None to avoid recursion */\n    if (o == Py_None) {\n        Py_INCREF(Py_None);\n        return Py_None;\n    }\n    if (_PyObject_SetAttrId(builtins, &PyId__, Py_None) != 0)\n        return NULL;\n    outf = _PySys_GetObjectId(&PyId_stdout);\n    if (outf == NULL || outf == Py_None) {\n        PyErr_SetString(PyExc_RuntimeError, \"lost sys.stdout\");\n        return NULL;\n    }\n    if (PyFile_WriteObject(o, outf, 0) != 0) {\n        if (PyErr_ExceptionMatches(PyExc_UnicodeEncodeError)) {\n            /* repr(o) is not encodable to sys.stdout.encoding with\n             * sys.stdout.errors error handler (which is probably 'strict') */\n            PyErr_Clear();\n            err = sys_displayhook_unencodable(outf, o);\n            if (err)\n                return NULL;\n        }\n        else {\n            return NULL;\n        }\n    }\n    if (newline == NULL) {\n        newline = PyUnicode_FromString(\"\\n\");\n        if (newline == NULL)\n            return NULL;\n    }\n    if (PyFile_WriteObject(newline, outf, Py_PRINT_RAW) != 0)\n        return NULL;\n    if (_PyObject_SetAttrId(builtins, &PyId__, o) != 0)\n        return NULL;\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(displayhook_doc,\n\"displayhook(object) -> None\\n\"\n\"\\n\"\n\"Print an object to sys.stdout and also save it in builtins._\\n\"\n);\n\nstatic PyObject *\nsys_excepthook(PyObject* self, PyObject* args)\n{\n    PyObject *exc, *value, *tb;\n    if (!PyArg_UnpackTuple(args, \"excepthook\", 3, 3, &exc, &value, &tb))\n        return NULL;\n    PyErr_Display(exc, value, tb);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(excepthook_doc,\n\"excepthook(exctype, value, traceback) -> None\\n\"\n\"\\n\"\n\"Handle an exception by displaying it with a traceback on sys.stderr.\\n\"\n);\n\nstatic PyObject *\nsys_exc_info(PyObject *self, PyObject *noargs)\n{\n    PyThreadState *tstate;\n    tstate = PyThreadState_GET();\n    return Py_BuildValue(\n        \"(OOO)\",\n        tstate->exc_type != NULL ? tstate->exc_type : Py_None,\n        tstate->exc_value != NULL ? tstate->exc_value : Py_None,\n        tstate->exc_traceback != NULL ?\n            tstate->exc_traceback : Py_None);\n}\n\nPyDoc_STRVAR(exc_info_doc,\n\"exc_info() -> (type, value, traceback)\\n\\\n\\n\\\nReturn information about the most recent exception caught by an except\\n\\\nclause in the current stack frame or in an older stack frame.\"\n);\n\nstatic PyObject *\nsys_exit(PyObject *self, PyObject *args)\n{\n    PyObject *exit_code = 0;\n    if (!PyArg_UnpackTuple(args, \"exit\", 0, 1, &exit_code))\n        return NULL;\n    /* Raise SystemExit so callers may catch it or clean up. */\n    PyErr_SetObject(PyExc_SystemExit, exit_code);\n    return NULL;\n}\n\nPyDoc_STRVAR(exit_doc,\n\"exit([status])\\n\\\n\\n\\\nExit the interpreter by raising SystemExit(status).\\n\\\nIf the status is omitted or None, it defaults to zero (i.e., success).\\n\\\nIf the status is an integer, it will be used as the system exit status.\\n\\\nIf it is another kind of object, it will be printed and the system\\n\\\nexit status will be one (i.e., failure).\"\n);\n\n\nstatic PyObject *\nsys_getdefaultencoding(PyObject *self)\n{\n    return PyUnicode_FromString(PyUnicode_GetDefaultEncoding());\n}\n\nPyDoc_STRVAR(getdefaultencoding_doc,\n\"getdefaultencoding() -> string\\n\\\n\\n\\\nReturn the current default string encoding used by the Unicode \\n\\\nimplementation.\"\n);\n\nstatic PyObject *\nsys_getfilesystemencoding(PyObject *self)\n{\n    if (Py_FileSystemDefaultEncoding)\n        return PyUnicode_FromString(Py_FileSystemDefaultEncoding);\n    PyErr_SetString(PyExc_RuntimeError,\n                    \"filesystem encoding is not initialized\");\n    return NULL;\n}\n\nPyDoc_STRVAR(getfilesystemencoding_doc,\n\"getfilesystemencoding() -> string\\n\\\n\\n\\\nReturn the encoding used to convert Unicode filenames in\\n\\\noperating system filenames.\"\n);\n\nstatic PyObject *\nsys_intern(PyObject *self, PyObject *args)\n{\n    PyObject *s;\n    if (!PyArg_ParseTuple(args, \"U:intern\", &s))\n        return NULL;\n    if (PyUnicode_CheckExact(s)) {\n        Py_INCREF(s);\n        PyUnicode_InternInPlace(&s);\n        return s;\n    }\n    else {\n        PyErr_Format(PyExc_TypeError,\n                        \"can't intern %.400s\", s->ob_type->tp_name);\n        return NULL;\n    }\n}\n\nPyDoc_STRVAR(intern_doc,\n\"intern(string) -> string\\n\\\n\\n\\\n``Intern'' the given string.  This enters the string in the (global)\\n\\\ntable of interned strings whose purpose is to speed up dictionary lookups.\\n\\\nReturn the string itself or the previously interned string object with the\\n\\\nsame value.\");\n\n\n/*\n * Cached interned string objects used for calling the profile and\n * trace functions.  Initialized by trace_init().\n */\nstatic PyObject *whatstrings[7] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL};\n\nstatic int\ntrace_init(void)\n{\n    static char *whatnames[7] = {\"call\", \"exception\", \"line\", \"return\",\n                                    \"c_call\", \"c_exception\", \"c_return\"};\n    PyObject *name;\n    int i;\n    for (i = 0; i < 7; ++i) {\n        if (whatstrings[i] == NULL) {\n            name = PyUnicode_InternFromString(whatnames[i]);\n            if (name == NULL)\n                return -1;\n            whatstrings[i] = name;\n        }\n    }\n    return 0;\n}\n\n\nstatic PyObject *\ncall_trampoline(PyObject* callback,\n                PyFrameObject *frame, int what, PyObject *arg)\n{\n    PyObject *args;\n    PyObject *whatstr;\n    PyObject *result;\n\n    args = PyTuple_New(3);\n    if (args == NULL)\n        return NULL;\n    if (PyFrame_FastToLocalsWithError(frame) < 0)\n        return NULL;\n\n    Py_INCREF(frame);\n    whatstr = whatstrings[what];\n    Py_INCREF(whatstr);\n    if (arg == NULL)\n        arg = Py_None;\n    Py_INCREF(arg);\n    PyTuple_SET_ITEM(args, 0, (PyObject *)frame);\n    PyTuple_SET_ITEM(args, 1, whatstr);\n    PyTuple_SET_ITEM(args, 2, arg);\n\n    /* call the Python-level function */\n    result = PyEval_CallObject(callback, args);\n    PyFrame_LocalsToFast(frame, 1);\n    if (result == NULL)\n        PyTraceBack_Here(frame);\n\n    /* cleanup */\n    Py_DECREF(args);\n    return result;\n}\n\nstatic int\nprofile_trampoline(PyObject *self, PyFrameObject *frame,\n                   int what, PyObject *arg)\n{\n    PyObject *result;\n\n    if (arg == NULL)\n        arg = Py_None;\n    result = call_trampoline(self, frame, what, arg);\n    if (result == NULL) {\n        PyEval_SetProfile(NULL, NULL);\n        return -1;\n    }\n    Py_DECREF(result);\n    return 0;\n}\n\nstatic int\ntrace_trampoline(PyObject *self, PyFrameObject *frame,\n                 int what, PyObject *arg)\n{\n    PyObject *callback;\n    PyObject *result;\n\n    if (what == PyTrace_CALL)\n        callback = self;\n    else\n        callback = frame->f_trace;\n    if (callback == NULL)\n        return 0;\n    result = call_trampoline(callback, frame, what, arg);\n    if (result == NULL) {\n        PyEval_SetTrace(NULL, NULL);\n        Py_CLEAR(frame->f_trace);\n        return -1;\n    }\n    if (result != Py_None) {\n        PyObject *temp = frame->f_trace;\n        frame->f_trace = NULL;\n        Py_XDECREF(temp);\n        frame->f_trace = result;\n    }\n    else {\n        Py_DECREF(result);\n    }\n    return 0;\n}\n\nstatic PyObject *\nsys_settrace(PyObject *self, PyObject *args)\n{\n    if (trace_init() == -1)\n        return NULL;\n    if (args == Py_None)\n        PyEval_SetTrace(NULL, NULL);\n    else\n        PyEval_SetTrace(trace_trampoline, args);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(settrace_doc,\n\"settrace(function)\\n\\\n\\n\\\nSet the global debug tracing function.  It will be called on each\\n\\\nfunction call.  See the debugger chapter in the library manual.\"\n);\n\nstatic PyObject *\nsys_gettrace(PyObject *self, PyObject *args)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *temp = tstate->c_traceobj;\n\n    if (temp == NULL)\n        temp = Py_None;\n    Py_INCREF(temp);\n    return temp;\n}\n\nPyDoc_STRVAR(gettrace_doc,\n\"gettrace()\\n\\\n\\n\\\nReturn the global debug tracing function set with sys.settrace.\\n\\\nSee the debugger chapter in the library manual.\"\n);\n\nstatic PyObject *\nsys_setprofile(PyObject *self, PyObject *args)\n{\n    if (trace_init() == -1)\n        return NULL;\n    if (args == Py_None)\n        PyEval_SetProfile(NULL, NULL);\n    else\n        PyEval_SetProfile(profile_trampoline, args);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setprofile_doc,\n\"setprofile(function)\\n\\\n\\n\\\nSet the profiling function.  It will be called on each function call\\n\\\nand return.  See the profiler chapter in the library manual.\"\n);\n\nstatic PyObject *\nsys_getprofile(PyObject *self, PyObject *args)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *temp = tstate->c_profileobj;\n\n    if (temp == NULL)\n        temp = Py_None;\n    Py_INCREF(temp);\n    return temp;\n}\n\nPyDoc_STRVAR(getprofile_doc,\n\"getprofile()\\n\\\n\\n\\\nReturn the profiling function set with sys.setprofile.\\n\\\nSee the profiler chapter in the library manual.\"\n);\n\nstatic int _check_interval = 100;\n\nstatic PyObject *\nsys_setcheckinterval(PyObject *self, PyObject *args)\n{\n    if (PyErr_WarnEx(PyExc_DeprecationWarning,\n                     \"sys.getcheckinterval() and sys.setcheckinterval() \"\n                     \"are deprecated.  Use sys.setswitchinterval() \"\n                     \"instead.\", 1) < 0)\n        return NULL;\n    if (!PyArg_ParseTuple(args, \"i:setcheckinterval\", &_check_interval))\n        return NULL;\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setcheckinterval_doc,\n\"setcheckinterval(n)\\n\\\n\\n\\\nTell the Python interpreter to check for asynchronous events every\\n\\\nn instructions.  This also affects how often thread switches occur.\"\n);\n\nstatic PyObject *\nsys_getcheckinterval(PyObject *self, PyObject *args)\n{\n    if (PyErr_WarnEx(PyExc_DeprecationWarning,\n                     \"sys.getcheckinterval() and sys.setcheckinterval() \"\n                     \"are deprecated.  Use sys.getswitchinterval() \"\n                     \"instead.\", 1) < 0)\n        return NULL;\n    return PyLong_FromLong(_check_interval);\n}\n\nPyDoc_STRVAR(getcheckinterval_doc,\n\"getcheckinterval() -> current check interval; see setcheckinterval().\"\n);\n\n#ifdef WITH_THREAD\nstatic PyObject *\nsys_setswitchinterval(PyObject *self, PyObject *args)\n{\n    double d;\n    if (!PyArg_ParseTuple(args, \"d:setswitchinterval\", &d))\n        return NULL;\n    if (d <= 0.0) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"switch interval must be strictly positive\");\n        return NULL;\n    }\n    _PyEval_SetSwitchInterval((unsigned long) (1e6 * d));\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setswitchinterval_doc,\n\"setswitchinterval(n)\\n\\\n\\n\\\nSet the ideal thread switching delay inside the Python interpreter\\n\\\nThe actual frequency of switching threads can be lower if the\\n\\\ninterpreter executes long sequences of uninterruptible code\\n\\\n(this is implementation-specific and workload-dependent).\\n\\\n\\n\\\nThe parameter must represent the desired switching delay in seconds\\n\\\nA typical value is 0.005 (5 milliseconds).\"\n);\n\nstatic PyObject *\nsys_getswitchinterval(PyObject *self, PyObject *args)\n{\n    return PyFloat_FromDouble(1e-6 * _PyEval_GetSwitchInterval());\n}\n\nPyDoc_STRVAR(getswitchinterval_doc,\n\"getswitchinterval() -> current thread switch interval; see setswitchinterval().\"\n);\n\n#endif /* WITH_THREAD */\n\n#ifdef WITH_TSC\nstatic PyObject *\nsys_settscdump(PyObject *self, PyObject *args)\n{\n    int bool;\n    PyThreadState *tstate = PyThreadState_Get();\n\n    if (!PyArg_ParseTuple(args, \"i:settscdump\", &bool))\n        return NULL;\n    if (bool)\n        tstate->interp->tscdump = 1;\n    else\n        tstate->interp->tscdump = 0;\n    Py_INCREF(Py_None);\n    return Py_None;\n\n}\n\nPyDoc_STRVAR(settscdump_doc,\n\"settscdump(bool)\\n\\\n\\n\\\nIf true, tell the Python interpreter to dump VM measurements to\\n\\\nstderr.  If false, turn off dump.  The measurements are based on the\\n\\\nprocessor's time-stamp counter.\"\n);\n#endif /* TSC */\n\nstatic PyObject *\nsys_setrecursionlimit(PyObject *self, PyObject *args)\n{\n    int new_limit, mark;\n    PyThreadState *tstate;\n\n    if (!PyArg_ParseTuple(args, \"i:setrecursionlimit\", &new_limit))\n        return NULL;\n\n    if (new_limit < 1) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"recursion limit must be greater or equal than 1\");\n        return NULL;\n    }\n\n    /* Issue #25274: When the recursion depth hits the recursion limit in\n       _Py_CheckRecursiveCall(), the overflowed flag of the thread state is\n       set to 1 and a RecursionError is raised. The overflowed flag is reset\n       to 0 when the recursion depth goes below the low-water mark: see\n       Py_LeaveRecursiveCall().\n\n       Reject too low new limit if the current recursion depth is higher than\n       the new low-water mark. Otherwise it may not be possible anymore to\n       reset the overflowed flag to 0. */\n    mark = _Py_RecursionLimitLowerWaterMark(new_limit);\n    tstate = PyThreadState_GET();\n    if (tstate->recursion_depth >= mark) {\n        PyErr_Format(PyExc_RecursionError,\n                     \"cannot set the recursion limit to %i at \"\n                     \"the recursion depth %i: the limit is too low\",\n                     new_limit, tstate->recursion_depth);\n        return NULL;\n    }\n\n    Py_SetRecursionLimit(new_limit);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nstatic PyObject *\nsys_set_coroutine_wrapper(PyObject *self, PyObject *wrapper)\n{\n    if (wrapper != Py_None) {\n        if (!PyCallable_Check(wrapper)) {\n            PyErr_Format(PyExc_TypeError,\n                         \"callable expected, got %.50s\",\n                         Py_TYPE(wrapper)->tp_name);\n            return NULL;\n        }\n        _PyEval_SetCoroutineWrapper(wrapper);\n    }\n    else {\n        _PyEval_SetCoroutineWrapper(NULL);\n    }\n    Py_RETURN_NONE;\n}\n\nPyDoc_STRVAR(set_coroutine_wrapper_doc,\n\"set_coroutine_wrapper(wrapper)\\n\\\n\\n\\\nSet a wrapper for coroutine objects.\"\n);\n\nstatic PyObject *\nsys_get_coroutine_wrapper(PyObject *self, PyObject *args)\n{\n    PyObject *wrapper = _PyEval_GetCoroutineWrapper();\n    if (wrapper == NULL) {\n        wrapper = Py_None;\n    }\n    Py_INCREF(wrapper);\n    return wrapper;\n}\n\nPyDoc_STRVAR(get_coroutine_wrapper_doc,\n\"get_coroutine_wrapper()\\n\\\n\\n\\\nReturn the wrapper for coroutine objects set by sys.set_coroutine_wrapper.\"\n);\n\n\nstatic PyTypeObject Hash_InfoType;\n\nPyDoc_STRVAR(hash_info_doc,\n\"hash_info\\n\\\n\\n\\\nA struct sequence providing parameters used for computing\\n\\\nhashes. The attributes are read only.\");\n\nstatic PyStructSequence_Field hash_info_fields[] = {\n    {\"width\", \"width of the type used for hashing, in bits\"},\n    {\"modulus\", \"prime number giving the modulus on which the hash \"\n                \"function is based\"},\n    {\"inf\", \"value to be used for hash of a positive infinity\"},\n    {\"nan\", \"value to be used for hash of a nan\"},\n    {\"imag\", \"multiplier used for the imaginary part of a complex number\"},\n    {\"algorithm\", \"name of the algorithm for hashing of str, bytes and \"\n                  \"memoryviews\"},\n    {\"hash_bits\", \"internal output size of hash algorithm\"},\n    {\"seed_bits\", \"seed size of hash algorithm\"},\n    {\"cutoff\", \"small string optimization cutoff\"},\n    {NULL, NULL}\n};\n\nstatic PyStructSequence_Desc hash_info_desc = {\n    \"sys.hash_info\",\n    hash_info_doc,\n    hash_info_fields,\n    9,\n};\n\nstatic PyObject *\nget_hash_info(void)\n{\n    PyObject *hash_info;\n    int field = 0;\n    PyHash_FuncDef *hashfunc;\n    hash_info = PyStructSequence_New(&Hash_InfoType);\n    if (hash_info == NULL)\n        return NULL;\n    hashfunc = PyHash_GetFuncDef();\n    PyStructSequence_SET_ITEM(hash_info, field++,\n                              PyLong_FromLong(8*sizeof(Py_hash_t)));\n    PyStructSequence_SET_ITEM(hash_info, field++,\n                              PyLong_FromSsize_t(_PyHASH_MODULUS));\n    PyStructSequence_SET_ITEM(hash_info, field++,\n                              PyLong_FromLong(_PyHASH_INF));\n    PyStructSequence_SET_ITEM(hash_info, field++,\n                              PyLong_FromLong(_PyHASH_NAN));\n    PyStructSequence_SET_ITEM(hash_info, field++,\n                              PyLong_FromLong(_PyHASH_IMAG));\n    PyStructSequence_SET_ITEM(hash_info, field++,\n                              PyUnicode_FromString(hashfunc->name));\n    PyStructSequence_SET_ITEM(hash_info, field++,\n                              PyLong_FromLong(hashfunc->hash_bits));\n    PyStructSequence_SET_ITEM(hash_info, field++,\n                              PyLong_FromLong(hashfunc->seed_bits));\n    PyStructSequence_SET_ITEM(hash_info, field++,\n                              PyLong_FromLong(Py_HASH_CUTOFF));\n    if (PyErr_Occurred()) {\n        Py_CLEAR(hash_info);\n        return NULL;\n    }\n    return hash_info;\n}\n\n\nPyDoc_STRVAR(setrecursionlimit_doc,\n\"setrecursionlimit(n)\\n\\\n\\n\\\nSet the maximum depth of the Python interpreter stack to n.  This\\n\\\nlimit prevents infinite recursion from causing an overflow of the C\\n\\\nstack and crashing Python.  The highest possible limit is platform-\\n\\\ndependent.\"\n);\n\nstatic PyObject *\nsys_getrecursionlimit(PyObject *self)\n{\n    return PyLong_FromLong(Py_GetRecursionLimit());\n}\n\nPyDoc_STRVAR(getrecursionlimit_doc,\n\"getrecursionlimit()\\n\\\n\\n\\\nReturn the current value of the recursion limit, the maximum depth\\n\\\nof the Python interpreter stack.  This limit prevents infinite\\n\\\nrecursion from causing an overflow of the C stack and crashing Python.\"\n);\n\n#ifdef MS_WINDOWS\nPyDoc_STRVAR(getwindowsversion_doc,\n\"getwindowsversion()\\n\\\n\\n\\\nReturn information about the running version of Windows as a named tuple.\\n\\\nThe members are named: major, minor, build, platform, service_pack,\\n\\\nservice_pack_major, service_pack_minor, suite_mask, and product_type. For\\n\\\nbackward compatibility, only the first 5 items are available by indexing.\\n\\\nAll elements are numbers, except service_pack which is a string. Platform\\n\\\nmay be 0 for win32s, 1 for Windows 9x/ME, 2 for Windows NT/2000/XP/Vista/7,\\n\\\n3 for Windows CE. Product_type may be 1 for a workstation, 2 for a domain\\n\\\ncontroller, 3 for a server.\"\n);\n\nstatic PyTypeObject WindowsVersionType = {0, 0, 0, 0, 0, 0};\n\nstatic PyStructSequence_Field windows_version_fields[] = {\n    {\"major\", \"Major version number\"},\n    {\"minor\", \"Minor version number\"},\n    {\"build\", \"Build number\"},\n    {\"platform\", \"Operating system platform\"},\n    {\"service_pack\", \"Latest Service Pack installed on the system\"},\n    {\"service_pack_major\", \"Service Pack major version number\"},\n    {\"service_pack_minor\", \"Service Pack minor version number\"},\n    {\"suite_mask\", \"Bit mask identifying available product suites\"},\n    {\"product_type\", \"System product type\"},\n    {\"_platform_version\", \"Diagnostic version number\"},\n    {0}\n};\n\nstatic PyStructSequence_Desc windows_version_desc = {\n    \"sys.getwindowsversion\",  /* name */\n    getwindowsversion_doc,    /* doc */\n    windows_version_fields,   /* fields */\n    5                         /* For backward compatibility,\n                                 only the first 5 items are accessible\n                                 via indexing, the rest are name only */\n};\n\n/* Disable deprecation warnings about GetVersionEx as the result is\n   being passed straight through to the caller, who is responsible for\n   using it correctly. */\n#pragma warning(push)\n#pragma warning(disable:4996)\n\nstatic PyObject *\nsys_getwindowsversion(PyObject *self)\n{\n    PyObject *version;\n    int pos = 0;\n    OSVERSIONINFOEX ver;\n    DWORD realMajor, realMinor, realBuild;\n    HANDLE hKernel32;\n    wchar_t kernel32_path[MAX_PATH];\n    LPVOID verblock;\n    DWORD verblock_size;\n\n    ver.dwOSVersionInfoSize = sizeof(ver);\n    if (!GetVersionEx((OSVERSIONINFO*) &ver))\n        return PyErr_SetFromWindowsErr(0);\n\n    version = PyStructSequence_New(&WindowsVersionType);\n    if (version == NULL)\n        return NULL;\n\n    PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwMajorVersion));\n    PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwMinorVersion));\n    PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwBuildNumber));\n    PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwPlatformId));\n    PyStructSequence_SET_ITEM(version, pos++, PyUnicode_FromString(ver.szCSDVersion));\n    PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wServicePackMajor));\n    PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wServicePackMinor));\n    PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wSuiteMask));\n    PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wProductType));\n\n    realMajor = ver.dwMajorVersion;\n    realMinor = ver.dwMinorVersion;\n    realBuild = ver.dwBuildNumber;\n\n    // GetVersion will lie if we are running in a compatibility mode.\n    // We need to read the version info from a system file resource\n    // to accurately identify the OS version. If we fail for any reason,\n    // just return whatever GetVersion said.\n    hKernel32 = GetModuleHandleW(L\"kernel32.dll\");\n    if (hKernel32 && GetModuleFileNameW(hKernel32, kernel32_path, MAX_PATH) &&\n        (verblock_size = GetFileVersionInfoSizeW(kernel32_path, NULL)) &&\n        (verblock = PyMem_RawMalloc(verblock_size))) {\n        VS_FIXEDFILEINFO *ffi;\n        UINT ffi_len;\n\n        if (GetFileVersionInfoW(kernel32_path, 0, verblock_size, verblock) &&\n            VerQueryValueW(verblock, L\"\", (LPVOID)&ffi, &ffi_len)) {\n            realMajor = HIWORD(ffi->dwProductVersionMS);\n            realMinor = LOWORD(ffi->dwProductVersionMS);\n            realBuild = HIWORD(ffi->dwProductVersionLS);\n        }\n        PyMem_RawFree(verblock);\n    }\n    PyStructSequence_SET_ITEM(version, pos++, Py_BuildValue(\"(kkk)\",\n        realMajor,\n        realMinor,\n        realBuild\n    ));\n\n    if (PyErr_Occurred()) {\n        Py_DECREF(version);\n        return NULL;\n    }\n\n    return version;\n}\n\n#pragma warning(pop)\n\n#endif /* MS_WINDOWS */\n\n#ifdef HAVE_DLOPEN\nstatic PyObject *\nsys_setdlopenflags(PyObject *self, PyObject *args)\n{\n    int new_val;\n    PyThreadState *tstate = PyThreadState_GET();\n    if (!PyArg_ParseTuple(args, \"i:setdlopenflags\", &new_val))\n        return NULL;\n    if (!tstate)\n        return NULL;\n    tstate->interp->dlopenflags = new_val;\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setdlopenflags_doc,\n\"setdlopenflags(n) -> None\\n\\\n\\n\\\nSet the flags used by the interpreter for dlopen calls, such as when the\\n\\\ninterpreter loads extension modules.  Among other things, this will enable\\n\\\na lazy resolving of symbols when importing a module, if called as\\n\\\nsys.setdlopenflags(0).  To share symbols across extension modules, call as\\n\\\nsys.setdlopenflags(os.RTLD_GLOBAL).  Symbolic names for the flag modules\\n\\\ncan be found in the os module (RTLD_xxx constants, e.g. os.RTLD_LAZY).\");\n\nstatic PyObject *\nsys_getdlopenflags(PyObject *self, PyObject *args)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    if (!tstate)\n        return NULL;\n    return PyLong_FromLong(tstate->interp->dlopenflags);\n}\n\nPyDoc_STRVAR(getdlopenflags_doc,\n\"getdlopenflags() -> int\\n\\\n\\n\\\nReturn the current value of the flags that are used for dlopen calls.\\n\\\nThe flag constants are defined in the os module.\");\n\n#endif  /* HAVE_DLOPEN */\n\n#ifdef USE_MALLOPT\n/* Link with -lmalloc (or -lmpc) on an SGI */\n#include <malloc.h>\n\nstatic PyObject *\nsys_mdebug(PyObject *self, PyObject *args)\n{\n    int flag;\n    if (!PyArg_ParseTuple(args, \"i:mdebug\", &flag))\n        return NULL;\n    mallopt(M_DEBUG, flag);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n#endif /* USE_MALLOPT */\n\nsize_t\n_PySys_GetSizeOf(PyObject *o)\n{\n    PyObject *res = NULL;\n    PyObject *method;\n    Py_ssize_t size;\n\n    /* Make sure the type is initialized. float gets initialized late */\n    if (PyType_Ready(Py_TYPE(o)) < 0)\n        return (size_t)-1;\n\n    method = _PyObject_LookupSpecial(o, &PyId___sizeof__);\n    if (method == NULL) {\n        if (!PyErr_Occurred())\n            PyErr_Format(PyExc_TypeError,\n                         \"Type %.100s doesn't define __sizeof__\",\n                         Py_TYPE(o)->tp_name);\n    }\n    else {\n        res = PyObject_CallFunctionObjArgs(method, NULL);\n        Py_DECREF(method);\n    }\n\n    if (res == NULL)\n        return (size_t)-1;\n\n    size = PyLong_AsSsize_t(res);\n    Py_DECREF(res);\n    if (size == -1 && PyErr_Occurred())\n        return (size_t)-1;\n\n    if (size < 0) {\n        PyErr_SetString(PyExc_ValueError, \"__sizeof__() should return >= 0\");\n        return (size_t)-1;\n    }\n\n    /* add gc_head size */\n    if (PyObject_IS_GC(o))\n        return ((size_t)size) + sizeof(PyGC_Head);\n    return (size_t)size;\n}\n\nstatic PyObject *\nsys_getsizeof(PyObject *self, PyObject *args, PyObject *kwds)\n{\n    static char *kwlist[] = {\"object\", \"default\", 0};\n    size_t size;\n    PyObject *o, *dflt = NULL;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"O|O:getsizeof\",\n                                     kwlist, &o, &dflt))\n        return NULL;\n\n    size = _PySys_GetSizeOf(o);\n\n    if (size == (size_t)-1 && PyErr_Occurred()) {\n        /* Has a default value been given */\n        if (dflt != NULL && PyErr_ExceptionMatches(PyExc_TypeError)) {\n            PyErr_Clear();\n            Py_INCREF(dflt);\n            return dflt;\n        }\n        else\n            return NULL;\n    }\n\n    return PyLong_FromSize_t(size);\n}\n\nPyDoc_STRVAR(getsizeof_doc,\n\"getsizeof(object, default) -> int\\n\\\n\\n\\\nReturn the size of object in bytes.\");\n\nstatic PyObject *\nsys_getrefcount(PyObject *self, PyObject *arg)\n{\n    return PyLong_FromSsize_t(arg->ob_refcnt);\n}\n\n#ifdef Py_REF_DEBUG\nstatic PyObject *\nsys_gettotalrefcount(PyObject *self)\n{\n    return PyLong_FromSsize_t(_Py_GetRefTotal());\n}\n#endif /* Py_REF_DEBUG */\n\nPyDoc_STRVAR(getrefcount_doc,\n\"getrefcount(object) -> integer\\n\\\n\\n\\\nReturn the reference count of object.  The count returned is generally\\n\\\none higher than you might expect, because it includes the (temporary)\\n\\\nreference as an argument to getrefcount().\"\n);\n\nstatic PyObject *\nsys_getallocatedblocks(PyObject *self)\n{\n    return PyLong_FromSsize_t(_Py_GetAllocatedBlocks());\n}\n\nPyDoc_STRVAR(getallocatedblocks_doc,\n\"getallocatedblocks() -> integer\\n\\\n\\n\\\nReturn the number of memory blocks currently allocated, regardless of their\\n\\\nsize.\"\n);\n\n#ifdef COUNT_ALLOCS\nstatic PyObject *\nsys_getcounts(PyObject *self)\n{\n    extern PyObject *get_counts(void);\n\n    return get_counts();\n}\n#endif\n\nPyDoc_STRVAR(getframe_doc,\n\"_getframe([depth]) -> frameobject\\n\\\n\\n\\\nReturn a frame object from the call stack.  If optional integer depth is\\n\\\ngiven, return the frame object that many calls below the top of the stack.\\n\\\nIf that is deeper than the call stack, ValueError is raised.  The default\\n\\\nfor depth is zero, returning the frame at the top of the call stack.\\n\\\n\\n\\\nThis function should be used for internal and specialized\\n\\\npurposes only.\"\n);\n\nstatic PyObject *\nsys_getframe(PyObject *self, PyObject *args)\n{\n    PyFrameObject *f = PyThreadState_GET()->frame;\n    int depth = -1;\n\n    if (!PyArg_ParseTuple(args, \"|i:_getframe\", &depth))\n        return NULL;\n\n    while (depth > 0 && f != NULL) {\n        f = f->f_back;\n        --depth;\n    }\n    if (f == NULL) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"call stack is not deep enough\");\n        return NULL;\n    }\n    Py_INCREF(f);\n    return (PyObject*)f;\n}\n\nPyDoc_STRVAR(current_frames_doc,\n\"_current_frames() -> dictionary\\n\\\n\\n\\\nReturn a dictionary mapping each current thread T's thread id to T's\\n\\\ncurrent stack frame.\\n\\\n\\n\\\nThis function should be used for specialized purposes only.\"\n);\n\nstatic PyObject *\nsys_current_frames(PyObject *self, PyObject *noargs)\n{\n    return _PyThread_CurrentFrames();\n}\n\nPyDoc_STRVAR(call_tracing_doc,\n\"call_tracing(func, args) -> object\\n\\\n\\n\\\nCall func(*args), while tracing is enabled.  The tracing state is\\n\\\nsaved, and restored afterwards.  This is intended to be called from\\n\\\na debugger from a checkpoint, to recursively debug some other code.\"\n);\n\nstatic PyObject *\nsys_call_tracing(PyObject *self, PyObject *args)\n{\n    PyObject *func, *funcargs;\n    if (!PyArg_ParseTuple(args, \"OO!:call_tracing\", &func, &PyTuple_Type, &funcargs))\n        return NULL;\n    return _PyEval_CallTracing(func, funcargs);\n}\n\nPyDoc_STRVAR(callstats_doc,\n\"callstats() -> tuple of integers\\n\\\n\\n\\\nReturn a tuple of function call statistics, if CALL_PROFILE was defined\\n\\\nwhen Python was built.  Otherwise, return None.\\n\\\n\\n\\\nWhen enabled, this function returns detailed, implementation-specific\\n\\\ndetails about the number of function calls executed. The return value is\\n\\\na 11-tuple where the entries in the tuple are counts of:\\n\\\n0. all function calls\\n\\\n1. calls to PyFunction_Type objects\\n\\\n2. PyFunction calls that do not create an argument tuple\\n\\\n3. PyFunction calls that do not create an argument tuple\\n\\\n   and bypass PyEval_EvalCodeEx()\\n\\\n4. PyMethod calls\\n\\\n5. PyMethod calls on bound methods\\n\\\n6. PyType calls\\n\\\n7. PyCFunction calls\\n\\\n8. generator calls\\n\\\n9. All other calls\\n\\\n10. Number of stack pops performed by call_function()\"\n);\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nstatic PyObject *\nsys_debugmallocstats(PyObject *self, PyObject *args)\n{\n#ifdef WITH_PYMALLOC\n    _PyObject_DebugMallocStats(stderr);\n    fputc('\\n', stderr);\n#endif\n    _PyObject_DebugTypeStats(stderr);\n\n    Py_RETURN_NONE;\n}\nPyDoc_STRVAR(debugmallocstats_doc,\n\"_debugmallocstats()\\n\\\n\\n\\\nPrint summary info to stderr about the state of\\n\\\npymalloc's structures.\\n\\\n\\n\\\nIn Py_DEBUG mode, also perform some expensive internal consistency\\n\\\nchecks.\\n\\\n\");\n\n#ifdef Py_TRACE_REFS\n/* Defined in objects.c because it uses static globals if that file */\nextern PyObject *_Py_GetObjects(PyObject *, PyObject *);\n#endif\n\n#ifdef DYNAMIC_EXECUTION_PROFILE\n/* Defined in ceval.c because it uses static globals if that file */\nextern PyObject *_Py_GetDXProfile(PyObject *,  PyObject *);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n\nstatic PyObject *\nsys_clear_type_cache(PyObject* self, PyObject* args)\n{\n    PyType_ClearCache();\n    Py_RETURN_NONE;\n}\n\nPyDoc_STRVAR(sys_clear_type_cache__doc__,\n\"_clear_type_cache() -> None\\n\\\nClear the internal type lookup cache.\");\n\nstatic PyObject *\nsys_is_finalizing(PyObject* self, PyObject* args)\n{\n    return PyBool_FromLong(_Py_Finalizing != NULL);\n}\n\nPyDoc_STRVAR(is_finalizing_doc,\n\"is_finalizing()\\n\\\nReturn True if Python is exiting.\");\n\n\nstatic PyMethodDef sys_methods[] = {\n    /* Might as well keep this in alphabetic order */\n    {\"callstats\", (PyCFunction)PyEval_GetCallStats, METH_NOARGS,\n     callstats_doc},\n    {\"_clear_type_cache\",       sys_clear_type_cache,     METH_NOARGS,\n     sys_clear_type_cache__doc__},\n    {\"_current_frames\", sys_current_frames, METH_NOARGS,\n     current_frames_doc},\n    {\"displayhook\",     sys_displayhook, METH_O, displayhook_doc},\n    {\"exc_info\",        sys_exc_info, METH_NOARGS, exc_info_doc},\n    {\"excepthook\",      sys_excepthook, METH_VARARGS, excepthook_doc},\n    {\"exit\",            sys_exit, METH_VARARGS, exit_doc},\n    {\"getdefaultencoding\", (PyCFunction)sys_getdefaultencoding,\n     METH_NOARGS, getdefaultencoding_doc},\n#ifdef HAVE_DLOPEN\n    {\"getdlopenflags\", (PyCFunction)sys_getdlopenflags, METH_NOARGS,\n     getdlopenflags_doc},\n#endif\n    {\"getallocatedblocks\", (PyCFunction)sys_getallocatedblocks, METH_NOARGS,\n      getallocatedblocks_doc},\n#ifdef COUNT_ALLOCS\n    {\"getcounts\",       (PyCFunction)sys_getcounts, METH_NOARGS},\n#endif\n#ifdef DYNAMIC_EXECUTION_PROFILE\n    {\"getdxp\",          _Py_GetDXProfile, METH_VARARGS},\n#endif\n    {\"getfilesystemencoding\", (PyCFunction)sys_getfilesystemencoding,\n     METH_NOARGS, getfilesystemencoding_doc},\n#ifdef Py_TRACE_REFS\n    {\"getobjects\",      _Py_GetObjects, METH_VARARGS},\n#endif\n#ifdef Py_REF_DEBUG\n    {\"gettotalrefcount\", (PyCFunction)sys_gettotalrefcount, METH_NOARGS},\n#endif\n    {\"getrefcount\",     (PyCFunction)sys_getrefcount, METH_O, getrefcount_doc},\n    {\"getrecursionlimit\", (PyCFunction)sys_getrecursionlimit, METH_NOARGS,\n     getrecursionlimit_doc},\n    {\"getsizeof\",   (PyCFunction)sys_getsizeof,\n     METH_VARARGS | METH_KEYWORDS, getsizeof_doc},\n    {\"_getframe\", sys_getframe, METH_VARARGS, getframe_doc},\n#ifdef MS_WINDOWS\n    {\"getwindowsversion\", (PyCFunction)sys_getwindowsversion, METH_NOARGS,\n     getwindowsversion_doc},\n#endif /* MS_WINDOWS */\n    {\"intern\",          sys_intern,     METH_VARARGS, intern_doc},\n    {\"is_finalizing\",   sys_is_finalizing, METH_NOARGS, is_finalizing_doc},\n#ifdef USE_MALLOPT\n    {\"mdebug\",          sys_mdebug, METH_VARARGS},\n#endif\n    {\"setcheckinterval\",        sys_setcheckinterval, METH_VARARGS,\n     setcheckinterval_doc},\n    {\"getcheckinterval\",        sys_getcheckinterval, METH_NOARGS,\n     getcheckinterval_doc},\n#ifdef WITH_THREAD\n    {\"setswitchinterval\",       sys_setswitchinterval, METH_VARARGS,\n     setswitchinterval_doc},\n    {\"getswitchinterval\",       sys_getswitchinterval, METH_NOARGS,\n     getswitchinterval_doc},\n#endif\n#ifdef HAVE_DLOPEN\n    {\"setdlopenflags\", sys_setdlopenflags, METH_VARARGS,\n     setdlopenflags_doc},\n#endif\n    {\"setprofile\",      sys_setprofile, METH_O, setprofile_doc},\n    {\"getprofile\",      sys_getprofile, METH_NOARGS, getprofile_doc},\n    {\"setrecursionlimit\", sys_setrecursionlimit, METH_VARARGS,\n     setrecursionlimit_doc},\n#ifdef WITH_TSC\n    {\"settscdump\", sys_settscdump, METH_VARARGS, settscdump_doc},\n#endif\n    {\"settrace\",        sys_settrace, METH_O, settrace_doc},\n    {\"gettrace\",        sys_gettrace, METH_NOARGS, gettrace_doc},\n    {\"call_tracing\", sys_call_tracing, METH_VARARGS, call_tracing_doc},\n    {\"_debugmallocstats\", sys_debugmallocstats, METH_NOARGS,\n     debugmallocstats_doc},\n    {\"set_coroutine_wrapper\", sys_set_coroutine_wrapper, METH_O,\n     set_coroutine_wrapper_doc},\n    {\"get_coroutine_wrapper\", sys_get_coroutine_wrapper, METH_NOARGS,\n     get_coroutine_wrapper_doc},\n    {NULL,              NULL}           /* sentinel */\n};\n\nstatic PyObject *\nlist_builtin_module_names(void)\n{\n    PyObject *list = PyList_New(0);\n    int i;\n    if (list == NULL)\n        return NULL;\n    for (i = 0; PyImport_Inittab[i].name != NULL; i++) {\n        PyObject *name = PyUnicode_FromString(\n            PyImport_Inittab[i].name);\n        if (name == NULL)\n            break;\n        PyList_Append(list, name);\n        Py_DECREF(name);\n    }\n    if (PyList_Sort(list) != 0) {\n        Py_DECREF(list);\n        list = NULL;\n    }\n    if (list) {\n        PyObject *v = PyList_AsTuple(list);\n        Py_DECREF(list);\n        list = v;\n    }\n    return list;\n}\n\nstatic PyObject *warnoptions = NULL;\n\nvoid\nPySys_ResetWarnOptions(void)\n{\n    if (warnoptions == NULL || !PyList_Check(warnoptions))\n        return;\n    PyList_SetSlice(warnoptions, 0, PyList_GET_SIZE(warnoptions), NULL);\n}\n\nvoid\nPySys_AddWarnOptionUnicode(PyObject *unicode)\n{\n    if (warnoptions == NULL || !PyList_Check(warnoptions)) {\n        Py_XDECREF(warnoptions);\n        warnoptions = PyList_New(0);\n        if (warnoptions == NULL)\n            return;\n    }\n    PyList_Append(warnoptions, unicode);\n}\n\nvoid\nPySys_AddWarnOption(const wchar_t *s)\n{\n    PyObject *unicode;\n    unicode = PyUnicode_FromWideChar(s, -1);\n    if (unicode == NULL)\n        return;\n    PySys_AddWarnOptionUnicode(unicode);\n    Py_DECREF(unicode);\n}\n\nint\nPySys_HasWarnOptions(void)\n{\n    return (warnoptions != NULL && (PyList_Size(warnoptions) > 0)) ? 1 : 0;\n}\n\nstatic PyObject *xoptions = NULL;\n\nstatic PyObject *\nget_xoptions(void)\n{\n    if (xoptions == NULL || !PyDict_Check(xoptions)) {\n        Py_XDECREF(xoptions);\n        xoptions = PyDict_New();\n    }\n    return xoptions;\n}\n\nvoid\nPySys_AddXOption(const wchar_t *s)\n{\n    PyObject *opts;\n    PyObject *name = NULL, *value = NULL;\n    const wchar_t *name_end;\n\n    opts = get_xoptions();\n    if (opts == NULL)\n        goto error;\n\n    name_end = wcschr(s, L'=');\n    if (!name_end) {\n        name = PyUnicode_FromWideChar(s, -1);\n        value = Py_True;\n        Py_INCREF(value);\n    }\n    else {\n        name = PyUnicode_FromWideChar(s, name_end - s);\n        value = PyUnicode_FromWideChar(name_end + 1, -1);\n    }\n    if (name == NULL || value == NULL)\n        goto error;\n    PyDict_SetItem(opts, name, value);\n    Py_DECREF(name);\n    Py_DECREF(value);\n    return;\n\nerror:\n    Py_XDECREF(name);\n    Py_XDECREF(value);\n    /* No return value, therefore clear error state if possible */\n    if (_PyThreadState_UncheckedGet())\n        PyErr_Clear();\n}\n\nPyObject *\nPySys_GetXOptions(void)\n{\n    return get_xoptions();\n}\n\n/* XXX This doc string is too long to be a single string literal in VC++ 5.0.\n   Two literals concatenated works just fine.  If you have a K&R compiler\n   or other abomination that however *does* understand longer strings,\n   get rid of the !!! comment in the middle and the quotes that surround it. */\nPyDoc_VAR(sys_doc) =\nPyDoc_STR(\n\"This module provides access to some objects used or maintained by the\\n\\\ninterpreter and to functions that interact strongly with the interpreter.\\n\\\n\\n\\\nDynamic objects:\\n\\\n\\n\\\nargv -- command line arguments; argv[0] is the script pathname if known\\n\\\npath -- module search path; path[0] is the script directory, else ''\\n\\\nmodules -- dictionary of loaded modules\\n\\\n\\n\\\ndisplayhook -- called to show results in an interactive session\\n\\\nexcepthook -- called to handle any uncaught exception other than SystemExit\\n\\\n  To customize printing in an interactive session or to install a custom\\n\\\n  top-level exception handler, assign other functions to replace these.\\n\\\n\\n\\\nstdin -- standard input file object; used by input()\\n\\\nstdout -- standard output file object; used by print()\\n\\\nstderr -- standard error object; used for error messages\\n\\\n  By assigning other file objects (or objects that behave like files)\\n\\\n  to these, it is possible to redirect all of the interpreter's I/O.\\n\\\n\\n\\\nlast_type -- type of last uncaught exception\\n\\\nlast_value -- value of last uncaught exception\\n\\\nlast_traceback -- traceback of last uncaught exception\\n\\\n  These three are only available in an interactive session after a\\n\\\n  traceback has been printed.\\n\\\n\"\n)\n/* concatenating string here */\nPyDoc_STR(\n\"\\n\\\nStatic objects:\\n\\\n\\n\\\nbuiltin_module_names -- tuple of module names built into this interpreter\\n\\\ncopyright -- copyright notice pertaining to this interpreter\\n\\\nexec_prefix -- prefix used to find the machine-specific Python library\\n\\\nexecutable -- absolute path of the executable binary of the Python interpreter\\n\\\nfloat_info -- a struct sequence with information about the float implementation.\\n\\\nfloat_repr_style -- string indicating the style of repr() output for floats\\n\\\nhash_info -- a struct sequence with information about the hash algorithm.\\n\\\nhexversion -- version information encoded as a single integer\\n\\\nimplementation -- Python implementation information.\\n\\\nint_info -- a struct sequence with information about the int implementation.\\n\\\nmaxsize -- the largest supported length of containers.\\n\\\nmaxunicode -- the value of the largest Unicode code point\\n\\\nplatform -- platform identifier\\n\\\nprefix -- prefix used to find the Python library\\n\\\nthread_info -- a struct sequence with information about the thread implementation.\\n\\\nversion -- the version of this interpreter as a string\\n\\\nversion_info -- version information as a named tuple\\n\\\n\"\n)\n#ifdef MS_WINDOWS\n/* concatenating string here */\nPyDoc_STR(\n\"dllhandle -- [Windows only] integer handle of the Python DLL\\n\\\nwinver -- [Windows only] version number of the Python DLL\\n\\\n\"\n)\n#endif /* MS_WINDOWS */\nPyDoc_STR(\n\"__stdin__ -- the original stdin; don't touch!\\n\\\n__stdout__ -- the original stdout; don't touch!\\n\\\n__stderr__ -- the original stderr; don't touch!\\n\\\n__displayhook__ -- the original displayhook; don't touch!\\n\\\n__excepthook__ -- the original excepthook; don't touch!\\n\\\n\\n\\\nFunctions:\\n\\\n\\n\\\ndisplayhook() -- print an object to the screen, and save it in builtins._\\n\\\nexcepthook() -- print an exception and its traceback to sys.stderr\\n\\\nexc_info() -- return thread-safe information about the current exception\\n\\\nexit() -- exit the interpreter by raising SystemExit\\n\\\ngetdlopenflags() -- returns flags to be used for dlopen() calls\\n\\\ngetprofile() -- get the global profiling function\\n\\\ngetrefcount() -- return the reference count for an object (plus one :-)\\n\\\ngetrecursionlimit() -- return the max recursion depth for the interpreter\\n\\\ngetsizeof() -- return the size of an object in bytes\\n\\\ngettrace() -- get the global debug tracing function\\n\\\nsetcheckinterval() -- control how often the interpreter checks for events\\n\\\nsetdlopenflags() -- set the flags to be used for dlopen() calls\\n\\\nsetprofile() -- set the global profiling function\\n\\\nsetrecursionlimit() -- set the max recursion depth for the interpreter\\n\\\nsettrace() -- set the global debug tracing function\\n\\\n\"\n)\n/* end of sys_doc */ ;\n\n\nPyDoc_STRVAR(flags__doc__,\n\"sys.flags\\n\\\n\\n\\\nFlags provided through command line arguments or environment vars.\");\n\nstatic PyTypeObject FlagsType;\n\nstatic PyStructSequence_Field flags_fields[] = {\n    {\"debug\",                   \"-d\"},\n    {\"inspect\",                 \"-i\"},\n    {\"interactive\",             \"-i\"},\n    {\"optimize\",                \"-O or -OO\"},\n    {\"dont_write_bytecode\",     \"-B\"},\n    {\"no_user_site\",            \"-s\"},\n    {\"no_site\",                 \"-S\"},\n    {\"ignore_environment\",      \"-E\"},\n    {\"verbose\",                 \"-v\"},\n    /* {\"unbuffered\",                   \"-u\"}, */\n    /* {\"skip_first\",                   \"-x\"}, */\n    {\"bytes_warning\",           \"-b\"},\n    {\"quiet\",                   \"-q\"},\n    {\"hash_randomization\",      \"-R\"},\n    {\"isolated\",                \"-I\"},\n    {0}\n};\n\nstatic PyStructSequence_Desc flags_desc = {\n    \"sys.flags\",        /* name */\n    flags__doc__,       /* doc */\n    flags_fields,       /* fields */\n    13\n};\n\nstatic PyObject*\nmake_flags(void)\n{\n    int pos = 0;\n    PyObject *seq;\n\n    seq = PyStructSequence_New(&FlagsType);\n    if (seq == NULL)\n        return NULL;\n\n#define SetFlag(flag) \\\n    PyStructSequence_SET_ITEM(seq, pos++, PyLong_FromLong(flag))\n\n    SetFlag(Py_DebugFlag);\n    SetFlag(Py_InspectFlag);\n    SetFlag(Py_InteractiveFlag);\n    SetFlag(Py_OptimizeFlag);\n    SetFlag(Py_DontWriteBytecodeFlag);\n    SetFlag(Py_NoUserSiteDirectory);\n    SetFlag(Py_NoSiteFlag);\n    SetFlag(Py_IgnoreEnvironmentFlag);\n    SetFlag(Py_VerboseFlag);\n    /* SetFlag(saw_unbuffered_flag); */\n    /* SetFlag(skipfirstline); */\n    SetFlag(Py_BytesWarningFlag);\n    SetFlag(Py_QuietFlag);\n    SetFlag(Py_HashRandomizationFlag);\n    SetFlag(Py_IsolatedFlag);\n#undef SetFlag\n\n    if (PyErr_Occurred()) {\n        Py_DECREF(seq);\n        return NULL;\n    }\n    return seq;\n}\n\nPyDoc_STRVAR(version_info__doc__,\n\"sys.version_info\\n\\\n\\n\\\nVersion information as a named tuple.\");\n\nstatic PyTypeObject VersionInfoType;\n\nstatic PyStructSequence_Field version_info_fields[] = {\n    {\"major\", \"Major release number\"},\n    {\"minor\", \"Minor release number\"},\n    {\"micro\", \"Patch release number\"},\n    {\"releaselevel\", \"'alpha', 'beta', 'candidate', or 'final'\"},\n    {\"serial\", \"Serial release number\"},\n    {0}\n};\n\nstatic PyStructSequence_Desc version_info_desc = {\n    \"sys.version_info\",     /* name */\n    version_info__doc__,    /* doc */\n    version_info_fields,    /* fields */\n    5\n};\n\nstatic PyObject *\nmake_version_info(void)\n{\n    PyObject *version_info;\n    char *s;\n    int pos = 0;\n\n    version_info = PyStructSequence_New(&VersionInfoType);\n    if (version_info == NULL) {\n        return NULL;\n    }\n\n    /*\n     * These release level checks are mutually exclusive and cover\n     * the field, so don't get too fancy with the pre-processor!\n     */\n#if PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_ALPHA\n    s = \"alpha\";\n#elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_BETA\n    s = \"beta\";\n#elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_GAMMA\n    s = \"candidate\";\n#elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_FINAL\n    s = \"final\";\n#endif\n\n#define SetIntItem(flag) \\\n    PyStructSequence_SET_ITEM(version_info, pos++, PyLong_FromLong(flag))\n#define SetStrItem(flag) \\\n    PyStructSequence_SET_ITEM(version_info, pos++, PyUnicode_FromString(flag))\n\n    SetIntItem(PY_MAJOR_VERSION);\n    SetIntItem(PY_MINOR_VERSION);\n    SetIntItem(PY_MICRO_VERSION);\n    SetStrItem(s);\n    SetIntItem(PY_RELEASE_SERIAL);\n#undef SetIntItem\n#undef SetStrItem\n\n    if (PyErr_Occurred()) {\n        Py_CLEAR(version_info);\n        return NULL;\n    }\n    return version_info;\n}\n\n/* sys.implementation values */\n#define NAME \"cpython\"\nconst char *_PySys_ImplName = NAME;\n#define QUOTE(arg) #arg\n#define STRIFY(name) QUOTE(name)\n#define MAJOR STRIFY(PY_MAJOR_VERSION)\n#define MINOR STRIFY(PY_MINOR_VERSION)\n#define TAG NAME \"-\" MAJOR MINOR\nconst char *_PySys_ImplCacheTag = TAG;\n#undef NAME\n#undef QUOTE\n#undef STRIFY\n#undef MAJOR\n#undef MINOR\n#undef TAG\n\nstatic PyObject *\nmake_impl_info(PyObject *version_info)\n{\n    int res;\n    PyObject *impl_info, *value, *ns;\n\n    impl_info = PyDict_New();\n    if (impl_info == NULL)\n        return NULL;\n\n    /* populate the dict */\n\n    value = PyUnicode_FromString(_PySys_ImplName);\n    if (value == NULL)\n        goto error;\n    res = PyDict_SetItemString(impl_info, \"name\", value);\n    Py_DECREF(value);\n    if (res < 0)\n        goto error;\n\n    value = PyUnicode_FromString(_PySys_ImplCacheTag);\n    if (value == NULL)\n        goto error;\n    res = PyDict_SetItemString(impl_info, \"cache_tag\", value);\n    Py_DECREF(value);\n    if (res < 0)\n        goto error;\n\n    res = PyDict_SetItemString(impl_info, \"version\", version_info);\n    if (res < 0)\n        goto error;\n\n    value = PyLong_FromLong(PY_VERSION_HEX);\n    if (value == NULL)\n        goto error;\n    res = PyDict_SetItemString(impl_info, \"hexversion\", value);\n    Py_DECREF(value);\n    if (res < 0)\n        goto error;\n\n    /* dict ready */\n\n    ns = _PyNamespace_New(impl_info);\n    Py_DECREF(impl_info);\n    return ns;\n\nerror:\n    Py_CLEAR(impl_info);\n    return NULL;\n}\n\nstatic struct PyModuleDef sysmodule = {\n    PyModuleDef_HEAD_INIT,\n    \"sys\",\n    sys_doc,\n    -1, /* multiple \"initialization\" just copies the module dict. */\n    sys_methods,\n    NULL,\n    NULL,\n    NULL,\n    NULL\n};\n\nPyObject *\n_PySys_Init(void)\n{\n    PyObject *m, *sysdict, *version_info;\n    int res;\n\n    m = PyModule_Create(&sysmodule);\n    if (m == NULL)\n        return NULL;\n    sysdict = PyModule_GetDict(m);\n#define SET_SYS_FROM_STRING_BORROW(key, value)             \\\n    do {                                                   \\\n        PyObject *v = (value);                             \\\n        if (v == NULL)                                     \\\n            return NULL;                                   \\\n        res = PyDict_SetItemString(sysdict, key, v);       \\\n        if (res < 0) {                                     \\\n            return NULL;                                   \\\n        }                                                  \\\n    } while (0)\n#define SET_SYS_FROM_STRING(key, value)                    \\\n    do {                                                   \\\n        PyObject *v = (value);                             \\\n        if (v == NULL)                                     \\\n            return NULL;                                   \\\n        res = PyDict_SetItemString(sysdict, key, v);       \\\n        Py_DECREF(v);                                      \\\n        if (res < 0) {                                     \\\n            return NULL;                                   \\\n        }                                                  \\\n    } while (0)\n\n    /* Check that stdin is not a directory\n    Using shell redirection, you can redirect stdin to a directory,\n    crashing the Python interpreter. Catch this common mistake here\n    and output a useful error message. Note that under MS Windows,\n    the shell already prevents that. */\n#if !defined(MS_WINDOWS)\n    {\n        struct _Py_stat_struct sb;\n        if (_Py_fstat_noraise(fileno(stdin), &sb) == 0 &&\n            S_ISDIR(sb.st_mode)) {\n            /* There's nothing more we can do. */\n            /* Py_FatalError() will core dump, so just exit. */\n            PySys_WriteStderr(\"Python error: <stdin> is a directory, cannot continue\\n\");\n            exit(EXIT_FAILURE);\n        }\n    }\n#endif\n\n    /* stdin/stdout/stderr are set in pylifecycle.c */\n\n    SET_SYS_FROM_STRING_BORROW(\"__displayhook__\",\n                               PyDict_GetItemString(sysdict, \"displayhook\"));\n    SET_SYS_FROM_STRING_BORROW(\"__excepthook__\",\n                               PyDict_GetItemString(sysdict, \"excepthook\"));\n    SET_SYS_FROM_STRING(\"version\",\n                         PyUnicode_FromString(Py_GetVersion()));\n    SET_SYS_FROM_STRING(\"hexversion\",\n                         PyLong_FromLong(PY_VERSION_HEX));\n    SET_SYS_FROM_STRING(\"_git\",\n                        Py_BuildValue(\"(szz)\", \"CPython\", _Py_gitidentifier(),\n                                      _Py_gitversion()));\n    SET_SYS_FROM_STRING(\"dont_write_bytecode\",\n                         PyBool_FromLong(Py_DontWriteBytecodeFlag));\n    SET_SYS_FROM_STRING(\"api_version\",\n                        PyLong_FromLong(PYTHON_API_VERSION));\n    SET_SYS_FROM_STRING(\"copyright\",\n                        PyUnicode_FromString(Py_GetCopyright()));\n    SET_SYS_FROM_STRING(\"platform\",\n                        PyUnicode_FromString(Py_GetPlatform()));\n    SET_SYS_FROM_STRING(\"executable\",\n                        PyUnicode_FromWideChar(\n                               Py_GetProgramFullPath(), -1));\n    SET_SYS_FROM_STRING(\"prefix\",\n                        PyUnicode_FromWideChar(Py_GetPrefix(), -1));\n    SET_SYS_FROM_STRING(\"exec_prefix\",\n                        PyUnicode_FromWideChar(Py_GetExecPrefix(), -1));\n    SET_SYS_FROM_STRING(\"base_prefix\",\n                        PyUnicode_FromWideChar(Py_GetPrefix(), -1));\n    SET_SYS_FROM_STRING(\"base_exec_prefix\",\n                        PyUnicode_FromWideChar(Py_GetExecPrefix(), -1));\n    SET_SYS_FROM_STRING(\"maxsize\",\n                        PyLong_FromSsize_t(PY_SSIZE_T_MAX));\n    SET_SYS_FROM_STRING(\"float_info\",\n                        PyFloat_GetInfo());\n    SET_SYS_FROM_STRING(\"int_info\",\n                        PyLong_GetInfo());\n    /* initialize hash_info */\n    if (Hash_InfoType.tp_name == NULL) {\n        if (PyStructSequence_InitType2(&Hash_InfoType, &hash_info_desc) < 0)\n            return NULL;\n    }\n    SET_SYS_FROM_STRING(\"hash_info\",\n                        get_hash_info());\n    SET_SYS_FROM_STRING(\"maxunicode\",\n                        PyLong_FromLong(0x10FFFF));\n    SET_SYS_FROM_STRING(\"builtin_module_names\",\n                        list_builtin_module_names());\n#if PY_BIG_ENDIAN\n    SET_SYS_FROM_STRING(\"byteorder\",\n                        PyUnicode_FromString(\"big\"));\n#else\n    SET_SYS_FROM_STRING(\"byteorder\",\n                        PyUnicode_FromString(\"little\"));\n#endif\n\n#ifdef MS_COREDLL\n    SET_SYS_FROM_STRING(\"dllhandle\",\n                        PyLong_FromVoidPtr(PyWin_DLLhModule));\n    SET_SYS_FROM_STRING(\"winver\",\n                        PyUnicode_FromString(PyWin_DLLVersionString));\n#endif\n#ifdef ABIFLAGS\n    SET_SYS_FROM_STRING(\"abiflags\",\n                        PyUnicode_FromString(ABIFLAGS));\n#endif\n    if (warnoptions == NULL) {\n        warnoptions = PyList_New(0);\n        if (warnoptions == NULL)\n            return NULL;\n    }\n    else {\n        Py_INCREF(warnoptions);\n    }\n    SET_SYS_FROM_STRING_BORROW(\"warnoptions\", warnoptions);\n\n    SET_SYS_FROM_STRING_BORROW(\"_xoptions\", get_xoptions());\n\n    /* version_info */\n    if (VersionInfoType.tp_name == NULL) {\n        if (PyStructSequence_InitType2(&VersionInfoType,\n                                       &version_info_desc) < 0)\n            return NULL;\n    }\n    version_info = make_version_info();\n    SET_SYS_FROM_STRING(\"version_info\", version_info);\n    /* prevent user from creating new instances */\n    VersionInfoType.tp_init = NULL;\n    VersionInfoType.tp_new = NULL;\n    res = PyDict_DelItemString(VersionInfoType.tp_dict, \"__new__\");\n    if (res < 0 && PyErr_ExceptionMatches(PyExc_KeyError))\n        PyErr_Clear();\n\n    /* implementation */\n    SET_SYS_FROM_STRING(\"implementation\", make_impl_info(version_info));\n\n    /* flags */\n    if (FlagsType.tp_name == 0) {\n        if (PyStructSequence_InitType2(&FlagsType, &flags_desc) < 0)\n            return NULL;\n    }\n    SET_SYS_FROM_STRING(\"flags\", make_flags());\n    /* prevent user from creating new instances */\n    FlagsType.tp_init = NULL;\n    FlagsType.tp_new = NULL;\n    res = PyDict_DelItemString(FlagsType.tp_dict, \"__new__\");\n    if (res < 0 && PyErr_ExceptionMatches(PyExc_KeyError))\n        PyErr_Clear();\n\n#if defined(MS_WINDOWS)\n    /* getwindowsversion */\n    if (WindowsVersionType.tp_name == 0)\n        if (PyStructSequence_InitType2(&WindowsVersionType,\n                                       &windows_version_desc) < 0)\n            return NULL;\n    /* prevent user from creating new instances */\n    WindowsVersionType.tp_init = NULL;\n    WindowsVersionType.tp_new = NULL;\n    res = PyDict_DelItemString(WindowsVersionType.tp_dict, \"__new__\");\n    if (res < 0 && PyErr_ExceptionMatches(PyExc_KeyError))\n        PyErr_Clear();\n#endif\n\n    /* float repr style: 0.03 (short) vs 0.029999999999999999 (legacy) */\n#ifndef PY_NO_SHORT_FLOAT_REPR\n    SET_SYS_FROM_STRING(\"float_repr_style\",\n                        PyUnicode_FromString(\"short\"));\n#else\n    SET_SYS_FROM_STRING(\"float_repr_style\",\n                        PyUnicode_FromString(\"legacy\"));\n#endif\n\n#ifdef WITH_THREAD\n    SET_SYS_FROM_STRING(\"thread_info\", PyThread_GetInfo());\n#endif\n\n#undef SET_SYS_FROM_STRING\n#undef SET_SYS_FROM_STRING_BORROW\n    if (PyErr_Occurred())\n        return NULL;\n    return m;\n}\n\nstatic PyObject *\nmakepathobject(const wchar_t *path, wchar_t delim)\n{\n    int i, n;\n    const wchar_t *p;\n    PyObject *v, *w;\n\n    n = 1;\n    p = path;\n    while ((p = wcschr(p, delim)) != NULL) {\n        n++;\n        p++;\n    }\n    v = PyList_New(n);\n    if (v == NULL)\n        return NULL;\n    for (i = 0; ; i++) {\n        p = wcschr(path, delim);\n        if (p == NULL)\n            p = path + wcslen(path); /* End of string */\n        w = PyUnicode_FromWideChar(path, (Py_ssize_t)(p - path));\n        if (w == NULL) {\n            Py_DECREF(v);\n            return NULL;\n        }\n        PyList_SetItem(v, i, w);\n        if (*p == '\\0')\n            break;\n        path = p+1;\n    }\n    return v;\n}\n\nvoid\nPySys_SetPath(const wchar_t *path)\n{\n    PyObject *v;\n    if ((v = makepathobject(path, DELIM)) == NULL)\n        Py_FatalError(\"can't create sys.path\");\n    if (_PySys_SetObjectId(&PyId_path, v) != 0)\n        Py_FatalError(\"can't assign sys.path\");\n    Py_DECREF(v);\n}\n\nstatic PyObject *\nmakeargvobject(int argc, wchar_t **argv)\n{\n    PyObject *av;\n    if (argc <= 0 || argv == NULL) {\n        /* Ensure at least one (empty) argument is seen */\n        static wchar_t *empty_argv[1] = {L\"\"};\n        argv = empty_argv;\n        argc = 1;\n    }\n    av = PyList_New(argc);\n    if (av != NULL) {\n        int i;\n        for (i = 0; i < argc; i++) {\n            PyObject *v = PyUnicode_FromWideChar(argv[i], -1);\n            if (v == NULL) {\n                Py_DECREF(av);\n                av = NULL;\n                break;\n            }\n            PyList_SetItem(av, i, v);\n        }\n    }\n    return av;\n}\n\n#define _HAVE_SCRIPT_ARGUMENT(argc, argv) \\\n  (argc > 0 && argv0 != NULL && \\\n   wcscmp(argv0, L\"-c\") != 0 && wcscmp(argv0, L\"-m\") != 0)\n\nstatic void\nsys_update_path(int argc, wchar_t **argv)\n{\n    wchar_t *argv0;\n    wchar_t *p = NULL;\n    Py_ssize_t n = 0;\n    PyObject *a;\n    PyObject *path;\n#ifdef HAVE_READLINK\n    wchar_t link[MAXPATHLEN+1];\n    wchar_t argv0copy[2*MAXPATHLEN+1];\n    int nr = 0;\n#endif\n#if defined(HAVE_REALPATH)\n    wchar_t fullpath[MAXPATHLEN];\n#elif defined(MS_WINDOWS) && !defined(MS_WINCE)\n    wchar_t fullpath[MAX_PATH];\n#endif\n\n    path = _PySys_GetObjectId(&PyId_path);\n    if (path == NULL)\n        return;\n\n    argv0 = argv[0];\n\n#ifdef HAVE_READLINK\n    if (_HAVE_SCRIPT_ARGUMENT(argc, argv))\n        nr = _Py_wreadlink(argv0, link, MAXPATHLEN);\n    if (nr > 0) {\n        /* It's a symlink */\n        link[nr] = '\\0';\n        if (link[0] == SEP)\n            argv0 = link; /* Link to absolute path */\n        else if (wcschr(link, SEP) == NULL)\n            ; /* Link without path */\n        else {\n            /* Must join(dirname(argv0), link) */\n            wchar_t *q = wcsrchr(argv0, SEP);\n            if (q == NULL)\n                argv0 = link; /* argv0 without path */\n            else {\n                /* Must make a copy, argv0copy has room for 2 * MAXPATHLEN */\n                wcsncpy(argv0copy, argv0, MAXPATHLEN);\n                q = wcsrchr(argv0copy, SEP);\n                wcsncpy(q+1, link, MAXPATHLEN);\n                q[MAXPATHLEN + 1] = L'\\0';\n                argv0 = argv0copy;\n            }\n        }\n    }\n#endif /* HAVE_READLINK */\n#if SEP == '\\\\' /* Special case for MS filename syntax */\n    if (_HAVE_SCRIPT_ARGUMENT(argc, argv)) {\n        wchar_t *q;\n#if defined(MS_WINDOWS) && !defined(MS_WINCE)\n        /* This code here replaces the first element in argv with the full\n        path that it represents. Under CE, there are no relative paths so\n        the argument must be the full path anyway. */\n        wchar_t *ptemp;\n        if (GetFullPathNameW(argv0,\n                           Py_ARRAY_LENGTH(fullpath),\n                           fullpath,\n                           &ptemp)) {\n            argv0 = fullpath;\n        }\n#endif\n        p = wcsrchr(argv0, SEP);\n        /* Test for alternate separator */\n        q = wcsrchr(p ? p : argv0, '/');\n        if (q != NULL)\n            p = q;\n        if (p != NULL) {\n            n = p + 1 - argv0;\n            if (n > 1 && p[-1] != ':')\n                n--; /* Drop trailing separator */\n        }\n    }\n#else /* All other filename syntaxes */\n    if (_HAVE_SCRIPT_ARGUMENT(argc, argv)) {\n#if defined(HAVE_REALPATH)\n        if (_Py_wrealpath(argv0, fullpath, Py_ARRAY_LENGTH(fullpath))) {\n            argv0 = fullpath;\n        }\n#endif\n        p = wcsrchr(argv0, SEP);\n    }\n    if (p != NULL) {\n        n = p + 1 - argv0;\n#if SEP == '/' /* Special case for Unix filename syntax */\n        if (n > 1)\n            n--; /* Drop trailing separator */\n#endif /* Unix */\n    }\n#endif /* All others */\n    a = PyUnicode_FromWideChar(argv0, n);\n    if (a == NULL)\n        Py_FatalError(\"no mem for sys.path insertion\");\n    if (PyList_Insert(path, 0, a) < 0)\n        Py_FatalError(\"sys.path.insert(0) failed\");\n    Py_DECREF(a);\n}\n\nvoid\nPySys_SetArgvEx(int argc, wchar_t **argv, int updatepath)\n{\n    PyObject *av = makeargvobject(argc, argv);\n    if (av == NULL)\n        Py_FatalError(\"no mem for sys.argv\");\n    if (PySys_SetObject(\"argv\", av) != 0)\n        Py_FatalError(\"can't assign sys.argv\");\n    Py_DECREF(av);\n    if (updatepath)\n        sys_update_path(argc, argv);\n}\n\nvoid\nPySys_SetArgv(int argc, wchar_t **argv)\n{\n    PySys_SetArgvEx(argc, argv, Py_IsolatedFlag == 0);\n}\n\n/* Reimplementation of PyFile_WriteString() no calling indirectly\n   PyErr_CheckSignals(): avoid the call to PyObject_Str(). */\n\nstatic int\nsys_pyfile_write_unicode(PyObject *unicode, PyObject *file)\n{\n    PyObject *writer = NULL, *args = NULL, *result = NULL;\n    int err;\n\n    if (file == NULL)\n        return -1;\n\n    writer = _PyObject_GetAttrId(file, &PyId_write);\n    if (writer == NULL)\n        goto error;\n\n    args = PyTuple_Pack(1, unicode);\n    if (args == NULL)\n        goto error;\n\n    result = PyEval_CallObject(writer, args);\n    if (result == NULL) {\n        goto error;\n    } else {\n        err = 0;\n        goto finally;\n    }\n\nerror:\n    err = -1;\nfinally:\n    Py_XDECREF(writer);\n    Py_XDECREF(args);\n    Py_XDECREF(result);\n    return err;\n}\n\nstatic int\nsys_pyfile_write(const char *text, PyObject *file)\n{\n    PyObject *unicode = NULL;\n    int err;\n\n    if (file == NULL)\n        return -1;\n\n    unicode = PyUnicode_FromString(text);\n    if (unicode == NULL)\n        return -1;\n\n    err = sys_pyfile_write_unicode(unicode, file);\n    Py_DECREF(unicode);\n    return err;\n}\n\n/* APIs to write to sys.stdout or sys.stderr using a printf-like interface.\n   Adapted from code submitted by Just van Rossum.\n\n   PySys_WriteStdout(format, ...)\n   PySys_WriteStderr(format, ...)\n\n      The first function writes to sys.stdout; the second to sys.stderr.  When\n      there is a problem, they write to the real (C level) stdout or stderr;\n      no exceptions are raised.\n\n      PyErr_CheckSignals() is not called to avoid the execution of the Python\n      signal handlers: they may raise a new exception whereas sys_write()\n      ignores all exceptions.\n\n      Both take a printf-style format string as their first argument followed\n      by a variable length argument list determined by the format string.\n\n      *** WARNING ***\n\n      The format should limit the total size of the formatted output string to\n      1000 bytes.  In particular, this means that no unrestricted \"%s\" formats\n      should occur; these should be limited using \"%.<N>s where <N> is a\n      decimal number calculated so that <N> plus the maximum size of other\n      formatted text does not exceed 1000 bytes.  Also watch out for \"%f\",\n      which can print hundreds of digits for very large numbers.\n\n */\n\nstatic void\nsys_write(_Py_Identifier *key, FILE *fp, const char *format, va_list va)\n{\n    PyObject *file;\n    PyObject *error_type, *error_value, *error_traceback;\n    char buffer[1001];\n    int written;\n\n    PyErr_Fetch(&error_type, &error_value, &error_traceback);\n    file = _PySys_GetObjectId(key);\n    written = PyOS_vsnprintf(buffer, sizeof(buffer), format, va);\n    if (sys_pyfile_write(buffer, file) != 0) {\n        PyErr_Clear();\n        fputs(buffer, fp);\n    }\n    if (written < 0 || (size_t)written >= sizeof(buffer)) {\n        const char *truncated = \"... truncated\";\n        if (sys_pyfile_write(truncated, file) != 0)\n            fputs(truncated, fp);\n    }\n    PyErr_Restore(error_type, error_value, error_traceback);\n}\n\nvoid\nPySys_WriteStdout(const char *format, ...)\n{\n    va_list va;\n\n    va_start(va, format);\n    sys_write(&PyId_stdout, stdout, format, va);\n    va_end(va);\n}\n\nvoid\nPySys_WriteStderr(const char *format, ...)\n{\n    va_list va;\n\n    va_start(va, format);\n    sys_write(&PyId_stderr, stderr, format, va);\n    va_end(va);\n}\n\nstatic void\nsys_format(_Py_Identifier *key, FILE *fp, const char *format, va_list va)\n{\n    PyObject *file, *message;\n    PyObject *error_type, *error_value, *error_traceback;\n    char *utf8;\n\n    PyErr_Fetch(&error_type, &error_value, &error_traceback);\n    file = _PySys_GetObjectId(key);\n    message = PyUnicode_FromFormatV(format, va);\n    if (message != NULL) {\n        if (sys_pyfile_write_unicode(message, file) != 0) {\n            PyErr_Clear();\n            utf8 = _PyUnicode_AsString(message);\n            if (utf8 != NULL)\n                fputs(utf8, fp);\n        }\n        Py_DECREF(message);\n    }\n    PyErr_Restore(error_type, error_value, error_traceback);\n}\n\nvoid\nPySys_FormatStdout(const char *format, ...)\n{\n    va_list va;\n\n    va_start(va, format);\n    sys_format(&PyId_stdout, stdout, format, va);\n    va_end(va);\n}\n\nvoid\nPySys_FormatStderr(const char *format, ...)\n{\n    va_list va;\n\n    va_start(va, format);\n    sys_format(&PyId_stderr, stderr, format, va);\n    va_end(va);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Python/pystate.c": "\n/* Thread and interpreter state structures and their interfaces */\n\n#include \"Python.h\"\n\n#define GET_TSTATE() \\\n    ((PyThreadState*)_Py_atomic_load_relaxed(&_PyThreadState_Current))\n#define SET_TSTATE(value) \\\n    _Py_atomic_store_relaxed(&_PyThreadState_Current, (Py_uintptr_t)(value))\n#define GET_INTERP_STATE() \\\n    (GET_TSTATE()->interp)\n\n\n/* --------------------------------------------------------------------------\nCAUTION\n\nAlways use PyMem_RawMalloc() and PyMem_RawFree() directly in this file.  A\nnumber of these functions are advertised as safe to call when the GIL isn't\nheld, and in a debug build Python redirects (e.g.) PyMem_NEW (etc) to Python's\ndebugging obmalloc functions.  Those aren't thread-safe (they rely on the GIL\nto avoid the expense of doing their own locking).\n-------------------------------------------------------------------------- */\n\n#ifdef HAVE_DLOPEN\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n#ifndef RTLD_LAZY\n#define RTLD_LAZY 1\n#endif\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifdef WITH_THREAD\n#include \"pythread.h\"\nstatic PyThread_type_lock head_mutex = NULL; /* Protects interp->tstate_head */\n#define HEAD_INIT() (void)(head_mutex || (head_mutex = PyThread_allocate_lock()))\n#define HEAD_LOCK() PyThread_acquire_lock(head_mutex, WAIT_LOCK)\n#define HEAD_UNLOCK() PyThread_release_lock(head_mutex)\n\n/* The single PyInterpreterState used by this process'\n   GILState implementation\n*/\nstatic PyInterpreterState *autoInterpreterState = NULL;\nstatic int autoTLSkey = 0;\n#else\n#define HEAD_INIT() /* Nothing */\n#define HEAD_LOCK() /* Nothing */\n#define HEAD_UNLOCK() /* Nothing */\n#endif\n\nstatic PyInterpreterState *interp_head = NULL;\n\n/* Assuming the current thread holds the GIL, this is the\n   PyThreadState for the current thread. */\n_Py_atomic_address _PyThreadState_Current = {0};\nPyThreadFrameGetter _PyThreadState_GetFrame = NULL;\n\n#ifdef WITH_THREAD\nstatic void _PyGILState_NoteThreadState(PyThreadState* tstate);\n#endif\n\n\nPyInterpreterState *\nPyInterpreterState_New(void)\n{\n    PyInterpreterState *interp = (PyInterpreterState *)\n                                 PyMem_RawMalloc(sizeof(PyInterpreterState));\n\n    if (interp != NULL) {\n        HEAD_INIT();\n#ifdef WITH_THREAD\n        if (head_mutex == NULL)\n            Py_FatalError(\"Can't initialize threads for interpreter\");\n#endif\n        interp->modules = NULL;\n        interp->modules_by_index = NULL;\n        interp->sysdict = NULL;\n        interp->builtins = NULL;\n        interp->builtins_copy = NULL;\n        interp->tstate_head = NULL;\n        interp->codec_search_path = NULL;\n        interp->codec_search_cache = NULL;\n        interp->codec_error_registry = NULL;\n        interp->codecs_initialized = 0;\n        interp->fscodec_initialized = 0;\n        interp->importlib = NULL;\n#ifdef HAVE_DLOPEN\n#ifdef RTLD_NOW\n        interp->dlopenflags = RTLD_NOW;\n#else\n        interp->dlopenflags = RTLD_LAZY;\n#endif\n#endif\n#ifdef WITH_TSC\n        interp->tscdump = 0;\n#endif\n\n        HEAD_LOCK();\n        interp->next = interp_head;\n        interp_head = interp;\n        HEAD_UNLOCK();\n    }\n\n    return interp;\n}\n\n\nvoid\nPyInterpreterState_Clear(PyInterpreterState *interp)\n{\n    PyThreadState *p;\n    HEAD_LOCK();\n    for (p = interp->tstate_head; p != NULL; p = p->next)\n        PyThreadState_Clear(p);\n    HEAD_UNLOCK();\n    Py_CLEAR(interp->codec_search_path);\n    Py_CLEAR(interp->codec_search_cache);\n    Py_CLEAR(interp->codec_error_registry);\n    Py_CLEAR(interp->modules);\n    Py_CLEAR(interp->modules_by_index);\n    Py_CLEAR(interp->sysdict);\n    Py_CLEAR(interp->builtins);\n    Py_CLEAR(interp->builtins_copy);\n    Py_CLEAR(interp->importlib);\n}\n\n\nstatic void\nzapthreads(PyInterpreterState *interp)\n{\n    PyThreadState *p;\n    /* No need to lock the mutex here because this should only happen\n       when the threads are all really dead (XXX famous last words). */\n    while ((p = interp->tstate_head) != NULL) {\n        PyThreadState_Delete(p);\n    }\n}\n\n\nvoid\nPyInterpreterState_Delete(PyInterpreterState *interp)\n{\n    PyInterpreterState **p;\n    zapthreads(interp);\n    HEAD_LOCK();\n    for (p = &interp_head; ; p = &(*p)->next) {\n        if (*p == NULL)\n            Py_FatalError(\n                \"PyInterpreterState_Delete: invalid interp\");\n        if (*p == interp)\n            break;\n    }\n    if (interp->tstate_head != NULL)\n        Py_FatalError(\"PyInterpreterState_Delete: remaining threads\");\n    *p = interp->next;\n    HEAD_UNLOCK();\n    PyMem_RawFree(interp);\n#ifdef WITH_THREAD\n    if (interp_head == NULL && head_mutex != NULL) {\n        PyThread_free_lock(head_mutex);\n        head_mutex = NULL;\n    }\n#endif\n}\n\n\n/* Default implementation for _PyThreadState_GetFrame */\nstatic struct _frame *\nthreadstate_getframe(PyThreadState *self)\n{\n    return self->frame;\n}\n\nstatic PyThreadState *\nnew_threadstate(PyInterpreterState *interp, int init)\n{\n    PyThreadState *tstate = (PyThreadState *)PyMem_RawMalloc(sizeof(PyThreadState));\n\n    if (_PyThreadState_GetFrame == NULL)\n        _PyThreadState_GetFrame = threadstate_getframe;\n\n    if (tstate != NULL) {\n        tstate->interp = interp;\n\n        tstate->frame = NULL;\n        tstate->recursion_depth = 0;\n        tstate->overflowed = 0;\n        tstate->recursion_critical = 0;\n        tstate->tracing = 0;\n        tstate->use_tracing = 0;\n        tstate->gilstate_counter = 0;\n        tstate->async_exc = NULL;\n#ifdef WITH_THREAD\n        tstate->thread_id = PyThread_get_thread_ident();\n#else\n        tstate->thread_id = 0;\n#endif\n\n        tstate->dict = NULL;\n\n        tstate->curexc_type = NULL;\n        tstate->curexc_value = NULL;\n        tstate->curexc_traceback = NULL;\n\n        tstate->exc_type = NULL;\n        tstate->exc_value = NULL;\n        tstate->exc_traceback = NULL;\n\n        tstate->c_profilefunc = NULL;\n        tstate->c_tracefunc = NULL;\n        tstate->c_profileobj = NULL;\n        tstate->c_traceobj = NULL;\n\n        tstate->trash_delete_nesting = 0;\n        tstate->trash_delete_later = NULL;\n        tstate->on_delete = NULL;\n        tstate->on_delete_data = NULL;\n\n        tstate->coroutine_wrapper = NULL;\n        tstate->in_coroutine_wrapper = 0;\n\n        if (init)\n            _PyThreadState_Init(tstate);\n\n        HEAD_LOCK();\n        tstate->prev = NULL;\n        tstate->next = interp->tstate_head;\n        if (tstate->next)\n            tstate->next->prev = tstate;\n        interp->tstate_head = tstate;\n        HEAD_UNLOCK();\n    }\n\n    return tstate;\n}\n\nPyThreadState *\nPyThreadState_New(PyInterpreterState *interp)\n{\n    return new_threadstate(interp, 1);\n}\n\nPyThreadState *\n_PyThreadState_Prealloc(PyInterpreterState *interp)\n{\n    return new_threadstate(interp, 0);\n}\n\nvoid\n_PyThreadState_Init(PyThreadState *tstate)\n{\n#ifdef WITH_THREAD\n    _PyGILState_NoteThreadState(tstate);\n#endif\n}\n\nPyObject*\nPyState_FindModule(struct PyModuleDef* module)\n{\n    Py_ssize_t index = module->m_base.m_index;\n    PyInterpreterState *state = GET_INTERP_STATE();\n    PyObject *res;\n    if (module->m_slots) {\n        return NULL;\n    }\n    if (index == 0)\n        return NULL;\n    if (state->modules_by_index == NULL)\n        return NULL;\n    if (index >= PyList_GET_SIZE(state->modules_by_index))\n        return NULL;\n    res = PyList_GET_ITEM(state->modules_by_index, index);\n    return res==Py_None ? NULL : res;\n}\n\nint\n_PyState_AddModule(PyObject* module, struct PyModuleDef* def)\n{\n    PyInterpreterState *state;\n    if (!def) {\n        assert(PyErr_Occurred());\n        return -1;\n    }\n    if (def->m_slots) {\n        PyErr_SetString(PyExc_SystemError,\n                        \"PyState_AddModule called on module with slots\");\n        return -1;\n    }\n    state = GET_INTERP_STATE();\n    if (!state->modules_by_index) {\n        state->modules_by_index = PyList_New(0);\n        if (!state->modules_by_index)\n            return -1;\n    }\n    while(PyList_GET_SIZE(state->modules_by_index) <= def->m_base.m_index)\n        if (PyList_Append(state->modules_by_index, Py_None) < 0)\n            return -1;\n    Py_INCREF(module);\n    return PyList_SetItem(state->modules_by_index,\n                          def->m_base.m_index, module);\n}\n\nint\nPyState_AddModule(PyObject* module, struct PyModuleDef* def)\n{\n    Py_ssize_t index;\n    PyInterpreterState *state = GET_INTERP_STATE();\n    if (!def) {\n        Py_FatalError(\"PyState_AddModule: Module Definition is NULL\");\n        return -1;\n    }\n    index = def->m_base.m_index;\n    if (state->modules_by_index) {\n        if(PyList_GET_SIZE(state->modules_by_index) >= index) {\n            if(module == PyList_GET_ITEM(state->modules_by_index, index)) {\n                Py_FatalError(\"PyState_AddModule: Module already added!\");\n                return -1;\n            }\n        }\n    }\n    return _PyState_AddModule(module, def);\n}\n\nint\nPyState_RemoveModule(struct PyModuleDef* def)\n{\n    PyInterpreterState *state;\n    Py_ssize_t index = def->m_base.m_index;\n    if (def->m_slots) {\n        PyErr_SetString(PyExc_SystemError,\n                        \"PyState_RemoveModule called on module with slots\");\n        return -1;\n    }\n    state = GET_INTERP_STATE();\n    if (index == 0) {\n        Py_FatalError(\"PyState_RemoveModule: Module index invalid.\");\n        return -1;\n    }\n    if (state->modules_by_index == NULL) {\n        Py_FatalError(\"PyState_RemoveModule: Interpreters module-list not acessible.\");\n        return -1;\n    }\n    if (index > PyList_GET_SIZE(state->modules_by_index)) {\n        Py_FatalError(\"PyState_RemoveModule: Module index out of bounds.\");\n        return -1;\n    }\n    return PyList_SetItem(state->modules_by_index, index, Py_None);\n}\n\n/* used by import.c:PyImport_Cleanup */\nvoid\n_PyState_ClearModules(void)\n{\n    PyInterpreterState *state = GET_INTERP_STATE();\n    if (state->modules_by_index) {\n        Py_ssize_t i;\n        for (i = 0; i < PyList_GET_SIZE(state->modules_by_index); i++) {\n            PyObject *m = PyList_GET_ITEM(state->modules_by_index, i);\n            if (PyModule_Check(m)) {\n                /* cleanup the saved copy of module dicts */\n                PyModuleDef *md = PyModule_GetDef(m);\n                if (md)\n                    Py_CLEAR(md->m_base.m_copy);\n            }\n        }\n        /* Setting modules_by_index to NULL could be dangerous, so we\n           clear the list instead. */\n        if (PyList_SetSlice(state->modules_by_index,\n                            0, PyList_GET_SIZE(state->modules_by_index),\n                            NULL))\n            PyErr_WriteUnraisable(state->modules_by_index);\n    }\n}\n\nvoid\nPyThreadState_Clear(PyThreadState *tstate)\n{\n    if (Py_VerboseFlag && tstate->frame != NULL)\n        fprintf(stderr,\n          \"PyThreadState_Clear: warning: thread still has a frame\\n\");\n\n    Py_CLEAR(tstate->frame);\n\n    Py_CLEAR(tstate->dict);\n    Py_CLEAR(tstate->async_exc);\n\n    Py_CLEAR(tstate->curexc_type);\n    Py_CLEAR(tstate->curexc_value);\n    Py_CLEAR(tstate->curexc_traceback);\n\n    Py_CLEAR(tstate->exc_type);\n    Py_CLEAR(tstate->exc_value);\n    Py_CLEAR(tstate->exc_traceback);\n\n    tstate->c_profilefunc = NULL;\n    tstate->c_tracefunc = NULL;\n    Py_CLEAR(tstate->c_profileobj);\n    Py_CLEAR(tstate->c_traceobj);\n\n    Py_CLEAR(tstate->coroutine_wrapper);\n}\n\n\n/* Common code for PyThreadState_Delete() and PyThreadState_DeleteCurrent() */\nstatic void\ntstate_delete_common(PyThreadState *tstate)\n{\n    PyInterpreterState *interp;\n    if (tstate == NULL)\n        Py_FatalError(\"PyThreadState_Delete: NULL tstate\");\n    interp = tstate->interp;\n    if (interp == NULL)\n        Py_FatalError(\"PyThreadState_Delete: NULL interp\");\n    HEAD_LOCK();\n    if (tstate->prev)\n        tstate->prev->next = tstate->next;\n    else\n        interp->tstate_head = tstate->next;\n    if (tstate->next)\n        tstate->next->prev = tstate->prev;\n    HEAD_UNLOCK();\n    if (tstate->on_delete != NULL) {\n        tstate->on_delete(tstate->on_delete_data);\n    }\n    PyMem_RawFree(tstate);\n}\n\n\nvoid\nPyThreadState_Delete(PyThreadState *tstate)\n{\n    if (tstate == GET_TSTATE())\n        Py_FatalError(\"PyThreadState_Delete: tstate is still current\");\n#ifdef WITH_THREAD\n    if (autoInterpreterState && PyThread_get_key_value(autoTLSkey) == tstate)\n        PyThread_delete_key_value(autoTLSkey);\n#endif /* WITH_THREAD */\n    tstate_delete_common(tstate);\n}\n\n\n#ifdef WITH_THREAD\nvoid\nPyThreadState_DeleteCurrent()\n{\n    PyThreadState *tstate = GET_TSTATE();\n    if (tstate == NULL)\n        Py_FatalError(\n            \"PyThreadState_DeleteCurrent: no current tstate\");\n    SET_TSTATE(NULL);\n    if (autoInterpreterState && PyThread_get_key_value(autoTLSkey) == tstate)\n        PyThread_delete_key_value(autoTLSkey);\n    tstate_delete_common(tstate);\n    PyEval_ReleaseLock();\n}\n#endif /* WITH_THREAD */\n\n\n/*\n * Delete all thread states except the one passed as argument.\n * Note that, if there is a current thread state, it *must* be the one\n * passed as argument.  Also, this won't touch any other interpreters\n * than the current one, since we don't know which thread state should\n * be kept in those other interpreteres.\n */\nvoid\n_PyThreadState_DeleteExcept(PyThreadState *tstate)\n{\n    PyInterpreterState *interp = tstate->interp;\n    PyThreadState *p, *next, *garbage;\n    HEAD_LOCK();\n    /* Remove all thread states, except tstate, from the linked list of\n       thread states.  This will allow calling PyThreadState_Clear()\n       without holding the lock. */\n    garbage = interp->tstate_head;\n    if (garbage == tstate)\n        garbage = tstate->next;\n    if (tstate->prev)\n        tstate->prev->next = tstate->next;\n    if (tstate->next)\n        tstate->next->prev = tstate->prev;\n    tstate->prev = tstate->next = NULL;\n    interp->tstate_head = tstate;\n    HEAD_UNLOCK();\n    /* Clear and deallocate all stale thread states.  Even if this\n       executes Python code, we should be safe since it executes\n       in the current thread, not one of the stale threads. */\n    for (p = garbage; p; p = next) {\n        next = p->next;\n        PyThreadState_Clear(p);\n        PyMem_RawFree(p);\n    }\n}\n\n\nPyThreadState *\n_PyThreadState_UncheckedGet(void)\n{\n    return GET_TSTATE();\n}\n\n\nPyThreadState *\nPyThreadState_Get(void)\n{\n    PyThreadState *tstate = GET_TSTATE();\n    if (tstate == NULL)\n        Py_FatalError(\"PyThreadState_Get: no current thread\");\n\n    return tstate;\n}\n\n\nPyThreadState *\nPyThreadState_Swap(PyThreadState *newts)\n{\n    PyThreadState *oldts = GET_TSTATE();\n\n    SET_TSTATE(newts);\n    /* It should not be possible for more than one thread state\n       to be used for a thread.  Check this the best we can in debug\n       builds.\n    */\n#if defined(Py_DEBUG) && defined(WITH_THREAD)\n    if (newts) {\n        /* This can be called from PyEval_RestoreThread(). Similar\n           to it, we need to ensure errno doesn't change.\n        */\n        int err = errno;\n        PyThreadState *check = PyGILState_GetThisThreadState();\n        if (check && check->interp == newts->interp && check != newts)\n            Py_FatalError(\"Invalid thread state for this thread\");\n        errno = err;\n    }\n#endif\n    return oldts;\n}\n\n/* An extension mechanism to store arbitrary additional per-thread state.\n   PyThreadState_GetDict() returns a dictionary that can be used to hold such\n   state; the caller should pick a unique key and store its state there.  If\n   PyThreadState_GetDict() returns NULL, an exception has *not* been raised\n   and the caller should assume no per-thread state is available. */\n\nPyObject *\nPyThreadState_GetDict(void)\n{\n    PyThreadState *tstate = GET_TSTATE();\n    if (tstate == NULL)\n        return NULL;\n\n    if (tstate->dict == NULL) {\n        PyObject *d;\n        tstate->dict = d = PyDict_New();\n        if (d == NULL)\n            PyErr_Clear();\n    }\n    return tstate->dict;\n}\n\n\n/* Asynchronously raise an exception in a thread.\n   Requested by Just van Rossum and Alex Martelli.\n   To prevent naive misuse, you must write your own extension\n   to call this, or use ctypes.  Must be called with the GIL held.\n   Returns the number of tstates modified (normally 1, but 0 if `id` didn't\n   match any known thread id).  Can be called with exc=NULL to clear an\n   existing async exception.  This raises no exceptions. */\n\nint\nPyThreadState_SetAsyncExc(long id, PyObject *exc) {\n    PyInterpreterState *interp = GET_INTERP_STATE();\n    PyThreadState *p;\n\n    /* Although the GIL is held, a few C API functions can be called\n     * without the GIL held, and in particular some that create and\n     * destroy thread and interpreter states.  Those can mutate the\n     * list of thread states we're traversing, so to prevent that we lock\n     * head_mutex for the duration.\n     */\n    HEAD_LOCK();\n    for (p = interp->tstate_head; p != NULL; p = p->next) {\n        if (p->thread_id == id) {\n            /* Tricky:  we need to decref the current value\n             * (if any) in p->async_exc, but that can in turn\n             * allow arbitrary Python code to run, including\n             * perhaps calls to this function.  To prevent\n             * deadlock, we need to release head_mutex before\n             * the decref.\n             */\n            PyObject *old_exc = p->async_exc;\n            Py_XINCREF(exc);\n            p->async_exc = exc;\n            HEAD_UNLOCK();\n            Py_XDECREF(old_exc);\n            _PyEval_SignalAsyncExc();\n            return 1;\n        }\n    }\n    HEAD_UNLOCK();\n    return 0;\n}\n\n\n/* Routines for advanced debuggers, requested by David Beazley.\n   Don't use unless you know what you are doing! */\n\nPyInterpreterState *\nPyInterpreterState_Head(void)\n{\n    return interp_head;\n}\n\nPyInterpreterState *\nPyInterpreterState_Next(PyInterpreterState *interp) {\n    return interp->next;\n}\n\nPyThreadState *\nPyInterpreterState_ThreadHead(PyInterpreterState *interp) {\n    return interp->tstate_head;\n}\n\nPyThreadState *\nPyThreadState_Next(PyThreadState *tstate) {\n    return tstate->next;\n}\n\n/* The implementation of sys._current_frames().  This is intended to be\n   called with the GIL held, as it will be when called via\n   sys._current_frames().  It's possible it would work fine even without\n   the GIL held, but haven't thought enough about that.\n*/\nPyObject *\n_PyThread_CurrentFrames(void)\n{\n    PyObject *result;\n    PyInterpreterState *i;\n\n    result = PyDict_New();\n    if (result == NULL)\n        return NULL;\n\n    /* for i in all interpreters:\n     *     for t in all of i's thread states:\n     *          if t's frame isn't NULL, map t's id to its frame\n     * Because these lists can mutate even when the GIL is held, we\n     * need to grab head_mutex for the duration.\n     */\n    HEAD_LOCK();\n    for (i = interp_head; i != NULL; i = i->next) {\n        PyThreadState *t;\n        for (t = i->tstate_head; t != NULL; t = t->next) {\n            PyObject *id;\n            int stat;\n            struct _frame *frame = t->frame;\n            if (frame == NULL)\n                continue;\n            id = PyLong_FromLong(t->thread_id);\n            if (id == NULL)\n                goto Fail;\n            stat = PyDict_SetItem(result, id, (PyObject *)frame);\n            Py_DECREF(id);\n            if (stat < 0)\n                goto Fail;\n        }\n    }\n    HEAD_UNLOCK();\n    return result;\n\n Fail:\n    HEAD_UNLOCK();\n    Py_DECREF(result);\n    return NULL;\n}\n\n/* Python \"auto thread state\" API. */\n#ifdef WITH_THREAD\n\n/* Keep this as a static, as it is not reliable!  It can only\n   ever be compared to the state for the *current* thread.\n   * If not equal, then it doesn't matter that the actual\n     value may change immediately after comparison, as it can't\n     possibly change to the current thread's state.\n   * If equal, then the current thread holds the lock, so the value can't\n     change until we yield the lock.\n*/\nstatic int\nPyThreadState_IsCurrent(PyThreadState *tstate)\n{\n    /* Must be the tstate for this thread */\n    assert(PyGILState_GetThisThreadState()==tstate);\n    return tstate == GET_TSTATE();\n}\n\n/* Internal initialization/finalization functions called by\n   Py_Initialize/Py_Finalize\n*/\nvoid\n_PyGILState_Init(PyInterpreterState *i, PyThreadState *t)\n{\n    assert(i && t); /* must init with valid states */\n    autoTLSkey = PyThread_create_key();\n    if (autoTLSkey == -1)\n        Py_FatalError(\"Could not allocate TLS entry\");\n    autoInterpreterState = i;\n    assert(PyThread_get_key_value(autoTLSkey) == NULL);\n    assert(t->gilstate_counter == 0);\n\n    _PyGILState_NoteThreadState(t);\n}\n\nvoid\n_PyGILState_Fini(void)\n{\n    PyThread_delete_key(autoTLSkey);\n    autoInterpreterState = NULL;\n}\n\n/* Reset the TLS key - called by PyOS_AfterFork().\n * This should not be necessary, but some - buggy - pthread implementations\n * don't reset TLS upon fork(), see issue #10517.\n */\nvoid\n_PyGILState_Reinit(void)\n{\n    PyThreadState *tstate = PyGILState_GetThisThreadState();\n    PyThread_delete_key(autoTLSkey);\n    if ((autoTLSkey = PyThread_create_key()) == -1)\n        Py_FatalError(\"Could not allocate TLS entry\");\n\n    /* If the thread had an associated auto thread state, reassociate it with\n     * the new key. */\n    if (tstate && PyThread_set_key_value(autoTLSkey, (void *)tstate) < 0)\n        Py_FatalError(\"Couldn't create autoTLSkey mapping\");\n}\n\n/* When a thread state is created for a thread by some mechanism other than\n   PyGILState_Ensure, it's important that the GILState machinery knows about\n   it so it doesn't try to create another thread state for the thread (this is\n   a better fix for SF bug #1010677 than the first one attempted).\n*/\nstatic void\n_PyGILState_NoteThreadState(PyThreadState* tstate)\n{\n    /* If autoTLSkey isn't initialized, this must be the very first\n       threadstate created in Py_Initialize().  Don't do anything for now\n       (we'll be back here when _PyGILState_Init is called). */\n    if (!autoInterpreterState)\n        return;\n\n    /* Stick the thread state for this thread in thread local storage.\n\n       The only situation where you can legitimately have more than one\n       thread state for an OS level thread is when there are multiple\n       interpreters.\n\n       You shouldn't really be using the PyGILState_ APIs anyway (see issues\n       #10915 and #15751).\n\n       The first thread state created for that given OS level thread will\n       \"win\", which seems reasonable behaviour.\n    */\n    if (PyThread_get_key_value(autoTLSkey) == NULL) {\n        if (PyThread_set_key_value(autoTLSkey, (void *)tstate) < 0)\n            Py_FatalError(\"Couldn't create autoTLSkey mapping\");\n    }\n\n    /* PyGILState_Release must not try to delete this thread state. */\n    tstate->gilstate_counter = 1;\n}\n\n/* The public functions */\nPyThreadState *\nPyGILState_GetThisThreadState(void)\n{\n    if (autoInterpreterState == NULL)\n        return NULL;\n    return (PyThreadState *)PyThread_get_key_value(autoTLSkey);\n}\n\nint\nPyGILState_Check(void)\n{\n    PyThreadState *tstate = GET_TSTATE();\n    return tstate && (tstate == PyGILState_GetThisThreadState());\n}\n\nPyGILState_STATE\nPyGILState_Ensure(void)\n{\n    int current;\n    PyThreadState *tcur;\n    /* Note that we do not auto-init Python here - apart from\n       potential races with 2 threads auto-initializing, pep-311\n       spells out other issues.  Embedders are expected to have\n       called Py_Initialize() and usually PyEval_InitThreads().\n    */\n    assert(autoInterpreterState); /* Py_Initialize() hasn't been called! */\n    tcur = (PyThreadState *)PyThread_get_key_value(autoTLSkey);\n    if (tcur == NULL) {\n        /* At startup, Python has no concrete GIL. If PyGILState_Ensure() is\n           called from a new thread for the first time, we need the create the\n           GIL. */\n        PyEval_InitThreads();\n\n        /* Create a new thread state for this thread */\n        tcur = PyThreadState_New(autoInterpreterState);\n        if (tcur == NULL)\n            Py_FatalError(\"Couldn't create thread-state for new thread\");\n        /* This is our thread state!  We'll need to delete it in the\n           matching call to PyGILState_Release(). */\n        tcur->gilstate_counter = 0;\n        current = 0; /* new thread state is never current */\n    }\n    else\n        current = PyThreadState_IsCurrent(tcur);\n    if (current == 0)\n        PyEval_RestoreThread(tcur);\n    /* Update our counter in the thread-state - no need for locks:\n       - tcur will remain valid as we hold the GIL.\n       - the counter is safe as we are the only thread \"allowed\"\n         to modify this value\n    */\n    ++tcur->gilstate_counter;\n    return current ? PyGILState_LOCKED : PyGILState_UNLOCKED;\n}\n\nvoid\nPyGILState_Release(PyGILState_STATE oldstate)\n{\n    PyThreadState *tcur = (PyThreadState *)PyThread_get_key_value(\n                                                            autoTLSkey);\n    if (tcur == NULL)\n        Py_FatalError(\"auto-releasing thread-state, \"\n                      \"but no thread-state for this thread\");\n    /* We must hold the GIL and have our thread state current */\n    /* XXX - remove the check - the assert should be fine,\n       but while this is very new (April 2003), the extra check\n       by release-only users can't hurt.\n    */\n    if (! PyThreadState_IsCurrent(tcur))\n        Py_FatalError(\"This thread state must be current when releasing\");\n    assert(PyThreadState_IsCurrent(tcur));\n    --tcur->gilstate_counter;\n    assert(tcur->gilstate_counter >= 0); /* illegal counter value */\n\n    /* If we're going to destroy this thread-state, we must\n     * clear it while the GIL is held, as destructors may run.\n     */\n    if (tcur->gilstate_counter == 0) {\n        /* can't have been locked when we created it */\n        assert(oldstate == PyGILState_UNLOCKED);\n        PyThreadState_Clear(tcur);\n        /* Delete the thread-state.  Note this releases the GIL too!\n         * It's vital that the GIL be held here, to avoid shutdown\n         * races; see bugs 225673 and 1061968 (that nasty bug has a\n         * habit of coming back).\n         */\n        PyThreadState_DeleteCurrent();\n    }\n    /* Release the lock if necessary */\n    else if (oldstate == PyGILState_UNLOCKED)\n        PyEval_SaveThread();\n}\n\n#endif /* WITH_THREAD */\n\n#ifdef __cplusplus\n}\n#endif\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Include/pystate.h": "\n/* Thread and interpreter state structures and their interfaces */\n\n\n#ifndef Py_PYSTATE_H\n#define Py_PYSTATE_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* State shared between threads */\n\nstruct _ts; /* Forward */\nstruct _is; /* Forward */\n\n#ifdef Py_LIMITED_API\ntypedef struct _is PyInterpreterState;\n#else\ntypedef struct _is {\n\n    struct _is *next;\n    struct _ts *tstate_head;\n\n    PyObject *modules;\n    PyObject *modules_by_index;\n    PyObject *sysdict;\n    PyObject *builtins;\n    PyObject *importlib;\n\n    PyObject *codec_search_path;\n    PyObject *codec_search_cache;\n    PyObject *codec_error_registry;\n    int codecs_initialized;\n    int fscodec_initialized;\n\n#ifdef HAVE_DLOPEN\n    int dlopenflags;\n#endif\n#ifdef WITH_TSC\n    int tscdump;\n#endif\n\n    PyObject *builtins_copy;\n} PyInterpreterState;\n#endif\n\n\n/* State unique per thread */\n\nstruct _frame; /* Avoid including frameobject.h */\n\n#ifndef Py_LIMITED_API\n/* Py_tracefunc return -1 when raising an exception, or 0 for success. */\ntypedef int (*Py_tracefunc)(PyObject *, struct _frame *, int, PyObject *);\n\n/* The following values are used for 'what' for tracefunc functions: */\n#define PyTrace_CALL 0\n#define PyTrace_EXCEPTION 1\n#define PyTrace_LINE 2\n#define PyTrace_RETURN 3\n#define PyTrace_C_CALL 4\n#define PyTrace_C_EXCEPTION 5\n#define PyTrace_C_RETURN 6\n#endif\n\n#ifdef Py_LIMITED_API\ntypedef struct _ts PyThreadState;\n#else\ntypedef struct _ts {\n    /* See Python/ceval.c for comments explaining most fields */\n\n    struct _ts *prev;\n    struct _ts *next;\n    PyInterpreterState *interp;\n\n    struct _frame *frame;\n    int recursion_depth;\n    char overflowed; /* The stack has overflowed. Allow 50 more calls\n                        to handle the runtime error. */\n    char recursion_critical; /* The current calls must not cause\n                                a stack overflow. */\n    /* 'tracing' keeps track of the execution depth when tracing/profiling.\n       This is to prevent the actual trace/profile code from being recorded in\n       the trace/profile. */\n    int tracing;\n    int use_tracing;\n\n    Py_tracefunc c_profilefunc;\n    Py_tracefunc c_tracefunc;\n    PyObject *c_profileobj;\n    PyObject *c_traceobj;\n\n    PyObject *curexc_type;\n    PyObject *curexc_value;\n    PyObject *curexc_traceback;\n\n    PyObject *exc_type;\n    PyObject *exc_value;\n    PyObject *exc_traceback;\n\n    PyObject *dict;  /* Stores per-thread state */\n\n    int gilstate_counter;\n\n    PyObject *async_exc; /* Asynchronous exception to raise */\n    long thread_id; /* Thread id where this tstate was created */\n\n    int trash_delete_nesting;\n    PyObject *trash_delete_later;\n\n    /* Called when a thread state is deleted normally, but not when it\n     * is destroyed after fork().\n     * Pain:  to prevent rare but fatal shutdown errors (issue 18808),\n     * Thread.join() must wait for the join'ed thread's tstate to be unlinked\n     * from the tstate chain.  That happens at the end of a thread's life,\n     * in pystate.c.\n     * The obvious way doesn't quite work:  create a lock which the tstate\n     * unlinking code releases, and have Thread.join() wait to acquire that\n     * lock.  The problem is that we _are_ at the end of the thread's life:\n     * if the thread holds the last reference to the lock, decref'ing the\n     * lock will delete the lock, and that may trigger arbitrary Python code\n     * if there's a weakref, with a callback, to the lock.  But by this time\n     * _PyThreadState_Current is already NULL, so only the simplest of C code\n     * can be allowed to run (in particular it must not be possible to\n     * release the GIL).\n     * So instead of holding the lock directly, the tstate holds a weakref to\n     * the lock:  that's the value of on_delete_data below.  Decref'ing a\n     * weakref is harmless.\n     * on_delete points to _threadmodule.c's static release_sentinel() function.\n     * After the tstate is unlinked, release_sentinel is called with the\n     * weakref-to-lock (on_delete_data) argument, and release_sentinel releases\n     * the indirectly held lock.\n     */\n    void (*on_delete)(void *);\n    void *on_delete_data;\n\n    PyObject *coroutine_wrapper;\n    int in_coroutine_wrapper;\n\n    /* XXX signal handlers should also be here */\n\n} PyThreadState;\n#endif\n\n\nPyAPI_FUNC(PyInterpreterState *) PyInterpreterState_New(void);\nPyAPI_FUNC(void) PyInterpreterState_Clear(PyInterpreterState *);\nPyAPI_FUNC(void) PyInterpreterState_Delete(PyInterpreterState *);\nPyAPI_FUNC(int) _PyState_AddModule(PyObject*, struct PyModuleDef*);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000\n/* New in 3.3 */\nPyAPI_FUNC(int) PyState_AddModule(PyObject*, struct PyModuleDef*);\nPyAPI_FUNC(int) PyState_RemoveModule(struct PyModuleDef*);\n#endif\nPyAPI_FUNC(PyObject*) PyState_FindModule(struct PyModuleDef*);\n#ifndef Py_LIMITED_API\nPyAPI_FUNC(void) _PyState_ClearModules(void);\n#endif\n\nPyAPI_FUNC(PyThreadState *) PyThreadState_New(PyInterpreterState *);\nPyAPI_FUNC(PyThreadState *) _PyThreadState_Prealloc(PyInterpreterState *);\nPyAPI_FUNC(void) _PyThreadState_Init(PyThreadState *);\nPyAPI_FUNC(void) PyThreadState_Clear(PyThreadState *);\nPyAPI_FUNC(void) PyThreadState_Delete(PyThreadState *);\nPyAPI_FUNC(void) _PyThreadState_DeleteExcept(PyThreadState *tstate);\n#ifdef WITH_THREAD\nPyAPI_FUNC(void) PyThreadState_DeleteCurrent(void);\nPyAPI_FUNC(void) _PyGILState_Reinit(void);\n#endif\n\n/* Return the current thread state. The global interpreter lock must be held.\n * When the current thread state is NULL, this issues a fatal error (so that\n * the caller needn't check for NULL). */\nPyAPI_FUNC(PyThreadState *) PyThreadState_Get(void);\n\n/* Similar to PyThreadState_Get(), but don't issue a fatal error\n * if it is NULL. */\nPyAPI_FUNC(PyThreadState *) _PyThreadState_UncheckedGet(void);\n\nPyAPI_FUNC(PyThreadState *) PyThreadState_Swap(PyThreadState *);\nPyAPI_FUNC(PyObject *) PyThreadState_GetDict(void);\nPyAPI_FUNC(int) PyThreadState_SetAsyncExc(long, PyObject *);\n\n\n/* Variable and macro for in-line access to current thread state */\n\n/* Assuming the current thread holds the GIL, this is the\n   PyThreadState for the current thread. */\n#ifdef Py_BUILD_CORE\nPyAPI_DATA(_Py_atomic_address) _PyThreadState_Current;\n#  define PyThreadState_GET() \\\n             ((PyThreadState*)_Py_atomic_load_relaxed(&_PyThreadState_Current))\n#else\n#  define PyThreadState_GET() PyThreadState_Get()\n#endif\n\ntypedef\n    enum {PyGILState_LOCKED, PyGILState_UNLOCKED}\n        PyGILState_STATE;\n\n#ifdef WITH_THREAD\n\n/* Ensure that the current thread is ready to call the Python\n   C API, regardless of the current state of Python, or of its\n   thread lock.  This may be called as many times as desired\n   by a thread so long as each call is matched with a call to\n   PyGILState_Release().  In general, other thread-state APIs may\n   be used between _Ensure() and _Release() calls, so long as the\n   thread-state is restored to its previous state before the Release().\n   For example, normal use of the Py_BEGIN_ALLOW_THREADS/\n   Py_END_ALLOW_THREADS macros are acceptable.\n\n   The return value is an opaque \"handle\" to the thread state when\n   PyGILState_Ensure() was called, and must be passed to\n   PyGILState_Release() to ensure Python is left in the same state. Even\n   though recursive calls are allowed, these handles can *not* be shared -\n   each unique call to PyGILState_Ensure must save the handle for its\n   call to PyGILState_Release.\n\n   When the function returns, the current thread will hold the GIL.\n\n   Failure is a fatal error.\n*/\nPyAPI_FUNC(PyGILState_STATE) PyGILState_Ensure(void);\n\n/* Release any resources previously acquired.  After this call, Python's\n   state will be the same as it was prior to the corresponding\n   PyGILState_Ensure() call (but generally this state will be unknown to\n   the caller, hence the use of the GILState API.)\n\n   Every call to PyGILState_Ensure must be matched by a call to\n   PyGILState_Release on the same thread.\n*/\nPyAPI_FUNC(void) PyGILState_Release(PyGILState_STATE);\n\n/* Helper/diagnostic function - get the current thread state for\n   this thread.  May return NULL if no GILState API has been used\n   on the current thread.  Note that the main thread always has such a\n   thread-state, even if no auto-thread-state call has been made\n   on the main thread.\n*/\nPyAPI_FUNC(PyThreadState *) PyGILState_GetThisThreadState(void);\n\n/* Helper/diagnostic function - return 1 if the current thread\n * currently holds the GIL, 0 otherwise\n */\n#ifndef Py_LIMITED_API\nPyAPI_FUNC(int) PyGILState_Check(void);\n#endif\n\n#endif   /* #ifdef WITH_THREAD */\n\n/* The implementation of sys._current_frames()  Returns a dict mapping\n   thread id to that thread's current frame.\n*/\n#ifndef Py_LIMITED_API\nPyAPI_FUNC(PyObject *) _PyThread_CurrentFrames(void);\n#endif\n\n/* Routines for advanced debuggers, requested by David Beazley.\n   Don't use unless you know what you are doing! */\n#ifndef Py_LIMITED_API\nPyAPI_FUNC(PyInterpreterState *) PyInterpreterState_Head(void);\nPyAPI_FUNC(PyInterpreterState *) PyInterpreterState_Next(PyInterpreterState *);\nPyAPI_FUNC(PyThreadState *) PyInterpreterState_ThreadHead(PyInterpreterState *);\nPyAPI_FUNC(PyThreadState *) PyThreadState_Next(PyThreadState *);\n\ntypedef struct _frame *(*PyThreadFrameGetter)(PyThreadState *self_);\n#endif\n\n/* hook for PyEval_GetFrame(), requested for Psyco */\n#ifndef Py_LIMITED_API\nPyAPI_DATA(PyThreadFrameGetter) _PyThreadState_GetFrame;\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* !Py_PYSTATE_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Modules/_ctypes/ctypes_dlfcn.h": "#ifndef _CTYPES_DLFCN_H_\n#define _CTYPES_DLFCN_H_\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif /* __cplusplus */\n\n#ifndef MS_WIN32\n\n#include <dlfcn.h>\n\n#ifndef CTYPES_DARWIN_DLFCN\n\n#define ctypes_dlsym dlsym\n#define ctypes_dlerror dlerror\n#define ctypes_dlopen dlopen\n#define ctypes_dlclose dlclose\n#define ctypes_dladdr dladdr\n\n#endif /* !CTYPES_DARWIN_DLFCN */\n\n#endif /* !MS_WIN32 */\n\n#ifdef __cplusplus\n}\n#endif /* __cplusplus */\n#endif /* _CTYPES_DLFCN_H_ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Modules/_ctypes/callproc.c": "/*\n * History: First version dated from 3/97, derived from my SCMLIB version\n * for win16.\n */\n/*\n * Related Work:\n *      - calldll       http://www.nightmare.com/software.html\n *      - libffi        http://sourceware.cygnus.com/libffi/\n *      - ffcall        http://clisp.cons.org/~haible/packages-ffcall.html\n *   and, of course, Don Beaudry's MESS package, but this is more ctypes\n *   related.\n */\n\n\n/*\n  How are functions called, and how are parameters converted to C ?\n\n  1. _ctypes.c::PyCFuncPtr_call receives an argument tuple 'inargs' and a\n  keyword dictionary 'kwds'.\n\n  2. After several checks, _build_callargs() is called which returns another\n  tuple 'callargs'.  This may be the same tuple as 'inargs', a slice of\n  'inargs', or a completely fresh tuple, depending on several things (is it a\n  COM method?, are 'paramflags' available?).\n\n  3. _build_callargs also calculates bitarrays containing indexes into\n  the callargs tuple, specifying how to build the return value(s) of\n  the function.\n\n  4. _ctypes_callproc is then called with the 'callargs' tuple.  _ctypes_callproc first\n  allocates two arrays.  The first is an array of 'struct argument' items, the\n  second array has 'void *' entries.\n\n  5. If 'converters' are present (converters is a sequence of argtypes'\n  from_param methods), for each item in 'callargs' converter is called and the\n  result passed to ConvParam.  If 'converters' are not present, each argument\n  is directly passed to ConvParm.\n\n  6. For each arg, ConvParam stores the contained C data (or a pointer to it,\n  for structures) into the 'struct argument' array.\n\n  7. Finally, a loop fills the 'void *' array so that each item points to the\n  data contained in or pointed to by the 'struct argument' array.\n\n  8. The 'void *' argument array is what _call_function_pointer\n  expects. _call_function_pointer then has very little to do - only some\n  libffi specific stuff, then it calls ffi_call.\n\n  So, there are 4 data structures holding processed arguments:\n  - the inargs tuple (in PyCFuncPtr_call)\n  - the callargs tuple (in PyCFuncPtr_call)\n  - the 'struct arguments' array\n  - the 'void *' array\n\n */\n\n#include \"Python.h\"\n#include \"structmember.h\"\n\n#ifdef MS_WIN32\n#include <windows.h>\n#include <tchar.h>\n#else\n#include \"ctypes_dlfcn.h\"\n#endif\n\n#ifdef MS_WIN32\n#include <malloc.h>\n#endif\n\n#include <ffi.h>\n#include \"ctypes.h\"\n#ifdef HAVE_ALLOCA_H\n/* AIX needs alloca.h for alloca() */\n#include <alloca.h>\n#endif\n\n#if defined(_DEBUG) || defined(__MINGW32__)\n/* Don't use structured exception handling on Windows if this is defined.\n   MingW, AFAIK, doesn't support it.\n*/\n#define DONT_USE_SEH\n#endif\n\n#define CTYPES_CAPSULE_NAME_PYMEM \"_ctypes pymem\"\n\nstatic void pymem_destructor(PyObject *ptr)\n{\n    void *p = PyCapsule_GetPointer(ptr, CTYPES_CAPSULE_NAME_PYMEM);\n    if (p) {\n        PyMem_Free(p);\n    }\n}\n\n/*\n  ctypes maintains thread-local storage that has space for two error numbers:\n  private copies of the system 'errno' value and, on Windows, the system error code\n  accessed by the GetLastError() and SetLastError() api functions.\n\n  Foreign functions created with CDLL(..., use_errno=True), when called, swap\n  the system 'errno' value with the private copy just before the actual\n  function call, and swapped again immediately afterwards.  The 'use_errno'\n  parameter defaults to False, in this case 'ctypes_errno' is not touched.\n\n  On Windows, foreign functions created with CDLL(..., use_last_error=True) or\n  WinDLL(..., use_last_error=True) swap the system LastError value with the\n  ctypes private copy.\n\n  The values are also swapped immeditately before and after ctypes callback\n  functions are called, if the callbacks are constructed using the new\n  optional use_errno parameter set to True: CFUNCTYPE(..., use_errno=TRUE) or\n  WINFUNCTYPE(..., use_errno=True).\n\n  New ctypes functions are provided to access the ctypes private copies from\n  Python:\n\n  - ctypes.set_errno(value) and ctypes.set_last_error(value) store 'value' in\n    the private copy and returns the previous value.\n\n  - ctypes.get_errno() and ctypes.get_last_error() returns the current ctypes\n    private copies value.\n*/\n\n/*\n  This function creates and returns a thread-local Python object that has\n  space to store two integer error numbers; once created the Python object is\n  kept alive in the thread state dictionary as long as the thread itself.\n*/\nPyObject *\n_ctypes_get_errobj(int **pspace)\n{\n    PyObject *dict = PyThreadState_GetDict();\n    PyObject *errobj;\n    static PyObject *error_object_name;\n    if (dict == 0) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"cannot get thread state\");\n        return NULL;\n    }\n    if (error_object_name == NULL) {\n        error_object_name = PyUnicode_InternFromString(\"ctypes.error_object\");\n        if (error_object_name == NULL)\n            return NULL;\n    }\n    errobj = PyDict_GetItem(dict, error_object_name);\n    if (errobj) {\n        if (!PyCapsule_IsValid(errobj, CTYPES_CAPSULE_NAME_PYMEM)) {\n            PyErr_SetString(PyExc_RuntimeError,\n                \"ctypes.error_object is an invalid capsule\");\n            return NULL;\n        }\n        Py_INCREF(errobj);\n    }\n    else {\n        void *space = PyMem_Malloc(sizeof(int) * 2);\n        if (space == NULL)\n            return NULL;\n        memset(space, 0, sizeof(int) * 2);\n        errobj = PyCapsule_New(space, CTYPES_CAPSULE_NAME_PYMEM, pymem_destructor);\n        if (errobj == NULL) {\n            PyMem_Free(space);\n            return NULL;\n        }\n        if (-1 == PyDict_SetItem(dict, error_object_name,\n                                 errobj)) {\n            Py_DECREF(errobj);\n            return NULL;\n        }\n    }\n    *pspace = (int *)PyCapsule_GetPointer(errobj, CTYPES_CAPSULE_NAME_PYMEM);\n    return errobj;\n}\n\nstatic PyObject *\nget_error_internal(PyObject *self, PyObject *args, int index)\n{\n    int *space;\n    PyObject *errobj = _ctypes_get_errobj(&space);\n    PyObject *result;\n\n    if (errobj == NULL)\n        return NULL;\n    result = PyLong_FromLong(space[index]);\n    Py_DECREF(errobj);\n    return result;\n}\n\nstatic PyObject *\nset_error_internal(PyObject *self, PyObject *args, int index)\n{\n    int new_errno, old_errno;\n    PyObject *errobj;\n    int *space;\n\n    if (!PyArg_ParseTuple(args, \"i\", &new_errno))\n        return NULL;\n    errobj = _ctypes_get_errobj(&space);\n    if (errobj == NULL)\n        return NULL;\n    old_errno = space[index];\n    space[index] = new_errno;\n    Py_DECREF(errobj);\n    return PyLong_FromLong(old_errno);\n}\n\nstatic PyObject *\nget_errno(PyObject *self, PyObject *args)\n{\n    return get_error_internal(self, args, 0);\n}\n\nstatic PyObject *\nset_errno(PyObject *self, PyObject *args)\n{\n    return set_error_internal(self, args, 0);\n}\n\n#ifdef MS_WIN32\n\nstatic PyObject *\nget_last_error(PyObject *self, PyObject *args)\n{\n    return get_error_internal(self, args, 1);\n}\n\nstatic PyObject *\nset_last_error(PyObject *self, PyObject *args)\n{\n    return set_error_internal(self, args, 1);\n}\n\nPyObject *ComError;\n\nstatic WCHAR *FormatError(DWORD code)\n{\n    WCHAR *lpMsgBuf;\n    DWORD n;\n    n = FormatMessageW(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,\n                       NULL,\n                       code,\n                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), /* Default language */\n               (LPWSTR) &lpMsgBuf,\n               0,\n               NULL);\n    if (n) {\n        while (iswspace(lpMsgBuf[n-1]))\n            --n;\n        lpMsgBuf[n] = L'\\0'; /* rstrip() */\n    }\n    return lpMsgBuf;\n}\n\n#ifndef DONT_USE_SEH\nstatic void SetException(DWORD code, EXCEPTION_RECORD *pr)\n{\n    /* The 'code' is a normal win32 error code so it could be handled by\n    PyErr_SetFromWindowsErr(). However, for some errors, we have additional\n    information not included in the error code. We handle those here and\n    delegate all others to the generic function. */\n    switch (code) {\n    case EXCEPTION_ACCESS_VIOLATION:\n        /* The thread attempted to read from or write\n           to a virtual address for which it does not\n           have the appropriate access. */\n        if (pr->ExceptionInformation[0] == 0)\n            PyErr_Format(PyExc_OSError,\n                         \"exception: access violation reading %p\",\n                         pr->ExceptionInformation[1]);\n        else\n            PyErr_Format(PyExc_OSError,\n                         \"exception: access violation writing %p\",\n                         pr->ExceptionInformation[1]);\n        break;\n\n    case EXCEPTION_BREAKPOINT:\n        /* A breakpoint was encountered. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: breakpoint encountered\");\n        break;\n\n    case EXCEPTION_DATATYPE_MISALIGNMENT:\n        /* The thread attempted to read or write data that is\n           misaligned on hardware that does not provide\n           alignment. For example, 16-bit values must be\n           aligned on 2-byte boundaries, 32-bit values on\n           4-byte boundaries, and so on. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: datatype misalignment\");\n        break;\n\n    case EXCEPTION_SINGLE_STEP:\n        /* A trace trap or other single-instruction mechanism\n           signaled that one instruction has been executed. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: single step\");\n        break;\n\n    case EXCEPTION_ARRAY_BOUNDS_EXCEEDED:\n        /* The thread attempted to access an array element\n           that is out of bounds, and the underlying hardware\n           supports bounds checking. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: array bounds exceeded\");\n        break;\n\n    case EXCEPTION_FLT_DENORMAL_OPERAND:\n        /* One of the operands in a floating-point operation\n           is denormal. A denormal value is one that is too\n           small to represent as a standard floating-point\n           value. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: floating-point operand denormal\");\n        break;\n\n    case EXCEPTION_FLT_DIVIDE_BY_ZERO:\n        /* The thread attempted to divide a floating-point\n           value by a floating-point divisor of zero. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: float divide by zero\");\n        break;\n\n    case EXCEPTION_FLT_INEXACT_RESULT:\n        /* The result of a floating-point operation cannot be\n           represented exactly as a decimal fraction. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: float inexact\");\n        break;\n\n    case EXCEPTION_FLT_INVALID_OPERATION:\n        /* This exception represents any floating-point\n           exception not included in this list. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: float invalid operation\");\n        break;\n\n    case EXCEPTION_FLT_OVERFLOW:\n        /* The exponent of a floating-point operation is\n           greater than the magnitude allowed by the\n           corresponding type. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: float overflow\");\n        break;\n\n    case EXCEPTION_FLT_STACK_CHECK:\n        /* The stack overflowed or underflowed as the result\n           of a floating-point operation. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: stack over/underflow\");\n        break;\n\n    case EXCEPTION_STACK_OVERFLOW:\n        /* The stack overflowed or underflowed as the result\n           of a floating-point operation. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: stack overflow\");\n        break;\n\n    case EXCEPTION_FLT_UNDERFLOW:\n        /* The exponent of a floating-point operation is less\n           than the magnitude allowed by the corresponding\n           type. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: float underflow\");\n        break;\n\n    case EXCEPTION_INT_DIVIDE_BY_ZERO:\n        /* The thread attempted to divide an integer value by\n           an integer divisor of zero. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: integer divide by zero\");\n        break;\n\n    case EXCEPTION_INT_OVERFLOW:\n        /* The result of an integer operation caused a carry\n           out of the most significant bit of the result. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: integer overflow\");\n        break;\n\n    case EXCEPTION_PRIV_INSTRUCTION:\n        /* The thread attempted to execute an instruction\n           whose operation is not allowed in the current\n           machine mode. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: priviledged instruction\");\n        break;\n\n    case EXCEPTION_NONCONTINUABLE_EXCEPTION:\n        /* The thread attempted to continue execution after a\n           noncontinuable exception occurred. */\n        PyErr_SetString(PyExc_OSError,\n                        \"exception: nocontinuable\");\n        break;\n\n    default:\n        PyErr_SetFromWindowsErr(code);\n        break;\n    }\n}\n\nstatic DWORD HandleException(EXCEPTION_POINTERS *ptrs,\n                             DWORD *pdw, EXCEPTION_RECORD *record)\n{\n    *pdw = ptrs->ExceptionRecord->ExceptionCode;\n    *record = *ptrs->ExceptionRecord;\n    /* We don't want to catch breakpoint exceptions, they are used to attach\n     * a debugger to the process.\n     */\n    if (*pdw == EXCEPTION_BREAKPOINT)\n        return EXCEPTION_CONTINUE_SEARCH;\n    return EXCEPTION_EXECUTE_HANDLER;\n}\n#endif\n\nstatic PyObject *\ncheck_hresult(PyObject *self, PyObject *args)\n{\n    HRESULT hr;\n    if (!PyArg_ParseTuple(args, \"i\", &hr))\n        return NULL;\n    if (FAILED(hr))\n        return PyErr_SetFromWindowsErr(hr);\n    return PyLong_FromLong(hr);\n}\n\n#endif\n\n/**************************************************************/\n\nPyCArgObject *\nPyCArgObject_new(void)\n{\n    PyCArgObject *p;\n    p = PyObject_New(PyCArgObject, &PyCArg_Type);\n    if (p == NULL)\n        return NULL;\n    p->pffi_type = NULL;\n    p->tag = '\\0';\n    p->obj = NULL;\n    memset(&p->value, 0, sizeof(p->value));\n    return p;\n}\n\nstatic void\nPyCArg_dealloc(PyCArgObject *self)\n{\n    Py_XDECREF(self->obj);\n    PyObject_Del(self);\n}\n\nstatic PyObject *\nPyCArg_repr(PyCArgObject *self)\n{\n    char buffer[256];\n    switch(self->tag) {\n    case 'b':\n    case 'B':\n        sprintf(buffer, \"<cparam '%c' (%d)>\",\n            self->tag, self->value.b);\n        break;\n    case 'h':\n    case 'H':\n        sprintf(buffer, \"<cparam '%c' (%d)>\",\n            self->tag, self->value.h);\n        break;\n    case 'i':\n    case 'I':\n        sprintf(buffer, \"<cparam '%c' (%d)>\",\n            self->tag, self->value.i);\n        break;\n    case 'l':\n    case 'L':\n        sprintf(buffer, \"<cparam '%c' (%ld)>\",\n            self->tag, self->value.l);\n        break;\n\n#ifdef HAVE_LONG_LONG\n    case 'q':\n    case 'Q':\n        sprintf(buffer,\n#ifdef MS_WIN32\n            \"<cparam '%c' (%I64d)>\",\n#else\n            \"<cparam '%c' (%qd)>\",\n#endif\n            self->tag, self->value.q);\n        break;\n#endif\n    case 'd':\n        sprintf(buffer, \"<cparam '%c' (%f)>\",\n            self->tag, self->value.d);\n        break;\n    case 'f':\n        sprintf(buffer, \"<cparam '%c' (%f)>\",\n            self->tag, self->value.f);\n        break;\n\n    case 'c':\n        sprintf(buffer, \"<cparam '%c' (%c)>\",\n            self->tag, self->value.c);\n        break;\n\n/* Hm, are these 'z' and 'Z' codes useful at all?\n   Shouldn't they be replaced by the functionality of c_string\n   and c_wstring ?\n*/\n    case 'z':\n    case 'Z':\n    case 'P':\n        sprintf(buffer, \"<cparam '%c' (%p)>\",\n            self->tag, self->value.p);\n        break;\n\n    default:\n        sprintf(buffer, \"<cparam '%c' at %p>\",\n            self->tag, self);\n        break;\n    }\n    return PyUnicode_FromString(buffer);\n}\n\nstatic PyMemberDef PyCArgType_members[] = {\n    { \"_obj\", T_OBJECT,\n      offsetof(PyCArgObject, obj), READONLY,\n      \"the wrapped object\" },\n    { NULL },\n};\n\nPyTypeObject PyCArg_Type = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"CArgObject\",\n    sizeof(PyCArgObject),\n    0,\n    (destructor)PyCArg_dealloc,                 /* tp_dealloc */\n    0,                                          /* tp_print */\n    0,                                          /* tp_getattr */\n    0,                                          /* tp_setattr */\n    0,                                          /* tp_reserved */\n    (reprfunc)PyCArg_repr,                      /* tp_repr */\n    0,                                          /* tp_as_number */\n    0,                                          /* tp_as_sequence */\n    0,                                          /* tp_as_mapping */\n    0,                                          /* tp_hash */\n    0,                                          /* tp_call */\n    0,                                          /* tp_str */\n    0,                                          /* tp_getattro */\n    0,                                          /* tp_setattro */\n    0,                                          /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT,                         /* tp_flags */\n    0,                                          /* tp_doc */\n    0,                                          /* tp_traverse */\n    0,                                          /* tp_clear */\n    0,                                          /* tp_richcompare */\n    0,                                          /* tp_weaklistoffset */\n    0,                                          /* tp_iter */\n    0,                                          /* tp_iternext */\n    0,                                          /* tp_methods */\n    PyCArgType_members,                         /* tp_members */\n};\n\n/****************************************************************/\n/*\n * Convert a PyObject * into a parameter suitable to pass to an\n * C function call.\n *\n * 1. Python integers are converted to C int and passed by value.\n *    Py_None is converted to a C NULL pointer.\n *\n * 2. 3-tuples are expected to have a format character in the first\n *    item, which must be 'i', 'f', 'd', 'q', or 'P'.\n *    The second item will have to be an integer, float, double, long long\n *    or integer (denoting an address void *), will be converted to the\n *    corresponding C data type and passed by value.\n *\n * 3. Other Python objects are tested for an '_as_parameter_' attribute.\n *    The value of this attribute must be an integer which will be passed\n *    by value, or a 2-tuple or 3-tuple which will be used according\n *    to point 2 above. The third item (if any), is ignored. It is normally\n *    used to keep the object alive where this parameter refers to.\n *    XXX This convention is dangerous - you can construct arbitrary tuples\n *    in Python and pass them. Would it be safer to use a custom container\n *    datatype instead of a tuple?\n *\n * 4. Other Python objects cannot be passed as parameters - an exception is raised.\n *\n * 5. ConvParam will store the converted result in a struct containing format\n *    and value.\n */\n\nunion result {\n    char c;\n    char b;\n    short h;\n    int i;\n    long l;\n#ifdef HAVE_LONG_LONG\n    PY_LONG_LONG q;\n#endif\n    long double D;\n    double d;\n    float f;\n    void *p;\n};\n\nstruct argument {\n    ffi_type *ffi_type;\n    PyObject *keep;\n    union result value;\n};\n\n/*\n * Convert a single Python object into a PyCArgObject and return it.\n */\nstatic int ConvParam(PyObject *obj, Py_ssize_t index, struct argument *pa)\n{\n    StgDictObject *dict;\n    pa->keep = NULL; /* so we cannot forget it later */\n\n    dict = PyObject_stgdict(obj);\n    if (dict) {\n        PyCArgObject *carg;\n        assert(dict->paramfunc);\n        /* If it has an stgdict, it is a CDataObject */\n        carg = dict->paramfunc((CDataObject *)obj);\n        if (carg == NULL)\n            return -1;\n        pa->ffi_type = carg->pffi_type;\n        memcpy(&pa->value, &carg->value, sizeof(pa->value));\n        pa->keep = (PyObject *)carg;\n        return 0;\n    }\n\n    if (PyCArg_CheckExact(obj)) {\n        PyCArgObject *carg = (PyCArgObject *)obj;\n        pa->ffi_type = carg->pffi_type;\n        Py_INCREF(obj);\n        pa->keep = obj;\n        memcpy(&pa->value, &carg->value, sizeof(pa->value));\n        return 0;\n    }\n\n    /* check for None, integer, string or unicode and use directly if successful */\n    if (obj == Py_None) {\n        pa->ffi_type = &ffi_type_pointer;\n        pa->value.p = NULL;\n        return 0;\n    }\n\n    if (PyLong_Check(obj)) {\n        pa->ffi_type = &ffi_type_sint;\n        pa->value.i = (long)PyLong_AsUnsignedLong(obj);\n        if (pa->value.i == -1 && PyErr_Occurred()) {\n            PyErr_Clear();\n            pa->value.i = PyLong_AsLong(obj);\n            if (pa->value.i == -1 && PyErr_Occurred()) {\n                PyErr_SetString(PyExc_OverflowError,\n                                \"int too long to convert\");\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    if (PyBytes_Check(obj)) {\n        pa->ffi_type = &ffi_type_pointer;\n        pa->value.p = PyBytes_AsString(obj);\n        Py_INCREF(obj);\n        pa->keep = obj;\n        return 0;\n    }\n\n#ifdef CTYPES_UNICODE\n    if (PyUnicode_Check(obj)) {\n        pa->ffi_type = &ffi_type_pointer;\n        pa->value.p = _PyUnicode_AsWideCharString(obj);\n        if (pa->value.p == NULL)\n            return -1;\n        pa->keep = PyCapsule_New(pa->value.p, CTYPES_CAPSULE_NAME_PYMEM, pymem_destructor);\n        if (!pa->keep) {\n            PyMem_Free(pa->value.p);\n            return -1;\n        }\n        return 0;\n    }\n#endif\n\n    {\n        PyObject *arg;\n        arg = PyObject_GetAttrString(obj, \"_as_parameter_\");\n        /* Which types should we exactly allow here?\n           integers are required for using Python classes\n           as parameters (they have to expose the '_as_parameter_'\n           attribute)\n        */\n        if (arg) {\n            int result;\n            result = ConvParam(arg, index, pa);\n            Py_DECREF(arg);\n            return result;\n        }\n        PyErr_Format(PyExc_TypeError,\n                     \"Don't know how to convert parameter %d\",\n                     Py_SAFE_DOWNCAST(index, Py_ssize_t, int));\n        return -1;\n    }\n}\n\n\nffi_type *_ctypes_get_ffi_type(PyObject *obj)\n{\n    StgDictObject *dict;\n    if (obj == NULL)\n        return &ffi_type_sint;\n    dict = PyType_stgdict(obj);\n    if (dict == NULL)\n        return &ffi_type_sint;\n#if defined(MS_WIN32) && !defined(_WIN32_WCE)\n    /* This little trick works correctly with MSVC.\n       It returns small structures in registers\n    */\n    if (dict->ffi_type_pointer.type == FFI_TYPE_STRUCT) {\n        if (dict->ffi_type_pointer.size <= 4)\n            return &ffi_type_sint32;\n        else if (dict->ffi_type_pointer.size <= 8)\n            return &ffi_type_sint64;\n    }\n#endif\n    return &dict->ffi_type_pointer;\n}\n\n\n/*\n * libffi uses:\n *\n * ffi_status ffi_prep_cif(ffi_cif *cif, ffi_abi abi,\n *                         unsigned int nargs,\n *                         ffi_type *rtype,\n *                         ffi_type **atypes);\n *\n * and then\n *\n * void ffi_call(ffi_cif *cif, void *fn, void *rvalue, void **avalues);\n */\nstatic int _call_function_pointer(int flags,\n                                  PPROC pProc,\n                                  void **avalues,\n                                  ffi_type **atypes,\n                                  ffi_type *restype,\n                                  void *resmem,\n                                  int argcount)\n{\n#ifdef WITH_THREAD\n    PyThreadState *_save = NULL; /* For Py_BLOCK_THREADS and Py_UNBLOCK_THREADS */\n#endif\n    PyObject *error_object = NULL;\n    int *space;\n    ffi_cif cif;\n    int cc;\n#ifdef MS_WIN32\n    int delta;\n#ifndef DONT_USE_SEH\n    DWORD dwExceptionCode = 0;\n    EXCEPTION_RECORD record;\n#endif\n#endif\n    /* XXX check before here */\n    if (restype == NULL) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"No ffi_type for result\");\n        return -1;\n    }\n\n    cc = FFI_DEFAULT_ABI;\n#if defined(MS_WIN32) && !defined(MS_WIN64) && !defined(_WIN32_WCE)\n    if ((flags & FUNCFLAG_CDECL) == 0)\n        cc = FFI_STDCALL;\n#endif\n    if (FFI_OK != ffi_prep_cif(&cif,\n                               cc,\n                               argcount,\n                               restype,\n                               atypes)) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"ffi_prep_cif failed\");\n        return -1;\n    }\n\n    if (flags & (FUNCFLAG_USE_ERRNO | FUNCFLAG_USE_LASTERROR)) {\n        error_object = _ctypes_get_errobj(&space);\n        if (error_object == NULL)\n            return -1;\n    }\n#ifdef WITH_THREAD\n    if ((flags & FUNCFLAG_PYTHONAPI) == 0)\n        Py_UNBLOCK_THREADS\n#endif\n    if (flags & FUNCFLAG_USE_ERRNO) {\n        int temp = space[0];\n        space[0] = errno;\n        errno = temp;\n    }\n#ifdef MS_WIN32\n    if (flags & FUNCFLAG_USE_LASTERROR) {\n        int temp = space[1];\n        space[1] = GetLastError();\n        SetLastError(temp);\n    }\n#ifndef DONT_USE_SEH\n    __try {\n#endif\n        delta =\n#endif\n                ffi_call(&cif, (void *)pProc, resmem, avalues);\n#ifdef MS_WIN32\n#ifndef DONT_USE_SEH\n    }\n    __except (HandleException(GetExceptionInformation(),\n                              &dwExceptionCode, &record)) {\n        ;\n    }\n#endif\n    if (flags & FUNCFLAG_USE_LASTERROR) {\n        int temp = space[1];\n        space[1] = GetLastError();\n        SetLastError(temp);\n    }\n#endif\n    if (flags & FUNCFLAG_USE_ERRNO) {\n        int temp = space[0];\n        space[0] = errno;\n        errno = temp;\n    }\n#ifdef WITH_THREAD\n    if ((flags & FUNCFLAG_PYTHONAPI) == 0)\n        Py_BLOCK_THREADS\n#endif\n    Py_XDECREF(error_object);\n#ifdef MS_WIN32\n#ifndef DONT_USE_SEH\n    if (dwExceptionCode) {\n        SetException(dwExceptionCode, &record);\n        return -1;\n    }\n#endif\n#ifdef MS_WIN64\n    if (delta != 0) {\n        PyErr_Format(PyExc_RuntimeError,\n                 \"ffi_call failed with code %d\",\n                 delta);\n        return -1;\n    }\n#else\n    if (delta < 0) {\n        if (flags & FUNCFLAG_CDECL)\n            PyErr_Format(PyExc_ValueError,\n                     \"Procedure called with not enough \"\n                     \"arguments (%d bytes missing) \"\n                     \"or wrong calling convention\",\n                     -delta);\n        else\n            PyErr_Format(PyExc_ValueError,\n                     \"Procedure probably called with not enough \"\n                     \"arguments (%d bytes missing)\",\n                     -delta);\n        return -1;\n    } else if (delta > 0) {\n        PyErr_Format(PyExc_ValueError,\n                 \"Procedure probably called with too many \"\n                 \"arguments (%d bytes in excess)\",\n                 delta);\n        return -1;\n    }\n#endif\n#endif\n    if ((flags & FUNCFLAG_PYTHONAPI) && PyErr_Occurred())\n        return -1;\n    return 0;\n}\n\n/*\n * Convert the C value in result into a Python object, depending on restype.\n *\n * - If restype is NULL, return a Python integer.\n * - If restype is None, return None.\n * - If restype is a simple ctypes type (c_int, c_void_p), call the type's getfunc,\n *   pass the result to checker and return the result.\n * - If restype is another ctypes type, return an instance of that.\n * - Otherwise, call restype and return the result.\n */\nstatic PyObject *GetResult(PyObject *restype, void *result, PyObject *checker)\n{\n    StgDictObject *dict;\n    PyObject *retval, *v;\n\n    if (restype == NULL)\n        return PyLong_FromLong(*(int *)result);\n\n    if (restype == Py_None) {\n        Py_INCREF(Py_None);\n        return Py_None;\n    }\n\n    dict = PyType_stgdict(restype);\n    if (dict == NULL)\n        return PyObject_CallFunction(restype, \"i\", *(int *)result);\n\n    if (dict->getfunc && !_ctypes_simple_instance(restype)) {\n        retval = dict->getfunc(result, dict->size);\n        /* If restype is py_object (detected by comparing getfunc with\n           O_get), we have to call Py_DECREF because O_get has already\n           called Py_INCREF.\n        */\n        if (dict->getfunc == _ctypes_get_fielddesc(\"O\")->getfunc) {\n            Py_DECREF(retval);\n        }\n    } else\n        retval = PyCData_FromBaseObj(restype, NULL, 0, result);\n\n    if (!checker || !retval)\n        return retval;\n\n    v = PyObject_CallFunctionObjArgs(checker, retval, NULL);\n    if (v == NULL)\n        _PyTraceback_Add(\"GetResult\", \"_ctypes/callproc.c\", __LINE__-2);\n    Py_DECREF(retval);\n    return v;\n}\n\n/*\n * Raise a new exception 'exc_class', adding additional text to the original\n * exception string.\n */\nvoid _ctypes_extend_error(PyObject *exc_class, char *fmt, ...)\n{\n    va_list vargs;\n    PyObject *tp, *v, *tb, *s, *cls_str, *msg_str;\n\n    va_start(vargs, fmt);\n    s = PyUnicode_FromFormatV(fmt, vargs);\n    va_end(vargs);\n    if (!s)\n        return;\n\n    PyErr_Fetch(&tp, &v, &tb);\n    PyErr_NormalizeException(&tp, &v, &tb);\n    cls_str = PyObject_Str(tp);\n    if (cls_str) {\n        PyUnicode_AppendAndDel(&s, cls_str);\n        PyUnicode_AppendAndDel(&s, PyUnicode_FromString(\": \"));\n        if (s == NULL)\n            goto error;\n    } else\n        PyErr_Clear();\n    msg_str = PyObject_Str(v);\n    if (msg_str)\n        PyUnicode_AppendAndDel(&s, msg_str);\n    else {\n        PyErr_Clear();\n        PyUnicode_AppendAndDel(&s, PyUnicode_FromString(\"???\"));\n    }\n    if (s == NULL)\n        goto error;\n    PyErr_SetObject(exc_class, s);\nerror:\n    Py_XDECREF(tp);\n    Py_XDECREF(v);\n    Py_XDECREF(tb);\n    Py_XDECREF(s);\n}\n\n\n#ifdef MS_WIN32\n\nstatic PyObject *\nGetComError(HRESULT errcode, GUID *riid, IUnknown *pIunk)\n{\n    HRESULT hr;\n    ISupportErrorInfo *psei = NULL;\n    IErrorInfo *pei = NULL;\n    BSTR descr=NULL, helpfile=NULL, source=NULL;\n    GUID guid;\n    DWORD helpcontext=0;\n    LPOLESTR progid;\n    PyObject *obj;\n    LPOLESTR text;\n\n    /* We absolutely have to release the GIL during COM method calls,\n       otherwise we may get a deadlock!\n    */\n#ifdef WITH_THREAD\n    Py_BEGIN_ALLOW_THREADS\n#endif\n\n    hr = pIunk->lpVtbl->QueryInterface(pIunk, &IID_ISupportErrorInfo, (void **)&psei);\n    if (FAILED(hr))\n        goto failed;\n\n    hr = psei->lpVtbl->InterfaceSupportsErrorInfo(psei, riid);\n    psei->lpVtbl->Release(psei);\n    if (FAILED(hr))\n        goto failed;\n\n    hr = GetErrorInfo(0, &pei);\n    if (hr != S_OK)\n        goto failed;\n\n    pei->lpVtbl->GetDescription(pei, &descr);\n    pei->lpVtbl->GetGUID(pei, &guid);\n    pei->lpVtbl->GetHelpContext(pei, &helpcontext);\n    pei->lpVtbl->GetHelpFile(pei, &helpfile);\n    pei->lpVtbl->GetSource(pei, &source);\n\n    pei->lpVtbl->Release(pei);\n\n  failed:\n#ifdef WITH_THREAD\n    Py_END_ALLOW_THREADS\n#endif\n\n    progid = NULL;\n    ProgIDFromCLSID(&guid, &progid);\n\n    text = FormatError(errcode);\n    obj = Py_BuildValue(\n        \"iu(uuuiu)\",\n        errcode,\n        text,\n        descr, source, helpfile, helpcontext,\n        progid);\n    if (obj) {\n        PyErr_SetObject(ComError, obj);\n        Py_DECREF(obj);\n    }\n    LocalFree(text);\n\n    if (descr)\n        SysFreeString(descr);\n    if (helpfile)\n        SysFreeString(helpfile);\n    if (source)\n        SysFreeString(source);\n\n    return NULL;\n}\n#endif\n\n/*\n * Requirements, must be ensured by the caller:\n * - argtuple is tuple of arguments\n * - argtypes is either NULL, or a tuple of the same size as argtuple\n *\n * - XXX various requirements for restype, not yet collected\n */\nPyObject *_ctypes_callproc(PPROC pProc,\n                    PyObject *argtuple,\n#ifdef MS_WIN32\n                    IUnknown *pIunk,\n                    GUID *iid,\n#endif\n                    int flags,\n                    PyObject *argtypes, /* misleading name: This is a tuple of\n                                           methods, not types: the .from_param\n                                           class methods of the types */\n            PyObject *restype,\n            PyObject *checker)\n{\n    Py_ssize_t i, n, argcount, argtype_count;\n    void *resbuf;\n    struct argument *args, *pa;\n    ffi_type **atypes;\n    ffi_type *rtype;\n    void **avalues;\n    PyObject *retval = NULL;\n\n    n = argcount = PyTuple_GET_SIZE(argtuple);\n#ifdef MS_WIN32\n    /* an optional COM object this pointer */\n    if (pIunk)\n        ++argcount;\n#endif\n\n    args = (struct argument *)alloca(sizeof(struct argument) * argcount);\n    if (!args) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    memset(args, 0, sizeof(struct argument) * argcount);\n    argtype_count = argtypes ? PyTuple_GET_SIZE(argtypes) : 0;\n#ifdef MS_WIN32\n    if (pIunk) {\n        args[0].ffi_type = &ffi_type_pointer;\n        args[0].value.p = pIunk;\n        pa = &args[1];\n    } else\n#endif\n        pa = &args[0];\n\n    /* Convert the arguments */\n    for (i = 0; i < n; ++i, ++pa) {\n        PyObject *converter;\n        PyObject *arg;\n        int err;\n\n        arg = PyTuple_GET_ITEM(argtuple, i);            /* borrowed ref */\n        /* For cdecl functions, we allow more actual arguments\n           than the length of the argtypes tuple.\n           This is checked in _ctypes::PyCFuncPtr_Call\n        */\n        if (argtypes && argtype_count > i) {\n            PyObject *v;\n            converter = PyTuple_GET_ITEM(argtypes, i);\n            v = PyObject_CallFunctionObjArgs(converter, arg, NULL);\n            if (v == NULL) {\n                _ctypes_extend_error(PyExc_ArgError, \"argument %d: \", i+1);\n                goto cleanup;\n            }\n\n            err = ConvParam(v, i+1, pa);\n            Py_DECREF(v);\n            if (-1 == err) {\n                _ctypes_extend_error(PyExc_ArgError, \"argument %d: \", i+1);\n                goto cleanup;\n            }\n        } else {\n            err = ConvParam(arg, i+1, pa);\n            if (-1 == err) {\n                _ctypes_extend_error(PyExc_ArgError, \"argument %d: \", i+1);\n                goto cleanup; /* leaking ? */\n            }\n        }\n    }\n\n    rtype = _ctypes_get_ffi_type(restype);\n    resbuf = alloca(max(rtype->size, sizeof(ffi_arg)));\n\n    avalues = (void **)alloca(sizeof(void *) * argcount);\n    atypes = (ffi_type **)alloca(sizeof(ffi_type *) * argcount);\n    if (!resbuf || !avalues || !atypes) {\n        PyErr_NoMemory();\n        goto cleanup;\n    }\n    for (i = 0; i < argcount; ++i) {\n        atypes[i] = args[i].ffi_type;\n        if (atypes[i]->type == FFI_TYPE_STRUCT\n            )\n            avalues[i] = (void *)args[i].value.p;\n        else\n            avalues[i] = (void *)&args[i].value;\n    }\n\n    if (-1 == _call_function_pointer(flags, pProc, avalues, atypes,\n                                     rtype, resbuf,\n                                     Py_SAFE_DOWNCAST(argcount,\n                                                      Py_ssize_t,\n                                                      int)))\n        goto cleanup;\n\n#ifdef WORDS_BIGENDIAN\n    /* libffi returns the result in a buffer with sizeof(ffi_arg). This\n       causes problems on big endian machines, since the result buffer\n       address cannot simply be used as result pointer, instead we must\n       adjust the pointer value:\n     */\n    /*\n      XXX I should find out and clarify why this is needed at all,\n      especially why adjusting for ffi_type_float must be avoided on\n      64-bit platforms.\n     */\n    if (rtype->type != FFI_TYPE_FLOAT\n        && rtype->type != FFI_TYPE_STRUCT\n        && rtype->size < sizeof(ffi_arg))\n        resbuf = (char *)resbuf + sizeof(ffi_arg) - rtype->size;\n#endif\n\n#ifdef MS_WIN32\n    if (iid && pIunk) {\n        if (*(int *)resbuf & 0x80000000)\n            retval = GetComError(*(HRESULT *)resbuf, iid, pIunk);\n        else\n            retval = PyLong_FromLong(*(int *)resbuf);\n    } else if (flags & FUNCFLAG_HRESULT) {\n        if (*(int *)resbuf & 0x80000000)\n            retval = PyErr_SetFromWindowsErr(*(int *)resbuf);\n        else\n            retval = PyLong_FromLong(*(int *)resbuf);\n    } else\n#endif\n        retval = GetResult(restype, resbuf, checker);\n  cleanup:\n    for (i = 0; i < argcount; ++i)\n        Py_XDECREF(args[i].keep);\n    return retval;\n}\n\nstatic int\n_parse_voidp(PyObject *obj, void **address)\n{\n    *address = PyLong_AsVoidPtr(obj);\n    if (*address == NULL)\n        return 0;\n    return 1;\n}\n\n#ifdef MS_WIN32\n\nstatic char format_error_doc[] =\n\"FormatError([integer]) -> string\\n\\\n\\n\\\nConvert a win32 error code into a string. If the error code is not\\n\\\ngiven, the return value of a call to GetLastError() is used.\\n\";\nstatic PyObject *format_error(PyObject *self, PyObject *args)\n{\n    PyObject *result;\n    wchar_t *lpMsgBuf;\n    DWORD code = 0;\n    if (!PyArg_ParseTuple(args, \"|i:FormatError\", &code))\n        return NULL;\n    if (code == 0)\n        code = GetLastError();\n    lpMsgBuf = FormatError(code);\n    if (lpMsgBuf) {\n        result = PyUnicode_FromWideChar(lpMsgBuf, wcslen(lpMsgBuf));\n        LocalFree(lpMsgBuf);\n    } else {\n        result = PyUnicode_FromString(\"<no description>\");\n    }\n    return result;\n}\n\nstatic char load_library_doc[] =\n\"LoadLibrary(name) -> handle\\n\\\n\\n\\\nLoad an executable (usually a DLL), and return a handle to it.\\n\\\nThe handle may be used to locate exported functions in this\\n\\\nmodule.\\n\";\nstatic PyObject *load_library(PyObject *self, PyObject *args)\n{\n    const WCHAR *name;\n    PyObject *nameobj;\n    PyObject *ignored;\n    HMODULE hMod;\n\n    if (!PyArg_ParseTuple(args, \"U|O:LoadLibrary\", &nameobj, &ignored))\n        return NULL;\n\n    name = _PyUnicode_AsUnicode(nameobj);\n    if (!name)\n        return NULL;\n\n    hMod = LoadLibraryW(name);\n    if (!hMod)\n        return PyErr_SetFromWindowsErr(GetLastError());\n#ifdef _WIN64\n    return PyLong_FromVoidPtr(hMod);\n#else\n    return Py_BuildValue(\"i\", hMod);\n#endif\n}\n\nstatic char free_library_doc[] =\n\"FreeLibrary(handle) -> void\\n\\\n\\n\\\nFree the handle of an executable previously loaded by LoadLibrary.\\n\";\nstatic PyObject *free_library(PyObject *self, PyObject *args)\n{\n    void *hMod;\n    if (!PyArg_ParseTuple(args, \"O&:FreeLibrary\", &_parse_voidp, &hMod))\n        return NULL;\n    if (!FreeLibrary((HMODULE)hMod))\n        return PyErr_SetFromWindowsErr(GetLastError());\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nstatic char copy_com_pointer_doc[] =\n\"CopyComPointer(src, dst) -> HRESULT value\\n\";\n\nstatic PyObject *\ncopy_com_pointer(PyObject *self, PyObject *args)\n{\n    PyObject *p1, *p2, *r = NULL;\n    struct argument a, b;\n    IUnknown *src, **pdst;\n    if (!PyArg_ParseTuple(args, \"OO:CopyComPointer\", &p1, &p2))\n        return NULL;\n    a.keep = b.keep = NULL;\n\n    if (-1 == ConvParam(p1, 0, &a) || -1 == ConvParam(p2, 1, &b))\n        goto done;\n    src = (IUnknown *)a.value.p;\n    pdst = (IUnknown **)b.value.p;\n\n    if (pdst == NULL)\n        r = PyLong_FromLong(E_POINTER);\n    else {\n        if (src)\n            src->lpVtbl->AddRef(src);\n        *pdst = src;\n        r = PyLong_FromLong(S_OK);\n    }\n  done:\n    Py_XDECREF(a.keep);\n    Py_XDECREF(b.keep);\n    return r;\n}\n#else\n\nstatic PyObject *py_dl_open(PyObject *self, PyObject *args)\n{\n    PyObject *name, *name2;\n    char *name_str;\n    void * handle;\n#ifdef RTLD_LOCAL\n    int mode = RTLD_NOW | RTLD_LOCAL;\n#else\n    /* cygwin doesn't define RTLD_LOCAL */\n    int mode = RTLD_NOW;\n#endif\n    if (!PyArg_ParseTuple(args, \"O|i:dlopen\", &name, &mode))\n        return NULL;\n    mode |= RTLD_NOW;\n    if (name != Py_None) {\n        if (PyUnicode_FSConverter(name, &name2) == 0)\n            return NULL;\n        if (PyBytes_Check(name2))\n            name_str = PyBytes_AS_STRING(name2);\n        else\n            name_str = PyByteArray_AS_STRING(name2);\n    } else {\n        name_str = NULL;\n        name2 = NULL;\n    }\n    handle = ctypes_dlopen(name_str, mode);\n    Py_XDECREF(name2);\n    if (!handle) {\n        char *errmsg = ctypes_dlerror();\n        if (!errmsg)\n            errmsg = \"dlopen() error\";\n        PyErr_SetString(PyExc_OSError,\n                               errmsg);\n        return NULL;\n    }\n    return PyLong_FromVoidPtr(handle);\n}\n\nstatic PyObject *py_dl_close(PyObject *self, PyObject *args)\n{\n    void *handle;\n\n    if (!PyArg_ParseTuple(args, \"O&:dlclose\", &_parse_voidp, &handle))\n        return NULL;\n    if (dlclose(handle)) {\n        PyErr_SetString(PyExc_OSError,\n                               ctypes_dlerror());\n        return NULL;\n    }\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nstatic PyObject *py_dl_sym(PyObject *self, PyObject *args)\n{\n    char *name;\n    void *handle;\n    void *ptr;\n\n    if (!PyArg_ParseTuple(args, \"O&s:dlsym\",\n                          &_parse_voidp, &handle, &name))\n        return NULL;\n    ptr = ctypes_dlsym((void*)handle, name);\n    if (!ptr) {\n        PyErr_SetString(PyExc_OSError,\n                               ctypes_dlerror());\n        return NULL;\n    }\n    return PyLong_FromVoidPtr(ptr);\n}\n#endif\n\n/*\n * Only for debugging so far: So that we can call CFunction instances\n *\n * XXX Needs to accept more arguments: flags, argtypes, restype\n */\nstatic PyObject *\ncall_function(PyObject *self, PyObject *args)\n{\n    void *func;\n    PyObject *arguments;\n    PyObject *result;\n\n    if (!PyArg_ParseTuple(args,\n                          \"O&O!\",\n                          &_parse_voidp, &func,\n                          &PyTuple_Type, &arguments))\n        return NULL;\n\n    result =  _ctypes_callproc((PPROC)func,\n                        arguments,\n#ifdef MS_WIN32\n                        NULL,\n                        NULL,\n#endif\n                        0, /* flags */\n                NULL, /* self->argtypes */\n                NULL, /* self->restype */\n                NULL); /* checker */\n    return result;\n}\n\n/*\n * Only for debugging so far: So that we can call CFunction instances\n *\n * XXX Needs to accept more arguments: flags, argtypes, restype\n */\nstatic PyObject *\ncall_cdeclfunction(PyObject *self, PyObject *args)\n{\n    void *func;\n    PyObject *arguments;\n    PyObject *result;\n\n    if (!PyArg_ParseTuple(args,\n                          \"O&O!\",\n                          &_parse_voidp, &func,\n                          &PyTuple_Type, &arguments))\n        return NULL;\n\n    result =  _ctypes_callproc((PPROC)func,\n                        arguments,\n#ifdef MS_WIN32\n                        NULL,\n                        NULL,\n#endif\n                        FUNCFLAG_CDECL, /* flags */\n                        NULL, /* self->argtypes */\n                        NULL, /* self->restype */\n                        NULL); /* checker */\n    return result;\n}\n\n/*****************************************************************\n * functions\n */\nstatic char sizeof_doc[] =\n\"sizeof(C type) -> integer\\n\"\n\"sizeof(C instance) -> integer\\n\"\n\"Return the size in bytes of a C instance\";\n\nstatic PyObject *\nsizeof_func(PyObject *self, PyObject *obj)\n{\n    StgDictObject *dict;\n\n    dict = PyType_stgdict(obj);\n    if (dict)\n        return PyLong_FromSsize_t(dict->size);\n\n    if (CDataObject_Check(obj))\n        return PyLong_FromSsize_t(((CDataObject *)obj)->b_size);\n    PyErr_SetString(PyExc_TypeError,\n                    \"this type has no size\");\n    return NULL;\n}\n\nstatic char alignment_doc[] =\n\"alignment(C type) -> integer\\n\"\n\"alignment(C instance) -> integer\\n\"\n\"Return the alignment requirements of a C instance\";\n\nstatic PyObject *\nalign_func(PyObject *self, PyObject *obj)\n{\n    StgDictObject *dict;\n\n    dict = PyType_stgdict(obj);\n    if (dict)\n        return PyLong_FromSsize_t(dict->align);\n\n    dict = PyObject_stgdict(obj);\n    if (dict)\n        return PyLong_FromSsize_t(dict->align);\n\n    PyErr_SetString(PyExc_TypeError,\n                    \"no alignment info\");\n    return NULL;\n}\n\nstatic char byref_doc[] =\n\"byref(C instance[, offset=0]) -> byref-object\\n\"\n\"Return a pointer lookalike to a C instance, only usable\\n\"\n\"as function argument\";\n\n/*\n * We must return something which can be converted to a parameter,\n * but still has a reference to self.\n */\nstatic PyObject *\nbyref(PyObject *self, PyObject *args)\n{\n    PyCArgObject *parg;\n    PyObject *obj;\n    PyObject *pyoffset = NULL;\n    Py_ssize_t offset = 0;\n\n    if (!PyArg_UnpackTuple(args, \"byref\", 1, 2,\n                           &obj, &pyoffset))\n        return NULL;\n    if (pyoffset) {\n        offset = PyNumber_AsSsize_t(pyoffset, NULL);\n        if (offset == -1 && PyErr_Occurred())\n            return NULL;\n    }\n    if (!CDataObject_Check(obj)) {\n        PyErr_Format(PyExc_TypeError,\n                     \"byref() argument must be a ctypes instance, not '%s'\",\n                     Py_TYPE(obj)->tp_name);\n        return NULL;\n    }\n\n    parg = PyCArgObject_new();\n    if (parg == NULL)\n        return NULL;\n\n    parg->tag = 'P';\n    parg->pffi_type = &ffi_type_pointer;\n    Py_INCREF(obj);\n    parg->obj = obj;\n    parg->value.p = (char *)((CDataObject *)obj)->b_ptr + offset;\n    return (PyObject *)parg;\n}\n\nstatic char addressof_doc[] =\n\"addressof(C instance) -> integer\\n\"\n\"Return the address of the C instance internal buffer\";\n\nstatic PyObject *\naddressof(PyObject *self, PyObject *obj)\n{\n    if (CDataObject_Check(obj))\n        return PyLong_FromVoidPtr(((CDataObject *)obj)->b_ptr);\n    PyErr_SetString(PyExc_TypeError,\n                    \"invalid type\");\n    return NULL;\n}\n\nstatic int\nconverter(PyObject *obj, void **address)\n{\n    *address = PyLong_AsVoidPtr(obj);\n    return *address != NULL;\n}\n\nstatic PyObject *\nMy_PyObj_FromPtr(PyObject *self, PyObject *args)\n{\n    PyObject *ob;\n    if (!PyArg_ParseTuple(args, \"O&:PyObj_FromPtr\", converter, &ob))\n        return NULL;\n    Py_INCREF(ob);\n    return ob;\n}\n\nstatic PyObject *\nMy_Py_INCREF(PyObject *self, PyObject *arg)\n{\n    Py_INCREF(arg); /* that's what this function is for */\n    Py_INCREF(arg); /* that for returning it */\n    return arg;\n}\n\nstatic PyObject *\nMy_Py_DECREF(PyObject *self, PyObject *arg)\n{\n    Py_DECREF(arg); /* that's what this function is for */\n    Py_INCREF(arg); /* that's for returning it */\n    return arg;\n}\n\nstatic PyObject *\nresize(PyObject *self, PyObject *args)\n{\n    CDataObject *obj;\n    StgDictObject *dict;\n    Py_ssize_t size;\n\n    if (!PyArg_ParseTuple(args,\n                          \"On:resize\",\n                          &obj, &size))\n        return NULL;\n\n    dict = PyObject_stgdict((PyObject *)obj);\n    if (dict == NULL) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"excepted ctypes instance\");\n        return NULL;\n    }\n    if (size < dict->size) {\n        PyErr_Format(PyExc_ValueError,\n                     \"minimum size is %zd\",\n                     dict->size);\n        return NULL;\n    }\n    if (obj->b_needsfree == 0) {\n        PyErr_Format(PyExc_ValueError,\n                     \"Memory cannot be resized because this object doesn't own it\");\n        return NULL;\n    }\n    if ((size_t)size <= sizeof(obj->b_value)) {\n        /* internal default buffer is large enough */\n        obj->b_size = size;\n        goto done;\n    }\n    if (!_CDataObject_HasExternalBuffer(obj)) {\n        /* We are currently using the objects default buffer, but it\n           isn't large enough any more. */\n        void *ptr = PyMem_Malloc(size);\n        if (ptr == NULL)\n            return PyErr_NoMemory();\n        memset(ptr, 0, size);\n        memmove(ptr, obj->b_ptr, obj->b_size);\n        obj->b_ptr = ptr;\n        obj->b_size = size;\n    } else {\n        void * ptr = PyMem_Realloc(obj->b_ptr, size);\n        if (ptr == NULL)\n            return PyErr_NoMemory();\n        obj->b_ptr = ptr;\n        obj->b_size = size;\n    }\n  done:\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nstatic PyObject *\nunpickle(PyObject *self, PyObject *args)\n{\n    PyObject *typ;\n    PyObject *state;\n    PyObject *result;\n    PyObject *tmp;\n    _Py_IDENTIFIER(__new__);\n    _Py_IDENTIFIER(__setstate__);\n\n    if (!PyArg_ParseTuple(args, \"OO\", &typ, &state))\n        return NULL;\n    result = _PyObject_CallMethodId(typ, &PyId___new__, \"O\", typ);\n    if (result == NULL)\n        return NULL;\n    tmp = _PyObject_CallMethodId(result, &PyId___setstate__, \"O\", state);\n    if (tmp == NULL) {\n        Py_DECREF(result);\n        return NULL;\n    }\n    Py_DECREF(tmp);\n    return result;\n}\n\nstatic PyObject *\nPOINTER(PyObject *self, PyObject *cls)\n{\n    PyObject *result;\n    PyTypeObject *typ;\n    PyObject *key;\n    char *buf;\n\n    result = PyDict_GetItem(_ctypes_ptrtype_cache, cls);\n    if (result) {\n        Py_INCREF(result);\n        return result;\n    }\n    if (PyUnicode_CheckExact(cls)) {\n        const char *name = PyUnicode_AsUTF8(cls);\n        if (name == NULL)\n            return NULL;\n        buf = PyMem_Malloc(strlen(name) + 3 + 1);\n        if (buf == NULL)\n            return PyErr_NoMemory();\n        sprintf(buf, \"LP_%s\", name);\n        result = PyObject_CallFunction((PyObject *)Py_TYPE(&PyCPointer_Type),\n                                       \"s(O){}\",\n                                       buf,\n                                       &PyCPointer_Type);\n        PyMem_Free(buf);\n        if (result == NULL)\n            return result;\n        key = PyLong_FromVoidPtr(result);\n        if (key == NULL) {\n            Py_DECREF(result);\n            return NULL;\n        }\n    } else if (PyType_Check(cls)) {\n        typ = (PyTypeObject *)cls;\n        buf = PyMem_Malloc(strlen(typ->tp_name) + 3 + 1);\n        if (buf == NULL)\n            return PyErr_NoMemory();\n        sprintf(buf, \"LP_%s\", typ->tp_name);\n        result = PyObject_CallFunction((PyObject *)Py_TYPE(&PyCPointer_Type),\n                                       \"s(O){sO}\",\n                                       buf,\n                                       &PyCPointer_Type,\n                                       \"_type_\", cls);\n        PyMem_Free(buf);\n        if (result == NULL)\n            return result;\n        Py_INCREF(cls);\n        key = cls;\n    } else {\n        PyErr_SetString(PyExc_TypeError, \"must be a ctypes type\");\n        return NULL;\n    }\n    if (-1 == PyDict_SetItem(_ctypes_ptrtype_cache, key, result)) {\n        Py_DECREF(result);\n        Py_DECREF(key);\n        return NULL;\n    }\n    Py_DECREF(key);\n    return result;\n}\n\nstatic PyObject *\npointer(PyObject *self, PyObject *arg)\n{\n    PyObject *result;\n    PyObject *typ;\n\n    typ = PyDict_GetItem(_ctypes_ptrtype_cache, (PyObject *)Py_TYPE(arg));\n    if (typ)\n        return PyObject_CallFunctionObjArgs(typ, arg, NULL);\n    typ = POINTER(NULL, (PyObject *)Py_TYPE(arg));\n    if (typ == NULL)\n                    return NULL;\n    result = PyObject_CallFunctionObjArgs(typ, arg, NULL);\n    Py_DECREF(typ);\n    return result;\n}\n\nstatic PyObject *\nbuffer_info(PyObject *self, PyObject *arg)\n{\n    StgDictObject *dict = PyType_stgdict(arg);\n    PyObject *shape;\n    Py_ssize_t i;\n\n    if (dict == NULL)\n        dict = PyObject_stgdict(arg);\n    if (dict == NULL) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"not a ctypes type or object\");\n        return NULL;\n    }\n    shape = PyTuple_New(dict->ndim);\n    if (shape == NULL)\n        return NULL;\n    for (i = 0; i < (int)dict->ndim; ++i)\n        PyTuple_SET_ITEM(shape, i, PyLong_FromSsize_t(dict->shape[i]));\n\n    if (PyErr_Occurred()) {\n        Py_DECREF(shape);\n        return NULL;\n    }\n    return Py_BuildValue(\"siN\", dict->format, dict->ndim, shape);\n}\n\nPyMethodDef _ctypes_module_methods[] = {\n    {\"get_errno\", get_errno, METH_NOARGS},\n    {\"set_errno\", set_errno, METH_VARARGS},\n    {\"POINTER\", POINTER, METH_O },\n    {\"pointer\", pointer, METH_O },\n    {\"_unpickle\", unpickle, METH_VARARGS },\n    {\"buffer_info\", buffer_info, METH_O, \"Return buffer interface information\"},\n    {\"resize\", resize, METH_VARARGS, \"Resize the memory buffer of a ctypes instance\"},\n#ifdef MS_WIN32\n    {\"get_last_error\", get_last_error, METH_NOARGS},\n    {\"set_last_error\", set_last_error, METH_VARARGS},\n    {\"CopyComPointer\", copy_com_pointer, METH_VARARGS, copy_com_pointer_doc},\n    {\"FormatError\", format_error, METH_VARARGS, format_error_doc},\n    {\"LoadLibrary\", load_library, METH_VARARGS, load_library_doc},\n    {\"FreeLibrary\", free_library, METH_VARARGS, free_library_doc},\n    {\"_check_HRESULT\", check_hresult, METH_VARARGS},\n#else\n    {\"dlopen\", py_dl_open, METH_VARARGS,\n     \"dlopen(name, flag={RTLD_GLOBAL|RTLD_LOCAL}) open a shared library\"},\n    {\"dlclose\", py_dl_close, METH_VARARGS, \"dlclose a library\"},\n    {\"dlsym\", py_dl_sym, METH_VARARGS, \"find symbol in shared library\"},\n#endif\n    {\"alignment\", align_func, METH_O, alignment_doc},\n    {\"sizeof\", sizeof_func, METH_O, sizeof_doc},\n    {\"byref\", byref, METH_VARARGS, byref_doc},\n    {\"addressof\", addressof, METH_O, addressof_doc},\n    {\"call_function\", call_function, METH_VARARGS },\n    {\"call_cdeclfunction\", call_cdeclfunction, METH_VARARGS },\n    {\"PyObj_FromPtr\", My_PyObj_FromPtr, METH_VARARGS },\n    {\"Py_INCREF\", My_Py_INCREF, METH_O },\n    {\"Py_DECREF\", My_Py_DECREF, METH_O },\n    {NULL,      NULL}        /* Sentinel */\n};\n\n/*\n Local Variables:\n compile-command: \"cd .. && python setup.py -q build -g && python setup.py -q build install --home ~\"\n End:\n*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Modules/_ctypes/darwin/dlfcn.h": "/*\nCopyright (c) 2002 Jorge Acereda  <jacereda@users.sourceforge.net> &\n                   Peter O'Gorman <ogorman@users.sourceforge.net>\n                   \nPortions may be copyright others, see the AUTHORS file included with this\ndistribution.\n\nMaintained by Peter O'Gorman <ogorman@users.sourceforge.net>\n\nBug Reports and other queries should go to <ogorman@users.sourceforge.net>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n#ifndef _DLFCN_H_\n#define _DLFCN_H_\n\n#include <AvailabilityMacros.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/*\n * Structure filled in by dladdr().\n */\n\ntypedef struct dl_info {\n        const char      *dli_fname;     /* Pathname of shared object */\n        void            *dli_fbase;     /* Base address of shared object */\n        const char      *dli_sname;     /* Name of nearest symbol */\n        void            *dli_saddr;     /* Address of nearest symbol */\n} Dl_info;\n\n\n#if MAC_OS_X_VERSION_MIN_REQUIRED <= MAC_OS_X_VERSION_10_2\n#warning CTYPES_DARWIN_DLFCN\n#define CTYPES_DARWIN_DLFCN\nextern void * (*ctypes_dlopen)(const char *path, int mode);\nextern void * (*ctypes_dlsym)(void * handle, const char *symbol);\nextern const char * (*ctypes_dlerror)(void);\nextern int (*ctypes_dlclose)(void * handle);\nextern int (*ctypes_dladdr)(const void *, Dl_info *);\n#else\nextern void * dlopen(const char *path, int mode);\nextern void * dlsym(void * handle, const char *symbol);\nextern const char * dlerror(void);\nextern int dlclose(void * handle);\nextern int dladdr(const void *, Dl_info *);\n#endif\n\n#define RTLD_LAZY\t0x1\n#define RTLD_NOW\t0x2\n#define RTLD_LOCAL\t0x4\n#define RTLD_GLOBAL\t0x8\n#define RTLD_NOLOAD\t0x10\n#define RTLD_NODELETE\t0x80\n\n/* These are from the Mac OS X 10.4 headers */\n#define RTLD_NEXT       ((void *) -1)   /* Search subsequent objects. */\n#define RTLD_DEFAULT    ((void *) -2)   /* Use default search algorithm. */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* _DLFCN_H_ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Modules/_ctypes/darwin/dlfcn_simple.c": "/*\nCopyright (c) 2002 Peter O'Gorman <ogorman@users.sourceforge.net>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n/* Just to prove that it isn't that hard to add Mac calls to your code :)\n   This works with pretty much everything, including kde3 xemacs and the gimp,\n   I'd guess that it'd work in at least 95% of cases, use this as your starting\n   point, rather than the mess that is dlfcn.c, assuming that your code does not\n   require ref counting or symbol lookups in dependent libraries\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <stdarg.h>\n#include <limits.h>\n#include <mach-o/dyld.h>\n#include <AvailabilityMacros.h>\n#include \"dlfcn.h\"\n\n#ifdef CTYPES_DARWIN_DLFCN\n\n#define ERR_STR_LEN 256\n\n#ifndef MAC_OS_X_VERSION_10_3\n#define MAC_OS_X_VERSION_10_3 1030\n#endif\n\n#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_3\n#define DARWIN_HAS_DLOPEN\nextern void * dlopen(const char *path, int mode) __attribute__((weak_import));\nextern void * dlsym(void * handle, const char *symbol) __attribute__((weak_import));\nextern const char * dlerror(void) __attribute__((weak_import));\nextern int dlclose(void * handle) __attribute__((weak_import));\nextern int dladdr(const void *, Dl_info *) __attribute__((weak_import));\n#endif /* MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_3 */\n\n#ifndef DARWIN_HAS_DLOPEN\n#define dlopen darwin_dlopen\n#define dlsym darwin_dlsym\n#define dlerror darwin_dlerror\n#define dlclose darwin_dlclose\n#define dladdr darwin_dladdr\n#endif\n\nvoid * (*ctypes_dlopen)(const char *path, int mode);\nvoid * (*ctypes_dlsym)(void * handle, const char *symbol);\nconst char * (*ctypes_dlerror)(void);\nint (*ctypes_dlclose)(void * handle);\nint (*ctypes_dladdr)(const void *, Dl_info *);\n\n#if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_3\n/* Mac OS X 10.3+ has dlopen, so strip all this dead code to avoid warnings */\n\nstatic void *dlsymIntern(void *handle, const char *symbol);\n\nstatic const char *error(int setget, const char *str, ...);\n\n/* Set and get the error string for use by dlerror */\nstatic const char *error(int setget, const char *str, ...)\n{\n    static char errstr[ERR_STR_LEN];\n    static int err_filled = 0;\n    const char *retval;\n    va_list arg;\n    if (setget == 0)\n    {\n        va_start(arg, str);\n        strncpy(errstr, \"dlcompat: \", ERR_STR_LEN);\n        vsnprintf(errstr + 10, ERR_STR_LEN - 10, str, arg);\n        va_end(arg);\n        err_filled = 1;\n        retval = NULL;\n    }\n    else\n    {\n        if (!err_filled)\n            retval = NULL;\n        else\n            retval = errstr;\n        err_filled = 0;\n    }\n    return retval;\n}\n\n/* darwin_dlopen */\nstatic void *darwin_dlopen(const char *path, int mode)\n{\n    void *module = 0;\n    NSObjectFileImage ofi = 0;\n    NSObjectFileImageReturnCode ofirc;\n\n    /* If we got no path, the app wants the global namespace, use -1 as the marker\n       in this case */\n    if (!path)\n        return (void *)-1;\n\n    /* Create the object file image, works for things linked with the -bundle arg to ld */\n    ofirc = NSCreateObjectFileImageFromFile(path, &ofi);\n    switch (ofirc)\n    {\n        case NSObjectFileImageSuccess:\n            /* It was okay, so use NSLinkModule to link in the image */\n            module = NSLinkModule(ofi, path,\n                                                      NSLINKMODULE_OPTION_RETURN_ON_ERROR\n                                                      | (mode & RTLD_GLOBAL) ? 0 : NSLINKMODULE_OPTION_PRIVATE\n                                                      | (mode & RTLD_LAZY) ? 0 : NSLINKMODULE_OPTION_BINDNOW);\n            NSDestroyObjectFileImage(ofi);\n            break;\n        case NSObjectFileImageInappropriateFile:\n            /* It may have been a dynamic library rather than a bundle, try to load it */\n            module = (void *)NSAddImage(path, NSADDIMAGE_OPTION_RETURN_ON_ERROR);\n            break;\n        default:\n            /* God knows what we got */\n            error(0, \"Can not open \\\"%s\\\"\", path);\n            return 0;\n    }\n    if (!module)\n        error(0, \"Can not open \\\"%s\\\"\", path);\n    return module;\n\n}\n\n/* dlsymIntern is used by dlsym to find the symbol */\nstatic void *dlsymIntern(void *handle, const char *symbol)\n{\n    NSSymbol nssym = 0;\n    /* If the handle is -1, if is the app global context */\n    if (handle == (void *)-1)\n    {\n        /* Global context, use NSLookupAndBindSymbol */\n        if (NSIsSymbolNameDefined(symbol))\n        {\n            nssym = NSLookupAndBindSymbol(symbol);\n        }\n\n    }\n    /* Now see if the handle is a struch mach_header* or not, use NSLookupSymbol in image\n       for libraries, and NSLookupSymbolInModule for bundles */\n    else\n    {\n        /* Check for both possible magic numbers depending on x86/ppc byte order */\n        if ((((struct mach_header *)handle)->magic == MH_MAGIC) ||\n            (((struct mach_header *)handle)->magic == MH_CIGAM))\n        {\n            if (NSIsSymbolNameDefinedInImage((struct mach_header *)handle, symbol))\n            {\n                nssym = NSLookupSymbolInImage((struct mach_header *)handle,\n                                                                          symbol,\n                                                                          NSLOOKUPSYMBOLINIMAGE_OPTION_BIND\n                                                                          | NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR);\n            }\n\n        }\n        else\n        {\n            nssym = NSLookupSymbolInModule(handle, symbol);\n        }\n    }\n    if (!nssym)\n    {\n        error(0, \"Symbol \\\"%s\\\" Not found\", symbol);\n        return NULL;\n    }\n    return NSAddressOfSymbol(nssym);\n}\n\nstatic const char *darwin_dlerror(void)\n{\n    return error(1, (char *)NULL);\n}\n\nstatic int darwin_dlclose(void *handle)\n{\n    if ((((struct mach_header *)handle)->magic == MH_MAGIC) ||\n        (((struct mach_header *)handle)->magic == MH_CIGAM))\n    {\n        error(0, \"Can't remove dynamic libraries on darwin\");\n        return 0;\n    }\n    if (!NSUnLinkModule(handle, 0))\n    {\n        error(0, \"unable to unlink module %s\", NSNameOfModule(handle));\n        return 1;\n    }\n    return 0;\n}\n\n\n/* dlsym, prepend the underscore and call dlsymIntern */\nstatic void *darwin_dlsym(void *handle, const char *symbol)\n{\n    static char undersym[257];          /* Saves calls to malloc(3) */\n    int sym_len = strlen(symbol);\n    void *value = NULL;\n    char *malloc_sym = NULL;\n\n    if (sym_len < 256)\n    {\n        snprintf(undersym, 256, \"_%s\", symbol);\n        value = dlsymIntern(handle, undersym);\n    }\n    else\n    {\n        malloc_sym = malloc(sym_len + 2);\n        if (malloc_sym)\n        {\n            sprintf(malloc_sym, \"_%s\", symbol);\n            value = dlsymIntern(handle, malloc_sym);\n            free(malloc_sym);\n        }\n        else\n        {\n            error(0, \"Unable to allocate memory\");\n        }\n    }\n    return value;\n}\n\nstatic int darwin_dladdr(const void *handle, Dl_info *info) {\n    return 0;\n}\n#endif /* MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_3 */\n\n#if __GNUC__ < 4\n#pragma CALL_ON_LOAD ctypes_dlfcn_init\n#else\nstatic void __attribute__ ((constructor)) ctypes_dlfcn_init(void);\nstatic\n#endif\nvoid ctypes_dlfcn_init(void) {\n    if (dlopen != NULL) {\n        ctypes_dlsym = dlsym;\n        ctypes_dlopen = dlopen;\n        ctypes_dlerror = dlerror;\n        ctypes_dlclose = dlclose;\n        ctypes_dladdr = dladdr;\n    } else {\n#if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_3\n        ctypes_dlsym = darwin_dlsym;\n        ctypes_dlopen = darwin_dlopen;\n        ctypes_dlerror = darwin_dlerror;\n        ctypes_dlclose = darwin_dlclose;\n        ctypes_dladdr = darwin_dladdr;\n#endif /* MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_3 */\n    }\n}\n\n#endif /* CTYPES_DARWIN_DLFCN */\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Modules/_ctypes/libffi/ltmain.sh": "#! /bin/sh\n\n# libtool (GNU libtool) 2.4.2.418\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.2.418\npackage_revision=2.4.2.418\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2013-08-23.20; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2013 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are still modern systems that have problems with 'echo' mis-\n# handling backslashes, among others, so make sure $bs_echo is set to a\n# command that correctly interprets backslashes.\n# (this code from Autoconf 2.68)\n\n# Printing a long string crashes Solaris 7 /usr/bin/printf.\nbs_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nbs_echo=$bs_echo$bs_echo$bs_echo$bs_echo$bs_echo\nbs_echo=$bs_echo$bs_echo$bs_echo$bs_echo$bs_echo$bs_echo\n# Prefer a ksh shell builtin over an external printf program on Solaris,\n# but without wasting forks for bash or zsh.\nif test -z \"$BASH_VERSION$ZSH_VERSION\" \\\n    && (test \"X`print -r -- $bs_echo`\" = \"X$bs_echo\") 2>/dev/null; then\n  bs_echo='print -r --'\n  bs_echo_n='print -rn --'\nelif (test \"X`printf %s $bs_echo`\" = \"X$bs_echo\") 2>/dev/null; then\n  bs_echo='printf %s\\n'\n  bs_echo_n='printf %s'\nelse\n  if test \"X`(/usr/ucb/echo -n -n $bs_echo) 2>/dev/null`\" = \"X-n $bs_echo\"; then\n    bs_echo_body='eval /usr/ucb/echo -n \"$1$nl\"'\n    bs_echo_n='/usr/ucb/echo -n'\n  else\n    bs_echo_body='eval expr \"X$1\" : \"X\\\\(.*\\\\)\"'\n    bs_echo_n_body='eval\n      arg=$1;\n      case $arg in #(\n      *\"$nl\"*)\n\texpr \"X$arg\" : \"X\\\\(.*\\\\)$nl\";\n\targ=`expr \"X$arg\" : \".*$nl\\\\(.*\\\\)\"`;;\n      esac;\n      expr \"X$arg\" : \"X\\\\(.*\\\\)\" | tr -d \"$nl\"\n    '\n    export bs_echo_n_body\n    bs_echo_n='sh -c $bs_echo_n_body bs_echo'\n  fi\n  export bs_echo_body\n  bs_echo='sh -c $bs_echo_body bs_echo'\nfi\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"$bs_echo\"}\n: ${EGREP=\"grep -E\"}\n: ${FGREP=\"grep -F\"}\n: ${GREP=\"grep\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SED=\"sed\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$bs_echo \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$bs_echo \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$bs_echo $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $bs_echo \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$bs_echo \"$_G_tc\" | sed \"$sed_make_literal_regex\"`\n        _G_indent=`$bs_echo \"$_G_indent\" | sed \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | sed 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $bs_echo \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    ver1=$1\n    ver2=$2\n\n    # Split on '.' and compare each component.\n    i=1\n    while :; do\n      p1=`echo \"$ver1\" |cut -d. -f$i`\n      p2=`echo \"$ver2\" |cut -d. -f$i`\n      if test ! \"$p1\"; then\n        echo \"$1 $2\"\n        break\n      elif test ! \"$p2\"; then\n        echo \"$2 $1\"\n        break\n      elif test ! \"$p1\" = \"$p2\"; then\n        if test \"$p1\" -gt \"$p2\" 2>/dev/null; then # numeric comparison\n          echo \"$2 $1\"\n        elif test \"$p2\" -gt \"$p1\" 2>/dev/null; then # numeric comparison\n          echo \"$1 $2\"\n        else # numeric, then lexicographic comparison\n          lp=`printf \"$p1\\n$p2\\n\" |sort -n |tail -n1`\n          if test \"$lp\" = \"$p2\"; then\n            echo \"$1 $2\"\n          else\n            echo \"$2 $1\"\n          fi\n        fi\n        break\n      fi\n      i=`expr $i + 1`\n    done\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2012-10-21.11; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2013 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$bs_echo \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook functions.\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ------------------##\n## Helper functions. ##\n## ------------------##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$bs_echo \\\"\"Usage: $usage\"\\\"\n    eval \\$bs_echo \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $bs_echo \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $bs_echo \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$bs_echo \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$bs_echo \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '/^##/q\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.2.418'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $bs_echo \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=$long_help_message\"\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.2.418\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      *cygwin* | *mingw* | *pw32* | *cegcc*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | sed -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    sed '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  sed -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\nvolatile const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|freebsd-elf|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Modules/_ctypes/libffi/aclocal.m4": "# generated automatically by aclocal 1.13.4 -*- Autoconf -*-\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE.\n\nm4_ifndef([AC_CONFIG_MACRO_DIRS], [m4_defun([_AM_CONFIG_MACRO_DIRS], [])m4_defun([AC_CONFIG_MACRO_DIRS], [_AM_CONFIG_MACRO_DIRS($@)])])\nm4_ifndef([AC_AUTOCONF_VERSION],\n  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\nm4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.69],,\n[m4_warning([this file was generated for autoconf 2.69.\nYou have another version of autoconf.  It may work, but is not guaranteed to.\nIf you have problems, you may need to regenerate the build system entirely.\nTo do so, use the procedure documented by the package, typically 'autoreconf'.])])\n\n# ltdl.m4 - Configure ltdl for the target system. -*-Autoconf-*-\n#\n#   Copyright (C) 1999-2006, 2007, 2008, 2011 Free Software Foundation, Inc.\n#   Written by Thomas Tanner, 1999\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 18 LTDL_INIT\n\n# LT_CONFIG_LTDL_DIR(DIRECTORY, [LTDL-MODE])\n# ------------------------------------------\n# DIRECTORY contains the libltdl sources.  It is okay to call this\n# function multiple times, as long as the same DIRECTORY is always given.\nAC_DEFUN([LT_CONFIG_LTDL_DIR],\n[AC_BEFORE([$0], [LTDL_INIT])\n_$0($*)\n])# LT_CONFIG_LTDL_DIR\n\n# We break this out into a separate macro, so that we can call it safely\n# internally without being caught accidentally by the sed scan in libtoolize.\nm4_defun([_LT_CONFIG_LTDL_DIR],\n[dnl remove trailing slashes\nm4_pushdef([_ARG_DIR], m4_bpatsubst([$1], [/*$]))\nm4_case(_LTDL_DIR,\n\t[], [dnl only set lt_ltdl_dir if _ARG_DIR is not simply `.'\n\t     m4_if(_ARG_DIR, [.],\n\t             [],\n\t\t [m4_define([_LTDL_DIR], _ARG_DIR)\n\t          _LT_SHELL_INIT([lt_ltdl_dir=']_ARG_DIR['])])],\n    [m4_if(_ARG_DIR, _LTDL_DIR,\n\t    [],\n\t[m4_fatal([multiple libltdl directories: `]_LTDL_DIR[', `]_ARG_DIR['])])])\nm4_popdef([_ARG_DIR])\n])# _LT_CONFIG_LTDL_DIR\n\n# Initialise:\nm4_define([_LTDL_DIR], [])\n\n\n# _LT_BUILD_PREFIX\n# ----------------\n# If Autoconf is new enough, expand to `${top_build_prefix}', otherwise\n# to `${top_builddir}/'.\nm4_define([_LT_BUILD_PREFIX],\n[m4_ifdef([AC_AUTOCONF_VERSION],\n   [m4_if(m4_version_compare(m4_defn([AC_AUTOCONF_VERSION]), [2.62]),\n\t  [-1], [m4_ifdef([_AC_HAVE_TOP_BUILD_PREFIX],\n\t\t\t  [${top_build_prefix}],\n\t\t\t  [${top_builddir}/])],\n\t  [${top_build_prefix}])],\n   [${top_builddir}/])[]dnl\n])\n\n\n# LTDL_CONVENIENCE\n# ----------------\n# sets LIBLTDL to the link flags for the libltdl convenience library and\n# LTDLINCL to the include flags for the libltdl header and adds\n# --enable-ltdl-convenience to the configure arguments.  Note that\n# AC_CONFIG_SUBDIRS is not called here.  LIBLTDL will be prefixed with\n# '${top_build_prefix}' if available, otherwise with '${top_builddir}/',\n# and LTDLINCL will be prefixed with '${top_srcdir}/' (note the single\n# quotes!).  If your package is not flat and you're not using automake,\n# define top_build_prefix, top_builddir, and top_srcdir appropriately\n# in your Makefiles.\nAC_DEFUN([LTDL_CONVENIENCE],\n[AC_BEFORE([$0], [LTDL_INIT])dnl\ndnl Although the argument is deprecated and no longer documented,\ndnl LTDL_CONVENIENCE used to take a DIRECTORY orgument, if we have one\ndnl here make sure it is the same as any other declaration of libltdl's\ndnl location!  This also ensures lt_ltdl_dir is set when configure.ac is\ndnl not yet using an explicit LT_CONFIG_LTDL_DIR.\nm4_ifval([$1], [_LT_CONFIG_LTDL_DIR([$1])])dnl\n_$0()\n])# LTDL_CONVENIENCE\n\n# AC_LIBLTDL_CONVENIENCE accepted a directory argument in older libtools,\n# now we have LT_CONFIG_LTDL_DIR:\nAU_DEFUN([AC_LIBLTDL_CONVENIENCE],\n[_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])\n_LTDL_CONVENIENCE])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBLTDL_CONVENIENCE], [])\n\n\n# _LTDL_CONVENIENCE\n# -----------------\n# Code shared by LTDL_CONVENIENCE and LTDL_INIT([convenience]).\nm4_defun([_LTDL_CONVENIENCE],\n[case $enable_ltdl_convenience in\n  no) AC_MSG_ERROR([this package needs a convenience libltdl]) ;;\n  \"\") enable_ltdl_convenience=yes\n      ac_configure_args=\"$ac_configure_args --enable-ltdl-convenience\" ;;\nesac\nLIBLTDL='_LT_BUILD_PREFIX'\"${lt_ltdl_dir+$lt_ltdl_dir/}libltdlc.la\"\nLTDLDEPS=$LIBLTDL\nLTDLINCL='-I${top_srcdir}'\"${lt_ltdl_dir+/$lt_ltdl_dir}\"\n\nAC_SUBST([LIBLTDL])\nAC_SUBST([LTDLDEPS])\nAC_SUBST([LTDLINCL])\n\n# For backwards non-gettext consistent compatibility...\nINCLTDL=\"$LTDLINCL\"\nAC_SUBST([INCLTDL])\n])# _LTDL_CONVENIENCE\n\n\n# LTDL_INSTALLABLE\n# ----------------\n# sets LIBLTDL to the link flags for the libltdl installable library\n# and LTDLINCL to the include flags for the libltdl header and adds\n# --enable-ltdl-install to the configure arguments.  Note that\n# AC_CONFIG_SUBDIRS is not called from here.  If an installed libltdl\n# is not found, LIBLTDL will be prefixed with '${top_build_prefix}' if\n# available, otherwise with '${top_builddir}/', and LTDLINCL will be\n# prefixed with '${top_srcdir}/' (note the single quotes!).  If your\n# package is not flat and you're not using automake, define top_build_prefix,\n# top_builddir, and top_srcdir appropriately in your Makefiles.\n# In the future, this macro may have to be called after LT_INIT.\nAC_DEFUN([LTDL_INSTALLABLE],\n[AC_BEFORE([$0], [LTDL_INIT])dnl\ndnl Although the argument is deprecated and no longer documented,\ndnl LTDL_INSTALLABLE used to take a DIRECTORY orgument, if we have one\ndnl here make sure it is the same as any other declaration of libltdl's\ndnl location!  This also ensures lt_ltdl_dir is set when configure.ac is\ndnl not yet using an explicit LT_CONFIG_LTDL_DIR.\nm4_ifval([$1], [_LT_CONFIG_LTDL_DIR([$1])])dnl\n_$0()\n])# LTDL_INSTALLABLE\n\n# AC_LIBLTDL_INSTALLABLE accepted a directory argument in older libtools,\n# now we have LT_CONFIG_LTDL_DIR:\nAU_DEFUN([AC_LIBLTDL_INSTALLABLE],\n[_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])\n_LTDL_INSTALLABLE])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBLTDL_INSTALLABLE], [])\n\n\n# _LTDL_INSTALLABLE\n# -----------------\n# Code shared by LTDL_INSTALLABLE and LTDL_INIT([installable]).\nm4_defun([_LTDL_INSTALLABLE],\n[if test -f $prefix/lib/libltdl.la; then\n  lt_save_LDFLAGS=\"$LDFLAGS\"\n  LDFLAGS=\"-L$prefix/lib $LDFLAGS\"\n  AC_CHECK_LIB([ltdl], [lt_dlinit], [lt_lib_ltdl=yes])\n  LDFLAGS=\"$lt_save_LDFLAGS\"\n  if test x\"${lt_lib_ltdl-no}\" = xyes; then\n    if test x\"$enable_ltdl_install\" != xyes; then\n      # Don't overwrite $prefix/lib/libltdl.la without --enable-ltdl-install\n      AC_MSG_WARN([not overwriting libltdl at $prefix, force with `--enable-ltdl-install'])\n      enable_ltdl_install=no\n    fi\n  elif test x\"$enable_ltdl_install\" = xno; then\n    AC_MSG_WARN([libltdl not installed, but installation disabled])\n  fi\nfi\n\n# If configure.ac declared an installable ltdl, and the user didn't override\n# with --disable-ltdl-install, we will install the shipped libltdl.\ncase $enable_ltdl_install in\n  no) ac_configure_args=\"$ac_configure_args --enable-ltdl-install=no\"\n      LIBLTDL=\"-lltdl\"\n      LTDLDEPS=\n      LTDLINCL=\n      ;;\n  *)  enable_ltdl_install=yes\n      ac_configure_args=\"$ac_configure_args --enable-ltdl-install\"\n      LIBLTDL='_LT_BUILD_PREFIX'\"${lt_ltdl_dir+$lt_ltdl_dir/}libltdl.la\"\n      LTDLDEPS=$LIBLTDL\n      LTDLINCL='-I${top_srcdir}'\"${lt_ltdl_dir+/$lt_ltdl_dir}\"\n      ;;\nesac\n\nAC_SUBST([LIBLTDL])\nAC_SUBST([LTDLDEPS])\nAC_SUBST([LTDLINCL])\n\n# For backwards non-gettext consistent compatibility...\nINCLTDL=\"$LTDLINCL\"\nAC_SUBST([INCLTDL])\n])# LTDL_INSTALLABLE\n\n\n# _LTDL_MODE_DISPATCH\n# -------------------\nm4_define([_LTDL_MODE_DISPATCH],\n[dnl If _LTDL_DIR is `.', then we are configuring libltdl itself:\nm4_if(_LTDL_DIR, [],\n\t[],\n    dnl if _LTDL_MODE was not set already, the default value is `subproject':\n    [m4_case(m4_default(_LTDL_MODE, [subproject]),\n\t  [subproject], [AC_CONFIG_SUBDIRS(_LTDL_DIR)\n\t\t\t  _LT_SHELL_INIT([lt_dlopen_dir=\"$lt_ltdl_dir\"])],\n\t  [nonrecursive], [_LT_SHELL_INIT([lt_dlopen_dir=\"$lt_ltdl_dir\"; lt_libobj_prefix=\"$lt_ltdl_dir/\"])],\n\t  [recursive], [],\n\t[m4_fatal([unknown libltdl mode: ]_LTDL_MODE)])])dnl\ndnl Be careful not to expand twice:\nm4_define([$0], [])\n])# _LTDL_MODE_DISPATCH\n\n\n# _LT_LIBOBJ(MODULE_NAME)\n# -----------------------\n# Like AC_LIBOBJ, except that MODULE_NAME goes into _LT_LIBOBJS instead\n# of into LIBOBJS.\nAC_DEFUN([_LT_LIBOBJ], [\n  m4_pattern_allow([^_LT_LIBOBJS$])\n  _LT_LIBOBJS=\"$_LT_LIBOBJS $1.$ac_objext\"\n])# _LT_LIBOBJS\n\n\n# LTDL_INIT([OPTIONS])\n# --------------------\n# Clients of libltdl can use this macro to allow the installer to\n# choose between a shipped copy of the ltdl sources or a preinstalled\n# version of the library.  If the shipped ltdl sources are not in a\n# subdirectory named libltdl, the directory name must be given by\n# LT_CONFIG_LTDL_DIR.\nAC_DEFUN([LTDL_INIT],\n[dnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\ndnl We need to keep our own list of libobjs separate from our parent project,\ndnl and the easiest way to do that is redefine the AC_LIBOBJs macro while\ndnl we look for our own LIBOBJs.\nm4_pushdef([AC_LIBOBJ], m4_defn([_LT_LIBOBJ]))\nm4_pushdef([AC_LIBSOURCES])\n\ndnl If not otherwise defined, default to the 1.5.x compatible subproject mode:\nm4_if(_LTDL_MODE, [],\n        [m4_define([_LTDL_MODE], m4_default([$2], [subproject]))\n        m4_if([-1], [m4_bregexp(_LTDL_MODE, [\\(subproject\\|\\(non\\)?recursive\\)])],\n                [m4_fatal([unknown libltdl mode: ]_LTDL_MODE)])])\n\nAC_ARG_WITH([included_ltdl],\n    [AS_HELP_STRING([--with-included-ltdl],\n                    [use the GNU ltdl sources included here])])\n\nif test \"x$with_included_ltdl\" != xyes; then\n  # We are not being forced to use the included libltdl sources, so\n  # decide whether there is a useful installed version we can use.\n  AC_CHECK_HEADER([ltdl.h],\n      [AC_CHECK_DECL([lt_dlinterface_register],\n\t   [AC_CHECK_LIB([ltdl], [lt_dladvise_preload],\n\t       [with_included_ltdl=no],\n\t       [with_included_ltdl=yes])],\n\t   [with_included_ltdl=yes],\n\t   [AC_INCLUDES_DEFAULT\n\t    #include <ltdl.h>])],\n      [with_included_ltdl=yes],\n      [AC_INCLUDES_DEFAULT]\n  )\nfi\n\ndnl If neither LT_CONFIG_LTDL_DIR, LTDL_CONVENIENCE nor LTDL_INSTALLABLE\ndnl was called yet, then for old times' sake, we assume libltdl is in an\ndnl eponymous directory:\nAC_PROVIDE_IFELSE([LT_CONFIG_LTDL_DIR], [], [_LT_CONFIG_LTDL_DIR([libltdl])])\n\nAC_ARG_WITH([ltdl_include],\n    [AS_HELP_STRING([--with-ltdl-include=DIR],\n                    [use the ltdl headers installed in DIR])])\n\nif test -n \"$with_ltdl_include\"; then\n  if test -f \"$with_ltdl_include/ltdl.h\"; then :\n  else\n    AC_MSG_ERROR([invalid ltdl include directory: `$with_ltdl_include'])\n  fi\nelse\n  with_ltdl_include=no\nfi\n\nAC_ARG_WITH([ltdl_lib],\n    [AS_HELP_STRING([--with-ltdl-lib=DIR],\n                    [use the libltdl.la installed in DIR])])\n\nif test -n \"$with_ltdl_lib\"; then\n  if test -f \"$with_ltdl_lib/libltdl.la\"; then :\n  else\n    AC_MSG_ERROR([invalid ltdl library directory: `$with_ltdl_lib'])\n  fi\nelse\n  with_ltdl_lib=no\nfi\n\ncase ,$with_included_ltdl,$with_ltdl_include,$with_ltdl_lib, in\n  ,yes,no,no,)\n\tm4_case(m4_default(_LTDL_TYPE, [convenience]),\n\t    [convenience], [_LTDL_CONVENIENCE],\n\t    [installable], [_LTDL_INSTALLABLE],\n\t  [m4_fatal([unknown libltdl build type: ]_LTDL_TYPE)])\n\t;;\n  ,no,no,no,)\n\t# If the included ltdl is not to be used, then use the\n\t# preinstalled libltdl we found.\n\tAC_DEFINE([HAVE_LTDL], [1],\n\t  [Define this if a modern libltdl is already installed])\n\tLIBLTDL=-lltdl\n\tLTDLDEPS=\n\tLTDLINCL=\n\t;;\n  ,no*,no,*)\n\tAC_MSG_ERROR([`--with-ltdl-include' and `--with-ltdl-lib' options must be used together])\n\t;;\n  *)\twith_included_ltdl=no\n\tLIBLTDL=\"-L$with_ltdl_lib -lltdl\"\n\tLTDLDEPS=\n\tLTDLINCL=\"-I$with_ltdl_include\"\n\t;;\nesac\nINCLTDL=\"$LTDLINCL\"\n\n# Report our decision...\nAC_MSG_CHECKING([where to find libltdl headers])\nAC_MSG_RESULT([$LTDLINCL])\nAC_MSG_CHECKING([where to find libltdl library])\nAC_MSG_RESULT([$LIBLTDL])\n\n_LTDL_SETUP\n\ndnl restore autoconf definition.\nm4_popdef([AC_LIBOBJ])\nm4_popdef([AC_LIBSOURCES])\n\nAC_CONFIG_COMMANDS_PRE([\n    _ltdl_libobjs=\n    _ltdl_ltlibobjs=\n    if test -n \"$_LT_LIBOBJS\"; then\n      # Remove the extension.\n      _lt_sed_drop_objext='s/\\.o$//;s/\\.obj$//'\n      for i in `for i in $_LT_LIBOBJS; do echo \"$i\"; done | sed \"$_lt_sed_drop_objext\" | sort -u`; do\n        _ltdl_libobjs=\"$_ltdl_libobjs $lt_libobj_prefix$i.$ac_objext\"\n        _ltdl_ltlibobjs=\"$_ltdl_ltlibobjs $lt_libobj_prefix$i.lo\"\n      done\n    fi\n    AC_SUBST([ltdl_LIBOBJS], [$_ltdl_libobjs])\n    AC_SUBST([ltdl_LTLIBOBJS], [$_ltdl_ltlibobjs])\n])\n\n# Only expand once:\nm4_define([LTDL_INIT])\n])# LTDL_INIT\n\n# Old names:\nAU_DEFUN([AC_LIB_LTDL], [LTDL_INIT($@)])\nAU_DEFUN([AC_WITH_LTDL], [LTDL_INIT($@)])\nAU_DEFUN([LT_WITH_LTDL], [LTDL_INIT($@)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIB_LTDL], [])\ndnl AC_DEFUN([AC_WITH_LTDL], [])\ndnl AC_DEFUN([LT_WITH_LTDL], [])\n\n\n# _LTDL_SETUP\n# -----------\n# Perform all the checks necessary for compilation of the ltdl objects\n#  -- including compiler checks and header checks.  This is a public\n# interface  mainly for the benefit of libltdl's own configure.ac, most\n# other users should call LTDL_INIT instead.\nAC_DEFUN([_LTDL_SETUP],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_SYS_MODULE_EXT])dnl\nAC_REQUIRE([LT_SYS_MODULE_PATH])dnl\nAC_REQUIRE([LT_SYS_DLSEARCH_PATH])dnl\nAC_REQUIRE([LT_LIB_DLLOAD])dnl\nAC_REQUIRE([LT_SYS_SYMBOL_USCORE])dnl\nAC_REQUIRE([LT_FUNC_DLSYM_USCORE])dnl\nAC_REQUIRE([LT_SYS_DLOPEN_DEPLIBS])dnl\nAC_REQUIRE([gl_FUNC_ARGZ])dnl\n\nm4_require([_LT_CHECK_OBJDIR])dnl\nm4_require([_LT_HEADER_DLFCN])dnl\nm4_require([_LT_CHECK_DLPREOPEN])dnl\nm4_require([_LT_DECL_SED])dnl\n\ndnl Don't require this, or it will be expanded earlier than the code\ndnl that sets the variables it relies on:\n_LT_ENABLE_INSTALL\n\ndnl _LTDL_MODE specific code must be called at least once:\n_LTDL_MODE_DISPATCH\n\n# In order that ltdl.c can compile, find out the first AC_CONFIG_HEADERS\n# the user used.  This is so that ltdl.h can pick up the parent projects\n# config.h file, The first file in AC_CONFIG_HEADERS must contain the\n# definitions required by ltdl.c.\n# FIXME: Remove use of undocumented AC_LIST_HEADERS (2.59 compatibility).\nAC_CONFIG_COMMANDS_PRE([dnl\nm4_pattern_allow([^LT_CONFIG_H$])dnl\nm4_ifset([AH_HEADER],\n    [LT_CONFIG_H=AH_HEADER],\n    [m4_ifset([AC_LIST_HEADERS],\n\t    [LT_CONFIG_H=`echo \"AC_LIST_HEADERS\" | $SED 's,^[[      ]]*,,;s,[[ :]].*$,,'`],\n\t[])])])\nAC_SUBST([LT_CONFIG_H])\n\nAC_CHECK_HEADERS([unistd.h dl.h sys/dl.h dld.h mach-o/dyld.h dirent.h],\n\t[], [], [AC_INCLUDES_DEFAULT])\n\nAC_CHECK_FUNCS([closedir opendir readdir], [], [AC_LIBOBJ([lt__dirent])])\nAC_CHECK_FUNCS([strlcat strlcpy], [], [AC_LIBOBJ([lt__strl])])\n\nm4_pattern_allow([LT_LIBEXT])dnl\nAC_DEFINE_UNQUOTED([LT_LIBEXT],[\"$libext\"],[The archive extension])\n\nname=\neval \"lt_libprefix=\\\"$libname_spec\\\"\"\nm4_pattern_allow([LT_LIBPREFIX])dnl\nAC_DEFINE_UNQUOTED([LT_LIBPREFIX],[\"$lt_libprefix\"],[The archive prefix])\n\nname=ltdl\neval \"LTDLOPEN=\\\"$libname_spec\\\"\"\nAC_SUBST([LTDLOPEN])\n])# _LTDL_SETUP\n\n\n# _LT_ENABLE_INSTALL\n# ------------------\nm4_define([_LT_ENABLE_INSTALL],\n[AC_ARG_ENABLE([ltdl-install],\n    [AS_HELP_STRING([--enable-ltdl-install], [install libltdl])])\n\ncase ,${enable_ltdl_install},${enable_ltdl_convenience} in\n  *yes*) ;;\n  *) enable_ltdl_convenience=yes ;;\nesac\n\nm4_ifdef([AM_CONDITIONAL],\n[AM_CONDITIONAL(INSTALL_LTDL, test x\"${enable_ltdl_install-no}\" != xno)\n AM_CONDITIONAL(CONVENIENCE_LTDL, test x\"${enable_ltdl_convenience-no}\" != xno)])\n])# _LT_ENABLE_INSTALL\n\n\n# LT_SYS_DLOPEN_DEPLIBS\n# ---------------------\nAC_DEFUN([LT_SYS_DLOPEN_DEPLIBS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_CACHE_CHECK([whether deplibs are loaded by dlopen],\n  [lt_cv_sys_dlopen_deplibs],\n  [# PORTME does your system automatically load deplibs for dlopen?\n  # or its logical equivalent (e.g. shl_load for HP-UX < 11)\n  # For now, we just catch OSes we know something about -- in the\n  # future, we'll try test this programmatically.\n  lt_cv_sys_dlopen_deplibs=unknown\n  case $host_os in\n  aix3*|aix4.1.*|aix4.2.*)\n    # Unknown whether this is true for these versions of AIX, but\n    # we want this `case' here to explicitly catch those versions.\n    lt_cv_sys_dlopen_deplibs=unknown\n    ;;\n  aix[[4-9]]*)\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  amigaos*)\n    case $host_cpu in\n    powerpc)\n      lt_cv_sys_dlopen_deplibs=no\n      ;;\n    esac\n    ;;\n  darwin*)\n    # Assuming the user has installed a libdl from somewhere, this is true\n    # If you are looking for one http://www.opendarwin.org/projects/dlcompat\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  freebsd* | dragonfly*)\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  gnu* | linux* | k*bsd*-gnu | kopensolaris*-gnu)\n    # GNU and its variants, using gnu ld.so (Glibc)\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  hpux10*|hpux11*)\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  interix*)\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  irix[[12345]]*|irix6.[[01]]*)\n    # Catch all versions of IRIX before 6.2, and indicate that we don't\n    # know how it worked for any of those versions.\n    lt_cv_sys_dlopen_deplibs=unknown\n    ;;\n  irix*)\n    # The case above catches anything before 6.2, and it's known that\n    # at 6.2 and later dlopen does load deplibs.\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  netbsd*)\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  openbsd*)\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  osf[[1234]]*)\n    # dlopen did load deplibs (at least at 4.x), but until the 5.x series,\n    # it did *not* use an RPATH in a shared library to find objects the\n    # library depends on, so we explicitly say `no'.\n    lt_cv_sys_dlopen_deplibs=no\n    ;;\n  osf5.0|osf5.0a|osf5.1)\n    # dlopen *does* load deplibs and with the right loader patch applied\n    # it even uses RPATH in a shared library to search for shared objects\n    # that the library depends on, but there's no easy way to know if that\n    # patch is installed.  Since this is the case, all we can really\n    # say is unknown -- it depends on the patch being installed.  If\n    # it is, this changes to `yes'.  Without it, it would be `no'.\n    lt_cv_sys_dlopen_deplibs=unknown\n    ;;\n  osf*)\n    # the two cases above should catch all versions of osf <= 5.1.  Read\n    # the comments above for what we know about them.\n    # At > 5.1, deplibs are loaded *and* any RPATH in a shared library\n    # is used to find them so we can finally say `yes'.\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  qnx*)\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  solaris*)\n    lt_cv_sys_dlopen_deplibs=yes\n    ;;\n  sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n    libltdl_cv_sys_dlopen_deplibs=yes\n    ;;\n  esac\n  ])\nif test \"$lt_cv_sys_dlopen_deplibs\" != yes; then\n AC_DEFINE([LTDL_DLOPEN_DEPLIBS], [1],\n    [Define if the OS needs help to load dependent libraries for dlopen().])\nfi\n])# LT_SYS_DLOPEN_DEPLIBS\n\n# Old name:\nAU_ALIAS([AC_LTDL_SYS_DLOPEN_DEPLIBS], [LT_SYS_DLOPEN_DEPLIBS])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LTDL_SYS_DLOPEN_DEPLIBS], [])\n\n\n# LT_SYS_MODULE_EXT\n# -----------------\nAC_DEFUN([LT_SYS_MODULE_EXT],\n[m4_require([_LT_SYS_DYNAMIC_LINKER])dnl\nAC_CACHE_CHECK([which extension is used for runtime loadable modules],\n  [libltdl_cv_shlibext],\n[\nmodule=yes\neval libltdl_cv_shlibext=$shrext_cmds\nmodule=no\neval libltdl_cv_shrext=$shrext_cmds\n  ])\nif test -n \"$libltdl_cv_shlibext\"; then\n  m4_pattern_allow([LT_MODULE_EXT])dnl\n  AC_DEFINE_UNQUOTED([LT_MODULE_EXT], [\"$libltdl_cv_shlibext\"],\n    [Define to the extension used for runtime loadable modules, say, \".so\".])\nfi\nif test \"$libltdl_cv_shrext\" != \"$libltdl_cv_shlibext\"; then\n  m4_pattern_allow([LT_SHARED_EXT])dnl\n  AC_DEFINE_UNQUOTED([LT_SHARED_EXT], [\"$libltdl_cv_shrext\"],\n    [Define to the shared library suffix, say, \".dylib\".])\nfi\n])# LT_SYS_MODULE_EXT\n\n# Old name:\nAU_ALIAS([AC_LTDL_SHLIBEXT], [LT_SYS_MODULE_EXT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LTDL_SHLIBEXT], [])\n\n\n# LT_SYS_MODULE_PATH\n# ------------------\nAC_DEFUN([LT_SYS_MODULE_PATH],\n[m4_require([_LT_SYS_DYNAMIC_LINKER])dnl\nAC_CACHE_CHECK([which variable specifies run-time module search path],\n  [lt_cv_module_path_var], [lt_cv_module_path_var=\"$shlibpath_var\"])\nif test -n \"$lt_cv_module_path_var\"; then\n  m4_pattern_allow([LT_MODULE_PATH_VAR])dnl\n  AC_DEFINE_UNQUOTED([LT_MODULE_PATH_VAR], [\"$lt_cv_module_path_var\"],\n    [Define to the name of the environment variable that determines the run-time module search path.])\nfi\n])# LT_SYS_MODULE_PATH\n\n# Old name:\nAU_ALIAS([AC_LTDL_SHLIBPATH], [LT_SYS_MODULE_PATH])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LTDL_SHLIBPATH], [])\n\n\n# LT_SYS_DLSEARCH_PATH\n# --------------------\nAC_DEFUN([LT_SYS_DLSEARCH_PATH],\n[m4_require([_LT_SYS_DYNAMIC_LINKER])dnl\nAC_CACHE_CHECK([for the default library search path],\n  [lt_cv_sys_dlsearch_path],\n  [lt_cv_sys_dlsearch_path=\"$sys_lib_dlsearch_path_spec\"])\nif test -n \"$lt_cv_sys_dlsearch_path\"; then\n  sys_dlsearch_path=\n  for dir in $lt_cv_sys_dlsearch_path; do\n    if test -z \"$sys_dlsearch_path\"; then\n      sys_dlsearch_path=\"$dir\"\n    else\n      sys_dlsearch_path=\"$sys_dlsearch_path$PATH_SEPARATOR$dir\"\n    fi\n  done\n  m4_pattern_allow([LT_DLSEARCH_PATH])dnl\n  AC_DEFINE_UNQUOTED([LT_DLSEARCH_PATH], [\"$sys_dlsearch_path\"],\n    [Define to the system default library search path.])\nfi\n])# LT_SYS_DLSEARCH_PATH\n\n# Old name:\nAU_ALIAS([AC_LTDL_SYSSEARCHPATH], [LT_SYS_DLSEARCH_PATH])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LTDL_SYSSEARCHPATH], [])\n\n\n# _LT_CHECK_DLPREOPEN\n# -------------------\nm4_defun([_LT_CHECK_DLPREOPEN],\n[m4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nAC_CACHE_CHECK([whether libtool supports -dlopen/-dlpreopen],\n  [libltdl_cv_preloaded_symbols],\n  [if test -n \"$lt_cv_sys_global_symbol_pipe\"; then\n    libltdl_cv_preloaded_symbols=yes\n  else\n    libltdl_cv_preloaded_symbols=no\n  fi\n  ])\nif test x\"$libltdl_cv_preloaded_symbols\" = xyes; then\n  AC_DEFINE([HAVE_PRELOADED_SYMBOLS], [1],\n    [Define if libtool can extract symbol lists from object files.])\nfi\n])# _LT_CHECK_DLPREOPEN\n\n\n# LT_LIB_DLLOAD\n# -------------\nAC_DEFUN([LT_LIB_DLLOAD],\n[m4_pattern_allow([^LT_DLLOADERS$])\nLT_DLLOADERS=\nAC_SUBST([LT_DLLOADERS])\n\nAC_LANG_PUSH([C])\n\nLIBADD_DLOPEN=\nAC_SEARCH_LIBS([dlopen], [dl],\n\t[AC_DEFINE([HAVE_LIBDL], [1],\n\t\t   [Define if you have the libdl library or equivalent.])\n\tif test \"$ac_cv_search_dlopen\" != \"none required\" ; then\n\t  LIBADD_DLOPEN=\"-ldl\"\n\tfi\n\tlibltdl_cv_lib_dl_dlopen=\"yes\"\n\tLT_DLLOADERS=\"$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la\"],\n    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#if HAVE_DLFCN_H\n#  include <dlfcn.h>\n#endif\n    ]], [[dlopen(0, 0);]])],\n\t    [AC_DEFINE([HAVE_LIBDL], [1],\n\t\t       [Define if you have the libdl library or equivalent.])\n\t    libltdl_cv_func_dlopen=\"yes\"\n\t    LT_DLLOADERS=\"$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la\"],\n\t[AC_CHECK_LIB([svld], [dlopen],\n\t\t[AC_DEFINE([HAVE_LIBDL], [1],\n\t\t\t [Define if you have the libdl library or equivalent.])\n\t        LIBADD_DLOPEN=\"-lsvld\" libltdl_cv_func_dlopen=\"yes\"\n\t\tLT_DLLOADERS=\"$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la\"])])])\nif test x\"$libltdl_cv_func_dlopen\" = xyes || test x\"$libltdl_cv_lib_dl_dlopen\" = xyes\nthen\n  lt_save_LIBS=\"$LIBS\"\n  LIBS=\"$LIBS $LIBADD_DLOPEN\"\n  AC_CHECK_FUNCS([dlerror])\n  LIBS=\"$lt_save_LIBS\"\nfi\nAC_SUBST([LIBADD_DLOPEN])\n\nLIBADD_SHL_LOAD=\nAC_CHECK_FUNC([shl_load],\n\t[AC_DEFINE([HAVE_SHL_LOAD], [1],\n\t\t   [Define if you have the shl_load function.])\n\tLT_DLLOADERS=\"$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}shl_load.la\"],\n    [AC_CHECK_LIB([dld], [shl_load],\n\t    [AC_DEFINE([HAVE_SHL_LOAD], [1],\n\t\t       [Define if you have the shl_load function.])\n\t    LT_DLLOADERS=\"$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}shl_load.la\"\n\t    LIBADD_SHL_LOAD=\"-ldld\"])])\nAC_SUBST([LIBADD_SHL_LOAD])\n\ncase $host_os in\ndarwin[[1567]].*)\n# We only want this for pre-Mac OS X 10.4.\n  AC_CHECK_FUNC([_dyld_func_lookup],\n\t[AC_DEFINE([HAVE_DYLD], [1],\n\t\t   [Define if you have the _dyld_func_lookup function.])\n\tLT_DLLOADERS=\"$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dyld.la\"])\n  ;;\nbeos*)\n  LT_DLLOADERS=\"$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}load_add_on.la\"\n  ;;\ncygwin* | mingw* | os2* | pw32*)\n  AC_CHECK_DECLS([cygwin_conv_path], [], [], [[#include <sys/cygwin.h>]])\n  LT_DLLOADERS=\"$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}loadlibrary.la\"\n  ;;\nesac\n\nAC_CHECK_LIB([dld], [dld_link],\n\t[AC_DEFINE([HAVE_DLD], [1],\n\t\t   [Define if you have the GNU dld library.])\n\t\tLT_DLLOADERS=\"$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dld_link.la\"])\nAC_SUBST([LIBADD_DLD_LINK])\n\nm4_pattern_allow([^LT_DLPREOPEN$])\nLT_DLPREOPEN=\nif test -n \"$LT_DLLOADERS\"\nthen\n  for lt_loader in $LT_DLLOADERS; do\n    LT_DLPREOPEN=\"$LT_DLPREOPEN-dlpreopen $lt_loader \"\n  done\n  AC_DEFINE([HAVE_LIBDLLOADER], [1],\n            [Define if libdlloader will be built on this platform])\nfi\nAC_SUBST([LT_DLPREOPEN])\n\ndnl This isn't used anymore, but set it for backwards compatibility\nLIBADD_DL=\"$LIBADD_DLOPEN $LIBADD_SHL_LOAD\"\nAC_SUBST([LIBADD_DL])\n\nAC_LANG_POP\n])# LT_LIB_DLLOAD\n\n# Old name:\nAU_ALIAS([AC_LTDL_DLLIB], [LT_LIB_DLLOAD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LTDL_DLLIB], [])\n\n\n# LT_SYS_SYMBOL_USCORE\n# --------------------\n# does the compiler prefix global symbols with an underscore?\nAC_DEFUN([LT_SYS_SYMBOL_USCORE],\n[m4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nAC_CACHE_CHECK([for _ prefix in compiled symbols],\n  [lt_cv_sys_symbol_underscore],\n  [lt_cv_sys_symbol_underscore=no\n  cat > conftest.$ac_ext <<_LT_EOF\nvoid nm_test_func(){}\nint main(){nm_test_func;return 0;}\n_LT_EOF\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    ac_nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| $lt_cv_sys_global_symbol_pipe \\> $ac_nlist) && test -s \"$ac_nlist\"; then\n      # See whether the symbols have a leading underscore.\n      if grep '^. _nm_test_func' \"$ac_nlist\" >/dev/null; then\n        lt_cv_sys_symbol_underscore=yes\n      else\n        if grep '^. nm_test_func ' \"$ac_nlist\" >/dev/null; then\n\t  :\n        else\n\t  echo \"configure: cannot find nm_test_func in $ac_nlist\" >&AS_MESSAGE_LOG_FD\n        fi\n      fi\n    else\n      echo \"configure: cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"configure: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.c >&AS_MESSAGE_LOG_FD\n  fi\n  rm -rf conftest*\n  ])\n  sys_symbol_underscore=$lt_cv_sys_symbol_underscore\n  AC_SUBST([sys_symbol_underscore])\n])# LT_SYS_SYMBOL_USCORE\n\n# Old name:\nAU_ALIAS([AC_LTDL_SYMBOL_USCORE], [LT_SYS_SYMBOL_USCORE])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LTDL_SYMBOL_USCORE], [])\n\n\n# LT_FUNC_DLSYM_USCORE\n# --------------------\nAC_DEFUN([LT_FUNC_DLSYM_USCORE],\n[AC_REQUIRE([LT_SYS_SYMBOL_USCORE])dnl\nif test x\"$lt_cv_sys_symbol_underscore\" = xyes; then\n  if test x\"$libltdl_cv_func_dlopen\" = xyes ||\n     test x\"$libltdl_cv_lib_dl_dlopen\" = xyes ; then\n\tAC_CACHE_CHECK([whether we have to add an underscore for dlsym],\n\t  [libltdl_cv_need_uscore],\n\t  [libltdl_cv_need_uscore=unknown\n          save_LIBS=\"$LIBS\"\n          LIBS=\"$LIBS $LIBADD_DLOPEN\"\n\t  _LT_TRY_DLOPEN_SELF(\n\t    [libltdl_cv_need_uscore=no], [libltdl_cv_need_uscore=yes],\n\t    [],\t\t\t\t [libltdl_cv_need_uscore=cross])\n\t  LIBS=\"$save_LIBS\"\n\t])\n  fi\nfi\n\nif test x\"$libltdl_cv_need_uscore\" = xyes; then\n  AC_DEFINE([NEED_USCORE], [1],\n    [Define if dlsym() requires a leading underscore in symbol names.])\nfi\n])# LT_FUNC_DLSYM_USCORE\n\n# Old name:\nAU_ALIAS([AC_LTDL_DLSYM_USCORE], [LT_FUNC_DLSYM_USCORE])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LTDL_DLSYM_USCORE], [])\n\n# Copyright (C) 2002-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_AUTOMAKE_VERSION(VERSION)\n# ----------------------------\n# Automake X.Y traces this macro to ensure aclocal.m4 has been\n# generated from the m4 files accompanying Automake X.Y.\n# (This private macro should not be called outside this file.)\nAC_DEFUN([AM_AUTOMAKE_VERSION],\n[am__api_version='1.13'\ndnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to\ndnl require some minimum version.  Point them to the right macro.\nm4_if([$1], [1.13.4], [],\n      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl\n])\n\n# _AM_AUTOCONF_VERSION(VERSION)\n# -----------------------------\n# aclocal traces this macro to find the Autoconf version.\n# This is a private macro too.  Using m4_define simplifies\n# the logic in aclocal, which can simply ignore this definition.\nm4_define([_AM_AUTOCONF_VERSION], [])\n\n# AM_SET_CURRENT_AUTOMAKE_VERSION\n# -------------------------------\n# Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.\n# This function is AC_REQUIREd by AM_INIT_AUTOMAKE.\nAC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n[AM_AUTOMAKE_VERSION([1.13.4])dnl\nm4_ifndef([AC_AUTOCONF_VERSION],\n  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\n_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])\n\n# Figure out how to run the assembler.                      -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_AS\n# ----------\nAC_DEFUN([AM_PROG_AS],\n[# By default we simply use the C compiler to build assembly code.\nAC_REQUIRE([AC_PROG_CC])\ntest \"${CCAS+set}\" = set || CCAS=$CC\ntest \"${CCASFLAGS+set}\" = set || CCASFLAGS=$CFLAGS\nAC_ARG_VAR([CCAS],      [assembler compiler command (defaults to CC)])\nAC_ARG_VAR([CCASFLAGS], [assembler compiler flags (defaults to CFLAGS)])\n_AM_IF_OPTION([no-dependencies],, [_AM_DEPENDENCIES([CCAS])])dnl\n])\n\n# AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets\n# $ac_aux_dir to '$srcdir/foo'.  In other projects, it is set to\n# '$srcdir', '$srcdir/..', or '$srcdir/../..'.\n#\n# Of course, Automake must honor this variable whenever it calls a\n# tool from the auxiliary directory.  The problem is that $srcdir (and\n# therefore $ac_aux_dir as well) can be either absolute or relative,\n# depending on how configure is run.  This is pretty annoying, since\n# it makes $ac_aux_dir quite unusable in subdirectories: in the top\n# source directory, any form will work fine, but in subdirectories a\n# relative path needs to be adjusted first.\n#\n# $ac_aux_dir/missing\n#    fails when called from a subdirectory if $ac_aux_dir is relative\n# $top_srcdir/$ac_aux_dir/missing\n#    fails if $ac_aux_dir is absolute,\n#    fails when called from a subdirectory in a VPATH build with\n#          a relative $ac_aux_dir\n#\n# The reason of the latter failure is that $top_srcdir and $ac_aux_dir\n# are both prefixed by $srcdir.  In an in-source build this is usually\n# harmless because $srcdir is '.', but things will broke when you\n# start a VPATH build or use an absolute $srcdir.\n#\n# So we could use something similar to $top_srcdir/$ac_aux_dir/missing,\n# iff we strip the leading $srcdir from $ac_aux_dir.  That would be:\n#   am_aux_dir='\\$(top_srcdir)/'`expr \"$ac_aux_dir\" : \"$srcdir//*\\(.*\\)\"`\n# and then we would define $MISSING as\n#   MISSING=\"\\${SHELL} $am_aux_dir/missing\"\n# This will work as long as MISSING is not called from configure, because\n# unfortunately $(top_srcdir) has no meaning in configure.\n# However there are other variables, like CC, which are often used in\n# configure, and could therefore not use this \"fixed\" $ac_aux_dir.\n#\n# Another solution, used here, is to always expand $ac_aux_dir to an\n# absolute PATH.  The drawback is that using absolute paths prevent a\n# configured tree to be moved without reconfiguration.\n\nAC_DEFUN([AM_AUX_DIR_EXPAND],\n[dnl Rely on autoconf to set up CDPATH properly.\nAC_PREREQ([2.50])dnl\n# expand $ac_aux_dir to an absolute path\nam_aux_dir=`cd $ac_aux_dir && pwd`\n])\n\n# AM_CONDITIONAL                                            -*- Autoconf -*-\n\n# Copyright (C) 1997-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n# -------------------------------------\n# Define a conditional.\nAC_DEFUN([AM_CONDITIONAL],\n[AC_PREREQ([2.52])dnl\n m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\nAC_SUBST([$1_TRUE])dnl\nAC_SUBST([$1_FALSE])dnl\n_AM_SUBST_NOTMAKE([$1_TRUE])dnl\n_AM_SUBST_NOTMAKE([$1_FALSE])dnl\nm4_define([_AM_COND_VALUE_$1], [$2])dnl\nif $2; then\n  $1_TRUE=\n  $1_FALSE='#'\nelse\n  $1_TRUE='#'\n  $1_FALSE=\nfi\nAC_CONFIG_COMMANDS_PRE(\n[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n  AC_MSG_ERROR([[conditional \"$1\" was never defined.\nUsually this means the macro was only invoked conditionally.]])\nfi])])\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n\n# There are a few dirty hacks below to avoid letting 'AC_PROG_CC' be\n# written in clear, in which case automake, when reading aclocal.m4,\n# will think it sees a *use*, and therefore will trigger all it's\n# C support machinery.  Also note that it means that autoscan, seeing\n# CC etc. in the Makefile, will ask for an AC_PROG_CC use...\n\n\n# _AM_DEPENDENCIES(NAME)\n# ----------------------\n# See how the compiler implements dependency checking.\n# NAME is \"CC\", \"CXX\", \"OBJC\", \"OBJCXX\", \"UPC\", or \"GJC\".\n# We try a few techniques and use that to set a single cache variable.\n#\n# We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was\n# modified to invoke _AM_DEPENDENCIES(CC); we would have a circular\n# dependency, and given that the user is not expected to run this macro,\n# just rely on AC_PROG_CC.\nAC_DEFUN([_AM_DEPENDENCIES],\n[AC_REQUIRE([AM_SET_DEPDIR])dnl\nAC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl\nAC_REQUIRE([AM_MAKE_INCLUDE])dnl\nAC_REQUIRE([AM_DEP_TRACK])dnl\n\nm4_if([$1], [CC],   [depcc=\"$CC\"   am_compiler_list=],\n      [$1], [CXX],  [depcc=\"$CXX\"  am_compiler_list=],\n      [$1], [OBJC], [depcc=\"$OBJC\" am_compiler_list='gcc3 gcc'],\n      [$1], [OBJCXX], [depcc=\"$OBJCXX\" am_compiler_list='gcc3 gcc'],\n      [$1], [UPC],  [depcc=\"$UPC\"  am_compiler_list=],\n      [$1], [GCJ],  [depcc=\"$GCJ\"  am_compiler_list='gcc3 gcc'],\n                    [depcc=\"$$1\"   am_compiler_list=])\n\nAC_CACHE_CHECK([dependency style of $depcc],\n               [am_cv_$1_dependencies_compiler_type],\n[if test -z \"$AMDEP_TRUE\" && test -f \"$am_depcomp\"; then\n  # We make a subdir and do the tests there.  Otherwise we can end up\n  # making bogus files that we don't know about and never remove.  For\n  # instance it was reported that on HP-UX the gcc test will end up\n  # making a dummy file named 'D' -- because '-MD' means \"put the output\n  # in D\".\n  rm -rf conftest.dir\n  mkdir conftest.dir\n  # Copy depcomp to subdir because otherwise we won't find it if we're\n  # using a relative directory.\n  cp \"$am_depcomp\" conftest.dir\n  cd conftest.dir\n  # We will build objects and dependencies in a subdirectory because\n  # it helps to detect inapplicable dependency modes.  For instance\n  # both Tru64's cc and ICC support -MD to output dependencies as a\n  # side effect of compilation, but ICC will put the dependencies in\n  # the current directory while Tru64 will put them in the object\n  # directory.\n  mkdir sub\n\n  am_cv_$1_dependencies_compiler_type=none\n  if test \"$am_compiler_list\" = \"\"; then\n     am_compiler_list=`sed -n ['s/^#*\\([a-zA-Z0-9]*\\))$/\\1/p'] < ./depcomp`\n  fi\n  am__universal=false\n  m4_case([$1], [CC],\n    [case \" $depcc \" in #(\n     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n     esac],\n    [CXX],\n    [case \" $depcc \" in #(\n     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n     esac])\n\n  for depmode in $am_compiler_list; do\n    # Setup a source with many dependencies, because some compilers\n    # like to wrap large dependency lists on column 80 (with \\), and\n    # we should not choose a depcomp mode which is confused by this.\n    #\n    # We need to recreate these files for each test, as the compiler may\n    # overwrite some of them when testing with obscure command lines.\n    # This happens at least with the AIX C compiler.\n    : > sub/conftest.c\n    for i in 1 2 3 4 5 6; do\n      echo '#include \"conftst'$i'.h\"' >> sub/conftest.c\n      # Using \": > sub/conftst$i.h\" creates only sub/conftst1.h with\n      # Solaris 10 /bin/sh.\n      echo '/* dummy */' > sub/conftst$i.h\n    done\n    echo \"${am__include} ${am__quote}sub/conftest.Po${am__quote}\" > confmf\n\n    # We check with '-c' and '-o' for the sake of the \"dashmstdout\"\n    # mode.  It turns out that the SunPro C++ compiler does not properly\n    # handle '-M -o', and we need to detect this.  Also, some Intel\n    # versions had trouble with output in subdirs.\n    am__obj=sub/conftest.${OBJEXT-o}\n    am__minus_obj=\"-o $am__obj\"\n    case $depmode in\n    gcc)\n      # This depmode causes a compiler race in universal mode.\n      test \"$am__universal\" = false || continue\n      ;;\n    nosideeffect)\n      # After this tag, mechanisms are not by side-effect, so they'll\n      # only be used when explicitly requested.\n      if test \"x$enable_dependency_tracking\" = xyes; then\n\tcontinue\n      else\n\tbreak\n      fi\n      ;;\n    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n      # This compiler won't grok '-c -o', but also, the minuso test has\n      # not run yet.  These depmodes are late enough in the game, and\n      # so weak that their functioning should not be impacted.\n      am__obj=conftest.${OBJEXT-o}\n      am__minus_obj=\n      ;;\n    none) break ;;\n    esac\n    if depmode=$depmode \\\n       source=sub/conftest.c object=$am__obj \\\n       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \\\n       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \\\n         >/dev/null 2>conftest.err &&\n       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&\n       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then\n      # icc doesn't choke on unknown options, it will just issue warnings\n      # or remarks (even with -Werror).  So we grep stderr for any message\n      # that says an option was ignored or not supported.\n      # When given -MP, icc 7.0 and 7.1 complain thusly:\n      #   icc: Command line warning: ignoring option '-M'; no argument required\n      # The diagnosis changed in icc 8.0:\n      #   icc: Command line remark: option '-MP' not supported\n      if (grep 'ignoring option' conftest.err ||\n          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else\n        am_cv_$1_dependencies_compiler_type=$depmode\n        break\n      fi\n    fi\n  done\n\n  cd ..\n  rm -rf conftest.dir\nelse\n  am_cv_$1_dependencies_compiler_type=none\nfi\n])\nAC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])\nAM_CONDITIONAL([am__fastdep$1], [\n  test \"x$enable_dependency_tracking\" != xno \\\n  && test \"$am_cv_$1_dependencies_compiler_type\" = gcc3])\n])\n\n\n# AM_SET_DEPDIR\n# -------------\n# Choose a directory name for dependency files.\n# This macro is AC_REQUIREd in _AM_DEPENDENCIES.\nAC_DEFUN([AM_SET_DEPDIR],\n[AC_REQUIRE([AM_SET_LEADING_DOT])dnl\nAC_SUBST([DEPDIR], [\"${am__leading_dot}deps\"])dnl\n])\n\n\n# AM_DEP_TRACK\n# ------------\nAC_DEFUN([AM_DEP_TRACK],\n[AC_ARG_ENABLE([dependency-tracking], [dnl\nAS_HELP_STRING(\n  [--enable-dependency-tracking],\n  [do not reject slow dependency extractors])\nAS_HELP_STRING(\n  [--disable-dependency-tracking],\n  [speeds up one-time build])])\nif test \"x$enable_dependency_tracking\" != xno; then\n  am_depcomp=\"$ac_aux_dir/depcomp\"\n  AMDEPBACKSLASH='\\'\n  am__nodep='_no'\nfi\nAM_CONDITIONAL([AMDEP], [test \"x$enable_dependency_tracking\" != xno])\nAC_SUBST([AMDEPBACKSLASH])dnl\n_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl\nAC_SUBST([am__nodep])dnl\n_AM_SUBST_NOTMAKE([am__nodep])dnl\n])\n\n# Generate code to set up dependency tracking.              -*- Autoconf -*-\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n\n# _AM_OUTPUT_DEPENDENCY_COMMANDS\n# ------------------------------\nAC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],\n[{\n  # Older Autoconf quotes --file arguments for eval, but not when files\n  # are listed without --file.  Let's play safe and only enable the eval\n  # if we detect the quoting.\n  case $CONFIG_FILES in\n  *\\'*) eval set x \"$CONFIG_FILES\" ;;\n  *)   set x $CONFIG_FILES ;;\n  esac\n  shift\n  for mf\n  do\n    # Strip MF so we end up with the name of the file.\n    mf=`echo \"$mf\" | sed -e 's/:.*$//'`\n    # Check whether this is an Automake generated Makefile or not.\n    # We used to match only the files named 'Makefile.in', but\n    # some people rename them; so instead we look at the file content.\n    # Grep'ing the first line is not enough: some people post-process\n    # each Makefile.in and add a new line on top of each file to say so.\n    # Grep'ing the whole file is not good either: AIX grep has a line\n    # limit of 2048, but all sed's we know have understand at least 4000.\n    if sed -n 's,^#.*generated by automake.*,X,p' \"$mf\" | grep X >/dev/null 2>&1; then\n      dirpart=`AS_DIRNAME(\"$mf\")`\n    else\n      continue\n    fi\n    # Extract the definition of DEPDIR, am__include, and am__quote\n    # from the Makefile without running 'make'.\n    DEPDIR=`sed -n 's/^DEPDIR = //p' < \"$mf\"`\n    test -z \"$DEPDIR\" && continue\n    am__include=`sed -n 's/^am__include = //p' < \"$mf\"`\n    test -z \"$am__include\" && continue\n    am__quote=`sed -n 's/^am__quote = //p' < \"$mf\"`\n    # Find all dependency output files, they are included files with\n    # $(DEPDIR) in their names.  We invoke sed twice because it is the\n    # simplest approach to changing $(DEPDIR) to its actual value in the\n    # expansion.\n    for file in `sed -n \"\n      s/^$am__include $am__quote\\(.*(DEPDIR).*\\)$am__quote\"'$/\\1/p' <\"$mf\" | \\\n\t sed -e 's/\\$(DEPDIR)/'\"$DEPDIR\"'/g'`; do\n      # Make sure the directory exists.\n      test -f \"$dirpart/$file\" && continue\n      fdir=`AS_DIRNAME([\"$file\"])`\n      AS_MKDIR_P([$dirpart/$fdir])\n      # echo \"creating $dirpart/$file\"\n      echo '# dummy' > \"$dirpart/$file\"\n    done\n  done\n}\n])# _AM_OUTPUT_DEPENDENCY_COMMANDS\n\n\n# AM_OUTPUT_DEPENDENCY_COMMANDS\n# -----------------------------\n# This macro should only be invoked once -- use via AC_REQUIRE.\n#\n# This code is only required when automatic dependency tracking\n# is enabled.  FIXME.  This creates each '.P' file that we will\n# need in order to bootstrap the dependency handling code.\nAC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS],\n[AC_CONFIG_COMMANDS([depfiles],\n     [test x\"$AMDEP_TRUE\" != x\"\" || _AM_OUTPUT_DEPENDENCY_COMMANDS],\n     [AMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"])\n])\n\n# Do all the work for Automake.                             -*- Autoconf -*-\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This macro actually does too much.  Some checks are only needed if\n# your package does certain things.  But this isn't really a big deal.\n\n# AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])\n# AM_INIT_AUTOMAKE([OPTIONS])\n# -----------------------------------------------\n# The call with PACKAGE and VERSION arguments is the old style\n# call (pre autoconf-2.50), which is being phased out.  PACKAGE\n# and VERSION should now be passed to AC_INIT and removed from\n# the call to AM_INIT_AUTOMAKE.\n# We support both call styles for the transition.  After\n# the next Automake release, Autoconf can make the AC_INIT\n# arguments mandatory, and then we can depend on a new Autoconf\n# release and drop the old call support.\nAC_DEFUN([AM_INIT_AUTOMAKE],\n[AC_PREREQ([2.65])dnl\ndnl Autoconf wants to disallow AM_ names.  We explicitly allow\ndnl the ones we care about.\nm4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl\nAC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\nAC_REQUIRE([AC_PROG_INSTALL])dnl\nif test \"`cd $srcdir && pwd`\" != \"`pwd`\"; then\n  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output\n  # is not polluted with repeated \"-I.\"\n  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl\n  # test to see if srcdir already configured\n  if test -f $srcdir/config.status; then\n    AC_MSG_ERROR([source directory already configured; run \"make distclean\" there first])\n  fi\nfi\n\n# test whether we have cygpath\nif test -z \"$CYGPATH_W\"; then\n  if (cygpath --version) >/dev/null 2>/dev/null; then\n    CYGPATH_W='cygpath -w'\n  else\n    CYGPATH_W=echo\n  fi\nfi\nAC_SUBST([CYGPATH_W])\n\n# Define the identity of the package.\ndnl Distinguish between old-style and new-style calls.\nm4_ifval([$2],\n[AC_DIAGNOSE([obsolete],\n             [$0: two- and three-arguments forms are deprecated.])\nm4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl\n AC_SUBST([PACKAGE], [$1])dnl\n AC_SUBST([VERSION], [$2])],\n[_AM_SET_OPTIONS([$1])dnl\ndnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.\nm4_if(\n  m4_ifdef([AC_PACKAGE_NAME], [ok]):m4_ifdef([AC_PACKAGE_VERSION], [ok]),\n  [ok:ok],,\n  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl\n AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl\n AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl\n\n_AM_IF_OPTION([no-define],,\n[AC_DEFINE_UNQUOTED([PACKAGE], [\"$PACKAGE\"], [Name of package])\n AC_DEFINE_UNQUOTED([VERSION], [\"$VERSION\"], [Version number of package])])dnl\n\n# Some tools Automake needs.\nAC_REQUIRE([AM_SANITY_CHECK])dnl\nAC_REQUIRE([AC_ARG_PROGRAM])dnl\nAM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])\nAM_MISSING_PROG([AUTOCONF], [autoconf])\nAM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])\nAM_MISSING_PROG([AUTOHEADER], [autoheader])\nAM_MISSING_PROG([MAKEINFO], [makeinfo])\nAC_REQUIRE([AM_PROG_INSTALL_SH])dnl\nAC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl\nAC_REQUIRE([AC_PROG_MKDIR_P])dnl\n# For better backward compatibility.  To be removed once Automake 1.9.x\n# dies out for good.  For more background, see:\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>\nAC_SUBST([mkdir_p], ['$(MKDIR_P)'])\n# We need awk for the \"check\" target.  The system \"awk\" is bad on\n# some platforms.\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([AC_PROG_MAKE_SET])dnl\nAC_REQUIRE([AM_SET_LEADING_DOT])dnl\n_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],\n\t      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],\n\t\t\t     [_AM_PROG_TAR([v7])])])\n_AM_IF_OPTION([no-dependencies],,\n[AC_PROVIDE_IFELSE([AC_PROG_CC],\n\t\t  [_AM_DEPENDENCIES([CC])],\n\t\t  [m4_define([AC_PROG_CC],\n\t\t\t     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_CXX],\n\t\t  [_AM_DEPENDENCIES([CXX])],\n\t\t  [m4_define([AC_PROG_CXX],\n\t\t\t     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_OBJC],\n\t\t  [_AM_DEPENDENCIES([OBJC])],\n\t\t  [m4_define([AC_PROG_OBJC],\n\t\t\t     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_OBJCXX],\n\t\t  [_AM_DEPENDENCIES([OBJCXX])],\n\t\t  [m4_define([AC_PROG_OBJCXX],\n\t\t\t     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl\n])\nAC_REQUIRE([AM_SILENT_RULES])dnl\ndnl The testsuite driver may need to know about EXEEXT, so add the\ndnl 'am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This\ndnl macro is hooked onto _AC_COMPILER_EXEEXT early, see below.\nAC_CONFIG_COMMANDS_PRE(dnl\n[m4_provide_if([_AM_COMPILER_EXEEXT],\n  [AM_CONDITIONAL([am__EXEEXT], [test -n \"$EXEEXT\"])])])dnl\n])\n\ndnl Hook into '_AC_COMPILER_EXEEXT' early to learn its expansion.  Do not\ndnl add the conditional right here, as _AC_COMPILER_EXEEXT may be further\ndnl mangled by Autoconf and run in a shell conditional statement.\nm4_define([_AC_COMPILER_EXEEXT],\nm4_defn([_AC_COMPILER_EXEEXT])[m4_provide([_AM_COMPILER_EXEEXT])])\n\n\n# When config.status generates a header, we must update the stamp-h file.\n# This file resides in the same directory as the config header\n# that is generated.  The stamp files are numbered to have different names.\n\n# Autoconf calls _AC_AM_CONFIG_HEADER_HOOK (when defined) in the\n# loop where config.status creates the headers, so we can generate\n# our stamp files there.\nAC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK],\n[# Compute $1's index in $config_headers.\n_am_arg=$1\n_am_stamp_count=1\nfor _am_header in $config_headers :; do\n  case $_am_header in\n    $_am_arg | $_am_arg:* )\n      break ;;\n    * )\n      _am_stamp_count=`expr $_am_stamp_count + 1` ;;\n  esac\ndone\necho \"timestamp for $_am_arg\" >`AS_DIRNAME([\"$_am_arg\"])`/stamp-h[]$_am_stamp_count])\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_INSTALL_SH\n# ------------------\n# Define $install_sh.\nAC_DEFUN([AM_PROG_INSTALL_SH],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nif test x\"${install_sh}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    install_sh=\"\\${SHELL} '$am_aux_dir/install-sh'\" ;;\n  *)\n    install_sh=\"\\${SHELL} $am_aux_dir/install-sh\"\n  esac\nfi\nAC_SUBST([install_sh])])\n\n# Copyright (C) 2003-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# Check whether the underlying file-system supports filenames\n# with a leading dot.  For instance MS-DOS doesn't.\nAC_DEFUN([AM_SET_LEADING_DOT],\n[rm -rf .tst 2>/dev/null\nmkdir .tst 2>/dev/null\nif test -d .tst; then\n  am__leading_dot=.\nelse\n  am__leading_dot=_\nfi\nrmdir .tst 2>/dev/null\nAC_SUBST([am__leading_dot])])\n\n# Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n# From Jim Meyering\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_MAINTAINER_MODE([DEFAULT-MODE])\n# ----------------------------------\n# Control maintainer-specific portions of Makefiles.\n# Default is to disable them, unless 'enable' is passed literally.\n# For symmetry, 'disable' may be passed as well.  Anyway, the user\n# can override the default with the --enable/--disable switch.\nAC_DEFUN([AM_MAINTAINER_MODE],\n[m4_case(m4_default([$1], [disable]),\n       [enable], [m4_define([am_maintainer_other], [disable])],\n       [disable], [m4_define([am_maintainer_other], [enable])],\n       [m4_define([am_maintainer_other], [enable])\n        m4_warn([syntax], [unexpected argument to AM@&t@_MAINTAINER_MODE: $1])])\nAC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n  dnl maintainer-mode's default is 'disable' unless 'enable' is passed\n  AC_ARG_ENABLE([maintainer-mode],\n    [AS_HELP_STRING([--]am_maintainer_other[-maintainer-mode],\n      am_maintainer_other[ make rules and dependencies not useful\n      (and sometimes confusing) to the casual installer])],\n    [USE_MAINTAINER_MODE=$enableval],\n    [USE_MAINTAINER_MODE=]m4_if(am_maintainer_other, [enable], [no], [yes]))\n  AC_MSG_RESULT([$USE_MAINTAINER_MODE])\n  AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])\n  MAINT=$MAINTAINER_MODE_TRUE\n  AC_SUBST([MAINT])dnl\n]\n)\n\n# Check to see how 'make' treats includes.\t            -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_MAKE_INCLUDE()\n# -----------------\n# Check to see how make treats includes.\nAC_DEFUN([AM_MAKE_INCLUDE],\n[am_make=${MAKE-make}\ncat > confinc << 'END'\nam__doit:\n\t@echo this is the am__doit target\n.PHONY: am__doit\nEND\n# If we don't find an include directive, just comment out the code.\nAC_MSG_CHECKING([for style of include used by $am_make])\nam__include=\"#\"\nam__quote=\n_am_result=none\n# First try GNU make style include.\necho \"include confinc\" > confmf\n# Ignore all kinds of additional output from 'make'.\ncase `$am_make -s -f confmf 2> /dev/null` in #(\n*the\\ am__doit\\ target*)\n  am__include=include\n  am__quote=\n  _am_result=GNU\n  ;;\nesac\n# Now try BSD make style include.\nif test \"$am__include\" = \"#\"; then\n   echo '.include \"confinc\"' > confmf\n   case `$am_make -s -f confmf 2> /dev/null` in #(\n   *the\\ am__doit\\ target*)\n     am__include=.include\n     am__quote=\"\\\"\"\n     _am_result=BSD\n     ;;\n   esac\nfi\nAC_SUBST([am__include])\nAC_SUBST([am__quote])\nAC_MSG_RESULT([$_am_result])\nrm -f confinc confmf\n])\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_CC_C_O\n# --------------\n# Like AC_PROG_CC_C_O, but changed for automake.\nAC_DEFUN([AM_PROG_CC_C_O],\n[AC_REQUIRE([AC_PROG_CC_C_O])dnl\nAC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nAC_REQUIRE_AUX_FILE([compile])dnl\n# FIXME: we rely on the cache variable name because\n# there is no other way.\nset dummy $CC\nam_cc=`echo $[2] | sed ['s/[^a-zA-Z0-9_]/_/g;s/^[0-9]/_/']`\neval am_t=\\$ac_cv_prog_cc_${am_cc}_c_o\nif test \"$am_t\" != yes; then\n   # Losing compiler, so override with the script.\n   # FIXME: It is wrong to rewrite CC.\n   # But if we don't then we get into trouble of one sort or another.\n   # A longer-term fix would be to have automake use am__CC in this case,\n   # and then we could set am__CC=\"\\$(top_srcdir)/compile \\$(CC)\"\n   CC=\"$am_aux_dir/compile $CC\"\nfi\ndnl Make sure AC_PROG_CC is never called again, or it will override our\ndnl setting of CC.\nm4_define([AC_PROG_CC],\n          [m4_fatal([AC_PROG_CC cannot be called after AM_PROG_CC_C_O])])\n])\n\n# Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-\n\n# Copyright (C) 1997-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_MISSING_PROG(NAME, PROGRAM)\n# ------------------------------\nAC_DEFUN([AM_MISSING_PROG],\n[AC_REQUIRE([AM_MISSING_HAS_RUN])\n$1=${$1-\"${am_missing_run}$2\"}\nAC_SUBST($1)])\n\n# AM_MISSING_HAS_RUN\n# ------------------\n# Define MISSING if not defined so far and test if it is modern enough.\n# If it is, set am_missing_run to use it, otherwise, to nothing.\nAC_DEFUN([AM_MISSING_HAS_RUN],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nAC_REQUIRE_AUX_FILE([missing])dnl\nif test x\"${MISSING+set}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    MISSING=\"\\${SHELL} \\\"$am_aux_dir/missing\\\"\" ;;\n  *)\n    MISSING=\"\\${SHELL} $am_aux_dir/missing\" ;;\n  esac\nfi\n# Use eval to expand $SHELL\nif eval \"$MISSING --is-lightweight\"; then\n  am_missing_run=\"$MISSING \"\nelse\n  am_missing_run=\n  AC_MSG_WARN(['missing' script is too old or missing])\nfi\n])\n\n# Helper functions for option handling.                     -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_MANGLE_OPTION(NAME)\n# -----------------------\nAC_DEFUN([_AM_MANGLE_OPTION],\n[[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])\n\n# _AM_SET_OPTION(NAME)\n# --------------------\n# Set option NAME.  Presently that only means defining a flag for this option.\nAC_DEFUN([_AM_SET_OPTION],\n[m4_define(_AM_MANGLE_OPTION([$1]), [1])])\n\n# _AM_SET_OPTIONS(OPTIONS)\n# ------------------------\n# OPTIONS is a space-separated list of Automake options.\nAC_DEFUN([_AM_SET_OPTIONS],\n[m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])\n\n# _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])\n# -------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nAC_DEFUN([_AM_IF_OPTION],\n[m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])\n\n# Check to make sure that the build environment is sane.    -*- Autoconf -*-\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_SANITY_CHECK\n# ---------------\nAC_DEFUN([AM_SANITY_CHECK],\n[AC_MSG_CHECKING([whether build environment is sane])\n# Reject unsafe characters in $srcdir or the absolute working directory\n# name.  Accept space and tab only in the latter.\nam_lf='\n'\ncase `pwd` in\n  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf]]*)\n    AC_MSG_ERROR([unsafe absolute working directory name]);;\nesac\ncase $srcdir in\n  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf\\ \\\t]]*)\n    AC_MSG_ERROR([unsafe srcdir value: '$srcdir']);;\nesac\n\n# Do 'set' in a subshell so we don't clobber the current shell's\n# arguments.  Must try -L first in case configure is actually a\n# symlink; some systems play weird games with the mod time of symlinks\n# (eg FreeBSD returns the mod time of the symlink's containing\n# directory).\nif (\n   am_has_slept=no\n   for am_try in 1 2; do\n     echo \"timestamp, slept: $am_has_slept\" > conftest.file\n     set X `ls -Lt \"$srcdir/configure\" conftest.file 2> /dev/null`\n     if test \"$[*]\" = \"X\"; then\n\t# -L didn't work.\n\tset X `ls -t \"$srcdir/configure\" conftest.file`\n     fi\n     if test \"$[*]\" != \"X $srcdir/configure conftest.file\" \\\n\t&& test \"$[*]\" != \"X conftest.file $srcdir/configure\"; then\n\n\t# If neither matched, then we have a broken ls.  This can happen\n\t# if, for instance, CONFIG_SHELL is bash and it inherits a\n\t# broken ls alias from the environment.  This has actually\n\t# happened.  Such a system could not be considered \"sane\".\n\tAC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken\n  alias in your environment])\n     fi\n     if test \"$[2]\" = conftest.file || test $am_try -eq 2; then\n       break\n     fi\n     # Just in case.\n     sleep 1\n     am_has_slept=yes\n   done\n   test \"$[2]\" = conftest.file\n   )\nthen\n   # Ok.\n   :\nelse\n   AC_MSG_ERROR([newly created file is older than distributed files!\nCheck your system clock])\nfi\nAC_MSG_RESULT([yes])\n# If we didn't sleep, we still need to ensure time stamps of config.status and\n# generated files are strictly newer.\nam_sleep_pid=\nif grep 'slept: no' conftest.file >/dev/null 2>&1; then\n  ( sleep 1 ) &\n  am_sleep_pid=$!\nfi\nAC_CONFIG_COMMANDS_PRE(\n  [AC_MSG_CHECKING([that generated files are newer than configure])\n   if test -n \"$am_sleep_pid\"; then\n     # Hide warnings about reused PIDs.\n     wait $am_sleep_pid 2>/dev/null\n   fi\n   AC_MSG_RESULT([done])])\nrm -f conftest.file\n])\n\n# Copyright (C) 2009-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_SILENT_RULES([DEFAULT])\n# --------------------------\n# Enable less verbose build rules; with the default set to DEFAULT\n# (\"yes\" being less verbose, \"no\" or empty being verbose).\nAC_DEFUN([AM_SILENT_RULES],\n[AC_ARG_ENABLE([silent-rules], [dnl\nAS_HELP_STRING(\n  [--enable-silent-rules],\n  [less verbose build output (undo: \"make V=1\")])\nAS_HELP_STRING(\n  [--disable-silent-rules],\n  [verbose build output (undo: \"make V=0\")])dnl\n])\ncase $enable_silent_rules in @%:@ (((\n  yes) AM_DEFAULT_VERBOSITY=0;;\n   no) AM_DEFAULT_VERBOSITY=1;;\n    *) AM_DEFAULT_VERBOSITY=m4_if([$1], [yes], [0], [1]);;\nesac\ndnl\ndnl A few 'make' implementations (e.g., NonStop OS and NextStep)\ndnl do not support nested variable expansions.\ndnl See automake bug#9928 and bug#10237.\nam_make=${MAKE-make}\nAC_CACHE_CHECK([whether $am_make supports nested variables],\n   [am_cv_make_support_nested_variables],\n   [if AS_ECHO([['TRUE=$(BAR$(V))\nBAR0=false\nBAR1=true\nV=1\nam__doit:\n\t@$(TRUE)\n.PHONY: am__doit']]) | $am_make -f - >/dev/null 2>&1; then\n  am_cv_make_support_nested_variables=yes\nelse\n  am_cv_make_support_nested_variables=no\nfi])\nif test $am_cv_make_support_nested_variables = yes; then\n  dnl Using '$V' instead of '$(V)' breaks IRIX make.\n  AM_V='$(V)'\n  AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'\nelse\n  AM_V=$AM_DEFAULT_VERBOSITY\n  AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY\nfi\nAC_SUBST([AM_V])dnl\nAM_SUBST_NOTMAKE([AM_V])dnl\nAC_SUBST([AM_DEFAULT_V])dnl\nAM_SUBST_NOTMAKE([AM_DEFAULT_V])dnl\nAC_SUBST([AM_DEFAULT_VERBOSITY])dnl\nAM_BACKSLASH='\\'\nAC_SUBST([AM_BACKSLASH])dnl\n_AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl\n])\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_INSTALL_STRIP\n# ---------------------\n# One issue with vendor 'install' (even GNU) is that you can't\n# specify the program used to strip binaries.  This is especially\n# annoying in cross-compiling environments, where the build's strip\n# is unlikely to handle the host's binaries.\n# Fortunately install-sh will honor a STRIPPROG variable, so we\n# always use install-sh in \"make install-strip\", and initialize\n# STRIPPROG with the value of the STRIP variable (set by the user).\nAC_DEFUN([AM_PROG_INSTALL_STRIP],\n[AC_REQUIRE([AM_PROG_INSTALL_SH])dnl\n# Installed binaries are usually stripped using 'strip' when the user\n# run \"make install-strip\".  However 'strip' might not be the right\n# tool to use in cross-compilation environments, therefore Automake\n# will honor the 'STRIP' environment variable to overrule this program.\ndnl Don't test for $cross_compiling = yes, because it might be 'maybe'.\nif test \"$cross_compiling\" != no; then\n  AC_CHECK_TOOL([STRIP], [strip], :)\nfi\nINSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"\nAC_SUBST([INSTALL_STRIP_PROGRAM])])\n\n# Copyright (C) 2006-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_SUBST_NOTMAKE(VARIABLE)\n# ---------------------------\n# Prevent Automake from outputting VARIABLE = @VARIABLE@ in Makefile.in.\n# This macro is traced by Automake.\nAC_DEFUN([_AM_SUBST_NOTMAKE])\n\n# AM_SUBST_NOTMAKE(VARIABLE)\n# --------------------------\n# Public sister of _AM_SUBST_NOTMAKE.\nAC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n\n# Check how to create a tarball.                            -*- Autoconf -*-\n\n# Copyright (C) 2004-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_PROG_TAR(FORMAT)\n# --------------------\n# Check how to create a tarball in format FORMAT.\n# FORMAT should be one of 'v7', 'ustar', or 'pax'.\n#\n# Substitute a variable $(am__tar) that is a command\n# writing to stdout a FORMAT-tarball containing the directory\n# $tardir.\n#     tardir=directory && $(am__tar) > result.tar\n#\n# Substitute a variable $(am__untar) that extract such\n# a tarball read from stdin.\n#     $(am__untar) < result.tar\n#\nAC_DEFUN([_AM_PROG_TAR],\n[# Always define AMTAR for backward compatibility.  Yes, it's still used\n# in the wild :-(  We should find a proper way to deprecate it ...\nAC_SUBST([AMTAR], ['$${TAR-tar}'])\n\n# We'll loop over all known methods to create a tar archive until one works.\n_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'\n\nm4_if([$1], [v7],\n  [am__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'],\n\n  [m4_case([$1],\n    [ustar],\n     [# The POSIX 1988 'ustar' format is defined with fixed-size fields.\n      # There is notably a 21 bits limit for the UID and the GID.  In fact,\n      # the 'pax' utility can hang on bigger UID/GID (see automake bug#8343\n      # and bug#13588).\n      am_max_uid=2097151 # 2^21 - 1\n      am_max_gid=$am_max_uid\n      # The $UID and $GID variables are not portable, so we need to resort\n      # to the POSIX-mandated id(1) utility.  Errors in the 'id' calls\n      # below are definitely unexpected, so allow the users to see them\n      # (that is, avoid stderr redirection).\n      am_uid=`id -u || echo unknown`\n      am_gid=`id -g || echo unknown`\n      AC_MSG_CHECKING([whether UID '$am_uid' is supported by ustar format])\n      if test $am_uid -le $am_max_uid; then\n         AC_MSG_RESULT([yes])\n      else\n         AC_MSG_RESULT([no])\n         _am_tools=none\n      fi\n      AC_MSG_CHECKING([whether GID '$am_gid' is supported by ustar format])\n      if test $am_gid -le $am_max_gid; then\n         AC_MSG_RESULT([yes])\n      else\n        AC_MSG_RESULT([no])\n        _am_tools=none\n      fi],\n\n  [pax],\n    [],\n\n  [m4_fatal([Unknown tar format])])\n\n  AC_MSG_CHECKING([how to create a $1 tar archive])\n\n  # Go ahead even if we have the value already cached.  We do so because we\n  # need to set the values for the 'am__tar' and 'am__untar' variables.\n  _am_tools=${am_cv_prog_tar_$1-$_am_tools}\n\n  for _am_tool in $_am_tools; do\n    case $_am_tool in\n    gnutar)\n      for _am_tar in tar gnutar gtar; do\n        AM_RUN_LOG([$_am_tar --version]) && break\n      done\n      am__tar=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$$tardir\"'\n      am__tar_=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$tardir\"'\n      am__untar=\"$_am_tar -xf -\"\n      ;;\n    plaintar)\n      # Must skip GNU tar: if it does not support --format= it doesn't create\n      # ustar tarball either.\n      (tar --version) >/dev/null 2>&1 && continue\n      am__tar='tar chf - \"$$tardir\"'\n      am__tar_='tar chf - \"$tardir\"'\n      am__untar='tar xf -'\n      ;;\n    pax)\n      am__tar='pax -L -x $1 -w \"$$tardir\"'\n      am__tar_='pax -L -x $1 -w \"$tardir\"'\n      am__untar='pax -r'\n      ;;\n    cpio)\n      am__tar='find \"$$tardir\" -print | cpio -o -H $1 -L'\n      am__tar_='find \"$tardir\" -print | cpio -o -H $1 -L'\n      am__untar='cpio -i -H $1 -d'\n      ;;\n    none)\n      am__tar=false\n      am__tar_=false\n      am__untar=false\n      ;;\n    esac\n\n    # If the value was cached, stop now.  We just wanted to have am__tar\n    # and am__untar set.\n    test -n \"${am_cv_prog_tar_$1}\" && break\n\n    # tar/untar a dummy directory, and stop if the command works.\n    rm -rf conftest.dir\n    mkdir conftest.dir\n    echo GrepMe > conftest.dir/file\n    AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])\n    rm -rf conftest.dir\n    if test -s conftest.tar; then\n      AM_RUN_LOG([$am__untar <conftest.tar])\n      AM_RUN_LOG([cat conftest.dir/file])\n      grep GrepMe conftest.dir/file >/dev/null 2>&1 && break\n    fi\n  done\n  rm -rf conftest.dir\n\n  AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])\n  AC_MSG_RESULT([$am_cv_prog_tar_$1])])\n\nAC_SUBST([am__tar])\nAC_SUBST([am__untar])\n]) # _AM_PROG_TAR\n\nm4_include([m4/asmcfi.m4])\nm4_include([m4/ax_append_flag.m4])\nm4_include([m4/ax_cc_maxopt.m4])\nm4_include([m4/ax_cflags_warn_all.m4])\nm4_include([m4/ax_check_compile_flag.m4])\nm4_include([m4/ax_compiler_vendor.m4])\nm4_include([m4/ax_configure_args.m4])\nm4_include([m4/ax_enable_builddir.m4])\nm4_include([m4/ax_gcc_archflag.m4])\nm4_include([m4/ax_gcc_x86_cpuid.m4])\nm4_include([m4/libtool.m4])\nm4_include([m4/ltoptions.m4])\nm4_include([m4/ltsugar.m4])\nm4_include([m4/ltversion.m4])\nm4_include([m4/lt~obsolete.m4])\nm4_include([acinclude.m4])\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Modules/_ctypes/libffi/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2013 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow overriding them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisbility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test yes = \"$aix_use_runtimelinking\"; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=.dll\n  need_lib_prefix=no\n  library_names_spec='$libname$shared_ext $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    # Also, AIX nm treats weak defined symbols like other global defined\n    # symbols, whereas GNU nm marks them as \"W\".\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\t# Also, AIX nm treats weak defined symbols like other global\n\t# defined symbols, whereas GNU nm marks them as \"W\".\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test yes = \"$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs $wl-bnoentry $compiler_flags $wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~echo DATA >> $output_objdir/$libname.def~echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\" && test no = \"$aix_use_runtimelinking\"; then\n      test yes = \"$enable_shared\" && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test yes = \"$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs $wl-bnoentry $compiler_flags $wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test yes != \"$solaris_use_stlport4\"; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC* | sunCC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test yes != \"$solaris_use_stlport4\"; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\" && test no = \"$aix_use_runtimelinking\"; then\n\t  test yes = \"$enable_shared\" && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\" && test no = \"$aix_use_runtimelinking\"; then\n\t  test yes = \"$enable_shared\" && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Modules/_ctypes/libffi/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2013 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/ensurepip/_bundled/pip-9.0.1-py2.py3-none-any.whl",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/ensurepip/_bundled/setuptools-28.8.0-py2.py3-none-any.whl",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/sqlite3/test/transactions.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/sqlite3/test/hooks.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/sqlite3/test/types.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/sqlite3/test/factory.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/sqlite3/test/dbapi.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/sqlite3/test/userfunctions.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/sqlite3/test/regression.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/idle.ico",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/plusnode.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/idle_32.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/idle_48.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/idle_16.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/folder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/openfolder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/minusnode.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/tk.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/python.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/idle.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/idle_48.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/idle_32.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/idlelib/Icons/idle_16.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/testtar.tar",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/zip_cp437_header.zip",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/pstats.pck",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/zipdir.zip",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/badsyntax_pep3120.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/sgml_input.html",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/Sine-1000Hz-300ms.aif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiotest.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/test_source_encoding.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/sndhdrdata/sndhdr.voc",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/sndhdrdata/sndhdr.wav",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/sndhdrdata/sndhdr.8svx",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/sndhdrdata/sndhdr.aifc",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/sndhdrdata/sndhdr.sndt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/sndhdrdata/sndhdr.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/sndhdrdata/sndhdr.aiff",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/sndhdrdata/sndhdr.hcom",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm8.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm24.wav",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm8.wav",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm24.aiff",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm8.aiff",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-alaw.aifc",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm16.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-ulaw.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm32.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm32.aiff",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm16.wav",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm24.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-ulaw.aifc",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm32.wav",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/audiodata/pluck-pcm16.aiff",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/encoded_modules/module_iso_8859_1.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/encoded_modules/module_koi8_r.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/test_importlib/namespace_pkgs/top_level_portion1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/test_importlib/namespace_pkgs/nested_portion1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/test_importlib/namespace_pkgs/missing_directory.zip",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/johab.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/shift_jis.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/gb18030.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/euc_jp.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/big5.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/euc_jisx0213.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/big5hkscs.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/euc_kr.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/shift_jisx0213.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/gb2312.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/gbk.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/cjkencodings/cp949.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/test_email/data/PyBanner048.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/test_email/data/audiotest.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.ppm",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.pbm",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.exr",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.ras",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.pgm",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.webp",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/imghdrdata/python.sgi",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/xmltestdata/test.xml",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/test/xmltestdata/test.xml.out",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/distutils/command/wininst-9.0.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/distutils/command/wininst-8.0.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/distutils/command/wininst-10.0.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/distutils/command/wininst-6.0.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/distutils/command/wininst-14.0.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/distutils/command/wininst-7.1.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/distutils/command/wininst-10.0-amd64.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/distutils/command/wininst-14.0-amd64.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Lib/distutils/command/wininst-9.0-amd64.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/BuildScript/resources/background.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/IDLE/IDLE.app/Contents/Resources/PythonSource.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/IDLE/IDLE.app/Contents/Resources/PythonCompiled.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/IDLE/IDLE.app/Contents/Resources/IDLE.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Resources/app/Resources/PythonApplet.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Resources/app/Resources/PythonInterpreter.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Resources/iconsrc/IDE.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Resources/iconsrc/PythonApplet.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Resources/iconsrc/PythonSource.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Resources/iconsrc/PackageManager.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Resources/iconsrc/PythonCompiled.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Resources/iconsrc/PythonWSource.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Resources/iconsrc/PythonIcon.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/PythonLauncher/English.lproj/MyDocument.nib/objects.nib",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/PythonLauncher/English.lproj/MainMenu.nib/objects.nib",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/PythonLauncher/English.lproj/PreferenceWindow.nib/objects.nib",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Icons/Python Folder.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Icons/PythonSource.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Icons/Disk Image.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Icons/PythonLauncher.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Icons/PythonCompiled.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Mac/Icons/IDLE.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Tools/test2to3/setup.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Tools/msi/bundle/bundle.ico",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Tools/msi/bundle/SideBar.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Tools/i18n/pygettext.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Objects/listsort.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/library/turtle-star.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/library/depgraph-output.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/library/tulip_coro.dia",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/library/tulip_coro.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/library/turtle-star.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/library/pathlib-inheritance.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/howto/logging_flow.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/using/win_installer.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/tools/static/py.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/Doc/faq/python-video-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/PC/py.ico",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/PC/launcher.ico",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/PC/pyc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/PC/pycon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.5.5-25t27ulap6lzytllqcu45aig7rpynuhs/spack-src/PC/bdist_wininst/PythonPowered.bmp"
    ],
    "total_files": 3942
}