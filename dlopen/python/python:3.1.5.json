{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/pyconfig.h.in": "/* pyconfig.h.in.  Generated from configure.ac by autoheader.  */\n\n\n#ifndef Py_PYCONFIG_H\n#define Py_PYCONFIG_H\n\n\n/* Define if building universal (internal helper macro) */\n#undef AC_APPLE_UNIVERSAL_BUILD\n\n/* Define for AIX if your compiler is a genuine IBM xlC/xlC_r and you want\n   support for AIX C++ shared extension modules. */\n#undef AIX_GENUINE_CPLUSPLUS\n\n/* Define this if you have AtheOS threads. */\n#undef ATHEOS_THREADS\n\n/* Define if you have the Mach cthreads package */\n#undef C_THREADS\n\n/* Define if C doubles are 64-bit IEEE 754 binary format, stored in ARM\n   mixed-endian order (byte order 45670123) */\n#undef DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754\n\n/* Define if C doubles are 64-bit IEEE 754 binary format, stored with the most\n   significant byte first */\n#undef DOUBLE_IS_BIG_ENDIAN_IEEE754\n\n/* Define if C doubles are 64-bit IEEE 754 binary format, stored with the\n   least significant byte first */\n#undef DOUBLE_IS_LITTLE_ENDIAN_IEEE754\n\n/* Define if --enable-ipv6 is specified */\n#undef ENABLE_IPV6\n\n/* Define if flock needs to be linked with bsd library. */\n#undef FLOCK_NEEDS_LIBBSD\n\n/* Define if getpgrp() must be called as getpgrp(0). */\n#undef GETPGRP_HAVE_ARG\n\n/* Define if gettimeofday() does not have second (timezone) argument This is\n   the case on Motorola V4 (R40V4.2) */\n#undef GETTIMEOFDAY_NO_TZ\n\n/* Define to 1 if you have the `acosh' function. */\n#undef HAVE_ACOSH\n\n/* struct addrinfo (netdb.h) */\n#undef HAVE_ADDRINFO\n\n/* Define to 1 if you have the `alarm' function. */\n#undef HAVE_ALARM\n\n/* Define this if your time.h defines altzone. */\n#undef HAVE_ALTZONE\n\n/* Define to 1 if you have the `asinh' function. */\n#undef HAVE_ASINH\n\n/* Define to 1 if you have the <asm/types.h> header file. */\n#undef HAVE_ASM_TYPES_H\n\n/* Define to 1 if you have the `atanh' function. */\n#undef HAVE_ATANH\n\n/* Define if GCC supports __attribute__((format(PyArg_ParseTuple, 2, 3))) */\n#undef HAVE_ATTRIBUTE_FORMAT_PARSETUPLE\n\n/* Define to 1 if you have the `bind_textdomain_codeset' function. */\n#undef HAVE_BIND_TEXTDOMAIN_CODESET\n\n/* Define to 1 if you have the <bluetooth/bluetooth.h> header file. */\n#undef HAVE_BLUETOOTH_BLUETOOTH_H\n\n/* Define to 1 if you have the <bluetooth.h> header file. */\n#undef HAVE_BLUETOOTH_H\n\n/* Define if mbstowcs(NULL, \"text\", 0) does not return the number of wide\n   chars that would be converted. */\n#undef HAVE_BROKEN_MBSTOWCS\n\n/* Define if nice() returns success/failure instead of the new priority. */\n#undef HAVE_BROKEN_NICE\n\n/* Define if poll() sets errno on invalid file descriptors. */\n#undef HAVE_BROKEN_POLL\n\n/* Define if the Posix semaphores do not work on your system */\n#undef HAVE_BROKEN_POSIX_SEMAPHORES\n\n/* Define if pthread_sigmask() does not work on your system. */\n#undef HAVE_BROKEN_PTHREAD_SIGMASK\n\n/* define to 1 if your sem_getvalue is broken. */\n#undef HAVE_BROKEN_SEM_GETVALUE\n\n/* Define this if you have the type _Bool. */\n#undef HAVE_C99_BOOL\n\n/* Define to 1 if you have the `chflags' function. */\n#undef HAVE_CHFLAGS\n\n/* Define to 1 if you have the `chown' function. */\n#undef HAVE_CHOWN\n\n/* Define if you have the 'chroot' function. */\n#undef HAVE_CHROOT\n\n/* Define to 1 if you have the `clock' function. */\n#undef HAVE_CLOCK\n\n/* Define to 1 if you have the `confstr' function. */\n#undef HAVE_CONFSTR\n\n/* Define to 1 if you have the <conio.h> header file. */\n#undef HAVE_CONIO_H\n\n/* Define to 1 if you have the `copysign' function. */\n#undef HAVE_COPYSIGN\n\n/* Define to 1 if you have the `ctermid' function. */\n#undef HAVE_CTERMID\n\n/* Define if you have the 'ctermid_r' function. */\n#undef HAVE_CTERMID_R\n\n/* Define to 1 if you have the <curses.h> header file. */\n#undef HAVE_CURSES_H\n\n/* Define if you have the 'is_term_resized' function. */\n#undef HAVE_CURSES_IS_TERM_RESIZED\n\n/* Define if you have the 'resizeterm' function. */\n#undef HAVE_CURSES_RESIZETERM\n\n/* Define if you have the 'resize_term' function. */\n#undef HAVE_CURSES_RESIZE_TERM\n\n/* Define to 1 if you have the declaration of `isfinite', and to 0 if you\n   don't. */\n#undef HAVE_DECL_ISFINITE\n\n/* Define to 1 if you have the declaration of `isinf', and to 0 if you don't.\n   */\n#undef HAVE_DECL_ISINF\n\n/* Define to 1 if you have the declaration of `isnan', and to 0 if you don't.\n   */\n#undef HAVE_DECL_ISNAN\n\n/* Define to 1 if you have the declaration of `tzname', and to 0 if you don't.\n   */\n#undef HAVE_DECL_TZNAME\n\n/* Define to 1 if you have the device macros. */\n#undef HAVE_DEVICE_MACROS\n\n/* Define if we have /dev/ptc. */\n#undef HAVE_DEV_PTC\n\n/* Define if we have /dev/ptmx. */\n#undef HAVE_DEV_PTMX\n\n/* Define to 1 if you have the <direct.h> header file. */\n#undef HAVE_DIRECT_H\n\n/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_DIRENT_H\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#undef HAVE_DLFCN_H\n\n/* Define to 1 if you have the `dlopen' function. */\n#undef HAVE_DLOPEN\n\n/* Define to 1 if you have the `dup2' function. */\n#undef HAVE_DUP2\n\n/* Defined when any dynamic module loading is enabled. */\n#undef HAVE_DYNAMIC_LOADING\n\n/* Define if you have the 'epoll' functions. */\n#undef HAVE_EPOLL\n\n/* Define to 1 if you have the <errno.h> header file. */\n#undef HAVE_ERRNO_H\n\n/* Define to 1 if you have the `execv' function. */\n#undef HAVE_EXECV\n\n/* Define to 1 if you have the `expm1' function. */\n#undef HAVE_EXPM1\n\n/* Define if you have the 'fchdir' function. */\n#undef HAVE_FCHDIR\n\n/* Define to 1 if you have the `fchmod' function. */\n#undef HAVE_FCHMOD\n\n/* Define to 1 if you have the `fchown' function. */\n#undef HAVE_FCHOWN\n\n/* Define to 1 if you have the <fcntl.h> header file. */\n#undef HAVE_FCNTL_H\n\n/* Define if you have the 'fdatasync' function. */\n#undef HAVE_FDATASYNC\n\n/* Define to 1 if you have the `finite' function. */\n#undef HAVE_FINITE\n\n/* Define to 1 if you have the `flock' function. */\n#undef HAVE_FLOCK\n\n/* Define to 1 if you have the `fork' function. */\n#undef HAVE_FORK\n\n/* Define to 1 if you have the `forkpty' function. */\n#undef HAVE_FORKPTY\n\n/* Define to 1 if you have the `fpathconf' function. */\n#undef HAVE_FPATHCONF\n\n/* Define to 1 if you have the `fseek64' function. */\n#undef HAVE_FSEEK64\n\n/* Define to 1 if you have the `fseeko' function. */\n#undef HAVE_FSEEKO\n\n/* Define to 1 if you have the `fstatvfs' function. */\n#undef HAVE_FSTATVFS\n\n/* Define if you have the 'fsync' function. */\n#undef HAVE_FSYNC\n\n/* Define to 1 if you have the `ftell64' function. */\n#undef HAVE_FTELL64\n\n/* Define to 1 if you have the `ftello' function. */\n#undef HAVE_FTELLO\n\n/* Define to 1 if you have the `ftime' function. */\n#undef HAVE_FTIME\n\n/* Define to 1 if you have the `ftruncate' function. */\n#undef HAVE_FTRUNCATE\n\n/* Define to 1 if you have the `gai_strerror' function. */\n#undef HAVE_GAI_STRERROR\n\n/* Define if we can use gcc inline assembler to get and set x87 control word\n   */\n#undef HAVE_GCC_ASM_FOR_X87\n\n/* Define if you have the getaddrinfo function. */\n#undef HAVE_GETADDRINFO\n\n/* Define to 1 if you have the `getcwd' function. */\n#undef HAVE_GETCWD\n\n/* Define this if you have flockfile(), getc_unlocked(), and funlockfile() */\n#undef HAVE_GETC_UNLOCKED\n\n/* Define to 1 if you have the `getgroups' function. */\n#undef HAVE_GETGROUPS\n\n/* Define to 1 if you have the `gethostbyname' function. */\n#undef HAVE_GETHOSTBYNAME\n\n/* Define this if you have some version of gethostbyname_r() */\n#undef HAVE_GETHOSTBYNAME_R\n\n/* Define this if you have the 3-arg version of gethostbyname_r(). */\n#undef HAVE_GETHOSTBYNAME_R_3_ARG\n\n/* Define this if you have the 5-arg version of gethostbyname_r(). */\n#undef HAVE_GETHOSTBYNAME_R_5_ARG\n\n/* Define this if you have the 6-arg version of gethostbyname_r(). */\n#undef HAVE_GETHOSTBYNAME_R_6_ARG\n\n/* Define to 1 if you have the `getitimer' function. */\n#undef HAVE_GETITIMER\n\n/* Define to 1 if you have the `getloadavg' function. */\n#undef HAVE_GETLOADAVG\n\n/* Define to 1 if you have the `getlogin' function. */\n#undef HAVE_GETLOGIN\n\n/* Define to 1 if you have the `getnameinfo' function. */\n#undef HAVE_GETNAMEINFO\n\n/* Define if you have the 'getpagesize' function. */\n#undef HAVE_GETPAGESIZE\n\n/* Define to 1 if you have the `getpeername' function. */\n#undef HAVE_GETPEERNAME\n\n/* Define to 1 if you have the `getpgid' function. */\n#undef HAVE_GETPGID\n\n/* Define to 1 if you have the `getpgrp' function. */\n#undef HAVE_GETPGRP\n\n/* Define to 1 if you have the `getpid' function. */\n#undef HAVE_GETPID\n\n/* Define to 1 if you have the `getpriority' function. */\n#undef HAVE_GETPRIORITY\n\n/* Define to 1 if you have the `getpwent' function. */\n#undef HAVE_GETPWENT\n\n/* Define to 1 if you have the `getsid' function. */\n#undef HAVE_GETSID\n\n/* Define to 1 if you have the `getspent' function. */\n#undef HAVE_GETSPENT\n\n/* Define to 1 if you have the `getspnam' function. */\n#undef HAVE_GETSPNAM\n\n/* Define to 1 if you have the `gettimeofday' function. */\n#undef HAVE_GETTIMEOFDAY\n\n/* Define to 1 if you have the `getwd' function. */\n#undef HAVE_GETWD\n\n/* Define to 1 if you have the <grp.h> header file. */\n#undef HAVE_GRP_H\n\n/* Define if you have the 'hstrerror' function. */\n#undef HAVE_HSTRERROR\n\n/* Define to 1 if you have the `hypot' function. */\n#undef HAVE_HYPOT\n\n/* Define to 1 if you have the <ieeefp.h> header file. */\n#undef HAVE_IEEEFP_H\n\n/* Define if you have the 'inet_aton' function. */\n#undef HAVE_INET_ATON\n\n/* Define if you have the 'inet_pton' function. */\n#undef HAVE_INET_PTON\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#undef HAVE_INTTYPES_H\n\n/* Define to 1 if you have the <io.h> header file. */\n#undef HAVE_IO_H\n\n/* Define to 1 if you have the `kill' function. */\n#undef HAVE_KILL\n\n/* Define to 1 if you have the `killpg' function. */\n#undef HAVE_KILLPG\n\n/* Define if you have the 'kqueue' functions. */\n#undef HAVE_KQUEUE\n\n/* Define to 1 if you have the <langinfo.h> header file. */\n#undef HAVE_LANGINFO_H\n\n/* Defined to enable large file support when an off_t is bigger than a long\n   and long long is available and at least as big as an off_t. You may need to\n   add some flags for configuration and compilation to enable this mode. (For\n   Solaris and Linux, the necessary defines are already defined.) */\n#undef HAVE_LARGEFILE_SUPPORT\n\n/* Define to 1 if you have the `lchflags' function. */\n#undef HAVE_LCHFLAGS\n\n/* Define to 1 if you have the `lchmod' function. */\n#undef HAVE_LCHMOD\n\n/* Define to 1 if you have the `lchown' function. */\n#undef HAVE_LCHOWN\n\n/* Define to 1 if you have the `dl' library (-ldl). */\n#undef HAVE_LIBDL\n\n/* Define to 1 if you have the `dld' library (-ldld). */\n#undef HAVE_LIBDLD\n\n/* Define to 1 if you have the `ieee' library (-lieee). */\n#undef HAVE_LIBIEEE\n\n/* Define to 1 if you have the <libintl.h> header file. */\n#undef HAVE_LIBINTL_H\n\n/* Define if you have the readline library (-lreadline). */\n#undef HAVE_LIBREADLINE\n\n/* Define to 1 if you have the `resolv' library (-lresolv). */\n#undef HAVE_LIBRESOLV\n\n/* Define to 1 if you have the <libutil.h> header file. */\n#undef HAVE_LIBUTIL_H\n\n/* Define if you have the 'link' function. */\n#undef HAVE_LINK\n\n/* Define to 1 if you have the <linux/netlink.h> header file. */\n#undef HAVE_LINUX_NETLINK_H\n\n/* Define to 1 if you have the <linux/tipc.h> header file. */\n#undef HAVE_LINUX_TIPC_H\n\n/* Define to 1 if you have the `log1p' function. */\n#undef HAVE_LOG1P\n\n/* Define this if you have the type long double. */\n#undef HAVE_LONG_DOUBLE\n\n/* Define this if you have the type long long. */\n#undef HAVE_LONG_LONG\n\n/* Define to 1 if you have the `lstat' function. */\n#undef HAVE_LSTAT\n\n/* Define this if you have the makedev macro. */\n#undef HAVE_MAKEDEV\n\n/* Define to 1 if you have the `mbrtowc' function. */\n#undef HAVE_MBRTOWC\n\n/* Define to 1 if you have the `memmove' function. */\n#undef HAVE_MEMMOVE\n\n/* Define to 1 if you have the <memory.h> header file. */\n#undef HAVE_MEMORY_H\n\n/* Define to 1 if you have the `mkfifo' function. */\n#undef HAVE_MKFIFO\n\n/* Define to 1 if you have the `mknod' function. */\n#undef HAVE_MKNOD\n\n/* Define to 1 if you have the `mktime' function. */\n#undef HAVE_MKTIME\n\n/* Define to 1 if you have the `mremap' function. */\n#undef HAVE_MREMAP\n\n/* Define to 1 if you have the <ncurses.h> header file. */\n#undef HAVE_NCURSES_H\n\n/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */\n#undef HAVE_NDIR_H\n\n/* Define to 1 if you have the <netpacket/packet.h> header file. */\n#undef HAVE_NETPACKET_PACKET_H\n\n/* Define to 1 if you have the `nice' function. */\n#undef HAVE_NICE\n\n/* Define to 1 if you have the `openpty' function. */\n#undef HAVE_OPENPTY\n\n/* Define if compiling using MacOS X 10.5 SDK or later. */\n#undef HAVE_OSX105_SDK\n\n/* Define to 1 if you have the `pathconf' function. */\n#undef HAVE_PATHCONF\n\n/* Define to 1 if you have the `pause' function. */\n#undef HAVE_PAUSE\n\n/* Define to 1 if you have the `plock' function. */\n#undef HAVE_PLOCK\n\n/* Define to 1 if you have the `poll' function. */\n#undef HAVE_POLL\n\n/* Define to 1 if you have the <poll.h> header file. */\n#undef HAVE_POLL_H\n\n/* Define to 1 if you have the <process.h> header file. */\n#undef HAVE_PROCESS_H\n\n/* Define if your compiler supports function prototype */\n#undef HAVE_PROTOTYPES\n\n/* Define if you have GNU PTH threads. */\n#undef HAVE_PTH\n\n/* Defined for Solaris 2.6 bug in pthread header. */\n#undef HAVE_PTHREAD_DESTRUCTOR\n\n/* Define to 1 if you have the <pthread.h> header file. */\n#undef HAVE_PTHREAD_H\n\n/* Define to 1 if you have the `pthread_init' function. */\n#undef HAVE_PTHREAD_INIT\n\n/* Define to 1 if you have the `pthread_sigmask' function. */\n#undef HAVE_PTHREAD_SIGMASK\n\n/* Define to 1 if you have the <pty.h> header file. */\n#undef HAVE_PTY_H\n\n/* Define to 1 if you have the `putenv' function. */\n#undef HAVE_PUTENV\n\n/* Define to 1 if you have the `readlink' function. */\n#undef HAVE_READLINK\n\n/* Define to 1 if you have the `realpath' function. */\n#undef HAVE_REALPATH\n\n/* Define if you have readline 2.1 */\n#undef HAVE_RL_CALLBACK\n\n/* Define if you can turn off readline's signal handling. */\n#undef HAVE_RL_CATCH_SIGNAL\n\n/* Define if you have readline 2.2 */\n#undef HAVE_RL_COMPLETION_APPEND_CHARACTER\n\n/* Define if you have readline 4.0 */\n#undef HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK\n\n/* Define if you have readline 4.2 */\n#undef HAVE_RL_COMPLETION_MATCHES\n\n/* Define if you have rl_completion_suppress_append */\n#undef HAVE_RL_COMPLETION_SUPPRESS_APPEND\n\n/* Define if you have readline 4.0 */\n#undef HAVE_RL_PRE_INPUT_HOOK\n\n/* Define to 1 if you have the `round' function. */\n#undef HAVE_ROUND\n\n/* Define to 1 if you have the `select' function. */\n#undef HAVE_SELECT\n\n/* Define to 1 if you have the `sem_getvalue' function. */\n#undef HAVE_SEM_GETVALUE\n\n/* Define to 1 if you have the `sem_open' function. */\n#undef HAVE_SEM_OPEN\n\n/* Define to 1 if you have the `sem_timedwait' function. */\n#undef HAVE_SEM_TIMEDWAIT\n\n/* Define to 1 if you have the `sem_unlink' function. */\n#undef HAVE_SEM_UNLINK\n\n/* Define to 1 if you have the `setegid' function. */\n#undef HAVE_SETEGID\n\n/* Define to 1 if you have the `seteuid' function. */\n#undef HAVE_SETEUID\n\n/* Define to 1 if you have the `setgid' function. */\n#undef HAVE_SETGID\n\n/* Define if you have the 'setgroups' function. */\n#undef HAVE_SETGROUPS\n\n/* Define to 1 if you have the `setitimer' function. */\n#undef HAVE_SETITIMER\n\n/* Define to 1 if you have the `setlocale' function. */\n#undef HAVE_SETLOCALE\n\n/* Define to 1 if you have the `setpgid' function. */\n#undef HAVE_SETPGID\n\n/* Define to 1 if you have the `setpgrp' function. */\n#undef HAVE_SETPGRP\n\n/* Define to 1 if you have the `setregid' function. */\n#undef HAVE_SETREGID\n\n/* Define to 1 if you have the `setreuid' function. */\n#undef HAVE_SETREUID\n\n/* Define to 1 if you have the `setsid' function. */\n#undef HAVE_SETSID\n\n/* Define to 1 if you have the `setuid' function. */\n#undef HAVE_SETUID\n\n/* Define to 1 if you have the `setvbuf' function. */\n#undef HAVE_SETVBUF\n\n/* Define to 1 if you have the <shadow.h> header file. */\n#undef HAVE_SHADOW_H\n\n/* Define to 1 if you have the `sigaction' function. */\n#undef HAVE_SIGACTION\n\n/* Define to 1 if you have the `siginterrupt' function. */\n#undef HAVE_SIGINTERRUPT\n\n/* Define to 1 if you have the <signal.h> header file. */\n#undef HAVE_SIGNAL_H\n\n/* Define to 1 if you have the `sigrelse' function. */\n#undef HAVE_SIGRELSE\n\n/* Define to 1 if you have the `snprintf' function. */\n#undef HAVE_SNPRINTF\n\n/* Define if sockaddr has sa_len member */\n#undef HAVE_SOCKADDR_SA_LEN\n\n/* struct sockaddr_storage (sys/socket.h) */\n#undef HAVE_SOCKADDR_STORAGE\n\n/* Define if you have the 'socketpair' function. */\n#undef HAVE_SOCKETPAIR\n\n/* Define if your compiler provides ssize_t */\n#undef HAVE_SSIZE_T\n\n/* Define to 1 if you have the `statvfs' function. */\n#undef HAVE_STATVFS\n\n/* Define if you have struct stat.st_mtim.tv_nsec */\n#undef HAVE_STAT_TV_NSEC\n\n/* Define if you have struct stat.st_mtimensec */\n#undef HAVE_STAT_TV_NSEC2\n\n/* Define if your compiler supports variable length function prototypes (e.g.\n   void fprintf(FILE *, char *, ...);) *and* <stdarg.h> */\n#undef HAVE_STDARG_PROTOTYPES\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#undef HAVE_STDINT_H\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#undef HAVE_STDLIB_H\n\n/* Define to 1 if you have the `strdup' function. */\n#undef HAVE_STRDUP\n\n/* Define to 1 if you have the `strftime' function. */\n#undef HAVE_STRFTIME\n\n/* Define to 1 if you have the <strings.h> header file. */\n#undef HAVE_STRINGS_H\n\n/* Define to 1 if you have the <string.h> header file. */\n#undef HAVE_STRING_H\n\n/* Define to 1 if you have the `strlcpy' function. */\n#undef HAVE_STRLCPY\n\n/* Define to 1 if you have the <stropts.h> header file. */\n#undef HAVE_STROPTS_H\n\n/* Define to 1 if `st_birthtime' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_BIRTHTIME\n\n/* Define to 1 if `st_blksize' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_BLKSIZE\n\n/* Define to 1 if `st_blocks' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_BLOCKS\n\n/* Define to 1 if `st_flags' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_FLAGS\n\n/* Define to 1 if `st_gen' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_GEN\n\n/* Define to 1 if `st_rdev' is a member of `struct stat'. */\n#undef HAVE_STRUCT_STAT_ST_RDEV\n\n/* Define to 1 if `tm_zone' is a member of `struct tm'. */\n#undef HAVE_STRUCT_TM_TM_ZONE\n\n/* Define to 1 if your `struct stat' has `st_blocks'. Deprecated, use\n   `HAVE_STRUCT_STAT_ST_BLOCKS' instead. */\n#undef HAVE_ST_BLOCKS\n\n/* Define if you have the 'symlink' function. */\n#undef HAVE_SYMLINK\n\n/* Define to 1 if you have the `sysconf' function. */\n#undef HAVE_SYSCONF\n\n/* Define to 1 if you have the <sysexits.h> header file. */\n#undef HAVE_SYSEXITS_H\n\n/* Define to 1 if you have the <sys/audioio.h> header file. */\n#undef HAVE_SYS_AUDIOIO_H\n\n/* Define to 1 if you have the <sys/bsdtty.h> header file. */\n#undef HAVE_SYS_BSDTTY_H\n\n/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_SYS_DIR_H\n\n/* Define to 1 if you have the <sys/epoll.h> header file. */\n#undef HAVE_SYS_EPOLL_H\n\n/* Define to 1 if you have the <sys/event.h> header file. */\n#undef HAVE_SYS_EVENT_H\n\n/* Define to 1 if you have the <sys/file.h> header file. */\n#undef HAVE_SYS_FILE_H\n\n/* Define to 1 if you have the <sys/loadavg.h> header file. */\n#undef HAVE_SYS_LOADAVG_H\n\n/* Define to 1 if you have the <sys/lock.h> header file. */\n#undef HAVE_SYS_LOCK_H\n\n/* Define to 1 if you have the <sys/mkdev.h> header file. */\n#undef HAVE_SYS_MKDEV_H\n\n/* Define to 1 if you have the <sys/modem.h> header file. */\n#undef HAVE_SYS_MODEM_H\n\n/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.\n   */\n#undef HAVE_SYS_NDIR_H\n\n/* Define to 1 if you have the <sys/param.h> header file. */\n#undef HAVE_SYS_PARAM_H\n\n/* Define to 1 if you have the <sys/poll.h> header file. */\n#undef HAVE_SYS_POLL_H\n\n/* Define to 1 if you have the <sys/resource.h> header file. */\n#undef HAVE_SYS_RESOURCE_H\n\n/* Define to 1 if you have the <sys/select.h> header file. */\n#undef HAVE_SYS_SELECT_H\n\n/* Define to 1 if you have the <sys/socket.h> header file. */\n#undef HAVE_SYS_SOCKET_H\n\n/* Define to 1 if you have the <sys/statvfs.h> header file. */\n#undef HAVE_SYS_STATVFS_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#undef HAVE_SYS_STAT_H\n\n/* Define to 1 if you have the <sys/termio.h> header file. */\n#undef HAVE_SYS_TERMIO_H\n\n/* Define to 1 if you have the <sys/times.h> header file. */\n#undef HAVE_SYS_TIMES_H\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#undef HAVE_SYS_TIME_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <sys/un.h> header file. */\n#undef HAVE_SYS_UN_H\n\n/* Define to 1 if you have the <sys/utsname.h> header file. */\n#undef HAVE_SYS_UTSNAME_H\n\n/* Define to 1 if you have the <sys/wait.h> header file. */\n#undef HAVE_SYS_WAIT_H\n\n/* Define to 1 if you have the `tcgetpgrp' function. */\n#undef HAVE_TCGETPGRP\n\n/* Define to 1 if you have the `tcsetpgrp' function. */\n#undef HAVE_TCSETPGRP\n\n/* Define to 1 if you have the `tempnam' function. */\n#undef HAVE_TEMPNAM\n\n/* Define to 1 if you have the <termios.h> header file. */\n#undef HAVE_TERMIOS_H\n\n/* Define to 1 if you have the <term.h> header file. */\n#undef HAVE_TERM_H\n\n/* Define to 1 if you have the <thread.h> header file. */\n#undef HAVE_THREAD_H\n\n/* Define to 1 if you have the `timegm' function. */\n#undef HAVE_TIMEGM\n\n/* Define to 1 if you have the `times' function. */\n#undef HAVE_TIMES\n\n/* Define to 1 if you have the `tmpfile' function. */\n#undef HAVE_TMPFILE\n\n/* Define to 1 if you have the `tmpnam' function. */\n#undef HAVE_TMPNAM\n\n/* Define to 1 if you have the `tmpnam_r' function. */\n#undef HAVE_TMPNAM_R\n\n/* Define to 1 if your `struct tm' has `tm_zone'. Deprecated, use\n   `HAVE_STRUCT_TM_TM_ZONE' instead. */\n#undef HAVE_TM_ZONE\n\n/* Define to 1 if you have the `truncate' function. */\n#undef HAVE_TRUNCATE\n\n/* Define to 1 if you don't have `tm_zone' but do have the external array\n   `tzname'. */\n#undef HAVE_TZNAME\n\n/* Define this if you have tcl and TCL_UTF_MAX==6 */\n#undef HAVE_UCS4_TCL\n\n/* Define to 1 if the system has the type `uintptr_t'. */\n#undef HAVE_UINTPTR_T\n\n/* Define to 1 if you have the `uname' function. */\n#undef HAVE_UNAME\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#undef HAVE_UNISTD_H\n\n/* Define to 1 if you have the `unsetenv' function. */\n#undef HAVE_UNSETENV\n\n/* Define if you have a useable wchar_t type defined in wchar.h; useable means\n   wchar_t must be an unsigned type with at least 16 bits. (see\n   Include/unicodeobject.h). */\n#undef HAVE_USABLE_WCHAR_T\n\n/* Define to 1 if you have the `utimes' function. */\n#undef HAVE_UTIMES\n\n/* Define to 1 if you have the <utime.h> header file. */\n#undef HAVE_UTIME_H\n\n/* Define to 1 if you have the `wait3' function. */\n#undef HAVE_WAIT3\n\n/* Define to 1 if you have the `wait4' function. */\n#undef HAVE_WAIT4\n\n/* Define to 1 if you have the `waitpid' function. */\n#undef HAVE_WAITPID\n\n/* Define if the compiler provides a wchar.h header file. */\n#undef HAVE_WCHAR_H\n\n/* Define to 1 if you have the `wcscoll' function. */\n#undef HAVE_WCSCOLL\n\n/* Define to 1 if you have the `wcsftime' function. */\n#undef HAVE_WCSFTIME\n\n/* Define to 1 if you have the `wcsxfrm' function. */\n#undef HAVE_WCSXFRM\n\n/* Define if tzset() actually switches the local timezone in a meaningful way.\n   */\n#undef HAVE_WORKING_TZSET\n\n/* Define if the zlib library has inflateCopy */\n#undef HAVE_ZLIB_COPY\n\n/* Define to 1 if you have the `_getpty' function. */\n#undef HAVE__GETPTY\n\n/* Define if you are using Mach cthreads directly under /include */\n#undef HURD_C_THREADS\n\n/* Define if you are using Mach cthreads under mach / */\n#undef MACH_C_THREADS\n\n/* Define to 1 if `major', `minor', and `makedev' are declared in <mkdev.h>.\n   */\n#undef MAJOR_IN_MKDEV\n\n/* Define to 1 if `major', `minor', and `makedev' are declared in\n   <sysmacros.h>. */\n#undef MAJOR_IN_SYSMACROS\n\n/* Define if mvwdelch in curses.h is an expression. */\n#undef MVWDELCH_IS_EXPRESSION\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* Define if POSIX semaphores aren't enabled on your system */\n#undef POSIX_SEMAPHORES_NOT_ENABLED\n\n/* Defined if PTHREAD_SCOPE_SYSTEM supported. */\n#undef PTHREAD_SYSTEM_SCHED_SUPPORTED\n\n/* Define as the preferred size in bits of long digits */\n#undef PYLONG_BITS_IN_DIGIT\n\n/* Define to printf format modifier for Py_ssize_t */\n#undef PY_FORMAT_SIZE_T\n\n/* Define as the integral type used for Unicode representation. */\n#undef PY_UNICODE_TYPE\n\n/* Define if you want to build an interpreter with many run-time checks. */\n#undef Py_DEBUG\n\n/* Defined if Python is built as a shared library. */\n#undef Py_ENABLE_SHARED\n\n/* Define as the size of the unicode type. */\n#undef Py_UNICODE_SIZE\n\n/* Define as the return type of signal handlers (`int' or `void'). */\n#undef RETSIGTYPE\n\n/* Define if setpgrp() must be called as setpgrp(0, 0). */\n#undef SETPGRP_HAVE_ARG\n\n/* Define this to be extension of shared libraries (including the dot!). */\n#undef SHLIB_EXT\n\n/* Define if i>>j for signed int i does not extend the sign bit when i < 0 */\n#undef SIGNED_RIGHT_SHIFT_ZERO_FILLS\n\n/* The size of `double', as computed by sizeof. */\n#undef SIZEOF_DOUBLE\n\n/* The size of `float', as computed by sizeof. */\n#undef SIZEOF_FLOAT\n\n/* The size of `fpos_t', as computed by sizeof. */\n#undef SIZEOF_FPOS_T\n\n/* The size of `int', as computed by sizeof. */\n#undef SIZEOF_INT\n\n/* The size of `long', as computed by sizeof. */\n#undef SIZEOF_LONG\n\n/* The size of `long double', as computed by sizeof. */\n#undef SIZEOF_LONG_DOUBLE\n\n/* The size of `long long', as computed by sizeof. */\n#undef SIZEOF_LONG_LONG\n\n/* The number of bytes in an off_t. */\n#undef SIZEOF_OFF_T\n\n/* The size of `pid_t', as computed by sizeof. */\n#undef SIZEOF_PID_T\n\n/* The number of bytes in a pthread_t. */\n#undef SIZEOF_PTHREAD_T\n\n/* The size of `short', as computed by sizeof. */\n#undef SIZEOF_SHORT\n\n/* The size of `size_t', as computed by sizeof. */\n#undef SIZEOF_SIZE_T\n\n/* The number of bytes in a time_t. */\n#undef SIZEOF_TIME_T\n\n/* The size of `uintptr_t', as computed by sizeof. */\n#undef SIZEOF_UINTPTR_T\n\n/* The size of `void *', as computed by sizeof. */\n#undef SIZEOF_VOID_P\n\n/* The size of `wchar_t', as computed by sizeof. */\n#undef SIZEOF_WCHAR_T\n\n/* The size of `_Bool', as computed by sizeof. */\n#undef SIZEOF__BOOL\n\n/* Define to 1 if you have the ANSI C header files. */\n#undef STDC_HEADERS\n\n/* Define if you can safely include both <sys/select.h> and <sys/time.h>\n   (which you can't on SCO ODT 3.0). */\n#undef SYS_SELECT_WITH_SYS_TIME\n\n/* Define if tanh(-0.) is -0., or if platform doesn't have signed zeros */\n#undef TANH_PRESERVES_ZERO_SIGN\n\n/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */\n#undef TIME_WITH_SYS_TIME\n\n/* Define to 1 if your <sys/time.h> declares `struct tm'. */\n#undef TM_IN_SYS_TIME\n\n/* Define if you want to use computed gotos in ceval.c. */\n#undef USE_COMPUTED_GOTOS\n\n/* Enable extensions on AIX 3, Interix.  */\n#ifndef _ALL_SOURCE\n# undef _ALL_SOURCE\n#endif\n/* Enable GNU extensions on systems that have them.  */\n#ifndef _GNU_SOURCE\n# undef _GNU_SOURCE\n#endif\n/* Enable threading extensions on Solaris.  */\n#ifndef _POSIX_PTHREAD_SEMANTICS\n# undef _POSIX_PTHREAD_SEMANTICS\n#endif\n/* Enable extensions on HP NonStop.  */\n#ifndef _TANDEM_SOURCE\n# undef _TANDEM_SOURCE\n#endif\n/* Enable general extensions on Solaris.  */\n#ifndef __EXTENSIONS__\n# undef __EXTENSIONS__\n#endif\n\n\n/* Define if a va_list is an array of some kind */\n#undef VA_LIST_IS_ARRAY\n\n/* Define if you want SIGFPE handled (see Include/pyfpe.h). */\n#undef WANT_SIGFPE_HANDLER\n\n/* Define if you want wctype.h functions to be used instead of the one\n   supplied by Python itself. (see Include/unicodectype.h). */\n#undef WANT_WCTYPE_FUNCTIONS\n\n/* Define if WINDOW in curses.h offers a field _flags. */\n#undef WINDOW_HAS_FLAGS\n\n/* Define if you want documentation strings in extension modules */\n#undef WITH_DOC_STRINGS\n\n/* Define if you want to use the new-style (Openstep, Rhapsody, MacOS) dynamic\n   linker (dyld) instead of the old-style (NextStep) dynamic linker (rld).\n   Dyld is necessary to support frameworks. */\n#undef WITH_DYLD\n\n/* Define to 1 if libintl is needed for locale functions. */\n#undef WITH_LIBINTL\n\n/* Define if you want to produce an OpenStep/Rhapsody framework (shared\n   library plus accessory files). */\n#undef WITH_NEXT_FRAMEWORK\n\n/* Define if you want to compile in Python-specific mallocs */\n#undef WITH_PYMALLOC\n\n/* Define if you want to compile in rudimentary thread support */\n#undef WITH_THREAD\n\n/* Define to profile with the Pentium timestamp counter */\n#undef WITH_TSC\n\n/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n   significant byte first (like Motorola and SPARC, unlike Intel). */\n#if defined AC_APPLE_UNIVERSAL_BUILD\n# if defined __BIG_ENDIAN__\n#  define WORDS_BIGENDIAN 1\n# endif\n#else\n# ifndef WORDS_BIGENDIAN\n#  undef WORDS_BIGENDIAN\n# endif\n#endif\n\n/* Define if arithmetic is subject to x87-style double rounding issue */\n#undef X87_DOUBLE_ROUNDING\n\n/* Define on OpenBSD to activate all library features */\n#undef _BSD_SOURCE\n\n/* Define on Irix to enable u_int */\n#undef _BSD_TYPES\n\n/* Define on Darwin to activate all library features */\n#undef _DARWIN_C_SOURCE\n\n/* This must be set to 64 on some systems to enable large file support. */\n#undef _FILE_OFFSET_BITS\n\n/* Define on Linux to activate all library features */\n#undef _GNU_SOURCE\n\n/* This must be defined on some systems to enable large file support. */\n#undef _LARGEFILE_SOURCE\n\n/* This must be defined on AIX systems to enable large file support. */\n#undef _LARGE_FILES\n\n/* Define to 1 if on MINIX. */\n#undef _MINIX\n\n/* Define on NetBSD to activate all library features */\n#undef _NETBSD_SOURCE\n\n/* Define _OSF_SOURCE to get the makedev macro. */\n#undef _OSF_SOURCE\n\n/* Define to 2 if the system does not provide POSIX.1 features except with\n   this defined. */\n#undef _POSIX_1_SOURCE\n\n/* Define to activate features from IEEE Stds 1003.1-2001 */\n#undef _POSIX_C_SOURCE\n\n/* Define to 1 if you need to in order for `stat' and other things to work. */\n#undef _POSIX_SOURCE\n\n/* Define if you have POSIX threads, and your system does not define that. */\n#undef _POSIX_THREADS\n\n/* Define to force use of thread-safe errno, h_errno, and other functions */\n#undef _REENTRANT\n\n/* Define for Solaris 2.5.1 so the uint32_t typedef from <sys/synch.h>,\n   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the\n   #define below would cause a syntax error. */\n#undef _UINT32_T\n\n/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,\n   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the\n   #define below would cause a syntax error. */\n#undef _UINT64_T\n\n/* Define to the level of X/Open that your system supports */\n#undef _XOPEN_SOURCE\n\n/* Define to activate Unix95-and-earlier features */\n#undef _XOPEN_SOURCE_EXTENDED\n\n/* Define on FreeBSD to activate all library features */\n#undef __BSD_VISIBLE\n\n/* Define to 1 if type `char' is unsigned and you are not using gcc.  */\n#ifndef __CHAR_UNSIGNED__\n# undef __CHAR_UNSIGNED__\n#endif\n\n/* Defined on Solaris to see additional function prototypes. */\n#undef __EXTENSIONS__\n\n/* Define to 'long' if <time.h> doesn't define. */\n#undef clock_t\n\n/* Define to empty if `const' does not conform to ANSI C. */\n#undef const\n\n/* Define to `int' if <sys/types.h> doesn't define. */\n#undef gid_t\n\n/* Define to the type of a signed integer type of width exactly 32 bits if\n   such a type exists and the standard includes do not define it. */\n#undef int32_t\n\n/* Define to the type of a signed integer type of width exactly 64 bits if\n   such a type exists and the standard includes do not define it. */\n#undef int64_t\n\n/* Define to `int' if <sys/types.h> does not define. */\n#undef mode_t\n\n/* Define to `long int' if <sys/types.h> does not define. */\n#undef off_t\n\n/* Define to `int' if <sys/types.h> does not define. */\n#undef pid_t\n\n/* Define to empty if the keyword does not work. */\n#undef signed\n\n/* Define to `unsigned int' if <sys/types.h> does not define. */\n#undef size_t\n\n/* Define to `int' if <sys/socket.h> does not define. */\n#undef socklen_t\n\n/* Define to `int' if <sys/types.h> doesn't define. */\n#undef uid_t\n\n/* Define to the type of an unsigned integer type of width exactly 32 bits if\n   such a type exists and the standard includes do not define it. */\n#undef uint32_t\n\n/* Define to the type of an unsigned integer type of width exactly 64 bits if\n   such a type exists and the standard includes do not define it. */\n#undef uint64_t\n\n/* Define to empty if the keyword does not work. */\n#undef volatile\n\n\n/* Define the macros needed if on a UnixWare 7.x system. */\n#if defined(__USLC__) && defined(__SCO_VERSION__)\n#define STRICT_SYSV_CURSES /* Don't use ncurses extensions */\n#endif\n\n#endif /*Py_PYCONFIG_H*/\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/configure.ac": "dnl ***********************************************\ndnl * Please run autoreconf to test your changes! *\ndnl ***********************************************\ndnl NOTE: autoconf 2.64 doesn't seem to work (use 2.61).\n\n# Set VERSION so we only need to edit in one place (i.e., here)\nm4_define(PYTHON_VERSION, 3.1)\n\nAC_REVISION($Revision$)\nAC_PREREQ(2.61)\nAC_INIT(python, PYTHON_VERSION, http://bugs.python.org/)\nAC_CONFIG_SRCDIR([Include/object.h])\nAC_CONFIG_HEADER(pyconfig.h)\n\ndnl Ensure that if prefix is specified, it does not end in a slash. If\ndnl it does, we get path names containing '//' which is both ugly and\ndnl can cause trouble.\n\ndnl Last slash shouldn't be stripped if prefix=/\nif test \"$prefix\" != \"/\"; then\n    prefix=`echo \"$prefix\" | sed -e 's/\\/$//g'`\nfi    \n\ndnl This is for stuff that absolutely must end up in pyconfig.h.\ndnl Please use pyport.h instead, if possible.\nAH_TOP([\n#ifndef Py_PYCONFIG_H\n#define Py_PYCONFIG_H\n])\nAH_BOTTOM([\n/* Define the macros needed if on a UnixWare 7.x system. */\n#if defined(__USLC__) && defined(__SCO_VERSION__)\n#define STRICT_SYSV_CURSES /* Don't use ncurses extensions */\n#endif\n\n#endif /*Py_PYCONFIG_H*/\n])\n\n# We don't use PACKAGE_ variables, and they cause conflicts\n# with other autoconf-based packages that include Python.h\ngrep -v 'define PACKAGE_' <confdefs.h >confdefs.h.new\nrm confdefs.h\nmv confdefs.h.new confdefs.h\n\nAC_SUBST(VERSION)\nVERSION=PYTHON_VERSION\n\nAC_SUBST(SOVERSION)\nSOVERSION=1.0\n\n# The later defininition of _XOPEN_SOURCE disables certain features\n# on Linux, so we need _GNU_SOURCE to re-enable them (makedev, tm_zone).\nAC_DEFINE(_GNU_SOURCE, 1, [Define on Linux to activate all library features])\n\n# The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables\n# certain features on NetBSD, so we need _NETBSD_SOURCE to re-enable\n# them.\nAC_DEFINE(_NETBSD_SOURCE, 1, [Define on NetBSD to activate all library features])\n\n# The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables\n# certain features on FreeBSD, so we need __BSD_VISIBLE to re-enable\n# them.\nAC_DEFINE(__BSD_VISIBLE, 1, [Define on FreeBSD to activate all library features])\n\n# The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables\n# u_int on Irix 5.3. Defining _BSD_TYPES brings it back.\nAC_DEFINE(_BSD_TYPES, 1, [Define on Irix to enable u_int])\n\n# The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables\n# certain features on Mac OS X, so we need _DARWIN_C_SOURCE to re-enable\n# them.\nAC_DEFINE(_DARWIN_C_SOURCE, 1, [Define on Darwin to activate all library features])\n\n\ndefine_xopen_source=yes\n\n# Arguments passed to configure.\nAC_SUBST(CONFIG_ARGS)\nCONFIG_ARGS=\"$ac_configure_args\"\n\nAC_MSG_CHECKING([for --enable-universalsdk])\nAC_ARG_ENABLE(universalsdk,\n\tAC_HELP_STRING(--enable-universalsdk@<:@=SDKDIR@:>@, Build against Mac OS X 10.4u SDK (ppc/i386)),\n[\n\tcase $enableval in\n\tyes)\n\t\tenableval=/Developer/SDKs/MacOSX10.4u.sdk\n\t\tif test ! -d \"${enableval}\"\n\t\tthen\n\t\t\tenableval=/\n\t\tfi\n\t\t;;\n\tesac\n\tcase $enableval in\n\tno)\n\t\tUNIVERSALSDK=\n\t\tenable_universalsdk=\n\t\t;;\n\t*)\n\t\tUNIVERSALSDK=$enableval\n\t\tif test ! -d \"${UNIVERSALSDK}\"\n\t\tthen\n\t\t\tAC_MSG_ERROR([--enable-universalsdk specifies non-existing SDK: ${UNIVERSALSDK}])\n\t\tfi\n\t\t;;\n\tesac\n\t\n],[\n   \tUNIVERSALSDK=\n\tenable_universalsdk=\n])\nif test -n \"${UNIVERSALSDK}\"\nthen\n\tAC_MSG_RESULT(${UNIVERSALSDK})\nelse\n\tAC_MSG_RESULT(no)\nfi\nAC_SUBST(UNIVERSALSDK)\n\nAC_SUBST(ARCH_RUN_32BIT)\n\nUNIVERSAL_ARCHS=\"32-bit\"\nAC_SUBST(LIPO_32BIT_FLAGS)\nAC_SUBST(LIPO_64BIT_FLAGS)\nAC_MSG_CHECKING(for --with-universal-archs)\nAC_ARG_WITH(universal-archs,\n    AC_HELP_STRING(--with-universal-archs=ARCH, select architectures for universal build (\"32-bit\", \"64-bit\", \"3-way\", \"intel\" or \"all\")),\n[\n\tAC_MSG_RESULT($withval)\n\tUNIVERSAL_ARCHS=\"$withval\"\n],\n[\n \tAC_MSG_RESULT(32-bit)\n])\n\n\n\nAC_ARG_WITH(framework-name,\n              AC_HELP_STRING(--with-framework-name=FRAMEWORK, \n                             specify an alternate name of the framework built with --enable-framework),\n[\n    PYTHONFRAMEWORK=${withval}\n    PYTHONFRAMEWORKDIR=${withval}.framework\n    PYTHONFRAMEWORKIDENTIFIER=org.python.`echo $withval | tr '[A-Z]' '[a-z]'`\n    ],[\n    PYTHONFRAMEWORK=Python\n    PYTHONFRAMEWORKDIR=Python.framework\n    PYTHONFRAMEWORKIDENTIFIER=org.python.python\n])\ndnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output\nAC_ARG_ENABLE(framework,\n              AC_HELP_STRING(--enable-framework@<:@=INSTALLDIR@:>@, Build (MacOSX|Darwin) framework),\n[\n\tcase $enableval in\n\tyes) \n\t\tenableval=/Library/Frameworks\n\tesac\n\tcase $enableval in\n\tno)\n\t\tPYTHONFRAMEWORK=\n\t\tPYTHONFRAMEWORKDIR=no-framework\n\t\tPYTHONFRAMEWORKPREFIX=\n\t\tPYTHONFRAMEWORKINSTALLDIR=\n\t\tFRAMEWORKINSTALLFIRST=\n\t\tFRAMEWORKINSTALLLAST=\n\t\tFRAMEWORKALTINSTALLFIRST=\n\t\tFRAMEWORKALTINSTALLLAST=\n\t\tif test \"x${prefix}\" = \"xNONE\"; then\n\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${ac_default_prefix}\"\n\t\telse\n\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${prefix}\"\n\t\tfi\n\t\tenable_framework=\n\t\t;;\n\t*)\n\t\tPYTHONFRAMEWORKPREFIX=$enableval\n\t\tPYTHONFRAMEWORKINSTALLDIR=$PYTHONFRAMEWORKPREFIX/$PYTHONFRAMEWORKDIR\n\t\tFRAMEWORKINSTALLFIRST=\"frameworkinstallstructure\"\n\t\tFRAMEWORKALTINSTALLFIRST=\"frameworkinstallstructure \"\n\t\tcase \"${UNIVERSAL_ARCHS}\" in\n\t\tall|3-way|intel)\n\t\t\tFRAMEWORKINSTALLLAST=\"frameworkinstallmaclib frameworkinstallapps4way frameworkinstallunixtools4way\"\n\t\t\tFRAMEWORKALTINSTALLLAST=\"frameworkinstallmaclib frameworkinstallapps4way frameworkaltinstallunixtools4way\"\n\t\t\t;;\n\t\t*)\n\t\t\tFRAMEWORKINSTALLLAST=\"frameworkinstallmaclib frameworkinstallapps frameworkinstallunixtools\"\n\t\t\tFRAMEWORKALTINSTALLLAST=\"frameworkinstallmaclib frameworkinstallapps frameworkaltinstallunixtools\"\n\t\t\t;;\n\t\tesac\n\n\t\tif test \"x${prefix}\" = \"xNONE\" ; then\n\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${ac_default_prefix}\"\n\t\telse\n\t\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${prefix}\"\n\t\tfi\n\t\tprefix=$PYTHONFRAMEWORKINSTALLDIR/Versions/$VERSION\n\n\t\t# Add files for Mac specific code to the list of output\n\t\t# files:\n\t\tAC_CONFIG_FILES(Mac/Makefile)\n\t\tAC_CONFIG_FILES(Mac/PythonLauncher/Makefile)\n\t\tAC_CONFIG_FILES(Mac/Resources/framework/Info.plist)\n\t\tAC_CONFIG_FILES(Mac/Resources/app/Info.plist)\n\tesac\n\t],[\n\tPYTHONFRAMEWORK=\n\tPYTHONFRAMEWORKDIR=no-framework\n\tPYTHONFRAMEWORKPREFIX=\n\tPYTHONFRAMEWORKINSTALLDIR=\n\tFRAMEWORKINSTALLFIRST=\n\tFRAMEWORKINSTALLLAST=\n\tFRAMEWORKALTINSTALLFIRST=\n\tFRAMEWORKALTINSTALLLAST=\n\tif test \"x${prefix}\" = \"xNONE\" ; then\n\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${ac_default_prefix}\"\n\telse\n\t\tFRAMEWORKUNIXTOOLSPREFIX=\"${prefix}\"\n\tfi\n\tenable_framework=\n\n\tif test \"$UNIVERSAL_ARCHS\" = \"all\" \n\tthen\n\t\tFRAMEWORKINSTALLLAST=update4wayuniversal\n\t\tFRAMEWORKALTINSTALLLAST=update4wayuniversal\n\tfi\n])\nAC_SUBST(PYTHONFRAMEWORK)\nAC_SUBST(PYTHONFRAMEWORKIDENTIFIER)\nAC_SUBST(PYTHONFRAMEWORKDIR)\nAC_SUBST(PYTHONFRAMEWORKPREFIX)\nAC_SUBST(PYTHONFRAMEWORKINSTALLDIR)\nAC_SUBST(FRAMEWORKINSTALLFIRST)\nAC_SUBST(FRAMEWORKINSTALLLAST)\nAC_SUBST(FRAMEWORKALTINSTALLFIRST)\nAC_SUBST(FRAMEWORKALTINSTALLLAST)\nAC_SUBST(FRAMEWORKUNIXTOOLSPREFIX)\n\n##AC_ARG_WITH(dyld,\n##            AC_HELP_STRING(--with-dyld,\n##                           Use (OpenStep|Rhapsody) dynamic linker))\n##\n# Set name for machine-dependent library files\nAC_SUBST(MACHDEP)\nAC_MSG_CHECKING(MACHDEP)\nif test -z \"$MACHDEP\"\nthen\n\tac_sys_system=`uname -s`\n\tif test \"$ac_sys_system\" = \"AIX\" \\\n\t-o \"$ac_sys_system\" = \"UnixWare\" -o \"$ac_sys_system\" = \"OpenUNIX\"; then\n\t\tac_sys_release=`uname -v`\n\telse\n\t\tac_sys_release=`uname -r`\n\tfi\n\tac_md_system=`echo $ac_sys_system |\n\t\t\t   tr -d '[/ ]' | tr '[[A-Z]]' '[[a-z]]'`\n\tac_md_release=`echo $ac_sys_release |\n\t\t\t   tr -d '[/ ]' | sed 's/^[[A-Z]]\\.//' | sed 's/\\..*//'`\n\tMACHDEP=\"$ac_md_system$ac_md_release\"\n\n\tcase $MACHDEP in\n\tcygwin*) MACHDEP=\"cygwin\";;\n\tdarwin*) MACHDEP=\"darwin\";;\n\tatheos*) MACHDEP=\"atheos\";;\n        irix646) MACHDEP=\"irix6\";;\n\t'')\tMACHDEP=\"unknown\";;\n\tesac\nfi\n\t\n# Some systems cannot stand _XOPEN_SOURCE being defined at all; they\n# disable features if it is defined, without any means to access these\n# features as extensions. For these systems, we skip the definition of\n# _XOPEN_SOURCE. Before adding a system to the list to gain access to\n# some feature, make sure there is no alternative way to access this\n# feature. Also, when using wildcards, make sure you have verified the\n# need for not defining _XOPEN_SOURCE on all systems matching the\n# wildcard, and that the wildcard does not include future systems\n# (which may remove their limitations).\ndnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output\ncase $ac_sys_system/$ac_sys_release in\n  # On OpenBSD, select(2) is not available if _XOPEN_SOURCE is defined,\n  # even though select is a POSIX function. Reported by J. Ribbens.\n  # Reconfirmed for OpenBSD 3.3 by Zachary Hamm, for 3.4 by Jason Ish.\n  # In addition, Stefan Krah confirms that issue #1244610 exists through\n  # OpenBSD 4.6, but is fixed in 4.7.\n  OpenBSD/2.* | OpenBSD/3.@<:@0123456789@:>@ | OpenBSD/4.@<:@0123456@:>@) \n    define_xopen_source=no\n    # OpenBSD undoes our definition of __BSD_VISIBLE if _XOPEN_SOURCE is\n    # also defined. This can be overridden by defining _BSD_SOURCE\n    # As this has a different meaning on Linux, only define it on OpenBSD\n    AC_DEFINE(_BSD_SOURCE, 1, [Define on OpenBSD to activate all library features])\n    ;;\n  OpenBSD/4.@<:@789@:>@)\n    # OpenBSD undoes our definition of __BSD_VISIBLE if _XOPEN_SOURCE is\n    # also defined. This can be overridden by defining _BSD_SOURCE\n    # As this has a different meaning on Linux, only define it on OpenBSD\n    AC_DEFINE(_BSD_SOURCE, 1, [Define on OpenBSD to activate all library features])\n    ;;\n  # Defining _XOPEN_SOURCE on NetBSD version prior to the introduction of\n  # _NETBSD_SOURCE disables certain features (eg. setgroups). Reported by\n  # Marc Recht\n  NetBSD/1.5 | NetBSD/1.5.* | NetBSD/1.6 | NetBSD/1.6.* | NetBSD/1.6@<:@A-S@:>@)\n    define_xopen_source=no;;\n  # On Solaris 2.6, sys/wait.h is inconsistent in the usage\n  # of union __?sigval. Reported by Stuart Bishop.\n  SunOS/5.6)\n    define_xopen_source=no;;\n  # On UnixWare 7, u_long is never defined with _XOPEN_SOURCE,\n  # but used in /usr/include/netinet/tcp.h. Reported by Tim Rice.\n  # Reconfirmed for 7.1.4 by Martin v. Loewis.\n  OpenUNIX/8.0.0| UnixWare/7.1.@<:@0-4@:>@)\n    define_xopen_source=no;;\n  # On OpenServer 5, u_short is never defined with _XOPEN_SOURCE,\n  # but used in struct sockaddr.sa_family. Reported by Tim Rice.\n  SCO_SV/3.2)\n    define_xopen_source=no;;\n  # On FreeBSD 4, the math functions C89 does not cover are never defined\n  # with _XOPEN_SOURCE and __BSD_VISIBLE does not re-enable them.\n  FreeBSD/4.*)\n    define_xopen_source=no;;\n  # On MacOS X 10.2, a bug in ncurses.h means that it craps out if \n  # _XOPEN_EXTENDED_SOURCE is defined. Apparently, this is fixed in 10.3, which\n  # identifies itself as Darwin/7.*\n  # On Mac OS X 10.4, defining _POSIX_C_SOURCE or _XOPEN_SOURCE\n  # disables platform specific features beyond repair.\n  # On Mac OS X 10.3, defining _POSIX_C_SOURCE or _XOPEN_SOURCE \n  # has no effect, don't bother defining them\n  Darwin/@<:@6789@:>@.*)\n    define_xopen_source=no;;\n  Darwin/1@<:@0-9@:>@.*)\n    define_xopen_source=no;;\n  # On AIX 4 and 5.1, mbstate_t is defined only when _XOPEN_SOURCE == 500 but\n  # used in wcsnrtombs() and mbsnrtowcs() even if _XOPEN_SOURCE is not defined\n  # or has another value. By not (re)defining it, the defaults come in place.\n  AIX/4)\n    define_xopen_source=no;;\n  AIX/5)\n    if test `uname -r` -eq 1; then\n      define_xopen_source=no\n    fi\n    ;;\n  # On QNX 6.3.2, defining _XOPEN_SOURCE prevents netdb.h from\n  # defining NI_NUMERICHOST.\n  QNX/6.3.2)\n    define_xopen_source=no\n    ;;\n\nesac\n\nif test $define_xopen_source = yes\nthen\n  # On Solaris w/ g++ it appears that _XOPEN_SOURCE has to be\n  # defined precisely as g++ defines it\n  # Furthermore, on Solaris 10, XPG6 requires the use of a C99\n  # compiler\n  case $ac_sys_system/$ac_sys_release in\n    SunOS/5.8|SunOS/5.9|SunOS/5.10|SunOS/5.11)\n      AC_DEFINE(_XOPEN_SOURCE, 500, \n                Define to the level of X/Open that your system supports)\n      ;;\n    *)\n      AC_DEFINE(_XOPEN_SOURCE, 600, \n                Define to the level of X/Open that your system supports)\n      ;;\n  esac\n\n  # On Tru64 Unix 4.0F, defining _XOPEN_SOURCE also requires\n  # definition of _XOPEN_SOURCE_EXTENDED and _POSIX_C_SOURCE, or else\n  # several APIs are not declared. Since this is also needed in some\n  # cases for HP-UX, we define it globally.\n  # except for Solaris 10, where it must not be defined, \n  # as it implies XPG4.2\n  case $ac_sys_system/$ac_sys_release in\n    SunOS/5.10|SunOS/5.11)\n      ;;\n    *)\n      AC_DEFINE(_XOPEN_SOURCE_EXTENDED, 1,\n      \t\tDefine to activate Unix95-and-earlier features)\n      ;;\n  esac\n\n  AC_DEFINE(_POSIX_C_SOURCE, 200112L, Define to activate features from IEEE Stds 1003.1-2001)\n  \nfi\n\n#\n# SGI compilers allow the specification of the both the ABI and the\n# ISA on the command line.  Depending on the values of these switches,\n# different and often incompatable code will be generated.\n#\n# The SGI_ABI variable can be used to modify the CC and LDFLAGS and\n# thus supply support for various ABI/ISA combinations.  The MACHDEP\n# variable is also adjusted.\n#\nAC_SUBST(SGI_ABI)\nif test ! -z \"$SGI_ABI\"\nthen\n        CC=\"cc $SGI_ABI\"\n        LDFLAGS=\"$SGI_ABI $LDFLAGS\"\n        MACHDEP=`echo \"${MACHDEP}${SGI_ABI}\" | sed 's/ *//g'`\nfi\nAC_MSG_RESULT($MACHDEP)\n\n# Record the configure-time value of MACOSX_DEPLOYMENT_TARGET,\n# it may influence the way we can build extensions, so distutils\n# needs to check it\nAC_SUBST(CONFIGURE_MACOSX_DEPLOYMENT_TARGET)\nAC_SUBST(EXPORT_MACOSX_DEPLOYMENT_TARGET)\nCONFIGURE_MACOSX_DEPLOYMENT_TARGET=\nEXPORT_MACOSX_DEPLOYMENT_TARGET='#'\n\nAC_MSG_CHECKING(machine type as reported by uname -m)\nac_sys_machine=`uname -m`\nAC_MSG_RESULT($ac_sys_machine)\n\n# checks for alternative programs\n\n# compiler flags are generated in two sets, BASECFLAGS and OPT.  OPT is just\n# for debug/optimization stuff.  BASECFLAGS is for flags that are required\n# just to get things to compile and link.  Users are free to override OPT\n# when running configure or make.  The build should not break if they do.\n# BASECFLAGS should generally not be messed with, however.\n\n# XXX shouldn't some/most/all of this code be merged with the stuff later\n# on that fiddles with OPT and BASECFLAGS?\nAC_MSG_CHECKING(for --without-gcc)\nAC_ARG_WITH(gcc,\n            AC_HELP_STRING(--without-gcc,never use gcc),\n[\n\tcase $withval in\n\tno)\tCC=${CC:-cc}\n\t\twithout_gcc=yes;;\n\tyes)\tCC=gcc\n\t\twithout_gcc=no;;\n\t*)\tCC=$withval\n\t\twithout_gcc=$withval;;\n\tesac], [\n\tcase $ac_sys_system in\n\tAIX*)   CC=${CC:-xlc_r}\n\t\twithout_gcc=;;\n\t*)\twithout_gcc=no;;\n\tesac])\nAC_MSG_RESULT($without_gcc)\n\n# If the user switches compilers, we can't believe the cache\nif test ! -z \"$ac_cv_prog_CC\" -a ! -z \"$CC\" -a \"$CC\" != \"$ac_cv_prog_CC\"\nthen\n  AC_MSG_ERROR([cached CC is different -- throw away $cache_file\n(it is also a good idea to do 'make clean' before compiling)])\nfi\n\nAC_PROG_CC\n\nAC_SUBST(CXX)\nAC_SUBST(MAINCC)\nAC_MSG_CHECKING(for --with-cxx-main=<compiler>)\nAC_ARG_WITH(cxx_main,\n            AC_HELP_STRING([--with-cxx-main=<compiler>],\n                           [compile main() and link python executable with C++ compiler]),\n[\n\t\n\tcase $withval in\n\tno)\twith_cxx_main=no\n\t\tMAINCC='$(CC)';;\n\tyes)\twith_cxx_main=yes\n\t\tMAINCC='$(CXX)';;\n\t*)\twith_cxx_main=yes\n\t\tMAINCC=$withval\n\t\tif test -z \"$CXX\"\n\t\tthen\n\t\t\tCXX=$withval\n\t\tfi;;\n\tesac], [\n\twith_cxx_main=no\n\tMAINCC='$(CC)'\n])\nAC_MSG_RESULT($with_cxx_main)\n\npreset_cxx=\"$CXX\"\nif test -z \"$CXX\"\nthen\n        case \"$CC\" in\n        gcc)    AC_PATH_PROG(CXX, [g++], [g++], [notfound]) ;;\n        cc)     AC_PATH_PROG(CXX, [c++], [c++], [notfound]) ;;\n        esac\n\tif test \"$CXX\" = \"notfound\"\n\tthen\n\t\tCXX=\"\"\n\tfi\nfi\nif test -z \"$CXX\"\nthen\n\tAC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++ cl, notfound)\n\tif test \"$CXX\" = \"notfound\"\n\tthen\n\t\tCXX=\"\"\n\tfi\nfi\nif test \"$preset_cxx\" != \"$CXX\"\nthen\n        AC_MSG_WARN([\n\n  By default, distutils will build C++ extension modules with \"$CXX\".\n  If this is not intended, then set CXX on the configure command line.\n  ])\nfi\n\n\n# checks for UNIX variants that set C preprocessor variables\nAC_AIX\n\n# Check for unsupported systems\ncase $ac_sys_system/$ac_sys_release in\natheos*|Linux*/1*)\n   echo This system \\($ac_sys_system/$ac_sys_release\\) is no longer supported.\n   echo See README for details.\n   exit 1;;\nesac\n\nAC_EXEEXT\nAC_MSG_CHECKING(for --with-suffix)\nAC_ARG_WITH(suffix,\n            AC_HELP_STRING(--with-suffix=.exe, set executable suffix),\n[\n\tcase $withval in\n\tno)\tEXEEXT=;;\n\tyes)\tEXEEXT=.exe;;\n\t*)\tEXEEXT=$withval;;\n\tesac])\nAC_MSG_RESULT($EXEEXT)\n\n# Test whether we're running on a non-case-sensitive system, in which\n# case we give a warning if no ext is given\nAC_SUBST(BUILDEXEEXT)\nAC_MSG_CHECKING(for case-insensitive build directory)\nif test ! -d CaseSensitiveTestDir; then\nmkdir CaseSensitiveTestDir\nfi\n\nif test -d casesensitivetestdir\nthen\n    AC_MSG_RESULT(yes)\n    BUILDEXEEXT=.exe\nelse\n\tAC_MSG_RESULT(no)\n\tBUILDEXEEXT=$EXEEXT\nfi\nrmdir CaseSensitiveTestDir\n\ncase $MACHDEP in\nbsdos*)\n    case $CC in\n    gcc) CC=\"$CC -D_HAVE_BSDI\";;\n    esac;;\nesac\n\ncase $ac_sys_system in\nhp*|HP*)\n    case $CC in\n    cc|*/cc) CC=\"$CC -Ae\";;\n    esac;;\nSunOS*)\n    # Some functions have a prototype only with that define, e.g. confstr\n    AC_DEFINE(__EXTENSIONS__, 1, [Defined on Solaris to see additional function prototypes.])\n    ;;\nesac\n\n\nAC_SUBST(LIBRARY)\nAC_MSG_CHECKING(LIBRARY)\nif test -z \"$LIBRARY\"\nthen\n\tLIBRARY='libpython$(VERSION).a'\nfi\nAC_MSG_RESULT($LIBRARY)\n\n# LDLIBRARY is the name of the library to link against (as opposed to the\n# name of the library into which to insert object files). BLDLIBRARY is also\n# the library to link against, usually. On Mac OS X frameworks, BLDLIBRARY\n# is blank as the main program is not linked directly against LDLIBRARY.\n# LDLIBRARYDIR is the path to LDLIBRARY, which is made in a subdirectory. On\n# systems without shared libraries, LDLIBRARY is the same as LIBRARY\n# (defined in the Makefiles). On Cygwin LDLIBRARY is the import library,\n# DLLLIBRARY is the shared (i.e., DLL) library.\n# \n# RUNSHARED is used to run shared python without installed libraries\n#\n# INSTSONAME is the name of the shared library that will be use to install\n# on the system - some systems like version suffix, others don't\nAC_SUBST(LDLIBRARY)\nAC_SUBST(DLLLIBRARY)\nAC_SUBST(BLDLIBRARY)\nAC_SUBST(LDLIBRARYDIR)\nAC_SUBST(INSTSONAME)\nAC_SUBST(RUNSHARED)\nLDLIBRARY=\"$LIBRARY\"\nBLDLIBRARY='$(LDLIBRARY)'\nINSTSONAME='$(LDLIBRARY)'\nDLLLIBRARY=''\nLDLIBRARYDIR=''\nRUNSHARED=''\n\n# LINKCC is the command that links the python executable -- default is $(CC).\n# If CXX is set, and if it is needed to link a main function that was\n# compiled with CXX, LINKCC is CXX instead. Always using CXX is undesirable:\n# python might then depend on the C++ runtime\n# This is altered for AIX in order to build the export list before \n# linking.\nAC_SUBST(LINKCC)\nAC_MSG_CHECKING(LINKCC)\nif test -z \"$LINKCC\"\nthen\n\tLINKCC='$(PURIFY) $(MAINCC)'\n\tcase $ac_sys_system in\n\tAIX*)\n\t   exp_extra=\"\\\"\\\"\"\n\t   if test $ac_sys_release -ge 5 -o \\\n\t\t   $ac_sys_release -eq 4 -a `uname -r` -ge 2 ; then\n\t       exp_extra=\".\"\n\t   fi\n\t   LINKCC=\"\\$(srcdir)/Modules/makexp_aix Modules/python.exp $exp_extra \\$(LIBRARY); $LINKCC\";;\n\tQNX*)\n\t   # qcc must be used because the other compilers do not\n\t   # support -N.\n\t   LINKCC=qcc;;\n\tesac\nfi\nAC_MSG_RESULT($LINKCC)\n\n# GNULD is set to \"yes\" if the GNU linker is used.  If this goes wrong\n# make sure we default having it set to \"no\": this is used by\n# distutils.unixccompiler to know if it should add --enable-new-dtags\n# to linker command lines, and failing to detect GNU ld simply results\n# in the same bahaviour as before.\nAC_SUBST(GNULD)\nAC_MSG_CHECKING(for GNU ld)\nac_prog=ld\nif test \"$GCC\" = yes; then\n       ac_prog=`$CC -print-prog-name=ld`\nfi\ncase `\"$ac_prog\" -V 2>&1 < /dev/null` in\n      *GNU*)\n          GNULD=yes;;\n      *)\n          GNULD=no;;\nesac\nAC_MSG_RESULT($GNULD)\n\nAC_MSG_CHECKING(for --enable-shared)\nAC_ARG_ENABLE(shared,\n              AC_HELP_STRING(--enable-shared, disable/enable building shared python library))\n\nif test -z \"$enable_shared\"\nthen \n  case $ac_sys_system in\n  CYGWIN* | atheos*)\n    enable_shared=\"yes\";;\n  *)\n    enable_shared=\"no\";;\n  esac\nfi\nAC_MSG_RESULT($enable_shared)\n\nAC_MSG_CHECKING(for --enable-profiling)\nAC_ARG_ENABLE(profiling,\n              AC_HELP_STRING(--enable-profiling, enable C-level code profiling),\n[ac_save_cc=\"$CC\"\n CC=\"$CC -pg\"\n AC_TRY_RUN([int main() { return 0; }],\n   ac_enable_profiling=\"yes\",\n   ac_enable_profiling=\"no\",\n   ac_enable_profiling=\"no\")\n CC=\"$ac_save_cc\"])\nAC_MSG_RESULT($ac_enable_profiling)\n\ncase \"$ac_enable_profiling\" in\n    \"yes\")\n\tBASECFLAGS=\"-pg $BASECFLAGS\"\n\tLDFLAGS=\"-pg $LDFLAGS\"\n    ;;\nesac\n\nAC_MSG_CHECKING(LDLIBRARY)\n\n# MacOSX framework builds need more magic. LDLIBRARY is the dynamic\n# library that we build, but we do not want to link against it (we\n# will find it with a -framework option). For this reason there is an\n# extra variable BLDLIBRARY against which Python and the extension\n# modules are linked, BLDLIBRARY. This is normally the same as\n# LDLIBRARY, but empty for MacOSX framework builds.\nif test \"$enable_framework\"\nthen\n  LDLIBRARY='$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n  RUNSHARED=DYLD_FRAMEWORK_PATH=\"`pwd`:$DYLD_FRAMEWORK_PATH\"\n  BLDLIBRARY=''\nelse\n  BLDLIBRARY='$(LDLIBRARY)'\nfi  \n\n# Other platforms follow\nif test $enable_shared = \"yes\"; then\n  AC_DEFINE(Py_ENABLE_SHARED, 1, [Defined if Python is built as a shared library.])\n  case $ac_sys_system in\n    CYGWIN*)\n          LDLIBRARY='libpython$(VERSION).dll.a'\n          DLLLIBRARY='libpython$(VERSION).dll'\n          ;;\n    SunOS*)\n\t  LDLIBRARY='libpython$(VERSION).so'\n\t  BLDLIBRARY='-Wl,-R,$(LIBDIR) -L. -lpython$(VERSION)'\n\t  RUNSHARED=LD_LIBRARY_PATH=`pwd`:${LD_LIBRARY_PATH}\n\t  INSTSONAME=\"$LDLIBRARY\".$SOVERSION\n          ;;\n    Linux*|GNU*|NetBSD*|FreeBSD*|DragonFly*)\n\t  LDLIBRARY='libpython$(VERSION).so'\n\t  BLDLIBRARY='-L. -lpython$(VERSION)'\n\t  RUNSHARED=LD_LIBRARY_PATH=`pwd`:${LD_LIBRARY_PATH}\n\t  case $ac_sys_system in\n\t      FreeBSD*)\n\t\tSOVERSION=`echo $SOVERSION|cut -d \".\" -f 1`\n\t\t;;\n\t  esac\n\t  INSTSONAME=\"$LDLIBRARY\".$SOVERSION\n\t  ;;\n    hp*|HP*)\n\t  case `uname -m` in\n\t\tia64)\n\t\t\tLDLIBRARY='libpython$(VERSION).so'\n\t\t\t;;\n\t\t*)\n\t\t\tLDLIBRARY='libpython$(VERSION).sl'\n\t\t\t;;\n\t  esac\n\t  BLDLIBRARY='-Wl,+b,$(LIBDIR) -L. -lpython$(VERSION)'\n\t  RUNSHARED=SHLIB_PATH=`pwd`:${SHLIB_PATH}\n\t  ;;\n    OSF*)\n\t  LDLIBRARY='libpython$(VERSION).so'\n\t  BLDLIBRARY='-rpath $(LIBDIR) -L. -lpython$(VERSION)'\n\t  RUNSHARED=LD_LIBRARY_PATH=`pwd`:${LD_LIBRARY_PATH}\n\t  ;;\n    atheos*)\n\t  LDLIBRARY='libpython$(VERSION).so'\n\t  BLDLIBRARY='-L. -lpython$(VERSION)'\n\t  RUNSHARED=DLL_PATH=`pwd`:${DLL_PATH:-/atheos/sys/libs:/atheos/autolnk/lib}\n\t  ;;\n    Darwin*)\n    \tLDLIBRARY='libpython$(VERSION).dylib'\n\tBLDLIBRARY='-L. -lpython$(VERSION)'\n\tRUNSHARED='DYLD_LIBRARY_PATH=`pwd`:${DYLD_LIBRARY_PATH}'\n\t;;\n    AIX*)\n\tLDLIBRARY='libpython$(VERSION).so'\n\tRUNSHARED=LIBPATH=`pwd`:${LIBPATH}\n\t;;\n\n  esac\nelse # shared is disabled\n  case $ac_sys_system in\n    CYGWIN*)\n          BLDLIBRARY='$(LIBRARY)'\n          LDLIBRARY='libpython$(VERSION).dll.a'\n          ;;\n  esac\nfi\n\nAC_MSG_RESULT($LDLIBRARY)\n\nAC_PROG_RANLIB\nAC_SUBST(AR)\nAC_CHECK_PROGS(AR, ar aal, ar)\n\n# tweak ARFLAGS only if the user didn't set it on the command line\nAC_SUBST(ARFLAGS)\nif test -z \"$ARFLAGS\"\nthen\n        ARFLAGS=\"rc\"\nfi\n\nAC_SUBST(SVNVERSION)\nAC_CHECK_PROG(SVNVERSION, svnversion, found, not-found)\nif test $SVNVERSION = found\nthen\n\tSVNVERSION=\"svnversion \\$(srcdir)\"\nelse\n\tSVNVERSION=\"echo Unversioned directory\"\nfi\n\nAC_SUBST(HGVERSION)\nAC_SUBST(HGTAG)\nAC_SUBST(HGBRANCH)\nAC_CHECK_PROG(HAS_HG, hg, found, not-found)\nif test $HAS_HG = found\nthen\n    HGVERSION=\"hg id -i \\$(srcdir)\"\n    HGTAG=\"hg id -t \\$(srcdir)\"\n    HGBRANCH=\"hg id -b \\$(srcdir)\"\nelse\n    HGVERSION=\"\"\n    HGTAG=\"\"\n    HGBRANCH=\"\"\nfi\n\ncase $MACHDEP in\nbsdos*|hp*|HP*)\n\t# install -d does not work on BSDI or HP-UX\n\tif test -z \"$INSTALL\"\n\tthen\n\t\tINSTALL=\"${srcdir}/install-sh -c\"\n\tfi\nesac\nAC_PROG_INSTALL\n\n# Not every filesystem supports hard links\nAC_SUBST(LN)\nif test -z \"$LN\" ; then\n\tcase $ac_sys_system in\n\t\tCYGWIN*) LN=\"ln -s\";;\n\t\tatheos*) LN=\"ln -s\";;\n\t\t*) LN=ln;;\n\tesac\nfi\n\n# Check for --with-pydebug\nAC_MSG_CHECKING(for --with-pydebug)\nAC_ARG_WITH(pydebug, \n            AC_HELP_STRING(--with-pydebug, build with Py_DEBUG defined),\n[\nif test \"$withval\" != no\nthen \n  AC_DEFINE(Py_DEBUG, 1, \n  [Define if you want to build an interpreter with many run-time checks.]) \n  AC_MSG_RESULT(yes); \n  Py_DEBUG='true'\nelse AC_MSG_RESULT(no); Py_DEBUG='false'\nfi],\n[AC_MSG_RESULT(no)])\n\n# XXX Shouldn't the code above that fiddles with BASECFLAGS and OPT be\n# merged with this chunk of code?\n\n# Optimizer/debugger flags\n# ------------------------\n# (The following bit of code is complicated enough - please keep things\n# indented properly.  Just pretend you're editing Python code. ;-)\n\n# There are two parallel sets of case statements below, one that checks to\n# see if OPT was set and one that does BASECFLAGS setting based upon\n# compiler and platform.  BASECFLAGS tweaks need to be made even if the\n# user set OPT.\n\n# tweak OPT based on compiler and platform, only if the user didn't set\n# it on the command line\nAC_SUBST(OPT)\nif test \"${OPT-unset}\" = \"unset\"\nthen\n    case $GCC in\n    yes)\n        if test \"$CC\" != 'g++' ; then\n\t    STRICT_PROTO=\"-Wstrict-prototypes\"\n\tfi\n        # For gcc 4.x we need to use -fwrapv so lets check if its supported\n        if \"$CC\" -v --help 2>/dev/null |grep -- -fwrapv > /dev/null; then\n           WRAP=\"-fwrapv\"\n        fi\n\tcase $ac_cv_prog_cc_g in\n\tyes)\n\t    if test \"$Py_DEBUG\" = 'true' ; then\n\t\t# Optimization messes up debuggers, so turn it off for\n\t\t# debug builds.\n\t\tOPT=\"-g -Wall $STRICT_PROTO\"\n\t    else\n\t\tOPT=\"-g $WRAP -O3 -Wall $STRICT_PROTO\"\n\t    fi\n\t    ;;\n\t*)\n\t    OPT=\"-O3 -Wall $STRICT_PROTO\"\n\t    ;;\n\tesac\n\tcase $ac_sys_system in\n\t    SCO_SV*) OPT=\"$OPT -m486 -DSCO5\"\n\t    ;;\n        esac\n\t;;\n\n    *)\n\tOPT=\"-O\"\n\t;;\n    esac\nfi\n\nAC_SUBST(BASECFLAGS)\n\n# The -arch flags for universal builds on OSX\nUNIVERSAL_ARCH_FLAGS=\nAC_SUBST(UNIVERSAL_ARCH_FLAGS)\n\n# tweak BASECFLAGS based on compiler and platform\ncase $GCC in\nyes)\n    # Python doesn't violate C99 aliasing rules, but older versions of\n    # GCC produce warnings for legal Python code.  Enable\n    # -fno-strict-aliasing on versions of GCC that support but produce\n    # warnings.  See Issue3326\n    AC_MSG_CHECKING(whether $CC accepts and needs -fno-strict-aliasing)\n     ac_save_cc=\"$CC\"\n     CC=\"$CC -fno-strict-aliasing\"\n     save_CFLAGS=\"$CFLAGS\"\n     AC_CACHE_VAL(ac_cv_no_strict_aliasing,\n       AC_COMPILE_IFELSE(\n         [\n\t   AC_LANG_PROGRAM([[]], [[]])\n\t ],[\n\t   CC=\"$ac_save_cc -fstrict-aliasing\"\n           CFLAGS=\"$CFLAGS -Werror -Wstrict-aliasing\"\n           AC_COMPILE_IFELSE(\n\t     [\n\t       AC_LANG_PROGRAM([[void f(int **x) {}]],\n\t         [[double *x; f((int **) &x);]])\n\t     ],[\n\t       ac_cv_no_strict_aliasing=no\n\t     ],[\n               ac_cv_no_strict_aliasing=yes\n\t     ])\n\t ],[\n\t   ac_cv_no_strict_aliasing=no\n\t ]))\n     CFLAGS=\"$save_CFLAGS\"\n     CC=\"$ac_save_cc\"\n    AC_MSG_RESULT($ac_cv_no_strict_aliasing)\n    if test $ac_cv_no_strict_aliasing = yes\n    then\n      BASECFLAGS=\"$BASECFLAGS -fno-strict-aliasing\"\n    fi\n\n    # if using gcc on alpha, use -mieee to get (near) full IEEE 754\n    # support.  Without this, treatment of subnormals doesn't follow\n    # the standard.\n    case $ac_sys_machine in\n         alpha*)\n                BASECFLAGS=\"$BASECFLAGS -mieee\"\n                ;;\n    esac\n\n    case $ac_sys_system in\n\tSCO_SV*)\n\t    BASECFLAGS=\"$BASECFLAGS -m486 -DSCO5\"\n\t    ;;\n\t# is there any other compiler on Darwin besides gcc?\n\tDarwin*)\n\t    # -Wno-long-double, -no-cpp-precomp, and -mno-fused-madd\n\t    # used to be here, but non-Apple gcc doesn't accept them.\n            if test \"${CC}\" = gcc\n\t    then\n\t\tAC_MSG_CHECKING(which compiler should be used)\n\t\tcase \"${UNIVERSALSDK}\" in\n\t\t*/MacOSX10.4u.sdk)\n\t\t\t# Build using 10.4 SDK, force usage of gcc when the \n\t\t\t# compiler is gcc, otherwise the user will get very\n\t\t\t# confusing error messages when building on OSX 10.6\n\t\t\tCC=gcc-4.0\n\t\t\tCPP=cpp-4.0\n\t\t\t;;\n\t\tesac\n\t\tAC_MSG_RESULT($CC)\n\t    fi\n\n\n\t    if test \"${enable_universalsdk}\"; then\n\t\tUNIVERSAL_ARCH_FLAGS=\"\"\n\t        if test \"$UNIVERSAL_ARCHS\" = \"32-bit\" ; then\n\t\t   ARCH_RUN_32BIT=\"\"\n\t\t   UNIVERSAL_ARCH_FLAGS=\"-arch ppc -arch i386\"\n\n\t         elif test \"$UNIVERSAL_ARCHS\" = \"64-bit\" ; then\n\t\t   ARCH_RUN_32BIT=\"true\"\n\t\t   UNIVERSAL_ARCH_FLAGS=\"-arch ppc64 -arch x86_64\"\n\n\t         elif test \"$UNIVERSAL_ARCHS\" = \"all\" ; then\n\t\t   ARCH_RUN_32BIT=\"/usr/bin/arch -i386 -ppc\"\n\t\t   UNIVERSAL_ARCH_FLAGS=\"-arch i386 -arch ppc -arch ppc64 -arch x86_64\"\n\t\t   LIPO_32BIT_FLAGS=\"-extract i386 -extract ppc7400\"\n\t\t   LIPO_64BIT_FLAGS=\"-extract x86_64 -extract ppc64\"\n\n\t         elif test \"$UNIVERSAL_ARCHS\" = \"intel\" ; then\n\t\t   ARCH_RUN_32BIT=\"/usr/bin/arch -i386\"\n\t\t   UNIVERSAL_ARCH_FLAGS=\"-arch i386 -arch x86_64\"\n\t\t   LIPO_32BIT_FLAGS=\"-extract i386\"\n\t\t   LIPO_64BIT_FLAGS=\"-extract x86_64\"\n\n\t         elif test \"$UNIVERSAL_ARCHS\" = \"3-way\" ; then\n\t\t   ARCH_RUN_32BIT=\"/usr/bin/arch -i386 -ppc\"\n\t\t   UNIVERSAL_ARCH_FLAGS=\"-arch i386 -arch ppc -arch x86_64\"\n\t\t   LIPO_32BIT_FLAGS=\"-extract i386 -extract ppc7400\"\n\t\t   LIPO_64BIT_FLAGS=\"-extract x86_64\"\n\n\t\t else\n\t           AC_MSG_ERROR([proper usage is --with-universal-arch=32-bit|64-bit|all|intel|3-way])\n\n\t\t fi\n\n\n\t\tCFLAGS=\"${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${CFLAGS}\"\n\t\tif test \"${UNIVERSALSDK}\" != \"/\"\n\t\tthen\n\t\t\tCFLAGS=\"-isysroot ${UNIVERSALSDK} ${CFLAGS}\"\n\t\t\tLDFLAGS=\"-isysroot ${UNIVERSALSDK} ${LDFLAGS}\"\n\t\t\tCPPFLAGSFLAGS=\"-isysroot ${UNIVERSALSDK} ${CPPFLAGS}\"\n\t\tfi\n\t    fi\n\n\t    # Calculate the right deployment target for this build.\n\t    #\n\t    cur_target=`sw_vers -productVersion | sed 's/\\(10\\.[[0-9]]*\\).*/\\1/'`\n\t    if test ${cur_target} '>' 10.2; then\n\t\t    cur_target=10.3\n\t\t    if test ${enable_universalsdk}; then\n\t\t\t    if test \"${UNIVERSAL_ARCHS}\" = \"all\"; then\n\t\t\t\t    # Ensure that the default platform for a \n\t\t\t\t    # 4-way universal build is OSX 10.5, \n\t\t\t\t    # that's the first OS release where \n\t\t\t\t    # 4-way builds make sense.\n\t\t\t\t    cur_target='10.5'\n\n\t\t\t    elif test \"${UNIVERSAL_ARCHS}\" = \"3-way\"; then\n\t\t\t\t    cur_target='10.5'\n\n\t\t\t    elif test \"${UNIVERSAL_ARCHS}\" = \"intel\"; then\n\t\t\t\t    cur_target='10.5'\n\n\t\t\t    elif test \"${UNIVERSAL_ARCHS}\" = \"64-bit\"; then\n\t\t\t\t    cur_target='10.5'\n\t\t\t    fi\n\t\t    else\n\t\t\t    if test `/usr/bin/arch` = \"i386\"; then\n\t\t\t\t    # On Intel macs default to a deployment\n\t\t\t\t    # target of 10.4, that's the first OSX\n\t\t\t\t    # release with Intel support.\n\t\t\t\t    cur_target=\"10.4\"\n\t\t\t    fi\n\t\t    fi\n\t    fi\n\t    CONFIGURE_MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET-${cur_target}}\n\t    \n\t    # Make sure that MACOSX_DEPLOYMENT_TARGET is set in the \n\t    # environment with a value that is the same as what we'll use\n\t    # in the Makefile to ensure that we'll get the same compiler\n\t    # environment during configure and build time.\n\t    MACOSX_DEPLOYMENT_TARGET=\"$CONFIGURE_MACOSX_DEPLOYMENT_TARGET\"\n\t    export MACOSX_DEPLOYMENT_TARGET\n\t    EXPORT_MACOSX_DEPLOYMENT_TARGET=''\n\n\t    ;;\n\tOSF*)\n\t    BASECFLAGS=\"$BASECFLAGS -mieee\"\n\t    ;;\n    esac\n    ;;\n\n*)\n    case $ac_sys_system in\n    OpenUNIX*|UnixWare*)\n\tBASECFLAGS=\"$BASECFLAGS -K pentium,host,inline,loop_unroll,alloca \"\n\t;;\n    OSF*)\n\tBASECFLAGS=\"$BASECFLAGS -ieee -std\"\n    \t;;\n    SCO_SV*)\n\tBASECFLAGS=\"$BASECFLAGS -belf -Ki486 -DSCO5\"\n\t;;\n    esac\n    ;;\nesac\n\nif test \"$Py_DEBUG\" = 'true'; then\n  :\nelse\n  OPT=\"-DNDEBUG $OPT\"\nfi\n\nif test \"$ac_arch_flags\"\nthen\n\tBASECFLAGS=\"$BASECFLAGS $ac_arch_flags\"\nfi\n\n# disable check for icc since it seems to pass, but generates a warning\nif test \"$CC\" = icc\nthen\n  ac_cv_opt_olimit_ok=no\nfi\n\nAC_MSG_CHECKING(whether $CC accepts -OPT:Olimit=0)\nAC_CACHE_VAL(ac_cv_opt_olimit_ok,\n[ac_save_cc=\"$CC\"\nCC=\"$CC -OPT:Olimit=0\"\nAC_TRY_RUN([int main() { return 0; }],\n  ac_cv_opt_olimit_ok=yes,\n  ac_cv_opt_olimit_ok=no,\n  ac_cv_opt_olimit_ok=no)\nCC=\"$ac_save_cc\"])\nAC_MSG_RESULT($ac_cv_opt_olimit_ok)\nif test $ac_cv_opt_olimit_ok = yes; then\n    case $ac_sys_system in\n\t# XXX is this branch needed? On MacOSX 10.2.2 the result of the\n\t# olimit_ok test is \"no\".  Is it \"yes\" in some other Darwin-esque\n\t# environment?\n        Darwin*)\n\t    ;;\n        *)\n\t    BASECFLAGS=\"$BASECFLAGS -OPT:Olimit=0\"\n\t    ;;\n    esac\nelse\n  AC_MSG_CHECKING(whether $CC accepts -Olimit 1500)\n  AC_CACHE_VAL(ac_cv_olimit_ok,\n  [ac_save_cc=\"$CC\"\n  CC=\"$CC -Olimit 1500\"\n  AC_TRY_RUN([int main() { return 0; }],\n    ac_cv_olimit_ok=yes,\n    ac_cv_olimit_ok=no,\n    ac_cv_olimit_ok=no)\n  CC=\"$ac_save_cc\"])\n  AC_MSG_RESULT($ac_cv_olimit_ok)\n  if test $ac_cv_olimit_ok = yes; then\n    BASECFLAGS=\"$BASECFLAGS -Olimit 1500\"\n  fi\nfi\n\n# Check whether GCC supports PyArg_ParseTuple format\nif test \"$GCC\" = \"yes\"\nthen\n  AC_MSG_CHECKING(whether gcc supports ParseTuple __format__)\n  save_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -Werror\"\n  AC_TRY_COMPILE([\n    void f(char*,...)__attribute((format(PyArg_ParseTuple, 1, 2)));\n  ],,\n  AC_DEFINE(HAVE_ATTRIBUTE_FORMAT_PARSETUPLE, 1, [Define if GCC supports __attribute__((format(PyArg_ParseTuple, 2, 3)))])\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n  )\n  CFLAGS=$save_CFLAGS\nfi\n\n# On some compilers, pthreads are available without further options\n# (e.g. MacOS X). On some of these systems, the compiler will not\n# complain if unaccepted options are passed (e.g. gcc on Mac OS X).\n# So we have to see first whether pthreads are available without\n# options before we can check whether -Kpthread improves anything.\nAC_MSG_CHECKING(whether pthreads are available without options)\nAC_CACHE_VAL(ac_cv_pthread_is_default,\n[AC_TRY_RUN([\n#include <pthread.h>\n\nvoid* routine(void* p){return NULL;}\n\nint main(){\n  pthread_t p;\n  if(pthread_create(&p,NULL,routine,NULL)!=0)\n    return 1;\n  (void)pthread_detach(p);\n  return 0;\n}\n],\n[\n  ac_cv_pthread_is_default=yes\n  ac_cv_kthread=no\n  ac_cv_pthread=no\n],\n  ac_cv_pthread_is_default=no,\n  ac_cv_pthread_is_default=no)\n])\nAC_MSG_RESULT($ac_cv_pthread_is_default)\n\n\nif test $ac_cv_pthread_is_default = yes \nthen\n  ac_cv_kpthread=no\nelse\n# -Kpthread, if available, provides the right #defines\n# and linker options to make pthread_create available\n# Some compilers won't report that they do not support -Kpthread,\n# so we need to run a program to see whether it really made the\n# function available.\nAC_MSG_CHECKING(whether $CC accepts -Kpthread)\nAC_CACHE_VAL(ac_cv_kpthread,\n[ac_save_cc=\"$CC\"\nCC=\"$CC -Kpthread\"\nAC_TRY_RUN([\n#include <pthread.h>\n\nvoid* routine(void* p){return NULL;}\n\nint main(){\n  pthread_t p;\n  if(pthread_create(&p,NULL,routine,NULL)!=0)\n    return 1;\n  (void)pthread_detach(p);\n  return 0;\n}\n],\n  ac_cv_kpthread=yes,\n  ac_cv_kpthread=no,\n  ac_cv_kpthread=no)\nCC=\"$ac_save_cc\"])\nAC_MSG_RESULT($ac_cv_kpthread)\nfi\n\nif test $ac_cv_kpthread = no -a $ac_cv_pthread_is_default = no\nthen\n# -Kthread, if available, provides the right #defines\n# and linker options to make pthread_create available\n# Some compilers won't report that they do not support -Kthread,\n# so we need to run a program to see whether it really made the\n# function available.\nAC_MSG_CHECKING(whether $CC accepts -Kthread)\nAC_CACHE_VAL(ac_cv_kthread,\n[ac_save_cc=\"$CC\"\nCC=\"$CC -Kthread\"\nAC_TRY_RUN([\n#include <pthread.h>\n\nvoid* routine(void* p){return NULL;}\n\nint main(){\n  pthread_t p;\n  if(pthread_create(&p,NULL,routine,NULL)!=0)\n    return 1;\n  (void)pthread_detach(p);\n  return 0;\n}\n],\n  ac_cv_kthread=yes,\n  ac_cv_kthread=no,\n  ac_cv_kthread=no)\nCC=\"$ac_save_cc\"])\nAC_MSG_RESULT($ac_cv_kthread)\nfi\n\nif test $ac_cv_kthread = no -a $ac_cv_pthread_is_default = no\nthen\n# -pthread, if available, provides the right #defines\n# and linker options to make pthread_create available\n# Some compilers won't report that they do not support -pthread,\n# so we need to run a program to see whether it really made the\n# function available.\nAC_MSG_CHECKING(whether $CC accepts -pthread)\nAC_CACHE_VAL(ac_cv_thread,\n[ac_save_cc=\"$CC\"\nCC=\"$CC -pthread\"\nAC_TRY_RUN([\n#include <pthread.h>\n\nvoid* routine(void* p){return NULL;}\n\nint main(){\n  pthread_t p;\n  if(pthread_create(&p,NULL,routine,NULL)!=0)\n    return 1;\n  (void)pthread_detach(p);\n  return 0;\n}\n],\n  ac_cv_pthread=yes,\n  ac_cv_pthread=no,\n  ac_cv_pthread=no)\nCC=\"$ac_save_cc\"])\nAC_MSG_RESULT($ac_cv_pthread)\nfi\n\n# If we have set a CC compiler flag for thread support then\n# check if it works for CXX, too.\nac_cv_cxx_thread=no\nif test ! -z \"$CXX\"\nthen\nAC_MSG_CHECKING(whether $CXX also accepts flags for thread support)\nac_save_cxx=\"$CXX\"\n\nif test \"$ac_cv_kpthread\" = \"yes\"\nthen\n  CXX=\"$CXX -Kpthread\"  \n  ac_cv_cxx_thread=yes\nelif test \"$ac_cv_kthread\" = \"yes\"\nthen\n  CXX=\"$CXX -Kthread\"\n  ac_cv_cxx_thread=yes\nelif test \"$ac_cv_pthread\" = \"yes\"\nthen \n  CXX=\"$CXX -pthread\"\n  ac_cv_cxx_thread=yes\nfi\n\nif test $ac_cv_cxx_thread = yes\nthen\n  echo 'void foo();int main(){foo();}void foo(){}' > conftest.$ac_ext\n  $CXX -c conftest.$ac_ext 2>&5\n  if $CXX -o conftest$ac_exeext conftest.$ac_objext 2>&5 \\\n     && test -s conftest$ac_exeext && ./conftest$ac_exeext\n  then\n    ac_cv_cxx_thread=yes\n  else\n    ac_cv_cxx_thread=no\n  fi\n  rm -fr conftest*\nfi\nAC_MSG_RESULT($ac_cv_cxx_thread)\nfi\nCXX=\"$ac_save_cxx\"\n\ndnl # check for ANSI or K&R (\"traditional\") preprocessor\ndnl AC_MSG_CHECKING(for C preprocessor type)\ndnl AC_TRY_COMPILE([\ndnl #define spam(name, doc) {#name, &name, #name \"() -- \" doc}\ndnl int foo;\ndnl struct {char *name; int *addr; char *doc;} desc = spam(foo, \"something\");\ndnl ], [;], cpp_type=ansi, AC_DEFINE(HAVE_OLD_CPP) cpp_type=traditional)\ndnl AC_MSG_RESULT($cpp_type)\n\n# checks for header files\nAC_HEADER_STDC\nAC_CHECK_HEADERS(asm/types.h conio.h curses.h direct.h dlfcn.h errno.h \\\nfcntl.h grp.h \\\nieeefp.h io.h langinfo.h libintl.h ncurses.h poll.h process.h pthread.h \\\nshadow.h signal.h stdint.h stropts.h termios.h thread.h \\\nunistd.h utime.h \\\nsys/audioio.h sys/bsdtty.h sys/epoll.h sys/event.h sys/file.h sys/loadavg.h \\\nsys/lock.h sys/mkdev.h sys/modem.h \\\nsys/param.h sys/poll.h sys/select.h sys/socket.h sys/statvfs.h sys/stat.h \\\nsys/termio.h sys/time.h \\\nsys/times.h sys/types.h sys/un.h sys/utsname.h sys/wait.h pty.h libutil.h \\\nsys/resource.h netpacket/packet.h sysexits.h bluetooth.h \\\nbluetooth/bluetooth.h linux/tipc.h)\nAC_HEADER_DIRENT\nAC_HEADER_MAJOR\n\n# On Solaris, term.h requires curses.h\nAC_CHECK_HEADERS(term.h,,,[\n#ifdef HAVE_CURSES_H\n#include <curses.h>\n#endif\n])\n\n# On Linux, netlink.h requires asm/types.h\nAC_CHECK_HEADERS(linux/netlink.h,,,[\n#ifdef HAVE_ASM_TYPES_H\n#include <asm/types.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n])\n\n# checks for typedefs\nwas_it_defined=no\nAC_MSG_CHECKING(for clock_t in time.h)\nAC_EGREP_HEADER(clock_t, time.h, was_it_defined=yes, [\n    AC_DEFINE(clock_t, long, [Define to 'long' if <time.h> doesn't define.])\n])\nAC_MSG_RESULT($was_it_defined)\n\n# Check whether using makedev requires defining _OSF_SOURCE\nAC_MSG_CHECKING(for makedev)\nAC_TRY_LINK([\n#if defined(MAJOR_IN_MKDEV)\n#include <sys/mkdev.h>\n#elif defined(MAJOR_IN_SYSMACROS)\n#include <sys/sysmacros.h>\n#else\n#include <sys/types.h>\n#endif ],\n\t    [ makedev(0, 0) ],\n\t    ac_cv_has_makedev=yes,\n\t    ac_cv_has_makedev=no)\nif test \"$ac_cv_has_makedev\" = \"no\"; then\n    # we didn't link, try if _OSF_SOURCE will allow us to link\n    AC_TRY_LINK([\n#define _OSF_SOURCE 1\n#include <sys/types.h>\n    ],\n    [ makedev(0, 0) ],\n    ac_cv_has_makedev=yes,\n    ac_cv_has_makedev=no)\n    if test \"$ac_cv_has_makedev\" = \"yes\"; then\n        AC_DEFINE(_OSF_SOURCE, 1, [Define _OSF_SOURCE to get the makedev macro.])\n    fi\nfi\nAC_MSG_RESULT($ac_cv_has_makedev)\nif test \"$ac_cv_has_makedev\" = \"yes\"; then\n    AC_DEFINE(HAVE_MAKEDEV, 1, [Define this if you have the makedev macro.])\nfi\n\n# Enabling LFS on Solaris (2.6 to 9) with gcc 2.95 triggers a bug in\n# the system headers: If _XOPEN_SOURCE and _LARGEFILE_SOURCE are\n# defined, but the compiler does not support pragma redefine_extname,\n# and _LARGEFILE64_SOURCE is not defined, the headers refer to 64-bit\n# structures (such as rlimit64) without declaring them. As a\n# work-around, disable LFS on such configurations\n\nuse_lfs=yes\nAC_MSG_CHECKING(Solaris LFS bug)\nAC_TRY_COMPILE([\n#define _LARGEFILE_SOURCE 1\n#define _FILE_OFFSET_BITS 64\n#include <sys/resource.h>\n],struct rlimit foo;,sol_lfs_bug=no,sol_lfs_bug=yes)\nAC_MSG_RESULT($sol_lfs_bug)\nif test \"$sol_lfs_bug\" = \"yes\"; then\n  use_lfs=no\nfi\n\nif test \"$use_lfs\" = \"yes\"; then\n# Two defines needed to enable largefile support on various platforms\n# These may affect some typedefs\ncase $ac_sys_system/$ac_sys_release in\nAIX*)\n    AC_DEFINE(_LARGE_FILES, 1, \n    [This must be defined on AIX systems to enable large file support.])\n    ;;\nesac\nAC_DEFINE(_LARGEFILE_SOURCE, 1, \n[This must be defined on some systems to enable large file support.])\nAC_DEFINE(_FILE_OFFSET_BITS, 64,\n[This must be set to 64 on some systems to enable large file support.])\nfi\n\n# Add some code to confdefs.h so that the test for off_t works on SCO\ncat >> confdefs.h <<\\EOF\n#if defined(SCO_DS)\n#undef _OFF_T\n#endif\nEOF\n\n# Type availability checks\nAC_TYPE_MODE_T\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIGNAL\nAC_TYPE_SIZE_T\nAC_TYPE_UID_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_INT32_T\nAC_TYPE_INT64_T\nAC_CHECK_TYPE(ssize_t,\n  AC_DEFINE(HAVE_SSIZE_T, 1, Define if your compiler provides ssize_t),,)\n\n# Sizes of various common basic types\n# ANSI C requires sizeof(char) == 1, so no need to check it\nAC_CHECK_SIZEOF(int, 4)\nAC_CHECK_SIZEOF(long, 4)\nAC_CHECK_SIZEOF(void *, 4)\nAC_CHECK_SIZEOF(short, 2)\nAC_CHECK_SIZEOF(float, 4)\nAC_CHECK_SIZEOF(double, 8)\nAC_CHECK_SIZEOF(fpos_t, 4)\nAC_CHECK_SIZEOF(size_t, 4)\nAC_CHECK_SIZEOF(pid_t, 4)\n\nAC_MSG_CHECKING(for long long support)\nhave_long_long=no\nAC_TRY_COMPILE([], [long long x; x = (long long)0;], [\n  AC_DEFINE(HAVE_LONG_LONG, 1, [Define this if you have the type long long.]) \n  have_long_long=yes\n])\nAC_MSG_RESULT($have_long_long)\nif test \"$have_long_long\" = yes ; then\nAC_CHECK_SIZEOF(long long, 8)\nfi\n\nAC_MSG_CHECKING(for long double support)\nhave_long_double=no\nAC_TRY_COMPILE([], [long double x; x = (long double)0;], [\n  AC_DEFINE(HAVE_LONG_DOUBLE, 1, [Define this if you have the type long double.]) \n  have_long_double=yes\n])\nAC_MSG_RESULT($have_long_double)\nif test \"$have_long_double\" = yes ; then\nAC_CHECK_SIZEOF(long double, 16)\nfi\n\n\nAC_MSG_CHECKING(for _Bool support)\nhave_c99_bool=no\nAC_TRY_COMPILE([], [_Bool x; x = (_Bool)0;], [\n  AC_DEFINE(HAVE_C99_BOOL, 1, [Define this if you have the type _Bool.]) \n  have_c99_bool=yes\n])\nAC_MSG_RESULT($have_c99_bool)\nif test \"$have_c99_bool\" = yes ; then\nAC_CHECK_SIZEOF(_Bool, 1)\nfi\n\nAC_CHECK_TYPES(uintptr_t, \n   [AC_CHECK_SIZEOF(uintptr_t, 4)], \n   [], [#ifdef HAVE_STDINT_H\n        #include <stdint.h>\n        #endif\n        #ifdef HAVE_INTTYPES_H\n        #include <inttypes.h>\n        #endif])\n\n\n# Hmph. AC_CHECK_SIZEOF() doesn't include <sys/types.h>.\nAC_MSG_CHECKING(size of off_t)\nAC_CACHE_VAL(ac_cv_sizeof_off_t,\n[AC_TRY_RUN([#include <stdio.h>\n#include <sys/types.h>\nmain()\n{\n  FILE *f=fopen(\"conftestval\", \"w\");\n  if (!f) exit(1);\n  fprintf(f, \"%d\\n\", sizeof(off_t));\n  exit(0);\n}],\nac_cv_sizeof_off_t=`cat conftestval`,\nac_cv_sizeof_off_t=0,\nac_cv_sizeof_off_t=4)\n])\nAC_MSG_RESULT($ac_cv_sizeof_off_t)\nAC_DEFINE_UNQUOTED(SIZEOF_OFF_T, $ac_cv_sizeof_off_t,\n[The number of bytes in an off_t.])\n\nAC_MSG_CHECKING(whether to enable large file support)\nif test \"$have_long_long\" = yes\nthen\nif test \"$ac_cv_sizeof_off_t\" -gt \"$ac_cv_sizeof_long\" -a \\\n\t\"$ac_cv_sizeof_long_long\" -ge \"$ac_cv_sizeof_off_t\"; then\n  AC_DEFINE(HAVE_LARGEFILE_SUPPORT, 1, \n  [Defined to enable large file support when an off_t is bigger than a long\n   and long long is available and at least as big as an off_t. You may need\n   to add some flags for configuration and compilation to enable this mode.\n   (For Solaris and Linux, the necessary defines are already defined.)])\n  AC_MSG_RESULT(yes)\nelse\n  AC_MSG_RESULT(no)\nfi\nelse\n  AC_MSG_RESULT(no)\nfi\n\n# AC_CHECK_SIZEOF() doesn't include <time.h>.\nAC_MSG_CHECKING(size of time_t)\nAC_CACHE_VAL(ac_cv_sizeof_time_t,\n[AC_TRY_RUN([#include <stdio.h>\n#include <time.h>\nmain()\n{\n  FILE *f=fopen(\"conftestval\", \"w\");\n  if (!f) exit(1);\n  fprintf(f, \"%d\\n\", sizeof(time_t));\n  exit(0);\n}],\nac_cv_sizeof_time_t=`cat conftestval`,\nac_cv_sizeof_time_t=0,\nac_cv_sizeof_time_t=4)\n])\nAC_MSG_RESULT($ac_cv_sizeof_time_t)\nAC_DEFINE_UNQUOTED(SIZEOF_TIME_T, $ac_cv_sizeof_time_t, \n[The number of bytes in a time_t.])\n\n\n# if have pthread_t then define SIZEOF_PTHREAD_T\nac_save_cc=\"$CC\"\nif test \"$ac_cv_kpthread\" = \"yes\"\nthen CC=\"$CC -Kpthread\"\nelif test \"$ac_cv_kthread\" = \"yes\"\nthen CC=\"$CC -Kthread\"\nelif test \"$ac_cv_pthread\" = \"yes\"\nthen CC=\"$CC -pthread\"\nfi\nAC_MSG_CHECKING(for pthread_t)\nhave_pthread_t=no\nAC_TRY_COMPILE([#include <pthread.h>], [pthread_t x; x = *(pthread_t*)0;], have_pthread_t=yes)\nAC_MSG_RESULT($have_pthread_t)\nif test \"$have_pthread_t\" = yes ; then\n  # AC_CHECK_SIZEOF() doesn't include <pthread.h>.\n  AC_MSG_CHECKING(size of pthread_t)\n  AC_CACHE_VAL(ac_cv_sizeof_pthread_t,\n  [AC_TRY_RUN([#include <stdio.h>\n#include <pthread.h>\n  main()\n  {\n    FILE *f=fopen(\"conftestval\", \"w\");\n    if (!f) exit(1);\n    fprintf(f, \"%d\\n\", sizeof(pthread_t));\n    exit(0);\n  }],\n  ac_cv_sizeof_pthread_t=`cat conftestval`,\n  ac_cv_sizeof_pthread_t=0,\n  ac_cv_sizeof_pthread_t=4)\n  ])\n  AC_MSG_RESULT($ac_cv_sizeof_pthread_t)\n  AC_DEFINE_UNQUOTED(SIZEOF_PTHREAD_T, $ac_cv_sizeof_pthread_t,\n   [The number of bytes in a pthread_t.])\nfi\nCC=\"$ac_save_cc\"\n\n\n\nAC_SUBST(OTHER_LIBTOOL_OPT)\ncase $ac_sys_system/$ac_sys_release in\n  Darwin/@<:@01567@:>@\\..*) \n    OTHER_LIBTOOL_OPT=\"-prebind -seg1addr 0x10000000\"\n    ;;\n  Darwin/*)\n    OTHER_LIBTOOL_OPT=\"\"\n    ;;\nesac\n\n\nARCH_RUN_32BIT=\"\"\nAC_SUBST(LIBTOOL_CRUFT)\ncase $ac_sys_system/$ac_sys_release in\n  Darwin/@<:@01567@:>@\\..*) \n    LIBTOOL_CRUFT=\"-framework System -lcc_dynamic\"\n    if test \"${enable_universalsdk}\"; then\n\t    :\n    else\n        LIBTOOL_CRUFT=\"${LIBTOOL_CRUFT} -arch_only `/usr/bin/arch`\"\n    fi\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -install_name $(PYTHONFRAMEWORKINSTALLDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -compatibility_version $(VERSION) -current_version $(VERSION)';;\n  Darwin/*)\n    gcc_version=`gcc -dumpversion`\n    if test ${gcc_version} '<' 4.0\n        then\n            LIBTOOL_CRUFT=\"-lcc_dynamic\"\n        else \n            LIBTOOL_CRUFT=\"\"\n    fi\n    AC_TRY_RUN([\n    #include <unistd.h>\n    int main(int argc, char*argv[])\n    {\n      if (sizeof(long) == 4) {\n    \t  return 0;\n      } else {\n      \t  return 1;\n      }\n    }\n    ], ac_osx_32bit=yes,\n       ac_osx_32bit=no,\n       ac_osx_32bit=yes)\n    \n    if test \"${ac_osx_32bit}\" = \"yes\"; then\n    \tcase `/usr/bin/arch` in\n    \ti386) \n    \t\tMACOSX_DEFAULT_ARCH=\"i386\" \n    \t\t;;\n    \tppc) \n    \t\tMACOSX_DEFAULT_ARCH=\"ppc\" \n    \t\t;;\n    \t*)\n    \t\tAC_MSG_ERROR([Unexpected output of 'arch' on OSX])\n    \t\t;;\n    \tesac\n    else\n    \tcase `/usr/bin/arch` in\n    \ti386) \n    \t\tMACOSX_DEFAULT_ARCH=\"x86_64\" \n    \t\t;;\n    \tppc) \n    \t\tMACOSX_DEFAULT_ARCH=\"ppc64\" \n    \t\t;;\n    \t*)\n    \t\tAC_MSG_ERROR([Unexpected output of 'arch' on OSX])\n    \t\t;;\n    \tesac\n\n\t#ARCH_RUN_32BIT=\"true\"\n    fi\n\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT\" -lSystem -lSystemStubs -arch_only ${MACOSX_DEFAULT_ARCH}\"\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -install_name $(PYTHONFRAMEWORKINSTALLDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n    LIBTOOL_CRUFT=$LIBTOOL_CRUFT' -compatibility_version $(VERSION) -current_version $(VERSION)';;\nesac\n\nAC_MSG_CHECKING(for --enable-framework)\nif test \"$enable_framework\"\nthen\n\tBASECFLAGS=\"$BASECFLAGS -fno-common -dynamic\"\n\t# -F. is needed to allow linking to the framework while \n\t# in the build location.\n\tAC_DEFINE(WITH_NEXT_FRAMEWORK, 1, \n         [Define if you want to produce an OpenStep/Rhapsody framework\n         (shared library plus accessory files).])\n\tAC_MSG_RESULT(yes)\n\tif test $enable_shared = \"yes\"\n\tthen\n\t\tAC_MSG_ERROR([Specifying both --enable-shared and --enable-framework is not supported, use only --enable-framework instead])\n\tfi\nelse\n\tAC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING(for dyld)\ncase $ac_sys_system/$ac_sys_release in\n  Darwin/*)\n  \tAC_DEFINE(WITH_DYLD, 1, \n        [Define if you want to use the new-style (Openstep, Rhapsody, MacOS)\n         dynamic linker (dyld) instead of the old-style (NextStep) dynamic\n         linker (rld). Dyld is necessary to support frameworks.])\n  \tAC_MSG_RESULT(always on for Darwin)\n  \t;;\n  *)\n\tAC_MSG_RESULT(no)\n\t;;\nesac\n\n# Set info about shared libraries.\nAC_SUBST(SO)\nAC_SUBST(LDSHARED)\nAC_SUBST(BLDSHARED)\nAC_SUBST(CCSHARED)\nAC_SUBST(LINKFORSHARED)\n# SO is the extension of shared libraries `(including the dot!)\n# -- usually .so, .sl on HP-UX, .dll on Cygwin\nAC_MSG_CHECKING(SO)\nif test -z \"$SO\"\nthen\n\tcase $ac_sys_system in\n\thp*|HP*)\n\t\tcase `uname -m` in\n\t\t\tia64) SO=.so;;\n\t  \t\t*)    SO=.sl;;\n\t\tesac\n\t\t;;\n\tCYGWIN*)   SO=.dll;;\n\t*)\t   SO=.so;;\n\tesac\nelse\n\t# this might also be a termcap variable, see #610332\n        echo\n        echo '====================================================================='\n        echo '+                                                                   +'\n\techo '+ WARNING: You have set SO in your environment.                     +'\n        echo '+ Do you really mean to change the extension for shared libraries?  +'\n        echo '+ Continuing in 10 seconds to let you to ponder.                    +'\n        echo '+                                                                   +'\n        echo '====================================================================='\n\tsleep 10\nfi\nAC_MSG_RESULT($SO)\n\nAC_DEFINE_UNQUOTED(SHLIB_EXT, \"$SO\", [Define this to be extension of shared libraries (including the dot!).])\n# LDSHARED is the ld *command* used to create shared library\n# -- \"cc -G\" on SunOS 5.x, \"ld -shared\" on IRIX 5\n# (Shared libraries in this instance are shared modules to be loaded into\n# Python, as opposed to building Python itself as a shared library.)\nAC_MSG_CHECKING(LDSHARED)\nif test -z \"$LDSHARED\"\nthen\n\tcase $ac_sys_system/$ac_sys_release in\n\tAIX*)\n\t\tBLDSHARED=\"\\$(srcdir)/Modules/ld_so_aix \\$(CC) -bI:\\$(srcdir)/Modules/python.exp\"\n\t\tLDSHARED=\"\\$(BINLIBDEST)/config/ld_so_aix \\$(CC) -bI:\\$(BINLIBDEST)/config/python.exp\"\n\t\t;;\n\tIRIX/5*) LDSHARED=\"ld -shared\";;\n\tIRIX*/6*) LDSHARED=\"ld ${SGI_ABI} -shared -all\";;\n\tSunOS/5*) \n\t\tif test \"$GCC\" = \"yes\"\n\t\tthen LDSHARED='$(CC) -shared $(LDFLAGS)'\n\t\telse LDSHARED='$(CC) -G $(LDFLAGS)';\n\t\tfi ;;\n\thp*|HP*)\n\t\tif test \"$GCC\" = \"yes\"\n\t\tthen LDSHARED='$(CC) -shared'\n\t\telse LDSHARED='ld -b';\n\t\tfi ;;\n\tOSF*) LDSHARED=\"ld -shared -expect_unresolved \\\"*\\\"\";;\n\tDarwin/1.3*)\n\t\tLDSHARED='$(CC) $(LDFLAGS) -bundle'\n\t\tif test \"$enable_framework\" ; then\n\t\t\t# Link against the framework. All externals should be defined.\n\t\t\tBLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\tLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\telse\n\t\t\t# No framework. Ignore undefined symbols, assuming they come from Python\n\t\t\tLDSHARED=\"$LDSHARED -undefined suppress\"\n\t\tfi ;;\n\tDarwin/1.4*|Darwin/5.*|Darwin/6.*)\n\t\tLDSHARED='$(CC) $(LDFLAGS) -bundle'\n\t\tif test \"$enable_framework\" ; then\n\t\t\t# Link against the framework. All externals should be defined.\n\t\t\tBLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\tLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\telse\n\t\t\t# No framework, use the Python app as bundle-loader\n\t\t\tBLDSHARED=\"$LDSHARED \"'-bundle_loader $(BUILDPYTHON)'\n\t\t\tLDSHARED=\"$LDSHARED \"'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'\n\t\tfi ;;\n\tDarwin/*)\n\t\t# Use -undefined dynamic_lookup whenever possible (10.3 and later).\n\t\t# This allows an extension to be used in any Python\n\n\t\tif test ${MACOSX_DEPLOYMENT_TARGET} '>' 10.2\n\t\tthen\n\t\t\tif test \"${enable_universalsdk}\"; then\n\t\t\t\tLDFLAGS=\"${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${LDFLAGS}\"\n\t\t\tfi\n\t\t\tLDSHARED='$(CC) $(LDFLAGS) -bundle -undefined dynamic_lookup'\n\t\t\tBLDSHARED=\"$LDSHARED\"\n\t\telse\n\t\t\tLDSHARED='$(CC) $(LDFLAGS) -bundle'\n\t\t\tif test \"$enable_framework\" ; then\n\t\t\t\t# Link against the framework. All externals should be defined.\n\t\t\t\tBLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\t\tLDSHARED=\"$LDSHARED \"'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\t\telse\n\t\t\t\t# No framework, use the Python app as bundle-loader\n\t\t\t\tBLDSHARED=\"$LDSHARED \"'-bundle_loader $(BUILDPYTHON)'\n\t\t\t\tLDSHARED=\"$LDSHARED \"'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'\n\t\t\tfi\n\t\tfi\n\t\t;;\n\tLinux*|GNU*|QNX*) LDSHARED='$(CC) -shared';;\n\tBSD/OS*/4*) LDSHARED=\"gcc -shared\";;\n\tFreeBSD*)\n\t\tif [[ \"`$CC -dM -E - </dev/null | grep __ELF__`\" != \"\" ]]\n\t\tthen\n\t\t\tLDSHARED='$(CC) -shared ${LDFLAGS}'\n\t\telse\n\t\t\tLDSHARED=\"ld -Bshareable ${LDFLAGS}\"\n\t\tfi;;\n\tOpenBSD*)\n\t\tif [[ \"`$CC -dM -E - </dev/null | grep __ELF__`\" != \"\" ]]\n\t\tthen\n\t\t\t\tLDSHARED='$(CC) -shared $(CCSHARED) ${LDFLAGS}'\n\t\telse\n\t\t\t\tcase `uname -r` in\n\t\t\t\t[[01]].* | 2.[[0-7]] | 2.[[0-7]].*)\n\t\t\t\t   LDSHARED=\"ld -Bshareable ${LDFLAGS}\"\n\t\t\t\t   ;;\n\t\t\t\t*)\n\t\t\t\t   LDSHARED='$(CC) -shared $(CCSHARED) ${LDFLAGS}'\n\t\t\t\t   ;;\n\t\t\t\tesac\n\t\tfi;;\n\tNetBSD*|DragonFly*) LDSHARED='$(CC) -shared ${LDFLAGS}';;\n\tOpenUNIX*|UnixWare*)\n\t\tif test \"$GCC\" = \"yes\"\n\t\tthen LDSHARED='$(CC) -shared'\n\t\telse LDSHARED='$(CC) -G'\n\t\tfi;;\n\tSCO_SV*) LDSHARED='$(CC) -Wl,-G,-Bexport';;\n\tCYGWIN*) LDSHARED=\"gcc -shared -Wl,--enable-auto-image-base\";;\n\tatheos*) LDSHARED=\"gcc -shared\";;\n\t*)\tLDSHARED=\"ld\";;\n\tesac\nfi\nAC_MSG_RESULT($LDSHARED)\nBLDSHARED=${BLDSHARED-$LDSHARED}\n# CCSHARED are the C *flags* used to create objects to go into a shared\n# library (module) -- this is only needed for a few systems\nAC_MSG_CHECKING(CCSHARED)\nif test -z \"$CCSHARED\"\nthen\n\tcase $ac_sys_system/$ac_sys_release in\n\tSunOS*) if test \"$GCC\" = yes;\n\t\tthen CCSHARED=\"-fPIC\";\n\t\telif test `uname -p` = sparc;\n\t\tthen CCSHARED=\"-xcode=pic32\";\n\t\telse CCSHARED=\"-Kpic\";\n\t\tfi;;\n\thp*|HP*) if test \"$GCC\" = yes;\n\t\t then CCSHARED=\"-fPIC\";\n\t\t else CCSHARED=\"+z\";\n\t\t fi;;\n\tLinux*|GNU*) CCSHARED=\"-fPIC\";;\n\tBSD/OS*/4*) CCSHARED=\"-fpic\";;\n\tFreeBSD*|NetBSD*|OpenBSD*|DragonFly*) CCSHARED=\"-fPIC\";;\n\tOpenUNIX*|UnixWare*)\n\t\tif test \"$GCC\" = \"yes\"\n\t\tthen CCSHARED=\"-fPIC\"\n\t\telse CCSHARED=\"-KPIC\"\n\t\tfi;;\n\tSCO_SV*)\n\t\tif test \"$GCC\" = \"yes\"\n\t\tthen CCSHARED=\"-fPIC\"\n\t\telse CCSHARED=\"-Kpic -belf\"\n\t\tfi;;\n\tIRIX*/6*)  case $CC in\n\t\t   *gcc*) CCSHARED=\"-shared\";;\n\t\t   *) CCSHARED=\"\";;\n\t\t   esac;;\n\tatheos*) CCSHARED=\"-fPIC\";;\n\tesac\nfi\nAC_MSG_RESULT($CCSHARED)\n# LINKFORSHARED are the flags passed to the $(CC) command that links\n# the python executable -- this is only needed for a few systems\nAC_MSG_CHECKING(LINKFORSHARED)\nif test -z \"$LINKFORSHARED\"\nthen\n\tcase $ac_sys_system/$ac_sys_release in\n\tAIX*)\tLINKFORSHARED='-Wl,-bE:Modules/python.exp -lld';;\n\thp*|HP*)\n\t    LINKFORSHARED=\"-Wl,-E -Wl,+s\";;\n#\t    LINKFORSHARED=\"-Wl,-E -Wl,+s -Wl,+b\\$(BINLIBDEST)/lib-dynload\";;\n\tBSD/OS/4*) LINKFORSHARED=\"-Xlinker -export-dynamic\";;\n\tLinux*|GNU*) LINKFORSHARED=\"-Xlinker -export-dynamic\";;\n\t# -u libsys_s pulls in all symbols in libsys\n\tDarwin/*) \n\t\tLINKFORSHARED=\"$extra_undefs -framework CoreFoundation\"\n\t\tif test \"$enable_framework\"\n\t\tthen\n\t\t\tLINKFORSHARED=\"$LINKFORSHARED \"'$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n\t\tfi\n\t\tLINKFORSHARED=\"$LINKFORSHARED\";;\n\tOpenUNIX*|UnixWare*) LINKFORSHARED=\"-Wl,-Bexport\";;\n\tSCO_SV*) LINKFORSHARED=\"-Wl,-Bexport\";;\n\tReliantUNIX*) LINKFORSHARED=\"-W1 -Blargedynsym\";;\n\tFreeBSD*|NetBSD*|OpenBSD*|DragonFly*) \n\t\tif [[ \"`$CC -dM -E - </dev/null | grep __ELF__`\" != \"\" ]]\n\t\tthen\n\t\t\tLINKFORSHARED=\"-Wl,--export-dynamic\"\n\t\tfi;;\n\tSunOS/5*) case $CC in\n\t\t  *gcc*)\n\t\t    if $CC -Xlinker --help 2>&1 | grep export-dynamic >/dev/null\n\t\t    then\n\t\t\tLINKFORSHARED=\"-Xlinker --export-dynamic\"\n\t\t    fi;;\n\t\t  esac;;\n\tCYGWIN*)\n\t\tif test $enable_shared = \"no\"\n\t\tthen\n\t\t\tLINKFORSHARED='-Wl,--out-implib=$(LDLIBRARY)'\n\t\tfi;;\n\tQNX*)\n\t\t# -Wl,-E causes the symbols to be added to the dynamic\n\t\t# symbol table so that they can be found when a module\n\t\t# is loaded.  -N 2048K causes the stack size to be set\n\t\t# to 2048 kilobytes so that the stack doesn't overflow\n\t\t# when running test_compile.py.\n\t\tLINKFORSHARED='-Wl,-E -N 2048K';;\n\tesac\nfi\nAC_MSG_RESULT($LINKFORSHARED)\n\n\nAC_SUBST(CFLAGSFORSHARED)\nAC_MSG_CHECKING(CFLAGSFORSHARED)\nif test ! \"$LIBRARY\" = \"$LDLIBRARY\"\nthen\n\tcase $ac_sys_system in\n\tCYGWIN*)\n\t\t# Cygwin needs CCSHARED when building extension DLLs\n\t\t# but not when building the interpreter DLL.\n\t\tCFLAGSFORSHARED='';;\n\t*)\n\t\tCFLAGSFORSHARED='$(CCSHARED)'\n\tesac\nfi\nAC_MSG_RESULT($CFLAGSFORSHARED)\n\n# SHLIBS are libraries (except -lc and -lm) to link to the python shared\n# library (with --enable-shared).\n# For platforms on which shared libraries are not allowed to have unresolved\n# symbols, this must be set to $(LIBS) (expanded by make). We do this even\n# if it is not required, since it creates a dependency of the shared library\n# to LIBS. This, in turn, means that applications linking the shared libpython\n# don't need to link LIBS explicitly. The default should be only changed\n# on systems where this approach causes problems.\nAC_SUBST(SHLIBS)\nAC_MSG_CHECKING(SHLIBS)\ncase \"$ac_sys_system\" in\n\t*)\n\t\tSHLIBS='$(LIBS)';;\nesac\nAC_MSG_RESULT($SHLIBS)\n\n\n# checks for libraries\nAC_CHECK_LIB(dl, dlopen)\t# Dynamic linking for SunOS/Solaris and SYSV\nAC_CHECK_LIB(dld, shl_load)\t# Dynamic linking for HP-UX\n\n# only check for sem_init if thread support is requested\nif test \"$with_threads\" = \"yes\" -o -z \"$with_threads\"; then\n    AC_SEARCH_LIBS(sem_init, pthread rt posix4) # 'Real Time' functions on Solaris\n\t\t\t\t\t\t# posix4 on Solaris 2.6\n\t\t\t\t\t\t# pthread (first!) on Linux\nfi\n\n# check if we need libintl for locale functions\nAC_CHECK_LIB(intl, textdomain,\n\t[AC_DEFINE(WITH_LIBINTL, 1,\n\t[Define to 1 if libintl is needed for locale functions.])\n        LIBS=\"-lintl $LIBS\"])\n\n# checks for system dependent C++ extensions support\ncase \"$ac_sys_system\" in\n\tAIX*)\tAC_MSG_CHECKING(for genuine AIX C++ extensions support)\n\t\tAC_TRY_LINK([#include <load.h>],\n\t\t\t    [loadAndInit(\"\", 0, \"\")],\n\t\t\t    [AC_DEFINE(AIX_GENUINE_CPLUSPLUS, 1,\n                      [Define for AIX if your compiler is a genuine IBM xlC/xlC_r\n                       and you want support for AIX C++ shared extension modules.])\n\t\t\t     AC_MSG_RESULT(yes)],\n\t\t\t    [AC_MSG_RESULT(no)]);;\n\t*) ;;\nesac\n\n# Most SVR4 platforms (e.g. Solaris) need -lsocket and -lnsl.\nAC_CHECK_LIB(nsl, t_open, [LIBS=\"-lnsl $LIBS\"]) # SVR4\nAC_CHECK_LIB(socket, socket, [LIBS=\"-lsocket $LIBS\"], [], $LIBS) # SVR4 sockets\n\nAC_MSG_CHECKING(for --with-libs)\nAC_ARG_WITH(libs,\n            AC_HELP_STRING(--with-libs='lib1 ...', link against additional libs),\n[\nAC_MSG_RESULT($withval)\nLIBS=\"$withval $LIBS\"\n],\n[AC_MSG_RESULT(no)])\n\n# Check for use of the system libffi library\nAC_MSG_CHECKING(for --with-system-ffi)\nAC_ARG_WITH(system_ffi,\n            AC_HELP_STRING(--with-system-ffi, build _ctypes module using an installed ffi library),\n            [],\n            [with_system_ffi=\"no\"])\n\nAC_MSG_RESULT($with_system_ffi)\n\n# Check for --with-dbmliborder\nAC_MSG_CHECKING(for --with-dbmliborder)\nAC_ARG_WITH(dbmliborder,\n            AC_HELP_STRING([--with-dbmliborder=db1:db2:...], [order to check db backends for dbm. Valid value is a colon separated string with the backend names `ndbm', `gdbm' and `bdb'.]),\n[\nif test x$with_dbmliborder = xyes\nthen\nAC_MSG_ERROR([proper usage is --with-dbmliborder=db1:db2:...])\nelse\n  for db in `echo $with_dbmliborder | sed 's/:/ /g'`; do\n    if test x$db != xndbm && test x$db != xgdbm && test x$db != xbdb\n    then\n      AC_MSG_ERROR([proper usage is --with-dbmliborder=db1:db2:...])\n    fi\n  done\nfi])\nAC_MSG_RESULT($with_dbmliborder)\n\n# Determine if signalmodule should be used.\nAC_SUBST(USE_SIGNAL_MODULE)\nAC_SUBST(SIGNAL_OBJS)\nAC_MSG_CHECKING(for --with-signal-module)\nAC_ARG_WITH(signal-module,\n            AC_HELP_STRING(--with-signal-module, disable/enable signal module))\n\nif test -z \"$with_signal_module\"\nthen with_signal_module=\"yes\"\nfi\nAC_MSG_RESULT($with_signal_module)\n\nif test \"${with_signal_module}\" = \"yes\"; then\n\tUSE_SIGNAL_MODULE=\"\"\n\tSIGNAL_OBJS=\"\"\nelse\n\tUSE_SIGNAL_MODULE=\"#\"\n\tSIGNAL_OBJS=\"Parser/intrcheck.o Python/sigcheck.o\"\nfi\n\n# This is used to generate Setup.config\nAC_SUBST(USE_THREAD_MODULE)\nUSE_THREAD_MODULE=\"\"\n\nAC_MSG_CHECKING(for --with-dec-threads)\nAC_SUBST(LDLAST)\nAC_ARG_WITH(dec-threads,\n            AC_HELP_STRING(--with-dec-threads, use DEC Alpha/OSF1 thread-safe libraries),\n[\nAC_MSG_RESULT($withval)\nLDLAST=-threads\nif test \"${with_thread+set}\" != set; then\n   with_thread=\"$withval\";\nfi],\n[AC_MSG_RESULT(no)])\n\n# Templates for things AC_DEFINEd more than once.\n# For a single AC_DEFINE, no template is needed.\nAH_TEMPLATE(C_THREADS,[Define if you have the Mach cthreads package])\nAH_TEMPLATE(_REENTRANT,\n  [Define to force use of thread-safe errno, h_errno, and other functions])\nAH_TEMPLATE(WITH_THREAD,\n  [Define if you want to compile in rudimentary thread support])\n\nAC_MSG_CHECKING(for --with-threads)\ndnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output\nAC_ARG_WITH(threads,\n            AC_HELP_STRING(--with(out)-threads@<:@=DIRECTORY@:>@, disable/enable thread support))\n\n# --with-thread is deprecated, but check for it anyway\ndnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output\nAC_ARG_WITH(thread,\n            AC_HELP_STRING(--with(out)-thread@<:@=DIRECTORY@:>@, deprecated; use --with(out)-threads),\n            [with_threads=$with_thread])\n\nif test -z \"$with_threads\"\nthen with_threads=\"yes\"\nfi\nAC_MSG_RESULT($with_threads)\n\nAC_SUBST(THREADOBJ)\nif test \"$with_threads\" = \"no\"\nthen\n    USE_THREAD_MODULE=\"#\"\nelif test \"$ac_cv_pthread_is_default\" = yes\nthen\n    AC_DEFINE(WITH_THREAD)\n    # Defining _REENTRANT on system with POSIX threads should not hurt.\n    AC_DEFINE(_REENTRANT)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"    \nelif test \"$ac_cv_kpthread\" = \"yes\"\nthen\n    CC=\"$CC -Kpthread\"\n    if test \"$ac_cv_cxx_thread\" = \"yes\"; then\n        CXX=\"$CXX -Kpthread\"\n    fi\n    AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"\nelif test \"$ac_cv_kthread\" = \"yes\"\nthen\n    CC=\"$CC -Kthread\"\n    if test \"$ac_cv_cxx_thread\" = \"yes\"; then\n        CXX=\"$CXX -Kthread\"\n    fi\n    AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"\nelif test \"$ac_cv_pthread\" = \"yes\"\nthen\n    CC=\"$CC -pthread\"\n    if test \"$ac_cv_cxx_thread\" = \"yes\"; then\n        CXX=\"$CXX -pthread\"\n    fi\n    AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"\nelse\n    if test ! -z \"$with_threads\" -a -d \"$with_threads\"\n    then LDFLAGS=\"$LDFLAGS -L$with_threads\"\n    fi\n    if test ! -z \"$withval\" -a -d \"$withval\"\n    then LDFLAGS=\"$LDFLAGS -L$withval\"\n    fi\n\n    # According to the POSIX spec, a pthreads implementation must\n    # define _POSIX_THREADS in unistd.h. Some apparently don't\n    # (e.g. gnu pth with pthread emulation)\n    AC_MSG_CHECKING(for _POSIX_THREADS in unistd.h)\n    AC_EGREP_CPP(yes,\n    [\n#include <unistd.h>\n#ifdef _POSIX_THREADS\nyes\n#endif\n    ], unistd_defines_pthreads=yes, unistd_defines_pthreads=no)\n    AC_MSG_RESULT($unistd_defines_pthreads)\n\n    AC_DEFINE(_REENTRANT)\n    AC_CHECK_HEADER(cthreads.h, [AC_DEFINE(WITH_THREAD)\n    AC_DEFINE(C_THREADS)\n    AC_DEFINE(HURD_C_THREADS, 1,\n    [Define if you are using Mach cthreads directly under /include])\n    LIBS=\"$LIBS -lthreads\"\n    THREADOBJ=\"Python/thread.o\"],[\n    AC_CHECK_HEADER(mach/cthreads.h, [AC_DEFINE(WITH_THREAD)\n    AC_DEFINE(C_THREADS)\n    AC_DEFINE(MACH_C_THREADS, 1,\n    [Define if you are using Mach cthreads under mach /])\n    THREADOBJ=\"Python/thread.o\"],[\n    AC_MSG_CHECKING(for --with-pth)\n    AC_ARG_WITH([pth],\n                AC_HELP_STRING(--with-pth, use GNU pth threading libraries),\n                [AC_MSG_RESULT($withval)\n                  AC_DEFINE([WITH_THREAD])\n                  AC_DEFINE([HAVE_PTH], 1,\n                            [Define if you have GNU PTH threads.])\n                  LIBS=\"-lpth $LIBS\"\n                  THREADOBJ=\"Python/thread.o\"],\n\t        [AC_MSG_RESULT(no)\n\n    # Just looking for pthread_create in libpthread is not enough:\n    # on HP/UX, pthread.h renames pthread_create to a different symbol name.\n    # So we really have to include pthread.h, and then link.\n    _libs=$LIBS\n    LIBS=\"$LIBS -lpthread\"\n    AC_MSG_CHECKING([for pthread_create in -lpthread])\n    AC_TRY_LINK([#include <pthread.h>\n\nvoid * start_routine (void *arg) { exit (0); }], [\npthread_create (NULL, NULL, start_routine, NULL)], [\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"],[\n    LIBS=$_libs\n    AC_CHECK_FUNC(pthread_detach, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    THREADOBJ=\"Python/thread.o\"],[\n    AC_CHECK_HEADER(atheos/threads.h, [AC_DEFINE(WITH_THREAD)\n    AC_DEFINE(ATHEOS_THREADS, 1,\n    [Define this if you have AtheOS threads.])\n    THREADOBJ=\"Python/thread.o\"],[\n    AC_CHECK_LIB(pthreads, pthread_create, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    LIBS=\"$LIBS -lpthreads\"\n    THREADOBJ=\"Python/thread.o\"], [\n    AC_CHECK_LIB(c_r, pthread_create, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    LIBS=\"$LIBS -lc_r\"\n    THREADOBJ=\"Python/thread.o\"], [\n    AC_CHECK_LIB(pthread, __pthread_create_system, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    LIBS=\"$LIBS -lpthread\"\n    THREADOBJ=\"Python/thread.o\"], [\n    AC_CHECK_LIB(cma, pthread_create, [AC_DEFINE(WITH_THREAD)\n    posix_threads=yes\n    LIBS=\"$LIBS -lcma\"\n    THREADOBJ=\"Python/thread.o\"],[\n    USE_THREAD_MODULE=\"#\"])\n    ])])])])])])])])])\n\n    AC_CHECK_LIB(mpc, usconfig, [AC_DEFINE(WITH_THREAD)\n    LIBS=\"$LIBS -lmpc\"\n    THREADOBJ=\"Python/thread.o\"\n    USE_THREAD_MODULE=\"\"])\n\n    if test \"$posix_threads\" != \"yes\"; then     \n      AC_CHECK_LIB(thread, thr_create, [AC_DEFINE(WITH_THREAD)\n      LIBS=\"$LIBS -lthread\"\n      THREADOBJ=\"Python/thread.o\"\n      USE_THREAD_MODULE=\"\"])\n    fi\n\n    if test \"$USE_THREAD_MODULE\" != \"#\"\n    then\n        # If the above checks didn't disable threads, (at least) OSF1\n        # needs this '-threads' argument during linking.\n        case $ac_sys_system in\n        OSF1) LDLAST=-threads;;\n        esac\n    fi\nfi\n\nif test \"$posix_threads\" = \"yes\"; then\n      if test \"$unistd_defines_pthreads\" = \"no\"; then\n         AC_DEFINE(_POSIX_THREADS, 1,\n         [Define if you have POSIX threads, \n          and your system does not define that.])\n      fi\n\n      # Bug 662787: Using semaphores causes unexplicable hangs on Solaris 8.\n      case  $ac_sys_system/$ac_sys_release in\n  SunOS/5.6) AC_DEFINE(HAVE_PTHREAD_DESTRUCTOR, 1,\n                       Defined for Solaris 2.6 bug in pthread header.)\n\t\t       ;;\n      SunOS/5.8) AC_DEFINE(HAVE_BROKEN_POSIX_SEMAPHORES, 1,\n\t\t       Define if the Posix semaphores do not work on your system)\n\t\t       ;;\n      AIX/5) AC_DEFINE(HAVE_BROKEN_POSIX_SEMAPHORES, 1,\n\t\t       Define if the Posix semaphores do not work on your system)\n\t\t       ;;\n      AIX/6) AC_DEFINE(HAVE_BROKEN_POSIX_SEMAPHORES, 1,\n                      Define if the Posix semaphores do not work on your system)\n                      ;;\n      esac\n\n      AC_MSG_CHECKING(if PTHREAD_SCOPE_SYSTEM is supported)\n      AC_CACHE_VAL(ac_cv_pthread_system_supported,\n      [AC_TRY_RUN([#include <pthread.h>\n      void *foo(void *parm) {\n        return NULL;\n      }\n      main() {\n        pthread_attr_t attr;\n        pthread_t id;\n        if (pthread_attr_init(&attr)) exit(-1);\n        if (pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM)) exit(-1);\n        if (pthread_create(&id, &attr, foo, NULL)) exit(-1);\n        exit(0);\n      }],\n      ac_cv_pthread_system_supported=yes,\n      ac_cv_pthread_system_supported=no,\n      ac_cv_pthread_system_supported=no)\n      ])\n      AC_MSG_RESULT($ac_cv_pthread_system_supported)\n      if test \"$ac_cv_pthread_system_supported\" = \"yes\"; then\n        AC_DEFINE(PTHREAD_SYSTEM_SCHED_SUPPORTED, 1, [Defined if PTHREAD_SCOPE_SYSTEM supported.])\n      fi\n      AC_CHECK_FUNCS(pthread_sigmask,\n        [case $ac_sys_system in\n        CYGWIN*)\n          AC_DEFINE(HAVE_BROKEN_PTHREAD_SIGMASK, 1,\n            [Define if pthread_sigmask() does not work on your system.])\n            ;;\n        esac])\nfi\n\n\n# Check for enable-ipv6\nAH_TEMPLATE(ENABLE_IPV6, [Define if --enable-ipv6 is specified])\nAC_MSG_CHECKING([if --enable-ipv6 is specified])\nAC_ARG_ENABLE(ipv6,\n[  --enable-ipv6           Enable ipv6 (with ipv4) support\n  --disable-ipv6          Disable ipv6 support],\n[ case \"$enableval\" in\n  no)\n       AC_MSG_RESULT(no)\n       ipv6=no\n       ;;\n  *)   AC_MSG_RESULT(yes)\n       AC_DEFINE(ENABLE_IPV6)\n       ipv6=yes\n       ;;\n  esac ],\n\n[\ndnl the check does not work on cross compilation case...\n  AC_TRY_RUN([ /* AF_INET6 available check */\n#include <sys/types.h>\n#include <sys/socket.h>\nmain()\n{\n if (socket(AF_INET6, SOCK_STREAM, 0) < 0)\n   exit(1);\n else\n   exit(0);\n}\n],\n  AC_MSG_RESULT(yes)\n  ipv6=yes,\n  AC_MSG_RESULT(no)\n  ipv6=no,\n  AC_MSG_RESULT(no)\n  ipv6=no\n)\n\nif test \"$ipv6\" = \"yes\"; then\n\tAC_MSG_CHECKING(if RFC2553 API is available)\n\tAC_TRY_COMPILE([#include <sys/types.h>\n#include <netinet/in.h>],\n\t[struct sockaddr_in6 x;\nx.sin6_scope_id;],\n\t\tAC_MSG_RESULT(yes)\n\t\tipv6=yes,\n\t\tAC_MSG_RESULT(no, IPv6 disabled)\n\t\tipv6=no)\nfi\n\nif test \"$ipv6\" = \"yes\"; then\n\tAC_DEFINE(ENABLE_IPV6)\nfi\n])\n\nipv6type=unknown\nipv6lib=none\nipv6trylibc=no\n\nif test \"$ipv6\" = \"yes\"; then\n\tAC_MSG_CHECKING([ipv6 stack type])\n\tfor i in inria kame linux-glibc linux-inet6 solaris toshiba v6d zeta;\n\tdo\n\t\tcase $i in\n\t\tinria)\n\t\t\tdnl http://www.kame.net/\n\t\t\tAC_EGREP_CPP(yes, [\n#include <netinet/in.h>\n#ifdef IPV6_INRIA_VERSION\nyes\n#endif],\n\t\t\t\t[ipv6type=$i])\n\t\t\t;;\n\t\tkame)\n\t\t\tdnl http://www.kame.net/\n\t\t\tAC_EGREP_CPP(yes, [\n#include <netinet/in.h>\n#ifdef __KAME__\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6lib=inet6\n\t\t\t\tipv6libdir=/usr/local/v6/lib\n\t\t\t\tipv6trylibc=yes])\n\t\t\t;;\n\t\tlinux-glibc)\n\t\t\tdnl http://www.v6.linux.or.jp/\n\t\t\tAC_EGREP_CPP(yes, [\n#include <features.h>\n#if defined(__GLIBC__) && ((__GLIBC__ == 2 && __GLIBC_MINOR__ >= 1) || (__GLIBC__ > 2))\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6trylibc=yes])\n\t\t\t;;\n\t\tlinux-inet6)\n\t\t\tdnl http://www.v6.linux.or.jp/\n\t\t\tif test -d /usr/inet6; then\n\t\t\t\tipv6type=$i\n\t\t\t\tipv6lib=inet6\n\t\t\t\tipv6libdir=/usr/inet6/lib\n\t\t\t\tBASECFLAGS=\"-I/usr/inet6/include $BASECFLAGS\"\n\t\t\tfi\n\t\t\t;;\n\t\tsolaris)\n\t\t\tif test -f /etc/netconfig; then\n                          if $GREP -q tcp6 /etc/netconfig; then\n\t\t\t\tipv6type=$i\n\t\t\t\tipv6trylibc=yes\n                          fi\n                        fi\n\t\t\t;;\n\t\ttoshiba)\n\t\t\tAC_EGREP_CPP(yes, [\n#include <sys/param.h>\n#ifdef _TOSHIBA_INET6\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6lib=inet6;\n\t\t\t\tipv6libdir=/usr/local/v6/lib])\n\t\t\t;;\n\t\tv6d)\n\t\t\tAC_EGREP_CPP(yes, [\n#include </usr/local/v6/include/sys/v6config.h>\n#ifdef __V6D__\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6lib=v6;\n\t\t\t\tipv6libdir=/usr/local/v6/lib;\n\t\t\t\tBASECFLAGS=\"-I/usr/local/v6/include $BASECFLAGS\"])\n\t\t\t;;\n\t\tzeta)\n\t\t\tAC_EGREP_CPP(yes, [\n#include <sys/param.h>\n#ifdef _ZETA_MINAMI_INET6\nyes\n#endif],\n\t\t\t\t[ipv6type=$i;\n\t\t\t\tipv6lib=inet6;\n\t\t\t\tipv6libdir=/usr/local/v6/lib])\n\t\t\t;;\n\t\tesac\n\t\tif test \"$ipv6type\" != \"unknown\"; then\n\t\t\tbreak\n\t\tfi\n\tdone\n\tAC_MSG_RESULT($ipv6type)\nfi\n\nif test \"$ipv6\" = \"yes\" -a \"$ipv6lib\" != \"none\"; then\n\tif test -d $ipv6libdir -a -f $ipv6libdir/lib$ipv6lib.a; then\n\t\tLIBS=\"-L$ipv6libdir -l$ipv6lib $LIBS\"\n\t\techo \"using lib$ipv6lib\"\n\telse\n\t\tif test $ipv6trylibc = \"yes\"; then\n\t\t\techo \"using libc\"\n\t\telse\n\t\t\techo 'Fatal: no $ipv6lib library found.  cannot continue.'\n\t\t\techo \"You need to fetch lib$ipv6lib.a from appropriate\"\n\t\t\techo 'ipv6 kit and compile beforehand.'\n\t\t\texit 1\n\t\tfi\n\tfi\nfi\n\nAC_MSG_CHECKING(for OSX 10.5 SDK or later)\nAC_TRY_COMPILE([#include <Carbon/Carbon.h>], FSIORefNum fRef = 0,\n  AC_DEFINE(HAVE_OSX105_SDK, 1, Define if compiling using MacOS X 10.5 SDK or later.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\n# Check for --with-doc-strings\nAC_MSG_CHECKING(for --with-doc-strings)\nAC_ARG_WITH(doc-strings,\n            AC_HELP_STRING(--with(out)-doc-strings, disable/enable documentation strings))\n\nif test -z \"$with_doc_strings\"\nthen with_doc_strings=\"yes\"\nfi\nif test \"$with_doc_strings\" != \"no\"\nthen\n    AC_DEFINE(WITH_DOC_STRINGS, 1,\n      [Define if you want documentation strings in extension modules])\nfi\nAC_MSG_RESULT($with_doc_strings)\n\n# Check if eval loop should use timestamp counter profiling\nAC_MSG_CHECKING(for --with-tsc)\nAC_ARG_WITH(tsc,\n[  --with(out)-tsc         enable/disable timestamp counter profile], [\nif test \"$withval\" != no\nthen \n  AC_DEFINE(WITH_TSC, 1, \n    [Define to profile with the Pentium timestamp counter]) \n    AC_MSG_RESULT(yes)\nelse AC_MSG_RESULT(no)\nfi],\n[AC_MSG_RESULT(no)])\n\n# Check for Python-specific malloc support\nAC_MSG_CHECKING(for --with-pymalloc)\nAC_ARG_WITH(pymalloc,\n            AC_HELP_STRING(--with(out)-pymalloc, disable/enable specialized mallocs))\n\nif test -z \"$with_pymalloc\"\nthen with_pymalloc=\"yes\"\nfi\nif test \"$with_pymalloc\" != \"no\"\nthen\n    AC_DEFINE(WITH_PYMALLOC, 1, \n     [Define if you want to compile in Python-specific mallocs])\nfi\nAC_MSG_RESULT($with_pymalloc)\n\n# Check for --with-wctype-functions\nAC_MSG_CHECKING(for --with-wctype-functions)\nAC_ARG_WITH(wctype-functions, \n            AC_HELP_STRING(--with-wctype-functions, use wctype.h functions),\n[\nif test \"$withval\" != no\nthen \n  AC_DEFINE(WANT_WCTYPE_FUNCTIONS, 1,\n  [Define if you want wctype.h functions to be used instead of the\n   one supplied by Python itself. (see Include/unicodectype.h).]) \n  AC_MSG_RESULT(yes)\nelse AC_MSG_RESULT(no)\nfi],\n[AC_MSG_RESULT(no)])\n\n# -I${DLINCLDIR} is added to the compile rule for importdl.o\nAC_SUBST(DLINCLDIR)\nDLINCLDIR=.\n\n# the dlopen() function means we might want to use dynload_shlib.o. some\n# platforms, such as AIX, have dlopen(), but don't want to use it.\nAC_CHECK_FUNCS(dlopen)\n\n# DYNLOADFILE specifies which dynload_*.o file we will use for dynamic\n# loading of modules.\nAC_SUBST(DYNLOADFILE)\nAC_MSG_CHECKING(DYNLOADFILE)\nif test -z \"$DYNLOADFILE\"\nthen\n\tcase $ac_sys_system/$ac_sys_release in\n\tAIX*) # Use dynload_shlib.c and dlopen() if we have it; otherwise dynload_aix.c\n\tif test \"$ac_cv_func_dlopen\" = yes\n\tthen DYNLOADFILE=\"dynload_shlib.o\"\n\telse DYNLOADFILE=\"dynload_aix.o\"\n\tfi\n\t;;\n\thp*|HP*) DYNLOADFILE=\"dynload_hpux.o\";;\n\t# Use dynload_next.c only on 10.2 and below, which don't have native dlopen()\n\tDarwin/@<:@0156@:>@\\..*) DYNLOADFILE=\"dynload_next.o\";;\n\tatheos*) DYNLOADFILE=\"dynload_atheos.o\";;\n\t*)\n\t# use dynload_shlib.c and dlopen() if we have it; otherwise stub\n\t# out any dynamic loading\n\tif test \"$ac_cv_func_dlopen\" = yes\n\tthen DYNLOADFILE=\"dynload_shlib.o\"\n\telse DYNLOADFILE=\"dynload_stub.o\"\n\tfi\n\t;;\n\tesac\nfi\nAC_MSG_RESULT($DYNLOADFILE)\nif test \"$DYNLOADFILE\" != \"dynload_stub.o\"\nthen\n\tAC_DEFINE(HAVE_DYNAMIC_LOADING, 1,\n        [Defined when any dynamic module loading is enabled.])\nfi\n\n# MACHDEP_OBJS can be set to platform-specific object files needed by Python\n\nAC_SUBST(MACHDEP_OBJS)\nAC_MSG_CHECKING(MACHDEP_OBJS)\nif test -z \"$MACHDEP_OBJS\"\nthen\n\tMACHDEP_OBJS=$extra_machdep_objs\nelse\n\tMACHDEP_OBJS=\"$MACHDEP_OBJS $extra_machdep_objs\"\nfi\nAC_MSG_RESULT(MACHDEP_OBJS)\n\n# checks for library functions\nAC_CHECK_FUNCS(alarm setitimer getitimer bind_textdomain_codeset chown \\\n clock confstr ctermid execv fchmod fchown fork fpathconf ftime ftruncate \\\n gai_strerror getgroups getlogin getloadavg getpeername getpgid getpid \\\n getpriority getpwent getspnam getspent getsid getwd \\\n kill killpg lchmod lchown lstat mbrtowc mkfifo mknod mktime \\\n mremap nice pathconf pause plock poll pthread_init \\\n putenv readlink realpath \\\n select sem_open sem_timedwait sem_getvalue sem_unlink setegid seteuid \\\n setgid \\\n setlocale setregid setreuid setsid setpgid setpgrp setuid setvbuf snprintf \\\n sigaction siginterrupt sigrelse strftime strlcpy \\\n sysconf tcgetpgrp tcsetpgrp tempnam timegm times tmpfile tmpnam tmpnam_r \\\n truncate uname unsetenv utimes waitpid wait3 wait4 \\\n wcscoll wcsftime wcsxfrm _getpty)\n\n# For some functions, having a definition is not sufficient, since\n# we want to take their address.\nAC_MSG_CHECKING(for chroot)\nAC_TRY_COMPILE([#include <unistd.h>], void *x=chroot,\n  AC_DEFINE(HAVE_CHROOT, 1, Define if you have the 'chroot' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\nAC_MSG_CHECKING(for link)\nAC_TRY_COMPILE([#include <unistd.h>], void *x=link,\n  AC_DEFINE(HAVE_LINK, 1, Define if you have the 'link' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\nAC_MSG_CHECKING(for symlink)\nAC_TRY_COMPILE([#include <unistd.h>], void *x=symlink,\n  AC_DEFINE(HAVE_SYMLINK, 1, Define if you have the 'symlink' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\nAC_MSG_CHECKING(for fchdir)\nAC_TRY_COMPILE([#include <unistd.h>], void *x=fchdir,\n  AC_DEFINE(HAVE_FCHDIR, 1, Define if you have the 'fchdir' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\nAC_MSG_CHECKING(for fsync)\nAC_TRY_COMPILE([#include <unistd.h>], void *x=fsync,\n  AC_DEFINE(HAVE_FSYNC, 1, Define if you have the 'fsync' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\nAC_MSG_CHECKING(for fdatasync)\nAC_TRY_COMPILE([#include <unistd.h>], void *x=fdatasync,\n  AC_DEFINE(HAVE_FDATASYNC, 1, Define if you have the 'fdatasync' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\nAC_MSG_CHECKING(for epoll)\nAC_TRY_COMPILE([#include <sys/epoll.h>], void *x=epoll_create,\n  AC_DEFINE(HAVE_EPOLL, 1, Define if you have the 'epoll' functions.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\nAC_MSG_CHECKING(for kqueue)\nAC_TRY_COMPILE([\n#include <sys/types.h>\n#include <sys/event.h>\n    ], int x=kqueue(),\n  AC_DEFINE(HAVE_KQUEUE, 1, Define if you have the 'kqueue' functions.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n# On some systems (eg. FreeBSD 5), we would find a definition of the\n# functions ctermid_r, setgroups in the library, but no prototype\n# (e.g. because we use _XOPEN_SOURCE). See whether we can take their\n# address to avoid compiler warnings and potential miscompilations\n# because of the missing prototypes.\n\nAC_MSG_CHECKING(for ctermid_r)\nAC_TRY_COMPILE([\n#include \"confdefs.h\" \n#include <stdio.h>\n], void* p = ctermid_r,\n  AC_DEFINE(HAVE_CTERMID_R, 1, Define if you have the 'ctermid_r' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\nAC_CACHE_CHECK([for flock declaration], [ac_cv_flock_decl],\n  [AC_COMPILE_IFELSE(\n    [AC_LANG_PROGRAM(\n      [#include <sys/file.h>],\n      [void* p = flock]\n    )],\n    [ac_cv_flock_decl=yes],\n    [ac_cv_flock_decl=no]\n  )\n])\nif test \"x${ac_cv_flock_decl}\" = xyes; then\n  AC_CHECK_FUNCS(flock,,\n    AC_CHECK_LIB(bsd,flock,\n      [AC_DEFINE(HAVE_FLOCK)\n       AC_DEFINE(FLOCK_NEEDS_LIBBSD, 1, Define if flock needs to be linked with bsd library.)\n    ])\n  )\nfi\n\nAC_MSG_CHECKING(for getpagesize)\nAC_TRY_COMPILE([\n#include \"confdefs.h\" \n#include <unistd.h>\n], void* p = getpagesize,\n  AC_DEFINE(HAVE_GETPAGESIZE, 1, Define if you have the 'getpagesize' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\ndnl check for true\nAC_CHECK_PROGS(TRUE, true, /bin/true)\n\ndnl On some systems (e.g. Solaris 9), hstrerror and inet_aton are in -lresolv\ndnl On others, they are in the C library, so we to take no action\nAC_CHECK_LIB(c, inet_aton, [$ac_cv_prog_TRUE],\n  AC_CHECK_LIB(resolv, inet_aton)\n)\n\n# On Tru64, chflags seems to be present, but calling it will\n# exit Python\nAC_CACHE_CHECK([for chflags], [ac_cv_have_chflags], [dnl\nAC_TRY_RUN([[\n#include <sys/stat.h>\n#include <unistd.h>\nint main(int argc, char*argv[])\n{\n  if(chflags(argv[0], 0) != 0)\n    return 1;\n  return 0;\n}\n]], ac_cv_have_chflags=yes,\n   ac_cv_have_chflags=no,\n   ac_cv_have_chflags=cross)\n])\nif test \"$ac_cv_have_chflags\" = cross ; then\n  AC_CHECK_FUNC([chflags], [ac_cv_have_chflags=\"yes\"], [ac_cv_have_chflags=\"no\"])\nfi\nif test \"$ac_cv_have_chflags\" = yes ; then\n  AC_DEFINE(HAVE_CHFLAGS, 1, Define to 1 if you have the `chflags' function.)\nfi\n\nAC_CACHE_CHECK([for lchflags], [ac_cv_have_lchflags], [dnl\nAC_TRY_RUN([[\n#include <sys/stat.h>\n#include <unistd.h>\nint main(int argc, char*argv[])\n{\n  if(lchflags(argv[0], 0) != 0)\n    return 1;\n  return 0;\n}\n]], ac_cv_have_lchflags=yes,\n   ac_cv_have_lchflags=no,\n   ac_cv_have_lchflags=cross)\n])\nif test \"$ac_cv_have_lchflags\" = cross ; then\n  AC_CHECK_FUNC([lchflags], [ac_cv_have_lchflags=\"yes\"], [ac_cv_have_lchflags=\"no\"])\nfi\nif test \"$ac_cv_have_lchflags\" = yes ; then\n  AC_DEFINE(HAVE_LCHFLAGS, 1, Define to 1 if you have the `lchflags' function.)\nfi\n\ndnl Check if system zlib has *Copy() functions\ndnl\ndnl On MacOSX the linker will search for dylibs on the entire linker path\ndnl before searching for static libraries. setup.py adds -Wl,-search_paths_first\ndnl to revert to a more traditional unix behaviour and make it possible to\ndnl override the system libz with a local static library of libz. Temporarily\ndnl add that flag to our CFLAGS as well to ensure that we check the version\ndnl of libz that will be used by setup.py. \ndnl The -L/usr/local/lib is needed as wel to get the same compilation \ndnl environment as setup.py (and leaving it out can cause configure to use the\ndnl wrong version of the library)\ncase $ac_sys_system/$ac_sys_release in\nDarwin/*) \n\t_CUR_CFLAGS=\"${CFLAGS}\"\n\t_CUR_LDFLAGS=\"${LDFLAGS}\"\n\tCFLAGS=\"${CFLAGS} -Wl,-search_paths_first\"\n\tLDFLAGS=\"${LDFLAGS} -Wl,-search_paths_first -L/usr/local/lib\"\n\t;;\nesac\n\nAC_CHECK_LIB(z, inflateCopy, AC_DEFINE(HAVE_ZLIB_COPY, 1, Define if the zlib library has inflateCopy))\n\ncase $ac_sys_system/$ac_sys_release in\nDarwin/*) \n\tCFLAGS=\"${_CUR_CFLAGS}\"\n\tLDFLAGS=\"${_CUR_LDFLAGS}\"\n\t;;\nesac\n\nAC_MSG_CHECKING(for hstrerror)\nAC_TRY_LINK([\n#include \"confdefs.h\" \n#include <netdb.h>\n], void* p = hstrerror; hstrerror(0),\n  AC_DEFINE(HAVE_HSTRERROR, 1, Define if you have the 'hstrerror' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\nAC_MSG_CHECKING(for inet_aton)\nAC_TRY_LINK([\n#include \"confdefs.h\" \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n], void* p = inet_aton;inet_aton(0,0),\n  AC_DEFINE(HAVE_INET_ATON, 1, Define if you have the 'inet_aton' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\nAC_MSG_CHECKING(for inet_pton)\nAC_TRY_COMPILE([\n#include \"confdefs.h\" \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n], void* p = inet_pton,\n  AC_DEFINE(HAVE_INET_PTON, 1, Define if you have the 'inet_pton' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\n# On some systems, setgroups is in unistd.h, on others, in grp.h\nAC_MSG_CHECKING(for setgroups)\nAC_TRY_COMPILE([\n#include \"confdefs.h\" \n#include <unistd.h>\n#ifdef HAVE_GRP_H\n#include <grp.h>\n#endif\n], \nvoid* p = setgroups,\n  AC_DEFINE(HAVE_SETGROUPS, 1, Define if you have the 'setgroups' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\n# check for openpty and forkpty\n\nAC_CHECK_FUNCS(openpty,, \n   AC_CHECK_LIB(util,openpty,\n     [AC_DEFINE(HAVE_OPENPTY) LIBS=\"$LIBS -lutil\"],\n     AC_CHECK_LIB(bsd,openpty, [AC_DEFINE(HAVE_OPENPTY) LIBS=\"$LIBS -lbsd\"])\n   )\n)\nAC_CHECK_FUNCS(forkpty,, \n   AC_CHECK_LIB(util,forkpty, \n     [AC_DEFINE(HAVE_FORKPTY) LIBS=\"$LIBS -lutil\"],\n     AC_CHECK_LIB(bsd,forkpty, [AC_DEFINE(HAVE_FORKPTY) LIBS=\"$LIBS -lbsd\"])\n   )\n)\n\n# Stuff for expat.\nAC_CHECK_FUNCS(memmove)\n\n# check for long file support functions\nAC_CHECK_FUNCS(fseek64 fseeko fstatvfs ftell64 ftello statvfs)\n\nAC_REPLACE_FUNCS(dup2 getcwd strdup)\nAC_CHECK_FUNCS(getpgrp, \n  AC_TRY_COMPILE([#include <unistd.h>], \n   [getpgrp(0);], \n   AC_DEFINE(GETPGRP_HAVE_ARG, 1,\n   [Define if getpgrp() must be called as getpgrp(0).])\n )\n)\nAC_CHECK_FUNCS(setpgrp,\n  AC_TRY_COMPILE([#include <unistd.h>],\n    [setpgrp(0,0);],\n    AC_DEFINE(SETPGRP_HAVE_ARG, 1,\n    [Define if setpgrp() must be called as setpgrp(0, 0).])\n  )\n)\nAC_CHECK_FUNCS(gettimeofday, \n  AC_TRY_COMPILE([#include <sys/time.h>], \n    [gettimeofday((struct timeval*)0,(struct timezone*)0);], ,\n    AC_DEFINE(GETTIMEOFDAY_NO_TZ, 1,\n    [Define if gettimeofday() does not have second (timezone) argument\n     This is the case on Motorola V4 (R40V4.2)])\n  )\n)\n\nAC_MSG_CHECKING(for major, minor, and makedev)\nAC_TRY_LINK([\n#if defined(MAJOR_IN_MKDEV)\n#include <sys/mkdev.h>\n#elif defined(MAJOR_IN_SYSMACROS)\n#include <sys/sysmacros.h>\n#else\n#include <sys/types.h>\n#endif\n],[\n  makedev(major(0),minor(0));\n],[\n  AC_DEFINE(HAVE_DEVICE_MACROS, 1,\n\t    [Define to 1 if you have the device macros.])\n  AC_MSG_RESULT(yes)\n],[\n  AC_MSG_RESULT(no)\n])\n\n# On OSF/1 V5.1, getaddrinfo is available, but a define\n# for [no]getaddrinfo in netdb.h. \nAC_MSG_CHECKING(for getaddrinfo)\nAC_TRY_LINK([\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <stdio.h>\n],[\ngetaddrinfo(NULL, NULL, NULL, NULL);\n], [\nAC_MSG_RESULT(yes)\nAC_MSG_CHECKING(getaddrinfo bug)\nAC_TRY_RUN([\n#include <sys/types.h>\n#include <netdb.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nmain()\n{\n  int passive, gaierr, inet4 = 0, inet6 = 0;\n  struct addrinfo hints, *ai, *aitop;\n  char straddr[INET6_ADDRSTRLEN], strport[16];\n\n  for (passive = 0; passive <= 1; passive++) {\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_family = AF_UNSPEC;\n    hints.ai_flags = passive ? AI_PASSIVE : 0;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n    if ((gaierr = getaddrinfo(NULL, \"54321\", &hints, &aitop)) != 0) {\n      (void)gai_strerror(gaierr);\n      goto bad;\n    }\n    for (ai = aitop; ai; ai = ai->ai_next) {\n      if (ai->ai_addr == NULL ||\n          ai->ai_addrlen == 0 ||\n          getnameinfo(ai->ai_addr, ai->ai_addrlen,\n                      straddr, sizeof(straddr), strport, sizeof(strport),\n                      NI_NUMERICHOST|NI_NUMERICSERV) != 0) {\n        goto bad;\n      }\n      switch (ai->ai_family) {\n      case AF_INET:\n        if (strcmp(strport, \"54321\") != 0) {\n          goto bad;\n        }\n        if (passive) {\n          if (strcmp(straddr, \"0.0.0.0\") != 0) {\n            goto bad;\n          }\n        } else {\n          if (strcmp(straddr, \"127.0.0.1\") != 0) {\n            goto bad;\n          }\n        }\n        inet4++;\n        break;\n      case AF_INET6:\n        if (strcmp(strport, \"54321\") != 0) {\n          goto bad;\n        }\n        if (passive) {\n          if (strcmp(straddr, \"::\") != 0) {\n            goto bad;\n          }\n        } else {\n          if (strcmp(straddr, \"::1\") != 0) {\n            goto bad;\n          }\n        }\n        inet6++;\n        break;\n      case AF_UNSPEC:\n        goto bad;\n        break;\n      default:\n        /* another family support? */\n        break;\n      }\n    }\n  }\n\n  if (!(inet4 == 0 || inet4 == 2))\n    goto bad;\n  if (!(inet6 == 0 || inet6 == 2))\n    goto bad;\n\n  if (aitop)\n    freeaddrinfo(aitop);\n  exit(0);\n\n bad:\n  if (aitop)\n    freeaddrinfo(aitop);\n  exit(1);\n}\n],\nAC_MSG_RESULT(good)\nbuggygetaddrinfo=no,\nAC_MSG_RESULT(buggy)\nbuggygetaddrinfo=yes,\nAC_MSG_RESULT(buggy)\nbuggygetaddrinfo=yes)], [\nAC_MSG_RESULT(no)\nbuggygetaddrinfo=yes\n])\n\nif test \"$buggygetaddrinfo\" = \"yes\"; then\n\tif test \"$ipv6\" = \"yes\"; then\n\t\techo 'Fatal: You must get working getaddrinfo() function.'\n\t\techo '       or you can specify \"--disable-ipv6\"'.\n\t\texit 1\n\tfi\nelse\n\tAC_DEFINE(HAVE_GETADDRINFO, 1, [Define if you have the getaddrinfo function.])\nfi\nAC_CHECK_FUNCS(getnameinfo)\n\n# checks for structures\nAC_HEADER_TIME\nAC_STRUCT_TM\nAC_STRUCT_TIMEZONE\nAC_CHECK_MEMBERS([struct stat.st_rdev])\nAC_CHECK_MEMBERS([struct stat.st_blksize])\nAC_CHECK_MEMBERS([struct stat.st_flags])\nAC_CHECK_MEMBERS([struct stat.st_gen])\nAC_CHECK_MEMBERS([struct stat.st_birthtime])\nAC_STRUCT_ST_BLOCKS\n\nAC_MSG_CHECKING(for time.h that defines altzone)\nAC_CACHE_VAL(ac_cv_header_time_altzone,\n[AC_TRY_COMPILE([#include <time.h>], [return altzone;],\n  ac_cv_header_time_altzone=yes,\n  ac_cv_header_time_altzone=no)])\nAC_MSG_RESULT($ac_cv_header_time_altzone)\nif test $ac_cv_header_time_altzone = yes; then\n  AC_DEFINE(HAVE_ALTZONE, 1, [Define this if your time.h defines altzone.])\nfi\n\nwas_it_defined=no\nAC_MSG_CHECKING(whether sys/select.h and sys/time.h may both be included)\nAC_TRY_COMPILE([\n#include <sys/types.h>\n#include <sys/select.h>\n#include <sys/time.h>\n], [;], [\n  AC_DEFINE(SYS_SELECT_WITH_SYS_TIME, 1,\n  [Define if  you can safely include both <sys/select.h> and <sys/time.h>\n   (which you can't on SCO ODT 3.0).]) \n  was_it_defined=yes\n])\nAC_MSG_RESULT($was_it_defined)\n\nAC_MSG_CHECKING(for addrinfo)\nAC_CACHE_VAL(ac_cv_struct_addrinfo,\nAC_TRY_COMPILE([\n#\t\tinclude <netdb.h>],\n\t[struct addrinfo a],\n\tac_cv_struct_addrinfo=yes,\n\tac_cv_struct_addrinfo=no))\nAC_MSG_RESULT($ac_cv_struct_addrinfo)\nif test $ac_cv_struct_addrinfo = yes; then\n\tAC_DEFINE(HAVE_ADDRINFO, 1, [struct addrinfo (netdb.h)])\nfi\n\nAC_MSG_CHECKING(for sockaddr_storage)\nAC_CACHE_VAL(ac_cv_struct_sockaddr_storage,\nAC_TRY_COMPILE([\n#\t\tinclude <sys/types.h>\n#\t\tinclude <sys/socket.h>],\n\t[struct sockaddr_storage s],\n\tac_cv_struct_sockaddr_storage=yes,\n\tac_cv_struct_sockaddr_storage=no))\nAC_MSG_RESULT($ac_cv_struct_sockaddr_storage)\nif test $ac_cv_struct_sockaddr_storage = yes; then\n\tAC_DEFINE(HAVE_SOCKADDR_STORAGE, 1, [struct sockaddr_storage (sys/socket.h)])\nfi\n\n# checks for compiler characteristics\n\nAC_C_CHAR_UNSIGNED\nAC_C_CONST\n\nworks=no\nAC_MSG_CHECKING(for working volatile)\nAC_TRY_COMPILE([],[volatile int x; x = 0;], works=yes, \n  AC_DEFINE(volatile, [], [Define to empty if the keyword does not work.])\n)\nAC_MSG_RESULT($works)\n\nworks=no\nAC_MSG_CHECKING(for working signed char)\nAC_TRY_COMPILE([], [signed char c;], works=yes, \n  AC_DEFINE(signed, [], [Define to empty if the keyword does not work.])\n)\nAC_MSG_RESULT($works)\n\nhave_prototypes=no\nAC_MSG_CHECKING(for prototypes)\nAC_TRY_COMPILE([int foo(int x) { return 0; }], [return foo(10);],[\n  AC_DEFINE(HAVE_PROTOTYPES, 1, \n   [Define if your compiler supports function prototype]) \n  have_prototypes=yes\n])\nAC_MSG_RESULT($have_prototypes)\n\nworks=no\nAC_MSG_CHECKING(for variable length prototypes and stdarg.h)\nAC_TRY_COMPILE([\n#include <stdarg.h>\nint foo(int x, ...) {\n\tva_list va;\n\tva_start(va, x);\n\tva_arg(va, int);\n\tva_arg(va, char *);\n\tva_arg(va, double);\n\treturn 0;\n}\n], [return foo(10, \"\", 3.14);], [\n  AC_DEFINE(HAVE_STDARG_PROTOTYPES, 1,\n   [Define if your compiler supports variable length function prototypes\n   (e.g. void fprintf(FILE *, char *, ...);) *and* <stdarg.h>]) \n  works=yes\n])\nAC_MSG_RESULT($works)\n\n# check for socketpair\nAC_MSG_CHECKING(for socketpair)\nAC_TRY_COMPILE([\n#include <sys/types.h>\n#include <sys/socket.h>\n], void *x=socketpair,\n  AC_DEFINE(HAVE_SOCKETPAIR, 1, Define if you have the 'socketpair' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\n# check if sockaddr has sa_len member\nAC_MSG_CHECKING(if sockaddr has sa_len member)\nAC_TRY_COMPILE([#include <sys/types.h>\n#include <sys/socket.h>],\n[struct sockaddr x;\nx.sa_len = 0;],\n\tAC_MSG_RESULT(yes)\n\tAC_DEFINE(HAVE_SOCKADDR_SA_LEN, 1, [Define if sockaddr has sa_len member]),\n\tAC_MSG_RESULT(no))\n\nva_list_is_array=no\nAC_MSG_CHECKING(whether va_list is an array)\nAC_TRY_COMPILE([\n#ifdef HAVE_STDARG_PROTOTYPES\n#include <stdarg.h>\n#else\n#include <varargs.h>\n#endif\n], [va_list list1, list2; list1 = list2;], , [\n AC_DEFINE(VA_LIST_IS_ARRAY, 1, [Define if a va_list is an array of some kind]) \n va_list_is_array=yes\n])\nAC_MSG_RESULT($va_list_is_array)\n\n# sigh -- gethostbyname_r is a mess; it can have 3, 5 or 6 arguments :-(\nAH_TEMPLATE(HAVE_GETHOSTBYNAME_R,\n  [Define this if you have some version of gethostbyname_r()])\n\nAC_CHECK_FUNC(gethostbyname_r, [\n  AC_DEFINE(HAVE_GETHOSTBYNAME_R)\n  AC_MSG_CHECKING([gethostbyname_r with 6 args])\n  OLD_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS $MY_CPPFLAGS $MY_THREAD_CPPFLAGS $MY_CFLAGS\"\n  AC_TRY_COMPILE([\n#   include <netdb.h>\n  ], [\n    char *name;\n    struct hostent *he, *res;\n    char buffer[2048];\n    int buflen = 2048;\n    int h_errnop;\n\n    (void) gethostbyname_r(name, he, buffer, buflen, &res, &h_errnop)\n  ], [\n    AC_DEFINE(HAVE_GETHOSTBYNAME_R)\n    AC_DEFINE(HAVE_GETHOSTBYNAME_R_6_ARG, 1,\n    [Define this if you have the 6-arg version of gethostbyname_r().])\n    AC_MSG_RESULT(yes)\n  ], [\n    AC_MSG_RESULT(no)\n    AC_MSG_CHECKING([gethostbyname_r with 5 args])\n    AC_TRY_COMPILE([\n#     include <netdb.h>\n    ], [\n      char *name;\n      struct hostent *he;\n      char buffer[2048];\n      int buflen = 2048;\n      int h_errnop;\n\n      (void) gethostbyname_r(name, he, buffer, buflen, &h_errnop)\n    ], [\n      AC_DEFINE(HAVE_GETHOSTBYNAME_R)\n      AC_DEFINE(HAVE_GETHOSTBYNAME_R_5_ARG, 1,\n      [Define this if you have the 5-arg version of gethostbyname_r().])\n      AC_MSG_RESULT(yes)\n    ], [\n      AC_MSG_RESULT(no)\n      AC_MSG_CHECKING([gethostbyname_r with 3 args])\n      AC_TRY_COMPILE([\n#       include <netdb.h>\n      ], [\n        char *name;\n        struct hostent *he;\n        struct hostent_data data;\n\n        (void) gethostbyname_r(name, he, &data);\n      ], [\n        AC_DEFINE(HAVE_GETHOSTBYNAME_R)\n        AC_DEFINE(HAVE_GETHOSTBYNAME_R_3_ARG, 1,\n        [Define this if you have the 3-arg version of gethostbyname_r().])\n        AC_MSG_RESULT(yes)\n      ], [\n        AC_MSG_RESULT(no)\n      ])\n    ])\n  ])\n  CFLAGS=$OLD_CFLAGS\n], [\n  AC_CHECK_FUNCS(gethostbyname)\n])\nAC_SUBST(HAVE_GETHOSTBYNAME_R_6_ARG)\nAC_SUBST(HAVE_GETHOSTBYNAME_R_5_ARG)\nAC_SUBST(HAVE_GETHOSTBYNAME_R_3_ARG)\nAC_SUBST(HAVE_GETHOSTBYNAME_R)\nAC_SUBST(HAVE_GETHOSTBYNAME)\n\n# checks for system services\n# (none yet)\n\n# Linux requires this for correct f.p. operations\nAC_CHECK_FUNC(__fpu_control,\n  [],\n  [AC_CHECK_LIB(ieee, __fpu_control)\n])\n\n# Check for --with-fpectl\nAC_MSG_CHECKING(for --with-fpectl)\nAC_ARG_WITH(fpectl,\n            AC_HELP_STRING(--with-fpectl, enable SIGFPE catching),\n[\nif test \"$withval\" != no\nthen \n  AC_DEFINE(WANT_SIGFPE_HANDLER, 1,\n  [Define if you want SIGFPE handled (see Include/pyfpe.h).]) \n  AC_MSG_RESULT(yes)\nelse AC_MSG_RESULT(no)\nfi],\n[AC_MSG_RESULT(no)])\n\n# check for --with-libm=...\nAC_SUBST(LIBM)\ncase $ac_sys_system in\nDarwin) ;;\n*) LIBM=-lm\nesac\nAC_MSG_CHECKING(for --with-libm=STRING)\nAC_ARG_WITH(libm,\n            AC_HELP_STRING(--with-libm=STRING, math library),\n[\nif test \"$withval\" = no\nthen LIBM=\n     AC_MSG_RESULT(force LIBM empty)\nelif test \"$withval\" != yes\nthen LIBM=$withval\n     AC_MSG_RESULT(set LIBM=\"$withval\")\nelse AC_MSG_ERROR([proper usage is --with-libm=STRING])\nfi],\n[AC_MSG_RESULT(default LIBM=\"$LIBM\")])\n\n# check for --with-libc=...\nAC_SUBST(LIBC)\nAC_MSG_CHECKING(for --with-libc=STRING)\nAC_ARG_WITH(libc,\n            AC_HELP_STRING(--with-libc=STRING, C library),\n[\nif test \"$withval\" = no\nthen LIBC=\n     AC_MSG_RESULT(force LIBC empty)\nelif test \"$withval\" != yes\nthen LIBC=$withval\n     AC_MSG_RESULT(set LIBC=\"$withval\")\nelse AC_MSG_ERROR([proper usage is --with-libc=STRING])\nfi],\n[AC_MSG_RESULT(default LIBC=\"$LIBC\")])\n\n# **************************************************\n# * Check for various properties of floating point *\n# **************************************************\n\nAC_MSG_CHECKING(whether C doubles are little-endian IEEE 754 binary64)\nAC_CACHE_VAL(ac_cv_little_endian_double, [\nAC_TRY_RUN([\n#include <string.h>\nint main() {\n    double x = 9006104071832581.0;\n    if (memcmp(&x, \"\\x05\\x04\\x03\\x02\\x01\\xff\\x3f\\x43\", 8) == 0)\n        return 0;\n    else\n        return 1;\n}\n],\nac_cv_little_endian_double=yes,\nac_cv_little_endian_double=no,\nac_cv_little_endian_double=no)])\nAC_MSG_RESULT($ac_cv_little_endian_double)\nif test \"$ac_cv_little_endian_double\" = yes\nthen\n  AC_DEFINE(DOUBLE_IS_LITTLE_ENDIAN_IEEE754, 1,\n  [Define if C doubles are 64-bit IEEE 754 binary format, stored\n   with the least significant byte first])\nfi\n\nAC_MSG_CHECKING(whether C doubles are big-endian IEEE 754 binary64)\nAC_CACHE_VAL(ac_cv_big_endian_double, [\nAC_TRY_RUN([\n#include <string.h>\nint main() {\n    double x = 9006104071832581.0;\n    if (memcmp(&x, \"\\x43\\x3f\\xff\\x01\\x02\\x03\\x04\\x05\", 8) == 0)\n        return 0;\n    else\n        return 1;\n}\n],\nac_cv_big_endian_double=yes,\nac_cv_big_endian_double=no,\nac_cv_big_endian_double=no)])\nAC_MSG_RESULT($ac_cv_big_endian_double)\nif test \"$ac_cv_big_endian_double\" = yes\nthen\n  AC_DEFINE(DOUBLE_IS_BIG_ENDIAN_IEEE754, 1,\n  [Define if C doubles are 64-bit IEEE 754 binary format, stored\n   with the most significant byte first])\nfi\n\n# Some ARM platforms use a mixed-endian representation for doubles.\n# While Python doesn't currently have full support for these platforms\n# (see e.g., issue 1762561), we can at least make sure that float <-> string\n# conversions work.\nAC_MSG_CHECKING(whether C doubles are ARM mixed-endian IEEE 754 binary64)\nAC_CACHE_VAL(ac_cv_mixed_endian_double, [\nAC_TRY_RUN([\n#include <string.h>\nint main() {\n    double x = 9006104071832581.0;\n    if (memcmp(&x, \"\\x01\\xff\\x3f\\x43\\x05\\x04\\x03\\x02\", 8) == 0)\n        return 0;\n    else\n        return 1;\n}\n],\nac_cv_mixed_endian_double=yes,\nac_cv_mixed_endian_double=no,\nac_cv_mixed_endian_double=no)])\nAC_MSG_RESULT($ac_cv_mixed_endian_double)\nif test \"$ac_cv_mixed_endian_double\" = yes\nthen\n  AC_DEFINE(DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754, 1,\n  [Define if C doubles are 64-bit IEEE 754 binary format, stored\n   in ARM mixed-endian order (byte order 45670123)])\nfi\n\n# The short float repr introduced in Python 3.1 requires the\n# correctly-rounded string <-> double conversion functions from\n# Python/dtoa.c, which in turn require that the FPU uses 53-bit\n# rounding; this is a problem on x86, where the x87 FPU has a default\n# rounding precision of 64 bits.  For gcc/x86, we try to fix this by\n# using inline assembler to get and set the x87 FPU control word.\nif test \"$GCC\" = yes && test -n \"`$CC -dM -E - </dev/null | grep i386`\"\nthen\n    # Check that it's okay to use gcc inline assembler to get and set\n    # x87 control word.  It should be, but you never know...\n    AC_MSG_CHECKING(whether we can use gcc inline assembler to get and set x87 control word)\n    AC_TRY_COMPILE([], [\n      unsigned short cw;\n      __asm__ __volatile__ (\"fnstcw %0\" : \"=m\" (cw));\n      __asm__ __volatile__ (\"fldcw %0\" : : \"m\" (cw));\n    ],\n    [have_gcc_asm_for_x87=yes], [have_gcc_asm_for_x87=no])\n    AC_MSG_RESULT($have_gcc_asm_for_x87)\n    if test \"$have_gcc_asm_for_x87\" = yes\n    then\n        AC_DEFINE(HAVE_GCC_ASM_FOR_X87, 1,\n        [Define if we can use gcc inline assembler to get and set x87 control word])\n    fi\nfi\n\n# Detect whether system arithmetic is subject to x87-style double\n# rounding issues.  The result of this test has little meaning on non\n# IEEE 754 platforms.  On IEEE 754, test should return 1 if rounding\n# mode is round-to-nearest and double rounding issues are present, and\n# 0 otherwise.  See http://bugs.python.org/issue2937 for more info.\nAC_MSG_CHECKING(for x87-style double rounding)\n# $BASECFLAGS may affect the result\nac_save_cc=\"$CC\"\nCC=\"$CC $BASECFLAGS\"\nAC_TRY_RUN([\n#include <stdlib.h>\n#include <math.h>\nint main() {\n    volatile double x, y, z;\n    /* 1./(1-2**-53) -> 1+2**-52 (correct), 1.0 (double rounding) */\n    x = 0.99999999999999989; /* 1-2**-53 */\n    y = 1./x;\n    if (y != 1.)\n        exit(0);\n    /* 1e16+2.99999 -> 1e16+2. (correct), 1e16+4. (double rounding) */\n    x = 1e16;\n    y = 2.99999;\n    z = x + y;\n    if (z != 1e16+4.)\n        exit(0);\n    /* both tests show evidence of double rounding */\n    exit(1);\n}\n],\nac_cv_x87_double_rounding=no,\nac_cv_x87_double_rounding=yes,\nac_cv_x87_double_rounding=no)\nCC=\"$ac_save_cc\"\nAC_MSG_RESULT($ac_cv_x87_double_rounding)\nif test \"$ac_cv_x87_double_rounding\" = yes\nthen\n  AC_DEFINE(X87_DOUBLE_ROUNDING, 1,\n  [Define if arithmetic is subject to x87-style double rounding issue])\nfi\n\n# ************************************\n# * Check for mathematical functions *\n# ************************************\n\nLIBS_SAVE=$LIBS\nLIBS=\"$LIBS $LIBM\"\n\n# On FreeBSD 6.2, it appears that tanh(-0.) returns 0. instead of\n# -0. on some architectures.\nAC_MSG_CHECKING(whether tanh preserves the sign of zero)\nAC_CACHE_VAL(ac_cv_tanh_preserves_zero_sign, [\nAC_TRY_RUN([\n#include <math.h>\n#include <stdlib.h>\nint main() {\n    /* return 0 if either negative zeros don't exist\n       on this platform or if negative zeros exist\n       and tanh(-0.) == -0. */\n  if (atan2(0., -1.) == atan2(-0., -1.) ||\n      atan2(tanh(-0.), -1.) == atan2(-0., -1.)) exit(0);\n  else exit(1);\n}\n],\nac_cv_tanh_preserves_zero_sign=yes,\nac_cv_tanh_preserves_zero_sign=no,\nac_cv_tanh_preserves_zero_sign=no)])\nAC_MSG_RESULT($ac_cv_tanh_preserves_zero_sign)\nif test \"$ac_cv_tanh_preserves_zero_sign\" = yes\nthen\n  AC_DEFINE(TANH_PRESERVES_ZERO_SIGN, 1,\n  [Define if tanh(-0.) is -0., or if platform doesn't have signed zeros])\nfi\n\nAC_CHECK_FUNCS([acosh asinh atanh copysign expm1 finite hypot log1p round])\nAC_CHECK_DECLS([isinf, isnan, isfinite], [], [], [[#include <math.h>]])\n\nLIBS=$LIBS_SAVE\n\n# For multiprocessing module, check that sem_open\n# actually works.  For FreeBSD versions <= 7.2,\n# the kernel module that provides POSIX semaphores\n# isn't loaded by default, so an attempt to call\n# sem_open results in a 'Signal 12' error.\nAC_MSG_CHECKING(whether POSIX semaphores are enabled)\nAC_CACHE_VAL(ac_cv_posix_semaphores_enabled,\nAC_TRY_RUN([\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <semaphore.h>\n#include <sys/stat.h>\n\nint main(void) {\n  sem_t *a = sem_open(\"/autoconf\", O_CREAT, S_IRUSR|S_IWUSR, 0);\n  if (a == SEM_FAILED) {\n    perror(\"sem_open\");\n    return 1;\n  }\n  sem_close(a);\n  sem_unlink(\"/autoconf\");\n  return 0;\n}\n], ac_cv_posix_semaphores_enabled=yes,\n   ac_cv_posix_semaphores_enabled=no,\n   ac_cv_posix_semaphores_enabled=yes)\n)\nAC_MSG_RESULT($ac_cv_posix_semaphores_enabled)\nif test $ac_cv_posix_semaphores_enabled = no\nthen\n  AC_DEFINE(POSIX_SEMAPHORES_NOT_ENABLED, 1,\n            [Define if POSIX semaphores aren't enabled on your system])\nfi\n\n# Multiprocessing check for broken sem_getvalue\nAC_MSG_CHECKING(for broken sem_getvalue)\nAC_TRY_RUN([\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <semaphore.h>\n#include <sys/stat.h>\n\nint main(void){\n  sem_t *a = sem_open(\"/autocftw\", O_CREAT, S_IRUSR|S_IWUSR, 0);\n  int count;\n  int res;\n  if(a==SEM_FAILED){\n    perror(\"sem_open\");\n    return 1;\n\n  }\n  res = sem_getvalue(a, &count);\n  sem_close(a);\n  sem_unlink(\"/autocftw\");\n  return res==-1 ? 1 : 0;\n}\n]\n,AC_MSG_RESULT(no),\n AC_MSG_RESULT(yes)\n  AC_DEFINE(HAVE_BROKEN_SEM_GETVALUE, 1, define to 1 if your sem_getvalue is broken.)\n)\n\n# determine what size digit to use for Python's longs\nAC_MSG_CHECKING([digit size for Python's longs])\nAC_ARG_ENABLE(big-digits,\nAC_HELP_STRING([--enable-big-digits@<:@=BITS@:>@],[use big digits for Python longs [[BITS=30]]]),\n[case $enable_big_digits in\nyes)\n  enable_big_digits=30 ;;\nno)\n  enable_big_digits=15 ;;\n[15|30])\n  ;;\n*)\n  AC_MSG_ERROR([bad value $enable_big_digits for --enable-big-digits; value should be 15 or 30]) ;;\nesac\nAC_MSG_RESULT($enable_big_digits)\nAC_DEFINE_UNQUOTED(PYLONG_BITS_IN_DIGIT, $enable_big_digits, [Define as the preferred size in bits of long digits])\n],\n[AC_MSG_RESULT(no value specified)])\n\n# check for wchar.h\nAC_CHECK_HEADER(wchar.h, [\n  AC_DEFINE(HAVE_WCHAR_H, 1, \n  [Define if the compiler provides a wchar.h header file.]) \n  wchar_h=\"yes\"\n],\nwchar_h=\"no\"\n)\n\n# determine wchar_t size\nif test \"$wchar_h\" = yes\nthen\n  AC_CHECK_SIZEOF(wchar_t, 4, [#include <wchar.h>])\nfi\n\nAC_MSG_CHECKING(for UCS-4 tcl)\nhave_ucs4_tcl=no\nAC_TRY_COMPILE([\n#include <tcl.h>\n#if TCL_UTF_MAX != 6\n# error \"NOT UCS4_TCL\"\n#endif], [], [\n  AC_DEFINE(HAVE_UCS4_TCL, 1, [Define this if you have tcl and TCL_UTF_MAX==6])\n  have_ucs4_tcl=yes\n])\nAC_MSG_RESULT($have_ucs4_tcl)\n\n# check whether wchar_t is signed or not\nif test \"$wchar_h\" = yes\nthen\n  # check whether wchar_t is signed or not\n  AC_MSG_CHECKING(whether wchar_t is signed)\n  AC_CACHE_VAL(ac_cv_wchar_t_signed, [\n  AC_TRY_RUN([\n  #include <wchar.h>\n  int main()\n  {\n\t/* Success: exit code 0 */\n        exit((((wchar_t) -1) < ((wchar_t) 0)) ? 0 : 1);\n  }\n  ],\n  ac_cv_wchar_t_signed=yes,\n  ac_cv_wchar_t_signed=no,\n  ac_cv_wchar_t_signed=yes)])\n  AC_MSG_RESULT($ac_cv_wchar_t_signed)\nfi\n\nAC_MSG_CHECKING(what type to use for str)\nAC_ARG_WITH(wide-unicode, \n            AC_HELP_STRING(--with-wide-unicode, Use 4-byte Unicode characters (default is 2 bytes)),\n[\nif test \"$withval\" != no\nthen unicode_size=\"4\"\nelse unicode_size=\"2\"\nfi\n],\n[\ncase \"$have_ucs4_tcl\" in\n  yes) unicode_size=\"4\" ;;\n  *)   unicode_size=\"2\" ;;\nesac\n])\n\nAH_TEMPLATE(Py_UNICODE_SIZE,\n  [Define as the size of the unicode type.])\ncase \"$unicode_size\" in\n  4) AC_DEFINE(Py_UNICODE_SIZE, 4) ;;\n  *) AC_DEFINE(Py_UNICODE_SIZE, 2) ;;\nesac\n\nAH_TEMPLATE(PY_UNICODE_TYPE,\n  [Define as the integral type used for Unicode representation.])\n\n# wchar_t is only usable if it maps to an unsigned type\nif test \"$unicode_size\" = \"$ac_cv_sizeof_wchar_t\" \\\n          -a \"$ac_cv_wchar_t_signed\" = \"no\"\nthen\n  PY_UNICODE_TYPE=\"wchar_t\"\n  AC_DEFINE(HAVE_USABLE_WCHAR_T, 1,\n  [Define if you have a useable wchar_t type defined in wchar.h; useable\n   means wchar_t must be an unsigned type with at least 16 bits. (see\n   Include/unicodeobject.h).])\n  AC_DEFINE(PY_UNICODE_TYPE,wchar_t)\nelif test \"$ac_cv_sizeof_short\" = \"$unicode_size\"\nthen\n     PY_UNICODE_TYPE=\"unsigned short\"\n     AC_DEFINE(PY_UNICODE_TYPE,unsigned short)\nelif test \"$ac_cv_sizeof_long\" = \"$unicode_size\"\nthen\n     PY_UNICODE_TYPE=\"unsigned long\"\n     AC_DEFINE(PY_UNICODE_TYPE,unsigned long)\nelse\n     PY_UNICODE_TYPE=\"no type found\"\nfi\nAC_MSG_RESULT($PY_UNICODE_TYPE)\n\n# check for endianness\nAC_C_BIGENDIAN\n\n# Check whether right shifting a negative integer extends the sign bit\n# or fills with zeros (like the Cray J90, according to Tim Peters).\nAC_MSG_CHECKING(whether right shift extends the sign bit)\nAC_CACHE_VAL(ac_cv_rshift_extends_sign, [\nAC_TRY_RUN([\nint main()\n{\n\texit(((-1)>>3 == -1) ? 0 : 1);\n}\n],\nac_cv_rshift_extends_sign=yes,\nac_cv_rshift_extends_sign=no,\nac_cv_rshift_extends_sign=yes)])\nAC_MSG_RESULT($ac_cv_rshift_extends_sign)\nif test \"$ac_cv_rshift_extends_sign\" = no\nthen\n  AC_DEFINE(SIGNED_RIGHT_SHIFT_ZERO_FILLS, 1,\n  [Define if i>>j for signed int i does not extend the sign bit\n   when i < 0])\nfi\n\n# check for getc_unlocked and related locking functions\nAC_MSG_CHECKING(for getc_unlocked() and friends)\nAC_CACHE_VAL(ac_cv_have_getc_unlocked, [\nAC_TRY_LINK([#include <stdio.h>],[\n\tFILE *f = fopen(\"/dev/null\", \"r\");\n\tflockfile(f);\n\tgetc_unlocked(f);\n\tfunlockfile(f);\n], ac_cv_have_getc_unlocked=yes, ac_cv_have_getc_unlocked=no)])\nAC_MSG_RESULT($ac_cv_have_getc_unlocked)\nif test \"$ac_cv_have_getc_unlocked\" = yes\nthen\n  AC_DEFINE(HAVE_GETC_UNLOCKED, 1,\n  [Define this if you have flockfile(), getc_unlocked(), and funlockfile()])\nfi\n\n# check where readline lives\n# save the value of LIBS so we don't actually link Python with readline\nLIBS_no_readline=$LIBS\n\n# On some systems we need to link readline to a termcap compatible\n# library.  NOTE: Keep the precedence of listed libraries synchronised\n# with setup.py.\npy_cv_lib_readline=no\nAC_MSG_CHECKING([how to link readline libs])\nfor py_libtermcap in \"\" ncursesw ncurses curses termcap; do\n  if test -z \"$py_libtermcap\"; then\n    READLINE_LIBS=\"-lreadline\"\n  else\n    READLINE_LIBS=\"-lreadline -l$py_libtermcap\"\n  fi\n  LIBS=\"$READLINE_LIBS $LIBS_no_readline\"\n  AC_LINK_IFELSE(\n    [AC_LANG_CALL([],[readline])],\n    [py_cv_lib_readline=yes])\n  if test $py_cv_lib_readline = yes; then\n    break\n  fi\ndone\n# Uncomment this line if you want to use READINE_LIBS in Makefile or scripts\n#AC_SUBST([READLINE_LIBS])\nif test $py_cv_lib_readline = no; then\n  AC_MSG_RESULT([none])\nelse\n  AC_MSG_RESULT([$READLINE_LIBS])\n  AC_DEFINE(HAVE_LIBREADLINE, 1,\n    [Define if you have the readline library (-lreadline).])\nfi\n\n# check for readline 2.1\nAC_CHECK_LIB(readline, rl_callback_handler_install,\n\tAC_DEFINE(HAVE_RL_CALLBACK, 1,\n        [Define if you have readline 2.1]), ,$READLINE_LIBS)\n\n# check for readline 2.2\nAC_TRY_CPP([#include <readline/readline.h>],\nhave_readline=yes, have_readline=no)\nif test $have_readline = yes\nthen\n  AC_EGREP_HEADER([extern int rl_completion_append_character;],\n  [readline/readline.h],\n  AC_DEFINE(HAVE_RL_COMPLETION_APPEND_CHARACTER, 1,\n  [Define if you have readline 2.2]), )\n  AC_EGREP_HEADER([extern int rl_completion_suppress_append;],\n  [readline/readline.h],\n  AC_DEFINE(HAVE_RL_COMPLETION_SUPPRESS_APPEND, 1,\n  [Define if you have rl_completion_suppress_append]), )\nfi\n\n# check for readline 4.0\nAC_CHECK_LIB(readline, rl_pre_input_hook,\n\tAC_DEFINE(HAVE_RL_PRE_INPUT_HOOK, 1,\n        [Define if you have readline 4.0]), ,$READLINE_LIBS)\n\n# also in 4.0\nAC_CHECK_LIB(readline, rl_completion_display_matches_hook,\n\tAC_DEFINE(HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK, 1,\n        [Define if you have readline 4.0]), ,$READLINE_LIBS)\n\n# check for readline 4.2\nAC_CHECK_LIB(readline, rl_completion_matches,\n\tAC_DEFINE(HAVE_RL_COMPLETION_MATCHES, 1,\n        [Define if you have readline 4.2]), ,$READLINE_LIBS)\n\n# also in readline 4.2\nAC_TRY_CPP([#include <readline/readline.h>],\nhave_readline=yes, have_readline=no)\nif test $have_readline = yes\nthen\n  AC_EGREP_HEADER([extern int rl_catch_signals;],\n  [readline/readline.h],\n  AC_DEFINE(HAVE_RL_CATCH_SIGNAL, 1,\n  [Define if you can turn off readline's signal handling.]), )\nfi\n\n# End of readline checks: restore LIBS\nLIBS=$LIBS_no_readline\n\nAC_MSG_CHECKING(for broken nice())\nAC_CACHE_VAL(ac_cv_broken_nice, [\nAC_TRY_RUN([\nint main()\n{\n\tint val1 = nice(1);\n\tif (val1 != -1 && val1 == nice(2))\n\t\texit(0);\n\texit(1);\n}\n],\nac_cv_broken_nice=yes,\nac_cv_broken_nice=no,\nac_cv_broken_nice=no)])\nAC_MSG_RESULT($ac_cv_broken_nice)\nif test \"$ac_cv_broken_nice\" = yes\nthen\n  AC_DEFINE(HAVE_BROKEN_NICE, 1,\n  [Define if nice() returns success/failure instead of the new priority.])\nfi\n\nAC_MSG_CHECKING(for broken poll())\nAC_TRY_RUN([\n#include <poll.h>\n\nint main (void)\n    {\n    struct pollfd poll_struct = { 42, POLLIN|POLLPRI|POLLOUT, 0 };\n    \n    close (42);\n\n    int poll_test = poll (&poll_struct, 1, 0);\n\n    if (poll_test < 0)\n        {\n        exit(0);\n        }\n    else if (poll_test == 0 && poll_struct.revents != POLLNVAL)\n        {\n        exit(0);\n        }\n    else\n        {\n        exit(1);\n        }\n    }\n],\nac_cv_broken_poll=yes,\nac_cv_broken_poll=no,\nac_cv_broken_poll=no)\nAC_MSG_RESULT($ac_cv_broken_poll)\nif test \"$ac_cv_broken_poll\" = yes\nthen\n  AC_DEFINE(HAVE_BROKEN_POLL, 1,\n      [Define if poll() sets errno on invalid file descriptors.])\nfi\n\n# Before we can test tzset, we need to check if struct tm has a tm_zone \n# (which is not required by ISO C or UNIX spec) and/or if we support\n# tzname[]\nAC_STRUCT_TIMEZONE\n\n# check tzset(3) exists and works like we expect it to\nAC_MSG_CHECKING(for working tzset())\nAC_CACHE_VAL(ac_cv_working_tzset, [\nAC_TRY_RUN([\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\n#if HAVE_TZNAME\nextern char *tzname[];\n#endif\n\nint main()\n{\n\t/* Note that we need to ensure that not only does tzset(3)\n\t   do 'something' with localtime, but it works as documented\n\t   in the library reference and as expected by the test suite.\n\t   This includes making sure that tzname is set properly if\n\t   tm->tm_zone does not exist since it is the alternative way\n\t   of getting timezone info.\n\n\t   Red Hat 6.2 doesn't understand the southern hemisphere \n\t   after New Year's Day.\n\t*/\n\n\ttime_t groundhogday = 1044144000; /* GMT-based */\n\ttime_t midyear = groundhogday + (365 * 24 * 3600 / 2);\n\n\tputenv(\"TZ=UTC+0\");\n\ttzset();\n\tif (localtime(&groundhogday)->tm_hour != 0)\n\t    exit(1);\n#if HAVE_TZNAME\n\t/* For UTC, tzname[1] is sometimes \"\", sometimes \"   \" */\n\tif (strcmp(tzname[0], \"UTC\") || \n\t\t(tzname[1][0] != 0 && tzname[1][0] != ' '))\n\t    exit(1);\n#endif\n\n\tputenv(\"TZ=EST+5EDT,M4.1.0,M10.5.0\");\n\ttzset();\n\tif (localtime(&groundhogday)->tm_hour != 19)\n\t    exit(1);\n#if HAVE_TZNAME\n\tif (strcmp(tzname[0], \"EST\") || strcmp(tzname[1], \"EDT\"))\n\t    exit(1);\n#endif\n\n\tputenv(\"TZ=AEST-10AEDT-11,M10.5.0,M3.5.0\");\n\ttzset();\n\tif (localtime(&groundhogday)->tm_hour != 11)\n\t    exit(1);\n#if HAVE_TZNAME\n\tif (strcmp(tzname[0], \"AEST\") || strcmp(tzname[1], \"AEDT\"))\n\t    exit(1);\n#endif\n\n#if HAVE_STRUCT_TM_TM_ZONE\n\tif (strcmp(localtime(&groundhogday)->tm_zone, \"AEDT\"))\n\t    exit(1);\n\tif (strcmp(localtime(&midyear)->tm_zone, \"AEST\"))\n\t    exit(1);\n#endif\n\n\texit(0);\n}\n],\nac_cv_working_tzset=yes,\nac_cv_working_tzset=no,\nac_cv_working_tzset=no)])\nAC_MSG_RESULT($ac_cv_working_tzset)\nif test \"$ac_cv_working_tzset\" = yes\nthen\n  AC_DEFINE(HAVE_WORKING_TZSET, 1,\n  [Define if tzset() actually switches the local timezone in a meaningful way.])\nfi\n\n# Look for subsecond timestamps in struct stat\nAC_MSG_CHECKING(for tv_nsec in struct stat)\nAC_CACHE_VAL(ac_cv_stat_tv_nsec,\nAC_TRY_COMPILE([#include <sys/stat.h>], [\nstruct stat st;\nst.st_mtim.tv_nsec = 1;\n],\nac_cv_stat_tv_nsec=yes,\nac_cv_stat_tv_nsec=no,\nac_cv_stat_tv_nsec=no))\nAC_MSG_RESULT($ac_cv_stat_tv_nsec)\nif test \"$ac_cv_stat_tv_nsec\" = yes\nthen\n  AC_DEFINE(HAVE_STAT_TV_NSEC, 1,\n  [Define if you have struct stat.st_mtim.tv_nsec])\nfi\n\n# Look for BSD style subsecond timestamps in struct stat\nAC_MSG_CHECKING(for tv_nsec2 in struct stat)\nAC_CACHE_VAL(ac_cv_stat_tv_nsec2,\nAC_TRY_COMPILE([#include <sys/stat.h>], [\nstruct stat st;\nst.st_mtimespec.tv_nsec = 1;\n],\nac_cv_stat_tv_nsec2=yes,\nac_cv_stat_tv_nsec2=no,\nac_cv_stat_tv_nsec2=no))\nAC_MSG_RESULT($ac_cv_stat_tv_nsec2)\nif test \"$ac_cv_stat_tv_nsec2\" = yes\nthen\n  AC_DEFINE(HAVE_STAT_TV_NSEC2, 1,\n  [Define if you have struct stat.st_mtimensec])\nfi\n\n# On HP/UX 11.0, mvwdelch is a block with a return statement\nAC_MSG_CHECKING(whether mvwdelch is an expression)\nAC_CACHE_VAL(ac_cv_mvwdelch_is_expression,\nAC_TRY_COMPILE([#include <curses.h>], [\n  int rtn;\n  rtn = mvwdelch(0,0,0);\n], ac_cv_mvwdelch_is_expression=yes,\n   ac_cv_mvwdelch_is_expression=no,\n   ac_cv_mvwdelch_is_expression=yes))\nAC_MSG_RESULT($ac_cv_mvwdelch_is_expression)\n\nif test \"$ac_cv_mvwdelch_is_expression\" = yes\nthen\n  AC_DEFINE(MVWDELCH_IS_EXPRESSION, 1,\n  [Define if mvwdelch in curses.h is an expression.])\nfi\n\nAC_MSG_CHECKING(whether WINDOW has _flags)\nAC_CACHE_VAL(ac_cv_window_has_flags,\nAC_TRY_COMPILE([#include <curses.h>], [\n  WINDOW *w;\n  w->_flags = 0;\n], ac_cv_window_has_flags=yes,\n   ac_cv_window_has_flags=no,\n   ac_cv_window_has_flags=no))\nAC_MSG_RESULT($ac_cv_window_has_flags)\n\n\nif test \"$ac_cv_window_has_flags\" = yes\nthen\n  AC_DEFINE(WINDOW_HAS_FLAGS, 1, \n  [Define if WINDOW in curses.h offers a field _flags.])\nfi\n\nAC_MSG_CHECKING(for is_term_resized)\nAC_TRY_COMPILE([#include <curses.h>], void *x=is_term_resized,\n  AC_DEFINE(HAVE_CURSES_IS_TERM_RESIZED, 1, Define if you have the 'is_term_resized' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\nAC_MSG_CHECKING(for resize_term)\nAC_TRY_COMPILE([#include <curses.h>], void *x=resize_term,\n  AC_DEFINE(HAVE_CURSES_RESIZE_TERM, 1, Define if you have the 'resize_term' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\nAC_MSG_CHECKING(for resizeterm)\nAC_TRY_COMPILE([#include <curses.h>], void *x=resizeterm,\n  AC_DEFINE(HAVE_CURSES_RESIZETERM, 1, Define if you have the 'resizeterm' function.)\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\nAC_MSG_CHECKING(for /dev/ptmx)\n\nif test -r /dev/ptmx\nthen\n  AC_MSG_RESULT(yes)\n  AC_DEFINE(HAVE_DEV_PTMX, 1,\n  [Define if we have /dev/ptmx.])\nelse\n  AC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING(for /dev/ptc)\n\nif test -r /dev/ptc\nthen\n  AC_MSG_RESULT(yes)\n  AC_DEFINE(HAVE_DEV_PTC, 1,\n  [Define if we have /dev/ptc.])\nelse\n  AC_MSG_RESULT(no)\nfi\n\nAC_MSG_CHECKING(for %zd printf() format support)\nAC_TRY_RUN([#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n\n#ifdef HAVE_SSIZE_T\ntypedef ssize_t Py_ssize_t;\n#elif SIZEOF_VOID_P == SIZEOF_LONG\ntypedef long Py_ssize_t;\n#else\ntypedef int Py_ssize_t;\n#endif\n\nint main()\n{\n    char buffer[256];\n\n    if(sprintf(buffer, \"%zd\", (size_t)123) < 0)\n       \treturn 1;\n\n    if (strcmp(buffer, \"123\"))\n\treturn 1;\n\n    if (sprintf(buffer, \"%zd\", (Py_ssize_t)-123) < 0)\n       \treturn 1;\n\n    if (strcmp(buffer, \"-123\"))\n\treturn 1;\n\n    return 0;\n}],\n[AC_MSG_RESULT(yes)\n AC_DEFINE(PY_FORMAT_SIZE_T, \"z\", [Define to printf format modifier for Py_ssize_t])],\n AC_MSG_RESULT(no))\n\nAC_CHECK_TYPE(socklen_t,,\n  AC_DEFINE(socklen_t,int,\n            Define to `int' if <sys/socket.h> does not define.),[\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n])\n\nAC_MSG_CHECKING(for broken mbstowcs)\nAC_TRY_RUN([\n#include<stdlib.h>\nint main() {\n    size_t len = -1;\n    const char *str = \"text\";\n    len = mbstowcs(NULL, str, 0);\n    return (len != 4);\n}\n],\nac_cv_broken_mbstowcs=no,\nac_cv_broken_mbstowcs=yes,\nac_cv_broken_mbstowcs=no)\nAC_MSG_RESULT($ac_cv_broken_mbstowcs)\nif test \"$ac_cv_broken_mbstowcs\" = yes\nthen\n  AC_DEFINE(HAVE_BROKEN_MBSTOWCS, 1,\n  [Define if mbstowcs(NULL, \"text\", 0) does not return the number of \n   wide chars that would be converted.])\nfi\n\n# Check for --with-computed-gotos\nAC_MSG_CHECKING(for --with-computed-gotos)\nAC_ARG_WITH(computed-gotos,\n            AC_HELP_STRING(--with-computed-gotos,\n                           Use computed gotos / threaded dispatch in evaluation loop (not available on all compilers)),\n[\nif test \"$withval\" != no\nthen \n  AC_DEFINE(USE_COMPUTED_GOTOS, 1,\n  [Define if you want to use computed gotos in ceval.c.]) \n  AC_MSG_RESULT(yes)\nelse AC_MSG_RESULT(no)\nfi],\n[AC_MSG_RESULT(no)])\n\nif test $ac_sys_system = Darwin\nthen\n\tLIBS=\"$LIBS -framework CoreFoundation\"\nfi\n\n\n\nAC_SUBST(THREADHEADERS)\n\nfor h in `(cd $srcdir;echo Python/thread_*.h)`\ndo\n  THREADHEADERS=\"$THREADHEADERS \\$(srcdir)/$h\"\ndone\n\nAC_SUBST(SRCDIRS)\nSRCDIRS=\"Parser Grammar Objects Python Modules Mac\"\nAC_MSG_CHECKING(for build directories)\nfor dir in $SRCDIRS; do\n    if test ! -d $dir; then\n        mkdir $dir\n    fi\ndone\nAC_MSG_RESULT(done)\n\n# generate output files\nAC_CONFIG_FILES(Makefile.pre Modules/Setup.config Misc/python.pc)\nAC_CONFIG_FILES([Modules/ld_so_aix], [chmod +x Modules/ld_so_aix])\nAC_OUTPUT\n\necho \"creating Modules/Setup\"\nif test ! -f Modules/Setup\nthen\n\tcp $srcdir/Modules/Setup.dist Modules/Setup\nfi\n\necho \"creating Modules/Setup.local\"\nif test ! -f Modules/Setup.local\nthen\n\techo \"# Edit this file for local setup changes\" >Modules/Setup.local\nfi\n\necho \"creating Makefile\"\n$SHELL $srcdir/Modules/makesetup -c $srcdir/Modules/config.c.in \\\n\t\t\t-s Modules Modules/Setup.config \\\n\t\t\tModules/Setup.local Modules/Setup\nmv config.c Modules\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/test_sys.py": "# -*- coding: iso-8859-1 -*-\nimport unittest, test.support\nimport sys, io, os\nimport struct\nimport subprocess\nimport textwrap\n\n# count the number of test runs, used to create unique\n# strings to intern in test_intern()\nnumruns = 0\n\n\nclass SysModuleTest(unittest.TestCase):\n\n    def setUp(self):\n        self.orig_stdout = sys.stdout\n        self.orig_stderr = sys.stderr\n        self.orig_displayhook = sys.displayhook\n\n    def tearDown(self):\n        sys.stdout = self.orig_stdout\n        sys.stderr = self.orig_stderr\n        sys.displayhook = self.orig_displayhook\n\n    def test_original_displayhook(self):\n        import builtins\n        out = io.StringIO()\n        sys.stdout = out\n\n        dh = sys.__displayhook__\n\n        self.assertRaises(TypeError, dh)\n        if hasattr(builtins, \"_\"):\n            del builtins._\n\n        dh(None)\n        self.assertEqual(out.getvalue(), \"\")\n        self.assertTrue(not hasattr(builtins, \"_\"))\n        dh(42)\n        self.assertEqual(out.getvalue(), \"42\\n\")\n        self.assertEqual(builtins._, 42)\n\n        del sys.stdout\n        self.assertRaises(RuntimeError, dh, 42)\n\n    def test_lost_displayhook(self):\n        del sys.displayhook\n        code = compile(\"42\", \"<string>\", \"single\")\n        self.assertRaises(RuntimeError, eval, code)\n\n    def test_custom_displayhook(self):\n        def baddisplayhook(obj):\n            raise ValueError\n        sys.displayhook = baddisplayhook\n        code = compile(\"42\", \"<string>\", \"single\")\n        self.assertRaises(ValueError, eval, code)\n\n    def test_original_excepthook(self):\n        err = io.StringIO()\n        sys.stderr = err\n\n        eh = sys.__excepthook__\n\n        self.assertRaises(TypeError, eh)\n        try:\n            raise ValueError(42)\n        except ValueError as exc:\n            eh(*sys.exc_info())\n\n        self.assertTrue(err.getvalue().endswith(\"ValueError: 42\\n\"))\n\n    def test_excepthook(self):\n        with test.support.captured_output(\"stderr\") as stderr:\n            sys.excepthook(1, '1', 1)\n        self.assertTrue(\"TypeError: print_exception(): Exception expected for \" \\\n                         \"value, str found\" in stderr.getvalue())\n\n    # FIXME: testing the code for a lost or replaced excepthook in\n    # Python/pythonrun.c::PyErr_PrintEx() is tricky.\n\n    def test_exit(self):\n\n        self.assertRaises(TypeError, sys.exit, 42, 42)\n\n        # call without argument\n        try:\n            sys.exit(0)\n        except SystemExit as exc:\n            self.assertEqual(exc.code, 0)\n        except:\n            self.fail(\"wrong exception\")\n        else:\n            self.fail(\"no exception\")\n\n        # call with tuple argument with one entry\n        # entry will be unpacked\n        try:\n            sys.exit(42)\n        except SystemExit as exc:\n            self.assertEqual(exc.code, 42)\n        except:\n            self.fail(\"wrong exception\")\n        else:\n            self.fail(\"no exception\")\n\n        # call with integer argument\n        try:\n            sys.exit((42,))\n        except SystemExit as exc:\n            self.assertEqual(exc.code, 42)\n        except:\n            self.fail(\"wrong exception\")\n        else:\n            self.fail(\"no exception\")\n\n        # call with string argument\n        try:\n            sys.exit(\"exit\")\n        except SystemExit as exc:\n            self.assertEqual(exc.code, \"exit\")\n        except:\n            self.fail(\"wrong exception\")\n        else:\n            self.fail(\"no exception\")\n\n        # call with tuple argument with two entries\n        try:\n            sys.exit((17, 23))\n        except SystemExit as exc:\n            self.assertEqual(exc.code, (17, 23))\n        except:\n            self.fail(\"wrong exception\")\n        else:\n            self.fail(\"no exception\")\n\n        # test that the exit machinery handles SystemExits properly\n        rc = subprocess.call([sys.executable, \"-c\",\n                              \"raise SystemExit(47)\"])\n        self.assertEqual(rc, 47)\n\n        def check_exit_message(code, expected):\n            process = subprocess.Popen([sys.executable, \"-c\", code],\n                                       stderr=subprocess.PIPE)\n            stdout, stderr = process.communicate()\n            self.assertEqual(process.returncode, 1)\n            self.assertTrue(stderr.startswith(expected),\n                \"%s doesn't start with %s\" % (ascii(stderr), ascii(expected)))\n\n        # test that stderr buffer if flushed before the exit message is written\n        # into stderr\n        check_exit_message(\n            r'import sys; sys.stderr.write(\"unflushed,\"); sys.exit(\"message\")',\n            b\"unflushed,message\")\n\n        # test that the exit message is written with backslashreplace error\n        # handler to stderr\n        check_exit_message(\n            r'import sys; sys.exit(\"surrogates:\\uDCFF\")',\n            b\"surrogates:\\\\udcff\")\n\n    def test_getdefaultencoding(self):\n        self.assertRaises(TypeError, sys.getdefaultencoding, 42)\n        # can't check more than the type, as the user might have changed it\n        self.assertTrue(isinstance(sys.getdefaultencoding(), str))\n\n    # testing sys.settrace() is done in test_sys_settrace.py\n    # testing sys.setprofile() is done in test_sys_setprofile.py\n\n    def test_setcheckinterval(self):\n        self.assertRaises(TypeError, sys.setcheckinterval)\n        orig = sys.getcheckinterval()\n        for n in 0, 100, 120, orig: # orig last to restore starting state\n            sys.setcheckinterval(n)\n            self.assertEqual(sys.getcheckinterval(), n)\n\n    def test_recursionlimit(self):\n        self.assertRaises(TypeError, sys.getrecursionlimit, 42)\n        oldlimit = sys.getrecursionlimit()\n        self.assertRaises(TypeError, sys.setrecursionlimit)\n        self.assertRaises(ValueError, sys.setrecursionlimit, -42)\n        sys.setrecursionlimit(10000)\n        self.assertEqual(sys.getrecursionlimit(), 10000)\n        sys.setrecursionlimit(oldlimit)\n\n    def test_recursionlimit_recovery(self):\n        # NOTE: this test is slightly fragile in that it depends on the current\n        # recursion count when executing the test being low enough so as to\n        # trigger the recursion recovery detection in the _Py_MakeEndRecCheck\n        # macro (see ceval.h).\n        oldlimit = sys.getrecursionlimit()\n        def f():\n            f()\n        try:\n            for i in (50, 1000):\n                # Issue #5392: stack overflow after hitting recursion limit twice\n                sys.setrecursionlimit(i)\n                self.assertRaises(RuntimeError, f)\n                self.assertRaises(RuntimeError, f)\n        finally:\n            sys.setrecursionlimit(oldlimit)\n\n    def test_recursionlimit_fatalerror(self):\n        # A fatal error occurs if a second recursion limit is hit when recovering\n        # from a first one.\n        if os.name == \"nt\":\n            raise unittest.SkipTest(\n                \"under Windows, test would generate a spurious crash dialog\")\n        code = textwrap.dedent(\"\"\"\n            import sys\n\n            def f():\n                try:\n                    f()\n                except RuntimeError:\n                    f()\n\n            sys.setrecursionlimit(%d)\n            f()\"\"\")\n        for i in (50, 1000):\n            sub = subprocess.Popen([sys.executable, '-c', code % i],\n                stderr=subprocess.PIPE)\n            err = sub.communicate()[1]\n            self.assertTrue(sub.returncode, sub.returncode)\n            self.assertTrue(\n                b\"Fatal Python error: Cannot recover from stack overflow\" in err,\n                err)\n\n    def test_getwindowsversion(self):\n        if hasattr(sys, \"getwindowsversion\"):\n            v = sys.getwindowsversion()\n            self.assertTrue(isinstance(v, tuple))\n            self.assertEqual(len(v), 5)\n            self.assertTrue(isinstance(v[0], int))\n            self.assertTrue(isinstance(v[1], int))\n            self.assertTrue(isinstance(v[2], int))\n            self.assertTrue(isinstance(v[3], int))\n            self.assertTrue(isinstance(v[4], str))\n\n    def test_call_tracing(self):\n        self.assertRaises(TypeError, sys.call_tracing, type, 2)\n\n    def test_dlopenflags(self):\n        if hasattr(sys, \"setdlopenflags\"):\n            self.assertTrue(hasattr(sys, \"getdlopenflags\"))\n            self.assertRaises(TypeError, sys.getdlopenflags, 42)\n            oldflags = sys.getdlopenflags()\n            self.assertRaises(TypeError, sys.setdlopenflags)\n            sys.setdlopenflags(oldflags+1)\n            self.assertEqual(sys.getdlopenflags(), oldflags+1)\n            sys.setdlopenflags(oldflags)\n\n    def test_refcount(self):\n        # n here must be a global in order for this test to pass while\n        # tracing with a python function.  Tracing calls PyFrame_FastToLocals\n        # which will add a copy of any locals to the frame object, causing\n        # the reference count to increase by 2 instead of 1.\n        global n\n        self.assertRaises(TypeError, sys.getrefcount)\n        c = sys.getrefcount(None)\n        n = None\n        self.assertEqual(sys.getrefcount(None), c+1)\n        del n\n        self.assertEqual(sys.getrefcount(None), c)\n        if hasattr(sys, \"gettotalrefcount\"):\n            self.assertTrue(isinstance(sys.gettotalrefcount(), int))\n\n    def test_getframe(self):\n        self.assertRaises(TypeError, sys._getframe, 42, 42)\n        self.assertRaises(ValueError, sys._getframe, 2000000000)\n        self.assertTrue(\n            SysModuleTest.test_getframe.__code__ \\\n            is sys._getframe().f_code\n        )\n\n    # sys._current_frames() is a CPython-only gimmick.\n    def test_current_frames(self):\n        have_threads = True\n        try:\n            import _thread\n        except ImportError:\n            have_threads = False\n\n        if have_threads:\n            self.current_frames_with_threads()\n        else:\n            self.current_frames_without_threads()\n\n    # Test sys._current_frames() in a WITH_THREADS build.\n    def current_frames_with_threads(self):\n        import threading, _thread\n        import traceback\n\n        # Spawn a thread that blocks at a known place.  Then the main\n        # thread does sys._current_frames(), and verifies that the frames\n        # returned make sense.\n        entered_g = threading.Event()\n        leave_g = threading.Event()\n        thread_info = []  # the thread's id\n\n        def f123():\n            g456()\n\n        def g456():\n            thread_info.append(_thread.get_ident())\n            entered_g.set()\n            leave_g.wait()\n\n        t = threading.Thread(target=f123)\n        t.start()\n        entered_g.wait()\n\n        # At this point, t has finished its entered_g.set(), although it's\n        # impossible to guess whether it's still on that line or has moved on\n        # to its leave_g.wait().\n        self.assertEqual(len(thread_info), 1)\n        thread_id = thread_info[0]\n\n        d = sys._current_frames()\n\n        main_id = _thread.get_ident()\n        self.assertTrue(main_id in d)\n        self.assertTrue(thread_id in d)\n\n        # Verify that the captured main-thread frame is _this_ frame.\n        frame = d.pop(main_id)\n        self.assertTrue(frame is sys._getframe())\n\n        # Verify that the captured thread frame is blocked in g456, called\n        # from f123.  This is a litte tricky, since various bits of\n        # threading.py are also in the thread's call stack.\n        frame = d.pop(thread_id)\n        stack = traceback.extract_stack(frame)\n        for i, (filename, lineno, funcname, sourceline) in enumerate(stack):\n            if funcname == \"f123\":\n                break\n        else:\n            self.fail(\"didn't find f123() on thread's call stack\")\n\n        self.assertEqual(sourceline, \"g456()\")\n\n        # And the next record must be for g456().\n        filename, lineno, funcname, sourceline = stack[i+1]\n        self.assertEqual(funcname, \"g456\")\n        self.assertTrue(sourceline in [\"leave_g.wait()\", \"entered_g.set()\"])\n\n        # Reap the spawned thread.\n        leave_g.set()\n        t.join()\n\n    # Test sys._current_frames() when thread support doesn't exist.\n    def current_frames_without_threads(self):\n        # Not much happens here:  there is only one thread, with artificial\n        # \"thread id\" 0.\n        d = sys._current_frames()\n        self.assertEqual(len(d), 1)\n        self.assertTrue(0 in d)\n        self.assertTrue(d[0] is sys._getframe())\n\n    def test_attributes(self):\n        self.assertTrue(isinstance(sys.api_version, int))\n        self.assertTrue(isinstance(sys.argv, list))\n        self.assertTrue(sys.byteorder in (\"little\", \"big\"))\n        self.assertTrue(isinstance(sys.builtin_module_names, tuple))\n        self.assertTrue(isinstance(sys.copyright, str))\n        self.assertTrue(isinstance(sys.exec_prefix, str))\n        self.assertTrue(isinstance(sys.executable, str))\n        self.assertEqual(len(sys.float_info), 11)\n        self.assertEqual(sys.float_info.radix, 2)\n        self.assertEqual(len(sys.int_info), 2)\n        self.assertTrue(sys.int_info.bits_per_digit % 5 == 0)\n        self.assertTrue(sys.int_info.sizeof_digit >= 1)\n        self.assertEqual(type(sys.int_info.bits_per_digit), int)\n        self.assertEqual(type(sys.int_info.sizeof_digit), int)\n        self.assertTrue(isinstance(sys.hexversion, int))\n        self.assertTrue(isinstance(sys.maxsize, int))\n        self.assertTrue(isinstance(sys.maxunicode, int))\n        self.assertTrue(isinstance(sys.platform, str))\n        self.assertTrue(isinstance(sys.prefix, str))\n        self.assertTrue(isinstance(sys.version, str))\n        vi = sys.version_info\n        self.assertTrue(isinstance(vi[:], tuple))\n        self.assertEqual(len(vi), 5)\n        self.assertTrue(isinstance(vi[0], int))\n        self.assertTrue(isinstance(vi[1], int))\n        self.assertTrue(isinstance(vi[2], int))\n        self.assertTrue(vi[3] in (\"alpha\", \"beta\", \"candidate\", \"final\"))\n        self.assertTrue(isinstance(vi[4], int))\n        self.assertTrue(isinstance(vi.major, int))\n        self.assertTrue(isinstance(vi.minor, int))\n        self.assertTrue(isinstance(vi.micro, int))\n        self.assertTrue(vi.releaselevel in\n                     (\"alpha\", \"beta\", \"candidate\", \"final\"))\n        self.assertTrue(isinstance(vi.serial, int))\n        self.assertEqual(vi[0], vi.major)\n        self.assertEqual(vi[1], vi.minor)\n        self.assertEqual(vi[2], vi.micro)\n        self.assertEqual(vi[3], vi.releaselevel)\n        self.assertEqual(vi[4], vi.serial)\n        self.assertTrue(vi > (1,0,0))\n\n    def test_43581(self):\n        # Can't use sys.stdout, as this is a StringIO object when\n        # the test runs under regrtest.\n        self.assertEqual(sys.__stdout__.encoding, sys.__stderr__.encoding)\n\n    def test_intern(self):\n        global numruns\n        numruns += 1\n        self.assertRaises(TypeError, sys.intern)\n        s = \"never interned before\" + str(numruns)\n        self.assertTrue(sys.intern(s) is s)\n        s2 = s.swapcase().swapcase()\n        self.assertTrue(sys.intern(s2) is s)\n\n        # Subclasses of string can't be interned, because they\n        # provide too much opportunity for insane things to happen.\n        # We don't want them in the interned dict and if they aren't\n        # actually interned, we don't want to create the appearance\n        # that they are by allowing intern() to succeed.\n        class S(str):\n            def __hash__(self):\n                return 123\n\n        self.assertRaises(TypeError, sys.intern, S(\"abc\"))\n\n    def test_main_invalid_unicode(self):\n        import locale\n        non_decodable = b\"\\xff\"\n        encoding = locale.getpreferredencoding()\n        try:\n            non_decodable.decode(encoding)\n        except UnicodeDecodeError:\n            pass\n        else:\n            self.skipTest('%r is decodable with encoding %s'\n                % (non_decodable, encoding))\n        code = b'print(\"' + non_decodable + b'\")'\n        p = subprocess.Popen([sys.executable, \"-c\", code], stderr=subprocess.PIPE)\n        stdout, stderr = p.communicate()\n        self.assertEqual(p.returncode, 1)\n        self.assertTrue(b\"UnicodeEncodeError:\" in stderr,\n            \"%r not in %s\" % (b\"UnicodeEncodeError:\", ascii(stderr)))\n\n    def test_sys_flags(self):\n        self.assertTrue(sys.flags)\n        attrs = (\"debug\", \"division_warning\",\n                 \"inspect\", \"interactive\", \"optimize\", \"dont_write_bytecode\",\n                 \"no_user_site\", \"no_site\", \"ignore_environment\", \"verbose\",\n                 \"bytes_warning\", \"hash_randomization\")\n        for attr in attrs:\n            self.assertTrue(hasattr(sys.flags, attr), attr)\n            self.assertEqual(type(getattr(sys.flags, attr)), int, attr)\n        self.assertTrue(repr(sys.flags))\n        self.assertEqual(len(sys.flags), len(attrs))\n\n    def test_clear_type_cache(self):\n        sys._clear_type_cache()\n\n    def test_ioencoding(self):\n        env = dict(os.environ)\n\n        # Test character: cent sign, encoded as 0x4A (ASCII J) in CP424,\n        # not representable in ASCII.\n\n        env[\"PYTHONIOENCODING\"] = \"cp424\"\n        p = subprocess.Popen([sys.executable, \"-c\", 'print(chr(0xa2))'],\n                             stdout = subprocess.PIPE, env=env)\n        out = p.stdout.read()\n        self.assertEqual(out, \"\\xa2\\n\".encode(\"cp424\"))\n\n        env[\"PYTHONIOENCODING\"] = \"ascii:replace\"\n        p = subprocess.Popen([sys.executable, \"-c\", 'print(chr(0xa2))'],\n                             stdout = subprocess.PIPE, env=env)\n        out = p.stdout.read().strip()\n        self.assertEqual(out, b'?')\n\n    def test_executable(self):\n        # Issue #7774: Ensure that sys.executable is an empty string if argv[0]\n        # has been set to an non existent program name and Python is unable to\n        # retrieve the real program name\n\n        # For a normal installation, it should work without 'cwd'\n        # argument. For test runs in the build directory, see #7774.\n        python_dir = os.path.dirname(os.path.realpath(sys.executable))\n        p = subprocess.Popen(\n            [\"nonexistent\", \"-c\",\n             'import sys; print(sys.executable.encode(\"ascii\", \"backslashreplace\"))'],\n            executable=sys.executable, stdout=subprocess.PIPE, cwd=python_dir)\n        stdout = p.communicate()[0]\n        executable = stdout.strip().decode(\"ASCII\")\n        p.wait()\n        self.assertIn(executable, [\"b''\", repr(sys.executable.encode(\"ascii\", \"backslashreplace\"))])\n\n\nclass SizeofTest(unittest.TestCase):\n\n    TPFLAGS_HAVE_GC = 1<<14\n    TPFLAGS_HEAPTYPE = 1<<9\n\n    def setUp(self):\n        self.c = len(struct.pack('c', ' '))\n        self.H = len(struct.pack('H', 0))\n        self.i = len(struct.pack('i', 0))\n        self.l = len(struct.pack('l', 0))\n        self.P = len(struct.pack('P', 0))\n        # due to missing size_t information from struct, it is assumed that\n        # sizeof(Py_ssize_t) = sizeof(void*)\n        self.header = 'PP'\n        self.vheader = self.header + 'P'\n        if hasattr(sys, \"gettotalrefcount\"):\n            self.header += '2P'\n            self.vheader += '2P'\n        self.longdigit = sys.int_info.sizeof_digit\n        import _testcapi\n        self.gc_headsize = _testcapi.SIZEOF_PYGC_HEAD\n        self.file = open(test.support.TESTFN, 'wb')\n\n    def tearDown(self):\n        self.file.close()\n        test.support.unlink(test.support.TESTFN)\n\n    def check_sizeof(self, o, size):\n        result = sys.getsizeof(o)\n        # add GC header size\n        if ((type(o) == type) and (o.__flags__ & self.TPFLAGS_HEAPTYPE) or\\\n           ((type(o) != type) and (type(o).__flags__ & self.TPFLAGS_HAVE_GC))):\n            size += self.gc_headsize\n        msg = 'wrong size for %s: got %d, expected %d' \\\n              % (type(o), result, size)\n        self.assertEqual(result, size, msg)\n\n    def calcsize(self, fmt):\n        \"\"\"Wrapper around struct.calcsize which enforces the alignment of the\n        end of a structure to the alignment requirement of pointer.\n\n        Note: This wrapper should only be used if a pointer member is included\n        and no member with a size larger than a pointer exists.\n        \"\"\"\n        return struct.calcsize(fmt + '0P')\n\n    def test_gc_head_size(self):\n        # Check that the gc header size is added to objects tracked by the gc.\n        h = self.header\n        vh = self.vheader\n        size = self.calcsize\n        gc_header_size = self.gc_headsize\n        # bool objects are not gc tracked\n        self.assertEqual(sys.getsizeof(True), size(vh) + self.longdigit)\n        # but lists are\n        self.assertEqual(sys.getsizeof([]), size(vh + 'PP') + gc_header_size)\n\n    def test_default(self):\n        h = self.header\n        vh = self.vheader\n        size = self.calcsize\n        self.assertEqual(sys.getsizeof(True), size(vh) + self.longdigit)\n        self.assertEqual(sys.getsizeof(True, -1), size(vh) + self.longdigit)\n\n    def test_objecttypes(self):\n        # check all types defined in Objects/\n        h = self.header\n        vh = self.vheader\n        size = self.calcsize\n        check = self.check_sizeof\n        # bool\n        check(True, size(vh) + self.longdigit)\n        # buffer\n        # XXX\n        # builtin_function_or_method\n        check(len, size(h + '3P'))\n        # bytearray\n        samples = [b'', b'u'*100000]\n        for sample in samples:\n            x = bytearray(sample)\n            check(x, size(vh + 'iPP') + x.__alloc__() * self.c)\n        # bytearray_iterator\n        check(iter(bytearray()), size(h + 'PP'))\n        # cell\n        def get_cell():\n            x = 42\n            def inner():\n                return x\n            return inner\n        check(get_cell().__closure__[0], size(h + 'P'))\n        # code\n        check(get_cell().__code__, size(h + '5i8Pi2P'))\n        # complex\n        check(complex(0,1), size(h + '2d'))\n        # method_descriptor (descriptor object)\n        check(str.lower, size(h + '2PP'))\n        # classmethod_descriptor (descriptor object)\n        # XXX\n        # member_descriptor (descriptor object)\n        import datetime\n        check(datetime.timedelta.days, size(h + '2PP'))\n        # getset_descriptor (descriptor object)\n        import collections\n        check(collections.defaultdict.default_factory, size(h + '2PP'))\n        # wrapper_descriptor (descriptor object)\n        check(int.__add__, size(h + '2P2P'))\n        # method-wrapper (descriptor object)\n        check({}.__iter__, size(h + '2P'))\n        # dict\n        check({}, size(h + '3P2P' + 8*'P2P'))\n        longdict = {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8}\n        check(longdict, size(h + '3P2P' + 8*'P2P') + 16*size('P2P'))\n        # dictionary-keyiterator\n        check({}.keys(), size(h + 'P'))\n        # dictionary-valueiterator\n        check({}.values(), size(h + 'P'))\n        # dictionary-itemiterator\n        check({}.items(), size(h + 'P'))\n        # dictproxy\n        class C(object): pass\n        check(C.__dict__, size(h + 'P'))\n        # BaseException\n        check(BaseException(), size(h + '5P'))\n        # UnicodeEncodeError\n        check(UnicodeEncodeError(\"\", \"\", 0, 0, \"\"), size(h + '5P 2P2PP'))\n        # UnicodeDecodeError\n        # XXX\n#        check(UnicodeDecodeError(\"\", \"\", 0, 0, \"\"), size(h + '5P2PP'))\n        # UnicodeTranslateError\n        check(UnicodeTranslateError(\"\", 0, 1, \"\"), size(h + '5P 2P2PP'))\n        # ellipses\n        check(Ellipsis, size(h + ''))\n        # EncodingMap\n        import codecs, encodings.iso8859_3\n        x = codecs.charmap_build(encodings.iso8859_3.decoding_table)\n        check(x, size(h + '32B2iB'))\n        # enumerate\n        check(enumerate([]), size(h + 'l3P'))\n        # reverse\n        check(reversed(''), size(h + 'PP'))\n        # float\n        check(float(0), size(h + 'd'))\n        # sys.floatinfo\n        check(sys.float_info, size(vh) + self.P * len(sys.float_info))\n        # frame\n        import inspect\n        CO_MAXBLOCKS = 20\n        x = inspect.currentframe()\n        ncells = len(x.f_code.co_cellvars)\n        nfrees = len(x.f_code.co_freevars)\n        extras = x.f_code.co_stacksize + x.f_code.co_nlocals +\\\n                  ncells + nfrees - 1\n        check(x, size(vh + '12P3i' + CO_MAXBLOCKS*'3i' + 'P' + extras*'P'))\n        # function\n        def func(): pass\n        check(func, size(h + '11P'))\n        class c():\n            @staticmethod\n            def foo():\n                pass\n            @classmethod\n            def bar(cls):\n                pass\n            # staticmethod\n            check(foo, size(h + 'P'))\n            # classmethod\n            check(bar, size(h + 'P'))\n        # generator\n        def get_gen(): yield 1\n        check(get_gen(), size(h + 'Pi2P'))\n        # iterator\n        check(iter('abc'), size(h + 'lP'))\n        # callable-iterator\n        import re\n        check(re.finditer('',''), size(h + '2P'))\n        # list\n        samples = [[], [1,2,3], ['1', '2', '3']]\n        for sample in samples:\n            check(sample, size(vh + 'PP') + len(sample)*self.P)\n        # sortwrapper (list)\n        # XXX\n        # cmpwrapper (list)\n        # XXX\n        # listiterator (list)\n        check(iter([]), size(h + 'lP'))\n        # listreverseiterator (list)\n        check(reversed([]), size(h + 'lP'))\n        # long\n        check(0, size(vh))\n        check(1, size(vh) + self.longdigit)\n        check(-1, size(vh) + self.longdigit)\n        PyLong_BASE = 2**sys.int_info.bits_per_digit\n        check(int(PyLong_BASE), size(vh) + 2*self.longdigit)\n        check(int(PyLong_BASE**2-1), size(vh) + 2*self.longdigit)\n        check(int(PyLong_BASE**2), size(vh) + 3*self.longdigit)\n        # memory\n        check(memoryview(b''), size(h + 'P PP2P2i7P'))\n        # module\n        check(unittest, size(h + '3P'))\n        # None\n        check(None, size(h + ''))\n        # NotImplementedType\n        check(NotImplemented, size(h))\n        # object\n        check(object(), size(h + ''))\n        # property (descriptor object)\n        class C(object):\n            def getx(self): return self.__x\n            def setx(self, value): self.__x = value\n            def delx(self): del self.__x\n            x = property(getx, setx, delx, \"\")\n            check(x, size(h + '4Pi'))\n        # PyCapsule\n        # XXX\n        # rangeiterator\n        check(iter(range(1)), size(h + '4l'))\n        # reverse\n        check(reversed(''), size(h + 'PP'))\n        # range\n        check(range(1), size(h + '3P'))\n        check(range(66000), size(h + '3P'))\n        # set\n        # frozenset\n        PySet_MINSIZE = 8\n        samples = [[], range(10), range(50)]\n        s = size(h + '3P2P' + PySet_MINSIZE*'lP' + 'lP')\n        for sample in samples:\n            minused = len(sample)\n            if minused == 0: tmp = 1\n            # the computation of minused is actually a bit more complicated\n            # but this suffices for the sizeof test\n            minused = minused*2\n            newsize = PySet_MINSIZE\n            while newsize <= minused:\n                newsize = newsize << 1\n            if newsize <= 8:\n                check(set(sample), s)\n                check(frozenset(sample), s)\n            else:\n                check(set(sample), s + newsize*struct.calcsize('lP'))\n                check(frozenset(sample), s + newsize*struct.calcsize('lP'))\n        # setiterator\n        check(iter(set()), size(h + 'P3P'))\n        # slice\n        check(slice(0), size(h + '3P'))\n        # super\n        check(super(int), size(h + '3P'))\n        # tuple\n        check((), size(vh))\n        check((1,2,3), size(vh) + 3*self.P)\n        # type\n        # (PyTypeObject + PyNumberMethods + PyMappingMethods +\n        #  PySequenceMethods + PyBufferProcs)\n        s = size(vh + 'P2P15Pl4PP9PP11PI') + size('16Pi17P 3P 10P 2P 2P')\n        check(int, s)\n        # class\n        class newstyleclass(object): pass\n        check(newstyleclass, s)\n        # unicode\n        usize = len('\\0'.encode('unicode-internal'))\n        samples = ['', '1'*100]\n        # we need to test for both sizes, because we don't know if the string\n        # has been cached\n        for s in samples:\n            basicsize =  size(h + 'PPliP') + usize * (len(s) + 1)\n            check(s, basicsize)\n        # weakref\n        import weakref\n        check(weakref.ref(int), size(h + '2Pl2P'))\n        # weakproxy\n        # XXX\n        # weakcallableproxy\n        check(weakref.proxy(int), size(h + '2Pl2P'))\n\n    def test_pythontypes(self):\n        # check all types defined in Python/\n        h = self.header\n        vh = self.vheader\n        size = self.calcsize\n        check = self.check_sizeof\n        # _ast.AST\n        import _ast\n        check(_ast.AST(), size(h + ''))\n        # imp.NullImporter\n        import imp\n        check(imp.NullImporter(self.file.name), size(h + ''))\n        try:\n            raise TypeError\n        except TypeError:\n            tb = sys.exc_info()[2]\n            # traceback\n            if tb != None:\n                check(tb, size(h + '2P2i'))\n        # symtable entry\n        # XXX\n        # sys.flags\n        check(sys.flags, size(vh) + self.P * len(sys.flags))\n\n    def test_getfilesystemencoding(self):\n        import codecs\n\n        def check_fsencoding(fs_encoding):\n            if sys.platform == 'darwin':\n                self.assertEqual(fs_encoding, 'utf-8')\n            elif fs_encoding is None:\n                return\n            codecs.lookup(fs_encoding)\n\n        fs_encoding = sys.getfilesystemencoding()\n        check_fsencoding(fs_encoding)\n\n        # Even in C locale\n        try:\n            sys.executable.encode('ascii')\n        except UnicodeEncodeError:\n            # Python doesn't start with ASCII locale if its path is not ASCII,\n            # see issue #8611\n            pass\n        else:\n            env = os.environ.copy()\n            env['LANG'] = 'C'\n            output = subprocess.check_output(\n                [sys.executable, \"-c\",\n                 \"import sys; print(sys.getfilesystemencoding())\"],\n                env=env)\n            fs_encoding = output.rstrip().decode('ascii')\n            check_fsencoding(fs_encoding)\n\n    def test_setfilesystemencoding(self):\n        old = sys.getfilesystemencoding()\n        try:\n            sys.setfilesystemencoding(\"iso-8859-1\")\n            self.assertEqual(sys.getfilesystemencoding(), \"iso-8859-1\")\n        finally:\n            sys.setfilesystemencoding(old)\n        try:\n            self.assertRaises(LookupError, sys.setfilesystemencoding, \"xxx\")\n        finally:\n            sys.setfilesystemencoding(old)\n\ndef test_main():\n    test.support.run_unittest(SysModuleTest, SizeofTest)\n\nif __name__ == \"__main__\":\n    test_main()\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/ctypes/__init__.py": "\"\"\"create and manipulate C data types in Python\"\"\"\n\nimport os as _os, sys as _sys\n\n__version__ = \"1.1.0\"\n\nfrom _ctypes import Union, Structure, Array\nfrom _ctypes import _Pointer\nfrom _ctypes import CFuncPtr as _CFuncPtr\nfrom _ctypes import __version__ as _ctypes_version\nfrom _ctypes import RTLD_LOCAL, RTLD_GLOBAL\nfrom _ctypes import ArgumentError\n\nfrom struct import calcsize as _calcsize\n\nif __version__ != _ctypes_version:\n    raise Exception(\"Version number mismatch\", __version__, _ctypes_version)\n\nif _os.name in (\"nt\", \"ce\"):\n    from _ctypes import FormatError\n\nDEFAULT_MODE = RTLD_LOCAL\nif _os.name == \"posix\" and _sys.platform == \"darwin\":\n    # On OS X 10.3, we use RTLD_GLOBAL as default mode\n    # because RTLD_LOCAL does not work at least on some\n    # libraries.  OS X 10.3 is Darwin 7, so we check for\n    # that.\n\n    if int(_os.uname()[2].split('.')[0]) < 8:\n        DEFAULT_MODE = RTLD_GLOBAL\n\nfrom _ctypes import FUNCFLAG_CDECL as _FUNCFLAG_CDECL, \\\n     FUNCFLAG_PYTHONAPI as _FUNCFLAG_PYTHONAPI, \\\n     FUNCFLAG_USE_ERRNO as _FUNCFLAG_USE_ERRNO, \\\n     FUNCFLAG_USE_LASTERROR as _FUNCFLAG_USE_LASTERROR\n\n\"\"\"\nWINOLEAPI -> HRESULT\nWINOLEAPI_(type)\n\nSTDMETHODCALLTYPE\n\nSTDMETHOD(name)\nSTDMETHOD_(type, name)\n\nSTDAPICALLTYPE\n\"\"\"\n\ndef create_string_buffer(init, size=None):\n    \"\"\"create_string_buffer(aBytes) -> character array\n    create_string_buffer(anInteger) -> character array\n    create_string_buffer(aString, anInteger) -> character array\n    \"\"\"\n    if isinstance(init, (str, bytes)):\n        if size is None:\n            size = len(init)+1\n        buftype = c_char * size\n        buf = buftype()\n        buf.value = init\n        return buf\n    elif isinstance(init, int):\n        buftype = c_char * init\n        buf = buftype()\n        return buf\n    raise TypeError(init)\n\ndef c_buffer(init, size=None):\n##    \"deprecated, use create_string_buffer instead\"\n##    import warnings\n##    warnings.warn(\"c_buffer is deprecated, use create_string_buffer instead\",\n##                  DeprecationWarning, stacklevel=2)\n    return create_string_buffer(init, size)\n\n_c_functype_cache = {}\ndef CFUNCTYPE(restype, *argtypes, **kw):\n    \"\"\"CFUNCTYPE(restype, *argtypes,\n                 use_errno=False, use_last_error=False) -> function prototype.\n\n    restype: the result type\n    argtypes: a sequence specifying the argument types\n\n    The function prototype can be called in different ways to create a\n    callable object:\n\n    prototype(integer address) -> foreign function\n    prototype(callable) -> create and return a C callable function from callable\n    prototype(integer index, method name[, paramflags]) -> foreign function calling a COM method\n    prototype((ordinal number, dll object)[, paramflags]) -> foreign function exported by ordinal\n    prototype((function name, dll object)[, paramflags]) -> foreign function exported by name\n    \"\"\"\n    flags = _FUNCFLAG_CDECL\n    if kw.pop(\"use_errno\", False):\n        flags |= _FUNCFLAG_USE_ERRNO\n    if kw.pop(\"use_last_error\", False):\n        flags |= _FUNCFLAG_USE_LASTERROR\n    if kw:\n        raise ValueError(\"unexpected keyword argument(s) %s\" % kw.keys())\n    try:\n        return _c_functype_cache[(restype, argtypes, flags)]\n    except KeyError:\n        class CFunctionType(_CFuncPtr):\n            _argtypes_ = argtypes\n            _restype_ = restype\n            _flags_ = flags\n        _c_functype_cache[(restype, argtypes, flags)] = CFunctionType\n        return CFunctionType\n\nif _os.name in (\"nt\", \"ce\"):\n    from _ctypes import LoadLibrary as _dlopen\n    from _ctypes import FUNCFLAG_STDCALL as _FUNCFLAG_STDCALL\n    if _os.name == \"ce\":\n        # 'ce' doesn't have the stdcall calling convention\n        _FUNCFLAG_STDCALL = _FUNCFLAG_CDECL\n\n    _win_functype_cache = {}\n    def WINFUNCTYPE(restype, *argtypes, **kw):\n        # docstring set later (very similar to CFUNCTYPE.__doc__)\n        flags = _FUNCFLAG_STDCALL\n        if kw.pop(\"use_errno\", False):\n            flags |= _FUNCFLAG_USE_ERRNO\n        if kw.pop(\"use_last_error\", False):\n            flags |= _FUNCFLAG_USE_LASTERROR\n        if kw:\n            raise ValueError(\"unexpected keyword argument(s) %s\" % kw.keys())\n        try:\n            return _win_functype_cache[(restype, argtypes, flags)]\n        except KeyError:\n            class WinFunctionType(_CFuncPtr):\n                _argtypes_ = argtypes\n                _restype_ = restype\n                _flags_ = flags\n            _win_functype_cache[(restype, argtypes, flags)] = WinFunctionType\n            return WinFunctionType\n    if WINFUNCTYPE.__doc__:\n        WINFUNCTYPE.__doc__ = CFUNCTYPE.__doc__.replace(\"CFUNCTYPE\", \"WINFUNCTYPE\")\n\nelif _os.name == \"posix\":\n    from _ctypes import dlopen as _dlopen\n\nfrom _ctypes import sizeof, byref, addressof, alignment, resize\nfrom _ctypes import get_errno, set_errno\nfrom _ctypes import _SimpleCData\n\ndef _check_size(typ, typecode=None):\n    # Check if sizeof(ctypes_type) against struct.calcsize.  This\n    # should protect somewhat against a misconfigured libffi.\n    from struct import calcsize\n    if typecode is None:\n        # Most _type_ codes are the same as used in struct\n        typecode = typ._type_\n    actual, required = sizeof(typ), calcsize(typecode)\n    if actual != required:\n        raise SystemError(\"sizeof(%s) wrong: %d instead of %d\" % \\\n                          (typ, actual, required))\n\nclass py_object(_SimpleCData):\n    _type_ = \"O\"\n    def __repr__(self):\n        try:\n            return super().__repr__()\n        except ValueError:\n            return \"%s(<NULL>)\" % type(self).__name__\n_check_size(py_object, \"P\")\n\nclass c_short(_SimpleCData):\n    _type_ = \"h\"\n_check_size(c_short)\n\nclass c_ushort(_SimpleCData):\n    _type_ = \"H\"\n_check_size(c_ushort)\n\nclass c_long(_SimpleCData):\n    _type_ = \"l\"\n_check_size(c_long)\n\nclass c_ulong(_SimpleCData):\n    _type_ = \"L\"\n_check_size(c_ulong)\n\nif _calcsize(\"i\") == _calcsize(\"l\"):\n    # if int and long have the same size, make c_int an alias for c_long\n    c_int = c_long\n    c_uint = c_ulong\nelse:\n    class c_int(_SimpleCData):\n        _type_ = \"i\"\n    _check_size(c_int)\n\n    class c_uint(_SimpleCData):\n        _type_ = \"I\"\n    _check_size(c_uint)\n\nclass c_float(_SimpleCData):\n    _type_ = \"f\"\n_check_size(c_float)\n\nclass c_double(_SimpleCData):\n    _type_ = \"d\"\n_check_size(c_double)\n\nclass c_longdouble(_SimpleCData):\n    _type_ = \"g\"\nif sizeof(c_longdouble) == sizeof(c_double):\n    c_longdouble = c_double\n\nif _calcsize(\"l\") == _calcsize(\"q\"):\n    # if long and long long have the same size, make c_longlong an alias for c_long\n    c_longlong = c_long\n    c_ulonglong = c_ulong\nelse:\n    class c_longlong(_SimpleCData):\n        _type_ = \"q\"\n    _check_size(c_longlong)\n\n    class c_ulonglong(_SimpleCData):\n        _type_ = \"Q\"\n    ##    def from_param(cls, val):\n    ##        return ('d', float(val), val)\n    ##    from_param = classmethod(from_param)\n    _check_size(c_ulonglong)\n\nclass c_ubyte(_SimpleCData):\n    _type_ = \"B\"\nc_ubyte.__ctype_le__ = c_ubyte.__ctype_be__ = c_ubyte\n# backward compatibility:\n##c_uchar = c_ubyte\n_check_size(c_ubyte)\n\nclass c_byte(_SimpleCData):\n    _type_ = \"b\"\nc_byte.__ctype_le__ = c_byte.__ctype_be__ = c_byte\n_check_size(c_byte)\n\nclass c_char(_SimpleCData):\n    _type_ = \"c\"\nc_char.__ctype_le__ = c_char.__ctype_be__ = c_char\n_check_size(c_char)\n\nclass c_char_p(_SimpleCData):\n    _type_ = \"z\"\n    if _os.name == \"nt\":\n        def __repr__(self):\n            if not windll.kernel32.IsBadStringPtrA(self, -1):\n                return \"%s(%r)\" % (self.__class__.__name__, self.value)\n            return \"%s(%s)\" % (self.__class__.__name__, cast(self, c_void_p).value)\n    else:\n        def __repr__(self):\n            return \"%s(%s)\" % (self.__class__.__name__, cast(self, c_void_p).value)\n_check_size(c_char_p, \"P\")\n\nclass c_void_p(_SimpleCData):\n    _type_ = \"P\"\nc_voidp = c_void_p # backwards compatibility (to a bug)\n_check_size(c_void_p)\n\nclass c_bool(_SimpleCData):\n    _type_ = \"?\"\n\nfrom _ctypes import POINTER, pointer, _pointer_type_cache\n\ntry:\n    from _ctypes import set_conversion_mode\nexcept ImportError:\n    pass\nelse:\n    if _os.name in (\"nt\", \"ce\"):\n        set_conversion_mode(\"mbcs\", \"ignore\")\n    else:\n        set_conversion_mode(\"ascii\", \"strict\")\n\n    class c_wchar_p(_SimpleCData):\n        _type_ = \"Z\"\n\n    class c_wchar(_SimpleCData):\n        _type_ = \"u\"\n\n    POINTER(c_wchar).from_param = c_wchar_p.from_param #_SimpleCData.c_wchar_p_from_param\n\n    def create_unicode_buffer(init, size=None):\n        \"\"\"create_unicode_buffer(aString) -> character array\n        create_unicode_buffer(anInteger) -> character array\n        create_unicode_buffer(aString, anInteger) -> character array\n        \"\"\"\n        if isinstance(init, (str, bytes)):\n            if size is None:\n                size = len(init)+1\n            buftype = c_wchar * size\n            buf = buftype()\n            buf.value = init\n            return buf\n        elif isinstance(init, int):\n            buftype = c_wchar * init\n            buf = buftype()\n            return buf\n        raise TypeError(init)\n\nPOINTER(c_char).from_param = c_char_p.from_param #_SimpleCData.c_char_p_from_param\n\n# XXX Deprecated\ndef SetPointerType(pointer, cls):\n    if _pointer_type_cache.get(cls, None) is not None:\n        raise RuntimeError(\"This type already exists in the cache\")\n    if id(pointer) not in _pointer_type_cache:\n        raise RuntimeError(\"What's this???\")\n    pointer.set_type(cls)\n    _pointer_type_cache[cls] = pointer\n    del _pointer_type_cache[id(pointer)]\n\n# XXX Deprecated\ndef ARRAY(typ, len):\n    return typ * len\n\n################################################################\n\n\nclass CDLL(object):\n    \"\"\"An instance of this class represents a loaded dll/shared\n    library, exporting functions using the standard C calling\n    convention (named 'cdecl' on Windows).\n\n    The exported functions can be accessed as attributes, or by\n    indexing with the function name.  Examples:\n\n    <obj>.qsort -> callable object\n    <obj>['qsort'] -> callable object\n\n    Calling the functions releases the Python GIL during the call and\n    reacquires it afterwards.\n    \"\"\"\n    _func_flags_ = _FUNCFLAG_CDECL\n    _func_restype_ = c_int\n\n    def __init__(self, name, mode=DEFAULT_MODE, handle=None,\n                 use_errno=False,\n                 use_last_error=False):\n        self._name = name\n        flags = self._func_flags_\n        if use_errno:\n            flags |= _FUNCFLAG_USE_ERRNO\n        if use_last_error:\n            flags |= _FUNCFLAG_USE_LASTERROR\n\n        class _FuncPtr(_CFuncPtr):\n            _flags_ = flags\n            _restype_ = self._func_restype_\n        self._FuncPtr = _FuncPtr\n\n        if handle is None:\n            self._handle = _dlopen(self._name, mode)\n        else:\n            self._handle = handle\n\n    def __repr__(self):\n        return \"<%s '%s', handle %x at %x>\" % \\\n               (self.__class__.__name__, self._name,\n                (self._handle & (_sys.maxsize*2 + 1)),\n                id(self) & (_sys.maxsize*2 + 1))\n\n    def __getattr__(self, name):\n        if name.startswith('__') and name.endswith('__'):\n            raise AttributeError(name)\n        func = self.__getitem__(name)\n        setattr(self, name, func)\n        return func\n\n    def __getitem__(self, name_or_ordinal):\n        func = self._FuncPtr((name_or_ordinal, self))\n        if not isinstance(name_or_ordinal, int):\n            func.__name__ = name_or_ordinal\n        return func\n\nclass PyDLL(CDLL):\n    \"\"\"This class represents the Python library itself.  It allows to\n    access Python API functions.  The GIL is not released, and\n    Python exceptions are handled correctly.\n    \"\"\"\n    _func_flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI\n\nif _os.name in (\"nt\", \"ce\"):\n\n    class WinDLL(CDLL):\n        \"\"\"This class represents a dll exporting functions using the\n        Windows stdcall calling convention.\n        \"\"\"\n        _func_flags_ = _FUNCFLAG_STDCALL\n\n    # XXX Hm, what about HRESULT as normal parameter?\n    # Mustn't it derive from c_long then?\n    from _ctypes import _check_HRESULT, _SimpleCData\n    class HRESULT(_SimpleCData):\n        _type_ = \"l\"\n        # _check_retval_ is called with the function's result when it\n        # is used as restype.  It checks for the FAILED bit, and\n        # raises a WindowsError if it is set.\n        #\n        # The _check_retval_ method is implemented in C, so that the\n        # method definition itself is not included in the traceback\n        # when it raises an error - that is what we want (and Python\n        # doesn't have a way to raise an exception in the caller's\n        # frame).\n        _check_retval_ = _check_HRESULT\n\n    class OleDLL(CDLL):\n        \"\"\"This class represents a dll exporting functions using the\n        Windows stdcall calling convention, and returning HRESULT.\n        HRESULT error values are automatically raised as WindowsError\n        exceptions.\n        \"\"\"\n        _func_flags_ = _FUNCFLAG_STDCALL\n        _func_restype_ = HRESULT\n\nclass LibraryLoader(object):\n    def __init__(self, dlltype):\n        self._dlltype = dlltype\n\n    def __getattr__(self, name):\n        if name[0] == '_':\n            raise AttributeError(name)\n        dll = self._dlltype(name)\n        setattr(self, name, dll)\n        return dll\n\n    def __getitem__(self, name):\n        return getattr(self, name)\n\n    def LoadLibrary(self, name):\n        return self._dlltype(name)\n\ncdll = LibraryLoader(CDLL)\npydll = LibraryLoader(PyDLL)\n\nif _os.name in (\"nt\", \"ce\"):\n    pythonapi = PyDLL(\"python dll\", None, _sys.dllhandle)\nelif _sys.platform == \"cygwin\":\n    pythonapi = PyDLL(\"libpython%d.%d.dll\" % _sys.version_info[:2])\nelse:\n    pythonapi = PyDLL(None)\n\n\nif _os.name in (\"nt\", \"ce\"):\n    windll = LibraryLoader(WinDLL)\n    oledll = LibraryLoader(OleDLL)\n\n    if _os.name == \"nt\":\n        GetLastError = windll.kernel32.GetLastError\n    else:\n        GetLastError = windll.coredll.GetLastError\n    from _ctypes import get_last_error, set_last_error\n\n    def WinError(code=None, descr=None):\n        if code is None:\n            code = GetLastError()\n        if descr is None:\n            descr = FormatError(code).strip()\n        return WindowsError(code, descr)\n\n_pointer_type_cache[None] = c_void_p\n\nif sizeof(c_uint) == sizeof(c_void_p):\n    c_size_t = c_uint\nelif sizeof(c_ulong) == sizeof(c_void_p):\n    c_size_t = c_ulong\nelif sizeof(c_ulonglong) == sizeof(c_void_p):\n    c_size_t = c_ulonglong\n\n# functions\n\nfrom _ctypes import _memmove_addr, _memset_addr, _string_at_addr, _cast_addr\n\n## void *memmove(void *, const void *, size_t);\nmemmove = CFUNCTYPE(c_void_p, c_void_p, c_void_p, c_size_t)(_memmove_addr)\n\n## void *memset(void *, int, size_t)\nmemset = CFUNCTYPE(c_void_p, c_void_p, c_int, c_size_t)(_memset_addr)\n\ndef PYFUNCTYPE(restype, *argtypes):\n    class CFunctionType(_CFuncPtr):\n        _argtypes_ = argtypes\n        _restype_ = restype\n        _flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI\n    return CFunctionType\n\n_cast = PYFUNCTYPE(py_object, c_void_p, py_object, py_object)(_cast_addr)\ndef cast(obj, typ):\n    return _cast(obj, obj, typ)\n\n_string_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_string_at_addr)\ndef string_at(ptr, size=-1):\n    \"\"\"string_at(addr[, size]) -> string\n\n    Return the string at addr.\"\"\"\n    return _string_at(ptr, size)\n\ntry:\n    from _ctypes import _wstring_at_addr\nexcept ImportError:\n    pass\nelse:\n    _wstring_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_wstring_at_addr)\n    def wstring_at(ptr, size=-1):\n        \"\"\"wstring_at(addr[, size]) -> string\n\n        Return the string at addr.\"\"\"\n        return _wstring_at(ptr, size)\n\n\nif _os.name in (\"nt\", \"ce\"): # COM stuff\n    def DllGetClassObject(rclsid, riid, ppv):\n        try:\n            ccom = __import__(\"comtypes.server.inprocserver\", globals(), locals(), ['*'])\n        except ImportError:\n            return -2147221231 # CLASS_E_CLASSNOTAVAILABLE\n        else:\n            return ccom.DllGetClassObject(rclsid, riid, ppv)\n\n    def DllCanUnloadNow():\n        try:\n            ccom = __import__(\"comtypes.server.inprocserver\", globals(), locals(), ['*'])\n        except ImportError:\n            return 0 # S_OK\n        return ccom.DllCanUnloadNow()\n\nfrom ctypes._endian import BigEndianStructure, LittleEndianStructure\n\n# Fill in specifically-sized types\nc_int8 = c_byte\nc_uint8 = c_ubyte\nfor kind in [c_short, c_int, c_long, c_longlong]:\n    if sizeof(kind) == 2: c_int16 = kind\n    elif sizeof(kind) == 4: c_int32 = kind\n    elif sizeof(kind) == 8: c_int64 = kind\nfor kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:\n    if sizeof(kind) == 2: c_uint16 = kind\n    elif sizeof(kind) == 4: c_uint32 = kind\n    elif sizeof(kind) == 8: c_uint64 = kind\ndel(kind)\n\n# XXX for whatever reasons, creating the first instance of a callback\n# function is needed for the unittests on Win64 to succeed.  This MAY\n# be a compiler bug, since the problem occurs only when _ctypes is\n# compiled with the MS SDK compiler.  Or an uninitialized variable?\nCFUNCTYPE(c_int)(lambda: None)\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/ctypes/test/test_find.py": "import unittest\nimport sys\nfrom ctypes import *\nfrom ctypes.util import find_library\nfrom ctypes.test import is_resource_enabled\n\nif sys.platform == \"win32\":\n    lib_gl = find_library(\"OpenGL32\")\n    lib_glu = find_library(\"Glu32\")\n    lib_gle = None\nelif sys.platform == \"darwin\":\n    lib_gl = lib_glu = find_library(\"OpenGL\")\n    lib_gle = None\nelse:\n    lib_gl = find_library(\"GL\")\n    lib_glu = find_library(\"GLU\")\n    lib_gle = find_library(\"gle\")\n\n## print, for debugging\nif is_resource_enabled(\"printing\"):\n    if lib_gl or lib_glu or lib_gle:\n        print(\"OpenGL libraries:\")\n        for item in ((\"GL\", lib_gl),\n                     (\"GLU\", lib_glu),\n                     (\"gle\", lib_gle)):\n            print(\"\\t\", item)\n\n\n# On some systems, loading the OpenGL libraries needs the RTLD_GLOBAL mode.\nclass Test_OpenGL_libs(unittest.TestCase):\n    def setUp(self):\n        self.gl = self.glu = self.gle = None\n        if lib_gl:\n            self.gl = CDLL(lib_gl, mode=RTLD_GLOBAL)\n        if lib_glu:\n            self.glu = CDLL(lib_glu, RTLD_GLOBAL)\n        if lib_gle:\n            try:\n                self.gle = CDLL(lib_gle)\n            except OSError:\n                pass\n\n    if lib_gl:\n        def test_gl(self):\n            if self.gl:\n                self.gl.glClearIndex\n\n    if lib_glu:\n        def test_glu(self):\n            if self.glu:\n                self.glu.gluBeginCurve\n\n    if lib_gle:\n        def test_gle(self):\n            if self.gle:\n                self.gle.gleGetJoinStyle\n\n##if os.name == \"posix\" and sys.platform != \"darwin\":\n\n##    # On platforms where the default shared library suffix is '.so',\n##    # at least some libraries can be loaded as attributes of the cdll\n##    # object, since ctypes now tries loading the lib again\n##    # with '.so' appended of the first try fails.\n##    #\n##    # Won't work for libc, unfortunately.  OTOH, it isn't\n##    # needed for libc since this is already mapped into the current\n##    # process (?)\n##    #\n##    # On MAC OSX, it won't work either, because dlopen() needs a full path,\n##    # and the default suffix is either none or '.dylib'.\n\n##    class LoadLibs(unittest.TestCase):\n##        def test_libm(self):\n##            import math\n##            libm = cdll.libm\n##            sqrt = libm.sqrt\n##            sqrt.argtypes = (c_double,)\n##            sqrt.restype = c_double\n##            self.assertEqual(sqrt(2), math.sqrt(2))\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Doc/library/sys.rst": ":mod:`sys` --- System-specific parameters and functions\n=======================================================\n\n.. module:: sys\n   :synopsis: Access system-specific parameters and functions.\n\n\nThis module provides access to some variables used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter. It is\nalways available.\n\n\n.. data:: argv\n\n   The list of command line arguments passed to a Python script. ``argv[0]`` is the\n   script name (it is operating system dependent whether this is a full pathname or\n   not).  If the command was executed using the :option:`-c` command line option to\n   the interpreter, ``argv[0]`` is set to the string ``'-c'``.  If no script name\n   was passed to the Python interpreter, ``argv[0]`` is the empty string.\n\n   To loop over the standard input, or the list of files given on the\n   command line, see the :mod:`fileinput` module.\n\n\n.. data:: byteorder\n\n   An indicator of the native byte order.  This will have the value ``'big'`` on\n   big-endian (most-significant byte first) platforms, and ``'little'`` on\n   little-endian (least-significant byte first) platforms.\n\n\n.. data:: subversion\n\n   A triple (repo, branch, version) representing the Subversion information of the\n   Python interpreter. *repo* is the name of the repository, ``'CPython'``.\n   *branch* is a string of one of the forms ``'trunk'``, ``'branches/name'`` or\n   ``'tags/name'``. *version* is the output of ``svnversion``, if the interpreter\n   was built from a Subversion checkout; it contains the revision number (range)\n   and possibly a trailing 'M' if there were local modifications. If the tree was\n   exported (or svnversion was not available), it is the revision of\n   ``Include/patchlevel.h`` if the branch is a tag. Otherwise, it is ``None``.\n\n\n.. data:: builtin_module_names\n\n   A tuple of strings giving the names of all modules that are compiled into this\n   Python interpreter.  (This information is not available in any other way ---\n   ``modules.keys()`` only lists the imported modules.)\n\n\n.. function:: call_tracing(func, args)\n\n   Call ``func(*args)``, while tracing is enabled.  The tracing state is saved,\n   and restored afterwards.  This is intended to be called from a debugger from\n   a checkpoint, to recursively debug some other code.\n\n\n.. data:: copyright\n\n   A string containing the copyright pertaining to the Python interpreter.\n\n\n.. function:: _clear_type_cache()\n\n   Clear the internal type cache. The type cache is used to speed up attribute\n   and method lookups. Use the function *only* to drop unnecessary references\n   during reference leak debugging.\n\n   This function should be used for internal and specialized purposes only.\n\n\n.. function:: _current_frames()\n\n   Return a dictionary mapping each thread's identifier to the topmost stack frame\n   currently active in that thread at the time the function is called. Note that\n   functions in the :mod:`traceback` module can build the call stack given such a\n   frame.\n\n   This is most useful for debugging deadlock:  this function does not require the\n   deadlocked threads' cooperation, and such threads' call stacks are frozen for as\n   long as they remain deadlocked.  The frame returned for a non-deadlocked thread\n   may bear no relationship to that thread's current activity by the time calling\n   code examines the frame.\n\n   This function should be used for internal and specialized purposes only.\n\n\n.. data:: dllhandle\n\n   Integer specifying the handle of the Python DLL. Availability: Windows.\n\n\n.. function:: displayhook(value)\n\n   If *value* is not ``None``, this function prints it to ``sys.stdout``, and saves\n   it in ``builtins._``.\n\n   ``sys.displayhook`` is called on the result of evaluating an :term:`expression`\n   entered in an interactive Python session.  The display of these values can be\n   customized by assigning another one-argument function to ``sys.displayhook``.\n\n\n.. function:: excepthook(type, value, traceback)\n\n   This function prints out a given traceback and exception to ``sys.stderr``.\n\n   When an exception is raised and uncaught, the interpreter calls\n   ``sys.excepthook`` with three arguments, the exception class, exception\n   instance, and a traceback object.  In an interactive session this happens just\n   before control is returned to the prompt; in a Python program this happens just\n   before the program exits.  The handling of such top-level exceptions can be\n   customized by assigning another three-argument function to ``sys.excepthook``.\n\n\n.. data:: __displayhook__\n          __excepthook__\n\n   These objects contain the original values of ``displayhook`` and ``excepthook``\n   at the start of the program.  They are saved so that ``displayhook`` and\n   ``excepthook`` can be restored in case they happen to get replaced with broken\n   objects.\n\n\n.. function:: exc_info()\n\n   This function returns a tuple of three values that give information about the\n   exception that is currently being handled.  The information returned is specific\n   both to the current thread and to the current stack frame.  If the current stack\n   frame is not handling an exception, the information is taken from the calling\n   stack frame, or its caller, and so on until a stack frame is found that is\n   handling an exception.  Here, \"handling an exception\" is defined as \"executing\n   an except clause.\"  For any stack frame, only information about the exception\n   being currently handled is accessible.\n\n   .. index:: object: traceback\n\n   If no exception is being handled anywhere on the stack, a tuple containing\n   three ``None`` values is returned.  Otherwise, the values returned are\n   ``(type, value, traceback)``.  Their meaning is: *type* gets the type of the\n   exception being handled (a subclass of :exc:`BaseException`); *value* gets\n   the exception instance (an instance of the exception type); *traceback* gets\n   a traceback object (see the Reference Manual) which encapsulates the call\n   stack at the point where the exception originally occurred.\n\n   .. warning::\n\n      Assigning the *traceback* return value to a local variable in a function\n      that is handling an exception will cause a circular reference.  Since most\n      functions don't need access to the traceback, the best solution is to use\n      something like ``exctype, value = sys.exc_info()[:2]`` to extract only the\n      exception type and value.  If you do need the traceback, make sure to\n      delete it after use (best done with a :keyword:`try`\n      ... :keyword:`finally` statement) or to call :func:`exc_info` in a\n      function that does not itself handle an exception.\n\n      Such cycles are normally automatically reclaimed when garbage collection\n      is enabled and they become unreachable, but it remains more efficient to\n      avoid creating cycles.\n\n\n.. data:: exec_prefix\n\n   A string giving the site-specific directory prefix where the platform-dependent\n   Python files are installed; by default, this is also ``'/usr/local'``.  This can\n   be set at build time with the ``--exec-prefix`` argument to the\n   :program:`configure` script.  Specifically, all configuration files (e.g. the\n   :file:`pyconfig.h` header file) are installed in the directory ``exec_prefix +\n   '/lib/pythonversion/config'``, and shared library modules are installed in\n   ``exec_prefix + '/lib/pythonversion/lib-dynload'``, where *version* is equal to\n   ``version[:3]``.\n\n\n.. data:: executable\n\n   A string giving the name of the executable binary for the Python interpreter, on\n   systems where this makes sense.\n\n\n.. function:: exit([arg])\n\n   Exit from Python.  This is implemented by raising the :exc:`SystemExit`\n   exception, so cleanup actions specified by finally clauses of :keyword:`try`\n   statements are honored, and it is possible to intercept the exit attempt at\n   an outer level.\n\n   The optional argument *arg* can be an integer giving the exit status\n   (defaulting to zero), or another type of object.  If it is an integer, zero\n   is considered \"successful termination\" and any nonzero value is considered\n   \"abnormal termination\" by shells and the like.  Most systems require it to be\n   in the range 0-127, and produce undefined results otherwise.  Some systems\n   have a convention for assigning specific meanings to specific exit codes, but\n   these are generally underdeveloped; Unix programs generally use 2 for command\n   line syntax errors and 1 for all other kind of errors.  If another type of\n   object is passed, ``None`` is equivalent to passing zero, and any other\n   object is printed to :data:`stderr` and results in an exit code of 1.  In\n   particular, ``sys.exit(\"some error message\")`` is a quick way to exit a\n   program when an error occurs.\n\n   Since :func:`exit` ultimately \"only\" raises an exception, it will only exit\n   the process when called from the main thread, and the exception is not\n   intercepted.\n\n\n.. data:: flags\n\n   The struct sequence *flags* exposes the status of command line flags. The\n   attributes are read only.\n\n   ============================= =============================\n   attribute                     flag\n   ============================= =============================\n   :const:`debug`                :option:`-d`\n   :const:`division_warning`     :option:`-Q`\n   :const:`inspect`              :option:`-i`\n   :const:`interactive`          :option:`-i`\n   :const:`optimize`             :option:`-O` or :option:`-OO`\n   :const:`dont_write_bytecode`  :option:`-B`\n   :const:`no_user_site`         :option:`-s`\n   :const:`no_site`              :option:`-S`\n   :const:`ignore_environment`   :option:`-E`\n   :const:`verbose`              :option:`-v`\n   :const:`bytes_warning`        :option:`-b`\n   :const:`hash_randomization`   :option:`-R`\n   ============================= =============================\n\n   .. versionadded:: 3.1.5\n      The ``hash_randomization`` attribute.\n\n\n.. data:: float_info\n\n   A structseq holding information about the float type. It contains low level\n   information about the precision and internal representation.  The values\n   correspond to the various floating-point constants defined in the standard\n   header file :file:`float.h` for the 'C' programming language; see section\n   5.2.4.2.2 of the 1999 ISO/IEC C standard [C99]_, 'Characteristics of\n   floating types', for details.\n\n   +---------------------+----------------+--------------------------------------------------+\n   | attribute           | float.h macro  | explanation                                      |\n   +=====================+================+==================================================+\n   | :const:`epsilon`    | DBL_EPSILON    | difference between 1 and the least value greater |\n   |                     |                | than 1 that is representable as a float          |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`dig`        | DBL_DIG        | maximum number of decimal digits that can be     |\n   |                     |                | faithfully represented in a float;  see below    |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`mant_dig`   | DBL_MANT_DIG   | float precision: the number of base-``radix``    |\n   |                     |                | digits in the significand of a float             |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`max`        | DBL_MAX        | maximum representable finite float               |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`max_exp`    | DBL_MAX_EXP    | maximum integer e such that ``radix**(e-1)`` is  |\n   |                     |                | a representable finite float                     |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`max_10_exp` | DBL_MAX_10_EXP | maximum integer e such that ``10**e`` is in the  |\n   |                     |                | range of representable finite floats             |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`min`        | DBL_MIN        | minimum positive normalized float                |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`min_exp`    | DBL_MIN_EXP    | minimum integer e such that ``radix**(e-1)`` is  |\n   |                     |                | a normalized float                               |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`min_10_exp` | DBL_MIN_10_EXP | minimum integer e such that ``10**e`` is a       |\n   |                     |                | normalized float                                 |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`radix`      | FLT_RADIX      | radix of exponent representation                 |\n   +---------------------+----------------+--------------------------------------------------+\n   | :const:`rounds`     | FLT_ROUNDS     | constant representing rounding mode              |\n   |                     |                | used for arithmetic operations                   |\n   +---------------------+----------------+--------------------------------------------------+\n\n   The attribute :attr:`sys.float_info.dig` needs further explanation.  If\n   ``s`` is any string representing a decimal number with at most\n   :attr:`sys.float_info.dig` significant digits, then converting ``s`` to a\n   float and back again will recover a string representing the same decimal\n   value::\n\n      >>> import sys\n      >>> sys.float_info.dig\n      15\n      >>> s = '3.14159265358979'    # decimal string with 15 significant digits\n      >>> format(float(s), '.15g')  # convert to float and back -> same value\n      '3.14159265358979'\n\n   But for strings with more than :attr:`sys.float_info.dig` significant digits,\n   this isn't always true::\n\n      >>> s = '9876543211234567'    # 16 significant digits is too many!\n      >>> format(float(s), '.16g')  # conversion changes value\n      '9876543211234568'\n\n.. data:: float_repr_style\n\n   A string indicating how the :func:`repr` function behaves for\n   floats.  If the string has value ``'short'`` then for a finite\n   float ``x``, ``repr(x)`` aims to produce a short string with the\n   property that ``float(repr(x)) == x``.  This is the usual behaviour\n   in Python 3.1 and later.  Otherwise, ``float_repr_style`` has value\n   ``'legacy'`` and ``repr(x)`` behaves in the same way as it did in\n   versions of Python prior to 3.1.\n\n   .. versionadded:: 3.1\n\n\n.. function:: getcheckinterval()\n\n   Return the interpreter's \"check interval\"; see :func:`setcheckinterval`.\n\n\n.. function:: getdefaultencoding()\n\n   Return the name of the current default string encoding used by the Unicode\n   implementation.\n\n\n.. function:: getdlopenflags()\n\n   Return the current value of the flags that are used for :cfunc:`dlopen` calls.\n   The flag constants are defined in the :mod:`ctypes` and :mod:`DLFCN` modules.\n   Availability: Unix.\n\n\n.. function:: getfilesystemencoding()\n\n   Return the name of the encoding used to convert Unicode filenames into system\n   file names, or ``None`` if the system default encoding is used. The result value\n   depends on the operating system:\n\n   * On Mac OS X, the encoding is ``'utf-8'``.\n\n   * On Unix, the encoding is the user's preference according to the result of\n     nl_langinfo(CODESET), or ``None`` if the ``nl_langinfo(CODESET)``\n     failed.\n\n   * On Windows NT+, file names are Unicode natively, so no conversion is\n     performed. :func:`getfilesystemencoding` still returns ``'mbcs'``, as\n     this is the encoding that applications should use when they explicitly\n     want to convert Unicode strings to byte strings that are equivalent when\n     used as file names.\n\n   * On Windows 9x, the encoding is ``'mbcs'``.\n\n\n.. function:: getrefcount(object)\n\n   Return the reference count of the *object*.  The count returned is generally one\n   higher than you might expect, because it includes the (temporary) reference as\n   an argument to :func:`getrefcount`.\n\n\n.. function:: getrecursionlimit()\n\n   Return the current value of the recursion limit, the maximum depth of the Python\n   interpreter stack.  This limit prevents infinite recursion from causing an\n   overflow of the C stack and crashing Python.  It can be set by\n   :func:`setrecursionlimit`.\n\n\n.. function:: getsizeof(object[, default])\n\n   Return the size of an object in bytes. The object can be any type of\n   object. All built-in objects will return correct results, but this\n   does not have to hold true for third-party extensions as it is implementation\n   specific.\n\n   If given, *default* will be returned if the object does not provide means to\n   retrieve the size.  Otherwise a :exc:`TypeError` will be raised.\n\n   :func:`getsizeof` calls the object's ``__sizeof__`` method and adds an\n   additional garbage collector overhead if the object is managed by the garbage\n   collector.\n\n\n.. function:: _getframe([depth])\n\n   Return a frame object from the call stack.  If optional integer *depth* is\n   given, return the frame object that many calls below the top of the stack.  If\n   that is deeper than the call stack, :exc:`ValueError` is raised.  The default\n   for *depth* is zero, returning the frame at the top of the call stack.\n\n   .. impl-detail::\n\n      This function should be used for internal and specialized purposes only.\n      It is not guaranteed to exist in all implementations of Python.\n\n\n.. function:: getprofile()\n\n   .. index::\n      single: profile function\n      single: profiler\n\n   Get the profiler function as set by :func:`setprofile`.\n\n\n.. function:: gettrace()\n\n   .. index::\n      single: trace function\n      single: debugger\n\n   Get the trace function as set by :func:`settrace`.\n\n   .. impl-detail::\n\n      The :func:`gettrace` function is intended only for implementing debuggers,\n      profilers, coverage tools and the like.  Its behavior is part of the\n      implementation platform, rather than part of the language definition, and\n      thus may not be available in all Python implementations.\n\n\n.. function:: getwindowsversion()\n\n   Return a tuple containing five components, describing the Windows version\n   currently running.  The elements are *major*, *minor*, *build*, *platform*, and\n   *text*.  *text* contains a string while all other values are integers.\n\n   *platform* may be one of the following values:\n\n   +-----------------------------------------+-------------------------+\n   | Constant                                | Platform                |\n   +=========================================+=========================+\n   | :const:`0 (VER_PLATFORM_WIN32s)`        | Win32s on Windows 3.1   |\n   +-----------------------------------------+-------------------------+\n   | :const:`1 (VER_PLATFORM_WIN32_WINDOWS)` | Windows 95/98/ME        |\n   +-----------------------------------------+-------------------------+\n   | :const:`2 (VER_PLATFORM_WIN32_NT)`      | Windows NT/2000/XP/x64  |\n   +-----------------------------------------+-------------------------+\n   | :const:`3 (VER_PLATFORM_WIN32_CE)`      | Windows CE              |\n   +-----------------------------------------+-------------------------+\n\n   This function wraps the Win32 :cfunc:`GetVersionEx` function; see the Microsoft\n   documentation for more information about these fields.\n\n   Availability: Windows.\n\n\n.. data:: hexversion\n\n   The version number encoded as a single integer.  This is guaranteed to increase\n   with each version, including proper support for non-production releases.  For\n   example, to test that the Python interpreter is at least version 1.5.2, use::\n\n      if sys.hexversion >= 0x010502F0:\n          # use some advanced feature\n          ...\n      else:\n          # use an alternative implementation or warn the user\n          ...\n\n   This is called ``hexversion`` since it only really looks meaningful when viewed\n   as the result of passing it to the built-in :func:`hex` function.  The\n   struct sequence  :data:`sys.version_info` may be used for a more human-friendly\n   encoding of the same information.\n\n   The ``hexversion`` is a 32-bit number with the following layout:\n\n   +-------------------------+------------------------------------------------+\n   | Bits (big endian order) | Meaning                                        |\n   +=========================+================================================+\n   | :const:`1-8`            |  ``PY_MAJOR_VERSION``  (the ``2`` in           |\n   |                         |  ``2.1.0a3``)                                  |\n   +-------------------------+------------------------------------------------+\n   | :const:`9-16`           |  ``PY_MINOR_VERSION``  (the ``1`` in           |\n   |                         |  ``2.1.0a3``)                                  |\n   +-------------------------+------------------------------------------------+\n   | :const:`17-24`          |  ``PY_MICRO_VERSION``  (the ``0`` in           |\n   |                         |  ``2.1.0a3``)                                  |\n   +-------------------------+------------------------------------------------+\n   | :const:`25-28`          |  ``PY_RELEASE_LEVEL``  (``0xA`` for alpha,     |\n   |                         |  ``0xB`` for beta, ``0xC`` for release         |\n   |                         |  candidate and ``0xF`` for final)              |\n   +-------------------------+------------------------------------------------+\n   | :const:`29-32`          |  ``PY_RELEASE_SERIAL``  (the ``3`` in          |\n   |                         |  ``2.1.0a3``, zero for final releases)         |\n   +-------------------------+------------------------------------------------+\n\n   Thus ``2.1.0a3`` is hexversion ``0x020100a3``.\n\n.. data:: int_info\n\n   A struct sequence that holds information about Python's\n   internal representation of integers.  The attributes are read only.\n\n   +-------------------------+----------------------------------------------+\n   | Attribute               | Explanation                                  |\n   +=========================+==============================================+\n   | :const:`bits_per_digit` | number of bits held in each digit.  Python   |\n   |                         | integers are stored internally in base       |\n   |                         | ``2**int_info.bits_per_digit``               |\n   +-------------------------+----------------------------------------------+\n   | :const:`sizeof_digit`   | size in bytes of the C type used to          |\n   |                         | represent a digit                            |\n   +-------------------------+----------------------------------------------+\n\n   .. versionadded:: 3.1\n\n\n.. function:: intern(string)\n\n   Enter *string* in the table of \"interned\" strings and return the interned string\n   -- which is *string* itself or a copy. Interning strings is useful to gain a\n   little performance on dictionary lookup -- if the keys in a dictionary are\n   interned, and the lookup key is interned, the key comparisons (after hashing)\n   can be done by a pointer compare instead of a string compare.  Normally, the\n   names used in Python programs are automatically interned, and the dictionaries\n   used to hold module, class or instance attributes have interned keys.\n\n   Interned strings are not immortal; you must keep a reference to the return\n   value of :func:`intern` around to benefit from it.\n\n\n.. data:: last_type\n          last_value\n          last_traceback\n\n   These three variables are not always defined; they are set when an exception is\n   not handled and the interpreter prints an error message and a stack traceback.\n   Their intended use is to allow an interactive user to import a debugger module\n   and engage in post-mortem debugging without having to re-execute the command\n   that caused the error.  (Typical use is ``import pdb; pdb.pm()`` to enter the\n   post-mortem debugger; see :mod:`pdb` module for\n   more information.)\n\n   The meaning of the variables is the same as that of the return values from\n   :func:`exc_info` above.\n\n\n.. data:: maxsize\n\n   An integer giving the maximum value a variable of type :ctype:`Py_ssize_t` can\n   take.  It's usually ``2**31 - 1`` on a 32-bit platform and ``2**63 - 1`` on a\n   64-bit platform.\n\n\n.. data:: maxunicode\n\n   An integer giving the largest supported code point for a Unicode character.  The\n   value of this depends on the configuration option that specifies whether Unicode\n   characters are stored as UCS-2 or UCS-4.\n\n\n.. data:: meta_path\n\n    A list of :term:`finder` objects that have their :meth:`find_module`\n    methods called to see if one of the objects can find the module to be\n    imported. The :meth:`find_module` method is called at least with the\n    absolute name of the module being imported. If the module to be imported is\n    contained in package then the parent package's :attr:`__path__` attribute\n    is passed in as a second argument. The method returns :keyword:`None` if\n    the module cannot be found, else returns a :term:`loader`.\n\n    :data:`sys.meta_path` is searched before any implicit default finders or\n    :data:`sys.path`.\n\n    See :pep:`302` for the original specification.\n\n\n.. data:: modules\n\n   This is a dictionary that maps module names to modules which have already been\n   loaded.  This can be manipulated to force reloading of modules and other tricks.\n\n\n.. data:: path\n\n   .. index:: triple: module; search; path\n\n   A list of strings that specifies the search path for modules. Initialized from\n   the environment variable :envvar:`PYTHONPATH`, plus an installation-dependent\n   default.\n\n   As initialized upon program startup, the first item of this list, ``path[0]``,\n   is the directory containing the script that was used to invoke the Python\n   interpreter.  If the script directory is not available (e.g.  if the interpreter\n   is invoked interactively or if the script is read from standard input),\n   ``path[0]`` is the empty string, which directs Python to search modules in the\n   current directory first.  Notice that the script directory is inserted *before*\n   the entries inserted as a result of :envvar:`PYTHONPATH`.\n\n   A program is free to modify this list for its own purposes.\n\n\n   .. seealso::\n      Module :mod:`site` This describes how to use .pth files to extend\n      :data:`sys.path`.\n\n\n.. data:: path_hooks\n\n    A list of callables that take a path argument to try to create a\n    :term:`finder` for the path. If a finder can be created, it is to be\n    returned by the callable, else raise :exc:`ImportError`.\n\n    Originally specified in :pep:`302`.\n\n\n.. data:: path_importer_cache\n\n    A dictionary acting as a cache for :term:`finder` objects. The keys are\n    paths that have been passed to :data:`sys.path_hooks` and the values are\n    the finders that are found. If a path is a valid file system path but no\n    explicit finder is found on :data:`sys.path_hooks` then :keyword:`None` is\n    stored to represent the implicit default finder should be used. If the path\n    is not an existing path then :class:`imp.NullImporter` is set.\n\n    Originally specified in :pep:`302`.\n\n\n.. data:: platform\n\n   This string contains a platform identifier that can be used to append\n   platform-specific components to :data:`sys.path`, for instance.\n\n   For Unix systems, this is the lowercased OS name as returned by ``uname -s``\n   with the first part of the version as returned by ``uname -r`` appended,\n   e.g. ``'sunos5'`` or ``'linux2'``, *at the time when Python was built*.\n   For other systems, the values are:\n\n   ================ ===========================\n   System           :data:`platform` value\n   ================ ===========================\n   Windows          ``'win32'``\n   Windows/Cygwin   ``'cygwin'``\n   Mac OS X         ``'darwin'``\n   OS/2             ``'os2'``\n   OS/2 EMX         ``'os2emx'``\n   AtheOS           ``'atheos'``\n   ================ ===========================\n\n\n.. data:: prefix\n\n   A string giving the site-specific directory prefix where the platform\n   independent Python files are installed; by default, this is the string\n   ``'/usr/local'``.  This can be set at build time with the ``--prefix``\n   argument to the :program:`configure` script.  The main collection of Python\n   library modules is installed in the directory ``prefix + '/lib/pythonversion'``\n   while the platform independent header files (all except :file:`pyconfig.h`) are\n   stored in ``prefix + '/include/pythonversion'``, where *version* is equal to\n   ``version[:3]``.\n\n\n.. data:: ps1\n          ps2\n\n   .. index::\n      single: interpreter prompts\n      single: prompts, interpreter\n\n   Strings specifying the primary and secondary prompt of the interpreter.  These\n   are only defined if the interpreter is in interactive mode.  Their initial\n   values in this case are ``'>>> '`` and ``'... '``.  If a non-string object is\n   assigned to either variable, its :func:`str` is re-evaluated each time the\n   interpreter prepares to read a new interactive command; this can be used to\n   implement a dynamic prompt.\n\n\n.. data:: dont_write_bytecode\n\n   If this is true, Python won't try to write ``.pyc`` or ``.pyo`` files on the\n   import of source modules.  This value is initially set to ``True`` or ``False``\n   depending on the ``-B`` command line option and the ``PYTHONDONTWRITEBYTECODE``\n   environment variable, but you can set it yourself to control bytecode file\n   generation.\n\n\n.. function:: setcheckinterval(interval)\n\n   Set the interpreter's \"check interval\".  This integer value determines how often\n   the interpreter checks for periodic things such as thread switches and signal\n   handlers.  The default is ``100``, meaning the check is performed every 100\n   Python virtual instructions. Setting it to a larger value may increase\n   performance for programs using threads.  Setting it to a value ``<=`` 0 checks\n   every virtual instruction, maximizing responsiveness as well as overhead.\n\n\n.. function:: setdefaultencoding(name)\n\n   Set the current default string encoding used by the Unicode implementation.  If\n   *name* does not match any available encoding, :exc:`LookupError` is raised.\n   This function is only intended to be used by the :mod:`site` module\n   implementation and, where needed, by :mod:`sitecustomize`.  Once used by the\n   :mod:`site` module, it is removed from the :mod:`sys` module's namespace.\n\n   .. Note that :mod:`site` is not imported if the :option:`-S` option is passed\n      to the interpreter, in which case this function will remain available.\n\n\n.. function:: setdlopenflags(n)\n\n   Set the flags used by the interpreter for :cfunc:`dlopen` calls, such as when\n   the interpreter loads extension modules.  Among other things, this will enable a\n   lazy resolving of symbols when importing a module, if called as\n   ``sys.setdlopenflags(0)``.  To share symbols across extension modules, call as\n   ``sys.setdlopenflags(ctypes.RTLD_GLOBAL)``.  Symbolic names for the\n   flag modules can be either found in the :mod:`ctypes` module, or in the :mod:`DLFCN`\n   module. If :mod:`DLFCN` is not available, it can be generated from\n   :file:`/usr/include/dlfcn.h` using the :program:`h2py` script. Availability:\n   Unix.\n\n.. function:: setfilesystemencoding(enc)\n\n   Set the encoding used when converting Python strings to file names to *enc*.\n   By default, Python tries to determine the encoding it should use automatically\n   on Unix; on Windows, it avoids such conversion completely. This function can\n   be used when Python's determination of the encoding needs to be overwritten,\n   e.g. when not all file names on disk can be decoded using the encoding that\n   Python had chosen.\n\n.. function:: setprofile(profilefunc)\n\n   .. index::\n      single: profile function\n      single: profiler\n\n   Set the system's profile function, which allows you to implement a Python source\n   code profiler in Python.  See chapter :ref:`profile` for more information on the\n   Python profiler.  The system's profile function is called similarly to the\n   system's trace function (see :func:`settrace`), but it isn't called for each\n   executed line of code (only on call and return, but the return event is reported\n   even when an exception has been set).  The function is thread-specific, but\n   there is no way for the profiler to know about context switches between threads,\n   so it does not make sense to use this in the presence of multiple threads. Also,\n   its return value is not used, so it can simply return ``None``.\n\n\n.. function:: setrecursionlimit(limit)\n\n   Set the maximum depth of the Python interpreter stack to *limit*.  This limit\n   prevents infinite recursion from causing an overflow of the C stack and crashing\n   Python.\n\n   The highest possible limit is platform-dependent.  A user may need to set the\n   limit higher when she has a program that requires deep recursion and a platform\n   that supports a higher limit.  This should be done with care, because a too-high\n   limit can lead to a crash.\n\n\n.. function:: settrace(tracefunc)\n\n   .. index::\n      single: trace function\n      single: debugger\n\n   Set the system's trace function, which allows you to implement a Python\n   source code debugger in Python.  The function is thread-specific; for a\n   debugger to support multiple threads, it must be registered using\n   :func:`settrace` for each thread being debugged.\n\n   Trace functions should have three arguments: *frame*, *event*, and\n   *arg*. *frame* is the current stack frame.  *event* is a string: ``'call'``,\n   ``'line'``, ``'return'``, ``'exception'``, ``'c_call'``, ``'c_return'``, or\n   ``'c_exception'``. *arg* depends on the event type.\n\n   The trace function is invoked (with *event* set to ``'call'``) whenever a new\n   local scope is entered; it should return a reference to a local trace\n   function to be used that scope, or ``None`` if the scope shouldn't be traced.\n\n   The local trace function should return a reference to itself (or to another\n   function for further tracing in that scope), or ``None`` to turn off tracing\n   in that scope.\n\n   The events have the following meaning:\n\n   ``'call'``\n      A function is called (or some other code block entered).  The\n      global trace function is called; *arg* is ``None``; the return value\n      specifies the local trace function.\n\n   ``'line'``\n      The interpreter is about to execute a new line of code (sometimes multiple\n      line events on one line exist).  The local trace function is called; *arg*\n      is ``None``; the return value specifies the new local trace function.\n\n   ``'return'``\n      A function (or other code block) is about to return.  The local trace\n      function is called; *arg* is the value that will be returned, or ``None``\n      if the event is caused by an exception being raised.  The trace function's\n      return value is ignored.\n\n   ``'exception'``\n      An exception has occurred.  The local trace function is called; *arg* is a\n      tuple ``(exception, value, traceback)``; the return value specifies the\n      new local trace function.\n\n   ``'c_call'``\n      A C function is about to be called.  This may be an extension function or\n      a built-in.  *arg* is the C function object.\n\n   ``'c_return'``\n      A C function has returned. *arg* is the C function object.\n\n   ``'c_exception'``\n      A C function has raised an exception.  *arg* is the C function object.\n\n   Note that as an exception is propagated down the chain of callers, an\n   ``'exception'`` event is generated at each level.\n\n   For more information on code and frame objects, refer to :ref:`types`.\n\n   .. impl-detail::\n\n      The :func:`settrace` function is intended only for implementing debuggers,\n      profilers, coverage tools and the like.  Its behavior is part of the\n      implementation platform, rather than part of the language definition, and\n      thus may not be available in all Python implementations.\n\n\n.. function:: settscdump(on_flag)\n\n   Activate dumping of VM measurements using the Pentium timestamp counter, if\n   *on_flag* is true. Deactivate these dumps if *on_flag* is off. The function is\n   available only if Python was compiled with ``--with-tsc``. To understand\n   the output of this dump, read :file:`Python/ceval.c` in the Python sources.\n\n\n.. data:: stdin\n          stdout\n          stderr\n\n   :term:`File objects <file object>` corresponding to the interpreter's standard\n   input, output and error streams.  ``stdin`` is used for all interpreter input\n   except for scripts but including calls to :func:`input`.  ``stdout`` is used\n   for the output of :func:`print` and :term:`expression` statements and for the\n   prompts of :func:`input`. The interpreter's own prompts\n   and (almost all of) its error messages go to ``stderr``.  ``stdout`` and\n   ``stderr`` needn't be built-in file objects: any object is acceptable as long\n   as it has a :meth:`write` method that takes a string argument.  (Changing these\n   objects doesn't affect the standard I/O streams of processes executed by\n   :func:`os.popen`, :func:`os.system` or the :func:`exec\\*` family of functions in\n   the :mod:`os` module.)\n\n   The standard streams are in text mode by default.  To write or read binary\n   data to these, use the underlying binary buffer.  For example, to write bytes\n   to :data:`stdout`, use ``sys.stdout.buffer.write(b'abc')``.  Using\n   :meth:`io.TextIOBase.detach` streams can be made binary by default.  This\n   function sets :data:`stdin` and :data:`stdout` to binary::\n\n      def make_streams_binary():\n          sys.stdin = sys.stdin.detach()\n          sys.stdout = sys.stdout.detach()\n\n   Note that the streams can be replaced with objects (like\n   :class:`io.StringIO`) that do not support the\n   :attr:`~io.BufferedIOBase.buffer` attribute or the\n   :meth:`~io.BufferedIOBase.detach` method and can raise :exc:`AttributeError`\n   or :exc:`io.UnsupportedOperation`.\n\n\n.. data:: __stdin__\n          __stdout__\n          __stderr__\n\n   These objects contain the original values of ``stdin``, ``stderr`` and\n   ``stdout`` at the start of the program.  They are used during finalization,\n   and could be useful to print to the actual standard stream no matter if the\n   ``sys.std*`` object has been redirected.\n\n   It can also be used to restore the actual files to known working file objects\n   in case they have been overwritten with a broken object.  However, the\n   preferred way to do this is to explicitly save the previous stream before\n   replacing it, and restore the saved object.\n\n   .. note::\n       Under some conditions ``stdin``, ``stdout`` and ``stderr`` as well as the\n       original values ``__stdin__``, ``__stdout__`` and ``__stderr__`` can be\n       None. It is usually the case for Windows GUI apps that aren't connected\n       to a console and Python apps started with :program:`pythonw`.\n\n\n.. data:: tracebacklimit\n\n   When this variable is set to an integer value, it determines the maximum number\n   of levels of traceback information printed when an unhandled exception occurs.\n   The default is ``1000``.  When set to ``0`` or less, all traceback information\n   is suppressed and only the exception type and value are printed.\n\n\n.. data:: version\n\n   A string containing the version number of the Python interpreter plus additional\n   information on the build number and compiler used.  This string is displayed\n   when the interactive interpreter is started.  Do not extract version information\n   out of it, rather, use :data:`version_info` and the functions provided by the\n   :mod:`platform` module.\n\n\n.. data:: api_version\n\n   The C API version for this interpreter.  Programmers may find this useful when\n   debugging version conflicts between Python and extension modules.\n\n\n.. data:: version_info\n\n   A tuple containing the five components of the version number: *major*, *minor*,\n   *micro*, *releaselevel*, and *serial*.  All values except *releaselevel* are\n   integers; the release level is ``'alpha'``, ``'beta'``, ``'candidate'``, or\n   ``'final'``.  The ``version_info`` value corresponding to the Python version 2.0\n   is ``(2, 0, 0, 'final', 0)``.  The components can also be accessed by name,\n   so ``sys.version_info[0]`` is equivalent to ``sys.version_info.major``\n   and so on.\n\n   .. versionchanged:: 3.1\n      Added named component attributes.\n\n.. data:: warnoptions\n\n   This is an implementation detail of the warnings framework; do not modify this\n   value.  Refer to the :mod:`warnings` module for more information on the warnings\n   framework.\n\n\n.. data:: winver\n\n   The version number used to form registry keys on Windows platforms. This is\n   stored as string resource 1000 in the Python DLL.  The value is normally the\n   first three characters of :const:`version`.  It is provided in the :mod:`sys`\n   module for informational purposes; modifying this value has no effect on the\n   registry keys used by Python. Availability: Windows.\n\n.. rubric:: Citations\n\n.. [C99] ISO/IEC 9899:1999.  \"Programming languages -- C.\"  A public draft of this standard is available at http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf .\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Doc/library/ctypes.rst": ":mod:`ctypes` --- A foreign function library for Python\n=======================================================\n\n.. module:: ctypes\n   :synopsis: A foreign function library for Python.\n.. moduleauthor:: Thomas Heller <theller@python.net>\n\n\n:mod:`ctypes` is a foreign function library for Python.  It provides C compatible\ndata types, and allows calling functions in DLLs or shared libraries.  It can be\nused to wrap these libraries in pure Python.\n\n\n.. _ctypes-ctypes-tutorial:\n\nctypes tutorial\n---------------\n\nNote: The code samples in this tutorial use :mod:`doctest` to make sure that\nthey actually work.  Since some code samples behave differently under Linux,\nWindows, or Mac OS X, they contain doctest directives in comments.\n\nNote: Some code samples reference the ctypes :class:`c_int` type. This type is\nan alias for the :class:`c_long` type on 32-bit systems.  So, you should not be\nconfused if :class:`c_long` is printed if you would expect :class:`c_int` ---\nthey are actually the same type.\n\n\n.. _ctypes-loading-dynamic-link-libraries:\n\nLoading dynamic link libraries\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:mod:`ctypes` exports the *cdll*, and on Windows *windll* and *oledll*\nobjects, for loading dynamic link libraries.\n\nYou load libraries by accessing them as attributes of these objects. *cdll*\nloads libraries which export functions using the standard ``cdecl`` calling\nconvention, while *windll* libraries call functions using the ``stdcall``\ncalling convention. *oledll* also uses the ``stdcall`` calling convention, and\nassumes the functions return a Windows :ctype:`HRESULT` error code. The error\ncode is used to automatically raise a :class:`WindowsError` exception when the\nfunction call fails.\n\nHere are some examples for Windows. Note that ``msvcrt`` is the MS standard C\nlibrary containing most standard C functions, and uses the cdecl calling\nconvention::\n\n   >>> from ctypes import *\n   >>> print(windll.kernel32) # doctest: +WINDOWS\n   <WinDLL 'kernel32', handle ... at ...>\n   >>> print(cdll.msvcrt) # doctest: +WINDOWS\n   <CDLL 'msvcrt', handle ... at ...>\n   >>> libc = cdll.msvcrt # doctest: +WINDOWS\n   >>>\n\nWindows appends the usual ``.dll`` file suffix automatically.\n\nOn Linux, it is required to specify the filename *including* the extension to\nload a library, so attribute access can not be used to load libraries. Either the\n:meth:`LoadLibrary` method of the dll loaders should be used, or you should load\nthe library by creating an instance of CDLL by calling the constructor::\n\n   >>> cdll.LoadLibrary(\"libc.so.6\") # doctest: +LINUX\n   <CDLL 'libc.so.6', handle ... at ...>\n   >>> libc = CDLL(\"libc.so.6\")     # doctest: +LINUX\n   >>> libc                         # doctest: +LINUX\n   <CDLL 'libc.so.6', handle ... at ...>\n   >>>\n\n.. XXX Add section for Mac OS X.\n\n\n.. _ctypes-accessing-functions-from-loaded-dlls:\n\nAccessing functions from loaded dlls\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFunctions are accessed as attributes of dll objects::\n\n   >>> from ctypes import *\n   >>> libc.printf\n   <_FuncPtr object at 0x...>\n   >>> print(windll.kernel32.GetModuleHandleA) # doctest: +WINDOWS\n   <_FuncPtr object at 0x...>\n   >>> print(windll.kernel32.MyOwnFunction) # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n     File \"ctypes.py\", line 239, in __getattr__\n       func = _StdcallFuncPtr(name, self)\n   AttributeError: function 'MyOwnFunction' not found\n   >>>\n\nNote that win32 system dlls like ``kernel32`` and ``user32`` often export ANSI\nas well as UNICODE versions of a function. The UNICODE version is exported with\nan ``W`` appended to the name, while the ANSI version is exported with an ``A``\nappended to the name. The win32 ``GetModuleHandle`` function, which returns a\n*module handle* for a given module name, has the following C prototype, and a\nmacro is used to expose one of them as ``GetModuleHandle`` depending on whether\nUNICODE is defined or not::\n\n   /* ANSI version */\n   HMODULE GetModuleHandleA(LPCSTR lpModuleName);\n   /* UNICODE version */\n   HMODULE GetModuleHandleW(LPCWSTR lpModuleName);\n\n*windll* does not try to select one of them by magic, you must access the\nversion you need by specifying ``GetModuleHandleA`` or ``GetModuleHandleW``\nexplicitly, and then call it with bytes or string objects respectively.\n\nSometimes, dlls export functions with names which aren't valid Python\nidentifiers, like ``\"??2@YAPAXI@Z\"``. In this case you have to use\n:func:`getattr` to retrieve the function::\n\n   >>> getattr(cdll.msvcrt, \"??2@YAPAXI@Z\") # doctest: +WINDOWS\n   <_FuncPtr object at 0x...>\n   >>>\n\nOn Windows, some dlls export functions not by name but by ordinal. These\nfunctions can be accessed by indexing the dll object with the ordinal number::\n\n   >>> cdll.kernel32[1] # doctest: +WINDOWS\n   <_FuncPtr object at 0x...>\n   >>> cdll.kernel32[0] # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n     File \"ctypes.py\", line 310, in __getitem__\n       func = _StdcallFuncPtr(name, self)\n   AttributeError: function ordinal 0 not found\n   >>>\n\n\n.. _ctypes-calling-functions:\n\nCalling functions\n^^^^^^^^^^^^^^^^^\n\nYou can call these functions like any other Python callable. This example uses\nthe ``time()`` function, which returns system time in seconds since the Unix\nepoch, and the ``GetModuleHandleA()`` function, which returns a win32 module\nhandle.\n\nThis example calls both functions with a NULL pointer (``None`` should be used\nas the NULL pointer)::\n\n   >>> print(libc.time(None)) # doctest: +SKIP\n   1150640792\n   >>> print(hex(windll.kernel32.GetModuleHandleA(None))) # doctest: +WINDOWS\n   0x1d000000\n   >>>\n\n:mod:`ctypes` tries to protect you from calling functions with the wrong number\nof arguments or the wrong calling convention.  Unfortunately this only works on\nWindows.  It does this by examining the stack after the function returns, so\nalthough an error is raised the function *has* been called::\n\n   >>> windll.kernel32.GetModuleHandleA() # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   ValueError: Procedure probably called with not enough arguments (4 bytes missing)\n   >>> windll.kernel32.GetModuleHandleA(0, 0) # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   ValueError: Procedure probably called with too many arguments (4 bytes in excess)\n   >>>\n\nThe same exception is raised when you call an ``stdcall`` function with the\n``cdecl`` calling convention, or vice versa::\n\n   >>> cdll.kernel32.GetModuleHandleA(None) # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   ValueError: Procedure probably called with not enough arguments (4 bytes missing)\n   >>>\n\n   >>> windll.msvcrt.printf(b\"spam\") # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   ValueError: Procedure probably called with too many arguments (4 bytes in excess)\n   >>>\n\nTo find out the correct calling convention you have to look into the C header\nfile or the documentation for the function you want to call.\n\nOn Windows, :mod:`ctypes` uses win32 structured exception handling to prevent\ncrashes from general protection faults when functions are called with invalid\nargument values::\n\n   >>> windll.kernel32.GetModuleHandleA(32) # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   WindowsError: exception: access violation reading 0x00000020\n   >>>\n\nThere are, however, enough ways to crash Python with :mod:`ctypes`, so you\nshould be careful anyway.\n\n``None``, integers, bytes objects and (unicode) strings are the only native\nPython objects that can directly be used as parameters in these function calls.\n``None`` is passed as a C ``NULL`` pointer, bytes objects and strings are passed\nas pointer to the memory block that contains their data (:ctype:`char *` or\n:ctype:`wchar_t *`).  Python integers are passed as the platforms default C\n:ctype:`int` type, their value is masked to fit into the C type.\n\nBefore we move on calling functions with other parameter types, we have to learn\nmore about :mod:`ctypes` data types.\n\n\n.. _ctypes-fundamental-data-types:\n\nFundamental data types\n^^^^^^^^^^^^^^^^^^^^^^\n\n:mod:`ctypes` defines a number of primitive C compatible data types :\n\n+----------------------+----------------------------------------+----------------------------+\n| ctypes type          | C type                                 | Python type                |\n+======================+========================================+============================+\n| :class:`c_bool`      | :ctype:`_Bool`                         | bool (1)                   |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_char`      | :ctype:`char`                          | 1-character bytes object   |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_wchar`     | :ctype:`wchar_t`                       | 1-character string         |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_byte`      | :ctype:`char`                          | int                        |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_ubyte`     | :ctype:`unsigned char`                 | int                        |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_short`     | :ctype:`short`                         | int                        |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_ushort`    | :ctype:`unsigned short`                | int                        |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_int`       | :ctype:`int`                           | int                        |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_uint`      | :ctype:`unsigned int`                  | int                        |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_long`      | :ctype:`long`                          | int                        |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_ulong`     | :ctype:`unsigned long`                 | int                        |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_longlong`  | :ctype:`__int64` or :ctype:`long long` | int                        |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_ulonglong` | :ctype:`unsigned __int64` or           | int                        |\n|                      | :ctype:`unsigned long long`            |                            |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_float`     | :ctype:`float`                         | float                      |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_double`    | :ctype:`double`                        | float                      |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_longdouble`| :ctype:`long double`                   | float                      |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_char_p`    | :ctype:`char *` (NUL terminated)       | bytes object or ``None``   |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_wchar_p`   | :ctype:`wchar_t *` (NUL terminated)    | string or ``None``         |\n+----------------------+----------------------------------------+----------------------------+\n| :class:`c_void_p`    | :ctype:`void *`                        | int or ``None``            |\n+----------------------+----------------------------------------+----------------------------+\n\n(1)\n   The constructor accepts any object with a truth value.\n\nAll these types can be created by calling them with an optional initializer of\nthe correct type and value::\n\n   >>> c_int()\n   c_long(0)\n   >>> c_wchar_p(\"Hello, World\")\n   c_wchar_p('Hello, World')\n   >>> c_ushort(-3)\n   c_ushort(65533)\n   >>>\n\nSince these types are mutable, their value can also be changed afterwards::\n\n   >>> i = c_int(42)\n   >>> print(i)\n   c_long(42)\n   >>> print(i.value)\n   42\n   >>> i.value = -99\n   >>> print(i.value)\n   -99\n   >>>\n\nAssigning a new value to instances of the pointer types :class:`c_char_p`,\n:class:`c_wchar_p`, and :class:`c_void_p` changes the *memory location* they\npoint to, *not the contents* of the memory block (of course not, because Python\nbytes objects are immutable)::\n\n   >>> s = \"Hello, World\"\n   >>> c_s = c_wchar_p(s)\n   >>> print(c_s)\n   c_wchar_p('Hello, World')\n   >>> c_s.value = \"Hi, there\"\n   >>> print(c_s)\n   c_wchar_p('Hi, there')\n   >>> print(s)                 # first object is unchanged\n   Hello, World\n   >>>\n\nYou should be careful, however, not to pass them to functions expecting pointers\nto mutable memory. If you need mutable memory blocks, ctypes has a\n:func:`create_string_buffer` function which creates these in various ways.  The\ncurrent memory block contents can be accessed (or changed) with the ``raw``\nproperty; if you want to access it as NUL terminated string, use the ``value``\nproperty::\n\n   >>> from ctypes import *\n   >>> p = create_string_buffer(3)            # create a 3 byte buffer, initialized to NUL bytes\n   >>> print(sizeof(p), repr(p.raw))\n   3 b'\\x00\\x00\\x00'\n   >>> p = create_string_buffer(b\"Hello\")     # create a buffer containing a NUL terminated string\n   >>> print(sizeof(p), repr(p.raw))\n   6 b'Hello\\x00'\n   >>> print(repr(p.value))\n   b'Hello'\n   >>> p = create_string_buffer(b\"Hello\", 10) # create a 10 byte buffer\n   >>> print(sizeof(p), repr(p.raw))\n   10 b'Hello\\x00\\x00\\x00\\x00\\x00'\n   >>> p.value = b\"Hi\"\n   >>> print(sizeof(p), repr(p.raw))\n   10 b'Hi\\x00lo\\x00\\x00\\x00\\x00\\x00'\n   >>>\n\nThe :func:`create_string_buffer` function replaces the :func:`c_buffer` function\n(which is still available as an alias), as well as the :func:`c_string` function\nfrom earlier ctypes releases.  To create a mutable memory block containing\nunicode characters of the C type :ctype:`wchar_t` use the\n:func:`create_unicode_buffer` function.\n\n\n.. _ctypes-calling-functions-continued:\n\nCalling functions, continued\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNote that printf prints to the real standard output channel, *not* to\n:data:`sys.stdout`, so these examples will only work at the console prompt, not\nfrom within *IDLE* or *PythonWin*::\n\n   >>> printf = libc.printf\n   >>> printf(b\"Hello, %s\\n\", b\"World!\")\n   Hello, World!\n   14\n   >>> printf(b\"Hello, %S\\n\", \"World!\")\n   Hello, World!\n   14\n   >>> printf(b\"%d bottles of beer\\n\", 42)\n   42 bottles of beer\n   19\n   >>> printf(b\"%f bottles of beer\\n\", 42.5)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   ArgumentError: argument 2: exceptions.TypeError: Don't know how to convert parameter 2\n   >>>\n\nAs has been mentioned before, all Python types except integers, strings, and\nbytes objects have to be wrapped in their corresponding :mod:`ctypes` type, so\nthat they can be converted to the required C data type::\n\n   >>> printf(b\"An int %d, a double %f\\n\", 1234, c_double(3.14))\n   An int 1234, a double 3.140000\n   31\n   >>>\n\n\n.. _ctypes-calling-functions-with-own-custom-data-types:\n\nCalling functions with your own custom data types\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can also customize :mod:`ctypes` argument conversion to allow instances of\nyour own classes be used as function arguments.  :mod:`ctypes` looks for an\n:attr:`_as_parameter_` attribute and uses this as the function argument.  Of\ncourse, it must be one of integer, string, or bytes::\n\n   >>> class Bottles:\n   ...     def __init__(self, number):\n   ...         self._as_parameter_ = number\n   ...\n   >>> bottles = Bottles(42)\n   >>> printf(b\"%d bottles of beer\\n\", bottles)\n   42 bottles of beer\n   19\n   >>>\n\nIf you don't want to store the instance's data in the :attr:`_as_parameter_`\ninstance variable, you could define a :class:`property` which makes the\nattribute available on request.\n\n\n.. _ctypes-specifying-required-argument-types:\n\nSpecifying the required argument types (function prototypes)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is possible to specify the required argument types of functions exported from\nDLLs by setting the :attr:`argtypes` attribute.\n\n:attr:`argtypes` must be a sequence of C data types (the ``printf`` function is\nprobably not a good example here, because it takes a variable number and\ndifferent types of parameters depending on the format string, on the other hand\nthis is quite handy to experiment with this feature)::\n\n   >>> printf.argtypes = [c_char_p, c_char_p, c_int, c_double]\n   >>> printf(b\"String '%s', Int %d, Double %f\\n\", b\"Hi\", 10, 2.2)\n   String 'Hi', Int 10, Double 2.200000\n   37\n   >>>\n\nSpecifying a format protects against incompatible argument types (just as a\nprototype for a C function), and tries to convert the arguments to valid types::\n\n   >>> printf(b\"%d %d %d\", 1, 2, 3)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   ArgumentError: argument 2: exceptions.TypeError: wrong type\n   >>> printf(b\"%s %d %f\\n\", b\"X\", 2, 3)\n   X 2 3.000000\n   13\n   >>>\n\nIf you have defined your own classes which you pass to function calls, you have\nto implement a :meth:`from_param` class method for them to be able to use them\nin the :attr:`argtypes` sequence. The :meth:`from_param` class method receives\nthe Python object passed to the function call, it should do a typecheck or\nwhatever is needed to make sure this object is acceptable, and then return the\nobject itself, its :attr:`_as_parameter_` attribute, or whatever you want to\npass as the C function argument in this case. Again, the result should be an\ninteger, string, bytes, a :mod:`ctypes` instance, or an object with an\n:attr:`_as_parameter_` attribute.\n\n\n.. _ctypes-return-types:\n\nReturn types\n^^^^^^^^^^^^\n\nBy default functions are assumed to return the C :ctype:`int` type.  Other\nreturn types can be specified by setting the :attr:`restype` attribute of the\nfunction object.\n\nHere is a more advanced example, it uses the ``strchr`` function, which expects\na string pointer and a char, and returns a pointer to a string::\n\n   >>> strchr = libc.strchr\n   >>> strchr(b\"abcdef\", ord(\"d\")) # doctest: +SKIP\n   8059983\n   >>> strchr.restype = c_char_p   # c_char_p is a pointer to a string\n   >>> strchr(b\"abcdef\", ord(\"d\"))\n   b'def'\n   >>> print(strchr(b\"abcdef\", ord(\"x\")))\n   None\n   >>>\n\nIf you want to avoid the ``ord(\"x\")`` calls above, you can set the\n:attr:`argtypes` attribute, and the second argument will be converted from a\nsingle character Python bytes object into a C char::\n\n   >>> strchr.restype = c_char_p\n   >>> strchr.argtypes = [c_char_p, c_char]\n   >>> strchr(b\"abcdef\", b\"d\")\n   'def'\n   >>> strchr(b\"abcdef\", b\"def\")\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   ArgumentError: argument 2: exceptions.TypeError: one character string expected\n   >>> print(strchr(b\"abcdef\", b\"x\"))\n   None\n   >>> strchr(b\"abcdef\", b\"d\")\n   'def'\n   >>>\n\nYou can also use a callable Python object (a function or a class for example) as\nthe :attr:`restype` attribute, if the foreign function returns an integer.  The\ncallable will be called with the *integer* the C function returns, and the\nresult of this call will be used as the result of your function call. This is\nuseful to check for error return values and automatically raise an exception::\n\n   >>> GetModuleHandle = windll.kernel32.GetModuleHandleA # doctest: +WINDOWS\n   >>> def ValidHandle(value):\n   ...     if value == 0:\n   ...         raise WinError()\n   ...     return value\n   ...\n   >>>\n   >>> GetModuleHandle.restype = ValidHandle # doctest: +WINDOWS\n   >>> GetModuleHandle(None) # doctest: +WINDOWS\n   486539264\n   >>> GetModuleHandle(\"something silly\") # doctest: +WINDOWS\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n     File \"<stdin>\", line 3, in ValidHandle\n   WindowsError: [Errno 126] The specified module could not be found.\n   >>>\n\n``WinError`` is a function which will call Windows ``FormatMessage()`` api to\nget the string representation of an error code, and *returns* an exception.\n``WinError`` takes an optional error code parameter, if no one is used, it calls\n:func:`GetLastError` to retrieve it.\n\nPlease note that a much more powerful error checking mechanism is available\nthrough the :attr:`errcheck` attribute; see the reference manual for details.\n\n\n.. _ctypes-passing-pointers:\n\nPassing pointers (or: passing parameters by reference)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSometimes a C api function expects a *pointer* to a data type as parameter,\nprobably to write into the corresponding location, or if the data is too large\nto be passed by value. This is also known as *passing parameters by reference*.\n\n:mod:`ctypes` exports the :func:`byref` function which is used to pass parameters\nby reference.  The same effect can be achieved with the :func:`pointer` function,\nalthough :func:`pointer` does a lot more work since it constructs a real pointer\nobject, so it is faster to use :func:`byref` if you don't need the pointer\nobject in Python itself::\n\n   >>> i = c_int()\n   >>> f = c_float()\n   >>> s = create_string_buffer(b'\\000' * 32)\n   >>> print(i.value, f.value, repr(s.value))\n   0 0.0 b''\n   >>> libc.sscanf(b\"1 3.14 Hello\", b\"%d %f %s\",\n   ...             byref(i), byref(f), s)\n   3\n   >>> print(i.value, f.value, repr(s.value))\n   1 3.1400001049 b'Hello'\n   >>>\n\n\n.. _ctypes-structures-unions:\n\nStructures and unions\n^^^^^^^^^^^^^^^^^^^^^\n\nStructures and unions must derive from the :class:`Structure` and :class:`Union`\nbase classes which are defined in the :mod:`ctypes` module. Each subclass must\ndefine a :attr:`_fields_` attribute.  :attr:`_fields_` must be a list of\n*2-tuples*, containing a *field name* and a *field type*.\n\nThe field type must be a :mod:`ctypes` type like :class:`c_int`, or any other\nderived :mod:`ctypes` type: structure, union, array, pointer.\n\nHere is a simple example of a POINT structure, which contains two integers named\n*x* and *y*, and also shows how to initialize a structure in the constructor::\n\n   >>> from ctypes import *\n   >>> class POINT(Structure):\n   ...     _fields_ = [(\"x\", c_int),\n   ...                 (\"y\", c_int)]\n   ...\n   >>> point = POINT(10, 20)\n   >>> print(point.x, point.y)\n   10 20\n   >>> point = POINT(y=5)\n   >>> print(point.x, point.y)\n   0 5\n   >>> POINT(1, 2, 3)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   ValueError: too many initializers\n   >>>\n\nYou can, however, build much more complicated structures. Structures can itself\ncontain other structures by using a structure as a field type.\n\nHere is a RECT structure which contains two POINTs named *upperleft* and\n*lowerright*::\n\n   >>> class RECT(Structure):\n   ...     _fields_ = [(\"upperleft\", POINT),\n   ...                 (\"lowerright\", POINT)]\n   ...\n   >>> rc = RECT(point)\n   >>> print(rc.upperleft.x, rc.upperleft.y)\n   0 5\n   >>> print(rc.lowerright.x, rc.lowerright.y)\n   0 0\n   >>>\n\nNested structures can also be initialized in the constructor in several ways::\n\n   >>> r = RECT(POINT(1, 2), POINT(3, 4))\n   >>> r = RECT((1, 2), (3, 4))\n\nField :term:`descriptor`\\s can be retrieved from the *class*, they are useful\nfor debugging because they can provide useful information::\n\n   >>> print(POINT.x)\n   <Field type=c_long, ofs=0, size=4>\n   >>> print(POINT.y)\n   <Field type=c_long, ofs=4, size=4>\n   >>>\n\n\n.. _ctypes-structureunion-alignment-byte-order:\n\nStructure/union alignment and byte order\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default, Structure and Union fields are aligned in the same way the C\ncompiler does it. It is possible to override this behavior be specifying a\n:attr:`_pack_` class attribute in the subclass definition. This must be set to a\npositive integer and specifies the maximum alignment for the fields. This is\nwhat ``#pragma pack(n)`` also does in MSVC.\n\n:mod:`ctypes` uses the native byte order for Structures and Unions.  To build\nstructures with non-native byte order, you can use one of the\n:class:`BigEndianStructure`, :class:`LittleEndianStructure`,\n:class:`BigEndianUnion`, and :class:`LittleEndianUnion` base classes.  These\nclasses cannot contain pointer fields.\n\n\n.. _ctypes-bit-fields-in-structures-unions:\n\nBit fields in structures and unions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is possible to create structures and unions containing bit fields. Bit fields\nare only possible for integer fields, the bit width is specified as the third\nitem in the :attr:`_fields_` tuples::\n\n   >>> class Int(Structure):\n   ...     _fields_ = [(\"first_16\", c_int, 16),\n   ...                 (\"second_16\", c_int, 16)]\n   ...\n   >>> print(Int.first_16)\n   <Field type=c_long, ofs=0:0, bits=16>\n   >>> print(Int.second_16)\n   <Field type=c_long, ofs=0:16, bits=16>\n   >>>\n\n\n.. _ctypes-arrays:\n\nArrays\n^^^^^^\n\nArrays are sequences, containing a fixed number of instances of the same type.\n\nThe recommended way to create array types is by multiplying a data type with a\npositive integer::\n\n   TenPointsArrayType = POINT * 10\n\nHere is an example of an somewhat artificial data type, a structure containing 4\nPOINTs among other stuff::\n\n   >>> from ctypes import *\n   >>> class POINT(Structure):\n   ...    _fields_ = (\"x\", c_int), (\"y\", c_int)\n   ...\n   >>> class MyStruct(Structure):\n   ...    _fields_ = [(\"a\", c_int),\n   ...                (\"b\", c_float),\n   ...                (\"point_array\", POINT * 4)]\n   >>>\n   >>> print(len(MyStruct().point_array))\n   4\n   >>>\n\nInstances are created in the usual way, by calling the class::\n\n   arr = TenPointsArrayType()\n   for pt in arr:\n       print(pt.x, pt.y)\n\nThe above code print a series of ``0 0`` lines, because the array contents is\ninitialized to zeros.\n\nInitializers of the correct type can also be specified::\n\n   >>> from ctypes import *\n   >>> TenIntegers = c_int * 10\n   >>> ii = TenIntegers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n   >>> print(ii)\n   <c_long_Array_10 object at 0x...>\n   >>> for i in ii: print(i, end=\" \")\n   ...\n   1 2 3 4 5 6 7 8 9 10\n   >>>\n\n\n.. _ctypes-pointers:\n\nPointers\n^^^^^^^^\n\nPointer instances are created by calling the :func:`pointer` function on a\n:mod:`ctypes` type::\n\n   >>> from ctypes import *\n   >>> i = c_int(42)\n   >>> pi = pointer(i)\n   >>>\n\nPointer instances have a :attr:`contents` attribute which returns the object to\nwhich the pointer points, the ``i`` object above::\n\n   >>> pi.contents\n   c_long(42)\n   >>>\n\nNote that :mod:`ctypes` does not have OOR (original object return), it constructs a\nnew, equivalent object each time you retrieve an attribute::\n\n   >>> pi.contents is i\n   False\n   >>> pi.contents is pi.contents\n   False\n   >>>\n\nAssigning another :class:`c_int` instance to the pointer's contents attribute\nwould cause the pointer to point to the memory location where this is stored::\n\n   >>> i = c_int(99)\n   >>> pi.contents = i\n   >>> pi.contents\n   c_long(99)\n   >>>\n\n.. XXX Document dereferencing pointers, and that it is preferred over the\n   .contents attribute.\n\nPointer instances can also be indexed with integers::\n\n   >>> pi[0]\n   99\n   >>>\n\nAssigning to an integer index changes the pointed to value::\n\n   >>> print(i)\n   c_long(99)\n   >>> pi[0] = 22\n   >>> print(i)\n   c_long(22)\n   >>>\n\nIt is also possible to use indexes different from 0, but you must know what\nyou're doing, just as in C: You can access or change arbitrary memory locations.\nGenerally you only use this feature if you receive a pointer from a C function,\nand you *know* that the pointer actually points to an array instead of a single\nitem.\n\nBehind the scenes, the :func:`pointer` function does more than simply create\npointer instances, it has to create pointer *types* first. This is done with the\n:func:`POINTER` function, which accepts any :mod:`ctypes` type, and returns a\nnew type::\n\n   >>> PI = POINTER(c_int)\n   >>> PI\n   <class 'ctypes.LP_c_long'>\n   >>> PI(42)\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   TypeError: expected c_long instead of int\n   >>> PI(c_int(42))\n   <ctypes.LP_c_long object at 0x...>\n   >>>\n\nCalling the pointer type without an argument creates a ``NULL`` pointer.\n``NULL`` pointers have a ``False`` boolean value::\n\n   >>> null_ptr = POINTER(c_int)()\n   >>> print(bool(null_ptr))\n   False\n   >>>\n\n:mod:`ctypes` checks for ``NULL`` when dereferencing pointers (but dereferencing\ninvalid non-\\ ``NULL`` pointers would crash Python)::\n\n   >>> null_ptr[0]\n   Traceback (most recent call last):\n       ....\n   ValueError: NULL pointer access\n   >>>\n\n   >>> null_ptr[0] = 1234\n   Traceback (most recent call last):\n       ....\n   ValueError: NULL pointer access\n   >>>\n\n\n.. _ctypes-type-conversions:\n\nType conversions\n^^^^^^^^^^^^^^^^\n\nUsually, ctypes does strict type checking.  This means, if you have\n``POINTER(c_int)`` in the :attr:`argtypes` list of a function or as the type of\na member field in a structure definition, only instances of exactly the same\ntype are accepted.  There are some exceptions to this rule, where ctypes accepts\nother objects.  For example, you can pass compatible array instances instead of\npointer types.  So, for ``POINTER(c_int)``, ctypes accepts an array of c_int::\n\n   >>> class Bar(Structure):\n   ...     _fields_ = [(\"count\", c_int), (\"values\", POINTER(c_int))]\n   ...\n   >>> bar = Bar()\n   >>> bar.values = (c_int * 3)(1, 2, 3)\n   >>> bar.count = 3\n   >>> for i in range(bar.count):\n   ...     print(bar.values[i])\n   ...\n   1\n   2\n   3\n   >>>\n\nTo set a POINTER type field to ``NULL``, you can assign ``None``::\n\n   >>> bar.values = None\n   >>>\n\n.. XXX list other conversions...\n\nSometimes you have instances of incompatible types.  In C, you can cast one type\ninto another type.  :mod:`ctypes` provides a :func:`cast` function which can be\nused in the same way.  The ``Bar`` structure defined above accepts\n``POINTER(c_int)`` pointers or :class:`c_int` arrays for its ``values`` field,\nbut not instances of other types::\n\n   >>> bar.values = (c_byte * 4)()\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   TypeError: incompatible types, c_byte_Array_4 instance instead of LP_c_long instance\n   >>>\n\nFor these cases, the :func:`cast` function is handy.\n\nThe :func:`cast` function can be used to cast a ctypes instance into a pointer\nto a different ctypes data type.  :func:`cast` takes two parameters, a ctypes\nobject that is or can be converted to a pointer of some kind, and a ctypes\npointer type.  It returns an instance of the second argument, which references\nthe same memory block as the first argument::\n\n   >>> a = (c_byte * 4)()\n   >>> cast(a, POINTER(c_int))\n   <ctypes.LP_c_long object at ...>\n   >>>\n\nSo, :func:`cast` can be used to assign to the ``values`` field of ``Bar`` the\nstructure::\n\n   >>> bar = Bar()\n   >>> bar.values = cast((c_byte * 4)(), POINTER(c_int))\n   >>> print(bar.values[0])\n   0\n   >>>\n\n\n.. _ctypes-incomplete-types:\n\nIncomplete Types\n^^^^^^^^^^^^^^^^\n\n*Incomplete Types* are structures, unions or arrays whose members are not yet\nspecified. In C, they are specified by forward declarations, which are defined\nlater::\n\n   struct cell; /* forward declaration */\n\n   struct {\n       char *name;\n       struct cell *next;\n   } cell;\n\nThe straightforward translation into ctypes code would be this, but it does not\nwork::\n\n   >>> class cell(Structure):\n   ...     _fields_ = [(\"name\", c_char_p),\n   ...                 (\"next\", POINTER(cell))]\n   ...\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n     File \"<stdin>\", line 2, in cell\n   NameError: name 'cell' is not defined\n   >>>\n\nbecause the new ``class cell`` is not available in the class statement itself.\nIn :mod:`ctypes`, we can define the ``cell`` class and set the :attr:`_fields_`\nattribute later, after the class statement::\n\n   >>> from ctypes import *\n   >>> class cell(Structure):\n   ...     pass\n   ...\n   >>> cell._fields_ = [(\"name\", c_char_p),\n   ...                  (\"next\", POINTER(cell))]\n   >>>\n\nLets try it. We create two instances of ``cell``, and let them point to each\nother, and finally follow the pointer chain a few times::\n\n   >>> c1 = cell()\n   >>> c1.name = \"foo\"\n   >>> c2 = cell()\n   >>> c2.name = \"bar\"\n   >>> c1.next = pointer(c2)\n   >>> c2.next = pointer(c1)\n   >>> p = c1\n   >>> for i in range(8):\n   ...     print(p.name, end=\" \")\n   ...     p = p.next[0]\n   ...\n   foo bar foo bar foo bar foo bar\n   >>>\n\n\n.. _ctypes-callback-functions:\n\nCallback functions\n^^^^^^^^^^^^^^^^^^\n\n:mod:`ctypes` allows to create C callable function pointers from Python callables.\nThese are sometimes called *callback functions*.\n\nFirst, you must create a class for the callback function, the class knows the\ncalling convention, the return type, and the number and types of arguments this\nfunction will receive.\n\nThe CFUNCTYPE factory function creates types for callback functions using the\nnormal cdecl calling convention, and, on Windows, the WINFUNCTYPE factory\nfunction creates types for callback functions using the stdcall calling\nconvention.\n\nBoth of these factory functions are called with the result type as first\nargument, and the callback functions expected argument types as the remaining\narguments.\n\nI will present an example here which uses the standard C library's\n:cfunc:`qsort` function, this is used to sort items with the help of a callback\nfunction.  :cfunc:`qsort` will be used to sort an array of integers::\n\n   >>> IntArray5 = c_int * 5\n   >>> ia = IntArray5(5, 1, 7, 33, 99)\n   >>> qsort = libc.qsort\n   >>> qsort.restype = None\n   >>>\n\n:func:`qsort` must be called with a pointer to the data to sort, the number of\nitems in the data array, the size of one item, and a pointer to the comparison\nfunction, the callback. The callback will then be called with two pointers to\nitems, and it must return a negative integer if the first item is smaller than\nthe second, a zero if they are equal, and a positive integer else.\n\nSo our callback function receives pointers to integers, and must return an\ninteger. First we create the ``type`` for the callback function::\n\n   >>> CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))\n   >>>\n\nFor the first implementation of the callback function, we simply print the\narguments we get, and return 0 (incremental development ;-)::\n\n   >>> def py_cmp_func(a, b):\n   ...     print(\"py_cmp_func\", a, b)\n   ...     return 0\n   ...\n   >>>\n\nCreate the C callable callback::\n\n   >>> cmp_func = CMPFUNC(py_cmp_func)\n   >>>\n\nAnd we're ready to go::\n\n   >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...>\n   >>>\n\nWe know how to access the contents of a pointer, so lets redefine our callback::\n\n   >>> def py_cmp_func(a, b):\n   ...     print(\"py_cmp_func\", a[0], b[0])\n   ...     return 0\n   ...\n   >>> cmp_func = CMPFUNC(py_cmp_func)\n   >>>\n\nHere is what we get on Windows::\n\n   >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS\n   py_cmp_func 7 1\n   py_cmp_func 33 1\n   py_cmp_func 99 1\n   py_cmp_func 5 1\n   py_cmp_func 7 5\n   py_cmp_func 33 5\n   py_cmp_func 99 5\n   py_cmp_func 7 99\n   py_cmp_func 33 99\n   py_cmp_func 7 33\n   >>>\n\nIt is funny to see that on linux the sort function seems to work much more\nefficiently, it is doing less comparisons::\n\n   >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +LINUX\n   py_cmp_func 5 1\n   py_cmp_func 33 99\n   py_cmp_func 7 33\n   py_cmp_func 5 7\n   py_cmp_func 1 7\n   >>>\n\nAh, we're nearly done! The last step is to actually compare the two items and\nreturn a useful result::\n\n   >>> def py_cmp_func(a, b):\n   ...     print(\"py_cmp_func\", a[0], b[0])\n   ...     return a[0] - b[0]\n   ...\n   >>>\n\nFinal run on Windows::\n\n   >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +WINDOWS\n   py_cmp_func 33 7\n   py_cmp_func 99 33\n   py_cmp_func 5 99\n   py_cmp_func 1 99\n   py_cmp_func 33 7\n   py_cmp_func 1 33\n   py_cmp_func 5 33\n   py_cmp_func 5 7\n   py_cmp_func 1 7\n   py_cmp_func 5 1\n   >>>\n\nand on Linux::\n\n   >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +LINUX\n   py_cmp_func 5 1\n   py_cmp_func 33 99\n   py_cmp_func 7 33\n   py_cmp_func 1 7\n   py_cmp_func 5 7\n   >>>\n\nIt is quite interesting to see that the Windows :func:`qsort` function needs\nmore comparisons than the linux version!\n\nAs we can easily check, our array is sorted now::\n\n   >>> for i in ia: print(i, end=\" \")\n   ...\n   1 5 7 33 99\n   >>>\n\n**Important note for callback functions:**\n\nMake sure you keep references to CFUNCTYPE objects as long as they are used from\nC code. :mod:`ctypes` doesn't, and if you don't, they may be garbage collected,\ncrashing your program when a callback is made.\n\n\n.. _ctypes-accessing-values-exported-from-dlls:\n\nAccessing values exported from dlls\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSome shared libraries not only export functions, they also export variables. An\nexample in the Python library itself is the :cdata:`Py_OptimizeFlag`, an integer\nset to 0, 1, or 2, depending on the :option:`-O` or :option:`-OO` flag given on\nstartup.\n\n:mod:`ctypes` can access values like this with the :meth:`in_dll` class methods of\nthe type.  *pythonapi* is a predefined symbol giving access to the Python C\napi::\n\n   >>> opt_flag = c_int.in_dll(pythonapi, \"Py_OptimizeFlag\")\n   >>> print(opt_flag)\n   c_long(0)\n   >>>\n\nIf the interpreter would have been started with :option:`-O`, the sample would\nhave printed ``c_long(1)``, or ``c_long(2)`` if :option:`-OO` would have been\nspecified.\n\nAn extended example which also demonstrates the use of pointers accesses the\n:cdata:`PyImport_FrozenModules` pointer exported by Python.\n\nQuoting the docs for that value:\n\n   This pointer is initialized to point to an array of :ctype:`struct _frozen`\n   records, terminated by one whose members are all *NULL* or zero.  When a frozen\n   module is imported, it is searched in this table.  Third-party code could play\n   tricks with this to provide a dynamically created collection of frozen modules.\n\nSo manipulating this pointer could even prove useful. To restrict the example\nsize, we show only how this table can be read with :mod:`ctypes`::\n\n   >>> from ctypes import *\n   >>>\n   >>> class struct_frozen(Structure):\n   ...     _fields_ = [(\"name\", c_char_p),\n   ...                 (\"code\", POINTER(c_ubyte)),\n   ...                 (\"size\", c_int)]\n   ...\n   >>>\n\nWe have defined the :ctype:`struct _frozen` data type, so we can get the pointer\nto the table::\n\n   >>> FrozenTable = POINTER(struct_frozen)\n   >>> table = FrozenTable.in_dll(pythonapi, \"PyImport_FrozenModules\")\n   >>>\n\nSince ``table`` is a ``pointer`` to the array of ``struct_frozen`` records, we\ncan iterate over it, but we just have to make sure that our loop terminates,\nbecause pointers have no size. Sooner or later it would probably crash with an\naccess violation or whatever, so it's better to break out of the loop when we\nhit the NULL entry::\n\n   >>> for item in table:\n   ...    print(item.name, item.size)\n   ...    if item.name is None:\n   ...        break\n   ...\n   __hello__ 104\n   __phello__ -104\n   __phello__.spam 104\n   None 0\n   >>>\n\nThe fact that standard Python has a frozen module and a frozen package\n(indicated by the negative size member) is not well known, it is only used for\ntesting. Try it out with ``import __hello__`` for example.\n\n\n.. _ctypes-surprises:\n\nSurprises\n^^^^^^^^^\n\nThere are some edges in :mod:`ctypes` where you may be expect something else than\nwhat actually happens.\n\nConsider the following example::\n\n   >>> from ctypes import *\n   >>> class POINT(Structure):\n   ...     _fields_ = (\"x\", c_int), (\"y\", c_int)\n   ...\n   >>> class RECT(Structure):\n   ...     _fields_ = (\"a\", POINT), (\"b\", POINT)\n   ...\n   >>> p1 = POINT(1, 2)\n   >>> p2 = POINT(3, 4)\n   >>> rc = RECT(p1, p2)\n   >>> print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)\n   1 2 3 4\n   >>> # now swap the two points\n   >>> rc.a, rc.b = rc.b, rc.a\n   >>> print(rc.a.x, rc.a.y, rc.b.x, rc.b.y)\n   3 4 3 4\n   >>>\n\nHm. We certainly expected the last statement to print ``3 4 1 2``. What\nhappened? Here are the steps of the ``rc.a, rc.b = rc.b, rc.a`` line above::\n\n   >>> temp0, temp1 = rc.b, rc.a\n   >>> rc.a = temp0\n   >>> rc.b = temp1\n   >>>\n\nNote that ``temp0`` and ``temp1`` are objects still using the internal buffer of\nthe ``rc`` object above. So executing ``rc.a = temp0`` copies the buffer\ncontents of ``temp0`` into ``rc`` 's buffer.  This, in turn, changes the\ncontents of ``temp1``. So, the last assignment ``rc.b = temp1``, doesn't have\nthe expected effect.\n\nKeep in mind that retrieving sub-objects from Structure, Unions, and Arrays\ndoesn't *copy* the sub-object, instead it retrieves a wrapper object accessing\nthe root-object's underlying buffer.\n\nAnother example that may behave different from what one would expect is this::\n\n   >>> s = c_char_p()\n   >>> s.value = \"abc def ghi\"\n   >>> s.value\n   'abc def ghi'\n   >>> s.value is s.value\n   False\n   >>>\n\nWhy is it printing ``False``?  ctypes instances are objects containing a memory\nblock plus some :term:`descriptor`\\s accessing the contents of the memory.\nStoring a Python object in the memory block does not store the object itself,\ninstead the ``contents`` of the object is stored.  Accessing the contents again\nconstructs a new Python object each time!\n\n\n.. _ctypes-variable-sized-data-types:\n\nVariable-sized data types\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:mod:`ctypes` provides some support for variable-sized arrays and structures.\n\nThe :func:`resize` function can be used to resize the memory buffer of an\nexisting ctypes object.  The function takes the object as first argument, and\nthe requested size in bytes as the second argument.  The memory block cannot be\nmade smaller than the natural memory block specified by the objects type, a\n:exc:`ValueError` is raised if this is tried::\n\n   >>> short_array = (c_short * 4)()\n   >>> print(sizeof(short_array))\n   8\n   >>> resize(short_array, 4)\n   Traceback (most recent call last):\n       ...\n   ValueError: minimum size is 8\n   >>> resize(short_array, 32)\n   >>> sizeof(short_array)\n   32\n   >>> sizeof(type(short_array))\n   8\n   >>>\n\nThis is nice and fine, but how would one access the additional elements\ncontained in this array?  Since the type still only knows about 4 elements, we\nget errors accessing other elements::\n\n   >>> short_array[:]\n   [0, 0, 0, 0]\n   >>> short_array[7]\n   Traceback (most recent call last):\n       ...\n   IndexError: invalid index\n   >>>\n\nAnother way to use variable-sized data types with :mod:`ctypes` is to use the\ndynamic nature of Python, and (re-)define the data type after the required size\nis already known, on a case by case basis.\n\n\n.. _ctypes-ctypes-reference:\n\nctypes reference\n----------------\n\n\n.. _ctypes-finding-shared-libraries:\n\nFinding shared libraries\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen programming in a compiled language, shared libraries are accessed when\ncompiling/linking a program, and when the program is run.\n\nThe purpose of the :func:`find_library` function is to locate a library in a way\nsimilar to what the compiler does (on platforms with several versions of a\nshared library the most recent should be loaded), while the ctypes library\nloaders act like when a program is run, and call the runtime loader directly.\n\nThe :mod:`ctypes.util` module provides a function which can help to determine\nthe library to load.\n\n\n.. data:: find_library(name)\n   :module: ctypes.util\n   :noindex:\n\n   Try to find a library and return a pathname.  *name* is the library name without\n   any prefix like *lib*, suffix like ``.so``, ``.dylib`` or version number (this\n   is the form used for the posix linker option :option:`-l`).  If no library can\n   be found, returns ``None``.\n\nThe exact functionality is system dependent.\n\nOn Linux, :func:`find_library` tries to run external programs\n(``/sbin/ldconfig``, ``gcc``, and ``objdump``) to find the library file.  It\nreturns the filename of the library file.  Here are some examples::\n\n   >>> from ctypes.util import find_library\n   >>> find_library(\"m\")\n   'libm.so.6'\n   >>> find_library(\"c\")\n   'libc.so.6'\n   >>> find_library(\"bz2\")\n   'libbz2.so.1.0'\n   >>>\n\nOn OS X, :func:`find_library` tries several predefined naming schemes and paths\nto locate the library, and returns a full pathname if successful::\n\n   >>> from ctypes.util import find_library\n   >>> find_library(\"c\")\n   '/usr/lib/libc.dylib'\n   >>> find_library(\"m\")\n   '/usr/lib/libm.dylib'\n   >>> find_library(\"bz2\")\n   '/usr/lib/libbz2.dylib'\n   >>> find_library(\"AGL\")\n   '/System/Library/Frameworks/AGL.framework/AGL'\n   >>>\n\nOn Windows, :func:`find_library` searches along the system search path, and\nreturns the full pathname, but since there is no predefined naming scheme a call\nlike ``find_library(\"c\")`` will fail and return ``None``.\n\nIf wrapping a shared library with :mod:`ctypes`, it *may* be better to determine\nthe shared library name at development type, and hardcode that into the wrapper\nmodule instead of using :func:`find_library` to locate the library at runtime.\n\n\n.. _ctypes-loading-shared-libraries:\n\nLoading shared libraries\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThere are several ways to loaded shared libraries into the Python process.  One\nway is to instantiate one of the following classes:\n\n\n.. class:: CDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)\n\n   Instances of this class represent loaded shared libraries. Functions in these\n   libraries use the standard C calling convention, and are assumed to return\n   :ctype:`int`.\n\n\n.. class:: OleDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)\n\n   Windows only: Instances of this class represent loaded shared libraries,\n   functions in these libraries use the ``stdcall`` calling convention, and are\n   assumed to return the windows specific :class:`HRESULT` code.  :class:`HRESULT`\n   values contain information specifying whether the function call failed or\n   succeeded, together with additional error code.  If the return value signals a\n   failure, an :class:`WindowsError` is automatically raised.\n\n\n.. class:: WinDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)\n\n   Windows only: Instances of this class represent loaded shared libraries,\n   functions in these libraries use the ``stdcall`` calling convention, and are\n   assumed to return :ctype:`int` by default.\n\n   On Windows CE only the standard calling convention is used, for convenience the\n   :class:`WinDLL` and :class:`OleDLL` use the standard calling convention on this\n   platform.\n\nThe Python :term:`global interpreter lock` is released before calling any\nfunction exported by these libraries, and reacquired afterwards.\n\n\n.. class:: PyDLL(name, mode=DEFAULT_MODE, handle=None)\n\n   Instances of this class behave like :class:`CDLL` instances, except that the\n   Python GIL is *not* released during the function call, and after the function\n   execution the Python error flag is checked. If the error flag is set, a Python\n   exception is raised.\n\n   Thus, this is only useful to call Python C api functions directly.\n\nAll these classes can be instantiated by calling them with at least one\nargument, the pathname of the shared library.  If you have an existing handle to\nan already loaded shared library, it can be passed as the ``handle`` named\nparameter, otherwise the underlying platforms ``dlopen`` or ``LoadLibrary``\nfunction is used to load the library into the process, and to get a handle to\nit.\n\nThe *mode* parameter can be used to specify how the library is loaded.  For\ndetails, consult the :manpage:`dlopen(3)` manpage, on Windows, *mode* is\nignored.\n\nThe *use_errno* parameter, when set to True, enables a ctypes mechanism that\nallows to access the system :data:`errno` error number in a safe way.\n:mod:`ctypes` maintains a thread-local copy of the systems :data:`errno`\nvariable; if you call foreign functions created with ``use_errno=True`` then the\n:data:`errno` value before the function call is swapped with the ctypes private\ncopy, the same happens immediately after the function call.\n\nThe function :func:`ctypes.get_errno` returns the value of the ctypes private\ncopy, and the function :func:`ctypes.set_errno` changes the ctypes private copy\nto a new value and returns the former value.\n\nThe *use_last_error* parameter, when set to True, enables the same mechanism for\nthe Windows error code which is managed by the :func:`GetLastError` and\n:func:`SetLastError` Windows API functions; :func:`ctypes.get_last_error` and\n:func:`ctypes.set_last_error` are used to request and change the ctypes private\ncopy of the windows error code.\n\n.. data:: RTLD_GLOBAL\n   :noindex:\n\n   Flag to use as *mode* parameter.  On platforms where this flag is not available,\n   it is defined as the integer zero.\n\n\n.. data:: RTLD_LOCAL\n   :noindex:\n\n   Flag to use as *mode* parameter.  On platforms where this is not available, it\n   is the same as *RTLD_GLOBAL*.\n\n\n.. data:: DEFAULT_MODE\n   :noindex:\n\n   The default mode which is used to load shared libraries.  On OSX 10.3, this is\n   *RTLD_GLOBAL*, otherwise it is the same as *RTLD_LOCAL*.\n\nInstances of these classes have no public methods, however :meth:`__getattr__`\nand :meth:`__getitem__` have special behavior: functions exported by the shared\nlibrary can be accessed as attributes of by index.  Please note that both\n:meth:`__getattr__` and :meth:`__getitem__` cache their result, so calling them\nrepeatedly returns the same object each time.\n\nThe following public attributes are available, their name starts with an\nunderscore to not clash with exported function names:\n\n\n.. attribute:: PyDLL._handle\n\n   The system handle used to access the library.\n\n\n.. attribute:: PyDLL._name\n\n   The name of the library passed in the constructor.\n\nShared libraries can also be loaded by using one of the prefabricated objects,\nwhich are instances of the :class:`LibraryLoader` class, either by calling the\n:meth:`LoadLibrary` method, or by retrieving the library as attribute of the\nloader instance.\n\n\n.. class:: LibraryLoader(dlltype)\n\n   Class which loads shared libraries.  *dlltype* should be one of the\n   :class:`CDLL`, :class:`PyDLL`, :class:`WinDLL`, or :class:`OleDLL` types.\n\n   :meth:`__getattr__` has special behavior: It allows to load a shared library by\n   accessing it as attribute of a library loader instance.  The result is cached,\n   so repeated attribute accesses return the same library each time.\n\n   .. method:: LoadLibrary(name)\n\n      Load a shared library into the process and return it.  This method always\n      returns a new instance of the library.\n\n\nThese prefabricated library loaders are available:\n\n.. data:: cdll\n   :noindex:\n\n   Creates :class:`CDLL` instances.\n\n\n.. data:: windll\n   :noindex:\n\n   Windows only: Creates :class:`WinDLL` instances.\n\n\n.. data:: oledll\n   :noindex:\n\n   Windows only: Creates :class:`OleDLL` instances.\n\n\n.. data:: pydll\n   :noindex:\n\n   Creates :class:`PyDLL` instances.\n\n\nFor accessing the C Python api directly, a ready-to-use Python shared library\nobject is available:\n\n.. data:: pythonapi\n   :noindex:\n\n   An instance of :class:`PyDLL` that exposes Python C API functions as\n   attributes.  Note that all these functions are assumed to return C\n   :ctype:`int`, which is of course not always the truth, so you have to assign\n   the correct :attr:`restype` attribute to use these functions.\n\n\n.. _ctypes-foreign-functions:\n\nForeign functions\n^^^^^^^^^^^^^^^^^\n\nAs explained in the previous section, foreign functions can be accessed as\nattributes of loaded shared libraries.  The function objects created in this way\nby default accept any number of arguments, accept any ctypes data instances as\narguments, and return the default result type specified by the library loader.\nThey are instances of a private class:\n\n\n.. class:: _FuncPtr\n\n   Base class for C callable foreign functions.\n\n   Instances of foreign functions are also C compatible data types; they\n   represent C function pointers.\n\n   This behavior can be customized by assigning to special attributes of the\n   foreign function object.\n\n   .. attribute:: restype\n\n      Assign a ctypes type to specify the result type of the foreign function.\n      Use ``None`` for :ctype:`void`, a function not returning anything.\n\n      It is possible to assign a callable Python object that is not a ctypes\n      type, in this case the function is assumed to return a C :ctype:`int`, and\n      the callable will be called with this integer, allowing to do further\n      processing or error checking.  Using this is deprecated, for more flexible\n      post processing or error checking use a ctypes data type as\n      :attr:`restype` and assign a callable to the :attr:`errcheck` attribute.\n\n   .. attribute:: argtypes\n\n      Assign a tuple of ctypes types to specify the argument types that the\n      function accepts.  Functions using the ``stdcall`` calling convention can\n      only be called with the same number of arguments as the length of this\n      tuple; functions using the C calling convention accept additional,\n      unspecified arguments as well.\n\n      When a foreign function is called, each actual argument is passed to the\n      :meth:`from_param` class method of the items in the :attr:`argtypes`\n      tuple, this method allows to adapt the actual argument to an object that\n      the foreign function accepts.  For example, a :class:`c_char_p` item in\n      the :attr:`argtypes` tuple will convert a string passed as argument into\n      a bytes object using ctypes conversion rules.\n\n      New: It is now possible to put items in argtypes which are not ctypes\n      types, but each item must have a :meth:`from_param` method which returns a\n      value usable as argument (integer, string, ctypes instance).  This allows\n      to define adapters that can adapt custom objects as function parameters.\n\n   .. attribute:: errcheck\n\n      Assign a Python function or another callable to this attribute. The\n      callable will be called with three or more arguments:\n\n      .. function:: callable(result, func, arguments)\n         :noindex:\n         :module:\n\n         *result* is what the foreign function returns, as specified by the\n         :attr:`restype` attribute.\n\n         *func* is the foreign function object itself, this allows to reuse the\n         same callable object to check or post process the results of several\n         functions.\n\n         *arguments* is a tuple containing the parameters originally passed to\n         the function call, this allows to specialize the behavior on the\n         arguments used.\n\n      The object that this function returns will be returned from the\n      foreign function call, but it can also check the result value\n      and raise an exception if the foreign function call failed.\n\n\n.. exception:: ArgumentError\n\n   This exception is raised when a foreign function call cannot convert one of the\n   passed arguments.\n\n\n.. _ctypes-function-prototypes:\n\nFunction prototypes\n^^^^^^^^^^^^^^^^^^^\n\nForeign functions can also be created by instantiating function prototypes.\nFunction prototypes are similar to function prototypes in C; they describe a\nfunction (return type, argument types, calling convention) without defining an\nimplementation.  The factory functions must be called with the desired result\ntype and the argument types of the function.\n\n\n.. function:: CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)\n\n   The returned function prototype creates functions that use the standard C\n   calling convention.  The function will release the GIL during the call.  If\n   *use_errno* is set to True, the ctypes private copy of the system\n   :data:`errno` variable is exchanged with the real :data:`errno` value before\n   and after the call; *use_last_error* does the same for the Windows error\n   code.\n\n\n.. function:: WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)\n\n   Windows only: The returned function prototype creates functions that use the\n   ``stdcall`` calling convention, except on Windows CE where\n   :func:`WINFUNCTYPE` is the same as :func:`CFUNCTYPE`.  The function will\n   release the GIL during the call.  *use_errno* and *use_last_error* have the\n   same meaning as above.\n\n\n.. function:: PYFUNCTYPE(restype, *argtypes)\n\n   The returned function prototype creates functions that use the Python calling\n   convention.  The function will *not* release the GIL during the call.\n\nFunction prototypes created by these factory functions can be instantiated in\ndifferent ways, depending on the type and number of the parameters in the call:\n\n\n   .. function:: prototype(address)\n      :noindex:\n      :module:\n\n      Returns a foreign function at the specified address which must be an integer.\n\n\n   .. function:: prototype(callable)\n      :noindex:\n      :module:\n\n      Create a C callable function (a callback function) from a Python *callable*.\n\n\n   .. function:: prototype(func_spec[, paramflags])\n      :noindex:\n      :module:\n\n      Returns a foreign function exported by a shared library. *func_spec* must\n      be a 2-tuple ``(name_or_ordinal, library)``. The first item is the name of\n      the exported function as string, or the ordinal of the exported function\n      as small integer.  The second item is the shared library instance.\n\n\n   .. function:: prototype(vtbl_index, name[, paramflags[, iid]])\n      :noindex:\n      :module:\n\n      Returns a foreign function that will call a COM method. *vtbl_index* is\n      the index into the virtual function table, a small non-negative\n      integer. *name* is name of the COM method. *iid* is an optional pointer to\n      the interface identifier which is used in extended error reporting.\n\n      COM methods use a special calling convention: They require a pointer to\n      the COM interface as first argument, in addition to those parameters that\n      are specified in the :attr:`argtypes` tuple.\n\n   The optional *paramflags* parameter creates foreign function wrappers with much\n   more functionality than the features described above.\n\n   *paramflags* must be a tuple of the same length as :attr:`argtypes`.\n\n   Each item in this tuple contains further information about a parameter, it must\n   be a tuple containing one, two, or three items.\n\n   The first item is an integer containing a combination of direction\n   flags for the parameter:\n\n      1\n         Specifies an input parameter to the function.\n\n      2\n         Output parameter.  The foreign function fills in a value.\n\n      4\n         Input parameter which defaults to the integer zero.\n\n   The optional second item is the parameter name as string.  If this is specified,\n   the foreign function can be called with named parameters.\n\n   The optional third item is the default value for this parameter.\n\nThis example demonstrates how to wrap the Windows ``MessageBoxA`` function so\nthat it supports default parameters and named arguments. The C declaration from\nthe windows header file is this::\n\n   WINUSERAPI int WINAPI\n   MessageBoxA(\n       HWND hWnd ,\n       LPCSTR lpText,\n       LPCSTR lpCaption,\n       UINT uType);\n\nHere is the wrapping with :mod:`ctypes`::\n\n   >>> from ctypes import c_int, WINFUNCTYPE, windll\n   >>> from ctypes.wintypes import HWND, LPCSTR, UINT\n   >>> prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT)\n   >>> paramflags = (1, \"hwnd\", 0), (1, \"text\", \"Hi\"), (1, \"caption\", None), (1, \"flags\", 0)\n   >>> MessageBox = prototype((\"MessageBoxA\", windll.user32), paramflags)\n   >>>\n\nThe MessageBox foreign function can now be called in these ways::\n\n   >>> MessageBox()\n   >>> MessageBox(text=\"Spam, spam, spam\")\n   >>> MessageBox(flags=2, text=\"foo bar\")\n   >>>\n\nA second example demonstrates output parameters.  The win32 ``GetWindowRect``\nfunction retrieves the dimensions of a specified window by copying them into\n``RECT`` structure that the caller has to supply.  Here is the C declaration::\n\n   WINUSERAPI BOOL WINAPI\n   GetWindowRect(\n        HWND hWnd,\n        LPRECT lpRect);\n\nHere is the wrapping with :mod:`ctypes`::\n\n   >>> from ctypes import POINTER, WINFUNCTYPE, windll, WinError\n   >>> from ctypes.wintypes import BOOL, HWND, RECT\n   >>> prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT))\n   >>> paramflags = (1, \"hwnd\"), (2, \"lprect\")\n   >>> GetWindowRect = prototype((\"GetWindowRect\", windll.user32), paramflags)\n   >>>\n\nFunctions with output parameters will automatically return the output parameter\nvalue if there is a single one, or a tuple containing the output parameter\nvalues when there are more than one, so the GetWindowRect function now returns a\nRECT instance, when called.\n\nOutput parameters can be combined with the :attr:`errcheck` protocol to do\nfurther output processing and error checking.  The win32 ``GetWindowRect`` api\nfunction returns a ``BOOL`` to signal success or failure, so this function could\ndo the error checking, and raises an exception when the api call failed::\n\n   >>> def errcheck(result, func, args):\n   ...     if not result:\n   ...         raise WinError()\n   ...     return args\n   ...\n   >>> GetWindowRect.errcheck = errcheck\n   >>>\n\nIf the :attr:`errcheck` function returns the argument tuple it receives\nunchanged, :mod:`ctypes` continues the normal processing it does on the output\nparameters.  If you want to return a tuple of window coordinates instead of a\n``RECT`` instance, you can retrieve the fields in the function and return them\ninstead, the normal processing will no longer take place::\n\n   >>> def errcheck(result, func, args):\n   ...     if not result:\n   ...         raise WinError()\n   ...     rc = args[1]\n   ...     return rc.left, rc.top, rc.bottom, rc.right\n   ...\n   >>> GetWindowRect.errcheck = errcheck\n   >>>\n\n\n.. _ctypes-utility-functions:\n\nUtility functions\n^^^^^^^^^^^^^^^^^\n\n.. function:: addressof(obj)\n\n   Returns the address of the memory buffer as integer.  *obj* must be an\n   instance of a ctypes type.\n\n\n.. function:: alignment(obj_or_type)\n\n   Returns the alignment requirements of a ctypes type. *obj_or_type* must be a\n   ctypes type or instance.\n\n\n.. function:: byref(obj[, offset])\n\n   Returns a light-weight pointer to *obj*, which must be an instance of a\n   ctypes type.  *offset* defaults to zero, and must be an integer that will be\n   added to the internal pointer value.\n\n   ``byref(obj, offset)`` corresponds to this C code::\n\n      (((char *)&obj) + offset)\n\n   The returned object can only be used as a foreign function call parameter.\n   It behaves similar to ``pointer(obj)``, but the construction is a lot faster.\n\n\n.. function:: cast(obj, type)\n\n   This function is similar to the cast operator in C. It returns a new instance\n   of *type* which points to the same memory block as *obj*.  *type* must be a\n   pointer type, and *obj* must be an object that can be interpreted as a\n   pointer.\n\n\n.. function:: create_string_buffer(init_or_size, size=None)\n\n   This function creates a mutable character buffer. The returned object is a\n   ctypes array of :class:`c_char`.\n\n   *init_or_size* must be an integer which specifies the size of the array, or a\n   bytes object which will be used to initialize the array items.\n\n   If a bytes object is specified as first argument, the buffer is made one item\n   larger than its length so that the last element in the array is a NUL\n   termination character. An integer can be passed as second argument which allows\n   to specify the size of the array if the length of the bytes should not be used.\n\n   If the first parameter is a string, it is converted into a bytes object\n   according to ctypes conversion rules.\n\n\n.. function:: create_unicode_buffer(init_or_size, size=None)\n\n   This function creates a mutable unicode character buffer. The returned object is\n   a ctypes array of :class:`c_wchar`.\n\n   *init_or_size* must be an integer which specifies the size of the array, or a\n   string which will be used to initialize the array items.\n\n   If a string is specified as first argument, the buffer is made one item\n   larger than the length of the string so that the last element in the array is a\n   NUL termination character. An integer can be passed as second argument which\n   allows to specify the size of the array if the length of the string should not\n   be used.\n\n   If the first parameter is a bytes object, it is converted into an unicode string\n   according to ctypes conversion rules.\n\n\n.. function:: DllCanUnloadNow()\n\n   Windows only: This function is a hook which allows to implement in-process\n   COM servers with ctypes.  It is called from the DllCanUnloadNow function that\n   the _ctypes extension dll exports.\n\n\n.. function:: DllGetClassObject()\n\n   Windows only: This function is a hook which allows to implement in-process\n   COM servers with ctypes.  It is called from the DllGetClassObject function\n   that the ``_ctypes`` extension dll exports.\n\n\n.. function:: find_library(name)\n   :module: ctypes.util\n\n   Try to find a library and return a pathname.  *name* is the library name\n   without any prefix like ``lib``, suffix like ``.so``, ``.dylib`` or version\n   number (this is the form used for the posix linker option :option:`-l`).  If\n   no library can be found, returns ``None``.\n\n   The exact functionality is system dependent.\n\n\n.. function:: find_msvcrt()\n   :module: ctypes.util\n\n   Windows only: return the filename of the VC runtype library used by Python,\n   and by the extension modules.  If the name of the library cannot be\n   determined, ``None`` is returned.\n\n   If you need to free memory, for example, allocated by an extension module\n   with a call to the ``free(void *)``, it is important that you use the\n   function in the same library that allocated the memory.\n\n\n.. function:: FormatError([code])\n\n   Windows only: Returns a textual description of the error code *code*.  If no\n   error code is specified, the last error code is used by calling the Windows\n   api function GetLastError.\n\n\n.. function:: GetLastError()\n\n   Windows only: Returns the last error code set by Windows in the calling thread.\n   This function calls the Windows `GetLastError()` function directly,\n   it does not return the ctypes-private copy of the error code.\n\n.. function:: get_errno()\n\n   Returns the current value of the ctypes-private copy of the system\n   :data:`errno` variable in the calling thread.\n\n.. function:: get_last_error()\n\n   Windows only: returns the current value of the ctypes-private copy of the system\n   :data:`LastError` variable in the calling thread.\n\n.. function:: memmove(dst, src, count)\n\n   Same as the standard C memmove library function: copies *count* bytes from\n   *src* to *dst*. *dst* and *src* must be integers or ctypes instances that can\n   be converted to pointers.\n\n\n.. function:: memset(dst, c, count)\n\n   Same as the standard C memset library function: fills the memory block at\n   address *dst* with *count* bytes of value *c*. *dst* must be an integer\n   specifying an address, or a ctypes instance.\n\n\n.. function:: POINTER(type)\n\n   This factory function creates and returns a new ctypes pointer type. Pointer\n   types are cached an reused internally, so calling this function repeatedly is\n   cheap. *type* must be a ctypes type.\n\n\n.. function:: pointer(obj)\n\n   This function creates a new pointer instance, pointing to *obj*. The returned\n   object is of the type ``POINTER(type(obj))``.\n\n   Note: If you just want to pass a pointer to an object to a foreign function\n   call, you should use ``byref(obj)`` which is much faster.\n\n\n.. function:: resize(obj, size)\n\n   This function resizes the internal memory buffer of *obj*, which must be an\n   instance of a ctypes type.  It is not possible to make the buffer smaller\n   than the native size of the objects type, as given by ``sizeof(type(obj))``,\n   but it is possible to enlarge the buffer.\n\n\n.. function:: set_conversion_mode(encoding, errors)\n\n   This function sets the rules that ctypes objects use when converting between\n   bytes objects and (unicode) strings. *encoding* must be a string specifying an\n   encoding, like ``'utf-8'`` or ``'mbcs'``, *errors* must be a string specifying\n   the error handling on encoding/decoding errors. Examples of possible values are\n   ``'strict'``, ``'replace'``, or ``'ignore'``.\n\n   :func:`set_conversion_mode` returns a 2-tuple containing the previous\n   conversion rules. On windows, the initial conversion rules are ``('mbcs',\n   'ignore')``, on other systems ``('ascii', 'strict')``.\n\n   You can set the *encoding* to ``'undefined'`` to completely disable automatic\n   conversions.\n\n\n.. function:: set_errno(value)\n\n   Set the current value of the ctypes-private copy of the system :data:`errno`\n   variable in the calling thread to *value* and return the previous value.\n\n\n\n.. function:: set_last_error(value)\n\n   Windows only: set the current value of the ctypes-private copy of the system\n   :data:`LastError` variable in the calling thread to *value* and return the\n   previous value.\n\n\n\n.. function:: sizeof(obj_or_type)\n\n   Returns the size in bytes of a ctypes type or instance memory buffer. Does the\n   same as the C ``sizeof()`` function.\n\n\n.. function:: string_at(address, size=-1)\n\n   This function returns the C string starting at memory address address as a bytes\n   object. If size is specified, it is used as size, otherwise the string is assumed\n   to be zero-terminated.\n\n\n.. function:: WinError(code=None, descr=None)\n\n   Windows only: this function is probably the worst-named thing in ctypes. It\n   creates an instance of WindowsError.  If *code* is not specified,\n   ``GetLastError`` is called to determine the error code. If *descr* is not\n   specified, :func:`FormatError` is called to get a textual description of the\n   error.\n\n\n.. function:: wstring_at(address, size=-1)\n\n   This function returns the wide character string starting at memory address\n   *address* as a string.  If *size* is specified, it is used as the number of\n   characters of the string, otherwise the string is assumed to be\n   zero-terminated.\n\n\n.. _ctypes-data-types:\n\nData types\n^^^^^^^^^^\n\n\n.. class:: _CData\n\n   This non-public class is the common base class of all ctypes data types.\n   Among other things, all ctypes type instances contain a memory block that\n   hold C compatible data; the address of the memory block is returned by the\n   :func:`addressof` helper function. Another instance variable is exposed as\n   :attr:`_objects`; this contains other Python objects that need to be kept\n   alive in case the memory block contains pointers.\n\n   Common methods of ctypes data types, these are all class methods (to be\n   exact, they are methods of the :term:`metaclass`):\n\n   .. method:: _CData.from_buffer(source[, offset])\n\n      This method returns a ctypes instance that shares the buffer of the\n      *source* object.  The *source* object must support the writeable buffer\n      interface.  The optional *offset* parameter specifies an offset into the\n      source buffer in bytes; the default is zero.  If the source buffer is not\n      large enough a :exc:`ValueError` is raised.\n\n\n   .. method:: _CData.from_buffer_copy(source[, offset])\n\n      This method creates a ctypes instance, copying the buffer from the\n      *source* object buffer which must be readable.  The optional *offset*\n      parameter specifies an offset into the source buffer in bytes; the default\n      is zero.  If the source buffer is not large enough a :exc:`ValueError` is\n      raised.\n\n   .. method:: from_address(address)\n\n      This method returns a ctypes type instance using the memory specified by\n      *address* which must be an integer.\n\n   .. method:: from_param(obj)\n\n      This method adapts *obj* to a ctypes type.  It is called with the actual\n      object used in a foreign function call when the type is present in the\n      foreign function's :attr:`argtypes` tuple; it must return an object that\n      can be used as a function call parameter.\n\n      All ctypes data types have a default implementation of this classmethod\n      that normally returns *obj* if that is an instance of the type.  Some\n      types accept other objects as well.\n\n   .. method:: in_dll(library, name)\n\n      This method returns a ctypes type instance exported by a shared\n      library. *name* is the name of the symbol that exports the data, *library*\n      is the loaded shared library.\n\n   Common instance variables of ctypes data types:\n\n   .. attribute:: _b_base_\n\n      Sometimes ctypes data instances do not own the memory block they contain,\n      instead they share part of the memory block of a base object.  The\n      :attr:`_b_base_` read-only member is the root ctypes object that owns the\n      memory block.\n\n   .. attribute:: _b_needsfree_\n\n      This read-only variable is true when the ctypes data instance has\n      allocated the memory block itself, false otherwise.\n\n   .. attribute:: _objects\n\n      This member is either ``None`` or a dictionary containing Python objects\n      that need to be kept alive so that the memory block contents is kept\n      valid.  This object is only exposed for debugging; never modify the\n      contents of this dictionary.\n\n\n.. _ctypes-fundamental-data-types-2:\n\nFundamental data types\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. class:: _SimpleCData\n\n   This non-public class is the base class of all fundamental ctypes data\n   types. It is mentioned here because it contains the common attributes of the\n   fundamental ctypes data types.  :class:`_SimpleCData` is a subclass of\n   :class:`_CData`, so it inherits their methods and attributes. ctypes data\n   types that are not and do not contain pointers can now be pickled.\n\n   Instances have a single attribute:\n\n   .. attribute:: value\n\n      This attribute contains the actual value of the instance. For integer and\n      pointer types, it is an integer, for character types, it is a single\n      character bytes object or string, for character pointer types it is a\n      Python bytes object or string.\n\n      When the ``value`` attribute is retrieved from a ctypes instance, usually\n      a new object is returned each time.  :mod:`ctypes` does *not* implement\n      original object return, always a new object is constructed.  The same is\n      true for all other ctypes object instances.\n\n\nFundamental data types, when returned as foreign function call results, or, for\nexample, by retrieving structure field members or array items, are transparently\nconverted to native Python types.  In other words, if a foreign function has a\n:attr:`restype` of :class:`c_char_p`, you will always receive a Python bytes\nobject, *not* a :class:`c_char_p` instance.\n\n.. XXX above is false, it actually returns a Unicode string\n\nSubclasses of fundamental data types do *not* inherit this behavior. So, if a\nforeign functions :attr:`restype` is a subclass of :class:`c_void_p`, you will\nreceive an instance of this subclass from the function call. Of course, you can\nget the value of the pointer by accessing the ``value`` attribute.\n\nThese are the fundamental ctypes data types:\n\n.. class:: c_byte\n\n   Represents the C :ctype:`signed char` datatype, and interprets the value as\n   small integer.  The constructor accepts an optional integer initializer; no\n   overflow checking is done.\n\n\n.. class:: c_char\n\n   Represents the C :ctype:`char` datatype, and interprets the value as a single\n   character.  The constructor accepts an optional string initializer, the\n   length of the string must be exactly one character.\n\n\n.. class:: c_char_p\n\n   Represents the C :ctype:`char *` datatype when it points to a zero-terminated\n   string.  For a general character pointer that may also point to binary data,\n   ``POINTER(c_char)`` must be used.  The constructor accepts an integer\n   address, or a bytes object.\n\n\n.. class:: c_double\n\n   Represents the C :ctype:`double` datatype.  The constructor accepts an\n   optional float initializer.\n\n\n.. class:: c_longdouble\n\n   Represents the C :ctype:`long double` datatype.  The constructor accepts an\n   optional float initializer.  On platforms where ``sizeof(long double) ==\n   sizeof(double)`` it is an alias to :class:`c_double`.\n\n.. class:: c_float\n\n   Represents the C :ctype:`float` datatype.  The constructor accepts an\n   optional float initializer.\n\n\n.. class:: c_int\n\n   Represents the C :ctype:`signed int` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.  On platforms\n   where ``sizeof(int) == sizeof(long)`` it is an alias to :class:`c_long`.\n\n\n.. class:: c_int8\n\n   Represents the C 8-bit :ctype:`signed int` datatype.  Usually an alias for\n   :class:`c_byte`.\n\n\n.. class:: c_int16\n\n   Represents the C 16-bit :ctype:`signed int` datatype.  Usually an alias for\n   :class:`c_short`.\n\n\n.. class:: c_int32\n\n   Represents the C 32-bit :ctype:`signed int` datatype.  Usually an alias for\n   :class:`c_int`.\n\n\n.. class:: c_int64\n\n   Represents the C 64-bit :ctype:`signed int` datatype.  Usually an alias for\n   :class:`c_longlong`.\n\n\n.. class:: c_long\n\n   Represents the C :ctype:`signed long` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_longlong\n\n   Represents the C :ctype:`signed long long` datatype.  The constructor accepts\n   an optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_short\n\n   Represents the C :ctype:`signed short` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_size_t\n\n   Represents the C :ctype:`size_t` datatype.\n\n\n.. class:: c_ubyte\n\n   Represents the C :ctype:`unsigned char` datatype, it interprets the value as\n   small integer.  The constructor accepts an optional integer initializer; no\n   overflow checking is done.\n\n\n.. class:: c_uint\n\n   Represents the C :ctype:`unsigned int` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.  On platforms\n   where ``sizeof(int) == sizeof(long)`` it is an alias for :class:`c_ulong`.\n\n\n.. class:: c_uint8\n\n   Represents the C 8-bit :ctype:`unsigned int` datatype.  Usually an alias for\n   :class:`c_ubyte`.\n\n\n.. class:: c_uint16\n\n   Represents the C 16-bit :ctype:`unsigned int` datatype.  Usually an alias for\n   :class:`c_ushort`.\n\n\n.. class:: c_uint32\n\n   Represents the C 32-bit :ctype:`unsigned int` datatype.  Usually an alias for\n   :class:`c_uint`.\n\n\n.. class:: c_uint64\n\n   Represents the C 64-bit :ctype:`unsigned int` datatype.  Usually an alias for\n   :class:`c_ulonglong`.\n\n\n.. class:: c_ulong\n\n   Represents the C :ctype:`unsigned long` datatype.  The constructor accepts an\n   optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_ulonglong\n\n   Represents the C :ctype:`unsigned long long` datatype.  The constructor\n   accepts an optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_ushort\n\n   Represents the C :ctype:`unsigned short` datatype.  The constructor accepts\n   an optional integer initializer; no overflow checking is done.\n\n\n.. class:: c_void_p\n\n   Represents the C :ctype:`void *` type.  The value is represented as integer.\n   The constructor accepts an optional integer initializer.\n\n\n.. class:: c_wchar\n\n   Represents the C :ctype:`wchar_t` datatype, and interprets the value as a\n   single character unicode string.  The constructor accepts an optional string\n   initializer, the length of the string must be exactly one character.\n\n\n.. class:: c_wchar_p\n\n   Represents the C :ctype:`wchar_t *` datatype, which must be a pointer to a\n   zero-terminated wide character string.  The constructor accepts an integer\n   address, or a string.\n\n\n.. class:: c_bool\n\n   Represent the C :ctype:`bool` datatype (more accurately, :ctype:`_Bool` from\n   C99).  Its value can be True or False, and the constructor accepts any object\n   that has a truth value.\n\n\n.. class:: HRESULT\n\n   Windows only: Represents a :ctype:`HRESULT` value, which contains success or\n   error information for a function or method call.\n\n\n.. class:: py_object\n\n   Represents the C :ctype:`PyObject *` datatype.  Calling this without an\n   argument creates a ``NULL`` :ctype:`PyObject *` pointer.\n\nThe :mod:`ctypes.wintypes` module provides quite some other Windows specific\ndata types, for example :ctype:`HWND`, :ctype:`WPARAM`, or :ctype:`DWORD`.  Some\nuseful structures like :ctype:`MSG` or :ctype:`RECT` are also defined.\n\n\n.. _ctypes-structured-data-types:\n\nStructured data types\n^^^^^^^^^^^^^^^^^^^^^\n\n\n.. class:: Union(*args, **kw)\n\n   Abstract base class for unions in native byte order.\n\n\n.. class:: BigEndianStructure(*args, **kw)\n\n   Abstract base class for structures in *big endian* byte order.\n\n\n.. class:: LittleEndianStructure(*args, **kw)\n\n   Abstract base class for structures in *little endian* byte order.\n\nStructures with non-native byte order cannot contain pointer type fields, or any\nother data types containing pointer type fields.\n\n\n.. class:: Structure(*args, **kw)\n\n   Abstract base class for structures in *native* byte order.\n\n   Concrete structure and union types must be created by subclassing one of these\n   types, and at least define a :attr:`_fields_` class variable. :mod:`ctypes` will\n   create :term:`descriptor`\\s which allow reading and writing the fields by direct\n   attribute accesses.  These are the\n\n\n   .. attribute:: _fields_\n\n      A sequence defining the structure fields.  The items must be 2-tuples or\n      3-tuples.  The first item is the name of the field, the second item\n      specifies the type of the field; it can be any ctypes data type.\n\n      For integer type fields like :class:`c_int`, a third optional item can be\n      given.  It must be a small positive integer defining the bit width of the\n      field.\n\n      Field names must be unique within one structure or union.  This is not\n      checked, only one field can be accessed when names are repeated.\n\n      It is possible to define the :attr:`_fields_` class variable *after* the\n      class statement that defines the Structure subclass, this allows to create\n      data types that directly or indirectly reference themselves::\n\n         class List(Structure):\n             pass\n         List._fields_ = [(\"pnext\", POINTER(List)),\n                          ...\n                         ]\n\n      The :attr:`_fields_` class variable must, however, be defined before the\n      type is first used (an instance is created, :func:`sizeof` is called on it,\n      and so on).  Later assignments to the :attr:`_fields_` class variable will\n      raise an AttributeError.\n\n      Structure and union subclass constructors accept both positional and named\n      arguments.  Positional arguments are used to initialize the fields in the\n      same order as they appear in the :attr:`_fields_` definition, named\n      arguments are used to initialize the fields with the corresponding name.\n\n      It is possible to defined sub-subclasses of structure types, they inherit\n      the fields of the base class plus the :attr:`_fields_` defined in the\n      sub-subclass, if any.\n\n\n   .. attribute:: _pack_\n\n      An optional small integer that allows to override the alignment of\n      structure fields in the instance.  :attr:`_pack_` must already be defined\n      when :attr:`_fields_` is assigned, otherwise it will have no effect.\n\n\n   .. attribute:: _anonymous_\n\n      An optional sequence that lists the names of unnamed (anonymous) fields.\n      :attr:`_anonymous_` must be already defined when :attr:`_fields_` is\n      assigned, otherwise it will have no effect.\n\n      The fields listed in this variable must be structure or union type fields.\n      :mod:`ctypes` will create descriptors in the structure type that allows to\n      access the nested fields directly, without the need to create the\n      structure or union field.\n\n      Here is an example type (Windows)::\n\n         class _U(Union):\n             _fields_ = [(\"lptdesc\", POINTER(TYPEDESC)),\n                         (\"lpadesc\", POINTER(ARRAYDESC)),\n                         (\"hreftype\", HREFTYPE)]\n\n         class TYPEDESC(Structure):\n             _anonymous_ = (\"u\",)\n             _fields_ = [(\"u\", _U),\n                         (\"vt\", VARTYPE)]\n\n\n      The ``TYPEDESC`` structure describes a COM data type, the ``vt`` field\n      specifies which one of the union fields is valid.  Since the ``u`` field\n      is defined as anonymous field, it is now possible to access the members\n      directly off the TYPEDESC instance. ``td.lptdesc`` and ``td.u.lptdesc``\n      are equivalent, but the former is faster since it does not need to create\n      a temporary union instance::\n\n         td = TYPEDESC()\n         td.vt = VT_PTR\n         td.lptdesc = POINTER(some_type)\n         td.u.lptdesc = POINTER(some_type)\n\n   It is possible to defined sub-subclasses of structures, they inherit the\n   fields of the base class.  If the subclass definition has a separate\n   :attr:`_fields_` variable, the fields specified in this are appended to the\n   fields of the base class.\n\n   Structure and union constructors accept both positional and keyword\n   arguments.  Positional arguments are used to initialize member fields in the\n   same order as they are appear in :attr:`_fields_`.  Keyword arguments in the\n   constructor are interpreted as attribute assignments, so they will initialize\n   :attr:`_fields_` with the same name, or create new attributes for names not\n   present in :attr:`_fields_`.\n\n\n.. _ctypes-arrays-pointers:\n\nArrays and pointers\n^^^^^^^^^^^^^^^^^^^\n\nNot yet written - please see the sections :ref:`ctypes-pointers` and section\n:ref:`ctypes-arrays` in the tutorial.\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Doc/tutorial/modules.rst": ".. _tut-modules:\n\n*******\nModules\n*******\n\nIf you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a *script*.  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you've written in several programs without copying its\ndefinition into each program.\n\nTo support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n*module*; definitions from a module can be *imported* into other modules or into\nthe *main* module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).\n\nA module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix :file:`.py` appended.  Within a module, the\nmodule's name (as a string) is available as the value of the global variable\n``__name__``.  For instance, use your favorite text editor to create a file\ncalled :file:`fibo.py` in the current directory with the following contents::\n\n   # Fibonacci numbers module\n\n   def fib(n):    # write Fibonacci series up to n\n       a, b = 0, 1\n       while b < n:\n           print(b, end=' ')\n           a, b = b, a+b\n       print()\n\n   def fib2(n): # return Fibonacci series up to n\n       result = []\n       a, b = 0, 1\n       while b < n:\n           result.append(b)\n           a, b = b, a+b\n       return result\n\nNow enter the Python interpreter and import this module with the following\ncommand::\n\n   >>> import fibo\n\nThis does not enter the names of the functions defined in ``fibo``  directly in\nthe current symbol table; it only enters the module name ``fibo`` there. Using\nthe module name you can access the functions::\n\n   >>> fibo.fib(1000)\n   1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n   >>> fibo.fib2(100)\n   [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n   >>> fibo.__name__\n   'fibo'\n\nIf you intend to use a function often you can assign it to a local name::\n\n   >>> fib = fibo.fib\n   >>> fib(500)\n   1 1 2 3 5 8 13 21 34 55 89 144 233 377\n\n\n.. _tut-moremodules:\n\nMore on Modules\n===============\n\nA module can contain executable statements as well as function definitions.\nThese statements are intended to initialize the module. They are executed only\nthe *first* time the module is imported somewhere. [#]_\n\nEach module has its own private symbol table, which is used as the global symbol\ntable by all functions defined in the module. Thus, the author of a module can\nuse global variables in the module without worrying about accidental clashes\nwith a user's global variables. On the other hand, if you know what you are\ndoing you can touch a module's global variables with the same notation used to\nrefer to its functions, ``modname.itemname``.\n\nModules can import other modules.  It is customary but not required to place all\n:keyword:`import` statements at the beginning of a module (or script, for that\nmatter).  The imported module names are placed in the importing module's global\nsymbol table.\n\nThere is a variant of the :keyword:`import` statement that imports names from a\nmodule directly into the importing module's symbol table.  For example::\n\n   >>> from fibo import fib, fib2\n   >>> fib(500)\n   1 1 2 3 5 8 13 21 34 55 89 144 233 377\n\nThis does not introduce the module name from which the imports are taken in the\nlocal symbol table (so in the example, ``fibo`` is not defined).\n\nThere is even a variant to import all names that a module defines::\n\n   >>> from fibo import *\n   >>> fib(500)\n   1 1 2 3 5 8 13 21 34 55 89 144 233 377\n\nThis imports all names except those beginning with an underscore (``_``).\nIn most cases Python programmers do not use this facility since it introduces\nan unknown set of names into the interpreter, possibly hiding some things\nyou have already defined.\n\nNote that in general the practice of importing ``*`` from a module or package is\nfrowned upon, since it often causes poorly readable code. However, it is okay to\nuse it to save typing in interactive sessions.\n\n.. note::\n\n   For efficiency reasons, each module is only imported once per interpreter\n   session.  Therefore, if you change your modules, you must restart the\n   interpreter -- or, if it's just one module you want to test interactively,\n   use :func:`imp.reload`, e.g. ``import imp; imp.reload(modulename)``.\n\n\n.. _tut-modulesasscripts:\n\nExecuting modules as scripts\n----------------------------\n\nWhen you run a Python module with ::\n\n   python fibo.py <arguments>\n\nthe code in the module will be executed, just as if you imported it, but with\nthe ``__name__`` set to ``\"__main__\"``.  That means that by adding this code at\nthe end of your module::\n\n   if __name__ == \"__main__\":\n       import sys\n       fib(int(sys.argv[1]))\n\nyou can make the file usable as a script as well as an importable module,\nbecause the code that parses the command line only runs if the module is\nexecuted as the \"main\" file::\n\n   $ python fibo.py 50\n   1 1 2 3 5 8 13 21 34\n\nIf the module is imported, the code is not run::\n\n   >>> import fibo\n   >>>\n\nThis is often used either to provide a convenient user interface to a module, or\nfor testing purposes (running the module as a script executes a test suite).\n\n\n.. _tut-searchpath:\n\nThe Module Search Path\n----------------------\n\n.. index:: triple: module; search; path\n\nWhen a module named :mod:`spam` is imported, the interpreter searches for a file\nnamed :file:`spam.py` in the current directory, and then in the list of\ndirectories specified by the environment variable :envvar:`PYTHONPATH`.  This\nhas the same syntax as the shell variable :envvar:`PATH`, that is, a list of\ndirectory names.  When :envvar:`PYTHONPATH` is not set, or when the file is not\nfound there, the search continues in an installation-dependent default path; on\nUnix, this is usually :file:`.:/usr/local/lib/python`.\n\nActually, modules are searched in the list of directories given by the variable\n``sys.path`` which is initialized from the directory containing the input script\n(or the current directory), :envvar:`PYTHONPATH` and the installation- dependent\ndefault.  This allows Python programs that know what they're doing to modify or\nreplace the module search path.  Note that because the directory containing the\nscript being run is on the search path, it is important that the script not have\nthe same name as a standard module, or Python will attempt to load the script as\na module when that module is imported. This will generally be an error.  See\nsection :ref:`tut-standardmodules` for more information.\n\n.. %\n    Do we need stuff on zip files etc. ? DUBOIS\n\n\"Compiled\" Python files\n-----------------------\n\nAs an important speed-up of the start-up time for short programs that use a lot\nof standard modules, if a file called :file:`spam.pyc` exists in the directory\nwhere :file:`spam.py` is found, this is assumed to contain an\nalready-\"byte-compiled\" version of the module :mod:`spam`. The modification time\nof the version of :file:`spam.py` used to create :file:`spam.pyc` is recorded in\n:file:`spam.pyc`, and the :file:`.pyc` file is ignored if these don't match.\n\nNormally, you don't need to do anything to create the :file:`spam.pyc` file.\nWhenever :file:`spam.py` is successfully compiled, an attempt is made to write\nthe compiled version to :file:`spam.pyc`.  It is not an error if this attempt\nfails; if for any reason the file is not written completely, the resulting\n:file:`spam.pyc` file will be recognized as invalid and thus ignored later.  The\ncontents of the :file:`spam.pyc` file are platform independent, so a Python\nmodule directory can be shared by machines of different architectures.\n\nSome tips for experts:\n\n* When the Python interpreter is invoked with the :option:`-O` flag, optimized\n  code is generated and stored in :file:`.pyo` files.  The optimizer currently\n  doesn't help much; it only removes :keyword:`assert` statements.  When\n  :option:`-O` is used, *all* :term:`bytecode` is optimized; ``.pyc`` files are\n  ignored and ``.py`` files are compiled to optimized bytecode.\n\n* Passing two :option:`-O` flags to the Python interpreter (:option:`-OO`) will\n  cause the bytecode compiler to perform optimizations that could in some rare\n  cases result in malfunctioning programs.  Currently only ``__doc__`` strings are\n  removed from the bytecode, resulting in more compact :file:`.pyo` files.  Since\n  some programs may rely on having these available, you should only use this\n  option if you know what you're doing.\n\n* A program doesn't run any faster when it is read from a :file:`.pyc` or\n  :file:`.pyo` file than when it is read from a :file:`.py` file; the only thing\n  that's faster about :file:`.pyc` or :file:`.pyo` files is the speed with which\n  they are loaded.\n\n* When a script is run by giving its name on the command line, the bytecode for\n  the script is never written to a :file:`.pyc` or :file:`.pyo` file.  Thus, the\n  startup time of a script may be reduced by moving most of its code to a module\n  and having a small bootstrap script that imports that module.  It is also\n  possible to name a :file:`.pyc` or :file:`.pyo` file directly on the command\n  line.\n\n* It is possible to have a file called :file:`spam.pyc` (or :file:`spam.pyo`\n  when :option:`-O` is used) without a file :file:`spam.py` for the same module.\n  This can be used to distribute a library of Python code in a form that is\n  moderately hard to reverse engineer.\n\n  .. index:: module: compileall\n\n* The module :mod:`compileall` can create :file:`.pyc` files (or :file:`.pyo`\n  files when :option:`-O` is used) for all modules in a directory.\n\n\n.. _tut-standardmodules:\n\nStandard Modules\n================\n\n.. index:: module: sys\n\nPython comes with a library of standard modules, described in a separate\ndocument, the Python Library Reference (\"Library Reference\" hereafter).  Some\nmodules are built into the interpreter; these provide access to operations that\nare not part of the core of the language but are nevertheless built in, either\nfor efficiency or to provide access to operating system primitives such as\nsystem calls.  The set of such modules is a configuration option which also\ndepends on the underlying platform For example, the :mod:`winreg` module is only\nprovided on Windows systems. One particular module deserves some attention:\n:mod:`sys`, which is built into every Python interpreter.  The variables\n``sys.ps1`` and ``sys.ps2`` define the strings used as primary and secondary\nprompts::\n\n   >>> import sys\n   >>> sys.ps1\n   '>>> '\n   >>> sys.ps2\n   '... '\n   >>> sys.ps1 = 'C> '\n   C> print('Yuck!')\n   Yuck!\n   C>\n\n\nThese two variables are only defined if the interpreter is in interactive mode.\n\nThe variable ``sys.path`` is a list of strings that determines the interpreter's\nsearch path for modules. It is initialized to a default path taken from the\nenvironment variable :envvar:`PYTHONPATH`, or from a built-in default if\n:envvar:`PYTHONPATH` is not set.  You can modify it using standard list\noperations::\n\n   >>> import sys\n   >>> sys.path.append('/ufs/guido/lib/python')\n\n\n.. _tut-dir:\n\nThe :func:`dir` Function\n========================\n\nThe built-in function :func:`dir` is used to find out which names a module\ndefines.  It returns a sorted list of strings::\n\n   >>> import fibo, sys\n   >>> dir(fibo)\n   ['__name__', 'fib', 'fib2']\n   >>> dir(sys)\n   ['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__',\n    '__stdin__', '__stdout__', '_getframe', 'api_version', 'argv',\n    'builtin_module_names', 'byteorder', 'callstats', 'copyright',\n    'displayhook', 'exc_info', 'excepthook',\n    'exec_prefix', 'executable', 'exit', 'getdefaultencoding', 'getdlopenflags',\n    'getrecursionlimit', 'getrefcount', 'hexversion', 'maxint', 'maxunicode',\n    'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache',\n    'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setdlopenflags',\n    'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout',\n    'version', 'version_info', 'warnoptions']\n\nWithout arguments, :func:`dir` lists the names you have defined currently::\n\n   >>> a = [1, 2, 3, 4, 5]\n   >>> import fibo\n   >>> fib = fibo.fib\n   >>> dir()\n   ['__builtins__', '__doc__', '__file__', '__name__', 'a', 'fib', 'fibo', 'sys']\n\nNote that it lists all types of names: variables, modules, functions, etc.\n\n.. index:: module: builtins\n\n:func:`dir` does not list the names of built-in functions and variables.  If you\nwant a list of those, they are defined in the standard module\n:mod:`builtins`::\n\n   >>> import builtins\n   >>> dir(builtins)\n\n   ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'Buffer\n   Error', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'Environme\n   ntError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'Generato\n   rExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexErr\n   or', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError',\n    'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'P\n   endingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', '\n   StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'Ta\n   bError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'Unicod\n   eEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserW\n   arning', 'ValueError', 'Warning', 'ZeroDivisionError', '__build_class__', '__deb\n   ug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any',\n   'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'chr', 'classmethod', 'compile', '\n   complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate\n   ', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr',\n   'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance',\n    'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memory\n   view', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property'\n   , 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sort\n   ed', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']\n\n.. _tut-packages:\n\nPackages\n========\n\nPackages are a way of structuring Python's module namespace by using \"dotted\nmodule names\".  For example, the module name :mod:`A.B` designates a submodule\nnamed ``B`` in a package named ``A``.  Just like the use of modules saves the\nauthors of different modules from having to worry about each other's global\nvariable names, the use of dotted module names saves the authors of multi-module\npackages like NumPy or the Python Imaging Library from having to worry about\neach other's module names.\n\nSuppose you want to design a collection of modules (a \"package\") for the uniform\nhandling of sound files and sound data.  There are many different sound file\nformats (usually recognized by their extension, for example: :file:`.wav`,\n:file:`.aiff`, :file:`.au`), so you may need to create and maintain a growing\ncollection of modules for the conversion between the various file formats.\nThere are also many different operations you might want to perform on sound data\n(such as mixing, adding echo, applying an equalizer function, creating an\nartificial stereo effect), so in addition you will be writing a never-ending\nstream of modules to perform these operations.  Here's a possible structure for\nyour package (expressed in terms of a hierarchical filesystem)::\n\n   sound/                          Top-level package\n         __init__.py               Initialize the sound package\n         formats/                  Subpackage for file format conversions\n                 __init__.py\n                 wavread.py\n                 wavwrite.py\n                 aiffread.py\n                 aiffwrite.py\n                 auread.py\n                 auwrite.py\n                 ...\n         effects/                  Subpackage for sound effects\n                 __init__.py\n                 echo.py\n                 surround.py\n                 reverse.py\n                 ...\n         filters/                  Subpackage for filters\n                 __init__.py\n                 equalizer.py\n                 vocoder.py\n                 karaoke.py\n                 ...\n\nWhen importing the package, Python searches through the directories on\n``sys.path`` looking for the package subdirectory.\n\nThe :file:`__init__.py` files are required to make Python treat the directories\nas containing packages; this is done to prevent directories with a common name,\nsuch as ``string``, from unintentionally hiding valid modules that occur later\non the module search path. In the simplest case, :file:`__init__.py` can just be\nan empty file, but it can also execute initialization code for the package or\nset the ``__all__`` variable, described later.\n\nUsers of the package can import individual modules from the package, for\nexample::\n\n   import sound.effects.echo\n\nThis loads the submodule :mod:`sound.effects.echo`.  It must be referenced with\nits full name. ::\n\n   sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)\n\nAn alternative way of importing the submodule is::\n\n   from sound.effects import echo\n\nThis also loads the submodule :mod:`echo`, and makes it available without its\npackage prefix, so it can be used as follows::\n\n   echo.echofilter(input, output, delay=0.7, atten=4)\n\nYet another variation is to import the desired function or variable directly::\n\n   from sound.effects.echo import echofilter\n\nAgain, this loads the submodule :mod:`echo`, but this makes its function\n:func:`echofilter` directly available::\n\n   echofilter(input, output, delay=0.7, atten=4)\n\nNote that when using ``from package import item``, the item can be either a\nsubmodule (or subpackage) of the package, or some  other name defined in the\npackage, like a function, class or variable.  The ``import`` statement first\ntests whether the item is defined in the package; if not, it assumes it is a\nmodule and attempts to load it.  If it fails to find it, an :exc:`ImportError`\nexception is raised.\n\nContrarily, when using syntax like ``import item.subitem.subsubitem``, each item\nexcept for the last must be a package; the last item can be a module or a\npackage but can't be a class or function or variable defined in the previous\nitem.\n\n\n.. _tut-pkg-import-star:\n\nImporting \\* From a Package\n---------------------------\n\n.. index:: single: __all__\n\nNow what happens when the user writes ``from sound.effects import *``?  Ideally,\none would hope that this somehow goes out to the filesystem, finds which\nsubmodules are present in the package, and imports them all.  This could take a\nlong time and importing sub-modules might have unwanted side-effects that should\nonly happen when the sub-module is explicitly imported.\n\nThe only solution is for the package author to provide an explicit index of the\npackage.  The :keyword:`import` statement uses the following convention: if a package's\n:file:`__init__.py` code defines a list named ``__all__``, it is taken to be the\nlist of module names that should be imported when ``from package import *`` is\nencountered.  It is up to the package author to keep this list up-to-date when a\nnew version of the package is released.  Package authors may also decide not to\nsupport it, if they don't see a use for importing \\* from their package.  For\nexample, the file :file:`sounds/effects/__init__.py` could contain the following\ncode::\n\n   __all__ = [\"echo\", \"surround\", \"reverse\"]\n\nThis would mean that ``from sound.effects import *`` would import the three\nnamed submodules of the :mod:`sound` package.\n\nIf ``__all__`` is not defined, the statement ``from sound.effects import *``\ndoes *not* import all submodules from the package :mod:`sound.effects` into the\ncurrent namespace; it only ensures that the package :mod:`sound.effects` has\nbeen imported (possibly running any initialization code in :file:`__init__.py`)\nand then imports whatever names are defined in the package.  This includes any\nnames defined (and submodules explicitly loaded) by :file:`__init__.py`.  It\nalso includes any submodules of the package that were explicitly loaded by\nprevious :keyword:`import` statements.  Consider this code::\n\n   import sound.effects.echo\n   import sound.effects.surround\n   from sound.effects import *\n\nIn this example, the :mod:`echo` and :mod:`surround` modules are imported in the\ncurrent namespace because they are defined in the :mod:`sound.effects` package\nwhen the ``from...import`` statement is executed.  (This also works when\n``__all__`` is defined.)\n\nAlthough certain modules are designed to export only names that follow certain\npatterns when you use ``import *``, it is still considered bad practise in\nproduction code.\n\nRemember, there is nothing wrong with using ``from Package import\nspecific_submodule``!  In fact, this is the recommended notation unless the\nimporting module needs to use submodules with the same name from different\npackages.\n\n\nIntra-package References\n------------------------\n\nWhen packages are structured into subpackages (as with the :mod:`sound` package\nin the example), you can use absolute imports to refer to submodules of siblings\npackages.  For example, if the module :mod:`sound.filters.vocoder` needs to use\nthe :mod:`echo` module in the :mod:`sound.effects` package, it can use ``from\nsound.effects import echo``.\n\nYou can also write relative imports, with the ``from module import name`` form\nof import statement.  These imports use leading dots to indicate the current and\nparent packages involved in the relative import.  From the :mod:`surround`\nmodule for example, you might use::\n\n   from . import echo\n   from .. import formats\n   from ..filters import equalizer\n\nNote that relative imports are based on the name of the current module.  Since\nthe name of the main module is always ``\"__main__\"``, modules intended for use\nas the main module of a Python application must always use absolute imports.\n\n\nPackages in Multiple Directories\n--------------------------------\n\nPackages support one more special attribute, :attr:`__path__`.  This is\ninitialized to be a list containing the name of the directory holding the\npackage's :file:`__init__.py` before the code in that file is executed.  This\nvariable can be modified; doing so affects future searches for modules and\nsubpackages contained in the package.\n\nWhile this feature is not often needed, it can be used to extend the set of\nmodules found in a package.\n\n\n.. rubric:: Footnotes\n\n.. [#] In fact function definitions are also 'statements' that are 'executed'; the\n   execution of a module-level function enters the function name in the module's\n   global symbol table.\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Doc/whatsnew/2.2.rst": "****************************\n  What's New in Python 2.2\n****************************\n\n:Author: A.M. Kuchling\n\n.. |release| replace:: 1.02\n\n.. $Id: whatsnew22.tex 37315 2004-09-10 19:33:00Z akuchling $\n\n\nIntroduction\n============\n\nThis article explains the new features in Python 2.2.2, released on October 14,\n2002.  Python 2.2.2 is a bugfix release of Python 2.2, originally released on\nDecember 21, 2001.\n\nPython 2.2 can be thought of as the \"cleanup release\".  There are some features\nsuch as generators and iterators that are completely new, but most of the\nchanges, significant and far-reaching though they may be, are aimed at cleaning\nup irregularities and dark corners of the language design.\n\nThis article doesn't attempt to provide a complete specification of the new\nfeatures, but instead provides a convenient overview.  For full details, you\nshould refer to the documentation for Python 2.2, such as the `Python Library\nReference <http://www.python.org/doc/2.2/lib/lib.html>`_ and the `Python\nReference Manual <http://www.python.org/doc/2.2/ref/ref.html>`_.  If you want to\nunderstand the complete implementation and design rationale for a change, refer\nto the PEP for a particular new feature.\n\n\n.. see also, now defunct\n\n   http://www.unixreview.com/documents/s=1356/urm0109h/0109h.htm\n      \"What's So Special About Python 2.2?\" is also about the new 2.2 features, and\n      was written by Cameron Laird and Kathryn Soraiz.\n\n.. ======================================================================\n\n\nPEPs 252 and 253: Type and Class Changes\n========================================\n\nThe largest and most far-reaching changes in Python 2.2 are to Python's model of\nobjects and classes.  The changes should be backward compatible, so it's likely\nthat your code will continue to run unchanged, but the changes provide some\namazing new capabilities. Before beginning this, the longest and most\ncomplicated section of this article, I'll provide an overview of the changes and\noffer some comments.\n\nA long time ago I wrote a Web page listing flaws in Python's design.  One of the\nmost significant flaws was that it's impossible to subclass Python types\nimplemented in C.  In particular, it's not possible to subclass built-in types,\nso you can't just subclass, say, lists in order to add a single useful method to\nthem. The :mod:`UserList` module provides a class that supports all of the\nmethods of lists and that can be subclassed further, but there's lots of C code\nthat expects a regular Python list and won't accept a :class:`UserList`\ninstance.\n\nPython 2.2 fixes this, and in the process adds some exciting new capabilities.\nA brief summary:\n\n* You can subclass built-in types such as lists and even integers, and your\n  subclasses should work in every place that requires the original type.\n\n* It's now possible to define static and class methods, in addition to the\n  instance methods available in previous versions of Python.\n\n* It's also possible to automatically call methods on accessing or setting an\n  instance attribute by using a new mechanism called :dfn:`properties`.  Many uses\n  of :meth:`__getattr__` can be rewritten to use properties instead, making the\n  resulting code simpler and faster.  As a small side benefit, attributes can now\n  have docstrings, too.\n\n* The list of legal attributes for an instance can be limited to a particular\n  set using :dfn:`slots`, making it possible to safeguard against typos and\n  perhaps make more optimizations possible in future versions of Python.\n\nSome users have voiced concern about all these changes.  Sure, they say, the new\nfeatures are neat and lend themselves to all sorts of tricks that weren't\npossible in previous versions of Python, but they also make the language more\ncomplicated.  Some people have said that they've always recommended Python for\nits simplicity, and feel that its simplicity is being lost.\n\nPersonally, I think there's no need to worry.  Many of the new features are\nquite esoteric, and you can write a lot of Python code without ever needed to be\naware of them.  Writing a simple class is no more difficult than it ever was, so\nyou don't need to bother learning or teaching them unless they're actually\nneeded.  Some very complicated tasks that were previously only possible from C\nwill now be possible in pure Python, and to my mind that's all for the better.\n\nI'm not going to attempt to cover every single corner case and small change that\nwere required to make the new features work.  Instead this section will paint\nonly the broad strokes.  See section :ref:`sect-rellinks`, \"Related Links\", for\nfurther sources of information about Python 2.2's new object model.\n\n\nOld and New Classes\n-------------------\n\nFirst, you should know that Python 2.2 really has two kinds of classes: classic\nor old-style classes, and new-style classes.  The old-style class model is\nexactly the same as the class model in earlier versions of Python.  All the new\nfeatures described in this section apply only to new-style classes. This\ndivergence isn't intended to last forever; eventually old-style classes will be\ndropped, possibly in Python 3.0.\n\nSo how do you define a new-style class?  You do it by subclassing an existing\nnew-style class.  Most of Python's built-in types, such as integers, lists,\ndictionaries, and even files, are new-style classes now.  A new-style class\nnamed :class:`object`, the base class for all built-in types, has also been\nadded so if no built-in type is suitable, you can just subclass\n:class:`object`::\n\n   class C(object):\n       def __init__ (self):\n           ...\n       ...\n\nThis means that :keyword:`class` statements that don't have any base classes are\nalways classic classes in Python 2.2.  (Actually you can also change this by\nsetting a module-level variable named :attr:`__metaclass__` --- see :pep:`253`\nfor the details --- but it's easier to just subclass :keyword:`object`.)\n\nThe type objects for the built-in types are available as built-ins, named using\na clever trick.  Python has always had built-in functions named :func:`int`,\n:func:`float`, and :func:`str`.  In 2.2, they aren't functions any more, but\ntype objects that behave as factories when called. ::\n\n   >>> int\n   <type 'int'>\n   >>> int('123')\n   123\n\nTo make the set of types complete, new type objects such as :func:`dict` and\n:func:`file` have been added.  Here's a more interesting example, adding a\n:meth:`lock` method to file objects::\n\n   class LockableFile(file):\n       def lock (self, operation, length=0, start=0, whence=0):\n           import fcntl\n           return fcntl.lockf(self.fileno(), operation,\n                              length, start, whence)\n\nThe now-obsolete :mod:`posixfile` module contained a class that emulated all of\na file object's methods and also added a :meth:`lock` method, but this class\ncouldn't be passed to internal functions that expected a built-in file,\nsomething which is possible with our new :class:`LockableFile`.\n\n\nDescriptors\n-----------\n\nIn previous versions of Python, there was no consistent way to discover what\nattributes and methods were supported by an object. There were some informal\nconventions, such as defining :attr:`__members__` and :attr:`__methods__`\nattributes that were lists of names, but often the author of an extension type\nor a class wouldn't bother to define them.  You could fall back on inspecting\nthe :attr:`__dict__` of an object, but when class inheritance or an arbitrary\n:meth:`__getattr__` hook were in use this could still be inaccurate.\n\nThe one big idea underlying the new class model is that an API for describing\nthe attributes of an object using :dfn:`descriptors` has been formalized.\nDescriptors specify the value of an attribute, stating whether it's a method or\na field.  With the descriptor API, static methods and class methods become\npossible, as well as more exotic constructs.\n\nAttribute descriptors are objects that live inside class objects, and have a few\nattributes of their own:\n\n* :attr:`__name__` is the attribute's name.\n\n* :attr:`__doc__` is the attribute's docstring.\n\n* :meth:`__get__(object)` is a method that retrieves the attribute value from\n  *object*.\n\n* :meth:`__set__(object, value)` sets the attribute on *object* to *value*.\n\n* :meth:`__delete__(object, value)` deletes the *value*  attribute of *object*.\n\nFor example, when you write ``obj.x``, the steps that Python actually performs\nare::\n\n   descriptor = obj.__class__.x\n   descriptor.__get__(obj)\n\nFor methods, :meth:`descriptor.__get__` returns a temporary object that's\ncallable, and wraps up the instance and the method to be called on it. This is\nalso why static methods and class methods are now possible; they have\ndescriptors that wrap up just the method, or the method and the class.  As a\nbrief explanation of these new kinds of methods, static methods aren't passed\nthe instance, and therefore resemble regular functions.  Class methods are\npassed the class of the object, but not the object itself.  Static and class\nmethods are defined like this::\n\n   class C(object):\n       def f(arg1, arg2):\n           ...\n       f = staticmethod(f)\n\n       def g(cls, arg1, arg2):\n           ...\n       g = classmethod(g)\n\nThe :func:`staticmethod` function takes the function :func:`f`, and returns it\nwrapped up in a descriptor so it can be stored in the class object.  You might\nexpect there to be special syntax for creating such methods (``def static f``,\n``defstatic f()``, or something like that) but no such syntax has been defined\nyet; that's been left for future versions of Python.\n\nMore new features, such as slots and properties, are also implemented as new\nkinds of descriptors, and it's not difficult to write a descriptor class that\ndoes something novel.  For example, it would be possible to write a descriptor\nclass that made it possible to write Eiffel-style preconditions and\npostconditions for a method.  A class that used this feature might be defined\nlike this::\n\n   from eiffel import eiffelmethod\n\n   class C(object):\n       def f(self, arg1, arg2):\n           # The actual function\n           ...\n       def pre_f(self):\n           # Check preconditions\n           ...\n       def post_f(self):\n           # Check postconditions\n           ...\n\n       f = eiffelmethod(f, pre_f, post_f)\n\nNote that a person using the new :func:`eiffelmethod` doesn't have to understand\nanything about descriptors.  This is why I think the new features don't increase\nthe basic complexity of the language. There will be a few wizards who need to\nknow about it in order to write :func:`eiffelmethod` or the ZODB or whatever,\nbut most users will just write code on top of the resulting libraries and ignore\nthe implementation details.\n\n\nMultiple Inheritance: The Diamond Rule\n--------------------------------------\n\nMultiple inheritance has also been made more useful through changing the rules\nunder which names are resolved.  Consider this set of classes (diagram taken\nfrom :pep:`253` by Guido van Rossum)::\n\n         class A:\n           ^ ^  def save(self): ...\n          /   \\\n         /     \\\n        /       \\\n       /         \\\n   class B     class C:\n       ^         ^  def save(self): ...\n        \\       /\n         \\     /\n          \\   /\n           \\ /\n         class D\n\nThe lookup rule for classic classes is simple but not very smart; the base\nclasses are searched depth-first, going from left to right.  A reference to\n:meth:`D.save` will search the classes :class:`D`, :class:`B`, and then\n:class:`A`, where :meth:`save` would be found and returned.  :meth:`C.save`\nwould never be found at all.  This is bad, because if :class:`C`'s :meth:`save`\nmethod is saving some internal state specific to :class:`C`, not calling it will\nresult in that state never getting saved.\n\nNew-style classes follow a different algorithm that's a bit more complicated to\nexplain, but does the right thing in this situation. (Note that Python 2.3\nchanges this algorithm to one that produces the same results in most cases, but\nproduces more useful results for really complicated inheritance graphs.)\n\n#. List all the base classes, following the classic lookup rule and include a\n   class multiple times if it's visited repeatedly.  In the above example, the list\n   of visited classes is [:class:`D`, :class:`B`, :class:`A`, :class:`C`,\n   :class:`A`].\n\n#. Scan the list for duplicated classes.  If any are found, remove all but one\n   occurrence, leaving the *last* one in the list.  In the above example, the list\n   becomes [:class:`D`, :class:`B`, :class:`C`, :class:`A`] after dropping\n   duplicates.\n\nFollowing this rule, referring to :meth:`D.save` will return :meth:`C.save`,\nwhich is the behaviour we're after.  This lookup rule is the same as the one\nfollowed by Common Lisp.  A new built-in function, :func:`super`, provides a way\nto get at a class's superclasses without having to reimplement Python's\nalgorithm. The most commonly used form will be  :func:`super(class, obj)`, which\nreturns  a bound superclass object (not the actual class object).  This form\nwill be used in methods to call a method in the superclass; for example,\n:class:`D`'s :meth:`save` method would look like this::\n\n   class D (B,C):\n       def save (self):\n           # Call superclass .save()\n           super(D, self).save()\n           # Save D's private information here\n           ...\n\n:func:`super` can also return unbound superclass objects when called as\n:func:`super(class)` or :func:`super(class1, class2)`, but this probably won't\noften be useful.\n\n\nAttribute Access\n----------------\n\nA fair number of sophisticated Python classes define hooks for attribute access\nusing :meth:`__getattr__`; most commonly this is done for convenience, to make\ncode more readable by automatically mapping an attribute access such as\n``obj.parent`` into a method call such as ``obj.get_parent``.  Python 2.2 adds\nsome new ways of controlling attribute access.\n\nFirst, :meth:`__getattr__(attr_name)` is still supported by new-style classes,\nand nothing about it has changed.  As before, it will be called when an attempt\nis made to access ``obj.foo`` and no attribute named ``foo`` is found in the\ninstance's dictionary.\n\nNew-style classes also support a new method,\n:meth:`__getattribute__(attr_name)`.  The difference between the two methods is\nthat :meth:`__getattribute__` is *always* called whenever any attribute is\naccessed, while the old :meth:`__getattr__` is only called if ``foo`` isn't\nfound in the instance's dictionary.\n\nHowever, Python 2.2's support for :dfn:`properties` will often be a simpler way\nto trap attribute references.  Writing a :meth:`__getattr__` method is\ncomplicated because to avoid recursion you can't use regular attribute accesses\ninside them, and instead have to mess around with the contents of\n:attr:`__dict__`. :meth:`__getattr__` methods also end up being called by Python\nwhen it checks for other methods such as :meth:`__repr__` or :meth:`__coerce__`,\nand so have to be written with this in mind. Finally, calling a function on\nevery attribute access results in a sizable performance loss.\n\n:class:`property` is a new built-in type that packages up three functions that\nget, set, or delete an attribute, and a docstring.  For example, if you want to\ndefine a :attr:`size` attribute that's computed, but also settable, you could\nwrite::\n\n   class C(object):\n       def get_size (self):\n           result = ... computation ...\n           return result\n       def set_size (self, size):\n           ... compute something based on the size\n           and set internal state appropriately ...\n\n       # Define a property.  The 'delete this attribute'\n       # method is defined as None, so the attribute\n       # can't be deleted.\n       size = property(get_size, set_size,\n                       None,\n                       \"Storage size of this instance\")\n\nThat is certainly clearer and easier to write than a pair of\n:meth:`__getattr__`/:meth:`__setattr__` methods that check for the :attr:`size`\nattribute and handle it specially while retrieving all other attributes from the\ninstance's :attr:`__dict__`.  Accesses to :attr:`size` are also the only ones\nwhich have to perform the work of calling a function, so references to other\nattributes run at their usual speed.\n\nFinally, it's possible to constrain the list of attributes that can be\nreferenced on an object using the new :attr:`__slots__` class attribute. Python\nobjects are usually very dynamic; at any time it's possible to define a new\nattribute on an instance by just doing ``obj.new_attr=1``.   A new-style class\ncan define a class attribute named :attr:`__slots__` to limit the legal\nattributes  to a particular set of names.  An example will make this clear::\n\n   >>> class C(object):\n   ...     __slots__ = ('template', 'name')\n   ...\n   >>> obj = C()\n   >>> print obj.template\n   None\n   >>> obj.template = 'Test'\n   >>> print obj.template\n   Test\n   >>> obj.newattr = None\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   AttributeError: 'C' object has no attribute 'newattr'\n\nNote how you get an :exc:`AttributeError` on the attempt to assign to an\nattribute not listed in :attr:`__slots__`.\n\n\n.. _sect-rellinks:\n\nRelated Links\n-------------\n\nThis section has just been a quick overview of the new features, giving enough\nof an explanation to start you programming, but many details have been\nsimplified or ignored.  Where should you go to get a more complete picture?\n\nhttp://www.python.org/2.2/descrintro.html is a lengthy tutorial introduction to\nthe descriptor features, written by Guido van Rossum. If my description has\nwhetted your appetite, go read this tutorial next, because it goes into much\nmore detail about the new features while still remaining quite easy to read.\n\nNext, there are two relevant PEPs, :pep:`252` and :pep:`253`.  :pep:`252` is\ntitled \"Making Types Look More Like Classes\", and covers the descriptor API.\n:pep:`253` is titled \"Subtyping Built-in Types\", and describes the changes to\ntype objects that make it possible to subtype built-in objects.  :pep:`253` is\nthe more complicated PEP of the two, and at a few points the necessary\nexplanations of types and meta-types may cause your head to explode.  Both PEPs\nwere written and implemented by Guido van Rossum, with substantial assistance\nfrom the rest of the Zope Corp. team.\n\nFinally, there's the ultimate authority: the source code.  Most of the machinery\nfor the type handling is in :file:`Objects/typeobject.c`, but you should only\nresort to it after all other avenues have been exhausted, including posting a\nquestion to python-list or python-dev.\n\n.. ======================================================================\n\n\nPEP 234: Iterators\n==================\n\nAnother significant addition to 2.2 is an iteration interface at both the C and\nPython levels.  Objects can define how they can be looped over by callers.\n\nIn Python versions up to 2.1, the usual way to make ``for item in obj`` work is\nto define a :meth:`__getitem__` method that looks something like this::\n\n   def __getitem__(self, index):\n       return <next item>\n\n:meth:`__getitem__` is more properly used to define an indexing operation on an\nobject so that you can write ``obj[5]`` to retrieve the sixth element.  It's a\nbit misleading when you're using this only to support :keyword:`for` loops.\nConsider some file-like object that wants to be looped over; the *index*\nparameter is essentially meaningless, as the class probably assumes that a\nseries of :meth:`__getitem__` calls will be made with *index* incrementing by\none each time.  In other words, the presence of the :meth:`__getitem__` method\ndoesn't mean that using ``file[5]``  to randomly access the sixth element will\nwork, though it really should.\n\nIn Python 2.2, iteration can be implemented separately, and :meth:`__getitem__`\nmethods can be limited to classes that really do support random access.  The\nbasic idea of iterators is  simple.  A new built-in function, :func:`iter(obj)`\nor ``iter(C, sentinel)``, is used to get an iterator. :func:`iter(obj)` returns\nan iterator for the object *obj*, while ``iter(C, sentinel)`` returns an\niterator that will invoke the callable object *C* until it returns *sentinel* to\nsignal that the iterator is done.\n\nPython classes can define an :meth:`__iter__` method, which should create and\nreturn a new iterator for the object; if the object is its own iterator, this\nmethod can just return ``self``.  In particular, iterators will usually be their\nown iterators.  Extension types implemented in C can implement a :attr:`tp_iter`\nfunction in order to return an iterator, and extension types that want to behave\nas iterators can define a :attr:`tp_iternext` function.\n\nSo, after all this, what do iterators actually do?  They have one required\nmethod, :meth:`next`, which takes no arguments and returns the next value.  When\nthere are no more values to be returned, calling :meth:`next` should raise the\n:exc:`StopIteration` exception. ::\n\n   >>> L = [1,2,3]\n   >>> i = iter(L)\n   >>> print i\n   <iterator object at 0x8116870>\n   >>> i.next()\n   1\n   >>> i.next()\n   2\n   >>> i.next()\n   3\n   >>> i.next()\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n   StopIteration\n   >>>\n\nIn 2.2, Python's :keyword:`for` statement no longer expects a sequence; it\nexpects something for which :func:`iter` will return an iterator. For backward\ncompatibility and convenience, an iterator is automatically constructed for\nsequences that don't implement :meth:`__iter__` or a :attr:`tp_iter` slot, so\n``for i in [1,2,3]`` will still work.  Wherever the Python interpreter loops\nover a sequence, it's been changed to use the iterator protocol.  This means you\ncan do things like this::\n\n   >>> L = [1,2,3]\n   >>> i = iter(L)\n   >>> a,b,c = i\n   >>> a,b,c\n   (1, 2, 3)\n\nIterator support has been added to some of Python's basic types.   Calling\n:func:`iter` on a dictionary will return an iterator which loops over its keys::\n\n   >>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,\n   ...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\n   >>> for key in m: print key, m[key]\n   ...\n   Mar 3\n   Feb 2\n   Aug 8\n   Sep 9\n   May 5\n   Jun 6\n   Jul 7\n   Jan 1\n   Apr 4\n   Nov 11\n   Dec 12\n   Oct 10\n\nThat's just the default behaviour.  If you want to iterate over keys, values, or\nkey/value pairs, you can explicitly call the :meth:`iterkeys`,\n:meth:`itervalues`, or :meth:`iteritems` methods to get an appropriate iterator.\nIn a minor related change, the :keyword:`in` operator now works on dictionaries,\nso ``key in dict`` is now equivalent to ``dict.has_key(key)``.\n\nFiles also provide an iterator, which calls the :meth:`readline` method until\nthere are no more lines in the file.  This means you can now read each line of a\nfile using code like this::\n\n   for line in file:\n       # do something for each line\n       ...\n\nNote that you can only go forward in an iterator; there's no way to get the\nprevious element, reset the iterator, or make a copy of it. An iterator object\ncould provide such additional capabilities, but the iterator protocol only\nrequires a :meth:`next` method.\n\n\n.. seealso::\n\n   :pep:`234` - Iterators\n      Written by Ka-Ping Yee and GvR; implemented  by the Python Labs crew, mostly by\n      GvR and Tim Peters.\n\n.. ======================================================================\n\n\nPEP 255: Simple Generators\n==========================\n\nGenerators are another new feature, one that interacts with the introduction of\niterators.\n\nYou're doubtless familiar with how function calls work in Python or C.  When you\ncall a function, it gets a private namespace where its local variables are\ncreated.  When the function reaches a :keyword:`return` statement, the local\nvariables are destroyed and the resulting value is returned to the caller.  A\nlater call to the same function will get a fresh new set of local variables.\nBut, what if the local variables weren't thrown away on exiting a function?\nWhat if you could later resume the function where it left off?  This is what\ngenerators provide; they can be thought of as resumable functions.\n\nHere's the simplest example of a generator function::\n\n   def generate_ints(N):\n       for i in range(N):\n           yield i\n\nA new keyword, :keyword:`yield`, was introduced for generators.  Any function\ncontaining a :keyword:`yield` statement is a generator function; this is\ndetected by Python's bytecode compiler which compiles the function specially as\na result.  Because a new keyword was introduced, generators must be explicitly\nenabled in a module by including a ``from __future__ import generators``\nstatement near the top of the module's source code.  In Python 2.3 this\nstatement will become unnecessary.\n\nWhen you call a generator function, it doesn't return a single value; instead it\nreturns a generator object that supports the iterator protocol.  On executing\nthe :keyword:`yield` statement, the generator outputs the value of ``i``,\nsimilar to a :keyword:`return` statement.  The big difference between\n:keyword:`yield` and a :keyword:`return` statement is that on reaching a\n:keyword:`yield` the generator's state of execution is suspended and local\nvariables are preserved.  On the next call to the generator's ``next()`` method,\nthe function will resume executing immediately after the :keyword:`yield`\nstatement.  (For complicated reasons, the :keyword:`yield` statement isn't\nallowed inside the :keyword:`try` block of a :keyword:`try`...\\\n:keyword:`finally` statement; read :pep:`255` for a full explanation of the\ninteraction between :keyword:`yield` and exceptions.)\n\nHere's a sample usage of the :func:`generate_ints` generator::\n\n   >>> gen = generate_ints(3)\n   >>> gen\n   <generator object at 0x8117f90>\n   >>> gen.next()\n   0\n   >>> gen.next()\n   1\n   >>> gen.next()\n   2\n   >>> gen.next()\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in ?\n     File \"<stdin>\", line 2, in generate_ints\n   StopIteration\n\nYou could equally write ``for i in generate_ints(5)``, or ``a,b,c =\ngenerate_ints(3)``.\n\nInside a generator function, the :keyword:`return` statement can only be used\nwithout a value, and signals the end of the procession of values; afterwards the\ngenerator cannot return any further values. :keyword:`return` with a value, such\nas ``return 5``, is a syntax error inside a generator function.  The end of the\ngenerator's results can also be indicated by raising :exc:`StopIteration`\nmanually, or by just letting the flow of execution fall off the bottom of the\nfunction.\n\nYou could achieve the effect of generators manually by writing your own class\nand storing all the local variables of the generator as instance variables.  For\nexample, returning a list of integers could be done by setting ``self.count`` to\n0, and having the :meth:`next` method increment ``self.count`` and return it.\nHowever, for a moderately complicated generator, writing a corresponding class\nwould be much messier. :file:`Lib/test/test_generators.py` contains a number of\nmore interesting examples.  The simplest one implements an in-order traversal of\na tree using generators recursively. ::\n\n   # A recursive generator that generates Tree leaves in in-order.\n   def inorder(t):\n       if t:\n           for x in inorder(t.left):\n               yield x\n           yield t.label\n           for x in inorder(t.right):\n               yield x\n\nTwo other examples in :file:`Lib/test/test_generators.py` produce solutions for\nthe N-Queens problem (placing $N$ queens on an $NxN$ chess board so that no\nqueen threatens another) and the Knight's Tour (a route that takes a knight to\nevery square of an $NxN$ chessboard without visiting any square twice).\n\nThe idea of generators comes from other programming languages, especially Icon\n(http://www.cs.arizona.edu/icon/), where the idea of generators is central.  In\nIcon, every expression and function call behaves like a generator.  One example\nfrom \"An Overview of the Icon Programming Language\" at\nhttp://www.cs.arizona.edu/icon/docs/ipd266.htm gives an idea of what this looks\nlike::\n\n   sentence := \"Store it in the neighboring harbor\"\n   if (i := find(\"or\", sentence)) > 5 then write(i)\n\nIn Icon the :func:`find` function returns the indexes at which the substring\n\"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i`` is first\nassigned a value of 3, but 3 is less than 5, so the comparison fails, and Icon\nretries it with the second value of 23.  23 is greater than 5, so the comparison\nnow succeeds, and the code prints the value 23 to the screen.\n\nPython doesn't go nearly as far as Icon in adopting generators as a central\nconcept.  Generators are considered a new part of the core Python language, but\nlearning or using them isn't compulsory; if they don't solve any problems that\nyou have, feel free to ignore them. One novel feature of Python's interface as\ncompared to Icon's is that a generator's state is represented as a concrete\nobject (the iterator) that can be passed around to other functions or stored in\na data structure.\n\n\n.. seealso::\n\n   :pep:`255` - Simple Generators\n      Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented mostly\n      by Neil Schemenauer and Tim Peters, with other fixes from the Python Labs crew.\n\n.. ======================================================================\n\n\nPEP 237: Unifying Long Integers and Integers\n============================================\n\nIn recent versions, the distinction between regular integers, which are 32-bit\nvalues on most machines, and long integers, which can be of arbitrary size, was\nbecoming an annoyance.  For example, on platforms that support files larger than\n``2**32`` bytes, the :meth:`tell` method of file objects has to return a long\ninteger. However, there were various bits of Python that expected plain integers\nand would raise an error if a long integer was provided instead.  For example,\nin Python 1.5, only regular integers could be used as a slice index, and\n``'abc'[1L:]`` would raise a :exc:`TypeError` exception with the message 'slice\nindex must be int'.\n\nPython 2.2 will shift values from short to long integers as required. The 'L'\nsuffix is no longer needed to indicate a long integer literal, as now the\ncompiler will choose the appropriate type.  (Using the 'L' suffix will be\ndiscouraged in future 2.x versions of Python, triggering a warning in Python\n2.4, and probably dropped in Python 3.0.)  Many operations that used to raise an\n:exc:`OverflowError` will now return a long integer as their result.  For\nexample::\n\n   >>> 1234567890123\n   1234567890123L\n   >>> 2 ** 64\n   18446744073709551616L\n\nIn most cases, integers and long integers will now be treated identically.  You\ncan still distinguish them with the :func:`type` built-in function, but that's\nrarely needed.\n\n\n.. seealso::\n\n   :pep:`237` - Unifying Long Integers and Integers\n      Written by Moshe Zadka and Guido van Rossum.  Implemented mostly by Guido van\n      Rossum.\n\n.. ======================================================================\n\n\nPEP 238: Changing the Division Operator\n=======================================\n\nThe most controversial change in Python 2.2 heralds the start of an effort to\nfix an old design flaw that's been in Python from the beginning. Currently\nPython's division operator, ``/``, behaves like C's division operator when\npresented with two integer arguments: it returns an integer result that's\ntruncated down when there would be a fractional part.  For example, ``3/2`` is\n1, not 1.5, and ``(-1)/2`` is -1, not -0.5.  This means that the results of\ndivision can vary unexpectedly depending on the type of the two operands and\nbecause Python is dynamically typed, it can be difficult to determine the\npossible types of the operands.\n\n(The controversy is over whether this is *really* a design flaw, and whether\nit's worth breaking existing code to fix this.  It's caused endless discussions\non python-dev, and in July 2001 erupted into an storm of acidly sarcastic\npostings on :newsgroup:`comp.lang.python`. I won't argue for either side here\nand will stick to describing what's  implemented in 2.2.  Read :pep:`238` for a\nsummary of arguments and counter-arguments.)\n\nBecause this change might break code, it's being introduced very gradually.\nPython 2.2 begins the transition, but the switch won't be complete until Python\n3.0.\n\nFirst, I'll borrow some terminology from :pep:`238`.  \"True division\" is the\ndivision that most non-programmers are familiar with: 3/2 is 1.5, 1/4 is 0.25,\nand so forth.  \"Floor division\" is what Python's ``/`` operator currently does\nwhen given integer operands; the result is the floor of the value returned by\ntrue division.  \"Classic division\" is the current mixed behaviour of ``/``; it\nreturns the result of floor division when the operands are integers, and returns\nthe result of true division when one of the operands is a floating-point number.\n\nHere are the changes 2.2 introduces:\n\n* A new operator, ``//``, is the floor division operator. (Yes, we know it looks\n  like C++'s comment symbol.)  ``//`` *always* performs floor division no matter\n  what the types of its operands are, so ``1 // 2`` is 0 and ``1.0 // 2.0`` is\n  also 0.0.\n\n  ``//`` is always available in Python 2.2; you don't need to enable it using a\n  ``__future__`` statement.\n\n* By including a ``from __future__ import division`` in a module, the ``/``\n  operator will be changed to return the result of true division, so ``1/2`` is\n  0.5.  Without the ``__future__`` statement, ``/`` still means classic division.\n  The default meaning of ``/`` will not change until Python 3.0.\n\n* Classes can define methods called :meth:`__truediv__` and :meth:`__floordiv__`\n  to overload the two division operators.  At the C level, there are also slots in\n  the :ctype:`PyNumberMethods` structure so extension types can define the two\n  operators.\n\n* Python 2.2 supports some command-line arguments for testing whether code will\n  works with the changed division semantics.  Running python with :option:`-Q\n  warn` will cause a warning to be issued whenever division is applied to two\n  integers.  You can use this to find code that's affected by the change and fix\n  it.  By default, Python 2.2 will simply perform classic division without a\n  warning; the warning will be turned on by default in Python 2.3.\n\n\n.. seealso::\n\n   :pep:`238` - Changing the Division Operator\n      Written by Moshe Zadka and  Guido van Rossum.  Implemented by Guido van Rossum..\n\n.. ======================================================================\n\n\nUnicode Changes\n===============\n\nPython's Unicode support has been enhanced a bit in 2.2.  Unicode strings are\nusually stored as UCS-2, as 16-bit unsigned integers. Python 2.2 can also be\ncompiled to use UCS-4, 32-bit unsigned integers, as its internal encoding by\nsupplying :option:`--enable-unicode=ucs4` to the configure script.   (It's also\npossible to specify :option:`--disable-unicode` to completely disable Unicode\nsupport.)\n\nWhen built to use UCS-4 (a \"wide Python\"), the interpreter can natively handle\nUnicode characters from U+000000 to U+110000, so the range of legal values for\nthe :func:`unichr` function is expanded accordingly.  Using an interpreter\ncompiled to use UCS-2 (a \"narrow Python\"), values greater than 65535 will still\ncause :func:`unichr` to raise a :exc:`ValueError` exception. This is all\ndescribed in :pep:`261`, \"Support for 'wide' Unicode characters\"; consult it for\nfurther details.\n\nAnother change is simpler to explain. Since their introduction, Unicode strings\nhave supported an :meth:`encode` method to convert the string to a selected\nencoding such as UTF-8 or Latin-1.  A symmetric :meth:`decode([*encoding*])`\nmethod has been added to 8-bit strings (though not to Unicode strings) in 2.2.\n:meth:`decode` assumes that the string is in the specified encoding and decodes\nit, returning whatever is returned by the codec.\n\nUsing this new feature, codecs have been added for tasks not directly related to\nUnicode.  For example, codecs have been added for uu-encoding, MIME's base64\nencoding, and compression with the :mod:`zlib` module::\n\n   >>> s = \"\"\"Here is a lengthy piece of redundant, overly verbose,\n   ... and repetitive text.\n   ... \"\"\"\n   >>> data = s.encode('zlib')\n   >>> data\n   'x\\x9c\\r\\xc9\\xc1\\r\\x80 \\x10\\x04\\xc0?Ul...'\n   >>> data.decode('zlib')\n   'Here is a lengthy piece of redundant, overly verbose,\\nand repetitive text.\\n'\n   >>> print s.encode('uu')\n   begin 666 <data>\n   M2&5R92!I<R!A(&QE;F=T:'D@<&EE8V4@;V8@<F5D=6YD86YT+\"!O=F5R;'D@\n   >=F5R8F]S92P*86YD(')E<&5T:71I=F4@=&5X=\"X*\n\n   end\n   >>> \"sheesh\".encode('rot-13')\n   'furrfu'\n\nTo convert a class instance to Unicode, a :meth:`__unicode__` method can be\ndefined by a class, analogous to :meth:`__str__`.\n\n:meth:`encode`, :meth:`decode`, and :meth:`__unicode__` were implemented by\nMarc-Andr\u00e9 Lemburg.  The changes to support using UCS-4 internally were\nimplemented by Fredrik Lundh and Martin von L\u00f6wis.\n\n\n.. seealso::\n\n   :pep:`261` - Support for 'wide' Unicode characters\n      Written by Paul Prescod.\n\n.. ======================================================================\n\n\nPEP 227: Nested Scopes\n======================\n\nIn Python 2.1, statically nested scopes were added as an optional feature, to be\nenabled by a ``from __future__ import nested_scopes`` directive.  In 2.2 nested\nscopes no longer need to be specially enabled, and are now always present.  The\nrest of this section is a copy of the description of nested scopes from my\n\"What's New in Python 2.1\" document; if you read it when 2.1 came out, you can\nskip the rest of this section.\n\nThe largest change introduced in Python 2.1, and made complete in 2.2, is to\nPython's scoping rules.  In Python 2.0, at any given time there are at most\nthree namespaces used to look up variable names: local, module-level, and the\nbuilt-in namespace.  This often surprised people because it didn't match their\nintuitive expectations.  For example, a nested recursive function definition\ndoesn't work::\n\n   def f():\n       ...\n       def g(value):\n           ...\n           return g(value-1) + 1\n       ...\n\nThe function :func:`g` will always raise a :exc:`NameError` exception, because\nthe binding of the name ``g`` isn't in either its local namespace or in the\nmodule-level namespace.  This isn't much of a problem in practice (how often do\nyou recursively define interior functions like this?), but this also made using\nthe :keyword:`lambda` statement clumsier, and this was a problem in practice.\nIn code which uses :keyword:`lambda` you can often find local variables being\ncopied by passing them as the default values of arguments. ::\n\n   def find(self, name):\n       \"Return list of any entries equal to 'name'\"\n       L = filter(lambda x, name=name: x == name,\n                  self.list_attribute)\n       return L\n\nThe readability of Python code written in a strongly functional style suffers\ngreatly as a result.\n\nThe most significant change to Python 2.2 is that static scoping has been added\nto the language to fix this problem.  As a first effect, the ``name=name``\ndefault argument is now unnecessary in the above example.  Put simply, when a\ngiven variable name is not assigned a value within a function (by an assignment,\nor the :keyword:`def`, :keyword:`class`, or :keyword:`import` statements),\nreferences to the variable will be looked up in the local namespace of the\nenclosing scope.  A more detailed explanation of the rules, and a dissection of\nthe implementation, can be found in the PEP.\n\nThis change may cause some compatibility problems for code where the same\nvariable name is used both at the module level and as a local variable within a\nfunction that contains further function definitions. This seems rather unlikely\nthough, since such code would have been pretty confusing to read in the first\nplace.\n\nOne side effect of the change is that the ``from module import *`` and\n:keyword:`exec` statements have been made illegal inside a function scope under\ncertain conditions.  The Python reference manual has said all along that ``from\nmodule import *`` is only legal at the top level of a module, but the CPython\ninterpreter has never enforced this before.  As part of the implementation of\nnested scopes, the compiler which turns Python source into bytecodes has to\ngenerate different code to access variables in a containing scope.  ``from\nmodule import *`` and :keyword:`exec` make it impossible for the compiler to\nfigure this out, because they add names to the local namespace that are\nunknowable at compile time. Therefore, if a function contains function\ndefinitions or :keyword:`lambda` expressions with free variables, the compiler\nwill flag this by raising a :exc:`SyntaxError` exception.\n\nTo make the preceding explanation a bit clearer, here's an example::\n\n   x = 1\n   def f():\n       # The next line is a syntax error\n       exec 'x=2'\n       def g():\n           return x\n\nLine 4 containing the :keyword:`exec` statement is a syntax error, since\n:keyword:`exec` would define a new local variable named ``x`` whose value should\nbe accessed by :func:`g`.\n\nThis shouldn't be much of a limitation, since :keyword:`exec` is rarely used in\nmost Python code (and when it is used, it's often a sign of a poor design\nanyway).\n\n\n.. seealso::\n\n   :pep:`227` - Statically Nested Scopes\n      Written and implemented by Jeremy Hylton.\n\n.. ======================================================================\n\n\nNew and Improved Modules\n========================\n\n* The :mod:`xmlrpclib` module was contributed to the standard library by Fredrik\n  Lundh, providing support for writing XML-RPC clients.  XML-RPC is a simple\n  remote procedure call protocol built on top of HTTP and XML. For example, the\n  following snippet retrieves a list of RSS channels from the O'Reilly Network,\n  and then  lists the recent headlines for one channel::\n\n     import xmlrpclib\n     s = xmlrpclib.Server(\n           'http://www.oreillynet.com/meerkat/xml-rpc/server.php')\n     channels = s.meerkat.getChannels()\n     # channels is a list of dictionaries, like this:\n     # [{'id': 4, 'title': 'Freshmeat Daily News'}\n     #  {'id': 190, 'title': '32Bits Online'},\n     #  {'id': 4549, 'title': '3DGamers'}, ... ]\n\n     # Get the items for one channel\n     items = s.meerkat.getItems( {'channel': 4} )\n\n     # 'items' is another list of dictionaries, like this:\n     # [{'link': 'http://freshmeat.net/releases/52719/',\n     #   'description': 'A utility which converts HTML to XSL FO.',\n     #   'title': 'html2fo 0.3 (Default)'}, ... ]\n\n  The :mod:`SimpleXMLRPCServer` module makes it easy to create straightforward\n  XML-RPC servers.  See http://www.xmlrpc.com/ for more information about XML-RPC.\n\n* The new :mod:`hmac` module implements the HMAC algorithm described by\n  :rfc:`2104`. (Contributed by Gerhard H\u00e4ring.)\n\n* Several functions that originally returned lengthy tuples now return pseudo-\n  sequences that still behave like tuples but also have mnemonic attributes such\n  as memberst_mtime or :attr:`tm_year`. The enhanced functions include\n  :func:`stat`, :func:`fstat`, :func:`statvfs`, and :func:`fstatvfs` in the\n  :mod:`os` module, and :func:`localtime`, :func:`gmtime`, and :func:`strptime` in\n  the :mod:`time` module.\n\n  For example, to obtain a file's size using the old tuples, you'd end up writing\n  something like ``file_size = os.stat(filename)[stat.ST_SIZE]``, but now this can\n  be written more clearly as ``file_size = os.stat(filename).st_size``.\n\n  The original patch for this feature was contributed by Nick Mathewson.\n\n* The Python profiler has been extensively reworked and various errors in its\n  output have been corrected.  (Contributed by Fred L. Drake, Jr. and Tim Peters.)\n\n* The :mod:`socket` module can be compiled to support IPv6; specify the\n  :option:`--enable-ipv6` option to Python's configure script.  (Contributed by\n  Jun-ichiro \"itojun\" Hagino.)\n\n* Two new format characters were added to the :mod:`struct` module for 64-bit\n  integers on platforms that support the C :ctype:`long long` type.  ``q`` is for\n  a signed 64-bit integer, and ``Q`` is for an unsigned one.  The value is\n  returned in Python's long integer type.  (Contributed by Tim Peters.)\n\n* In the interpreter's interactive mode, there's a new built-in function\n  :func:`help` that uses the :mod:`pydoc` module introduced in Python 2.1 to\n  provide interactive help. ``help(object)`` displays any available help text\n  about *object*.  :func:`help` with no argument puts you in an online help\n  utility, where you can enter the names of functions, classes, or modules to read\n  their help text. (Contributed by Guido van Rossum, using Ka-Ping Yee's\n  :mod:`pydoc` module.)\n\n* Various bugfixes and performance improvements have been made to the SRE engine\n  underlying the :mod:`re` module.  For example, the :func:`re.sub` and\n  :func:`re.split` functions have been rewritten in C.  Another contributed patch\n  speeds up certain Unicode character ranges by a factor of two, and a new\n  :meth:`finditer`  method that returns an iterator over all the non-overlapping\n  matches in  a given string.  (SRE is maintained by Fredrik Lundh.  The\n  BIGCHARSET patch was contributed by Martin von L\u00f6wis.)\n\n* The :mod:`smtplib` module now supports :rfc:`2487`, \"Secure SMTP over TLS\", so\n  it's now possible to encrypt the SMTP traffic between a Python program and the\n  mail transport agent being handed a message.  :mod:`smtplib` also supports SMTP\n  authentication.  (Contributed by Gerhard H\u00e4ring.)\n\n* The :mod:`imaplib` module, maintained by Piers Lauder, has support for several\n  new extensions: the NAMESPACE extension defined in :rfc:`2342`, SORT, GETACL and\n  SETACL.  (Contributed by Anthony Baxter and Michel Pelletier.)\n\n* The :mod:`rfc822` module's parsing of email addresses is now compliant with\n  :rfc:`2822`, an update to :rfc:`822`.  (The module's name is *not* going to be\n  changed to ``rfc2822``.)  A new package, :mod:`email`, has also been added for\n  parsing and generating e-mail messages.  (Contributed by Barry Warsaw, and\n  arising out of his work on Mailman.)\n\n* The :mod:`difflib` module now contains a new :class:`Differ` class for\n  producing human-readable lists of changes (a \"delta\") between two sequences of\n  lines of text.  There are also two generator functions, :func:`ndiff` and\n  :func:`restore`, which respectively return a delta from two sequences, or one of\n  the original sequences from a delta. (Grunt work contributed by David Goodger,\n  from ndiff.py code by Tim Peters who then did the generatorization.)\n\n* New constants :const:`ascii_letters`, :const:`ascii_lowercase`, and\n  :const:`ascii_uppercase` were added to the :mod:`string` module.  There were\n  several modules in the standard library that used :const:`string.letters` to\n  mean the ranges A-Za-z, but that assumption is incorrect when locales are in\n  use, because :const:`string.letters` varies depending on the set of legal\n  characters defined by the current locale.  The buggy modules have all been fixed\n  to use :const:`ascii_letters` instead. (Reported by an unknown person; fixed by\n  Fred L. Drake, Jr.)\n\n* The :mod:`mimetypes` module now makes it easier to use alternative MIME-type\n  databases by the addition of a :class:`MimeTypes` class, which takes a list of\n  filenames to be parsed.  (Contributed by Fred L. Drake, Jr.)\n\n* A :class:`Timer` class was added to the :mod:`threading` module that allows\n  scheduling an activity to happen at some future time.  (Contributed by Itamar\n  Shtull-Trauring.)\n\n.. ======================================================================\n\n\nInterpreter Changes and Fixes\n=============================\n\nSome of the changes only affect people who deal with the Python interpreter at\nthe C level because they're writing Python extension modules, embedding the\ninterpreter, or just hacking on the interpreter itself. If you only write Python\ncode, none of the changes described here will affect you very much.\n\n* Profiling and tracing functions can now be implemented in C, which can operate\n  at much higher speeds than Python-based functions and should reduce the overhead\n  of profiling and tracing.  This  will be of interest to authors of development\n  environments for Python.  Two new C functions were added to Python's API,\n  :cfunc:`PyEval_SetProfile` and :cfunc:`PyEval_SetTrace`. The existing\n  :func:`sys.setprofile` and :func:`sys.settrace` functions still exist, and have\n  simply been changed to use the new C-level interface.  (Contributed by Fred L.\n  Drake, Jr.)\n\n* Another low-level API, primarily of interest to implementors of Python\n  debuggers and development tools, was added. :cfunc:`PyInterpreterState_Head` and\n  :cfunc:`PyInterpreterState_Next` let a caller walk through all the existing\n  interpreter objects; :cfunc:`PyInterpreterState_ThreadHead` and\n  :cfunc:`PyThreadState_Next` allow looping over all the thread states for a given\n  interpreter.  (Contributed by David Beazley.)\n\n* The C-level interface to the garbage collector has been changed to make it\n  easier to write extension types that support garbage collection and to debug\n  misuses of the functions. Various functions have slightly different semantics,\n  so a bunch of functions had to be renamed.  Extensions that use the old API will\n  still compile but will *not* participate in garbage collection, so updating them\n  for 2.2 should be considered fairly high priority.\n\n  To upgrade an extension module to the new API, perform the following steps:\n\n* Rename :cfunc:`Py_TPFLAGS_GC` to :cfunc:`PyTPFLAGS_HAVE_GC`.\n\n* Use :cfunc:`PyObject_GC_New` or :cfunc:`PyObject_GC_NewVar` to allocate\n    objects, and :cfunc:`PyObject_GC_Del` to deallocate them.\n\n* Rename :cfunc:`PyObject_GC_Init` to :cfunc:`PyObject_GC_Track` and\n    :cfunc:`PyObject_GC_Fini` to :cfunc:`PyObject_GC_UnTrack`.\n\n* Remove :cfunc:`PyGC_HEAD_SIZE` from object size calculations.\n\n* Remove calls to :cfunc:`PyObject_AS_GC` and :cfunc:`PyObject_FROM_GC`.\n\n* A new ``et`` format sequence was added to :cfunc:`PyArg_ParseTuple`; ``et``\n  takes both a parameter and an encoding name, and converts the parameter to the\n  given encoding if the parameter turns out to be a Unicode string, or leaves it\n  alone if it's an 8-bit string, assuming it to already be in the desired\n  encoding.  This differs from the ``es`` format character, which assumes that\n  8-bit strings are in Python's default ASCII encoding and converts them to the\n  specified new encoding. (Contributed by M.-A. Lemburg, and used for the MBCS\n  support on Windows described in the following section.)\n\n* A different argument parsing function, :cfunc:`PyArg_UnpackTuple`, has been\n  added that's simpler and presumably faster.  Instead of specifying a format\n  string, the caller simply gives the minimum and maximum number of arguments\n  expected, and a set of pointers to :ctype:`PyObject\\*` variables that will be\n  filled in with argument values.\n\n* Two new flags :const:`METH_NOARGS` and :const:`METH_O` are available in method\n  definition tables to simplify implementation of methods with no arguments or a\n  single untyped argument. Calling such methods is more efficient than calling a\n  corresponding method that uses :const:`METH_VARARGS`.  Also, the old\n  :const:`METH_OLDARGS` style of writing C methods is  now officially deprecated.\n\n* Two new wrapper functions, :cfunc:`PyOS_snprintf` and :cfunc:`PyOS_vsnprintf`\n  were added to provide  cross-platform implementations for the relatively new\n  :cfunc:`snprintf` and :cfunc:`vsnprintf` C lib APIs. In contrast to the standard\n  :cfunc:`sprintf` and :cfunc:`vsprintf` functions, the Python versions check the\n  bounds of the buffer used to protect against buffer overruns. (Contributed by\n  M.-A. Lemburg.)\n\n* The :cfunc:`_PyTuple_Resize` function has lost an unused parameter, so now it\n  takes 2 parameters instead of 3.  The third argument was never used, and can\n  simply be discarded when porting code from earlier versions to Python 2.2.\n\n.. ======================================================================\n\n\nOther Changes and Fixes\n=======================\n\nAs usual there were a bunch of other improvements and bugfixes scattered\nthroughout the source tree.  A search through the CVS change logs finds there\nwere 527 patches applied and 683 bugs fixed between Python 2.1 and 2.2; 2.2.1\napplied 139 patches and fixed 143 bugs; 2.2.2 applied 106 patches and fixed 82\nbugs.  These figures are likely to be underestimates.\n\nSome of the more notable changes are:\n\n* The code for the MacOS port for Python, maintained by Jack Jansen, is now kept\n  in the main Python CVS tree, and many changes have been made to support MacOS X.\n\n  The most significant change is the ability to build Python as a framework,\n  enabled by supplying the :option:`--enable-framework` option to the configure\n  script when compiling Python.  According to Jack Jansen, \"This installs a self-\n  contained Python installation plus the OS X framework \"glue\" into\n  :file:`/Library/Frameworks/Python.framework` (or another location of choice).\n  For now there is little immediate added benefit to this (actually, there is the\n  disadvantage that you have to change your PATH to be able to find Python), but\n  it is the basis for creating a full-blown Python application, porting the\n  MacPython IDE, possibly using Python as a standard OSA scripting language and\n  much more.\"\n\n  Most of the MacPython toolbox modules, which interface to MacOS APIs such as\n  windowing, QuickTime, scripting, etc. have been ported to OS X, but they've been\n  left commented out in :file:`setup.py`.  People who want to experiment with\n  these modules can uncomment them manually.\n\n  .. Jack's original comments:\n     The main change is the possibility to build Python as a\n     framework. This installs a self-contained Python installation plus the\n     OSX framework \"glue\" into /Library/Frameworks/Python.framework (or\n     another location of choice). For now there is little immedeate added\n     benefit to this (actually, there is the disadvantage that you have to\n     change your PATH to be able to find Python), but it is the basis for\n     creating a fullblown Python application, porting the MacPython IDE,\n     possibly using Python as a standard OSA scripting language and much\n     more. You enable this with \"configure --enable-framework\".\n     The other change is that most MacPython toolbox modules, which\n     interface to all the MacOS APIs such as windowing, quicktime,\n     scripting, etc. have been ported. Again, most of these are not of\n     immedeate use, as they need a full application to be really useful, so\n     they have been commented out in setup.py. People wanting to experiment\n     can uncomment them. Gestalt and Internet Config modules are enabled by\n     default.\n\n* Keyword arguments passed to built-in functions that don't take them now cause a\n  :exc:`TypeError` exception to be raised, with the message \"*function* takes no\n  keyword arguments\".\n\n* Weak references, added in Python 2.1 as an extension module, are now part of\n  the core because they're used in the implementation of new-style classes.  The\n  :exc:`ReferenceError` exception has therefore moved from the :mod:`weakref`\n  module to become a built-in exception.\n\n* A new script, :file:`Tools/scripts/cleanfuture.py` by Tim Peters,\n  automatically removes obsolete ``__future__`` statements from Python source\n  code.\n\n* An additional *flags* argument has been added to the built-in function\n  :func:`compile`, so the behaviour of ``__future__`` statements can now be\n  correctly observed in simulated shells, such as those presented by IDLE and\n  other development environments.  This is described in :pep:`264`. (Contributed\n  by Michael Hudson.)\n\n* The new license introduced with Python 1.6 wasn't GPL-compatible.  This is\n  fixed by some minor textual changes to the 2.2 license, so it's now legal to\n  embed Python inside a GPLed program again.  Note that Python itself is not\n  GPLed, but instead is under a license that's essentially equivalent to the BSD\n  license, same as it always was.  The license changes were also applied to the\n  Python 2.0.1 and 2.1.1 releases.\n\n* When presented with a Unicode filename on Windows, Python will now convert it\n  to an MBCS encoded string, as used by the Microsoft file APIs.  As MBCS is\n  explicitly used by the file APIs, Python's choice of ASCII as the default\n  encoding turns out to be an annoyance.  On Unix, the locale's character set is\n  used if :func:`locale.nl_langinfo(CODESET)` is available.  (Windows support was\n  contributed by Mark Hammond with assistance from Marc-Andr\u00e9 Lemburg. Unix\n  support was added by Martin von L\u00f6wis.)\n\n* Large file support is now enabled on Windows.  (Contributed by Tim Peters.)\n\n* The :file:`Tools/scripts/ftpmirror.py` script now parses a :file:`.netrc`\n  file, if you have one. (Contributed by Mike Romberg.)\n\n* Some features of the object returned by the :func:`xrange` function are now\n  deprecated, and trigger warnings when they're accessed; they'll disappear in\n  Python 2.3. :class:`xrange` objects tried to pretend they were full sequence\n  types by supporting slicing, sequence multiplication, and the :keyword:`in`\n  operator, but these features were rarely used and therefore buggy.  The\n  :meth:`tolist` method and the :attr:`start`, :attr:`stop`, and :attr:`step`\n  attributes are also being deprecated.  At the C level, the fourth argument to\n  the :cfunc:`PyRange_New` function, ``repeat``, has also been deprecated.\n\n* There were a bunch of patches to the dictionary implementation, mostly to fix\n  potential core dumps if a dictionary contains objects that sneakily changed\n  their hash value, or mutated the dictionary they were contained in. For a while\n  python-dev fell into a gentle rhythm of Michael Hudson finding a case that\n  dumped core, Tim Peters fixing the bug, Michael finding another case, and round\n  and round it went.\n\n* On Windows, Python can now be compiled with Borland C thanks to a number of\n  patches contributed by Stephen Hansen, though the result isn't fully functional\n  yet.  (But this *is* progress...)\n\n* Another Windows enhancement: Wise Solutions generously offered PythonLabs use\n  of their InstallerMaster 8.1 system.  Earlier PythonLabs Windows installers used\n  Wise 5.0a, which was beginning to show its age.  (Packaged up by Tim Peters.)\n\n* Files ending in ``.pyw`` can now be imported on Windows. ``.pyw`` is a\n  Windows-only thing, used to indicate that a script needs to be run using\n  PYTHONW.EXE instead of PYTHON.EXE in order to prevent a DOS console from popping\n  up to display the output.  This patch makes it possible to import such scripts,\n  in case they're also usable as modules.  (Implemented by David Bolen.)\n\n* On platforms where Python uses the C :cfunc:`dlopen` function  to load\n  extension modules, it's now possible to set the flags used  by :cfunc:`dlopen`\n  using the :func:`sys.getdlopenflags` and :func:`sys.setdlopenflags` functions.\n  (Contributed by Bram Stolk.)\n\n* The :func:`pow` built-in function no longer supports 3 arguments when\n  floating-point numbers are supplied. ``pow(x, y, z)`` returns ``(x**y) % z``,\n  but this is never useful for floating point numbers, and the final result varies\n  unpredictably depending on the platform.  A call such as ``pow(2.0, 8.0, 7.0)``\n  will now raise a :exc:`TypeError` exception.\n\n.. ======================================================================\n\n\nAcknowledgements\n================\n\nThe author would like to thank the following people for offering suggestions,\ncorrections and assistance with various drafts of this article: Fred Bremmer,\nKeith Briggs, Andrew Dalke, Fred L. Drake, Jr., Carel Fellinger, David Goodger,\nMark Hammond, Stephen Hansen, Michael Hudson, Jack Jansen, Marc-Andr\u00e9 Lemburg,\nMartin von L\u00f6wis, Fredrik Lundh, Michael McLay, Nick Mathewson, Paul Moore,\nGustavo Niemeyer, Don O'Donnell, Joonas Paalasma, Tim Peters, Jens Quade, Tom\nReinhardt, Neil Schemenauer, Guido van Rossum, Greg Ward, Edward Welbourne.\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Doc/whatsnew/2.5.rst": "****************************\n  What's New in Python 2.5\n****************************\n\n:Author: A.M. Kuchling\n\n.. |release| replace:: 1.01\n\n.. $Id: whatsnew25.tex 56611 2007-07-29 08:26:10Z georg.brandl $\n.. Fix XXX comments\n\nThis article explains the new features in Python 2.5.  The final release of\nPython 2.5 is scheduled for August 2006; :pep:`356` describes the planned\nrelease schedule.\n\nThe changes in Python 2.5 are an interesting mix of language and library\nimprovements. The library enhancements will be more important to Python's user\ncommunity, I think, because several widely-useful packages were added.  New\nmodules include ElementTree for XML processing (:mod:`xml.etree`),\nthe SQLite database module (:mod:`sqlite`), and the :mod:`ctypes`\nmodule for calling C functions.\n\nThe language changes are of middling significance.  Some pleasant new features\nwere added, but most of them aren't features that you'll use every day.\nConditional expressions were finally added to the language using a novel syntax;\nsee section :ref:`pep-308`.  The new ':keyword:`with`' statement will make\nwriting cleanup code easier (section :ref:`pep-343`).  Values can now be passed\ninto generators (section :ref:`pep-342`).  Imports are now visible as either\nabsolute or relative (section :ref:`pep-328`).  Some corner cases of exception\nhandling are handled better (section :ref:`pep-341`).  All these improvements\nare worthwhile, but they're improvements to one specific language feature or\nanother; none of them are broad modifications to Python's semantics.\n\nAs well as the language and library additions, other improvements and bugfixes\nwere made throughout the source tree.  A search through the SVN change logs\nfinds there were 353 patches applied and 458 bugs fixed between Python 2.4 and\n2.5.  (Both figures are likely to be underestimates.)\n\nThis article doesn't try to be a complete specification of the new features;\ninstead changes are briefly introduced using helpful examples.  For full\ndetails, you should always refer to the documentation for Python 2.5 at\nhttp://docs.python.org. If you want to understand the complete implementation\nand design rationale, refer to the PEP for a particular new feature.\n\nComments, suggestions, and error reports for this document are welcome; please\ne-mail them to the author or open a bug in the Python bug tracker.\n\n.. ======================================================================\n\n\n.. _pep-308:\n\nPEP 308: Conditional Expressions\n================================\n\nFor a long time, people have been requesting a way to write conditional\nexpressions, which are expressions that return value A or value B depending on\nwhether a Boolean value is true or false.  A conditional expression lets you\nwrite a single assignment statement that has the same effect as the following::\n\n   if condition:\n       x = true_value\n   else:\n       x = false_value\n\nThere have been endless tedious discussions of syntax on both python-dev and\ncomp.lang.python.  A vote was even held that found the majority of voters wanted\nconditional expressions in some form, but there was no syntax that was preferred\nby a clear majority. Candidates included C's ``cond ? true_v : false_v``, ``if\ncond then true_v else false_v``, and 16 other variations.\n\nGuido van Rossum eventually chose a surprising syntax::\n\n   x = true_value if condition else false_value\n\nEvaluation is still lazy as in existing Boolean expressions, so the order of\nevaluation jumps around a bit.  The *condition* expression in the middle is\nevaluated first, and the *true_value* expression is evaluated only if the\ncondition was true.  Similarly, the *false_value* expression is only evaluated\nwhen the condition is false.\n\nThis syntax may seem strange and backwards; why does the condition go in the\n*middle* of the expression, and not in the front as in C's ``c ? x : y``?  The\ndecision was checked by applying the new syntax to the modules in the standard\nlibrary and seeing how the resulting code read.  In many cases where a\nconditional expression is used, one value seems to be the 'common case' and one\nvalue is an 'exceptional case', used only on rarer occasions when the condition\nisn't met.  The conditional syntax makes this pattern a bit more obvious::\n\n   contents = ((doc + '\\n') if doc else '')\n\nI read the above statement as meaning \"here *contents* is  usually assigned a\nvalue of ``doc+'\\n'``; sometimes  *doc* is empty, in which special case an empty\nstring is returned.\"   I doubt I will use conditional expressions very often\nwhere there  isn't a clear common and uncommon case.\n\nThere was some discussion of whether the language should require surrounding\nconditional expressions with parentheses.  The decision was made to *not*\nrequire parentheses in the Python language's grammar, but as a matter of style I\nthink you should always use them. Consider these two statements::\n\n   # First version -- no parens\n   level = 1 if logging else 0\n\n   # Second version -- with parens\n   level = (1 if logging else 0)\n\nIn the first version, I think a reader's eye might group the statement into\n'level = 1', 'if logging', 'else 0', and think that the condition decides\nwhether the assignment to *level* is performed.  The second version reads\nbetter, in my opinion, because it makes it clear that the assignment is always\nperformed and the choice is being made between two values.\n\nAnother reason for including the brackets: a few odd combinations of list\ncomprehensions and lambdas could look like incorrect conditional expressions.\nSee :pep:`308` for some examples.  If you put parentheses around your\nconditional expressions, you won't run into this case.\n\n\n.. seealso::\n\n   :pep:`308` - Conditional Expressions\n      PEP written by Guido van Rossum and Raymond D. Hettinger; implemented by Thomas\n      Wouters.\n\n.. ======================================================================\n\n\n.. _pep-309:\n\nPEP 309: Partial Function Application\n=====================================\n\nThe :mod:`functools` module is intended to contain tools for functional-style\nprogramming.\n\nOne useful tool in this module is the :func:`partial` function. For programs\nwritten in a functional style, you'll sometimes want to construct variants of\nexisting functions that have some of the parameters filled in.  Consider a\nPython function ``f(a, b, c)``; you could create a new function ``g(b, c)`` that\nwas equivalent to ``f(1, b, c)``.  This is called \"partial function\napplication\".\n\n:func:`partial` takes the arguments ``(function, arg1, arg2, ... kwarg1=value1,\nkwarg2=value2)``.  The resulting object is callable, so you can just call it to\ninvoke *function* with the filled-in arguments.\n\nHere's a small but realistic example::\n\n   import functools\n\n   def log (message, subsystem):\n       \"Write the contents of 'message' to the specified subsystem.\"\n       print '%s: %s' % (subsystem, message)\n       ...\n\n   server_log = functools.partial(log, subsystem='server')\n   server_log('Unable to open socket')\n\nHere's another example, from a program that uses PyGTK.  Here a context-\nsensitive pop-up menu is being constructed dynamically.  The callback provided\nfor the menu option is a partially applied version of the :meth:`open_item`\nmethod, where the first argument has been provided. ::\n\n   ...\n   class Application:\n       def open_item(self, path):\n          ...\n       def init (self):\n           open_func = functools.partial(self.open_item, item_path)\n           popup_menu.append( (\"Open\", open_func, 1) )\n\nAnother function in the :mod:`functools` module is the\n:func:`update_wrapper(wrapper, wrapped)` function that helps you write well-\nbehaved decorators.  :func:`update_wrapper` copies the name, module, and\ndocstring attribute to a wrapper function so that tracebacks inside the wrapped\nfunction are easier to understand.  For example, you might write::\n\n   def my_decorator(f):\n       def wrapper(*args, **kwds):\n           print 'Calling decorated function'\n           return f(*args, **kwds)\n       functools.update_wrapper(wrapper, f)\n       return wrapper\n\n:func:`wraps` is a decorator that can be used inside your own decorators to copy\nthe wrapped function's information.  An alternate  version of the previous\nexample would be::\n\n   def my_decorator(f):\n       @functools.wraps(f)\n       def wrapper(*args, **kwds):\n           print 'Calling decorated function'\n           return f(*args, **kwds)\n       return wrapper\n\n\n.. seealso::\n\n   :pep:`309` - Partial Function Application\n      PEP proposed and written by Peter Harris; implemented by Hye-Shik Chang and Nick\n      Coghlan, with adaptations by Raymond Hettinger.\n\n.. ======================================================================\n\n\n.. _pep-314:\n\nPEP 314: Metadata for Python Software Packages v1.1\n===================================================\n\nSome simple dependency support was added to Distutils.  The :func:`setup`\nfunction now has ``requires``, ``provides``, and ``obsoletes`` keyword\nparameters.  When you build a source distribution using the ``sdist`` command,\nthe dependency information will be recorded in the :file:`PKG-INFO` file.\n\nAnother new keyword parameter is ``download_url``, which should be set to a URL\nfor the package's source code.  This means it's now possible to look up an entry\nin the package index, determine the dependencies for a package, and download the\nrequired packages. ::\n\n   VERSION = '1.0'\n   setup(name='PyPackage',\n         version=VERSION,\n         requires=['numarray', 'zlib (>=1.1.4)'],\n         obsoletes=['OldPackage']\n         download_url=('http://www.example.com/pypackage/dist/pkg-%s.tar.gz'\n                       % VERSION),\n        )\n\nAnother new enhancement to the Python package index at\nhttp://cheeseshop.python.org is storing source and binary archives for a\npackage.  The new :command:`upload` Distutils command will upload a package to\nthe repository.\n\nBefore a package can be uploaded, you must be able to build a distribution using\nthe :command:`sdist` Distutils command.  Once that works, you can run ``python\nsetup.py upload`` to add your package to the PyPI archive.  Optionally you can\nGPG-sign the package by supplying the :option:`--sign` and :option:`--identity`\noptions.\n\nPackage uploading was implemented by Martin von L\u00f6wis and Richard Jones.\n\n\n.. seealso::\n\n   :pep:`314` - Metadata for Python Software Packages v1.1\n      PEP proposed and written by A.M. Kuchling, Richard Jones, and Fred Drake;\n      implemented by Richard Jones and Fred Drake.\n\n.. ======================================================================\n\n\n.. _pep-328:\n\nPEP 328: Absolute and Relative Imports\n======================================\n\nThe simpler part of PEP 328 was implemented in Python 2.4: parentheses could now\nbe used to enclose the names imported from a module using the ``from ... import\n...`` statement, making it easier to import many different names.\n\nThe more complicated part has been implemented in Python 2.5: importing a module\ncan be specified to use absolute or package-relative imports.  The plan is to\nmove toward making absolute imports the default in future versions of Python.\n\nLet's say you have a package directory like this::\n\n   pkg/\n   pkg/__init__.py\n   pkg/main.py\n   pkg/string.py\n\nThis defines a package named :mod:`pkg` containing the :mod:`pkg.main` and\n:mod:`pkg.string` submodules.\n\nConsider the code in the :file:`main.py` module.  What happens if it executes\nthe statement ``import string``?  In Python 2.4 and earlier, it will first look\nin the package's directory to perform a relative import, finds\n:file:`pkg/string.py`, imports the contents of that file as the\n:mod:`pkg.string` module, and that module is bound to the name ``string`` in the\n:mod:`pkg.main` module's namespace.\n\nThat's fine if :mod:`pkg.string` was what you wanted.  But what if you wanted\nPython's standard :mod:`string` module?  There's no clean way to ignore\n:mod:`pkg.string` and look for the standard module; generally you had to look at\nthe contents of ``sys.modules``, which is slightly unclean.    Holger Krekel's\n:mod:`py.std` package provides a tidier way to perform imports from the standard\nlibrary, ``import py ; py.std.string.join()``, but that package isn't available\non all Python installations.\n\nReading code which relies on relative imports is also less clear, because a\nreader may be confused about which module, :mod:`string` or :mod:`pkg.string`,\nis intended to be used.  Python users soon learned not to duplicate the names of\nstandard library modules in the names of their packages' submodules, but you\ncan't protect against having your submodule's name being used for a new module\nadded in a future version of Python.\n\nIn Python 2.5, you can switch :keyword:`import`'s behaviour to  absolute imports\nusing a ``from __future__ import absolute_import`` directive.  This absolute-\nimport behaviour will become the default in a future version (probably Python\n2.7).  Once absolute imports  are the default, ``import string`` will always\nfind the standard library's version. It's suggested that users should begin\nusing absolute imports as much as possible, so it's preferable to begin writing\n``from pkg import string`` in your code.\n\nRelative imports are still possible by adding a leading period  to the module\nname when using the ``from ... import`` form::\n\n   # Import names from pkg.string\n   from .string import name1, name2\n   # Import pkg.string\n   from . import string\n\nThis imports the :mod:`string` module relative to the current package, so in\n:mod:`pkg.main` this will import *name1* and *name2* from :mod:`pkg.string`.\nAdditional leading periods perform the relative import starting from the parent\nof the current package.  For example, code in the :mod:`A.B.C` module can do::\n\n   from . import D                 # Imports A.B.D\n   from .. import E                # Imports A.E\n   from ..F import G               # Imports A.F.G\n\nLeading periods cannot be used with the ``import modname``  form of the import\nstatement, only the ``from ... import`` form.\n\n\n.. seealso::\n\n   :pep:`328` - Imports: Multi-Line and Absolute/Relative\n      PEP written by Aahz; implemented by Thomas Wouters.\n\n   http://codespeak.net/py/current/doc/index.html\n      The py library by Holger Krekel, which contains the :mod:`py.std` package.\n\n.. ======================================================================\n\n\n.. _pep-338:\n\nPEP 338: Executing Modules as Scripts\n=====================================\n\nThe :option:`-m` switch added in Python 2.4 to execute a module as a script\ngained a few more abilities.  Instead of being implemented in C code inside the\nPython interpreter, the switch now uses an implementation in a new module,\n:mod:`runpy`.\n\nThe :mod:`runpy` module implements a more sophisticated import mechanism so that\nit's now possible to run modules in a package such as :mod:`pychecker.checker`.\nThe module also supports alternative import mechanisms such as the\n:mod:`zipimport` module.  This means you can add a .zip archive's path to\n``sys.path`` and then use the :option:`-m` switch to execute code from the\narchive.\n\n\n.. seealso::\n\n   :pep:`338` - Executing modules as scripts\n      PEP written and  implemented by Nick Coghlan.\n\n.. ======================================================================\n\n\n.. _pep-341:\n\nPEP 341: Unified try/except/finally\n===================================\n\nUntil Python 2.5, the :keyword:`try` statement came in two flavours. You could\nuse a :keyword:`finally` block to ensure that code is always executed, or one or\nmore :keyword:`except` blocks to catch  specific exceptions.  You couldn't\ncombine both :keyword:`except` blocks and a :keyword:`finally` block, because\ngenerating the right bytecode for the combined version was complicated and it\nwasn't clear what the semantics of the combined statement should be.\n\nGuido van Rossum spent some time working with Java, which does support the\nequivalent of combining :keyword:`except` blocks and a :keyword:`finally` block,\nand this clarified what the statement should mean.  In Python 2.5, you can now\nwrite::\n\n   try:\n       block-1 ...\n   except Exception1:\n       handler-1 ...\n   except Exception2:\n       handler-2 ...\n   else:\n       else-block\n   finally:\n       final-block\n\nThe code in *block-1* is executed.  If the code raises an exception, the various\n:keyword:`except` blocks are tested: if the exception is of class\n:class:`Exception1`, *handler-1* is executed; otherwise if it's of class\n:class:`Exception2`, *handler-2* is executed, and so forth.  If no exception is\nraised, the *else-block* is executed.\n\nNo matter what happened previously, the *final-block* is executed once the code\nblock is complete and any raised exceptions handled. Even if there's an error in\nan exception handler or the *else-block* and a new exception is raised, the code\nin the *final-block* is still run.\n\n\n.. seealso::\n\n   :pep:`341` - Unifying try-except and try-finally\n      PEP written by Georg Brandl;  implementation by Thomas Lee.\n\n.. ======================================================================\n\n\n.. _pep-342:\n\nPEP 342: New Generator Features\n===============================\n\nPython 2.5 adds a simple way to pass values *into* a generator. As introduced in\nPython 2.3, generators only produce output; once a generator's code was invoked\nto create an iterator, there was no way to pass any new information into the\nfunction when its execution is resumed.  Sometimes the ability to pass in some\ninformation would be useful.  Hackish solutions to this include making the\ngenerator's code look at a global variable and then changing the global\nvariable's value, or passing in some mutable object that callers then modify.\n\nTo refresh your memory of basic generators, here's a simple example::\n\n   def counter (maximum):\n       i = 0\n       while i < maximum:\n           yield i\n           i += 1\n\nWhen you call ``counter(10)``, the result is an iterator that returns the values\nfrom 0 up to 9.  On encountering the :keyword:`yield` statement, the iterator\nreturns the provided value and suspends the function's execution, preserving the\nlocal variables. Execution resumes on the following call to the iterator's\n:meth:`next` method, picking up after the :keyword:`yield` statement.\n\nIn Python 2.3, :keyword:`yield` was a statement; it didn't return any value.  In\n2.5, :keyword:`yield` is now an expression, returning a value that can be\nassigned to a variable or otherwise operated on::\n\n   val = (yield i)\n\nI recommend that you always put parentheses around a :keyword:`yield` expression\nwhen you're doing something with the returned value, as in the above example.\nThe parentheses aren't always necessary, but it's easier to always add them\ninstead of having to remember when they're needed.\n\n(:pep:`342` explains the exact rules, which are that a :keyword:`yield`\\\n-expression must always be parenthesized except when it occurs at the top-level\nexpression on the right-hand side of an assignment.  This means you can write\n``val = yield i`` but have to use parentheses when there's an operation, as in\n``val = (yield i) + 12``.)\n\nValues are sent into a generator by calling its :meth:`send(value)` method.  The\ngenerator's code is then resumed and the :keyword:`yield` expression returns the\nspecified *value*.  If the regular :meth:`next` method is called, the\n:keyword:`yield` returns :const:`None`.\n\nHere's the previous example, modified to allow changing the value of the\ninternal counter. ::\n\n   def counter (maximum):\n       i = 0\n       while i < maximum:\n           val = (yield i)\n           # If value provided, change counter\n           if val is not None:\n               i = val\n           else:\n               i += 1\n\nAnd here's an example of changing the counter::\n\n   >>> it = counter(10)\n   >>> print it.next()\n   0\n   >>> print it.next()\n   1\n   >>> print it.send(8)\n   8\n   >>> print it.next()\n   9\n   >>> print it.next()\n   Traceback (most recent call last):\n     File \"t.py\", line 15, in ?\n       print it.next()\n   StopIteration\n\n:keyword:`yield` will usually return :const:`None`, so you should always check\nfor this case.  Don't just use its value in expressions unless you're sure that\nthe :meth:`send` method will be the only method used to resume your generator\nfunction.\n\nIn addition to :meth:`send`, there are two other new methods on generators:\n\n* :meth:`throw(type, value=None, traceback=None)` is used to raise an exception\n  inside the generator; the exception is raised by the :keyword:`yield` expression\n  where the generator's execution is paused.\n\n* :meth:`close` raises a new :exc:`GeneratorExit` exception inside the generator\n  to terminate the iteration.  On receiving this exception, the generator's code\n  must either raise :exc:`GeneratorExit` or :exc:`StopIteration`.  Catching the\n  :exc:`GeneratorExit` exception and returning a value is illegal and will trigger\n  a :exc:`RuntimeError`; if the function raises some other exception, that\n  exception is propagated to the caller.  :meth:`close` will also be called by\n  Python's garbage collector when the generator is garbage-collected.\n\n  If you need to run cleanup code when a :exc:`GeneratorExit` occurs, I suggest\n  using a ``try: ... finally:`` suite instead of  catching :exc:`GeneratorExit`.\n\nThe cumulative effect of these changes is to turn generators from one-way\nproducers of information into both producers and consumers.\n\nGenerators also become *coroutines*, a more generalized form of subroutines.\nSubroutines are entered at one point and exited at another point (the top of the\nfunction, and a :keyword:`return` statement), but coroutines can be entered,\nexited, and resumed at many different points (the :keyword:`yield` statements).\nWe'll have to figure out patterns for using coroutines effectively in Python.\n\nThe addition of the :meth:`close` method has one side effect that isn't obvious.\n:meth:`close` is called when a generator is garbage-collected, so this means the\ngenerator's code gets one last chance to run before the generator is destroyed.\nThis last chance means that ``try...finally`` statements in generators can now\nbe guaranteed to work; the :keyword:`finally` clause will now always get a\nchance to run.  The syntactic restriction that you couldn't mix :keyword:`yield`\nstatements with a ``try...finally`` suite has therefore been removed.  This\nseems like a minor bit of language trivia, but using generators and\n``try...finally`` is actually necessary in order to implement the\n:keyword:`with` statement described by PEP 343.  I'll look at this new statement\nin the following  section.\n\nAnother even more esoteric effect of this change: previously, the\n:attr:`gi_frame` attribute of a generator was always a frame object. It's now\npossible for :attr:`gi_frame` to be ``None`` once the generator has been\nexhausted.\n\n\n.. seealso::\n\n   :pep:`342` - Coroutines via Enhanced Generators\n      PEP written by  Guido van Rossum and Phillip J. Eby; implemented by Phillip J.\n      Eby.  Includes examples of  some fancier uses of generators as coroutines.\n\n      Earlier versions of these features were proposed in  :pep:`288` by Raymond\n      Hettinger and :pep:`325` by Samuele Pedroni.\n\n   http://en.wikipedia.org/wiki/Coroutine\n      The Wikipedia entry for  coroutines.\n\n   http://www.sidhe.org/~dan/blog/archives/000178.html\n      An explanation of coroutines from a Perl point of view, written by Dan Sugalski.\n\n.. ======================================================================\n\n\n.. _pep-343:\n\nPEP 343: The 'with' statement\n=============================\n\nThe ':keyword:`with`' statement clarifies code that previously would use\n``try...finally`` blocks to ensure that clean-up code is executed.  In this\nsection, I'll discuss the statement as it will commonly be used.  In the next\nsection, I'll examine the implementation details and show how to write objects\nfor use with this statement.\n\nThe ':keyword:`with`' statement is a new control-flow structure whose basic\nstructure is::\n\n   with expression [as variable]:\n       with-block\n\nThe expression is evaluated, and it should result in an object that supports the\ncontext management protocol (that is, has :meth:`__enter__` and :meth:`__exit__`\nmethods.\n\nThe object's :meth:`__enter__` is called before *with-block* is executed and\ntherefore can run set-up code. It also may return a value that is bound to the\nname *variable*, if given.  (Note carefully that *variable* is *not* assigned\nthe result of *expression*.)\n\nAfter execution of the *with-block* is finished, the object's :meth:`__exit__`\nmethod is called, even if the block raised an exception, and can therefore run\nclean-up code.\n\nTo enable the statement in Python 2.5, you need to add the following directive\nto your module::\n\n   from __future__ import with_statement\n\nThe statement will always be enabled in Python 2.6.\n\nSome standard Python objects now support the context management protocol and can\nbe used with the ':keyword:`with`' statement. File objects are one example::\n\n   with open('/etc/passwd', 'r') as f:\n       for line in f:\n           print line\n           ... more processing code ...\n\nAfter this statement has executed, the file object in *f* will have been\nautomatically closed, even if the :keyword:`for` loop raised an exception part-\nway through the block.\n\n.. note::\n\n   In this case, *f* is the same object created by :func:`open`, because\n   :meth:`file.__enter__` returns *self*.\n\nThe :mod:`threading` module's locks and condition variables  also support the\n':keyword:`with`' statement::\n\n   lock = threading.Lock()\n   with lock:\n       # Critical section of code\n       ...\n\nThe lock is acquired before the block is executed and always released once  the\nblock is complete.\n\nThe new :func:`localcontext` function in the :mod:`decimal` module makes it easy\nto save and restore the current decimal context, which encapsulates the desired\nprecision and rounding characteristics for computations::\n\n   from decimal import Decimal, Context, localcontext\n\n   # Displays with default precision of 28 digits\n   v = Decimal('578')\n   print v.sqrt()\n\n   with localcontext(Context(prec=16)):\n       # All code in this block uses a precision of 16 digits.\n       # The original context is restored on exiting the block.\n       print v.sqrt()\n\n\n.. _new-25-context-managers:\n\nWriting Context Managers\n------------------------\n\nUnder the hood, the ':keyword:`with`' statement is fairly complicated. Most\npeople will only use ':keyword:`with`' in company with existing objects and\ndon't need to know these details, so you can skip the rest of this section if\nyou like.  Authors of new objects will need to understand the details of the\nunderlying implementation and should keep reading.\n\nA high-level explanation of the context management protocol is:\n\n* The expression is evaluated and should result in an object called a \"context\n  manager\".  The context manager must have :meth:`__enter__` and :meth:`__exit__`\n  methods.\n\n* The context manager's :meth:`__enter__` method is called.  The value returned\n  is assigned to *VAR*.  If no ``'as VAR'`` clause is present, the value is simply\n  discarded.\n\n* The code in *BLOCK* is executed.\n\n* If *BLOCK* raises an exception, the :meth:`__exit__(type, value, traceback)`\n  is called with the exception details, the same values returned by\n  :func:`sys.exc_info`.  The method's return value controls whether the exception\n  is re-raised: any false value re-raises the exception, and ``True`` will result\n  in suppressing it.  You'll only rarely want to suppress the exception, because\n  if you do the author of the code containing the ':keyword:`with`' statement will\n  never realize anything went wrong.\n\n* If *BLOCK* didn't raise an exception,  the :meth:`__exit__` method is still\n  called, but *type*, *value*, and *traceback* are all ``None``.\n\nLet's think through an example.  I won't present detailed code but will only\nsketch the methods necessary for a database that supports transactions.\n\n(For people unfamiliar with database terminology: a set of changes to the\ndatabase are grouped into a transaction.  Transactions can be either committed,\nmeaning that all the changes are written into the database, or rolled back,\nmeaning that the changes are all discarded and the database is unchanged.  See\nany database textbook for more information.)\n\nLet's assume there's an object representing a database connection. Our goal will\nbe to let the user write code like this::\n\n   db_connection = DatabaseConnection()\n   with db_connection as cursor:\n       cursor.execute('insert into ...')\n       cursor.execute('delete from ...')\n       # ... more operations ...\n\nThe transaction should be committed if the code in the block runs flawlessly or\nrolled back if there's an exception. Here's the basic interface for\n:class:`DatabaseConnection` that I'll assume::\n\n   class DatabaseConnection:\n       # Database interface\n       def cursor (self):\n           \"Returns a cursor object and starts a new transaction\"\n       def commit (self):\n           \"Commits current transaction\"\n       def rollback (self):\n           \"Rolls back current transaction\"\n\nThe :meth:`__enter__` method is pretty easy, having only to start a new\ntransaction.  For this application the resulting cursor object would be a useful\nresult, so the method will return it.  The user can then add ``as cursor`` to\ntheir ':keyword:`with`' statement to bind the cursor to a variable name. ::\n\n   class DatabaseConnection:\n       ...\n       def __enter__ (self):\n           # Code to start a new transaction\n           cursor = self.cursor()\n           return cursor\n\nThe :meth:`__exit__` method is the most complicated because it's where most of\nthe work has to be done.  The method has to check if an exception occurred.  If\nthere was no exception, the transaction is committed.  The transaction is rolled\nback if there was an exception.\n\nIn the code below, execution will just fall off the end of the function,\nreturning the default value of ``None``.  ``None`` is false, so the exception\nwill be re-raised automatically.  If you wished, you could be more explicit and\nadd a :keyword:`return` statement at the marked location. ::\n\n   class DatabaseConnection:\n       ...\n       def __exit__ (self, type, value, tb):\n           if tb is None:\n               # No exception, so commit\n               self.commit()\n           else:\n               # Exception occurred, so rollback.\n               self.rollback()\n               # return False\n\n\n.. _contextlibmod:\n\nThe contextlib module\n---------------------\n\nThe new :mod:`contextlib` module provides some functions and a decorator that\nare useful for writing objects for use with the ':keyword:`with`' statement.\n\nThe decorator is called :func:`contextmanager`, and lets you write a single\ngenerator function instead of defining a new class.  The generator should yield\nexactly one value.  The code up to the :keyword:`yield` will be executed as the\n:meth:`__enter__` method, and the value yielded will be the method's return\nvalue that will get bound to the variable in the ':keyword:`with`' statement's\n:keyword:`as` clause, if any.  The code after the :keyword:`yield` will be\nexecuted in the :meth:`__exit__` method.  Any exception raised in the block will\nbe raised by the :keyword:`yield` statement.\n\nOur database example from the previous section could be written  using this\ndecorator as::\n\n   from contextlib import contextmanager\n\n   @contextmanager\n   def db_transaction (connection):\n       cursor = connection.cursor()\n       try:\n           yield cursor\n       except:\n           connection.rollback()\n           raise\n       else:\n           connection.commit()\n\n   db = DatabaseConnection()\n   with db_transaction(db) as cursor:\n       ...\n\nThe :mod:`contextlib` module also has a :func:`nested(mgr1, mgr2, ...)` function\nthat combines a number of context managers so you don't need to write nested\n':keyword:`with`' statements.  In this example, the single ':keyword:`with`'\nstatement both starts a database transaction and acquires a thread lock::\n\n   lock = threading.Lock()\n   with nested (db_transaction(db), lock) as (cursor, locked):\n       ...\n\nFinally, the :func:`closing(object)` function returns *object* so that it can be\nbound to a variable, and calls ``object.close`` at the end of the block. ::\n\n   import urllib, sys\n   from contextlib import closing\n\n   with closing(urllib.urlopen('http://www.yahoo.com')) as f:\n       for line in f:\n           sys.stdout.write(line)\n\n\n.. seealso::\n\n   :pep:`343` - The \"with\" statement\n      PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland,\n      Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a\n      ':keyword:`with`' statement, which can be helpful in learning how the statement\n      works.\n\n   The documentation  for the :mod:`contextlib` module.\n\n.. ======================================================================\n\n\n.. _pep-352:\n\nPEP 352: Exceptions as New-Style Classes\n========================================\n\nException classes can now be new-style classes, not just classic classes, and\nthe built-in :exc:`Exception` class and all the standard built-in exceptions\n(:exc:`NameError`, :exc:`ValueError`, etc.) are now new-style classes.\n\nThe inheritance hierarchy for exceptions has been rearranged a bit. In 2.5, the\ninheritance relationships are::\n\n   BaseException       # New in Python 2.5\n   |- KeyboardInterrupt\n   |- SystemExit\n   |- Exception\n      |- (all other current built-in exceptions)\n\nThis rearrangement was done because people often want to catch all exceptions\nthat indicate program errors.  :exc:`KeyboardInterrupt` and :exc:`SystemExit`\naren't errors, though, and usually represent an explicit action such as the user\nhitting Control-C or code calling :func:`sys.exit`.  A bare ``except:`` will\ncatch all exceptions, so you commonly need to list :exc:`KeyboardInterrupt` and\n:exc:`SystemExit` in order to re-raise them.  The usual pattern is::\n\n   try:\n       ...\n   except (KeyboardInterrupt, SystemExit):\n       raise\n   except:\n       # Log error...\n       # Continue running program...\n\nIn Python 2.5, you can now write ``except Exception`` to achieve the same\nresult, catching all the exceptions that usually indicate errors  but leaving\n:exc:`KeyboardInterrupt` and :exc:`SystemExit` alone.  As in previous versions,\na bare ``except:`` still catches all exceptions.\n\nThe goal for Python 3.0 is to require any class raised as an exception to derive\nfrom :exc:`BaseException` or some descendant of :exc:`BaseException`, and future\nreleases in the Python 2.x series may begin to enforce this constraint.\nTherefore, I suggest you begin making all your exception classes derive from\n:exc:`Exception` now.  It's been suggested that the bare ``except:`` form should\nbe removed in Python 3.0, but Guido van Rossum hasn't decided whether to do this\nor not.\n\nRaising of strings as exceptions, as in the statement ``raise \"Error\noccurred\"``, is deprecated in Python 2.5 and will trigger a warning.  The aim is\nto be able to remove the string-exception feature in a few releases.\n\n\n.. seealso::\n\n   :pep:`352` - Required Superclass for Exceptions\n      PEP written by  Brett Cannon and Guido van Rossum; implemented by Brett Cannon.\n\n.. ======================================================================\n\n\n.. _pep-353:\n\nPEP 353: Using ssize_t as the index type\n========================================\n\nA wide-ranging change to Python's C API, using a new  :ctype:`Py_ssize_t` type\ndefinition instead of :ctype:`int`,  will permit the interpreter to handle more\ndata on 64-bit platforms. This change doesn't affect Python's capacity on 32-bit\nplatforms.\n\nVarious pieces of the Python interpreter used C's :ctype:`int` type to store\nsizes or counts; for example, the number of items in a list or tuple were stored\nin an :ctype:`int`.  The C compilers for most 64-bit platforms still define\n:ctype:`int` as a 32-bit type, so that meant that lists could only hold up to\n``2**31 - 1`` = 2147483647 items. (There are actually a few different\nprogramming models that 64-bit C compilers can use -- see\nhttp://www.unix.org/version2/whatsnew/lp64_wp.html for a discussion -- but the\nmost commonly available model leaves :ctype:`int` as 32 bits.)\n\nA limit of 2147483647 items doesn't really matter on a 32-bit platform because\nyou'll run out of memory before hitting the length limit. Each list item\nrequires space for a pointer, which is 4 bytes, plus space for a\n:ctype:`PyObject` representing the item.  2147483647\\*4 is already more bytes\nthan a 32-bit address space can contain.\n\nIt's possible to address that much memory on a 64-bit platform, however.  The\npointers for a list that size would only require 16 GiB of space, so it's not\nunreasonable that Python programmers might construct lists that large.\nTherefore, the Python interpreter had to be changed to use some type other than\n:ctype:`int`, and this will be a 64-bit type on 64-bit platforms.  The change\nwill cause incompatibilities on 64-bit machines, so it was deemed worth making\nthe transition now, while the number of 64-bit users is still relatively small.\n(In 5 or 10 years, we may *all* be on 64-bit machines, and the transition would\nbe more painful then.)\n\nThis change most strongly affects authors of C extension modules.   Python\nstrings and container types such as lists and tuples  now use\n:ctype:`Py_ssize_t` to store their size.   Functions such as\n:cfunc:`PyList_Size`  now return :ctype:`Py_ssize_t`.  Code in extension modules\nmay therefore need to have some variables changed to :ctype:`Py_ssize_t`.\n\nThe :cfunc:`PyArg_ParseTuple` and :cfunc:`Py_BuildValue` functions have a new\nconversion code, ``n``, for :ctype:`Py_ssize_t`.   :cfunc:`PyArg_ParseTuple`'s\n``s#`` and ``t#`` still output :ctype:`int` by default, but you can define the\nmacro  :cmacro:`PY_SSIZE_T_CLEAN` before including :file:`Python.h`  to make\nthem return :ctype:`Py_ssize_t`.\n\n:pep:`353` has a section on conversion guidelines that  extension authors should\nread to learn about supporting 64-bit platforms.\n\n\n.. seealso::\n\n   :pep:`353` - Using ssize_t as the index type\n      PEP written and implemented by Martin von L\u00f6wis.\n\n.. ======================================================================\n\n\n.. _pep-357:\n\nPEP 357: The '__index__' method\n===============================\n\nThe NumPy developers had a problem that could only be solved by adding a new\nspecial method, :meth:`__index__`.  When using slice notation, as in\n``[start:stop:step]``, the values of the *start*, *stop*, and *step* indexes\nmust all be either integers or long integers.  NumPy defines a variety of\nspecialized integer types corresponding to unsigned and signed integers of 8,\n16, 32, and 64 bits, but there was no way to signal that these types could be\nused as slice indexes.\n\nSlicing can't just use the existing :meth:`__int__` method because that method\nis also used to implement coercion to integers.  If slicing used\n:meth:`__int__`, floating-point numbers would also become legal slice indexes\nand that's clearly an undesirable behaviour.\n\nInstead, a new special method called :meth:`__index__` was added.  It takes no\narguments and returns an integer giving the slice index to use.  For example::\n\n   class C:\n       def __index__ (self):\n           return self.value\n\nThe return value must be either a Python integer or long integer. The\ninterpreter will check that the type returned is correct, and raises a\n:exc:`TypeError` if this requirement isn't met.\n\nA corresponding :attr:`nb_index` slot was added to the C-level\n:ctype:`PyNumberMethods` structure to let C extensions implement this protocol.\n:cfunc:`PyNumber_Index(obj)` can be used in extension code to call the\n:meth:`__index__` function and retrieve its result.\n\n\n.. seealso::\n\n   :pep:`357` - Allowing Any Object to be Used for Slicing\n      PEP written  and implemented by Travis Oliphant.\n\n.. ======================================================================\n\n\n.. _other-lang:\n\nOther Language Changes\n======================\n\nHere are all of the changes that Python 2.5 makes to the core Python language.\n\n* The :class:`dict` type has a new hook for letting subclasses provide a default\n  value when a key isn't contained in the dictionary. When a key isn't found, the\n  dictionary's :meth:`__missing__(key)` method will be called.  This hook is used\n  to implement the new :class:`defaultdict` class in the :mod:`collections`\n  module.  The following example defines a dictionary  that returns zero for any\n  missing key::\n\n     class zerodict (dict):\n         def __missing__ (self, key):\n             return 0\n\n     d = zerodict({1:1, 2:2})\n     print d[1], d[2]   # Prints 1, 2\n     print d[3], d[4]   # Prints 0, 0\n\n* Both 8-bit and Unicode strings have new :meth:`partition(sep)`  and\n  :meth:`rpartition(sep)` methods that simplify a common use case.\n\n  The :meth:`find(S)` method is often used to get an index which is then used to\n  slice the string and obtain the pieces that are before and after the separator.\n  :meth:`partition(sep)` condenses this pattern into a single method call that\n  returns a 3-tuple containing the substring before the separator, the separator\n  itself, and the substring after the separator.  If the separator isn't found,\n  the first element of the tuple is the entire string and the other two elements\n  are empty.  :meth:`rpartition(sep)` also returns a 3-tuple but starts searching\n  from the end of the string; the ``r`` stands for 'reverse'.\n\n  Some examples::\n\n     >>> ('http://www.python.org').partition('://')\n     ('http', '://', 'www.python.org')\n     >>> ('file:/usr/share/doc/index.html').partition('://')\n     ('file:/usr/share/doc/index.html', '', '')\n     >>> (u'Subject: a quick question').partition(':')\n     (u'Subject', u':', u' a quick question')\n     >>> 'www.python.org'.rpartition('.')\n     ('www.python', '.', 'org')\n     >>> 'www.python.org'.rpartition(':')\n     ('', '', 'www.python.org')\n\n  (Implemented by Fredrik Lundh following a suggestion by Raymond Hettinger.)\n\n* The :meth:`startswith` and :meth:`endswith` methods of string types now accept\n  tuples of strings to check for. ::\n\n     def is_image_file (filename):\n         return filename.endswith(('.gif', '.jpg', '.tiff'))\n\n  (Implemented by Georg Brandl following a suggestion by Tom Lynn.)\n\n  .. RFE #1491485\n\n* The :func:`min` and :func:`max` built-in functions gained a ``key`` keyword\n  parameter analogous to the ``key`` argument for :meth:`sort`.  This parameter\n  supplies a function that takes a single argument and is called for every value\n  in the list; :func:`min`/:func:`max` will return the element with the\n  smallest/largest return value from this function. For example, to find the\n  longest string in a list, you can do::\n\n     L = ['medium', 'longest', 'short']\n     # Prints 'longest'\n     print max(L, key=len)\n     # Prints 'short', because lexicographically 'short' has the largest value\n     print max(L)\n\n  (Contributed by Steven Bethard and Raymond Hettinger.)\n\n* Two new built-in functions, :func:`any` and :func:`all`, evaluate whether an\n  iterator contains any true or false values.  :func:`any` returns :const:`True`\n  if any value returned by the iterator is true; otherwise it will return\n  :const:`False`.  :func:`all` returns :const:`True` only if all of the values\n  returned by the iterator evaluate as true. (Suggested by Guido van Rossum, and\n  implemented by Raymond Hettinger.)\n\n* The result of a class's :meth:`__hash__` method can now be either a long\n  integer or a regular integer.  If a long integer is returned, the hash of that\n  value is taken.  In earlier versions the hash value was required to be a\n  regular integer, but in 2.5 the :func:`id` built-in was changed to always\n  return non-negative numbers, and users often seem to use ``id(self)`` in\n  :meth:`__hash__` methods (though this is discouraged).\n\n  .. Bug #1536021\n\n* ASCII is now the default encoding for modules.  It's now  a syntax error if a\n  module contains string literals with 8-bit characters but doesn't have an\n  encoding declaration.  In Python 2.4 this triggered a warning, not a syntax\n  error.  See :pep:`263`  for how to declare a module's encoding; for example, you\n  might add  a line like this near the top of the source file::\n\n     # -*- coding: latin1 -*-\n\n* A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to\n  compare a Unicode string and an 8-bit string  that can't be converted to Unicode\n  using the default ASCII encoding.   The result of the comparison is false::\n\n     >>> chr(128) == unichr(128)   # Can't convert chr(128) to Unicode\n     __main__:1: UnicodeWarning: Unicode equal comparison failed\n       to convert both arguments to Unicode - interpreting them\n       as being unequal\n     False\n     >>> chr(127) == unichr(127)   # chr(127) can be converted\n     True\n\n  Previously this would raise a :class:`UnicodeDecodeError` exception, but in 2.5\n  this could result in puzzling problems when accessing a dictionary.  If you\n  looked up ``unichr(128)`` and ``chr(128)`` was being used as a key, you'd get a\n  :class:`UnicodeDecodeError` exception.  Other changes in 2.5 resulted in this\n  exception being raised instead of suppressed by the code in :file:`dictobject.c`\n  that implements dictionaries.\n\n  Raising an exception for such a comparison is strictly correct, but the change\n  might have broken code, so instead  :class:`UnicodeWarning` was introduced.\n\n  (Implemented by Marc-Andr\u00e9 Lemburg.)\n\n* One error that Python programmers sometimes make is forgetting to include an\n  :file:`__init__.py` module in a package directory. Debugging this mistake can be\n  confusing, and usually requires running Python with the :option:`-v` switch to\n  log all the paths searched. In Python 2.5, a new :exc:`ImportWarning` warning is\n  triggered when an import would have picked up a directory as a package but no\n  :file:`__init__.py` was found.  This warning is silently ignored by default;\n  provide the :option:`-Wd` option when running the Python executable to display\n  the warning message. (Implemented by Thomas Wouters.)\n\n* The list of base classes in a class definition can now be empty.   As an\n  example, this is now legal::\n\n     class C():\n         pass\n\n  (Implemented by Brett Cannon.)\n\n.. ======================================================================\n\n\n.. _25interactive:\n\nInteractive Interpreter Changes\n-------------------------------\n\nIn the interactive interpreter, ``quit`` and ``exit``  have long been strings so\nthat new users get a somewhat helpful message when they try to quit::\n\n   >>> quit\n   'Use Ctrl-D (i.e. EOF) to exit.'\n\nIn Python 2.5, ``quit`` and ``exit`` are now objects that still produce string\nrepresentations of themselves, but are also callable. Newbies who try ``quit()``\nor ``exit()`` will now exit the interpreter as they expect.  (Implemented by\nGeorg Brandl.)\n\nThe Python executable now accepts the standard long options  :option:`--help`\nand :option:`--version`; on Windows,  it also accepts the :option:`/?` option\nfor displaying a help message. (Implemented by Georg Brandl.)\n\n.. ======================================================================\n\n\n.. _opts:\n\nOptimizations\n-------------\n\nSeveral of the optimizations were developed at the NeedForSpeed sprint, an event\nheld in Reykjavik, Iceland, from May 21--28 2006. The sprint focused on speed\nenhancements to the CPython implementation and was funded by EWT LLC with local\nsupport from CCP Games.  Those optimizations added at this sprint are specially\nmarked in the following list.\n\n* When they were introduced  in Python 2.4, the built-in :class:`set` and\n  :class:`frozenset` types were built on top of Python's dictionary type.   In 2.5\n  the internal data structure has been customized for implementing sets, and as a\n  result sets will use a third less memory and are somewhat faster. (Implemented\n  by Raymond Hettinger.)\n\n* The speed of some Unicode operations, such as finding substrings, string\n  splitting, and character map encoding and decoding, has been improved.\n  (Substring search and splitting improvements were added by Fredrik Lundh and\n  Andrew Dalke at the NeedForSpeed sprint. Character maps were improved by Walter\n  D\u00f6rwald and Martin von L\u00f6wis.)\n\n  .. Patch 1313939, 1359618\n\n* The :func:`long(str, base)` function is now faster on long digit strings\n  because fewer intermediate results are calculated.  The peak is for strings of\n  around 800--1000 digits where  the function is 6 times faster. (Contributed by\n  Alan McIntyre and committed at the NeedForSpeed sprint.)\n\n  .. Patch 1442927\n\n* It's now illegal to mix iterating over a file  with ``for line in file`` and\n  calling  the file object's :meth:`read`/:meth:`readline`/:meth:`readlines`\n  methods.  Iteration uses an internal buffer and the  :meth:`read\\*` methods\n  don't use that buffer.   Instead they would return the data following the\n  buffer, causing the data to appear out of order.  Mixing iteration and these\n  methods will now trigger a :exc:`ValueError` from the :meth:`read\\*` method.\n  (Implemented by Thomas Wouters.)\n\n  .. Patch 1397960\n\n* The :mod:`struct` module now compiles structure format  strings into an\n  internal representation and caches this representation, yielding a 20% speedup.\n  (Contributed by Bob Ippolito at the NeedForSpeed sprint.)\n\n* The :mod:`re` module got a 1 or 2% speedup by switching to  Python's allocator\n  functions instead of the system's  :cfunc:`malloc` and :cfunc:`free`.\n  (Contributed by Jack Diederich at the NeedForSpeed sprint.)\n\n* The code generator's peephole optimizer now performs simple constant folding\n  in expressions.  If you write something like ``a = 2+3``, the code generator\n  will do the arithmetic and produce code corresponding to ``a = 5``.  (Proposed\n  and implemented  by Raymond Hettinger.)\n\n* Function calls are now faster because code objects now keep  the most recently\n  finished frame (a \"zombie frame\") in an internal field of the code object,\n  reusing it the next time the code object is invoked.  (Original patch by Michael\n  Hudson, modified by Armin Rigo and Richard Jones; committed at the NeedForSpeed\n  sprint.)  Frame objects are also slightly smaller, which may improve cache\n  locality and reduce memory usage a bit.  (Contributed by Neal Norwitz.)\n\n  .. Patch 876206\n  .. Patch 1337051\n\n* Python's built-in exceptions are now new-style classes, a change that speeds\n  up instantiation considerably.  Exception handling in Python 2.5 is therefore\n  about 30% faster than in 2.4. (Contributed by Richard Jones, Georg Brandl and\n  Sean Reifschneider at the NeedForSpeed sprint.)\n\n* Importing now caches the paths tried, recording whether  they exist or not so\n  that the interpreter makes fewer  :cfunc:`open` and :cfunc:`stat` calls on\n  startup. (Contributed by Martin von L\u00f6wis and Georg Brandl.)\n\n  .. Patch 921466\n\n.. ======================================================================\n\n\n.. _25modules:\n\nNew, Improved, and Removed Modules\n==================================\n\nThe standard library received many enhancements and bug fixes in Python 2.5.\nHere's a partial list of the most notable changes, sorted alphabetically by\nmodule name. Consult the :file:`Misc/NEWS` file in the source tree for a more\ncomplete list of changes, or look through the SVN logs for all the details.\n\n* The :mod:`audioop` module now supports the a-LAW encoding, and the code for\n  u-LAW encoding has been improved.  (Contributed by Lars Immisch.)\n\n* The :mod:`codecs` module gained support for incremental codecs.  The\n  :func:`codec.lookup` function now returns a :class:`CodecInfo` instance instead\n  of a tuple. :class:`CodecInfo` instances behave like a 4-tuple to preserve\n  backward compatibility but also have the attributes :attr:`encode`,\n  :attr:`decode`, :attr:`incrementalencoder`, :attr:`incrementaldecoder`,\n  :attr:`streamwriter`, and :attr:`streamreader`.  Incremental codecs  can receive\n  input and produce output in multiple chunks; the output is the same as if the\n  entire input was fed to the non-incremental codec. See the :mod:`codecs` module\n  documentation for details. (Designed and implemented by Walter D\u00f6rwald.)\n\n  .. Patch  1436130\n\n* The :mod:`collections` module gained a new type, :class:`defaultdict`, that\n  subclasses the standard :class:`dict` type.  The new type mostly behaves like a\n  dictionary but constructs a default value when a key isn't present,\n  automatically adding it to the dictionary for the requested key value.\n\n  The first argument to :class:`defaultdict`'s constructor is a factory function\n  that gets called whenever a key is requested but not found. This factory\n  function receives no arguments, so you can use built-in type constructors such\n  as :func:`list` or :func:`int`.  For example,  you can make an index of words\n  based on their initial letter like this::\n\n     words = \"\"\"Nel mezzo del cammin di nostra vita\n     mi ritrovai per una selva oscura\n     che la diritta via era smarrita\"\"\".lower().split()\n\n     index = defaultdict(list)\n\n     for w in words:\n         init_letter = w[0]\n         index[init_letter].append(w)\n\n  Printing ``index`` results in the following output::\n\n     defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'],\n             'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'],\n             'l': ['la'], 'o': ['oscura'], 'n': ['nel', 'nostra'],\n             'p': ['per'], 's': ['selva', 'smarrita'],\n             'r': ['ritrovai'], 'u': ['una'], 'v': ['vita', 'via']}\n\n  (Contributed by Guido van Rossum.)\n\n* The :class:`deque` double-ended queue type supplied by the :mod:`collections`\n  module now has a :meth:`remove(value)` method that removes the first occurrence\n  of *value* in the queue, raising :exc:`ValueError` if the value isn't found.\n  (Contributed by Raymond Hettinger.)\n\n* New module: The :mod:`contextlib` module contains helper functions for use\n  with the new ':keyword:`with`' statement.  See section :ref:`contextlibmod`\n  for more about this module.\n\n* New module: The :mod:`cProfile` module is a C implementation of  the existing\n  :mod:`profile` module that has much lower overhead. The module's interface is\n  the same as :mod:`profile`: you run ``cProfile.run('main()')`` to profile a\n  function, can save profile data to a file, etc.  It's not yet known if the\n  Hotshot profiler, which is also written in C but doesn't match the\n  :mod:`profile` module's interface, will continue to be maintained in future\n  versions of Python.  (Contributed by Armin Rigo.)\n\n  Also, the :mod:`pstats` module for analyzing the data measured by the profiler\n  now supports directing the output to any file object by supplying a *stream*\n  argument to the :class:`Stats` constructor. (Contributed by Skip Montanaro.)\n\n* The :mod:`csv` module, which parses files in comma-separated value format,\n  received several enhancements and a number of bugfixes.  You can now set the\n  maximum size in bytes of a field by calling the\n  :meth:`csv.field_size_limit(new_limit)` function; omitting the *new_limit*\n  argument will return the currently-set limit.  The :class:`reader` class now has\n  a :attr:`line_num` attribute that counts the number of physical lines read from\n  the source; records can span multiple physical lines, so :attr:`line_num` is not\n  the same as the number of records read.\n\n  The CSV parser is now stricter about multi-line quoted fields. Previously, if a\n  line ended within a quoted field without a terminating newline character, a\n  newline would be inserted into the returned field. This behavior caused problems\n  when reading files that contained carriage return characters within fields, so\n  the code was changed to return the field without inserting newlines. As a\n  consequence, if newlines embedded within fields are important, the input should\n  be split into lines in a manner that preserves the newline characters.\n\n  (Contributed by Skip Montanaro and Andrew McNamara.)\n\n* The :class:`datetime` class in the :mod:`datetime`  module now has a\n  :meth:`strptime(string, format)`  method for parsing date strings, contributed\n  by Josh Spoerri. It uses the same format characters as :func:`time.strptime` and\n  :func:`time.strftime`::\n\n     from datetime import datetime\n\n     ts = datetime.strptime('10:13:15 2006-03-07',\n                            '%H:%M:%S %Y-%m-%d')\n\n* The :meth:`SequenceMatcher.get_matching_blocks` method in the :mod:`difflib`\n  module now guarantees to return a minimal list of blocks describing matching\n  subsequences.  Previously, the algorithm would occasionally break a block of\n  matching elements into two list entries. (Enhancement by Tim Peters.)\n\n* The :mod:`doctest` module gained a ``SKIP`` option that keeps an example from\n  being executed at all.  This is intended for code snippets that are usage\n  examples intended for the reader and aren't actually test cases.\n\n  An *encoding* parameter was added to the :func:`testfile` function and the\n  :class:`DocFileSuite` class to specify the file's encoding.  This makes it\n  easier to use non-ASCII characters in  tests contained within a docstring.\n  (Contributed by Bjorn Tillenius.)\n\n  .. Patch 1080727\n\n* The :mod:`email` package has been updated to version 4.0. (Contributed by\n  Barry Warsaw.)\n\n  .. XXX need to provide some more detail here\n\n* The :mod:`fileinput` module was made more flexible. Unicode filenames are now\n  supported, and a *mode* parameter that defaults to ``\"r\"`` was added to the\n  :func:`input` function to allow opening files in binary or universal-newline\n  mode.  Another new parameter, *openhook*, lets you use a function other than\n  :func:`open`  to open the input files.  Once you're iterating over  the set of\n  files, the :class:`FileInput` object's new :meth:`fileno` returns the file\n  descriptor for the currently opened file. (Contributed by Georg Brandl.)\n\n* In the :mod:`gc` module, the new :func:`get_count` function returns a 3-tuple\n  containing the current collection counts for the three GC generations.  This is\n  accounting information for the garbage collector; when these counts reach a\n  specified threshold, a garbage collection sweep will be made.  The existing\n  :func:`gc.collect` function now takes an optional *generation* argument of 0, 1,\n  or 2 to specify which generation to collect. (Contributed by Barry Warsaw.)\n\n* The :func:`nsmallest` and  :func:`nlargest` functions in the :mod:`heapq`\n  module  now support a ``key`` keyword parameter similar to the one provided by\n  the :func:`min`/:func:`max` functions and the :meth:`sort` methods.  For\n  example::\n\n     >>> import heapq\n     >>> L = [\"short\", 'medium', 'longest', 'longer still']\n     >>> heapq.nsmallest(2, L)  # Return two lowest elements, lexicographically\n     ['longer still', 'longest']\n     >>> heapq.nsmallest(2, L, key=len)   # Return two shortest elements\n     ['short', 'medium']\n\n  (Contributed by Raymond Hettinger.)\n\n* The :func:`itertools.islice` function now accepts ``None`` for the start and\n  step arguments.  This makes it more compatible with the attributes of slice\n  objects, so that you can now write the following::\n\n     s = slice(5)     # Create slice object\n     itertools.islice(iterable, s.start, s.stop, s.step)\n\n  (Contributed by Raymond Hettinger.)\n\n* The :func:`format` function in the :mod:`locale` module has been modified and\n  two new functions were added, :func:`format_string` and :func:`currency`.\n\n  The :func:`format` function's *val* parameter could previously be a string as\n  long as no more than one %char specifier appeared; now the parameter must be\n  exactly one %char specifier with no surrounding text.  An optional *monetary*\n  parameter was also added which, if ``True``, will use the locale's rules for\n  formatting currency in placing a separator between groups of three digits.\n\n  To format strings with multiple %char specifiers, use the new\n  :func:`format_string` function that works like :func:`format` but also supports\n  mixing %char specifiers with arbitrary text.\n\n  A new :func:`currency` function was also added that formats a number according\n  to the current locale's settings.\n\n  (Contributed by Georg Brandl.)\n\n  .. Patch 1180296\n\n* The :mod:`mailbox` module underwent a massive rewrite to add the capability to\n  modify mailboxes in addition to reading them.  A new set of classes that include\n  :class:`mbox`, :class:`MH`, and :class:`Maildir` are used to read mailboxes, and\n  have an :meth:`add(message)` method to add messages, :meth:`remove(key)` to\n  remove messages, and :meth:`lock`/:meth:`unlock` to lock/unlock the mailbox.\n  The following example converts a maildir-format mailbox into an mbox-format\n  one::\n\n     import mailbox\n\n     # 'factory=None' uses email.Message.Message as the class representing\n     # individual messages.\n     src = mailbox.Maildir('maildir', factory=None)\n     dest = mailbox.mbox('/tmp/mbox')\n\n     for msg in src:\n         dest.add(msg)\n\n  (Contributed by Gregory K. Johnson.  Funding was provided by Google's 2005\n  Summer of Code.)\n\n* New module: the :mod:`msilib` module allows creating Microsoft Installer\n  :file:`.msi` files and CAB files.  Some support for reading the :file:`.msi`\n  database is also included. (Contributed by Martin von L\u00f6wis.)\n\n* The :mod:`nis` module now supports accessing domains other than the system\n  default domain by supplying a *domain* argument to the :func:`nis.match` and\n  :func:`nis.maps` functions. (Contributed by Ben Bell.)\n\n* The :mod:`operator` module's :func:`itemgetter`  and :func:`attrgetter`\n  functions now support multiple fields.   A call such as\n  ``operator.attrgetter('a', 'b')`` will return a function  that retrieves the\n  :attr:`a` and :attr:`b` attributes.  Combining  this new feature with the\n  :meth:`sort` method's ``key`` parameter  lets you easily sort lists using\n  multiple fields. (Contributed by Raymond Hettinger.)\n\n* The :mod:`optparse` module was updated to version 1.5.1 of the Optik library.\n  The :class:`OptionParser` class gained an :attr:`epilog` attribute, a string\n  that will be printed after the help message, and a :meth:`destroy` method to\n  break reference cycles created by the object. (Contributed by Greg Ward.)\n\n* The :mod:`os` module underwent several changes.  The :attr:`stat_float_times`\n  variable now defaults to true, meaning that :func:`os.stat` will now return time\n  values as floats.  (This doesn't necessarily mean that :func:`os.stat` will\n  return times that are precise to fractions of a second; not all systems support\n  such precision.)\n\n  Constants named :attr:`os.SEEK_SET`, :attr:`os.SEEK_CUR`, and\n  :attr:`os.SEEK_END` have been added; these are the parameters to the\n  :func:`os.lseek` function.  Two new constants for locking are\n  :attr:`os.O_SHLOCK` and :attr:`os.O_EXLOCK`.\n\n  Two new functions, :func:`wait3` and :func:`wait4`, were added.  They're similar\n  the :func:`waitpid` function which waits for a child process to exit and returns\n  a tuple of the process ID and its exit status, but :func:`wait3` and\n  :func:`wait4` return additional information.  :func:`wait3` doesn't take a\n  process ID as input, so it waits for any child process to exit and returns a\n  3-tuple of *process-id*, *exit-status*, *resource-usage* as returned from the\n  :func:`resource.getrusage` function. :func:`wait4(pid)` does take a process ID.\n  (Contributed by Chad J. Schroeder.)\n\n  On FreeBSD, the :func:`os.stat` function now returns  times with nanosecond\n  resolution, and the returned object now has :attr:`st_gen` and\n  :attr:`st_birthtime`. The :attr:`st_flags` member is also available, if the\n  platform supports it. (Contributed by Antti Louko and  Diego Petten\u00f2.)\n\n  .. (Patch 1180695, 1212117)\n\n* The Python debugger provided by the :mod:`pdb` module can now store lists of\n  commands to execute when a breakpoint is reached and execution stops.  Once\n  breakpoint #1 has been created, enter ``commands 1`` and enter a series of\n  commands to be executed, finishing the list with ``end``.  The command list can\n  include commands that resume execution, such as ``continue`` or ``next``.\n  (Contributed by Gr\u00e9goire Dooms.)\n\n  .. Patch 790710\n\n* The :mod:`pickle` and :mod:`cPickle` modules no longer accept a return value\n  of ``None`` from the :meth:`__reduce__` method; the method must return a tuple\n  of arguments instead.  The ability to return ``None`` was deprecated in Python\n  2.4, so this completes the removal of the feature.\n\n* The :mod:`pkgutil` module, containing various utility functions for finding\n  packages, was enhanced to support PEP 302's import hooks and now also works for\n  packages stored in ZIP-format archives. (Contributed by Phillip J. Eby.)\n\n* The pybench benchmark suite by Marc-Andr\u00e9 Lemburg is now included in the\n  :file:`Tools/pybench` directory.  The pybench suite is an improvement on the\n  commonly used :file:`pystone.py` program because pybench provides a more\n  detailed measurement of the interpreter's speed.  It times particular operations\n  such as function calls, tuple slicing, method lookups, and numeric operations,\n  instead of performing many different operations and reducing the result to a\n  single number as :file:`pystone.py` does.\n\n* The :mod:`pyexpat` module now uses version 2.0 of the Expat parser.\n  (Contributed by Trent Mick.)\n\n* The :class:`Queue` class provided by the :mod:`Queue` module gained two new\n  methods.  :meth:`join` blocks until all items in the queue have been retrieved\n  and all processing work on the items  have been completed.  Worker threads call\n  the other new method,  :meth:`task_done`, to signal that processing for an item\n  has been completed.  (Contributed by Raymond Hettinger.)\n\n* The old :mod:`regex` and :mod:`regsub` modules, which have been  deprecated\n  ever since Python 2.0, have finally been deleted.   Other deleted modules:\n  :mod:`statcache`, :mod:`tzparse`, :mod:`whrandom`.\n\n* Also deleted: the :file:`lib-old` directory, which includes ancient modules\n  such as :mod:`dircmp` and :mod:`ni`, was removed.  :file:`lib-old` wasn't on the\n  default ``sys.path``, so unless your programs explicitly added the directory to\n  ``sys.path``, this removal shouldn't affect your code.\n\n* The :mod:`rlcompleter` module is no longer  dependent on importing the\n  :mod:`readline` module and therefore now works on non-Unix platforms. (Patch\n  from Robert Kiendl.)\n\n  .. Patch #1472854\n\n* The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  classes now have a\n  :attr:`rpc_paths` attribute that constrains XML-RPC operations to a limited set\n  of URL paths; the default is to allow only ``'/'`` and ``'/RPC2'``.  Setting\n  :attr:`rpc_paths` to ``None`` or an empty tuple disables  this path checking.\n\n  .. Bug #1473048\n\n* The :mod:`socket` module now supports :const:`AF_NETLINK` sockets on Linux,\n  thanks to a patch from Philippe Biondi.   Netlink sockets are a Linux-specific\n  mechanism for communications between a user-space process and kernel code; an\n  introductory  article about them is at http://www.linuxjournal.com/article/7356.\n  In Python code, netlink addresses are represented as a tuple of 2 integers,\n  ``(pid, group_mask)``.\n\n  Two new methods on socket objects, :meth:`recv_into(buffer)` and\n  :meth:`recvfrom_into(buffer)`, store the received data in an object  that\n  supports the buffer protocol instead of returning the data as a string.  This\n  means you can put the data directly into an array or a memory-mapped file.\n\n  Socket objects also gained :meth:`getfamily`, :meth:`gettype`, and\n  :meth:`getproto` accessor methods to retrieve the family, type, and protocol\n  values for the socket.\n\n* New module: the :mod:`spwd` module provides functions for accessing the shadow\n  password database on systems that support  shadow passwords.\n\n* The :mod:`struct` is now faster because it  compiles format strings into\n  :class:`Struct` objects with :meth:`pack` and :meth:`unpack` methods.  This is\n  similar to how the :mod:`re` module lets you create compiled regular expression\n  objects.  You can still use the module-level  :func:`pack` and :func:`unpack`\n  functions; they'll create  :class:`Struct` objects and cache them.  Or you can\n  use  :class:`Struct` instances directly::\n\n     s = struct.Struct('ih3s')\n\n     data = s.pack(1972, 187, 'abc')\n     year, number, name = s.unpack(data)\n\n  You can also pack and unpack data to and from buffer objects directly using the\n  :meth:`pack_into(buffer, offset, v1, v2, ...)` and :meth:`unpack_from(buffer,\n  offset)` methods.  This lets you store data directly into an array or a memory-\n  mapped file.\n\n  (:class:`Struct` objects were implemented by Bob Ippolito at the NeedForSpeed\n  sprint.  Support for buffer objects was added by Martin Blais, also at the\n  NeedForSpeed sprint.)\n\n* The Python developers switched from CVS to Subversion during the 2.5\n  development process.  Information about the exact build version is available as\n  the ``sys.subversion`` variable, a 3-tuple of ``(interpreter-name, branch-name,\n  revision-range)``.  For example, at the time of writing my copy of 2.5 was\n  reporting ``('CPython', 'trunk', '45313:45315')``.\n\n  This information is also available to C extensions via the\n  :cfunc:`Py_GetBuildInfo` function that returns a  string of build information\n  like this: ``\"trunk:45355:45356M, Apr 13 2006, 07:42:19\"``.   (Contributed by\n  Barry Warsaw.)\n\n* Another new function, :func:`sys._current_frames`, returns the current stack\n  frames for all running threads as a dictionary mapping thread identifiers to the\n  topmost stack frame currently active in that thread at the time the function is\n  called.  (Contributed by Tim Peters.)\n\n* The :class:`TarFile` class in the :mod:`tarfile` module now has an\n  :meth:`extractall` method that extracts all members from the archive into the\n  current working directory.  It's also possible to set a different directory as\n  the extraction target, and to unpack only a subset of the archive's members.\n\n  The compression used for a tarfile opened in stream mode can now be autodetected\n  using the mode ``'r|*'``. (Contributed by Lars Gust\u00e4bel.)\n\n  .. patch 918101\n\n* The :mod:`threading` module now lets you set the stack size used when new\n  threads are created. The :func:`stack_size([*size*])` function returns the\n  currently configured stack size, and supplying the optional *size* parameter\n  sets a new value.  Not all platforms support changing the stack size, but\n  Windows, POSIX threading, and OS/2 all do. (Contributed by Andrew MacIntyre.)\n\n  .. Patch 1454481\n\n* The :mod:`unicodedata` module has been updated to use version 4.1.0 of the\n  Unicode character database.  Version 3.2.0 is required  by some specifications,\n  so it's still available as  :attr:`unicodedata.ucd_3_2_0`.\n\n* New module: the  :mod:`uuid` module generates  universally unique identifiers\n  (UUIDs) according to :rfc:`4122`.  The RFC defines several different UUID\n  versions that are generated from a starting string, from system properties, or\n  purely randomly.  This module contains a :class:`UUID` class and  functions\n  named :func:`uuid1`, :func:`uuid3`, :func:`uuid4`,  and  :func:`uuid5` to\n  generate different versions of UUID.  (Version 2 UUIDs  are not specified in\n  :rfc:`4122` and are not supported by this module.) ::\n\n     >>> import uuid\n     >>> # make a UUID based on the host ID and current time\n     >>> uuid.uuid1()\n     UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')\n\n     >>> # make a UUID using an MD5 hash of a namespace UUID and a name\n     >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')\n     UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')\n\n     >>> # make a random UUID\n     >>> uuid.uuid4()\n     UUID('16fd2706-8baf-433b-82eb-8c7fada847da')\n\n     >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name\n     >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')\n     UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')\n\n  (Contributed by Ka-Ping Yee.)\n\n* The :mod:`weakref` module's :class:`WeakKeyDictionary` and\n  :class:`WeakValueDictionary` types gained new methods for iterating over the\n  weak references contained in the dictionary.  :meth:`iterkeyrefs` and\n  :meth:`keyrefs` methods were added to :class:`WeakKeyDictionary`, and\n  :meth:`itervaluerefs` and :meth:`valuerefs` were added to\n  :class:`WeakValueDictionary`.  (Contributed by Fred L. Drake, Jr.)\n\n* The :mod:`webbrowser` module received a number of enhancements. It's now\n  usable as a script with ``python -m webbrowser``, taking a URL as the argument;\n  there are a number of switches  to control the behaviour (:option:`-n` for a new\n  browser window,  :option:`-t` for a new tab).  New module-level functions,\n  :func:`open_new` and :func:`open_new_tab`, were added  to support this.  The\n  module's :func:`open` function supports an additional feature, an *autoraise*\n  parameter that signals whether to raise the open window when possible. A number\n  of additional browsers were added to the supported list such as Firefox, Opera,\n  Konqueror, and elinks.  (Contributed by Oleg Broytmann and Georg Brandl.)\n\n  .. Patch #754022\n\n* The :mod:`xmlrpclib` module now supports returning  :class:`datetime` objects\n  for the XML-RPC date type.  Supply  ``use_datetime=True`` to the :func:`loads`\n  function or the :class:`Unmarshaller` class to enable this feature. (Contributed\n  by Skip Montanaro.)\n\n  .. Patch 1120353\n\n* The :mod:`zipfile` module now supports the ZIP64 version of the  format,\n  meaning that a .zip archive can now be larger than 4 GiB and can contain\n  individual files larger than 4 GiB.  (Contributed by Ronald Oussoren.)\n\n  .. Patch 1446489\n\n* The :mod:`zlib` module's :class:`Compress` and :class:`Decompress` objects now\n  support a :meth:`copy` method that makes a copy of the  object's internal state\n  and returns a new  :class:`Compress` or :class:`Decompress` object.\n  (Contributed by Chris AtLee.)\n\n  .. Patch 1435422\n\n.. ======================================================================\n\n\n.. _module-ctypes:\n\nThe ctypes package\n------------------\n\nThe :mod:`ctypes` package, written by Thomas Heller, has been added  to the\nstandard library.  :mod:`ctypes` lets you call arbitrary functions  in shared\nlibraries or DLLs.  Long-time users may remember the :mod:`dl` module, which\nprovides functions for loading shared libraries and calling functions in them.\nThe :mod:`ctypes` package is much fancier.\n\nTo load a shared library or DLL, you must create an instance of the\n:class:`CDLL` class and provide the name or path of the shared library or DLL.\nOnce that's done, you can call arbitrary functions by accessing them as\nattributes of the :class:`CDLL` object.   ::\n\n   import ctypes\n\n   libc = ctypes.CDLL('libc.so.6')\n   result = libc.printf(\"Line of output\\n\")\n\nType constructors for the various C types are provided: :func:`c_int`,\n:func:`c_float`, :func:`c_double`, :func:`c_char_p` (equivalent to :ctype:`char\n\\*`), and so forth.  Unlike Python's types, the C versions are all mutable; you\ncan assign to their :attr:`value` attribute to change the wrapped value.  Python\nintegers and strings will be automatically converted to the corresponding C\ntypes, but for other types you  must call the correct type constructor.  (And I\nmean *must*;  getting it wrong will often result in the interpreter crashing\nwith a segmentation fault.)\n\nYou shouldn't use :func:`c_char_p` with a Python string when the C function will\nbe modifying the memory area, because Python strings are  supposed to be\nimmutable; breaking this rule will cause puzzling bugs.  When you need a\nmodifiable memory area, use :func:`create_string_buffer`::\n\n   s = \"this is a string\"\n   buf = ctypes.create_string_buffer(s)\n   libc.strfry(buf)\n\nC functions are assumed to return integers, but you can set the :attr:`restype`\nattribute of the function object to  change this::\n\n   >>> libc.atof('2.71828')\n   -1783957616\n   >>> libc.atof.restype = ctypes.c_double\n   >>> libc.atof('2.71828')\n   2.71828\n\n:mod:`ctypes` also provides a wrapper for Python's C API  as the\n``ctypes.pythonapi`` object.  This object does *not*  release the global\ninterpreter lock before calling a function, because the lock must be held when\ncalling into the interpreter's code.   There's a :class:`py_object()` type\nconstructor that will create a  :ctype:`PyObject \\*` pointer.  A simple usage::\n\n   import ctypes\n\n   d = {}\n   ctypes.pythonapi.PyObject_SetItem(ctypes.py_object(d),\n             ctypes.py_object(\"abc\"),  ctypes.py_object(1))\n   # d is now {'abc', 1}.\n\nDon't forget to use :class:`py_object()`; if it's omitted you end  up with a\nsegmentation fault.\n\n:mod:`ctypes` has been around for a while, but people still write  and\ndistribution hand-coded extension modules because you can't rely on\n:mod:`ctypes` being present. Perhaps developers will begin to write  Python\nwrappers atop a library accessed through :mod:`ctypes` instead of extension\nmodules, now that :mod:`ctypes` is included with core Python.\n\n\n.. seealso::\n\n   http://starship.python.net/crew/theller/ctypes/\n      The ctypes web page, with a tutorial, reference, and FAQ.\n\n   The documentation  for the :mod:`ctypes` module.\n\n.. ======================================================================\n\n\n.. _module-etree:\n\nThe ElementTree package\n-----------------------\n\nA subset of Fredrik Lundh's ElementTree library for processing XML has been\nadded to the standard library as :mod:`xml.etree`.  The available modules are\n:mod:`ElementTree`, :mod:`ElementPath`, and :mod:`ElementInclude` from\nElementTree 1.2.6.    The :mod:`cElementTree` accelerator module is also\nincluded.\n\nThe rest of this section will provide a brief overview of using ElementTree.\nFull documentation for ElementTree is available at\nhttp://effbot.org/zone/element-index.htm.\n\nElementTree represents an XML document as a tree of element nodes. The text\ncontent of the document is stored as the :attr:`text` and :attr:`tail`\nattributes of  (This is one of the major differences between ElementTree and\nthe Document Object Model; in the DOM there are many different types of node,\nincluding :class:`TextNode`.)\n\nThe most commonly used parsing function is :func:`parse`, that takes either a\nstring (assumed to contain a filename) or a file-like object and returns an\n:class:`ElementTree` instance::\n\n   from xml.etree import ElementTree as ET\n\n   tree = ET.parse('ex-1.xml')\n\n   feed = urllib.urlopen(\n             'http://planet.python.org/rss10.xml')\n   tree = ET.parse(feed)\n\nOnce you have an :class:`ElementTree` instance, you can call its :meth:`getroot`\nmethod to get the root :class:`Element` node.\n\nThere's also an :func:`XML` function that takes a string literal and returns an\n:class:`Element` node (not an :class:`ElementTree`).   This function provides a\ntidy way to incorporate XML fragments, approaching the convenience of an XML\nliteral::\n\n   svg = ET.XML(\"\"\"<svg width=\"10px\" version=\"1.0\">\n                </svg>\"\"\")\n   svg.set('height', '320px')\n   svg.append(elem1)\n\nEach XML element supports some dictionary-like and some list-like access\nmethods.  Dictionary-like operations are used to access attribute values, and\nlist-like operations are used to access child nodes.\n\n+-------------------------------+--------------------------------------------+\n| Operation                     | Result                                     |\n+===============================+============================================+\n| ``elem[n]``                   | Returns n'th child element.                |\n+-------------------------------+--------------------------------------------+\n| ``elem[m:n]``                 | Returns list of m'th through n'th child    |\n|                               | elements.                                  |\n+-------------------------------+--------------------------------------------+\n| ``len(elem)``                 | Returns number of child elements.          |\n+-------------------------------+--------------------------------------------+\n| ``list(elem)``                | Returns list of child elements.            |\n+-------------------------------+--------------------------------------------+\n| ``elem.append(elem2)``        | Adds *elem2* as a child.                   |\n+-------------------------------+--------------------------------------------+\n| ``elem.insert(index, elem2)`` | Inserts *elem2* at the specified location. |\n+-------------------------------+--------------------------------------------+\n| ``del elem[n]``               | Deletes n'th child element.                |\n+-------------------------------+--------------------------------------------+\n| ``elem.keys()``               | Returns list of attribute names.           |\n+-------------------------------+--------------------------------------------+\n| ``elem.get(name)``            | Returns value of attribute *name*.         |\n+-------------------------------+--------------------------------------------+\n| ``elem.set(name, value)``     | Sets new value for attribute *name*.       |\n+-------------------------------+--------------------------------------------+\n| ``elem.attrib``               | Retrieves the dictionary containing        |\n|                               | attributes.                                |\n+-------------------------------+--------------------------------------------+\n| ``del elem.attrib[name]``     | Deletes attribute *name*.                  |\n+-------------------------------+--------------------------------------------+\n\nComments and processing instructions are also represented as :class:`Element`\nnodes.  To check if a node is a comment or processing instructions::\n\n   if elem.tag is ET.Comment:\n       ...\n   elif elem.tag is ET.ProcessingInstruction:\n       ...\n\nTo generate XML output, you should call the :meth:`ElementTree.write` method.\nLike :func:`parse`, it can take either a string or a file-like object::\n\n   # Encoding is US-ASCII\n   tree.write('output.xml')\n\n   # Encoding is UTF-8\n   f = open('output.xml', 'w')\n   tree.write(f, encoding='utf-8')\n\n(Caution: the default encoding used for output is ASCII.  For general XML work,\nwhere an element's name may contain arbitrary Unicode characters, ASCII isn't a\nvery useful encoding because it will raise an exception if an element's name\ncontains any characters with values greater than 127.  Therefore, it's best to\nspecify a different encoding such as UTF-8 that can handle any Unicode\ncharacter.)\n\nThis section is only a partial description of the ElementTree interfaces. Please\nread the package's official documentation for more details.\n\n\n.. seealso::\n\n   http://effbot.org/zone/element-index.htm\n      Official documentation for ElementTree.\n\n.. ======================================================================\n\n\n.. _module-hashlib:\n\nThe hashlib package\n-------------------\n\nA new :mod:`hashlib` module, written by Gregory P. Smith,  has been added to\nreplace the :mod:`md5` and :mod:`sha` modules.  :mod:`hashlib` adds support for\nadditional secure hashes (SHA-224, SHA-256, SHA-384, and SHA-512). When\navailable, the module uses OpenSSL for fast platform optimized implementations\nof algorithms.\n\nThe old :mod:`md5` and :mod:`sha` modules still exist as wrappers around hashlib\nto preserve backwards compatibility.  The new module's interface is very close\nto that of the old modules, but not identical. The most significant difference\nis that the constructor functions for creating new hashing objects are named\ndifferently. ::\n\n   # Old versions\n   h = md5.md5()\n   h = md5.new()\n\n   # New version\n   h = hashlib.md5()\n\n   # Old versions\n   h = sha.sha()\n   h = sha.new()\n\n   # New version\n   h = hashlib.sha1()\n\n   # Hash that weren't previously available\n   h = hashlib.sha224()\n   h = hashlib.sha256()\n   h = hashlib.sha384()\n   h = hashlib.sha512()\n\n   # Alternative form\n   h = hashlib.new('md5')          # Provide algorithm as a string\n\nOnce a hash object has been created, its methods are the same as before:\n:meth:`update(string)` hashes the specified string into the  current digest\nstate, :meth:`digest` and :meth:`hexdigest` return the digest value as a binary\nstring or a string of hex digits, and :meth:`copy` returns a new hashing object\nwith the same digest state.\n\n\n.. seealso::\n\n   The documentation  for the :mod:`hashlib` module.\n\n.. ======================================================================\n\n\n.. _module-sqlite:\n\nThe sqlite3 package\n-------------------\n\nThe pysqlite module (http://www.pysqlite.org), a wrapper for the SQLite embedded\ndatabase, has been added to the standard library under the package name\n:mod:`sqlite3`.\n\nSQLite is a C library that provides a lightweight disk-based database that\ndoesn't require a separate server process and allows accessing the database\nusing a nonstandard variant of the SQL query language. Some applications can use\nSQLite for internal data storage.  It's also possible to prototype an\napplication using SQLite and then port the code to a larger database such as\nPostgreSQL or Oracle.\n\npysqlite was written by Gerhard H\u00e4ring and provides a SQL interface compliant\nwith the DB-API 2.0 specification described by :pep:`249`.\n\nIf you're compiling the Python source yourself, note that the source tree\ndoesn't include the SQLite code, only the wrapper module. You'll need to have\nthe SQLite libraries and headers installed before compiling Python, and the\nbuild process will compile the module when the necessary headers are available.\n\nTo use the module, you must first create a :class:`Connection` object that\nrepresents the database.  Here the data will be stored in the\n:file:`/tmp/example` file::\n\n   conn = sqlite3.connect('/tmp/example')\n\nYou can also supply the special name ``:memory:`` to create a database in RAM.\n\nOnce you have a :class:`Connection`, you can create a :class:`Cursor`  object\nand call its :meth:`execute` method to perform SQL commands::\n\n   c = conn.cursor()\n\n   # Create table\n   c.execute('''create table stocks\n   (date text, trans text, symbol text,\n    qty real, price real)''')\n\n   # Insert a row of data\n   c.execute(\"\"\"insert into stocks\n             values ('2006-01-05','BUY','RHAT',100,35.14)\"\"\")\n\nUsually your SQL operations will need to use values from Python variables.  You\nshouldn't assemble your query using Python's string operations because doing so\nis insecure; it makes your program vulnerable to an SQL injection attack.\n\nInstead, use the DB-API's parameter substitution.  Put ``?`` as a placeholder\nwherever you want to use a value, and then provide a tuple of values as the\nsecond argument to the cursor's :meth:`execute` method.  (Other database modules\nmay use a different placeholder, such as ``%s`` or ``:1``.) For example::\n\n   # Never do this -- insecure!\n   symbol = 'IBM'\n   c.execute(\"... where symbol = '%s'\" % symbol)\n\n   # Do this instead\n   t = (symbol,)\n   c.execute('select * from stocks where symbol=?', t)\n\n   # Larger example\n   for t in (('2006-03-28', 'BUY', 'IBM', 1000, 45.00),\n             ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),\n             ('2006-04-06', 'SELL', 'IBM', 500, 53.00),\n            ):\n       c.execute('insert into stocks values (?,?,?,?,?)', t)\n\nTo retrieve data after executing a SELECT statement, you can either  treat the\ncursor as an iterator, call the cursor's :meth:`fetchone` method to retrieve a\nsingle matching row,  or call :meth:`fetchall` to get a list of the matching\nrows.\n\nThis example uses the iterator form::\n\n   >>> c = conn.cursor()\n   >>> c.execute('select * from stocks order by price')\n   >>> for row in c:\n   ...    print row\n   ...\n   (u'2006-01-05', u'BUY', u'RHAT', 100, 35.140000000000001)\n   (u'2006-03-28', u'BUY', u'IBM', 1000, 45.0)\n   (u'2006-04-06', u'SELL', u'IBM', 500, 53.0)\n   (u'2006-04-05', u'BUY', u'MSOFT', 1000, 72.0)\n   >>>\n\nFor more information about the SQL dialect supported by SQLite, see\nhttp://www.sqlite.org.\n\n\n.. seealso::\n\n   http://www.pysqlite.org\n      The pysqlite web page.\n\n   http://www.sqlite.org\n      The SQLite web page; the documentation describes the syntax and the available\n      data types for the supported SQL dialect.\n\n   The documentation  for the :mod:`sqlite3` module.\n\n   :pep:`249` - Database API Specification 2.0\n      PEP written by Marc-Andr\u00e9 Lemburg.\n\n.. ======================================================================\n\n\n.. _module-wsgiref:\n\nThe wsgiref package\n-------------------\n\nThe Web Server Gateway Interface (WSGI) v1.0 defines a standard interface\nbetween web servers and Python web applications and is described in :pep:`333`.\nThe :mod:`wsgiref` package is a reference implementation of the WSGI\nspecification.\n\n.. XXX should this be in a PEP 333 section instead?\n\nThe package includes a basic HTTP server that will run a WSGI application; this\nserver is useful for debugging but isn't intended for  production use.  Setting\nup a server takes only a few lines of code::\n\n   from wsgiref import simple_server\n\n   wsgi_app = ...\n\n   host = ''\n   port = 8000\n   httpd = simple_server.make_server(host, port, wsgi_app)\n   httpd.serve_forever()\n\n.. XXX discuss structure of WSGI applications?\n.. XXX provide an example using Django or some other framework?\n\n\n.. seealso::\n\n   http://www.wsgi.org\n      A central web site for WSGI-related resources.\n\n   :pep:`333` - Python Web Server Gateway Interface v1.0\n      PEP written by Phillip J. Eby.\n\n.. ======================================================================\n\n\n.. _build-api:\n\nBuild and C API Changes\n=======================\n\nChanges to Python's build process and to the C API include:\n\n* The Python source tree was converted from CVS to Subversion,  in a complex\n  migration procedure that was supervised and flawlessly carried out by Martin von\n  L\u00f6wis.  The procedure was developed as :pep:`347`.\n\n* Coverity, a company that markets a source code analysis tool called Prevent,\n  provided the results of their examination of the Python source code.  The\n  analysis found about 60 bugs that  were quickly fixed.  Many of the bugs were\n  refcounting problems, often occurring in error-handling code.  See\n  http://scan.coverity.com for the statistics.\n\n* The largest change to the C API came from :pep:`353`, which modifies the\n  interpreter to use a :ctype:`Py_ssize_t` type definition instead of\n  :ctype:`int`.  See the earlier section :ref:`pep-353` for a discussion of this\n  change.\n\n* The design of the bytecode compiler has changed a great deal,  no longer\n  generating bytecode by traversing the parse tree.  Instead the parse tree is\n  converted to an abstract syntax tree (or AST), and it is  the abstract syntax\n  tree that's traversed to produce the bytecode.\n\n  It's possible for Python code to obtain AST objects by using the\n  :func:`compile` built-in and specifying ``_ast.PyCF_ONLY_AST`` as the value of\n  the  *flags* parameter::\n\n     from _ast import PyCF_ONLY_AST\n     ast = compile(\"\"\"a=0\n     for i in range(10):\n         a += i\n     \"\"\", \"<string>\", 'exec', PyCF_ONLY_AST)\n\n     assignment = ast.body[0]\n     for_loop = ast.body[1]\n\n  No official documentation has been written for the AST code yet, but :pep:`339`\n  discusses the design.  To start learning about the code, read the definition of\n  the various AST nodes in :file:`Parser/Python.asdl`.  A Python script reads this\n  file and generates a set of C structure definitions in\n  :file:`Include/Python-ast.h`.  The :cfunc:`PyParser_ASTFromString` and\n  :cfunc:`PyParser_ASTFromFile`, defined in :file:`Include/pythonrun.h`, take\n  Python source as input and return the root of an AST representing the contents.\n  This AST can then be turned into a code object by :cfunc:`PyAST_Compile`.  For\n  more information, read the source code, and then ask questions on python-dev.\n\n  The AST code was developed under Jeremy Hylton's management, and implemented by\n  (in alphabetical order) Brett Cannon, Nick Coghlan, Grant Edwards, John\n  Ehresman, Kurt Kaiser, Neal Norwitz, Tim Peters, Armin Rigo, and Neil\n  Schemenauer, plus the participants in a number of AST sprints at conferences\n  such as PyCon.\n\n  .. List of names taken from Jeremy's python-dev post at\n  .. http://mail.python.org/pipermail/python-dev/2005-October/057500.html\n\n* Evan Jones's patch to obmalloc, first described in a talk at PyCon DC 2005,\n  was applied.  Python 2.4 allocated small objects in 256K-sized arenas, but never\n  freed arenas.  With this patch, Python will free arenas when they're empty.  The\n  net effect is that on some platforms, when you allocate many objects, Python's\n  memory usage may actually drop when you delete them and the memory may be\n  returned to the operating system.  (Implemented by Evan Jones, and reworked by\n  Tim Peters.)\n\n  Note that this change means extension modules must be more careful when\n  allocating memory.  Python's API has many different functions for allocating\n  memory that are grouped into families.  For example, :cfunc:`PyMem_Malloc`,\n  :cfunc:`PyMem_Realloc`, and :cfunc:`PyMem_Free` are one family that allocates\n  raw memory, while :cfunc:`PyObject_Malloc`, :cfunc:`PyObject_Realloc`, and\n  :cfunc:`PyObject_Free` are another family that's supposed to be used for\n  creating Python objects.\n\n  Previously these different families all reduced to the platform's\n  :cfunc:`malloc` and :cfunc:`free` functions.  This meant  it didn't matter if\n  you got things wrong and allocated memory with the :cfunc:`PyMem` function but\n  freed it with the :cfunc:`PyObject` function.  With 2.5's changes to obmalloc,\n  these families now do different things and mismatches will probably result in a\n  segfault.  You should carefully test your C extension modules with Python 2.5.\n\n* The built-in set types now have an official C API.  Call :cfunc:`PySet_New`\n  and :cfunc:`PyFrozenSet_New` to create a new set, :cfunc:`PySet_Add` and\n  :cfunc:`PySet_Discard` to add and remove elements, and :cfunc:`PySet_Contains`\n  and :cfunc:`PySet_Size` to examine the set's state. (Contributed by Raymond\n  Hettinger.)\n\n* C code can now obtain information about the exact revision of the Python\n  interpreter by calling the  :cfunc:`Py_GetBuildInfo` function that returns a\n  string of build information like this: ``\"trunk:45355:45356M, Apr 13 2006,\n  07:42:19\"``.   (Contributed by Barry Warsaw.)\n\n* Two new macros can be used to indicate C functions that are local to the\n  current file so that a faster calling convention can be used.\n  :cfunc:`Py_LOCAL(type)` declares the function as returning a value of the\n  specified *type* and uses a fast-calling qualifier.\n  :cfunc:`Py_LOCAL_INLINE(type)` does the same thing and also requests the\n  function be inlined.  If :cfunc:`PY_LOCAL_AGGRESSIVE` is defined before\n  :file:`python.h` is included, a set of more aggressive optimizations are enabled\n  for the module; you should benchmark the results to find out if these\n  optimizations actually make the code faster.  (Contributed by Fredrik Lundh at\n  the NeedForSpeed sprint.)\n\n* :cfunc:`PyErr_NewException(name, base, dict)` can now accept a tuple of base\n  classes as its *base* argument.  (Contributed by Georg Brandl.)\n\n* The :cfunc:`PyErr_Warn` function for issuing warnings is now deprecated in\n  favour of :cfunc:`PyErr_WarnEx(category, message, stacklevel)` which lets you\n  specify the number of stack frames separating this function and the caller.  A\n  *stacklevel* of 1 is the function calling :cfunc:`PyErr_WarnEx`, 2 is the\n  function above that, and so forth.  (Added by Neal Norwitz.)\n\n* The CPython interpreter is still written in C, but  the code can now be\n  compiled with a C++ compiler without errors.   (Implemented by Anthony Baxter,\n  Martin von L\u00f6wis, Skip Montanaro.)\n\n* The :cfunc:`PyRange_New` function was removed.  It was never documented, never\n  used in the core code, and had dangerously lax error checking.  In the unlikely\n  case that your extensions were using it, you can replace it by something like\n  the following::\n\n     range = PyObject_CallFunction((PyObject*) &PyRange_Type, \"lll\",\n                                   start, stop, step);\n\n.. ======================================================================\n\n\n.. _ports:\n\nPort-Specific Changes\n---------------------\n\n* MacOS X (10.3 and higher): dynamic loading of modules now uses the\n  :cfunc:`dlopen` function instead of MacOS-specific functions.\n\n* MacOS X: an :option:`--enable-universalsdk` switch was added to the\n  :program:`configure` script that compiles the interpreter as a universal binary\n  able to run on both PowerPC and Intel processors. (Contributed by Ronald\n  Oussoren; :issue:`2573`.)\n\n* Windows: :file:`.dll` is no longer supported as a filename extension for\n  extension modules.  :file:`.pyd` is now the only filename extension that will be\n  searched for.\n\n.. ======================================================================\n\n\n.. _porting:\n\nPorting to Python 2.5\n=====================\n\nThis section lists previously described changes that may require changes to your\ncode:\n\n* ASCII is now the default encoding for modules.  It's now  a syntax error if a\n  module contains string literals with 8-bit characters but doesn't have an\n  encoding declaration.  In Python 2.4 this triggered a warning, not a syntax\n  error.\n\n* Previously, the :attr:`gi_frame` attribute of a generator was always a frame\n  object.  Because of the :pep:`342` changes described in section :ref:`pep-342`,\n  it's now possible for :attr:`gi_frame` to be ``None``.\n\n* A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to\n  compare a Unicode string and an 8-bit string that can't be converted to Unicode\n  using the default ASCII encoding.  Previously such comparisons would raise a\n  :class:`UnicodeDecodeError` exception.\n\n* Library: the :mod:`csv` module is now stricter about multi-line quoted fields.\n  If your files contain newlines embedded within fields, the input should be split\n  into lines in a manner which preserves the newline characters.\n\n* Library: the :mod:`locale` module's  :func:`format` function's would\n  previously  accept any string as long as no more than one %char specifier\n  appeared.  In Python 2.5, the argument must be exactly one %char specifier with\n  no surrounding text.\n\n* Library: The :mod:`pickle` and :mod:`cPickle` modules no longer accept a\n  return value of ``None`` from the :meth:`__reduce__` method; the method must\n  return a tuple of arguments instead.  The modules also no longer accept the\n  deprecated *bin* keyword parameter.\n\n* Library: The :mod:`SimpleXMLRPCServer` and :mod:`DocXMLRPCServer`  classes now\n  have a :attr:`rpc_paths` attribute that constrains XML-RPC operations to a\n  limited set of URL paths; the default is to allow only ``'/'`` and ``'/RPC2'``.\n  Setting  :attr:`rpc_paths` to ``None`` or an empty tuple disables  this path\n  checking.\n\n* C API: Many functions now use :ctype:`Py_ssize_t`  instead of :ctype:`int` to\n  allow processing more data on 64-bit machines.  Extension code may need to make\n  the same change to avoid warnings and to support 64-bit machines.  See the\n  earlier section :ref:`pep-353` for a discussion of this change.\n\n* C API:  The obmalloc changes mean that  you must be careful to not mix usage\n  of the :cfunc:`PyMem_\\*` and :cfunc:`PyObject_\\*` families of functions. Memory\n  allocated with  one family's :cfunc:`\\*_Malloc` must be  freed with the\n  corresponding family's :cfunc:`\\*_Free` function.\n\n.. ======================================================================\n\n\nAcknowledgements\n================\n\nThe author would like to thank the following people for offering suggestions,\ncorrections and assistance with various drafts of this article: Georg Brandl,\nNick Coghlan, Phillip J. Eby, Lars Gust\u00e4bel, Raymond Hettinger, Ralf W. Grosse-\nKunstleve, Kent Johnson, Iain Lowe, Martin von L\u00f6wis, Fredrik Lundh, Andrew\nMcNamara, Skip Montanaro, Gustavo Niemeyer, Paul Prescod, James Pryor, Mike\nRovner, Scott Weikart, Barry Warsaw, Thomas Wouters.\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/os2emx/dlfcn.h": "/* -*- C -*- ***********************************************\nCopyright 1991-1995 by Stichting Mathematisch Centrum, Amsterdam,\nThe Netherlands.\n\n                        All Rights Reserved\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the names of Stichting Mathematisch\nCentrum or CWI or Corporation for National Research Initiatives or\nCNRI not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\n\nWhile CWI is the initial source for this software, a modified version\nis made available by the Corporation for National Research Initiatives\n(CNRI) at the Internet address ftp://ftp.python.org.\n\nSTICHTING MATHEMATISCH CENTRUM AND CNRI DISCLAIM ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH\nCENTRUM OR CNRI BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL\nDAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR\nPROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n\n******************************************************************/\n\n/* This library implements dlopen() - Unix-like dynamic linking\n * emulation functions for OS/2 using DosLoadModule() and company.\n */\n\n#ifndef _DLFCN_H\n#define _DLFCN_H\n\n/* load a dynamic-link library and return handle */\nvoid *dlopen(char *filename, int flags);\n\n/* return a pointer to the `symbol' in DLL */\nvoid *dlsym(void *handle, char *symbol);\n\n/* free dynamically-linked library */\nint dlclose(void *handle);\n\n/* return a string describing last occurred dl error */\nchar *dlerror(void);\n\n#endif /* !_DLFCN_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/os2emx/python27.def": "LIBRARY python26 INITINSTANCE TERMINSTANCE \nDESCRIPTION \"Python 2.6 Core DLL\" \nPROTMODE \nDATA MULTIPLE NONSHARED \nEXPORTS \n\n; From python26_s.lib(config)\n  \"_PyImport_Inittab\"\n\n; From python26_s.lib(dlfcn)\n;  \"dlopen\"\n;  \"dlsym\"\n;  \"dlclose\"\n;  \"dlerror\"\n\n; From python26_s.lib(getpathp)\n  \"Py_GetProgramFullPath\"\n  \"Py_GetPrefix\"\n  \"Py_GetExecPrefix\"\n  \"Py_GetPath\"\n\n; From python26_s.lib(getbuildinfo)\n  \"Py_GetBuildInfo\"\n  \"_Py_svnversion\"\n\n; From python26_s.lib(main)\n  \"Py_Main\"\n  \"Py_GetArgcArgv\"\n\n; From python26_s.lib(acceler)\n  \"PyGrammar_AddAccelerators\"\n  \"PyGrammar_RemoveAccelerators\"\n\n; From python26_s.lib(grammar1)\n  \"PyGrammar_FindDFA\"\n  \"PyGrammar_LabelRepr\"\n\n; From python26_s.lib(listnode)\n  \"PyNode_ListTree\"\n\n; From python26_s.lib(node)\n  \"PyNode_New\"\n  \"PyNode_AddChild\"\n  \"PyNode_Free\"\n\n; From python26_s.lib(parser)\n  \"PyParser_AddToken\"\n  \"PyParser_New\"\n  \"PyParser_Delete\"\n\n; From python26_s.lib(parsetok)\n  \"PyParser_ParseString\"\n  \"PyParser_ParseStringFlagsFilename\"\n  \"PyParser_ParseFile\"\n  \"PyParser_ParseFileFlags\"\n  \"PyParser_ParseStringFlags\"\n\n; From python26_s.lib(bitset)\n  \"_Py_newbitset\"\n  \"_Py_delbitset\"\n  \"_Py_addbit\"\n  \"_Py_samebitset\"\n  \"_Py_mergebitset\"\n\n; From python26_s.lib(metagrammar)\n  \"_Py_meta_grammar\"\n  \"Py_meta_grammar\"\n\n; From python26_s.lib(tokenizer)\n  \"PyToken_OneChar\"\n  \"PyToken_TwoChars\"\n  \"PyToken_ThreeChars\"\n  \"PyTokenizer_FromString\"\n  \"PyTokenizer_Free\"\n  \"PyTokenizer_FromFile\"\n  \"PyTokenizer_Get\"\n  \"_PyParser_TokenNames\"\n\n; From python26_s.lib(myreadline)\n  \"_PyOS_ReadlineTState\"\n  \"PyOS_ReadlineFunctionPointer\"\n  \"PyOS_StdioReadline\"\n  \"PyOS_Readline\"\n  \"PyOS_InputHook\"\n\n; From python26_s.lib(abstract)\n  \"_PyObject_LengthHint\"\n  \"PyMapping_Size\"\n  \"PyObject_CallMethod\"\n  \"PyObject_GetItem\"\n  \"PySequence_GetItem\"\n  \"PyObject_SetItem\"\n  \"PySequence_SetItem\"\n  \"PyObject_DelItem\"\n  \"PySequence_DelItem\"\n  \"PyNumber_Multiply\"\n  \"PyNumber_InPlaceAdd\"\n  \"PyNumber_InPlaceMultiply\"\n  \"PyNumber_Int\"\n  \"PyNumber_Long\"\n  \"PyNumber_Float\"\n  \"PySequence_Concat\"\n  \"PySequence_Repeat\"\n  \"PySequence_InPlaceConcat\"\n  \"PySequence_InPlaceRepeat\"\n  \"PySequence_GetSlice\"\n  \"PySequence_SetSlice\"\n  \"PySequence_Tuple\"\n  \"PyObject_GetIter\"\n  \"PyIter_Next\"\n  \"PySequence_Fast\"\n  \"_PySequence_IterSearch\"\n  \"PyObject_CallFunction\"\n  \"_PyObject_CallFunction_SizeT\"\n  \"_PyObject_CallMethod_SizeT\"\n  \"PyObject_CallMethodObjArgs\"\n  \"PyObject_CallFunctionObjArgs\"\n  \"PyObject_Cmp\"\n  \"PyObject_Call\"\n  \"PyObject_CallObject\"\n  \"PyObject_Type\"\n  \"PyObject_Size\"\n  \"PyObject_Length\"\n  \"PyObject_DelItemString\"\n  \"PyObject_AsCharBuffer\"\n  \"PyObject_CheckReadBuffer\"\n  \"PyObject_AsReadBuffer\"\n  \"PyObject_AsWriteBuffer\"\n  \"PyNumber_Check\"\n  \"PyNumber_Add\"\n  \"PyNumber_Subtract\"\n  \"PyNumber_Divide\"\n  \"PyNumber_FloorDivide\"\n  \"PyNumber_TrueDivide\"\n  \"PyNumber_Remainder\"\n  \"PyNumber_Divmod\"\n  \"PyNumber_Power\"\n  \"PyNumber_Negative\"\n  \"PyNumber_Positive\"\n  \"PyNumber_Absolute\"\n  \"PyNumber_Invert\"\n  \"PyNumber_Lshift\"\n  \"PyNumber_Rshift\"\n  \"PyNumber_And\"\n  \"PyNumber_Xor\"\n  \"PyNumber_Or\"\n  \"PyNumber_Index\"\n  \"PyNumber_InPlaceSubtract\"\n  \"PyNumber_InPlaceDivide\"\n  \"PyNumber_InPlaceFloorDivide\"\n  \"PyNumber_InPlaceTrueDivide\"\n  \"PyNumber_InPlaceRemainder\"\n  \"PyNumber_InPlacePower\"\n  \"PyNumber_InPlaceLshift\"\n  \"PyNumber_InPlaceRshift\"\n  \"PyNumber_InPlaceAnd\"\n  \"PyNumber_InPlaceXor\"\n  \"PyNumber_InPlaceOr\"\n  \"PySequence_Check\"\n  \"PySequence_Size\"\n  \"PySequence_Length\"\n  \"PySequence_DelSlice\"\n  \"PySequence_List\"\n  \"PySequence_Count\"\n  \"PySequence_Contains\"\n  \"PySequence_In\"\n  \"PySequence_Index\"\n  \"PyMapping_Check\"\n  \"PyMapping_Length\"\n  \"PyMapping_HasKeyString\"\n  \"PyMapping_HasKey\"\n  \"PyMapping_GetItemString\"\n  \"PyMapping_SetItemString\"\n  \"PyObject_IsInstance\"\n  \"PyObject_IsSubclass\"\n\n; From python26_s.lib(boolobject)\n  \"PyBool_FromLong\"\n  \"PyBool_Type\"\n  \"_Py_ZeroStruct\"\n  \"_Py_TrueStruct\"\n\n; From python26_s.lib(bufferobject)\n  \"PyBuffer_FromObject\"\n  \"PyBuffer_FromReadWriteObject\"\n  \"PyBuffer_FromMemory\"\n  \"PyBuffer_FromReadWriteMemory\"\n  \"PyBuffer_New\"\n  \"PyBuffer_Type\"\n\n; From python26_s.lib(cellobject)\n  \"PyCell_New\"\n  \"PyCell_Get\"\n  \"PyCell_Set\"\n  \"PyCell_Type\"\n\n; From python26_s.lib(classobject)\n  \"PyClass_New\"\n  \"PyClass_IsSubclass\"\n  \"PyInstance_New\"\n  \"PyInstance_NewRaw\"\n  \"PyMethod_New\"\n  \"PyMethod_Function\"\n  \"PyMethod_Self\"\n  \"PyMethod_Class\"\n  \"_PyInstance_Lookup\"\n  \"PyMethod_Fini\"\n  \"PyClass_Type\"\n  \"PyInstance_Type\"\n  \"PyMethod_Type\"\n\n; From python26_s.lib(capsule)\n  \"PyCapsule_GetContext\"\n  \"PyCapsule_GetDestructor\"\n  \"PyCapsule_GetName\"\n  \"PyCapsule_GetPointer\"\n  \"PyCapsule_Import\"\n  \"PyCapsule_IsValid\"\n  \"PyCapsule_New\"\n  \"PyCapsule_SetContext\"\n  \"PyCapsule_SetDestructor\"\n  \"PyCapsule_SetName\"\n  \"PyCapsule_SetPointer\"\n\n; From python26_s.lib(cobject)\n  \"PyCObject_FromVoidPtr\"\n  \"PyCObject_FromVoidPtrAndDesc\"\n  \"PyCObject_AsVoidPtr\"\n  \"PyCObject_GetDesc\"\n  \"PyCObject_Import\"\n  \"PyCObject_SetVoidPtr\"\n  \"PyCObject_Type\"\n\n; From python26_s.lib(codeobject)\n  \"PyCode_New\"\n  \"PyCode_Addr2Line\"\n  \"PyCode_CheckLineNumber\"\n  \"PyCode_Type\"\n\n; From python26_s.lib(complexobject)\n  \"_Py_c_pow\"\n  \"_Py_c_sum\"\n  \"_Py_c_diff\"\n  \"_Py_c_neg\"\n  \"_Py_c_prod\"\n  \"_Py_c_quot\"\n  \"PyComplex_FromCComplex\"\n  \"PyComplex_FromDoubles\"\n  \"PyComplex_RealAsDouble\"\n  \"PyComplex_ImagAsDouble\"\n  \"PyComplex_AsCComplex\"\n  \"PyComplex_Type\"\n\n; From python26_s.lib(descrobject)\n  \"PyWrapper_New\"\n  \"PyDescr_NewMethod\"\n  \"PyDescr_NewClassMethod\"\n  \"PyDescr_NewMember\"\n  \"PyDescr_NewGetSet\"\n  \"PyDescr_NewWrapper\"\n  \"PyDictProxy_New\"\n  \"PyWrapperDescr_Type\"\n  \"PyProperty_Type\"\n\n; From python26_s.lib(dictobject)\n  \"PyDict_New\"\n  \"PyDict_GetItem\"\n  \"PyDict_SetItem\"\n  \"PyDict_DelItem\"\n  \"PyDict_Clear\"\n  \"PyDict_MergeFromSeq2\"\n  \"PyDict_Merge\"\n  \"PyDict_Keys\"\n  \"PyDict_Values\"\n  \"PyDict_Contains\"\n  \"PyDict_Next\"\n  \"PyDict_Items\"\n  \"PyDict_Size\"\n  \"PyDict_Copy\"\n  \"PyDict_Update\"\n  \"PyDict_GetItemString\"\n  \"PyDict_SetItemString\"\n  \"PyDict_DelItemString\"\n  \"PyDict_Type\"\n  \"PyDictIterKey_Type\"\n  \"PyDictIterValue_Type\"\n  \"PyDictIterItem_Type\"\n\n; From python26_s.lib(enumobject)\n  \"PyEnum_Type\"\n  \"PyReversed_Type\"\n\n; From python26_s.lib(fileobject)\n  \"PyFile_FromString\"\n  \"Py_UniversalNewlineFread\"\n  \"PyFile_GetLine\"\n  \"PyFile_SoftSpace\"\n  \"PyFile_WriteObject\"\n  \"PyFile_WriteString\"\n  \"PyObject_AsFileDescriptor\"\n  \"Py_UniversalNewlineFgets\"\n  \"PyFile_SetBufSize\"\n  \"PyFile_SetEncoding\"\n  \"PyFile_FromFile\"\n  \"PyFile_AsFile\"\n  \"PyFile_Name\"\n  \"PyFile_Type\"\n\n; From python26_s.lib(floatobject)\n  \"PyFloat_FromString\"\n  \"PyFloat_AsDouble\"\n  \"PyFloat_Fini\"\n  \"_PyFloat_Pack4\"\n  \"_PyFloat_Pack8\"\n  \"_PyFloat_Unpack4\"\n  \"_PyFloat_Unpack8\"\n  \"PyFloat_FromDouble\"\n  \"PyFloat_AsReprString\"\n  \"PyFloat_AsString\"\n  \"_PyFloat_Init\"\n  \"PyFloat_AsStringEx\"\n  \"PyFloat_Type\"\n\n; From python26_s.lib(frameobject)\n  \"PyFrame_New\"\n  \"PyFrame_FastToLocals\"\n  \"PyFrame_LocalsToFast\"\n  \"_PyFrame_Init\"\n  \"PyFrame_Fini\"\n  \"PyFrame_BlockSetup\"\n  \"PyFrame_BlockPop\"\n  \"PyFrame_Type\"\n\n; From python26_s.lib(funcobject)\n  \"PyFunction_New\"\n  \"PyFunction_GetCode\"\n  \"PyFunction_GetGlobals\"\n  \"PyFunction_GetModule\"\n  \"PyFunction_GetDefaults\"\n  \"PyFunction_SetDefaults\"\n  \"PyFunction_GetClosure\"\n  \"PyFunction_SetClosure\"\n  \"PyClassMethod_New\"\n  \"PyStaticMethod_New\"\n  \"PyFunction_Type\"\n  \"PyClassMethod_Type\"\n  \"PyStaticMethod_Type\"\n\n; From python26_s.lib(genobject)\n  \"PyGen_New\"\n  \"PyGen_NeedsFinalizing\"\n  \"PyGen_Type\"\n\n; From python26_s.lib(intobject)\n  \"PyInt_AsLong\"\n  \"PyInt_AsUnsignedLongMask\"\n  \"PyInt_AsUnsignedLongLongMask\"\n  \"PyInt_FromString\"\n  \"PyInt_AsSsize_t\"\n  \"PyInt_Fini\"\n  \"PyInt_FromUnicode\"\n  \"PyInt_FromLong\"\n  \"PyInt_FromSize_t\"\n  \"PyInt_FromSsize_t\"\n  \"PyInt_GetMax\"\n  \"_PyInt_Init\"\n  \"PyInt_Type\"\n\n; From python26_s.lib(iterobject)\n  \"PySeqIter_New\"\n  \"PyCallIter_New\"\n  \"PySeqIter_Type\"\n  \"PyCallIter_Type\"\n\n; From python26_s.lib(listobject)\n  \"PyList_New\"\n  \"PyList_Append\"\n  \"PyList_Size\"\n  \"PyList_GetItem\"\n  \"PyList_SetItem\"\n  \"PyList_Insert\"\n  \"PyList_GetSlice\"\n  \"PyList_SetSlice\"\n  \"PyList_Sort\"\n  \"PyList_Reverse\"\n  \"PyList_AsTuple\"\n  \"_PyList_Extend\"\n  \"PyList_Fini\"\n  \"PyList_Type\"\n  \"PyListIter_Type\"\n  \"PyListRevIter_Type\"\n\n; From python26_s.lib(longobject)\n  \"PyLong_FromDouble\"\n  \"PyLong_AsLong\"\n  \"_PyLong_AsSsize_t\"\n  \"PyLong_AsUnsignedLong\"\n  \"_PyLong_FromByteArray\"\n  \"_PyLong_AsByteArray\"\n  \"PyLong_AsDouble\"\n  \"PyLong_FromLongLong\"\n  \"PyLong_AsLongLong\"\n  \"PyLong_FromString\"\n  \"PyLong_FromLong\"\n  \"PyLong_FromUnsignedLong\"\n  \"PyLong_AsUnsignedLongMask\"\n  \"_PyLong_FromSize_t\"\n  \"_PyLong_FromSsize_t\"\n  \"_PyLong_AsScaledDouble\"\n  \"PyLong_FromVoidPtr\"\n  \"PyLong_AsVoidPtr\"\n  \"PyLong_FromUnsignedLongLong\"\n  \"PyLong_AsUnsignedLongLong\"\n  \"PyLong_AsUnsignedLongLongMask\"\n  \"PyLong_FromUnicode\"\n  \"_PyLong_Sign\"\n  \"_PyLong_NumBits\"\n  \"_PyLong_New\"\n  \"_PyLong_Copy\"\n  \"PyLong_Type\"\n  \"_PyLong_DigitValue\"\n\n; From python26_s.lib(methodobject)\n  \"PyCFunction_Call\"\n  \"Py_FindMethodInChain\"\n  \"PyCFunction_GetFunction\"\n  \"PyCFunction_GetSelf\"\n  \"PyCFunction_GetFlags\"\n  \"Py_FindMethod\"\n  \"PyCFunction_NewEx\"\n  \"PyCFunction_Fini\"\n  \"PyCFunction_New\"\n  \"PyCFunction_Type\"\n\n; From python26_s.lib(moduleobject)\n  \"PyModule_New\"\n  \"_PyModule_Clear\"\n  \"PyModule_GetDict\"\n  \"PyModule_GetName\"\n  \"PyModule_GetFilename\"\n  \"PyModule_Type\"\n\n; From python26_s.lib(object)\n  \"Py_DivisionWarningFlag\"\n  \"PyObject_Str\"\n  \"PyObject_Repr\"\n  \"_PyObject_Str\"\n  \"PyObject_Unicode\"\n  \"PyObject_GetAttr\"\n  \"PyObject_IsTrue\"\n  \"PyNumber_CoerceEx\"\n  \"PyObject_Compare\"\n  \"PyObject_RichCompare\"\n  \"_Py_HashDouble\"\n  \"PyObject_Hash\"\n  \"PyObject_SetAttr\"\n  \"PyObject_GenericGetAttr\"\n  \"PyObject_GenericSetAttr\"\n  \"PyCallable_Check\"\n  \"PyObject_Dir\"\n  \"PyMem_Malloc\"\n  \"PyMem_Realloc\"\n  \"PyMem_Free\"\n  \"PyObject_Print\"\n  \"_PyObject_Dump\"\n  \"PyObject_RichCompareBool\"\n  \"PyObject_GetAttrString\"\n  \"PyObject_SetAttrString\"\n  \"PyObject_HasAttrString\"\n  \"PyObject_HasAttr\"\n  \"_PyObject_GetDictPtr\"\n  \"PyObject_SelfIter\"\n  \"PyObject_Not\"\n  \"PyNumber_Coerce\"\n  \"Py_ReprEnter\"\n  \"Py_ReprLeave\"\n  \"_Py_HashPointer\"\n  \"Py_IncRef\"\n  \"Py_DecRef\"\n  \"_PyTrash_deposit_object\"\n  \"_PyTrash_destroy_chain\"\n  \"PyObject_Init\"\n  \"PyObject_InitVar\"\n  \"_PyObject_New\"\n  \"_PyObject_NewVar\"\n  \"_PyObject_Del\"\n  \"_Py_ReadyTypes\"\n  \"_Py_SwappedOp\"\n  \"_Py_NotImplementedStruct\"\n  \"_Py_NoneStruct\"\n  \"_Py_cobject_hack\"\n  \"_Py_abstract_hack\"\n  \"_PyTrash_delete_nesting\"\n  \"_PyTrash_delete_later\"\n\n; From python26_s.lib(obmalloc)\n  \"PyObject_Malloc\"\n  \"PyObject_Free\"\n  \"PyObject_Realloc\"\n\n; From python26_s.lib(rangeobject)\n  \"PyRange_Type\"\n\n; From python26_s.lib(setobject)\n  \"PySet_Pop\"\n  \"PySet_New\"\n  \"PyFrozenSet_New\"\n  \"PySet_Size\"\n  \"PySet_Clear\"\n  \"PySet_Contains\"\n  \"PySet_Discard\"\n  \"PySet_Add\"\n  \"_PySet_Next\"\n  \"_PySet_Update\"\n  \"PySet_Fini\"\n  \"PySet_Type\"\n  \"PyFrozenSet_Type\"\n\n; From python26_s.lib(sliceobject)\n  \"_PySlice_FromIndices\"\n  \"PySlice_GetIndices\"\n  \"PySlice_GetIndicesEx\"\n  \"PySlice_New\"\n  \"_Py_EllipsisObject\"\n  \"PySlice_Type\"\n\n; From python26_s.lib(stringobject)\n  \"PyString_FromStringAndSize\"\n  \"PyString_InternInPlace\"\n  \"PyString_FromString\"\n  \"PyString_FromFormatV\"\n  \"PyString_AsString\"\n  \"_PyString_Resize\"\n  \"PyString_FromFormat\"\n  \"PyString_AsDecodedString\"\n  \"PyString_AsEncodedString\"\n  \"PyString_DecodeEscape\"\n  \"PyString_Repr\"\n  \"PyString_AsStringAndSize\"\n  \"_PyString_FormatLong\"\n  \"PyString_Format\"\n  \"_Py_ReleaseInternedStrings\"\n  \"PyString_Size\"\n  \"PyString_Concat\"\n  \"PyString_ConcatAndDel\"\n  \"_PyString_Eq\"\n  \"PyString_InternImmortal\"\n  \"PyString_InternFromString\"\n  \"_PyString_Join\"\n  \"PyString_Decode\"\n  \"PyString_Encode\"\n  \"PyString_AsEncodedObject\"\n  \"PyString_AsDecodedObject\"\n  \"PyString_Fini\"\n  \"PyString_Type\"\n  \"PyBaseString_Type\"\n\n; From python26_s.lib(structseq)\n  \"PyStructSequence_InitType\"\n  \"PyStructSequence_New\"\n  \"PyStructSequence_UnnamedField\"\n\n; From python26_s.lib(tupleobject)\n  \"PyTuple_New\"\n  \"PyTuple_Pack\"\n  \"_PyTuple_Resize\"\n  \"PyTuple_Size\"\n  \"PyTuple_GetItem\"\n  \"PyTuple_SetItem\"\n  \"PyTuple_GetSlice\"\n  \"PyTuple_Fini\"\n  \"PyTuple_Type\"\n  \"PyTupleIter_Type\"\n\n; From python26_s.lib(typeobject)\n  \"PyType_IsSubtype\"\n  \"_PyType_Lookup\"\n  \"PyType_Ready\"\n  \"PyType_GenericAlloc\"\n  \"_PyObject_SlotCompare\"\n  \"PyType_GenericNew\"\n  \"PyType_Type\"\n  \"PyBaseObject_Type\"\n  \"PySuper_Type\"\n\n; From python26_s.lib(unicodeobject)\n  \"PyUnicodeUCS2_Resize\"\n  \"PyUnicodeUCS2_FromOrdinal\"\n  \"PyUnicodeUCS2_FromObject\"\n  \"PyUnicodeUCS2_FromEncodedObject\"\n  \"PyUnicodeUCS2_Decode\"\n  \"PyUnicodeUCS2_GetDefaultEncoding\"\n  \"PyUnicodeUCS2_DecodeUTF8\"\n  \"PyUnicodeUCS2_DecodeLatin1\"\n  \"PyUnicodeUCS2_DecodeASCII\"\n  \"PyUnicodeUCS2_AsEncodedString\"\n  \"PyUnicodeUCS2_AsUTF8String\"\n  \"PyUnicodeUCS2_AsLatin1String\"\n  \"PyUnicodeUCS2_AsASCIIString\"\n  \"PyUnicode_DecodeUTF7\"\n  \"PyUnicode_EncodeUTF7\"\n  \"PyUnicodeUCS2_DecodeUTF8Stateful\"\n  \"PyUnicodeUCS2_EncodeUTF8\"\n  \"PyUnicodeUCS2_DecodeUTF16Stateful\"\n  \"PyUnicodeUCS2_AsUTF16String\"\n  \"PyUnicodeUCS2_DecodeUnicodeEscape\"\n  \"PyUnicodeUCS2_DecodeRawUnicodeEscape\"\n  \"PyUnicodeUCS2_EncodeRawUnicodeEscape\"\n  \"_PyUnicode_DecodeUnicodeInternal\"\n  \"PyUnicodeUCS2_DecodeCharmap\"\n  \"PyUnicode_BuildEncodingMap\"\n  \"PyUnicodeUCS2_EncodeCharmap\"\n  \"PyUnicodeUCS2_TranslateCharmap\"\n  \"PyUnicodeUCS2_EncodeDecimal\"\n  \"PyUnicodeUCS2_Count\"\n  \"PyUnicodeUCS2_Find\"\n  \"PyUnicodeUCS2_Join\"\n  \"PyUnicodeUCS2_Splitlines\"\n  \"PyUnicodeUCS2_Compare\"\n  \"PyUnicodeUCS2_Contains\"\n  \"PyUnicodeUCS2_Concat\"\n  \"_PyUnicode_XStrip\"\n  \"PyUnicodeUCS2_Replace\"\n  \"PyUnicodeUCS2_Split\"\n  \"PyUnicodeUCS2_RSplit\"\n  \"PyUnicodeUCS2_Format\"\n  \"_PyUnicodeUCS2_Init\"\n  \"_PyUnicodeUCS2_Fini\"\n  \"PyUnicodeUCS2_FromUnicode\"\n  \"PyUnicodeUCS2_AsUnicode\"\n  \"PyUnicodeUCS2_GetSize\"\n  \"PyUnicodeUCS2_GetMax\"\n  \"_PyUnicodeUCS2_AsDefaultEncodedString\"\n  \"PyUnicodeUCS2_SetDefaultEncoding\"\n  \"PyUnicodeUCS2_Encode\"\n  \"PyUnicodeUCS2_AsEncodedObject\"\n  \"PyUnicodeUCS2_DecodeUTF16\"\n  \"PyUnicodeUCS2_EncodeUTF16\"\n  \"PyUnicodeUCS2_AsUnicodeEscapeString\"\n  \"PyUnicodeUCS2_EncodeUnicodeEscape\"\n  \"PyUnicodeUCS2_AsRawUnicodeEscapeString\"\n  \"PyUnicodeUCS2_EncodeLatin1\"\n  \"PyUnicodeUCS2_EncodeASCII\"\n  \"PyUnicodeUCS2_AsCharmapString\"\n  \"PyUnicodeUCS2_Partition\"\n  \"PyUnicodeUCS2_RPartition\"\n  \"PyUnicodeUCS2_Translate\"\n  \"PyUnicodeUCS2_Tailmatch\"\n  \"PyUnicode_AsDecodedObject\"\n  \"PyUnicode_Type\"\n\n; From python26_s.lib(unicodectype)\n  \"_PyUnicode_TypeRecords\"\n  \"_PyUnicodeUCS2_ToNumeric\"\n  \"_PyUnicodeUCS2_IsLowercase\"\n  \"_PyUnicodeUCS2_IsUppercase\"\n  \"_PyUnicodeUCS2_IsTitlecase\"\n  \"_PyUnicodeUCS2_IsWhitespace\"\n  \"_PyUnicodeUCS2_IsLinebreak\"\n  \"_PyUnicodeUCS2_ToLowercase\"\n  \"_PyUnicodeUCS2_ToUppercase\"\n  \"_PyUnicodeUCS2_ToTitlecase\"\n  \"_PyUnicodeUCS2_ToDecimalDigit\"\n  \"_PyUnicodeUCS2_ToDigit\"\n  \"_PyUnicodeUCS2_IsDecimalDigit\"\n  \"_PyUnicodeUCS2_IsDigit\"\n  \"_PyUnicodeUCS2_IsNumeric\"\n  \"_PyUnicodeUCS2_IsAlpha\"\n\n; From python26_s.lib(weakrefobject)\n  \"PyWeakref_NewRef\"\n  \"PyWeakref_NewProxy\"\n  \"PyObject_ClearWeakRefs\"\n  \"PyWeakref_GetObject\"\n  \"_PyWeakref_GetWeakrefCount\"\n  \"_PyWeakref_ClearRef\"\n  \"_PyWeakref_RefType\"\n  \"_PyWeakref_ProxyType\"\n  \"_PyWeakref_CallableProxyType\"\n\n; From python26_s.lib(Python-ast)\n;  \"init_ast\"\n  \"Module\"\n  \"Interactive\"\n  \"Expression\"\n  \"Suite\"\n  \"FunctionDef\"\n  \"ClassDef\"\n  \"Return\"\n  \"Delete\"\n  \"Assign\"\n  \"AugAssign\"\n  \"Print\"\n  \"For\"\n  \"While\"\n  \"If\"\n  \"With\"\n  \"Raise\"\n  \"TryExcept\"\n  \"TryFinally\"\n  \"Assert\"\n  \"Import\"\n  \"ImportFrom\"\n  \"Exec\"\n  \"Global\"\n  \"Expr\"\n  \"Pass\"\n  \"Break\"\n  \"Continue\"\n  \"BoolOp\"\n  \"BinOp\"\n  \"UnaryOp\"\n  \"Lambda\"\n  \"IfExp\"\n  \"Dict\"\n  \"ListComp\"\n  \"GeneratorExp\"\n  \"Yield\"\n  \"Compare\"\n  \"Call\"\n  \"Repr\"\n  \"Num\"\n  \"Str\"\n  \"Attribute\"\n  \"Subscript\"\n  \"Name\"\n  \"List\"\n  \"Tuple\"\n  \"Ellipsis\"\n  \"Slice\"\n  \"ExtSlice\"\n  \"Index\"\n  \"comprehension\"\n  \"excepthandler\"\n  \"arguments\"\n  \"keyword\"\n  \"alias\"\n  \"PyAST_mod2obj\"\n\n; From python26_s.lib(asdl)\n  \"asdl_seq_new\"\n  \"asdl_int_seq_new\"\n\n; From python26_s.lib(ast)\n  \"PyAST_FromNode\"\n\n; From python26_s.lib(bltinmodule)\n  \"_PyBuiltin_Init\"\n  \"Py_FileSystemDefaultEncoding\"\n\n; From python26_s.lib(exceptions)\n  \"PyUnicodeEncodeError_GetStart\"\n  \"PyUnicodeDecodeError_GetStart\"\n  \"PyUnicodeEncodeError_GetEnd\"\n  \"PyUnicodeDecodeError_GetEnd\"\n  \"_PyExc_Init\"\n  \"PyUnicodeDecodeError_Create\"\n  \"PyUnicodeEncodeError_Create\"\n  \"PyUnicodeTranslateError_Create\"\n  \"PyUnicodeEncodeError_GetEncoding\"\n  \"PyUnicodeDecodeError_GetEncoding\"\n  \"PyUnicodeEncodeError_GetObject\"\n  \"PyUnicodeDecodeError_GetObject\"\n  \"PyUnicodeTranslateError_GetObject\"\n  \"PyUnicodeTranslateError_GetStart\"\n  \"PyUnicodeEncodeError_SetStart\"\n  \"PyUnicodeDecodeError_SetStart\"\n  \"PyUnicodeTranslateError_SetStart\"\n  \"PyUnicodeTranslateError_GetEnd\"\n  \"PyUnicodeEncodeError_SetEnd\"\n  \"PyUnicodeDecodeError_SetEnd\"\n  \"PyUnicodeTranslateError_SetEnd\"\n  \"PyUnicodeEncodeError_GetReason\"\n  \"PyUnicodeDecodeError_GetReason\"\n  \"PyUnicodeTranslateError_GetReason\"\n  \"PyUnicodeEncodeError_SetReason\"\n  \"PyUnicodeDecodeError_SetReason\"\n  \"PyUnicodeTranslateError_SetReason\"\n  \"_PyExc_Fini\"\n  \"PyExc_BaseException\"\n  \"PyExc_Exception\"\n  \"PyExc_StandardError\"\n  \"PyExc_TypeError\"\n  \"PyExc_StopIteration\"\n  \"PyExc_GeneratorExit\"\n  \"PyExc_SystemExit\"\n  \"PyExc_KeyboardInterrupt\"\n  \"PyExc_ImportError\"\n  \"PyExc_EnvironmentError\"\n  \"PyExc_IOError\"\n  \"PyExc_OSError\"\n  \"PyExc_EOFError\"\n  \"PyExc_RuntimeError\"\n  \"PyExc_NotImplementedError\"\n  \"PyExc_NameError\"\n  \"PyExc_UnboundLocalError\"\n  \"PyExc_AttributeError\"\n  \"PyExc_IndexError\"\n  \"PyExc_SyntaxError\"\n  \"PyExc_IndentationError\"\n  \"PyExc_TabError\"\n  \"PyExc_LookupError\"\n  \"PyExc_KeyError\"\n  \"PyExc_ValueError\"\n  \"PyExc_UnicodeError\"\n  \"PyExc_UnicodeEncodeError\"\n  \"PyExc_UnicodeDecodeError\"\n  \"PyExc_UnicodeTranslateError\"\n  \"PyExc_AssertionError\"\n  \"PyExc_ArithmeticError\"\n  \"PyExc_FloatingPointError\"\n  \"PyExc_OverflowError\"\n  \"PyExc_ZeroDivisionError\"\n  \"PyExc_SystemError\"\n  \"PyExc_ReferenceError\"\n  \"PyExc_MemoryError\"\n  \"PyExc_Warning\"\n  \"PyExc_UserWarning\"\n  \"PyExc_DeprecationWarning\"\n  \"PyExc_PendingDeprecationWarning\"\n  \"PyExc_SyntaxWarning\"\n  \"PyExc_RuntimeWarning\"\n  \"PyExc_FutureWarning\"\n  \"PyExc_ImportWarning\"\n  \"PyExc_MemoryErrorInst\"\n\n; From python26_s.lib(ceval)\n  \"PyEval_EvalFrameEx\"\n  \"PyEval_CallObjectWithKeywords\"\n  \"PyEval_EvalCodeEx\"\n  \"PyEval_GetFrame\"\n  \"PyEval_CallObject\"\n  \"PyEval_SetProfile\"\n  \"PyEval_SetTrace\"\n  \"PyEval_GetBuiltins\"\n  \"PyEval_GetGlobals\"\n  \"PyEval_GetLocals\"\n  \"PyEval_GetRestricted\"\n  \"PyEval_MergeCompilerFlags\"\n  \"Py_FlushLine\"\n  \"Py_AddPendingCall\"\n  \"Py_MakePendingCalls\"\n  \"Py_SetRecursionLimit\"\n  \"Py_GetRecursionLimit\"\n  \"_Py_CheckRecursiveCall\"\n  \"PyEval_GetFuncName\"\n  \"PyEval_GetFuncDesc\"\n  \"PyEval_GetCallStats\"\n  \"PyEval_EvalFrame\"\n  \"PyEval_SaveThread\"\n  \"PyEval_RestoreThread\"\n  \"PyEval_ThreadsInitialized\"\n  \"PyEval_InitThreads\"\n  \"PyEval_AcquireLock\"\n  \"PyEval_ReleaseLock\"\n  \"PyEval_AcquireThread\"\n  \"PyEval_ReleaseThread\"\n  \"PyEval_ReInitThreads\"\n  \"_PyEval_SliceIndex\"\n  \"PyEval_EvalCode\"\n  \"_PyEval_CallTracing\"\n  \"_Py_CheckRecursionLimit\"\n  \"_Py_CheckInterval\"\n  \"_Py_Ticker\"\n\n; From python26_s.lib(compile)\n  \"_Py_Mangle\"\n  \"PyAST_Compile\"\n  \"PyNode_Compile\"\n  \"Py_OptimizeFlag\"\n\n; From python26_s.lib(codecs)\n  \"_PyCodec_Lookup\"\n  \"PyCodec_Encode\"\n  \"PyCodec_Decode\"\n  \"PyCodec_IgnoreErrors\"\n  \"PyCodec_ReplaceErrors\"\n  \"PyCodec_XMLCharRefReplaceErrors\"\n  \"PyCodec_BackslashReplaceErrors\"\n  \"PyCodec_Register\"\n  \"PyCodec_Encoder\"\n  \"PyCodec_Decoder\"\n  \"PyCodec_IncrementalEncoder\"\n  \"PyCodec_IncrementalDecoder\"\n  \"PyCodec_StreamReader\"\n  \"PyCodec_StreamWriter\"\n  \"PyCodec_RegisterError\"\n  \"PyCodec_LookupError\"\n  \"PyCodec_StrictErrors\"\n\n; From python26_s.lib(errors)\n  \"PyErr_SetNone\"\n  \"PyErr_SetString\"\n  \"PyErr_GivenExceptionMatches\"\n  \"PyErr_NormalizeException\"\n  \"PyErr_Fetch\"\n  \"PyErr_Clear\"\n  \"PyErr_NoMemory\"\n  \"PyErr_SetFromErrnoWithFilenameObject\"\n  \"PyErr_Format\"\n  \"PyErr_NewException\"\n  \"PyErr_WriteUnraisable\"\n  \"PyErr_SyntaxLocation\"\n  \"PyErr_ProgramText\"\n  \"PyErr_SetObject\"\n  \"PyErr_Occurred\"\n  \"PyErr_Restore\"\n  \"PyErr_ExceptionMatches\"\n  \"PyErr_BadArgument\"\n  \"PyErr_SetFromErrno\"\n  \"PyErr_SetFromErrnoWithFilename\"\n  \"PyErr_BadInternalCall\"\n  \"_PyErr_BadInternalCall\"\n  \"PyErr_Warn\"\n  \"PyErr_WarnExplicit\"\n\n; From python26_s.lib(frozen)\n  \"PyImport_FrozenModules\"\n\n; From python26_s.lib(frozenmain)\n  \"Py_FrozenMain\"\n\n; From python26_s.lib(future)\n  \"PyFuture_FromAST\"\n\n; From python26_s.lib(getargs)\n  \"PyArg_Parse\"\n  \"_PyArg_Parse_SizeT\"\n  \"PyArg_ParseTuple\"\n  \"_PyArg_ParseTuple_SizeT\"\n  \"PyArg_ParseTupleAndKeywords\"\n  \"_PyArg_ParseTupleAndKeywords_SizeT\"\n  \"PyArg_UnpackTuple\"\n  \"_PyArg_NoKeywords\"\n  \"PyArg_VaParse\"\n  \"PyArg_VaParseTupleAndKeywords\"\n  \"_PyArg_VaParse_SizeT\"\n  \"_PyArg_VaParseTupleAndKeywords_SizeT\"\n\n; From python26_s.lib(getcompiler)\n  \"Py_GetCompiler\"\n\n; From python26_s.lib(getcopyright)\n  \"Py_GetCopyright\"\n\n; From python26_s.lib(getplatform)\n  \"Py_GetPlatform\"\n\n; From python26_s.lib(getversion)\n  \"Py_GetVersion\"\n\n; From python26_s.lib(graminit)\n  \"_PyParser_Grammar\"\n\n; From python26_s.lib(import)\n  \"_PyImport_Init\"\n  \"_PyImportHooks_Init\"\n  \"PyImport_ImportModule\"\n  \"PyImport_Cleanup\"\n  \"_PyImport_FixupExtension\"\n  \"PyImport_AddModule\"\n  \"PyImport_ExecCodeModuleEx\"\n  \"PyImport_ImportFrozenModule\"\n  \"PyImport_ImportModuleEx\"\n  \"PyImport_ImportModuleLevel\"\n  \"PyImport_ReloadModule\"\n  \"PyImport_Import\"\n;  \"initimp\"\n  \"_PyImport_Fini\"\n  \"PyImport_GetMagicNumber\"\n  \"PyImport_ExecCodeModule\"\n  \"PyImport_GetModuleDict\"\n  \"_PyImport_FindModule\"\n  \"_PyImport_IsScript\"\n  \"_PyImport_ReInitLock\"\n  \"_PyImport_FindExtension\"\n  \"PyImport_AppendInittab\"\n  \"PyImport_ExtendInittab\"\n  \"PyImport_Inittab\"\n  \"_PyImport_Filetab\"\n\n; From python26_s.lib(importdl)\n  \"_PyImport_LoadDynamicModule\"\n\n; From python26_s.lib(marshal)\n  \"PyMarshal_ReadLongFromFile\"\n  \"PyMarshal_WriteObjectToString\"\n  \"PyMarshal_WriteLongToFile\"\n  \"PyMarshal_WriteObjectToFile\"\n  \"PyMarshal_ReadShortFromFile\"\n  \"PyMarshal_ReadObjectFromFile\"\n  \"PyMarshal_ReadLastObjectFromFile\"\n  \"PyMarshal_ReadObjectFromString\"\n  \"PyMarshal_Init\"\n\n; From python26_s.lib(modsupport)\n  \"Py_InitModule4\"\n  \"Py_BuildValue\"\n  \"_Py_BuildValue_SizeT\"\n  \"PyEval_CallFunction\"\n  \"PyEval_CallMethod\"\n  \"_Py_VaBuildValue_SizeT\"\n  \"Py_VaBuildValue\"\n  \"PyModule_AddObject\"\n  \"PyModule_AddIntConstant\"\n  \"PyModule_AddStringConstant\"\n  \"_Py_PackageContext\"\n\n; From python26_s.lib(mysnprintf)\n  \"PyOS_snprintf\"\n  \"PyOS_vsnprintf\"\n\n; From python26_s.lib(mystrtoul)\n  \"PyOS_strtoul\"\n  \"PyOS_strtol\"\n\n; From python26_s.lib(pyarena)\n  \"PyArena_New\"\n  \"PyArena_Free\"\n  \"PyArena_Malloc\"\n  \"PyArena_AddPyObject\"\n\n; From python26_s.lib(pyfpe)\n  \"PyFPE_dummy\"\n\n; From python26_s.lib(pystate)\n  \"PyInterpreterState_Clear\"\n  \"PyThreadState_Clear\"\n  \"_PyThread_CurrentFrames\"\n  \"PyGILState_Ensure\"\n  \"PyGILState_Release\"\n  \"PyInterpreterState_New\"\n  \"PyInterpreterState_Delete\"\n  \"PyThreadState_Delete\"\n  \"PyThreadState_New\"\n  \"PyThreadState_DeleteCurrent\"\n  \"PyThreadState_Get\"\n  \"PyThreadState_Swap\"\n  \"PyThreadState_GetDict\"\n  \"PyThreadState_SetAsyncExc\"\n  \"PyGILState_GetThisThreadState\"\n  \"PyInterpreterState_Head\"\n  \"PyInterpreterState_Next\"\n  \"PyInterpreterState_ThreadHead\"\n  \"PyThreadState_Next\"\n  \"_PyGILState_Init\"\n  \"_PyGILState_Fini\"\n  \"_PyThreadState_Current\"\n  \"_PyThreadState_GetFrame\"\n\n; From python26_s.lib(pystrtod)\n  \"PyOS_ascii_strtod\"\n  \"PyOS_ascii_formatd\"\n  \"PyOS_ascii_atof\"\n\n; From python26_s.lib(pythonrun)\n  \"Py_IgnoreEnvironmentFlag\"\n  \"Py_DebugFlag\"\n  \"Py_VerboseFlag\"\n  \"Py_NoSiteFlag\"\n  \"Py_InteractiveFlag\"\n  \"Py_FrozenFlag\"\n  \"Py_InitializeEx\"\n  \"Py_FatalError\"\n  \"Py_NewInterpreter\"\n  \"PyErr_Print\"\n  \"PyRun_InteractiveOneFlags\"\n  \"PyParser_ASTFromFile\"\n  \"PyRun_SimpleFileExFlags\"\n  \"PyRun_FileExFlags\"\n  \"Py_Exit\"\n  \"PyErr_PrintEx\"\n  \"PyErr_Display\"\n  \"Py_SetProgramName\"\n  \"Py_GetProgramName\"\n  \"Py_SetPythonHome\"\n  \"Py_GetPythonHome\"\n  \"Py_Initialize\"\n  \"Py_Finalize\"\n  \"Py_IsInitialized\"\n  \"Py_EndInterpreter\"\n  \"PyRun_AnyFileFlags\"\n  \"Py_FdIsInteractive\"\n  \"PyRun_InteractiveLoopFlags\"\n  \"PyRun_AnyFileExFlags\"\n  \"PyRun_SimpleStringFlags\"\n  \"PyRun_StringFlags\"\n  \"PyParser_ASTFromString\"\n  \"PyParser_SimpleParseStringFlags\"\n  \"PyParser_SimpleParseFileFlags\"\n  \"Py_CompileStringFlags\"\n  \"Py_SymtableString\"\n  \"Py_AtExit\"\n  \"PyOS_getsig\"\n  \"PyOS_setsig\"\n  \"PyParser_SetError\"\n  \"PyModule_GetWarningsModule\"\n  \"PyParser_SimpleParseStringFlagsFilename\"\n  \"PyParser_SimpleParseStringFilename\"\n  \"PyParser_SimpleParseFile\"\n  \"PyParser_SimpleParseString\"\n  \"PyRun_AnyFile\"\n  \"PyRun_AnyFileEx\"\n  \"PyRun_File\"\n  \"PyRun_FileEx\"\n  \"PyRun_FileFlags\"\n  \"PyRun_SimpleFile\"\n  \"PyRun_SimpleFileEx\"\n  \"PyRun_String\"\n  \"PyRun_SimpleString\"\n  \"Py_CompileString\"\n  \"PyRun_InteractiveOne\"\n  \"PyRun_InteractiveLoop\"\n  \"Py_UseClassExceptionsFlag\"\n  \"Py_UnicodeFlag\"\n  \"_Py_QnewFlag\"\n\n; From python26_s.lib(structmember)\n  \"PyMember_Get\"\n  \"PyMember_GetOne\"\n  \"PyMember_SetOne\"\n  \"PyMember_Set\"\n\n; From python26_s.lib(symtable)\n  \"PySymtable_Build\"\n  \"PySymtable_Free\"\n  \"PyST_GetScope\"\n  \"PySymtable_Lookup\"\n  \"PySTEntry_Type\"\n\n; From python26_s.lib(sysmodule)\n  \"_PySys_Init\"\n  \"PySys_WriteStderr\"\n  \"PySys_SetPath\"\n  \"PySys_SetArgv\"\n  \"PySys_WriteStdout\"\n  \"Py_SubversionRevision\"\n  \"Py_SubversionShortBranch\"\n  \"PySys_GetObject\"\n  \"PySys_SetObject\"\n  \"PySys_GetFile\"\n  \"PySys_ResetWarnOptions\"\n  \"PySys_AddWarnOption\"\n\n; From python26_s.lib(traceback)\n  \"PyTraceBack_Here\"\n  \"PyTraceBack_Print\"\n  \"PyTraceBack_Type\"\n\n; From python26_s.lib(getopt)\n  \"_PyOS_GetOpt\"\n  \"_PyOS_opterr\"\n  \"_PyOS_optind\"\n  \"_PyOS_optarg\"\n\n; From python26_s.lib(dynload_shlib)\n  \"_PyImport_DynLoadFiletab\"\n  \"_PyImport_GetDynLoadFunc\"\n\n; From python26_s.lib(thread)\n  \"PyThread_delete_key_value\"\n  \"PyThread_init_thread\"\n  \"PyThread_start_new_thread\"\n  \"PyThread_exit_thread\"\n  \"PyThread_get_thread_ident\"\n  \"PyThread_allocate_lock\"\n  \"PyThread_free_lock\"\n  \"PyThread_acquire_lock\"\n  \"PyThread_release_lock\"\n  \"PyThread_get_stacksize\"\n  \"PyThread_set_stacksize\"\n  \"PyThread_create_key\"\n  \"PyThread_delete_key\"\n  \"PyThread_set_key_value\"\n  \"PyThread_get_key_value\"\n  \"PyThread__exit_thread\"\n\n; From python26_s.lib(gcmodule)\n;  \"initgc\"\n  \"_PyObject_GC_New\"\n  \"_PyObject_GC_NewVar\"\n  \"PyGC_Collect\"\n  \"_PyObject_GC_Resize\"\n  \"_PyObject_GC_Malloc\"\n  \"PyObject_GC_Track\"\n  \"PyObject_GC_UnTrack\"\n  \"PyObject_GC_Del\"\n  \"_PyGC_Dump\"\n  \"_PyObject_GC_Track\"\n  \"_PyObject_GC_UnTrack\"\n  \"_PyObject_GC_Del\"\n  \"_PyGC_generation0\"\n\n; From python26_s.lib(signalmodule)\n;  \"initsignal\"\n  \"PyErr_CheckSignals\"\n  \"PyErr_SetInterrupt\"\n  \"PyOS_FiniInterrupts\"\n  \"PyOS_InterruptOccurred\"\n  \"PyOS_InitInterrupts\"\n  \"PyOS_AfterFork\"\n\n; From python26_s.lib(posixmodule)\n;  \"initos2\"\n\n; From python26_s.lib(_threadmodule)\n;  \"init_thread\"\n\n; From python26_s.lib(arraymodule)\n;  \"initarray\"\n;  \"array_methods\"\n\n; From python26_s.lib(binascii)\n;  \"initbinascii\"\n\n; From python26_s.lib(cmathmodule)\n;  \"initcmath\"\n\n; From python26_s.lib(_codecsmodule)\n;  \"init_codecs\"\n\n; From python26_s.lib(collectionsmodule)\n;  \"initcollections\"\n  \"dequeiter_type\"\n  \"dequereviter_type\"\n\n; From python26_s.lib(cPickle)\n;  \"initcPickle\"\n;  \"fast_save_leave\"\n\n; From python26_s.lib(_csv)\n;  \"init_csv\"\n\n; From python26_s.lib(datetimemodule)\n;  \"initdatetime\"\n\n; From python26_s.lib(dlmodule)\n;  \"initdl\"\n\n; From python26_s.lib(errnomodule)\n;  \"initerrno\"\n\n; From python26_s.lib(fcntlmodule)\n;  \"initfcntl\"\n\n; From python26_s.lib(_functoolsmodule)\n;  \"init_functools\"\n\n; From python26_s.lib(_heapqmodule)\n;  \"init_heapq\"\n\n; From python26_s.lib(imageop)\n;  \"initimageop\"\n\n; From python26_s.lib(itertoolsmodule)\n;  \"inititertools\"\n\n; From python26_s.lib(_localemodule)\n;  \"init_locale\"\n\n; From python26_s.lib(mathmodule)\n;  \"initmath\"\n\n; From python26_s.lib(md5)\n  \"md5_finish\"\n  \"md5_init\"\n  \"md5_append\"\n\n; From python26_s.lib(md5module)\n;  \"init_md5\"\n\n; From python26_s.lib(operator)\n;  \"initoperator\"\n\n; From python26_s.lib(_randommodule)\n;  \"init_random\"\n\n; From python26_s.lib(rgbimgmodule)\n;  \"initrgbimg\"\n\n; From python26_s.lib(shamodule)\n;  \"init_sha\"\n\n; From python26_s.lib(sha256module)\n;  \"init_sha256\"\n\n; From python26_s.lib(sha512module)\n;  \"init_sha512\"\n\n; From python26_s.lib(_sre)\n;  \"init_sre\"\n\n; From python26_s.lib(stropmodule)\n;  \"initstrop\"\n\n; From python26_s.lib(_struct)\n;  \"init_struct\"\n\n; From python26_s.lib(symtablemodule)\n;  \"init_symtable\"\n\n; From python26_s.lib(termios)\n;  \"inittermios\"\n\n; From python26_s.lib(timemodule)\n;  \"inittime\"\n  \"_PyTime_DoubleToTimet\"\n;  \"inittimezone\"\n\n; From python26_s.lib(timingmodule)\n;  \"inittiming\"\n\n; From python26_s.lib(_weakref)\n;  \"init_weakref\"\n\n; From python26_s.lib(xxsubtype)\n;  \"initxxsubtype\"\n\n; From python26_s.lib(zipimport)\n;  \"initzipimport\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/os2emx/dlfcn.c": "/* -*- C -*- ***********************************************\nCopyright 1991-1995 by Stichting Mathematisch Centrum, Amsterdam,\nThe Netherlands.\n\n                        All Rights Reserved\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the names of Stichting Mathematisch\nCentrum or CWI or Corporation for National Research Initiatives or\nCNRI not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\n\nWhile CWI is the initial source for this software, a modified version\nis made available by the Corporation for National Research Initiatives\n(CNRI) at the Internet address ftp://ftp.python.org.\n\nSTICHTING MATHEMATISCH CENTRUM AND CNRI DISCLAIM ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH\nCENTRUM OR CNRI BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL\nDAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR\nPROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n\n******************************************************************/\n\n/* This library implements dlopen() - Unix-like dynamic linking\n * emulation functions for OS/2 using DosLoadModule() and company.\n */\n\n#define INCL_DOS\n#define INCL_DOSERRORS\n#define INCL_DOSSESMGR\n#define INCL_WINPROGRAMLIST\n#define INCL_WINFRAMEMGR\n#include <os2.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <malloc.h>\n\ntypedef struct _track_rec {\n    char *name;\n    HMODULE handle;\n    void *id;\n    struct _track_rec *next;\n} tDLLchain, *DLLchain;\n\nstatic DLLchain dlload = NULL;  /* A simple chained list of DLL names */\nstatic char dlerr [256];        /* last error text string */\nstatic void *last_id;\n\nstatic DLLchain find_id(void *id)\n{\n    DLLchain tmp;\n\n    for (tmp = dlload; tmp; tmp = tmp->next)\n        if (id == tmp->id)\n            return tmp;\n\n    return NULL;\n}\n\n/* load a dynamic-link library and return handle */\nvoid *dlopen(char *filename, int flags)\n{\n    HMODULE hm;\n    DLLchain tmp;\n    char err[256];\n    char *errtxt;\n    int rc = 0, set_chain = 0;\n\n    for (tmp = dlload; tmp; tmp = tmp->next)\n        if (strnicmp(tmp->name, filename, 999) == 0)\n            break;\n\n    if (!tmp)\n    {\n        tmp = (DLLchain) malloc(sizeof(tDLLchain));\n        if (!tmp)\n            goto nomem;\n        tmp->name = strdup(filename);\n        tmp->next = dlload;\n        set_chain = 1;\n    }\n\n    switch (rc = DosLoadModule((PSZ)&err, sizeof(err), filename, &hm))\n    {\n        case NO_ERROR:\n            tmp->handle = hm;\n            if (set_chain)\n            {\n                do\n                    last_id++;\n                while ((last_id == 0) || (find_id(last_id)));\n                tmp->id = last_id;\n                dlload = tmp;\n            }\n            return tmp->id;\n        case ERROR_FILE_NOT_FOUND:\n        case ERROR_PATH_NOT_FOUND:\n            errtxt = \"module `%s' not found\";\n            break;\n        case ERROR_TOO_MANY_OPEN_FILES:\n        case ERROR_NOT_ENOUGH_MEMORY:\n        case ERROR_SHARING_BUFFER_EXCEEDED:\nnomem:\n            errtxt = \"out of system resources\";\n            break;\n        case ERROR_ACCESS_DENIED:\n            errtxt = \"access denied\";\n            break;\n        case ERROR_BAD_FORMAT:\n        case ERROR_INVALID_SEGMENT_NUMBER:\n        case ERROR_INVALID_ORDINAL:\n        case ERROR_INVALID_MODULETYPE:\n        case ERROR_INVALID_EXE_SIGNATURE:\n        case ERROR_EXE_MARKED_INVALID:\n        case ERROR_ITERATED_DATA_EXCEEDS_64K:\n        case ERROR_INVALID_MINALLOCSIZE:\n        case ERROR_INVALID_SEGDPL:\n        case ERROR_AUTODATASEG_EXCEEDS_64K:\n        case ERROR_RELOCSRC_CHAIN_EXCEEDS_SEGLIMIT:\n            errtxt = \"invalid module format\";\n            break;\n        case ERROR_INVALID_NAME:\n            errtxt = \"filename doesn't match module name\";\n            break;\n        case ERROR_SHARING_VIOLATION:\n        case ERROR_LOCK_VIOLATION:\n            errtxt = \"sharing violation\";\n            break;\n        case ERROR_INIT_ROUTINE_FAILED:\n            errtxt = \"module initialization failed\";\n            break;\n        default:\n            errtxt = \"cause `%s', error code = %d\";\n            break;\n    }\n    snprintf(dlerr, sizeof(dlerr), errtxt, &err, rc);\n    if (tmp)\n    {\n        if (tmp->name)\n            free(tmp->name);\n        free(tmp);\n    }\n    return 0;\n}\n\n/* return a pointer to the `symbol' in DLL */\nvoid *dlsym(void *handle, char *symbol)\n{\n    int rc = 0;\n    PFN addr;\n    char *errtxt;\n    int symord = 0;\n    DLLchain tmp = find_id(handle);\n\n    if (!tmp)\n        goto inv_handle;\n\n    if (*symbol == '#')\n        symord = atoi(symbol + 1);\n\n    switch (rc = DosQueryProcAddr(tmp->handle, symord, symbol, &addr))\n    {\n        case NO_ERROR:\n            return (void *)addr;\n        case ERROR_INVALID_HANDLE:\ninv_handle:\n            errtxt = \"invalid module handle\";\n            break;\n        case ERROR_PROC_NOT_FOUND:\n        case ERROR_INVALID_NAME:\n            errtxt = \"no symbol `%s' in module\";\n            break;\n        default:\n            errtxt = \"symbol `%s', error code = %d\";\n            break;\n    }\n    snprintf(dlerr, sizeof(dlerr), errtxt, symbol, rc);\n    return NULL;\n}\n\n/* free dynamically-linked library */\nint dlclose(void *handle)\n{\n    int rc;\n    DLLchain tmp = find_id(handle);\n\n    if (!tmp)\n        goto inv_handle;\n\n    switch (rc = DosFreeModule(tmp->handle))\n    {\n        case NO_ERROR:\n            free(tmp->name);\n            dlload = tmp->next;\n            free(tmp);\n            return 0;\n        case ERROR_INVALID_HANDLE:\ninv_handle:\n            strcpy(dlerr, \"invalid module handle\");\n            return -1;\n        case ERROR_INVALID_ACCESS:\n            strcpy(dlerr, \"access denied\");\n            return -1;\n        default:\n            return -1;\n    }\n}\n\n/* return a string describing last occurred dl error */\nchar *dlerror()\n{\n    return dlerr;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Python/dynload_shlib.c": "\n/* Support for dynamic loading of extension modules */\n\n#include \"Python.h\"\n#include \"importdl.h\"\n\n#include <sys/types.h>\n#include <sys/stat.h>\n\n#if defined(__NetBSD__)\n#include <sys/param.h>\n#if (NetBSD < 199712)\n#include <nlist.h>\n#include <link.h>\n#define dlerror() \"error in dynamic linking\"\n#endif\n#endif /* NetBSD */\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#else\n#if defined(PYOS_OS2) && defined(PYCC_GCC)\n#include \"dlfcn.h\"\n#endif\n#endif\n\n#if (defined(__OpenBSD__) || defined(__NetBSD__)) && !defined(__ELF__)\n#define LEAD_UNDERSCORE \"_\"\n#else\n#define LEAD_UNDERSCORE \"\"\n#endif\n\n\nconst struct filedescr _PyImport_DynLoadFiletab[] = {\n#ifdef __CYGWIN__\n    {\".dll\", \"rb\", C_EXTENSION},\n    {\"module.dll\", \"rb\", C_EXTENSION},\n#else\n#if defined(PYOS_OS2) && defined(PYCC_GCC)\n    {\".pyd\", \"rb\", C_EXTENSION},\n    {\".dll\", \"rb\", C_EXTENSION},\n#else\n#ifdef __VMS\n    {\".exe\", \"rb\", C_EXTENSION},\n    {\".EXE\", \"rb\", C_EXTENSION},\n    {\"module.exe\", \"rb\", C_EXTENSION},\n    {\"MODULE.EXE\", \"rb\", C_EXTENSION},\n#else\n    {\".so\", \"rb\", C_EXTENSION},\n    {\"module.so\", \"rb\", C_EXTENSION},\n#endif\n#endif\n#endif\n    {0, 0}\n};\n\nstatic struct {\n    dev_t dev;\n#ifdef __VMS\n    ino_t ino[3];\n#else\n    ino_t ino;\n#endif\n    void *handle;\n} handles[128];\nstatic int nhandles = 0;\n\n\ndl_funcptr _PyImport_GetDynLoadFunc(const char *fqname, const char *shortname,\n                                    const char *pathname, FILE *fp)\n{\n    dl_funcptr p;\n    void *handle;\n    char funcname[258];\n    char pathbuf[260];\n    int dlopenflags=0;\n\n    if (strchr(pathname, '/') == NULL) {\n        /* Prefix bare filename with \"./\" */\n        PyOS_snprintf(pathbuf, sizeof(pathbuf), \"./%-.255s\", pathname);\n        pathname = pathbuf;\n    }\n\n    PyOS_snprintf(funcname, sizeof(funcname),\n                  LEAD_UNDERSCORE \"PyInit_%.200s\", shortname);\n\n    if (fp != NULL) {\n        int i;\n        struct stat statb;\n        fstat(fileno(fp), &statb);\n        for (i = 0; i < nhandles; i++) {\n            if (statb.st_dev == handles[i].dev &&\n                statb.st_ino == handles[i].ino) {\n                p = (dl_funcptr) dlsym(handles[i].handle,\n                                       funcname);\n                return p;\n            }\n        }\n        if (nhandles < 128) {\n            handles[nhandles].dev = statb.st_dev;\n#ifdef __VMS\n            handles[nhandles].ino[0] = statb.st_ino[0];\n            handles[nhandles].ino[1] = statb.st_ino[1];\n            handles[nhandles].ino[2] = statb.st_ino[2];\n#else\n            handles[nhandles].ino = statb.st_ino;\n#endif\n        }\n    }\n\n#if !(defined(PYOS_OS2) && defined(PYCC_GCC))\n    dlopenflags = PyThreadState_GET()->interp->dlopenflags;\n#endif\n\n    if (Py_VerboseFlag)\n        PySys_WriteStderr(\"dlopen(\\\"%s\\\", %x);\\n\", pathname,\n                          dlopenflags);\n\n#ifdef __VMS\n    /* VMS currently don't allow a pathname, use a logical name instead */\n    /* Concatenate 'python_module_' and shortname */\n    /* so \"import vms.bar\" will use the logical python_module_bar */\n    /* As C module use only one name space this is probably not a */\n    /* important limitation */\n    PyOS_snprintf(pathbuf, sizeof(pathbuf), \"python_module_%-.200s\",\n                  shortname);\n    pathname = pathbuf;\n#endif\n\n    handle = dlopen(pathname, dlopenflags);\n\n    if (handle == NULL) {\n        const char *error = dlerror();\n        if (error == NULL)\n            error = \"unknown dlopen() error\";\n        PyErr_SetString(PyExc_ImportError, error);\n        return NULL;\n    }\n    if (fp != NULL && nhandles < 128)\n        handles[nhandles++].handle = handle;\n    p = (dl_funcptr) dlsym(handle, funcname);\n    return p;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Python/sysmodule.c": "\n/* System module */\n\n/*\nVarious bits of information used by the interpreter are collected in\nmodule 'sys'.\nFunction member:\n- exit(sts): raise SystemExit\nData members:\n- stdin, stdout, stderr: standard file objects\n- modules: the table of modules (dictionary)\n- path: module search path (list of strings)\n- argv: script arguments (list of strings)\n- ps1, ps2: optional primary and secondary prompts (strings)\n*/\n\n#include \"Python.h\"\n#include \"structseq.h\"\n#include \"code.h\"\n#include \"frameobject.h\"\n#include \"eval.h\"\n\n#include \"osdefs.h\"\n\n#ifdef MS_WINDOWS\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#endif /* MS_WINDOWS */\n\n#ifdef MS_COREDLL\nextern void *PyWin_DLLhModule;\n/* A string loaded from the DLL at startup: */\nextern const char *PyWin_DLLVersionString;\n#endif\n\n#ifdef __VMS\n#include <unixlib.h>\n#endif\n\n#ifdef HAVE_LANGINFO_H\n#include <locale.h>\n#include <langinfo.h>\n#endif\n\nPyObject *\nPySys_GetObject(const char *name)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *sd = tstate->interp->sysdict;\n    if (sd == NULL)\n        return NULL;\n    return PyDict_GetItemString(sd, name);\n}\n\nint\nPySys_SetObject(const char *name, PyObject *v)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *sd = tstate->interp->sysdict;\n    if (v == NULL) {\n        if (PyDict_GetItemString(sd, name) == NULL)\n            return 0;\n        else\n            return PyDict_DelItemString(sd, name);\n    }\n    else\n        return PyDict_SetItemString(sd, name, v);\n}\n\nstatic PyObject *\nsys_displayhook(PyObject *self, PyObject *o)\n{\n    PyObject *outf;\n    PyInterpreterState *interp = PyThreadState_GET()->interp;\n    PyObject *modules = interp->modules;\n    PyObject *builtins = PyDict_GetItemString(modules, \"builtins\");\n\n    if (builtins == NULL) {\n        PyErr_SetString(PyExc_RuntimeError, \"lost builtins module\");\n        return NULL;\n    }\n\n    /* Print value except if None */\n    /* After printing, also assign to '_' */\n    /* Before, set '_' to None to avoid recursion */\n    if (o == Py_None) {\n        Py_INCREF(Py_None);\n        return Py_None;\n    }\n    if (PyObject_SetAttrString(builtins, \"_\", Py_None) != 0)\n        return NULL;\n    outf = PySys_GetObject(\"stdout\");\n    if (outf == NULL || outf == Py_None) {\n        PyErr_SetString(PyExc_RuntimeError, \"lost sys.stdout\");\n        return NULL;\n    }\n    if (PyFile_WriteObject(o, outf, 0) != 0)\n        return NULL;\n    if (PyFile_WriteString(\"\\n\", outf) != 0)\n        return NULL;\n    if (PyObject_SetAttrString(builtins, \"_\", o) != 0)\n        return NULL;\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(displayhook_doc,\n\"displayhook(object) -> None\\n\"\n\"\\n\"\n\"Print an object to sys.stdout and also save it in builtins._\\n\"\n);\n\nstatic PyObject *\nsys_excepthook(PyObject* self, PyObject* args)\n{\n    PyObject *exc, *value, *tb;\n    if (!PyArg_UnpackTuple(args, \"excepthook\", 3, 3, &exc, &value, &tb))\n        return NULL;\n    PyErr_Display(exc, value, tb);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(excepthook_doc,\n\"excepthook(exctype, value, traceback) -> None\\n\"\n\"\\n\"\n\"Handle an exception by displaying it with a traceback on sys.stderr.\\n\"\n);\n\nstatic PyObject *\nsys_exc_info(PyObject *self, PyObject *noargs)\n{\n    PyThreadState *tstate;\n    tstate = PyThreadState_GET();\n    return Py_BuildValue(\n        \"(OOO)\",\n        tstate->exc_type != NULL ? tstate->exc_type : Py_None,\n        tstate->exc_value != NULL ? tstate->exc_value : Py_None,\n        tstate->exc_traceback != NULL ?\n            tstate->exc_traceback : Py_None);\n}\n\nPyDoc_STRVAR(exc_info_doc,\n\"exc_info() -> (type, value, traceback)\\n\\\n\\n\\\nReturn information about the most recent exception caught by an except\\n\\\nclause in the current stack frame or in an older stack frame.\"\n);\n\nstatic PyObject *\nsys_exit(PyObject *self, PyObject *args)\n{\n    PyObject *exit_code = 0;\n    if (!PyArg_UnpackTuple(args, \"exit\", 0, 1, &exit_code))\n        return NULL;\n    /* Raise SystemExit so callers may catch it or clean up. */\n    PyErr_SetObject(PyExc_SystemExit, exit_code);\n    return NULL;\n}\n\nPyDoc_STRVAR(exit_doc,\n\"exit([status])\\n\\\n\\n\\\nExit the interpreter by raising SystemExit(status).\\n\\\nIf the status is omitted or None, it defaults to zero (i.e., success).\\n\\\nIf the status is numeric, it will be used as the system exit status.\\n\\\nIf it is another kind of object, it will be printed and the system\\n\\\nexit status will be one (i.e., failure).\"\n);\n\n\nstatic PyObject *\nsys_getdefaultencoding(PyObject *self)\n{\n    return PyUnicode_FromString(PyUnicode_GetDefaultEncoding());\n}\n\nPyDoc_STRVAR(getdefaultencoding_doc,\n\"getdefaultencoding() -> string\\n\\\n\\n\\\nReturn the current default string encoding used by the Unicode \\n\\\nimplementation.\"\n);\n\nstatic PyObject *\nsys_setdefaultencoding(PyObject *self, PyObject *args)\n{\n    char *encoding;\n    if (!PyArg_ParseTuple(args, \"s:setdefaultencoding\", &encoding))\n        return NULL;\n    if (PyUnicode_SetDefaultEncoding(encoding))\n        return NULL;\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setdefaultencoding_doc,\n\"setdefaultencoding(encoding)\\n\\\n\\n\\\nSet the current default string encoding used by the Unicode implementation.\"\n);\n\nstatic PyObject *\nsys_getfilesystemencoding(PyObject *self)\n{\n    if (Py_FileSystemDefaultEncoding)\n        return PyUnicode_FromString(Py_FileSystemDefaultEncoding);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(getfilesystemencoding_doc,\n\"getfilesystemencoding() -> string\\n\\\n\\n\\\nReturn the encoding used to convert Unicode filenames in\\n\\\noperating system filenames.\"\n);\n\nstatic PyObject *\nsys_setfilesystemencoding(PyObject *self, PyObject *args)\n{\n    PyObject *new_encoding;\n    if (!PyArg_ParseTuple(args, \"U:setfilesystemencoding\", &new_encoding))\n        return NULL;\n    if (_Py_SetFileSystemEncoding(new_encoding))\n        return NULL;\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setfilesystemencoding_doc,\n\"setfilesystemencoding(string) -> None\\n\\\n\\n\\\nSet the encoding used to convert Unicode filenames in\\n\\\noperating system filenames.\"\n);\n\nstatic PyObject *\nsys_intern(PyObject *self, PyObject *args)\n{\n    PyObject *s;\n    if (!PyArg_ParseTuple(args, \"U:intern\", &s))\n        return NULL;\n    if (PyUnicode_CheckExact(s)) {\n        Py_INCREF(s);\n        PyUnicode_InternInPlace(&s);\n        return s;\n    }\n    else {\n        PyErr_Format(PyExc_TypeError,\n                        \"can't intern %.400s\", s->ob_type->tp_name);\n        return NULL;\n    }\n}\n\nPyDoc_STRVAR(intern_doc,\n\"intern(string) -> string\\n\\\n\\n\\\n``Intern'' the given string.  This enters the string in the (global)\\n\\\ntable of interned strings whose purpose is to speed up dictionary lookups.\\n\\\nReturn the string itself or the previously interned string object with the\\n\\\nsame value.\");\n\n\n/*\n * Cached interned string objects used for calling the profile and\n * trace functions.  Initialized by trace_init().\n */\nstatic PyObject *whatstrings[7] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL};\n\nstatic int\ntrace_init(void)\n{\n    static char *whatnames[7] = {\"call\", \"exception\", \"line\", \"return\",\n                                    \"c_call\", \"c_exception\", \"c_return\"};\n    PyObject *name;\n    int i;\n    for (i = 0; i < 7; ++i) {\n        if (whatstrings[i] == NULL) {\n            name = PyUnicode_InternFromString(whatnames[i]);\n            if (name == NULL)\n                return -1;\n            whatstrings[i] = name;\n        }\n    }\n    return 0;\n}\n\n\nstatic PyObject *\ncall_trampoline(PyThreadState *tstate, PyObject* callback,\n                PyFrameObject *frame, int what, PyObject *arg)\n{\n    PyObject *args = PyTuple_New(3);\n    PyObject *whatstr;\n    PyObject *result;\n\n    if (args == NULL)\n        return NULL;\n    Py_INCREF(frame);\n    whatstr = whatstrings[what];\n    Py_INCREF(whatstr);\n    if (arg == NULL)\n        arg = Py_None;\n    Py_INCREF(arg);\n    PyTuple_SET_ITEM(args, 0, (PyObject *)frame);\n    PyTuple_SET_ITEM(args, 1, whatstr);\n    PyTuple_SET_ITEM(args, 2, arg);\n\n    /* call the Python-level function */\n    PyFrame_FastToLocals(frame);\n    result = PyEval_CallObject(callback, args);\n    PyFrame_LocalsToFast(frame, 1);\n    if (result == NULL)\n        PyTraceBack_Here(frame);\n\n    /* cleanup */\n    Py_DECREF(args);\n    return result;\n}\n\nstatic int\nprofile_trampoline(PyObject *self, PyFrameObject *frame,\n                   int what, PyObject *arg)\n{\n    PyThreadState *tstate = frame->f_tstate;\n    PyObject *result;\n\n    if (arg == NULL)\n        arg = Py_None;\n    result = call_trampoline(tstate, self, frame, what, arg);\n    if (result == NULL) {\n        PyEval_SetProfile(NULL, NULL);\n        return -1;\n    }\n    Py_DECREF(result);\n    return 0;\n}\n\nstatic int\ntrace_trampoline(PyObject *self, PyFrameObject *frame,\n                 int what, PyObject *arg)\n{\n    PyThreadState *tstate = frame->f_tstate;\n    PyObject *callback;\n    PyObject *result;\n\n    if (what == PyTrace_CALL)\n        callback = self;\n    else\n        callback = frame->f_trace;\n    if (callback == NULL)\n        return 0;\n    result = call_trampoline(tstate, callback, frame, what, arg);\n    if (result == NULL) {\n        PyEval_SetTrace(NULL, NULL);\n        Py_XDECREF(frame->f_trace);\n        frame->f_trace = NULL;\n        return -1;\n    }\n    if (result != Py_None) {\n        PyObject *temp = frame->f_trace;\n        frame->f_trace = NULL;\n        Py_XDECREF(temp);\n        frame->f_trace = result;\n    }\n    else {\n        Py_DECREF(result);\n    }\n    return 0;\n}\n\nstatic PyObject *\nsys_settrace(PyObject *self, PyObject *args)\n{\n    if (trace_init() == -1)\n        return NULL;\n    if (args == Py_None)\n        PyEval_SetTrace(NULL, NULL);\n    else\n        PyEval_SetTrace(trace_trampoline, args);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(settrace_doc,\n\"settrace(function)\\n\\\n\\n\\\nSet the global debug tracing function.  It will be called on each\\n\\\nfunction call.  See the debugger chapter in the library manual.\"\n);\n\nstatic PyObject *\nsys_gettrace(PyObject *self, PyObject *args)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *temp = tstate->c_traceobj;\n\n    if (temp == NULL)\n        temp = Py_None;\n    Py_INCREF(temp);\n    return temp;\n}\n\nPyDoc_STRVAR(gettrace_doc,\n\"gettrace()\\n\\\n\\n\\\nReturn the global debug tracing function set with sys.settrace.\\n\\\nSee the debugger chapter in the library manual.\"\n);\n\nstatic PyObject *\nsys_setprofile(PyObject *self, PyObject *args)\n{\n    if (trace_init() == -1)\n        return NULL;\n    if (args == Py_None)\n        PyEval_SetProfile(NULL, NULL);\n    else\n        PyEval_SetProfile(profile_trampoline, args);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setprofile_doc,\n\"setprofile(function)\\n\\\n\\n\\\nSet the profiling function.  It will be called on each function call\\n\\\nand return.  See the profiler chapter in the library manual.\"\n);\n\nstatic PyObject *\nsys_getprofile(PyObject *self, PyObject *args)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    PyObject *temp = tstate->c_profileobj;\n\n    if (temp == NULL)\n        temp = Py_None;\n    Py_INCREF(temp);\n    return temp;\n}\n\nPyDoc_STRVAR(getprofile_doc,\n\"getprofile()\\n\\\n\\n\\\nReturn the profiling function set with sys.setprofile.\\n\\\nSee the profiler chapter in the library manual.\"\n);\n\nstatic PyObject *\nsys_setcheckinterval(PyObject *self, PyObject *args)\n{\n    if (!PyArg_ParseTuple(args, \"i:setcheckinterval\", &_Py_CheckInterval))\n        return NULL;\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setcheckinterval_doc,\n\"setcheckinterval(n)\\n\\\n\\n\\\nTell the Python interpreter to check for asynchronous events every\\n\\\nn instructions.  This also affects how often thread switches occur.\"\n);\n\nstatic PyObject *\nsys_getcheckinterval(PyObject *self, PyObject *args)\n{\n    return PyLong_FromLong(_Py_CheckInterval);\n}\n\nPyDoc_STRVAR(getcheckinterval_doc,\n\"getcheckinterval() -> current check interval; see setcheckinterval().\"\n);\n\n#ifdef WITH_TSC\nstatic PyObject *\nsys_settscdump(PyObject *self, PyObject *args)\n{\n    int bool;\n    PyThreadState *tstate = PyThreadState_Get();\n\n    if (!PyArg_ParseTuple(args, \"i:settscdump\", &bool))\n        return NULL;\n    if (bool)\n        tstate->interp->tscdump = 1;\n    else\n        tstate->interp->tscdump = 0;\n    Py_INCREF(Py_None);\n    return Py_None;\n\n}\n\nPyDoc_STRVAR(settscdump_doc,\n\"settscdump(bool)\\n\\\n\\n\\\nIf true, tell the Python interpreter to dump VM measurements to\\n\\\nstderr.  If false, turn off dump.  The measurements are based on the\\n\\\nprocessor's time-stamp counter.\"\n);\n#endif /* TSC */\n\nstatic PyObject *\nsys_setrecursionlimit(PyObject *self, PyObject *args)\n{\n    int new_limit;\n    if (!PyArg_ParseTuple(args, \"i:setrecursionlimit\", &new_limit))\n        return NULL;\n    if (new_limit <= 0) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"recursion limit must be positive\");\n        return NULL;\n    }\n    Py_SetRecursionLimit(new_limit);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setrecursionlimit_doc,\n\"setrecursionlimit(n)\\n\\\n\\n\\\nSet the maximum depth of the Python interpreter stack to n.  This\\n\\\nlimit prevents infinite recursion from causing an overflow of the C\\n\\\nstack and crashing Python.  The highest possible limit is platform-\\n\\\ndependent.\"\n);\n\nstatic PyObject *\nsys_getrecursionlimit(PyObject *self)\n{\n    return PyLong_FromLong(Py_GetRecursionLimit());\n}\n\nPyDoc_STRVAR(getrecursionlimit_doc,\n\"getrecursionlimit()\\n\\\n\\n\\\nReturn the current value of the recursion limit, the maximum depth\\n\\\nof the Python interpreter stack.  This limit prevents infinite\\n\\\nrecursion from causing an overflow of the C stack and crashing Python.\"\n);\n\n#ifdef MS_WINDOWS\nPyDoc_STRVAR(getwindowsversion_doc,\n\"getwindowsversion()\\n\\\n\\n\\\nReturn information about the running version of Windows.\\n\\\nThe result is a tuple of (major, minor, build, platform, text)\\n\\\nAll elements are numbers, except text which is a string.\\n\\\nPlatform may be 0 for win32s, 1 for Windows 9x/ME, 2 for Windows NT/2000/XP\\n\\\n\"\n);\n\nstatic PyObject *\nsys_getwindowsversion(PyObject *self)\n{\n    OSVERSIONINFO ver;\n    ver.dwOSVersionInfoSize = sizeof(ver);\n    if (!GetVersionEx(&ver))\n        return PyErr_SetFromWindowsErr(0);\n    return Py_BuildValue(\"HHHHs\",\n                         ver.dwMajorVersion,\n                         ver.dwMinorVersion,\n                         ver.dwBuildNumber,\n                         ver.dwPlatformId,\n                         ver.szCSDVersion);\n}\n\n#endif /* MS_WINDOWS */\n\n#ifdef HAVE_DLOPEN\nstatic PyObject *\nsys_setdlopenflags(PyObject *self, PyObject *args)\n{\n    int new_val;\n    PyThreadState *tstate = PyThreadState_GET();\n    if (!PyArg_ParseTuple(args, \"i:setdlopenflags\", &new_val))\n        return NULL;\n    if (!tstate)\n        return NULL;\n    tstate->interp->dlopenflags = new_val;\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nPyDoc_STRVAR(setdlopenflags_doc,\n\"setdlopenflags(n) -> None\\n\\\n\\n\\\nSet the flags used by the interpreter for dlopen calls, such as when the\\n\\\ninterpreter loads extension modules.  Among other things, this will enable\\n\\\na lazy resolving of symbols when importing a module, if called as\\n\\\nsys.setdlopenflags(0).  To share symbols across extension modules, call as\\n\\\nsys.setdlopenflags(ctypes.RTLD_GLOBAL).  Symbolic names for the flag modules\\n\\\ncan be either found in the ctypes module, or in the DLFCN module. If DLFCN\\n\\\nis not available, it can be generated from /usr/include/dlfcn.h using the\\n\\\nh2py script.\");\n\nstatic PyObject *\nsys_getdlopenflags(PyObject *self, PyObject *args)\n{\n    PyThreadState *tstate = PyThreadState_GET();\n    if (!tstate)\n        return NULL;\n    return PyLong_FromLong(tstate->interp->dlopenflags);\n}\n\nPyDoc_STRVAR(getdlopenflags_doc,\n\"getdlopenflags() -> int\\n\\\n\\n\\\nReturn the current value of the flags that are used for dlopen calls.\\n\\\nThe flag constants are defined in the ctypes and DLFCN modules.\");\n\n#endif  /* HAVE_DLOPEN */\n\n#ifdef USE_MALLOPT\n/* Link with -lmalloc (or -lmpc) on an SGI */\n#include <malloc.h>\n\nstatic PyObject *\nsys_mdebug(PyObject *self, PyObject *args)\n{\n    int flag;\n    if (!PyArg_ParseTuple(args, \"i:mdebug\", &flag))\n        return NULL;\n    mallopt(M_DEBUG, flag);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n#endif /* USE_MALLOPT */\n\nstatic PyObject *\nsys_getsizeof(PyObject *self, PyObject *args, PyObject *kwds)\n{\n    PyObject *res = NULL;\n    static PyObject *str__sizeof__ = NULL, *gc_head_size = NULL;\n    static char *kwlist[] = {\"object\", \"default\", 0};\n    PyObject *o, *dflt = NULL;\n    PyObject *method;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"O|O:getsizeof\",\n                                     kwlist, &o, &dflt))\n        return NULL;\n\n    /* Initialize static variable for GC head size */\n    if (gc_head_size == NULL) {\n        gc_head_size = PyLong_FromSsize_t(sizeof(PyGC_Head));\n        if (gc_head_size == NULL)\n            return NULL;\n    }\n\n    /* Make sure the type is initialized. float gets initialized late */\n    if (PyType_Ready(Py_TYPE(o)) < 0)\n        return NULL;\n\n    method = _PyObject_LookupSpecial(o, \"__sizeof__\",\n                                     &str__sizeof__);\n    if (method == NULL) {\n        if (!PyErr_Occurred())\n            PyErr_Format(PyExc_TypeError,\n                         \"Type %.100s doesn't define __sizeof__\",\n                         Py_TYPE(o)->tp_name);\n    }\n    else {\n        res = PyObject_CallFunctionObjArgs(method, NULL);\n        Py_DECREF(method);\n    }\n\n    /* Has a default value been given */\n    if ((res == NULL) && (dflt != NULL) &&\n        PyErr_ExceptionMatches(PyExc_TypeError))\n    {\n        PyErr_Clear();\n        Py_INCREF(dflt);\n        return dflt;\n    }\n    else if (res == NULL)\n        return res;\n\n    /* add gc_head size */\n    if (PyObject_IS_GC(o)) {\n        PyObject *tmp = res;\n        res = PyNumber_Add(tmp, gc_head_size);\n        Py_DECREF(tmp);\n    }\n    return res;\n}\n\nPyDoc_STRVAR(getsizeof_doc,\n\"getsizeof(object, default) -> int\\n\\\n\\n\\\nReturn the size of object in bytes.\");\n\nstatic PyObject *\nsys_getrefcount(PyObject *self, PyObject *arg)\n{\n    return PyLong_FromSsize_t(arg->ob_refcnt);\n}\n\n#ifdef Py_REF_DEBUG\nstatic PyObject *\nsys_gettotalrefcount(PyObject *self)\n{\n    return PyLong_FromSsize_t(_Py_GetRefTotal());\n}\n#endif /* Py_REF_DEBUG */\n\nPyDoc_STRVAR(getrefcount_doc,\n\"getrefcount(object) -> integer\\n\\\n\\n\\\nReturn the reference count of object.  The count returned is generally\\n\\\none higher than you might expect, because it includes the (temporary)\\n\\\nreference as an argument to getrefcount().\"\n);\n\n#ifdef COUNT_ALLOCS\nstatic PyObject *\nsys_getcounts(PyObject *self)\n{\n    extern PyObject *get_counts(void);\n\n    return get_counts();\n}\n#endif\n\nPyDoc_STRVAR(getframe_doc,\n\"_getframe([depth]) -> frameobject\\n\\\n\\n\\\nReturn a frame object from the call stack.  If optional integer depth is\\n\\\ngiven, return the frame object that many calls below the top of the stack.\\n\\\nIf that is deeper than the call stack, ValueError is raised.  The default\\n\\\nfor depth is zero, returning the frame at the top of the call stack.\\n\\\n\\n\\\nThis function should be used for internal and specialized\\n\\\npurposes only.\"\n);\n\nstatic PyObject *\nsys_getframe(PyObject *self, PyObject *args)\n{\n    PyFrameObject *f = PyThreadState_GET()->frame;\n    int depth = -1;\n\n    if (!PyArg_ParseTuple(args, \"|i:_getframe\", &depth))\n        return NULL;\n\n    while (depth > 0 && f != NULL) {\n        f = f->f_back;\n        --depth;\n    }\n    if (f == NULL) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"call stack is not deep enough\");\n        return NULL;\n    }\n    Py_INCREF(f);\n    return (PyObject*)f;\n}\n\nPyDoc_STRVAR(current_frames_doc,\n\"_current_frames() -> dictionary\\n\\\n\\n\\\nReturn a dictionary mapping each current thread T's thread id to T's\\n\\\ncurrent stack frame.\\n\\\n\\n\\\nThis function should be used for specialized purposes only.\"\n);\n\nstatic PyObject *\nsys_current_frames(PyObject *self, PyObject *noargs)\n{\n    return _PyThread_CurrentFrames();\n}\n\nPyDoc_STRVAR(call_tracing_doc,\n\"call_tracing(func, args) -> object\\n\\\n\\n\\\nCall func(*args), while tracing is enabled.  The tracing state is\\n\\\nsaved, and restored afterwards.  This is intended to be called from\\n\\\na debugger from a checkpoint, to recursively debug some other code.\"\n);\n\nstatic PyObject *\nsys_call_tracing(PyObject *self, PyObject *args)\n{\n    PyObject *func, *funcargs;\n    if (!PyArg_ParseTuple(args, \"OO!:call_tracing\", &func, &PyTuple_Type, &funcargs))\n        return NULL;\n    return _PyEval_CallTracing(func, funcargs);\n}\n\nPyDoc_STRVAR(callstats_doc,\n\"callstats() -> tuple of integers\\n\\\n\\n\\\nReturn a tuple of function call statistics, if CALL_PROFILE was defined\\n\\\nwhen Python was built.  Otherwise, return None.\\n\\\n\\n\\\nWhen enabled, this function returns detailed, implementation-specific\\n\\\ndetails about the number of function calls executed. The return value is\\n\\\na 11-tuple where the entries in the tuple are counts of:\\n\\\n0. all function calls\\n\\\n1. calls to PyFunction_Type objects\\n\\\n2. PyFunction calls that do not create an argument tuple\\n\\\n3. PyFunction calls that do not create an argument tuple\\n\\\n   and bypass PyEval_EvalCodeEx()\\n\\\n4. PyMethod calls\\n\\\n5. PyMethod calls on bound methods\\n\\\n6. PyType calls\\n\\\n7. PyCFunction calls\\n\\\n8. generator calls\\n\\\n9. All other calls\\n\\\n10. Number of stack pops performed by call_function()\"\n);\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifdef Py_TRACE_REFS\n/* Defined in objects.c because it uses static globals if that file */\nextern PyObject *_Py_GetObjects(PyObject *, PyObject *);\n#endif\n\n#ifdef DYNAMIC_EXECUTION_PROFILE\n/* Defined in ceval.c because it uses static globals if that file */\nextern PyObject *_Py_GetDXProfile(PyObject *,  PyObject *);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n\nstatic PyObject *\nsys_clear_type_cache(PyObject* self, PyObject* args)\n{\n    PyType_ClearCache();\n    Py_RETURN_NONE;\n}\n\nPyDoc_STRVAR(sys_clear_type_cache__doc__,\n\"_clear_type_cache() -> None\\n\\\nClear the internal type lookup cache.\");\n\n\nstatic PyMethodDef sys_methods[] = {\n    /* Might as well keep this in alphabetic order */\n    {\"callstats\", (PyCFunction)PyEval_GetCallStats, METH_NOARGS,\n     callstats_doc},\n    {\"_clear_type_cache\",       sys_clear_type_cache,     METH_NOARGS,\n     sys_clear_type_cache__doc__},\n    {\"_current_frames\", sys_current_frames, METH_NOARGS,\n     current_frames_doc},\n    {\"displayhook\",     sys_displayhook, METH_O, displayhook_doc},\n    {\"exc_info\",        sys_exc_info, METH_NOARGS, exc_info_doc},\n    {\"excepthook\",      sys_excepthook, METH_VARARGS, excepthook_doc},\n    {\"exit\",            sys_exit, METH_VARARGS, exit_doc},\n    {\"getdefaultencoding\", (PyCFunction)sys_getdefaultencoding,\n     METH_NOARGS, getdefaultencoding_doc},\n#ifdef HAVE_DLOPEN\n    {\"getdlopenflags\", (PyCFunction)sys_getdlopenflags, METH_NOARGS,\n     getdlopenflags_doc},\n#endif\n#ifdef COUNT_ALLOCS\n    {\"getcounts\",       (PyCFunction)sys_getcounts, METH_NOARGS},\n#endif\n#ifdef DYNAMIC_EXECUTION_PROFILE\n    {\"getdxp\",          _Py_GetDXProfile, METH_VARARGS},\n#endif\n    {\"getfilesystemencoding\", (PyCFunction)sys_getfilesystemencoding,\n     METH_NOARGS, getfilesystemencoding_doc},\n#ifdef Py_TRACE_REFS\n    {\"getobjects\",      _Py_GetObjects, METH_VARARGS},\n#endif\n#ifdef Py_REF_DEBUG\n    {\"gettotalrefcount\", (PyCFunction)sys_gettotalrefcount, METH_NOARGS},\n#endif\n    {\"getrefcount\",     (PyCFunction)sys_getrefcount, METH_O, getrefcount_doc},\n    {\"getrecursionlimit\", (PyCFunction)sys_getrecursionlimit, METH_NOARGS,\n     getrecursionlimit_doc},\n    {\"getsizeof\",   (PyCFunction)sys_getsizeof,\n     METH_VARARGS | METH_KEYWORDS, getsizeof_doc},\n    {\"_getframe\", sys_getframe, METH_VARARGS, getframe_doc},\n#ifdef MS_WINDOWS\n    {\"getwindowsversion\", (PyCFunction)sys_getwindowsversion, METH_NOARGS,\n     getwindowsversion_doc},\n#endif /* MS_WINDOWS */\n    {\"intern\",          sys_intern,     METH_VARARGS, intern_doc},\n#ifdef USE_MALLOPT\n    {\"mdebug\",          sys_mdebug, METH_VARARGS},\n#endif\n    {\"setdefaultencoding\", sys_setdefaultencoding, METH_VARARGS,\n     setdefaultencoding_doc},\n    {\"setfilesystemencoding\", sys_setfilesystemencoding, METH_VARARGS,\n     setfilesystemencoding_doc},\n    {\"setcheckinterval\",        sys_setcheckinterval, METH_VARARGS,\n     setcheckinterval_doc},\n    {\"getcheckinterval\",        sys_getcheckinterval, METH_NOARGS,\n     getcheckinterval_doc},\n#ifdef HAVE_DLOPEN\n    {\"setdlopenflags\", sys_setdlopenflags, METH_VARARGS,\n     setdlopenflags_doc},\n#endif\n    {\"setprofile\",      sys_setprofile, METH_O, setprofile_doc},\n    {\"getprofile\",      sys_getprofile, METH_NOARGS, getprofile_doc},\n    {\"setrecursionlimit\", sys_setrecursionlimit, METH_VARARGS,\n     setrecursionlimit_doc},\n#ifdef WITH_TSC\n    {\"settscdump\", sys_settscdump, METH_VARARGS, settscdump_doc},\n#endif\n    {\"settrace\",        sys_settrace, METH_O, settrace_doc},\n    {\"gettrace\",        sys_gettrace, METH_NOARGS, gettrace_doc},\n    {\"call_tracing\", sys_call_tracing, METH_VARARGS, call_tracing_doc},\n    {NULL,              NULL}           /* sentinel */\n};\n\nstatic PyObject *\nlist_builtin_module_names(void)\n{\n    PyObject *list = PyList_New(0);\n    int i;\n    if (list == NULL)\n        return NULL;\n    for (i = 0; PyImport_Inittab[i].name != NULL; i++) {\n        PyObject *name = PyUnicode_FromString(\n            PyImport_Inittab[i].name);\n        if (name == NULL)\n            break;\n        PyList_Append(list, name);\n        Py_DECREF(name);\n    }\n    if (PyList_Sort(list) != 0) {\n        Py_DECREF(list);\n        list = NULL;\n    }\n    if (list) {\n        PyObject *v = PyList_AsTuple(list);\n        Py_DECREF(list);\n        list = v;\n    }\n    return list;\n}\n\nstatic PyObject *warnoptions = NULL;\n\nvoid\nPySys_ResetWarnOptions(void)\n{\n    if (warnoptions == NULL || !PyList_Check(warnoptions))\n        return;\n    PyList_SetSlice(warnoptions, 0, PyList_GET_SIZE(warnoptions), NULL);\n}\n\nvoid\nPySys_AddWarnOption(const wchar_t *s)\n{\n    PyObject *str;\n\n    if (warnoptions == NULL || !PyList_Check(warnoptions)) {\n        Py_XDECREF(warnoptions);\n        warnoptions = PyList_New(0);\n        if (warnoptions == NULL)\n            return;\n    }\n    str = PyUnicode_FromWideChar(s, -1);\n    if (str != NULL) {\n        PyList_Append(warnoptions, str);\n        Py_DECREF(str);\n    }\n}\n\nint\nPySys_HasWarnOptions(void)\n{\n    return (warnoptions != NULL && (PyList_Size(warnoptions) > 0)) ? 1 : 0;\n}\n\n/* XXX This doc string is too long to be a single string literal in VC++ 5.0.\n   Two literals concatenated works just fine.  If you have a K&R compiler\n   or other abomination that however *does* understand longer strings,\n   get rid of the !!! comment in the middle and the quotes that surround it. */\nPyDoc_VAR(sys_doc) =\nPyDoc_STR(\n\"This module provides access to some objects used or maintained by the\\n\\\ninterpreter and to functions that interact strongly with the interpreter.\\n\\\n\\n\\\nDynamic objects:\\n\\\n\\n\\\nargv -- command line arguments; argv[0] is the script pathname if known\\n\\\npath -- module search path; path[0] is the script directory, else ''\\n\\\nmodules -- dictionary of loaded modules\\n\\\n\\n\\\ndisplayhook -- called to show results in an interactive session\\n\\\nexcepthook -- called to handle any uncaught exception other than SystemExit\\n\\\n  To customize printing in an interactive session or to install a custom\\n\\\n  top-level exception handler, assign other functions to replace these.\\n\\\n\\n\\\nstdin -- standard input file object; used by input()\\n\\\nstdout -- standard output file object; used by print()\\n\\\nstderr -- standard error object; used for error messages\\n\\\n  By assigning other file objects (or objects that behave like files)\\n\\\n  to these, it is possible to redirect all of the interpreter's I/O.\\n\\\n\\n\\\nlast_type -- type of last uncaught exception\\n\\\nlast_value -- value of last uncaught exception\\n\\\nlast_traceback -- traceback of last uncaught exception\\n\\\n  These three are only available in an interactive session after a\\n\\\n  traceback has been printed.\\n\\\n\"\n)\n/* concatenating string here */\nPyDoc_STR(\n\"\\n\\\nStatic objects:\\n\\\n\\n\\\nfloat_info -- a dict with information about the float implementation.\\n\\\nint_info -- a struct sequence with information about the int implementation.\\n\\\nmaxsize -- the largest supported length of containers.\\n\\\nmaxunicode -- the largest supported character\\n\\\nbuiltin_module_names -- tuple of module names built into this interpreter\\n\\\nsubversion -- subversion information of the build as tuple\\n\\\nversion -- the version of this interpreter as a string\\n\\\nversion_info -- version information as a named tuple\\n\\\nhexversion -- version information encoded as a single integer\\n\\\ncopyright -- copyright notice pertaining to this interpreter\\n\\\nplatform -- platform identifier\\n\\\nexecutable -- pathname of this Python interpreter\\n\\\nprefix -- prefix used to find the Python library\\n\\\nexec_prefix -- prefix used to find the machine-specific Python library\\n\\\nfloat_repr_style -- string indicating the style of repr() output for floats\\n\\\n\"\n)\n#ifdef MS_WINDOWS\n/* concatenating string here */\nPyDoc_STR(\n\"dllhandle -- [Windows only] integer handle of the Python DLL\\n\\\nwinver -- [Windows only] version number of the Python DLL\\n\\\n\"\n)\n#endif /* MS_WINDOWS */\nPyDoc_STR(\n\"__stdin__ -- the original stdin; don't touch!\\n\\\n__stdout__ -- the original stdout; don't touch!\\n\\\n__stderr__ -- the original stderr; don't touch!\\n\\\n__displayhook__ -- the original displayhook; don't touch!\\n\\\n__excepthook__ -- the original excepthook; don't touch!\\n\\\n\\n\\\nFunctions:\\n\\\n\\n\\\ndisplayhook() -- print an object to the screen, and save it in builtins._\\n\\\nexcepthook() -- print an exception and its traceback to sys.stderr\\n\\\nexc_info() -- return thread-safe information about the current exception\\n\\\nexit() -- exit the interpreter by raising SystemExit\\n\\\ngetdlopenflags() -- returns flags to be used for dlopen() calls\\n\\\ngetprofile() -- get the global profiling function\\n\\\ngetrefcount() -- return the reference count for an object (plus one :-)\\n\\\ngetrecursionlimit() -- return the max recursion depth for the interpreter\\n\\\ngetsizeof() -- return the size of an object in bytes\\n\\\ngettrace() -- get the global debug tracing function\\n\\\nsetcheckinterval() -- control how often the interpreter checks for events\\n\\\nsetdlopenflags() -- set the flags to be used for dlopen() calls\\n\\\nsetprofile() -- set the global profiling function\\n\\\nsetrecursionlimit() -- set the max recursion depth for the interpreter\\n\\\nsettrace() -- set the global debug tracing function\\n\\\n\"\n)\n/* end of sys_doc */ ;\n\n/* Subversion branch and revision management */\nstatic int svn_initialized;\nstatic char patchlevel_revision[50]; /* Just the number */\nstatic char branch[50];\nstatic char shortbranch[50];\nstatic const char *svn_revision;\n\nstatic void\nsvnversion_init(void)\n{\n    if (svn_initialized)\n        return;\n\n    svn_initialized = 1;\n    *patchlevel_revision = '\\0';\n    strcpy(branch, \"\");\n    strcpy(shortbranch, \"unknown\");\n    svn_revision = \"\";\n}\n\n/* Return svnversion output if available.\n   Else return Revision of patchlevel.h if on branch.\n   Else return empty string */\nconst char*\nPy_SubversionRevision()\n{\n    svnversion_init();\n    return svn_revision;\n}\n\nconst char*\nPy_SubversionShortBranch()\n{\n    svnversion_init();\n    return shortbranch;\n}\n\n\nPyDoc_STRVAR(flags__doc__,\n\"sys.flags\\n\\\n\\n\\\nFlags provided through command line arguments or environment vars.\");\n\nstatic PyTypeObject FlagsType;\n\nstatic PyStructSequence_Field flags_fields[] = {\n    {\"debug\",                   \"-d\"},\n    {\"division_warning\",        \"-Q\"},\n    {\"inspect\",                 \"-i\"},\n    {\"interactive\",             \"-i\"},\n    {\"optimize\",                \"-O or -OO\"},\n    {\"dont_write_bytecode\",     \"-B\"},\n    {\"no_user_site\",            \"-s\"},\n    {\"no_site\",                 \"-S\"},\n    {\"ignore_environment\",      \"-E\"},\n    {\"verbose\",                 \"-v\"},\n#ifdef RISCOS\n    {\"riscos_wimp\",             \"???\"},\n#endif\n    /* {\"unbuffered\",                   \"-u\"}, */\n    /* {\"skip_first\",                   \"-x\"}, */\n    {\"bytes_warning\", \"-b\"},\n    {\"hash_randomization\", \"-R\"},\n    {0}\n};\n\nstatic PyStructSequence_Desc flags_desc = {\n    \"sys.flags\",        /* name */\n    flags__doc__,       /* doc */\n    flags_fields,       /* fields */\n#ifdef RISCOS\n    13\n#else\n    12\n#endif\n};\n\nstatic PyObject*\nmake_flags(void)\n{\n    int pos = 0;\n    PyObject *seq;\n\n    seq = PyStructSequence_New(&FlagsType);\n    if (seq == NULL)\n        return NULL;\n\n#define SetFlag(flag) \\\n    PyStructSequence_SET_ITEM(seq, pos++, PyLong_FromLong(flag))\n\n    SetFlag(Py_DebugFlag);\n    SetFlag(Py_DivisionWarningFlag);\n    SetFlag(Py_InspectFlag);\n    SetFlag(Py_InteractiveFlag);\n    SetFlag(Py_OptimizeFlag);\n    SetFlag(Py_DontWriteBytecodeFlag);\n    SetFlag(Py_NoUserSiteDirectory);\n    SetFlag(Py_NoSiteFlag);\n    SetFlag(Py_IgnoreEnvironmentFlag);\n    SetFlag(Py_VerboseFlag);\n#ifdef RISCOS\n    SetFlag(Py_RISCOSWimpFlag);\n#endif\n    /* SetFlag(saw_unbuffered_flag); */\n    /* SetFlag(skipfirstline); */\n    SetFlag(Py_BytesWarningFlag);\n    SetFlag(Py_HashRandomizationFlag);\n#undef SetFlag\n\n    if (PyErr_Occurred()) {\n        return NULL;\n    }\n    return seq;\n}\n\nPyDoc_STRVAR(version_info__doc__,\n\"sys.version_info\\n\\\n\\n\\\nVersion information as a named tuple.\");\n\nstatic PyTypeObject VersionInfoType;\n\nstatic PyStructSequence_Field version_info_fields[] = {\n    {\"major\", \"Major release number\"},\n    {\"minor\", \"Minor release number\"},\n    {\"micro\", \"Patch release number\"},\n    {\"releaselevel\", \"'alpha', 'beta', 'candidate', or 'release'\"},\n    {\"serial\", \"Serial release number\"},\n    {0}\n};\n\nstatic PyStructSequence_Desc version_info_desc = {\n    \"sys.version_info\",     /* name */\n    version_info__doc__,    /* doc */\n    version_info_fields,    /* fields */\n    5\n};\n\nstatic PyObject *\nmake_version_info(void)\n{\n    PyObject *version_info;\n    char *s;\n    int pos = 0;\n\n    version_info = PyStructSequence_New(&VersionInfoType);\n    if (version_info == NULL) {\n        return NULL;\n    }\n\n    /*\n     * These release level checks are mutually exclusive and cover\n     * the field, so don't get too fancy with the pre-processor!\n     */\n#if PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_ALPHA\n    s = \"alpha\";\n#elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_BETA\n    s = \"beta\";\n#elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_GAMMA\n    s = \"candidate\";\n#elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_FINAL\n    s = \"final\";\n#endif\n\n#define SetIntItem(flag) \\\n    PyStructSequence_SET_ITEM(version_info, pos++, PyLong_FromLong(flag))\n#define SetStrItem(flag) \\\n    PyStructSequence_SET_ITEM(version_info, pos++, PyUnicode_FromString(flag))\n\n    SetIntItem(PY_MAJOR_VERSION);\n    SetIntItem(PY_MINOR_VERSION);\n    SetIntItem(PY_MICRO_VERSION);\n    SetStrItem(s);\n    SetIntItem(PY_RELEASE_SERIAL);\n#undef SetIntItem\n#undef SetStrItem\n\n    if (PyErr_Occurred()) {\n        Py_CLEAR(version_info);\n        return NULL;\n    }\n    return version_info;\n}\n\nstatic struct PyModuleDef sysmodule = {\n    PyModuleDef_HEAD_INIT,\n    \"sys\",\n    sys_doc,\n    -1, /* multiple \"initialization\" just copies the module dict. */\n    sys_methods,\n    NULL,\n    NULL,\n    NULL,\n    NULL\n};\n\nPyObject *\n_PySys_Init(void)\n{\n    PyObject *m, *v, *sysdict;\n    char *s;\n\n    m = PyModule_Create(&sysmodule);\n    if (m == NULL)\n        return NULL;\n    sysdict = PyModule_GetDict(m);\n#define SET_SYS_FROM_STRING(key, value)                 \\\n    v = value;                                          \\\n    if (v != NULL)                                      \\\n        PyDict_SetItemString(sysdict, key, v);          \\\n    Py_XDECREF(v)\n\n    /* Check that stdin is not a directory\n    Using shell redirection, you can redirect stdin to a directory,\n    crashing the Python interpreter. Catch this common mistake here\n    and output a useful error message. Note that under MS Windows,\n    the shell already prevents that. */\n#if !defined(MS_WINDOWS)\n    {\n        struct stat sb;\n        if (fstat(fileno(stdin), &sb) == 0 &&\n            S_ISDIR(sb.st_mode)) {\n            /* There's nothing more we can do. */\n            /* Py_FatalError() will core dump, so just exit. */\n            PySys_WriteStderr(\"Python error: <stdin> is a directory, cannot continue\\n\");\n            exit(EXIT_FAILURE);\n        }\n    }\n#endif\n\n    /* stdin/stdout/stderr are now set by pythonrun.c */\n\n    PyDict_SetItemString(sysdict, \"__displayhook__\",\n                         PyDict_GetItemString(sysdict, \"displayhook\"));\n    PyDict_SetItemString(sysdict, \"__excepthook__\",\n                         PyDict_GetItemString(sysdict, \"excepthook\"));\n    SET_SYS_FROM_STRING(\"version\",\n                         PyUnicode_FromString(Py_GetVersion()));\n    SET_SYS_FROM_STRING(\"hexversion\",\n                         PyLong_FromLong(PY_VERSION_HEX));\n    svnversion_init();\n    SET_SYS_FROM_STRING(\"subversion\",\n                        Py_BuildValue(\"(UUU)\", \"CPython\", branch,\n                                      svn_revision));\n    SET_SYS_FROM_STRING(\"_mercurial\",\n                        Py_BuildValue(\"(szz)\", \"CPython\", _Py_hgidentifier(),\n                                      _Py_hgversion()));\n    SET_SYS_FROM_STRING(\"dont_write_bytecode\",\n                         PyBool_FromLong(Py_DontWriteBytecodeFlag));\n    SET_SYS_FROM_STRING(\"api_version\",\n                        PyLong_FromLong(PYTHON_API_VERSION));\n    SET_SYS_FROM_STRING(\"copyright\",\n                        PyUnicode_FromString(Py_GetCopyright()));\n    SET_SYS_FROM_STRING(\"platform\",\n                        PyUnicode_FromString(Py_GetPlatform()));\n    SET_SYS_FROM_STRING(\"executable\",\n                        PyUnicode_FromWideChar(\n                               Py_GetProgramFullPath(), -1));\n    SET_SYS_FROM_STRING(\"prefix\",\n                        PyUnicode_FromWideChar(Py_GetPrefix(), -1));\n    SET_SYS_FROM_STRING(\"exec_prefix\",\n                        PyUnicode_FromWideChar(Py_GetExecPrefix(), -1));\n    SET_SYS_FROM_STRING(\"maxsize\",\n                        PyLong_FromSsize_t(PY_SSIZE_T_MAX));\n    SET_SYS_FROM_STRING(\"float_info\",\n                        PyFloat_GetInfo());\n    SET_SYS_FROM_STRING(\"int_info\",\n                        PyLong_GetInfo());\n    SET_SYS_FROM_STRING(\"maxunicode\",\n                        PyLong_FromLong(PyUnicode_GetMax()));\n    SET_SYS_FROM_STRING(\"builtin_module_names\",\n                        list_builtin_module_names());\n    {\n        /* Assumes that longs are at least 2 bytes long.\n           Should be safe! */\n        unsigned long number = 1;\n        char *value;\n\n        s = (char *) &number;\n        if (s[0] == 0)\n            value = \"big\";\n        else\n            value = \"little\";\n        SET_SYS_FROM_STRING(\"byteorder\",\n                            PyUnicode_FromString(value));\n    }\n#ifdef MS_COREDLL\n    SET_SYS_FROM_STRING(\"dllhandle\",\n                        PyLong_FromVoidPtr(PyWin_DLLhModule));\n    SET_SYS_FROM_STRING(\"winver\",\n                        PyUnicode_FromString(PyWin_DLLVersionString));\n#endif\n    if (warnoptions == NULL) {\n        warnoptions = PyList_New(0);\n    }\n    else {\n        Py_INCREF(warnoptions);\n    }\n    if (warnoptions != NULL) {\n        PyDict_SetItemString(sysdict, \"warnoptions\", warnoptions);\n    }\n\n    /* version_info */\n    if (VersionInfoType.tp_name == 0)\n        PyStructSequence_InitType(&VersionInfoType, &version_info_desc);\n    SET_SYS_FROM_STRING(\"version_info\", make_version_info());\n    /* prevent user from creating new instances */\n    VersionInfoType.tp_init = NULL;\n    VersionInfoType.tp_new = NULL;\n\n    /* flags */\n    if (FlagsType.tp_name == 0)\n        PyStructSequence_InitType(&FlagsType, &flags_desc);\n    SET_SYS_FROM_STRING(\"flags\", make_flags());\n    /* prevent user from creating new instances */\n    FlagsType.tp_init = NULL;\n    FlagsType.tp_new = NULL;\n\n    /* float repr style: 0.03 (short) vs 0.029999999999999999 (legacy) */\n#ifndef PY_NO_SHORT_FLOAT_REPR\n    SET_SYS_FROM_STRING(\"float_repr_style\",\n                        PyUnicode_FromString(\"short\"));\n#else\n    SET_SYS_FROM_STRING(\"float_repr_style\",\n                        PyUnicode_FromString(\"legacy\"));\n#endif\n\n#undef SET_SYS_FROM_STRING\n    if (PyErr_Occurred())\n        return NULL;\n    return m;\n}\n\nstatic PyObject *\nmakepathobject(const wchar_t *path, wchar_t delim)\n{\n    int i, n;\n    const wchar_t *p;\n    PyObject *v, *w;\n\n    n = 1;\n    p = path;\n    while ((p = wcschr(p, delim)) != NULL) {\n        n++;\n        p++;\n    }\n    v = PyList_New(n);\n    if (v == NULL)\n        return NULL;\n    for (i = 0; ; i++) {\n        p = wcschr(path, delim);\n        if (p == NULL)\n            p = path + wcslen(path); /* End of string */\n        w = PyUnicode_FromWideChar(path, (Py_ssize_t)(p - path));\n        if (w == NULL) {\n            Py_DECREF(v);\n            return NULL;\n        }\n        PyList_SetItem(v, i, w);\n        if (*p == '\\0')\n            break;\n        path = p+1;\n    }\n    return v;\n}\n\nvoid\nPySys_SetPath(const wchar_t *path)\n{\n    PyObject *v;\n    if ((v = makepathobject(path, DELIM)) == NULL)\n        Py_FatalError(\"can't create sys.path\");\n    if (PySys_SetObject(\"path\", v) != 0)\n        Py_FatalError(\"can't assign sys.path\");\n    Py_DECREF(v);\n}\n\nstatic PyObject *\nmakeargvobject(int argc, wchar_t **argv)\n{\n    PyObject *av;\n    if (argc <= 0 || argv == NULL) {\n        /* Ensure at least one (empty) argument is seen */\n        static wchar_t *empty_argv[1] = {L\"\"};\n        argv = empty_argv;\n        argc = 1;\n    }\n    av = PyList_New(argc);\n    if (av != NULL) {\n        int i;\n        for (i = 0; i < argc; i++) {\n#ifdef __VMS\n            PyObject *v;\n\n            /* argv[0] is the script pathname if known */\n            if (i == 0) {\n                char* fn = decc$translate_vms(argv[0]);\n                if ((fn == (char *)0) || fn == (char *)-1)\n                    v = PyUnicode_FromString(argv[0]);\n                else\n                    v = PyUnicode_FromString(\n                        decc$translate_vms(argv[0]));\n            } else\n                v = PyUnicode_FromString(argv[i]);\n#else\n            PyObject *v = PyUnicode_FromWideChar(argv[i], -1);\n#endif\n            if (v == NULL) {\n                Py_DECREF(av);\n                av = NULL;\n                break;\n            }\n            PyList_SetItem(av, i, v);\n        }\n    }\n    return av;\n}\n\n#ifdef HAVE_REALPATH\nstatic wchar_t*\n_wrealpath(const wchar_t *path, wchar_t *resolved_path)\n{\n    char cpath[PATH_MAX];\n    char cresolved_path[PATH_MAX];\n    char *res;\n    size_t r;\n    r = wcstombs(cpath, path, PATH_MAX);\n    if (r == (size_t)-1 || r >= PATH_MAX) {\n        errno = EINVAL;\n        return NULL;\n    }\n    res = realpath(cpath, cresolved_path);\n    if (res == NULL)\n        return NULL;\n    r = mbstowcs(resolved_path, cresolved_path, PATH_MAX);\n    if (r == (size_t)-1 || r >= PATH_MAX) {\n        errno = EINVAL;\n        return NULL;\n    }\n    return resolved_path;\n}\n#endif\n\nvoid\nPySys_SetArgvEx(int argc, wchar_t **argv, int updatepath)\n{\n#if defined(HAVE_REALPATH)\n    wchar_t fullpath[MAXPATHLEN];\n#elif defined(MS_WINDOWS) && !defined(MS_WINCE)\n    wchar_t fullpath[MAX_PATH];\n#endif\n    PyObject *av = makeargvobject(argc, argv);\n    PyObject *path = PySys_GetObject(\"path\");\n    if (av == NULL)\n        Py_FatalError(\"no mem for sys.argv\");\n    if (PySys_SetObject(\"argv\", av) != 0)\n        Py_FatalError(\"can't assign sys.argv\");\n    if (updatepath && path != NULL) {\n        wchar_t *argv0 = argv[0];\n        wchar_t *p = NULL;\n        Py_ssize_t n = 0;\n        PyObject *a;\n        extern int _Py_wreadlink(const wchar_t *, wchar_t *, size_t);\n#ifdef HAVE_READLINK\n        wchar_t link[MAXPATHLEN+1];\n        wchar_t argv0copy[2*MAXPATHLEN+1];\n        int nr = 0;\n        if (argc > 0 && argv0 != NULL && wcscmp(argv0, L\"-c\") != 0)\n            nr = _Py_wreadlink(argv0, link, MAXPATHLEN);\n        if (nr > 0) {\n            /* It's a symlink */\n            link[nr] = '\\0';\n            if (link[0] == SEP)\n                argv0 = link; /* Link to absolute path */\n            else if (wcschr(link, SEP) == NULL)\n                ; /* Link without path */\n            else {\n                /* Must join(dirname(argv0), link) */\n                wchar_t *q = wcsrchr(argv0, SEP);\n                if (q == NULL)\n                    argv0 = link; /* argv0 without path */\n                else {\n                    /* Must make a copy */\n                    wcscpy(argv0copy, argv0);\n                    q = wcsrchr(argv0copy, SEP);\n                    wcscpy(q+1, link);\n                    argv0 = argv0copy;\n                }\n            }\n        }\n#endif /* HAVE_READLINK */\n#if SEP == '\\\\' /* Special case for MS filename syntax */\n        if (argc > 0 && argv0 != NULL && wcscmp(argv0, L\"-c\") != 0) {\n            wchar_t *q;\n#if defined(MS_WINDOWS) && !defined(MS_WINCE)\n            /* This code here replaces the first element in argv with the full\n            path that it represents. Under CE, there are no relative paths so\n            the argument must be the full path anyway. */\n            wchar_t *ptemp;\n            if (GetFullPathNameW(argv0,\n                               sizeof(fullpath)/sizeof(fullpath[0]),\n                               fullpath,\n                               &ptemp)) {\n                argv0 = fullpath;\n            }\n#endif\n            p = wcsrchr(argv0, SEP);\n            /* Test for alternate separator */\n            q = wcsrchr(p ? p : argv0, '/');\n            if (q != NULL)\n                p = q;\n            if (p != NULL) {\n                n = p + 1 - argv0;\n                if (n > 1 && p[-1] != ':')\n                    n--; /* Drop trailing separator */\n            }\n        }\n#else /* All other filename syntaxes */\n        if (argc > 0 && argv0 != NULL && wcscmp(argv0, L\"-c\") != 0) {\n#if defined(HAVE_REALPATH)\n            if (_wrealpath(argv0, fullpath)) {\n                argv0 = fullpath;\n            }\n#endif\n            p = wcsrchr(argv0, SEP);\n        }\n        if (p != NULL) {\n            n = p + 1 - argv0;\n#if SEP == '/' /* Special case for Unix filename syntax */\n            if (n > 1)\n                n--; /* Drop trailing separator */\n#endif /* Unix */\n        }\n#endif /* All others */\n        a = PyUnicode_FromWideChar(argv0, n);\n        if (a == NULL)\n            Py_FatalError(\"no mem for sys.path insertion\");\n        if (PyList_Insert(path, 0, a) < 0)\n            Py_FatalError(\"sys.path.insert(0) failed\");\n        Py_DECREF(a);\n    }\n    Py_DECREF(av);\n}\n\nvoid\nPySys_SetArgv(int argc, wchar_t **argv)\n{\n    PySys_SetArgvEx(argc, argv, 1);\n}\n\n/* Reimplementation of PyFile_WriteString() no calling indirectly\n   PyErr_CheckSignals(): avoid the call to PyObject_Str(). */\n\nstatic int\nsys_pyfile_write(const char *text, PyObject *file)\n{\n    PyObject *unicode = NULL, *writer = NULL, *args = NULL, *result = NULL;\n    int err;\n\n    if (file == NULL)\n        return -1;\n\n    unicode = PyUnicode_FromString(text);\n    if (unicode == NULL)\n        goto error;\n\n    writer = PyObject_GetAttrString(file, \"write\");\n    if (writer == NULL)\n        goto error;\n\n    args = PyTuple_Pack(1, unicode);\n    if (args == NULL)\n        goto error;\n\n    result = PyEval_CallObject(writer, args);\n    if (result == NULL) {\n        goto error;\n    } else {\n        err = 0;\n        goto finally;\n    }\n\nerror:\n    err = -1;\nfinally:\n    Py_XDECREF(unicode);\n    Py_XDECREF(writer);\n    Py_XDECREF(args);\n    Py_XDECREF(result);\n    return err;\n}\n\n\n/* APIs to write to sys.stdout or sys.stderr using a printf-like interface.\n   Adapted from code submitted by Just van Rossum.\n\n   PySys_WriteStdout(format, ...)\n   PySys_WriteStderr(format, ...)\n\n      The first function writes to sys.stdout; the second to sys.stderr.  When\n      there is a problem, they write to the real (C level) stdout or stderr;\n      no exceptions are raised.\n\n      PyErr_CheckSignals() is not called to avoid the execution of the Python\n      signal handlers: they may raise a new exception whereas mywrite() ignores\n      all exceptions.\n\n      Both take a printf-style format string as their first argument followed\n      by a variable length argument list determined by the format string.\n\n      *** WARNING ***\n\n      The format should limit the total size of the formatted output string to\n      1000 bytes.  In particular, this means that no unrestricted \"%s\" formats\n      should occur; these should be limited using \"%.<N>s where <N> is a\n      decimal number calculated so that <N> plus the maximum size of other\n      formatted text does not exceed 1000 bytes.  Also watch out for \"%f\",\n      which can print hundreds of digits for very large numbers.\n\n */\n\nstatic void\nmywrite(char *name, FILE *fp, const char *format, va_list va)\n{\n    PyObject *file;\n    PyObject *error_type, *error_value, *error_traceback;\n    char buffer[1001];\n    int written;\n\n    PyErr_Fetch(&error_type, &error_value, &error_traceback);\n    file = PySys_GetObject(name);\n    written = PyOS_vsnprintf(buffer, sizeof(buffer), format, va);\n    if (sys_pyfile_write(buffer, file) != 0) {\n        PyErr_Clear();\n        fputs(buffer, fp);\n    }\n    if (written < 0 || (size_t)written >= sizeof(buffer)) {\n        const char *truncated = \"... truncated\";\n        if (sys_pyfile_write(truncated, file) != 0) {\n            PyErr_Clear();\n            fputs(truncated, fp);\n        }\n    }\n    PyErr_Restore(error_type, error_value, error_traceback);\n}\n\nvoid\nPySys_WriteStdout(const char *format, ...)\n{\n    va_list va;\n\n    va_start(va, format);\n    mywrite(\"stdout\", stdout, format, va);\n    va_end(va);\n}\n\nvoid\nPySys_WriteStderr(const char *format, ...)\n{\n    va_list va;\n\n    va_start(va, format);\n    mywrite(\"stderr\", stderr, format, va);\n    va_end(va);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Python/pystate.c": "\n/* Thread and interpreter state structures and their interfaces */\n\n#include \"Python.h\"\n\n/* --------------------------------------------------------------------------\nCAUTION\n\nAlways use malloc() and free() directly in this file.  A number of these\nfunctions are advertised as safe to call when the GIL isn't held, and in\na debug build Python redirects (e.g.) PyMem_NEW (etc) to Python's debugging\nobmalloc functions.  Those aren't thread-safe (they rely on the GIL to avoid\nthe expense of doing their own locking).\n-------------------------------------------------------------------------- */\n\n#ifdef HAVE_DLOPEN\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n#ifndef RTLD_LAZY\n#define RTLD_LAZY 1\n#endif\n#endif\n\n\n#ifdef WITH_THREAD\n#include \"pythread.h\"\nstatic PyThread_type_lock head_mutex = NULL; /* Protects interp->tstate_head */\n#define HEAD_INIT() (void)(head_mutex || (head_mutex = PyThread_allocate_lock()))\n#define HEAD_LOCK() PyThread_acquire_lock(head_mutex, WAIT_LOCK)\n#define HEAD_UNLOCK() PyThread_release_lock(head_mutex)\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* The single PyInterpreterState used by this process'\n   GILState implementation\n*/\nstatic PyInterpreterState *autoInterpreterState = NULL;\nstatic int autoTLSkey = 0;\n#else\n#define HEAD_INIT() /* Nothing */\n#define HEAD_LOCK() /* Nothing */\n#define HEAD_UNLOCK() /* Nothing */\n#endif\n\nstatic PyInterpreterState *interp_head = NULL;\n\nPyThreadState *_PyThreadState_Current = NULL;\nPyThreadFrameGetter _PyThreadState_GetFrame = NULL;\n\n#ifdef WITH_THREAD\nstatic void _PyGILState_NoteThreadState(PyThreadState* tstate);\n#endif\n\n\nPyInterpreterState *\nPyInterpreterState_New(void)\n{\n    PyInterpreterState *interp = (PyInterpreterState *)\n                                 malloc(sizeof(PyInterpreterState));\n\n    if (interp != NULL) {\n        HEAD_INIT();\n#ifdef WITH_THREAD\n        if (head_mutex == NULL)\n            Py_FatalError(\"Can't initialize threads for interpreter\");\n#endif\n        interp->modules = NULL;\n        interp->modules_reloading = NULL;\n        interp->modules_by_index = NULL;\n        interp->sysdict = NULL;\n        interp->builtins = NULL;\n        interp->tstate_head = NULL;\n        interp->codec_search_path = NULL;\n        interp->codec_search_cache = NULL;\n        interp->codec_error_registry = NULL;\n        interp->codecs_initialized = 0;\n#ifdef HAVE_DLOPEN\n#ifdef RTLD_NOW\n        interp->dlopenflags = RTLD_NOW;\n#else\n        interp->dlopenflags = RTLD_LAZY;\n#endif\n#endif\n#ifdef WITH_TSC\n        interp->tscdump = 0;\n#endif\n\n        HEAD_LOCK();\n        interp->next = interp_head;\n        interp_head = interp;\n        HEAD_UNLOCK();\n    }\n\n    return interp;\n}\n\n\nvoid\nPyInterpreterState_Clear(PyInterpreterState *interp)\n{\n    PyThreadState *p;\n    HEAD_LOCK();\n    for (p = interp->tstate_head; p != NULL; p = p->next)\n        PyThreadState_Clear(p);\n    HEAD_UNLOCK();\n    Py_CLEAR(interp->codec_search_path);\n    Py_CLEAR(interp->codec_search_cache);\n    Py_CLEAR(interp->codec_error_registry);\n    Py_CLEAR(interp->modules);\n    Py_CLEAR(interp->modules_by_index);\n    Py_CLEAR(interp->modules_reloading);\n    Py_CLEAR(interp->sysdict);\n    Py_CLEAR(interp->builtins);\n}\n\n\nstatic void\nzapthreads(PyInterpreterState *interp)\n{\n    PyThreadState *p;\n    /* No need to lock the mutex here because this should only happen\n       when the threads are all really dead (XXX famous last words). */\n    while ((p = interp->tstate_head) != NULL) {\n        PyThreadState_Delete(p);\n    }\n}\n\n\nvoid\nPyInterpreterState_Delete(PyInterpreterState *interp)\n{\n    PyInterpreterState **p;\n    zapthreads(interp);\n    HEAD_LOCK();\n    for (p = &interp_head; ; p = &(*p)->next) {\n        if (*p == NULL)\n            Py_FatalError(\n                \"PyInterpreterState_Delete: invalid interp\");\n        if (*p == interp)\n            break;\n    }\n    if (interp->tstate_head != NULL)\n        Py_FatalError(\"PyInterpreterState_Delete: remaining threads\");\n    *p = interp->next;\n    HEAD_UNLOCK();\n    free(interp);\n}\n\n\n/* Default implementation for _PyThreadState_GetFrame */\nstatic struct _frame *\nthreadstate_getframe(PyThreadState *self)\n{\n    return self->frame;\n}\n\nstatic PyThreadState *\nnew_threadstate(PyInterpreterState *interp, int init)\n{\n    PyThreadState *tstate = (PyThreadState *)malloc(sizeof(PyThreadState));\n\n    if (_PyThreadState_GetFrame == NULL)\n        _PyThreadState_GetFrame = threadstate_getframe;\n\n    if (tstate != NULL) {\n        tstate->interp = interp;\n\n        tstate->frame = NULL;\n        tstate->recursion_depth = 0;\n        tstate->overflowed = 0;\n        tstate->recursion_critical = 0;\n        tstate->tracing = 0;\n        tstate->use_tracing = 0;\n        tstate->tick_counter = 0;\n        tstate->gilstate_counter = 0;\n        tstate->async_exc = NULL;\n#ifdef WITH_THREAD\n        tstate->thread_id = PyThread_get_thread_ident();\n#else\n        tstate->thread_id = 0;\n#endif\n\n        tstate->dict = NULL;\n\n        tstate->curexc_type = NULL;\n        tstate->curexc_value = NULL;\n        tstate->curexc_traceback = NULL;\n\n        tstate->exc_type = NULL;\n        tstate->exc_value = NULL;\n        tstate->exc_traceback = NULL;\n\n        tstate->c_profilefunc = NULL;\n        tstate->c_tracefunc = NULL;\n        tstate->c_profileobj = NULL;\n        tstate->c_traceobj = NULL;\n\n        if (init)\n            _PyThreadState_Init(tstate);\n\n        HEAD_LOCK();\n        tstate->next = interp->tstate_head;\n        interp->tstate_head = tstate;\n        HEAD_UNLOCK();\n    }\n\n    return tstate;\n}\n\nPyThreadState *\nPyThreadState_New(PyInterpreterState *interp)\n{\n    return new_threadstate(interp, 1);\n}\n\nPyThreadState *\n_PyThreadState_Prealloc(PyInterpreterState *interp)\n{\n    return new_threadstate(interp, 0);\n}\n\nvoid\n_PyThreadState_Init(PyThreadState *tstate)\n{\n#ifdef WITH_THREAD\n    _PyGILState_NoteThreadState(tstate);\n#endif\n}\n\nPyObject*\nPyState_FindModule(struct PyModuleDef* m)\n{\n    Py_ssize_t index = m->m_base.m_index;\n    PyInterpreterState *state = PyThreadState_GET()->interp;\n    PyObject *res;\n    if (index == 0)\n        return NULL;\n    if (state->modules_by_index == NULL)\n        return NULL;\n    if (index > PyList_GET_SIZE(state->modules_by_index))\n        return NULL;\n    res = PyList_GET_ITEM(state->modules_by_index, index);\n    return res==Py_None ? NULL : res;\n}\n\nint\n_PyState_AddModule(PyObject* module, struct PyModuleDef* def)\n{\n    PyInterpreterState *state = PyThreadState_GET()->interp;\n    if (!def)\n        return -1;\n    if (!state->modules_by_index) {\n        state->modules_by_index = PyList_New(0);\n        if (!state->modules_by_index)\n            return -1;\n    }\n    while(PyList_GET_SIZE(state->modules_by_index) <= def->m_base.m_index)\n        if (PyList_Append(state->modules_by_index, Py_None) < 0)\n            return -1;\n    Py_INCREF(module);\n    return PyList_SetItem(state->modules_by_index,\n                          def->m_base.m_index, module);\n}\n\nvoid\nPyThreadState_Clear(PyThreadState *tstate)\n{\n    if (Py_VerboseFlag && tstate->frame != NULL)\n        fprintf(stderr,\n          \"PyThreadState_Clear: warning: thread still has a frame\\n\");\n\n    Py_CLEAR(tstate->frame);\n\n    Py_CLEAR(tstate->dict);\n    Py_CLEAR(tstate->async_exc);\n\n    Py_CLEAR(tstate->curexc_type);\n    Py_CLEAR(tstate->curexc_value);\n    Py_CLEAR(tstate->curexc_traceback);\n\n    Py_CLEAR(tstate->exc_type);\n    Py_CLEAR(tstate->exc_value);\n    Py_CLEAR(tstate->exc_traceback);\n\n    tstate->c_profilefunc = NULL;\n    tstate->c_tracefunc = NULL;\n    Py_CLEAR(tstate->c_profileobj);\n    Py_CLEAR(tstate->c_traceobj);\n}\n\n\n/* Common code for PyThreadState_Delete() and PyThreadState_DeleteCurrent() */\nstatic void\ntstate_delete_common(PyThreadState *tstate)\n{\n    PyInterpreterState *interp;\n    PyThreadState **p;\n    PyThreadState *prev_p = NULL;\n    if (tstate == NULL)\n        Py_FatalError(\"PyThreadState_Delete: NULL tstate\");\n    interp = tstate->interp;\n    if (interp == NULL)\n        Py_FatalError(\"PyThreadState_Delete: NULL interp\");\n    HEAD_LOCK();\n    for (p = &interp->tstate_head; ; p = &(*p)->next) {\n        if (*p == NULL)\n            Py_FatalError(\n                \"PyThreadState_Delete: invalid tstate\");\n        if (*p == tstate)\n            break;\n        /* Sanity check.  These states should never happen but if\n         * they do we must abort.  Otherwise we'll end up spinning in\n         * in a tight loop with the lock held.  A similar check is done\n         * in thread.c find_key().  */\n        if (*p == prev_p)\n            Py_FatalError(\n                \"PyThreadState_Delete: small circular list(!)\"\n                \" and tstate not found.\");\n        prev_p = *p;\n        if ((*p)->next == interp->tstate_head)\n            Py_FatalError(\n                \"PyThreadState_Delete: circular list(!) and\"\n                \" tstate not found.\");\n    }\n    *p = tstate->next;\n    HEAD_UNLOCK();\n    free(tstate);\n}\n\n\nvoid\nPyThreadState_Delete(PyThreadState *tstate)\n{\n    if (tstate == _PyThreadState_Current)\n        Py_FatalError(\"PyThreadState_Delete: tstate is still current\");\n    tstate_delete_common(tstate);\n#ifdef WITH_THREAD\n    if (autoInterpreterState && PyThread_get_key_value(autoTLSkey) == tstate)\n        PyThread_delete_key_value(autoTLSkey);\n#endif /* WITH_THREAD */\n}\n\n\n#ifdef WITH_THREAD\nvoid\nPyThreadState_DeleteCurrent()\n{\n    PyThreadState *tstate = _PyThreadState_Current;\n    if (tstate == NULL)\n        Py_FatalError(\n            \"PyThreadState_DeleteCurrent: no current tstate\");\n    _PyThreadState_Current = NULL;\n    tstate_delete_common(tstate);\n    if (autoInterpreterState && PyThread_get_key_value(autoTLSkey) == tstate)\n        PyThread_delete_key_value(autoTLSkey);\n    PyEval_ReleaseLock();\n}\n#endif /* WITH_THREAD */\n\n\nPyThreadState *\nPyThreadState_Get(void)\n{\n    if (_PyThreadState_Current == NULL)\n        Py_FatalError(\"PyThreadState_Get: no current thread\");\n\n    return _PyThreadState_Current;\n}\n\n\nPyThreadState *\nPyThreadState_Swap(PyThreadState *newts)\n{\n    PyThreadState *oldts = _PyThreadState_Current;\n\n    _PyThreadState_Current = newts;\n    /* It should not be possible for more than one thread state\n       to be used for a thread.  Check this the best we can in debug\n       builds.\n    */\n#if defined(Py_DEBUG) && defined(WITH_THREAD)\n    if (newts) {\n        /* This can be called from PyEval_RestoreThread(). Similar\n           to it, we need to ensure errno doesn't change.\n        */\n        int err = errno;\n        PyThreadState *check = PyGILState_GetThisThreadState();\n        if (check && check->interp == newts->interp && check != newts)\n            Py_FatalError(\"Invalid thread state for this thread\");\n        errno = err;\n    }\n#endif\n    return oldts;\n}\n\n/* An extension mechanism to store arbitrary additional per-thread state.\n   PyThreadState_GetDict() returns a dictionary that can be used to hold such\n   state; the caller should pick a unique key and store its state there.  If\n   PyThreadState_GetDict() returns NULL, an exception has *not* been raised\n   and the caller should assume no per-thread state is available. */\n\nPyObject *\nPyThreadState_GetDict(void)\n{\n    if (_PyThreadState_Current == NULL)\n        return NULL;\n\n    if (_PyThreadState_Current->dict == NULL) {\n        PyObject *d;\n        _PyThreadState_Current->dict = d = PyDict_New();\n        if (d == NULL)\n            PyErr_Clear();\n    }\n    return _PyThreadState_Current->dict;\n}\n\n\n/* Asynchronously raise an exception in a thread.\n   Requested by Just van Rossum and Alex Martelli.\n   To prevent naive misuse, you must write your own extension\n   to call this, or use ctypes.  Must be called with the GIL held.\n   Returns the number of tstates modified (normally 1, but 0 if `id` didn't\n   match any known thread id).  Can be called with exc=NULL to clear an\n   existing async exception.  This raises no exceptions. */\n\nint\nPyThreadState_SetAsyncExc(long id, PyObject *exc) {\n    PyThreadState *tstate = PyThreadState_GET();\n    PyInterpreterState *interp = tstate->interp;\n    PyThreadState *p;\n\n    /* Although the GIL is held, a few C API functions can be called\n     * without the GIL held, and in particular some that create and\n     * destroy thread and interpreter states.  Those can mutate the\n     * list of thread states we're traversing, so to prevent that we lock\n     * head_mutex for the duration.\n     */\n    HEAD_LOCK();\n    for (p = interp->tstate_head; p != NULL; p = p->next) {\n        if (p->thread_id == id) {\n            /* Tricky:  we need to decref the current value\n             * (if any) in p->async_exc, but that can in turn\n             * allow arbitrary Python code to run, including\n             * perhaps calls to this function.  To prevent\n             * deadlock, we need to release head_mutex before\n             * the decref.\n             */\n            PyObject *old_exc = p->async_exc;\n            Py_XINCREF(exc);\n            p->async_exc = exc;\n            HEAD_UNLOCK();\n            Py_XDECREF(old_exc);\n            return 1;\n        }\n    }\n    HEAD_UNLOCK();\n    return 0;\n}\n\n\n/* Routines for advanced debuggers, requested by David Beazley.\n   Don't use unless you know what you are doing! */\n\nPyInterpreterState *\nPyInterpreterState_Head(void)\n{\n    return interp_head;\n}\n\nPyInterpreterState *\nPyInterpreterState_Next(PyInterpreterState *interp) {\n    return interp->next;\n}\n\nPyThreadState *\nPyInterpreterState_ThreadHead(PyInterpreterState *interp) {\n    return interp->tstate_head;\n}\n\nPyThreadState *\nPyThreadState_Next(PyThreadState *tstate) {\n    return tstate->next;\n}\n\n/* The implementation of sys._current_frames().  This is intended to be\n   called with the GIL held, as it will be when called via\n   sys._current_frames().  It's possible it would work fine even without\n   the GIL held, but haven't thought enough about that.\n*/\nPyObject *\n_PyThread_CurrentFrames(void)\n{\n    PyObject *result;\n    PyInterpreterState *i;\n\n    result = PyDict_New();\n    if (result == NULL)\n        return NULL;\n\n    /* for i in all interpreters:\n     *     for t in all of i's thread states:\n     *          if t's frame isn't NULL, map t's id to its frame\n     * Because these lists can mutate even when the GIL is held, we\n     * need to grab head_mutex for the duration.\n     */\n    HEAD_LOCK();\n    for (i = interp_head; i != NULL; i = i->next) {\n        PyThreadState *t;\n        for (t = i->tstate_head; t != NULL; t = t->next) {\n            PyObject *id;\n            int stat;\n            struct _frame *frame = t->frame;\n            if (frame == NULL)\n                continue;\n            id = PyLong_FromLong(t->thread_id);\n            if (id == NULL)\n                goto Fail;\n            stat = PyDict_SetItem(result, id, (PyObject *)frame);\n            Py_DECREF(id);\n            if (stat < 0)\n                goto Fail;\n        }\n    }\n    HEAD_UNLOCK();\n    return result;\n\n Fail:\n    HEAD_UNLOCK();\n    Py_DECREF(result);\n    return NULL;\n}\n\n/* Python \"auto thread state\" API. */\n#ifdef WITH_THREAD\n\n/* Keep this as a static, as it is not reliable!  It can only\n   ever be compared to the state for the *current* thread.\n   * If not equal, then it doesn't matter that the actual\n     value may change immediately after comparison, as it can't\n     possibly change to the current thread's state.\n   * If equal, then the current thread holds the lock, so the value can't\n     change until we yield the lock.\n*/\nstatic int\nPyThreadState_IsCurrent(PyThreadState *tstate)\n{\n    /* Must be the tstate for this thread */\n    assert(PyGILState_GetThisThreadState()==tstate);\n    /* On Windows at least, simple reads and writes to 32 bit values\n       are atomic.\n    */\n    return tstate == _PyThreadState_Current;\n}\n\n/* Internal initialization/finalization functions called by\n   Py_Initialize/Py_Finalize\n*/\nvoid\n_PyGILState_Init(PyInterpreterState *i, PyThreadState *t)\n{\n    assert(i && t); /* must init with valid states */\n    autoTLSkey = PyThread_create_key();\n    autoInterpreterState = i;\n    assert(PyThread_get_key_value(autoTLSkey) == NULL);\n    assert(t->gilstate_counter == 0);\n\n    _PyGILState_NoteThreadState(t);\n}\n\nvoid\n_PyGILState_Fini(void)\n{\n    PyThread_delete_key(autoTLSkey);\n    autoInterpreterState = NULL;\n}\n\n/* When a thread state is created for a thread by some mechanism other than\n   PyGILState_Ensure, it's important that the GILState machinery knows about\n   it so it doesn't try to create another thread state for the thread (this is\n   a better fix for SF bug #1010677 than the first one attempted).\n*/\nstatic void\n_PyGILState_NoteThreadState(PyThreadState* tstate)\n{\n    /* If autoTLSkey isn't initialized, this must be the very first\n       threadstate created in Py_Initialize().  Don't do anything for now\n       (we'll be back here when _PyGILState_Init is called). */\n    if (!autoInterpreterState)\n        return;\n\n    /* Stick the thread state for this thread in thread local storage.\n\n       The only situation where you can legitimately have more than one\n       thread state for an OS level thread is when there are multiple\n       interpreters, when:\n\n           a) You shouldn't really be using the PyGILState_ APIs anyway,\n          and:\n\n           b) The slightly odd way PyThread_set_key_value works (see\n          comments by its implementation) means that the first thread\n          state created for that given OS level thread will \"win\",\n          which seems reasonable behaviour.\n    */\n    if (PyThread_set_key_value(autoTLSkey, (void *)tstate) < 0)\n        Py_FatalError(\"Couldn't create autoTLSkey mapping\");\n\n    /* PyGILState_Release must not try to delete this thread state. */\n    tstate->gilstate_counter = 1;\n}\n\n/* The public functions */\nPyThreadState *\nPyGILState_GetThisThreadState(void)\n{\n    if (autoInterpreterState == NULL)\n        return NULL;\n    return (PyThreadState *)PyThread_get_key_value(autoTLSkey);\n}\n\nPyGILState_STATE\nPyGILState_Ensure(void)\n{\n    int current;\n    PyThreadState *tcur;\n    /* Note that we do not auto-init Python here - apart from\n       potential races with 2 threads auto-initializing, pep-311\n       spells out other issues.  Embedders are expected to have\n       called Py_Initialize() and usually PyEval_InitThreads().\n    */\n    assert(autoInterpreterState); /* Py_Initialize() hasn't been called! */\n    tcur = (PyThreadState *)PyThread_get_key_value(autoTLSkey);\n    if (tcur == NULL) {\n        /* Create a new thread state for this thread */\n        tcur = PyThreadState_New(autoInterpreterState);\n        if (tcur == NULL)\n            Py_FatalError(\"Couldn't create thread-state for new thread\");\n        /* This is our thread state!  We'll need to delete it in the\n           matching call to PyGILState_Release(). */\n        tcur->gilstate_counter = 0;\n        current = 0; /* new thread state is never current */\n    }\n    else\n        current = PyThreadState_IsCurrent(tcur);\n    if (current == 0)\n        PyEval_RestoreThread(tcur);\n    /* Update our counter in the thread-state - no need for locks:\n       - tcur will remain valid as we hold the GIL.\n       - the counter is safe as we are the only thread \"allowed\"\n         to modify this value\n    */\n    ++tcur->gilstate_counter;\n    return current ? PyGILState_LOCKED : PyGILState_UNLOCKED;\n}\n\nvoid\nPyGILState_Release(PyGILState_STATE oldstate)\n{\n    PyThreadState *tcur = (PyThreadState *)PyThread_get_key_value(\n                                                            autoTLSkey);\n    if (tcur == NULL)\n        Py_FatalError(\"auto-releasing thread-state, \"\n                      \"but no thread-state for this thread\");\n    /* We must hold the GIL and have our thread state current */\n    /* XXX - remove the check - the assert should be fine,\n       but while this is very new (April 2003), the extra check\n       by release-only users can't hurt.\n    */\n    if (! PyThreadState_IsCurrent(tcur))\n        Py_FatalError(\"This thread state must be current when releasing\");\n    assert(PyThreadState_IsCurrent(tcur));\n    --tcur->gilstate_counter;\n    assert(tcur->gilstate_counter >= 0); /* illegal counter value */\n\n    /* If we're going to destroy this thread-state, we must\n     * clear it while the GIL is held, as destructors may run.\n     */\n    if (tcur->gilstate_counter == 0) {\n        /* can't have been locked when we created it */\n        assert(oldstate == PyGILState_UNLOCKED);\n        PyThreadState_Clear(tcur);\n        /* Delete the thread-state.  Note this releases the GIL too!\n         * It's vital that the GIL be held here, to avoid shutdown\n         * races; see bugs 225673 and 1061968 (that nasty bug has a\n         * habit of coming back).\n         */\n        PyThreadState_DeleteCurrent();\n    }\n    /* Release the lock if necessary */\n    else if (oldstate == PyGILState_UNLOCKED)\n        PyEval_SaveThread();\n}\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* WITH_THREAD */\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Include/pystate.h": "\n/* Thread and interpreter state structures and their interfaces */\n\n\n#ifndef Py_PYSTATE_H\n#define Py_PYSTATE_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* State shared between threads */\n\nstruct _ts; /* Forward */\nstruct _is; /* Forward */\n\ntypedef struct _is {\n\n    struct _is *next;\n    struct _ts *tstate_head;\n\n    PyObject *modules;\n    PyObject *modules_by_index;\n    PyObject *sysdict;\n    PyObject *builtins;\n    PyObject *modules_reloading;\n\n    PyObject *codec_search_path;\n    PyObject *codec_search_cache;\n    PyObject *codec_error_registry;\n    int codecs_initialized;\n\n#ifdef HAVE_DLOPEN\n    int dlopenflags;\n#endif\n#ifdef WITH_TSC\n    int tscdump;\n#endif\n\n} PyInterpreterState;\n\n\n/* State unique per thread */\n\nstruct _frame; /* Avoid including frameobject.h */\n\n/* Py_tracefunc return -1 when raising an exception, or 0 for success. */\ntypedef int (*Py_tracefunc)(PyObject *, struct _frame *, int, PyObject *);\n\n/* The following values are used for 'what' for tracefunc functions: */\n#define PyTrace_CALL 0\n#define PyTrace_EXCEPTION 1\n#define PyTrace_LINE 2\n#define PyTrace_RETURN 3\n#define PyTrace_C_CALL 4\n#define PyTrace_C_EXCEPTION 5\n#define PyTrace_C_RETURN 6\n\ntypedef struct _ts {\n    /* See Python/ceval.c for comments explaining most fields */\n\n    struct _ts *next;\n    PyInterpreterState *interp;\n\n    struct _frame *frame;\n    int recursion_depth;\n    char overflowed; /* The stack has overflowed. Allow 50 more calls\n\t\t        to handle the runtime error. */\n    char recursion_critical; /* The current calls must not cause \n\t\t\t\ta stack overflow. */\n    /* 'tracing' keeps track of the execution depth when tracing/profiling.\n       This is to prevent the actual trace/profile code from being recorded in\n       the trace/profile. */\n    int tracing;\n    int use_tracing;\n\n    Py_tracefunc c_profilefunc;\n    Py_tracefunc c_tracefunc;\n    PyObject *c_profileobj;\n    PyObject *c_traceobj;\n\n    PyObject *curexc_type;\n    PyObject *curexc_value;\n    PyObject *curexc_traceback;\n\n    PyObject *exc_type;\n    PyObject *exc_value;\n    PyObject *exc_traceback;\n\n    PyObject *dict;  /* Stores per-thread state */\n\n    /* tick_counter is incremented whenever the check_interval ticker\n     * reaches zero. The purpose is to give a useful measure of the number\n     * of interpreted bytecode instructions in a given thread.  This\n     * extremely lightweight statistic collector may be of interest to\n     * profilers (like psyco.jit()), although nothing in the core uses it.\n     */\n    int tick_counter;\n\n    int gilstate_counter;\n\n    PyObject *async_exc; /* Asynchronous exception to raise */\n    long thread_id; /* Thread id where this tstate was created */\n\n    /* XXX signal handlers should also be here */\n\n} PyThreadState;\n\n\nPyAPI_FUNC(PyInterpreterState *) PyInterpreterState_New(void);\nPyAPI_FUNC(void) PyInterpreterState_Clear(PyInterpreterState *);\nPyAPI_FUNC(void) PyInterpreterState_Delete(PyInterpreterState *);\nPyAPI_FUNC(int) _PyState_AddModule(PyObject*, struct PyModuleDef*);\nPyAPI_FUNC(PyObject*) PyState_FindModule(struct PyModuleDef*);\n\nPyAPI_FUNC(PyThreadState *) PyThreadState_New(PyInterpreterState *);\nPyAPI_FUNC(PyThreadState *) _PyThreadState_Prealloc(PyInterpreterState *);\nPyAPI_FUNC(void) _PyThreadState_Init(PyThreadState *);\nPyAPI_FUNC(void) PyThreadState_Clear(PyThreadState *);\nPyAPI_FUNC(void) PyThreadState_Delete(PyThreadState *);\n#ifdef WITH_THREAD\nPyAPI_FUNC(void) PyThreadState_DeleteCurrent(void);\n#endif\n\nPyAPI_FUNC(PyThreadState *) PyThreadState_Get(void);\nPyAPI_FUNC(PyThreadState *) PyThreadState_Swap(PyThreadState *);\nPyAPI_FUNC(PyObject *) PyThreadState_GetDict(void);\nPyAPI_FUNC(int) PyThreadState_SetAsyncExc(long, PyObject *);\n\n\n/* Variable and macro for in-line access to current thread state */\n\nPyAPI_DATA(PyThreadState *) _PyThreadState_Current;\n\n#ifdef Py_DEBUG\n#define PyThreadState_GET() PyThreadState_Get()\n#else\n#define PyThreadState_GET() (_PyThreadState_Current)\n#endif\n\ntypedef\n    enum {PyGILState_LOCKED, PyGILState_UNLOCKED}\n        PyGILState_STATE;\n\n/* Ensure that the current thread is ready to call the Python\n   C API, regardless of the current state of Python, or of its\n   thread lock.  This may be called as many times as desired\n   by a thread so long as each call is matched with a call to\n   PyGILState_Release().  In general, other thread-state APIs may\n   be used between _Ensure() and _Release() calls, so long as the\n   thread-state is restored to its previous state before the Release().\n   For example, normal use of the Py_BEGIN_ALLOW_THREADS/\n   Py_END_ALLOW_THREADS macros are acceptable.\n\n   The return value is an opaque \"handle\" to the thread state when\n   PyGILState_Ensure() was called, and must be passed to\n   PyGILState_Release() to ensure Python is left in the same state. Even\n   though recursive calls are allowed, these handles can *not* be shared -\n   each unique call to PyGILState_Ensure must save the handle for its\n   call to PyGILState_Release.\n\n   When the function returns, the current thread will hold the GIL.\n\n   Failure is a fatal error.\n*/\nPyAPI_FUNC(PyGILState_STATE) PyGILState_Ensure(void);\n\n/* Release any resources previously acquired.  After this call, Python's\n   state will be the same as it was prior to the corresponding\n   PyGILState_Ensure() call (but generally this state will be unknown to\n   the caller, hence the use of the GILState API.)\n\n   Every call to PyGILState_Ensure must be matched by a call to\n   PyGILState_Release on the same thread.\n*/\nPyAPI_FUNC(void) PyGILState_Release(PyGILState_STATE);\n\n/* Helper/diagnostic function - get the current thread state for\n   this thread.  May return NULL if no GILState API has been used\n   on the current thread.  Note the main thread always has such a\n   thread-state, even if no auto-thread-state call has been made\n   on the main thread.\n*/\nPyAPI_FUNC(PyThreadState *) PyGILState_GetThisThreadState(void);\n\n/* The implementation of sys._current_frames()  Returns a dict mapping\n   thread id to that thread's current frame.\n*/\nPyAPI_FUNC(PyObject *) _PyThread_CurrentFrames(void);\n\n/* Routines for advanced debuggers, requested by David Beazley.\n   Don't use unless you know what you are doing! */\nPyAPI_FUNC(PyInterpreterState *) PyInterpreterState_Head(void);\nPyAPI_FUNC(PyInterpreterState *) PyInterpreterState_Next(PyInterpreterState *);\nPyAPI_FUNC(PyThreadState *) PyInterpreterState_ThreadHead(PyInterpreterState *);\nPyAPI_FUNC(PyThreadState *) PyThreadState_Next(PyThreadState *);\n\ntypedef struct _frame *(*PyThreadFrameGetter)(PyThreadState *self_);\n\n/* hook for PyEval_GetFrame(), requested for Psyco */\nPyAPI_DATA(PyThreadFrameGetter) _PyThreadState_GetFrame;\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* !Py_PYSTATE_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_ctypes/ctypes_dlfcn.h": "/*****************************************************************\n  This file should be kept compatible with Python 2.3, see PEP 291.\n *****************************************************************/\n\n#ifndef _CTYPES_DLFCN_H_\n#define _CTYPES_DLFCN_H_\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif /* __cplusplus */\n\n#ifndef MS_WIN32\n\n#include <dlfcn.h>\n\n#ifndef CTYPES_DARWIN_DLFCN\n\n#define ctypes_dlsym dlsym\n#define ctypes_dlerror dlerror\n#define ctypes_dlopen dlopen\n#define ctypes_dlclose dlclose\n#define ctypes_dladdr dladdr\n\n#endif /* !CTYPES_DARWIN_DLFCN */\n\n#endif /* !MS_WIN32 */\n\n#ifdef __cplusplus\n}\n#endif /* __cplusplus */\n#endif /* _CTYPES_DLFCN_H_ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_ctypes/callproc.c": "/*\n * History: First version dated from 3/97, derived from my SCMLIB version\n * for win16.\n */\n/*\n * Related Work:\n *      - calldll       http://www.nightmare.com/software.html\n *      - libffi        http://sourceware.cygnus.com/libffi/\n *      - ffcall        http://clisp.cons.org/~haible/packages-ffcall.html\n *   and, of course, Don Beaudry's MESS package, but this is more ctypes\n *   related.\n */\n\n\n/*\n  How are functions called, and how are parameters converted to C ?\n\n  1. _ctypes.c::PyCFuncPtr_call receives an argument tuple 'inargs' and a\n  keyword dictionary 'kwds'.\n\n  2. After several checks, _build_callargs() is called which returns another\n  tuple 'callargs'.  This may be the same tuple as 'inargs', a slice of\n  'inargs', or a completely fresh tuple, depending on several things (is is a\n  COM method, are 'paramflags' available).\n\n  3. _build_callargs also calculates bitarrays containing indexes into\n  the callargs tuple, specifying how to build the return value(s) of\n  the function.\n\n  4. _ctypes_callproc is then called with the 'callargs' tuple.  _ctypes_callproc first\n  allocates two arrays.  The first is an array of 'struct argument' items, the\n  second array has 'void *' entries.\n\n  5. If 'converters' are present (converters is a sequence of argtypes'\n  from_param methods), for each item in 'callargs' converter is called and the\n  result passed to ConvParam.  If 'converters' are not present, each argument\n  is directly passed to ConvParm.\n\n  6. For each arg, ConvParam stores the contained C data (or a pointer to it,\n  for structures) into the 'struct argument' array.\n\n  7. Finally, a loop fills the 'void *' array so that each item points to the\n  data contained in or pointed to by the 'struct argument' array.\n\n  8. The 'void *' argument array is what _call_function_pointer\n  expects. _call_function_pointer then has very little to do - only some\n  libffi specific stuff, then it calls ffi_call.\n\n  So, there are 4 data structures holding processed arguments:\n  - the inargs tuple (in PyCFuncPtr_call)\n  - the callargs tuple (in PyCFuncPtr_call)\n  - the 'struct arguments' array\n  - the 'void *' array\n\n */\n\n#include \"Python.h\"\n#include \"structmember.h\"\n\n#ifdef MS_WIN32\n#include <windows.h>\n#include <tchar.h>\n#else\n#include \"ctypes_dlfcn.h\"\n#endif\n\n#ifdef MS_WIN32\n#include <malloc.h>\n#endif\n\n#include <ffi.h>\n#include \"ctypes.h\"\n\n#if defined(_DEBUG) || defined(__MINGW32__)\n/* Don't use structured exception handling on Windows if this is defined.\n   MingW, AFAIK, doesn't support it.\n*/\n#define DONT_USE_SEH\n#endif\n\n#define CTYPES_CAPSULE_NAME_PYMEM \"_ctypes pymem\"\n\nstatic void pymem_destructor(PyObject *ptr)\n{\n    void *p = PyCapsule_GetPointer(ptr, CTYPES_CAPSULE_NAME_PYMEM);\n    if (p) {\n        PyMem_Free(p);\n    }\n}\n\n/*\n  ctypes maintains thread-local storage that has space for two error numbers:\n  private copies of the system 'errno' value and, on Windows, the system error code\n  accessed by the GetLastError() and SetLastError() api functions.\n\n  Foreign functions created with CDLL(..., use_errno=True), when called, swap\n  the system 'errno' value with the private copy just before the actual\n  function call, and swapped again immediately afterwards.  The 'use_errno'\n  parameter defaults to False, in this case 'ctypes_errno' is not touched.\n\n  On Windows, foreign functions created with CDLL(..., use_last_error=True) or\n  WinDLL(..., use_last_error=True) swap the system LastError value with the\n  ctypes private copy.\n\n  The values are also swapped immeditately before and after ctypes callback\n  functions are called, if the callbacks are constructed using the new\n  optional use_errno parameter set to True: CFUNCTYPE(..., use_errno=TRUE) or\n  WINFUNCTYPE(..., use_errno=True).\n\n  New ctypes functions are provided to access the ctypes private copies from\n  Python:\n\n  - ctypes.set_errno(value) and ctypes.set_last_error(value) store 'value' in\n    the private copy and returns the previous value.\n\n  - ctypes.get_errno() and ctypes.get_last_error() returns the current ctypes\n    private copies value.\n*/\n\n/*\n  This function creates and returns a thread-local Python object that has\n  space to store two integer error numbers; once created the Python object is\n  kept alive in the thread state dictionary as long as the thread itself.\n*/\nPyObject *\n_ctypes_get_errobj(int **pspace)\n{\n    PyObject *dict = PyThreadState_GetDict();\n    PyObject *errobj;\n    static PyObject *error_object_name;\n    if (dict == 0) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"cannot get thread state\");\n        return NULL;\n    }\n    if (error_object_name == NULL) {\n        error_object_name = PyUnicode_InternFromString(\"ctypes.error_object\");\n        if (error_object_name == NULL)\n            return NULL;\n    }\n    errobj = PyDict_GetItem(dict, error_object_name);\n    if (errobj) {\n        if (!PyCapsule_IsValid(errobj, CTYPES_CAPSULE_NAME_PYMEM)) {\n            PyErr_SetString(PyExc_RuntimeError,\n                \"ctypes.error_object is an invalid capsule\");\n            return NULL;\n        }\n        Py_INCREF(errobj);\n    }\n    else {\n        void *space = PyMem_Malloc(sizeof(int) * 2);\n        if (space == NULL)\n            return NULL;\n        memset(space, 0, sizeof(int) * 2);\n        errobj = PyCapsule_New(space, CTYPES_CAPSULE_NAME_PYMEM, pymem_destructor);\n        if (errobj == NULL)\n            return NULL;\n        if (-1 == PyDict_SetItem(dict, error_object_name,\n                                 errobj)) {\n            Py_DECREF(errobj);\n            return NULL;\n        }\n    }\n    *pspace = (int *)PyCapsule_GetPointer(errobj, CTYPES_CAPSULE_NAME_PYMEM);\n    return errobj;\n}\n\nstatic PyObject *\nget_error_internal(PyObject *self, PyObject *args, int index)\n{\n    int *space;\n    PyObject *errobj = _ctypes_get_errobj(&space);\n    PyObject *result;\n\n    if (errobj == NULL)\n        return NULL;\n    result = PyLong_FromLong(space[index]);\n    Py_DECREF(errobj);\n    return result;\n}\n\nstatic PyObject *\nset_error_internal(PyObject *self, PyObject *args, int index)\n{\n    int new_errno, old_errno;\n    PyObject *errobj;\n    int *space;\n\n    if (!PyArg_ParseTuple(args, \"i\", &new_errno))\n        return NULL;\n    errobj = _ctypes_get_errobj(&space);\n    if (errobj == NULL)\n        return NULL;\n    old_errno = space[index];\n    space[index] = new_errno;\n    Py_DECREF(errobj);\n    return PyLong_FromLong(old_errno);\n}\n\nstatic PyObject *\nget_errno(PyObject *self, PyObject *args)\n{\n    return get_error_internal(self, args, 0);\n}\n\nstatic PyObject *\nset_errno(PyObject *self, PyObject *args)\n{\n    return set_error_internal(self, args, 0);\n}\n\n#ifdef MS_WIN32\n\nstatic PyObject *\nget_last_error(PyObject *self, PyObject *args)\n{\n    return get_error_internal(self, args, 1);\n}\n\nstatic PyObject *\nset_last_error(PyObject *self, PyObject *args)\n{\n    return set_error_internal(self, args, 1);\n}\n\nPyObject *ComError;\n\nstatic WCHAR *FormatError(DWORD code)\n{\n    WCHAR *lpMsgBuf;\n    DWORD n;\n    n = FormatMessageW(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,\n                       NULL,\n                       code,\n                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), /* Default language */\n               (LPWSTR) &lpMsgBuf,\n               0,\n               NULL);\n    if (n) {\n        while (iswspace(lpMsgBuf[n-1]))\n            --n;\n        lpMsgBuf[n] = L'\\0'; /* rstrip() */\n    }\n    return lpMsgBuf;\n}\n\n#ifndef DONT_USE_SEH\nstatic void SetException(DWORD code, EXCEPTION_RECORD *pr)\n{\n    /* The 'code' is a normal win32 error code so it could be handled by\n    PyErr_SetFromWindowsErr(). However, for some errors, we have additional\n    information not included in the error code. We handle those here and\n    delegate all others to the generic function. */\n    switch (code) {\n    case EXCEPTION_ACCESS_VIOLATION:\n        /* The thread attempted to read from or write\n           to a virtual address for which it does not\n           have the appropriate access. */\n        if (pr->ExceptionInformation[0] == 0)\n            PyErr_Format(PyExc_WindowsError,\n                         \"exception: access violation reading %p\",\n                         pr->ExceptionInformation[1]);\n        else\n            PyErr_Format(PyExc_WindowsError,\n                         \"exception: access violation writing %p\",\n                         pr->ExceptionInformation[1]);\n        break;\n\n    case EXCEPTION_BREAKPOINT:\n        /* A breakpoint was encountered. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: breakpoint encountered\");\n        break;\n\n    case EXCEPTION_DATATYPE_MISALIGNMENT:\n        /* The thread attempted to read or write data that is\n           misaligned on hardware that does not provide\n           alignment. For example, 16-bit values must be\n           aligned on 2-byte boundaries, 32-bit values on\n           4-byte boundaries, and so on. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: datatype misalignment\");\n        break;\n\n    case EXCEPTION_SINGLE_STEP:\n        /* A trace trap or other single-instruction mechanism\n           signaled that one instruction has been executed. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: single step\");\n        break;\n\n    case EXCEPTION_ARRAY_BOUNDS_EXCEEDED:\n        /* The thread attempted to access an array element\n           that is out of bounds, and the underlying hardware\n           supports bounds checking. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: array bounds exceeded\");\n        break;\n\n    case EXCEPTION_FLT_DENORMAL_OPERAND:\n        /* One of the operands in a floating-point operation\n           is denormal. A denormal value is one that is too\n           small to represent as a standard floating-point\n           value. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: floating-point operand denormal\");\n        break;\n\n    case EXCEPTION_FLT_DIVIDE_BY_ZERO:\n        /* The thread attempted to divide a floating-point\n           value by a floating-point divisor of zero. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: float divide by zero\");\n        break;\n\n    case EXCEPTION_FLT_INEXACT_RESULT:\n        /* The result of a floating-point operation cannot be\n           represented exactly as a decimal fraction. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: float inexact\");\n        break;\n\n    case EXCEPTION_FLT_INVALID_OPERATION:\n        /* This exception represents any floating-point\n           exception not included in this list. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: float invalid operation\");\n        break;\n\n    case EXCEPTION_FLT_OVERFLOW:\n        /* The exponent of a floating-point operation is\n           greater than the magnitude allowed by the\n           corresponding type. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: float overflow\");\n        break;\n\n    case EXCEPTION_FLT_STACK_CHECK:\n        /* The stack overflowed or underflowed as the result\n           of a floating-point operation. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: stack over/underflow\");\n        break;\n\n    case EXCEPTION_STACK_OVERFLOW:\n        /* The stack overflowed or underflowed as the result\n           of a floating-point operation. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: stack overflow\");\n        break;\n\n    case EXCEPTION_FLT_UNDERFLOW:\n        /* The exponent of a floating-point operation is less\n           than the magnitude allowed by the corresponding\n           type. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: float underflow\");\n        break;\n\n    case EXCEPTION_INT_DIVIDE_BY_ZERO:\n        /* The thread attempted to divide an integer value by\n           an integer divisor of zero. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: integer divide by zero\");\n        break;\n\n    case EXCEPTION_INT_OVERFLOW:\n        /* The result of an integer operation caused a carry\n           out of the most significant bit of the result. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: integer overflow\");\n        break;\n\n    case EXCEPTION_PRIV_INSTRUCTION:\n        /* The thread attempted to execute an instruction\n           whose operation is not allowed in the current\n           machine mode. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: priviledged instruction\");\n        break;\n\n    case EXCEPTION_NONCONTINUABLE_EXCEPTION:\n        /* The thread attempted to continue execution after a\n           noncontinuable exception occurred. */\n        PyErr_SetString(PyExc_WindowsError,\n                        \"exception: nocontinuable\");\n        break;\n\n    default:\n        PyErr_SetFromWindowsErr(code);\n        break;\n    }\n}\n\nstatic DWORD HandleException(EXCEPTION_POINTERS *ptrs,\n                             DWORD *pdw, EXCEPTION_RECORD *record)\n{\n    *pdw = ptrs->ExceptionRecord->ExceptionCode;\n    *record = *ptrs->ExceptionRecord;\n    return EXCEPTION_EXECUTE_HANDLER;\n}\n#endif\n\nstatic PyObject *\ncheck_hresult(PyObject *self, PyObject *args)\n{\n    HRESULT hr;\n    if (!PyArg_ParseTuple(args, \"i\", &hr))\n        return NULL;\n    if (FAILED(hr))\n        return PyErr_SetFromWindowsErr(hr);\n    return PyLong_FromLong(hr);\n}\n\n#endif\n\n/**************************************************************/\n\nPyCArgObject *\nPyCArgObject_new(void)\n{\n    PyCArgObject *p;\n    p = PyObject_New(PyCArgObject, &PyCArg_Type);\n    if (p == NULL)\n        return NULL;\n    p->pffi_type = NULL;\n    p->tag = '\\0';\n    p->obj = NULL;\n    memset(&p->value, 0, sizeof(p->value));\n    return p;\n}\n\nstatic void\nPyCArg_dealloc(PyCArgObject *self)\n{\n    Py_XDECREF(self->obj);\n    PyObject_Del(self);\n}\n\nstatic PyObject *\nPyCArg_repr(PyCArgObject *self)\n{\n    char buffer[256];\n    switch(self->tag) {\n    case 'b':\n    case 'B':\n        sprintf(buffer, \"<cparam '%c' (%d)>\",\n            self->tag, self->value.b);\n        break;\n    case 'h':\n    case 'H':\n        sprintf(buffer, \"<cparam '%c' (%d)>\",\n            self->tag, self->value.h);\n        break;\n    case 'i':\n    case 'I':\n        sprintf(buffer, \"<cparam '%c' (%d)>\",\n            self->tag, self->value.i);\n        break;\n    case 'l':\n    case 'L':\n        sprintf(buffer, \"<cparam '%c' (%ld)>\",\n            self->tag, self->value.l);\n        break;\n\n#ifdef HAVE_LONG_LONG\n    case 'q':\n    case 'Q':\n        sprintf(buffer,\n#ifdef MS_WIN32\n            \"<cparam '%c' (%I64d)>\",\n#else\n            \"<cparam '%c' (%qd)>\",\n#endif\n            self->tag, self->value.q);\n        break;\n#endif\n    case 'd':\n        sprintf(buffer, \"<cparam '%c' (%f)>\",\n            self->tag, self->value.d);\n        break;\n    case 'f':\n        sprintf(buffer, \"<cparam '%c' (%f)>\",\n            self->tag, self->value.f);\n        break;\n\n    case 'c':\n        sprintf(buffer, \"<cparam '%c' (%c)>\",\n            self->tag, self->value.c);\n        break;\n\n/* Hm, are these 'z' and 'Z' codes useful at all?\n   Shouldn't they be replaced by the functionality of c_string\n   and c_wstring ?\n*/\n    case 'z':\n    case 'Z':\n    case 'P':\n        sprintf(buffer, \"<cparam '%c' (%p)>\",\n            self->tag, self->value.p);\n        break;\n\n    default:\n        sprintf(buffer, \"<cparam '%c' at %p>\",\n            self->tag, self);\n        break;\n    }\n    return PyUnicode_FromString(buffer);\n}\n\nstatic PyMemberDef PyCArgType_members[] = {\n    { \"_obj\", T_OBJECT,\n      offsetof(PyCArgObject, obj), READONLY,\n      \"the wrapped object\" },\n    { NULL },\n};\n\nPyTypeObject PyCArg_Type = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"CArgObject\",\n    sizeof(PyCArgObject),\n    0,\n    (destructor)PyCArg_dealloc,                 /* tp_dealloc */\n    0,                                          /* tp_print */\n    0,                                          /* tp_getattr */\n    0,                                          /* tp_setattr */\n    0,                                          /* tp_reserved */\n    (reprfunc)PyCArg_repr,                      /* tp_repr */\n    0,                                          /* tp_as_number */\n    0,                                          /* tp_as_sequence */\n    0,                                          /* tp_as_mapping */\n    0,                                          /* tp_hash */\n    0,                                          /* tp_call */\n    0,                                          /* tp_str */\n    0,                                          /* tp_getattro */\n    0,                                          /* tp_setattro */\n    0,                                          /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT,                         /* tp_flags */\n    0,                                          /* tp_doc */\n    0,                                          /* tp_traverse */\n    0,                                          /* tp_clear */\n    0,                                          /* tp_richcompare */\n    0,                                          /* tp_weaklistoffset */\n    0,                                          /* tp_iter */\n    0,                                          /* tp_iternext */\n    0,                                          /* tp_methods */\n    PyCArgType_members,                         /* tp_members */\n};\n\n/****************************************************************/\n/*\n * Convert a PyObject * into a parameter suitable to pass to an\n * C function call.\n *\n * 1. Python integers are converted to C int and passed by value.\n *    Py_None is converted to a C NULL pointer.\n *\n * 2. 3-tuples are expected to have a format character in the first\n *    item, which must be 'i', 'f', 'd', 'q', or 'P'.\n *    The second item will have to be an integer, float, double, long long\n *    or integer (denoting an address void *), will be converted to the\n *    corresponding C data type and passed by value.\n *\n * 3. Other Python objects are tested for an '_as_parameter_' attribute.\n *    The value of this attribute must be an integer which will be passed\n *    by value, or a 2-tuple or 3-tuple which will be used according\n *    to point 2 above. The third item (if any), is ignored. It is normally\n *    used to keep the object alive where this parameter refers to.\n *    XXX This convention is dangerous - you can construct arbitrary tuples\n *    in Python and pass them. Would it be safer to use a custom container\n *    datatype instead of a tuple?\n *\n * 4. Other Python objects cannot be passed as parameters - an exception is raised.\n *\n * 5. ConvParam will store the converted result in a struct containing format\n *    and value.\n */\n\nunion result {\n    char c;\n    char b;\n    short h;\n    int i;\n    long l;\n#ifdef HAVE_LONG_LONG\n    PY_LONG_LONG q;\n#endif\n    long double D;\n    double d;\n    float f;\n    void *p;\n};\n\nstruct argument {\n    ffi_type *ffi_type;\n    PyObject *keep;\n    union result value;\n};\n\n/*\n * Convert a single Python object into a PyCArgObject and return it.\n */\nstatic int ConvParam(PyObject *obj, Py_ssize_t index, struct argument *pa)\n{\n    StgDictObject *dict;\n    pa->keep = NULL; /* so we cannot forget it later */\n\n    dict = PyObject_stgdict(obj);\n    if (dict) {\n        PyCArgObject *carg;\n        assert(dict->paramfunc);\n        /* If it has an stgdict, it is a CDataObject */\n        carg = dict->paramfunc((CDataObject *)obj);\n        pa->ffi_type = carg->pffi_type;\n        memcpy(&pa->value, &carg->value, sizeof(pa->value));\n        pa->keep = (PyObject *)carg;\n        return 0;\n    }\n\n    if (PyCArg_CheckExact(obj)) {\n        PyCArgObject *carg = (PyCArgObject *)obj;\n        pa->ffi_type = carg->pffi_type;\n        Py_INCREF(obj);\n        pa->keep = obj;\n        memcpy(&pa->value, &carg->value, sizeof(pa->value));\n        return 0;\n    }\n\n    /* check for None, integer, string or unicode and use directly if successful */\n    if (obj == Py_None) {\n        pa->ffi_type = &ffi_type_pointer;\n        pa->value.p = NULL;\n        return 0;\n    }\n\n    if (PyLong_Check(obj)) {\n        pa->ffi_type = &ffi_type_sint;\n        pa->value.i = (long)PyLong_AsUnsignedLong(obj);\n        if (pa->value.i == -1 && PyErr_Occurred()) {\n            PyErr_Clear();\n            pa->value.i = PyLong_AsLong(obj);\n            if (pa->value.i == -1 && PyErr_Occurred()) {\n                PyErr_SetString(PyExc_OverflowError,\n                                \"long int too long to convert\");\n                return -1;\n            }\n        }\n        return 0;\n    }\n\n    if (PyBytes_Check(obj)) {\n        pa->ffi_type = &ffi_type_pointer;\n        pa->value.p = PyBytes_AsString(obj);\n        Py_INCREF(obj);\n        pa->keep = obj;\n        return 0;\n    }\n\n#ifdef CTYPES_UNICODE\n    if (PyUnicode_Check(obj)) {\n#ifdef HAVE_USABLE_WCHAR_T\n        pa->ffi_type = &ffi_type_pointer;\n        pa->value.p = PyUnicode_AS_UNICODE(obj);\n        Py_INCREF(obj);\n        pa->keep = obj;\n        return 0;\n#else\n        int size = PyUnicode_GET_SIZE(obj);\n        pa->ffi_type = &ffi_type_pointer;\n        size += 1; /* terminating NUL */\n        size *= sizeof(wchar_t);\n        pa->value.p = PyMem_Malloc(size);\n        if (!pa->value.p) {\n            PyErr_NoMemory();\n            return -1;\n        }\n        memset(pa->value.p, 0, size);\n        pa->keep = PyCapsule_New(pa->value.p, CTYPES_CAPSULE_NAME_PYMEM, pymem_destructor);\n        if (!pa->keep) {\n            PyMem_Free(pa->value.p);\n            return -1;\n        }\n        if (-1 == PyUnicode_AsWideChar((PyUnicodeObject *)obj,\n                                       pa->value.p, PyUnicode_GET_SIZE(obj)))\n            return -1;\n        return 0;\n#endif\n    }\n#endif\n\n    {\n        PyObject *arg;\n        arg = PyObject_GetAttrString(obj, \"_as_parameter_\");\n        /* Which types should we exactly allow here?\n           integers are required for using Python classes\n           as parameters (they have to expose the '_as_parameter_'\n           attribute)\n        */\n        if (arg) {\n            int result;\n            result = ConvParam(arg, index, pa);\n            Py_DECREF(arg);\n            return result;\n        }\n        PyErr_Format(PyExc_TypeError,\n                     \"Don't know how to convert parameter %d\",\n                     Py_SAFE_DOWNCAST(index, Py_ssize_t, int));\n        return -1;\n    }\n}\n\n\nffi_type *_ctypes_get_ffi_type(PyObject *obj)\n{\n    StgDictObject *dict;\n    if (obj == NULL)\n        return &ffi_type_sint;\n    dict = PyType_stgdict(obj);\n    if (dict == NULL)\n        return &ffi_type_sint;\n#if defined(MS_WIN32) && !defined(_WIN32_WCE)\n    /* This little trick works correctly with MSVC.\n       It returns small structures in registers\n    */\n    if (dict->ffi_type_pointer.type == FFI_TYPE_STRUCT) {\n        if (dict->ffi_type_pointer.size <= 4)\n            return &ffi_type_sint32;\n        else if (dict->ffi_type_pointer.size <= 8)\n            return &ffi_type_sint64;\n    }\n#endif\n    return &dict->ffi_type_pointer;\n}\n\n\n/*\n * libffi uses:\n *\n * ffi_status ffi_prep_cif(ffi_cif *cif, ffi_abi abi,\n *                         unsigned int nargs,\n *                         ffi_type *rtype,\n *                         ffi_type **atypes);\n *\n * and then\n *\n * void ffi_call(ffi_cif *cif, void *fn, void *rvalue, void **avalues);\n */\nstatic int _call_function_pointer(int flags,\n                                  PPROC pProc,\n                                  void **avalues,\n                                  ffi_type **atypes,\n                                  ffi_type *restype,\n                                  void *resmem,\n                                  int argcount)\n{\n#ifdef WITH_THREAD\n    PyThreadState *_save = NULL; /* For Py_BLOCK_THREADS and Py_UNBLOCK_THREADS */\n#endif\n    PyObject *error_object = NULL;\n    int *space;\n    ffi_cif cif;\n    int cc;\n#ifdef MS_WIN32\n    int delta;\n#ifndef DONT_USE_SEH\n    DWORD dwExceptionCode = 0;\n    EXCEPTION_RECORD record;\n#endif\n#endif\n    /* XXX check before here */\n    if (restype == NULL) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"No ffi_type for result\");\n        return -1;\n    }\n\n    cc = FFI_DEFAULT_ABI;\n#if defined(MS_WIN32) && !defined(MS_WIN64) && !defined(_WIN32_WCE)\n    if ((flags & FUNCFLAG_CDECL) == 0)\n        cc = FFI_STDCALL;\n#endif\n    if (FFI_OK != ffi_prep_cif(&cif,\n                               cc,\n                               argcount,\n                               restype,\n                               atypes)) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"ffi_prep_cif failed\");\n        return -1;\n    }\n\n    if (flags & (FUNCFLAG_USE_ERRNO | FUNCFLAG_USE_LASTERROR)) {\n        error_object = _ctypes_get_errobj(&space);\n        if (error_object == NULL)\n            return -1;\n    }\n#ifdef WITH_THREAD\n    if ((flags & FUNCFLAG_PYTHONAPI) == 0)\n        Py_UNBLOCK_THREADS\n#endif\n    if (flags & FUNCFLAG_USE_ERRNO) {\n        int temp = space[0];\n        space[0] = errno;\n        errno = temp;\n    }\n#ifdef MS_WIN32\n    if (flags & FUNCFLAG_USE_LASTERROR) {\n        int temp = space[1];\n        space[1] = GetLastError();\n        SetLastError(temp);\n    }\n#ifndef DONT_USE_SEH\n    __try {\n#endif\n        delta =\n#endif\n            ffi_call(&cif, (void *)pProc, resmem, avalues);\n#ifdef MS_WIN32\n#ifndef DONT_USE_SEH\n    }\n    __except (HandleException(GetExceptionInformation(),\n                              &dwExceptionCode, &record)) {\n        ;\n    }\n#endif\n    if (flags & FUNCFLAG_USE_LASTERROR) {\n        int temp = space[1];\n        space[1] = GetLastError();\n        SetLastError(temp);\n    }\n#endif\n    if (flags & FUNCFLAG_USE_ERRNO) {\n        int temp = space[0];\n        space[0] = errno;\n        errno = temp;\n    }\n    Py_XDECREF(error_object);\n#ifdef WITH_THREAD\n    if ((flags & FUNCFLAG_PYTHONAPI) == 0)\n        Py_BLOCK_THREADS\n#endif\n#ifdef MS_WIN32\n#ifndef DONT_USE_SEH\n    if (dwExceptionCode) {\n        SetException(dwExceptionCode, &record);\n        return -1;\n    }\n#endif\n#ifdef MS_WIN64\n    if (delta != 0) {\n        PyErr_Format(PyExc_RuntimeError,\n                     \"ffi_call failed with code %d\",\n                     delta);\n        return -1;\n    }\n#else\n    if (delta < 0) {\n        if (flags & FUNCFLAG_CDECL)\n            PyErr_Format(PyExc_ValueError,\n                         \"Procedure called with not enough \"\n                         \"arguments (%d bytes missing) \"\n                         \"or wrong calling convention\",\n                         -delta);\n        else\n            PyErr_Format(PyExc_ValueError,\n                         \"Procedure probably called with not enough \"\n                         \"arguments (%d bytes missing)\",\n                         -delta);\n        return -1;\n    } else if (delta > 0) {\n        PyErr_Format(PyExc_ValueError,\n                     \"Procedure probably called with too many \"\n                     \"arguments (%d bytes in excess)\",\n                     delta);\n        return -1;\n    }\n#endif\n#endif\n    if ((flags & FUNCFLAG_PYTHONAPI) && PyErr_Occurred())\n        return -1;\n    return 0;\n}\n\n/*\n * Convert the C value in result into a Python object, depending on restype.\n *\n * - If restype is NULL, return a Python integer.\n * - If restype is None, return None.\n * - If restype is a simple ctypes type (c_int, c_void_p), call the type's getfunc,\n *   pass the result to checker and return the result.\n * - If restype is another ctypes type, return an instance of that.\n * - Otherwise, call restype and return the result.\n */\nstatic PyObject *GetResult(PyObject *restype, void *result, PyObject *checker)\n{\n    StgDictObject *dict;\n    PyObject *retval, *v;\n\n    if (restype == NULL)\n        return PyLong_FromLong(*(int *)result);\n\n    if (restype == Py_None) {\n        Py_INCREF(Py_None);\n        return Py_None;\n    }\n\n    dict = PyType_stgdict(restype);\n    if (dict == NULL)\n        return PyObject_CallFunction(restype, \"i\", *(int *)result);\n\n    if (dict->getfunc && !_ctypes_simple_instance(restype)) {\n        retval = dict->getfunc(result, dict->size);\n        /* If restype is py_object (detected by comparing getfunc with\n           O_get), we have to call Py_DECREF because O_get has already\n           called Py_INCREF.\n        */\n        if (dict->getfunc == _ctypes_get_fielddesc(\"O\")->getfunc) {\n            Py_DECREF(retval);\n        }\n    } else\n        retval = PyCData_FromBaseObj(restype, NULL, 0, result);\n\n    if (!checker || !retval)\n        return retval;\n\n    v = PyObject_CallFunctionObjArgs(checker, retval, NULL);\n    if (v == NULL)\n        _ctypes_add_traceback(\"GetResult\", \"_ctypes/callproc.c\", __LINE__-2);\n    Py_DECREF(retval);\n    return v;\n}\n\n/*\n * Raise a new exception 'exc_class', adding additional text to the original\n * exception string.\n */\nvoid _ctypes_extend_error(PyObject *exc_class, char *fmt, ...)\n{\n    va_list vargs;\n    PyObject *tp, *v, *tb, *s, *cls_str, *msg_str;\n\n    va_start(vargs, fmt);\n    s = PyUnicode_FromFormatV(fmt, vargs);\n    va_end(vargs);\n    if (!s)\n        return;\n\n    PyErr_Fetch(&tp, &v, &tb);\n    PyErr_NormalizeException(&tp, &v, &tb);\n    cls_str = PyObject_Str(tp);\n    if (cls_str) {\n        PyUnicode_AppendAndDel(&s, cls_str);\n        PyUnicode_AppendAndDel(&s, PyUnicode_FromString(\": \"));\n        if (s == NULL)\n            goto error;\n    } else\n        PyErr_Clear();\n    msg_str = PyObject_Str(v);\n    if (msg_str)\n        PyUnicode_AppendAndDel(&s, msg_str);\n    else {\n        PyErr_Clear();\n        PyUnicode_AppendAndDel(&s, PyUnicode_FromString(\"???\"));\n        if (s == NULL)\n            goto error;\n    }\n    PyErr_SetObject(exc_class, s);\nerror:\n    Py_XDECREF(tp);\n    Py_XDECREF(v);\n    Py_XDECREF(tb);\n    Py_XDECREF(s);\n}\n\n\n#ifdef MS_WIN32\n\nstatic PyObject *\nGetComError(HRESULT errcode, GUID *riid, IUnknown *pIunk)\n{\n    HRESULT hr;\n    ISupportErrorInfo *psei = NULL;\n    IErrorInfo *pei = NULL;\n    BSTR descr=NULL, helpfile=NULL, source=NULL;\n    GUID guid;\n    DWORD helpcontext=0;\n    LPOLESTR progid;\n    PyObject *obj;\n    LPOLESTR text;\n\n    /* We absolutely have to release the GIL during COM method calls,\n       otherwise we may get a deadlock!\n    */\n#ifdef WITH_THREAD\n    Py_BEGIN_ALLOW_THREADS\n#endif\n\n    hr = pIunk->lpVtbl->QueryInterface(pIunk, &IID_ISupportErrorInfo, (void **)&psei);\n    if (FAILED(hr))\n        goto failed;\n\n    hr = psei->lpVtbl->InterfaceSupportsErrorInfo(psei, riid);\n    psei->lpVtbl->Release(psei);\n    if (FAILED(hr))\n        goto failed;\n\n    hr = GetErrorInfo(0, &pei);\n    if (hr != S_OK)\n        goto failed;\n\n    pei->lpVtbl->GetDescription(pei, &descr);\n    pei->lpVtbl->GetGUID(pei, &guid);\n    pei->lpVtbl->GetHelpContext(pei, &helpcontext);\n    pei->lpVtbl->GetHelpFile(pei, &helpfile);\n    pei->lpVtbl->GetSource(pei, &source);\n\n    pei->lpVtbl->Release(pei);\n\n  failed:\n#ifdef WITH_THREAD\n    Py_END_ALLOW_THREADS\n#endif\n\n    progid = NULL;\n    ProgIDFromCLSID(&guid, &progid);\n\n    text = FormatError(errcode);\n    obj = Py_BuildValue(\n        \"iu(uuuiu)\",\n        errcode,\n        text,\n        descr, source, helpfile, helpcontext,\n        progid);\n    if (obj) {\n        PyErr_SetObject(ComError, obj);\n        Py_DECREF(obj);\n    }\n    LocalFree(text);\n\n    if (descr)\n        SysFreeString(descr);\n    if (helpfile)\n        SysFreeString(helpfile);\n    if (source)\n        SysFreeString(source);\n\n    return NULL;\n}\n#endif\n\n/*\n * Requirements, must be ensured by the caller:\n * - argtuple is tuple of arguments\n * - argtypes is either NULL, or a tuple of the same size as argtuple\n *\n * - XXX various requirements for restype, not yet collected\n */\nPyObject *_ctypes_callproc(PPROC pProc,\n                    PyObject *argtuple,\n#ifdef MS_WIN32\n                    IUnknown *pIunk,\n                    GUID *iid,\n#endif\n                    int flags,\n                    PyObject *argtypes, /* misleading name: This is a tuple of\n                                           methods, not types: the .from_param\n                                           class methods of the types */\n            PyObject *restype,\n            PyObject *checker)\n{\n    Py_ssize_t i, n, argcount, argtype_count;\n    void *resbuf;\n    struct argument *args, *pa;\n    ffi_type **atypes;\n    ffi_type *rtype;\n    void **avalues;\n    PyObject *retval = NULL;\n\n    n = argcount = PyTuple_GET_SIZE(argtuple);\n#ifdef MS_WIN32\n    /* an optional COM object this pointer */\n    if (pIunk)\n        ++argcount;\n#endif\n\n    args = (struct argument *)alloca(sizeof(struct argument) * argcount);\n    if (!args) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    memset(args, 0, sizeof(struct argument) * argcount);\n    argtype_count = argtypes ? PyTuple_GET_SIZE(argtypes) : 0;\n#ifdef MS_WIN32\n    if (pIunk) {\n        args[0].ffi_type = &ffi_type_pointer;\n        args[0].value.p = pIunk;\n        pa = &args[1];\n    } else\n#endif\n        pa = &args[0];\n\n    /* Convert the arguments */\n    for (i = 0; i < n; ++i, ++pa) {\n        PyObject *converter;\n        PyObject *arg;\n        int err;\n\n        arg = PyTuple_GET_ITEM(argtuple, i);            /* borrowed ref */\n        /* For cdecl functions, we allow more actual arguments\n           than the length of the argtypes tuple.\n           This is checked in _ctypes::PyCFuncPtr_Call\n        */\n        if (argtypes && argtype_count > i) {\n            PyObject *v;\n            converter = PyTuple_GET_ITEM(argtypes, i);\n            v = PyObject_CallFunctionObjArgs(converter,\n                                               arg,\n                                               NULL);\n            if (v == NULL) {\n                _ctypes_extend_error(PyExc_ArgError, \"argument %d: \", i+1);\n                goto cleanup;\n            }\n\n            err = ConvParam(v, i+1, pa);\n            Py_DECREF(v);\n            if (-1 == err) {\n                _ctypes_extend_error(PyExc_ArgError, \"argument %d: \", i+1);\n                goto cleanup;\n            }\n        } else {\n            err = ConvParam(arg, i+1, pa);\n            if (-1 == err) {\n                _ctypes_extend_error(PyExc_ArgError, \"argument %d: \", i+1);\n                goto cleanup; /* leaking ? */\n            }\n        }\n    }\n\n    rtype = _ctypes_get_ffi_type(restype);\n    resbuf = alloca(max(rtype->size, sizeof(ffi_arg)));\n\n    avalues = (void **)alloca(sizeof(void *) * argcount);\n    atypes = (ffi_type **)alloca(sizeof(ffi_type *) * argcount);\n    if (!resbuf || !avalues || !atypes) {\n        PyErr_NoMemory();\n        goto cleanup;\n    }\n    for (i = 0; i < argcount; ++i) {\n        atypes[i] = args[i].ffi_type;\n        if (atypes[i]->type == FFI_TYPE_STRUCT\n#ifdef _WIN64\n            && atypes[i]->size <= sizeof(void *)\n#endif\n            )\n            avalues[i] = (void *)args[i].value.p;\n        else\n            avalues[i] = (void *)&args[i].value;\n    }\n\n    if (-1 == _call_function_pointer(flags, pProc, avalues, atypes,\n                                     rtype, resbuf,\n                                     Py_SAFE_DOWNCAST(argcount,\n                                                      Py_ssize_t,\n                                                      int)))\n        goto cleanup;\n\n#ifdef WORDS_BIGENDIAN\n    /* libffi returns the result in a buffer with sizeof(ffi_arg). This\n       causes problems on big endian machines, since the result buffer\n       address cannot simply be used as result pointer, instead we must\n       adjust the pointer value:\n     */\n    /*\n      XXX I should find out and clarify why this is needed at all,\n      especially why adjusting for ffi_type_float must be avoided on\n      64-bit platforms.\n     */\n    if (rtype->type != FFI_TYPE_FLOAT\n        && rtype->type != FFI_TYPE_STRUCT\n        && rtype->size < sizeof(ffi_arg))\n        resbuf = (char *)resbuf + sizeof(ffi_arg) - rtype->size;\n#endif\n\n#ifdef MS_WIN32\n    if (iid && pIunk) {\n        if (*(int *)resbuf & 0x80000000)\n            retval = GetComError(*(HRESULT *)resbuf, iid, pIunk);\n        else\n            retval = PyLong_FromLong(*(int *)resbuf);\n    } else if (flags & FUNCFLAG_HRESULT) {\n        if (*(int *)resbuf & 0x80000000)\n            retval = PyErr_SetFromWindowsErr(*(int *)resbuf);\n        else\n            retval = PyLong_FromLong(*(int *)resbuf);\n    } else\n#endif\n        retval = GetResult(restype, resbuf, checker);\n  cleanup:\n    for (i = 0; i < argcount; ++i)\n        Py_XDECREF(args[i].keep);\n    return retval;\n}\n\nstatic int\n_parse_voidp(PyObject *obj, void **address)\n{\n    *address = PyLong_AsVoidPtr(obj);\n    if (*address == NULL)\n        return 0;\n    return 1;\n}\n\n#ifdef MS_WIN32\n\nstatic char format_error_doc[] =\n\"FormatError([integer]) -> string\\n\\\n\\n\\\nConvert a win32 error code into a string. If the error code is not\\n\\\ngiven, the return value of a call to GetLastError() is used.\\n\";\nstatic PyObject *format_error(PyObject *self, PyObject *args)\n{\n    PyObject *result;\n    wchar_t *lpMsgBuf;\n    DWORD code = 0;\n    if (!PyArg_ParseTuple(args, \"|i:FormatError\", &code))\n        return NULL;\n    if (code == 0)\n        code = GetLastError();\n    lpMsgBuf = FormatError(code);\n    if (lpMsgBuf) {\n        result = PyUnicode_FromWideChar(lpMsgBuf, wcslen(lpMsgBuf));\n        LocalFree(lpMsgBuf);\n    } else {\n        result = PyUnicode_FromString(\"<no description>\");\n    }\n    return result;\n}\n\nstatic char load_library_doc[] =\n\"LoadLibrary(name) -> handle\\n\\\n\\n\\\nLoad an executable (usually a DLL), and return a handle to it.\\n\\\nThe handle may be used to locate exported functions in this\\n\\\nmodule.\\n\";\nstatic PyObject *load_library(PyObject *self, PyObject *args)\n{\n    WCHAR *name;\n    PyObject *nameobj;\n    PyObject *ignored;\n    HMODULE hMod;\n    if (!PyArg_ParseTuple(args, \"O|O:LoadLibrary\", &nameobj, &ignored))\n        return NULL;\n\n    name = PyUnicode_AsUnicode(nameobj);\n    if (!name)\n        return NULL;\n\n    hMod = LoadLibraryW(name);\n    if (!hMod)\n        return PyErr_SetFromWindowsErr(GetLastError());\n#ifdef _WIN64\n    return PyLong_FromVoidPtr(hMod);\n#else\n    return Py_BuildValue(\"i\", hMod);\n#endif\n}\n\nstatic char free_library_doc[] =\n\"FreeLibrary(handle) -> void\\n\\\n\\n\\\nFree the handle of an executable previously loaded by LoadLibrary.\\n\";\nstatic PyObject *free_library(PyObject *self, PyObject *args)\n{\n    void *hMod;\n    if (!PyArg_ParseTuple(args, \"O&:FreeLibrary\", &_parse_voidp, &hMod))\n        return NULL;\n    if (!FreeLibrary((HMODULE)hMod))\n        return PyErr_SetFromWindowsErr(GetLastError());\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\n/* obsolete, should be removed */\n/* Only used by sample code (in samples\\Windows\\COM.py) */\nstatic PyObject *\ncall_commethod(PyObject *self, PyObject *args)\n{\n    IUnknown *pIunk;\n    int index;\n    PyObject *arguments;\n    PPROC *lpVtbl;\n    PyObject *result;\n    CDataObject *pcom;\n    PyObject *argtypes = NULL;\n\n    if (!PyArg_ParseTuple(args,\n                          \"OiO!|O!\",\n                          &pcom, &index,\n                          &PyTuple_Type, &arguments,\n                          &PyTuple_Type, &argtypes))\n        return NULL;\n\n    if (argtypes && (PyTuple_GET_SIZE(arguments) != PyTuple_GET_SIZE(argtypes))) {\n        PyErr_Format(PyExc_TypeError,\n                     \"Method takes %d arguments (%d given)\",\n                     PyTuple_GET_SIZE(argtypes), PyTuple_GET_SIZE(arguments));\n        return NULL;\n    }\n\n    if (!CDataObject_Check(pcom) || (pcom->b_size != sizeof(void *))) {\n        PyErr_Format(PyExc_TypeError,\n                     \"COM Pointer expected instead of %s instance\",\n                     Py_TYPE(pcom)->tp_name);\n        return NULL;\n    }\n\n    if ((*(void **)(pcom->b_ptr)) == NULL) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"The COM 'this' pointer is NULL\");\n        return NULL;\n    }\n\n    pIunk = (IUnknown *)(*(void **)(pcom->b_ptr));\n    lpVtbl = (PPROC *)(pIunk->lpVtbl);\n\n    result =  _ctypes_callproc(lpVtbl[index],\n                        arguments,\n#ifdef MS_WIN32\n                        pIunk,\n                        NULL,\n#endif\n                        FUNCFLAG_HRESULT, /* flags */\n                argtypes, /* self->argtypes */\n                NULL, /* self->restype */\n                NULL); /* checker */\n    return result;\n}\n\nstatic char copy_com_pointer_doc[] =\n\"CopyComPointer(src, dst) -> HRESULT value\\n\";\n\nstatic PyObject *\ncopy_com_pointer(PyObject *self, PyObject *args)\n{\n    PyObject *p1, *p2, *r = NULL;\n    struct argument a, b;\n    IUnknown *src, **pdst;\n    if (!PyArg_ParseTuple(args, \"OO:CopyComPointer\", &p1, &p2))\n        return NULL;\n    a.keep = b.keep = NULL;\n\n    if (-1 == ConvParam(p1, 0, &a) || -1 == ConvParam(p2, 1, &b))\n        goto done;\n    src = (IUnknown *)a.value.p;\n    pdst = (IUnknown **)b.value.p;\n\n    if (pdst == NULL)\n        r = PyLong_FromLong(E_POINTER);\n    else {\n        if (src)\n            src->lpVtbl->AddRef(src);\n        *pdst = src;\n        r = PyLong_FromLong(S_OK);\n    }\n  done:\n    Py_XDECREF(a.keep);\n    Py_XDECREF(b.keep);\n    return r;\n}\n#else\n\nstatic PyObject *py_dl_open(PyObject *self, PyObject *args)\n{\n    PyObject *name, *name2;\n    char *name_str;\n    void * handle;\n#ifdef RTLD_LOCAL\n    int mode = RTLD_NOW | RTLD_LOCAL;\n#else\n    /* cygwin doesn't define RTLD_LOCAL */\n    int mode = RTLD_NOW;\n#endif\n    if (!PyArg_ParseTuple(args, \"O|i:dlopen\", &name, &mode))\n        return NULL;\n    mode |= RTLD_NOW;\n    if (name != Py_None) {\n        if (PyUnicode_FSConverter(name, &name2) == 0)\n            return NULL;\n        if (PyBytes_Check(name2))\n            name_str = PyBytes_AS_STRING(name2);\n        else\n            name_str = PyByteArray_AS_STRING(name2);\n    } else {\n        name_str = NULL;\n        name2 = NULL;\n    }\n    handle = ctypes_dlopen(name_str, mode);\n    Py_XDECREF(name2);\n    if (!handle) {\n        char *errmsg = ctypes_dlerror();\n        if (!errmsg)\n            errmsg = \"dlopen() error\";\n        PyErr_SetString(PyExc_OSError,\n                               errmsg);\n        return NULL;\n    }\n    return PyLong_FromVoidPtr(handle);\n}\n\nstatic PyObject *py_dl_close(PyObject *self, PyObject *args)\n{\n    void *handle;\n\n    if (!PyArg_ParseTuple(args, \"O&:dlclose\", &_parse_voidp, &handle))\n        return NULL;\n    if (dlclose(handle)) {\n        PyErr_SetString(PyExc_OSError,\n                               ctypes_dlerror());\n        return NULL;\n    }\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nstatic PyObject *py_dl_sym(PyObject *self, PyObject *args)\n{\n    char *name;\n    void *handle;\n    void *ptr;\n\n    if (!PyArg_ParseTuple(args, \"O&s:dlsym\",\n                          &_parse_voidp, &handle, &name))\n        return NULL;\n    ptr = ctypes_dlsym((void*)handle, name);\n    if (!ptr) {\n        PyErr_SetString(PyExc_OSError,\n                               ctypes_dlerror());\n        return NULL;\n    }\n    return PyLong_FromVoidPtr(ptr);\n}\n#endif\n\n/*\n * Only for debugging so far: So that we can call CFunction instances\n *\n * XXX Needs to accept more arguments: flags, argtypes, restype\n */\nstatic PyObject *\ncall_function(PyObject *self, PyObject *args)\n{\n    void *func;\n    PyObject *arguments;\n    PyObject *result;\n\n    if (!PyArg_ParseTuple(args,\n                          \"O&O!\",\n                          &_parse_voidp, &func,\n                          &PyTuple_Type, &arguments))\n        return NULL;\n\n    result =  _ctypes_callproc((PPROC)func,\n                        arguments,\n#ifdef MS_WIN32\n                        NULL,\n                        NULL,\n#endif\n                        0, /* flags */\n                NULL, /* self->argtypes */\n                NULL, /* self->restype */\n                NULL); /* checker */\n    return result;\n}\n\n/*\n * Only for debugging so far: So that we can call CFunction instances\n *\n * XXX Needs to accept more arguments: flags, argtypes, restype\n */\nstatic PyObject *\ncall_cdeclfunction(PyObject *self, PyObject *args)\n{\n    void *func;\n    PyObject *arguments;\n    PyObject *result;\n\n    if (!PyArg_ParseTuple(args,\n                          \"O&O!\",\n                          &_parse_voidp, &func,\n                          &PyTuple_Type, &arguments))\n        return NULL;\n\n    result =  _ctypes_callproc((PPROC)func,\n                        arguments,\n#ifdef MS_WIN32\n                        NULL,\n                        NULL,\n#endif\n                        FUNCFLAG_CDECL, /* flags */\n                NULL, /* self->argtypes */\n                NULL, /* self->restype */\n                NULL); /* checker */\n    return result;\n}\n\n/*****************************************************************\n * functions\n */\nstatic char sizeof_doc[] =\n\"sizeof(C type) -> integer\\n\"\n\"sizeof(C instance) -> integer\\n\"\n\"Return the size in bytes of a C instance\";\n\nstatic PyObject *\nsizeof_func(PyObject *self, PyObject *obj)\n{\n    StgDictObject *dict;\n\n    dict = PyType_stgdict(obj);\n    if (dict)\n        return PyLong_FromSsize_t(dict->size);\n\n    if (CDataObject_Check(obj))\n        return PyLong_FromSsize_t(((CDataObject *)obj)->b_size);\n    PyErr_SetString(PyExc_TypeError,\n                    \"this type has no size\");\n    return NULL;\n}\n\nstatic char alignment_doc[] =\n\"alignment(C type) -> integer\\n\"\n\"alignment(C instance) -> integer\\n\"\n\"Return the alignment requirements of a C instance\";\n\nstatic PyObject *\nalign_func(PyObject *self, PyObject *obj)\n{\n    StgDictObject *dict;\n\n    dict = PyType_stgdict(obj);\n    if (dict)\n        return PyLong_FromSsize_t(dict->align);\n\n    dict = PyObject_stgdict(obj);\n    if (dict)\n        return PyLong_FromSsize_t(dict->align);\n\n    PyErr_SetString(PyExc_TypeError,\n                    \"no alignment info\");\n    return NULL;\n}\n\nstatic char byref_doc[] =\n\"byref(C instance[, offset=0]) -> byref-object\\n\"\n\"Return a pointer lookalike to a C instance, only usable\\n\"\n\"as function argument\";\n\n/*\n * We must return something which can be converted to a parameter,\n * but still has a reference to self.\n */\nstatic PyObject *\nbyref(PyObject *self, PyObject *args)\n{\n    PyCArgObject *parg;\n    PyObject *obj;\n    PyObject *pyoffset = NULL;\n    Py_ssize_t offset = 0;\n\n    if (!PyArg_UnpackTuple(args, \"byref\", 1, 2,\n                           &obj, &pyoffset))\n        return NULL;\n    if (pyoffset) {\n        offset = PyNumber_AsSsize_t(pyoffset, NULL);\n        if (offset == -1 && PyErr_Occurred())\n            return NULL;\n    }\n    if (!CDataObject_Check(obj)) {\n        PyErr_Format(PyExc_TypeError,\n                     \"byref() argument must be a ctypes instance, not '%s'\",\n                     Py_TYPE(obj)->tp_name);\n        return NULL;\n    }\n\n    parg = PyCArgObject_new();\n    if (parg == NULL)\n        return NULL;\n\n    parg->tag = 'P';\n    parg->pffi_type = &ffi_type_pointer;\n    Py_INCREF(obj);\n    parg->obj = obj;\n    parg->value.p = (char *)((CDataObject *)obj)->b_ptr + offset;\n    return (PyObject *)parg;\n}\n\nstatic char addressof_doc[] =\n\"addressof(C instance) -> integer\\n\"\n\"Return the address of the C instance internal buffer\";\n\nstatic PyObject *\naddressof(PyObject *self, PyObject *obj)\n{\n    if (CDataObject_Check(obj))\n        return PyLong_FromVoidPtr(((CDataObject *)obj)->b_ptr);\n    PyErr_SetString(PyExc_TypeError,\n                    \"invalid type\");\n    return NULL;\n}\n\nstatic int\nconverter(PyObject *obj, void **address)\n{\n    *address = PyLong_AsVoidPtr(obj);\n    return *address != NULL;\n}\n\nstatic PyObject *\nMy_PyObj_FromPtr(PyObject *self, PyObject *args)\n{\n    PyObject *ob;\n    if (!PyArg_ParseTuple(args, \"O&:PyObj_FromPtr\", converter, &ob))\n        return NULL;\n    Py_INCREF(ob);\n    return ob;\n}\n\nstatic PyObject *\nMy_Py_INCREF(PyObject *self, PyObject *arg)\n{\n    Py_INCREF(arg); /* that's what this function is for */\n    Py_INCREF(arg); /* that for returning it */\n    return arg;\n}\n\nstatic PyObject *\nMy_Py_DECREF(PyObject *self, PyObject *arg)\n{\n    Py_DECREF(arg); /* that's what this function is for */\n    Py_INCREF(arg); /* that's for returning it */\n    return arg;\n}\n\n#ifdef CTYPES_UNICODE\n\nstatic char set_conversion_mode_doc[] =\n\"set_conversion_mode(encoding, errors) -> (previous-encoding, previous-errors)\\n\\\n\\n\\\nSet the encoding and error handling ctypes uses when converting\\n\\\nbetween unicode and strings.  Returns the previous values.\\n\";\n\nstatic PyObject *\nset_conversion_mode(PyObject *self, PyObject *args)\n{\n    char *coding, *mode;\n    PyObject *result;\n\n    if (!PyArg_ParseTuple(args, \"zs:set_conversion_mode\", &coding, &mode))\n        return NULL;\n    result = Py_BuildValue(\"(zz)\", _ctypes_conversion_encoding, _ctypes_conversion_errors);\n    if (coding) {\n        PyMem_Free(_ctypes_conversion_encoding);\n        _ctypes_conversion_encoding = PyMem_Malloc(strlen(coding) + 1);\n        strcpy(_ctypes_conversion_encoding, coding);\n    } else {\n        _ctypes_conversion_encoding = NULL;\n    }\n    PyMem_Free(_ctypes_conversion_errors);\n    _ctypes_conversion_errors = PyMem_Malloc(strlen(mode) + 1);\n    strcpy(_ctypes_conversion_errors, mode);\n    return result;\n}\n#endif\n\nstatic PyObject *\nresize(PyObject *self, PyObject *args)\n{\n    CDataObject *obj;\n    StgDictObject *dict;\n    Py_ssize_t size;\n\n    if (!PyArg_ParseTuple(args,\n                          \"On:resize\",\n                          &obj, &size))\n        return NULL;\n\n    dict = PyObject_stgdict((PyObject *)obj);\n    if (dict == NULL) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"excepted ctypes instance\");\n        return NULL;\n    }\n    if (size < dict->size) {\n        PyErr_Format(PyExc_ValueError,\n                     \"minimum size is %zd\",\n                     dict->size);\n        return NULL;\n    }\n    if (obj->b_needsfree == 0) {\n        PyErr_Format(PyExc_ValueError,\n                     \"Memory cannot be resized because this object doesn't own it\");\n        return NULL;\n    }\n    if (size <= sizeof(obj->b_value)) {\n        /* internal default buffer is large enough */\n        obj->b_size = size;\n        goto done;\n    }\n    if (obj->b_size <= sizeof(obj->b_value)) {\n        /* We are currently using the objects default buffer, but it\n           isn't large enough any more. */\n        void *ptr = PyMem_Malloc(size);\n        if (ptr == NULL)\n            return PyErr_NoMemory();\n        memset(ptr, 0, size);\n        memmove(ptr, obj->b_ptr, obj->b_size);\n        obj->b_ptr = ptr;\n        obj->b_size = size;\n    } else {\n        void * ptr = PyMem_Realloc(obj->b_ptr, size);\n        if (ptr == NULL)\n            return PyErr_NoMemory();\n        obj->b_ptr = ptr;\n        obj->b_size = size;\n    }\n  done:\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nstatic PyObject *\nunpickle(PyObject *self, PyObject *args)\n{\n    PyObject *typ;\n    PyObject *state;\n    PyObject *result;\n    PyObject *tmp;\n\n    if (!PyArg_ParseTuple(args, \"OO\", &typ, &state))\n        return NULL;\n    result = PyObject_CallMethod(typ, \"__new__\", \"O\", typ);\n    if (result == NULL)\n        return NULL;\n    tmp = PyObject_CallMethod(result, \"__setstate__\", \"O\", state);\n    if (tmp == NULL) {\n        Py_DECREF(result);\n        return NULL;\n    }\n    Py_DECREF(tmp);\n    return result;\n}\n\nstatic PyObject *\nPOINTER(PyObject *self, PyObject *cls)\n{\n    PyObject *result;\n    PyTypeObject *typ;\n    PyObject *key;\n    char *buf;\n\n    result = PyDict_GetItem(_ctypes_ptrtype_cache, cls);\n    if (result) {\n        Py_INCREF(result);\n        return result;\n    }\n    if (PyUnicode_CheckExact(cls)) {\n        char *name = _PyUnicode_AsString(cls);\n        buf = alloca(strlen(name) + 3 + 1);\n        sprintf(buf, \"LP_%s\", name);\n        result = PyObject_CallFunction((PyObject *)Py_TYPE(&PyCPointer_Type),\n                                       \"s(O){}\",\n                                       buf,\n                                       &PyCPointer_Type);\n        if (result == NULL)\n            return result;\n        key = PyLong_FromVoidPtr(result);\n    } else if (PyType_Check(cls)) {\n        typ = (PyTypeObject *)cls;\n        buf = alloca(strlen(typ->tp_name) + 3 + 1);\n        sprintf(buf, \"LP_%s\", typ->tp_name);\n        result = PyObject_CallFunction((PyObject *)Py_TYPE(&PyCPointer_Type),\n                                       \"s(O){sO}\",\n                                       buf,\n                                       &PyCPointer_Type,\n                                       \"_type_\", cls);\n        if (result == NULL)\n            return result;\n        Py_INCREF(cls);\n        key = cls;\n    } else {\n        PyErr_SetString(PyExc_TypeError, \"must be a ctypes type\");\n        return NULL;\n    }\n    if (-1 == PyDict_SetItem(_ctypes_ptrtype_cache, key, result)) {\n        Py_DECREF(result);\n        Py_DECREF(key);\n        return NULL;\n    }\n    Py_DECREF(key);\n    return result;\n}\n\nstatic PyObject *\npointer(PyObject *self, PyObject *arg)\n{\n    PyObject *result;\n    PyObject *typ;\n\n    typ = PyDict_GetItem(_ctypes_ptrtype_cache, (PyObject *)Py_TYPE(arg));\n    if (typ)\n        return PyObject_CallFunctionObjArgs(typ, arg, NULL);\n    typ = POINTER(NULL, (PyObject *)Py_TYPE(arg));\n    if (typ == NULL)\n                    return NULL;\n    result = PyObject_CallFunctionObjArgs(typ, arg, NULL);\n    Py_DECREF(typ);\n    return result;\n}\n\nstatic PyObject *\nbuffer_info(PyObject *self, PyObject *arg)\n{\n    StgDictObject *dict = PyType_stgdict(arg);\n    PyObject *shape;\n    Py_ssize_t i;\n\n    if (dict == NULL)\n        dict = PyObject_stgdict(arg);\n    if (dict == NULL) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"not a ctypes type or object\");\n        return NULL;\n    }\n    shape = PyTuple_New(dict->ndim);\n    if (shape == NULL)\n        return NULL;\n    for (i = 0; i < (int)dict->ndim; ++i)\n        PyTuple_SET_ITEM(shape, i, PyLong_FromSsize_t(dict->shape[i]));\n\n    if (PyErr_Occurred()) {\n        Py_DECREF(shape);\n        return NULL;\n    }\n    return Py_BuildValue(\"siN\", dict->format, dict->ndim, shape);\n}\n\nPyMethodDef _ctypes_module_methods[] = {\n    {\"get_errno\", get_errno, METH_NOARGS},\n    {\"set_errno\", set_errno, METH_VARARGS},\n    {\"POINTER\", POINTER, METH_O },\n    {\"pointer\", pointer, METH_O },\n    {\"_unpickle\", unpickle, METH_VARARGS },\n    {\"buffer_info\", buffer_info, METH_O, \"Return buffer interface information\"},\n    {\"resize\", resize, METH_VARARGS, \"Resize the memory buffer of a ctypes instance\"},\n#ifdef CTYPES_UNICODE\n    {\"set_conversion_mode\", set_conversion_mode, METH_VARARGS, set_conversion_mode_doc},\n#endif\n#ifdef MS_WIN32\n    {\"get_last_error\", get_last_error, METH_NOARGS},\n    {\"set_last_error\", set_last_error, METH_VARARGS},\n    {\"CopyComPointer\", copy_com_pointer, METH_VARARGS, copy_com_pointer_doc},\n    {\"FormatError\", format_error, METH_VARARGS, format_error_doc},\n    {\"LoadLibrary\", load_library, METH_VARARGS, load_library_doc},\n    {\"FreeLibrary\", free_library, METH_VARARGS, free_library_doc},\n    {\"call_commethod\", call_commethod, METH_VARARGS },\n    {\"_check_HRESULT\", check_hresult, METH_VARARGS},\n#else\n    {\"dlopen\", py_dl_open, METH_VARARGS,\n     \"dlopen(name, flag={RTLD_GLOBAL|RTLD_LOCAL}) open a shared library\"},\n    {\"dlclose\", py_dl_close, METH_VARARGS, \"dlclose a library\"},\n    {\"dlsym\", py_dl_sym, METH_VARARGS, \"find symbol in shared library\"},\n#endif\n    {\"alignment\", align_func, METH_O, alignment_doc},\n    {\"sizeof\", sizeof_func, METH_O, sizeof_doc},\n    {\"byref\", byref, METH_VARARGS, byref_doc},\n    {\"addressof\", addressof, METH_O, addressof_doc},\n    {\"call_function\", call_function, METH_VARARGS },\n    {\"call_cdeclfunction\", call_cdeclfunction, METH_VARARGS },\n    {\"PyObj_FromPtr\", My_PyObj_FromPtr, METH_VARARGS },\n    {\"Py_INCREF\", My_Py_INCREF, METH_O },\n    {\"Py_DECREF\", My_Py_DECREF, METH_O },\n    {NULL,      NULL}        /* Sentinel */\n};\n\n/*\n Local Variables:\n compile-command: \"cd .. && python setup.py -q build -g && python setup.py -q build install --home ~\"\n End:\n*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_ctypes/darwin/dlfcn.h": "/*\nCopyright (c) 2002 Jorge Acereda  <jacereda@users.sourceforge.net> &\n                   Peter O'Gorman <ogorman@users.sourceforge.net>\n                   \nPortions may be copyright others, see the AUTHORS file included with this\ndistribution.\n\nMaintained by Peter O'Gorman <ogorman@users.sourceforge.net>\n\nBug Reports and other queries should go to <ogorman@users.sourceforge.net>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n#ifndef _DLFCN_H_\n#define _DLFCN_H_\n\n#include <AvailabilityMacros.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/*\n * Structure filled in by dladdr().\n */\n\ntypedef struct dl_info {\n        const char      *dli_fname;     /* Pathname of shared object */\n        void            *dli_fbase;     /* Base address of shared object */\n        const char      *dli_sname;     /* Name of nearest symbol */\n        void            *dli_saddr;     /* Address of nearest symbol */\n} Dl_info;\n\n\n#if MAC_OS_X_VERSION_MIN_REQUIRED <= MAC_OS_X_VERSION_10_2\n#warning CTYPES_DARWIN_DLFCN\n#define CTYPES_DARWIN_DLFCN\nextern void * (*ctypes_dlopen)(const char *path, int mode);\nextern void * (*ctypes_dlsym)(void * handle, const char *symbol);\nextern const char * (*ctypes_dlerror)(void);\nextern int (*ctypes_dlclose)(void * handle);\nextern int (*ctypes_dladdr)(const void *, Dl_info *);\n#else\nextern void * dlopen(const char *path, int mode);\nextern void * dlsym(void * handle, const char *symbol);\nextern const char * dlerror(void);\nextern int dlclose(void * handle);\nextern int dladdr(const void *, Dl_info *);\n#endif\n\n#define RTLD_LAZY\t0x1\n#define RTLD_NOW\t0x2\n#define RTLD_LOCAL\t0x4\n#define RTLD_GLOBAL\t0x8\n#define RTLD_NOLOAD\t0x10\n#define RTLD_NODELETE\t0x80\n\n/* These are from the Mac OS X 10.4 headers */\n#define RTLD_NEXT       ((void *) -1)   /* Search subsequent objects. */\n#define RTLD_DEFAULT    ((void *) -2)   /* Use default search algorithm. */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* _DLFCN_H_ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_ctypes/darwin/dlfcn_simple.c": "/*\nCopyright (c) 2002 Peter O'Gorman <ogorman@users.sourceforge.net>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n/* Just to prove that it isn't that hard to add Mac calls to your code :)\n   This works with pretty much everything, including kde3 xemacs and the gimp,\n   I'd guess that it'd work in at least 95% of cases, use this as your starting\n   point, rather than the mess that is dlfcn.c, assuming that your code does not\n   require ref counting or symbol lookups in dependent libraries\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <stdarg.h>\n#include <limits.h>\n#include <mach-o/dyld.h>\n#include <AvailabilityMacros.h>\n#include \"dlfcn.h\"\n\n#ifdef CTYPES_DARWIN_DLFCN\n\n#define ERR_STR_LEN 256\n\n#ifndef MAC_OS_X_VERSION_10_3\n#define MAC_OS_X_VERSION_10_3 1030\n#endif\n\n#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_3\n#define DARWIN_HAS_DLOPEN\nextern void * dlopen(const char *path, int mode) __attribute__((weak_import));\nextern void * dlsym(void * handle, const char *symbol) __attribute__((weak_import));\nextern const char * dlerror(void) __attribute__((weak_import));\nextern int dlclose(void * handle) __attribute__((weak_import));\nextern int dladdr(const void *, Dl_info *) __attribute__((weak_import));\n#endif /* MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_3 */\n\n#ifndef DARWIN_HAS_DLOPEN\n#define dlopen darwin_dlopen\n#define dlsym darwin_dlsym\n#define dlerror darwin_dlerror\n#define dlclose darwin_dlclose\n#define dladdr darwin_dladdr\n#endif\n\nvoid * (*ctypes_dlopen)(const char *path, int mode);\nvoid * (*ctypes_dlsym)(void * handle, const char *symbol);\nconst char * (*ctypes_dlerror)(void);\nint (*ctypes_dlclose)(void * handle);\nint (*ctypes_dladdr)(const void *, Dl_info *);\n\n#if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_3\n/* Mac OS X 10.3+ has dlopen, so strip all this dead code to avoid warnings */\n\nstatic void *dlsymIntern(void *handle, const char *symbol);\n\nstatic const char *error(int setget, const char *str, ...);\n\n/* Set and get the error string for use by dlerror */\nstatic const char *error(int setget, const char *str, ...)\n{\n    static char errstr[ERR_STR_LEN];\n    static int err_filled = 0;\n    const char *retval;\n    va_list arg;\n    if (setget == 0)\n    {\n        va_start(arg, str);\n        strncpy(errstr, \"dlcompat: \", ERR_STR_LEN);\n        vsnprintf(errstr + 10, ERR_STR_LEN - 10, str, arg);\n        va_end(arg);\n        err_filled = 1;\n        retval = NULL;\n    }\n    else\n    {\n        if (!err_filled)\n            retval = NULL;\n        else\n            retval = errstr;\n        err_filled = 0;\n    }\n    return retval;\n}\n\n/* darwin_dlopen */\nstatic void *darwin_dlopen(const char *path, int mode)\n{\n    void *module = 0;\n    NSObjectFileImage ofi = 0;\n    NSObjectFileImageReturnCode ofirc;\n\n    /* If we got no path, the app wants the global namespace, use -1 as the marker\n       in this case */\n    if (!path)\n        return (void *)-1;\n\n    /* Create the object file image, works for things linked with the -bundle arg to ld */\n    ofirc = NSCreateObjectFileImageFromFile(path, &ofi);\n    switch (ofirc)\n    {\n        case NSObjectFileImageSuccess:\n            /* It was okay, so use NSLinkModule to link in the image */\n            module = NSLinkModule(ofi, path,\n                                                      NSLINKMODULE_OPTION_RETURN_ON_ERROR\n                                                      | (mode & RTLD_GLOBAL) ? 0 : NSLINKMODULE_OPTION_PRIVATE\n                                                      | (mode & RTLD_LAZY) ? 0 : NSLINKMODULE_OPTION_BINDNOW);\n            NSDestroyObjectFileImage(ofi);\n            break;\n        case NSObjectFileImageInappropriateFile:\n            /* It may have been a dynamic library rather than a bundle, try to load it */\n            module = (void *)NSAddImage(path, NSADDIMAGE_OPTION_RETURN_ON_ERROR);\n            break;\n        default:\n            /* God knows what we got */\n            error(0, \"Can not open \\\"%s\\\"\", path);\n            return 0;\n    }\n    if (!module)\n        error(0, \"Can not open \\\"%s\\\"\", path);\n    return module;\n\n}\n\n/* dlsymIntern is used by dlsym to find the symbol */\nstatic void *dlsymIntern(void *handle, const char *symbol)\n{\n    NSSymbol nssym = 0;\n    /* If the handle is -1, if is the app global context */\n    if (handle == (void *)-1)\n    {\n        /* Global context, use NSLookupAndBindSymbol */\n        if (NSIsSymbolNameDefined(symbol))\n        {\n            nssym = NSLookupAndBindSymbol(symbol);\n        }\n\n    }\n    /* Now see if the handle is a struch mach_header* or not, use NSLookupSymbol in image\n       for libraries, and NSLookupSymbolInModule for bundles */\n    else\n    {\n        /* Check for both possible magic numbers depending on x86/ppc byte order */\n        if ((((struct mach_header *)handle)->magic == MH_MAGIC) ||\n            (((struct mach_header *)handle)->magic == MH_CIGAM))\n        {\n            if (NSIsSymbolNameDefinedInImage((struct mach_header *)handle, symbol))\n            {\n                nssym = NSLookupSymbolInImage((struct mach_header *)handle,\n                                                                          symbol,\n                                                                          NSLOOKUPSYMBOLINIMAGE_OPTION_BIND\n                                                                          | NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR);\n            }\n\n        }\n        else\n        {\n            nssym = NSLookupSymbolInModule(handle, symbol);\n        }\n    }\n    if (!nssym)\n    {\n        error(0, \"Symbol \\\"%s\\\" Not found\", symbol);\n        return NULL;\n    }\n    return NSAddressOfSymbol(nssym);\n}\n\nstatic const char *darwin_dlerror(void)\n{\n    return error(1, (char *)NULL);\n}\n\nstatic int darwin_dlclose(void *handle)\n{\n    if ((((struct mach_header *)handle)->magic == MH_MAGIC) ||\n        (((struct mach_header *)handle)->magic == MH_CIGAM))\n    {\n        error(0, \"Can't remove dynamic libraries on darwin\");\n        return 0;\n    }\n    if (!NSUnLinkModule(handle, 0))\n    {\n        error(0, \"unable to unlink module %s\", NSNameOfModule(handle));\n        return 1;\n    }\n    return 0;\n}\n\n\n/* dlsym, prepend the underscore and call dlsymIntern */\nstatic void *darwin_dlsym(void *handle, const char *symbol)\n{\n    static char undersym[257];          /* Saves calls to malloc(3) */\n    int sym_len = strlen(symbol);\n    void *value = NULL;\n    char *malloc_sym = NULL;\n\n    if (sym_len < 256)\n    {\n        snprintf(undersym, 256, \"_%s\", symbol);\n        value = dlsymIntern(handle, undersym);\n    }\n    else\n    {\n        malloc_sym = malloc(sym_len + 2);\n        if (malloc_sym)\n        {\n            sprintf(malloc_sym, \"_%s\", symbol);\n            value = dlsymIntern(handle, malloc_sym);\n            free(malloc_sym);\n        }\n        else\n        {\n            error(0, \"Unable to allocate memory\");\n        }\n    }\n    return value;\n}\n\nstatic int darwin_dladdr(const void *handle, Dl_info *info) {\n    return 0;\n}\n#endif /* MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_3 */\n\n#if __GNUC__ < 4\n#pragma CALL_ON_LOAD ctypes_dlfcn_init\n#else\nstatic void __attribute__ ((constructor)) ctypes_dlfcn_init(void);\nstatic\n#endif\nvoid ctypes_dlfcn_init(void) {\n    if (dlopen != NULL) {\n        ctypes_dlsym = dlsym;\n        ctypes_dlopen = dlopen;\n        ctypes_dlerror = dlerror;\n        ctypes_dlclose = dlclose;\n        ctypes_dladdr = dladdr;\n    } else {\n#if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_3\n        ctypes_dlsym = darwin_dlsym;\n        ctypes_dlopen = darwin_dlopen;\n        ctypes_dlerror = darwin_dlerror;\n        ctypes_dlclose = darwin_dlclose;\n        ctypes_dladdr = darwin_dladdr;\n#endif /* MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_3 */\n    }\n}\n\n#endif /* CTYPES_DARWIN_DLFCN */\n",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_ctypes/libffi/aclocal.m4": "# generated automatically by aclocal 1.10 -*- Autoconf -*-\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n# 2005, 2006  Free Software Foundation, Inc.\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE.\n\nm4_if(m4_PACKAGE_VERSION, [2.61],,\n[m4_fatal([this file was generated for autoconf 2.61.\nYou have another version of autoconf.  If you want to use that,\nyou should regenerate the build system entirely.], [63])])\n\n# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n\n# serial 51 AC_PROG_LIBTOOL\n\n\n# AC_PROVIDE_IFELSE(MACRO-NAME, IF-PROVIDED, IF-NOT-PROVIDED)\n# -----------------------------------------------------------\n# If this macro is not defined by Autoconf, define it here.\nm4_ifdef([AC_PROVIDE_IFELSE],\n         [],\n         [m4_define([AC_PROVIDE_IFELSE],\n\t         [m4_ifdef([AC_PROVIDE_$1],\n\t\t           [$2], [$3])])])\n\n\n# AC_PROG_LIBTOOL\n# ---------------\nAC_DEFUN([AC_PROG_LIBTOOL],\n[AC_REQUIRE([_AC_PROG_LIBTOOL])dnl\ndnl If AC_PROG_CXX has already been expanded, run AC_LIBTOOL_CXX\ndnl immediately, otherwise, hook it in at the end of AC_PROG_CXX.\n  AC_PROVIDE_IFELSE([AC_PROG_CXX],\n    [AC_LIBTOOL_CXX],\n    [define([AC_PROG_CXX], defn([AC_PROG_CXX])[AC_LIBTOOL_CXX\n  ])])\ndnl And a similar setup for Fortran 77 support\n  AC_PROVIDE_IFELSE([AC_PROG_F77],\n    [AC_LIBTOOL_F77],\n    [define([AC_PROG_F77], defn([AC_PROG_F77])[AC_LIBTOOL_F77\n])])\n\ndnl Quote A][M_PROG_GCJ so that aclocal doesn't bring it in needlessly.\ndnl If either AC_PROG_GCJ or A][M_PROG_GCJ have already been expanded, run\ndnl AC_LIBTOOL_GCJ immediately, otherwise, hook it in at the end of both.\n  AC_PROVIDE_IFELSE([AC_PROG_GCJ],\n    [AC_LIBTOOL_GCJ],\n    [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n      [AC_LIBTOOL_GCJ],\n      [AC_PROVIDE_IFELSE([LT_AC_PROG_GCJ],\n\t[AC_LIBTOOL_GCJ],\n      [ifdef([AC_PROG_GCJ],\n\t     [define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[AC_LIBTOOL_GCJ])])\n       ifdef([A][M_PROG_GCJ],\n\t     [define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[AC_LIBTOOL_GCJ])])\n       ifdef([LT_AC_PROG_GCJ],\n\t     [define([LT_AC_PROG_GCJ],\n\t\tdefn([LT_AC_PROG_GCJ])[AC_LIBTOOL_GCJ])])])])\n])])# AC_PROG_LIBTOOL\n\n\n# _AC_PROG_LIBTOOL\n# ----------------\nAC_DEFUN([_AC_PROG_LIBTOOL],\n[AC_REQUIRE([AC_LIBTOOL_SETUP])dnl\nAC_BEFORE([$0],[AC_LIBTOOL_CXX])dnl\nAC_BEFORE([$0],[AC_LIBTOOL_F77])dnl\nAC_BEFORE([$0],[AC_LIBTOOL_GCJ])dnl\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ac_aux_dir/ltmain.sh\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n# Prevent multiple expansion\ndefine([AC_PROG_LIBTOOL], [])\n])# _AC_PROG_LIBTOOL\n\n\n# AC_LIBTOOL_SETUP\n# ----------------\nAC_DEFUN([AC_LIBTOOL_SETUP],\n[AC_PREREQ(2.50)dnl\nAC_REQUIRE([AC_ENABLE_SHARED])dnl\nAC_REQUIRE([AC_ENABLE_STATIC])dnl\nAC_REQUIRE([AC_ENABLE_FAST_INSTALL])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_LD])dnl\nAC_REQUIRE([AC_PROG_LD_RELOAD_FLAG])dnl\nAC_REQUIRE([AC_PROG_NM])dnl\n\nAC_REQUIRE([AC_PROG_LN_S])dnl\nAC_REQUIRE([AC_DEPLIBS_CHECK_METHOD])dnl\n# Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\nAC_REQUIRE([AC_OBJEXT])dnl\nAC_REQUIRE([AC_EXEEXT])dnl\ndnl\n\nAC_LIBTOOL_SYS_MAX_CMD_LEN\nAC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE\nAC_LIBTOOL_OBJDIR\n\nAC_REQUIRE([_LT_AC_SYS_COMPILER])dnl\n_LT_AC_PROG_ECHO_BACKSLASH\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed='sed -e 1s/^X//'\n[sed_quote_subst='s/\\([\\\\\"\\\\`$\\\\\\\\]\\)/\\\\\\1/g']\n\n# Same as above, but do not quote variable references.\n[double_quote_subst='s/\\([\\\\\"\\\\`\\\\\\\\]\\)/\\\\\\1/g']\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n\n# Constants:\nrm=\"rm -f\"\n\n# Global variables:\ndefault_ofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\nltmain=\"$ac_aux_dir/ltmain.sh\"\nofile=\"$default_ofile\"\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nAC_CHECK_TOOL(AR, ar, false)\nAC_CHECK_TOOL(RANLIB, ranlib, :)\nAC_CHECK_TOOL(STRIP, strip, :)\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$AR\" && AR=ar\ntest -z \"$AR_FLAGS\" && AR_FLAGS=cru\ntest -z \"$AS\" && AS=as\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\ntest -z \"$LD\" && LD=ld\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ntest -z \"$NM\" && NM=nm\ntest -z \"$SED\" && SED=sed\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\ntest -z \"$RANLIB\" && RANLIB=:\ntest -z \"$STRIP\" && STRIP=:\ntest -z \"$ac_objext\" && ac_objext=o\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$oldlib\"\nfi\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    AC_PATH_MAGIC\n  fi\n  ;;\nesac\n\nAC_PROVIDE_IFELSE([AC_LIBTOOL_DLOPEN], enable_dlopen=yes, enable_dlopen=no)\nAC_PROVIDE_IFELSE([AC_LIBTOOL_WIN32_DLL],\nenable_win32_dll=yes, enable_win32_dll=no)\n\nAC_ARG_ENABLE([libtool-lock],\n    [AC_HELP_STRING([--disable-libtool-lock],\n\t[avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\nAC_ARG_WITH([pic],\n    [AC_HELP_STRING([--with-pic],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [pic_mode=\"$withval\"],\n    [pic_mode=default])\ntest -z \"$pic_mode\" && pic_mode=default\n\n# Use C for the default configuration in the libtool script\ntagname=\nAC_LIBTOOL_LANG_C_CONFIG\n_LT_AC_TAGCONFIG\n])# AC_LIBTOOL_SETUP\n\n\n# _LT_AC_SYS_COMPILER\n# -------------------\nAC_DEFUN([_LT_AC_SYS_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_AC_SYS_COMPILER\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nAC_DEFUN([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$echo \"X$cc_temp\" | $Xsed -e 's%.*/%%' -e \"s%^$host_alias-%%\"`\n])\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nAC_DEFUN([_LT_COMPILER_BOILERPLATE],\n[AC_REQUIRE([LT_AC_PROG_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$rm conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nAC_DEFUN([_LT_LINKER_BOILERPLATE],\n[AC_REQUIRE([LT_AC_PROG_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$rm conftest*\n])# _LT_LINKER_BOILERPLATE\n\n\n# _LT_AC_SYS_LIBPATH_AIX\n# ----------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\nAC_DEFUN([_LT_AC_SYS_LIBPATH_AIX],\n[AC_REQUIRE([LT_AC_PROG_SED])dnl\nAC_LINK_IFELSE(AC_LANG_PROGRAM,[\nlt_aix_libpath_sed='\n    /Import File Strings/,/^$/ {\n\t/^0/ {\n\t    s/^0  *\\(.*\\)$/\\1/\n\t    p\n\t}\n    }'\naix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n# Check for a 64-bit object if we didn't find anything.\nif test -z \"$aix_libpath\"; then\n  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\nfi],[])\nif test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n])# _LT_AC_SYS_LIBPATH_AIX\n\n\n# _LT_AC_SHELL_INIT(ARG)\n# ----------------------\nAC_DEFUN([_LT_AC_SHELL_INIT],\n[ifdef([AC_DIVERSION_NOTICE],\n\t     [AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)],\n\t [AC_DIVERT_PUSH(NOTICE)])\n$1\nAC_DIVERT_POP\n])# _LT_AC_SHELL_INIT\n\n\n# _LT_AC_PROG_ECHO_BACKSLASH\n# --------------------------\n# Add some code to the start of the generated configure script which\n# will find an echo command which doesn't interpret backslashes.\nAC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH],\n[_LT_AC_SHELL_INIT([\n# Check that we are running under the correct shell.\nSHELL=${CONFIG_SHELL-/bin/sh}\n\ncase X$ECHO in\nX*--fallback-echo)\n  # Remove one level of quotation (which was required for Make).\n  ECHO=`echo \"$ECHO\" | sed 's,\\\\\\\\\\[$]\\\\[$]0,'[$]0','`\n  ;;\nesac\n\necho=${ECHO-echo}\nif test \"X[$]1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X[$]1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`($echo '\\t') 2>/dev/null`\" = 'X\\t' ; then\n  # Yippee, $echo works!\n  :\nelse\n  # Restart under the correct shell.\n  exec $SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\nfi\n\nif test \"X[$]1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<EOF\n[$]*\nEOF\n  exit 0\nfi\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nif test -z \"$ECHO\"; then\nif test \"X${echo_test_string+set}\" != Xset; then\n# find a string as large as possible, as long as the shell can cope with it\n  for cmd in 'sed 50q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 2q \"[$]0\"' 'echo test'; do\n    # expected sizes: less than 2Kb, 1Kb, 512 bytes, 16 bytes, ...\n    if (echo_test_string=`eval $cmd`) 2>/dev/null &&\n       echo_test_string=`eval $cmd` &&\n       (test \"X$echo_test_string\" = \"X$echo_test_string\") 2>/dev/null\n    then\n      break\n    fi\n  done\nfi\n\nif test \"X`($echo '\\t') 2>/dev/null`\" = 'X\\t' &&\n   echo_testing_string=`($echo \"$echo_test_string\") 2>/dev/null` &&\n   test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n  :\nelse\n  # The Solaris, AIX, and Digital Unix default echo programs unquote\n  # backslashes.  This makes it impossible to quote backslashes using\n  #   echo \"$something\" | sed 's/\\\\/\\\\\\\\/g'\n  #\n  # So, first we look for a working echo in the user's PATH.\n\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for dir in $PATH /usr/ucb; do\n    IFS=\"$lt_save_ifs\"\n    if (test -f $dir/echo || test -f $dir/echo$ac_exeext) &&\n       test \"X`($dir/echo '\\t') 2>/dev/null`\" = 'X\\t' &&\n       echo_testing_string=`($dir/echo \"$echo_test_string\") 2>/dev/null` &&\n       test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n      echo=\"$dir/echo\"\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n\n  if test \"X$echo\" = Xecho; then\n    # We didn't find a better echo, so look for alternatives.\n    if test \"X`(print -r '\\t') 2>/dev/null`\" = 'X\\t' &&\n       echo_testing_string=`(print -r \"$echo_test_string\") 2>/dev/null` &&\n       test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n      # This shell has a builtin print -r that does the trick.\n      echo='print -r'\n    elif (test -f /bin/ksh || test -f /bin/ksh$ac_exeext) &&\n\t test \"X$CONFIG_SHELL\" != X/bin/ksh; then\n      # If we have ksh, try running configure again with it.\n      ORIGINAL_CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n      export ORIGINAL_CONFIG_SHELL\n      CONFIG_SHELL=/bin/ksh\n      export CONFIG_SHELL\n      exec $CONFIG_SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\n    else\n      # Try using printf.\n      echo='printf %s\\n'\n      if test \"X`($echo '\\t') 2>/dev/null`\" = 'X\\t' &&\n\t echo_testing_string=`($echo \"$echo_test_string\") 2>/dev/null` &&\n\t test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t# Cool, printf works\n\t:\n      elif echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = 'X\\t' &&\n\t   echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\tCONFIG_SHELL=$ORIGINAL_CONFIG_SHELL\n\texport CONFIG_SHELL\n\tSHELL=\"$CONFIG_SHELL\"\n\texport SHELL\n\techo=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n      elif echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = 'X\\t' &&\n\t   echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\techo=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n      else\n\t# maybe with a smaller string...\n\tprev=:\n\n\tfor cmd in 'echo test' 'sed 2q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 50q \"[$]0\"'; do\n\t  if (test \"X$echo_test_string\" = \"X`eval $cmd`\") 2>/dev/null\n\t  then\n\t    break\n\t  fi\n\t  prev=\"$cmd\"\n\tdone\n\n\tif test \"$prev\" != 'sed 50q \"[$]0\"'; then\n\t  echo_test_string=`eval $prev`\n\t  export echo_test_string\n\t  exec ${ORIGINAL_CONFIG_SHELL-${CONFIG_SHELL-/bin/sh}} \"[$]0\" ${1+\"[$]@\"}\n\telse\n\t  # Oops.  We lost completely, so just stick with echo.\n\t  echo=echo\n\tfi\n      fi\n    fi\n  fi\nfi\nfi\n\n# Copy echo and quote the copy suitably for passing to libtool from\n# the Makefile, instead of quoting the original, which is used later.\nECHO=$echo\nif test \"X$ECHO\" = \"X$CONFIG_SHELL [$]0 --fallback-echo\"; then\n   ECHO=\"$CONFIG_SHELL \\\\\\$\\[$]0 --fallback-echo\"\nfi\n\nAC_SUBST(ECHO)\n])])# _LT_AC_PROG_ECHO_BACKSLASH\n\n\n# _LT_AC_LOCK\n# -----------\nAC_DEFUN([_LT_AC_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n    [AC_HELP_STRING([--disable-libtool-lock],\n\t[avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n    *ELF-32*)\n      HPUX_IA64_MODE=\"32\"\n      ;;\n    *ELF-64*)\n      HPUX_IA64_MODE=\"64\"\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line __oline__ \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n   if test \"$lt_cv_prog_gnu_ld\" = yes; then\n    case `/usr/bin/file conftest.$ac_objext` in\n    *32-bit*)\n      LD=\"${LD-ld} -melf32bsmip\"\n      ;;\n    *N32*)\n      LD=\"${LD-ld} -melf32bmipn32\"\n      ;;\n    *64-bit*)\n      LD=\"${LD-ld} -melf64bmip\"\n      ;;\n    esac\n   else\n    case `/usr/bin/file conftest.$ac_objext` in\n    *32-bit*)\n      LD=\"${LD-ld} -32\"\n      ;;\n    *N32*)\n      LD=\"${LD-ld} -n32\"\n      ;;\n    *64-bit*)\n      LD=\"${LD-ld} -64\"\n      ;;\n    esac\n   fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|ppc*-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *32-bit*)\n      case $host in\n        x86_64-*kfreebsd*-gnu)\n          LD=\"${LD-ld} -m elf_i386_fbsd\"\n          ;;\n        x86_64-*linux*)\n          LD=\"${LD-ld} -m elf_i386\"\n          ;;\n        ppc64-*linux*|powerpc64-*linux*)\n          LD=\"${LD-ld} -m elf32ppclinux\"\n          ;;\n        s390x-*linux*)\n          LD=\"${LD-ld} -m elf_s390\"\n          ;;\n        sparc64-*linux*)\n          LD=\"${LD-ld} -m elf32_sparc\"\n          ;;\n      esac\n      ;;\n    *64-bit*)\n      libsuff=64\n      case $host in\n        x86_64-*kfreebsd*-gnu)\n          LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n          ;;\n        x86_64-*linux*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        ppc*-*linux*|powerpc*-*linux*)\n          LD=\"${LD-ld} -m elf64ppc\"\n          ;;\n        s390*-*linux*)\n          LD=\"${LD-ld} -m elf64_s390\"\n          ;;\n        sparc*-*linux*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_TRY_LINK([],[],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\nsparc*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*) LD=\"${LD-ld} -m elf64_sparc\" ;;\n      *)    LD=\"${LD-ld} -64\" ;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\nAC_PROVIDE_IFELSE([AC_LIBTOOL_WIN32_DLL],\n[*-*-cygwin* | *-*-mingw* | *-*-pw32*)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\n  ])\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n\n])# _LT_AC_LOCK\n\n\n# AC_LIBTOOL_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([AC_LIBTOOL_COMPILER_OPTION],\n[AC_REQUIRE([LT_AC_PROG_SED])\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n  ifelse([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $echo \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $rm conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    ifelse([$5], , :, [$5])\nelse\n    ifelse([$6], , :, [$6])\nfi\n])# AC_LIBTOOL_COMPILER_OPTION\n\n\n# AC_LIBTOOL_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                          [ACTION-SUCCESS], [ACTION-FAILURE])\n# ------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([AC_LIBTOOL_LINKER_OPTION],\n[AC_REQUIRE([LT_AC_PROG_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $echo \"X$_lt_linker_boilerplate\" | $Xsed -e '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $rm conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    ifelse([$4], , :, [$4])\nelse\n    ifelse([$5], , :, [$5])\nfi\n])# AC_LIBTOOL_LINKER_OPTION\n\n\n# AC_LIBTOOL_SYS_MAX_CMD_LEN\n# --------------------------\nAC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN],\n[# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[ \t]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      while (test \"X\"`$SHELL [$]0 --fallback-echo \"X$teststring\" 2>/dev/null` \\\n\t       = \"XX$teststring\") >/dev/null 2>&1 &&\n\t      new_result=`expr \"X$teststring\" : \".*\" 2>&1` &&\n\t      lt_cv_sys_max_cmd_len=$new_result &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on massive\n      # amounts of additional arguments before passing them to the linker.\n      # It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\n])# AC_LIBTOOL_SYS_MAX_CMD_LEN\n\n\n# _LT_AC_CHECK_DLFCN\n# ------------------\nAC_DEFUN([_LT_AC_CHECK_DLFCN],\n[AC_CHECK_HEADERS(dlfcn.h)dnl\n])# _LT_AC_CHECK_DLFCN\n\n\n# _LT_AC_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                           ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ---------------------------------------------------------------------\nAC_DEFUN([_LT_AC_TRY_DLOPEN_SELF],\n[AC_REQUIRE([_LT_AC_CHECK_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<EOF\n[#line __oline__ \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n#ifdef __cplusplus\nextern \"C\" void exit (int);\n#endif\n\nvoid fnord() { int i=42;}\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else if (dlsym( self,\"_fnord\")) status = $lt_dlneed_uscore;\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n    exit (status);\n}]\nEOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_AC_TRY_DLOPEN_SELF\n\n\n# AC_LIBTOOL_DLOPEN_SELF\n# ----------------------\nAC_DEFUN([AC_LIBTOOL_DLOPEN_SELF],\n[AC_REQUIRE([_LT_AC_CHECK_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n   ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n   ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n   ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-dld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-dld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_AC_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n    \t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_AC_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n])# AC_LIBTOOL_DLOPEN_SELF\n\n\n# AC_LIBTOOL_PROG_CC_C_O([TAGNAME])\n# ---------------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler\nAC_DEFUN([AC_LIBTOOL_PROG_CC_C_O],\n[AC_REQUIRE([LT_AC_PROG_SED])dnl\nAC_REQUIRE([_LT_AC_SYS_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $rm -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $echo \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $rm conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $rm out/ii_files/* && rmdir out/ii_files\n   $rm out/* && rmdir out\n   cd ..\n   rmdir conftest\n   $rm conftest*\n])\n])# AC_LIBTOOL_PROG_CC_C_O\n\n\n# AC_LIBTOOL_SYS_HARD_LINK_LOCKS([TAGNAME])\n# -----------------------------------------\n# Check to see if we can do hard links to lock some files if needed\nAC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS],\n[AC_REQUIRE([_LT_AC_LOCK])dnl\n\nhard_links=\"nottested\"\nif test \"$_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $rm conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n])# AC_LIBTOOL_SYS_HARD_LINK_LOCKS\n\n\n# AC_LIBTOOL_OBJDIR\n# -----------------\nAC_DEFUN([AC_LIBTOOL_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n])# AC_LIBTOOL_OBJDIR\n\n\n# AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH([TAGNAME])\n# ----------------------------------------------\n# Check hardcoding attributes.\nAC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_AC_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)\" || \\\n   test -n \"$_LT_AC_TAGVAR(runpath_var, $1)\" || \\\n   test \"X$_LT_AC_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_AC_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_AC_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_AC_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_AC_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_AC_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_AC_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_AC_TAGVAR(hardcode_action, $1)\" = relink; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n])# AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH\n\n\n# AC_LIBTOOL_SYS_LIB_STRIP\n# ------------------------\nAC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP],\n[striplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | grep \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n   darwin*)\n       if test -n \"$STRIP\" ; then\n         striplib=\"$STRIP -x\"\n         old_striplib=\"$STRIP -S\"\n         AC_MSG_RESULT([yes])\n       else\n  AC_MSG_RESULT([no])\nfi\n       ;;\n   *)\n  AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n])# AC_LIBTOOL_SYS_LIB_STRIP\n\n\n# AC_LIBTOOL_SYS_DYNAMIC_LINKER\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nAC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([LT_AC_PROG_SED])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nm4_if($1,[],[\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n  if echo \"$lt_search_path_spec\" | grep ';' >/dev/null ; then\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`echo \"$lt_search_path_spec\" | $SED -e 's/;/ /g'`\n  else\n    lt_search_path_spec=`echo \"$lt_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n  fi\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`echo $lt_tmp_lt_search_path_spec | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  sys_lib_search_path_spec=`echo $lt_search_path_spec`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix4* | aix5*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | grep yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  library_names_spec='$libname.ixlibrary $libname.a'\n  # Create ${libname}_ixlibrary.a entries in /sys/libs.\n  finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$echo \"X$lib\" | $Xsed -e '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $rm /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$host_os in\n  yes,cygwin* | yes,mingw* | yes,pw32*)\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i;echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $rm \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=\"/usr/lib /lib/w32api /lib /usr/local/lib\"\n      ;;\n    mingw*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=`$CC -print-search-dirs | grep \"^libraries:\" | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n      if echo \"$sys_lib_search_path_spec\" | [grep ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH printed by\n        # mingw gcc, but we are running on Cygwin. Gcc prints its search\n        # path with ; separators, and with drive letters. We can handle the\n        # drive letters (cygwin fileutils understands them), so leave them,\n        # especially as we might pass files found there to a mingw objdump,\n        # which wouldn't understand a cygwinified path. Ahh.\n        sys_lib_search_path_spec=`echo \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`echo \"$sys_lib_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    ;;\n\n  *)\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    ;;\n  esac\n  dynamic_linker='Win32 ld.exe'\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${versuffix}$shared_ext ${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\n  m4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"]) \n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd1*)\n  dynamic_linker=no\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[123]]*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n   hppa*64*)\n     shrext_cmds='.sl'\n     hardcode_into_libs=yes\n     dynamic_linker=\"$host_os dld.sl\"\n     shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n     shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n     library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n     soname_spec='${libname}${release}${shared_ext}$major'\n     sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n     sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n     ;;\n   *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555.\n  postinstall_cmds='chmod 555 $lib'\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[ \t]*hwcap[ \t]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"$sys_lib_dlsearch_path_spec $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | grep __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nnto-qnx*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*) need_version=yes ;;\n    *)                         need_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      export_dynamic_flag_spec='${wl}-Blargedynsym'\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n    shlibpath_overrides_runpath=no\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    shlibpath_overrides_runpath=yes\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\nuts4*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n])# AC_LIBTOOL_SYS_DYNAMIC_LINKER\n\n\n# _LT_AC_TAGCONFIG\n# ----------------\nAC_DEFUN([_LT_AC_TAGCONFIG],\n[AC_REQUIRE([LT_AC_PROG_SED])dnl\nAC_ARG_WITH([tags],\n    [AC_HELP_STRING([--with-tags@<:@=TAGS@:>@],\n        [include additional configurations @<:@automatic@:>@])],\n    [tagnames=\"$withval\"])\n\nif test -f \"$ltmain\" && test -n \"$tagnames\"; then\n  if test ! -f \"${ofile}\"; then\n    AC_MSG_WARN([output file `$ofile' does not exist])\n  fi\n\n  if test -z \"$LTCC\"; then\n    eval \"`$SHELL ${ofile} --config | grep '^LTCC='`\"\n    if test -z \"$LTCC\"; then\n      AC_MSG_WARN([output file `$ofile' does not look like a libtool script])\n    else\n      AC_MSG_WARN([using `LTCC=$LTCC', extracted from `$ofile'])\n    fi\n  fi\n  if test -z \"$LTCFLAGS\"; then\n    eval \"`$SHELL ${ofile} --config | grep '^LTCFLAGS='`\"\n  fi\n\n  # Extract list of available tagged configurations in $ofile.\n  # Note that this assumes the entire list is on one line.\n  available_tags=`grep \"^available_tags=\" \"${ofile}\" | $SED -e 's/available_tags=\\(.*$\\)/\\1/' -e 's/\\\"//g'`\n\n  lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n  for tagname in $tagnames; do\n    IFS=\"$lt_save_ifs\"\n    # Check whether tagname contains only valid characters\n    case `$echo \"X$tagname\" | $Xsed -e 's:[[-_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890,/]]::g'` in\n    \"\") ;;\n    *)  AC_MSG_ERROR([invalid tag name: $tagname])\n\t;;\n    esac\n\n    if grep \"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$\" < \"${ofile}\" > /dev/null\n    then\n      AC_MSG_ERROR([tag name \\\"$tagname\\\" already exists])\n    fi\n\n    # Update the list of available tags.\n    if test -n \"$tagname\"; then\n      echo appending configuration tag \\\"$tagname\\\" to $ofile\n\n      case $tagname in\n      CXX)\n\tif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n\t    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n\t    (test \"X$CXX\" != \"Xg++\"))) ; then\n\t  AC_LIBTOOL_LANG_CXX_CONFIG\n\telse\n\t  tagname=\"\"\n\tfi\n\t;;\n\n      F77)\n\tif test -n \"$F77\" && test \"X$F77\" != \"Xno\"; then\n\t  AC_LIBTOOL_LANG_F77_CONFIG\n\telse\n\t  tagname=\"\"\n\tfi\n\t;;\n\n      GCJ)\n\tif test -n \"$GCJ\" && test \"X$GCJ\" != \"Xno\"; then\n\t  AC_LIBTOOL_LANG_GCJ_CONFIG\n\telse\n\t  tagname=\"\"\n\tfi\n\t;;\n\n      RC)\n\tAC_LIBTOOL_LANG_RC_CONFIG\n\t;;\n\n      *)\n\tAC_MSG_ERROR([Unsupported tag name: $tagname])\n\t;;\n      esac\n\n      # Append the new tag name to the list of available tags.\n      if test -n \"$tagname\" ; then\n      available_tags=\"$available_tags $tagname\"\n    fi\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n\n  # Now substitute the updated list of available tags.\n  if eval \"sed -e 's/^available_tags=.*\\$/available_tags=\\\"$available_tags\\\"/' \\\"$ofile\\\" > \\\"${ofile}T\\\"\"; then\n    mv \"${ofile}T\" \"$ofile\"\n    chmod +x \"$ofile\"\n  else\n    rm -f \"${ofile}T\"\n    AC_MSG_ERROR([unable to update list of available tagged configurations.])\n  fi\nfi\n])# _LT_AC_TAGCONFIG\n\n\n# AC_LIBTOOL_DLOPEN\n# -----------------\n# enable checks for dlopen support\nAC_DEFUN([AC_LIBTOOL_DLOPEN],\n [AC_BEFORE([$0],[AC_LIBTOOL_SETUP])\n])# AC_LIBTOOL_DLOPEN\n\n\n# AC_LIBTOOL_WIN32_DLL\n# --------------------\n# declare package support for building win32 DLLs\nAC_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_BEFORE([$0], [AC_LIBTOOL_SETUP])\n])# AC_LIBTOOL_WIN32_DLL\n\n\n# AC_ENABLE_SHARED([DEFAULT])\n# ---------------------------\n# implement the --enable-shared flag\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nAC_DEFUN([AC_ENABLE_SHARED],\n[define([AC_ENABLE_SHARED_DEFAULT], ifelse($1, no, no, yes))dnl\nAC_ARG_ENABLE([shared],\n    [AC_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]AC_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_shared=]AC_ENABLE_SHARED_DEFAULT)\n])# AC_ENABLE_SHARED\n\n\n# AC_DISABLE_SHARED\n# -----------------\n# set the default shared flag to --disable-shared\nAC_DEFUN([AC_DISABLE_SHARED],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\nAC_ENABLE_SHARED(no)\n])# AC_DISABLE_SHARED\n\n\n# AC_ENABLE_STATIC([DEFAULT])\n# ---------------------------\n# implement the --enable-static flag\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nAC_DEFUN([AC_ENABLE_STATIC],\n[define([AC_ENABLE_STATIC_DEFAULT], ifelse($1, no, no, yes))dnl\nAC_ARG_ENABLE([static],\n    [AC_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]AC_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_static=]AC_ENABLE_STATIC_DEFAULT)\n])# AC_ENABLE_STATIC\n\n\n# AC_DISABLE_STATIC\n# -----------------\n# set the default static flag to --disable-static\nAC_DEFUN([AC_DISABLE_STATIC],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\nAC_ENABLE_STATIC(no)\n])# AC_DISABLE_STATIC\n\n\n# AC_ENABLE_FAST_INSTALL([DEFAULT])\n# ---------------------------------\n# implement the --enable-fast-install flag\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nAC_DEFUN([AC_ENABLE_FAST_INSTALL],\n[define([AC_ENABLE_FAST_INSTALL_DEFAULT], ifelse($1, no, no, yes))dnl\nAC_ARG_ENABLE([fast-install],\n    [AC_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]AC_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_fast_install=]AC_ENABLE_FAST_INSTALL_DEFAULT)\n])# AC_ENABLE_FAST_INSTALL\n\n\n# AC_DISABLE_FAST_INSTALL\n# -----------------------\n# set the default to --disable-fast-install\nAC_DEFUN([AC_DISABLE_FAST_INSTALL],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\nAC_ENABLE_FAST_INSTALL(no)\n])# AC_DISABLE_FAST_INSTALL\n\n\n# AC_LIBTOOL_PICMODE([MODE])\n# --------------------------\n# implement the --with-pic flag\n# MODE is either `yes' or `no'.  If omitted, it defaults to `both'.\nAC_DEFUN([AC_LIBTOOL_PICMODE],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\npic_mode=ifelse($#,1,$1,default)\n])# AC_LIBTOOL_PICMODE\n\n\n# AC_PROG_EGREP\n# -------------\n# This is predefined starting with Autoconf 2.54, so this conditional\n# definition can be removed once we require Autoconf 2.54 or later.\nm4_ifndef([AC_PROG_EGREP], [AC_DEFUN([AC_PROG_EGREP],\n[AC_CACHE_CHECK([for egrep], [ac_cv_prog_egrep],\n   [if echo a | (grep -E '(a|b)') >/dev/null 2>&1\n    then ac_cv_prog_egrep='grep -E'\n    else ac_cv_prog_egrep='egrep'\n    fi])\n EGREP=$ac_cv_prog_egrep\n AC_SUBST([EGREP])\n])])\n\n\n# AC_PATH_TOOL_PREFIX\n# -------------------\n# find a file program which can recognize shared library\nAC_DEFUN([AC_PATH_TOOL_PREFIX],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"ifelse([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\nEOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n])# AC_PATH_TOOL_PREFIX\n\n\n# AC_PATH_MAGIC\n# -------------\n# find a file program which can recognize a shared library\nAC_DEFUN([AC_PATH_MAGIC],\n[AC_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# AC_PATH_MAGIC\n\n\n# AC_PROG_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([AC_PROG_LD],\n[AC_ARG_WITH([gnu-ld],\n    [AC_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])\nAC_REQUIRE([LT_AC_PROG_SED])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`echo $ac_prog| $SED 's%\\\\\\\\%/%g'`\n      while echo $ac_prog | grep \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`echo $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\nAC_PROG_LD_GNU\n])# AC_PROG_LD\n\n\n# AC_PROG_LD_GNU\n# --------------\nAC_DEFUN([AC_PROG_LD_GNU],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# AC_PROG_LD_GNU\n\n\n# AC_PROG_LD_RELOAD_FLAG\n# ----------------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nAC_DEFUN([AC_PROG_LD_RELOAD_FLAG],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n])# AC_PROG_LD_RELOAD_FLAG\n\n\n# AC_DEPLIBS_CHECK_METHOD\n# -----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nAC_DEFUN([AC_DEPLIBS_CHECK_METHOD],\n[AC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix4* | aix5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    lt_cv_deplibs_check_method='file_magic file format pei*-i386(.*architecture: i386)?'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | grep __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF-[0-9][0-9]) shared object file - PA-RISC [0-9].[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]].[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | grep __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\nnto-qnx*)\n  lt_cv_deplibs_check_method=unknown\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n])# AC_DEPLIBS_CHECK_METHOD\n\n\n# AC_PROG_NM\n# ----------\n# find the pathname to a BSD-compatible name lister\nAC_DEFUN([AC_PROG_NM],\n[AC_CACHE_CHECK([for BSD-compatible nm], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  test -z \"$lt_cv_path_NM\" && lt_cv_path_NM=nm\nfi])\nNM=\"$lt_cv_path_NM\"\n])# AC_PROG_NM\n\n\n# AC_CHECK_LIBM\n# -------------\n# check for math library\nAC_DEFUN([AC_CHECK_LIBM],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cygwin* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\n])# AC_CHECK_LIBM\n\n\n# AC_LIBLTDL_CONVENIENCE([DIRECTORY])\n# -----------------------------------\n# sets LIBLTDL to the link flags for the libltdl convenience library and\n# LTDLINCL to the include flags for the libltdl header and adds\n# --enable-ltdl-convenience to the configure arguments.  Note that\n# AC_CONFIG_SUBDIRS is not called here.  If DIRECTORY is not provided,\n# it is assumed to be `libltdl'.  LIBLTDL will be prefixed with\n# '${top_builddir}/' and LTDLINCL will be prefixed with '${top_srcdir}/'\n# (note the single quotes!).  If your package is not flat and you're not\n# using automake, define top_builddir and top_srcdir appropriately in\n# the Makefiles.\nAC_DEFUN([AC_LIBLTDL_CONVENIENCE],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\n  case $enable_ltdl_convenience in\n  no) AC_MSG_ERROR([this package needs a convenience libltdl]) ;;\n  \"\") enable_ltdl_convenience=yes\n      ac_configure_args=\"$ac_configure_args --enable-ltdl-convenience\" ;;\n  esac\n  LIBLTDL='${top_builddir}/'ifelse($#,1,[$1],['libltdl'])/libltdlc.la\n  LTDLINCL='-I${top_srcdir}/'ifelse($#,1,[$1],['libltdl'])\n  # For backwards non-gettext consistent compatibility...\n  INCLTDL=\"$LTDLINCL\"\n])# AC_LIBLTDL_CONVENIENCE\n\n\n# AC_LIBLTDL_INSTALLABLE([DIRECTORY])\n# -----------------------------------\n# sets LIBLTDL to the link flags for the libltdl installable library and\n# LTDLINCL to the include flags for the libltdl header and adds\n# --enable-ltdl-install to the configure arguments.  Note that\n# AC_CONFIG_SUBDIRS is not called here.  If DIRECTORY is not provided,\n# and an installed libltdl is not found, it is assumed to be `libltdl'.\n# LIBLTDL will be prefixed with '${top_builddir}/'# and LTDLINCL with\n# '${top_srcdir}/' (note the single quotes!).  If your package is not\n# flat and you're not using automake, define top_builddir and top_srcdir\n# appropriately in the Makefiles.\n# In the future, this macro may have to be called after AC_PROG_LIBTOOL.\nAC_DEFUN([AC_LIBLTDL_INSTALLABLE],\n[AC_BEFORE([$0],[AC_LIBTOOL_SETUP])dnl\n  AC_CHECK_LIB(ltdl, lt_dlinit,\n  [test x\"$enable_ltdl_install\" != xyes && enable_ltdl_install=no],\n  [if test x\"$enable_ltdl_install\" = xno; then\n     AC_MSG_WARN([libltdl not installed, but installation disabled])\n   else\n     enable_ltdl_install=yes\n   fi\n  ])\n  if test x\"$enable_ltdl_install\" = x\"yes\"; then\n    ac_configure_args=\"$ac_configure_args --enable-ltdl-install\"\n    LIBLTDL='${top_builddir}/'ifelse($#,1,[$1],['libltdl'])/libltdl.la\n    LTDLINCL='-I${top_srcdir}/'ifelse($#,1,[$1],['libltdl'])\n  else\n    ac_configure_args=\"$ac_configure_args --enable-ltdl-install=no\"\n    LIBLTDL=\"-lltdl\"\n    LTDLINCL=\n  fi\n  # For backwards non-gettext consistent compatibility...\n  INCLTDL=\"$LTDLINCL\"\n])# AC_LIBLTDL_INSTALLABLE\n\n\n# AC_LIBTOOL_CXX\n# --------------\n# enable support for C++ libraries\nAC_DEFUN([AC_LIBTOOL_CXX],\n[AC_REQUIRE([_LT_AC_LANG_CXX])\n])# AC_LIBTOOL_CXX\n\n\n# _LT_AC_LANG_CXX\n# ---------------\nAC_DEFUN([_LT_AC_LANG_CXX],\n[AC_REQUIRE([AC_PROG_CXX])\nAC_REQUIRE([_LT_AC_PROG_CXXCPP])\n_LT_AC_SHELL_INIT([tagnames=${tagnames+${tagnames},}CXX])\n])# _LT_AC_LANG_CXX\n\n# _LT_AC_PROG_CXXCPP\n# ------------------\nAC_DEFUN([_LT_AC_PROG_CXXCPP],\n[\nAC_REQUIRE([AC_PROG_CXX])\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nfi\n])# _LT_AC_PROG_CXXCPP\n\n# AC_LIBTOOL_F77\n# --------------\n# enable support for Fortran 77 libraries\nAC_DEFUN([AC_LIBTOOL_F77],\n[AC_REQUIRE([_LT_AC_LANG_F77])\n])# AC_LIBTOOL_F77\n\n\n# _LT_AC_LANG_F77\n# ---------------\nAC_DEFUN([_LT_AC_LANG_F77],\n[AC_REQUIRE([AC_PROG_F77])\n_LT_AC_SHELL_INIT([tagnames=${tagnames+${tagnames},}F77])\n])# _LT_AC_LANG_F77\n\n\n# AC_LIBTOOL_GCJ\n# --------------\n# enable support for GCJ libraries\nAC_DEFUN([AC_LIBTOOL_GCJ],\n[AC_REQUIRE([_LT_AC_LANG_GCJ])\n])# AC_LIBTOOL_GCJ\n\n\n# _LT_AC_LANG_GCJ\n# ---------------\nAC_DEFUN([_LT_AC_LANG_GCJ],\n[AC_PROVIDE_IFELSE([AC_PROG_GCJ],[],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],[],\n    [AC_PROVIDE_IFELSE([LT_AC_PROG_GCJ],[],\n      [ifdef([AC_PROG_GCJ],[AC_REQUIRE([AC_PROG_GCJ])],\n\t [ifdef([A][M_PROG_GCJ],[AC_REQUIRE([A][M_PROG_GCJ])],\n\t   [AC_REQUIRE([A][C_PROG_GCJ_OR_A][M_PROG_GCJ])])])])])])\n_LT_AC_SHELL_INIT([tagnames=${tagnames+${tagnames},}GCJ])\n])# _LT_AC_LANG_GCJ\n\n\n# AC_LIBTOOL_RC\n# -------------\n# enable support for Windows resource files\nAC_DEFUN([AC_LIBTOOL_RC],\n[AC_REQUIRE([LT_AC_PROG_RC])\n_LT_AC_SHELL_INIT([tagnames=${tagnames+${tagnames},}RC])\n])# AC_LIBTOOL_RC\n\n\n# AC_LIBTOOL_LANG_C_CONFIG\n# ------------------------\n# Ensure that the configuration vars for the C compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG], [_LT_AC_LANG_C_CONFIG])\nAC_DEFUN([_LT_AC_LANG_C_CONFIG],\n[lt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\nAC_LIBTOOL_PROG_COMPILER_NO_RTTI($1)\nAC_LIBTOOL_PROG_COMPILER_PIC($1)\nAC_LIBTOOL_PROG_CC_C_O($1)\nAC_LIBTOOL_SYS_HARD_LINK_LOCKS($1)\nAC_LIBTOOL_PROG_LD_SHLIBS($1)\nAC_LIBTOOL_SYS_DYNAMIC_LINKER($1)\nAC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH($1)\nAC_LIBTOOL_SYS_LIB_STRIP\nAC_LIBTOOL_DLOPEN_SELF\n\n# Report which library types will actually be built\nAC_MSG_CHECKING([if libtool supports shared libraries])\nAC_MSG_RESULT([$can_build_shared])\n\nAC_MSG_CHECKING([whether to build shared libraries])\ntest \"$can_build_shared\" = \"no\" && enable_shared=no\n\n# On AIX, shared libraries and static libraries use the same namespace, and\n# are all built from PIC.\ncase $host_os in\naix3*)\n  test \"$enable_shared\" = yes && enable_static=no\n  if test -n \"$RANLIB\"; then\n    archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n    postinstall_cmds='$RANLIB $lib'\n  fi\n  ;;\n\naix4* | aix5*)\n  if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n    test \"$enable_shared\" = yes && enable_static=no\n  fi\n    ;;\nesac\nAC_MSG_RESULT([$enable_shared])\n\nAC_MSG_CHECKING([whether to build static libraries])\n# Make sure either enable_shared or enable_static is yes.\ntest \"$enable_shared\" = yes || enable_static=yes\nAC_MSG_RESULT([$enable_static])\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# AC_LIBTOOL_LANG_C_CONFIG\n\n\n# AC_LIBTOOL_LANG_CXX_CONFIG\n# --------------------------\n# Ensure that the configuration vars for the C compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG], [_LT_AC_LANG_CXX_CONFIG(CXX)])\nAC_DEFUN([_LT_AC_LANG_CXX_CONFIG],\n[AC_LANG_PUSH(C++)\nAC_REQUIRE([AC_PROG_CXX])\nAC_REQUIRE([_LT_AC_PROG_CXXCPP])\n\n_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_AC_TAGVAR(allow_undefined_flag, $1)=\n_LT_AC_TAGVAR(always_export_symbols, $1)=no\n_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\n_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_AC_TAGVAR(hardcode_direct, $1)=no\n_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_AC_TAGVAR(hardcode_minus_L, $1)=no\n_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_AC_TAGVAR(hardcode_automatic, $1)=no\n_LT_AC_TAGVAR(module_cmds, $1)=\n_LT_AC_TAGVAR(module_expsym_cmds, $1)=\n_LT_AC_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_AC_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_AC_TAGVAR(no_undefined_flag, $1)=\n_LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Dependencies to place before and after the object being linked:\n_LT_AC_TAGVAR(predep_objects, $1)=\n_LT_AC_TAGVAR(postdep_objects, $1)=\n_LT_AC_TAGVAR(predeps, $1)=\n_LT_AC_TAGVAR(postdeps, $1)=\n_LT_AC_TAGVAR(compiler_lib_search_path, $1)=\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_LD=$LD\nlt_save_GCC=$GCC\nGCC=$GXX\nlt_save_with_gnu_ld=$with_gnu_ld\nlt_save_path_LD=$lt_cv_path_LD\nif test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n  lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\nelse\n  $as_unset lt_cv_prog_gnu_ld\nfi\nif test -n \"${lt_cv_path_LDCXX+set}\"; then\n  lt_cv_path_LD=$lt_cv_path_LDCXX\nelse\n  $as_unset lt_cv_path_LD\nfi\ntest -z \"${LDCXX+set}\" || LD=$LDCXX\nCC=${CXX-\"c++\"}\ncompiler=$CC\n_LT_AC_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n\n# We don't want -fno-exception wen compiling C++ code, so set the\n# no_builtin_flag separately\nif test \"$GXX\" = yes; then\n  _LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\nelse\n  _LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\nfi\n\nif test \"$GXX\" = yes; then\n  # Set up default GNU C++ configuration\n\n  AC_PROG_LD\n\n  # Check if GNU C++ uses GNU ld as the underlying linker, since the\n  # archiving commands below assume that GNU ld is being used.\n  if test \"$with_gnu_ld\" = yes; then\n    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n    #     investigate it a little bit more. (MM)\n    wlarc='${wl}'\n\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if eval \"`$CC -print-prog-name=ld` --help 2>&1\" | \\\n\tgrep 'no-whole-archive' > /dev/null; then\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    with_gnu_ld=no\n    wlarc=\n\n    # A generic and very simple default shared library creation\n    # command for GNU C++ for the case where it uses the native\n    # linker, instead of GNU ld.  If possible, this setting should\n    # overridden to take advantage of the native linker features on\n    # the platform it is being used on.\n    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n  fi\n\n  # Commands to make compiler produce verbose output that lists\n  # what \"hidden\" libraries, object files and flags are used when\n  # linking a shared library.\n  output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"\\-L\"'\n\nelse\n  GXX=no\n  with_gnu_ld=no\n  wlarc=\nfi\n\n# PORTME: fill in a description of your system's C++ link characteristics\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n_LT_AC_TAGVAR(ld_shlibs, $1)=yes\ncase $host_os in\n  aix3*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  aix4* | aix5*)\n    if test \"$host_cpu\" = ia64; then\n      # On IA64, the linker does run time linking by default, so we don't\n      # have to do anything special.\n      aix_use_runtimelinking=no\n      exp_sym_flag='-Bexport'\n      no_entry_flag=\"\"\n    else\n      aix_use_runtimelinking=no\n\n      # Test if we are trying to use run time linking or normal\n      # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n      # need to do runtime linking.\n      case $host_os in aix4.[[23]]|aix4.[[23]].*|aix5*)\n\tfor ld_flag in $LDFLAGS; do\n\t  case $ld_flag in\n\t  *-brtl*)\n\t    aix_use_runtimelinking=yes\n\t    break\n\t    ;;\n\t  esac\n\tdone\n\t;;\n      esac\n\n      exp_sym_flag='-bexport'\n      no_entry_flag='-bnoentry'\n    fi\n\n    # When large executables or shared objects are built, AIX ld can\n    # have problems creating the table of contents.  If linking a library\n    # or program results in \"error TOC overflow\" add -mminimal-toc to\n    # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n    # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n    _LT_AC_TAGVAR(archive_cmds, $1)=''\n    _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=':'\n    _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\n    if test \"$GXX\" = yes; then\n      case $host_os in aix4.[[012]]|aix4.[[012]].*)\n      # We only want to do this on AIX 4.2 and lower, the check\n      # below for broken collect2 doesn't work under 4.3+\n\tcollect2name=`${CC} -print-prog-name=collect2`\n\tif test -f \"$collect2name\" && \\\n\t   strings \"$collect2name\" | grep resolve_lib_name >/dev/null\n\tthen\n\t  # We have reworked collect2\n\t  :\n\telse\n\t  # We have old collect2\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n\tfi\n\t;;\n      esac\n      shared_flag='-shared'\n      if test \"$aix_use_runtimelinking\" = yes; then\n\tshared_flag=\"$shared_flag \"'${wl}-G'\n      fi\n    else\n      # not using gcc\n      if test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\tshared_flag='-G'\n      else\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag='${wl}-G'\n\telse\n\t  shared_flag='${wl}-bM:SRE'\n\tfi\n      fi\n    fi\n\n    # It seems that -bexpall does not export symbols beginning with\n    # underscore (_), so it is better to generate a list of symbols to export.\n    _LT_AC_TAGVAR(always_export_symbols, $1)=yes\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # Warning - without using the other runtime loading flags (-brtl),\n      # -berok will link without error, but may produce a broken library.\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)='-berok'\n      # Determine the default libpath from the value encoded in an empty executable.\n      _LT_AC_SYS_LIBPATH_AIX\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then echo \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n     else\n      if test \"$host_cpu\" = ia64; then\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n      else\n\t# Determine the default libpath from the value encoded in an empty executable.\n\t_LT_AC_SYS_LIBPATH_AIX\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t# Warning - without using the other run time loading flags,\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_AC_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t# Exported symbols can be pulled into shared objects from archives\n\t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t# This is similar to how AIX traditionally builds its shared libraries.\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n      fi\n    fi\n    ;;\n\n  beos*)\n    if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n      # support --undefined.  This deserves some investigation.  FIXME\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n    else\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    fi\n    ;;\n\n  chorus*)\n    case $cc_basename in\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n\n  cygwin* | mingw* | pw32*)\n    # _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n    # as there is no search path for DLLs.\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n    _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n    _LT_AC_TAGVAR(always_export_symbols, $1)=no\n    _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n    if $LD --help 2>&1 | grep 'auto-import' > /dev/null; then\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      # If the export-symbols file already is a .def file (1st line\n      # is EXPORTS), use it as is; otherwise, prepend...\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\tcp $export_symbols $output_objdir/$soname.def;\n      else\n\techo EXPORTS > $output_objdir/$soname.def;\n\tcat $export_symbols >> $output_objdir/$soname.def;\n      fi~\n      $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n    else\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    fi\n  ;;\n      darwin* | rhapsody*)\n        case $host_os in\n        rhapsody* | darwin1.[[012]])\n         _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-undefined ${wl}suppress'\n         ;;\n       *) # Darwin 1.3 on\n         if test -z ${MACOSX_DEPLOYMENT_TARGET} ; then\n           _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n         else\n           case ${MACOSX_DEPLOYMENT_TARGET} in\n             10.[[012]])\n               _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n               ;;\n             10.*)\n               _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-undefined ${wl}dynamic_lookup'\n               ;;\n           esac\n         fi\n         ;;\n        esac\n      _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_AC_TAGVAR(hardcode_direct, $1)=no\n      _LT_AC_TAGVAR(hardcode_automatic, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=''\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\n    if test \"$GXX\" = yes ; then\n      lt_int_apple_cc_single_mod=no\n      output_verbose_link_cmd='echo'\n      if $CC -dumpspecs 2>&1 | $EGREP 'single_module' >/dev/null ; then\n       lt_int_apple_cc_single_mod=yes\n      fi\n      if test \"X$lt_int_apple_cc_single_mod\" = Xyes ; then\n       _LT_AC_TAGVAR(archive_cmds, $1)='$CC -dynamiclib -single_module $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring'\n      else\n          _LT_AC_TAGVAR(archive_cmds, $1)='$CC -r -keep_private_externs -nostdlib -o ${lib}-master.o $libobjs~$CC -dynamiclib $allow_undefined_flag -o $lib ${lib}-master.o $deplibs $compiler_flags -install_name $rpath/$soname $verstring'\n        fi\n        _LT_AC_TAGVAR(module_cmds, $1)='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n        # Don't fix this by using the ld -exported_symbols_list flag, it doesn't exist in older darwin lds\n          if test \"X$lt_int_apple_cc_single_mod\" = Xyes ; then\n            _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -dynamiclib -single_module $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          else\n            _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -r -keep_private_externs -nostdlib -o ${lib}-master.o $libobjs~$CC -dynamiclib $allow_undefined_flag -o $lib ${lib}-master.o $deplibs $compiler_flags -install_name $rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          fi\n            _LT_AC_TAGVAR(module_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n      else\n      case $cc_basename in\n        xlc*)\n         output_verbose_link_cmd='echo'\n          _LT_AC_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj ${wl}-single_module $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-install_name ${wl}`echo $rpath/$soname` $xlcverstring'\n          _LT_AC_TAGVAR(module_cmds, $1)='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n          # Don't fix this by using the ld -exported_symbols_list flag, it doesn't exist in older darwin lds\n          _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -qmkshrobj ${wl}-single_module $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-install_name ${wl}$rpath/$soname $xlcverstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          _LT_AC_TAGVAR(module_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          ;;\n       *)\n         _LT_AC_TAGVAR(ld_shlibs, $1)=no\n          ;;\n      esac\n      fi\n        ;;\n\n  dgux*)\n    case $cc_basename in\n      ec++*)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      ghcx*)\n\t# Green Hills C++ Compiler\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n  freebsd[[12]]*)\n    # C++ shared libraries reported to be fairly broken before switch to ELF\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  freebsd-elf*)\n    _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n    ;;\n  freebsd* | dragonfly*)\n    # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n    # conventions\n    _LT_AC_TAGVAR(ld_shlibs, $1)=yes\n    ;;\n  gnu*)\n    ;;\n  hpux9*)\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n    _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n    _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t# but as the default\n\t\t\t\t# location of the library.\n\n    case $cc_basename in\n    CC*)\n      # FIXME: insert proper C++ library support\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    aCC*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      #\n      # There doesn't appear to be a way to prevent this compiler from\n      # explicitly linking system object files so we need to strip them\n      # from the output so that they don't get included in the library\n      # dependencies.\n      output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | grep \"[[-]]L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n      ;;\n    *)\n      if test \"$GXX\" = yes; then\n        _LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/$soname~$CC -shared -nostdlib -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n        # FIXME: insert proper C++ library support\n        _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n    ;;\n  hpux10*|hpux11*)\n    if test $with_gnu_ld = no; then\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n      case $host_cpu in\n      hppa*64*|ia64*) ;;\n      *)\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        ;;\n      esac\n    fi\n    case $host_cpu in\n    hppa*64*|ia64*)\n      _LT_AC_TAGVAR(hardcode_direct, $1)=no\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n    *)\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t      # but as the default\n\t\t\t\t\t      # location of the library.\n      ;;\n    esac\n\n    case $cc_basename in\n      CC*)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      aCC*)\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t  ;;\n\tesac\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | grep \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\t;;\n      *)\n\tif test \"$GXX\" = yes; then\n\t  if test $with_gnu_ld = no; then\n\t    case $host_cpu in\n\t    hppa*64*)\n\t      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      ;;\n\t    ia64*)\n\t      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      ;;\n\t    *)\n\t      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      ;;\n\t    esac\n\t  fi\n\telse\n\t  # FIXME: insert proper C++ library support\n\t  _LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n    esac\n    ;;\n  interix[[3-9]]*)\n    _LT_AC_TAGVAR(hardcode_direct, $1)=no\n    _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n    # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n    # Instead, shared libraries are loaded at an image base (0x10000000 by\n    # default) and relocated if they conflict, which is a slow very memory\n    # consuming and fragmenting process.  To avoid this, we pick a random,\n    # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n    # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n    ;;\n  irix5* | irix6*)\n    case $cc_basename in\n      CC*)\n\t# SGI C++\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t# Archives containing C++ object files must be created using\n\t# \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t# necessary to make sure instantiated templates are included\n\t# in the archive.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t;;\n      *)\n\tif test \"$GXX\" = yes; then\n\t  if test \"$with_gnu_ld\" = no; then\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t  else\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` -o $lib'\n\t  fi\n\tfi\n\t_LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\t;;\n    esac\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n    ;;\n  linux* | k*bsd*-gnu)\n    case $cc_basename in\n      KCC*)\n\t# Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t# KCC will only create a shared library if the output file\n\t# ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t# to its proper name (with version) after linking.\n\t_LT_AC_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | grep \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath,$libdir'\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t# Archives containing C++ object files must be created using\n\t# \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t;;\n      icpc*)\n\t# Intel C++\n\twith_gnu_ld=yes\n\t# version 8.0 and above of icpc choke on multiply defined symbols\n\t# if we add $predep_objects and $postdep_objects, however 7.1 and\n\t# earlier do not add the objects themselves.\n\tcase `$CC -V 2>&1` in\n\t*\"Version 7.\"*)\n  \t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n  \t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  ;;\n\t*)  # Version 8.0 or newer\n\t  tmp_idyn=\n\t  case $host_cpu in\n\t    ia64*) tmp_idyn=' -i_dynamic';;\n\t  esac\n  \t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  ;;\n\tesac\n\t_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t;;\n      pgCC*)\n        # Portland Group C++ compiler\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n  \t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n        ;;\n      cxx*)\n\t# Compaq C++\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\trunpath_var=LD_RUN_PATH\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"ld\"`; templist=`echo $templist | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\n\t  # Sun C++ 5.9\n\t  _LT_AC_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\n\t  # Not sure whether something based on\n\t  # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t  # would be better.\n\t  output_verbose_link_cmd='echo'\n\n\t  # Archives containing C++ object files must be created using\n\t  # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t  # necessary to make sure instantiated templates are included\n\t  # in the archive.\n\t  _LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t  ;;\n\tesac\n\t;;\n    esac\n    ;;\n  lynxos*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  m88k*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  mvs*)\n    case $cc_basename in\n      cxx*)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n  netbsd*)\n    if echo __ELF__ | $CC -E - | grep __ELF__ >/dev/null; then\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n      wlarc=\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n    fi\n    # Workaround some broken pre-1.5 toolchains\n    output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n    ;;\n  openbsd2*)\n    # C++ shared libraries are fairly broken\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  openbsd*)\n    if test -f /usr/libexec/ld.so; then\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n      fi\n      output_verbose_link_cmd='echo'\n    else\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    fi\n    ;;\n  osf3*)\n    case $cc_basename in\n      KCC*)\n\t# Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t# KCC will only create a shared library if the output file\n\t# ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t# to its proper name (with version) after linking.\n\t_LT_AC_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Archives containing C++ object files must be created using\n\t# \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\n\t;;\n      RCC*)\n\t# Rational C++ 2.4.1\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      cxx*)\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && echo ${wl}-set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"ld\" | grep -v \"ld:\"`; templist=`echo $templist | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\t;;\n      *)\n\tif test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t  _LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t  # Commands to make compiler produce verbose output that lists\n\t  # what \"hidden\" libraries, object files and flags are used when\n\t  # linking a shared library.\n\t  output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"\\-L\"'\n\n\telse\n\t  # FIXME: insert proper C++ library support\n\t  _LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n    esac\n    ;;\n  osf4* | osf5*)\n    case $cc_basename in\n      KCC*)\n\t# Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t# KCC will only create a shared library if the output file\n\t# ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t# to its proper name (with version) after linking.\n\t_LT_AC_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Archives containing C++ object files must be created using\n\t# the KAI C++ compiler.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs'\n\t;;\n      RCC*)\n\t# Rational C++ 2.4.1\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      cxx*)\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t  echo \"-hidden\">> $lib.exp~\n\t  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname -Wl,-input -Wl,$lib.exp  `test -n \"$verstring\" && echo -set_version\t$verstring` -update_registry ${output_objdir}/so_locations -o $lib~\n\t  $rm $lib.exp'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t# Commands to make compiler produce verbose output that lists\n\t# what \"hidden\" libraries, object files and flags are used when\n\t# linking a shared library.\n\t#\n\t# There doesn't appear to be a way to prevent this compiler from\n\t# explicitly linking system object files so we need to strip them\n\t# from the output so that they don't get included in the library\n\t# dependencies.\n\toutput_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"ld\" | grep -v \"ld:\"`; templist=`echo $templist | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n\t;;\n      *)\n\tif test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t  _LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t  # Commands to make compiler produce verbose output that lists\n\t  # what \"hidden\" libraries, object files and flags are used when\n\t  # linking a shared library.\n\t  output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"\\-L\"'\n\n\telse\n\t  # FIXME: insert proper C++ library support\n\t  _LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n    esac\n    ;;\n  psos*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  sunos4*)\n    case $cc_basename in\n      CC*)\n\t# Sun C++ 4.x\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      lcc*)\n\t# Lucid\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n  solaris*)\n    case $cc_basename in\n      CC*)\n\t# Sun C++ 4.2, 5.x and Centerline C++\n        _LT_AC_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t_LT_AC_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n\t$CC -G${allow_undefined_flag}  ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$rm $lib.exp'\n\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tcase $host_os in\n\t  solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t  *)\n\t    # The compiler driver will combine and reorder linker options,\n\t    # but understands `-z linker_flag'.\n\t    # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t    _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t    ;;\n\tesac\n\t_LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\n\toutput_verbose_link_cmd='echo'\n\n\t# Archives containing C++ object files must be created using\n\t# \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t# necessary to make sure instantiated templates are included\n\t# in the archive.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t;;\n      gcx*)\n\t# Green Hills C++ Compiler\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t# The C++ compiler must be used to create the archive.\n\t_LT_AC_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t;;\n      *)\n\t# GNU C++ compiler with Solaris linker\n\tif test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t  _LT_AC_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t  if $CC --version | grep -v '^2\\.7' > /dev/null; then\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n\t\t$CC -shared -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$rm $lib.exp'\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    output_verbose_link_cmd=\"$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \\\"\\-L\\\"\"\n\t  else\n\t    # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t    # platform.\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n\t\t$CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$rm $lib.exp'\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    output_verbose_link_cmd=\"$CC -G $CFLAGS -v conftest.$objext 2>&1 | grep \\\"\\-L\\\"\"\n\t  fi\n\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t  case $host_os in\n\t  solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t  *)\n\t    _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t    ;;\n\t  esac\n\tfi\n\t;;\n    esac\n    ;;\n  sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n    _LT_AC_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n    _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n    _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n    runpath_var='LD_RUN_PATH'\n\n    case $cc_basename in\n      CC*)\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      *)\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n    esac\n    ;;\n  sysv5* | sco3.2v5* | sco5v6*)\n    # Note: We can NOT use -z defs as we might desire, because we do not\n    # link with -lc, and that would cause any symbols used from libc to\n    # always be unresolved, which means just about no library would\n    # ever link correctly.  If we're not using GNU ld we use -z text\n    # though, which does catch some bad symbols but isn't as heavy-handed\n    # as -z defs.\n    # For security reasons, it is highly recommended that you always\n    # use absolute paths for naming shared libraries, and exclude the\n    # DT_RUNPATH tag from executables and libraries.  But doing so\n    # requires that you compile everything twice, which is a pain.\n    # So that behaviour is only enabled if SCOABSPATH is set to a\n    # non-empty value in the environment.  Most likely only useful for\n    # creating official distributions of packages.\n    # This is a hack until libtool officially supports absolute path\n    # names for shared libraries.\n    _LT_AC_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n    _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n    _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n    _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='`test -z \"$SCOABSPATH\" && echo ${wl}-R,$libdir`'\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=':'\n    _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n    runpath_var='LD_RUN_PATH'\n\n    case $cc_basename in\n      CC*)\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      *)\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n    esac\n    ;;\n  tandem*)\n    case $cc_basename in\n      NCC*)\n\t# NonStop-UX NCC 3.20\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n      *)\n\t# FIXME: insert proper C++ library support\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t;;\n    esac\n    ;;\n  vxworks*)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\n  *)\n    # FIXME: insert proper C++ library support\n    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n    ;;\nesac\nAC_MSG_RESULT([$_LT_AC_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_AC_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_AC_TAGVAR(GCC, $1)=\"$GXX\"\n_LT_AC_TAGVAR(LD, $1)=\"$LD\"\n\nAC_LIBTOOL_POSTDEP_PREDEP($1)\nAC_LIBTOOL_PROG_COMPILER_PIC($1)\nAC_LIBTOOL_PROG_CC_C_O($1)\nAC_LIBTOOL_SYS_HARD_LINK_LOCKS($1)\nAC_LIBTOOL_PROG_LD_SHLIBS($1)\nAC_LIBTOOL_SYS_DYNAMIC_LINKER($1)\nAC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH($1)\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_POP\nCC=$lt_save_CC\nLDCXX=$LD\nLD=$lt_save_LD\nGCC=$lt_save_GCC\nwith_gnu_ldcxx=$with_gnu_ld\nwith_gnu_ld=$lt_save_with_gnu_ld\nlt_cv_path_LDCXX=$lt_cv_path_LD\nlt_cv_path_LD=$lt_save_path_LD\nlt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\nlt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\n])# AC_LIBTOOL_LANG_CXX_CONFIG\n\n# AC_LIBTOOL_POSTDEP_PREDEP([TAGNAME])\n# ------------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nAC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP],[\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nifelse([$1],[],[cat > conftest.$ac_ext <<EOF\nint a;\nvoid foo (void) { a = 0; }\nEOF\n],[$1],[CXX],[cat > conftest.$ac_ext <<EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\nEOF\n],[$1],[F77],[cat > conftest.$ac_ext <<EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\nEOF\n],[$1],[GCJ],[cat > conftest.$ac_ext <<EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\nEOF\n])\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  # The `*' in the case matches for architectures that use `case' in\n  # $output_verbose_cmd can trigger glob expansion during the loop\n  # eval without this substitution.\n  output_verbose_link_cmd=`$echo \"X$output_verbose_link_cmd\" | $Xsed -e \"$no_glob_subst\"`\n\n  for p in `eval $output_verbose_link_cmd`; do\n    case $p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" \\\n\t  || test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       else\n\t prev=\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case $p in\n\t -L* | -R*)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_AC_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_AC_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_AC_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_AC_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_AC_TAGVAR(postdeps, $1)\"; then\n\t   _LT_AC_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_AC_TAGVAR(postdeps, $1)=\"${_LT_AC_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       ;;\n\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_AC_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_AC_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_AC_TAGVAR(predep_objects, $1)=\"$_LT_AC_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_AC_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_AC_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_AC_TAGVAR(postdep_objects, $1)=\"$_LT_AC_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$rm -f confest.$objext\n\n# PORTME: override above test on systems where it is broken\nifelse([$1],[CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_AC_TAGVAR(predep_objects,$1)=\n  _LT_AC_TAGVAR(postdep_objects,$1)=\n  _LT_AC_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n    #\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_AC_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_AC_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_AC_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n])# AC_LIBTOOL_POSTDEP_PREDEP\n\n# AC_LIBTOOL_LANG_F77_CONFIG\n# --------------------------\n# Ensure that the configuration vars for the C compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG], [_LT_AC_LANG_F77_CONFIG(F77)])\nAC_DEFUN([_LT_AC_LANG_F77_CONFIG],\n[AC_REQUIRE([AC_PROG_F77])\nAC_LANG_PUSH(Fortran 77)\n\n_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_AC_TAGVAR(allow_undefined_flag, $1)=\n_LT_AC_TAGVAR(always_export_symbols, $1)=no\n_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\n_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_AC_TAGVAR(hardcode_direct, $1)=no\n_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_AC_TAGVAR(hardcode_minus_L, $1)=no\n_LT_AC_TAGVAR(hardcode_automatic, $1)=no\n_LT_AC_TAGVAR(module_cmds, $1)=\n_LT_AC_TAGVAR(module_expsym_cmds, $1)=\n_LT_AC_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_AC_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_AC_TAGVAR(no_undefined_flag, $1)=\n_LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nCC=${F77-\"f77\"}\ncompiler=$CC\n_LT_AC_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n\nAC_MSG_CHECKING([if libtool supports shared libraries])\nAC_MSG_RESULT([$can_build_shared])\n\nAC_MSG_CHECKING([whether to build shared libraries])\ntest \"$can_build_shared\" = \"no\" && enable_shared=no\n\n# On AIX, shared libraries and static libraries use the same namespace, and\n# are all built from PIC.\ncase $host_os in\naix3*)\n  test \"$enable_shared\" = yes && enable_static=no\n  if test -n \"$RANLIB\"; then\n    archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n    postinstall_cmds='$RANLIB $lib'\n  fi\n  ;;\naix4* | aix5*)\n  if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n    test \"$enable_shared\" = yes && enable_static=no\n  fi\n  ;;\nesac\nAC_MSG_RESULT([$enable_shared])\n\nAC_MSG_CHECKING([whether to build static libraries])\n# Make sure either enable_shared or enable_static is yes.\ntest \"$enable_shared\" = yes || enable_static=yes\nAC_MSG_RESULT([$enable_static])\n\n_LT_AC_TAGVAR(GCC, $1)=\"$G77\"\n_LT_AC_TAGVAR(LD, $1)=\"$LD\"\n\nAC_LIBTOOL_PROG_COMPILER_PIC($1)\nAC_LIBTOOL_PROG_CC_C_O($1)\nAC_LIBTOOL_SYS_HARD_LINK_LOCKS($1)\nAC_LIBTOOL_PROG_LD_SHLIBS($1)\nAC_LIBTOOL_SYS_DYNAMIC_LINKER($1)\nAC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH($1)\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# AC_LIBTOOL_LANG_F77_CONFIG\n\n\n# AC_LIBTOOL_LANG_GCJ_CONFIG\n# --------------------------\n# Ensure that the configuration vars for the C compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG], [_LT_AC_LANG_GCJ_CONFIG(GCJ)])\nAC_DEFUN([_LT_AC_LANG_GCJ_CONFIG],\n[AC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nCC=${GCJ-\"gcj\"}\ncompiler=$CC\n_LT_AC_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_AC_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n\nAC_LIBTOOL_PROG_COMPILER_NO_RTTI($1)\nAC_LIBTOOL_PROG_COMPILER_PIC($1)\nAC_LIBTOOL_PROG_CC_C_O($1)\nAC_LIBTOOL_SYS_HARD_LINK_LOCKS($1)\nAC_LIBTOOL_PROG_LD_SHLIBS($1)\nAC_LIBTOOL_SYS_DYNAMIC_LINKER($1)\nAC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH($1)\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_RESTORE\nCC=\"$lt_save_CC\"\n])# AC_LIBTOOL_LANG_GCJ_CONFIG\n\n\n# AC_LIBTOOL_LANG_RC_CONFIG\n# -------------------------\n# Ensure that the configuration vars for the Windows resource compiler are\n# suitably defined.  Those variables are subsequently used by\n# AC_LIBTOOL_CONFIG to write the compiler configuration to `libtool'.\nAC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG], [_LT_AC_LANG_RC_CONFIG(RC)])\nAC_DEFUN([_LT_AC_LANG_RC_CONFIG],\n[AC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_AC_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_AC_SYS_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nCC=${RC-\"windres\"}\ncompiler=$CC\n_LT_AC_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nAC_LIBTOOL_CONFIG($1)\n\nAC_LANG_RESTORE\nCC=\"$lt_save_CC\"\n])# AC_LIBTOOL_LANG_RC_CONFIG\n\n\n# AC_LIBTOOL_CONFIG([TAGNAME])\n# ----------------------------\n# If TAGNAME is not passed, then create an initial libtool script\n# with a default configuration from the untagged config vars.  Otherwise\n# add code to config.status for appending the configuration named by\n# TAGNAME from the matching tagged config vars.\nAC_DEFUN([AC_LIBTOOL_CONFIG],\n[# The else clause should only fire when bootstrapping the\n# libtool distribution, otherwise you forgot to ship ltmain.sh\n# with your package, and you will get complaints that there are\n# no rules to generate ltmain.sh.\nif test -f \"$ltmain\"; then\n  # See if we are running on zsh, and set the options which allow our commands through\n  # without removal of \\ escapes.\n  if test -n \"${ZSH_VERSION+set}\" ; then\n    setopt NO_GLOB_SUBST\n  fi\n  # Now quote all the things that may contain metacharacters while being\n  # careful not to overquote the AC_SUBSTed values.  We take copies of the\n  # variables and quote the copies for generation of the libtool script.\n  for var in echo old_CC old_CFLAGS AR AR_FLAGS EGREP RANLIB LN_S LTCC LTCFLAGS NM \\\n    SED SHELL STRIP \\\n    libname_spec library_names_spec soname_spec extract_expsyms_cmds \\\n    old_striplib striplib file_magic_cmd finish_cmds finish_eval \\\n    deplibs_check_method reload_flag reload_cmds need_locks \\\n    lt_cv_sys_global_symbol_pipe lt_cv_sys_global_symbol_to_cdecl \\\n    lt_cv_sys_global_symbol_to_c_name_address \\\n    sys_lib_search_path_spec sys_lib_dlsearch_path_spec \\\n    old_postinstall_cmds old_postuninstall_cmds \\\n    _LT_AC_TAGVAR(compiler, $1) \\\n    _LT_AC_TAGVAR(CC, $1) \\\n    _LT_AC_TAGVAR(LD, $1) \\\n    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1) \\\n    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1) \\\n    _LT_AC_TAGVAR(lt_prog_compiler_static, $1) \\\n    _LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) \\\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1) \\\n    _LT_AC_TAGVAR(thread_safe_flag_spec, $1) \\\n    _LT_AC_TAGVAR(whole_archive_flag_spec, $1) \\\n    _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1) \\\n    _LT_AC_TAGVAR(old_archive_cmds, $1) \\\n    _LT_AC_TAGVAR(old_archive_from_new_cmds, $1) \\\n    _LT_AC_TAGVAR(predep_objects, $1) \\\n    _LT_AC_TAGVAR(postdep_objects, $1) \\\n    _LT_AC_TAGVAR(predeps, $1) \\\n    _LT_AC_TAGVAR(postdeps, $1) \\\n    _LT_AC_TAGVAR(compiler_lib_search_path, $1) \\\n    _LT_AC_TAGVAR(archive_cmds, $1) \\\n    _LT_AC_TAGVAR(archive_expsym_cmds, $1) \\\n    _LT_AC_TAGVAR(postinstall_cmds, $1) \\\n    _LT_AC_TAGVAR(postuninstall_cmds, $1) \\\n    _LT_AC_TAGVAR(old_archive_from_expsyms_cmds, $1) \\\n    _LT_AC_TAGVAR(allow_undefined_flag, $1) \\\n    _LT_AC_TAGVAR(no_undefined_flag, $1) \\\n    _LT_AC_TAGVAR(export_symbols_cmds, $1) \\\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1) \\\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1) \\\n    _LT_AC_TAGVAR(hardcode_libdir_separator, $1) \\\n    _LT_AC_TAGVAR(hardcode_automatic, $1) \\\n    _LT_AC_TAGVAR(module_cmds, $1) \\\n    _LT_AC_TAGVAR(module_expsym_cmds, $1) \\\n    _LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1) \\\n    _LT_AC_TAGVAR(fix_srcfile_path, $1) \\\n    _LT_AC_TAGVAR(exclude_expsyms, $1) \\\n    _LT_AC_TAGVAR(include_expsyms, $1); do\n\n    case $var in\n    _LT_AC_TAGVAR(old_archive_cmds, $1) | \\\n    _LT_AC_TAGVAR(old_archive_from_new_cmds, $1) | \\\n    _LT_AC_TAGVAR(archive_cmds, $1) | \\\n    _LT_AC_TAGVAR(archive_expsym_cmds, $1) | \\\n    _LT_AC_TAGVAR(module_cmds, $1) | \\\n    _LT_AC_TAGVAR(module_expsym_cmds, $1) | \\\n    _LT_AC_TAGVAR(old_archive_from_expsyms_cmds, $1) | \\\n    _LT_AC_TAGVAR(export_symbols_cmds, $1) | \\\n    extract_expsyms_cmds | reload_cmds | finish_cmds | \\\n    postinstall_cmds | postuninstall_cmds | \\\n    old_postinstall_cmds | old_postuninstall_cmds | \\\n    sys_lib_search_path_spec | sys_lib_dlsearch_path_spec)\n      # Double-quote double-evaled strings.\n      eval \"lt_$var=\\\\\\\"\\`\\$echo \\\"X\\$$var\\\" | \\$Xsed -e \\\"\\$double_quote_subst\\\" -e \\\"\\$sed_quote_subst\\\" -e \\\"\\$delay_variable_subst\\\"\\`\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_$var=\\\\\\\"\\`\\$echo \\\"X\\$$var\\\" | \\$Xsed -e \\\"\\$sed_quote_subst\\\"\\`\\\\\\\"\"\n      ;;\n    esac\n  done\n\n  case $lt_echo in\n  *'\\[$]0 --fallback-echo\"')\n    lt_echo=`$echo \"X$lt_echo\" | $Xsed -e 's/\\\\\\\\\\\\\\[$]0 --fallback-echo\"[$]/[$]0 --fallback-echo\"/'`\n    ;;\n  esac\n\nifelse([$1], [],\n  [cfgfile=\"${ofile}T\"\n  trap \"$rm \\\"$cfgfile\\\"; exit 1\" 1 2 15\n  $rm -f \"$cfgfile\"\n  AC_MSG_NOTICE([creating $ofile])],\n  [cfgfile=\"$ofile\"])\n\n  cat <<__EOF__ >> \"$cfgfile\"\nifelse([$1], [],\n[#! $SHELL\n\n# `$echo \"$cfgfile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $PROGRAM (GNU $PACKAGE $VERSION$TIMESTAMP)\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n# Free Software Foundation, Inc.\n#\n# This file is part of GNU Libtool:\n# Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\n# A sed program that does not truncate output.\nSED=$lt_SED\n\n# Sed that helps us avoid accidentally triggering echo(1) options like -n.\nXsed=\"$SED -e 1s/^X//\"\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# The names of the tagged configurations supported by this script.\navailable_tags=\n\n# ### BEGIN LIBTOOL CONFIG],\n[# ### BEGIN LIBTOOL TAG CONFIG: $tagname])\n\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n\n# Shell to use when invoking shell scripts.\nSHELL=$lt_SHELL\n\n# Whether or not to build shared libraries.\nbuild_libtool_libs=$enable_shared\n\n# Whether or not to build static libraries.\nbuild_old_libs=$enable_static\n\n# Whether or not to add -lc for building shared libraries.\nbuild_libtool_need_lc=$_LT_AC_TAGVAR(archive_cmds_need_lc, $1)\n\n# Whether or not to disallow shared libs when runtime libs are static\nallow_libtool_libs_with_static_runtimes=$_LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)\n\n# Whether or not to optimize for fast installation.\nfast_install=$enable_fast_install\n\n# The host system.\nhost_alias=$host_alias\nhost=$host\nhost_os=$host_os\n\n# The build system.\nbuild_alias=$build_alias\nbuild=$build\nbuild_os=$build_os\n\n# An echo program that does not interpret backslashes.\necho=$lt_echo\n\n# The archiver.\nAR=$lt_AR\nAR_FLAGS=$lt_AR_FLAGS\n\n# A C compiler.\nLTCC=$lt_LTCC\n\n# LTCC compiler flags.\nLTCFLAGS=$lt_LTCFLAGS\n\n# A language-specific compiler.\nCC=$lt_[]_LT_AC_TAGVAR(compiler, $1)\n\n# Is the compiler the GNU C compiler?\nwith_gcc=$_LT_AC_TAGVAR(GCC, $1)\n\n# An ERE matcher.\nEGREP=$lt_EGREP\n\n# The linker used to build libraries.\nLD=$lt_[]_LT_AC_TAGVAR(LD, $1)\n\n# Whether we need hard or soft links.\nLN_S=$lt_LN_S\n\n# A BSD-compatible nm program.\nNM=$lt_NM\n\n# A symbol stripping program\nSTRIP=$lt_STRIP\n\n# Used to examine libraries when file_magic_cmd begins \"file\"\nMAGIC_CMD=$MAGIC_CMD\n\n# Used on cygwin: DLL creation program.\nDLLTOOL=\"$DLLTOOL\"\n\n# Used on cygwin: object dumper.\nOBJDUMP=\"$OBJDUMP\"\n\n# Used on cygwin: assembler.\nAS=\"$AS\"\n\n# The name of the directory that contains temporary libtool files.\nobjdir=$objdir\n\n# How to create reloadable object files.\nreload_flag=$lt_reload_flag\nreload_cmds=$lt_reload_cmds\n\n# How to pass a linker flag through the compiler.\nwl=$lt_[]_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)\n\n# Object file suffix (normally \"o\").\nobjext=\"$ac_objext\"\n\n# Old archive suffix (normally \"a\").\nlibext=\"$libext\"\n\n# Shared library suffix (normally \".so\").\nshrext_cmds='$shrext_cmds'\n\n# Executable file suffix (normally \"\").\nexeext=\"$exeext\"\n\n# Additional compiler flags for building library objects.\npic_flag=$lt_[]_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)\npic_mode=$pic_mode\n\n# What is the maximum length of a command?\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n\n# Does compiler simultaneously support -c and -o options?\ncompiler_c_o=$lt_[]_LT_AC_TAGVAR(lt_cv_prog_compiler_c_o, $1)\n\n# Must we lock files when doing compilation?\nneed_locks=$lt_need_locks\n\n# Do we need the lib prefix for modules?\nneed_lib_prefix=$need_lib_prefix\n\n# Do we need a version for libraries?\nneed_version=$need_version\n\n# Whether dlopen is supported.\ndlopen_support=$enable_dlopen\n\n# Whether dlopen of programs is supported.\ndlopen_self=$enable_dlopen_self\n\n# Whether dlopen of statically linked programs is supported.\ndlopen_self_static=$enable_dlopen_self_static\n\n# Compiler flag to prevent dynamic linking.\nlink_static_flag=$lt_[]_LT_AC_TAGVAR(lt_prog_compiler_static, $1)\n\n# Compiler flag to turn off builtin functions.\nno_builtin_flag=$lt_[]_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\n\n# Compiler flag to allow reflexive dlopens.\nexport_dynamic_flag_spec=$lt_[]_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)\n\n# Compiler flag to generate shared objects directly from archives.\nwhole_archive_flag_spec=$lt_[]_LT_AC_TAGVAR(whole_archive_flag_spec, $1)\n\n# Compiler flag to generate thread-safe objects.\nthread_safe_flag_spec=$lt_[]_LT_AC_TAGVAR(thread_safe_flag_spec, $1)\n\n# Library versioning type.\nversion_type=$version_type\n\n# Format of library name prefix.\nlibname_spec=$lt_libname_spec\n\n# List of archive names.  First name is the real one, the rest are links.\n# The last name is the one that the linker finds with -lNAME.\nlibrary_names_spec=$lt_library_names_spec\n\n# The coded name of the library, if different from the real name.\nsoname_spec=$lt_soname_spec\n\n# Commands used to build and install an old-style archive.\nRANLIB=$lt_RANLIB\nold_archive_cmds=$lt_[]_LT_AC_TAGVAR(old_archive_cmds, $1)\nold_postinstall_cmds=$lt_old_postinstall_cmds\nold_postuninstall_cmds=$lt_old_postuninstall_cmds\n\n# Create an old-style archive from a shared archive.\nold_archive_from_new_cmds=$lt_[]_LT_AC_TAGVAR(old_archive_from_new_cmds, $1)\n\n# Create a temporary old-style archive to link instead of a shared archive.\nold_archive_from_expsyms_cmds=$lt_[]_LT_AC_TAGVAR(old_archive_from_expsyms_cmds, $1)\n\n# Commands used to build and install a shared archive.\narchive_cmds=$lt_[]_LT_AC_TAGVAR(archive_cmds, $1)\narchive_expsym_cmds=$lt_[]_LT_AC_TAGVAR(archive_expsym_cmds, $1)\npostinstall_cmds=$lt_postinstall_cmds\npostuninstall_cmds=$lt_postuninstall_cmds\n\n# Commands used to build a loadable module (assumed same as above if empty)\nmodule_cmds=$lt_[]_LT_AC_TAGVAR(module_cmds, $1)\nmodule_expsym_cmds=$lt_[]_LT_AC_TAGVAR(module_expsym_cmds, $1)\n\n# Commands to strip libraries.\nold_striplib=$lt_old_striplib\nstriplib=$lt_striplib\n\n# Dependencies to place before the objects being linked to create a\n# shared library.\npredep_objects=$lt_[]_LT_AC_TAGVAR(predep_objects, $1)\n\n# Dependencies to place after the objects being linked to create a\n# shared library.\npostdep_objects=$lt_[]_LT_AC_TAGVAR(postdep_objects, $1)\n\n# Dependencies to place before the objects being linked to create a\n# shared library.\npredeps=$lt_[]_LT_AC_TAGVAR(predeps, $1)\n\n# Dependencies to place after the objects being linked to create a\n# shared library.\npostdeps=$lt_[]_LT_AC_TAGVAR(postdeps, $1)\n\n# The library search path used internally by the compiler when linking\n# a shared library.\ncompiler_lib_search_path=$lt_[]_LT_AC_TAGVAR(compiler_lib_search_path, $1)\n\n# Method to check whether dependent libraries are shared objects.\ndeplibs_check_method=$lt_deplibs_check_method\n\n# Command to use when deplibs_check_method == file_magic.\nfile_magic_cmd=$lt_file_magic_cmd\n\n# Flag that allows shared libraries with undefined symbols to be built.\nallow_undefined_flag=$lt_[]_LT_AC_TAGVAR(allow_undefined_flag, $1)\n\n# Flag that forces no undefined symbols.\nno_undefined_flag=$lt_[]_LT_AC_TAGVAR(no_undefined_flag, $1)\n\n# Commands used to finish a libtool library installation in a directory.\nfinish_cmds=$lt_finish_cmds\n\n# Same as above, but a single script fragment to be evaled but not shown.\nfinish_eval=$lt_finish_eval\n\n# Take the output of nm and produce a listing of raw symbols and C names.\nglobal_symbol_pipe=$lt_lt_cv_sys_global_symbol_pipe\n\n# Transform the output of nm in a proper C declaration\nglobal_symbol_to_cdecl=$lt_lt_cv_sys_global_symbol_to_cdecl\n\n# Transform the output of nm in a C name address pair\nglobal_symbol_to_c_name_address=$lt_lt_cv_sys_global_symbol_to_c_name_address\n\n# This is the shared library runtime path variable.\nrunpath_var=$runpath_var\n\n# This is the shared library path variable.\nshlibpath_var=$shlibpath_var\n\n# Is shlibpath searched before the hard-coded library search path?\nshlibpath_overrides_runpath=$shlibpath_overrides_runpath\n\n# How to hardcode a shared library path into an executable.\nhardcode_action=$_LT_AC_TAGVAR(hardcode_action, $1)\n\n# Whether we should hardcode library paths into libraries.\nhardcode_into_libs=$hardcode_into_libs\n\n# Flag to hardcode \\$libdir into a binary during linking.\n# This must work even if \\$libdir does not exist.\nhardcode_libdir_flag_spec=$lt_[]_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)\n\n# If ld is used when linking, flag to hardcode \\$libdir into\n# a binary during linking. This must work even if \\$libdir does\n# not exist.\nhardcode_libdir_flag_spec_ld=$lt_[]_LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)\n\n# Whether we need a single -rpath flag with a separated argument.\nhardcode_libdir_separator=$lt_[]_LT_AC_TAGVAR(hardcode_libdir_separator, $1)\n\n# Set to yes if using DIR/libNAME${shared_ext} during linking hardcodes DIR into the\n# resulting binary.\nhardcode_direct=$_LT_AC_TAGVAR(hardcode_direct, $1)\n\n# Set to yes if using the -LDIR flag during linking hardcodes DIR into the\n# resulting binary.\nhardcode_minus_L=$_LT_AC_TAGVAR(hardcode_minus_L, $1)\n\n# Set to yes if using SHLIBPATH_VAR=DIR during linking hardcodes DIR into\n# the resulting binary.\nhardcode_shlibpath_var=$_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)\n\n# Set to yes if building a shared library automatically hardcodes DIR into the library\n# and all subsequent libraries and executables linked against it.\nhardcode_automatic=$_LT_AC_TAGVAR(hardcode_automatic, $1)\n\n# Variables whose values should be saved in libtool wrapper scripts and\n# restored at relink time.\nvariables_saved_for_relink=\"$variables_saved_for_relink\"\n\n# Whether libtool must link a program against all its dependency libraries.\nlink_all_deplibs=$_LT_AC_TAGVAR(link_all_deplibs, $1)\n\n# Compile-time system search path for libraries\nsys_lib_search_path_spec=$lt_sys_lib_search_path_spec\n\n# Run-time system search path for libraries\nsys_lib_dlsearch_path_spec=$lt_sys_lib_dlsearch_path_spec\n\n# Fix the shell variable \\$srcfile for the compiler.\nfix_srcfile_path=$lt_fix_srcfile_path\n\n# Set to yes if exported symbols are required.\nalways_export_symbols=$_LT_AC_TAGVAR(always_export_symbols, $1)\n\n# The commands to list exported symbols.\nexport_symbols_cmds=$lt_[]_LT_AC_TAGVAR(export_symbols_cmds, $1)\n\n# The commands to extract the exported symbol list from a shared archive.\nextract_expsyms_cmds=$lt_extract_expsyms_cmds\n\n# Symbols that should not be listed in the preloaded symbols.\nexclude_expsyms=$lt_[]_LT_AC_TAGVAR(exclude_expsyms, $1)\n\n# Symbols that must always be exported.\ninclude_expsyms=$lt_[]_LT_AC_TAGVAR(include_expsyms, $1)\n\nifelse([$1],[],\n[# ### END LIBTOOL CONFIG],\n[# ### END LIBTOOL TAG CONFIG: $tagname])\n\n__EOF__\n\nifelse([$1],[], [\n  case $host_os in\n  aix3*)\n    cat <<\\EOF >> \"$cfgfile\"\n\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\nEOF\n    ;;\n  esac\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" || (rm -f \"$cfgfile\"; exit 1)\n\n  mv -f \"$cfgfile\" \"$ofile\" || \\\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n])\nelse\n  # If there is no Makefile yet, we rely on a make rule to execute\n  # `config.status --recheck' to rerun these tests and create the\n  # libtool script then.\n  ltmain_in=`echo $ltmain | sed -e 's/\\.sh$/.in/'`\n  if test -f \"$ltmain_in\"; then\n    test -f Makefile && make \"$ltmain\"\n  fi\nfi\n])# AC_LIBTOOL_CONFIG\n\n\n# AC_LIBTOOL_PROG_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------------------\nAC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI],\n[AC_REQUIRE([_LT_AC_SYS_COMPILER])dnl\n\n_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  _LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n\n  AC_LIBTOOL_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n])# AC_LIBTOOL_PROG_COMPILER_NO_RTTI\n\n\n# AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE\n# ---------------------------------\nAC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE],\n[AC_REQUIRE([AC_CANONICAL_HOST])\nAC_REQUIRE([LT_AC_PROG_SED])\nAC_REQUIRE([AC_PROG_NM])\nAC_REQUIRE([AC_OBJEXT])\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Transform an extracted symbol line into a proper C declaration\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^. .* \\(.*\\)$/extern int \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (lt_ptr) 0},/p' -e 's/^$symcode \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (lt_ptr) \\&\\2},/p'\"\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*) # Its linker distinguishes data from code symbols\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  lt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n  lt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (lt_ptr) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (lt_ptr) \\&\\2},/p'\"\n  ;;\nlinux* | k*bsd*-gnu)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDGIRSTW]]'\n    lt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n    lt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (lt_ptr) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (lt_ptr) \\&\\2},/p'\"\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`echo 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Try without a prefix undercore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[ \t]]\\($symcode$symcode*\\)[[ \t]][[ \t]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\nEOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| $lt_cv_sys_global_symbol_pipe \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if grep ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif grep ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<EOF > conftest.$ac_ext\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nEOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | grep -v main >> conftest.$ac_ext'\n\n\t  cat <<EOF >> conftest.$ac_ext\n#if defined (__STDC__) && __STDC__\n# define lt_ptr_t void *\n#else\n# define lt_ptr_t char *\n# define const\n#endif\n\n/* The mapping between symbol names and symbols. */\nconst struct {\n  const char *name;\n  lt_ptr_t address;\n}\nlt_preloaded_symbols[[]] =\n{\nEOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (lt_ptr_t) \\&\\2},/\" < \"$nlist\" | grep -v main >> conftest.$ac_ext\n\t  cat <<\\EOF >> conftest.$ac_ext\n  {0, (lt_ptr_t) 0}\n};\n\n#ifdef __cplusplus\n}\n#endif\nEOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_save_LIBS=\"$LIBS\"\n\t  lt_save_CFLAGS=\"$CFLAGS\"\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_AC_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=\"$lt_save_LIBS\"\n\t  CFLAGS=\"$lt_save_CFLAGS\"\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -f conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n]) # AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE\n\n\n# AC_LIBTOOL_PROG_COMPILER_PIC([TAGNAME])\n# ---------------------------------------\nAC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC],\n[_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_AC_TAGVAR(lt_prog_compiler_static, $1)=\n\nAC_MSG_CHECKING([for $compiler option to produce PIC])\n ifelse([$1],[CXX],[\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n    amigaos*)\n      # FIXME: we need at least 68020 code to build shared libraries, but\n      # adding the `-m68020' flag to GCC prevents building anything better,\n      # like `-m68040'.\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n      ;;\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t;;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix4* | aix5*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_AC_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n       darwin*)\n         # PIC is the default on this platform\n         # Common symbols not allowed in MH_DYLIB files\n         case $cc_basename in\n           xlc*)\n           _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-qnocommon'\n           _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n           ;;\n         esac\n       ;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  icpc* | ecpc*)\n\t    # Intel C++\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC*)\n\t    # Portland Group C++ compiler.\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      # FIXME: we need at least 68020 code to build shared libraries, but\n      # adding the `-m68020' flag to GCC prevents building anything better,\n      # like `-m68040'.\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    hpux*)\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    *)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n      darwin*)\n        # PIC is the default on this platform\n        # Common symbols not allowed in MH_DYLIB files\n       case $cc_basename in\n         xlc*)\n         _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-qnocommon'\n         _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n         ;;\n       esac\n       ;;\n\n    mingw* | cygwin* | pw32* | os2*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    newsos6)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    linux* | k*bsd*-gnu)\n      case $cc_basename in\n      icc* | ecc*)\n\t_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      pgcc* | pgf77* | pgf90* | pgf95*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      *)\n        case `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n\t*Sun\\ F*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95*)\n\t_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_AC_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_AC_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\nAC_MSG_RESULT([$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)])\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  AC_LIBTOOL_COMPILER_OPTION([if $compiler PIC flag $_LT_AC_TAGVAR(lt_prog_compiler_pic, $1) works],\n    _LT_AC_TAGVAR(lt_prog_compiler_pic_works, $1),\n    [$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)ifelse([$1],[],[ -DPIC],[ifelse([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_AC_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_AC_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_AC_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)ifelse([$1],[],[ -DPIC],[ifelse([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_AC_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_AC_TAGVAR(lt_prog_compiler_static, $1)\\\"\nAC_LIBTOOL_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_AC_TAGVAR(lt_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_AC_TAGVAR(lt_prog_compiler_static, $1)=])\n])\n\n\n# AC_LIBTOOL_PROG_LD_SHLIBS([TAGNAME])\n# ------------------------------------\n# See if the linker supports building shared libraries.\nAC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS],\n[AC_REQUIRE([LT_AC_PROG_SED])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nifelse([$1],[CXX],[\n  _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  case $host_os in\n  aix4* | aix5*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    if $NM -V 2>&1 | grep 'GNU' > /dev/null; then\n      _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\[$]2 == \"T\") || (\\[$]2 == \"D\") || (\\[$]2 == \"B\")) && ([substr](\\[$]3,1,1) != \".\")) { print \\[$]3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\[$]2 == \"T\") || (\\[$]2 == \"D\") || (\\[$]2 == \"B\")) && ([substr](\\[$]3,1,1) != \".\")) { print \\[$]3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_AC_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n  ;;\n  cygwin* | mingw*)\n    _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;/^.*[[ ]]__nm__/s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n  ;;\n  *)\n    _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  esac\n],[\n  runpath_var=\n  _LT_AC_TAGVAR(allow_undefined_flag, $1)=\n  _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_AC_TAGVAR(archive_cmds, $1)=\n  _LT_AC_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_AC_TAGVAR(old_archive_From_new_cmds, $1)=\n  _LT_AC_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n  _LT_AC_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_AC_TAGVAR(hardcode_direct, $1)=no\n  _LT_AC_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_AC_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_AC_TAGVAR(hardcode_automatic, $1)=no\n  _LT_AC_TAGVAR(module_cmds, $1)=\n  _LT_AC_TAGVAR(module_expsym_cmds, $1)=\n  _LT_AC_TAGVAR(always_export_symbols, $1)=no\n  _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_AC_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_AC_TAGVAR(exclude_expsyms, $1)=\"_GLOBAL_OFFSET_TABLE_\"\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  extract_expsyms_cmds=\n  # Just being paranoid about ensuring that cc_basename is set.\n  _LT_CC_BASENAME([$compiler])\n  case $host_os in\n  cygwin* | mingw* | pw32*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_AC_TAGVAR(ld_shlibs, $1)=yes\n  if test \"$with_gnu_ld\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n    _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | grep 'no-whole-archive' > /dev/null; then\n\t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n      else\n  \t_LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>/dev/null` in\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix3* | aix4* | aix5*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tcat <<EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.9.1, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to modify your PATH\n*** so that a non-GNU linker is found, and then restart.\n\nEOF\n      fi\n      ;;\n\n    amigaos*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/a2ixlibrary.data~$echo \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$echo \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$echo \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$echo \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n\n      # Samuel A. Falvo II <kc5tja@dolphin.openprojects.net> reports\n      # that the semantics of dynamic libraries on AmigaOS, at least up\n      # to version 4, is to share data among multiple programs linked\n      # with the same dynamic library.  Since this doesn't match the\n      # behavior of shared libraries on other platforms, we can't use\n      # them.\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32*)\n      # _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_AC_TAGVAR(always_export_symbols, $1)=no\n      _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/'\\'' -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\n      if $LD --help 2>&1 | grep 'auto-import' > /dev/null; then\n        _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    interix[[3-9]]*)\n      _LT_AC_TAGVAR(hardcode_direct, $1)=no\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | k*bsd*-gnu)\n      if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\ttmp_addflag=\n\tcase $cc_basename,$host_cpu in\n\tpgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95*)\t# Portland Group f77 and f90 compilers\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; $echo \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\t*)\n\t  tmp_sharedflag='-shared' ;;\n\tesac\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n\tif test $supports_anon_versioning = yes; then\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $output_objdir/$libname.ver~\n  cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n  $echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t  $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\tfi\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | grep __ELF__ >/dev/null; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | grep 'BFD 2\\.8' > /dev/null; then\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tcat <<EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\nEOF\n      elif $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\t    _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='`test -z \"$SCOABSPATH\" && echo ${wl}-rpath,$libdir`'\n\t    _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib'\n\t    _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname,\\${SCOABSPATH:+${install_libdir}/}$soname,-retain-symbols-file,$export_symbols -o $lib'\n\t  else\n\t    _LT_AC_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | grep ': supported targets:.* elf' > /dev/null; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_AC_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_AC_TAGVAR(always_export_symbols, $1)=yes\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_AC_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix4* | aix5*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\tif $NM -V 2>&1 | grep 'GNU' > /dev/null; then\n\t  _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\[$]2 == \"T\") || (\\[$]2 == \"D\") || (\\[$]2 == \"B\")) && ([substr](\\[$]3,1,1) != \".\")) { print \\[$]3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_AC_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\[$]2 == \"T\") || (\\[$]2 == \"D\") || (\\[$]2 == \"B\")) && ([substr](\\[$]3,1,1) != \".\")) { print \\[$]3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix5*)\n\t  for ld_flag in $LDFLAGS; do\n  \t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n  \t    aix_use_runtimelinking=yes\n  \t    break\n  \t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_AC_TAGVAR(archive_cmds, $1)=''\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" && \\\n  \t   strings \"$collect2name\" | grep resolve_lib_name >/dev/null\n\t  then\n  \t  # We have reworked collect2\n  \t  :\n\t  else\n  \t  # We have old collect2\n  \t  _LT_AC_TAGVAR(hardcode_direct, $1)=unsupported\n  \t  # It fails to find uninstalled libraries when the uninstalled\n  \t  # path is not listed in the libpath.  Setting hardcode_minus_L\n  \t  # to unsupported forces relinking\n  \t  _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n  \t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  \t  _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n  \t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n  \t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_AC_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)='-berok'\n       # Determine the default libpath from the value encoded in an empty executable.\n       _LT_AC_SYS_LIBPATH_AIX\n       _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then echo \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n       else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_AC_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an empty executable.\n\t _LT_AC_SYS_LIBPATH_AIX\n\t _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_AC_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  # Exported symbols can be pulled into shared objects from archives\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/a2ixlibrary.data~$echo \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$echo \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$echo \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$echo \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      # see comment about different semantics on the GNU ld section\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n\n    bsdi[[45]]*)\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      # Tell ltmain to make .lib files, not .a files.\n      libext=lib\n      # Tell ltmain to make .dll files, not .so files.\n      shrext_cmds=\".dll\"\n      # FIXME: Setting linknames here is a bad hack.\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `echo \"$deplibs\" | $SED -e '\\''s/ -lc$//'\\''` -link -dll~linknames='\n      # The linker will automatically build a .lib file if we build a DLL.\n      _LT_AC_TAGVAR(old_archive_From_new_cmds, $1)='true'\n      # FIXME: Should let the user specify the lib program.\n      _LT_AC_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n      _LT_AC_TAGVAR(fix_srcfile_path, $1)='`cygpath -w \"$srcfile\"`'\n      _LT_AC_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    darwin* | rhapsody*)\n      case $host_os in\n        rhapsody* | darwin1.[[012]])\n         _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-undefined ${wl}suppress'\n         ;;\n       *) # Darwin 1.3 on\n         if test -z ${MACOSX_DEPLOYMENT_TARGET} ; then\n           _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n         else\n           case ${MACOSX_DEPLOYMENT_TARGET} in\n             10.[[012]])\n               _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-flat_namespace ${wl}-undefined ${wl}suppress'\n               ;;\n             10.*)\n               _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-undefined ${wl}dynamic_lookup'\n               ;;\n           esac\n         fi\n         ;;\n      esac\n      _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_AC_TAGVAR(hardcode_direct, $1)=no\n      _LT_AC_TAGVAR(hardcode_automatic, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n      _LT_AC_TAGVAR(whole_archive_flag_spec, $1)=''\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n    if test \"$GCC\" = yes ; then\n    \toutput_verbose_link_cmd='echo'\n        _LT_AC_TAGVAR(archive_cmds, $1)='$CC -dynamiclib $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring'\n      _LT_AC_TAGVAR(module_cmds, $1)='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n      # Don't fix this by using the ld -exported_symbols_list flag, it doesn't exist in older darwin lds\n      _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -dynamiclib $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n      _LT_AC_TAGVAR(module_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    else\n      case $cc_basename in\n        xlc*)\n         output_verbose_link_cmd='echo'\n         _LT_AC_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-install_name ${wl}`echo $rpath/$soname` $xlcverstring'\n         _LT_AC_TAGVAR(module_cmds, $1)='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs$compiler_flags'\n          # Don't fix this by using the ld -exported_symbols_list flag, it doesn't exist in older darwin lds\n         _LT_AC_TAGVAR(archive_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -qmkshrobj $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-install_name ${wl}$rpath/$soname $xlcverstring~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          _LT_AC_TAGVAR(module_expsym_cmds, $1)='sed -e \"s,#.*,,\" -e \"s,^[    ]*,,\" -e \"s,^\\(..*\\),_&,\" < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag  -o $lib -bundle $libobjs $deplibs$compiler_flags~nmedit -s $output_objdir/${libname}-symbols.expsym ${lib}'\n          ;;\n       *)\n         _LT_AC_TAGVAR(ld_shlibs, $1)=no\n          ;;\n      esac\n    fi\n      ;;\n\n    dgux*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    freebsd1*)\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/$soname~$CC -shared -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$rm $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t_LT_AC_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='+b $libdir'\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='-rpath $libdir'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | grep __ELF__ >/dev/null; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_AC_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tif test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_AC_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n        fi\n      else\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_AC_TAGVAR(archive_cmds, $1)='$echo \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$echo \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~$echo DATA >> $output_objdir/$libname.def~$echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~$echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_AC_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -shared${allow_undefined_flag} $libobjs $deplibs $linker_flags -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_AC_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -shared${allow_undefined_flag} $libobjs $deplibs $linker_flags -msym -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; echo \"-hidden\">> $lib.exp~\n\t$LD -shared${allow_undefined_flag} -input $lib.exp $linker_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && echo -set_version $verstring` -update_registry ${output_objdir}/so_locations -o $lib~$rm $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_AC_TAGVAR(no_undefined_flag, $1)=' -z text'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$rm $lib.exp'\n      else\n\twlarc=''\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~$echo \"local: *; };\" >> $lib.exp~\n  \t$LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$rm $lib.exp'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n \t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_AC_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_direct, $1)=yes\n      _LT_AC_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_AC_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_AC_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_AC_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_AC_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_AC_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_AC_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='`test -z \"$SCOABSPATH\" && echo ${wl}-R,$libdir`'\n      _LT_AC_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_AC_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_AC_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_AC_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_AC_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,\\${SCOABSPATH:+${install_libdir}/}$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_AC_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_AC_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n  fi\n])\nAC_MSG_RESULT([$_LT_AC_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_AC_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_AC_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_AC_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_MSG_CHECKING([whether -lc should be explicitly linked in])\n      $rm conftest*\n      echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n      if AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n        soname=conftest\n        lib=conftest\n        libobjs=conftest.$ac_objext\n        deplibs=\n        wl=$_LT_AC_TAGVAR(lt_prog_compiler_wl, $1)\n\tpic_flag=$_LT_AC_TAGVAR(lt_prog_compiler_pic, $1)\n        compiler_flags=-v\n        linker_flags=-v\n        verstring=\n        output_objdir=.\n        libname=conftest\n        lt_save_allow_undefined_flag=$_LT_AC_TAGVAR(allow_undefined_flag, $1)\n        _LT_AC_TAGVAR(allow_undefined_flag, $1)=\n        if AC_TRY_EVAL(_LT_AC_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| grep \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n        then\n\t  _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=no\n        else\n\t  _LT_AC_TAGVAR(archive_cmds_need_lc, $1)=yes\n        fi\n        _LT_AC_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n      else\n        cat conftest.err 1>&5\n      fi\n      $rm conftest*\n      AC_MSG_RESULT([$_LT_AC_TAGVAR(archive_cmds_need_lc, $1)])\n      ;;\n    esac\n  fi\n  ;;\nesac\n])# AC_LIBTOOL_PROG_LD_SHLIBS\n\n\n# _LT_AC_FILE_LTDLL_C\n# -------------------\n# Be careful that the start marker always follows a newline.\nAC_DEFUN([_LT_AC_FILE_LTDLL_C], [\n# /* ltdll.c starts here */\n# #define WIN32_LEAN_AND_MEAN\n# #include <windows.h>\n# #undef WIN32_LEAN_AND_MEAN\n# #include <stdio.h>\n#\n# #ifndef __CYGWIN__\n# #  ifdef __CYGWIN32__\n# #    define __CYGWIN__ __CYGWIN32__\n# #  endif\n# #endif\n#\n# #ifdef __cplusplus\n# extern \"C\" {\n# #endif\n# BOOL APIENTRY DllMain (HINSTANCE hInst, DWORD reason, LPVOID reserved);\n# #ifdef __cplusplus\n# }\n# #endif\n#\n# #ifdef __CYGWIN__\n# #include <cygwin/cygwin_dll.h>\n# DECLARE_CYGWIN_DLL( DllMain );\n# #endif\n# HINSTANCE __hDllInstance_base;\n#\n# BOOL APIENTRY\n# DllMain (HINSTANCE hInst, DWORD reason, LPVOID reserved)\n# {\n#   __hDllInstance_base = hInst;\n#   return TRUE;\n# }\n# /* ltdll.c ends here */\n])# _LT_AC_FILE_LTDLL_C\n\n\n# _LT_AC_TAGVAR(VARNAME, [TAGNAME])\n# ---------------------------------\nAC_DEFUN([_LT_AC_TAGVAR], [ifelse([$2], [], [$1], [$1_$2])])\n\n\n# old names\nAC_DEFUN([AM_PROG_LIBTOOL],   [AC_PROG_LIBTOOL])\nAC_DEFUN([AM_ENABLE_SHARED],  [AC_ENABLE_SHARED($@)])\nAC_DEFUN([AM_ENABLE_STATIC],  [AC_ENABLE_STATIC($@)])\nAC_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\nAC_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\nAC_DEFUN([AM_PROG_LD],        [AC_PROG_LD])\nAC_DEFUN([AM_PROG_NM],        [AC_PROG_NM])\n\n# This is just to silence aclocal about the macro not being used\nifelse([AC_DISABLE_FAST_INSTALL])\n\nAC_DEFUN([LT_AC_PROG_GCJ],\n[AC_CHECK_TOOL(GCJ, gcj, no)\n  test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n  AC_SUBST(GCJFLAGS)\n])\n\nAC_DEFUN([LT_AC_PROG_RC],\n[AC_CHECK_TOOL(RC, windres, no)\n])\n\n\n# Cheap backport of AS_EXECUTABLE_P and required macros\n# from Autoconf 2.59; we should not use $as_executable_p directly.\n\n# _AS_TEST_PREPARE\n# ----------------\nm4_ifndef([_AS_TEST_PREPARE],\n[m4_defun([_AS_TEST_PREPARE],\n[if test -x / >/dev/null 2>&1; then\n  as_executable_p='test -x'\nelse\n  as_executable_p='test -f'\nfi\n])])# _AS_TEST_PREPARE\n\n# AS_EXECUTABLE_P\n# ---------------\n# Check whether a file is executable.\nm4_ifndef([AS_EXECUTABLE_P],\n[m4_defun([AS_EXECUTABLE_P],\n[AS_REQUIRE([_AS_TEST_PREPARE])dnl\n$as_executable_p $1[]dnl\n])])# AS_EXECUTABLE_P\n\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n# LT_AC_PROG_SED\n# --------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nAC_DEFUN([LT_AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if AS_EXECUTABLE_P([\"$as_dir/$lt_ac_prog$ac_exec_ext\"]); then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])\n\n# Copyright (C) 2002, 2003, 2005, 2006  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_AUTOMAKE_VERSION(VERSION)\n# ----------------------------\n# Automake X.Y traces this macro to ensure aclocal.m4 has been\n# generated from the m4 files accompanying Automake X.Y.\n# (This private macro should not be called outside this file.)\nAC_DEFUN([AM_AUTOMAKE_VERSION],\n[am__api_version='1.10'\ndnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to\ndnl require some minimum version.  Point them to the right macro.\nm4_if([$1], [1.10], [],\n      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl\n])\n\n# _AM_AUTOCONF_VERSION(VERSION)\n# -----------------------------\n# aclocal traces this macro to find the Autoconf version.\n# This is a private macro too.  Using m4_define simplifies\n# the logic in aclocal, which can simply ignore this definition.\nm4_define([_AM_AUTOCONF_VERSION], [])\n\n# AM_SET_CURRENT_AUTOMAKE_VERSION\n# -------------------------------\n# Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.\n# This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\nAC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n[AM_AUTOMAKE_VERSION([1.10])dnl\n_AM_AUTOCONF_VERSION(m4_PACKAGE_VERSION)])\n\n# Figure out how to run the assembler.                      -*- Autoconf -*-\n\n# Copyright (C) 2001, 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 5\n\n# AM_PROG_AS\n# ----------\nAC_DEFUN([AM_PROG_AS],\n[# By default we simply use the C compiler to build assembly code.\nAC_REQUIRE([AC_PROG_CC])\ntest \"${CCAS+set}\" = set || CCAS=$CC\ntest \"${CCASFLAGS+set}\" = set || CCASFLAGS=$CFLAGS\nAC_ARG_VAR([CCAS],      [assembler compiler command (defaults to CC)])\nAC_ARG_VAR([CCASFLAGS], [assembler compiler flags (defaults to CFLAGS)])\n_AM_IF_OPTION([no-dependencies],, [_AM_DEPENDENCIES([CCAS])])dnl\n])\n\n# AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n\n# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets\n# $ac_aux_dir to `$srcdir/foo'.  In other projects, it is set to\n# `$srcdir', `$srcdir/..', or `$srcdir/../..'.\n#\n# Of course, Automake must honor this variable whenever it calls a\n# tool from the auxiliary directory.  The problem is that $srcdir (and\n# therefore $ac_aux_dir as well) can be either absolute or relative,\n# depending on how configure is run.  This is pretty annoying, since\n# it makes $ac_aux_dir quite unusable in subdirectories: in the top\n# source directory, any form will work fine, but in subdirectories a\n# relative path needs to be adjusted first.\n#\n# $ac_aux_dir/missing\n#    fails when called from a subdirectory if $ac_aux_dir is relative\n# $top_srcdir/$ac_aux_dir/missing\n#    fails if $ac_aux_dir is absolute,\n#    fails when called from a subdirectory in a VPATH build with\n#          a relative $ac_aux_dir\n#\n# The reason of the latter failure is that $top_srcdir and $ac_aux_dir\n# are both prefixed by $srcdir.  In an in-source build this is usually\n# harmless because $srcdir is `.', but things will broke when you\n# start a VPATH build or use an absolute $srcdir.\n#\n# So we could use something similar to $top_srcdir/$ac_aux_dir/missing,\n# iff we strip the leading $srcdir from $ac_aux_dir.  That would be:\n#   am_aux_dir='\\$(top_srcdir)/'`expr \"$ac_aux_dir\" : \"$srcdir//*\\(.*\\)\"`\n# and then we would define $MISSING as\n#   MISSING=\"\\${SHELL} $am_aux_dir/missing\"\n# This will work as long as MISSING is not called from configure, because\n# unfortunately $(top_srcdir) has no meaning in configure.\n# However there are other variables, like CC, which are often used in\n# configure, and could therefore not use this \"fixed\" $ac_aux_dir.\n#\n# Another solution, used here, is to always expand $ac_aux_dir to an\n# absolute PATH.  The drawback is that using absolute paths prevent a\n# configured tree to be moved without reconfiguration.\n\nAC_DEFUN([AM_AUX_DIR_EXPAND],\n[dnl Rely on autoconf to set up CDPATH properly.\nAC_PREREQ([2.50])dnl\n# expand $ac_aux_dir to an absolute path\nam_aux_dir=`cd $ac_aux_dir && pwd`\n])\n\n# AM_CONDITIONAL                                            -*- Autoconf -*-\n\n# Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005, 2006\n# Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 8\n\n# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n# -------------------------------------\n# Define a conditional.\nAC_DEFUN([AM_CONDITIONAL],\n[AC_PREREQ(2.52)dnl\n ifelse([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n\t[$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\nAC_SUBST([$1_TRUE])dnl\nAC_SUBST([$1_FALSE])dnl\n_AM_SUBST_NOTMAKE([$1_TRUE])dnl\n_AM_SUBST_NOTMAKE([$1_FALSE])dnl\nif $2; then\n  $1_TRUE=\n  $1_FALSE='#'\nelse\n  $1_TRUE='#'\n  $1_FALSE=\nfi\nAC_CONFIG_COMMANDS_PRE(\n[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n  AC_MSG_ERROR([[conditional \"$1\" was never defined.\nUsually this means the macro was only invoked conditionally.]])\nfi])])\n\n# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n# Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 9\n\n# There are a few dirty hacks below to avoid letting `AC_PROG_CC' be\n# written in clear, in which case automake, when reading aclocal.m4,\n# will think it sees a *use*, and therefore will trigger all it's\n# C support machinery.  Also note that it means that autoscan, seeing\n# CC etc. in the Makefile, will ask for an AC_PROG_CC use...\n\n\n# _AM_DEPENDENCIES(NAME)\n# ----------------------\n# See how the compiler implements dependency checking.\n# NAME is \"CC\", \"CXX\", \"GCJ\", or \"OBJC\".\n# We try a few techniques and use that to set a single cache variable.\n#\n# We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was\n# modified to invoke _AM_DEPENDENCIES(CC); we would have a circular\n# dependency, and given that the user is not expected to run this macro,\n# just rely on AC_PROG_CC.\nAC_DEFUN([_AM_DEPENDENCIES],\n[AC_REQUIRE([AM_SET_DEPDIR])dnl\nAC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl\nAC_REQUIRE([AM_MAKE_INCLUDE])dnl\nAC_REQUIRE([AM_DEP_TRACK])dnl\n\nifelse([$1], CC,   [depcc=\"$CC\"   am_compiler_list=],\n       [$1], CXX,  [depcc=\"$CXX\"  am_compiler_list=],\n       [$1], OBJC, [depcc=\"$OBJC\" am_compiler_list='gcc3 gcc'],\n       [$1], UPC,  [depcc=\"$UPC\"  am_compiler_list=],\n       [$1], GCJ,  [depcc=\"$GCJ\"  am_compiler_list='gcc3 gcc'],\n                   [depcc=\"$$1\"   am_compiler_list=])\n\nAC_CACHE_CHECK([dependency style of $depcc],\n               [am_cv_$1_dependencies_compiler_type],\n[if test -z \"$AMDEP_TRUE\" && test -f \"$am_depcomp\"; then\n  # We make a subdir and do the tests there.  Otherwise we can end up\n  # making bogus files that we don't know about and never remove.  For\n  # instance it was reported that on HP-UX the gcc test will end up\n  # making a dummy file named `D' -- because `-MD' means `put the output\n  # in D'.\n  mkdir conftest.dir\n  # Copy depcomp to subdir because otherwise we won't find it if we're\n  # using a relative directory.\n  cp \"$am_depcomp\" conftest.dir\n  cd conftest.dir\n  # We will build objects and dependencies in a subdirectory because\n  # it helps to detect inapplicable dependency modes.  For instance\n  # both Tru64's cc and ICC support -MD to output dependencies as a\n  # side effect of compilation, but ICC will put the dependencies in\n  # the current directory while Tru64 will put them in the object\n  # directory.\n  mkdir sub\n\n  am_cv_$1_dependencies_compiler_type=none\n  if test \"$am_compiler_list\" = \"\"; then\n     am_compiler_list=`sed -n ['s/^#*\\([a-zA-Z0-9]*\\))$/\\1/p'] < ./depcomp`\n  fi\n  for depmode in $am_compiler_list; do\n    # Setup a source with many dependencies, because some compilers\n    # like to wrap large dependency lists on column 80 (with \\), and\n    # we should not choose a depcomp mode which is confused by this.\n    #\n    # We need to recreate these files for each test, as the compiler may\n    # overwrite some of them when testing with obscure command lines.\n    # This happens at least with the AIX C compiler.\n    : > sub/conftest.c\n    for i in 1 2 3 4 5 6; do\n      echo '#include \"conftst'$i'.h\"' >> sub/conftest.c\n      # Using `: > sub/conftst$i.h' creates only sub/conftst1.h with\n      # Solaris 8's {/usr,}/bin/sh.\n      touch sub/conftst$i.h\n    done\n    echo \"${am__include} ${am__quote}sub/conftest.Po${am__quote}\" > confmf\n\n    case $depmode in\n    nosideeffect)\n      # after this tag, mechanisms are not by side-effect, so they'll\n      # only be used when explicitly requested\n      if test \"x$enable_dependency_tracking\" = xyes; then\n\tcontinue\n      else\n\tbreak\n      fi\n      ;;\n    none) break ;;\n    esac\n    # We check with `-c' and `-o' for the sake of the \"dashmstdout\"\n    # mode.  It turns out that the SunPro C++ compiler does not properly\n    # handle `-M -o', and we need to detect this.\n    if depmode=$depmode \\\n       source=sub/conftest.c object=sub/conftest.${OBJEXT-o} \\\n       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \\\n       $SHELL ./depcomp $depcc -c -o sub/conftest.${OBJEXT-o} sub/conftest.c \\\n         >/dev/null 2>conftest.err &&\n       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&\n       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then\n      # icc doesn't choke on unknown options, it will just issue warnings\n      # or remarks (even with -Werror).  So we grep stderr for any message\n      # that says an option was ignored or not supported.\n      # When given -MP, icc 7.0 and 7.1 complain thusly:\n      #   icc: Command line warning: ignoring option '-M'; no argument required\n      # The diagnosis changed in icc 8.0:\n      #   icc: Command line remark: option '-MP' not supported\n      if (grep 'ignoring option' conftest.err ||\n          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else\n        am_cv_$1_dependencies_compiler_type=$depmode\n        break\n      fi\n    fi\n  done\n\n  cd ..\n  rm -rf conftest.dir\nelse\n  am_cv_$1_dependencies_compiler_type=none\nfi\n])\nAC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])\nAM_CONDITIONAL([am__fastdep$1], [\n  test \"x$enable_dependency_tracking\" != xno \\\n  && test \"$am_cv_$1_dependencies_compiler_type\" = gcc3])\n])\n\n\n# AM_SET_DEPDIR\n# -------------\n# Choose a directory name for dependency files.\n# This macro is AC_REQUIREd in _AM_DEPENDENCIES\nAC_DEFUN([AM_SET_DEPDIR],\n[AC_REQUIRE([AM_SET_LEADING_DOT])dnl\nAC_SUBST([DEPDIR], [\"${am__leading_dot}deps\"])dnl\n])\n\n\n# AM_DEP_TRACK\n# ------------\nAC_DEFUN([AM_DEP_TRACK],\n[AC_ARG_ENABLE(dependency-tracking,\n[  --disable-dependency-tracking  speeds up one-time build\n  --enable-dependency-tracking   do not reject slow dependency extractors])\nif test \"x$enable_dependency_tracking\" != xno; then\n  am_depcomp=\"$ac_aux_dir/depcomp\"\n  AMDEPBACKSLASH='\\'\nfi\nAM_CONDITIONAL([AMDEP], [test \"x$enable_dependency_tracking\" != xno])\nAC_SUBST([AMDEPBACKSLASH])dnl\n_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl\n])\n\n# Generate code to set up dependency tracking.              -*- Autoconf -*-\n\n# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n# Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n#serial 3\n\n# _AM_OUTPUT_DEPENDENCY_COMMANDS\n# ------------------------------\nAC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],\n[for mf in $CONFIG_FILES; do\n  # Strip MF so we end up with the name of the file.\n  mf=`echo \"$mf\" | sed -e 's/:.*$//'`\n  # Check whether this is an Automake generated Makefile or not.\n  # We used to match only the files named `Makefile.in', but\n  # some people rename them; so instead we look at the file content.\n  # Grep'ing the first line is not enough: some people post-process\n  # each Makefile.in and add a new line on top of each file to say so.\n  # Grep'ing the whole file is not good either: AIX grep has a line\n  # limit of 2048, but all sed's we know have understand at least 4000.\n  if sed 10q \"$mf\" | grep '^#.*generated by automake' > /dev/null 2>&1; then\n    dirpart=`AS_DIRNAME(\"$mf\")`\n  else\n    continue\n  fi\n  # Extract the definition of DEPDIR, am__include, and am__quote\n  # from the Makefile without running `make'.\n  DEPDIR=`sed -n 's/^DEPDIR = //p' < \"$mf\"`\n  test -z \"$DEPDIR\" && continue\n  am__include=`sed -n 's/^am__include = //p' < \"$mf\"`\n  test -z \"am__include\" && continue\n  am__quote=`sed -n 's/^am__quote = //p' < \"$mf\"`\n  # When using ansi2knr, U may be empty or an underscore; expand it\n  U=`sed -n 's/^U = //p' < \"$mf\"`\n  # Find all dependency output files, they are included files with\n  # $(DEPDIR) in their names.  We invoke sed twice because it is the\n  # simplest approach to changing $(DEPDIR) to its actual value in the\n  # expansion.\n  for file in `sed -n \"\n    s/^$am__include $am__quote\\(.*(DEPDIR).*\\)$am__quote\"'$/\\1/p' <\"$mf\" | \\\n       sed -e 's/\\$(DEPDIR)/'\"$DEPDIR\"'/g' -e 's/\\$U/'\"$U\"'/g'`; do\n    # Make sure the directory exists.\n    test -f \"$dirpart/$file\" && continue\n    fdir=`AS_DIRNAME([\"$file\"])`\n    AS_MKDIR_P([$dirpart/$fdir])\n    # echo \"creating $dirpart/$file\"\n    echo '# dummy' > \"$dirpart/$file\"\n  done\ndone\n])# _AM_OUTPUT_DEPENDENCY_COMMANDS\n\n\n# AM_OUTPUT_DEPENDENCY_COMMANDS\n# -----------------------------\n# This macro should only be invoked once -- use via AC_REQUIRE.\n#\n# This code is only required when automatic dependency tracking\n# is enabled.  FIXME.  This creates each `.P' file that we will\n# need in order to bootstrap the dependency handling code.\nAC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS],\n[AC_CONFIG_COMMANDS([depfiles],\n     [test x\"$AMDEP_TRUE\" != x\"\" || _AM_OUTPUT_DEPENDENCY_COMMANDS],\n     [AMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"])\n])\n\n# Do all the work for Automake.                             -*- Autoconf -*-\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n# 2005, 2006 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 12\n\n# This macro actually does too much.  Some checks are only needed if\n# your package does certain things.  But this isn't really a big deal.\n\n# AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])\n# AM_INIT_AUTOMAKE([OPTIONS])\n# -----------------------------------------------\n# The call with PACKAGE and VERSION arguments is the old style\n# call (pre autoconf-2.50), which is being phased out.  PACKAGE\n# and VERSION should now be passed to AC_INIT and removed from\n# the call to AM_INIT_AUTOMAKE.\n# We support both call styles for the transition.  After\n# the next Automake release, Autoconf can make the AC_INIT\n# arguments mandatory, and then we can depend on a new Autoconf\n# release and drop the old call support.\nAC_DEFUN([AM_INIT_AUTOMAKE],\n[AC_PREREQ([2.60])dnl\ndnl Autoconf wants to disallow AM_ names.  We explicitly allow\ndnl the ones we care about.\nm4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl\nAC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\nAC_REQUIRE([AC_PROG_INSTALL])dnl\nif test \"`cd $srcdir && pwd`\" != \"`pwd`\"; then\n  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output\n  # is not polluted with repeated \"-I.\"\n  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl\n  # test to see if srcdir already configured\n  if test -f $srcdir/config.status; then\n    AC_MSG_ERROR([source directory already configured; run \"make distclean\" there first])\n  fi\nfi\n\n# test whether we have cygpath\nif test -z \"$CYGPATH_W\"; then\n  if (cygpath --version) >/dev/null 2>/dev/null; then\n    CYGPATH_W='cygpath -w'\n  else\n    CYGPATH_W=echo\n  fi\nfi\nAC_SUBST([CYGPATH_W])\n\n# Define the identity of the package.\ndnl Distinguish between old-style and new-style calls.\nm4_ifval([$2],\n[m4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl\n AC_SUBST([PACKAGE], [$1])dnl\n AC_SUBST([VERSION], [$2])],\n[_AM_SET_OPTIONS([$1])dnl\ndnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.\nm4_if(m4_ifdef([AC_PACKAGE_NAME], 1)m4_ifdef([AC_PACKAGE_VERSION], 1), 11,,\n  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl\n AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl\n AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl\n\n_AM_IF_OPTION([no-define],,\n[AC_DEFINE_UNQUOTED(PACKAGE, \"$PACKAGE\", [Name of package])\n AC_DEFINE_UNQUOTED(VERSION, \"$VERSION\", [Version number of package])])dnl\n\n# Some tools Automake needs.\nAC_REQUIRE([AM_SANITY_CHECK])dnl\nAC_REQUIRE([AC_ARG_PROGRAM])dnl\nAM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version})\nAM_MISSING_PROG(AUTOCONF, autoconf)\nAM_MISSING_PROG(AUTOMAKE, automake-${am__api_version})\nAM_MISSING_PROG(AUTOHEADER, autoheader)\nAM_MISSING_PROG(MAKEINFO, makeinfo)\nAM_PROG_INSTALL_SH\nAM_PROG_INSTALL_STRIP\nAC_REQUIRE([AM_PROG_MKDIR_P])dnl\n# We need awk for the \"check\" target.  The system \"awk\" is bad on\n# some platforms.\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([AC_PROG_MAKE_SET])dnl\nAC_REQUIRE([AM_SET_LEADING_DOT])dnl\n_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],\n              [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],\n\t      \t\t     [_AM_PROG_TAR([v7])])])\n_AM_IF_OPTION([no-dependencies],,\n[AC_PROVIDE_IFELSE([AC_PROG_CC],\n                  [_AM_DEPENDENCIES(CC)],\n                  [define([AC_PROG_CC],\n                          defn([AC_PROG_CC])[_AM_DEPENDENCIES(CC)])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_CXX],\n                  [_AM_DEPENDENCIES(CXX)],\n                  [define([AC_PROG_CXX],\n                          defn([AC_PROG_CXX])[_AM_DEPENDENCIES(CXX)])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_OBJC],\n                  [_AM_DEPENDENCIES(OBJC)],\n                  [define([AC_PROG_OBJC],\n                          defn([AC_PROG_OBJC])[_AM_DEPENDENCIES(OBJC)])])dnl\n])\n])\n\n\n# When config.status generates a header, we must update the stamp-h file.\n# This file resides in the same directory as the config header\n# that is generated.  The stamp files are numbered to have different names.\n\n# Autoconf calls _AC_AM_CONFIG_HEADER_HOOK (when defined) in the\n# loop where config.status creates the headers, so we can generate\n# our stamp files there.\nAC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK],\n[# Compute $1's index in $config_headers.\n_am_stamp_count=1\nfor _am_header in $config_headers :; do\n  case $_am_header in\n    $1 | $1:* )\n      break ;;\n    * )\n      _am_stamp_count=`expr $_am_stamp_count + 1` ;;\n  esac\ndone\necho \"timestamp for $1\" >`AS_DIRNAME([$1])`/stamp-h[]$_am_stamp_count])\n\n# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_INSTALL_SH\n# ------------------\n# Define $install_sh.\nAC_DEFUN([AM_PROG_INSTALL_SH],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\ninstall_sh=${install_sh-\"\\$(SHELL) $am_aux_dir/install-sh\"}\nAC_SUBST(install_sh)])\n\n# Copyright (C) 2003, 2005  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 2\n\n# Check whether the underlying file-system supports filenames\n# with a leading dot.  For instance MS-DOS doesn't.\nAC_DEFUN([AM_SET_LEADING_DOT],\n[rm -rf .tst 2>/dev/null\nmkdir .tst 2>/dev/null\nif test -d .tst; then\n  am__leading_dot=.\nelse\n  am__leading_dot=_\nfi\nrmdir .tst 2>/dev/null\nAC_SUBST([am__leading_dot])])\n\n# Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n# From Jim Meyering\n\n# Copyright (C) 1996, 1998, 2000, 2001, 2002, 2003, 2004, 2005\n# Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 4\n\nAC_DEFUN([AM_MAINTAINER_MODE],\n[AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n  dnl maintainer-mode is disabled by default\n  AC_ARG_ENABLE(maintainer-mode,\n[  --enable-maintainer-mode  enable make rules and dependencies not useful\n\t\t\t  (and sometimes confusing) to the casual installer],\n      USE_MAINTAINER_MODE=$enableval,\n      USE_MAINTAINER_MODE=no)\n  AC_MSG_RESULT([$USE_MAINTAINER_MODE])\n  AM_CONDITIONAL(MAINTAINER_MODE, [test $USE_MAINTAINER_MODE = yes])\n  MAINT=$MAINTAINER_MODE_TRUE\n  AC_SUBST(MAINT)dnl\n]\n)\n\nAU_DEFUN([jm_MAINTAINER_MODE], [AM_MAINTAINER_MODE])\n\n# Check to see how 'make' treats includes.\t            -*- Autoconf -*-\n\n# Copyright (C) 2001, 2002, 2003, 2005  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 3\n\n# AM_MAKE_INCLUDE()\n# -----------------\n# Check to see how make treats includes.\nAC_DEFUN([AM_MAKE_INCLUDE],\n[am_make=${MAKE-make}\ncat > confinc << 'END'\nam__doit:\n\t@echo done\n.PHONY: am__doit\nEND\n# If we don't find an include directive, just comment out the code.\nAC_MSG_CHECKING([for style of include used by $am_make])\nam__include=\"#\"\nam__quote=\n_am_result=none\n# First try GNU make style include.\necho \"include confinc\" > confmf\n# We grep out `Entering directory' and `Leaving directory'\n# messages which can occur if `w' ends up in MAKEFLAGS.\n# In particular we don't look at `^make:' because GNU make might\n# be invoked under some other name (usually \"gmake\"), in which\n# case it prints its new name instead of `make'.\nif test \"`$am_make -s -f confmf 2> /dev/null | grep -v 'ing directory'`\" = \"done\"; then\n   am__include=include\n   am__quote=\n   _am_result=GNU\nfi\n# Now try BSD make style include.\nif test \"$am__include\" = \"#\"; then\n   echo '.include \"confinc\"' > confmf\n   if test \"`$am_make -s -f confmf 2> /dev/null`\" = \"done\"; then\n      am__include=.include\n      am__quote=\"\\\"\"\n      _am_result=BSD\n   fi\nfi\nAC_SUBST([am__include])\nAC_SUBST([am__quote])\nAC_MSG_RESULT([$_am_result])\nrm -f confinc confmf\n])\n\n# Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005\n# Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 5\n\n# AM_PROG_CC_C_O\n# --------------\n# Like AC_PROG_CC_C_O, but changed for automake.\nAC_DEFUN([AM_PROG_CC_C_O],\n[AC_REQUIRE([AC_PROG_CC_C_O])dnl\nAC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nAC_REQUIRE_AUX_FILE([compile])dnl\n# FIXME: we rely on the cache variable name because\n# there is no other way.\nset dummy $CC\nac_cc=`echo $[2] | sed ['s/[^a-zA-Z0-9_]/_/g;s/^[0-9]/_/']`\nif eval \"test \\\"`echo '$ac_cv_prog_cc_'${ac_cc}_c_o`\\\" != yes\"; then\n   # Losing compiler, so override with the script.\n   # FIXME: It is wrong to rewrite CC.\n   # But if we don't then we get into trouble of one sort or another.\n   # A longer-term fix would be to have automake use am__CC in this case,\n   # and then we could set am__CC=\"\\$(top_srcdir)/compile \\$(CC)\"\n   CC=\"$am_aux_dir/compile $CC\"\nfi\ndnl Make sure AC_PROG_CC is never called again, or it will override our\ndnl setting of CC.\nm4_define([AC_PROG_CC],\n          [m4_fatal([AC_PROG_CC cannot be called after AM_PROG_CC_C_O])])\n])\n\n# Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-\n\n# Copyright (C) 1997, 1999, 2000, 2001, 2003, 2004, 2005\n# Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 5\n\n# AM_MISSING_PROG(NAME, PROGRAM)\n# ------------------------------\nAC_DEFUN([AM_MISSING_PROG],\n[AC_REQUIRE([AM_MISSING_HAS_RUN])\n$1=${$1-\"${am_missing_run}$2\"}\nAC_SUBST($1)])\n\n\n# AM_MISSING_HAS_RUN\n# ------------------\n# Define MISSING if not defined so far and test if it supports --run.\n# If it does, set am_missing_run to use it, otherwise, to nothing.\nAC_DEFUN([AM_MISSING_HAS_RUN],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nAC_REQUIRE_AUX_FILE([missing])dnl\ntest x\"${MISSING+set}\" = xset || MISSING=\"\\${SHELL} $am_aux_dir/missing\"\n# Use eval to expand $SHELL\nif eval \"$MISSING --run true\"; then\n  am_missing_run=\"$MISSING --run \"\nelse\n  am_missing_run=\n  AC_MSG_WARN([`missing' script is too old or missing])\nfi\n])\n\n# Copyright (C) 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_MKDIR_P\n# ---------------\n# Check for `mkdir -p'.\nAC_DEFUN([AM_PROG_MKDIR_P],\n[AC_PREREQ([2.60])dnl\nAC_REQUIRE([AC_PROG_MKDIR_P])dnl\ndnl Automake 1.8 to 1.9.6 used to define mkdir_p.  We now use MKDIR_P,\ndnl while keeping a definition of mkdir_p for backward compatibility.\ndnl @MKDIR_P@ is magic: AC_OUTPUT adjusts its value for each Makefile.\ndnl However we cannot define mkdir_p as $(MKDIR_P) for the sake of\ndnl Makefile.ins that do not define MKDIR_P, so we do our own\ndnl adjustment using top_builddir (which is defined more often than\ndnl MKDIR_P).\nAC_SUBST([mkdir_p], [\"$MKDIR_P\"])dnl\ncase $mkdir_p in\n  [[\\\\/$]]* | ?:[[\\\\/]]*) ;;\n  */*) mkdir_p=\"\\$(top_builddir)/$mkdir_p\" ;;\nesac\n])\n\n# Helper functions for option handling.                     -*- Autoconf -*-\n\n# Copyright (C) 2001, 2002, 2003, 2005  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 3\n\n# _AM_MANGLE_OPTION(NAME)\n# -----------------------\nAC_DEFUN([_AM_MANGLE_OPTION],\n[[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])\n\n# _AM_SET_OPTION(NAME)\n# ------------------------------\n# Set option NAME.  Presently that only means defining a flag for this option.\nAC_DEFUN([_AM_SET_OPTION],\n[m4_define(_AM_MANGLE_OPTION([$1]), 1)])\n\n# _AM_SET_OPTIONS(OPTIONS)\n# ----------------------------------\n# OPTIONS is a space-separated list of Automake options.\nAC_DEFUN([_AM_SET_OPTIONS],\n[AC_FOREACH([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])\n\n# _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])\n# -------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nAC_DEFUN([_AM_IF_OPTION],\n[m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])\n\n# Check to make sure that the build environment is sane.    -*- Autoconf -*-\n\n# Copyright (C) 1996, 1997, 2000, 2001, 2003, 2005\n# Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 4\n\n# AM_SANITY_CHECK\n# ---------------\nAC_DEFUN([AM_SANITY_CHECK],\n[AC_MSG_CHECKING([whether build environment is sane])\n# Just in case\nsleep 1\necho timestamp > conftest.file\n# Do `set' in a subshell so we don't clobber the current shell's\n# arguments.  Must try -L first in case configure is actually a\n# symlink; some systems play weird games with the mod time of symlinks\n# (eg FreeBSD returns the mod time of the symlink's containing\n# directory).\nif (\n   set X `ls -Lt $srcdir/configure conftest.file 2> /dev/null`\n   if test \"$[*]\" = \"X\"; then\n      # -L didn't work.\n      set X `ls -t $srcdir/configure conftest.file`\n   fi\n   rm -f conftest.file\n   if test \"$[*]\" != \"X $srcdir/configure conftest.file\" \\\n      && test \"$[*]\" != \"X conftest.file $srcdir/configure\"; then\n\n      # If neither matched, then we have a broken ls.  This can happen\n      # if, for instance, CONFIG_SHELL is bash and it inherits a\n      # broken ls alias from the environment.  This has actually\n      # happened.  Such a system could not be considered \"sane\".\n      AC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken\nalias in your environment])\n   fi\n\n   test \"$[2]\" = conftest.file\n   )\nthen\n   # Ok.\n   :\nelse\n   AC_MSG_ERROR([newly created file is older than distributed files!\nCheck your system clock])\nfi\nAC_MSG_RESULT(yes)])\n\n# Copyright (C) 2001, 2003, 2005  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_INSTALL_STRIP\n# ---------------------\n# One issue with vendor `install' (even GNU) is that you can't\n# specify the program used to strip binaries.  This is especially\n# annoying in cross-compiling environments, where the build's strip\n# is unlikely to handle the host's binaries.\n# Fortunately install-sh will honor a STRIPPROG variable, so we\n# always use install-sh in `make install-strip', and initialize\n# STRIPPROG with the value of the STRIP variable (set by the user).\nAC_DEFUN([AM_PROG_INSTALL_STRIP],\n[AC_REQUIRE([AM_PROG_INSTALL_SH])dnl\n# Installed binaries are usually stripped using `strip' when the user\n# run `make install-strip'.  However `strip' might not be the right\n# tool to use in cross-compilation environments, therefore Automake\n# will honor the `STRIP' environment variable to overrule this program.\ndnl Don't test for $cross_compiling = yes, because it might be `maybe'.\nif test \"$cross_compiling\" != no; then\n  AC_CHECK_TOOL([STRIP], [strip], :)\nfi\nINSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"\nAC_SUBST([INSTALL_STRIP_PROGRAM])])\n\n# Copyright (C) 2006  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_SUBST_NOTMAKE(VARIABLE)\n# ---------------------------\n# Prevent Automake from outputing VARIABLE = @VARIABLE@ in Makefile.in.\n# This macro is traced by Automake.\nAC_DEFUN([_AM_SUBST_NOTMAKE])\n\n# Check how to create a tarball.                            -*- Autoconf -*-\n\n# Copyright (C) 2004, 2005  Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# serial 2\n\n# _AM_PROG_TAR(FORMAT)\n# --------------------\n# Check how to create a tarball in format FORMAT.\n# FORMAT should be one of `v7', `ustar', or `pax'.\n#\n# Substitute a variable $(am__tar) that is a command\n# writing to stdout a FORMAT-tarball containing the directory\n# $tardir.\n#     tardir=directory && $(am__tar) > result.tar\n#\n# Substitute a variable $(am__untar) that extract such\n# a tarball read from stdin.\n#     $(am__untar) < result.tar\nAC_DEFUN([_AM_PROG_TAR],\n[# Always define AMTAR for backward compatibility.\nAM_MISSING_PROG([AMTAR], [tar])\nm4_if([$1], [v7],\n     [am__tar='${AMTAR} chof - \"$$tardir\"'; am__untar='${AMTAR} xf -'],\n     [m4_case([$1], [ustar],, [pax],,\n              [m4_fatal([Unknown tar format])])\nAC_MSG_CHECKING([how to create a $1 tar archive])\n# Loop over all known methods to create a tar archive until one works.\n_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'\n_am_tools=${am_cv_prog_tar_$1-$_am_tools}\n# Do not fold the above two line into one, because Tru64 sh and\n# Solaris sh will not grok spaces in the rhs of `-'.\nfor _am_tool in $_am_tools\ndo\n  case $_am_tool in\n  gnutar)\n    for _am_tar in tar gnutar gtar;\n    do\n      AM_RUN_LOG([$_am_tar --version]) && break\n    done\n    am__tar=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$$tardir\"'\n    am__tar_=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$tardir\"'\n    am__untar=\"$_am_tar -xf -\"\n    ;;\n  plaintar)\n    # Must skip GNU tar: if it does not support --format= it doesn't create\n    # ustar tarball either.\n    (tar --version) >/dev/null 2>&1 && continue\n    am__tar='tar chf - \"$$tardir\"'\n    am__tar_='tar chf - \"$tardir\"'\n    am__untar='tar xf -'\n    ;;\n  pax)\n    am__tar='pax -L -x $1 -w \"$$tardir\"'\n    am__tar_='pax -L -x $1 -w \"$tardir\"'\n    am__untar='pax -r'\n    ;;\n  cpio)\n    am__tar='find \"$$tardir\" -print | cpio -o -H $1 -L'\n    am__tar_='find \"$tardir\" -print | cpio -o -H $1 -L'\n    am__untar='cpio -i -H $1 -d'\n    ;;\n  none)\n    am__tar=false\n    am__tar_=false\n    am__untar=false\n    ;;\n  esac\n\n  # If the value was cached, stop now.  We just wanted to have am__tar\n  # and am__untar set.\n  test -n \"${am_cv_prog_tar_$1}\" && break\n\n  # tar/untar a dummy directory, and stop if the command works\n  rm -rf conftest.dir\n  mkdir conftest.dir\n  echo GrepMe > conftest.dir/file\n  AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])\n  rm -rf conftest.dir\n  if test -s conftest.tar; then\n    AM_RUN_LOG([$am__untar <conftest.tar])\n    grep GrepMe conftest.dir/file >/dev/null 2>&1 && break\n  fi\ndone\nrm -rf conftest.dir\n\nAC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])\nAC_MSG_RESULT([$am_cv_prog_tar_$1])])\nAC_SUBST([am__tar])\nAC_SUBST([am__untar])\n]) # _AM_PROG_TAR\n\nm4_include([acinclude.m4])\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/heapq.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/sqlite3/__init__.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/sqlite3/dbapi2.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/sqlite3/test/transactions.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/sqlite3/test/hooks.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/sqlite3/test/types.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/sqlite3/test/factory.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/sqlite3/test/dbapi.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/sqlite3/test/userfunctions.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/sqlite3/test/regression.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/idlelib/CREDITS.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/idlelib/Icons/plusnode.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/idlelib/Icons/folder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/idlelib/Icons/openfolder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/idlelib/Icons/minusnode.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/idlelib/Icons/tk.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/idlelib/Icons/python.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/idlelib/Icons/idle.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/testtar.tar",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/zip_cp437_header.zip",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/zipdir.zip",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/test_pep263.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/badsyntax_pep3120.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/sgml_input.html",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/Sine-1000Hz-300ms.aif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/audiotest.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/185test.db",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/sndhdrdata/sndhdr.voc",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/sndhdrdata/sndhdr.wav",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/sndhdrdata/sndhdr.8svx",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/sndhdrdata/sndhdr.aifc",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/sndhdrdata/sndhdr.sndt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/sndhdrdata/sndhdr.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/sndhdrdata/sndhdr.aiff",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/sndhdrdata/sndhdr.hcom",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/johab.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/shift_jis.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/gb18030.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/euc_jp.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/big5.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/euc_jisx0213.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/big5hkscs.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/euc_kr.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/shift_jisx0213.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/gb2312.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/gbk.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/test/cjkencodings/cp949.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/email/test/data/PyBanner048.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/email/test/data/audiotest.au",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/distutils/command/wininst-9.0.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/distutils/command/wininst-8.0.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/distutils/command/wininst-6.0.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/distutils/command/wininst-7.1.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Lib/distutils/command/wininst-9.0-amd64.exe",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/BuildScript/resources/background.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/IDLE/IDLE.app/Contents/Resources/PythonSource.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/IDLE/IDLE.app/Contents/Resources/PythonCompiled.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/IDLE/IDLE.app/Contents/Resources/IDLE.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Resources/app/Resources/PythonApplet.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Resources/app/Resources/PythonInterpreter.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Resources/iconsrc/IDE.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Resources/iconsrc/PythonApplet.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Resources/iconsrc/PythonSource.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Resources/iconsrc/PackageManager.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Resources/iconsrc/PythonCompiled.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Resources/iconsrc/PythonWSource.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Resources/iconsrc/PythonIcon.psd",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/PythonLauncher/English.lproj/MyDocument.nib/objects.nib",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/PythonLauncher/English.lproj/MainMenu.nib/objects.nib",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/PythonLauncher/English.lproj/PreferenceWindow.nib/objects.nib",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Icons/Python Folder.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Icons/PythonSource.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Icons/Disk Image.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Icons/PythonLauncher.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Icons/PythonCompiled.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Mac/Icons/IDLE.icns",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Tools/i18n/msgfmt.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Tools/i18n/pygettext.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Objects/listsort.txt",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Doc/tools/sphinxext/static/py.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Doc/faq/python-video-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/py.ico",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/python_nt.rc",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/_msi.c",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/pyc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/pycon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/icons/source.xar",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/bdist_wininst/PythonPowered.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/VS7.1/python.iss",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/VS7.1/python20.wse",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PC/VS7.1/installer.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/PCbuild/installer.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Demo/tkinter/ttk/img/close.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Demo/tkinter/ttk/img/close_active.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Demo/tkinter/ttk/img/close_pressed.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Demo/distutils/test2to3/setup.py",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Demo/tix/bitmaps/tix.gif",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/unicodedata.c",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/prepare_protocol.h",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/connection.c",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/cache.h",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/statement.h",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/sqlitecompat.h",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/statement.c",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/cache.c",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/util.h",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/module.c",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/row.c",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/util.c",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/prepare_protocol.c",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/module.h",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/row.h",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/connection.h",
        "/tmp/vanessa/spack-stage/spack-stage-python-3.1.5-hsszy4w5op4gb4posjcwcz6p3a3kbb6l/spack-src/Modules/_sqlite/cursor.h"
    ],
    "total_files": 3314
}