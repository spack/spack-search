{
    "matches": {
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/NEWS.md": "Julia v0.4.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * Function call overloading: for arbitrary objects `x` (not of type\n    `Function`), `x(...)` is transformed into `call(x, ...)`, and `call`\n    can be overloaded as desired.  Constructors are now a special case of\n    this mechanism, which allows e.g. constructors for abstract types.\n    `T(...)` falls back to `convert(T, x)`, so all `convert` methods implicitly\n    define a constructor ([#8712], [#2403]).\n\n  * Unicode version 8 is now supported for identifiers etcetera ([#7917], [#12031]).\n\n  * Type parameters now permit any `isbits` type, not just `Int` and `Bool` ([#6081]).\n\n  * Keyword argument names can be computed, using syntax such as `f(; symbol => val)` ([#7704]).\n\n  * The syntax `@generated function` enables generation of specialized methods based on\n    argument types. At compile time, the function is called with its arguments bound to their\n    types instead of to their values. The function then returns an expression forming the\n    body of the function to be called at run time ([#7311]).\n\n  * [Documentation system](http://docs.julialang.org/en/latest/manual/documentation/)\n    for functions, methods, types and macros in packages and user code ([#8791]).\n\n  * The syntax `function foo end` can be used to introduce a generic function without\n    yet adding any methods ([#8283]).\n\n  * Incremental precompilation of modules: call `VERSION >= v\"0.4.0-dev+6521\" && __precompile__()` at the top of a\n    module file to automatically precompile it when it is imported ([#12491]), or manually\n    run `Base.compilecache(modulename)`. The resulting precompiled `.ji` file is saved in\n    `~/.julia/lib/v0.4` ([#8745]).\n\n      * See manual section on `Module initialization and precompilation` (under `Modules`) for\n        details and errata.  In particular, to be safely precompilable a module may need an\n        `__init__` function to separate code that must be executed at runtime rather than precompile\n        time.  Modules that are *not* precompilable should call `__precompile__(false)`.\n\n      * The precompiled `.ji` file includes a list of dependencies (modules and files that\n        were imported/included at precompile-time), and the module is automatically recompiled\n        upon `import` when any of its dependencies have changed.  Explicit dependencies\n        on other files can be declared with `include_dependency(path)` ([#12458]).\n\n      * New option `--output-incremental={yes|no}` added to invoke the equivalent of `Base.compilecache`\n        from the command line.\n\n  * The syntax `new{parameters...}(...)` can be used in constructors to specify parameters for\n    the type to be constructed ([#8135]).\n\n  * `++` is now parsed as an infix operator, but does not yet have a default definition ([#11030], [#11686]).\n\n  * Support for inter-task communication using `Channels` ([#12264]).\n    See http://docs.julialang.org/en/latest/manual/parallel-computing/#channels for details.\n\n  * RemoteRefs now point to remote channels. The remote channels can be of length greater than 1.\n    Default continues to be of length 1 ([#12385]).\n    See http://docs.julialang.org/en/latest/manual/parallel-computing/#remoterefs-and-abstractchannels for details.\n\n  * `@__LINE__` special macro now available to reflect invocation source line number ([#12727]).\n\nLanguage changes\n----------------\n\n  * Tuple types are now written as `Tuple{A, B}` instead of as `(A, B)`.\n    Tuples of bits types are inlined into structs and arrays, like other\n    immutable types.\n    `...` now does splatting inside parentheses, instead of constructing a\n    variadic tuple type ([#10380]).\n    Variadic tuple types are written as `Tuple{Vararg{T}}`.\n\n  * Using `[x,y]` to concatenate arrays is deprecated, and in the future will\n    construct a vector of `x` and `y` instead ([#3737], [#2488], [#8599]).\n\n  * Significant improvements to `ccall` and `cfunction`\n\n    * As a safer alternative to creating pointers (`Ptr`), the managed reference type\n      `Ref` has been added. A `Ref` points to the data contained by a value in an\n      abstract sense, and in a way that is GC-safe. For example, `Ref(2)` points to\n      a storage location that contains the integer `2`, and `Ref(array,3)` points\n      to the third element of an array. A `Ref` can be automatically converted to a\n      native pointer when passed to a `ccall`.\n\n    * When passing a by-reference argument to `ccall`, you can declare\n      the argument type to be `Ref{T}` instead of `Ptr{T}`, and just\n      pass `x` instead of `&x`.\n\n    * `ccall` is now lowered to call `unsafe_convert(T, cconvert(T, x))` on each\n      argument. `cconvert` falls back to `convert`, but can be used to convert an\n      argument to an arbitrarily-different representation more suitable for passing\n      to C. `unsafe_convert` then handles conversions to `Ptr`.\n\n    * `ccall` and `cfunction` now support correctly passing and returning structs,\n      following the platform ABI (assuming the C types are mirrored accurately in Julia).\n\n    * `cfunction` arguments of struct-like Julia types are now passed by value.\n      If `Ref{T}` is used as a `cfunction` argument type, it will look up the\n      method applicable to `T`, but pass the argument by reference (as Julia functions\n      usually do). However, this should only be used for objects allocated by Julia\n      and for `isbits` types.\n\n  * `convert(Ptr,x)` is deprecated for most types, replaced by\n    `unsafe_convert`. You can still `convert` between pointer types,\n    and between pointers and `Int` or `UInt`.\n\n  * Module `__init__` methods no longer swallow thrown exceptions; they now\n    throw an `InitError` wrapping the thrown exception ([#12576]).\n\n  * Unsigned `BigInt` literal syntax has been removed ([#11105]).\n    Unsigned literals larger than `UInt128` now throw a syntax error.\n\n  * `error(::Exception)` and `error(::Type{Exception})` have been deprecated\n     in favor of using an explicit `throw` ([#9690]).\n\n  * `Uint` etcetera are renamed to `UInt` ([#8905]).\n\n  * `String` is renamed to `AbstractString` ([#8872]).\n\n  * `FloatingPoint` is renamed to `AbstractFloat` ([#12162]).\n\n  * `None` is deprecated; use `Union{}` instead ([#8423]).\n\n  * `Nothing` (the type of `nothing`) is renamed to `Void` ([#8423]).\n\n  * Arrays can be constructed with the syntax `Array{T}(m,n)` ([#3214], [#10075]).\n\n  * `Dict` literal syntax `[a=>b,c=>d]` is replaced by `Dict(a=>b,c=>d)`,\n    `{a=>b}` is replaced by `Dict{Any,Any}(a=>b)`, and\n    `(K=>V)[...]` is replaced by `Dict{K,V}(...)`.\n    The new syntax has many advantages: all of its components are first-class,\n    it generalizes to other types of containers, it is easier to guess how to\n    specify key and value types, and the syntaxes for empty and pre-populated\n    dicts are synchronized. As part of this change, `=>` is parsed as a normal\n    operator, and `Base` defines it to construct `Pair` objects ([#6739]).\n\n  * `Char` is no longer a subtype of `Integer` ([#8816]).\n    Char now supports a more limited set of operations with `Integer` types:\n\n      * comparison / equality\n      * `Char` + `Int` = `Char`\n      * `Char` - `Char` = `Int`\n\n  * `round` rounds to the nearest integer using the default rounding mode,\n    which is ties-to-even by default ([#8750]).\n\n  * A custom triple-quoted string like `x\"\"\"...\"\"\"` no longer invokes an `x_mstr`\n    macro. Instead, the string is first unindented and then `x_str` is invoked,\n    as if the string had been single-quoted ([#10228]).\n\n  * Colons (`:`) within indexing expressions are no longer lowered to the range\n    `1:end`. Instead, the `:` identifier is passed directly. Custom array types\n    that implement `getindex` or `setindex!` methods must also extend those\n    methods to support arguments of type `Colon` ([#10331]).\n\n  * Unions of types should now be written with curly braces instead of parentheses, i.e.\n    `Union{Type1, Type2}` instead of `Union(Type1, Type2)` ([#11432]).\n\n  * The keyword `local` is no longer allowed in global scope. Use `let` instead of\n    `begin` to create a new scope from the top level ([#7234], [#10472]).\n\n  * Triple-quoted strings no longer treat tabs as 8 spaces. Instead, the\n    longest common prefix of spaces and tabs is removed.\n\n  * `global x` in a nested scope is now a syntax error if `x` is local\n    to the enclosing scope ([#7264]/[#11985]).\n\n  * The default `importall Base.Operators` is deprecated, and relying on it\n    will give a warning ([#8113]).\n\n  * `remotecall_fetch` and `fetch` now rethrow any uncaught remote exception locally as a\n    `RemoteException`. Previously they would return the remote exception object.\n    The worker pid, remote exception and remote backtrace are available in the\n    thrown `RemoteException`.\n\n  * If any of the enclosed async operations in a `@sync` block throw exceptions, they\n    are now collected in a `CompositeException` and the `CompositeException` thrown.\n\n\nCommand line option changes\n---------------------------\n\n  * The `-i` option now forces the REPL to run after loading the specified script (if any) ([#11347]).\n\n  * New option `--handle-signals={yes|no}` to disable Julia's signal handlers.\n\n  * The `--depwarn={yes|no|error}` option enables/disables syntax and method deprecation warnings,\n    or turns them into errors ([#9294]).\n\n  * Some command line options are slated for deprecation / removal\n    - `-f, --no-startup` Don't load ~/.juliarc (deprecated, use --startup-file=no)\n    - `-F` Load ~/.juliarc (deprecated, use --startup-file=yes)`\n    - `-P, --post-boot <expr>`  Evaluate <expr>, but don't disable interactive mode (deprecated, use -i -e instead)\n    - `--no-history-file`  Don't load history file (deprecated, use --history-file=no)\n\nCompiler/Runtime improvements\n-----------------------------\n\n  * Functions may be annotated with metadata (`:meta` expressions) to be used by the compiler ([#8297]).\n\n  * `@inline` before a function definition forces the compiler to inline the function ([#8297]).\n\n  * Loads from heap-allocated immutables are hoisted out of loops in more cases ([#8867]).\n\n  * Accessing fields that are always initialized no longer produces undefined checks ([#8827]).\n\n  * New generational garbage collector which greatly reduces GC overhead for many commmon workloads ([#5227]).\n\nLibrary improvements\n--------------------\n\n  * Build with USE_GPL_LIBS=0 to exclude all GPL libraries and code ([#10870]).\n\n  * Linear algebra\n\n    * The `LinAlg` module is now exported.\n\n    * `sparse(A)` now takes any `AbstractMatrix` A as an argument ([#10031]).\n\n    * Factorization API is now type-stable; functions dispatch on `Val{false}` or `Val{true}` instead of a boolean value ([#9575]).\n\n    * Added generic Cholesky factorization, and the Cholesky factorization is now parametrized by the matrix type ([#7236]).\n\n    * Sparse `cholfact` and `ldltfact` functions now accept a `perm` keyword\n      for user-provided permutations and a `shift` keyword to factorize\n      a shifted matrix ([#10844]).\n\n    * New `svds` function for the sparse truncated SVD ([#9425]).\n\n    * `Symmetric` and `Hermitian` immutables are now parametrized by the matrix type ([#7992]).\n\n    * New `ordschur` and `ordschur!` functions for sorting a Schur factorization by the eigenvalues ([#8467],[#9701]).\n\n    * `Givens` type doesn't have a size anymore and is no longer a subtype of `AbstractMatrix` ([#8660]).\n\n    * Large speedup in sparse `\\` and splitting of Cholesky and LDL\u1d40 factorizations into `cholfact` and `ldltfact` ([#10117]).\n\n    * Add sparse least squares to `\\` by adding `qrfact` for sparse matrices based on the SPQR library ([#10180]).\n\n    * Split `Triangular` type into `UpperTriangular`, `LowerTriangular`, `UnitUpperTriagular` and `UnitLowerTriangular` ([#9779])\n\n    * OpenBLAS 64-bit (ILP64) interface is now compiled with a `64_` suffix ([#8734]) to avoid conflicts with external libraries using a 32-bit BLAS ([#4923]).\n\n    * New `vecdot` function, analogous to `vecnorm`, for Euclidean inner products over any iterable container ([#11067]).\n\n    * `p = plan_fft(x)` and similar functions now return a `Base.DFT.Plan` object, rather\n    than an anonymous function.  Calling it via `p(x)` is deprecated in favor of\n    `p * x` or `p \\ x` (for the inverse), and it can also be used with `A_mul_B!`\n    to employ pre-allocated output arrays ([#12087]).\n\n    * `LU{T,Tridiagonal{T}}` now supports extraction of `L`, `U`, `p`, and `P` factors ([#12137]).\n\n    * Allocations in sparse matrix factorizations are now tracked by Julia's garbage collector ([#12034]).\n\n  * Strings\n\n    * NUL-terminated strings should now be passed to C via the new `Cstring` type, not `Ptr{UInt8}` or `Ptr{Cchar}`,\n      in order to check whether the string is free of NUL characters (which would cause silent truncation in C).\n      The analogous type `Cwstring` should be used for NUL-terminated `wchar_t*` strings ([#10994]).\n\n    * `graphemes(s)` returns an iterator over grapheme substrings of `s` ([#9261]).\n\n    * Character predicates such as `islower()`, `isspace()`, etc. use\n      utf8proc to provide uniform cross-platform behavior and\n      up-to-date, locale-independent support for Unicode standards\n      ([#5939]).\n\n    * `reverseind` function to convert indices in reversed strings (e.g. from\n      reversed regex searches) to indices in the original string ([#9249]).\n\n    * `charwidth(c)` and `strwidth(s)` now return up-to-date cross-platform\n      results (via utf8proc) ([#10659]): Julia now likes pizza ([#3721]), but some terminals still don't.\n\n    * `is_valid_char(c)`, (now `isvalid(Char,c)` ([#11241])), now correctly handles Unicode \"non-characters\", which are valid Unicode codepoints ([#11171]).\n\n    * Backreferences in replacement strings in calls to `replace` with a `Regex` pattern are now supported ([#11849]).\n      Use the `s` string prefix to indicate a replacement string contains a backreference. For example, `replace(\"ab\", r\"(.)(.)\", s\"\\2\\1\")` yields \"ba\".\n\n    * Capture groups in regular expressions can now be named using PCRE syntax, `(?P<group_name>...)`. Capture group matches can be accessed by name by indexing a `Match` object with the name of the group ([#11566]).\n\n    * `countlines()` now counts all lines, not just non-empty ([#11947]).\n\n  * Array and AbstractArray improvements\n\n    * New multidimensional iterators and index types for efficient iteration over `AbstractArray`s. Array iteration should generally be written as `for i in eachindex(A) ... end` rather than `for i = 1:length(A) ... end` ([#8432]).\n\n    * New implementation of SubArrays with substantial performance and functionality improvements ([#8501]).\n\n    * AbstractArray subtypes only need to implement `size` and `getindex`\n      for scalar indices to support indexing; all other indexing behaviors\n      (including logical indexing, ranges of indices, vectors, colons, etc.) are\n      implemented in default fallbacks. Similarly, they only need to implement\n      scalar `setindex!` to support all forms of indexed assingment ([#10525]).\n\n    * AbstractArrays that do not extend `similar` now return an `Array` by\n      default ([#10525]).\n\n  * Data structures\n\n    * New `sortperm!` function for pre-allocated index arrays ([#8792]).\n\n    * Switch from `O(N)` to `O(log N)` algorithm for `dequeue!(pq, key)`\n    with `PriorityQueue`. This provides major speedups for large\n    queues ([#8011]).\n\n    * `PriorityQueue` now includes the order type among its\n      parameters, `PriorityQueue{KeyType,ValueType,OrderType}`. An\n      empty queue can be constructed as `pq =\n      PriorityQueue(KeyType,ValueType)`, if you intend to use the\n      default `Forward` order, or `pq = PriorityQueue(KeyType,\n      ValueType, OrderType)` otherwise ([#8011]).\n\n    * Efficient `mean` and `median` for ranges ([#8089]).\n\n    * `deepcopy` recurses through immutable types and makes copies of their mutable fields ([#8560]).\n\n    * `copy(a::DArray)` will now make a copy of a `DArray` ([#9745]).\n\n  * New types\n\n    * Enums are now supported through the `@enum EnumName EnumValue1\n      EnumValue2` syntax. Enum member values also support abitrary\n      value assignment by the `@enum EnumName EnumValue1=1\n      EnumValue2=10 EnumValue3=20` syntax ([#10168]).\n\n    * New `Dates` module for calendar dates and other time-interval calculations ([#7654]).\n\n    * New `Nullable` type for missing data ([#8152]).\n\n    * A new `Val{T}` type allows one to dispatch on bits-type values ([#9452]).\n\n    * `linspace` now returns a `LinSpace` object which lazily computes linear interpolation of values between the start and stop values. It \"lifts\" endpoints which are approximately rational in the same manner as the `colon` operator.\n\n  * Arithmetic\n\n    * `convert` now checks for overflow when truncating integers or converting between\n    signed and unsigned ([#5413]).\n\n    * Arithmetic is type-preserving for more types; e.g. `(x::Int8) + (y::Int8)` now\n    yields an `Int8` ([#3759]).\n\n    * Reductions (e.g. `reduce`, `sum`) widen small types (integers smaller than `Int`, and `Float16`).\n\n    * Added optional rounding argument to floating-point constructors ([#8845]).\n\n    * Equality (`==`) and inequality (`<`/`<=`) comparisons are now correct\n      across all numeric types ([#9133], [#9198]).\n\n    * Rational arithmetic throws errors on overflow ([#8672]).\n\n    * Optional `log` and `log1p` functions implemented in pure Julia (experimental) ([#10008]).\n\n    * The `MathConst` type has been renamed `Irrational` ([#11922]).\n\n    * `isapprox` now has simpler and more sensible default tolerances ([#12393]), supports arrays, and has synonyms `\u2248` ([U+2248](http://www.fileformat.info/info/unicode/char/2248/index.htm), LaTeX `\\approx`) and `\u2249` ([U+2249](http://www.fileformat.info/info/unicode/char/2249/index.htm), LaTeX `\\napprox`) for `isapprox` and `!isapprox`, respectively ([#12472]).\n\n  * Numbers\n\n    * `primes` is now faster and has been extended to generate the primes in a user defined closed interval ([#12025]).\n\n    * The function `primesmask` which generates a prime sieve for a user defined closed interval is now exported ([#12025]).\n\n  * Random numbers\n\n    * Streamlined random number generation APIs [#8246].\n    The default `rand` no longer uses global state in the underlying C library,\n    dSFMT, making it closer to being thread-safe ([#8399], [#8832]).\n    All APIs can now take an `AbstractRNG` argument ([#8854], [#9065]). The seed argument to `srand` is now optional ([#8320], [#8854]).\n    The APIs accepting a range argument are extended to accept an arbitrary\n    `AbstractArray` ([#9049]).\n    Passing a range of `BigInt` to `rand` or `rand!` is now supported ([#9122]).\n    There are speed improvements across the board ([#8808], [#8941], [#8958], [#9083]).\n\n    * Significantly faster `randn` ([#9126], [#9132]).\n\n    * The `randexp` and `randexp!` functions are exported ([#9144]).\n\n  * File\n\n    * Added function `readlink` which returns the value of a symbolic link \"path\" ([#10714]).\n\n    * Added function `ismount` which checks if a directory is a mount point ([#11279]).\n\n    * The `cp` function now accepts keyword arguments `remove_destination` and `follow_symlinks` ([#10888]).\n\n    * The `mv` function now accepts keyword argument `remove_destination` ([#11145]).\n\n  * `Pipe()` creates a bidirectional I/O object that can be passed to `spawn` or `pipeline`\n    for redirecting process streams ([#12739]).\n\n  * Other improvements\n\n    * You can now tab-complete Emoji characters via their [short names](http://www.emoji-cheat-sheet.com/), using `\\:name:<tab>` ([#10709]).\n\n    * `gc_enable` subsumes `gc_disable`, and also returns the previous GC state.\n\n    * `assert`, `@assert` now throws an `AssertionError` exception type ([#9734]).\n\n    * `@simd` now rejects invalid control flow (`@goto` / break / continue) in the inner loop body at compile time ([#8624]).\n\n    * The `machinefile` now supports a host count ([#7616]).\n\n    * `code_native` now outputs branch labels ([#8897]).\n\n    * Added `recvfrom` to get source address of UDP packets ([#9418]).\n\n    * ClusterManager performance improvements ([#9309]) and support for changing transports([#9434]).\n\n    * Added Base.get_process_title / Base.set_process_title ([#9957]).\n\n    * `readavailable` now returns a byte vector instead of a string.\n\n    * New `lock` and `unlock` functions, operating on `ReentrantLock`, to lock a stream during\n      concurrent writes from multiple tasks ([#10679]).\n\n    * `code_llvm` now outputs stripped IR without debug info or other attached metadata.\n      Use `code_llvm_raw` for the unstripped output ([#10747]).\n\n    * New `withenv(var=>val, ...) do ... end` function to temporarily\n      modify environment variables ([#10914]).\n\n    * New function `relpath` returns a relative filepath to path either from the current\n      directory or from an optional start directory ([#10893]).\n\n    * `mktemp` and `mktempdir` now take an optional argument to set which\n      directory the temporary file or directory is created in.\n\n    * New garbage collector tracked memory allocator functions: `jl_malloc`, `jl_calloc`,\n    `jl_realloc`, and `jl_free` with libc API ([[#12034]]).\n\n    * `mktempdir` and `mktemp` now have variants that take a function as its\n      first argument for automated clean-up ([[#9017]]).\n\nDeprecated or removed\n---------------------\n\n  * several syntax whitespace insensitivities have been deprecated ([#11891]).\n    ```julia\n     # function call\n     f (x)\n\n     # getindex\n     x [17]\n     rand(2) [1]\n\n     # function definition\n     f (x) = x^2\n     function foo (x)\n\tx^2\n     end\n    ```\n\n  * indexing with Reals that are not subtypes of Integers (Rationals, AbstractFloat, etc.) has been deprecated ([#10458]).\n\n  * `push!(A)` has been deprecated, use `append!` instead of splatting arguments to `push!` ([#10400]).\n\n  * `names` for composite datatypes has been deprecated and\n    renamed to `fieldnames` ([#10332]).\n\n  * `DArray` functionality has been removed from `Base` and is now a\n    standalone package under the JuliaParallel umbrella organization ([#10333]).\n\n  * The `Graphics` module has been removed from `Base` and is now a\n    standalone package ([#10150], [#9862]).\n\n  * The `Woodbury` special matrix type has been removed from LinAlg ([#10024]).\n\n  * `median` and `median!` no longer accept a `checknan` keyword argument ([#8605]).\n\n  * `inf` and `nan` are now deprecated in favor of `T(Inf)` and `T(NaN)`, respectively ([#8776]).\n\n  * `oftype(T::Type, x)` is deprecated in favor of `convert(T,x)` (or `T(x)`).\n\n  * `{...}` syntax is deprecated in favor of `Any[...]` ([#8578]).\n\n  * `itrunc`, `ifloor`, `iceil` and `iround` are deprecated in favour of\n    `trunc{T<:Integer}(T,x)`, `floor{T<:Integer}(T,x)`, etc.. `trunc` is now\n    always bound-checked;`Base.unsafe_trunc` provides the old unchecked `itrunc`\n    behaviour ([#9133]).\n\n  * `squeeze` now requires that passed dimension(s) are an `Int` or tuple of `Int`s;\n    calling `squeeze` with an arbitrary iterator is deprecated ([#9271]).\n    Additionally, passed dimensions must be unique and correspond to extant\n    dimensions of the input array.\n\n  * `randbool` is deprecated. Use `rand(Bool)` to produce a random boolean value, and\n    `bitrand` to produce a random BitArray ([#9105], [#9569]).\n\n  * `beginswith` is renamed to `startswith` ([#9578]).\n\n  * `null` is renamed to `nullspace` ([#9714]).\n\n  * The operators `|>`, `.>`, `>>`, and `.>>` as used for process I/O redirection\n    are replaced with the `pipeline` function ([#5349], [#12739]).\n\n  * `flipud(A)` and `fliplr(A)` have been deprecated in favor of `flipdim(A, 1)` and\n    `flipdim(A, 2)`, respectively ([#10446]).\n\n  * Numeric conversion functions whose names are lower-case versions of type\n    names have been removed. To convert a scalar, use the type name, e.g.\n    `Int32(x)`. To convert an array to a different element type, use\n    `Array{T}(x)`, `map(T,x)`, or `round(T,x)`. To parse a string as an integer\n    or floating-point number, use `parse` ([#1470], [#6211]).\n\n  * Low-level functions from the C library and dynamic linker have been moved to\n    modules `Libc` and `Libdl`, respectively ([#10328]).\n\n  * The functions `parseint`, `parsefloat`, `float32_isvalid`,\n  `float64_isvalid`, and the string-argument `BigInt` and `BigFloat` have\n  been replaced by `parse` and `tryparse` with a type argument. The string\n  macro `big\"xx\"` can be used to construct `BigInt` and `BigFloat` literals\n  ([#3631], [#5704], [#9487], [#10543], [#10955]).\n\n  * the `--int-literals` compiler option is no longer accepted ([#9597]).\n\n  * Instead of `linrange`, use `linspace` ([#9666]).\n\n  * The functions `is_valid_char`, `is_valid_ascii`, `is_valid_utf8`, `is_valid_utf16`, and\n    `is_valid_utf32` have been replaced by generic `isvalid` methods.\n    The single argument form `isvalid(value)` can now be used for values of type `Char`, `ASCIIString`,\n    `UTF8String`, `UTF16String` and `UTF32String`.\n    The two argument form `isvalid(type, value)` can be used with the above types, with values\n    of type `Vector{UInt8}`, `Vector{UInt16}`, `Vector{UInt32}`, and `Vector{Char}` ([#11241]).\n\n  * Instead of `utf32(64,123,...)` use `utf32(UInt32[64,123,...])` ([#11379]).\n\n  * `start_timer` and `stop_timer` are replaced by `Timer` and `close`.\n\n  * The following internal julia C functions have been renamed, in order to prevent\n    potential naming conflicts with C libraries: ([#11741])\n\n    * `gc_wb*` -> `jl_gc_wb*`\n\n    * `gc_queue_root` -> `jl_gc_queue_root`\n\n    * `allocobj` -> `jl_gc_allocobj`\n\n    * `alloc_[0-3]w` -> `jl_gc_alloc_*w`\n\n    * `diff_gc_total_bytes` -> `jl_gc_diff_total_bytes`\n\n    * `sync_gc_total_bytes` -> `jl_gc_sync_total_bytes`\n\n  * `require(::AbstractString)` and `reload` (see news about addition of `compile`).\n\n  * `cartesianmap` is deprecated in favor of iterating over a `CartesianRange`\n\nJulia v0.3.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * Greatly enhanced performance for passing and returning `Tuple`s ([#4042]).\n\n  * `Tuple`s (of `Integer`s, `Symbol`s, or `Bool`s) can now be used as type\n    parameters ([#5164]).\n\n  * An additional default \"inner\" constructor accepting any arguments is now\n    generated. Constructors that look like `MyType(a, b) = new(a, b)` do not\n    need to be added manually ([#4026], [#7071]).\n\n  * Expanded array type hierarchy to include an abstract `DenseArray` for\n    in-memory arrays with standard strided storage ([#987], [#2345],\n    [#6212]).\n\n  * When reloading code, types whose definitions have not changed can be\n    ignored in some cases.\n\n  * Binary `~` now parses as a vararg macro call to `@~`.\n    For example `x~y~z` => `@~ x y z` ([#4882]).\n\n  * Structure fields can now be accessed by index ([#4806]).\n\n  * If a module contains a function `__init__()`, it will be called when\n    the module is first loaded, and on process startup if a pre-compiled\n    version of the module is present ([#1268]).\n\n  * Multi-line comments ([#69], [#6128]): `#= .... =#`\n\n  * `--check-bounds=yes|no` compiler option\n\n  * Unicode identifiers are normalized (NFC) so that different encodings\n    of equivalent strings are treated as the same identifier ([#5462]).\n\n  * The set of characters permitted in identifiers has been restricted based\n    on Unicode categories. Generally, punctuation, formatting and control\n    characters, and operator symbols are not allowed in identifiers.\n    Number-like characters cannot begin identifiers ([#5936]).\n\n  * Define a limited number of infix Unicode operators ([#552], [#6582]):\n\n    | Precedence class | Operators (with synonyms, if any)\n    | ---------------- | ---------------------------------\n    |   ==             |  \u2265 (>=) \u2264 (<=) \u2261 (===) \u2260 (!=) \u2262 (!==) .\u2265 (.>=) .\u2264 (.<=) .!= (.\u2260) \u2208 (`in`) \u2209 (`(x,y)->!in(x, y)`) \u220b (`(x,y)->in(y, x)`) \u220c (`(x,y)->!in(y, x)`) \u2286 (`issubset`) \u2288 (`(x,y)->!issubset(x, y)`) \u228a (`(x,y)->x\u2286y && x!=y`) |\n    |   +              | \u222a (`union`) |\n    |   *              | \u00f7 (`div`) \u22c5 (`dot`) \u00d7 (`cross`) \u2229 (`intersect`) |\n    |   unary          | \u221a \u221b |\n\n    In addition to these, many of the Unicode operator symbols are parsed\n    as infix operators and are available for user-defined methods ([#6929]).\n\n  * Improved reporting of syntax errors ([#6179])\n\n  * `break` inside a `for` loop with multiple ranges now exits the entire loop nest ([#5154])\n\n  * Local goto statements using the `@goto` and `@label` macros ([#101]).\n\nREPL improvements\n-----------------\n\n  * New native-Julia REPL implementation, eliminating many problems\n    stemming from the old GNU Readline-based REPL ([#6270]).\n\n  * Tab-substitution of LaTeX math symbols (e.g. `\\alpha` by `\u03b1`) ([#6911]).\n    This also works in IJulia and in Emacs ([#6920]).\n\n  * `workspace()` function for obtaining a fresh workspace ([#1195]).\n\nLibrary improvements\n--------------------\n\n  * `isequal` now compares all numbers by value, ignoring type ([#6624]).\n\n  * Implement limited shared-memory parallelism with `SharedArray`s ([#5380]).\n\n  * Well-behaved floating-point ranges ([#2333], [#5636]).\n    Introduced the `FloatRange` type for floating-point ranges with a step,\n    which will give intuitive/correct results for classically problematic\n    ranges like `0.1:0.1:0.3`, `0.0:0.7:2.1` or `1.0:1/49:27.0`.\n\n  * `mod2pi` function ([#4799], [#4862]).\n\n  * New functions `minmax` and `extrema` ([#5275]).\n\n  * New macros `@edit`, `@less`, `@code_typed`, `@code_lowered`, `@code_llvm` and `@code_native` that all function like `@which` ([#5832]).\n\n  * `consume(p)` extended to `consume(p, args...)`, allowing it\n    to optionally pass `args...` back to the producer ([#4775]).\n\n  * `.juliarc.jl` is now loaded for both script and REPL execution ([#5076]).\n\n  * The `Sys` module now includes convenient functions for working with\n    dynamic library handles; `Sys.dllist` will list out all paths currently\n    loaded via `dlopen`, and `Sys.dlpath` will lookup a path from a handle\n\n  * `readdlm` treats multiple whitespace characters as a single delimiter\n    by default (when no delimiter is specified). This is useful for reading\n    fixed-width or messy whitespace-delimited data ([#5403]).\n\n  * The Airy, Bessel, Hankel, and related functions (`airy*`,\n    `bessel*`, `hankel*`) now detect errors returned by the underlying\n    AMOS library, throwing an `AmosException` in that case ([#4967]).\n\n  * `methodswith` now returns an array of `Method`s ([#5464]) rather\n    than just printing its results.\n\n  * `errno([code])` function to get or set the C library's `errno`.\n\n  * `GitHub` module for interacting with the GitHub API.\n\n  * Package improvements\n\n    * Packages are now installed into `.julia/v0.3` by default (or\n      whatever the current Julia version is), so that different\n      versions of Julia can co-exist with incompatible packages.\n      Existing `.julia` installations are unaffected unless `Pkg.init()`\n      is run to re-create the package directories ([#3344], [#5737]).\n\n    * `Pkg.submit(pkg[,commit])` function to automatically submit\n      a GitHub pull request to the package author.\n\n  * Collections improvements\n\n    * `Array` assignment (e.g. `x[:] = y`) ignores singleton dimensions\n      and allows the last dimension of one side to match all trailing dimensions\n      of the other ([#4048], [#4383]).\n\n    * `Dict(kv)` constructor for any iterator on `(key,value)` pairs.\n\n    * Multi-key `Dict`s: `D[x,y...]` is now a synonym for `D[(x,y...)]`\n      for associations `D` ([#4870]).\n\n    * `push!` and `unshift!` can push multiple arguments ([#4782]).\n\n    * `writedlm` and `writecsv` now accept any iterable collection of\n      iterable rows, in addition to `AbstractArray` arguments, and the\n      `writedlm` delimiter can be any printable object (e.g. a\n      `String`) instead of just a `Char`.\n\n    * `isempty` now works for any iterable collection ([#5827]).\n\n    * `unique` now accepts an optional `dim` argument for finding\n      unique rows or columns of a matrix or regions of a\n      multidimensional array ([#5811]).\n\n  * `Number` improvements\n\n    * The `ImaginaryUnit` type no longer exists. Instead, `im` is of type\n      `Complex{Bool}`. Making this work required changing the semantics of\n      boolean multiplication to approximately, `true * x = x` and\n      `false * x = zero(x)`, which can itself be considered useful ([#5468]).\n\n    * `big` is now vectorized ([#4766])\n\n    * `nextpow` and `prevpow` now return the `a^n` values instead of the\n      exponent `n` ([#4819])\n\n    * Overflow detection in `parseint` ([#4874]).\n\n    * `rand` now supports arbitrary `Ranges` arguments ([#5059]).\n\n    * `expm1` and `log1p` now support complex arguments ([#3141]).\n\n    * Broadcasting `.//` is now included ([#7094]).\n\n    * `prevfloat` and `nextfloat` now saturate at -Inf and Inf,\n      respectively, and have otherwise been fixed to follow the IEEE-754\n      standard functions `nextDown` and `nextUp` ([#5025]).\n\n    * New function `widen` for widening numeric types and values, and `widemul`\n      for multiplying to a larger type ([#6169]).\n\n    * `polygamma`, `digamma`, and `trigamma` now accept complex\n      arguments, and `zeta(s, z)` now provides the Hurwitz zeta ([#7125]).\n\n    * Narrow integer types (< 32 bits) are promoted to `Float64` rather\n      than to `Float32` by `float(x)` ([#7390]).\n\n  * `String` improvements\n\n    * Triple-quoted regex strings, `r\"\"\"...\"\"\"` ([#4934]).\n\n    * New string type, `UTF16String` ([#4930]), constructed by\n      `utf16(s)` from another string, a `Uint16` array or pointer, or\n      a byte array (possibly prefixed by a byte-order marker to\n      indicate endian-ness).  Its data is internally `NULL`-terminated\n      for passing to C ([#7016]).\n\n    * `CharString` is renamed to `UTF32String` ([#4943]), and its data\n      is now internally `NULL`-terminated for passing to C ([#7016]).\n      `CharString(c::Char...)` is deprecated in favor of `utf32(c...)`,\n      and `utf32(s)` otherwise has functionality similar to `utf16(s)`.\n\n    * New `WString` and `wstring` synonyms for either `UTF16String`\n      and `utf16` or `UTF32String` and `utf32`, respectively, depending\n      on the width of `Cwchar_t` ([#7016]).\n\n    * `normalize_string` function to perform Unicode normalization,\n      case-folding, and other transformations ([#5576]).\n\n    * `pointer(s, i=1)` for `ByteString`, `UTF16String`, `UTF32String`,\n      and `SubString`s thereof ([#5703]).\n\n    * `bytestring` is automatically called on `String` arguments for\n      conversion to `Ptr{Uint8}` in `ccall` ([#5677]).\n\n  * Linear algebra improvements\n\n      * Balancing options for eigenvector calculations for general matrices ([#5428]).\n\n      * Mutating linear algebra functions no longer promote ([#5526]).\n\n      * `condskeel` for Skeel condition numbers ([#5726]).\n\n      * `norm(::Matrix)` no longer calculates a vector norm when the first\n        dimension is one ([#5545]); it always uses the operator (induced)\n        matrix norm.\n\n      * New `vecnorm(itr, p=2)` function that computes the norm of\n        any iterable collection of numbers as if it were a vector of\n        the same length.  This generalizes and replaces `normfro` ([#6057]),\n        and `norm` is now type-stable ([#6056]).\n\n      * New `UniformScaling` matrix type and identity `I` constant ([#5810]).\n\n      * None of the concrete matrix factorization types are exported from `Base`\n        by default anymore.\n\n    * Sparse linear algebra\n\n      * 1-d sparse `getindex` has been implemented ([#7047])\n\n      * Faster sparse `getindex` ([#7131]).\n\n      * Faster sparse `kron` ([#4958]).\n\n      * `sparse(A) \\ B` now supports a matrix `B` of right-hand sides ([#5196]).\n\n      * `eigs(A, sigma)` now uses shift-and-invert for nonzero shifts `sigma` and inverse iteration for `which=\"SM\"`. If `sigma==nothing` (the new default), computes ordinary (forward) iterations ([#5776]).\n\n      * `sprand` is faster, and whether any entry is nonzero is now determined independently with the specified probability ([#6726]).\n\n    * Dense linear algebra for special matrix types\n\n      * Interconversions between the special matrix types `Diagonal`, `Bidiagonal`,\n        `SymTridiagonal`, `Triangular`, and `Triangular`, and `Matrix` are now allowed\n        for matrices which are representable in both source and destination types ([5e3f074b]).\n\n      * Allow for addition and subtraction over mixed matrix types, automatically promoting\n        the result to the denser matrix type ([a448e080], [#5927])\n\n      * new algorithms for linear solvers and eigensystems of `Bidiagonal`\n        matrices of generic element types ([#5277])\n\n      * new algorithms for linear solvers, eigensystems and singular systems of `Diagonal`\n        matrices of generic element types ([#5263])\n\n      * new algorithms for linear solvers and eigensystems of `Triangular`\n        matrices of generic element types ([#5255])\n\n      * specialized `inv` and `det` methods for `Tridiagonal` and `SymTridiagonal`\n        based on recurrence relations between principal minors ([#5358])\n\n      * specialized `transpose`, `ctranspose`, `istril`, `istriu` methods for\n        `Triangular` ([#5255]) and `Bidiagonal` ([#5277])\n\n      * new LAPACK wrappers\n        - condition number estimate `cond(A::Triangular)` ([#5255])\n\n      * parametrize `Triangular` on matrix type ([#7064])\n\n      * Lyapunov / Sylvester solver ([#7435])\n\n      * `eigvals` for `Symmetric`, `Tridiagonal` and `Hermitian` matrices now\n        support additional method signatures: ([#3688], [#6652], [#6678], [#7647])\n        - `eigvals(M, el, eu)` finds all eigenvalues in the interval `(el, eu]`\n        - `eigvals(M, il:iu)` finds the `il`th through the `iu`th eigenvalues (in ascending order)\n\n    * Dense linear algebra for generic matrix element types\n\n      * LU factorization ([#5381] and [#5430])\n\n      * QR factorization ([#5526])\n\n  * New function `deleteat!` deletes a specified index or indices and\n    returns the updated collection\n\n  * The `setenv` function for external processes now accepts a `dir` keyword\n    argument for specifying the directory to start the child process in ([#4888]).\n\n  * Constructors for collections (`Set`, `Dict`, etc.) now generally accept a\n    single iterable argument giving the elements of the collection ([#4996], [#4871])\n\n  * Ranges and arrays with the same elements are now unequal. This allows hashing\n    and comparing ranges to be faster ([#5778]).\n\n  * Broadcasting now works on arbitrary `AbstractArrays` ([#5387])\n\n  * Reduction functions that accept a pre-allocated output array, including\n    `sum!`, `prod!`, `maximum!`, `minimum!`, `all!`, `any!` ([#6197], [#5387])\n\n  * Faster performance on `fill!` and `copy!` for array types not supporting\n    efficient linear indexing ([#5671], [#5387])\n\n  * Changes to range types ([#5585])\n\n    * `Range` is now the abstract range type, instead of `Ranges`\n\n    * New function `range` for constructing ranges by length\n\n    * `Range` is now `StepRange`, and `Range1` is now `UnitRange`. Their\n      constructors accept end points instead of lengths. Both are subtypes of a\n      new abstract type `OrdinalRange`.\n\n    * Ranges now support `BigInt` and general ordinal types.\n\n    * Very large ranges (e.g. `0:typemax(Int)`) can now be constructed, but some\n      operations (e.g. `length`) will raise an `OverflowError`.\n\n  * Extended API for `cov` and `cor`, which accept keyword arguments `vardim`,\n    `corrected`, and `mean` ([#6273])\n\n  * New functions `randsubseq` and `randsubseq!` to create a random subsequence of an array ([#6726])\n\n  * New macro `@evalpoly` for efficient inline evaluation of polynomials ([#7146]).\n\n  * The signal filtering function `filt` now accepts an optional initial filter state vector. A new in-place function `filt!` is also exported ([#7513]).\n\n  * Significantly faster `cumsum` and `cumprod` ([#7359]).\n\n  * Implement `findmin` and `findmax` over specified array dimensions ([#6716]).\n\n  * Support memory-mapping of files with offsets on Windows ([#7242]).\n\n  * Catch writes to protect memory, such as when trying to modify a mmapped file opened in read-only mode ([#3434]).\n\nEnvironment improvements\n------------------------\n\n  * New `--code-coverage` and `--track-allocation` startup features allow one to measure the number of executions or the amount of memory allocated, respectively, at each line of code ([#5423],[#7464]).\n\n  * `Profile.init` now accepts keyword arguments, and returns the current settings when no arguments are supplied ([#7365]).\n\nBuild improvements\n------------------\n\n  * Dependencies are now verified against stored MD5/SHA512 hashes, to ensure\n    that the correct file has been downloaded and was not modified ([#6773]).\n\n\nDeprecated or removed\n---------------------\n\n  * `convert(Ptr{T1}, x::Array{T2})` is now deprecated unless `T1 == T2`\n    or `T1 == Void` ([#6073]).  (You can still explicitly `convert`\n    one pointer type into another if needed.)\n\n  * `Sys.shlib_ext` has been renamed to `Sys.dlext`\n\n  * `dense` is deprecated in favor of `full` ([#4759]).\n\n  * The `Stat` type is renamed `StatStruct` ([#4670]).\n\n  * `set_rounding`, `get_rounding` and `with_rounding` now take an additional\n    argument specifying the floating point type to which they apply. The old\n    behaviour and `[get/set/with]_bigfloat_rounding` functions are deprecated ([#5007]).\n\n  * `cholpfact` and `qrpfact` are deprecated in favor of keyword arguments in\n    `cholfact(..., pivot=true)` and `qrfact(..., pivot=true)` ([#5330]).\n\n  * `symmetrize!` is deprecated in favor of `Base.LinAlg.copytri!` ([#5427]).\n\n  * `myindexes` has been renamed to `localindexes` ([#5475]).\n\n  * `factorize!` is deprecated in favor of `factorize` ([#5526]).\n\n  * `nnz` counts the number of structural nonzeros in a sparse\n    matrix. Use `countnz` for the actual number of nonzeros ([#6769]).\n\n  * `setfield` is renamed `setfield!` ([#5748]).\n\n  * `put` and `take` are renamed `put!` and `take!` ([#5511]).\n\n  * `put!` now returns its first argument, the remote reference ([#5819]).\n\n  * `read` methods that modify a passed array are now called `read!` ([#5970])\n\n  * `infs` and `nans` are deprecated in favor of the more general `fill`.\n\n  * `*` and `div` are no longer supported for `Char`.\n\n  * `Range` is renamed `StepRange` and `Range1` is renamed `UnitRange`.\n    `Ranges` is renamed `Range`.\n\n  * `bitmix` is replaced by a 2-argument form of `hash`.\n\n  * `readsfrom` and `writesto` are replaced by `open` ([#6948]).\n\n  * `insert!` now throws a `BoundsError` if\n    `index > length(collection)+1` ([#7373]).\n\n  * No longer exported from `Base`:\n    * `start_reading`, `stop_reading`, `start_watching` ([#10885]).\n\nJulia v0.2.0 Release Notes\n==========================\n\nThe 0.2 release brings improvements to many areas of Julia. Among the\nmost visible changes are support for 64-bit Windows, keyword arguments\nto functions, immutable types, a redesigned and polished package\nmanager, a multimedia interface supporting usage of Julia in IPython,\na built-in profiler, and major improvements to Julia's linear algebra,\nI/O, and parallel capabilities. These are accompanied by many other\nchanges adding new features, enhancing the library's consistency,\nimproving performance, increasing test coverage, easing installation,\nand expanding the documentation. While not part of Julia proper, the\npackage ecosystem has also grown and matured considerably since the\n0.1 release. See below for more information about the long list of\nchanges that improve Julia's usability and performance.\n\nNew language features\n---------------------\n\n  * Keyword & optional function arguments ([#485], [#1817]).\n\n  * Immutable types ([#13]).\n\n  * Triple-quoted string literals ([#70]).\n\n  * New infix operator `in` (e.g. `x in S`), and corresponding function\n    `in(x,S)`, replacing `contains(S,x)` function ([#2703]).\n\n  * New variable bindings on each for loop and comprehension iteration ([#1571]).\n    For example, before this change:\n\n        julia> map(f->f(), { ()->i for i=1:3 })\n        3-element Any Array:\n         3\n         3\n         3\n\n    and after:\n\n        julia> map(f->f(), { ()->i for i=1:3 })\n        3-element Any Array:\n         1\n         2\n         3\n\n  * Explicit relative importing ([#2375]).\n\n  * Methods can be added to functions in other modules using dot syntax,\n    as in `Foo.bar(x) = 0`.\n\n  * `import module: name1, name2, ...` ([#5214]).\n\n  * A semicolon is now allowed after an `import` or `using` statement ([#4130]).\n\n  * In an interactive session (REPL), you can use `;cmd` to run `cmd` via an interactive\n    shell. For example:\n\n        julia> ;ls\n        CONTRIBUTING.md  Makefile           VERSION      deps/      julia@  ui/\n        DISTRIBUTING.md  NEWS.md            Windows.inc  doc/       src/    usr/\n        LICENSE.md       README.md          base/        etc/       test/\n        Make.inc         README.windows.md  contrib/     examples/  tmp/\n\nNew library functions\n---------------------\n\n  * Sampling profiler ([#2597]).\n\n  * Functions for examining stages of the compiler's output:\n    `code_lowered`, `code_typed`, `code_llvm`, and `code_native`.\n\n  * Multimedia I/O API (display, writemime, etcetera) ([#3932]).\n\n  * MPFR-based `BigFloat` ([#2814]), and many new `BigFloat` operations.\n\n  * New half-precision IEEE floating-point type, `Float16` ([#3467]).\n\n  * Support for setting floating-point rounding modes ([#3149]).\n\n  * `methodswith` shows all methods with an argument of specific type.\n\n  * `mapslices` provides a general way to perform operations on slices of arrays ([#2204]).\n\n  * `repeat` function for constructing Arrays with repeated elements ([#3605]).\n\n  * `Collections.PriorityQueue` type and `Collections.heap` functions ([#2920]).\n\n  * `quadgk` 1d-integration routine ([#3140]).\n\n  * `erfinv` and `erfcinv` functions ([#2987]).\n\n  * `varm`, `stdm` ([#2265]).\n\n  * `digamma`, `invdigamma`, `trigamma` and `polygamma` for calculating derivatives of `gamma` function ([#3233]).\n\n  * `logdet` ([#3070]).\n\n  * Names for C-compatible types: `Cchar`, `Clong`, etc. ([#2370]).\n\n  * `cglobal` to access global variables ([#1815]).\n\n  * `unsafe_pointer_to_objref` ([#2468]) and `pointer_from_objref` ([#2515]).\n\n  * `readandwrite` for external processes.\n\n  * I/O functions `readbytes` and `readbytes!` ([#3878]).\n\n  * `flush_cstdio` function ([#3949]).\n\n  * ClusterManager makes it possible to support different types of compute clusters\n    ([#3649], [#4014]).\n\n  * `rmprocs` for removing processors from a parallel computing session.\n    The system can also tolerate to some extent processors that die unexpectedly\n    ([#3050]).\n\n  * `interrupt` for interrupting worker processes ([#3819]).\n\n  * `timedwait` does a polled wait for an event till a specified timeout.\n\n  * `Condition` type with `wait` and `notify` functions for `Task` synchronization.\n\n  * `versioninfo` provides detailed version information, especially useful when\n    reporting and diagnosing bugs.\n\n  * `detach` for running child processes in a separate process group.\n\n  * `setenv` for passing environment variables to child processes.\n\n  * `ifelse` eagerly-evaluated conditional function, especially useful for\n    vectorized conditionals.\n\nLibrary improvements\n--------------------\n\n  * `isequal` now returns `false` for numbers of different types.\n    This makes it much easier to define hashing for new numeric types.\n    Uses of `Dict` with numeric keys might need to change\n    to account for this increased strictness.\n\n  * A redesigned and rewritten `Pkg` system is much more robust in case of problems.\n    The basic interface to adding and removing package requirements remains the\n    same, but great deal of additional functionality for developing packages in-place\n    was added. See the new [packages chapter] in the manual for further details.\n\n  * Sorting API updates ([#3665]) \u2013 see [sorting functions].\n\n  * The `delete!(d::Dict, key)` function has been split into separate `pop!`\n    and `delete!` functions ([#3439]).\n    `pop!(d,key)` removes `key` from `d` and returns the value that was associated with it;\n    it throws an exception if `d` does not contain `key`.\n    `delete!(d,key)` removes `key` from `d` and succeeds regardless of whether `d`\n    contained `key` or not, returning `d` itself in either case.\n\n  * Linear-algebra factorization routines (`lu`, `chol`, etc.) now return\n    `Factorization` objects (and `lud`, `chold`, etc. are deprecated; [#2212]).\n\n  * A number of improvements to sparse matrix capabilities and sparse linear algebra.\n\n  * More linear algebra fixes and eigensolver hooks\n    for `SymTridiagonal`, `Tridiagonal` and `Bidiagonal` matrix types\n    ([#2606], [#2608], [#2609], [#2611], [#2678], [#2713], [#2720], [#2725]).\n\n  * Change `integer_valued`, `real_valued`, and so on to `isinteger`, `isreal`,\n    and so on, and semantics of the later are now value-based rather than type-based,\n    unlike MATLAB/Octave ([#3071]). `isbool` and `iscomplex` are eliminated in favor\n    of a general `iseltype` function.\n\n  * Transitive comparison of floats with rationals ([#3102]).\n\n  * Fast prime generation with `primes` and fast primality testing with `isprime`.\n\n  * `sum` and `cumsum` now use [pairwise summation] for better accuracy ([#4039]).\n\n  * Dot operators (`.+`, `.*` etc.) now broadcast singleton dimensions of array arguments.\n    This behavior can be applied to any function using `broadcast(f, ...)`.\n\n  * `combinations`, `permutations`, and `partitions` now return iterators instead of a task,\n    and `integer_partitions` has been renamed to `partitions` ([#3989], [#4055]).\n\n  * `isreadable`/`iswritable` methods added for more IO types ([#3872]).\n\n  * Much faster and improved `readdlm` and `writedlm` ([#3350], [#3468], [#3483]).\n\n  * Faster `matchall` ([#3719]), and various string and regex improvements.\n\n  * Documentation of advanced linear algebra features ([#2807]).\n\n  * Support optional RTLD flags in `dlopen` ([#2380]).\n\n  * `pmap` now works with any iterable collection.\n\n  * Options in `pmap` for retrying or ignoring failed tasks.\n\n  * New `sinpi(x)` and `cospi(x)` functions to compute sine and cosine of `pi*x`\n    more accurately ([#4112]).\n\n  * New implementations of elementary complex functions\n    `sqrt`, `log`, `asin`, `acos`, `atan`, `tanh`, `asinh`, `acosh`, `atanh`\n    with correct branch cuts ([#2891]).\n\n  * Improved behavior of `SubArray` ([#4412], [#4284], [#4044], [#3697], [#3790],\n    [#3148], [#2844], [#2644] and various other fixes).\n\n  * New convenience functions in graphics API.\n\n  * Improved backtraces on Windows and OS X.\n\n  * Implementation of reduction functions (including `reduce`, `mapreduce`, `sum`, `prod`,\n    `maximum`, `minimum`, `all`, and `any`) are refactored, with improved type stability,\n    efficiency, and consistency ([#6116], [#7035], [#7061], [#7106]).\n\nDeprecated or removed\n---------------------\n\n  * Methods of `min` and `max` that do reductions were renamed to\n    `minimum` and `maximum`. `min(x)` is now `minimum(x)`, and\n    `min(x,(),dim)` is now `minimum(x,dim)` ([#4235]).\n\n  * `ComplexPair` was renamed to `Complex` and made `immutable`,\n    and `Complex128` and so on are now aliases to the new `Complex` type.\n\n  * `!` was added to the name of many mutating functions,\n    e.g., `push` was renamed `push!` ([#907]).\n\n  * `ref` renamed to `getindex`, and `assign` to `setindex!` ([#1484]).\n\n  * `writeable` renamed to `writable` ([#3874]).\n\n  * `logb` and `ilogb` renamed to `exponent` ([#2516]).\n\n  * `quote_string` became a method of `repr`.\n\n  * `safe_char`, `check_ascii`, and `check_utf8` replaced by\n    `is_valid_char`, `is_valid_ascii`, and `is_valid_utf8`, respectively.\n\n  * `each_line`, `each_match`, `begins_with`, `ends_with`, `parse_float`,\n    `parse_int`, and `seek_end` replaced by: `eachline`, `eachmatch`, and so on\n    (`_` was removed) ([#1539]).\n\n  * `parse_bin(s)` replaced by `parseint(s,2)`;\n    `parse_oct(s)` replaced by `parseint(s,8)`;\n    `parse_hex(s)` replaced by `parseint(s,16)`.\n\n  * `findn_nzs` replaced by `findnz` ([#1539]).\n\n  * `DivideByZeroError` replaced by `DivideError`.\n\n  * `addprocs_ssh`, `addprocs_ssh_tunnel`, and `addprocs_local`\n    replaced by `addprocs` (with keyword options).\n\n  * `remote_call`, `remote_call_fetch`, and `remote_call_wait`\n    replaced by `remotecall`, `remotecall_fetch`, and `remotecall_wait`.\n\n  * `has` replaced by `in` for sets and by `haskey` for dictionaries.\n\n  * `diagmm` and `diagmm!` replaced by `scale` and `scale!` ([#2916]).\n\n  * `unsafe_ref` and `unsafe_assign` replaced by `unsafe_load` and `unsafe_store!`.\n\n  * `add_each!` and `del_each!` replaced by `union!` and `setdiff!`.\n\n  * `isdenormal` renamed to `issubnormal` ([#3105]).\n\n  * `expr` replaced by direct call to `Expr` constructor.\n\n  * `|`, `&`, `$`, `-`, and `~` for sets replaced by\n    `union`, `intersect`, `symdiff`, `setdiff`, and `complement` ([#3272]).\n\n  * `square` function removed.\n\n  * `pascal` function removed.\n\n  * `add` and `add!` for `Set` replaced by `push!`.\n\n  * `ls` function deprecated in favor of `readdir` or `;ls` in the REPL.\n\n  * `start_timer` now expects arguments in units of seconds, not milliseconds.\n\n  * Shell redirection operators `|`, `>`, and `<` eliminated in favor of a new\n    operator `|>` ([#3523]).\n\n  * `amap` is deprecated in favor of new `mapslices` functionality.\n\n  * The `Reverse` iterator was removed since it did not work in many cases.\n\n  * The `gcd` function now returns a non-negative value regardless of\n    the argument signs, and various other sign problems with `invmod`,\n    `lcm`, `gcdx`, and `powermod` were fixed ([#4811]).\n\nMiscellaneous changes\n---------------------\n\n  * `julia-release-*` executables renamed to `julia-*`,\n    and `libjulia-release` renamed to `libjulia` ([#4177]).\n\n  * Packages will now be installed in `.julia/vX.Y`, where\n    X.Y is the current Julia version.\n\nBugfixes and performance updates\n--------------------------------\n\nToo numerous to mention.\n\n[packages chapter]: http://docs.julialang.org/en/latest/manual/packages/\n[sorting functions]: http://docs.julialang.org/en/latest/stdlib/sort/\n[pairwise summation]: https://en.wikipedia.org/wiki/Pairwise_summation\n[a448e080]: https://github.com/JuliaLang/julia/commit/a448e080dc736c7fb326426dfcb2528be36973d3\n[5e3f074b]: https://github.com/JuliaLang/julia/commit/5e3f074b9173044a0a4219f9b285879ff7cec041\n<!--- generated by NEWS-update.jl: -->\n[#13]: https://github.com/JuliaLang/julia/issues/13\n[#69]: https://github.com/JuliaLang/julia/issues/69\n[#70]: https://github.com/JuliaLang/julia/issues/70\n[#101]: https://github.com/JuliaLang/julia/issues/101\n[#485]: https://github.com/JuliaLang/julia/issues/485\n[#552]: https://github.com/JuliaLang/julia/issues/552\n[#907]: https://github.com/JuliaLang/julia/issues/907\n[#987]: https://github.com/JuliaLang/julia/issues/987\n[#1195]: https://github.com/JuliaLang/julia/issues/1195\n[#1268]: https://github.com/JuliaLang/julia/issues/1268\n[#1470]: https://github.com/JuliaLang/julia/issues/1470\n[#1484]: https://github.com/JuliaLang/julia/issues/1484\n[#1539]: https://github.com/JuliaLang/julia/issues/1539\n[#1571]: https://github.com/JuliaLang/julia/issues/1571\n[#1815]: https://github.com/JuliaLang/julia/issues/1815\n[#1817]: https://github.com/JuliaLang/julia/issues/1817\n[#2204]: https://github.com/JuliaLang/julia/issues/2204\n[#2212]: https://github.com/JuliaLang/julia/issues/2212\n[#2265]: https://github.com/JuliaLang/julia/issues/2265\n[#2333]: https://github.com/JuliaLang/julia/issues/2333\n[#2345]: https://github.com/JuliaLang/julia/issues/2345\n[#2370]: https://github.com/JuliaLang/julia/issues/2370\n[#2375]: https://github.com/JuliaLang/julia/issues/2375\n[#2380]: https://github.com/JuliaLang/julia/issues/2380\n[#2403]: https://github.com/JuliaLang/julia/issues/2403\n[#2468]: https://github.com/JuliaLang/julia/issues/2468\n[#2488]: https://github.com/JuliaLang/julia/issues/2488\n[#2515]: https://github.com/JuliaLang/julia/issues/2515\n[#2516]: https://github.com/JuliaLang/julia/issues/2516\n[#2597]: https://github.com/JuliaLang/julia/issues/2597\n[#2606]: https://github.com/JuliaLang/julia/issues/2606\n[#2608]: https://github.com/JuliaLang/julia/issues/2608\n[#2609]: https://github.com/JuliaLang/julia/issues/2609\n[#2611]: https://github.com/JuliaLang/julia/issues/2611\n[#2644]: https://github.com/JuliaLang/julia/issues/2644\n[#2678]: https://github.com/JuliaLang/julia/issues/2678\n[#2703]: https://github.com/JuliaLang/julia/issues/2703\n[#2713]: https://github.com/JuliaLang/julia/issues/2713\n[#2720]: https://github.com/JuliaLang/julia/issues/2720\n[#2725]: https://github.com/JuliaLang/julia/issues/2725\n[#2807]: https://github.com/JuliaLang/julia/issues/2807\n[#2814]: https://github.com/JuliaLang/julia/issues/2814\n[#2844]: https://github.com/JuliaLang/julia/issues/2844\n[#2891]: https://github.com/JuliaLang/julia/issues/2891\n[#2916]: https://github.com/JuliaLang/julia/issues/2916\n[#2920]: https://github.com/JuliaLang/julia/issues/2920\n[#2987]: https://github.com/JuliaLang/julia/issues/2987\n[#3050]: https://github.com/JuliaLang/julia/issues/3050\n[#3070]: https://github.com/JuliaLang/julia/issues/3070\n[#3071]: https://github.com/JuliaLang/julia/issues/3071\n[#3102]: https://github.com/JuliaLang/julia/issues/3102\n[#3105]: https://github.com/JuliaLang/julia/issues/3105\n[#3140]: https://github.com/JuliaLang/julia/issues/3140\n[#3141]: https://github.com/JuliaLang/julia/issues/3141\n[#3148]: https://github.com/JuliaLang/julia/issues/3148\n[#3149]: https://github.com/JuliaLang/julia/issues/3149\n[#3214]: https://github.com/JuliaLang/julia/issues/3214\n[#3233]: https://github.com/JuliaLang/julia/issues/3233\n[#3272]: https://github.com/JuliaLang/julia/issues/3272\n[#3344]: https://github.com/JuliaLang/julia/issues/3344\n[#3350]: https://github.com/JuliaLang/julia/issues/3350\n[#3434]: https://github.com/JuliaLang/julia/issues/3434\n[#3439]: https://github.com/JuliaLang/julia/issues/3439\n[#3467]: https://github.com/JuliaLang/julia/issues/3467\n[#3468]: https://github.com/JuliaLang/julia/issues/3468\n[#3483]: https://github.com/JuliaLang/julia/issues/3483\n[#3523]: https://github.com/JuliaLang/julia/issues/3523\n[#3605]: https://github.com/JuliaLang/julia/issues/3605\n[#3631]: https://github.com/JuliaLang/julia/issues/3631\n[#3649]: https://github.com/JuliaLang/julia/issues/3649\n[#3665]: https://github.com/JuliaLang/julia/issues/3665\n[#3688]: https://github.com/JuliaLang/julia/issues/3688\n[#3697]: https://github.com/JuliaLang/julia/issues/3697\n[#3719]: https://github.com/JuliaLang/julia/issues/3719\n[#3721]: https://github.com/JuliaLang/julia/issues/3721\n[#3737]: https://github.com/JuliaLang/julia/issues/3737\n[#3759]: https://github.com/JuliaLang/julia/issues/3759\n[#3790]: https://github.com/JuliaLang/julia/issues/3790\n[#3819]: https://github.com/JuliaLang/julia/issues/3819\n[#3872]: https://github.com/JuliaLang/julia/issues/3872\n[#3874]: https://github.com/JuliaLang/julia/issues/3874\n[#3878]: https://github.com/JuliaLang/julia/issues/3878\n[#3932]: https://github.com/JuliaLang/julia/issues/3932\n[#3949]: https://github.com/JuliaLang/julia/issues/3949\n[#3989]: https://github.com/JuliaLang/julia/issues/3989\n[#4014]: https://github.com/JuliaLang/julia/issues/4014\n[#4026]: https://github.com/JuliaLang/julia/issues/4026\n[#4039]: https://github.com/JuliaLang/julia/issues/4039\n[#4042]: https://github.com/JuliaLang/julia/issues/4042\n[#4044]: https://github.com/JuliaLang/julia/issues/4044\n[#4048]: https://github.com/JuliaLang/julia/issues/4048\n[#4055]: https://github.com/JuliaLang/julia/issues/4055\n[#4112]: https://github.com/JuliaLang/julia/issues/4112\n[#4130]: https://github.com/JuliaLang/julia/issues/4130\n[#4177]: https://github.com/JuliaLang/julia/issues/4177\n[#4235]: https://github.com/JuliaLang/julia/issues/4235\n[#4284]: https://github.com/JuliaLang/julia/issues/4284\n[#4383]: https://github.com/JuliaLang/julia/issues/4383\n[#4412]: https://github.com/JuliaLang/julia/issues/4412\n[#4670]: https://github.com/JuliaLang/julia/issues/4670\n[#4759]: https://github.com/JuliaLang/julia/issues/4759\n[#4766]: https://github.com/JuliaLang/julia/issues/4766\n[#4775]: https://github.com/JuliaLang/julia/issues/4775\n[#4782]: https://github.com/JuliaLang/julia/issues/4782\n[#4799]: https://github.com/JuliaLang/julia/issues/4799\n[#4806]: https://github.com/JuliaLang/julia/issues/4806\n[#4811]: https://github.com/JuliaLang/julia/issues/4811\n[#4819]: https://github.com/JuliaLang/julia/issues/4819\n[#4862]: https://github.com/JuliaLang/julia/issues/4862\n[#4870]: https://github.com/JuliaLang/julia/issues/4870\n[#4871]: https://github.com/JuliaLang/julia/issues/4871\n[#4874]: https://github.com/JuliaLang/julia/issues/4874\n[#4882]: https://github.com/JuliaLang/julia/issues/4882\n[#4888]: https://github.com/JuliaLang/julia/issues/4888\n[#4923]: https://github.com/JuliaLang/julia/issues/4923\n[#4930]: https://github.com/JuliaLang/julia/issues/4930\n[#4934]: https://github.com/JuliaLang/julia/issues/4934\n[#4943]: https://github.com/JuliaLang/julia/issues/4943\n[#4958]: https://github.com/JuliaLang/julia/issues/4958\n[#4967]: https://github.com/JuliaLang/julia/issues/4967\n[#4996]: https://github.com/JuliaLang/julia/issues/4996\n[#5007]: https://github.com/JuliaLang/julia/issues/5007\n[#5025]: https://github.com/JuliaLang/julia/issues/5025\n[#5059]: https://github.com/JuliaLang/julia/issues/5059\n[#5076]: https://github.com/JuliaLang/julia/issues/5076\n[#5154]: https://github.com/JuliaLang/julia/issues/5154\n[#5164]: https://github.com/JuliaLang/julia/issues/5164\n[#5196]: https://github.com/JuliaLang/julia/issues/5196\n[#5214]: https://github.com/JuliaLang/julia/issues/5214\n[#5227]: https://github.com/JuliaLang/julia/issues/5227\n[#5255]: https://github.com/JuliaLang/julia/issues/5255\n[#5263]: https://github.com/JuliaLang/julia/issues/5263\n[#5275]: https://github.com/JuliaLang/julia/issues/5275\n[#5277]: https://github.com/JuliaLang/julia/issues/5277\n[#5330]: https://github.com/JuliaLang/julia/issues/5330\n[#5349]: https://github.com/JuliaLang/julia/issues/5349\n[#5358]: https://github.com/JuliaLang/julia/issues/5358\n[#5380]: https://github.com/JuliaLang/julia/issues/5380\n[#5381]: https://github.com/JuliaLang/julia/issues/5381\n[#5387]: https://github.com/JuliaLang/julia/issues/5387\n[#5403]: https://github.com/JuliaLang/julia/issues/5403\n[#5413]: https://github.com/JuliaLang/julia/issues/5413\n[#5423]: https://github.com/JuliaLang/julia/issues/5423\n[#5427]: https://github.com/JuliaLang/julia/issues/5427\n[#5428]: https://github.com/JuliaLang/julia/issues/5428\n[#5430]: https://github.com/JuliaLang/julia/issues/5430\n[#5462]: https://github.com/JuliaLang/julia/issues/5462\n[#5464]: https://github.com/JuliaLang/julia/issues/5464\n[#5468]: https://github.com/JuliaLang/julia/issues/5468\n[#5475]: https://github.com/JuliaLang/julia/issues/5475\n[#5511]: https://github.com/JuliaLang/julia/issues/5511\n[#5526]: https://github.com/JuliaLang/julia/issues/5526\n[#5545]: https://github.com/JuliaLang/julia/issues/5545\n[#5576]: https://github.com/JuliaLang/julia/issues/5576\n[#5585]: https://github.com/JuliaLang/julia/issues/5585\n[#5636]: https://github.com/JuliaLang/julia/issues/5636\n[#5671]: https://github.com/JuliaLang/julia/issues/5671\n[#5677]: https://github.com/JuliaLang/julia/issues/5677\n[#5703]: https://github.com/JuliaLang/julia/issues/5703\n[#5704]: https://github.com/JuliaLang/julia/issues/5704\n[#5726]: https://github.com/JuliaLang/julia/issues/5726\n[#5737]: https://github.com/JuliaLang/julia/issues/5737\n[#5748]: https://github.com/JuliaLang/julia/issues/5748\n[#5776]: https://github.com/JuliaLang/julia/issues/5776\n[#5778]: https://github.com/JuliaLang/julia/issues/5778\n[#5810]: https://github.com/JuliaLang/julia/issues/5810\n[#5811]: https://github.com/JuliaLang/julia/issues/5811\n[#5819]: https://github.com/JuliaLang/julia/issues/5819\n[#5827]: https://github.com/JuliaLang/julia/issues/5827\n[#5832]: https://github.com/JuliaLang/julia/issues/5832\n[#5927]: https://github.com/JuliaLang/julia/issues/5927\n[#5936]: https://github.com/JuliaLang/julia/issues/5936\n[#5939]: https://github.com/JuliaLang/julia/issues/5939\n[#5970]: https://github.com/JuliaLang/julia/issues/5970\n[#6056]: https://github.com/JuliaLang/julia/issues/6056\n[#6057]: https://github.com/JuliaLang/julia/issues/6057\n[#6073]: https://github.com/JuliaLang/julia/issues/6073\n[#6081]: https://github.com/JuliaLang/julia/issues/6081\n[#6116]: https://github.com/JuliaLang/julia/issues/6116\n[#6128]: https://github.com/JuliaLang/julia/issues/6128\n[#6169]: https://github.com/JuliaLang/julia/issues/6169\n[#6179]: https://github.com/JuliaLang/julia/issues/6179\n[#6197]: https://github.com/JuliaLang/julia/issues/6197\n[#6211]: https://github.com/JuliaLang/julia/issues/6211\n[#6212]: https://github.com/JuliaLang/julia/issues/6212\n[#6270]: https://github.com/JuliaLang/julia/issues/6270\n[#6273]: https://github.com/JuliaLang/julia/issues/6273\n[#6582]: https://github.com/JuliaLang/julia/issues/6582\n[#6624]: https://github.com/JuliaLang/julia/issues/6624\n[#6652]: https://github.com/JuliaLang/julia/issues/6652\n[#6678]: https://github.com/JuliaLang/julia/issues/6678\n[#6716]: https://github.com/JuliaLang/julia/issues/6716\n[#6726]: https://github.com/JuliaLang/julia/issues/6726\n[#6739]: https://github.com/JuliaLang/julia/issues/6739\n[#6769]: https://github.com/JuliaLang/julia/issues/6769\n[#6773]: https://github.com/JuliaLang/julia/issues/6773\n[#6911]: https://github.com/JuliaLang/julia/issues/6911\n[#6920]: https://github.com/JuliaLang/julia/issues/6920\n[#6929]: https://github.com/JuliaLang/julia/issues/6929\n[#6948]: https://github.com/JuliaLang/julia/issues/6948\n[#7016]: https://github.com/JuliaLang/julia/issues/7016\n[#7035]: https://github.com/JuliaLang/julia/issues/7035\n[#7047]: https://github.com/JuliaLang/julia/issues/7047\n[#7061]: https://github.com/JuliaLang/julia/issues/7061\n[#7064]: https://github.com/JuliaLang/julia/issues/7064\n[#7071]: https://github.com/JuliaLang/julia/issues/7071\n[#7094]: https://github.com/JuliaLang/julia/issues/7094\n[#7106]: https://github.com/JuliaLang/julia/issues/7106\n[#7125]: https://github.com/JuliaLang/julia/issues/7125\n[#7131]: https://github.com/JuliaLang/julia/issues/7131\n[#7146]: https://github.com/JuliaLang/julia/issues/7146\n[#7234]: https://github.com/JuliaLang/julia/issues/7234\n[#7236]: https://github.com/JuliaLang/julia/issues/7236\n[#7242]: https://github.com/JuliaLang/julia/issues/7242\n[#7264]: https://github.com/JuliaLang/julia/issues/7264\n[#7311]: https://github.com/JuliaLang/julia/issues/7311\n[#7359]: https://github.com/JuliaLang/julia/issues/7359\n[#7365]: https://github.com/JuliaLang/julia/issues/7365\n[#7373]: https://github.com/JuliaLang/julia/issues/7373\n[#7390]: https://github.com/JuliaLang/julia/issues/7390\n[#7435]: https://github.com/JuliaLang/julia/issues/7435\n[#7464]: https://github.com/JuliaLang/julia/issues/7464\n[#7513]: https://github.com/JuliaLang/julia/issues/7513\n[#7616]: https://github.com/JuliaLang/julia/issues/7616\n[#7647]: https://github.com/JuliaLang/julia/issues/7647\n[#7654]: https://github.com/JuliaLang/julia/issues/7654\n[#7704]: https://github.com/JuliaLang/julia/issues/7704\n[#7917]: https://github.com/JuliaLang/julia/issues/7917\n[#7992]: https://github.com/JuliaLang/julia/issues/7992\n[#8011]: https://github.com/JuliaLang/julia/issues/8011\n[#8089]: https://github.com/JuliaLang/julia/issues/8089\n[#8113]: https://github.com/JuliaLang/julia/issues/8113\n[#8135]: https://github.com/JuliaLang/julia/issues/8135\n[#8152]: https://github.com/JuliaLang/julia/issues/8152\n[#8246]: https://github.com/JuliaLang/julia/issues/8246\n[#8283]: https://github.com/JuliaLang/julia/issues/8283\n[#8297]: https://github.com/JuliaLang/julia/issues/8297\n[#8320]: https://github.com/JuliaLang/julia/issues/8320\n[#8399]: https://github.com/JuliaLang/julia/issues/8399\n[#8423]: https://github.com/JuliaLang/julia/issues/8423\n[#8432]: https://github.com/JuliaLang/julia/issues/8432\n[#8467]: https://github.com/JuliaLang/julia/issues/8467\n[#8501]: https://github.com/JuliaLang/julia/issues/8501\n[#8560]: https://github.com/JuliaLang/julia/issues/8560\n[#8578]: https://github.com/JuliaLang/julia/issues/8578\n[#8599]: https://github.com/JuliaLang/julia/issues/8599\n[#8605]: https://github.com/JuliaLang/julia/issues/8605\n[#8624]: https://github.com/JuliaLang/julia/issues/8624\n[#8660]: https://github.com/JuliaLang/julia/issues/8660\n[#8672]: https://github.com/JuliaLang/julia/issues/8672\n[#8712]: https://github.com/JuliaLang/julia/issues/8712\n[#8734]: https://github.com/JuliaLang/julia/issues/8734\n[#8745]: https://github.com/JuliaLang/julia/issues/8745\n[#8750]: https://github.com/JuliaLang/julia/issues/8750\n[#8776]: https://github.com/JuliaLang/julia/issues/8776\n[#8791]: https://github.com/JuliaLang/julia/issues/8791\n[#8792]: https://github.com/JuliaLang/julia/issues/8792\n[#8808]: https://github.com/JuliaLang/julia/issues/8808\n[#8816]: https://github.com/JuliaLang/julia/issues/8816\n[#8827]: https://github.com/JuliaLang/julia/issues/8827\n[#8832]: https://github.com/JuliaLang/julia/issues/8832\n[#8845]: https://github.com/JuliaLang/julia/issues/8845\n[#8854]: https://github.com/JuliaLang/julia/issues/8854\n[#8867]: https://github.com/JuliaLang/julia/issues/8867\n[#8872]: https://github.com/JuliaLang/julia/issues/8872\n[#8897]: https://github.com/JuliaLang/julia/issues/8897\n[#8905]: https://github.com/JuliaLang/julia/issues/8905\n[#8941]: https://github.com/JuliaLang/julia/issues/8941\n[#8958]: https://github.com/JuliaLang/julia/issues/8958\n[#9017]: https://github.com/JuliaLang/julia/issues/9017\n[#9049]: https://github.com/JuliaLang/julia/issues/9049\n[#9065]: https://github.com/JuliaLang/julia/issues/9065\n[#9083]: https://github.com/JuliaLang/julia/issues/9083\n[#9105]: https://github.com/JuliaLang/julia/issues/9105\n[#9122]: https://github.com/JuliaLang/julia/issues/9122\n[#9126]: https://github.com/JuliaLang/julia/issues/9126\n[#9132]: https://github.com/JuliaLang/julia/issues/9132\n[#9133]: https://github.com/JuliaLang/julia/issues/9133\n[#9144]: https://github.com/JuliaLang/julia/issues/9144\n[#9198]: https://github.com/JuliaLang/julia/issues/9198\n[#9249]: https://github.com/JuliaLang/julia/issues/9249\n[#9261]: https://github.com/JuliaLang/julia/issues/9261\n[#9271]: https://github.com/JuliaLang/julia/issues/9271\n[#9294]: https://github.com/JuliaLang/julia/issues/9294\n[#9309]: https://github.com/JuliaLang/julia/issues/9309\n[#9418]: https://github.com/JuliaLang/julia/issues/9418\n[#9425]: https://github.com/JuliaLang/julia/issues/9425\n[#9434]: https://github.com/JuliaLang/julia/issues/9434\n[#9452]: https://github.com/JuliaLang/julia/issues/9452\n[#9487]: https://github.com/JuliaLang/julia/issues/9487\n[#9569]: https://github.com/JuliaLang/julia/issues/9569\n[#9575]: https://github.com/JuliaLang/julia/issues/9575\n[#9578]: https://github.com/JuliaLang/julia/issues/9578\n[#9597]: https://github.com/JuliaLang/julia/issues/9597\n[#9666]: https://github.com/JuliaLang/julia/issues/9666\n[#9690]: https://github.com/JuliaLang/julia/issues/9690\n[#9701]: https://github.com/JuliaLang/julia/issues/9701\n[#9714]: https://github.com/JuliaLang/julia/issues/9714\n[#9734]: https://github.com/JuliaLang/julia/issues/9734\n[#9745]: https://github.com/JuliaLang/julia/issues/9745\n[#9779]: https://github.com/JuliaLang/julia/issues/9779\n[#9862]: https://github.com/JuliaLang/julia/issues/9862\n[#9957]: https://github.com/JuliaLang/julia/issues/9957\n[#10008]: https://github.com/JuliaLang/julia/issues/10008\n[#10024]: https://github.com/JuliaLang/julia/issues/10024\n[#10031]: https://github.com/JuliaLang/julia/issues/10031\n[#10075]: https://github.com/JuliaLang/julia/issues/10075\n[#10117]: https://github.com/JuliaLang/julia/issues/10117\n[#10150]: https://github.com/JuliaLang/julia/issues/10150\n[#10168]: https://github.com/JuliaLang/julia/issues/10168\n[#10180]: https://github.com/JuliaLang/julia/issues/10180\n[#10228]: https://github.com/JuliaLang/julia/issues/10228\n[#10328]: https://github.com/JuliaLang/julia/issues/10328\n[#10331]: https://github.com/JuliaLang/julia/issues/10331\n[#10332]: https://github.com/JuliaLang/julia/issues/10332\n[#10333]: https://github.com/JuliaLang/julia/issues/10333\n[#10380]: https://github.com/JuliaLang/julia/issues/10380\n[#10400]: https://github.com/JuliaLang/julia/issues/10400\n[#10446]: https://github.com/JuliaLang/julia/issues/10446\n[#10458]: https://github.com/JuliaLang/julia/issues/10458\n[#10472]: https://github.com/JuliaLang/julia/issues/10472\n[#10525]: https://github.com/JuliaLang/julia/issues/10525\n[#10543]: https://github.com/JuliaLang/julia/issues/10543\n[#10659]: https://github.com/JuliaLang/julia/issues/10659\n[#10679]: https://github.com/JuliaLang/julia/issues/10679\n[#10709]: https://github.com/JuliaLang/julia/issues/10709\n[#10714]: https://github.com/JuliaLang/julia/issues/10714\n[#10747]: https://github.com/JuliaLang/julia/issues/10747\n[#10844]: https://github.com/JuliaLang/julia/issues/10844\n[#10870]: https://github.com/JuliaLang/julia/issues/10870\n[#10885]: https://github.com/JuliaLang/julia/issues/10885\n[#10888]: https://github.com/JuliaLang/julia/issues/10888\n[#10893]: https://github.com/JuliaLang/julia/issues/10893\n[#10914]: https://github.com/JuliaLang/julia/issues/10914\n[#10955]: https://github.com/JuliaLang/julia/issues/10955\n[#10994]: https://github.com/JuliaLang/julia/issues/10994\n[#11030]: https://github.com/JuliaLang/julia/issues/11030\n[#11067]: https://github.com/JuliaLang/julia/issues/11067\n[#11105]: https://github.com/JuliaLang/julia/issues/11105\n[#11145]: https://github.com/JuliaLang/julia/issues/11145\n[#11171]: https://github.com/JuliaLang/julia/issues/11171\n[#11241]: https://github.com/JuliaLang/julia/issues/11241\n[#11279]: https://github.com/JuliaLang/julia/issues/11279\n[#11347]: https://github.com/JuliaLang/julia/issues/11347\n[#11379]: https://github.com/JuliaLang/julia/issues/11379\n[#11432]: https://github.com/JuliaLang/julia/issues/11432\n[#11566]: https://github.com/JuliaLang/julia/issues/11566\n[#11686]: https://github.com/JuliaLang/julia/issues/11686\n[#11741]: https://github.com/JuliaLang/julia/issues/11741\n[#11849]: https://github.com/JuliaLang/julia/issues/11849\n[#11891]: https://github.com/JuliaLang/julia/issues/11891\n[#11922]: https://github.com/JuliaLang/julia/issues/11922\n[#11947]: https://github.com/JuliaLang/julia/issues/11947\n[#11985]: https://github.com/JuliaLang/julia/issues/11985\n[#12025]: https://github.com/JuliaLang/julia/issues/12025\n[#12031]: https://github.com/JuliaLang/julia/issues/12031\n[#12034]: https://github.com/JuliaLang/julia/issues/12034\n[#12087]: https://github.com/JuliaLang/julia/issues/12087\n[#12137]: https://github.com/JuliaLang/julia/issues/12137\n[#12162]: https://github.com/JuliaLang/julia/issues/12162\n[#12264]: https://github.com/JuliaLang/julia/issues/12264\n[#12385]: https://github.com/JuliaLang/julia/issues/12385\n[#12393]: https://github.com/JuliaLang/julia/issues/12393\n[#12458]: https://github.com/JuliaLang/julia/issues/12458\n[#12472]: https://github.com/JuliaLang/julia/issues/12472\n[#12491]: https://github.com/JuliaLang/julia/issues/12491\n[#12576]: https://github.com/JuliaLang/julia/issues/12576\n[#12727]: https://github.com/JuliaLang/julia/issues/12727\n[#12739]: https://github.com/JuliaLang/julia/issues/12739\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/test/libdl.jl": "# This file is a part of Julia. License is MIT: http://julialang.org/license\n\n# these could fail on an embedded installation\n# but for now, we don't handle that case\ndlls = Libdl.dllist()\n@test !isempty(dlls)\n@test length(dlls) > 3 # at a bare minimum, probably have some version of libstdc, libgcc, libjulia, ...\nif @unix? true : (Base.windows_version() >= Base.WINDOWS_VISTA_VER)\n    for dl in dlls\n        if isfile(dl) && (Libdl.dlopen_e(dl) != C_NULL)\n            @test Base.samefile(Libdl.dlpath(dl), dl)\n        end\n    end\nend\n@test length(filter(dlls) do dl\n        return ismatch(Regex(\"^libjulia(?:.*)\\.$(Libdl.dlext)(?:\\..+)?\\$\"), basename(dl))\n    end) == 1 # look for something libjulia-like (but only one)\n\n# library handle pointer must not be NULL\n@test_throws ArgumentError Libdl.dlsym(C_NULL, :foo)\n@test_throws ArgumentError Libdl.dlsym_e(C_NULL, :foo)\n\ncd(dirname(@__FILE__)) do\n\n# @test !isempty(Libdl.find_library([\"libccalltest\"], [dirname(@__FILE__)]))\n\n# Find the private library directory by finding the path of libjulia (or libjulia-debug, as the case may be)\nif ccall(:jl_is_debugbuild, Cint, ()) != 0\n    private_libdir = dirname(abspath(Libdl.dlpath(\"libjulia-debug\")))\nelse\n    private_libdir = dirname(abspath(Libdl.dlpath(\"libjulia\")))\nend\n\n# dlopen should be able to handle absolute and relative paths, with and without dlext\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(abspath(joinpath(private_libdir, \"libccalltest\")))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(abspath(joinpath(private_libdir, \"libccalltest.$(Libdl.dlext)\")))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(relpath(joinpath(private_libdir, \"libccalltest\")))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(relpath(joinpath(private_libdir, \"libccalltest.$(Libdl.dlext)\")))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(\"./foo\")\n        @test dl == C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\n# unqualified names present in DL_LOAD_PATH\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(\"libccalltest\")\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(string(\"libccalltest\",\".\",Libdl.dlext))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\n# path with dlopen-able file first in load path\n#=\nlet dl = C_NULL,\n    tmpdir = mktempdir(),\n    fpath = joinpath(tmpdir,\"libccalltest\")\n    try\n        write(open(fpath,\"w\"))\n        push!(Libdl.DL_LOAD_PATH, dirname(@__FILE__))\n        push!(Libdl.DL_LOAD_PATH, dirname(fpath))\n        dl = Libdl.dlopen_e(\"libccalltest\")\n        @test dl != C_NULL\n    finally\n        pop!(Libdl.DL_LOAD_PATH)\n        pop!(Libdl.DL_LOAD_PATH)\n        rm(tmpdir, recursive=true)\n    end\nend\n=#\n\n# path with dlopen-able file second in load path\n#=\nlet dl = C_NULL,\n    tmpdir = mktempdir(),\n    fpath = joinpath(tmpdir,\"libccalltest\")\n    try\n        write(open(fpath,\"w\"))\n        push!(Libdl.DL_LOAD_PATH, dirname(fpath))\n        push!(Libdl.DL_LOAD_PATH, dirname(@__FILE__))\n        dl = Libdl.dlopen_e(\"libccalltest\")\n        @test dl != C_NULL\n    finally\n        pop!(Libdl.DL_LOAD_PATH)\n        pop!(Libdl.DL_LOAD_PATH)\n        rm(tmpdir, recursive=true)\n    end\nend\n=#\n\n# test dlpath\nlet dl = C_NULL\n    try\n        path = abspath(joinpath(private_libdir, \"libccalltest\"))\n        dl = Libdl.dlopen(path)\n        @test dl != C_NULL\n        @test Base.samefile(abspath(Libdl.dlpath(dl)),\n                            abspath(Libdl.dlpath(path)))\n        @test Base.samefile(abspath(Libdl.dlpath(dl)),\n                            string(path,\".\",Libdl.dlext))\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\n# opening a library that does not exist throws an ErrorException\n@test_throws ErrorException Libdl.dlopen(\"./foo\")\n\n# test dlsym\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen(abspath(joinpath(private_libdir, \"libccalltest\")))\n        fptr = Libdl.dlsym(dl, :set_verbose)\n        @test fptr != C_NULL\n        @test_throws ErrorException Libdl.dlsym(dl, :foo)\n\n        fptr = Libdl.dlsym_e(dl, :set_verbose)\n        @test fptr != C_NULL\n        fptr = Libdl.dlsym_e(dl, :foo)\n        @test fptr == C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nend\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/test/cmdlineargs.jl": "# This file is a part of Julia. License is MIT: http://julialang.org/license\n\nlet exename = `$(joinpath(JULIA_HOME, Base.julia_exename())) --precompiled=yes`\n    # --version\n    let v = split(readall(`$exename -v`), \"julia version \")[end]\n        @test Base.VERSION_STRING == chomp(v)\n    end\n    @test readall(`$exename -v`) == readall(`$exename --version`)\n\n    # --help\n    let header = \"julia [switches] -- [programfile] [args...]\"\n        @test startswith(readall(`$exename -h`), header)\n        @test startswith(readall(`$exename --help`), header)\n    end\n\n    # --quiet\n    # This flag is indirectly tested in test/repl.jl\n\n    # --home\n    @test success(`$exename -H $JULIA_HOME`)\n    @test success(`$exename --home=$JULIA_HOME`)\n\n    # --eval\n    @test  success(`$exename -e \"exit(0)\"`)\n    @test !success(`$exename -e \"exit(1)\"`)\n    @test  success(`$exename --eval=\"exit(0)\"`)\n    @test !success(`$exename --eval=\"exit(1)\"`)\n    @test !success(`$exename -e`)\n    @test !success(`$exename --eval`)\n\n    # --print\n    @test readall(`$exename -E \"1+1\"`) == \"2\\n\"\n    @test readall(`$exename --print=\"1+1\"`) == \"2\\n\"\n    @test !success(`$exename -E`)\n    @test !success(`$exename --print`)\n\n    # --post-boot\n    @test  success(`$exename -P \"exit(0)\"`)\n    @test !success(`$exename -P \"exit(1)\"`)\n    @test  success(`$exename --post-boot=\"exit(0)\"`)\n    @test !success(`$exename --post-boot=\"exit(1)\"`)\n    @test !success(`$exename -P`)\n    @test !success(`$exename --post-boot`)\n\n    # --load\n    let testfile = tempname()\n        try\n            open(testfile, \"w\") do io\n                println(io, \"testvar = :test\")\n            end\n            @test split(readchomp(`$exename --load=$testfile -P \"println(testvar)\"`), '\\n')[end] == \"test\"\n            @test split(readchomp(`$exename -P \"println(testvar)\" -L $testfile`), '\\n')[end] == \"test\"\n        finally\n            rm(testfile)\n        end\n    end\n    # -L, --load requires an argument\n    @test !success(`$exename -L`)\n    @test !success(`$exename --load`)\n\n    # --cpu-target\n    # NOTE: this test only holds true when there is a sys.{dll,dylib,so} shared library present.\n    # The tests are also limited to unix platforms at the moment because loading the system image\n    # not turned on for Window's binary builds at the moment.\n    @unix_only if Libdl.dlopen_e(splitext(bytestring(Base.JLOptions().image_file))[1]) != C_NULL\n        @test !success(`$exename -C invalidtarget`)\n        @test !success(`$exename --cpu-target=invalidtarget`)\n    end\n\n    # --procs\n    @test readchomp(`$exename -q -p 2 -P \"println(nworkers()); exit(0)\"`) == \"2\"\n    @test !success(`$exename -p 0`)\n    @test !success(`$exename --procs=1.0`)\n\n    # --machinefile\n    # this does not check that machinefile works,\n    # only that the filename gets correctly passed to the option struct\n    let fname = tempname()\n        touch(fname)\n        fname = realpath(fname)\n        try\n            @test readchomp(`$exename --machinefile $fname -e \"println(bytestring(Base.JLOptions().machinefile))\"`) == fname\n        finally\n            rm(fname)\n        end\n    end\n\n    # -i, isinteractive\n    @test readchomp(`$exename -E \"isinteractive()\"`) == \"false\"\n    @test readchomp(`$exename -E \"isinteractive()\" -i`) == \"true\"\n\n    # --color\n    @test readchomp(`$exename --color=yes -E \"Base.have_color\"`) == \"true\"\n    @test readchomp(`$exename --color=no -E \"Base.have_color\"`) == \"false\"\n    @test !success(`$exename --color=false`)\n\n    # --history-file\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().historyfile)\" --history-file=yes`) == \"true\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().historyfile)\" --history-file=no`) == \"false\"\n    # deprecated\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().historyfile)\" --no-history-file`) == \"false\"\n    @test !success(`$exename --history-file=false`)\n\n    # --startup-file\n    let JL_OPTIONS_STARTUPFILE_ON = 1,\n        JL_OPTIONS_STARTUPFILE_OFF = 2\n        @test parse(Int,readchomp(`$exename -E \"Base.JLOptions().startupfile\" --startup-file=yes`)) == JL_OPTIONS_STARTUPFILE_ON\n        @test parse(Int,readchomp(`$exename -E \"Base.JLOptions().startupfile\" --startup-file=no`)) == JL_OPTIONS_STARTUPFILE_OFF\n    end\n    @test !success(`$exename --startup-file=false`)\n\n    # --code-coverage\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().code_coverage)\"`) == \"false\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().code_coverage)\" --code-coverage=none`) == \"false\"\n\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().code_coverage)\" --code-coverage`) == \"true\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().code_coverage)\" --code-coverage=user`) == \"true\"\n\n    # --track-allocation\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().malloc_log)\"`) == \"false\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().malloc_log)\" --track-allocation=none`) == \"false\"\n\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().malloc_log)\" --track-allocation`) == \"true\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().malloc_log)\" --track-allocation=user`) == \"true\"\n\n    # --optimize\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().opt_level)\"`) == \"false\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().opt_level)\" -O`) == \"true\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().opt_level)\" --optimize`) == \"true\"\n\n    # --check-bounds\n    let JL_OPTIONS_CHECK_BOUNDS_DEFAULT = 0,\n        JL_OPTIONS_CHECK_BOUNDS_ON = 1,\n        JL_OPTIONS_CHECK_BOUNDS_OFF = 2\n        @test parse(Int,readchomp(`$exename -E \"Int(Base.JLOptions().check_bounds)\"`)) == JL_OPTIONS_CHECK_BOUNDS_DEFAULT\n        @test parse(Int,readchomp(`$exename -E \"Int(Base.JLOptions().check_bounds)\" --check-bounds=yes`)) == JL_OPTIONS_CHECK_BOUNDS_ON\n        @test parse(Int,readchomp(`$exename -E \"Int(Base.JLOptions().check_bounds)\" --check-bounds=no`)) == JL_OPTIONS_CHECK_BOUNDS_OFF\n    end\n    # check-bounds takes yes/no as argument\n    @test !success(`$exename -E \"exit(0)\" --check-bounds=false`)\n\n    # --depwarn\n    @test readchomp(`$exename --depwarn=no -E \"Base.syntax_deprecation_warnings(true)\"`) == \"false\"\n    @test readchomp(`$exename --depwarn=yes -E \"Base.syntax_deprecation_warnings(false)\"`) == \"true\"\n    @test !success(`$exename --depwarn=false`)\n    # test deprecated syntax\n    @test !success(`$exename -e \"foo (x::Int) = x * x\" --depwarn=error`)\n    # test deprecated method\n    @test !success(`$exename -e \"\n        foo() = :foo; bar() = :bar\n        @deprecate foo() bar()\n        foo()\n    \" --depwarn=error`)\n\n    # test deprecated bindings, #13269\n    let code = \"\"\"\n        module Foo\n            import Base: @deprecate_binding\n\n            const NotDeprecated = true\n            @deprecate_binding Deprecated NotDeprecated\n        end\n\n        Foo.Deprecated\n        \"\"\"\n\n        @test !success(`$exename -E \"$code\" --depwarn=error`)\n\n        # FIXME these should also be run on windows once the bug causing them to hang gets fixed\n        @unix_only let out  = Pipe(),\n                       proc = spawn(pipeline(`$exename -E \"$code\" --depwarn=yes`, stderr=out))\n\n            wait(proc)\n            close(out.in)\n            @test success(proc)\n            @test readchomp(out) == \"WARNING: Foo.Deprecated is deprecated.\\n  likely near no file:5\"\n        end\n\n        @unix_only let out  = Pipe(),\n                       proc = spawn(pipeline(`$exename -E \"$code\" --depwarn=no`, stderr=out))\n\n            wait(proc)\n            close(out.in)\n            @test success(proc)\n            @test isempty(readall(out))\n        end\n    end\n\n    # --inline\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().can_inline)\"`) == \"true\"\n    @test readchomp(`$exename --inline=yes -E \"Bool(Base.JLOptions().can_inline)\"`) == \"true\"\n    @test readchomp(`$exename --inline=no -E \"Bool(Base.JLOptions().can_inline)\"`) == \"false\"\n    # --inline takes yes/no as arugment\n    @test !success(`$exename --inline=false`)\n\n    # --fast-math\n    let JL_OPTIONS_FAST_MATH_DEFAULT = 0,\n        JL_OPTIONS_FAST_MATH_ON = 1,\n        JL_OPTIONS_FAST_MATH_OFF = 2\n        @test parse(Int,readchomp(`$exename -E \"Int(Base.JLOptions().fast_math)\"`)) == JL_OPTIONS_FAST_MATH_DEFAULT\n        @test parse(Int,readchomp(`$exename --math-mode=user -E \"Int(Base.JLOptions().fast_math)\"`)) == JL_OPTIONS_FAST_MATH_DEFAULT\n        @test parse(Int,readchomp(`$exename --math-mode=ieee -E \"Int(Base.JLOptions().fast_math)\"`)) == JL_OPTIONS_FAST_MATH_OFF\n        @test parse(Int,readchomp(`$exename --math-mode=fast -E \"Int(Base.JLOptions().fast_math)\"`)) == JL_OPTIONS_FAST_MATH_ON\n    end\n\n    # --worker takes default / custom as arugment (default/custom arguments tested in test/parallel.jl, test/examples.jl)\n    @test !success(`$exename --worker=true`)\n\n    # test passing arguments\n    let testfile = tempname()\n        try\n            # write a julia source file that just prints ARGS to STDOUT and exits\n            open(testfile, \"w\") do io\n                println(io, \"println(ARGS)\")\n                println(io, \"exit(0)\")\n            end\n            @test readchomp(`$exename $testfile foo -bar --baz`) ==  \"UTF8String[\\\"foo\\\",\\\"-bar\\\",\\\"--baz\\\"]\"\n            @test readchomp(`$exename $testfile -- foo -bar --baz`) ==  \"UTF8String[\\\"foo\\\",\\\"-bar\\\",\\\"--baz\\\"]\"\n            @test readchomp(`$exename -L $testfile -- foo -bar --baz`) ==  \"UTF8String[\\\"foo\\\",\\\"-bar\\\",\\\"--baz\\\"]\"\n            @test !success(`$exename --foo $testfile`)\n            @test !success(`$exename -L $testfile -- foo -bar -- baz`)\n        finally\n            rm(testfile)\n        end\n    end\n\n    # issue #10562\n    @test readchomp(`$exename -e 'println(ARGS);' ''`) == \"UTF8String[\\\"\\\"]\"\n\n    # issue #12679\n    extrapath = @windows? joinpath(JULIA_HOME,\"..\",\"Git\",\"usr\",\"bin\")*\";\" : \"\"\n    withenv(\"PATH\" => extrapath * ENV[\"PATH\"]) do\n        @test readchomp(pipeline(ignorestatus(`$exename -f --compile=yes -foo`),stderr=`cat`)) == \"ERROR: unknown option `-o`\"\n        @test readchomp(pipeline(ignorestatus(`$exename -f -p`),stderr=`cat`)) == \"ERROR: option `-p/--procs` is missing an argument\"\n        @test readchomp(pipeline(ignorestatus(`$exename -f --inline`),stderr=`cat`)) == \"ERROR: option `--inline` is missing an argument\"\n        @test readchomp(pipeline(ignorestatus(`$exename -f -e \"@show ARGS\" -now -- julia RUN.jl`),stderr=`cat`)) == \"ERROR: unknown option `-n`\"\n    end\nend\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/src/sys.c": "// This file is a part of Julia. License is MIT: http://julialang.org/license\n\n/*\n  sys.c\n  I/O and operating system utility functions\n*/\n#include \"julia.h\"\n#include \"julia_internal.h\"\n#include <sys/stat.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#ifdef _OS_WINDOWS_\n#include <psapi.h>\n#else\n#include <sys/sysctl.h>\n#include <sys/wait.h>\n#include <sys/ptrace.h>\n#include <unistd.h>\n#include <sys/mman.h>\n#include <dlfcn.h>\n#endif\n#include <errno.h>\n#include <signal.h>\n#include <fcntl.h>\n\n#ifndef _OS_WINDOWS_\n// for getrusage\n#include <sys/types.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#endif\n\n#ifdef __APPLE__\n#include <mach-o/dyld.h>\n#include <mach-o/nlist.h>\n#include <sys/types.h> // for jl_raise_debugger\n#elif !defined(_OS_WINDOWS_)\n#include <link.h>\n#endif\n\n#define __STDC_CONSTANT_MACROS\n#define __STDC_LIMIT_MACROS\n#include <llvm-c/Target.h>\n\n#ifdef __SSE__\n#include <xmmintrin.h>\n#endif\n\n#if defined _MSC_VER\n#include <io.h>\n#include <intrin.h>\n#endif\n\n#ifdef __has_feature\n#if __has_feature(memory_sanitizer)\n#include <sanitizer/msan_interface.h>\n#endif\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#if defined(_OS_WINDOWS_) && !defined(_COMPILER_MINGW_)\nDLLEXPORT char *dirname(char *);\n#else\n#include <libgen.h>\n#endif\n\nDLLEXPORT uint32_t jl_getutf8(ios_t *s)\n{\n    uint32_t wc=0;\n    ios_getutf8(s, &wc);\n    return wc;\n}\n\nDLLEXPORT int jl_sizeof_off_t(void) { return sizeof(off_t); }\n#ifndef _OS_WINDOWS_\nDLLEXPORT off_t jl_lseek(int fd, off_t offset, int whence) { return lseek(fd, offset, whence); }\nDLLEXPORT ssize_t jl_pwrite(int fd, const void *buf, size_t count, off_t offset)\n{\n    return pwrite(fd, buf, count, offset);\n}\nDLLEXPORT void *jl_mmap(void *addr, size_t length, int prot, int flags,\n                        int fd, off_t offset)\n{\n    return mmap(addr, length, prot, flags, fd, offset);\n}\n#else\nDLLEXPORT off_t jl_lseek(int fd, off_t offset, int whence) { return _lseek(fd, offset, whence); }\n#endif\nDLLEXPORT int jl_sizeof_ios_t(void) { return sizeof(ios_t); }\n\nDLLEXPORT long jl_ios_fd(ios_t *s) { return s->fd; }\n\nDLLEXPORT int32_t jl_nb_available(ios_t *s)\n{\n    return (int32_t)(s->size - s->bpos);\n}\n\n// --- dir/file stuff ---\n\nDLLEXPORT int jl_sizeof_uv_fs_t(void) { return sizeof(uv_fs_t); }\nDLLEXPORT void jl_uv_fs_req_cleanup(uv_fs_t *req)\n{\n    uv_fs_req_cleanup(req);\n}\n\nDLLEXPORT int jl_readdir(const char *path, uv_fs_t *readdir_req)\n{\n    // Note that the flags field is mostly ignored by libuv\n    return uv_fs_readdir(uv_default_loop(), readdir_req, path, 0 /*flags*/, NULL);\n}\n\nDLLEXPORT char *jl_uv_fs_t_ptr(uv_fs_t *req) { return (char*)req->ptr; }\nDLLEXPORT char *jl_uv_fs_t_ptr_offset(uv_fs_t *req, int offset) { return (char*)req->ptr + offset; }\nDLLEXPORT int jl_uv_fs_result(uv_fs_t *f) { return f->result; }\n\n// --- stat ---\nDLLEXPORT int jl_sizeof_stat(void) { return sizeof(uv_stat_t); }\n\nDLLEXPORT int32_t jl_stat(const char *path, char *statbuf)\n{\n    uv_fs_t req;\n    int ret;\n\n    // Ideally one would use the statbuf for the storage in req, but\n    // it's not clear that this is possible using libuv\n    ret = uv_fs_stat(uv_default_loop(), &req, path, NULL);\n    if (ret == 0)\n        memcpy(statbuf, req.ptr, sizeof(uv_stat_t));\n    uv_fs_req_cleanup(&req);\n    return ret;\n}\n\nDLLEXPORT int32_t jl_lstat(const char *path, char *statbuf)\n{\n    uv_fs_t req;\n    int ret;\n\n    ret = uv_fs_lstat(uv_default_loop(), &req, path, NULL);\n    if (ret == 0)\n        memcpy(statbuf, req.ptr, sizeof(uv_stat_t));\n    uv_fs_req_cleanup(&req);\n    return ret;\n}\n\nDLLEXPORT int32_t jl_fstat(int fd, char *statbuf)\n{\n    uv_fs_t req;\n    int ret;\n\n    ret = uv_fs_fstat(uv_default_loop(), &req, fd, NULL);\n    if (ret == 0)\n        memcpy(statbuf, req.ptr, sizeof(uv_stat_t));\n    uv_fs_req_cleanup(&req);\n    return ret;\n}\n\nDLLEXPORT unsigned int jl_stat_dev(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_dev;\n}\n\nDLLEXPORT unsigned int jl_stat_ino(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_ino;\n}\n\nDLLEXPORT unsigned int jl_stat_mode(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_mode;\n}\n\nDLLEXPORT unsigned int jl_stat_nlink(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_nlink;\n}\n\nDLLEXPORT unsigned int jl_stat_uid(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_uid;\n}\n\nDLLEXPORT unsigned int jl_stat_gid(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_gid;\n}\n\nDLLEXPORT unsigned int jl_stat_rdev(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_rdev;\n}\n\nDLLEXPORT uint64_t jl_stat_size(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_size;\n}\n\nDLLEXPORT uint64_t jl_stat_blksize(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_blksize;\n}\n\nDLLEXPORT uint64_t jl_stat_blocks(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_blocks;\n}\n\n/*\n// atime is stupid, let's not support it\nDLLEXPORT double jl_stat_atime(char *statbuf)\n{\n  uv_stat_t *s;\n  s = (uv_stat_t*)statbuf;\n  return (double)s->st_atim.tv_sec + (double)s->st_atim.tv_nsec * 1e-9;\n}\n*/\n\nDLLEXPORT double jl_stat_mtime(char *statbuf)\n{\n    uv_stat_t *s;\n    s = (uv_stat_t*)statbuf;\n    return (double)s->st_mtim.tv_sec + (double)s->st_mtim.tv_nsec * 1e-9;\n}\n\nDLLEXPORT double jl_stat_ctime(char *statbuf)\n{\n    uv_stat_t *s;\n    s = (uv_stat_t*)statbuf;\n    return (double)s->st_ctim.tv_sec + (double)s->st_ctim.tv_nsec * 1e-9;\n}\n\n// --- buffer manipulation ---\n\njl_array_t *jl_takebuf_array(ios_t *s)\n{\n    size_t n;\n    jl_array_t *a;\n    if (s->buf == &s->local[0]) {\n        // small data case. copies, but this can be avoided using the\n        // technique of jl_readuntil below.\n        a = jl_pchar_to_array(s->buf, s->size);\n        ios_trunc(s, 0);\n    }\n    else {\n        char *b = ios_takebuf(s, &n);\n        a = jl_ptr_to_array_1d(jl_array_uint8_type, b, n-1, 1);\n    }\n    return a;\n}\n\njl_value_t *jl_takebuf_string(ios_t *s)\n{\n    jl_array_t *a = jl_takebuf_array(s);\n    JL_GC_PUSH1(&a);\n    jl_value_t *str = jl_array_to_string(a);\n    JL_GC_POP();\n    return str;\n}\n\n// the returned buffer must be manually freed. To determine the size,\n// call position(s) before using this function.\nvoid *jl_takebuf_raw(ios_t *s)\n{\n    size_t sz;\n    void *buf = ios_takebuf(s, &sz);\n    return buf;\n}\n\njl_value_t *jl_readuntil(ios_t *s, uint8_t delim)\n{\n    jl_array_t *a;\n    // manually inlined common case\n    char *pd = (char*)memchr(s->buf+s->bpos, delim, s->size - s->bpos);\n    if (pd) {\n        size_t n = pd-(s->buf+s->bpos)+1;\n        a = jl_alloc_array_1d(jl_array_uint8_type, n);\n        memcpy(jl_array_data(a), s->buf+s->bpos, n);\n        s->bpos += n;\n    }\n    else {\n        a = jl_alloc_array_1d(jl_array_uint8_type, 80);\n        ios_t dest;\n        ios_mem(&dest, 0);\n        ios_setbuf(&dest, (char*)a->data, 80, 0);\n        size_t n = ios_copyuntil(&dest, s, delim);\n        if (dest.buf != a->data) {\n            a = jl_takebuf_array(&dest);\n        }\n        else {\n#ifdef STORE_ARRAY_LEN\n            a->length = n;\n#endif\n            a->nrows = n;\n            ((char*)a->data)[n] = '\\0';\n        }\n    }\n    return (jl_value_t*)a;\n}\n\nstatic void NORETURN throw_eof_error(void)\n{\n    jl_datatype_t *eof_error = (jl_datatype_t*)jl_get_global(jl_base_module, jl_symbol(\"EOFError\"));\n    assert(eof_error != NULL);\n    jl_exceptionf(eof_error, \"\");\n}\n\nDLLEXPORT uint64_t jl_ios_get_nbyte_int(ios_t *s, const size_t n)\n{\n    assert(n <= 8);\n    size_t space, ret;\n    do {\n        space = s->size - s->bpos;\n        ret = ios_readprep(s, n);\n        if (space == ret && ret < n)\n            throw_eof_error();\n    } while(ret < n);\n    uint64_t x = 0;\n    uint8_t *buf = (uint8_t*)&s->buf[s->bpos];\n    if (n == 8) {\n        // expecting loop unrolling optimization\n        for (size_t i = 0; i < 8; i++)\n            x |= (uint64_t)buf[i] << (i << 3);\n    }\n    else if (n >= 4) {\n        // expecting loop unrolling optimization\n        for (size_t i = 0; i < 4; i++)\n            x |= (uint64_t)buf[i] << (i << 3);\n        for (size_t i = 4; i < n; i++)\n            x |= (uint64_t)buf[i] << (i << 3);\n    }\n    else {\n        for (size_t i = 0; i < n; i++)\n            x |= (uint64_t)buf[i] << (i << 3);\n    }\n    s->bpos += n;\n    return x;\n}\n\n// -- syscall utilities --\n\nint jl_errno(void) { return errno; }\nvoid jl_set_errno(int e) { errno = e; }\n\n// -- get the number of CPU cores --\n\n#ifdef _OS_WINDOWS_\ntypedef DWORD (WINAPI *GAPC)(WORD);\n#ifndef ALL_PROCESSOR_GROUPS\n#define ALL_PROCESSOR_GROUPS 0xffff\n#endif\n#endif\n\nDLLEXPORT int jl_cpu_cores(void)\n{\n#if defined(HW_AVAILCPU) && defined(HW_NCPU)\n    size_t len = 4;\n    int32_t count;\n    int nm[2] = {CTL_HW, HW_AVAILCPU};\n    sysctl(nm, 2, &count, &len, NULL, 0);\n    if (count < 1) {\n        nm[1] = HW_NCPU;\n        sysctl(nm, 2, &count, &len, NULL, 0);\n        if (count < 1) { count = 1; }\n    }\n    return count;\n#elif defined(_SC_NPROCESSORS_ONLN)\n    return sysconf(_SC_NPROCESSORS_ONLN);\n#elif defined(_OS_WINDOWS_)\n    //Try to get WIN7 API method\n    GAPC gapc = (GAPC) jl_dlsym_e(\n        jl_kernel32_handle,\n        \"GetActiveProcessorCount\"\n    );\n\n    if (gapc) {\n        return gapc(ALL_PROCESSOR_GROUPS);\n    }\n    else { //fall back on GetSystemInfo\n        SYSTEM_INFO info;\n        GetSystemInfo(&info);\n        return info.dwNumberOfProcessors;\n    }\n#else\n    return 1;\n#endif\n}\n\n// -- high resolution timers --\n// Returns time in nanosec\nDLLEXPORT uint64_t jl_hrtime(void)\n{\n    return uv_hrtime();\n}\n\n// -- iterating the environment --\n\n#ifdef __APPLE__\n#include <crt_externs.h>\n#else\n#if !defined(_OS_WINDOWS_) || defined(_COMPILER_MINGW_)\nextern char **environ;\n#endif\n#endif\n\njl_value_t *jl_environ(int i)\n{\n#ifdef __APPLE__\n    char **environ = *_NSGetEnviron();\n#endif\n    char *env = environ[i];\n    return env ? jl_pchar_to_string(env, strlen(env)) : jl_nothing;\n}\n\n// -- child process status --\n\n#if defined _MSC_VER || defined _OS_WINDOWS_\n/* Native Woe32 API.  */\n#include <process.h>\n#define waitpid(pid,statusp,options) _cwait (statusp, pid, WAIT_CHILD)\n#define WAIT_T int\n#define WTERMSIG(x) ((x) & 0xff) /* or: SIGABRT ?? */\n#define WCOREDUMP(x) 0\n#define WEXITSTATUS(x) (((x) >> 8) & 0xff) /* or: (x) ?? */\n#define WIFSIGNALED(x) (WTERMSIG (x) != 0) /* or: ((x) == 3) ?? */\n#define WIFEXITED(x) (WTERMSIG (x) == 0) /* or: ((x) != 3) ?? */\n#define WIFSTOPPED(x) 0\n#define WSTOPSIG(x) 0 //Is this correct?\n#endif\n\nint jl_process_exited(int status)      { return WIFEXITED(status); }\nint jl_process_signaled(int status)    { return WIFSIGNALED(status); }\nint jl_process_stopped(int status)     { return WIFSTOPPED(status); }\n\nint jl_process_exit_status(int status) { return WEXITSTATUS(status); }\nint jl_process_term_signal(int status) { return WTERMSIG(status); }\nint jl_process_stop_signal(int status) { return WSTOPSIG(status); }\n\n// -- access to std filehandles --\n\nJL_STREAM *JL_STDIN  = (JL_STREAM*)STDIN_FILENO;\nJL_STREAM *JL_STDOUT = (JL_STREAM*)STDOUT_FILENO;\nJL_STREAM *JL_STDERR = (JL_STREAM*)STDERR_FILENO;\n\nJL_STREAM *jl_stdin_stream(void)  { return JL_STDIN; }\nJL_STREAM *jl_stdout_stream(void) { return JL_STDOUT; }\nJL_STREAM *jl_stderr_stream(void) { return JL_STDERR; }\n\n// CPUID\n\n#ifdef HAVE_CPUID\nDLLEXPORT void jl_cpuid(int32_t CPUInfo[4], int32_t InfoType)\n{\n#if defined _MSC_VER\n    __cpuid(CPUInfo, InfoType);\n#else\n    __asm__ __volatile__ (\n        #if defined(__i386__) && defined(__PIC__)\n        \"xchg %%ebx, %%esi;\"\n        \"cpuid;\"\n        \"xchg %%esi, %%ebx;\":\n        \"=S\" (CPUInfo[1]) ,\n        #else\n        \"cpuid\":\n        \"=b\" (CPUInfo[1]),\n        #endif\n        \"=a\" (CPUInfo[0]),\n        \"=c\" (CPUInfo[2]),\n        \"=d\" (CPUInfo[3]) :\n        \"a\" (InfoType)\n    );\n#endif\n}\n#endif\n\n// -- set/clear the FZ/DAZ flags on x86 & x86-64 --\n#ifdef __SSE__\n\n// Cache of information recovered from jl_cpuid.\n// In a multithreaded environment, there will be races on subnormal_flags,\n// but they are harmless idempotent races.  If we ever embrace C11, then\n// subnormal_flags should be declared atomic.\nstatic volatile int32_t subnormal_flags = 1;\n\nstatic int32_t get_subnormal_flags()\n{\n    uint32_t f = subnormal_flags;\n    if (f & 1) {\n        // CPU capabilities not yet inspected.\n        f = 0;\n        int32_t info[4];\n        jl_cpuid(info, 0);\n        if (info[0] >= 1) {\n            jl_cpuid(info, 0x00000001);\n            if (info[3] & (1 << 26)) {\n                // SSE2 supports both FZ and DAZ\n                f = 0x00008040;\n            }\n            else if (info[3] & (1 << 25)) {\n                // SSE supports only the FZ flag\n                f = 0x00008000;\n            }\n        }\n        subnormal_flags = f;\n    }\n    return f;\n}\n\n// Returns non-zero if subnormals go to 0; zero otherwise.\nDLLEXPORT int32_t jl_get_zero_subnormals(int8_t isZero)\n{\n    uint32_t flags = get_subnormal_flags();\n    return _mm_getcsr() & flags;\n}\n\n// Return zero on success, non-zero on failure.\nDLLEXPORT int32_t jl_set_zero_subnormals(int8_t isZero)\n{\n    uint32_t flags = get_subnormal_flags();\n    if (flags) {\n        uint32_t state = _mm_getcsr();\n        if (isZero)\n            state |= flags;\n        else\n            state &= ~flags;\n        _mm_setcsr(state);\n        return 0;\n    }\n    else {\n        // Report a failure only if user is trying to enable FTZ/DAZ.\n        return isZero;\n    }\n}\n\n#else\n\nDLLEXPORT int32_t jl_get_zero_subnormals(int8_t isZero)\n{\n    return 0;\n}\n\nDLLEXPORT int32_t jl_set_zero_subnormals(int8_t isZero)\n{\n    return isZero;\n}\n\n#endif\n\n// -- processor native alignment information --\n\nDLLEXPORT void jl_native_alignment(uint_t *int8align, uint_t *int16align, uint_t *int32align,\n                                   uint_t *int64align, uint_t *float32align, uint_t *float64align)\n{\n    LLVMTargetDataRef tgtdata = LLVMCreateTargetData(\"\");\n    *int8align = LLVMPreferredAlignmentOfType(tgtdata, LLVMInt8Type());\n    *int16align = LLVMPreferredAlignmentOfType(tgtdata, LLVMInt16Type());\n    *int32align = LLVMPreferredAlignmentOfType(tgtdata, LLVMInt32Type());\n    *int64align = LLVMPreferredAlignmentOfType(tgtdata, LLVMInt64Type());\n    *float32align = LLVMPreferredAlignmentOfType(tgtdata, LLVMFloatType());\n    *float64align = LLVMPreferredAlignmentOfType(tgtdata, LLVMDoubleType());\n    LLVMDisposeTargetData(tgtdata);\n}\n\nDLLEXPORT jl_value_t *jl_is_char_signed()\n{\n    return ((char)255) < 0 ? jl_true : jl_false;\n}\n\nDLLEXPORT void jl_field_offsets(jl_datatype_t *dt, ssize_t *offsets)\n{\n    size_t i;\n    for(i=0; i < jl_datatype_nfields(dt); i++) {\n        offsets[i] = jl_field_offset(dt, i);\n    }\n}\n\n// -- misc sysconf info --\n\n#ifdef _OS_WINDOWS_\nstatic long cachedPagesize = 0;\nlong jl_getpagesize(void)\n{\n    if (!cachedPagesize) {\n        SYSTEM_INFO systemInfo;\n        GetSystemInfo (&systemInfo);\n        cachedPagesize = systemInfo.dwPageSize;\n    }\n    return cachedPagesize;\n}\n#else\nlong jl_getpagesize(void)\n{\n    return sysconf(_SC_PAGESIZE);\n}\n#endif\n\n#ifdef _OS_WINDOWS_\nstatic long cachedAllocationGranularity = 0;\nlong jl_getallocationgranularity(void)\n{\n    if (!cachedAllocationGranularity) {\n        SYSTEM_INFO systemInfo;\n        GetSystemInfo (&systemInfo);\n        cachedAllocationGranularity = systemInfo.dwAllocationGranularity;\n    }\n    return cachedAllocationGranularity;\n}\n#else\nlong jl_getallocationgranularity(void)\n{\n    return jl_getpagesize();\n}\n#endif\n\nDLLEXPORT long jl_SC_CLK_TCK(void)\n{\n#ifndef _OS_WINDOWS_\n    return sysconf(_SC_CLK_TCK);\n#else\n    return 0;\n#endif\n}\n\nDLLEXPORT size_t jl_get_field_offset(jl_datatype_t *ty, int field)\n{\n    if (field > jl_datatype_nfields(ty))\n        jl_error(\"This type does not have that many fields\");\n    return jl_field_offset(ty, field);\n}\n\nDLLEXPORT size_t jl_get_alignment(jl_datatype_t *ty)\n{\n    return ty->alignment;\n}\n\n// Takes a handle (as returned from dlopen()) and returns the absolute path to the image loaded\nDLLEXPORT const char *jl_pathname_for_handle(uv_lib_t *uv_lib)\n{\n    if (!uv_lib)\n        return NULL;\n\n    void *handle = uv_lib->handle;\n#ifdef __APPLE__\n    // Iterate through all images currently in memory\n    for (int32_t i = _dyld_image_count(); i >= 0 ; i--) {\n        // dlopen() each image, check handle\n        const char *image_name = _dyld_get_image_name(i);\n        uv_lib_t *probe_lib = jl_load_dynamic_library(image_name, JL_RTLD_DEFAULT);\n        void *probe_handle = probe_lib->handle;\n        uv_dlclose(probe_lib);\n\n        // If the handle is the same as what was passed in (modulo mode bits), return this image name\n        if (((intptr_t)handle & (-4)) == ((intptr_t)probe_handle & (-4)))\n            return image_name;\n    }\n\n#elif defined(_OS_WINDOWS_)\n\n    wchar_t *pth16 = (wchar_t*)malloc(32768); // max long path length\n    DWORD n16 = GetModuleFileNameW((HMODULE)handle,pth16,32768);\n    if (n16 <= 0) {\n        free(pth16);\n        return NULL;\n    }\n    pth16[n16] = L'\\0';\n    DWORD n8 = WideCharToMultiByte(CP_UTF8, 0, pth16, -1, NULL, 0, NULL, NULL);\n    if (n8 == 0) {\n        free(pth16);\n        return NULL;\n    }\n    char *filepath = (char*)malloc(++n8);\n    if (!WideCharToMultiByte(CP_UTF8, 0, pth16, -1, filepath, n8, NULL, NULL)) {\n        free(pth16);\n        free(filepath);\n        return NULL;\n    }\n    free(pth16);\n    return filepath;\n\n#else // Linux, FreeBSD, ...\n\n    struct link_map *map;\n    dlinfo(handle, RTLD_DI_LINKMAP, &map);\n#ifdef __has_feature\n#if __has_feature(memory_sanitizer)\n    __msan_unpoison(&map,sizeof(struct link_map*));\n    if (map) {\n      __msan_unpoison(map, sizeof(struct link_map));\n      __msan_unpoison_string(map->l_name);\n    }\n#endif\n#endif\n    if (map)\n        return map->l_name;\n\n#endif\n    return NULL;\n}\n\n#ifdef _OS_WINDOWS_\n#include <dbghelp.h>\nstatic BOOL CALLBACK jl_EnumerateLoadedModulesProc64(\n  _In_      PCTSTR ModuleName,\n  _In_      DWORD64 ModuleBase,\n  _In_      ULONG ModuleSize,\n  _In_opt_  PVOID a\n)\n{\n    jl_array_grow_end((jl_array_t*)a, 1);\n    //XXX: change to jl_arrayset if array storage allocation for Array{ByteString,1} changes:\n    jl_value_t *v = jl_cstr_to_string(ModuleName);\n    jl_cellset(a, jl_array_dim0(a)-1, v);\n    return TRUE;\n}\n// Takes a handle (as returned from dlopen()) and returns the absolute path to the image loaded\nDLLEXPORT int jl_dllist(jl_array_t *list)\n{\n    return EnumerateLoadedModules64(GetCurrentProcess(), jl_EnumerateLoadedModulesProc64, list);\n}\n#endif\n\nDLLEXPORT void jl_raise_debugger(void)\n{\n#if defined(_OS_WINDOWS_)\n    if (IsDebuggerPresent() == 1)\n        DebugBreak();\n#else\n    raise(SIGINT);\n#endif // _OS_WINDOWS_\n}\n\nDLLEXPORT jl_sym_t* jl_get_OS_NAME()\n{\n#if defined(_OS_WINDOWS_)\n    return jl_symbol(\"Windows\");\n#elif defined(_OS_LINUX_)\n    return jl_symbol(\"Linux\");\n#elif defined(_OS_FREEBSD_)\n    return jl_symbol(\"FreeBSD\");\n#elif defined(_OS_DARWIN_)\n    return jl_symbol(\"Darwin\");\n#else\n#warning OS_NAME is Unknown\n    return jl_symbol(\"Unknown\");\n#endif\n}\n\nDLLEXPORT jl_sym_t* jl_get_ARCH()\n{\n    static jl_sym_t* ARCH = NULL;\n    if (!ARCH)\n        ARCH = (jl_sym_t*) jl_get_global(jl_base_module, jl_symbol(\"ARCH\"));\n    return ARCH;\n}\n\nDLLEXPORT size_t jl_maxrss()\n{\n#if defined(_OS_WINDOWS_)\n    PROCESS_MEMORY_COUNTERS counter;\n    GetProcessMemoryInfo( GetCurrentProcess( ), &counter, sizeof(counter) );\n    return (size_t)counter.PeakWorkingSetSize;\n\n#elif defined(_OS_LINUX_) || defined(_OS_DARWIN_) || defined (_OS_FREEBSD_)\n    struct rusage rusage;\n    getrusage( RUSAGE_SELF, &rusage );\n\n#if defined(_OS_LINUX_)\n    return (size_t)(rusage.ru_maxrss * 1024);\n#else\n    return (size_t)rusage.ru_maxrss;\n#endif\n\n#else\n    return (size_t)0;\n#endif\n}\n\n\n\n#ifdef __cplusplus\n}\n#endif\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/src/julia.h": "// This file is a part of Julia. License is MIT: http://julialang.org/license\n\n#ifndef JULIA_H\n#define JULIA_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include \"options.h\"\n\n#include \"libsupport.h\"\n#include <stdint.h>\n#include <string.h>\n\n#include \"htable.h\"\n#include \"arraylist.h\"\n\n#include <setjmp.h>\n#ifndef _OS_WINDOWS_\n#  define jl_jmp_buf sigjmp_buf\n#  if defined(_CPU_ARM_)\n#    define MAX_ALIGN 8\n#  elif defined(_CPU_AARCH64_)\n// int128 is 16 bytes aligned on aarch64\n#    define MAX_ALIGN 16\n#  else\n#    define MAX_ALIGN sizeof(void*)\n#  endif\n#else\n#  define jl_jmp_buf jmp_buf\n#  include <malloc.h> //for _resetstkoflw\n#  define MAX_ALIGN 8\n#endif\n\n#ifdef _P64\n#define NWORDS(sz) (((sz)+7)>>3)\n#else\n#define NWORDS(sz) (((sz)+3)>>2)\n#endif\n\n#if __GNUC__\n#define NORETURN __attribute__ ((noreturn))\n#else\n#define NORETURN\n#endif\n\n#define container_of(ptr, type, member) \\\n    ((type *) ((char *)(ptr) - offsetof(type, member)))\n\n#ifdef _MSC_VER\n#if _WIN64\n#define JL_ATTRIBUTE_ALIGN_PTRSIZE(x) __declspec(align(8)) x\n#else\n#define JL_ATTRIBUTE_ALIGN_PTRSIZE(x) __declspec(align(4)) x\n#endif\n#elif __GNUC__\n#define JL_ATTRIBUTE_ALIGN_PTRSIZE(x) x __attribute__ ((aligned (sizeof(void*))))\n#else\n#define JL_ATTRIBUTE_ALIGN_PTRSIZE(x)\n#endif\n\n// threading ------------------------------------------------------------------\n\n// WARNING: Threading support is incomplete.  Changing the 1 to a 0 will break Julia.\n// Nonetheless, we define JL_THREAD and use it to give advanced notice to maintainers\n// of what eventual threading support will change.\n#if 1\n// Definition for compiling non-thread-safe Julia.\n#  define JL_THREAD\n#elif !defined(_OS_WINDOWS_)\n// Definition for compiling Julia on platforms with GCC __thread.\n#  define JL_THREAD __thread\n#else\n// Definition for compiling Julia on Windows\n#  define JL_THREAD __declspec(thread)\n#endif\n\n// core data types ------------------------------------------------------------\n\n#ifndef _COMPILER_MICROSOFT_\n#define JL_DATA_TYPE \\\n    struct _jl_value_t *fieldptr0[0];\n#else\n#define JL_DATA_TYPE\n#endif\n\ntypedef struct _jl_value_t {\n    JL_DATA_TYPE\n#if !defined(__GNUC__) || __GNUC__ < 6\n    // GCC 6 is not happy about flexible array member in otherwise empty struct.\n    // Only remove the definition on GCC >= 6 to avoid breaking existing setup.\n    struct _jl_value_t *fieldptr[];\n#endif\n} jl_value_t;\n\ntypedef struct {\n    union {\n        jl_value_t *type; // 16-bytes aligned\n        uintptr_t type_bits;\n        struct {\n            uintptr_t gc_bits:2;\n        };\n    };\n    jl_value_t value;\n} jl_taggedvalue_t;\n\n#define jl_astaggedvalue__MACRO(v) container_of((v),jl_taggedvalue_t,value)\n#define jl_typeof__MACRO(v) ((jl_value_t*)(jl_astaggedvalue__MACRO(v)->type_bits&~(uintptr_t)15))\n#define jl_astaggedvalue jl_astaggedvalue__MACRO\n#define jl_typeof jl_typeof__MACRO\nstatic inline void jl_set_typeof(void *v, void *t)\n{\n    jl_taggedvalue_t *tag = jl_astaggedvalue(v);\n    tag->type = (jl_value_t*)t;\n}\n#define jl_typeis(v,t) (jl_typeof(v)==(jl_value_t*)(t))\n\ntypedef struct _jl_sym_t {\n    JL_DATA_TYPE\n    struct _jl_sym_t *left;\n    struct _jl_sym_t *right;\n    uptrint_t hash;    // precomputed hash value\n    JL_ATTRIBUTE_ALIGN_PTRSIZE(char name[]);\n} jl_sym_t;\n\ntypedef struct _jl_gensym_t {\n    JL_DATA_TYPE\n    ssize_t id;\n} jl_gensym_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    size_t length;\n    jl_value_t *data[];\n} jl_svec_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    void *data;\n#ifdef STORE_ARRAY_LEN\n    size_t length;\n#endif\n    union {\n        struct {\n            /*\n              how - allocation style\n              0 = data is inlined, or a foreign pointer we don't manage\n              1 = julia-allocated buffer that needs to be marked\n              2 = malloc-allocated pointer this array object manages\n              3 = has a pointer to the Array that owns the data\n            */\n            unsigned short how:2;\n            unsigned short ndims:10;\n            unsigned short pooled:1;\n            unsigned short ptrarray:1;  // representation is pointer array\n            unsigned short isshared:1;  // data is shared by multiple Arrays\n            unsigned short isaligned:1; // data allocated with memalign\n        };\n        unsigned short flags;\n    };\n    uint16_t elsize;\n    uint32_t offset;  // for 1-d only. does not need to get big.\n    size_t nrows;\n    union {\n        // 1d\n        size_t maxsize;\n        // Nd\n        size_t ncols;\n    };\n    // other dim sizes go here for ndims > 2\n\n    // followed by alignment padding and inline data, or owner pointer\n} jl_array_t;\n// compute # of extra words needed to store dimensions\nSTATIC_INLINE int jl_array_ndimwords(uint32_t ndims)\n{\n    return (ndims < 3 ? 0 : ndims-2);\n}\n\ntypedef jl_value_t *(*jl_fptr_t)(jl_value_t*, jl_value_t**, uint32_t);\n\ntypedef struct _jl_datatype_t jl_tupletype_t;\n\ntypedef struct _jl_lambda_info_t {\n    JL_DATA_TYPE\n    // this holds the static data for a function:\n    // a syntax tree, static parameters, and (if it has been compiled)\n    // a function pointer.\n    // this is the stuff that's shared among different instantiations\n    // (different environments) of a closure.\n    jl_value_t *ast;\n    // sparams is a vector (symbol, value, symbol, value, ...)\n    jl_svec_t *sparams;\n    jl_value_t *tfunc;\n    jl_sym_t *name;  // for error reporting\n    jl_array_t *roots;  // pointers in generated code\n    jl_tupletype_t *specTypes;  // argument types this is specialized for\n    // a slower-but-works version of this function as a fallback\n    struct _jl_function_t *unspecialized;\n    // array of all lambda infos with code generated from this one\n    jl_array_t *specializations;\n    struct _jl_module_t *module;\n    struct _jl_lambda_info_t *def;  // original this is specialized from\n    jl_value_t *capt;  // captured var info\n    jl_sym_t *file;\n    int32_t line;\n    int8_t inferred;\n\n    // hidden fields:\n    // flag telling if inference is running on this function\n    // used to avoid infinite recursion\n    int8_t inInference : 1;\n    int8_t inCompile : 1;\n    jl_fptr_t fptr;             // jlcall entry point\n    void *functionObject;       // jlcall llvm Function\n    void *cFunctionList;        // c callable llvm Functions\n\n    // specialized llvm Function (common core for the other two)\n    void *specFunctionObject;\n    int32_t functionID; // index that this function will have in the codegen table\n    int32_t specFunctionID; // index that this specFunction will have in the codegen table\n} jl_lambda_info_t;\n\ntypedef struct _jl_function_t {\n    JL_DATA_TYPE\n    jl_fptr_t fptr;\n    jl_value_t *env;\n    jl_lambda_info_t *linfo;\n} jl_function_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_svec_t *parameters;\n    jl_value_t *body;\n} jl_typector_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_sym_t *name;\n    struct _jl_module_t *module;\n    jl_svec_t *names;  // field names\n    // if this is the name of a parametric type, this field points to the\n    // original type.\n    // a type alias, for example, might make a type constructor that is\n    // not the original.\n    jl_value_t *primary;\n    jl_svec_t *cache;        // sorted array\n    jl_svec_t *linearcache;  // unsorted array\n    ptrint_t uid;\n} jl_typename_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_svec_t *types;\n} jl_uniontype_t;\n\ntypedef struct {\n    uint8_t offset;   // offset relative to data start, excluding type tag\n    uint8_t size:7;\n    uint8_t isptr:1;\n} jl_fielddesc8_t;\n\ntypedef struct {\n    uint16_t offset;   // offset relative to data start, excluding type tag\n    uint16_t size:15;\n    uint16_t isptr:1;\n} jl_fielddesc16_t;\n\ntypedef struct {\n    uint32_t offset;   // offset relative to data start, excluding type tag\n    uint32_t size:31;\n    uint32_t isptr:1;\n} jl_fielddesc32_t;\n\ntypedef struct _jl_datatype_t {\n    JL_DATA_TYPE\n    jl_typename_t *name;\n    struct _jl_datatype_t *super;\n    jl_svec_t *parameters;\n    jl_svec_t *types;\n    jl_value_t *instance;  // for singletons\n    int32_t size;\n    uint8_t abstract;\n    uint8_t mutabl;\n    uint8_t pointerfree;\n    int32_t ninitialized;\n    // hidden fields:\n    uint32_t nfields;\n    uint32_t alignment : 29;  // strictest alignment over all fields\n    uint32_t haspadding : 1;  // has internal undefined bytes\n    uint32_t fielddesc_type : 2; // 0 -> 8, 1 -> 16, 2 -> 32\n    uint32_t uid;\n    void *struct_decl;  //llvm::Value*\n    void *ditype; // llvm::MDNode* to be used as llvm::DIType(ditype)\n    size_t fields[];\n} jl_datatype_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_sym_t *name;\n    jl_value_t *lb;   // lower bound\n    jl_value_t *ub;   // upper bound\n    uint8_t bound;    // part of a constraint environment\n} jl_tvar_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_value_t *value;\n} jl_weakref_t;\n\ntypedef struct {\n    // not first-class\n    jl_sym_t *name;\n    jl_value_t *value;\n    jl_value_t *globalref;  // cached GlobalRef for this binding\n    struct _jl_module_t *owner;  // for individual imported bindings\n    unsigned constp:1;\n    unsigned exportp:1;\n    unsigned imported:1;\n    unsigned deprecated:1;\n} jl_binding_t;\n\ntypedef struct _jl_module_t {\n    JL_DATA_TYPE\n    jl_sym_t *name;\n    struct _jl_module_t *parent;\n    htable_t bindings;\n    arraylist_t usings;  // modules with all bindings potentially imported\n    jl_array_t *constant_table;\n    jl_function_t *call_func;  // cached lookup of `call` within this module\n    uint8_t istopmod;\n    uint8_t std_imports;  // only for temporarily deprecating `importall Base.Operators`\n    uint64_t uuid;\n} jl_module_t;\n\ntypedef struct _jl_methlist_t {\n    JL_DATA_TYPE\n    jl_tupletype_t *sig;\n    int8_t va;\n    int8_t isstaged;\n    jl_svec_t *tvars;\n    jl_function_t *func;\n    // cache of specializations of this method for invoke(), i.e.\n    // cases where this method was called even though it was not necessarily\n    // the most specific for the argument types.\n    struct _jl_methtable_t *invokes;\n    // TODO: pointer from specialized to original method\n    //jl_function_t *orig_method;\n    struct _jl_methlist_t *next;\n} jl_methlist_t;\n\ntypedef struct _jl_methtable_t {\n    JL_DATA_TYPE\n    jl_sym_t *name;\n    jl_methlist_t *defs;\n    jl_methlist_t *cache;\n    jl_array_t *cache_arg1;\n    jl_array_t *cache_targ;\n    ptrint_t max_args;  // max # of non-vararg arguments in a signature\n    jl_function_t *kwsorter;  // keyword argument sorter function\n    jl_module_t *module; // used for incremental serialization to locate original binding\n#ifdef JL_GF_PROFILE\n    int ncalls;\n#endif\n} jl_methtable_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_sym_t *head;\n    jl_array_t *args;\n    jl_value_t *etype;\n} jl_expr_t;\n\n// constants and type objects -------------------------------------------------\n\nextern DLLEXPORT jl_datatype_t *jl_any_type;\nextern DLLEXPORT jl_datatype_t *jl_type_type;\nextern DLLEXPORT jl_tvar_t     *jl_typetype_tvar;\nextern DLLEXPORT jl_datatype_t *jl_typetype_type;\nextern DLLEXPORT jl_value_t    *jl_ANY_flag;\nextern DLLEXPORT jl_datatype_t *jl_typename_type;\nextern DLLEXPORT jl_datatype_t *jl_typector_type;\nextern DLLEXPORT jl_datatype_t *jl_sym_type;\nextern DLLEXPORT jl_datatype_t *jl_symbol_type;\nextern DLLEXPORT jl_datatype_t *jl_gensym_type;\nextern DLLEXPORT jl_datatype_t *jl_simplevector_type;\nextern DLLEXPORT jl_typename_t *jl_tuple_typename;\nextern DLLEXPORT jl_datatype_t *jl_anytuple_type;\n#define jl_tuple_type jl_anytuple_type\nextern DLLEXPORT jl_datatype_t *jl_ntuple_type;\nextern DLLEXPORT jl_typename_t *jl_ntuple_typename;\nextern DLLEXPORT jl_datatype_t *jl_vararg_type;\nextern DLLEXPORT jl_datatype_t *jl_tvar_type;\nextern DLLEXPORT jl_datatype_t *jl_task_type;\n\nextern DLLEXPORT jl_datatype_t *jl_uniontype_type;\nextern DLLEXPORT jl_datatype_t *jl_datatype_type;\n\nextern DLLEXPORT jl_value_t *jl_bottom_type;\nextern DLLEXPORT jl_datatype_t *jl_lambda_info_type;\nextern DLLEXPORT jl_datatype_t *jl_module_type;\nextern DLLEXPORT jl_datatype_t *jl_function_type;\nextern DLLEXPORT jl_datatype_t *jl_abstractarray_type;\nextern DLLEXPORT jl_datatype_t *jl_densearray_type;\nextern DLLEXPORT jl_datatype_t *jl_array_type;\nextern DLLEXPORT jl_typename_t *jl_array_typename;\nextern DLLEXPORT jl_datatype_t *jl_weakref_type;\nextern DLLEXPORT jl_datatype_t *jl_ascii_string_type;\nextern DLLEXPORT jl_datatype_t *jl_utf8_string_type;\nextern DLLEXPORT jl_datatype_t *jl_errorexception_type;\nextern DLLEXPORT jl_datatype_t *jl_argumenterror_type;\nextern DLLEXPORT jl_datatype_t *jl_loaderror_type;\nextern DLLEXPORT jl_datatype_t *jl_initerror_type;\nextern DLLEXPORT jl_datatype_t *jl_typeerror_type;\nextern DLLEXPORT jl_datatype_t *jl_methoderror_type;\nextern DLLEXPORT jl_datatype_t *jl_undefvarerror_type;\nextern DLLEXPORT jl_value_t *jl_stackovf_exception;\nextern DLLEXPORT jl_value_t *jl_memory_exception;\nextern DLLEXPORT jl_value_t *jl_readonlymemory_exception;\nextern DLLEXPORT jl_value_t *jl_diverror_exception;\nextern DLLEXPORT jl_value_t *jl_domain_exception;\nextern DLLEXPORT jl_value_t *jl_overflow_exception;\nextern DLLEXPORT jl_value_t *jl_inexact_exception;\nextern DLLEXPORT jl_value_t *jl_undefref_exception;\nextern DLLEXPORT jl_value_t *jl_interrupt_exception;\nextern DLLEXPORT jl_datatype_t *jl_boundserror_type;\nextern DLLEXPORT jl_value_t *jl_an_empty_cell;\n\nextern DLLEXPORT jl_datatype_t *jl_bool_type;\nextern DLLEXPORT jl_datatype_t *jl_char_type;\nextern DLLEXPORT jl_datatype_t *jl_int8_type;\nextern DLLEXPORT jl_datatype_t *jl_uint8_type;\nextern DLLEXPORT jl_datatype_t *jl_int16_type;\nextern DLLEXPORT jl_datatype_t *jl_uint16_type;\nextern DLLEXPORT jl_datatype_t *jl_int32_type;\nextern DLLEXPORT jl_datatype_t *jl_uint32_type;\nextern DLLEXPORT jl_datatype_t *jl_int64_type;\nextern DLLEXPORT jl_datatype_t *jl_uint64_type;\nextern DLLEXPORT jl_datatype_t *jl_float16_type;\nextern DLLEXPORT jl_datatype_t *jl_float32_type;\nextern DLLEXPORT jl_datatype_t *jl_float64_type;\nextern DLLEXPORT jl_datatype_t *jl_floatingpoint_type;\nextern DLLEXPORT jl_datatype_t *jl_number_type;\nextern DLLEXPORT jl_datatype_t *jl_void_type;\nextern DLLEXPORT jl_datatype_t *jl_complex_type;\nextern DLLEXPORT jl_datatype_t *jl_signed_type;\nextern DLLEXPORT jl_datatype_t *jl_voidpointer_type;\nextern DLLEXPORT jl_datatype_t *jl_pointer_type;\nextern DLLEXPORT jl_datatype_t *jl_ref_type;\n\nextern DLLEXPORT jl_value_t *jl_array_uint8_type;\nextern DLLEXPORT jl_value_t *jl_array_any_type;\nextern DLLEXPORT jl_value_t *jl_array_symbol_type;\nextern DLLEXPORT jl_datatype_t *jl_expr_type;\nextern DLLEXPORT jl_datatype_t *jl_symbolnode_type;\nextern DLLEXPORT jl_datatype_t *jl_globalref_type;\nextern DLLEXPORT jl_datatype_t *jl_linenumbernode_type;\nextern DLLEXPORT jl_datatype_t *jl_labelnode_type;\nextern DLLEXPORT jl_datatype_t *jl_gotonode_type;\nextern DLLEXPORT jl_datatype_t *jl_quotenode_type;\nextern DLLEXPORT jl_datatype_t *jl_newvarnode_type;\nextern DLLEXPORT jl_datatype_t *jl_topnode_type;\nextern DLLEXPORT jl_datatype_t *jl_intrinsic_type;\nextern DLLEXPORT jl_datatype_t *jl_methtable_type;\nextern DLLEXPORT jl_datatype_t *jl_method_type;\n\nextern DLLEXPORT jl_svec_t *jl_emptysvec;\nextern DLLEXPORT jl_value_t *jl_emptytuple;\nextern DLLEXPORT jl_value_t *jl_true;\nextern DLLEXPORT jl_value_t *jl_false;\nextern DLLEXPORT jl_value_t *jl_nothing;\n\n// some important symbols\nextern jl_sym_t *call_sym;\nextern jl_sym_t *dots_sym;    extern jl_sym_t *vararg_sym;\nextern jl_sym_t *quote_sym;   extern jl_sym_t *newvar_sym;\nextern jl_sym_t *top_sym;     extern jl_sym_t *dot_sym;\nextern jl_sym_t *line_sym;    extern jl_sym_t *toplevel_sym;\nextern DLLEXPORT jl_sym_t *jl_incomplete_sym;\nextern jl_sym_t *error_sym;   extern jl_sym_t *amp_sym;\nextern jl_sym_t *module_sym;  extern jl_sym_t *colons_sym;\nextern jl_sym_t *export_sym;  extern jl_sym_t *import_sym;\nextern jl_sym_t *importall_sym; extern jl_sym_t *using_sym;\nextern jl_sym_t *goto_sym;    extern jl_sym_t *goto_ifnot_sym;\nextern jl_sym_t *label_sym;   extern jl_sym_t *return_sym;\nextern jl_sym_t *lambda_sym;  extern jl_sym_t *assign_sym;\nextern jl_sym_t *null_sym;    extern jl_sym_t *body_sym;\nextern jl_sym_t *macro_sym;   extern jl_sym_t *method_sym;\nextern jl_sym_t *enter_sym;   extern jl_sym_t *leave_sym;\nextern jl_sym_t *exc_sym;     extern jl_sym_t *new_sym;\nextern jl_sym_t *static_typeof_sym; extern jl_sym_t *kw_sym;\nextern jl_sym_t *const_sym;   extern jl_sym_t *thunk_sym;\nextern jl_sym_t *anonymous_sym;  extern jl_sym_t *underscore_sym;\nextern jl_sym_t *abstracttype_sym; extern jl_sym_t *bitstype_sym;\nextern jl_sym_t *compositetype_sym; extern jl_sym_t *type_goto_sym;\nextern jl_sym_t *global_sym;  extern jl_sym_t *tuple_sym;\nextern jl_sym_t *boundscheck_sym; extern jl_sym_t *copyast_sym;\nextern jl_sym_t *fastmath_sym;\nextern jl_sym_t *simdloop_sym; extern jl_sym_t *meta_sym;\nextern jl_sym_t *arrow_sym; extern jl_sym_t *inert_sym;\n\n// gc -------------------------------------------------------------------------\n\ntypedef struct _jl_gcframe_t {\n    size_t nroots;\n    struct _jl_gcframe_t *prev;\n    // actual roots go here\n} jl_gcframe_t;\n\n// NOTE: it is the caller's responsibility to make sure arguments are\n// rooted. foo(f(), g()) will not work, and foo can't do anything about it,\n// so the caller must do\n// jl_value_t *x=NULL, *y=NULL; JL_GC_PUSH(&x, &y);\n// x = f(); y = g(); foo(x, y)\n\nextern DLLEXPORT JL_THREAD jl_gcframe_t *jl_pgcstack;\n\n#define JL_GC_PUSH(...)                                                   \\\n  void *__gc_stkf[] = {(void*)((VA_NARG(__VA_ARGS__)<<1)|1), jl_pgcstack, \\\n                       __VA_ARGS__};                                      \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH1(arg1)                                                 \\\n  void *__gc_stkf[] = {(void*)3, jl_pgcstack, arg1};                      \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH2(arg1, arg2)                                           \\\n  void *__gc_stkf[] = {(void*)5, jl_pgcstack, arg1, arg2};                \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH3(arg1, arg2, arg3)                                     \\\n  void *__gc_stkf[] = {(void*)7, jl_pgcstack, arg1, arg2, arg3};          \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH4(arg1, arg2, arg3, arg4)                               \\\n  void *__gc_stkf[] = {(void*)9, jl_pgcstack, arg1, arg2, arg3, arg4};    \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH5(arg1, arg2, arg3, arg4, arg5)                               \\\n  void *__gc_stkf[] = {(void*)11, jl_pgcstack, arg1, arg2, arg3, arg4, arg5};    \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSHARGS(rts_var,n)                               \\\n  rts_var = ((jl_value_t**)alloca(((n)+2)*sizeof(jl_value_t*)))+2;    \\\n  ((void**)rts_var)[-2] = (void*)(((size_t)n)<<1);              \\\n  ((void**)rts_var)[-1] = jl_pgcstack;                          \\\n  memset((void*)rts_var, 0, (n)*sizeof(jl_value_t*));           \\\n  jl_pgcstack = (jl_gcframe_t*)&(((void**)rts_var)[-2])\n\n#define JL_GC_POP() (jl_pgcstack = jl_pgcstack->prev)\n\nvoid jl_gc_init(void);\nvoid jl_gc_setmark(jl_value_t *v);\nDLLEXPORT int jl_gc_enable(int on);\nDLLEXPORT int jl_gc_is_enabled(void);\nDLLEXPORT int64_t jl_gc_total_bytes(void);\nDLLEXPORT uint64_t jl_gc_total_hrtime(void);\nDLLEXPORT int64_t jl_gc_diff_total_bytes(void);\nvoid jl_gc_sync_total_bytes(void);\n\nDLLEXPORT void jl_gc_collect(int);\nDLLEXPORT void jl_gc_preserve(jl_value_t *v);\nDLLEXPORT void jl_gc_unpreserve(void);\nDLLEXPORT int jl_gc_n_preserved_values(void);\n\nDLLEXPORT void jl_gc_add_finalizer(jl_value_t *v, jl_function_t *f);\nDLLEXPORT void jl_finalize(jl_value_t *o);\nDLLEXPORT jl_weakref_t *jl_gc_new_weakref(jl_value_t *value);\nvoid jl_gc_free_array(jl_array_t *a);\nvoid jl_gc_track_malloced_array(jl_array_t *a);\nvoid jl_gc_count_allocd(size_t sz);\nvoid jl_gc_run_all_finalizers(void);\nDLLEXPORT jl_value_t *jl_gc_alloc_0w(void);\nDLLEXPORT jl_value_t *jl_gc_alloc_1w(void);\nDLLEXPORT jl_value_t *jl_gc_alloc_2w(void);\nDLLEXPORT jl_value_t *jl_gc_alloc_3w(void);\nvoid *allocb(size_t sz);\nvoid *reallocb(void*, size_t);\nDLLEXPORT jl_value_t *jl_gc_allocobj(size_t sz);\n\nDLLEXPORT void jl_clear_malloc_data(void);\nDLLEXPORT int64_t jl_gc_num_pause(void);\nDLLEXPORT int64_t jl_gc_num_full_sweep(void);\n\n// GC write barriers\nDLLEXPORT void jl_gc_queue_root(jl_value_t *root); // root isa jl_value_t*\nvoid gc_queue_binding(jl_binding_t *bnd);\nvoid gc_setmark_buf(void *buf, int);\n\nstatic inline void jl_gc_wb_binding(jl_binding_t *bnd, void *val) // val isa jl_value_t*\n{\n    if (__unlikely((jl_astaggedvalue(bnd)->gc_bits & 1) == 1 &&\n                   (jl_astaggedvalue(val)->gc_bits & 1) == 0))\n        gc_queue_binding(bnd);\n}\n\nstatic inline void jl_gc_wb(void *parent, void *ptr) // parent and ptr isa jl_value_t*\n{\n    if (__unlikely((jl_astaggedvalue(parent)->gc_bits & 1) == 1 &&\n                   (jl_astaggedvalue(ptr)->gc_bits & 1) == 0))\n        jl_gc_queue_root((jl_value_t*)parent);\n}\n\nstatic inline void jl_gc_wb_buf(void *parent, void *bufptr) // parent isa jl_value_t*\n{\n    // if parent is marked and buf is not\n    if (__unlikely((jl_astaggedvalue(parent)->gc_bits & 1) == 1))\n        //            (jl_astaggedvalue(bufptr)->gc_bits) != 1))\n        gc_setmark_buf(bufptr, jl_astaggedvalue(parent)->gc_bits);\n}\n\nstatic inline void jl_gc_wb_back(void *ptr) // ptr isa jl_value_t*\n{\n    // if ptr is marked\n    if (__unlikely((jl_astaggedvalue(ptr)->gc_bits & 1) == 1)) {\n        jl_gc_queue_root((jl_value_t*)ptr);\n    }\n}\n\nDLLEXPORT void *jl_gc_managed_malloc(size_t sz);\nDLLEXPORT void *jl_gc_managed_realloc(void *d, size_t sz, size_t oldsz, int isaligned, jl_value_t* owner);\n\n// object accessors -----------------------------------------------------------\n\n#define jl_typeis(v,t) (jl_typeof(v)==(jl_value_t*)(t))\n\n#define jl_svec_len(t)              (((jl_svec_t*)(t))->length)\n#define jl_svec_set_len_unsafe(t,n) (((jl_svec_t*)(t))->length=(n))\n#define jl_svec_data(t)             (((jl_svec_t*)(t))->data)\n\nSTATIC_INLINE jl_value_t *jl_svecref(void *t, size_t i)\n{\n    assert(jl_typeis(t,jl_simplevector_type));\n    assert(i < jl_svec_len(t));\n    return jl_svec_data(t)[i];\n}\nSTATIC_INLINE jl_value_t *jl_svecset(void *t, size_t i, void *x)\n{\n    assert(jl_typeis(t,jl_simplevector_type));\n    assert(i < jl_svec_len(t));\n    jl_svec_data(t)[i] = (jl_value_t*)x;\n    if (x) jl_gc_wb(t, x);\n    return (jl_value_t*)x;\n}\n\n#ifdef STORE_ARRAY_LEN\n#define jl_array_len(a)   (((jl_array_t*)(a))->length)\n#else\nDLLEXPORT size_t jl_array_len_(jl_array_t *a);\n#define jl_array_len(a)   jl_array_len_((jl_array_t*)(a))\n#endif\n#define jl_array_data(a)  ((void*)((jl_array_t*)(a))->data)\n#define jl_array_dim(a,i) ((&((jl_array_t*)(a))->nrows)[i])\n#define jl_array_dim0(a)  (((jl_array_t*)(a))->nrows)\n#define jl_array_nrows(a) (((jl_array_t*)(a))->nrows)\n#define jl_array_ndims(a) ((int32_t)(((jl_array_t*)a)->ndims))\n#define jl_array_data_owner_offset(ndims) (offsetof(jl_array_t,ncols) + sizeof(size_t)*(1+jl_array_ndimwords(ndims))) // in bytes\n#define jl_array_data_owner(a) (*((jl_value_t**)((char*)a + jl_array_data_owner_offset(jl_array_ndims(a)))))\n\nSTATIC_INLINE jl_value_t *jl_cellref(void *a, size_t i)\n{\n    assert(i < jl_array_len(a));\n    return ((jl_value_t**)(jl_array_data(a)))[i];\n}\nSTATIC_INLINE jl_value_t *jl_cellset(void *a, size_t i, void *x)\n{\n    assert(i < jl_array_len(a));\n    ((jl_value_t**)(jl_array_data(a)))[i] = (jl_value_t*)x;\n    if (x) {\n        if (((jl_array_t*)a)->how == 3) {\n            a = jl_array_data_owner(a);\n        }\n        jl_gc_wb(a, x);\n    }\n    return (jl_value_t*)x;\n}\n\n#define jl_exprarg(e,n) (((jl_value_t**)jl_array_data(((jl_expr_t*)(e))->args))[n])\n#define jl_exprargset(e, n, v) jl_cellset(((jl_expr_t*)(e))->args, n, v)\n#define jl_expr_nargs(e) jl_array_len(((jl_expr_t*)(e))->args)\n\n#define jl_fieldref(s,i) jl_get_nth_field(((jl_value_t*)s),i)\n#define jl_nfields(v)    jl_datatype_nfields(jl_typeof(v))\n\n// Not using jl_fieldref to avoid allocations\n#define jl_symbolnode_sym(s) (*(jl_sym_t**)s)\n#define jl_symbolnode_type(s) (((jl_value_t**)s)[1])\n#define jl_linenode_file(x) (*(jl_sym_t**)x)\n#define jl_linenode_line(x) (((ptrint_t*)x)[1])\n#define jl_labelnode_label(x) (((ptrint_t*)x)[0])\n#define jl_gotonode_label(x) (((ptrint_t*)x)[0])\n#define jl_globalref_mod(s) (*(jl_module_t**)s)\n#define jl_globalref_name(s) (((jl_sym_t**)s)[1])\n\n#define jl_nparams(t)  jl_svec_len(((jl_datatype_t*)(t))->parameters)\n#define jl_tparam0(t)  jl_svecref(((jl_datatype_t*)(t))->parameters, 0)\n#define jl_tparam1(t)  jl_svecref(((jl_datatype_t*)(t))->parameters, 1)\n#define jl_tparam(t,i) jl_svecref(((jl_datatype_t*)(t))->parameters, i)\n\n// get a pointer to the data in a datatype\n#define jl_data_ptr(v)  ((jl_value_t**)v)\n\n#define jl_cell_data(a)   ((jl_value_t**)((jl_array_t*)a)->data)\n#define jl_string_data(s) ((char*)((jl_array_t*)jl_data_ptr(s)[0])->data)\n#define jl_string_len(s)  (jl_array_len(((jl_array_t*)jl_data_ptr(s)[0])))\n#define jl_iostr_data(s)  ((char*)((jl_array_t*)jl_data_ptr(s)[0])->data)\n\n#define jl_gf_mtable(f) ((jl_methtable_t*)((jl_function_t*)(f))->env)\n#define jl_gf_name(f)   (jl_gf_mtable(f)->name)\n\n// struct type info\n#define jl_field_name(st,i)    (jl_sym_t*)jl_svecref(((jl_datatype_t*)st)->name->names, (i))\n#define jl_field_type(st,i)    jl_svecref(((jl_datatype_t*)st)->types, (i))\n#define jl_datatype_size(t)    (((jl_datatype_t*)t)->size)\n#define jl_datatype_nfields(t) (((jl_datatype_t*)(t))->nfields)\n\n#define DEFINE_FIELD_ACCESSORS(f)                                       \\\n    static inline uint32_t jl_field_##f(jl_datatype_t *st, int i)       \\\n    {                                                                   \\\n        if (st->fielddesc_type == 0) {                                  \\\n            return ((jl_fielddesc8_t*)st->fields)[i].f;                 \\\n        }                                                               \\\n        else if (st->fielddesc_type == 1) {                             \\\n            return ((jl_fielddesc16_t*)st->fields)[i].f;                \\\n        }                                                               \\\n        else {                                                          \\\n            return ((jl_fielddesc32_t*)st->fields)[i].f;                \\\n        }                                                               \\\n    }                                                                   \\\n    static inline void jl_field_set##f(jl_datatype_t *st, int i,        \\\n                                       uint32_t val)                    \\\n    {                                                                   \\\n        if (st->fielddesc_type == 0) {                                  \\\n            ((jl_fielddesc8_t*)st->fields)[i].f = val;                  \\\n        }                                                               \\\n        else if (st->fielddesc_type == 1) {                             \\\n            ((jl_fielddesc16_t*)st->fields)[i].f = val;                 \\\n        }                                                               \\\n        else {                                                          \\\n            ((jl_fielddesc32_t*)st->fields)[i].f = val;                 \\\n        }                                                               \\\n    }\n\nDEFINE_FIELD_ACCESSORS(offset)\nDEFINE_FIELD_ACCESSORS(size)\nDEFINE_FIELD_ACCESSORS(isptr)\n\nstatic inline uint32_t jl_fielddesc_size(int8_t fielddesc_type)\n{\n    if (fielddesc_type == 0) {\n        return sizeof(jl_fielddesc8_t);\n    }\n    else if (fielddesc_type == 1) {\n        return sizeof(jl_fielddesc16_t);\n    }\n    else {\n        return sizeof(jl_fielddesc32_t);\n    }\n}\n\n#undef DEFINE_FIELD_ACCESSORS\n\n// basic predicates -----------------------------------------------------------\n#define jl_is_nothing(v)     (((jl_value_t*)(v)) == ((jl_value_t*)jl_nothing))\n#define jl_is_tuple(v)       (((jl_datatype_t*)jl_typeof(v))->name == jl_tuple_typename)\n#define jl_is_svec(v)        jl_typeis(v,jl_simplevector_type)\n#define jl_is_simplevector(v) jl_is_svec(v)\n#define jl_is_datatype(v)    jl_typeis(v,jl_datatype_type)\n#define jl_is_pointerfree(t) (((jl_datatype_t*)t)->pointerfree)\n#define jl_is_mutable(t)     (((jl_datatype_t*)t)->mutabl)\n#define jl_is_mutable_datatype(t) (jl_is_datatype(t) && (((jl_datatype_t*)t)->mutabl))\n#define jl_is_immutable(t)   (!((jl_datatype_t*)t)->mutabl)\n#define jl_is_immutable_datatype(t) (jl_is_datatype(t) && (!((jl_datatype_t*)t)->mutabl))\n#define jl_is_uniontype(v)   jl_typeis(v,jl_uniontype_type)\n#define jl_is_typevar(v)     jl_typeis(v,jl_tvar_type)\n#define jl_is_typector(v)    jl_typeis(v,jl_typector_type)\n#define jl_is_TypeConstructor(v)    jl_typeis(v,jl_typector_type)\n#define jl_is_typename(v)    jl_typeis(v,jl_typename_type)\n#define jl_is_int8(v)        jl_typeis(v,jl_int8_type)\n#define jl_is_int16(v)       jl_typeis(v,jl_int16_type)\n#define jl_is_int32(v)       jl_typeis(v,jl_int32_type)\n#define jl_is_int64(v)       jl_typeis(v,jl_int64_type)\n#define jl_is_uint8(v)       jl_typeis(v,jl_uint8_type)\n#define jl_is_uint16(v)      jl_typeis(v,jl_uint16_type)\n#define jl_is_uint32(v)      jl_typeis(v,jl_uint32_type)\n#define jl_is_uint64(v)      jl_typeis(v,jl_uint64_type)\n#define jl_is_float(v)       jl_subtype(v,(jl_value_t*)jl_floatingpoint_type,1)\n#define jl_is_floattype(v)   jl_subtype(v,(jl_value_t*)jl_floatingpoint_type,0)\n#define jl_is_float32(v)     jl_typeis(v,jl_float32_type)\n#define jl_is_float64(v)     jl_typeis(v,jl_float64_type)\n#define jl_is_bool(v)        jl_typeis(v,jl_bool_type)\n#define jl_is_symbol(v)      jl_typeis(v,jl_sym_type)\n#define jl_is_gensym(v)      jl_typeis(v,jl_gensym_type)\n#define jl_is_expr(v)        jl_typeis(v,jl_expr_type)\n#define jl_is_symbolnode(v)  jl_typeis(v,jl_symbolnode_type)\n#define jl_is_globalref(v)   jl_typeis(v,jl_globalref_type)\n#define jl_is_labelnode(v)   jl_typeis(v,jl_labelnode_type)\n#define jl_is_gotonode(v)    jl_typeis(v,jl_gotonode_type)\n#define jl_is_quotenode(v)   jl_typeis(v,jl_quotenode_type)\n#define jl_is_newvarnode(v)  jl_typeis(v,jl_newvarnode_type)\n#define jl_is_topnode(v)     jl_typeis(v,jl_topnode_type)\n#define jl_is_linenode(v)    jl_typeis(v,jl_linenumbernode_type)\n#define jl_is_lambda_info(v) jl_typeis(v,jl_lambda_info_type)\n#define jl_is_module(v)      jl_typeis(v,jl_module_type)\n#define jl_is_mtable(v)      jl_typeis(v,jl_methtable_type)\n#define jl_is_task(v)        jl_typeis(v,jl_task_type)\n#define jl_is_func(v)        jl_typeis(v,jl_function_type)\n#define jl_is_function(v)    jl_is_func(v)\n#define jl_is_ascii_string(v) jl_typeis(v,jl_ascii_string_type)\n#define jl_is_utf8_string(v) jl_typeis(v,jl_utf8_string_type)\n#define jl_is_byte_string(v) (jl_is_ascii_string(v) || jl_is_utf8_string(v))\n#define jl_is_cpointer(v)    jl_is_cpointer_type(jl_typeof(v))\n#define jl_is_pointer(v)     jl_is_cpointer_type(jl_typeof(v))\n#define jl_is_gf(f)          (((jl_function_t*)(f))->fptr==jl_apply_generic)\n\nSTATIC_INLINE int jl_is_bitstype(void *v)\n{\n    return (jl_is_datatype(v) && jl_is_immutable(v) &&\n            jl_datatype_nfields(v) == 0 &&\n            !((jl_datatype_t*)(v))->abstract &&\n            ((jl_datatype_t*)(v))->size > 0);\n}\n\nSTATIC_INLINE int jl_is_structtype(void *v)\n{\n    return (jl_is_datatype(v) &&\n            (jl_datatype_nfields(v) > 0 ||\n             ((jl_datatype_t*)(v))->size == 0) &&\n            !((jl_datatype_t*)(v))->abstract);\n}\n\nSTATIC_INLINE int jl_isbits(void *t)   // corresponding to isbits() in julia\n{\n    return (jl_is_datatype(t) && !((jl_datatype_t*)t)->mutabl &&\n            ((jl_datatype_t*)t)->pointerfree && !((jl_datatype_t*)t)->abstract);\n}\n\nSTATIC_INLINE int jl_is_datatype_singleton(jl_datatype_t *d)\n{\n    return (d->instance != NULL ||\n            (!d->abstract && d->size == 0 && d != jl_sym_type && d->name != jl_array_typename &&\n             (d->name->names == jl_emptysvec || !d->mutabl)));\n}\n\nSTATIC_INLINE int jl_is_abstracttype(void *v)\n{\n    return (jl_is_datatype(v) && ((jl_datatype_t*)(v))->abstract);\n}\n\nSTATIC_INLINE int jl_is_array_type(void *t)\n{\n    return (jl_is_datatype(t) &&\n            ((jl_datatype_t*)(t))->name == jl_array_typename);\n}\n\nSTATIC_INLINE int jl_is_array(void *v)\n{\n    jl_value_t *t = jl_typeof(v);\n    return jl_is_array_type(t);\n}\n\nSTATIC_INLINE int jl_is_cpointer_type(jl_value_t *t)\n{\n    return (jl_is_datatype(t) &&\n            ((jl_datatype_t*)(t))->name == jl_pointer_type->name);\n}\n\nSTATIC_INLINE int jl_is_abstract_ref_type(jl_value_t *t)\n{\n    return (jl_is_datatype(t) &&\n            ((jl_datatype_t*)(t))->name == jl_ref_type->name);\n}\n\nSTATIC_INLINE jl_value_t *jl_is_ref_type(jl_value_t *t)\n{\n    if (!jl_is_datatype(t)) return 0;\n    jl_datatype_t *dt = (jl_datatype_t*)t;\n    while (dt != jl_any_type && dt->name != dt->super->name) {\n        if (dt->name == jl_ref_type->name)\n            return (jl_value_t*)dt;\n        dt = dt->super;\n    }\n    return 0;\n}\n\nSTATIC_INLINE int jl_is_tuple_type(void *t)\n{\n    return (jl_is_datatype(t) &&\n            ((jl_datatype_t*)(t))->name == jl_tuple_typename);\n}\n\nSTATIC_INLINE int jl_is_vararg_type(jl_value_t *v)\n{\n    return (jl_is_datatype(v) &&\n            ((jl_datatype_t*)(v))->name == jl_vararg_type->name);\n}\n\nSTATIC_INLINE int jl_is_va_tuple(jl_datatype_t *t)\n{\n    size_t l = jl_svec_len(t->parameters);\n    return (l>0 && jl_is_vararg_type(jl_tparam(t,l-1)));\n}\n\nSTATIC_INLINE int jl_is_ntuple_type(jl_value_t *v)\n{\n    return (jl_is_datatype(v) &&\n            ((jl_datatype_t*)v)->name == jl_ntuple_typename);\n}\n\nSTATIC_INLINE int jl_is_type_type(jl_value_t *v)\n{\n    return (jl_is_datatype(v) &&\n            ((jl_datatype_t*)(v))->name == jl_type_type->name);\n}\n\n// object identity\nDLLEXPORT int jl_egal(jl_value_t *a, jl_value_t *b);\nDLLEXPORT uptrint_t jl_object_id(jl_value_t *v);\n\n// type predicates and basic operations\nint jl_is_type(jl_value_t *v);\nDLLEXPORT int jl_is_leaf_type(jl_value_t *v);\nDLLEXPORT int jl_has_typevars(jl_value_t *v);\nDLLEXPORT int jl_subtype(jl_value_t *a, jl_value_t *b, int ta);\nDLLEXPORT int jl_types_equal(jl_value_t *a, jl_value_t *b);\nDLLEXPORT jl_value_t *jl_type_union(jl_svec_t *types);\njl_value_t *jl_type_union_v(jl_value_t **ts, size_t n);\njl_value_t *jl_type_intersection_matching(jl_value_t *a, jl_value_t *b,\n                                          jl_svec_t **penv, jl_svec_t *tvars);\nDLLEXPORT jl_value_t *jl_type_intersection(jl_value_t *a, jl_value_t *b);\nDLLEXPORT int jl_args_morespecific(jl_value_t *a, jl_value_t *b);\nDLLEXPORT const char *jl_typename_str(jl_value_t *v);\nDLLEXPORT const char *jl_typeof_str(jl_value_t *v);\nDLLEXPORT int jl_type_morespecific(jl_value_t *a, jl_value_t *b);\n\n// type constructors\nDLLEXPORT jl_typename_t *jl_new_typename(jl_sym_t *name);\nDLLEXPORT jl_tvar_t *jl_new_typevar(jl_sym_t *name,jl_value_t *lb,jl_value_t *ub);\njl_typector_t *jl_new_type_ctor(jl_svec_t *params, jl_value_t *body);\nDLLEXPORT jl_value_t *jl_apply_type(jl_value_t *tc, jl_svec_t *params);\nDLLEXPORT jl_tupletype_t *jl_apply_tuple_type(jl_svec_t *params);\nDLLEXPORT jl_tupletype_t *jl_apply_tuple_type_v(jl_value_t **p, size_t np);\njl_value_t *jl_apply_type_(jl_value_t *tc, jl_value_t **params, size_t n);\njl_value_t *jl_instantiate_type_with(jl_value_t *t, jl_value_t **env, size_t n);\njl_datatype_t *jl_new_abstracttype(jl_value_t *name, jl_datatype_t *super,\n                                   jl_svec_t *parameters);\nDLLEXPORT jl_datatype_t *jl_new_uninitialized_datatype(size_t nfields,\n                                                       int8_t fielddesc_type);\nDLLEXPORT jl_datatype_t *jl_new_datatype(jl_sym_t *name, jl_datatype_t *super,\n                                         jl_svec_t *parameters,\n                                         jl_svec_t *fnames, jl_svec_t *ftypes,\n                                         int abstract, int mutabl, int ninitialized);\nDLLEXPORT jl_datatype_t *jl_new_bitstype(jl_value_t *name, jl_datatype_t *super,\n                                         jl_svec_t *parameters, size_t nbits);\njl_datatype_t *jl_wrap_Type(jl_value_t *t);  // x -> Type{x}\njl_datatype_t *jl_wrap_vararg(jl_value_t *t);\n\n// constructors\nDLLEXPORT jl_value_t *jl_new_bits(jl_value_t *bt, void *data);\nvoid jl_assign_bits(void *dest, jl_value_t *bits);\nDLLEXPORT jl_value_t *jl_new_struct(jl_datatype_t *type, ...);\nDLLEXPORT jl_value_t *jl_new_structv(jl_datatype_t *type, jl_value_t **args, uint32_t na);\nDLLEXPORT jl_value_t *jl_new_struct_uninit(jl_datatype_t *type);\nDLLEXPORT jl_function_t *jl_new_closure(jl_fptr_t proc, jl_value_t *env,\n                                        jl_lambda_info_t *li);\nDLLEXPORT jl_lambda_info_t *jl_new_lambda_info(jl_value_t *ast, jl_svec_t *sparams, jl_module_t *ctx);\nDLLEXPORT jl_svec_t *jl_svec(size_t n, ...);\nDLLEXPORT jl_svec_t *jl_svec1(void *a);\nDLLEXPORT jl_svec_t *jl_svec2(void *a, void *b);\nDLLEXPORT jl_svec_t *jl_alloc_svec(size_t n);\nDLLEXPORT jl_svec_t *jl_alloc_svec_uninit(size_t n);\nDLLEXPORT jl_svec_t *jl_svec_append(jl_svec_t *a, jl_svec_t *b);\njl_svec_t *jl_svec_copy(jl_svec_t *a);\nDLLEXPORT jl_svec_t *jl_svec_fill(size_t n, jl_value_t *x);\nDLLEXPORT jl_value_t *jl_tupletype_fill(size_t n, jl_value_t *v);\nDLLEXPORT jl_sym_t *jl_symbol(const char *str);\nDLLEXPORT jl_sym_t *jl_symbol_lookup(const char *str);\nDLLEXPORT jl_sym_t *jl_symbol_n(const char *str, int32_t len);\nDLLEXPORT jl_sym_t *jl_gensym(void);\nDLLEXPORT jl_sym_t *jl_tagged_gensym(const char *str, int32_t len);\nDLLEXPORT jl_sym_t *jl_get_root_symbol(void);\njl_expr_t *jl_exprn(jl_sym_t *head, size_t n);\njl_function_t *jl_new_generic_function(jl_sym_t *name, jl_module_t *module);\nvoid jl_add_method(jl_function_t *gf, jl_tupletype_t *types, jl_function_t *meth,\n                   jl_svec_t *tvars, int8_t isstaged);\nDLLEXPORT jl_value_t *jl_generic_function_def(jl_sym_t *name, jl_value_t **bp, jl_value_t *bp_owner,\n                                              jl_binding_t *bnd);\nDLLEXPORT jl_value_t *jl_method_def(jl_sym_t *name, jl_value_t **bp, jl_value_t *bp_owner, jl_binding_t *bnd,\n                                    jl_svec_t *argtypes, jl_function_t *f, jl_value_t *isstaged,\n                                    jl_value_t *call_func, int iskw);\nDLLEXPORT jl_value_t *jl_box_bool(int8_t x);\nDLLEXPORT jl_value_t *jl_box_int8(int8_t x);\nDLLEXPORT jl_value_t *jl_box_uint8(uint8_t x);\nDLLEXPORT jl_value_t *jl_box_int16(int16_t x);\nDLLEXPORT jl_value_t *jl_box_uint16(uint16_t x);\nDLLEXPORT jl_value_t *jl_box_int32(int32_t x);\nDLLEXPORT jl_value_t *jl_box_uint32(uint32_t x);\nDLLEXPORT jl_value_t *jl_box_char(uint32_t x);\nDLLEXPORT jl_value_t *jl_box_int64(int64_t x);\nDLLEXPORT jl_value_t *jl_box_uint64(uint64_t x);\nDLLEXPORT jl_value_t *jl_box_float32(float x);\nDLLEXPORT jl_value_t *jl_box_float64(double x);\nDLLEXPORT jl_value_t *jl_box_voidpointer(void *x);\nDLLEXPORT jl_value_t *jl_box_gensym(size_t x);\nDLLEXPORT jl_value_t *jl_box8 (jl_datatype_t *t, int8_t  x);\nDLLEXPORT jl_value_t *jl_box16(jl_datatype_t *t, int16_t x);\nDLLEXPORT jl_value_t *jl_box32(jl_datatype_t *t, int32_t x);\nDLLEXPORT jl_value_t *jl_box64(jl_datatype_t *t, int64_t x);\nDLLEXPORT int8_t jl_unbox_bool(jl_value_t *v);\nDLLEXPORT int8_t jl_unbox_int8(jl_value_t *v);\nDLLEXPORT uint8_t jl_unbox_uint8(jl_value_t *v);\nDLLEXPORT int16_t jl_unbox_int16(jl_value_t *v);\nDLLEXPORT uint16_t jl_unbox_uint16(jl_value_t *v);\nDLLEXPORT int32_t jl_unbox_int32(jl_value_t *v);\nDLLEXPORT uint32_t jl_unbox_uint32(jl_value_t *v);\nDLLEXPORT int64_t jl_unbox_int64(jl_value_t *v);\nDLLEXPORT uint64_t jl_unbox_uint64(jl_value_t *v);\nDLLEXPORT float jl_unbox_float32(jl_value_t *v);\nDLLEXPORT double jl_unbox_float64(jl_value_t *v);\nDLLEXPORT void *jl_unbox_voidpointer(jl_value_t *v);\nDLLEXPORT ssize_t jl_unbox_gensym(jl_value_t *v);\n\nDLLEXPORT int jl_get_size(jl_value_t *val, size_t *pnt);\n\n#ifdef _P64\n#define jl_box_long(x)   jl_box_int64(x)\n#define jl_box_ulong(x)  jl_box_uint64(x)\n#define jl_unbox_long(x) jl_unbox_int64(x)\n#define jl_is_long(x)    jl_is_int64(x)\n#define jl_long_type     jl_int64_type\n#else\n#define jl_box_long(x)   jl_box_int32(x)\n#define jl_box_ulong(x)  jl_box_uint32(x)\n#define jl_unbox_long(x) jl_unbox_int32(x)\n#define jl_is_long(x)    jl_is_int32(x)\n#define jl_long_type     jl_int32_type\n#endif\n\n// structs\nDLLEXPORT int         jl_field_index(jl_datatype_t *t, jl_sym_t *fld, int err);\nDLLEXPORT jl_value_t *jl_get_nth_field(jl_value_t *v, size_t i);\nDLLEXPORT jl_value_t *jl_get_nth_field_checked(jl_value_t *v, size_t i);\nDLLEXPORT void        jl_set_nth_field(jl_value_t *v, size_t i, jl_value_t *rhs);\nDLLEXPORT int         jl_field_isdefined(jl_value_t *v, size_t i);\nDLLEXPORT jl_value_t *jl_get_field(jl_value_t *o, const char *fld);\nDLLEXPORT jl_value_t *jl_value_ptr(jl_value_t *a);\n\n// arrays\n\nDLLEXPORT jl_array_t *jl_new_array(jl_value_t *atype, jl_value_t *dims);\nDLLEXPORT jl_array_t *jl_new_arrayv(jl_value_t *atype, ...);\nDLLEXPORT jl_array_t *jl_reshape_array(jl_value_t *atype, jl_array_t *data,\n                                       jl_value_t *dims);\nDLLEXPORT jl_array_t *jl_ptr_to_array_1d(jl_value_t *atype, void *data,\n                                         size_t nel, int own_buffer);\nDLLEXPORT jl_array_t *jl_ptr_to_array(jl_value_t *atype, void *data,\n                                      jl_value_t *dims, int own_buffer);\nint jl_array_store_unboxed(jl_value_t *el_type);\n\nDLLEXPORT jl_array_t *jl_alloc_array_1d(jl_value_t *atype, size_t nr);\nDLLEXPORT jl_array_t *jl_alloc_array_2d(jl_value_t *atype, size_t nr, size_t nc);\nDLLEXPORT jl_array_t *jl_alloc_array_3d(jl_value_t *atype, size_t nr, size_t nc,\n                                        size_t z);\nDLLEXPORT jl_array_t *jl_pchar_to_array(const char *str, size_t len);\nDLLEXPORT jl_value_t *jl_pchar_to_string(const char *str, size_t len);\nDLLEXPORT jl_value_t *jl_cstr_to_string(const char *str);\nDLLEXPORT jl_value_t *jl_array_to_string(jl_array_t *a);\nDLLEXPORT jl_array_t *jl_alloc_cell_1d(size_t n);\nDLLEXPORT jl_value_t *jl_arrayref(jl_array_t *a, size_t i);  // 0-indexed\nDLLEXPORT void jl_arrayset(jl_array_t *a, jl_value_t *v, size_t i);  // 0-indexed\nDLLEXPORT void jl_arrayunset(jl_array_t *a, size_t i);  // 0-indexed\nint jl_array_isdefined(jl_value_t **args, int nargs);\nDLLEXPORT void jl_array_grow_end(jl_array_t *a, size_t inc);\nDLLEXPORT void jl_array_del_end(jl_array_t *a, size_t dec);\nDLLEXPORT void jl_array_grow_beg(jl_array_t *a, size_t inc);\nDLLEXPORT void jl_array_del_beg(jl_array_t *a, size_t dec);\nDLLEXPORT void jl_array_sizehint(jl_array_t *a, size_t sz);\nDLLEXPORT void jl_cell_1d_push(jl_array_t *a, jl_value_t *item);\nDLLEXPORT jl_value_t *jl_apply_array_type(jl_datatype_t *type, size_t dim);\n// property access\nDLLEXPORT void *jl_array_ptr(jl_array_t *a);\nDLLEXPORT void *jl_array_eltype(jl_value_t *a);\nDLLEXPORT int jl_array_rank(jl_value_t *a);\nDLLEXPORT size_t jl_array_size(jl_value_t *a, int d);\n\n// strings\nDLLEXPORT const char *jl_bytestring_ptr(jl_value_t *s);\n\n// modules and global variables\nextern DLLEXPORT jl_module_t *jl_main_module;\nextern DLLEXPORT jl_module_t *jl_internal_main_module;\nextern DLLEXPORT jl_module_t *jl_core_module;\nextern DLLEXPORT jl_module_t *jl_base_module;\nextern DLLEXPORT jl_module_t *jl_top_module;\nextern DLLEXPORT jl_module_t *jl_current_module;\nDLLEXPORT jl_module_t *jl_new_module(jl_sym_t *name);\n// get binding for reading\nDLLEXPORT jl_binding_t *jl_get_binding(jl_module_t *m, jl_sym_t *var);\nDLLEXPORT jl_binding_t *jl_get_binding_or_error(jl_module_t *m, jl_sym_t *var);\nDLLEXPORT jl_value_t *jl_module_globalref(jl_module_t *m, jl_sym_t *var);\n// get binding for assignment\nDLLEXPORT jl_binding_t *jl_get_binding_wr(jl_module_t *m, jl_sym_t *var);\nDLLEXPORT jl_binding_t *jl_get_binding_for_method_def(jl_module_t *m, jl_sym_t *var);\nDLLEXPORT int jl_boundp(jl_module_t *m, jl_sym_t *var);\nDLLEXPORT int jl_defines_or_exports_p(jl_module_t *m, jl_sym_t *var);\nDLLEXPORT int jl_binding_resolved_p(jl_module_t *m, jl_sym_t *var);\nDLLEXPORT int jl_is_const(jl_module_t *m, jl_sym_t *var);\nDLLEXPORT jl_value_t *jl_get_global(jl_module_t *m, jl_sym_t *var);\nDLLEXPORT void jl_set_global(jl_module_t *m, jl_sym_t *var, jl_value_t *val);\nDLLEXPORT void jl_set_const(jl_module_t *m, jl_sym_t *var, jl_value_t *val);\nDLLEXPORT void jl_checked_assignment(jl_binding_t *b, jl_value_t *rhs);\nDLLEXPORT void jl_declare_constant(jl_binding_t *b);\nDLLEXPORT void jl_module_using(jl_module_t *to, jl_module_t *from);\nDLLEXPORT void jl_module_use(jl_module_t *to, jl_module_t *from, jl_sym_t *s);\nDLLEXPORT void jl_module_import(jl_module_t *to, jl_module_t *from, jl_sym_t *s);\nDLLEXPORT void jl_module_importall(jl_module_t *to, jl_module_t *from);\nDLLEXPORT void jl_module_export(jl_module_t *from, jl_sym_t *s);\nDLLEXPORT int jl_is_imported(jl_module_t *m, jl_sym_t *s);\nDLLEXPORT jl_module_t *jl_new_main_module(void);\nDLLEXPORT void jl_add_standard_imports(jl_module_t *m);\nSTATIC_INLINE jl_function_t *jl_get_function(jl_module_t *m, const char *name)\n{\n    return  (jl_function_t*) jl_get_global(m, jl_symbol(name));\n}\nDLLEXPORT void jl_module_run_initializer(jl_module_t *m);\njl_function_t *jl_module_call_func(jl_module_t *m);\nint jl_is_submodule(jl_module_t *child, jl_module_t *parent);\n\n// eq hash tables\nDLLEXPORT jl_array_t *jl_eqtable_put(jl_array_t *h, void *key, void *val);\nDLLEXPORT jl_value_t *jl_eqtable_get(jl_array_t *h, void *key, jl_value_t *deflt);\n\n// system information\nDLLEXPORT int jl_errno(void);\nDLLEXPORT void jl_set_errno(int e);\nDLLEXPORT int32_t jl_stat(const char *path, char *statbuf);\nDLLEXPORT int jl_cpu_cores(void);\nDLLEXPORT long jl_getpagesize(void);\nDLLEXPORT long jl_getallocationgranularity(void);\nDLLEXPORT int jl_is_debugbuild(void);\nDLLEXPORT jl_sym_t* jl_get_OS_NAME();\nDLLEXPORT jl_sym_t* jl_get_ARCH();\n\n// environment entries\nDLLEXPORT jl_value_t *jl_environ(int i);\n\n// throwing common exceptions\nDLLEXPORT void NORETURN jl_error(const char *str);\nDLLEXPORT void NORETURN jl_errorf(const char *fmt, ...);\nDLLEXPORT void NORETURN jl_exceptionf(jl_datatype_t *ty, const char *fmt, ...);\nDLLEXPORT void NORETURN jl_too_few_args(const char *fname, int min);\nDLLEXPORT void NORETURN jl_too_many_args(const char *fname, int max);\nDLLEXPORT void NORETURN jl_type_error(const char *fname, jl_value_t *expected, jl_value_t *got);\nDLLEXPORT void NORETURN jl_type_error_rt(const char *fname, const char *context,\n                                jl_value_t *ty, jl_value_t *got);\nDLLEXPORT void NORETURN jl_undefined_var_error(jl_sym_t *var);\nDLLEXPORT void NORETURN jl_bounds_error(jl_value_t *v, jl_value_t *t);\nDLLEXPORT void NORETURN jl_bounds_error_v(jl_value_t *v, jl_value_t **idxs, size_t nidxs);\nDLLEXPORT void NORETURN jl_bounds_error_int(jl_value_t *v, size_t i);\nDLLEXPORT void NORETURN jl_bounds_error_tuple_int(jl_value_t **v, size_t nv, size_t i);\nDLLEXPORT void NORETURN jl_bounds_error_unboxed_int(void *v, jl_value_t *vt, size_t i);\nDLLEXPORT void NORETURN jl_bounds_error_ints(jl_value_t *v, size_t *idxs, size_t nidxs);\nDLLEXPORT jl_value_t *jl_exception_occurred(void);\nDLLEXPORT void jl_exception_clear(void);\n\n#define JL_NARGS(fname, min, max)                               \\\n    if (nargs < min) jl_too_few_args(#fname, min);              \\\n    else if (nargs > max) jl_too_many_args(#fname, max);\n\n#define JL_NARGSV(fname, min)                           \\\n    if (nargs < min) jl_too_few_args(#fname, min);\n\n#define JL_TYPECHK(fname, type, v)                                      \\\n    if (!jl_is_##type(v)) {                                             \\\n        jl_type_error(#fname, (jl_value_t*)jl_##type##_type, (v));      \\\n    }\n#define JL_TYPECHKS(fname, type, v)                                     \\\n    if (!jl_is_##type(v)) {                                             \\\n        jl_type_error(fname, (jl_value_t*)jl_##type##_type, (v));       \\\n    }\n\n// initialization functions\ntypedef enum {\n    JL_IMAGE_CWD = 0,\n    JL_IMAGE_JULIA_HOME = 1,\n    //JL_IMAGE_LIBJULIA = 2,\n} JL_IMAGE_SEARCH;\nDLLEXPORT void julia_init(JL_IMAGE_SEARCH rel);\nDLLEXPORT void jl_init(const char *julia_home_dir);\nDLLEXPORT void jl_init_with_image(const char *julia_home_dir, const char *image_relative_path);\nDLLEXPORT int jl_is_initialized(void);\nDLLEXPORT int julia_trampoline(int argc, const char *argv[], int (*pmain)(int ac,char *av[]));\nDLLEXPORT void jl_atexit_hook(int status);\nDLLEXPORT void NORETURN jl_exit(int status);\n\nDLLEXPORT int jl_deserialize_verify_header(ios_t *s);\nDLLEXPORT void jl_preload_sysimg_so(const char *fname);\nDLLEXPORT ios_t *jl_create_system_image(void);\nDLLEXPORT void jl_save_system_image(const char *fname);\nDLLEXPORT void jl_restore_system_image(const char *fname);\nDLLEXPORT void jl_restore_system_image_data(const char *buf, size_t len);\nDLLEXPORT int jl_save_incremental(const char *fname, jl_array_t* worklist);\nDLLEXPORT jl_value_t *jl_restore_incremental(const char *fname);\nDLLEXPORT jl_value_t *jl_restore_incremental_from_buf(const char *buf, size_t sz);\nvoid jl_init_restored_modules(jl_array_t *init_order);\n\n// front end interface\nDLLEXPORT jl_value_t *jl_parse_input_line(const char *str, size_t len);\nDLLEXPORT jl_value_t *jl_parse_string(const char *str, size_t len,\n                                      int pos0, int greedy);\nDLLEXPORT int jl_parse_depwarn(int warn);\nint jl_start_parsing_file(const char *fname);\nvoid jl_stop_parsing(void);\njl_value_t *jl_parse_next(void);\nDLLEXPORT jl_value_t *jl_load_file_string(const char *text, size_t len,\n                                          char *filename, size_t namelen);\nDLLEXPORT jl_value_t *jl_expand(jl_value_t *expr);\nDLLEXPORT jl_value_t *jl_expand_in(jl_module_t *module, jl_value_t *expr);\njl_lambda_info_t *jl_wrap_expr(jl_value_t *expr);\nDLLEXPORT void *jl_eval_string(const char *str);\n\n// external libraries\nenum JL_RTLD_CONSTANT {\n     JL_RTLD_LOCAL=1U,\n     JL_RTLD_GLOBAL=2U,\n     JL_RTLD_LAZY=4U,\n     JL_RTLD_NOW=8U,\n     /* Linux/glibc and MacOS X: */\n     JL_RTLD_NODELETE=16U,\n     JL_RTLD_NOLOAD=32U,\n     /* Linux/glibc: */\n     JL_RTLD_DEEPBIND=64U,\n     /* MacOS X 10.5+: */\n     JL_RTLD_FIRST=128U\n};\n#define JL_RTLD_DEFAULT (JL_RTLD_LAZY | JL_RTLD_DEEPBIND)\n\ntypedef void *jl_uv_libhandle; // uv_lib_t* (avoid uv.h dependency)\nDLLEXPORT jl_uv_libhandle jl_load_dynamic_library(const char *fname, unsigned flags);\nDLLEXPORT jl_uv_libhandle jl_load_dynamic_library_e(const char *fname, unsigned flags);\nDLLEXPORT void *jl_dlsym_e(jl_uv_libhandle handle, const char *symbol);\nDLLEXPORT void *jl_dlsym(jl_uv_libhandle handle, const char *symbol);\nDLLEXPORT int jl_uv_dlopen(const char *filename, jl_uv_libhandle lib, unsigned flags);\nchar *jl_dlfind_win32(const char *name);\nDLLEXPORT int add_library_mapping(char *lib, void *hnd);\n\n#if defined(__linux__) || defined(__FreeBSD__)\nDLLEXPORT const char *jl_lookup_soname(const char *pfx, size_t n);\n#endif\n\n// compiler\nvoid jl_compile(jl_function_t *f);\nDLLEXPORT jl_value_t *jl_toplevel_eval(jl_value_t *v);\nDLLEXPORT jl_value_t *jl_toplevel_eval_in(jl_module_t *m, jl_value_t *ex, int delay_warn);\njl_value_t *jl_eval_global_var(jl_module_t *m, jl_sym_t *e);\nDLLEXPORT jl_value_t *jl_load(const char *fname, size_t len);\njl_value_t *jl_parse_eval_all(const char *fname, size_t len);\njl_value_t *jl_interpret_toplevel_thunk(jl_lambda_info_t *lam);\njl_value_t *jl_interpret_toplevel_thunk_with(jl_lambda_info_t *lam,\n                                             jl_value_t **loc, size_t nl);\njl_value_t *jl_interpret_toplevel_expr(jl_value_t *e);\nDLLEXPORT jl_value_t *jl_interpret_toplevel_expr_in(jl_module_t *m, jl_value_t *e,\n                                                    jl_value_t **locals, size_t nl);\njl_value_t *jl_static_eval(jl_value_t *ex, void *ctx_, jl_module_t *mod,\n                           jl_value_t *sp, jl_expr_t *ast, int sparams, int allow_alloc);\nint jl_is_toplevel_only_expr(jl_value_t *e);\nDLLEXPORT jl_module_t *jl_base_relative_to(jl_module_t *m);\nvoid jl_type_infer(jl_lambda_info_t *li, jl_tupletype_t *argtypes, jl_lambda_info_t *def);\n\njl_function_t *jl_method_lookup_by_type(jl_methtable_t *mt, jl_tupletype_t *types,\n                                        int cache, int inexact);\njl_function_t *jl_method_lookup(jl_methtable_t *mt, jl_value_t **args, size_t nargs, int cache);\njl_value_t *jl_gf_invoke(jl_function_t *gf, jl_tupletype_t *types,\n                         jl_value_t **args, size_t nargs);\n\n// AST access\njl_array_t *jl_lam_args(jl_expr_t *l);\njl_array_t *jl_lam_vinfo(jl_expr_t *l);\njl_array_t *jl_lam_capt(jl_expr_t *l);\njl_value_t *jl_lam_gensyms(jl_expr_t *l);\njl_array_t *jl_lam_staticparams(jl_expr_t *l);\njl_sym_t *jl_lam_argname(jl_lambda_info_t *li, int i);\nint jl_lam_vars_captured(jl_expr_t *ast);\njl_expr_t *jl_lam_body(jl_expr_t *l);\nint jl_in_vinfo_array(jl_array_t *a, jl_sym_t *v);\nint jl_local_in_ast(jl_expr_t *ast, jl_sym_t *sym);\nDLLEXPORT jl_value_t *jl_ast_rettype(jl_lambda_info_t *li, jl_value_t *ast);\njl_sym_t *jl_decl_var(jl_value_t *ex);\nDLLEXPORT int jl_is_rest_arg(jl_value_t *ex);\n\nDLLEXPORT jl_value_t *jl_prepare_ast(jl_lambda_info_t *li, jl_svec_t *sparams);\nDLLEXPORT jl_value_t *jl_copy_ast(jl_value_t *expr);\n\nDLLEXPORT jl_value_t *jl_compress_ast(jl_lambda_info_t *li, jl_value_t *ast);\nDLLEXPORT jl_value_t *jl_uncompress_ast(jl_lambda_info_t *li, jl_value_t *data);\n\nDLLEXPORT int jl_is_operator(char *sym);\nDLLEXPORT int jl_operator_precedence(char *sym);\n\nSTATIC_INLINE int jl_vinfo_capt(jl_array_t *vi)\n{\n    return (jl_unbox_long(jl_cellref(vi,2))&1)!=0;\n}\n\nSTATIC_INLINE int jl_vinfo_assigned(jl_array_t *vi)\n{\n    return (jl_unbox_long(jl_cellref(vi,2))&2)!=0;\n}\n\nSTATIC_INLINE int jl_vinfo_assigned_inner(jl_array_t *vi)\n{\n    return (jl_unbox_long(jl_cellref(vi,2))&4)!=0;\n}\n\nSTATIC_INLINE int jl_vinfo_sa(jl_array_t *vi)\n{\n    return (jl_unbox_long(jl_cellref(vi,2))&16)!=0;\n}\n\nSTATIC_INLINE int jl_vinfo_usedundef(jl_array_t *vi)\n{\n    return (jl_unbox_long(jl_cellref(vi,2))&32)!=0;\n}\n\n// calling into julia ---------------------------------------------------------\n\nSTATIC_INLINE\njl_value_t *jl_apply(jl_function_t *f, jl_value_t **args, uint32_t nargs)\n{\n    return f->fptr((jl_value_t*)f, args, nargs);\n}\n\nDLLEXPORT jl_value_t *jl_call(jl_function_t *f, jl_value_t **args, int32_t nargs);\nDLLEXPORT jl_value_t *jl_call0(jl_function_t *f);\nDLLEXPORT jl_value_t *jl_call1(jl_function_t *f, jl_value_t *a);\nDLLEXPORT jl_value_t *jl_call2(jl_function_t *f, jl_value_t *a, jl_value_t *b);\nDLLEXPORT jl_value_t *jl_call3(jl_function_t *f, jl_value_t *a, jl_value_t *b, jl_value_t *c);\n\n// interfacing with Task runtime\nDLLEXPORT void jl_yield(void);\n\n// async signal handling ------------------------------------------------------\n\n#include <signal.h>\n\nDLLEXPORT extern volatile sig_atomic_t jl_signal_pending;\nDLLEXPORT extern volatile sig_atomic_t jl_defer_signal;\n\n#define JL_SIGATOMIC_BEGIN() (jl_defer_signal++)\n#define JL_SIGATOMIC_END()                                      \\\n    do {                                                        \\\n        jl_defer_signal--;                                      \\\n        if (jl_defer_signal == 0 && jl_signal_pending != 0) {   \\\n            jl_signal_pending = 0;                              \\\n            jl_sigint_action();                                 \\\n        }                                                       \\\n    } while(0)\n\nDLLEXPORT void jl_sigint_action(void);\nDLLEXPORT void restore_signals(void);\nDLLEXPORT void jl_install_sigint_handler(void);\nDLLEXPORT void jl_sigatomic_begin(void);\nDLLEXPORT void jl_sigatomic_end(void);\n\n// tasks and exceptions -------------------------------------------------------\n\n// info describing an exception handler\ntypedef struct _jl_handler_t {\n    jl_jmp_buf eh_ctx;\n    jl_gcframe_t *gcstack;\n    struct _jl_handler_t *prev;\n} jl_handler_t;\n\ntypedef struct _jl_task_t {\n    JL_DATA_TYPE\n    struct _jl_task_t *parent;\n    struct _jl_task_t *last;\n    jl_value_t *tls;\n    jl_sym_t *state;\n    jl_value_t *consumers;\n    jl_value_t *donenotify;\n    jl_value_t *result;\n    jl_value_t *exception;\n    jl_value_t *backtrace;\n    jl_function_t *start;\n    jl_jmp_buf ctx;\n#ifndef COPY_STACKS\n    void *stack;\n#endif\n    size_t bufsz;\n    void *stkbuf;\n    size_t ssize;\n\n    // current exception handler\n    jl_handler_t *eh;\n    // saved gc stack top for context switches\n    jl_gcframe_t *gcstack;\n    // current module, or NULL if this task has not set one\n    jl_module_t *current_module;\n} jl_task_t;\n\nextern DLLEXPORT JL_THREAD jl_task_t * volatile jl_current_task;\nextern DLLEXPORT JL_THREAD jl_task_t *jl_root_task;\nextern DLLEXPORT JL_THREAD jl_value_t *jl_exception_in_transit;\n\nDLLEXPORT jl_task_t *jl_new_task(jl_function_t *start, size_t ssize);\nDLLEXPORT jl_value_t *jl_switchto(jl_task_t *t, jl_value_t *arg);\nDLLEXPORT void NORETURN jl_throw(jl_value_t *e);\nDLLEXPORT void NORETURN jl_rethrow(void);\nDLLEXPORT void NORETURN jl_rethrow_other(jl_value_t *e);\n\nSTATIC_INLINE void jl_eh_restore_state(jl_handler_t *eh)\n{\n    JL_SIGATOMIC_BEGIN();\n    jl_current_task->eh = eh->prev;\n    jl_pgcstack = eh->gcstack;\n    JL_SIGATOMIC_END();\n}\n\nDLLEXPORT void jl_enter_handler(jl_handler_t *eh);\nDLLEXPORT void jl_pop_handler(int n);\n\n#if defined(_OS_WINDOWS_)\n#if defined(_COMPILER_MINGW_)\nint __attribute__ ((__nothrow__,__returns_twice__)) jl_setjmp(jmp_buf _Buf);\n__declspec(noreturn) __attribute__ ((__nothrow__)) void jl_longjmp(jmp_buf _Buf,int _Value);\n#else\nint jl_setjmp(jmp_buf _Buf);\nvoid jl_longjmp(jmp_buf _Buf,int _Value);\n#endif\n#define jl_setjmp_f jl_setjmp\n#define jl_setjmp_name \"jl_setjmp\"\n#define jl_setjmp(a,b) jl_setjmp(a)\n#define jl_longjmp(a,b) jl_longjmp(a,b)\n#else\n// determine actual entry point name\n#if defined(sigsetjmp)\n#define jl_setjmp_f    __sigsetjmp\n#define jl_setjmp_name \"__sigsetjmp\"\n#else\n#define jl_setjmp_f    sigsetjmp\n#define jl_setjmp_name \"sigsetjmp\"\n#endif\n#define jl_setjmp(a,b) sigsetjmp(a,b)\n#define jl_longjmp(a,b) siglongjmp(a,b)\n#endif\n\n#define JL_TRY                                                    \\\n    int i__tr, i__ca; jl_handler_t __eh;                          \\\n    jl_enter_handler(&__eh);                                      \\\n    if (!jl_setjmp(__eh.eh_ctx,0))                                \\\n        for (i__tr=1; i__tr; i__tr=0, jl_eh_restore_state(&__eh))\n\n#define JL_EH_POP() jl_eh_restore_state(&__eh)\n\n#ifdef _OS_WINDOWS_\n#define JL_CATCH                                                \\\n    else                                                        \\\n        for (i__ca=1, jl_eh_restore_state(&__eh); i__ca; i__ca=0) \\\n            if (((jl_exception_in_transit==jl_stackovf_exception) && _resetstkoflw()) || 1)\n#else\n#define JL_CATCH                                                \\\n    else                                                        \\\n        for (i__ca=1, jl_eh_restore_state(&__eh); i__ca; i__ca=0)\n#endif\n\n// I/O system -----------------------------------------------------------------\n\n#define JL_STREAM uv_stream_t\n#define JL_STDOUT jl_uv_stdout\n#define JL_STDERR jl_uv_stderr\n#define JL_STDIN  jl_uv_stdin\n\nDLLEXPORT void jl_run_event_loop(uv_loop_t *loop);\nDLLEXPORT int jl_run_once(uv_loop_t *loop);\nDLLEXPORT int jl_process_events(uv_loop_t *loop);\n\nDLLEXPORT uv_loop_t *jl_global_event_loop(void);\n\nDLLEXPORT uv_pipe_t *jl_make_pipe(int writable, int julia_only, jl_value_t *julia_struct);\nDLLEXPORT void jl_close_uv(uv_handle_t *handle);\n\nDLLEXPORT int32_t jl_start_reading(uv_stream_t *handle);\n\nDLLEXPORT void jl_callback(void *callback);\n\nDLLEXPORT uv_async_t *jl_make_async(uv_loop_t *loop, jl_value_t *julia_struct);\nDLLEXPORT void jl_async_send(uv_async_t *handle);\nDLLEXPORT uv_idle_t * jl_make_idle(uv_loop_t *loop, jl_value_t *julia_struct);\nDLLEXPORT int jl_idle_start(uv_idle_t *idle);\nDLLEXPORT int jl_idle_stop(uv_idle_t *idle);\n\nDLLEXPORT uv_timer_t *jl_make_timer(uv_loop_t *loop, jl_value_t *julia_struct);\nDLLEXPORT int jl_timer_stop(uv_timer_t *timer);\n\nDLLEXPORT uv_tcp_t *jl_tcp_init(uv_loop_t *loop);\nDLLEXPORT int jl_tcp_bind(uv_tcp_t *handle, uint16_t port, uint32_t host, unsigned int flags);\n\nDLLEXPORT int jl_sizeof_ios_t(void);\n\n#ifdef _OS_WINDOWS_\nDLLEXPORT struct tm* localtime_r(const time_t *t, struct tm *tm);\n#endif\n\nDLLEXPORT jl_array_t *jl_takebuf_array(ios_t *s);\nDLLEXPORT jl_value_t *jl_takebuf_string(ios_t *s);\nDLLEXPORT void *jl_takebuf_raw(ios_t *s);\nDLLEXPORT jl_value_t *jl_readuntil(ios_t *s, uint8_t delim);\n\ntypedef struct {\n    void *data;\n    uv_loop_t *loop;\n    uv_handle_type type;\n    uv_file file;\n} jl_uv_file_t;\n\n#ifdef __GNUC__\n#define _JL_FORMAT_ATTR(type, str, arg) \\\n    __attribute__((format(type, str, arg)))\n#else\n#define _JL_FORMAT_ATTR(type, str, arg)\n#endif\n\nDLLEXPORT int jl_printf(uv_stream_t *s, const char *format, ...)\n    _JL_FORMAT_ATTR(printf, 2, 3);\nDLLEXPORT int jl_vprintf(uv_stream_t *s, const char *format, va_list args)\n    _JL_FORMAT_ATTR(printf, 2, 0);\nDLLEXPORT void jl_safe_printf(const char *str, ...)\n    _JL_FORMAT_ATTR(printf, 1, 2);\n\nextern DLLEXPORT JL_STREAM *JL_STDIN;\nextern DLLEXPORT JL_STREAM *JL_STDOUT;\nextern DLLEXPORT JL_STREAM *JL_STDERR;\n\nDLLEXPORT JL_STREAM *jl_stdout_stream(void);\nDLLEXPORT JL_STREAM *jl_stdin_stream(void);\nDLLEXPORT JL_STREAM *jl_stderr_stream(void);\n\n// showing and std streams\nDLLEXPORT void jl_show(jl_value_t *stream, jl_value_t *v);\nDLLEXPORT void jl_flush_cstdio(void);\nDLLEXPORT jl_value_t *jl_stdout_obj(void);\nDLLEXPORT jl_value_t *jl_stderr_obj(void);\nDLLEXPORT size_t jl_static_show(JL_STREAM *out, jl_value_t *v);\nDLLEXPORT size_t jl_static_show_func_sig(JL_STREAM *s, jl_value_t *type);\nDLLEXPORT void jlbacktrace(void);\n\n// debugging\nvoid show_execution_point(char *filename, int lno);\n\n// julia options -----------------------------------------------------------\n// NOTE: This struct needs to be kept in sync with JLOptions type in base/options.jl\ntypedef struct {\n    int8_t quiet;\n    const char *julia_home;\n    const char *julia_bin;\n    const char *eval;\n    const char *print;\n    const char *postboot;\n    const char *load;\n    const char *image_file;\n    const char *cpu_target;\n    int32_t nprocs;\n    const char *machinefile;\n    int8_t isinteractive;\n    int8_t color;\n    int8_t historyfile;\n    int8_t startupfile;\n    int8_t compile_enabled;\n    int8_t code_coverage;\n    int8_t malloc_log;\n    int8_t opt_level;\n    int8_t check_bounds;\n    int8_t depwarn;\n    int8_t can_inline;\n    int8_t fast_math;\n    int8_t worker;\n    int8_t handle_signals;\n    int8_t use_precompiled;\n    const char *bindto;\n    const char *outputbc;\n    const char *outputo;\n    const char *outputji;\n    int8_t incremental;\n} jl_options_t;\n\nextern DLLEXPORT jl_options_t jl_options;\n\nDLLEXPORT int jl_generating_output(void);\n\n// Settings for code_coverage and malloc_log\n// NOTE: if these numbers change, test/cmdlineargs.jl will have to be updated\n#define JL_LOG_NONE 0\n#define JL_LOG_USER 1\n#define JL_LOG_ALL  2\n\n#define JL_OPTIONS_CHECK_BOUNDS_DEFAULT 0\n#define JL_OPTIONS_CHECK_BOUNDS_ON 1\n#define JL_OPTIONS_CHECK_BOUNDS_OFF 2\n\n#define JL_OPTIONS_COMPILE_DEFAULT 1\n#define JL_OPTIONS_COMPILE_OFF 0\n#define JL_OPTIONS_COMPILE_ON  1\n#define JL_OPTIONS_COMPILE_ALL 2\n\n#define JL_OPTIONS_COLOR_ON 1\n#define JL_OPTIONS_COLOR_OFF 2\n\n#define JL_OPTIONS_HISTORYFILE_ON 1\n#define JL_OPTIONS_HISTORYFILE_OFF 0\n\n#define JL_OPTIONS_STARTUPFILE_ON 1\n#define JL_OPTIONS_STARTUPFILE_OFF 2\n\n#define JL_OPTIONS_DEPWARN_OFF 0\n#define JL_OPTIONS_DEPWARN_ON 1\n#define JL_OPTIONS_DEPWARN_ERROR 2\n\n#define JL_OPTIONS_FAST_MATH_ON 1\n#define JL_OPTIONS_FAST_MATH_OFF 2\n#define JL_OPTIONS_FAST_MATH_DEFAULT 0\n\n#define JL_OPTIONS_HANDLE_SIGNALS_ON 1\n#define JL_OPTIONS_HANDLE_SIGNALS_OFF 0\n\n#define JL_OPTIONS_USE_PRECOMPILED_YES 1\n#define JL_OPTIONS_USE_PRECOMPILED_NO 0\n\n// Version information\n#include \"julia_version.h\"\n\nDLLEXPORT extern int jl_ver_major(void);\nDLLEXPORT extern int jl_ver_minor(void);\nDLLEXPORT extern int jl_ver_patch(void);\nDLLEXPORT extern int jl_ver_is_release(void);\nDLLEXPORT extern const char* jl_ver_string(void);\nDLLEXPORT const char *jl_git_branch();\nDLLEXPORT const char *jl_git_commit();\n\n// nullable struct representations\ntypedef struct {\n    uint8_t isnull;\n    double value;\n} jl_nullable_float64_t;\n\ntypedef struct {\n    uint8_t isnull;\n    float value;\n} jl_nullable_float32_t;\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/src/init.c": "// This file is a part of Julia. License is MIT: http://julialang.org/license\n\n/*\n  init.c\n  system initialization and global state\n*/\n#include \"platform.h\"\n\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <fcntl.h>\n\n#include <errno.h>\n\n#if !defined(_OS_WINDOWS_) || defined(_COMPILER_MINGW_)\n#include <getopt.h>\n#endif\n\n#include \"julia.h\"\n#include \"julia_internal.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifdef _MSC_VER\nDLLEXPORT char * dirname(char *);\n#else\n#include <libgen.h>\n#endif\n\n#ifdef _OS_WINDOWS_\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#include <dbghelp.h>\n#include <io.h>\nextern int needsSymRefreshModuleList;\nextern BOOL (WINAPI *hSymRefreshModuleList)(HANDLE);\n#else\n#include <sys/resource.h>\n#include <unistd.h>\n#endif\n\nstatic const char system_image_path[256] = \"\\0\" JL_SYSTEM_IMAGE_PATH;\n\njl_options_t jl_options = { 0,    // quiet\n                            NULL, // julia_home\n                            NULL, // julia_bin\n                            NULL, // eval\n                            NULL, // print\n                            NULL, // postboot\n                            NULL, // load\n                            &system_image_path[1], // image_file\n                            NULL, // cpu_taget (\"native\", \"core2\", etc...)\n                            0,    // nprocs\n                            NULL, // machinefile\n                            0,    // isinteractive\n                            0,    // color\n                            JL_OPTIONS_HISTORYFILE_ON, // historyfile\n                            0,    // startupfile\n                            JL_OPTIONS_COMPILE_DEFAULT, // compile_enabled\n                            0,    // code_coverage\n                            0,    // malloc_log\n                            0,    // opt_level\n                            JL_OPTIONS_CHECK_BOUNDS_DEFAULT, // check_bounds\n                            1,    // depwarn\n                            1,    // can_inline\n                            JL_OPTIONS_FAST_MATH_DEFAULT,\n                            0,    // worker\n                            JL_OPTIONS_HANDLE_SIGNALS_ON,\n#ifdef _OS_WINDOWS_\n// TODO remove this when using LLVM 3.5+\n                            JL_OPTIONS_USE_PRECOMPILED_NO,\n#else\n                            JL_OPTIONS_USE_PRECOMPILED_YES,\n#endif\n                            NULL, // bindto\n                            NULL, // outputbc\n                            NULL, // outputo\n                            NULL, // outputji\n                            0, // incremental\n};\n\nint jl_boot_file_loaded = 0;\nchar *jl_stack_lo;\nchar *jl_stack_hi;\nsize_t jl_page_size;\n\nstatic void jl_find_stack_bottom(void)\n{\n    size_t stack_size;\n#ifndef _OS_WINDOWS_\n    struct rlimit rl;\n\n    // When using memory sanitizer, increase stack size because msan bloats stack usage\n#if defined(__has_feature)\n#if __has_feature(memory_sanitizer)\n    const rlim_t kStackSize = 32 * 1024 * 1024;   // 32MB stack\n    int result;\n\n    result = getrlimit(RLIMIT_STACK, &rl);\n    if (result == 0) {\n        if (rl.rlim_cur < kStackSize) {\n            rl.rlim_cur = kStackSize;\n            result = setrlimit(RLIMIT_STACK, &rl);\n            if (result != 0) {\n                fprintf(stderr, \"setrlimit returned result = %d\\n\", result);\n            }\n        }\n    }\n#endif\n#endif\n\n    getrlimit(RLIMIT_STACK, &rl);\n    stack_size = rl.rlim_cur;\n#else\n    stack_size = 262144;  // guess\n#endif\n    jl_stack_hi = (char*)&stack_size;\n    jl_stack_lo = jl_stack_hi - stack_size;\n}\n\nstruct uv_shutdown_queue_item { uv_handle_t *h; struct uv_shutdown_queue_item *next; };\nstruct uv_shutdown_queue { struct uv_shutdown_queue_item *first; struct uv_shutdown_queue_item *last; };\n\nstatic void jl_uv_exitcleanup_add(uv_handle_t *handle, struct uv_shutdown_queue *queue)\n{\n    struct uv_shutdown_queue_item *item = (struct uv_shutdown_queue_item*)malloc(sizeof(struct uv_shutdown_queue_item));\n    item->h = handle;\n    item->next = NULL;\n    if (queue->last) queue->last->next = item;\n    if (!queue->first) queue->first = item;\n    queue->last = item;\n}\n\nstatic void jl_uv_exitcleanup_walk(uv_handle_t *handle, void *arg)\n{\n    if (handle != (uv_handle_t*)JL_STDOUT && handle != (uv_handle_t*)JL_STDERR)\n        jl_uv_exitcleanup_add(handle, (struct uv_shutdown_queue*)arg);\n}\n\nvoid jl_write_coverage_data(void);\nvoid jl_write_malloc_log(void);\nstatic void julia_save(void);\n\nstatic struct uv_shutdown_queue_item *next_shutdown_queue_item(struct uv_shutdown_queue_item *item)\n{\n    struct uv_shutdown_queue_item *rv = item->next;\n    free(item);\n    return rv;\n}\n\nDLLEXPORT void jl_atexit_hook(int exitcode)\n{\n    if (exitcode == 0) julia_save();\n    jl_print_gc_stats(JL_STDERR);\n    if (jl_options.code_coverage)\n        jl_write_coverage_data();\n    if (jl_options.malloc_log)\n        jl_write_malloc_log();\n    if (jl_base_module) {\n        jl_value_t *f = jl_get_global(jl_base_module, jl_symbol(\"_atexit\"));\n        if (f!=NULL && jl_is_function(f)) {\n            JL_TRY {\n                jl_apply((jl_function_t*)f, NULL, 0);\n            }\n            JL_CATCH {\n                jl_printf(JL_STDERR, \"\\natexit hook threw an error: \");\n                jl_static_show(JL_STDERR, jl_exception_in_transit);\n            }\n        }\n    }\n\n    jl_gc_run_all_finalizers();\n\n    uv_loop_t *loop = jl_global_event_loop();\n\n    if (loop == NULL) {\n        return;\n    }\n\n    struct uv_shutdown_queue queue = {NULL, NULL};\n    uv_walk(loop, jl_uv_exitcleanup_walk, &queue);\n    // close stdout and stderr last, since we like being\n    // able to show stuff (incl. printf's)\n    if (JL_STDOUT != (void*) STDOUT_FILENO &&\n        ((uv_handle_t*)JL_STDOUT)->type < UV_HANDLE_TYPE_MAX)\n        jl_uv_exitcleanup_add((uv_handle_t*)JL_STDOUT, &queue);\n    if (JL_STDERR != (void*) STDERR_FILENO &&\n        ((uv_handle_t*)JL_STDERR)->type < UV_HANDLE_TYPE_MAX)\n        jl_uv_exitcleanup_add((uv_handle_t*)JL_STDERR, &queue);\n    //uv_unref((uv_handle_t*)JL_STDOUT);\n    //uv_unref((uv_handle_t*)JL_STDERR);\n    struct uv_shutdown_queue_item *item = queue.first;\n    while (item) {\n        JL_TRY {\n            while (item) {\n                uv_handle_t *handle = item->h;\n                if (handle->type != UV_FILE && uv_is_closing(handle)) {\n                    item = next_shutdown_queue_item(item);\n                    continue;\n                }\n                switch(handle->type) {\n                case UV_TTY:\n                case UV_UDP:\n                case UV_TCP:\n                case UV_NAMED_PIPE:\n                case UV_POLL:\n                case UV_TIMER:\n                case UV_ASYNC:\n                case UV_FS_EVENT:\n                case UV_FS_POLL:\n                case UV_IDLE:\n                case UV_PREPARE:\n                case UV_CHECK:\n                case UV_SIGNAL:\n                case UV_PROCESS:\n                case UV_FILE:\n                    // These will be shutdown as appropriate by jl_close_uv\n                    jl_close_uv(handle);\n                    break;\n                case UV_HANDLE:\n                case UV_STREAM:\n                case UV_UNKNOWN_HANDLE:\n                case UV_HANDLE_TYPE_MAX:\n                case UV_RAW_FD:\n                case UV_RAW_HANDLE:\n                default:\n                    assert(0);\n                }\n                item = next_shutdown_queue_item(item);\n            }\n        }\n        JL_CATCH {\n            //error handling -- continue cleanup, as much as possible\n            uv_unref(item->h);\n            jl_printf(JL_STDERR, \"error during exit cleanup: close: \");\n            jl_static_show(JL_STDERR, jl_exception_in_transit);\n            item = next_shutdown_queue_item(item);\n        }\n    }\n    // force libuv to spin until everything has finished closing\n    loop->stop_flag = 0;\n    while (uv_run(loop,UV_RUN_DEFAULT)) {}\n}\n\nvoid jl_get_builtin_hooks(void);\n\nDLLEXPORT uv_lib_t *jl_dl_handle;\nuv_lib_t _jl_RTLD_DEFAULT_handle;\nuv_lib_t *jl_RTLD_DEFAULT_handle=&_jl_RTLD_DEFAULT_handle;\n#ifdef _OS_WINDOWS_\nuv_lib_t _jl_ntdll_handle;\nuv_lib_t _jl_exe_handle;\nuv_lib_t _jl_kernel32_handle;\nuv_lib_t _jl_crtdll_handle;\nuv_lib_t _jl_winsock_handle;\n\nDLLEXPORT uv_lib_t *jl_exe_handle=&_jl_exe_handle;\nuv_lib_t *jl_ntdll_handle=&_jl_ntdll_handle;\nuv_lib_t *jl_kernel32_handle=&_jl_kernel32_handle;\nuv_lib_t *jl_crtdll_handle=&_jl_crtdll_handle;\nuv_lib_t *jl_winsock_handle=&_jl_winsock_handle;\n#endif\n\nuv_loop_t *jl_io_loop;\n\nvoid *init_stdio_handle(uv_file fd,int readable)\n{\n    void *handle;\n    uv_handle_type type = uv_guess_handle(fd);\n    jl_uv_file_t *file;\n#ifndef _OS_WINDOWS_\n    // Duplicate the file descriptor so we can later dup it over if we want to redirect\n    // STDIO without having to worry about closing the associated libuv object.\n    // On windows however, libuv objects remember streams by their HANDLE, so this is\n    // unnecessary.\n    fd = dup(fd);\n#endif\n    //jl_printf(JL_STDOUT, \"%d: %d -- %d\\n\", fd, type, 0);\n    switch(type) {\n        case UV_TTY:\n            handle = malloc(sizeof(uv_tty_t));\n            if (uv_tty_init(jl_io_loop,(uv_tty_t*)handle,fd,readable)) {\n                jl_errorf(\"error initializing stdio in uv_tty_init (%d, %d)\", fd, type);\n            }\n            ((uv_tty_t*)handle)->data=0;\n            uv_tty_set_mode((uv_tty_t*)handle,0); //cooked stdio\n            break;\n        case UV_UNKNOWN_HANDLE:\n            // dup the descriptor with a new one pointing at the bit bucket ...\n#if defined(_OS_WINDOWS_)\n            _dup2(_open(\"NUL\", O_RDWR | O_BINARY, _S_IREAD | _S_IWRITE), fd);\n#else\n            dup2(open(\"/dev/null\", O_RDWR, S_IRUSR | S_IWUSR /* 0600 */ | S_IRGRP | S_IROTH /* 0644 */), fd);\n#endif\n            // ...and continue on as in the UV_FILE case\n        case UV_FILE:\n            file = (jl_uv_file_t*)malloc(sizeof(jl_uv_file_t));\n            file->loop = jl_io_loop;\n            file->type = UV_FILE;\n            file->file = fd;\n            file->data = 0;\n            handle = file;\n            break;\n        case UV_NAMED_PIPE:\n            handle = malloc(sizeof(uv_pipe_t));\n            if (uv_pipe_init(jl_io_loop, (uv_pipe_t*)handle, (readable?UV_PIPE_READABLE:UV_PIPE_WRITABLE))) {\n                jl_errorf(\"error initializing stdio in uv_pipe_init (%d, %d)\", fd, type);\n            }\n            if (uv_pipe_open((uv_pipe_t*)handle,fd)) {\n                jl_errorf(\"error initializing stdio in uv_pipe_open (%d, %d)\", fd, type);\n            }\n            ((uv_pipe_t*)handle)->data=0;\n            break;\n        case UV_TCP:\n            handle = malloc(sizeof(uv_tcp_t));\n            if (uv_tcp_init(jl_io_loop, (uv_tcp_t*)handle)) {\n                jl_errorf(\"error initializing stdio in uv_tcp_init (%d, %d)\", fd, type);\n            }\n            if (uv_tcp_open((uv_tcp_t*)handle,fd)) {\n                jl_errorf(\"error initializing stdio in uv_tcp_open (%d, %d)\", fd, type);\n            }\n            ((uv_tcp_t*)handle)->data=0;\n            break;\n        case UV_UDP:\n        default:\n            jl_errorf(\"this type of handle for stdio is not yet supported (%d, %d)\", fd, type);\n            break;\n    }\n    return handle;\n}\n\nvoid init_stdio()\n{   //order must be 2,1,0\n    JL_STDERR = (uv_stream_t*)init_stdio_handle(STDERR_FILENO,0);\n    JL_STDOUT = (uv_stream_t*)init_stdio_handle(STDOUT_FILENO,0);\n    JL_STDIN  = (uv_stream_t*)init_stdio_handle(STDIN_FILENO,1);\n\n    jl_flush_cstdio();\n}\n\n#ifdef JL_USE_INTEL_JITEVENTS\nchar jl_using_intel_jitevents; // Non-zero if running under Intel VTune Amplifier\n#endif\n\nint isabspath(const char *in)\n{\n#ifdef _OS_WINDOWS_\n    char c0 = in[0];\n    if (c0 == '/' || c0 == '\\\\') {\n        return 1; // absolute path relative to %CD% (current drive), or UNC\n    }\n    else {\n        int s = strlen(in);\n        if (s > 2) {\n            char c1 = in[1];\n            char c2 = in[2];\n            if (c1 == ':' && (c2 == '/' || c2 == '\\\\')) return 1; // absolute path\n        }\n    }\n#else\n    if (in[0] == '/') return 1; // absolute path\n#endif\n    return 0; // relative path\n}\n\nstatic char *abspath(const char *in)\n{ // compute an absolute path location, so that chdir doesn't change the file reference\n#ifndef _OS_WINDOWS_\n    char *out = realpath(in, NULL);\n    if (!out) {\n        if (in[0] == PATHSEPSTRING[0]) {\n            out = strdup(in);\n        }\n        else {\n            size_t path_size = PATH_MAX;\n            size_t len = strlen(in);\n            char *path = (char*)malloc(PATH_MAX);\n            if (uv_cwd(path, &path_size)) {\n                jl_error(\"fatal error: unexpected error while retrieving current working directory\");\n            }\n            if (path_size + len + 1 >= PATH_MAX) {\n                jl_error(\"fatal error: current working directory path too long\");\n            }\n            path[path_size-1] = PATHSEPSTRING[0];\n            memcpy(path+path_size, in, len+1);\n            out = strdup(path);\n            free(path);\n        }\n    }\n#else\n    DWORD n = GetFullPathName(in, 0, NULL, NULL);\n    if (n <= 0) {\n        jl_error(\"fatal error: jl_options.image_file path too long or GetFullPathName failed\");\n    }\n    char *out = (char*)malloc(n);\n    DWORD m = GetFullPathName(in, n, out, NULL);\n    if (n != m + 1) {\n        jl_error(\"fatal error: jl_options.image_file path too long or GetFullPathName failed\");\n    }\n#endif\n    return out;\n}\n\nstatic void jl_resolve_sysimg_location(JL_IMAGE_SEARCH rel)\n{ // this function resolves the paths in jl_options to absolute file locations as needed\n  // and it replaces the pointers to `julia_home`, `julia_bin`, `image_file`, and output file paths\n  // it may fail, print an error, and exit(1) if any of these paths are longer than PATH_MAX\n  //\n  // note: if you care about lost memory, you should call the appropriate `free()` function\n  // on the original pointer for each `char*` you've inserted into `jl_options`, after\n  // calling `julia_init()`\n    char *free_path = (char*)malloc(PATH_MAX);\n    size_t path_size = PATH_MAX;\n    if (uv_exepath(free_path, &path_size)) {\n        jl_error(\"fatal error: unexpected error while retrieving exepath\");\n    }\n    if (path_size >= PATH_MAX) {\n        jl_error(\"fatal error: jl_options.julia_bin path too long\");\n    }\n    jl_options.julia_bin = strdup(free_path);\n    if (!jl_options.julia_home) {\n        jl_options.julia_home = getenv(\"JULIA_HOME\");\n        if (!jl_options.julia_home) {\n            jl_options.julia_home = dirname(free_path);\n        }\n    }\n    if (jl_options.julia_home)\n        jl_options.julia_home = abspath(jl_options.julia_home);\n    free(free_path);\n    free_path = NULL;\n    if (jl_options.image_file) {\n        if (rel == JL_IMAGE_JULIA_HOME && !isabspath(jl_options.image_file)) {\n            // build time path, relative to JULIA_HOME\n            free_path = (char*)malloc(PATH_MAX);\n            int n = snprintf(free_path, PATH_MAX, \"%s\" PATHSEPSTRING \"%s\",\n                             jl_options.julia_home, jl_options.image_file);\n            if (n >= PATH_MAX || n < 0) {\n                jl_error(\"fatal error: jl_options.image_file path too long\");\n            }\n            jl_options.image_file = free_path;\n        }\n        if (jl_options.image_file)\n            jl_options.image_file = abspath(jl_options.image_file);\n        if (free_path) {\n            free(free_path);\n            free_path = NULL;\n        }\n    }\n    if (jl_options.outputo)\n        jl_options.outputo = abspath(jl_options.outputo);\n    if (jl_options.outputji)\n        jl_options.outputji = abspath(jl_options.outputji);\n    if (jl_options.outputbc)\n        jl_options.outputbc = abspath(jl_options.outputbc);\n    if (jl_options.machinefile)\n        jl_options.machinefile = abspath(jl_options.machinefile);\n    if (jl_options.load)\n        jl_options.load = abspath(jl_options.load);\n}\n\nvoid _julia_init(JL_IMAGE_SEARCH rel)\n{\n    libsupport_init();\n    jl_io_loop = uv_default_loop(); // this loop will internal events (spawning process etc.),\n                                    // best to call this first, since it also initializes libuv\n    restore_signals();\n    jl_resolve_sysimg_location(rel);\n    // loads sysimg if available, and conditionally sets jl_options.cpu_target\n    jl_preload_sysimg_so(jl_options.image_file);\n    if (jl_options.cpu_target == NULL)\n        jl_options.cpu_target = \"native\";\n\n    jl_page_size = jl_getpagesize();\n    uint64_t total_mem = uv_get_total_memory();\n    if (total_mem >= (size_t)-1) {\n        total_mem = (size_t)-1;\n    }\n    jl_arr_xtralloc_limit = total_mem / 100;  // Extra allocation limited to 1% of total RAM\n    jl_find_stack_bottom();\n    jl_dl_handle = (uv_lib_t *) jl_load_dynamic_library(NULL, JL_RTLD_DEFAULT);\n#ifdef RTLD_DEFAULT\n    jl_RTLD_DEFAULT_handle->handle = RTLD_DEFAULT;\n#else\n    jl_RTLD_DEFAULT_handle->handle = jl_dl_handle->handle;\n#endif\n#ifdef _OS_WINDOWS_\n    uv_dlopen(\"ntdll.dll\", jl_ntdll_handle); // bypass julia's pathchecking for system dlls\n    uv_dlopen(\"kernel32.dll\", jl_kernel32_handle);\n#if _MSC_VER == 1800\n    uv_dlopen(\"msvcr120.dll\", jl_crtdll_handle);\n#else\n    uv_dlopen(\"msvcrt.dll\", jl_crtdll_handle);\n#endif\n    uv_dlopen(\"ws2_32.dll\", jl_winsock_handle);\n    _jl_exe_handle.handle = GetModuleHandleA(NULL);\n    if (!DuplicateHandle(GetCurrentProcess(), GetCurrentThread(),\n                         GetCurrentProcess(), (PHANDLE)&hMainThread, 0,\n                         TRUE, DUPLICATE_SAME_ACCESS)) {\n        jl_printf(JL_STDERR, \"WARNING: failed to access handle to main thread\\n\");\n    }\n    SymSetOptions(SYMOPT_UNDNAME | SYMOPT_DEFERRED_LOADS | SYMOPT_LOAD_LINES);\n    if (!SymInitialize(GetCurrentProcess(), NULL, 1)) {\n        jl_printf(JL_STDERR, \"WARNING: failed to initialize stack walk info\\n\");\n    }\n    needsSymRefreshModuleList = 0;\n    uv_lib_t jl_dbghelp;\n    uv_dlopen(\"dbghelp.dll\",&jl_dbghelp);\n    if (uv_dlsym(&jl_dbghelp, \"SymRefreshModuleList\", (void**)&hSymRefreshModuleList))\n        hSymRefreshModuleList = 0;\n#endif\n\n#if defined(JL_USE_INTEL_JITEVENTS)\n    const char *jit_profiling = getenv(\"ENABLE_JITPROFILING\");\n    if (jit_profiling && atoi(jit_profiling)) {\n        jl_using_intel_jitevents = 1;\n    }\n#endif\n\n    jl_gc_init();\n    jl_gc_enable(0);\n    jl_init_frontend();\n    jl_init_types();\n    jl_init_tasks();\n    jl_init_root_task(jl_stack_lo, jl_stack_hi-jl_stack_lo);\n\n    init_stdio();\n    // libuv stdio cleanup depends on jl_init_tasks() because JL_TRY is used in jl_atexit_hook()\n\n    jl_init_codegen();\n    jl_an_empty_cell = (jl_value_t*)jl_alloc_cell_1d(0);\n    jl_init_serializer();\n\n    if (!jl_options.image_file) {\n        jl_core_module = jl_new_module(jl_symbol(\"Core\"));\n        jl_top_module = jl_core_module;\n        jl_init_intrinsic_functions();\n        jl_init_primitives();\n\n        jl_new_main_module();\n        jl_internal_main_module = jl_main_module;\n\n        jl_current_module = jl_core_module;\n        jl_root_task->current_module = jl_current_module;\n\n        jl_load(\"boot.jl\", sizeof(\"boot.jl\"));\n        jl_get_builtin_hooks();\n        jl_boot_file_loaded = 1;\n        jl_init_box_caches();\n    }\n\n    if (jl_options.image_file) {\n        JL_TRY {\n            jl_restore_system_image(jl_options.image_file);\n        }\n        JL_CATCH {\n            jl_printf(JL_STDERR, \"error during init:\\n\");\n            jl_static_show(JL_STDERR, jl_exception_in_transit);\n            jl_printf(JL_STDERR, \"\\n\");\n            jl_exit(1);\n        }\n    }\n\n    // set module field of primitive types\n    int i;\n    void **table = jl_core_module->bindings.table;\n    for(i=1; i < jl_core_module->bindings.size; i+=2) {\n        if (table[i] != HT_NOTFOUND) {\n            jl_binding_t *b = (jl_binding_t*)table[i];\n            if (b->value && jl_is_datatype(b->value)) {\n                jl_datatype_t *tt = (jl_datatype_t*)b->value;\n                tt->name->module = jl_core_module;\n            }\n        }\n    }\n\n    // the Main module is the one which is always open, and set as the\n    // current module for bare (non-module-wrapped) toplevel expressions.\n    // it does \"using Base\" if Base is available.\n    if (jl_base_module != NULL) {\n        jl_add_standard_imports(jl_main_module);\n    }\n    // eval() uses Main by default, so Main.eval === Core.eval\n    jl_module_import(jl_main_module, jl_core_module, jl_symbol(\"eval\"));\n    jl_current_module = jl_main_module;\n    jl_root_task->current_module = jl_current_module;\n\n    if (jl_options.handle_signals == JL_OPTIONS_HANDLE_SIGNALS_ON)\n        jl_install_default_signal_handlers();\n\n    jl_gc_enable(1);\n\n    if (jl_options.image_file) {\n        jl_array_t *temp = jl_module_init_order;\n        JL_GC_PUSH1(&temp);\n        jl_module_init_order = NULL;\n        jl_init_restored_modules(temp);\n        JL_GC_POP();\n    }\n\n    if (jl_options.handle_signals == JL_OPTIONS_HANDLE_SIGNALS_ON)\n        jl_install_sigint_handler();\n}\n\nextern int asprintf(char **str, const char *fmt, ...);\n\nDLLEXPORT int jl_generating_output()\n{\n    return jl_options.outputo || jl_options.outputbc || jl_options.outputji;\n}\n\nvoid jl_compile_all(void);\n\nstatic void julia_save()\n{\n    if (jl_options.compile_enabled == JL_OPTIONS_COMPILE_ALL)\n        jl_compile_all();\n\n    if (jl_options.incremental) {\n        jl_array_t *worklist = jl_module_init_order;\n        if (!worklist) {\n            jl_printf(JL_STDERR, \"WARNING: incremental output requested, but no modules defined during run\\n\");\n            return;\n        }\n        if (jl_options.outputji)\n            if (jl_save_incremental(jl_options.outputji, worklist))\n                jl_exit(1);\n        if (jl_options.outputbc)\n            jl_printf(JL_STDERR, \"WARNING: incremental output to a .bc file is not implemented\\n\");\n        if (jl_options.outputo)\n            jl_printf(JL_STDERR, \"WARNING: incremental output to a .o file is not implemented\\n\");\n    }\n    else {\n        ios_t *s = NULL;\n        if (jl_options.outputo || jl_options.outputbc)\n            s = jl_create_system_image();\n\n        if (jl_options.outputji) {\n            if (s == NULL) {\n                jl_save_system_image(jl_options.outputji);\n            }\n            else {\n                ios_t f;\n                if (ios_file(&f, jl_options.outputji, 1, 1, 1, 1) == NULL)\n                    jl_errorf(\"cannot open system image file \\\"%s\\\" for writing\", jl_options.outputji);\n                ios_write(&f, (const char*)s->buf, s->size);\n                ios_close(&f);\n            }\n        }\n\n        if (jl_options.outputbc)\n            jl_dump_bitcode((char*)jl_options.outputbc, (const char*)s->buf, s->size);\n\n        if (jl_options.outputo)\n            jl_dump_objfile((char*)jl_options.outputo, 0, (const char*)s->buf, s->size);\n    }\n}\n\njl_function_t *jl_typeinf_func=NULL;\n\nDLLEXPORT void jl_set_typeinf_func(jl_value_t* f)\n{\n    if (!jl_is_function(f))\n        jl_error(\"jl_set_typeinf_func must set a jl_function_t*\");\n    jl_typeinf_func = (jl_function_t*)f;\n}\n\nstatic jl_value_t *core(char *name)\n{\n    return jl_get_global(jl_core_module, jl_symbol(name));\n}\n\nstatic jl_value_t *basemod(char *name)\n{\n    return jl_get_global(jl_base_module, jl_symbol(name));\n}\n\n// fetch references to things defined in boot.jl\nvoid jl_get_builtin_hooks(void)\n{\n    jl_root_task->tls = jl_nothing;\n    jl_root_task->consumers = jl_nothing;\n    jl_root_task->donenotify = jl_nothing;\n    jl_root_task->exception = jl_nothing;\n    jl_root_task->result = jl_nothing;\n\n    jl_char_type    = (jl_datatype_t*)core(\"Char\");\n    jl_int8_type    = (jl_datatype_t*)core(\"Int8\");\n    jl_uint8_type   = (jl_datatype_t*)core(\"UInt8\");\n    jl_int16_type   = (jl_datatype_t*)core(\"Int16\");\n    jl_uint16_type  = (jl_datatype_t*)core(\"UInt16\");\n    jl_uint32_type  = (jl_datatype_t*)core(\"UInt32\");\n    jl_uint64_type  = (jl_datatype_t*)core(\"UInt64\");\n\n    jl_float16_type = (jl_datatype_t*)core(\"Float16\");\n    jl_float32_type = (jl_datatype_t*)core(\"Float32\");\n    jl_float64_type = (jl_datatype_t*)core(\"Float64\");\n    jl_floatingpoint_type = (jl_datatype_t*)core(\"AbstractFloat\");\n    jl_number_type = (jl_datatype_t*)core(\"Number\");\n    jl_signed_type = (jl_datatype_t*)core(\"Signed\");\n\n    jl_stackovf_exception  = jl_new_struct_uninit((jl_datatype_t*)core(\"StackOverflowError\"));\n    jl_diverror_exception  = jl_new_struct_uninit((jl_datatype_t*)core(\"DivideError\"));\n    jl_domain_exception    = jl_new_struct_uninit((jl_datatype_t*)core(\"DomainError\"));\n    jl_overflow_exception  = jl_new_struct_uninit((jl_datatype_t*)core(\"OverflowError\"));\n    jl_inexact_exception   = jl_new_struct_uninit((jl_datatype_t*)core(\"InexactError\"));\n    jl_undefref_exception  = jl_new_struct_uninit((jl_datatype_t*)core(\"UndefRefError\"));\n    jl_undefvarerror_type  = (jl_datatype_t*)core(\"UndefVarError\");\n    jl_interrupt_exception = jl_new_struct_uninit((jl_datatype_t*)core(\"InterruptException\"));\n    jl_boundserror_type    = (jl_datatype_t*)core(\"BoundsError\");\n    jl_memory_exception    = jl_new_struct_uninit((jl_datatype_t*)core(\"OutOfMemoryError\"));\n    jl_readonlymemory_exception = jl_new_struct_uninit((jl_datatype_t*)core(\"ReadOnlyMemoryError\"));\n    jl_typeerror_type = (jl_datatype_t*)core(\"TypeError\");\n\n#ifdef SEGV_EXCEPTION\n    jl_segv_exception      = jl_new_struct_uninit((jl_datatype_t*)core(\"SegmentationFault\"));\n#endif\n\n    jl_ascii_string_type = (jl_datatype_t*)core(\"ASCIIString\");\n    jl_utf8_string_type = (jl_datatype_t*)core(\"UTF8String\");\n    jl_symbolnode_type = (jl_datatype_t*)core(\"SymbolNode\");\n    jl_weakref_type = (jl_datatype_t*)core(\"WeakRef\");\n\n    jl_array_uint8_type = jl_apply_type((jl_value_t*)jl_array_type,\n                                        jl_svec2(jl_uint8_type, jl_box_long(1)));\n}\n\nDLLEXPORT void jl_get_system_hooks(void)\n{\n    if (jl_errorexception_type) return; // only do this once\n\n    jl_errorexception_type = (jl_datatype_t*)basemod(\"ErrorException\");\n    jl_argumenterror_type = (jl_datatype_t*)basemod(\"ArgumentError\");\n    jl_methoderror_type = (jl_datatype_t*)basemod(\"MethodError\");\n    jl_loaderror_type = (jl_datatype_t*)basemod(\"LoadError\");\n    jl_initerror_type = (jl_datatype_t*)basemod(\"InitError\");\n    jl_complex_type = (jl_datatype_t*)basemod(\"Complex\");\n}\n\n#ifdef __cplusplus\n}\n#endif\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/src/dlload.c": "// This file is a part of Julia. License is MIT: http://julialang.org/license\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <sys/stat.h>\n\n#include \"platform.h\"\n#include \"julia.h\"\n#include \"julia_internal.h\"\n#ifdef _OS_WINDOWS_\n#include <windows.h>\n#include <direct.h>\n#else\n#include <unistd.h>\n#include <dlfcn.h>\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#if defined(__APPLE__)\nstatic char *extensions[] = { \"\", \".dylib\" };\n#define N_EXTENSIONS 2\n#elif defined(_OS_WINDOWS_)\nstatic char *extensions[] = { \"\", \".dll\" };\n#define N_EXTENSIONS 2\nextern int needsSymRefreshModuleList;\n#else\nstatic char *extensions[] = { \".so\", \"\" };\n#define N_EXTENSIONS 2\n#endif\n\n\n#define PATHBUF 512\n\nextern char *julia_home;\n\n#define JL_RTLD(flags, FLAG) (flags & JL_RTLD_ ## FLAG ? RTLD_ ## FLAG : 0)\n\nDLLEXPORT int jl_uv_dlopen(const char *filename, jl_uv_libhandle lib_, unsigned flags)\n{\n    uv_lib_t *lib = (uv_lib_t *) lib_;\n#if defined(_OS_WINDOWS_)\n    needsSymRefreshModuleList = 1;\n#endif\n#if defined(RTLD_GLOBAL) && defined(RTLD_LAZY) /* POSIX flags available */\n    dlerror(); /* Reset error status. */\n    lib->handle = dlopen(filename,\n                         (flags & JL_RTLD_NOW ? RTLD_NOW : RTLD_LAZY)\n                         | JL_RTLD(flags, LOCAL)\n                         | JL_RTLD(flags, GLOBAL)\n#ifdef RTLD_NODELETE\n                         | JL_RTLD(flags, NODELETE)\n#endif\n#ifdef RTLD_NOLOAD\n                         | JL_RTLD(flags, NOLOAD)\n#endif\n#ifdef RTLD_DEEPBIND\n                         | JL_RTLD(flags, DEEPBIND)\n#endif\n#ifdef RTLD_FIRST\n                         | JL_RTLD(flags, FIRST)\n#endif\n                         );\n    if (lib->handle) {\n        lib->errmsg = NULL;\n        return 0;\n    }\n    else {\n        lib->errmsg = strdup(dlerror());\n        return -1;\n    }\n#else\n    return uv_dlopen(filename, lib);\n#endif\n}\n\nstatic uv_lib_t *jl_load_dynamic_library_(const char *modname, unsigned flags, int throw_err)\n{\n    int error;\n    char *ext;\n    char path[PATHBUF];\n    int i;\n    uv_stat_t stbuf;\n    uv_lib_t *handle = (uv_lib_t*)malloc(sizeof(uv_lib_t));\n    handle->errmsg = NULL;\n\n/*\n    this branch returns handle of libjulia\n*/\n    if (modname == NULL) {\n#ifdef _OS_WINDOWS_\n        if (!GetModuleHandleExW(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,\n                                (LPCWSTR)(&jl_load_dynamic_library),\n                                &handle->handle)) {\n            free(handle);\n            jl_error(\"could not load base module\");\n        }\n#else\n        handle->handle = dlopen(NULL,RTLD_NOW);\n#endif\n        goto done;\n    }\n/*\n    this branch shortcuts absolute paths\n*/\n#ifdef _OS_WINDOWS_\n    else if (modname[1] == ':') {\n#else\n    else if (modname[0] == '/') {\n#endif\n        error = jl_uv_dlopen(modname,handle,flags);\n        if (!error)\n            goto done;\n        // bail out and show the error if file actually exists\n        if (jl_stat(modname, (char*)&stbuf) == 0)\n            goto notfound;\n        if (handle->errmsg)\n            uv_dlclose(handle);\n    }\n/*\n    this branch permutes all base paths in DL_LOAD_PATH with all extensions\n    note: skip when !jl_base_module to avoid UndefVarError(:DL_LOAD_PATH)\n*/\n    else if (jl_base_module != NULL) {\n        jl_array_t *DL_LOAD_PATH = (jl_array_t*)jl_get_global(jl_base_module, jl_symbol(\"DL_LOAD_PATH\"));\n        if (DL_LOAD_PATH != NULL) {\n            size_t j;\n            for (j = 0; j < jl_array_len(DL_LOAD_PATH); j++) {\n                char *dl_path = jl_string_data(jl_cell_data(DL_LOAD_PATH)[j]);\n                size_t len = strlen(dl_path);\n                if (len == 0)\n                    continue;\n                for(i=0; i < N_EXTENSIONS; i++) {\n                    ext = extensions[i];\n                    path[0] = '\\0';\n                    handle->handle = NULL;\n                    if (dl_path[len-1] == PATHSEPSTRING[0])\n                        snprintf(path, PATHBUF, \"%s%s%s\", dl_path, modname, ext);\n                    else\n                        snprintf(path, PATHBUF, \"%s\" PATHSEPSTRING \"%s%s\", dl_path, modname, ext);\n                    // free handle->errmsg, else it will leak on next uv_dlopen\n                    if (handle->errmsg)\n                        uv_dlclose(handle);\n                    error = jl_uv_dlopen(path, handle, flags);\n                    if (!error)\n                        goto done;\n                    // bail out and show the error if file actually exists\n                    if (jl_stat(path, (char*)&stbuf) == 0)\n                        goto notfound;\n                }\n            }\n        }\n    }\n\n    // now fall back and look in default library paths, for all extensions\n    for(i=0; i < N_EXTENSIONS; i++) {\n        ext = extensions[i];\n        path[0] = '\\0';\n        handle->handle = NULL;\n        snprintf(path, PATHBUF, \"%s%s\", modname, ext);\n        if (handle->errmsg)\n            uv_dlclose(handle);\n        error = jl_uv_dlopen(path, handle, flags);\n        if (!error)\n            goto done;\n    }\n\n#if defined(__linux__) || defined(__FreeBSD__)\n// check map of versioned libs from \"libX\" to full soname \"libX.so.ver\"\n    {\n        const char *soname = jl_lookup_soname(modname, strlen(modname));\n        error = (soname==NULL) || jl_uv_dlopen(soname, handle, flags);\n        if (!error)\n            goto done;\n    }\n#endif\n\nnotfound:\n    // copy the error message into the path buffer so we can free the lib handle\n    path[0] = '\\0';\n    snprintf(path, PATHBUF, \"%s\", uv_dlerror(handle));\n    uv_dlclose(handle);\n    free(handle);\n    if (throw_err)\n        jl_errorf(\"could not load library \\\"%s\\\"\\n%s\", modname, path);\n    return NULL;\n\ndone:\n    return handle;\n}\n\njl_uv_libhandle jl_load_dynamic_library_e(const char *modname, unsigned flags)\n{\n    return (jl_uv_libhandle) jl_load_dynamic_library_(modname, flags, 0);\n}\n\njl_uv_libhandle jl_load_dynamic_library(const char *modname, unsigned flags)\n{\n    return (jl_uv_libhandle) jl_load_dynamic_library_(modname, flags, 1);\n}\n\nvoid *jl_dlsym_e(jl_uv_libhandle handle, const char *symbol)\n{\n    void *ptr;\n    int error = uv_dlsym((uv_lib_t *) handle, symbol, &ptr);\n    if (error) ptr=NULL;\n    return ptr;\n}\n\nvoid *jl_dlsym(jl_uv_libhandle handle, const char *symbol)\n{\n    void *ptr;\n    int error = uv_dlsym((uv_lib_t *) handle, symbol, &ptr);\n    if (error) {\n        jl_errorf(\"could not load symbol \\\"%s\\\"\\n%s\", symbol, uv_dlerror((uv_lib_t *) handle));\n    }\n    return ptr;\n}\n\n#ifdef _OS_WINDOWS_\n//Look for symbols in win32 libraries\nchar *jl_dlfind_win32(const char *f_name)\n{\n    if (jl_dlsym_e(jl_exe_handle, f_name))\n        return (char*)1;\n    if (jl_dlsym_e(jl_dl_handle, f_name))\n        return (char*)2;\n    if (jl_dlsym_e(jl_kernel32_handle, f_name))\n        return \"kernel32\";\n    if (jl_dlsym_e(jl_ntdll_handle, f_name))\n        return \"ntdll\";\n    if (jl_dlsym_e(jl_crtdll_handle, f_name))\n#if _MSC_VER == 1800\n        return \"msvcr120\";\n#elif defined(_MSC_VER)\n#error This version of MSVC has not been tested.\n#else\n        return \"msvcrt\";\n#endif\n    if (jl_dlsym_e(jl_winsock_handle, f_name))\n        return \"ws2_32\";\n    // additional common libraries (libc?) could be added here, but in general,\n    // it is better to specify the library explicitly in the code. This exists\n    // mainly to ease compatibility with linux, and for libraries that don't\n    // have a name (julia.exe and libjulia.dll)\n    // We could also loop over all libraries that have been used so far, but, again,\n    // explicit is preferred over implicit\n    return NULL;\n    // oops, we didn't find it. NULL defaults to searching jl_RTLD_DEFAULT_handle,\n    // which defaults to jl_dl_handle, where we won't find it, and will throw the\n    // appropriate error.\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/searchindex.js": "Search.setIndex({envversion:46,filenames:[\"devdocs/C\",\"devdocs/ast\",\"devdocs/backtraces\",\"devdocs/cartesian\",\"devdocs/debuggingtips\",\"devdocs/eval\",\"devdocs/init\",\"devdocs/julia\",\"devdocs/llvm\",\"devdocs/meta\",\"devdocs/object\",\"devdocs/promote-op\",\"devdocs/reflection\",\"devdocs/stdio\",\"devdocs/subarrays\",\"devdocs/sysimg\",\"devdocs/types\",\"devdocs/valgrind\",\"index\",\"latex\",\"manual/arrays\",\"manual/calling-c-and-fortran-code\",\"manual/complex-and-rational-numbers\",\"manual/constructors\",\"manual/control-flow\",\"manual/conversion-and-promotion\",\"manual/dates\",\"manual/documentation\",\"manual/embedding\",\"manual/faq\",\"manual/functions\",\"manual/getting-started\",\"manual/index\",\"manual/integers-and-floating-point-numbers\",\"manual/interacting-with-julia\",\"manual/interfaces\",\"manual/introduction\",\"manual/linear-algebra\",\"manual/mathematical-operations\",\"manual/metaprogramming\",\"manual/methods\",\"manual/modules\",\"manual/networking-and-streams\",\"manual/noteworthy-differences\",\"manual/packages\",\"manual/parallel-computing\",\"manual/performance-tips\",\"manual/profile\",\"manual/running-external-programs\",\"manual/strings\",\"manual/style-guide\",\"manual/types\",\"manual/unicode-input\",\"manual/variables\",\"manual/variables-and-scoping\",\"manual/workflow-tips\",\"stdlib/arrays\",\"stdlib/base\",\"stdlib/c\",\"stdlib/collections\",\"stdlib/constants\",\"stdlib/dates\",\"stdlib/file\",\"stdlib/index\",\"stdlib/io-network\",\"stdlib/libc\",\"stdlib/libdl\",\"stdlib/linalg\",\"stdlib/math\",\"stdlib/numbers\",\"stdlib/parallel\",\"stdlib/pkg\",\"stdlib/profile\",\"stdlib/punctuation\",\"stdlib/sort\",\"stdlib/strings\",\"stdlib/test\"],objects:{\"\":{\"@__doc__\":[27,4,1,\"\"],Dates:[61,3,0,\"-\"],Libc:[65,3,0,\"-\"],Libdl:[66,3,0,\"-\"],Profile:[72,3,0,\"-\"],build_sysimg:[15,4,1,\"\"]},\"Base.\":{\"!=\":[68,4,1,\"\"],\"*\":[68,4,1,\"\"],\"+\":[68,4,1,\"\"],\"-\":[68,4,1,\"\"],\"/\":[68,4,1,\"\"],\"<\":[68,4,1,\"\"],\"<=\":[68,4,1,\"\"],\"==\":[68,4,1,\"\"],\">\":[68,4,1,\"\"],\">=\":[68,4,1,\"\"],\"\\\\\":[68,4,1,\"\"],\"\\u2260\":[68,4,1,\"\"],\"\\u2264\":[68,4,1,\"\"],\"\\u2265\":[68,4,1,\"\"],\"^\":[68,4,1,\"\"]},\"Base.Base\":{compilecache:[57,4,1,\"\"],linearindexing:[56,4,1,\"\"],process_messages:[70,4,1,\"\"],summarysize:[57,4,1,\"\"]},\"Base.Collections\":{\"dequeue!\":[59,4,1,\"\"],\"enqueue!\":[59,4,1,\"\"],\"heapify!\":[59,4,1,\"\"],\"heappop!\":[59,4,1,\"\"],\"heappush!\":[59,4,1,\"\"],PriorityQueue:[59,4,1,\"\"],heapify:[59,4,1,\"\"],isheap:[59,4,1,\"\"],peek:[59,4,1,\"\"]},\"Base.FFTW\":{\"plan_r2r!\":[68,4,1,\"\"],\"r2r!\":[68,4,1,\"\"],plan_r2r:[68,4,1,\"\"],r2r:[68,4,1,\"\"]},\"Base.LinAlg\":{BLAS:[67,3,0,\"-\"],LAPACK:[67,3,0,\"-\"]},\"Base.LinAlg.BLAS\":{\"axpy!\":[67,4,1,\"\"],\"blascopy!\":[67,4,1,\"\"],\"gbmv!\":[67,4,1,\"\"],\"gemm!\":[67,4,1,\"\"],\"gemv!\":[67,4,1,\"\"],\"ger!\":[67,4,1,\"\"],\"her!\":[67,4,1,\"\"],\"herk!\":[67,4,1,\"\"],\"sbmv!\":[67,4,1,\"\"],\"scal!\":[67,4,1,\"\"],\"symm!\":[67,4,1,\"\"],\"symv!\":[67,4,1,\"\"],\"syr!\":[67,4,1,\"\"],\"syrk!\":[67,4,1,\"\"],\"trmm!\":[67,4,1,\"\"],\"trmv!\":[67,4,1,\"\"],\"trsm!\":[67,4,1,\"\"],\"trsv!\":[67,4,1,\"\"],I:[67,5,1,\"\"],asum:[67,4,1,\"\"],blas_set_num_threads:[67,4,1,\"\"],dot:[67,4,1,\"\"],dotc:[67,4,1,\"\"],dotu:[67,4,1,\"\"],gbmv:[67,4,1,\"\"],gemm:[67,4,1,\"\"],gemv:[67,4,1,\"\"],herk:[67,4,1,\"\"],nrm2:[67,4,1,\"\"],sbmv:[67,4,1,\"\"],scal:[67,4,1,\"\"],symm:[67,4,1,\"\"],symv:[67,4,1,\"\"],syrk:[67,4,1,\"\"],trmm:[67,4,1,\"\"],trmv:[67,4,1,\"\"],trsm:[67,4,1,\"\"],trsv:[67,4,1,\"\"]},\"Base.LinAlg.LAPACK\":{\"bdsdc!\":[67,4,1,\"\"],\"bdsqr!\":[67,4,1,\"\"],\"gbtrf!\":[67,4,1,\"\"],\"gbtrs!\":[67,4,1,\"\"],\"gebak!\":[67,4,1,\"\"],\"gebal!\":[67,4,1,\"\"],\"gebrd!\":[67,4,1,\"\"],\"gecon!\":[67,4,1,\"\"],\"gees!\":[67,4,1,\"\"],\"geev!\":[67,4,1,\"\"],\"geevx!\":[67,4,1,\"\"],\"gehrd!\":[67,4,1,\"\"],\"gelqf!\":[67,4,1,\"\"],\"gels!\":[67,4,1,\"\"],\"gelsd!\":[67,4,1,\"\"],\"gelsy!\":[67,4,1,\"\"],\"gemqrt!\":[67,4,1,\"\"],\"geqlf!\":[67,4,1,\"\"],\"geqp3!\":[67,4,1,\"\"],\"geqrf!\":[67,4,1,\"\"],\"geqrt!\":[67,4,1,\"\"],\"geqrt3!\":[67,4,1,\"\"],\"gerqf!\":[67,4,1,\"\"],\"gesdd!\":[67,4,1,\"\"],\"gesv!\":[67,4,1,\"\"],\"gesvd!\":[67,4,1,\"\"],\"gesvx!\":[67,4,1,\"\"],\"getrf!\":[67,4,1,\"\"],\"getri!\":[67,4,1,\"\"],\"getrs!\":[67,4,1,\"\"],\"gges!\":[67,4,1,\"\"],\"ggev!\":[67,4,1,\"\"],\"gglse!\":[67,4,1,\"\"],\"ggsvd!\":[67,4,1,\"\"],\"gtsv!\":[67,4,1,\"\"],\"gttrf!\":[67,4,1,\"\"],\"gttrs!\":[67,4,1,\"\"],\"hesv!\":[67,4,1,\"\"],\"hetrf!\":[67,4,1,\"\"],\"hetri!\":[67,4,1,\"\"],\"hetrs!\":[67,4,1,\"\"],\"orghr!\":[67,4,1,\"\"],\"orglq!\":[67,4,1,\"\"],\"orgqr!\":[67,4,1,\"\"],\"ormlq!\":[67,4,1,\"\"],\"ormqr!\":[67,4,1,\"\"],\"ormrz!\":[67,4,1,\"\"],\"posv!\":[67,4,1,\"\"],\"potrf!\":[67,4,1,\"\"],\"potri!\":[67,4,1,\"\"],\"potrs!\":[67,4,1,\"\"],\"pstrf!\":[67,4,1,\"\"],\"ptsv!\":[67,4,1,\"\"],\"pttrf!\":[67,4,1,\"\"],\"pttrs!\":[67,4,1,\"\"],\"stebz!\":[67,4,1,\"\"],\"stegr!\":[67,4,1,\"\"],\"stein!\":[67,4,1,\"\"],\"stev!\":[67,4,1,\"\"],\"syconv!\":[67,4,1,\"\"],\"syev!\":[67,4,1,\"\"],\"syevr!\":[67,4,1,\"\"],\"sygvd!\":[67,4,1,\"\"],\"sysv!\":[67,4,1,\"\"],\"sytrf!\":[67,4,1,\"\"],\"sytri!\":[67,4,1,\"\"],\"sytrs!\":[67,4,1,\"\"],\"tgsen!\":[67,4,1,\"\"],\"trcon!\":[67,4,1,\"\"],\"trevc!\":[67,4,1,\"\"],\"trrfs!\":[67,4,1,\"\"],\"trsen!\":[67,4,1,\"\"],\"trsyl!\":[67,4,1,\"\"],\"trtri!\":[67,4,1,\"\"],\"trtrs!\":[67,4,1,\"\"],\"tzrzf!\":[67,4,1,\"\"]},\"Base.Mmap\":{\"sync!\":[64,4,1,\"\"],Anonymous:[64,4,1,\"\"],mmap:[64,4,1,\"\"]},\"Base.Pkg\":{add:[71,4,1,\"\"],available:[71,4,1,\"\"],build:[71,4,1,\"\"],checkout:[71,4,1,\"\"],clone:[71,4,1,\"\"],dir:[71,4,1,\"\"],edit:[71,4,1,\"\"],free:[71,4,1,\"\"],generate:[71,4,1,\"\"],init:[71,4,1,\"\"],installed:[71,4,1,\"\"],pin:[71,4,1,\"\"],publish:[71,4,1,\"\"],register:[71,4,1,\"\"],resolve:[71,4,1,\"\"],rm:[71,4,1,\"\"],status:[71,4,1,\"\"],tag:[71,4,1,\"\"],test:[71,4,1,\"\"],update:[71,4,1,\"\"]},\"Base.Profile\":{callers:[72,4,1,\"\"],clear:[72,4,1,\"\"],clear_malloc_data:[72,4,1,\"\"],fetch:[72,4,1,\"\"],init:[72,4,1,\"\"],print:[72,4,1,\"\"],retrieve:[72,4,1,\"\"]},\"Base.Sys\":{get_process_title:[57,4,1,\"\"],set_process_title:[57,4,1,\"\"]},\"Base.Test\":{\"@test\":[76,4,1,\"\"],\"@test_approx_eq\":[76,4,1,\"\"],\"@test_approx_eq_eps\":[76,4,1,\"\"],\"@test_throws\":[76,4,1,\"\"],with_handler:[76,4,1,\"\"]},\"Dates.Dates\":{DateFormat:[61,4,1,\"\"]},Base:{\"!\":[68,4,1,\"\"],\"!=\":[68,4,1,\"\"],\"!==\":[68,4,1,\"\"],\"$\":[68,4,1,\"\"],\"%\":[68,4,1,\"\"],\"&\":[68,4,1,\"\"],\"*\":[75,4,1,\"\"],\"+\":[68,4,1,\"\"],\"-\":[68,4,1,\"\"],\"/\":[68,4,1,\"\"],\"//\":[68,4,1,\"\"],\":\":[68,4,1,\"\"],\"<\":[68,4,1,\"\"],\"<:\":[57,4,1,\"\"],\"<<\":[68,4,1,\"\"],\"<=\":[68,4,1,\"\"],\"==\":[68,4,1,\"\"],\"===\":[68,4,1,\"\"],\">\":[68,4,1,\"\"],\">=\":[68,4,1,\"\"],\">>\":[68,4,1,\"\"],\">>>\":[68,4,1,\"\"],\"@allocated\":[57,4,1,\"\"],\"@async\":[70,4,1,\"\"],\"@code_llvm\":[57,4,1,\"\"],\"@code_lowered\":[57,4,1,\"\"],\"@code_native\":[57,4,1,\"\"],\"@code_typed\":[57,4,1,\"\"],\"@code_warntype\":[57,4,1,\"\"],\"@edit\":[57,4,1,\"\"],\"@elapsed\":[57,4,1,\"\"],\"@eval\":[57,4,1,\"\"],\"@evalpoly\":[68,4,1,\"\"],\"@everywhere\":[70,4,1,\"\"],\"@fetch\":[70,4,1,\"\"],\"@fetchfrom\":[70,4,1,\"\"],\"@gensym\":[57,4,1,\"\"],\"@less\":[57,4,1,\"\"],\"@linux\":[57,4,1,\"\"],\"@osx\":[57,4,1,\"\"],\"@parallel\":[70,4,1,\"\"],\"@printf\":[64,4,1,\"\"],\"@profile\":[72,4,1,\"\"],\"@schedule\":[70,4,1,\"\"],\"@show\":[57,4,1,\"\"],\"@spawn\":[70,4,1,\"\"],\"@spawnat\":[70,4,1,\"\"],\"@sprintf\":[64,4,1,\"\"],\"@sync\":[70,4,1,\"\"],\"@task\":[70,4,1,\"\"],\"@time\":[57,4,1,\"\"],\"@timed\":[57,4,1,\"\"],\"@timev\":[57,4,1,\"\"],\"@unix\":[57,4,1,\"\"],\"@which\":[57,4,1,\"\"],\"@windows\":[57,4,1,\"\"],\"A_mul_B!\":[68,4,1,\"\"],\"Channel{T}\":[70,4,1,\"\"],\"Ptr{T}\":[58,5,1,\"\"],\"Ref{T}\":[58,5,1,\"\"],\"Val{c}\":[57,4,1,\"\"],\"\\\\\":[68,4,1,\"\"],\"\\u00d7\":[67,4,1,\"\"],\"\\u00f7\":[68,4,1,\"\"],\"\\u03b3\":[69,5,1,\"\"],\"\\u03c0\":[69,5,1,\"\"],\"\\u03c6\":[69,5,1,\"\"],\"\\u2208\":[59,4,1,\"\"],\"\\u2209\":[59,4,1,\"\"],\"\\u220b\":[59,4,1,\"\"],\"\\u220c\":[59,4,1,\"\"],\"\\u2229\":[59,4,1,\"\"],\"\\u222a\":[59,4,1,\"\"],\"\\u2260\":[68,4,1,\"\"],\"\\u2261\":[68,4,1,\"\"],\"\\u2262\":[68,4,1,\"\"],\"\\u2264\":[68,4,1,\"\"],\"\\u2265\":[68,4,1,\"\"],\"\\u2286\":[59,4,1,\"\"],\"\\u2288\":[59,4,1,\"\"],\"\\u228a\":[59,4,1,\"\"],\"\\u22c5\":[67,4,1,\"\"],\"^\":[75,4,1,\"\"],\"__precompile__\":[57,4,1,\"\"],\"all!\":[59,4,1,\"\"],\"any!\":[59,4,1,\"\"],\"append!\":[59,4,1,\"\"],\"bfft!\":[68,4,1,\"\"],\"bkfact!\":[67,4,1,\"\"],\"broadcast!\":[56,4,1,\"\"],\"broadcast!_function\":[56,4,1,\"\"],\"broadcast_setindex!\":[56,4,1,\"\"],\"cholfact!\":[67,4,1,\"\"],\"complement!\":[59,4,1,\"\"],\"conj!\":[56,4,1,\"\"],\"copy!\":[58,4,1,\"\"],\"ctranspose!\":[67,4,1,\"\"],\"cumprod!\":[56,4,1,\"\"],\"cumsum!\":[56,4,1,\"\"],\"dct!\":[68,4,1,\"\"],\"delete!\":[59,4,1,\"\"],\"deleteat!\":[59,4,1,\"\"],\"digits!\":[69,4,1,\"\"],\"eigfact!\":[67,4,1,\"\"],\"eigvals!\":[67,4,1,\"\"],\"empty!\":[59,4,1,\"\"],\"fft!\":[68,4,1,\"\"],\"fill!\":[56,4,1,\"\"],\"filt!\":[68,4,1,\"\"],\"filter!\":[59,4,1,\"\"],\"findmax!\":[59,4,1,\"\"],\"findmin!\":[59,4,1,\"\"],\"flipbits!\":[56,4,1,\"\"],\"float\":[69,4,1,\"\"],\"get!\":[59,4,1,\"\"],\"givens{T}\":[67,4,1,\"\"],\"hessfact!\":[67,4,1,\"\"],\"hist!\":[68,4,1,\"\"],\"hist2d!\":[68,4,1,\"\"],\"idct!\":[68,4,1,\"\"],\"ifft!\":[68,4,1,\"\"],\"in\":[59,4,1,\"\"],\"insert!\":[59,4,1,\"\"],\"intersect!\":[59,4,1,\"\"],\"ipermute!\":[56,4,1,\"\"],\"isposdef!\":[67,4,1,\"\"],\"ldltfact!\":[67,4,1,\"\"],\"lufact!\":[67,4,1,\"\"],\"map!\":[59,4,1,\"\"],\"maxabs!\":[59,4,1,\"\"],\"maximum!\":[59,4,1,\"\"],\"mean!\":[68,4,1,\"\"],\"median!\":[68,4,1,\"\"],\"merge!\":[59,4,1,\"\"],\"minabs!\":[59,4,1,\"\"],\"minimum!\":[59,4,1,\"\"],\"nthperm!\":[56,4,1,\"\"],\"ordschur!\":[67,4,1,\"\"],\"permute!\":[56,4,1,\"\"],\"permutedims!\":[56,4,1,\"\"],\"plan_bfft!\":[68,4,1,\"\"],\"plan_dct!\":[68,4,1,\"\"],\"plan_fft!\":[68,4,1,\"\"],\"plan_idct!\":[68,4,1,\"\"],\"plan_ifft!\":[68,4,1,\"\"],\"pop!\":[59,4,1,\"\"],\"prepend!\":[59,4,1,\"\"],\"prod!\":[59,4,1,\"\"],\"push!\":[59,4,1,\"\"],\"put!\":[70,4,1,\"\"],\"qrfact!\":[67,4,1,\"\"],\"quantile!\":[68,4,1,\"\"],\"rand!\":[69,4,1,\"\"],\"randexp!\":[69,4,1,\"\"],\"randn!\":[69,4,1,\"\"],\"randsubseq!\":[56,4,1,\"\"],\"read!\":[64,4,1,\"\"],\"readbytes!\":[64,4,1,\"\"],\"resize!\":[59,4,1,\"\"],\"reverse!\":[56,4,1,\"\"],\"rol!\":[56,4,1,\"\"],\"ror!\":[56,4,1,\"\"],\"scale!\":[67,4,1,\"\"],\"schurfact!\":[67,4,1,\"\"],\"select!\":[74,4,1,\"\"],\"selectperm!\":[74,4,1,\"\"],\"setdiff!\":[59,4,1,\"\"],\"setfield!\":[57,4,1,\"\"],\"setindex!\":[59,4,1,\"\"],\"shift!\":[59,4,1,\"\"],\"shuffle!\":[56,4,1,\"\"],\"sizehint!\":[59,4,1,\"\"],\"sort!\":[74,4,1,\"\"],\"sortperm!\":[74,4,1,\"\"],\"splice!\":[59,4,1,\"\"],\"sum!\":[59,4,1,\"\"],\"sumabs!\":[59,4,1,\"\"],\"sumabs2!\":[59,4,1,\"\"],\"super\":[57,4,1,\"\"],\"svdfact!\":[67,4,1,\"\"],\"svdvals!\":[67,4,1,\"\"],\"symdiff!\":[59,4,1,\"\"],\"take!\":[70,4,1,\"\"],\"throw\":[57,4,1,\"\"],\"transpose!\":[67,4,1,\"\"],\"tril!\":[67,4,1,\"\"],\"triu!\":[67,4,1,\"\"],\"typeof\":[57,4,1,\"\"],\"union!\":[59,4,1,\"\"],\"unsafe_copy!\":[58,4,1,\"\"],\"unsafe_store!\":[58,4,1,\"\"],\"unshift!\":[59,4,1,\"\"],\"var\":[68,4,1,\"\"],\"|\":[68,4,1,\"\"],\"|>\":[57,4,1,\"\"],\"~\":[68,4,1,\"\"],ANY:[60,5,1,\"\"],ARGS:[60,5,1,\"\"],A_ldiv_Bc:[68,4,1,\"\"],A_ldiv_Bt:[68,4,1,\"\"],A_mul_Bc:[68,4,1,\"\"],A_mul_Bt:[68,4,1,\"\"],A_rdiv_Bc:[68,4,1,\"\"],A_rdiv_Bt:[68,4,1,\"\"],Ac_ldiv_B:[68,4,1,\"\"],Ac_ldiv_Bc:[68,4,1,\"\"],Ac_mul_B:[68,4,1,\"\"],Ac_mul_Bc:[68,4,1,\"\"],Ac_rdiv_B:[68,4,1,\"\"],Ac_rdiv_Bc:[68,4,1,\"\"],ArgumentError:[57,4,1,\"\"],Array:[56,4,1,\"\"],AssertionError:[57,4,1,\"\"],At_ldiv_B:[68,4,1,\"\"],At_ldiv_Bt:[68,4,1,\"\"],At_mul_B:[68,4,1,\"\"],At_mul_Bt:[68,4,1,\"\"],At_rdiv_B:[68,4,1,\"\"],At_rdiv_Bt:[68,4,1,\"\"],Base64DecodePipe:[64,4,1,\"\"],Base64EncodePipe:[64,4,1,\"\"],Bidiagonal:[67,4,1,\"\"],BigFloat:[69,4,1,\"\"],BigInt:[69,4,1,\"\"],BoundsError:[57,4,1,\"\"],CPU_CORES:[60,5,1,\"\"],C_NULL:[60,5,1,\"\"],Cartesian:[3,3,0,\"-\"],Cchar:[58,5,1,\"\"],Cdouble:[58,5,1,\"\"],Cfloat:[58,5,1,\"\"],Cint:[58,5,1,\"\"],Cintmax_t:[58,5,1,\"\"],Clong:[58,5,1,\"\"],Clonglong:[58,5,1,\"\"],Coff_t:[58,5,1,\"\"],Collections:[59,3,0,\"-\"],Condition:[70,4,1,\"\"],Cptrdiff_t:[58,5,1,\"\"],Cshort:[58,5,1,\"\"],Csize_t:[58,5,1,\"\"],Cssize_t:[58,5,1,\"\"],Cuchar:[58,5,1,\"\"],Cuint:[58,5,1,\"\"],Cuintmax_t:[58,5,1,\"\"],Culong:[58,5,1,\"\"],Culonglong:[58,5,1,\"\"],Cushort:[58,5,1,\"\"],Cwchar_t:[58,5,1,\"\"],DevNull:[57,5,1,\"\"],Dict:[59,4,1,\"\"],DimensionMismatch:[57,4,1,\"\"],DivideError:[57,4,1,\"\"],DomainError:[57,4,1,\"\"],ENDIAN_BOM:[64,5,1,\"\"],ENV:[57,5,1,\"\"],EOFError:[57,4,1,\"\"],EnvHash:[57,4,1,\"\"],ErrorException:[57,4,1,\"\"],Float32:[69,4,1,\"\"],Float64:[69,4,1,\"\"],IOBuffer:[64,4,1,\"\"],IPv4:[64,4,1,\"\"],IPv6:[64,4,1,\"\"],InexactError:[57,4,1,\"\"],Inf16:[69,5,1,\"\"],Inf32:[69,5,1,\"\"],Inf:[69,5,1,\"\"],InitError:[57,4,1,\"\"],IntSet:[59,4,1,\"\"],InterruptException:[57,4,1,\"\"],JULIA_HOME:[60,5,1,\"\"],KeyError:[57,4,1,\"\"],LOAD_PATH:[60,5,1,\"\"],LinAlg:[67,3,0,\"-\"],LoadError:[57,4,1,\"\"],MersenneTwister:[69,4,1,\"\"],MethodError:[57,4,1,\"\"],NaN16:[69,5,1,\"\"],NaN32:[69,5,1,\"\"],NaN:[69,5,1,\"\"],NullException:[57,4,1,\"\"],Nullable:[57,4,1,\"\"],OS_NAME:[60,5,1,\"\"],OutOfMemoryError:[57,4,1,\"\"],OverflowError:[57,4,1,\"\"],ParseError:[57,4,1,\"\"],PipeBuffer:[64,4,1,\"\"],Pkg:[71,3,0,\"-\"],ProcessExitedException:[57,4,1,\"\"],RandomDevice:[69,4,1,\"\"],ReadOnlyMemoryError:[57,4,1,\"\"],ReentrantLock:[70,4,1,\"\"],RemoteRef:[70,4,1,\"\"],RoundDown:[68,5,1,\"\"],RoundNearest:[68,5,1,\"\"],RoundNearestTiesAway:[68,5,1,\"\"],RoundNearestTiesUp:[68,5,1,\"\"],RoundToZero:[68,5,1,\"\"],RoundUp:[68,5,1,\"\"],RoundingMode:[68,5,1,\"\"],STDERR:[64,5,1,\"\"],STDIN:[64,5,1,\"\"],STDOUT:[64,5,1,\"\"],Set:[59,4,1,\"\"],SharedArray:[70,4,1,\"\"],StackOverflowError:[57,4,1,\"\"],SymTridiagonal:[67,4,1,\"\"],SystemError:[57,4,1,\"\"],Task:[70,4,1,\"\"],Test:[76,3,0,\"-\"],TextDisplay:[64,4,1,\"\"],Timer:[57,4,1,\"\"],Tridiagonal:[67,4,1,\"\"],TypeError:[57,4,1,\"\"],UndefRefError:[57,4,1,\"\"],UndefVarError:[57,4,1,\"\"],VERSION:[60,5,1,\"\"],WORD_SIZE:[60,5,1,\"\"],abs2:[68,4,1,\"\"],abs:[68,4,1,\"\"],abspath:[62,4,1,\"\"],accept:[64,4,1,\"\"],acos:[68,4,1,\"\"],acosd:[68,4,1,\"\"],acosh:[68,4,1,\"\"],acot:[68,4,1,\"\"],acotd:[68,4,1,\"\"],acoth:[68,4,1,\"\"],acsc:[68,4,1,\"\"],acscd:[68,4,1,\"\"],acsch:[68,4,1,\"\"],addprocs:[70,4,1,\"\"],airy:[68,4,1,\"\"],airyai:[68,4,1,\"\"],airyaiprime:[68,4,1,\"\"],airybi:[68,4,1,\"\"],airybiprime:[68,4,1,\"\"],airyprime:[68,4,1,\"\"],airyx:[68,4,1,\"\"],all:[59,4,1,\"\"],angle:[68,4,1,\"\"],ans:[57,5,1,\"\"],any:[59,4,1,\"\"],applicable:[57,4,1,\"\"],apropos:[57,4,1,\"\"],ascii:[75,4,1,\"\"],asec:[68,4,1,\"\"],asecd:[68,4,1,\"\"],asech:[68,4,1,\"\"],asin:[68,4,1,\"\"],asind:[68,4,1,\"\"],asinh:[68,4,1,\"\"],assert:[57,4,1,\"\"],atan2:[68,4,1,\"\"],atan:[68,4,1,\"\"],atand:[68,4,1,\"\"],atanh:[68,4,1,\"\"],atexit:[57,4,1,\"\"],atreplinit:[57,4,1,\"\"],backtrace:[57,4,1,\"\"],base64decode:[64,4,1,\"\"],base64encode:[64,4,1,\"\"],base:[69,4,1,\"\"],basename:[62,4,1,\"\"],besselh:[68,4,1,\"\"],besseli:[68,4,1,\"\"],besselix:[68,4,1,\"\"],besselj0:[68,4,1,\"\"],besselj1:[68,4,1,\"\"],besselj:[68,4,1,\"\"],besseljx:[68,4,1,\"\"],besselk:[68,4,1,\"\"],besselkx:[68,4,1,\"\"],bessely0:[68,4,1,\"\"],bessely1:[68,4,1,\"\"],bessely:[68,4,1,\"\"],besselyx:[68,4,1,\"\"],beta:[68,4,1,\"\"],bfft:[68,4,1,\"\"],big:[69,4,1,\"\"],bin:[69,4,1,\"\"],bind:[64,4,1,\"\"],binomial:[68,4,1,\"\"],bitbroadcast:[56,4,1,\"\"],bitpack:[56,4,1,\"\"],bitrand:[69,4,1,\"\"],bits:[69,4,1,\"\"],bitunpack:[56,4,1,\"\"],bkfact:[67,4,1,\"\"],blkdiag:[67,4,1,\"\"],brfft:[68,4,1,\"\"],broadcast:[56,4,1,\"\"],broadcast_function:[56,4,1,\"\"],broadcast_getindex:[56,4,1,\"\"],bswap:[69,4,1,\"\"],bytes2hex:[69,4,1,\"\"],bytestring:[75,4,1,\"\"],call:[57,4,1,\"\"],cat:[56,4,1,\"\"],catalan:[69,5,1,\"\"],catch_backtrace:[57,4,1,\"\"],cbrt:[68,4,1,\"\"],ccall:[58,4,1,\"\"],cconvert:[58,4,1,\"\"],cd:[62,4,1,\"\"],ceil:[68,4,1,\"\"],cell:[56,4,1,\"\"],cfunction:[58,4,1,\"\"],cglobal:[58,4,1,\"\"],charwidth:[75,4,1,\"\"],checkbounds:[56,4,1,\"\"],chmod:[62,4,1,\"\"],chol:[67,4,1,\"\"],cholfact:[67,4,1,\"\"],chomp:[75,4,1,\"\"],chop:[75,4,1,\"\"],chr2ind:[75,4,1,\"\"],circshift:[56,4,1,\"\"],cis:[68,4,1,\"\"],clamp:[68,4,1,\"\"],cld:[68,4,1,\"\"],clipboard:[57,4,1,\"\"],close:[70,4,1,\"\"],cmp:[68,4,1,\"\"],code_llvm:[57,4,1,\"\"],code_lowered:[57,4,1,\"\"],code_native:[57,4,1,\"\"],code_typed:[57,4,1,\"\"],code_warntype:[57,4,1,\"\"],collect:[59,4,1,\"\"],colon:[68,4,1,\"\"],combinations:[56,4,1,\"\"],complement:[59,4,1,\"\"],complex:[69,4,1,\"\"],cond:[67,4,1,\"\"],condskeel:[67,4,1,\"\"],conj:[68,4,1,\"\"],connect:[70,4,1,\"\"],consume:[70,4,1,\"\"],contains:[75,4,1,\"\"],conv2:[68,4,1,\"\"],conv:[68,4,1,\"\"],convert:[57,4,1,\"\"],copy:[57,4,1,\"\"],copysign:[68,4,1,\"\"],cor:[68,4,1,\"\"],cos:[68,4,1,\"\"],cosc:[68,4,1,\"\"],cosd:[68,4,1,\"\"],cosh:[68,4,1,\"\"],cospi:[68,4,1,\"\"],cot:[68,4,1,\"\"],cotd:[68,4,1,\"\"],coth:[68,4,1,\"\"],count:[59,4,1,\"\"],count_ones:[69,4,1,\"\"],count_zeros:[69,4,1,\"\"],countfrom:[59,4,1,\"\"],countlines:[64,4,1,\"\"],countnz:[56,4,1,\"\"],cov:[68,4,1,\"\"],cp:[62,4,1,\"\"],cross:[67,4,1,\"\"],csc:[68,4,1,\"\"],cscd:[68,4,1,\"\"],csch:[68,4,1,\"\"],ctime:[62,4,1,\"\"],ctranspose:[67,4,1,\"\"],cummax:[56,4,1,\"\"],cummin:[56,4,1,\"\"],cumprod:[56,4,1,\"\"],cumsum:[56,4,1,\"\"],cumsum_kbn:[56,4,1,\"\"],current_module:[57,4,1,\"\"],current_task:[70,4,1,\"\"],cycle:[59,4,1,\"\"],dawson:[68,4,1,\"\"],dct:[68,4,1,\"\"],dec:[69,4,1,\"\"],deconv:[68,4,1,\"\"],deepcopy:[57,4,1,\"\"],deg2rad:[68,4,1,\"\"],den:[68,4,1,\"\"],deserialize:[64,4,1,\"\"],det:[67,4,1,\"\"],detach:[57,4,1,\"\"],diag:[67,4,1,\"\"],diagind:[67,4,1,\"\"],diagm:[67,4,1,\"\"],diff:[56,4,1,\"\"],digamma:[68,4,1,\"\"],digits:[69,4,1,\"\"],dirname:[62,4,1,\"\"],disable_sigint:[58,4,1,\"\"],display:[64,4,1,\"\"],displayable:[64,4,1,\"\"],div:[68,4,1,\"\"],divrem:[68,4,1,\"\"],done:[59,4,1,\"\"],dot:[67,4,1,\"\"],download:[62,4,1,\"\"],drop:[59,4,1,\"\"],dump:[64,4,1,\"\"],e:[69,5,1,\"\"],eachindex:[56,4,1,\"\"],eachline:[64,4,1,\"\"],eachmatch:[75,4,1,\"\"],edit:[57,4,1,\"\"],eig:[67,4,1,\"\"],eigfact:[67,4,1,\"\"],eigmax:[67,4,1,\"\"],eigmin:[67,4,1,\"\"],eigs:[67,4,1,\"\"],eigvals:[67,4,1,\"\"],eigvecs:[67,4,1,\"\"],eltype:[59,4,1,\"\"],endof:[59,4,1,\"\"],endswith:[75,4,1,\"\"],enumerate:[59,4,1,\"\"],eof:[64,4,1,\"\"],eps:[57,4,1,\"\"],erf:[68,4,1,\"\"],erfc:[68,4,1,\"\"],erfcinv:[68,4,1,\"\"],erfcx:[68,4,1,\"\"],erfi:[68,4,1,\"\"],erfinv:[68,4,1,\"\"],error:[57,4,1,\"\"],esc:[57,4,1,\"\"],escape_string:[75,4,1,\"\"],eta:[68,4,1,\"\"],etree:[56,4,1,\"\"],eu:[69,5,1,\"\"],eulergamma:[69,5,1,\"\"],eval:[57,4,1,\"\"],evalfile:[57,4,1,\"\"],exit:[57,4,1,\"\"],exp10:[68,4,1,\"\"],exp2:[68,4,1,\"\"],exp:[68,4,1,\"\"],expand:[57,4,1,\"\"],expanduser:[62,4,1,\"\"],expm1:[68,4,1,\"\"],expm:[67,4,1,\"\"],exponent:[69,4,1,\"\"],extrema:[59,4,1,\"\"],eye:[56,4,1,\"\"],factor:[68,4,1,\"\"],factorial:[68,4,1,\"\"],factorize:[67,4,1,\"\"],falses:[56,4,1,\"\"],fd:[64,4,1,\"\"],fdio:[64,4,1,\"\"],fetch:[70,4,1,\"\"],fft:[68,4,1,\"\"],fftshift:[68,4,1,\"\"],fieldnames:[57,4,1,\"\"],fieldoffsets:[57,4,1,\"\"],fieldtype:[57,4,1,\"\"],filemode:[62,4,1,\"\"],filesize:[62,4,1,\"\"],fill:[56,4,1,\"\"],filt:[68,4,1,\"\"],filter:[59,4,1,\"\"],finalize:[57,4,1,\"\"],finalizer:[57,4,1,\"\"],find:[56,4,1,\"\"],findfirst:[56,4,1,\"\"],findin:[59,4,1,\"\"],findlast:[56,4,1,\"\"],findmax:[59,4,1,\"\"],findmin:[59,4,1,\"\"],findn:[56,4,1,\"\"],findnext:[56,4,1,\"\"],findnz:[56,4,1,\"\"],findprev:[56,4,1,\"\"],first:[59,4,1,\"\"],fld:[68,4,1,\"\"],fldmod:[68,4,1,\"\"],flipdim:[56,4,1,\"\"],flipsign:[68,4,1,\"\"],floor:[68,4,1,\"\"],flush:[64,4,1,\"\"],fma:[68,4,1,\"\"],foldl:[59,4,1,\"\"],foldr:[59,4,1,\"\"],frexp:[68,4,1,\"\"],full:[67,4,1,\"\"],fullname:[57,4,1,\"\"],function_module:[57,4,1,\"\"],function_name:[57,4,1,\"\"],functionloc:[57,4,1,\"\"],gamma:[68,4,1,\"\"],gc:[57,4,1,\"\"],gc_enable:[57,4,1,\"\"],gcd:[68,4,1,\"\"],gcdx:[68,4,1,\"\"],gensym:[57,4,1,\"\"],get:[59,4,1,\"\"],get_bigfloat_precision:[69,4,1,\"\"],get_rounding:[69,4,1,\"\"],get_zero_subnormals:[69,4,1,\"\"],getaddrinfo:[64,4,1,\"\"],getfield:[57,4,1,\"\"],gethostname:[57,4,1,\"\"],getindex:[59,4,1,\"\"],getipaddr:[57,4,1,\"\"],getkey:[59,4,1,\"\"],getpid:[57,4,1,\"\"],golden:[69,5,1,\"\"],gperm:[62,4,1,\"\"],gradient:[56,4,1,\"\"],graphemes:[75,4,1,\"\"],hankelh1:[68,4,1,\"\"],hankelh1x:[68,4,1,\"\"],hankelh2:[68,4,1,\"\"],hankelh2x:[68,4,1,\"\"],hash:[57,4,1,\"\"],haskey:[59,4,1,\"\"],hcat:[56,4,1,\"\"],hessfact:[67,4,1,\"\"],hex2bytes:[69,4,1,\"\"],hex2num:[69,4,1,\"\"],hex:[69,4,1,\"\"],hist2d:[68,4,1,\"\"],hist:[68,4,1,\"\"],histrange:[68,4,1,\"\"],homedir:[62,4,1,\"\"],htol:[64,4,1,\"\"],hton:[64,4,1,\"\"],hvcat:[56,4,1,\"\"],hypot:[68,4,1,\"\"],idct:[68,4,1,\"\"],identity:[57,4,1,\"\"],ifelse:[57,4,1,\"\"],ifft:[68,4,1,\"\"],ifftshift:[68,4,1,\"\"],ignorestatus:[57,4,1,\"\"],im:[69,5,1,\"\"],imag:[68,4,1,\"\"],include:[57,4,1,\"\"],include_dependency:[57,4,1,\"\"],include_string:[57,4,1,\"\"],ind2chr:[75,4,1,\"\"],ind2sub:[56,4,1,\"\"],indexin:[59,4,1,\"\"],indexpids:[70,4,1,\"\"],indmax:[59,4,1,\"\"],indmin:[59,4,1,\"\"],inf:[69,4,1,\"\"],info:[64,4,1,\"\"],init_worker:[70,4,1,\"\"],instances:[57,4,1,\"\"],interrupt:[70,4,1,\"\"],intersect:[59,4,1,\"\"],inv:[67,4,1,\"\"],invdigamma:[68,4,1,\"\"],invmod:[68,4,1,\"\"],invoke:[57,4,1,\"\"],invperm:[56,4,1,\"\"],ipermutedims:[56,4,1,\"\"],irfft:[68,4,1,\"\"],is:[57,4,1,\"\"],is_assigned_char:[75,4,1,\"\"],isa:[57,4,1,\"\"],isabspath:[62,4,1,\"\"],isalnum:[75,4,1,\"\"],isalpha:[75,4,1,\"\"],isapprox:[68,4,1,\"\"],isascii:[75,4,1,\"\"],isbits:[57,4,1,\"\"],isblockdev:[62,4,1,\"\"],ischardev:[62,4,1,\"\"],iscntrl:[75,4,1,\"\"],isconst:[57,4,1,\"\"],isdefined:[57,4,1,\"\"],isdiag:[67,4,1,\"\"],isdigit:[75,4,1,\"\"],isdir:[62,4,1,\"\"],isdirpath:[62,4,1,\"\"],iseltype:[56,4,1,\"\"],isempty:[59,4,1,\"\"],isequal:[57,4,1,\"\"],iseven:[69,4,1,\"\"],isexecutable:[62,4,1,\"\"],isfifo:[62,4,1,\"\"],isfile:[62,4,1,\"\"],isfinite:[69,4,1,\"\"],isgeneric:[57,4,1,\"\"],isgraph:[75,4,1,\"\"],ishermitian:[67,4,1,\"\"],isimmutable:[57,4,1,\"\"],isinf:[69,4,1,\"\"],isinteger:[69,4,1,\"\"],isinteractive:[57,4,1,\"\"],isleaftype:[57,4,1,\"\"],isless:[57,4,1,\"\"],islink:[62,4,1,\"\"],islower:[75,4,1,\"\"],ismarked:[64,4,1,\"\"],ismatch:[75,4,1,\"\"],ismount:[62,4,1,\"\"],isnan:[69,4,1,\"\"],isnull:[57,4,1,\"\"],isnumber:[75,4,1,\"\"],isodd:[69,4,1,\"\"],isopen:[64,4,1,\"\"],ispath:[62,4,1,\"\"],isperm:[56,4,1,\"\"],isposdef:[67,4,1,\"\"],ispow2:[68,4,1,\"\"],isprime:[69,4,1,\"\"],isprint:[75,4,1,\"\"],ispunct:[75,4,1,\"\"],isqrt:[68,4,1,\"\"],isreadable:[62,4,1,\"\"],isreadonly:[64,4,1,\"\"],isready:[70,4,1,\"\"],isreal:[69,4,1,\"\"],issetgid:[62,4,1,\"\"],issetuid:[62,4,1,\"\"],issocket:[62,4,1,\"\"],issorted:[74,4,1,\"\"],isspace:[75,4,1,\"\"],issparse:[56,4,1,\"\"],issticky:[62,4,1,\"\"],issubnormal:[69,4,1,\"\"],issubset:[59,4,1,\"\"],issubtype:[57,4,1,\"\"],issym:[67,4,1,\"\"],istaskdone:[70,4,1,\"\"],istaskstarted:[70,4,1,\"\"],istext:[64,4,1,\"\"],istril:[67,4,1,\"\"],istriu:[67,4,1,\"\"],isupper:[75,4,1,\"\"],isvalid:[75,4,1,\"\"],iswritable:[62,4,1,\"\"],isxdigit:[75,4,1,\"\"],join:[75,4,1,\"\"],joinpath:[62,4,1,\"\"],keys:[59,4,1,\"\"],keytype:[59,4,1,\"\"],kill:[70,4,1,\"\"],kron:[67,4,1,\"\"],last:[59,4,1,\"\"],launch:[70,4,1,\"\"],lbeta:[68,4,1,\"\"],lcfirst:[75,4,1,\"\"],lcm:[68,4,1,\"\"],ldexp:[68,4,1,\"\"],ldltfact:[67,4,1,\"\"],leading_ones:[69,4,1,\"\"],leading_zeros:[69,4,1,\"\"],length:[75,4,1,\"\"],less:[57,4,1,\"\"],lexcmp:[57,4,1,\"\"],lexless:[57,4,1,\"\"],lfact:[68,4,1,\"\"],lgamma:[68,4,1,\"\"],linreg:[67,4,1,\"\"],linspace:[56,4,1,\"\"],listen:[64,4,1,\"\"],listenany:[64,4,1,\"\"],llvmcall:[58,4,1,\"\"],localindexes:[70,4,1,\"\"],lock:[70,4,1,\"\"],log10:[68,4,1,\"\"],log1p:[68,4,1,\"\"],log2:[68,4,1,\"\"],log:[68,4,1,\"\"],logabsdet:[67,4,1,\"\"],logdet:[67,4,1,\"\"],logm:[67,4,1,\"\"],logspace:[56,4,1,\"\"],lowercase:[75,4,1,\"\"],lpad:[75,4,1,\"\"],lstat:[62,4,1,\"\"],lstrip:[75,4,1,\"\"],ltoh:[64,4,1,\"\"],lu:[67,4,1,\"\"],lufact:[67,4,1,\"\"],lyap:[67,4,1,\"\"],macroexpand:[57,4,1,\"\"],manage:[70,4,1,\"\"],map:[59,4,1,\"\"],mapfoldl:[59,4,1,\"\"],mapfoldr:[59,4,1,\"\"],mapreduce:[59,4,1,\"\"],mapreducedim:[56,4,1,\"\"],mapslices:[56,4,1,\"\"],mark:[64,4,1,\"\"],match:[75,4,1,\"\"],matchall:[75,4,1,\"\"],max:[68,4,1,\"\"],maxabs:[59,4,1,\"\"],maximum:[59,4,1,\"\"],maxintfloat:[57,4,1,\"\"],mean:[68,4,1,\"\"],median:[68,4,1,\"\"],merge:[59,4,1,\"\"],method_exists:[57,4,1,\"\"],methods:[57,4,1,\"\"],methodswith:[57,4,1,\"\"],middle:[68,4,1,\"\"],midpoints:[68,4,1,\"\"],mimewritable:[64,4,1,\"\"],min:[68,4,1,\"\"],minabs:[59,4,1,\"\"],minimum:[59,4,1,\"\"],minmax:[68,4,1,\"\"],mkdir:[62,4,1,\"\"],mkpath:[62,4,1,\"\"],mktemp:[62,4,1,\"\"],mktempdir:[62,4,1,\"\"],mod1:[68,4,1,\"\"],mod2pi:[68,4,1,\"\"],mod:[68,4,1,\"\"],modf:[68,4,1,\"\"],module_name:[57,4,1,\"\"],module_parent:[57,4,1,\"\"],mtime:[62,4,1,\"\"],muladd:[68,4,1,\"\"],mv:[62,4,1,\"\"],myid:[70,4,1,\"\"],names:[57,4,1,\"\"],nan:[69,4,1,\"\"],nb_available:[64,4,1,\"\"],ndigits:[68,4,1,\"\"],ndims:[56,4,1,\"\"],next:[59,4,1,\"\"],nextfloat:[69,4,1,\"\"],nextind:[75,4,1,\"\"],nextpow2:[68,4,1,\"\"],nextpow:[68,4,1,\"\"],nextprod:[68,4,1,\"\"],nfields:[57,4,1,\"\"],nnz:[56,4,1,\"\"],nonzeros:[56,4,1,\"\"],norm:[67,4,1,\"\"],normalize_string:[75,4,1,\"\"],normpath:[62,4,1,\"\"],nothing:[60,5,1,\"\"],notify:[70,4,1,\"\"],nprocs:[70,4,1,\"\"],nthperm:[56,4,1,\"\"],ntoh:[64,4,1,\"\"],ntuple:[57,4,1,\"\"],nullspace:[67,4,1,\"\"],num2hex:[69,4,1,\"\"],num:[68,4,1,\"\"],nworkers:[70,4,1,\"\"],nzrange:[56,4,1,\"\"],object_id:[57,4,1,\"\"],oct:[69,4,1,\"\"],oftype:[57,4,1,\"\"],one:[69,4,1,\"\"],ones:[56,4,1,\"\"],open:[64,4,1,\"\"],operm:[62,4,1,\"\"],ordschur:[67,4,1,\"\"],parent:[56,4,1,\"\"],parentindexes:[56,4,1,\"\"],parse:[69,4,1,\"\"],parseip:[64,4,1,\"\"],partitions:[56,4,1,\"\"],peakflops:[67,4,1,\"\"],permutations:[56,4,1,\"\"],permutedims:[56,4,1,\"\"],pi:[69,5,1,\"\"],pinv:[67,4,1,\"\"],pipeline:[57,4,1,\"\"],plan_bfft:[68,4,1,\"\"],plan_brfft:[68,4,1,\"\"],plan_dct:[68,4,1,\"\"],plan_fft:[68,4,1,\"\"],plan_idct:[68,4,1,\"\"],plan_ifft:[68,4,1,\"\"],plan_irfft:[68,4,1,\"\"],plan_rfft:[68,4,1,\"\"],pmap:[70,4,1,\"\"],pointer:[58,4,1,\"\"],pointer_from_objref:[58,4,1,\"\"],pointer_to_array:[58,4,1,\"\"],poll_fd:[64,4,1,\"\"],poll_file:[64,4,1,\"\"],polygamma:[68,4,1,\"\"],popdisplay:[64,4,1,\"\"],position:[64,4,1,\"\"],powermod:[68,4,1,\"\"],precision:[69,4,1,\"\"],precompile:[57,4,1,\"\"],prevfloat:[69,4,1,\"\"],prevind:[75,4,1,\"\"],prevpow2:[68,4,1,\"\"],prevpow:[68,4,1,\"\"],prevprod:[68,4,1,\"\"],primes:[69,4,1,\"\"],primesmask:[69,4,1,\"\"],print:[64,4,1,\"\"],print_escaped:[64,4,1,\"\"],print_joined:[64,4,1,\"\"],print_shortest:[64,4,1,\"\"],print_unescaped:[64,4,1,\"\"],print_with_color:[64,4,1,\"\"],println:[64,4,1,\"\"],process_exited:[57,4,1,\"\"],process_running:[57,4,1,\"\"],procs:[70,4,1,\"\"],prod:[59,4,1,\"\"],produce:[70,4,1,\"\"],promote:[57,4,1,\"\"],promote_rule:[57,4,1,\"\"],promote_shape:[56,4,1,\"\"],promote_type:[57,4,1,\"\"],pushdisplay:[64,4,1,\"\"],pwd:[62,4,1,\"\"],qr:[67,4,1,\"\"],qrfact:[67,4,1,\"\"],quadgk:[68,4,1,\"\"],quantile:[68,4,1,\"\"],quit:[57,4,1,\"\"],rad2deg:[68,4,1,\"\"],rand:[69,4,1,\"\"],randcycle:[56,4,1,\"\"],randexp:[69,4,1,\"\"],randjump:[69,4,1,\"\"],randn:[69,4,1,\"\"],randperm:[56,4,1,\"\"],randstring:[75,4,1,\"\"],randsubseq:[56,4,1,\"\"],range:[68,4,1,\"\"],rank:[67,4,1,\"\"],rationalize:[68,4,1,\"\"],read:[64,4,1,\"\"],readall:[64,4,1,\"\"],readandwrite:[57,4,1,\"\"],readavailable:[64,4,1,\"\"],readbytes:[64,4,1,\"\"],readchomp:[64,4,1,\"\"],readcsv:[64,4,1,\"\"],readdir:[62,4,1,\"\"],readdlm:[64,4,1,\"\"],readline:[64,4,1,\"\"],readlines:[64,4,1,\"\"],readlink:[62,4,1,\"\"],readuntil:[64,4,1,\"\"],real:[68,4,1,\"\"],realmax:[57,4,1,\"\"],realmin:[57,4,1,\"\"],realpath:[62,4,1,\"\"],recv:[64,4,1,\"\"],recvfrom:[64,4,1,\"\"],redirect_stderr:[64,4,1,\"\"],redirect_stdin:[64,4,1,\"\"],redirect_stdout:[64,4,1,\"\"],redisplay:[64,4,1,\"\"],reduce:[59,4,1,\"\"],reducedim:[56,4,1,\"\"],reenable_sigint:[58,4,1,\"\"],reim:[68,4,1,\"\"],reinterpret:[56,4,1,\"\"],reload:[57,4,1,\"\"],relpath:[62,4,1,\"\"],rem1:[68,4,1,\"\"],rem:[68,4,1,\"\"],remotecall:[70,4,1,\"\"],remotecall_fetch:[70,4,1,\"\"],remotecall_wait:[70,4,1,\"\"],repeat:[67,4,1,\"\"],repeated:[59,4,1,\"\"],replace:[75,4,1,\"\"],repmat:[67,4,1,\"\"],repr:[75,4,1,\"\"],reprmime:[64,4,1,\"\"],require:[57,4,1,\"\"],reset:[64,4,1,\"\"],reshape:[56,4,1,\"\"],rest:[59,4,1,\"\"],rethrow:[57,4,1,\"\"],reverse:[75,4,1,\"\"],reverseind:[56,4,1,\"\"],rfft:[68,4,1,\"\"],rm:[62,4,1,\"\"],rmprocs:[70,4,1,\"\"],rol:[56,4,1,\"\"],ror:[56,4,1,\"\"],rot180:[56,4,1,\"\"],rotl90:[56,4,1,\"\"],rotr90:[56,4,1,\"\"],round:[68,4,1,\"\"],rowvals:[56,4,1,\"\"],rpad:[75,4,1,\"\"],rsearch:[75,4,1,\"\"],rsearchindex:[75,4,1,\"\"],rsplit:[75,4,1,\"\"],rstrip:[75,4,1,\"\"],run:[57,4,1,\"\"],runtests:[76,4,1,\"\"],scale:[67,4,1,\"\"],schedule:[70,4,1,\"\"],schur:[67,4,1,\"\"],schurfact:[67,4,1,\"\"],sdata:[70,4,1,\"\"],search:[75,4,1,\"\"],searchindex:[75,4,1,\"\"],searchsorted:[74,4,1,\"\"],searchsortedfirst:[74,4,1,\"\"],searchsortedlast:[74,4,1,\"\"],sec:[68,4,1,\"\"],secd:[68,4,1,\"\"],sech:[68,4,1,\"\"],seek:[64,4,1,\"\"],seekend:[64,4,1,\"\"],seekstart:[64,4,1,\"\"],select:[74,4,1,\"\"],selectperm:[74,4,1,\"\"],send:[64,4,1,\"\"],serialize:[64,4,1,\"\"],set_bigfloat_precision:[69,4,1,\"\"],set_rounding:[69,4,1,\"\"],set_zero_subnormals:[69,4,1,\"\"],setdiff:[59,4,1,\"\"],setenv:[57,4,1,\"\"],setopt:[64,4,1,\"\"],show:[64,4,1,\"\"],showall:[64,4,1,\"\"],showcompact:[64,4,1,\"\"],showerror:[64,4,1,\"\"],shuffle:[56,4,1,\"\"],sign:[68,4,1,\"\"],signbit:[68,4,1,\"\"],signed:[69,4,1,\"\"],signif:[68,4,1,\"\"],significand:[69,4,1,\"\"],similar:[56,4,1,\"\"],sin:[68,4,1,\"\"],sinc:[68,4,1,\"\"],sind:[68,4,1,\"\"],sinh:[68,4,1,\"\"],sinpi:[68,4,1,\"\"],size:[56,4,1,\"\"],sizeof:[75,4,1,\"\"],skip:[64,4,1,\"\"],skipchars:[64,4,1,\"\"],sleep:[70,4,1,\"\"],slice:[56,4,1,\"\"],slicedim:[56,4,1,\"\"],sort:[74,4,1,\"\"],sortcols:[74,4,1,\"\"],sortperm:[74,4,1,\"\"],sortrows:[74,4,1,\"\"],sparse:[56,4,1,\"\"],sparsevec:[56,4,1,\"\"],spawn:[57,4,1,\"\"],spdiagm:[56,4,1,\"\"],speye:[56,4,1,\"\"],split:[75,4,1,\"\"],splitdir:[62,4,1,\"\"],splitdrive:[62,4,1,\"\"],splitext:[62,4,1,\"\"],spones:[56,4,1,\"\"],sprand:[56,4,1,\"\"],sprandbool:[56,4,1,\"\"],sprandn:[56,4,1,\"\"],sprint:[64,4,1,\"\"],spzeros:[56,4,1,\"\"],sqrt:[68,4,1,\"\"],sqrtm:[67,4,1,\"\"],squeeze:[56,4,1,\"\"],srand:[69,4,1,\"\"],start:[59,4,1,\"\"],startswith:[75,4,1,\"\"],stat:[62,4,1,\"\"],std:[68,4,1,\"\"],stdm:[68,4,1,\"\"],step:[59,4,1,\"\"],stride:[56,4,1,\"\"],strides:[56,4,1,\"\"],string:[75,4,1,\"\"],stringmime:[64,4,1,\"\"],strip:[75,4,1,\"\"],strwidth:[75,4,1,\"\"],sub2ind:[56,4,1,\"\"],sub:[56,4,1,\"\"],subtypes:[57,4,1,\"\"],success:[57,4,1,\"\"],sum:[59,4,1,\"\"],sum_kbn:[56,4,1,\"\"],sumabs2:[59,4,1,\"\"],sumabs:[59,4,1,\"\"],summary:[64,4,1,\"\"],svd:[67,4,1,\"\"],svdfact:[67,4,1,\"\"],svds:[67,4,1,\"\"],svdvals:[67,4,1,\"\"],sylvester:[67,4,1,\"\"],symbol:[75,4,1,\"\"],symdiff:[59,4,1,\"\"],symlink:[62,4,1,\"\"],symperm:[56,4,1,\"\"],systemerror:[58,4,1,\"\"],take:[59,4,1,\"\"],takebuf_array:[64,4,1,\"\"],takebuf_string:[64,4,1,\"\"],tan:[68,4,1,\"\"],tand:[68,4,1,\"\"],tanh:[68,4,1,\"\"],task_local_storage:[70,4,1,\"\"],tempdir:[62,4,1,\"\"],tempname:[62,4,1,\"\"],tic:[57,4,1,\"\"],time:[57,4,1,\"\"],time_ns:[57,4,1,\"\"],timedwait:[70,4,1,\"\"],toc:[57,4,1,\"\"],toq:[57,4,1,\"\"],touch:[62,4,1,\"\"],trace:[67,4,1,\"\"],trailing_ones:[69,4,1,\"\"],trailing_zeros:[69,4,1,\"\"],transpose:[67,4,1,\"\"],trigamma:[68,4,1,\"\"],tril:[67,4,1,\"\"],triu:[67,4,1,\"\"],trues:[56,4,1,\"\"],trunc:[68,4,1,\"\"],truncate:[64,4,1,\"\"],tryparse:[69,4,1,\"\"],tuple:[57,4,1,\"\"],typeintersect:[57,4,1,\"\"],typejoin:[57,4,1,\"\"],typemax:[57,4,1,\"\"],typemin:[57,4,1,\"\"],ucfirst:[75,4,1,\"\"],unescape_string:[75,4,1,\"\"],union:[59,4,1,\"\"],unique:[59,4,1,\"\"],unlock:[70,4,1,\"\"],unmark:[64,4,1,\"\"],unsafe_convert:[58,4,1,\"\"],unsafe_load:[58,4,1,\"\"],unsafe_pointer_to_objref:[58,4,1,\"\"],unsafe_trunc:[68,4,1,\"\"],unsigned:[69,4,1,\"\"],uperm:[62,4,1,\"\"],uppercase:[75,4,1,\"\"],utf16:[75,4,1,\"\"],utf32:[75,4,1,\"\"],utf8:[75,4,1,\"\"],valtype:[59,4,1,\"\"],values:[59,4,1,\"\"],varm:[68,4,1,\"\"],vcat:[56,4,1,\"\"],vec:[56,4,1,\"\"],vecdot:[67,4,1,\"\"],vecnorm:[67,4,1,\"\"],versioninfo:[57,4,1,\"\"],wait:[70,4,1,\"\"],warn:[64,4,1,\"\"],watch_file:[64,4,1,\"\"],which:[57,4,1,\"\"],whos:[57,4,1,\"\"],widemul:[68,4,1,\"\"],widen:[57,4,1,\"\"],with_bigfloat_precision:[69,4,1,\"\"],with_rounding:[69,4,1,\"\"],withenv:[57,4,1,\"\"],workers:[70,4,1,\"\"],workspace:[57,4,1,\"\"],write:[64,4,1,\"\"],writecsv:[64,4,1,\"\"],writedlm:[64,4,1,\"\"],writemime:[64,4,1,\"\"],wstring:[75,4,1,\"\"],xcorr:[68,4,1,\"\"],xdump:[64,4,1,\"\"],yield:[70,4,1,\"\"],yieldto:[70,4,1,\"\"],zero:[69,4,1,\"\"],zeros:[56,4,1,\"\"],zeta:[68,4,1,\"\"],zip:[59,4,1,\"\"]},Dates:{\"UTInstant{T}\":[61,5,1,\"\"],\"default\":[61,4,1,\"\"],\"recur{T<:TimeType}\":[61,4,1,\"\"],Date:[61,5,1,\"\"],DateTime:[61,5,1,\"\"],Day:[61,5,1,\"\"],Hour:[61,5,1,\"\"],Instant:[61,5,1,\"\"],Millisecond:[61,5,1,\"\"],Minute:[61,5,1,\"\"],Month:[61,5,1,\"\"],Period:[61,5,1,\"\"],Second:[61,5,1,\"\"],TimeType:[61,5,1,\"\"],Week:[61,5,1,\"\"],Year:[61,5,1,\"\"],datetime2julian:[61,4,1,\"\"],datetime2rata:[61,4,1,\"\"],datetime2unix:[61,4,1,\"\"],day:[61,4,1,\"\"],dayabbr:[61,4,1,\"\"],dayname:[61,4,1,\"\"],dayofquarter:[61,4,1,\"\"],dayofweek:[61,4,1,\"\"],dayofweekofmonth:[61,4,1,\"\"],dayofyear:[61,4,1,\"\"],daysinmonth:[61,4,1,\"\"],daysinyear:[61,4,1,\"\"],daysofweekinmonth:[61,4,1,\"\"],eps:[61,4,1,\"\"],firstdayofmonth:[61,4,1,\"\"],firstdayofquarter:[61,4,1,\"\"],firstdayofweek:[61,4,1,\"\"],firstdayofyear:[61,4,1,\"\"],hour:[61,4,1,\"\"],isleapyear:[61,4,1,\"\"],julian2datetime:[61,4,1,\"\"],lastdayofmonth:[61,4,1,\"\"],lastdayofquarter:[61,4,1,\"\"],lastdayofweek:[61,4,1,\"\"],lastdayofyear:[61,4,1,\"\"],millisecond:[61,4,1,\"\"],minute:[61,4,1,\"\"],month:[61,4,1,\"\"],monthabbr:[61,4,1,\"\"],monthday:[61,4,1,\"\"],monthname:[61,4,1,\"\"],now:[61,4,1,\"\"],quarterofyear:[61,4,1,\"\"],rata2datetime:[61,4,1,\"\"],second:[61,4,1,\"\"],today:[61,4,1,\"\"],tofirst:[61,4,1,\"\"],tolast:[61,4,1,\"\"],tonext:[61,4,1,\"\"],toprev:[61,4,1,\"\"],trunc:[61,4,1,\"\"],unix2datetime:[61,4,1,\"\"],week:[61,4,1,\"\"],year:[61,4,1,\"\"],yearmonth:[61,4,1,\"\"],yearmonthday:[61,4,1,\"\"]},Libc:{FormatMessage:[65,4,1,\"\"],GetLastError:[65,4,1,\"\"],MS_ASYNC:[65,5,1,\"\"],MS_INVALIDATE:[65,5,1,\"\"],MS_SYNC:[65,5,1,\"\"],TmStruct:[65,4,1,\"\"],calloc:[65,4,1,\"\"],errno:[65,4,1,\"\"],flush_cstdio:[65,4,1,\"\"],free:[65,4,1,\"\"],malloc:[65,4,1,\"\"],msync:[65,4,1,\"\"],realloc:[65,4,1,\"\"],strerror:[65,4,1,\"\"],strftime:[65,4,1,\"\"],strptime:[65,4,1,\"\"],time:[65,4,1,\"\"]},Libdl:{DL_LOAD_PATH:[66,5,1,\"\"],RTLD_DEEPBIND:[66,5,1,\"\"],RTLD_FIRST:[66,5,1,\"\"],RTLD_GLOBAL:[66,5,1,\"\"],RTLD_LAZY:[66,5,1,\"\"],RTLD_LOCAL:[66,5,1,\"\"],RTLD_NODELETE:[66,5,1,\"\"],RTLD_NOLOAD:[66,5,1,\"\"],RTLD_NOW:[66,5,1,\"\"],dlclose:[66,4,1,\"\"],dlext:[66,5,1,\"\"],dlopen:[66,4,1,\"\"],dlopen_e:[66,4,1,\"\"],dlsym:[66,4,1,\"\"],dlsym_e:[66,4,1,\"\"],find_library:[66,4,1,\"\"]}},objnames:{\"0\":[\"py\",\"module\",\"Python module\"],\"1\":[\"py\",\"function\",\"Python function\"],\"2\":[\"py\",\"data\",\"Python data\"],\"3\":[\"jl\",\"module\",\"Julia module\"],\"4\":[\"jl\",\"function\",\"Julia function\"],\"5\":[\"jl\",\"data\",\"Julia data\"]},objtypes:{\"0\":\"py:module\",\"1\":\"py:function\",\"2\":\"py:data\",\"3\":\"jl:module\",\"4\":\"jl:function\",\"5\":\"jl:data\"},terms:{\"0000001f\":46,\"00025f0\":33,\"000_000_005\":33,\"000a1\":52,\"000a3\":52,\"000a5\":52,\"000a6\":52,\"000a7\":52,\"000a8\":52,\"000a9\":52,\"000aa\":52,\"000ac\":52,\"000ae\":52,\"000af\":52,\"000b0\":52,\"000b1\":52,\"000b2\":52,\"000b3\":52,\"000b4\":52,\"000b6\":52,\"000b7\":52,\"000b9\":52,\"000ba\":52,\"000bc\":52,\"000bd\":52,\"000be\":52,\"000bf\":52,\"000c5\":52,\"000c6\":52,\"000d0\":52,\"000d7\":52,\"000d8\":52,\"000de\":52,\"000df\":52,\"000e5\":52,\"000e6\":52,\"000f0\":52,\"000f7\":52,\"000f8\":52,\"000fe\":52,\"0014a\":52,\"0014b\":52,\"0019e\":52,\"001b5\":52,\"001c2\":52,\"0025b\":52,\"0026c\":52,\"0026d\":52,\"0026f\":52,\"0027a\":52,\"0027b\":52,\"0027c\":52,\"0027d\":52,\"0027e\":52,\"0028a\":52,\"0028b\":52,\"0028c\":52,\"0028d\":52,\"0028e\":52,\"0029e\":52,\"002a4\":52,\"002a7\":52,\"002b0\":52,\"002b2\":52,\"002b3\":52,\"002b7\":52,\"002b8\":52,\"002bc\":52,\"002c7\":52,\"002c8\":52,\"002cc\":52,\"002d0\":52,\"002d1\":52,\"002d2\":52,\"002d3\":52,\"002d4\":52,\"002d5\":52,\"002d8\":52,\"002dc\":52,\"002e1\":52,\"002e2\":52,\"002e3\":52,\"0030a\":52,\"0030b\":52,\"0030c\":52,\"0031a\":52,\"0032a\":52,\"0039a\":52,\"0039b\":52,\"0039c\":52,\"0039d\":52,\"0039e\":52,\"0039f\":52,\"003a0\":52,\"003a1\":52,\"003a3\":52,\"003a4\":52,\"003a5\":52,\"003a6\":52,\"003a7\":52,\"003a8\":52,\"003a9\":52,\"003b1\":52,\"003b2\":52,\"003b3\":52,\"003b4\":52,\"003b5\":52,\"003b6\":52,\"003b7\":52,\"003b8\":52,\"003b9\":52,\"003ba\":52,\"003bb\":52,\"003bc\":52,\"003bd\":52,\"003be\":52,\"003bf\":52,\"003c0\":52,\"003c1\":52,\"003c2\":52,\"003c3\":52,\"003c4\":52,\"003c5\":52,\"003c6\":52,\"003c7\":52,\"003c8\":52,\"003c9\":52,\"003d0\":52,\"003d1\":52,\"003d5\":52,\"003d6\":52,\"003d8\":52,\"003d9\":52,\"003da\":52,\"003db\":52,\"003dc\":52,\"003dd\":52,\"003de\":52,\"003df\":52,\"003e0\":52,\"003e1\":52,\"003f0\":52,\"003f1\":52,\"003f4\":52,\"003f5\":52,\"003f6\":52,\"00a0\":53,\"01d2c\":52,\"01d2e\":52,\"01d30\":52,\"01d31\":52,\"01d33\":52,\"01d34\":52,\"01d35\":52,\"01d36\":52,\"01d37\":52,\"01d38\":52,\"01d39\":52,\"01d3a\":52,\"01d3c\":52,\"01d3e\":52,\"01d3f\":52,\"01d40\":52,\"01d41\":52,\"01d42\":52,\"01d43\":52,\"01d45\":52,\"01d47\":52,\"01d48\":52,\"01d49\":52,\"01d4b\":52,\"01d4d\":52,\"01d4f\":52,\"01d50\":52,\"01d52\":52,\"01d56\":52,\"01d57\":52,\"01d58\":52,\"01d5b\":52,\"01d5d\":52,\"01d5e\":52,\"01d5f\":52,\"01d60\":52,\"01d61\":52,\"01d62\":52,\"01d63\":52,\"01d64\":52,\"01d65\":52,\"01d66\":52,\"01d67\":52,\"01d68\":52,\"01d69\":52,\"01d6a\":52,\"01d9c\":52,\"01da0\":52,\"01da5\":52,\"01db2\":52,\"01dbb\":52,\"01dbf\":52,\"01t00\":[26,61],\"01t12\":[26,61],\"0200a\":52,\"0201b\":52,\"0201c\":52,\"0201d\":52,\"0203a\":52,\"0203c\":52,\"0207a\":52,\"0207b\":52,\"0207c\":52,\"0207d\":52,\"0207e\":52,\"0207f\":52,\"0208a\":52,\"0208b\":52,\"0208c\":52,\"0208d\":52,\"0208e\":52,\"0209a\":52,\"0209b\":52,\"0209c\":52,\"020a7\":52,\"020ac\":52,\"020d0\":52,\"020d1\":52,\"020d2\":52,\"020d6\":52,\"020d7\":52,\"020db\":52,\"020dc\":52,\"020dd\":52,\"020de\":52,\"020df\":52,\"020e1\":52,\"020e4\":52,\"020e7\":52,\"020e8\":52,\"020e9\":52,\"020ec\":52,\"020ed\":52,\"020ee\":52,\"020ef\":52,\"020f0\":52,\"0210a\":52,\"0210b\":52,\"0210c\":52,\"0210d\":52,\"0210e\":52,\"0210f\":52,\"0211a\":52,\"0211b\":52,\"0211c\":52,\"0211d\":52,\"0211e\":52,\"0212b\":52,\"0212c\":52,\"0212d\":52,\"0212f\":52,\"0213c\":52,\"0213d\":52,\"0213e\":52,\"0213f\":52,\"0214a\":52,\"0214b\":52,\"0219a\":52,\"0219b\":52,\"0219e\":52,\"0219f\":52,\"021a0\":52,\"021a1\":52,\"021a2\":52,\"021a3\":52,\"021a4\":52,\"021a5\":52,\"021a6\":52,\"021a7\":52,\"021a8\":52,\"021a9\":52,\"021aa\":52,\"021ab\":52,\"021ac\":52,\"021ad\":52,\"021ae\":52,\"021af\":52,\"021b0\":52,\"021b1\":52,\"021b2\":52,\"021b3\":52,\"021b4\":52,\"021b5\":52,\"021b6\":52,\"021b7\":52,\"021b8\":52,\"021b9\":52,\"021ba\":52,\"021bb\":52,\"021bc\":52,\"021bd\":52,\"021be\":52,\"021bf\":52,\"021c0\":52,\"021c1\":52,\"021c2\":52,\"021c3\":52,\"021c4\":52,\"021c5\":52,\"021c6\":52,\"021c7\":52,\"021c8\":52,\"021c9\":52,\"021ca\":52,\"021cb\":52,\"021cc\":52,\"021cd\":52,\"021ce\":52,\"021cf\":52,\"021d0\":52,\"021d1\":52,\"021d2\":52,\"021d3\":52,\"021d4\":52,\"021d5\":52,\"021d6\":52,\"021d7\":52,\"021d8\":52,\"021d9\":52,\"021da\":52,\"021db\":52,\"021dc\":52,\"021dd\":52,\"021de\":52,\"021df\":52,\"021e0\":52,\"021e1\":52,\"021e2\":52,\"021e3\":52,\"021e4\":52,\"021e5\":52,\"021e6\":52,\"021e7\":52,\"021e8\":52,\"021e9\":52,\"021ea\":52,\"021f4\":52,\"021f5\":52,\"021f6\":52,\"021f7\":52,\"021f8\":52,\"021f9\":52,\"021fa\":52,\"021fb\":52,\"021fc\":52,\"021fd\":52,\"021fe\":52,\"021ff\":52,\"0220a\":52,\"0220b\":52,\"0220c\":52,\"0220d\":52,\"0220e\":52,\"0220f\":52,\"0221a\":52,\"0221b\":52,\"0221c\":52,\"0221d\":52,\"0221e\":52,\"0221f\":52,\"0222a\":52,\"0222b\":52,\"0222c\":52,\"0222d\":52,\"0222e\":52,\"0222f\":52,\"0223a\":52,\"0223b\":52,\"0223c\":52,\"0223d\":52,\"0223e\":52,\"0223f\":52,\"0224a\":52,\"0224b\":52,\"0224c\":52,\"0224d\":52,\"0224e\":52,\"0224f\":52,\"0225a\":52,\"0225b\":52,\"0225c\":52,\"0225d\":52,\"0225e\":52,\"0225f\":52,\"0226a\":52,\"0226b\":52,\"0226c\":52,\"0226d\":52,\"0226e\":52,\"0226f\":52,\"0227a\":52,\"0227b\":52,\"0227c\":52,\"0227d\":52,\"0227e\":52,\"0227f\":52,\"0228a\":52,\"0228b\":52,\"0228d\":52,\"0228e\":52,\"0228f\":52,\"0229a\":52,\"0229b\":52,\"0229c\":52,\"0229d\":52,\"0229e\":52,\"0229f\":52,\"022a0\":52,\"022a1\":52,\"022a2\":52,\"022a3\":52,\"022a4\":52,\"022a5\":52,\"022a7\":52,\"022a8\":52,\"022a9\":52,\"022aa\":52,\"022ab\":52,\"022ac\":52,\"022ad\":52,\"022ae\":52,\"022af\":52,\"022b0\":52,\"022b1\":52,\"022b2\":52,\"022b3\":52,\"022b4\":52,\"022b5\":52,\"022b6\":52,\"022b7\":52,\"022b8\":52,\"022b9\":52,\"022ba\":52,\"022bb\":52,\"022bc\":52,\"022bd\":52,\"022be\":52,\"022bf\":52,\"022c0\":52,\"022c1\":52,\"022c2\":52,\"022c3\":52,\"022c4\":52,\"022c5\":52,\"022c6\":52,\"022c7\":52,\"022c8\":52,\"022c9\":52,\"022ca\":52,\"022cb\":52,\"022cc\":52,\"022cd\":52,\"022ce\":52,\"022cf\":52,\"022d0\":52,\"022d1\":52,\"022d2\":52,\"022d3\":52,\"022d4\":52,\"022d5\":52,\"022d6\":52,\"022d7\":52,\"022d8\":52,\"022d9\":52,\"022da\":52,\"022db\":52,\"022dc\":52,\"022dd\":52,\"022de\":52,\"022df\":52,\"022e0\":52,\"022e1\":52,\"022e2\":52,\"022e3\":52,\"022e4\":52,\"022e5\":52,\"022e6\":52,\"022e7\":52,\"022e8\":52,\"022e9\":52,\"022ea\":52,\"022eb\":52,\"022ec\":52,\"022ed\":52,\"022ee\":52,\"022ef\":52,\"022f0\":52,\"022f1\":52,\"022f2\":52,\"022f3\":52,\"022f4\":52,\"022f5\":52,\"022f6\":52,\"022f7\":52,\"022f8\":52,\"022f9\":52,\"022fa\":52,\"022fb\":52,\"022fc\":52,\"022fd\":52,\"022fe\":52,\"022ff\":52,\"0230a\":52,\"0230b\":52,\"0231a\":52,\"0231b\":52,\"0231c\":52,\"0231d\":52,\"0231e\":52,\"0231f\":52,\"0232c\":52,\"0233d\":52,\"0233f\":52,\"023a3\":52,\"023b0\":52,\"023b1\":52,\"023b4\":52,\"023b5\":52,\"023b6\":52,\"023b7\":52,\"023b8\":52,\"023b9\":52,\"023ce\":52,\"023de\":52,\"023df\":52,\"023e2\":52,\"023e3\":52,\"023e4\":52,\"023e5\":52,\"023e6\":52,\"023e7\":52,\"023e9\":52,\"023ea\":52,\"023eb\":52,\"023ec\":52,\"023f0\":52,\"023f3\":52,\"024c2\":52,\"024c8\":52,\"0258c\":52,\"025a0\":52,\"025a1\":52,\"025a2\":52,\"025a3\":52,\"025a4\":52,\"025a5\":52,\"025a6\":52,\"025a7\":52,\"025a8\":52,\"025a9\":52,\"025aa\":52,\"025ab\":52,\"025ac\":52,\"025ad\":52,\"025ae\":52,\"025af\":52,\"025b0\":52,\"025b1\":52,\"025b2\":52,\"025b3\":52,\"025b4\":52,\"025b5\":52,\"025b6\":52,\"025b9\":52,\"025ba\":52,\"025bb\":52,\"025bc\":52,\"025bd\":52,\"025be\":52,\"025bf\":52,\"025c0\":52,\"025c3\":52,\"025c4\":52,\"025c5\":52,\"025c6\":52,\"025c7\":52,\"025c8\":52,\"025c9\":52,\"025ca\":52,\"025cb\":52,\"025cc\":52,\"025cd\":52,\"025ce\":52,\"025cf\":52,\"025d0\":52,\"025d1\":52,\"025d2\":52,\"025d3\":52,\"025d4\":52,\"025d5\":52,\"025d6\":52,\"025d7\":52,\"025d8\":52,\"025d9\":52,\"025da\":52,\"025db\":52,\"025dc\":52,\"025dd\":52,\"025de\":52,\"025df\":52,\"025e0\":52,\"025e1\":52,\"025e2\":52,\"025e3\":52,\"025e4\":52,\"025e5\":52,\"025e6\":52,\"025e7\":52,\"025e8\":52,\"025e9\":52,\"025ea\":52,\"025eb\":52,\"025ec\":52,\"025ed\":52,\"025ee\":52,\"025ef\":52,\"025f0\":52,\"025f1\":52,\"025f2\":52,\"025f3\":52,\"025f4\":52,\"025f5\":52,\"025f6\":52,\"025f7\":52,\"025f8\":52,\"025f9\":52,\"025fa\":52,\"025fb\":52,\"025fc\":52,\"025fd\":52,\"025fe\":52,\"025ff\":52,\"0260e\":52,\"0261d\":52,\"0263a\":52,\"0263b\":52,\"0263c\":52,\"0263d\":52,\"0263f\":52,\"0264a\":52,\"0264b\":52,\"0264c\":52,\"0264d\":52,\"0264e\":52,\"0264f\":52,\"0266a\":52,\"0266b\":52,\"0266d\":52,\"0266e\":52,\"0266f\":52,\"0267b\":52,\"0267e\":52,\"0267f\":52,\"026a0\":52,\"026a1\":52,\"026a5\":52,\"026aa\":52,\"026ab\":52,\"026ac\":52,\"026b2\":52,\"026bd\":52,\"026be\":52,\"026c4\":52,\"026c5\":52,\"026ce\":52,\"026d4\":52,\"026ea\":52,\"026f2\":52,\"026f3\":52,\"026f5\":52,\"026fa\":52,\"026fd\":52,\"0270a\":52,\"0270b\":52,\"0270c\":52,\"0270f\":52,\"0272a\":52,\"0273d\":52,\"0274c\":52,\"0274e\":52,\"0279b\":52,\"027a1\":52,\"027b0\":52,\"027bf\":52,\"027c0\":52,\"027c1\":52,\"027c2\":52,\"027c8\":52,\"027c9\":52,\"027d1\":52,\"027d2\":52,\"027d8\":52,\"027d9\":52,\"027e6\":52,\"027e7\":52,\"027e8\":52,\"027e9\":52,\"027f0\":52,\"027f1\":52,\"027f5\":52,\"027f6\":52,\"027f7\":52,\"027f8\":52,\"027f9\":52,\"027fa\":52,\"027fb\":52,\"027fc\":52,\"027fd\":52,\"027fe\":52,\"027ff\":52,\"0290a\":52,\"0290b\":52,\"0290c\":52,\"0290d\":52,\"0290e\":52,\"0290f\":52,\"0291d\":52,\"0291e\":52,\"0291f\":52,\"0292a\":52,\"0292b\":52,\"0292c\":52,\"0292d\":52,\"0292e\":52,\"0292f\":52,\"0294a\":52,\"0294b\":52,\"0294c\":52,\"0294d\":52,\"0294e\":52,\"0294f\":52,\"0295a\":52,\"0295b\":52,\"0295c\":52,\"0295d\":52,\"0295e\":52,\"0295f\":52,\"0296a\":52,\"0296b\":52,\"0296c\":52,\"0296d\":52,\"0296e\":52,\"0296f\":52,\"0299b\":52,\"0299c\":52,\"0299d\":52,\"0299e\":52,\"0299f\":52,\"029a0\":52,\"029a1\":52,\"029a2\":52,\"029a3\":52,\"029a4\":52,\"029a5\":52,\"029a6\":52,\"029a7\":52,\"029a8\":52,\"029a9\":52,\"029aa\":52,\"029ab\":52,\"029ac\":52,\"029ad\":52,\"029ae\":52,\"029af\":52,\"029b0\":52,\"029b1\":52,\"029b2\":52,\"029b3\":52,\"029b4\":52,\"029b7\":52,\"029b8\":52,\"029bc\":52,\"029be\":52,\"029bf\":52,\"029c0\":52,\"029c1\":52,\"029c4\":52,\"029c5\":52,\"029c6\":52,\"029c7\":52,\"029ca\":52,\"029cb\":52,\"029cf\":52,\"029d0\":52,\"029df\":52,\"029e1\":52,\"029e2\":52,\"029e3\":52,\"029e4\":52,\"029e5\":52,\"029eb\":52,\"029f4\":52,\"029f6\":52,\"029f7\":52,\"029fa\":52,\"029fb\":52,\"02a00\":52,\"02a01\":52,\"02a02\":52,\"02a03\":52,\"02a04\":52,\"02a05\":52,\"02a06\":52,\"02a07\":52,\"02a08\":52,\"02a09\":52,\"02a0a\":52,\"02a0b\":52,\"02a0c\":52,\"02a0d\":52,\"02a0e\":52,\"02a0f\":52,\"02a10\":52,\"02a11\":52,\"02a12\":52,\"02a13\":52,\"02a14\":52,\"02a15\":52,\"02a16\":52,\"02a18\":52,\"02a19\":52,\"02a1a\":52,\"02a1b\":52,\"02a1c\":52,\"02a22\":52,\"02a23\":52,\"02a24\":52,\"02a25\":52,\"02a26\":52,\"02a27\":52,\"02a28\":52,\"02a29\":52,\"02a2a\":52,\"02a2b\":52,\"02a2c\":52,\"02a2d\":52,\"02a2e\":52,\"02a2f\":52,\"02a30\":52,\"02a31\":52,\"02a32\":52,\"02a33\":52,\"02a34\":52,\"02a35\":52,\"02a36\":52,\"02a37\":52,\"02a38\":52,\"02a39\":52,\"02a3a\":52,\"02a3b\":52,\"02a3c\":52,\"02a3d\":52,\"02a3f\":52,\"02a40\":52,\"02a41\":52,\"02a42\":52,\"02a43\":52,\"02a44\":52,\"02a45\":52,\"02a4a\":52,\"02a4b\":52,\"02a4c\":52,\"02a4d\":52,\"02a4e\":52,\"02a4f\":52,\"02a50\":52,\"02a51\":52,\"02a52\":52,\"02a53\":52,\"02a54\":52,\"02a55\":52,\"02a56\":52,\"02a57\":52,\"02a58\":52,\"02a5a\":52,\"02a5b\":52,\"02a5c\":52,\"02a5d\":52,\"02a5e\":52,\"02a5f\":52,\"02a60\":52,\"02a61\":52,\"02a62\":52,\"02a63\":52,\"02a66\":52,\"02a67\":52,\"02a6a\":52,\"02a6b\":52,\"02a6c\":52,\"02a6d\":52,\"02a6e\":52,\"02a6f\":52,\"02a70\":52,\"02a71\":52,\"02a72\":52,\"02a73\":52,\"02a74\":52,\"02a75\":52,\"02a76\":52,\"02a77\":52,\"02a78\":52,\"02a79\":52,\"02a7a\":52,\"02a7b\":52,\"02a7c\":52,\"02a7d\":52,\"02a7e\":52,\"02a7f\":52,\"02a80\":52,\"02a81\":52,\"02a82\":52,\"02a83\":52,\"02a84\":52,\"02a85\":52,\"02a86\":52,\"02a87\":52,\"02a88\":52,\"02a89\":52,\"02a8a\":52,\"02a8b\":52,\"02a8c\":52,\"02a8d\":52,\"02a8e\":52,\"02a8f\":52,\"02a90\":52,\"02a91\":52,\"02a92\":52,\"02a93\":52,\"02a94\":52,\"02a95\":52,\"02a96\":52,\"02a97\":52,\"02a98\":52,\"02a99\":52,\"02a9a\":52,\"02a9b\":52,\"02a9c\":52,\"02a9d\":52,\"02a9e\":52,\"02a9f\":52,\"02aa0\":52,\"02aa1\":52,\"02aa2\":52,\"02aa3\":52,\"02aa4\":52,\"02aa5\":52,\"02aa6\":52,\"02aa7\":52,\"02aa8\":52,\"02aa9\":52,\"02aaa\":52,\"02aab\":52,\"02aac\":52,\"02aad\":52,\"02aae\":52,\"02aaf\":52,\"02ab0\":52,\"02ab1\":52,\"02ab2\":52,\"02ab3\":52,\"02ab4\":52,\"02ab5\":52,\"02ab6\":52,\"02ab7\":52,\"02ab8\":52,\"02ab9\":52,\"02aba\":52,\"02abb\":52,\"02abc\":52,\"02abd\":52,\"02abe\":52,\"02abf\":52,\"02ac0\":52,\"02ac1\":52,\"02ac2\":52,\"02ac3\":52,\"02ac4\":52,\"02ac5\":52,\"02ac6\":52,\"02ac7\":52,\"02ac8\":52,\"02ac9\":52,\"02aca\":52,\"02acb\":52,\"02acc\":52,\"02acd\":52,\"02ace\":52,\"02acf\":52,\"02ad0\":52,\"02ad1\":52,\"02ad2\":52,\"02ad3\":52,\"02ad4\":52,\"02ad5\":52,\"02ad6\":52,\"02ad7\":52,\"02ad8\":52,\"02ad9\":52,\"02adb\":52,\"02adc\":52,\"02add\":52,\"02ae3\":52,\"02ae4\":52,\"02af4\":52,\"02af6\":52,\"02af7\":52,\"02af8\":52,\"02af9\":52,\"02afa\":52,\"02b05\":52,\"02b06\":52,\"02b07\":52,\"02b12\":52,\"02b13\":52,\"02b14\":52,\"02b15\":52,\"02b16\":52,\"02b17\":52,\"02b18\":52,\"02b19\":52,\"02b1a\":52,\"02b1b\":52,\"02b1c\":52,\"02b1d\":52,\"02b1e\":52,\"02b1f\":52,\"02b20\":52,\"02b21\":52,\"02b22\":52,\"02b23\":52,\"02b24\":52,\"02b25\":52,\"02b26\":52,\"02b27\":52,\"02b28\":52,\"02b29\":52,\"02b2a\":52,\"02b2b\":52,\"02b2c\":52,\"02b2d\":52,\"02b2e\":52,\"02b2f\":52,\"02b30\":52,\"02b31\":52,\"02b32\":52,\"02b33\":52,\"02b34\":52,\"02b35\":52,\"02b36\":52,\"02b37\":52,\"02b38\":52,\"02b39\":52,\"02b3a\":52,\"02b3b\":52,\"02b3c\":52,\"02b3d\":52,\"02b3e\":52,\"02b3f\":52,\"02b40\":52,\"02b41\":52,\"02b42\":52,\"02b43\":52,\"02b44\":52,\"02b45\":52,\"02b46\":52,\"02b47\":52,\"02b48\":52,\"02b49\":52,\"02b4a\":52,\"02b4b\":52,\"02b4c\":52,\"02b50\":52,\"02b51\":52,\"02b52\":52,\"02b53\":52,\"02b54\":52,\"02b55\":52,\"02c7c\":52,\"02c7d\":52,\"0303d\":52,\"0518977991518im\":22,\"08708053414102428im\":22,\"0b10\":33,\"0b1011_0010\":33,\"0e10\":33,\"0f0\":[33,43,46],\"0fe00\":52,\"0im\":[22,24,25,29],\"0mq\":45,\"0o10\":33,\"0o777\":62,\"0x0\":43,\"0x00\":[42,43],\"0x000\":43,\"0x0000\":43,\"0x00007f418d0816b8\":21,\"0x00007f5998a04370\":16,\"0x00007f5998a570d0\":16,\"0x00007fcc7de64850\":16,\"0x00007fcc80c4d930\":16,\"0x00007ffde56bd01a\":4,\"0x00007fff5fbffc45\":21,\"0x00007ffff6541154\":4,\"0x00007ffff65412fe\":4,\"0x00007ffff7928bf7\":4,\"0x000f\":43,\"0x01\":[33,38],\"0x01020304\":64,\"0x0123\":33,\"0x01234567\":33,\"0x0123456789abcdef\":33,\"0x02\":33,\"0x04030201\":64,\"0x08\":33,\"0x0c\":25,\"0x1\":33,\"0x110000\":49,\"0x123\":33,\"0x1234567\":33,\"0x123456789abcdef\":33,\"0x1289d070\":4,\"0x1p0\":33,\"0x2812060\":4,\"0x41\":49,\"0x44\":49,\"0x54\":49,\"0x61\":42,\"0x62\":42,\"0x63\":42,\"0x64\":42,\"0x7ffde56be000\":4,\"0x7ffdf35e8010\":16,\"0x7ffdf367f630\":4,\"0x7ffdf39b1030\":4,\"0x7ffdf42de400\":4,\"0x7ffdf7409150\":16,\"0x7ffdf74091b0\":16,\"0x7ffdf74d7a90\":16,\"0x7ffdf74d7af0\":16,\"0x7ffff6dcb07d\":16,\"0x7fffffffc2b0\":4,\"0x7fffffffcc70\":16,\"0x7fffffffcc90\":16,\"0x80\":49,\"0x84\":38,\"0x88\":49,\"0xb2\":33,\"0xbf\":49,\"0xc3\":49,\"0xdead_beef\":33,\"0xdeadbeef\":33,\"0xe2\":49,\"0xf\":43,\"0xf0\":43,\"0xff\":[33,49],\"0xfff0\":43,\"0xffffff84\":38,\"0xfffffffffffffffff\":1,\"1000x\":4,\"10_000\":33,\"10ffff\":49,\"10x10\":[20,56],\"1368683772161603e\":33,\"13ghz\":2,\"15im\":22,\"15t00\":61,\"18425e\":56,\"1920929f\":33,\"1d400\":52,\"1d401\":52,\"1d402\":52,\"1d403\":52,\"1d404\":52,\"1d405\":52,\"1d406\":52,\"1d407\":52,\"1d408\":52,\"1d409\":52,\"1d40a\":52,\"1d40b\":52,\"1d40c\":52,\"1d40d\":52,\"1d40e\":52,\"1d40f\":52,\"1d410\":52,\"1d411\":52,\"1d412\":52,\"1d413\":52,\"1d414\":52,\"1d415\":52,\"1d416\":52,\"1d417\":52,\"1d418\":52,\"1d419\":52,\"1d41a\":52,\"1d41b\":52,\"1d41c\":52,\"1d41d\":52,\"1d41e\":52,\"1d41f\":52,\"1d420\":52,\"1d421\":52,\"1d422\":52,\"1d423\":52,\"1d424\":52,\"1d425\":52,\"1d426\":52,\"1d427\":52,\"1d428\":52,\"1d429\":52,\"1d42a\":52,\"1d42b\":52,\"1d42c\":52,\"1d42d\":52,\"1d42e\":52,\"1d42f\":52,\"1d430\":52,\"1d431\":52,\"1d432\":52,\"1d433\":52,\"1d434\":52,\"1d435\":52,\"1d436\":52,\"1d437\":52,\"1d438\":52,\"1d439\":52,\"1d43a\":52,\"1d43b\":52,\"1d43c\":52,\"1d43d\":52,\"1d43e\":52,\"1d43f\":52,\"1d440\":52,\"1d441\":52,\"1d442\":52,\"1d443\":52,\"1d444\":52,\"1d445\":52,\"1d446\":52,\"1d447\":52,\"1d448\":52,\"1d449\":52,\"1d44a\":52,\"1d44b\":52,\"1d44c\":52,\"1d44d\":52,\"1d44e\":52,\"1d44f\":52,\"1d450\":52,\"1d451\":52,\"1d452\":52,\"1d453\":52,\"1d454\":52,\"1d456\":52,\"1d457\":52,\"1d458\":52,\"1d459\":52,\"1d45a\":52,\"1d45b\":52,\"1d45c\":52,\"1d45d\":52,\"1d45e\":52,\"1d45f\":52,\"1d460\":52,\"1d461\":52,\"1d462\":52,\"1d463\":52,\"1d464\":52,\"1d465\":52,\"1d466\":52,\"1d467\":52,\"1d468\":52,\"1d469\":52,\"1d46a\":52,\"1d46b\":52,\"1d46c\":52,\"1d46d\":52,\"1d46e\":52,\"1d46f\":52,\"1d470\":52,\"1d471\":52,\"1d472\":52,\"1d473\":52,\"1d474\":52,\"1d475\":52,\"1d476\":52,\"1d477\":52,\"1d478\":52,\"1d479\":52,\"1d47a\":52,\"1d47b\":52,\"1d47c\":52,\"1d47d\":52,\"1d47e\":52,\"1d47f\":52,\"1d480\":52,\"1d481\":52,\"1d482\":52,\"1d483\":52,\"1d484\":52,\"1d485\":52,\"1d486\":52,\"1d487\":52,\"1d488\":52,\"1d489\":52,\"1d48a\":52,\"1d48b\":52,\"1d48c\":52,\"1d48d\":52,\"1d48e\":52,\"1d48f\":52,\"1d490\":52,\"1d491\":52,\"1d492\":52,\"1d493\":52,\"1d494\":52,\"1d495\":52,\"1d496\":52,\"1d497\":52,\"1d498\":52,\"1d499\":52,\"1d49a\":52,\"1d49b\":52,\"1d49c\":52,\"1d49e\":52,\"1d49f\":52,\"1d4a2\":52,\"1d4a5\":52,\"1d4a6\":52,\"1d4a9\":52,\"1d4aa\":52,\"1d4ab\":52,\"1d4ac\":52,\"1d4ae\":52,\"1d4af\":52,\"1d4b0\":52,\"1d4b1\":52,\"1d4b2\":52,\"1d4b3\":52,\"1d4b4\":52,\"1d4b5\":52,\"1d4b6\":52,\"1d4b7\":52,\"1d4b8\":52,\"1d4b9\":52,\"1d4bb\":52,\"1d4bd\":52,\"1d4be\":52,\"1d4bf\":52,\"1d4c0\":52,\"1d4c1\":52,\"1d4c2\":52,\"1d4c3\":52,\"1d4c5\":52,\"1d4c6\":52,\"1d4c7\":52,\"1d4c8\":52,\"1d4c9\":52,\"1d4ca\":52,\"1d4cb\":52,\"1d4cc\":52,\"1d4cd\":52,\"1d4ce\":52,\"1d4cf\":52,\"1d4d0\":52,\"1d4d1\":52,\"1d4d2\":52,\"1d4d3\":52,\"1d4d4\":52,\"1d4d5\":52,\"1d4d6\":52,\"1d4d7\":52,\"1d4d8\":52,\"1d4d9\":52,\"1d4da\":52,\"1d4db\":52,\"1d4dc\":52,\"1d4dd\":52,\"1d4de\":52,\"1d4df\":52,\"1d4e0\":52,\"1d4e1\":52,\"1d4e2\":52,\"1d4e3\":52,\"1d4e4\":52,\"1d4e5\":52,\"1d4e6\":52,\"1d4e7\":52,\"1d4e8\":52,\"1d4e9\":52,\"1d4ea\":52,\"1d4eb\":52,\"1d4ec\":52,\"1d4ed\":52,\"1d4ee\":52,\"1d4ef\":52,\"1d4f0\":52,\"1d4f1\":52,\"1d4f2\":52,\"1d4f3\":52,\"1d4f4\":52,\"1d4f5\":52,\"1d4f6\":52,\"1d4f7\":52,\"1d4f8\":52,\"1d4f9\":52,\"1d4fa\":52,\"1d4fb\":52,\"1d4fc\":52,\"1d4fd\":52,\"1d4fe\":52,\"1d4ff\":52,\"1d500\":52,\"1d501\":52,\"1d502\":52,\"1d503\":52,\"1d504\":52,\"1d505\":52,\"1d507\":52,\"1d508\":52,\"1d509\":52,\"1d50a\":52,\"1d50d\":52,\"1d50e\":52,\"1d50f\":52,\"1d510\":52,\"1d511\":52,\"1d512\":52,\"1d513\":52,\"1d514\":52,\"1d516\":52,\"1d517\":52,\"1d518\":52,\"1d519\":52,\"1d51a\":52,\"1d51b\":52,\"1d51c\":52,\"1d51e\":52,\"1d51f\":52,\"1d520\":52,\"1d521\":52,\"1d522\":52,\"1d523\":52,\"1d524\":52,\"1d525\":52,\"1d526\":52,\"1d527\":52,\"1d528\":52,\"1d529\":52,\"1d52a\":52,\"1d52b\":52,\"1d52c\":52,\"1d52d\":52,\"1d52e\":52,\"1d52f\":52,\"1d530\":52,\"1d531\":52,\"1d532\":52,\"1d533\":52,\"1d534\":52,\"1d535\":52,\"1d536\":52,\"1d537\":52,\"1d538\":52,\"1d539\":52,\"1d53b\":52,\"1d53c\":52,\"1d53d\":52,\"1d53e\":52,\"1d540\":52,\"1d541\":52,\"1d542\":52,\"1d543\":52,\"1d544\":52,\"1d546\":52,\"1d54a\":52,\"1d54b\":52,\"1d54c\":52,\"1d54d\":52,\"1d54e\":52,\"1d54f\":52,\"1d550\":52,\"1d552\":52,\"1d553\":52,\"1d554\":52,\"1d555\":52,\"1d556\":52,\"1d557\":52,\"1d558\":52,\"1d559\":52,\"1d55a\":52,\"1d55b\":52,\"1d55c\":52,\"1d55d\":52,\"1d55e\":52,\"1d55f\":52,\"1d560\":52,\"1d561\":52,\"1d562\":52,\"1d563\":52,\"1d564\":52,\"1d565\":52,\"1d566\":52,\"1d567\":52,\"1d568\":52,\"1d569\":52,\"1d56a\":52,\"1d56b\":52,\"1d56c\":52,\"1d56d\":52,\"1d56e\":52,\"1d56f\":52,\"1d570\":52,\"1d571\":52,\"1d572\":52,\"1d573\":52,\"1d574\":52,\"1d575\":52,\"1d576\":52,\"1d577\":52,\"1d578\":52,\"1d579\":52,\"1d57a\":52,\"1d57b\":52,\"1d57c\":52,\"1d57d\":52,\"1d57e\":52,\"1d57f\":52,\"1d580\":52,\"1d581\":52,\"1d582\":52,\"1d583\":52,\"1d584\":52,\"1d585\":52,\"1d586\":52,\"1d587\":52,\"1d588\":52,\"1d589\":52,\"1d58a\":52,\"1d58b\":52,\"1d58c\":52,\"1d58d\":52,\"1d58e\":52,\"1d58f\":52,\"1d590\":52,\"1d591\":52,\"1d592\":52,\"1d593\":52,\"1d594\":52,\"1d595\":52,\"1d596\":52,\"1d597\":52,\"1d598\":52,\"1d599\":52,\"1d59a\":52,\"1d59b\":52,\"1d59c\":52,\"1d59d\":52,\"1d59e\":52,\"1d59f\":52,\"1d5a0\":52,\"1d5a1\":52,\"1d5a2\":52,\"1d5a3\":52,\"1d5a4\":52,\"1d5a5\":52,\"1d5a6\":52,\"1d5a7\":52,\"1d5a8\":52,\"1d5a9\":52,\"1d5aa\":52,\"1d5ab\":52,\"1d5ac\":52,\"1d5ad\":52,\"1d5ae\":52,\"1d5af\":52,\"1d5b0\":52,\"1d5b1\":52,\"1d5b2\":52,\"1d5b3\":52,\"1d5b4\":52,\"1d5b5\":52,\"1d5b6\":52,\"1d5b7\":52,\"1d5b8\":52,\"1d5b9\":52,\"1d5ba\":52,\"1d5bb\":52,\"1d5bc\":52,\"1d5bd\":52,\"1d5be\":52,\"1d5bf\":52,\"1d5c0\":52,\"1d5c1\":52,\"1d5c2\":52,\"1d5c3\":52,\"1d5c4\":52,\"1d5c5\":52,\"1d5c6\":52,\"1d5c7\":52,\"1d5c8\":52,\"1d5c9\":52,\"1d5ca\":52,\"1d5cb\":52,\"1d5cc\":52,\"1d5cd\":52,\"1d5ce\":52,\"1d5cf\":52,\"1d5d0\":52,\"1d5d1\":52,\"1d5d2\":52,\"1d5d3\":52,\"1d5d4\":52,\"1d5d5\":52,\"1d5d6\":52,\"1d5d7\":52,\"1d5d8\":52,\"1d5d9\":52,\"1d5da\":52,\"1d5db\":52,\"1d5dc\":52,\"1d5dd\":52,\"1d5de\":52,\"1d5df\":52,\"1d5e0\":52,\"1d5e1\":52,\"1d5e2\":52,\"1d5e3\":52,\"1d5e4\":52,\"1d5e5\":52,\"1d5e6\":52,\"1d5e7\":52,\"1d5e8\":52,\"1d5e9\":52,\"1d5ea\":52,\"1d5eb\":52,\"1d5ec\":52,\"1d5ed\":52,\"1d5ee\":52,\"1d5ef\":52,\"1d5f0\":52,\"1d5f1\":52,\"1d5f2\":52,\"1d5f3\":52,\"1d5f4\":52,\"1d5f5\":52,\"1d5f6\":52,\"1d5f7\":52,\"1d5f8\":52,\"1d5f9\":52,\"1d5fa\":52,\"1d5fb\":52,\"1d5fc\":52,\"1d5fd\":52,\"1d5fe\":52,\"1d5ff\":52,\"1d600\":52,\"1d601\":52,\"1d602\":52,\"1d603\":52,\"1d604\":52,\"1d605\":52,\"1d606\":52,\"1d607\":52,\"1d608\":52,\"1d609\":52,\"1d60a\":52,\"1d60b\":52,\"1d60c\":52,\"1d60d\":52,\"1d60e\":52,\"1d60f\":52,\"1d610\":52,\"1d611\":52,\"1d612\":52,\"1d613\":52,\"1d614\":52,\"1d615\":52,\"1d616\":52,\"1d617\":52,\"1d618\":52,\"1d619\":52,\"1d61a\":52,\"1d61b\":52,\"1d61c\":52,\"1d61d\":52,\"1d61e\":52,\"1d61f\":52,\"1d620\":52,\"1d621\":52,\"1d622\":52,\"1d623\":52,\"1d624\":52,\"1d625\":52,\"1d626\":52,\"1d627\":52,\"1d628\":52,\"1d629\":52,\"1d62a\":52,\"1d62b\":52,\"1d62c\":52,\"1d62d\":52,\"1d62e\":52,\"1d62f\":52,\"1d630\":52,\"1d631\":52,\"1d632\":52,\"1d633\":52,\"1d634\":52,\"1d635\":52,\"1d636\":52,\"1d637\":52,\"1d638\":52,\"1d639\":52,\"1d63a\":52,\"1d63b\":52,\"1d63c\":52,\"1d63d\":52,\"1d63e\":52,\"1d63f\":52,\"1d640\":52,\"1d641\":52,\"1d642\":52,\"1d643\":52,\"1d644\":52,\"1d645\":52,\"1d646\":52,\"1d647\":52,\"1d648\":52,\"1d649\":52,\"1d64a\":52,\"1d64b\":52,\"1d64c\":52,\"1d64d\":52,\"1d64e\":52,\"1d64f\":52,\"1d650\":52,\"1d651\":52,\"1d652\":52,\"1d653\":52,\"1d654\":52,\"1d655\":52,\"1d656\":52,\"1d657\":52,\"1d658\":52,\"1d659\":52,\"1d65a\":52,\"1d65b\":52,\"1d65c\":52,\"1d65d\":52,\"1d65e\":52,\"1d65f\":52,\"1d660\":52,\"1d661\":52,\"1d662\":52,\"1d663\":52,\"1d664\":52,\"1d665\":52,\"1d666\":52,\"1d667\":52,\"1d668\":52,\"1d669\":52,\"1d66a\":52,\"1d66b\":52,\"1d66c\":52,\"1d66d\":52,\"1d66e\":52,\"1d66f\":52,\"1d670\":52,\"1d671\":52,\"1d672\":52,\"1d673\":52,\"1d674\":52,\"1d675\":52,\"1d676\":52,\"1d677\":52,\"1d678\":52,\"1d679\":52,\"1d67a\":52,\"1d67b\":52,\"1d67c\":52,\"1d67d\":52,\"1d67e\":52,\"1d67f\":52,\"1d680\":52,\"1d681\":52,\"1d682\":52,\"1d683\":52,\"1d684\":52,\"1d685\":52,\"1d686\":52,\"1d687\":52,\"1d688\":52,\"1d689\":52,\"1d68a\":52,\"1d68b\":52,\"1d68c\":52,\"1d68d\":52,\"1d68e\":52,\"1d68f\":52,\"1d690\":52,\"1d691\":52,\"1d692\":52,\"1d693\":52,\"1d694\":52,\"1d695\":52,\"1d696\":52,\"1d697\":52,\"1d698\":52,\"1d699\":52,\"1d69a\":52,\"1d69b\":52,\"1d69c\":52,\"1d69d\":52,\"1d69e\":52,\"1d69f\":52,\"1d6a0\":52,\"1d6a1\":52,\"1d6a2\":52,\"1d6a3\":52,\"1d6a4\":52,\"1d6a5\":52,\"1d6a8\":52,\"1d6a9\":52,\"1d6aa\":52,\"1d6ab\":52,\"1d6ac\":52,\"1d6ad\":52,\"1d6ae\":52,\"1d6af\":52,\"1d6b0\":52,\"1d6b1\":52,\"1d6b2\":52,\"1d6b3\":52,\"1d6b4\":52,\"1d6b5\":52,\"1d6b6\":52,\"1d6b7\":52,\"1d6b8\":52,\"1d6b9\":52,\"1d6ba\":52,\"1d6bb\":52,\"1d6bc\":52,\"1d6bd\":52,\"1d6be\":52,\"1d6bf\":52,\"1d6c0\":52,\"1d6c1\":52,\"1d6c2\":52,\"1d6c3\":52,\"1d6c4\":52,\"1d6c5\":52,\"1d6c6\":52,\"1d6c7\":52,\"1d6c8\":52,\"1d6c9\":52,\"1d6ca\":52,\"1d6cb\":52,\"1d6cc\":52,\"1d6cd\":52,\"1d6ce\":52,\"1d6cf\":52,\"1d6d0\":52,\"1d6d1\":52,\"1d6d2\":52,\"1d6d3\":52,\"1d6d4\":52,\"1d6d5\":52,\"1d6d6\":52,\"1d6d7\":52,\"1d6d8\":52,\"1d6d9\":52,\"1d6da\":52,\"1d6db\":52,\"1d6dc\":52,\"1d6dd\":52,\"1d6de\":52,\"1d6df\":52,\"1d6e0\":52,\"1d6e1\":52,\"1d6e2\":52,\"1d6e3\":52,\"1d6e4\":52,\"1d6e5\":52,\"1d6e6\":52,\"1d6e7\":52,\"1d6e8\":52,\"1d6e9\":52,\"1d6ea\":52,\"1d6eb\":52,\"1d6ec\":52,\"1d6ed\":52,\"1d6ee\":52,\"1d6ef\":52,\"1d6f0\":52,\"1d6f1\":52,\"1d6f2\":52,\"1d6f3\":52,\"1d6f4\":52,\"1d6f5\":52,\"1d6f6\":52,\"1d6f7\":52,\"1d6f8\":52,\"1d6f9\":52,\"1d6fa\":52,\"1d6fb\":52,\"1d6fc\":52,\"1d6fd\":52,\"1d6fe\":52,\"1d6ff\":52,\"1d700\":52,\"1d701\":52,\"1d702\":52,\"1d703\":52,\"1d704\":52,\"1d705\":52,\"1d706\":52,\"1d707\":52,\"1d708\":52,\"1d709\":52,\"1d70a\":52,\"1d70b\":52,\"1d70c\":52,\"1d70d\":52,\"1d70e\":52,\"1d70f\":52,\"1d710\":52,\"1d711\":52,\"1d712\":52,\"1d713\":52,\"1d714\":52,\"1d715\":52,\"1d716\":52,\"1d717\":52,\"1d718\":52,\"1d719\":52,\"1d71a\":52,\"1d71b\":52,\"1d71c\":52,\"1d71d\":52,\"1d71e\":52,\"1d71f\":52,\"1d720\":52,\"1d721\":52,\"1d722\":52,\"1d723\":52,\"1d724\":52,\"1d725\":52,\"1d726\":52,\"1d727\":52,\"1d728\":52,\"1d729\":52,\"1d72a\":52,\"1d72b\":52,\"1d72c\":52,\"1d72d\":52,\"1d72e\":52,\"1d72f\":52,\"1d730\":52,\"1d731\":52,\"1d732\":52,\"1d733\":52,\"1d734\":52,\"1d735\":52,\"1d736\":52,\"1d737\":52,\"1d738\":52,\"1d739\":52,\"1d73a\":52,\"1d73b\":52,\"1d73c\":52,\"1d73d\":52,\"1d73e\":52,\"1d73f\":52,\"1d740\":52,\"1d741\":52,\"1d742\":52,\"1d743\":52,\"1d744\":52,\"1d745\":52,\"1d746\":52,\"1d747\":52,\"1d748\":52,\"1d749\":52,\"1d74a\":52,\"1d74b\":52,\"1d74c\":52,\"1d74d\":52,\"1d74e\":52,\"1d74f\":52,\"1d750\":52,\"1d751\":52,\"1d752\":52,\"1d753\":52,\"1d754\":52,\"1d755\":52,\"1d756\":52,\"1d757\":52,\"1d758\":52,\"1d759\":52,\"1d75a\":52,\"1d75b\":52,\"1d75c\":52,\"1d75d\":52,\"1d75e\":52,\"1d75f\":52,\"1d760\":52,\"1d761\":52,\"1d762\":52,\"1d763\":52,\"1d764\":52,\"1d765\":52,\"1d766\":52,\"1d767\":52,\"1d768\":52,\"1d769\":52,\"1d76a\":52,\"1d76b\":52,\"1d76c\":52,\"1d76d\":52,\"1d76e\":52,\"1d76f\":52,\"1d770\":52,\"1d771\":52,\"1d772\":52,\"1d773\":52,\"1d774\":52,\"1d775\":52,\"1d776\":52,\"1d777\":52,\"1d778\":52,\"1d779\":52,\"1d77a\":52,\"1d77b\":52,\"1d77c\":52,\"1d77d\":52,\"1d77e\":52,\"1d77f\":52,\"1d780\":52,\"1d781\":52,\"1d782\":52,\"1d783\":52,\"1d784\":52,\"1d785\":52,\"1d786\":52,\"1d787\":52,\"1d788\":52,\"1d789\":52,\"1d78a\":52,\"1d78b\":52,\"1d78c\":52,\"1d78d\":52,\"1d78e\":52,\"1d78f\":52,\"1d790\":52,\"1d791\":52,\"1d792\":52,\"1d793\":52,\"1d794\":52,\"1d795\":52,\"1d796\":52,\"1d797\":52,\"1d798\":52,\"1d799\":52,\"1d79a\":52,\"1d79b\":52,\"1d79c\":52,\"1d79d\":52,\"1d79e\":52,\"1d79f\":52,\"1d7a0\":52,\"1d7a1\":52,\"1d7a2\":52,\"1d7a3\":52,\"1d7a4\":52,\"1d7a5\":52,\"1d7a6\":52,\"1d7a7\":52,\"1d7a8\":52,\"1d7a9\":52,\"1d7aa\":52,\"1d7ab\":52,\"1d7ac\":52,\"1d7ad\":52,\"1d7ae\":52,\"1d7af\":52,\"1d7b0\":52,\"1d7b1\":52,\"1d7b2\":52,\"1d7b3\":52,\"1d7b4\":52,\"1d7b5\":52,\"1d7b6\":52,\"1d7b7\":52,\"1d7b8\":52,\"1d7b9\":52,\"1d7ba\":52,\"1d7bb\":52,\"1d7bc\":52,\"1d7bd\":52,\"1d7be\":52,\"1d7bf\":52,\"1d7c0\":52,\"1d7c1\":52,\"1d7c2\":52,\"1d7c3\":52,\"1d7c4\":52,\"1d7c5\":52,\"1d7c6\":52,\"1d7c7\":52,\"1d7c8\":52,\"1d7c9\":52,\"1d7ca\":52,\"1d7cb\":52,\"1d7ce\":52,\"1d7cf\":52,\"1d7d0\":52,\"1d7d1\":52,\"1d7d2\":52,\"1d7d3\":52,\"1d7d4\":52,\"1d7d5\":52,\"1d7d6\":52,\"1d7d7\":52,\"1d7d8\":52,\"1d7d9\":52,\"1d7da\":52,\"1d7db\":52,\"1d7dc\":52,\"1d7dd\":52,\"1d7de\":52,\"1d7df\":52,\"1d7e0\":52,\"1d7e1\":52,\"1d7e2\":52,\"1d7e3\":52,\"1d7e4\":52,\"1d7e5\":52,\"1d7e6\":52,\"1d7e7\":52,\"1d7e8\":52,\"1d7e9\":52,\"1d7ea\":52,\"1d7eb\":52,\"1d7ec\":52,\"1d7ed\":52,\"1d7ee\":52,\"1d7ef\":52,\"1d7f0\":52,\"1d7f1\":52,\"1d7f2\":52,\"1d7f3\":52,\"1d7f4\":52,\"1d7f5\":52,\"1d7f6\":52,\"1d7f7\":52,\"1d7f8\":52,\"1d7f9\":52,\"1d7fa\":52,\"1d7fb\":52,\"1d7fc\":52,\"1d7fd\":52,\"1d7fe\":52,\"1d7ff\":52,\"1e10\":33,\"1f004\":52,\"1f0cf\":52,\"1f170\":52,\"1f171\":52,\"1f17e\":52,\"1f17f\":52,\"1f18e\":52,\"1f191\":52,\"1f192\":52,\"1f193\":52,\"1f194\":52,\"1f195\":52,\"1f196\":52,\"1f197\":52,\"1f198\":52,\"1f199\":52,\"1f19a\":52,\"1f201\":52,\"1f202\":52,\"1f21a\":52,\"1f22f\":52,\"1f232\":52,\"1f233\":52,\"1f234\":52,\"1f235\":52,\"1f236\":52,\"1f237\":52,\"1f238\":52,\"1f239\":52,\"1f23a\":52,\"1f250\":52,\"1f251\":52,\"1f300\":52,\"1f301\":52,\"1f302\":52,\"1f303\":52,\"1f304\":52,\"1f305\":52,\"1f306\":52,\"1f307\":52,\"1f308\":52,\"1f309\":52,\"1f30a\":52,\"1f30b\":52,\"1f30c\":52,\"1f30d\":52,\"1f30e\":52,\"1f30f\":52,\"1f310\":52,\"1f311\":52,\"1f312\":52,\"1f313\":52,\"1f314\":52,\"1f315\":52,\"1f316\":52,\"1f317\":52,\"1f318\":52,\"1f319\":52,\"1f31a\":52,\"1f31b\":52,\"1f31c\":52,\"1f31d\":52,\"1f31e\":52,\"1f31f\":52,\"1f320\":52,\"1f330\":52,\"1f331\":52,\"1f332\":52,\"1f333\":52,\"1f334\":52,\"1f335\":52,\"1f337\":52,\"1f338\":52,\"1f339\":52,\"1f33a\":52,\"1f33b\":52,\"1f33c\":52,\"1f33d\":52,\"1f33e\":52,\"1f33f\":52,\"1f340\":52,\"1f341\":52,\"1f342\":52,\"1f343\":52,\"1f344\":52,\"1f345\":52,\"1f346\":52,\"1f347\":52,\"1f348\":52,\"1f349\":52,\"1f34a\":52,\"1f34b\":52,\"1f34c\":52,\"1f34d\":52,\"1f34e\":52,\"1f34f\":52,\"1f350\":52,\"1f351\":52,\"1f352\":52,\"1f353\":52,\"1f354\":52,\"1f355\":52,\"1f356\":52,\"1f357\":52,\"1f358\":52,\"1f359\":52,\"1f35a\":52,\"1f35b\":52,\"1f35c\":52,\"1f35d\":52,\"1f35e\":52,\"1f35f\":52,\"1f360\":52,\"1f361\":52,\"1f362\":52,\"1f363\":52,\"1f364\":52,\"1f365\":52,\"1f366\":52,\"1f367\":52,\"1f368\":52,\"1f369\":52,\"1f36a\":52,\"1f36b\":52,\"1f36c\":52,\"1f36d\":52,\"1f36e\":52,\"1f36f\":52,\"1f370\":52,\"1f371\":52,\"1f372\":52,\"1f373\":52,\"1f374\":52,\"1f375\":52,\"1f376\":52,\"1f377\":52,\"1f378\":52,\"1f379\":52,\"1f37a\":52,\"1f37b\":52,\"1f37c\":52,\"1f380\":52,\"1f381\":52,\"1f382\":52,\"1f383\":52,\"1f384\":52,\"1f385\":52,\"1f386\":52,\"1f387\":52,\"1f388\":52,\"1f389\":52,\"1f38a\":52,\"1f38b\":52,\"1f38c\":52,\"1f38d\":52,\"1f38e\":52,\"1f38f\":52,\"1f390\":52,\"1f391\":52,\"1f392\":52,\"1f393\":52,\"1f3a0\":52,\"1f3a1\":52,\"1f3a2\":52,\"1f3a3\":52,\"1f3a4\":52,\"1f3a5\":52,\"1f3a6\":52,\"1f3a7\":52,\"1f3a8\":52,\"1f3a9\":52,\"1f3aa\":52,\"1f3ab\":52,\"1f3ac\":52,\"1f3ad\":52,\"1f3ae\":52,\"1f3af\":52,\"1f3b0\":52,\"1f3b1\":52,\"1f3b2\":52,\"1f3b3\":52,\"1f3b4\":52,\"1f3b5\":52,\"1f3b6\":52,\"1f3b7\":52,\"1f3b8\":52,\"1f3b9\":52,\"1f3ba\":52,\"1f3bb\":52,\"1f3bc\":52,\"1f3bd\":52,\"1f3be\":52,\"1f3bf\":52,\"1f3c0\":52,\"1f3c1\":52,\"1f3c2\":52,\"1f3c3\":52,\"1f3c4\":52,\"1f3c6\":52,\"1f3c7\":52,\"1f3c8\":52,\"1f3c9\":52,\"1f3ca\":52,\"1f3e0\":52,\"1f3e1\":52,\"1f3e2\":52,\"1f3e3\":52,\"1f3e4\":52,\"1f3e5\":52,\"1f3e6\":52,\"1f3e7\":52,\"1f3e8\":52,\"1f3e9\":52,\"1f3ea\":52,\"1f3eb\":52,\"1f3ec\":52,\"1f3ed\":52,\"1f3ee\":52,\"1f3ef\":52,\"1f3f0\":52,\"1f3fb\":52,\"1f3fc\":52,\"1f3fd\":52,\"1f3fe\":52,\"1f3ff\":52,\"1f400\":52,\"1f401\":52,\"1f402\":52,\"1f403\":52,\"1f404\":52,\"1f405\":52,\"1f406\":52,\"1f407\":52,\"1f408\":52,\"1f409\":52,\"1f40a\":52,\"1f40b\":52,\"1f40c\":52,\"1f40d\":52,\"1f40e\":52,\"1f40f\":52,\"1f410\":52,\"1f411\":52,\"1f412\":52,\"1f413\":52,\"1f414\":52,\"1f415\":52,\"1f416\":52,\"1f417\":52,\"1f418\":52,\"1f419\":52,\"1f41a\":52,\"1f41b\":52,\"1f41c\":52,\"1f41d\":52,\"1f41e\":52,\"1f41f\":52,\"1f420\":52,\"1f421\":52,\"1f422\":52,\"1f423\":52,\"1f424\":52,\"1f425\":52,\"1f426\":52,\"1f427\":52,\"1f428\":52,\"1f429\":52,\"1f42a\":52,\"1f42b\":52,\"1f42c\":52,\"1f42d\":52,\"1f42e\":52,\"1f42f\":52,\"1f430\":52,\"1f431\":52,\"1f432\":52,\"1f433\":52,\"1f434\":52,\"1f435\":52,\"1f436\":52,\"1f437\":52,\"1f438\":52,\"1f439\":52,\"1f43a\":52,\"1f43b\":52,\"1f43c\":52,\"1f43d\":52,\"1f43e\":52,\"1f440\":52,\"1f442\":52,\"1f443\":52,\"1f444\":52,\"1f445\":52,\"1f446\":52,\"1f447\":52,\"1f448\":52,\"1f449\":52,\"1f44a\":52,\"1f44b\":52,\"1f44c\":52,\"1f44d\":52,\"1f44e\":52,\"1f44f\":52,\"1f450\":52,\"1f451\":52,\"1f452\":52,\"1f453\":52,\"1f454\":52,\"1f455\":52,\"1f456\":52,\"1f457\":52,\"1f458\":52,\"1f459\":52,\"1f45a\":52,\"1f45b\":52,\"1f45c\":52,\"1f45d\":52,\"1f45e\":52,\"1f45f\":52,\"1f460\":52,\"1f461\":52,\"1f462\":52,\"1f463\":52,\"1f464\":52,\"1f465\":52,\"1f466\":52,\"1f467\":52,\"1f468\":52,\"1f469\":52,\"1f46a\":52,\"1f46b\":52,\"1f46c\":52,\"1f46d\":52,\"1f46e\":52,\"1f46f\":52,\"1f470\":52,\"1f471\":52,\"1f472\":52,\"1f473\":52,\"1f474\":52,\"1f475\":52,\"1f476\":52,\"1f477\":52,\"1f478\":52,\"1f479\":52,\"1f47a\":52,\"1f47b\":52,\"1f47c\":52,\"1f47d\":52,\"1f47e\":52,\"1f47f\":52,\"1f480\":52,\"1f481\":52,\"1f482\":52,\"1f483\":52,\"1f484\":52,\"1f485\":52,\"1f486\":52,\"1f487\":52,\"1f488\":52,\"1f489\":52,\"1f48a\":52,\"1f48b\":52,\"1f48c\":52,\"1f48d\":52,\"1f48e\":52,\"1f48f\":52,\"1f490\":52,\"1f491\":52,\"1f492\":52,\"1f493\":52,\"1f494\":52,\"1f495\":52,\"1f496\":52,\"1f497\":52,\"1f498\":52,\"1f499\":52,\"1f49a\":52,\"1f49b\":52,\"1f49c\":52,\"1f49d\":52,\"1f49e\":52,\"1f49f\":52,\"1f4a0\":52,\"1f4a1\":52,\"1f4a2\":52,\"1f4a3\":52,\"1f4a4\":52,\"1f4a5\":52,\"1f4a6\":52,\"1f4a7\":52,\"1f4a8\":52,\"1f4a9\":52,\"1f4aa\":52,\"1f4ab\":52,\"1f4ac\":52,\"1f4ad\":52,\"1f4ae\":52,\"1f4af\":52,\"1f4b0\":52,\"1f4b1\":52,\"1f4b2\":52,\"1f4b3\":52,\"1f4b4\":52,\"1f4b5\":52,\"1f4b6\":52,\"1f4b7\":52,\"1f4b8\":52,\"1f4b9\":52,\"1f4ba\":52,\"1f4bb\":52,\"1f4bc\":52,\"1f4bd\":52,\"1f4be\":52,\"1f4bf\":52,\"1f4c0\":52,\"1f4c1\":52,\"1f4c2\":52,\"1f4c3\":52,\"1f4c4\":52,\"1f4c5\":52,\"1f4c6\":52,\"1f4c7\":52,\"1f4c8\":52,\"1f4c9\":52,\"1f4ca\":52,\"1f4cb\":52,\"1f4cc\":52,\"1f4cd\":52,\"1f4ce\":52,\"1f4cf\":52,\"1f4d0\":52,\"1f4d1\":52,\"1f4d2\":52,\"1f4d3\":52,\"1f4d4\":52,\"1f4d5\":52,\"1f4d6\":52,\"1f4d7\":52,\"1f4d8\":52,\"1f4d9\":52,\"1f4da\":52,\"1f4db\":52,\"1f4dc\":52,\"1f4dd\":52,\"1f4de\":52,\"1f4df\":52,\"1f4e0\":52,\"1f4e1\":52,\"1f4e2\":52,\"1f4e3\":52,\"1f4e4\":52,\"1f4e5\":52,\"1f4e6\":52,\"1f4e7\":52,\"1f4e8\":52,\"1f4e9\":52,\"1f4ea\":52,\"1f4eb\":52,\"1f4ec\":52,\"1f4ed\":52,\"1f4ee\":52,\"1f4ef\":52,\"1f4f0\":52,\"1f4f1\":52,\"1f4f2\":52,\"1f4f3\":52,\"1f4f4\":52,\"1f4f5\":52,\"1f4f6\":52,\"1f4f7\":52,\"1f4f9\":52,\"1f4fa\":52,\"1f4fb\":52,\"1f4fc\":52,\"1f500\":52,\"1f501\":52,\"1f502\":52,\"1f503\":52,\"1f504\":52,\"1f505\":52,\"1f506\":52,\"1f507\":52,\"1f508\":52,\"1f509\":52,\"1f50a\":52,\"1f50b\":52,\"1f50c\":52,\"1f50d\":52,\"1f50e\":52,\"1f50f\":52,\"1f510\":52,\"1f511\":52,\"1f512\":52,\"1f513\":52,\"1f514\":52,\"1f515\":52,\"1f516\":52,\"1f517\":52,\"1f518\":52,\"1f519\":52,\"1f51a\":52,\"1f51b\":52,\"1f51c\":52,\"1f51d\":52,\"1f51e\":52,\"1f51f\":52,\"1f520\":52,\"1f521\":52,\"1f522\":52,\"1f523\":52,\"1f524\":52,\"1f525\":52,\"1f526\":52,\"1f527\":52,\"1f528\":52,\"1f529\":52,\"1f52a\":52,\"1f52b\":52,\"1f52c\":52,\"1f52d\":52,\"1f52e\":52,\"1f52f\":52,\"1f530\":52,\"1f531\":52,\"1f532\":52,\"1f533\":52,\"1f534\":52,\"1f535\":52,\"1f536\":52,\"1f537\":52,\"1f538\":52,\"1f539\":52,\"1f53a\":52,\"1f53b\":52,\"1f53c\":52,\"1f53d\":52,\"1f550\":52,\"1f551\":52,\"1f552\":52,\"1f553\":52,\"1f554\":52,\"1f555\":52,\"1f556\":52,\"1f557\":52,\"1f558\":52,\"1f559\":52,\"1f55a\":52,\"1f55b\":52,\"1f55c\":52,\"1f55d\":52,\"1f55e\":52,\"1f55f\":52,\"1f560\":52,\"1f561\":52,\"1f562\":52,\"1f563\":52,\"1f564\":52,\"1f565\":52,\"1f566\":52,\"1f567\":52,\"1f5fb\":52,\"1f5fc\":52,\"1f5fd\":52,\"1f5fe\":52,\"1f5ff\":52,\"1f600\":52,\"1f601\":52,\"1f602\":52,\"1f603\":52,\"1f604\":52,\"1f605\":52,\"1f606\":52,\"1f607\":52,\"1f608\":52,\"1f609\":52,\"1f60a\":52,\"1f60b\":52,\"1f60c\":52,\"1f60d\":52,\"1f60e\":52,\"1f60f\":52,\"1f610\":52,\"1f611\":52,\"1f612\":52,\"1f613\":52,\"1f614\":52,\"1f615\":52,\"1f616\":52,\"1f617\":52,\"1f618\":52,\"1f619\":52,\"1f61a\":52,\"1f61b\":52,\"1f61c\":52,\"1f61d\":52,\"1f61e\":52,\"1f61f\":52,\"1f620\":52,\"1f621\":52,\"1f622\":52,\"1f623\":52,\"1f624\":52,\"1f625\":52,\"1f626\":52,\"1f627\":52,\"1f628\":52,\"1f629\":52,\"1f62a\":52,\"1f62b\":52,\"1f62c\":52,\"1f62d\":52,\"1f62e\":52,\"1f62f\":52,\"1f630\":52,\"1f631\":52,\"1f632\":52,\"1f633\":52,\"1f634\":52,\"1f635\":52,\"1f636\":52,\"1f637\":52,\"1f638\":52,\"1f639\":52,\"1f63a\":52,\"1f63b\":52,\"1f63c\":52,\"1f63d\":52,\"1f63e\":52,\"1f63f\":52,\"1f640\":52,\"1f645\":52,\"1f646\":52,\"1f647\":52,\"1f648\":52,\"1f649\":52,\"1f64a\":52,\"1f64b\":52,\"1f64c\":52,\"1f64d\":52,\"1f64e\":52,\"1f64f\":52,\"1f680\":52,\"1f681\":52,\"1f682\":52,\"1f683\":52,\"1f684\":52,\"1f685\":52,\"1f686\":52,\"1f687\":52,\"1f688\":52,\"1f689\":52,\"1f68a\":52,\"1f68b\":52,\"1f68c\":52,\"1f68d\":52,\"1f68e\":52,\"1f68f\":52,\"1f690\":52,\"1f691\":52,\"1f692\":52,\"1f693\":52,\"1f694\":52,\"1f695\":52,\"1f696\":52,\"1f697\":52,\"1f698\":52,\"1f699\":52,\"1f69a\":52,\"1f69b\":52,\"1f69c\":52,\"1f69d\":52,\"1f69e\":52,\"1f69f\":52,\"1f6a0\":52,\"1f6a1\":52,\"1f6a2\":52,\"1f6a3\":52,\"1f6a4\":52,\"1f6a5\":52,\"1f6a6\":52,\"1f6a7\":52,\"1f6a8\":52,\"1f6a9\":52,\"1f6aa\":52,\"1f6ab\":52,\"1f6ac\":52,\"1f6ad\":52,\"1f6ae\":52,\"1f6af\":52,\"1f6b0\":52,\"1f6b1\":52,\"1f6b2\":52,\"1f6b3\":52,\"1f6b4\":52,\"1f6b5\":52,\"1f6b6\":52,\"1f6b7\":52,\"1f6b8\":52,\"1f6b9\":52,\"1f6ba\":52,\"1f6bb\":52,\"1f6bc\":52,\"1f6bd\":52,\"1f6be\":52,\"1f6bf\":52,\"1f6c0\":52,\"1f6c1\":52,\"1f6c2\":52,\"1f6c3\":52,\"1f6c4\":52,\"1f6c5\":52,\"1fd0983b\":44,\"1im\":[22,25],\"1st\":[26,61],\"1x100\":35,\"1x2\":[20,34,35],\"1x4\":[20,56],\"1xn\":43,\"20f\":68,\"220446049250313e\":[33,76],\"223372036854776e18\":46,\"2499999f0\":33,\"24t12\":61,\"2500001f0\":33,\"25f0\":33,\"28th\":26,\"29t00\":26,\"29th\":26,\"2im\":[22,23,25],\"2nd\":26,\"2pi\":[38,46,68],\"2x2\":[20,24,45,46,64,68],\"2x3\":[20,35,56],\"2x4\":56,\"30e525\":44,\"31st\":26,\"31t00\":61,\"33333334f0\":[57,69],\"3333333f0\":69,\"3ef4f5c4\":44,\"3im\":22,\"3x2\":56,\"3x3\":[20,35,67],\"3x4\":45,\"3x5\":20,\"4031192506220405im\":22,\"4142135623730951im\":29,\"417b50a\":2,\"459565876494606882133333333333333333333333333333333333333333333333333333333344e\":33,\"4717266720048188im\":22,\"47c198b1\":44,\"4ghz\":46,\"4im\":22,\"4th\":26,\"4x2\":[14,20],\"4x4\":20,\"5000025e11\":46,\"5172413793103449im\":22,\"55b6\":52,\"5714285714285714im\":22,\"5f0\":[33,46,57],\"5fcfb13\":44,\"5im\":22,\"5th\":26,\"5x18\":20,\"5x2\":14,\"5x5\":20,\"600x600\":45,\"60im\":22,\"64f437b\":34,\"6e80\":52,\"7071067811865475im\":22,\"75im\":22,\"7861513777574233im\":22,\"793662034335766e\":33,\"7a7a\":52,\"800x800\":45,\"84b8e266dae6de30ab9703150b3bf771ec7b6285\":44,\"8ball\":52,\"8im\":22,\"8p3\":33,\"960664459571898im\":22,\"9f71f4becb05cadacb983c54a72eed744e5c019d\":44,\"\\u00e5ke\":67,\"\\u00ectr\":59,\"\\u0111\":52,\"\\u0127\":[34,52],\"\\u0142\":52,\"\\u014b\":52,\"\\u0153\":52,\"\\u0195\":52,\"\\u019e\":52,\"\\u01b6\":52,\"\\u01c2\":52,\"\\u0250\":52,\"\\u0252\":52,\"\\u0254\":52,\"\\u0256\":52,\"\\u0259\":52,\"\\u025b\":52,\"\\u0263\":52,\"\\u0264\":52,\"\\u0265\":52,\"\\u026c\":52,\"\\u026d\":52,\"\\u026f\":52,\"\\u0270\":52,\"\\u0271\":52,\"\\u0272\":52,\"\\u0273\":52,\"\\u0277\":52,\"\\u0278\":52,\"\\u0279\":52,\"\\u027a\":52,\"\\u027b\":52,\"\\u027c\":52,\"\\u027d\":52,\"\\u027e\":52,\"\\u0282\":52,\"\\u0283\":52,\"\\u0287\":52,\"\\u0288\":52,\"\\u028a\":52,\"\\u028b\":52,\"\\u028c\":52,\"\\u028d\":52,\"\\u028e\":52,\"\\u0290\":52,\"\\u0292\":52,\"\\u0294\":52,\"\\u0295\":52,\"\\u0296\":52,\"\\u029e\":52,\"\\u02a4\":52,\"\\u02a7\":52,\"\\u02b0\":52,\"\\u02b2\":52,\"\\u02b3\":52,\"\\u02b7\":52,\"\\u02b8\":52,\"\\u02bc\":52,\"\\u02c7\":52,\"\\u02c8\":52,\"\\u02cc\":52,\"\\u02d0\":52,\"\\u02d1\":52,\"\\u02e1\":52,\"\\u02e2\":52,\"\\u02e3\":52,\"\\u03b1\":[52,53],\"\\u03b2\":52,\"\\u03b3\":[52,69],\"\\u03b4\":[52,53],\"\\u03b4t\":46,\"\\u03b5\":52,\"\\u03b6\":52,\"\\u03b7\":52,\"\\u03b8\":52,\"\\u03b9\":52,\"\\u03ba\":52,\"\\u03bb\":[37,52],\"\\u03bc\":52,\"\\u03bd\":52,\"\\u03be\":52,\"\\u03bf\":52,\"\\u03c0\":[34,52,53,69],\"\\u03c1\":52,\"\\u03c2\":52,\"\\u03c3\":52,\"\\u03c4\":52,\"\\u03c5\":52,\"\\u03c6\":[52,69],\"\\u03c7\":52,\"\\u03c8\":52,\"\\u03c9\":52,\"\\u03d0\":52,\"\\u03d1\":52,\"\\u03d5\":52,\"\\u03d6\":52,\"\\u03d9\":52,\"\\u03db\":52,\"\\u03dd\":52,\"\\u03df\":52,\"\\u03e1\":52,\"\\u03f0\":52,\"\\u03f1\":52,\"\\u03f5\":52,\"\\u1d2c\":52,\"\\u1d2e\":52,\"\\u1d30\":52,\"\\u1d31\":52,\"\\u1d33\":52,\"\\u1d34\":52,\"\\u1d35\":52,\"\\u1d36\":52,\"\\u1d37\":52,\"\\u1d38\":52,\"\\u1d39\":52,\"\\u1d3a\":52,\"\\u1d3c\":52,\"\\u1d3e\":52,\"\\u1d3f\":52,\"\\u1d40\":52,\"\\u1d41\":52,\"\\u1d42\":52,\"\\u1d43\":52,\"\\u1d45\":52,\"\\u1d47\":52,\"\\u1d48\":52,\"\\u1d49\":52,\"\\u1d4b\":52,\"\\u1d4d\":52,\"\\u1d4f\":52,\"\\u1d50\":52,\"\\u1d52\":52,\"\\u1d56\":52,\"\\u1d57\":52,\"\\u1d58\":52,\"\\u1d5b\":52,\"\\u1d5d\":52,\"\\u1d5e\":52,\"\\u1d5f\":52,\"\\u1d60\":52,\"\\u1d61\":52,\"\\u1d62\":52,\"\\u1d63\":52,\"\\u1d64\":52,\"\\u1d65\":52,\"\\u1d66\":52,\"\\u1d67\":52,\"\\u1d68\":52,\"\\u1d69\":52,\"\\u1d6a\":52,\"\\u1d9c\":52,\"\\u1da0\":52,\"\\u1da5\":52,\"\\u1db2\":52,\"\\u1dbb\":52,\"\\u1dbf\":52,\"\\u2070\":52,\"\\u2071\":52,\"\\u2074\":52,\"\\u2075\":52,\"\\u2076\":52,\"\\u2077\":52,\"\\u2078\":52,\"\\u2079\":52,\"\\u207f\":52,\"\\u2080\":52,\"\\u2081\":52,\"\\u2082\":[52,53],\"\\u2083\":52,\"\\u2084\":52,\"\\u2085\":52,\"\\u2086\":52,\"\\u2087\":52,\"\\u2088\":52,\"\\u2089\":52,\"\\u2090\":52,\"\\u2091\":52,\"\\u2092\":52,\"\\u2093\":52,\"\\u2094\":52,\"\\u2102\":52,\"\\u2107\":52,\"\\u210a\":52,\"\\u210b\":52,\"\\u210c\":52,\"\\u210d\":52,\"\\u210e\":52,\"\\u210f\":52,\"\\u2110\":52,\"\\u2111\":52,\"\\u2112\":52,\"\\u2113\":52,\"\\u2115\":52,\"\\u2119\":52,\"\\u211a\":52,\"\\u211b\":52,\"\\u211c\":52,\"\\u211d\":52,\"\\u2124\":52,\"\\u2128\":52,\"\\u212c\":52,\"\\u212d\":52,\"\\u212f\":52,\"\\u2130\":52,\"\\u2131\":52,\"\\u2133\":52,\"\\u2134\":52,\"\\u2135\":52,\"\\u2136\":52,\"\\u2137\":52,\"\\u2138\":52,\"\\u2139\":52,\"\\u213c\":52,\"\\u213d\":52,\"\\u213e\":52,\"\\u213f\":52,\"\\u2145\":52,\"\\u2146\":52,\"\\u2147\":52,\"\\u2148\":52,\"\\u2149\":52,\"\\u214e\":52,\"\\u2c7c\":52,\"\\u2c7d\":52,\"\\u4eba\\u4eba\\u751f\\u800c\\u81ea\\u7531\":53,\"\\u4f60\\u597d\":31,\"\\u5728\\u5c0a\\u4e25\\u548c\\u6743\\u529b\\u4e0a\\u4e00\\u5f8b\\u5e73\\u7b49\":53,\"\\uc548\\ub155\\ud558\\uc138\\uc694\":[31,53],\"\\ud835\\udc00\":52,\"\\ud835\\udc01\":52,\"\\ud835\\udc02\":52,\"\\ud835\\udc03\":52,\"\\ud835\\udc04\":52,\"\\ud835\\udc05\":52,\"\\ud835\\udc06\":52,\"\\ud835\\udc07\":52,\"\\ud835\\udc08\":52,\"\\ud835\\udc09\":52,\"\\ud835\\udc0a\":52,\"\\ud835\\udc0b\":52,\"\\ud835\\udc0c\":52,\"\\ud835\\udc0d\":52,\"\\ud835\\udc0e\":52,\"\\ud835\\udc0f\":52,\"\\ud835\\udc10\":52,\"\\ud835\\udc11\":52,\"\\ud835\\udc12\":52,\"\\ud835\\udc13\":52,\"\\ud835\\udc14\":52,\"\\ud835\\udc15\":52,\"\\ud835\\udc16\":52,\"\\ud835\\udc17\":52,\"\\ud835\\udc18\":52,\"\\ud835\\udc19\":52,\"\\ud835\\udc1a\":52,\"\\ud835\\udc1b\":52,\"\\ud835\\udc1c\":52,\"\\ud835\\udc1d\":52,\"\\ud835\\udc1e\":52,\"\\ud835\\udc1f\":52,\"\\ud835\\udc20\":52,\"\\ud835\\udc21\":52,\"\\ud835\\udc22\":52,\"\\ud835\\udc23\":52,\"\\ud835\\udc24\":52,\"\\ud835\\udc25\":52,\"\\ud835\\udc26\":52,\"\\ud835\\udc27\":52,\"\\ud835\\udc28\":52,\"\\ud835\\udc29\":52,\"\\ud835\\udc2a\":52,\"\\ud835\\udc2b\":52,\"\\ud835\\udc2c\":52,\"\\ud835\\udc2d\":52,\"\\ud835\\udc2e\":52,\"\\ud835\\udc2f\":52,\"\\ud835\\udc30\":52,\"\\ud835\\udc31\":52,\"\\ud835\\udc32\":52,\"\\ud835\\udc33\":52,\"\\ud835\\udc34\":52,\"\\ud835\\udc35\":52,\"\\ud835\\udc36\":52,\"\\ud835\\udc37\":52,\"\\ud835\\udc38\":52,\"\\ud835\\udc39\":52,\"\\ud835\\udc3a\":52,\"\\ud835\\udc3b\":52,\"\\ud835\\udc3c\":52,\"\\ud835\\udc3d\":52,\"\\ud835\\udc3e\":52,\"\\ud835\\udc3f\":52,\"\\ud835\\udc40\":52,\"\\ud835\\udc41\":52,\"\\ud835\\udc42\":52,\"\\ud835\\udc43\":52,\"\\ud835\\udc44\":52,\"\\ud835\\udc45\":52,\"\\ud835\\udc46\":52,\"\\ud835\\udc47\":52,\"\\ud835\\udc48\":52,\"\\ud835\\udc49\":52,\"\\ud835\\udc4a\":52,\"\\ud835\\udc4b\":52,\"\\ud835\\udc4c\":52,\"\\ud835\\udc4d\":52,\"\\ud835\\udc4e\":52,\"\\ud835\\udc4f\":52,\"\\ud835\\udc50\":52,\"\\ud835\\udc51\":52,\"\\ud835\\udc52\":52,\"\\ud835\\udc53\":52,\"\\ud835\\udc54\":52,\"\\ud835\\udc56\":52,\"\\ud835\\udc57\":52,\"\\ud835\\udc58\":52,\"\\ud835\\udc59\":52,\"\\ud835\\udc5a\":52,\"\\ud835\\udc5b\":52,\"\\ud835\\udc5c\":52,\"\\ud835\\udc5d\":52,\"\\ud835\\udc5e\":52,\"\\ud835\\udc5f\":52,\"\\ud835\\udc60\":52,\"\\ud835\\udc61\":52,\"\\ud835\\udc62\":52,\"\\ud835\\udc63\":52,\"\\ud835\\udc64\":52,\"\\ud835\\udc65\":52,\"\\ud835\\udc66\":52,\"\\ud835\\udc67\":52,\"\\ud835\\udc68\":52,\"\\ud835\\udc69\":52,\"\\ud835\\udc6a\":52,\"\\ud835\\udc6b\":52,\"\\ud835\\udc6c\":52,\"\\ud835\\udc6d\":52,\"\\ud835\\udc6e\":52,\"\\ud835\\udc6f\":52,\"\\ud835\\udc70\":52,\"\\ud835\\udc71\":52,\"\\ud835\\udc72\":52,\"\\ud835\\udc73\":52,\"\\ud835\\udc74\":52,\"\\ud835\\udc75\":52,\"\\ud835\\udc76\":52,\"\\ud835\\udc77\":52,\"\\ud835\\udc78\":52,\"\\ud835\\udc79\":52,\"\\ud835\\udc7a\":52,\"\\ud835\\udc7b\":52,\"\\ud835\\udc7c\":52,\"\\ud835\\udc7d\":52,\"\\ud835\\udc7e\":52,\"\\ud835\\udc7f\":52,\"\\ud835\\udc80\":52,\"\\ud835\\udc81\":52,\"\\ud835\\udc82\":52,\"\\ud835\\udc83\":52,\"\\ud835\\udc84\":52,\"\\ud835\\udc85\":52,\"\\ud835\\udc86\":52,\"\\ud835\\udc87\":52,\"\\ud835\\udc88\":52,\"\\ud835\\udc89\":52,\"\\ud835\\udc8a\":52,\"\\ud835\\udc8b\":52,\"\\ud835\\udc8c\":52,\"\\ud835\\udc8d\":52,\"\\ud835\\udc8e\":52,\"\\ud835\\udc8f\":52,\"\\ud835\\udc90\":52,\"\\ud835\\udc91\":52,\"\\ud835\\udc92\":52,\"\\ud835\\udc93\":52,\"\\ud835\\udc94\":52,\"\\ud835\\udc95\":52,\"\\ud835\\udc96\":52,\"\\ud835\\udc97\":52,\"\\ud835\\udc98\":52,\"\\ud835\\udc99\":52,\"\\ud835\\udc9a\":52,\"\\ud835\\udc9b\":52,\"\\ud835\\udc9c\":52,\"\\ud835\\udc9e\":52,\"\\ud835\\udc9f\":52,\"\\ud835\\udca2\":52,\"\\ud835\\udca5\":52,\"\\ud835\\udca6\":52,\"\\ud835\\udca9\":52,\"\\ud835\\udcaa\":52,\"\\ud835\\udcab\":52,\"\\ud835\\udcac\":52,\"\\ud835\\udcae\":52,\"\\ud835\\udcaf\":52,\"\\ud835\\udcb0\":52,\"\\ud835\\udcb1\":52,\"\\ud835\\udcb2\":52,\"\\ud835\\udcb3\":52,\"\\ud835\\udcb4\":52,\"\\ud835\\udcb5\":52,\"\\ud835\\udcb6\":52,\"\\ud835\\udcb7\":52,\"\\ud835\\udcb8\":52,\"\\ud835\\udcb9\":52,\"\\ud835\\udcbb\":52,\"\\ud835\\udcbd\":52,\"\\ud835\\udcbe\":52,\"\\ud835\\udcbf\":52,\"\\ud835\\udcc0\":52,\"\\ud835\\udcc1\":52,\"\\ud835\\udcc2\":52,\"\\ud835\\udcc3\":52,\"\\ud835\\udcc5\":52,\"\\ud835\\udcc6\":52,\"\\ud835\\udcc7\":52,\"\\ud835\\udcc8\":52,\"\\ud835\\udcc9\":52,\"\\ud835\\udcca\":52,\"\\ud835\\udccb\":52,\"\\ud835\\udccc\":52,\"\\ud835\\udccd\":52,\"\\ud835\\udcce\":52,\"\\ud835\\udccf\":52,\"\\ud835\\udcd0\":52,\"\\ud835\\udcd1\":52,\"\\ud835\\udcd2\":52,\"\\ud835\\udcd3\":52,\"\\ud835\\udcd4\":52,\"\\ud835\\udcd5\":52,\"\\ud835\\udcd6\":52,\"\\ud835\\udcd7\":52,\"\\ud835\\udcd8\":52,\"\\ud835\\udcd9\":52,\"\\ud835\\udcda\":52,\"\\ud835\\udcdb\":52,\"\\ud835\\udcdc\":52,\"\\ud835\\udcdd\":52,\"\\ud835\\udcde\":52,\"\\ud835\\udcdf\":52,\"\\ud835\\udce0\":52,\"\\ud835\\udce1\":52,\"\\ud835\\udce2\":52,\"\\ud835\\udce3\":52,\"\\ud835\\udce4\":52,\"\\ud835\\udce5\":52,\"\\ud835\\udce6\":52,\"\\ud835\\udce7\":52,\"\\ud835\\udce8\":52,\"\\ud835\\udce9\":52,\"\\ud835\\udcea\":52,\"\\ud835\\udceb\":52,\"\\ud835\\udcec\":52,\"\\ud835\\udced\":52,\"\\ud835\\udcee\":52,\"\\ud835\\udcef\":52,\"\\ud835\\udcf0\":52,\"\\ud835\\udcf1\":52,\"\\ud835\\udcf2\":52,\"\\ud835\\udcf3\":52,\"\\ud835\\udcf4\":52,\"\\ud835\\udcf5\":52,\"\\ud835\\udcf6\":52,\"\\ud835\\udcf7\":52,\"\\ud835\\udcf8\":52,\"\\ud835\\udcf9\":52,\"\\ud835\\udcfa\":52,\"\\ud835\\udcfb\":52,\"\\ud835\\udcfc\":52,\"\\ud835\\udcfd\":52,\"\\ud835\\udcfe\":52,\"\\ud835\\udcff\":52,\"\\ud835\\udd00\":52,\"\\ud835\\udd01\":52,\"\\ud835\\udd02\":52,\"\\ud835\\udd03\":52,\"\\ud835\\udd04\":52,\"\\ud835\\udd05\":52,\"\\ud835\\udd07\":52,\"\\ud835\\udd08\":52,\"\\ud835\\udd09\":52,\"\\ud835\\udd0a\":52,\"\\ud835\\udd0d\":52,\"\\ud835\\udd0e\":52,\"\\ud835\\udd0f\":52,\"\\ud835\\udd10\":52,\"\\ud835\\udd11\":52,\"\\ud835\\udd12\":52,\"\\ud835\\udd13\":52,\"\\ud835\\udd14\":52,\"\\ud835\\udd16\":52,\"\\ud835\\udd17\":52,\"\\ud835\\udd18\":52,\"\\ud835\\udd19\":52,\"\\ud835\\udd1a\":52,\"\\ud835\\udd1b\":52,\"\\ud835\\udd1c\":52,\"\\ud835\\udd1e\":52,\"\\ud835\\udd1f\":52,\"\\ud835\\udd20\":52,\"\\ud835\\udd21\":52,\"\\ud835\\udd22\":52,\"\\ud835\\udd23\":52,\"\\ud835\\udd24\":52,\"\\ud835\\udd25\":52,\"\\ud835\\udd26\":52,\"\\ud835\\udd27\":52,\"\\ud835\\udd28\":52,\"\\ud835\\udd29\":52,\"\\ud835\\udd2a\":52,\"\\ud835\\udd2b\":52,\"\\ud835\\udd2c\":52,\"\\ud835\\udd2d\":52,\"\\ud835\\udd2e\":52,\"\\ud835\\udd2f\":52,\"\\ud835\\udd30\":52,\"\\ud835\\udd31\":52,\"\\ud835\\udd32\":52,\"\\ud835\\udd33\":52,\"\\ud835\\udd34\":52,\"\\ud835\\udd35\":52,\"\\ud835\\udd36\":52,\"\\ud835\\udd37\":52,\"\\ud835\\udd38\":52,\"\\ud835\\udd39\":52,\"\\ud835\\udd3b\":52,\"\\ud835\\udd3c\":52,\"\\ud835\\udd3d\":52,\"\\ud835\\udd3e\":52,\"\\ud835\\udd40\":52,\"\\ud835\\udd41\":52,\"\\ud835\\udd42\":52,\"\\ud835\\udd43\":52,\"\\ud835\\udd44\":52,\"\\ud835\\udd46\":52,\"\\ud835\\udd4a\":52,\"\\ud835\\udd4b\":52,\"\\ud835\\udd4c\":52,\"\\ud835\\udd4d\":52,\"\\ud835\\udd4e\":52,\"\\ud835\\udd4f\":52,\"\\ud835\\udd50\":52,\"\\ud835\\udd52\":52,\"\\ud835\\udd53\":52,\"\\ud835\\udd54\":52,\"\\ud835\\udd55\":52,\"\\ud835\\udd56\":52,\"\\ud835\\udd57\":52,\"\\ud835\\udd58\":52,\"\\ud835\\udd59\":52,\"\\ud835\\udd5a\":52,\"\\ud835\\udd5b\":52,\"\\ud835\\udd5c\":52,\"\\ud835\\udd5d\":52,\"\\ud835\\udd5e\":52,\"\\ud835\\udd5f\":52,\"\\ud835\\udd60\":52,\"\\ud835\\udd61\":52,\"\\ud835\\udd62\":52,\"\\ud835\\udd63\":52,\"\\ud835\\udd64\":52,\"\\ud835\\udd65\":52,\"\\ud835\\udd66\":52,\"\\ud835\\udd67\":52,\"\\ud835\\udd68\":52,\"\\ud835\\udd69\":52,\"\\ud835\\udd6a\":52,\"\\ud835\\udd6b\":52,\"\\ud835\\udd6c\":52,\"\\ud835\\udd6d\":52,\"\\ud835\\udd6e\":52,\"\\ud835\\udd6f\":52,\"\\ud835\\udd70\":52,\"\\ud835\\udd71\":52,\"\\ud835\\udd72\":52,\"\\ud835\\udd73\":52,\"\\ud835\\udd74\":52,\"\\ud835\\udd75\":52,\"\\ud835\\udd76\":52,\"\\ud835\\udd77\":52,\"\\ud835\\udd78\":52,\"\\ud835\\udd79\":52,\"\\ud835\\udd7a\":52,\"\\ud835\\udd7b\":52,\"\\ud835\\udd7c\":52,\"\\ud835\\udd7d\":52,\"\\ud835\\udd7e\":52,\"\\ud835\\udd7f\":52,\"\\ud835\\udd80\":52,\"\\ud835\\udd81\":52,\"\\ud835\\udd82\":52,\"\\ud835\\udd83\":52,\"\\ud835\\udd84\":52,\"\\ud835\\udd85\":52,\"\\ud835\\udd86\":52,\"\\ud835\\udd87\":52,\"\\ud835\\udd88\":52,\"\\ud835\\udd89\":52,\"\\ud835\\udd8a\":52,\"\\ud835\\udd8b\":52,\"\\ud835\\udd8c\":52,\"\\ud835\\udd8d\":52,\"\\ud835\\udd8e\":52,\"\\ud835\\udd8f\":52,\"\\ud835\\udd90\":52,\"\\ud835\\udd91\":52,\"\\ud835\\udd92\":52,\"\\ud835\\udd93\":52,\"\\ud835\\udd94\":52,\"\\ud835\\udd95\":52,\"\\ud835\\udd96\":52,\"\\ud835\\udd97\":52,\"\\ud835\\udd98\":52,\"\\ud835\\udd99\":52,\"\\ud835\\udd9a\":52,\"\\ud835\\udd9b\":52,\"\\ud835\\udd9c\":52,\"\\ud835\\udd9d\":52,\"\\ud835\\udd9e\":52,\"\\ud835\\udd9f\":52,\"\\ud835\\udda0\":52,\"\\ud835\\udda1\":52,\"\\ud835\\udda2\":52,\"\\ud835\\udda3\":52,\"\\ud835\\udda4\":52,\"\\ud835\\udda5\":52,\"\\ud835\\udda6\":52,\"\\ud835\\udda7\":52,\"\\ud835\\udda8\":52,\"\\ud835\\udda9\":52,\"\\ud835\\uddaa\":52,\"\\ud835\\uddab\":52,\"\\ud835\\uddac\":52,\"\\ud835\\uddad\":52,\"\\ud835\\uddae\":52,\"\\ud835\\uddaf\":52,\"\\ud835\\uddb0\":52,\"\\ud835\\uddb1\":52,\"\\ud835\\uddb2\":52,\"\\ud835\\uddb3\":52,\"\\ud835\\uddb4\":52,\"\\ud835\\uddb5\":52,\"\\ud835\\uddb6\":52,\"\\ud835\\uddb7\":52,\"\\ud835\\uddb8\":52,\"\\ud835\\uddb9\":52,\"\\ud835\\uddba\":52,\"\\ud835\\uddbb\":52,\"\\ud835\\uddbc\":52,\"\\ud835\\uddbd\":52,\"\\ud835\\uddbe\":52,\"\\ud835\\uddbf\":52,\"\\ud835\\uddc0\":52,\"\\ud835\\uddc1\":52,\"\\ud835\\uddc2\":52,\"\\ud835\\uddc3\":52,\"\\ud835\\uddc4\":52,\"\\ud835\\uddc5\":52,\"\\ud835\\uddc6\":52,\"\\ud835\\uddc7\":52,\"\\ud835\\uddc8\":52,\"\\ud835\\uddc9\":52,\"\\ud835\\uddca\":52,\"\\ud835\\uddcb\":52,\"\\ud835\\uddcc\":52,\"\\ud835\\uddcd\":52,\"\\ud835\\uddce\":52,\"\\ud835\\uddcf\":52,\"\\ud835\\uddd0\":52,\"\\ud835\\uddd1\":52,\"\\ud835\\uddd2\":52,\"\\ud835\\uddd3\":52,\"\\ud835\\uddd4\":52,\"\\ud835\\uddd5\":52,\"\\ud835\\uddd6\":52,\"\\ud835\\uddd7\":52,\"\\ud835\\uddd8\":52,\"\\ud835\\uddd9\":52,\"\\ud835\\uddda\":52,\"\\ud835\\udddb\":52,\"\\ud835\\udddc\":52,\"\\ud835\\udddd\":52,\"\\ud835\\uddde\":52,\"\\ud835\\udddf\":52,\"\\ud835\\udde0\":52,\"\\ud835\\udde1\":52,\"\\ud835\\udde2\":52,\"\\ud835\\udde3\":52,\"\\ud835\\udde4\":52,\"\\ud835\\udde5\":52,\"\\ud835\\udde6\":52,\"\\ud835\\udde7\":52,\"\\ud835\\udde8\":52,\"\\ud835\\udde9\":52,\"\\ud835\\uddea\":52,\"\\ud835\\uddeb\":52,\"\\ud835\\uddec\":52,\"\\ud835\\udded\":52,\"\\ud835\\uddee\":52,\"\\ud835\\uddef\":52,\"\\ud835\\uddf0\":52,\"\\ud835\\uddf1\":52,\"\\ud835\\uddf2\":52,\"\\ud835\\uddf3\":52,\"\\ud835\\uddf4\":52,\"\\ud835\\uddf5\":52,\"\\ud835\\uddf6\":52,\"\\ud835\\uddf7\":52,\"\\ud835\\uddf8\":52,\"\\ud835\\uddf9\":52,\"\\ud835\\uddfa\":52,\"\\ud835\\uddfb\":52,\"\\ud835\\uddfc\":52,\"\\ud835\\uddfd\":52,\"\\ud835\\uddfe\":52,\"\\ud835\\uddff\":52,\"\\ud835\\ude00\":52,\"\\ud835\\ude01\":52,\"\\ud835\\ude02\":52,\"\\ud835\\ude03\":52,\"\\ud835\\ude04\":52,\"\\ud835\\ude05\":52,\"\\ud835\\ude06\":52,\"\\ud835\\ude07\":52,\"\\ud835\\ude08\":52,\"\\ud835\\ude09\":52,\"\\ud835\\ude0a\":52,\"\\ud835\\ude0b\":52,\"\\ud835\\ude0c\":52,\"\\ud835\\ude0d\":52,\"\\ud835\\ude0e\":52,\"\\ud835\\ude0f\":52,\"\\ud835\\ude10\":52,\"\\ud835\\ude11\":52,\"\\ud835\\ude12\":52,\"\\ud835\\ude13\":52,\"\\ud835\\ude14\":52,\"\\ud835\\ude15\":52,\"\\ud835\\ude16\":52,\"\\ud835\\ude17\":52,\"\\ud835\\ude18\":52,\"\\ud835\\ude19\":52,\"\\ud835\\ude1a\":52,\"\\ud835\\ude1b\":52,\"\\ud835\\ude1c\":52,\"\\ud835\\ude1d\":52,\"\\ud835\\ude1e\":52,\"\\ud835\\ude1f\":52,\"\\ud835\\ude20\":52,\"\\ud835\\ude21\":52,\"\\ud835\\ude22\":52,\"\\ud835\\ude23\":52,\"\\ud835\\ude24\":52,\"\\ud835\\ude25\":52,\"\\ud835\\ude26\":52,\"\\ud835\\ude27\":52,\"\\ud835\\ude28\":52,\"\\ud835\\ude29\":52,\"\\ud835\\ude2a\":52,\"\\ud835\\ude2b\":52,\"\\ud835\\ude2c\":52,\"\\ud835\\ude2d\":52,\"\\ud835\\ude2e\":52,\"\\ud835\\ude2f\":52,\"\\ud835\\ude30\":52,\"\\ud835\\ude31\":52,\"\\ud835\\ude32\":52,\"\\ud835\\ude33\":52,\"\\ud835\\ude34\":52,\"\\ud835\\ude35\":52,\"\\ud835\\ude36\":52,\"\\ud835\\ude37\":52,\"\\ud835\\ude38\":52,\"\\ud835\\ude39\":52,\"\\ud835\\ude3a\":52,\"\\ud835\\ude3b\":52,\"\\ud835\\ude3c\":52,\"\\ud835\\ude3d\":52,\"\\ud835\\ude3e\":52,\"\\ud835\\ude3f\":52,\"\\ud835\\ude40\":52,\"\\ud835\\ude41\":52,\"\\ud835\\ude42\":52,\"\\ud835\\ude43\":52,\"\\ud835\\ude44\":52,\"\\ud835\\ude45\":52,\"\\ud835\\ude46\":52,\"\\ud835\\ude47\":52,\"\\ud835\\ude48\":52,\"\\ud835\\ude49\":52,\"\\ud835\\ude4a\":52,\"\\ud835\\ude4b\":52,\"\\ud835\\ude4c\":52,\"\\ud835\\ude4d\":52,\"\\ud835\\ude4e\":52,\"\\ud835\\ude4f\":52,\"\\ud835\\ude50\":52,\"\\ud835\\ude51\":52,\"\\ud835\\ude52\":52,\"\\ud835\\ude53\":52,\"\\ud835\\ude54\":52,\"\\ud835\\ude55\":52,\"\\ud835\\ude56\":52,\"\\ud835\\ude57\":52,\"\\ud835\\ude58\":52,\"\\ud835\\ude59\":52,\"\\ud835\\ude5a\":52,\"\\ud835\\ude5b\":52,\"\\ud835\\ude5c\":52,\"\\ud835\\ude5d\":52,\"\\ud835\\ude5e\":52,\"\\ud835\\ude5f\":52,\"\\ud835\\ude60\":52,\"\\ud835\\ude61\":52,\"\\ud835\\ude62\":52,\"\\ud835\\ude63\":52,\"\\ud835\\ude64\":52,\"\\ud835\\ude65\":52,\"\\ud835\\ude66\":52,\"\\ud835\\ude67\":52,\"\\ud835\\ude68\":52,\"\\ud835\\ude69\":52,\"\\ud835\\ude6a\":52,\"\\ud835\\ude6b\":52,\"\\ud835\\ude6c\":52,\"\\ud835\\ude6d\":52,\"\\ud835\\ude6e\":52,\"\\ud835\\ude6f\":52,\"\\ud835\\ude70\":52,\"\\ud835\\ude71\":52,\"\\ud835\\ude72\":52,\"\\ud835\\ude73\":52,\"\\ud835\\ude74\":52,\"\\ud835\\ude75\":52,\"\\ud835\\ude76\":52,\"\\ud835\\ude77\":52,\"\\ud835\\ude78\":52,\"\\ud835\\ude79\":52,\"\\ud835\\ude7a\":52,\"\\ud835\\ude7b\":52,\"\\ud835\\ude7c\":52,\"\\ud835\\ude7d\":52,\"\\ud835\\ude7e\":52,\"\\ud835\\ude7f\":52,\"\\ud835\\ude80\":52,\"\\ud835\\ude81\":52,\"\\ud835\\ude82\":52,\"\\ud835\\ude83\":52,\"\\ud835\\ude84\":52,\"\\ud835\\ude85\":52,\"\\ud835\\ude86\":52,\"\\ud835\\ude87\":52,\"\\ud835\\ude88\":52,\"\\ud835\\ude89\":52,\"\\ud835\\ude8a\":52,\"\\ud835\\ude8b\":52,\"\\ud835\\ude8c\":52,\"\\ud835\\ude8d\":52,\"\\ud835\\ude8e\":52,\"\\ud835\\ude8f\":52,\"\\ud835\\ude90\":52,\"\\ud835\\ude91\":52,\"\\ud835\\ude92\":52,\"\\ud835\\ude93\":52,\"\\ud835\\ude94\":52,\"\\ud835\\ude95\":52,\"\\ud835\\ude96\":52,\"\\ud835\\ude97\":52,\"\\ud835\\ude98\":52,\"\\ud835\\ude99\":52,\"\\ud835\\ude9a\":52,\"\\ud835\\ude9b\":52,\"\\ud835\\ude9c\":52,\"\\ud835\\ude9d\":52,\"\\ud835\\ude9e\":52,\"\\ud835\\ude9f\":52,\"\\ud835\\udea0\":52,\"\\ud835\\udea1\":52,\"\\ud835\\udea2\":52,\"\\ud835\\udea3\":52,\"\\ud835\\udea4\":52,\"\\ud835\\udea5\":52,\"\\ud835\\udea8\":52,\"\\ud835\\udea9\":52,\"\\ud835\\udeaa\":52,\"\\ud835\\udeab\":52,\"\\ud835\\udeac\":52,\"\\ud835\\udead\":52,\"\\ud835\\udeae\":52,\"\\ud835\\udeaf\":52,\"\\ud835\\udeb0\":52,\"\\ud835\\udeb1\":52,\"\\ud835\\udeb2\":52,\"\\ud835\\udeb3\":52,\"\\ud835\\udeb4\":52,\"\\ud835\\udeb5\":52,\"\\ud835\\udeb6\":52,\"\\ud835\\udeb7\":52,\"\\ud835\\udeb8\":52,\"\\ud835\\udeb9\":52,\"\\ud835\\udeba\":52,\"\\ud835\\udebb\":52,\"\\ud835\\udebc\":52,\"\\ud835\\udebd\":52,\"\\ud835\\udebe\":52,\"\\ud835\\udebf\":52,\"\\ud835\\udec0\":52,\"\\ud835\\udec2\":52,\"\\ud835\\udec3\":52,\"\\ud835\\udec4\":52,\"\\ud835\\udec5\":52,\"\\ud835\\udec6\":52,\"\\ud835\\udec7\":52,\"\\ud835\\udec8\":52,\"\\ud835\\udec9\":52,\"\\ud835\\udeca\":52,\"\\ud835\\udecb\":52,\"\\ud835\\udecc\":52,\"\\ud835\\udecd\":52,\"\\ud835\\udece\":52,\"\\ud835\\udecf\":52,\"\\ud835\\uded0\":52,\"\\ud835\\uded1\":52,\"\\ud835\\uded2\":52,\"\\ud835\\uded3\":52,\"\\ud835\\uded4\":52,\"\\ud835\\uded5\":52,\"\\ud835\\uded6\":52,\"\\ud835\\uded7\":52,\"\\ud835\\uded8\":52,\"\\ud835\\uded9\":52,\"\\ud835\\udeda\":52,\"\\ud835\\udedc\":52,\"\\ud835\\udedd\":52,\"\\ud835\\udede\":52,\"\\ud835\\udedf\":52,\"\\ud835\\udee0\":52,\"\\ud835\\udee1\":52,\"\\ud835\\udee2\":52,\"\\ud835\\udee3\":52,\"\\ud835\\udee4\":52,\"\\ud835\\udee5\":52,\"\\ud835\\udee6\":52,\"\\ud835\\udee7\":52,\"\\ud835\\udee8\":52,\"\\ud835\\udee9\":52,\"\\ud835\\udeea\":52,\"\\ud835\\udeeb\":52,\"\\ud835\\udeec\":52,\"\\ud835\\udeed\":52,\"\\ud835\\udeee\":52,\"\\ud835\\udeef\":52,\"\\ud835\\udef0\":52,\"\\ud835\\udef1\":52,\"\\ud835\\udef2\":52,\"\\ud835\\udef3\":52,\"\\ud835\\udef4\":52,\"\\ud835\\udef5\":52,\"\\ud835\\udef6\":52,\"\\ud835\\udef7\":52,\"\\ud835\\udef8\":52,\"\\ud835\\udef9\":52,\"\\ud835\\udefa\":52,\"\\ud835\\udefc\":52,\"\\ud835\\udefd\":52,\"\\ud835\\udefe\":52,\"\\ud835\\udeff\":52,\"\\ud835\\udf00\":52,\"\\ud835\\udf01\":52,\"\\ud835\\udf02\":52,\"\\ud835\\udf03\":52,\"\\ud835\\udf04\":52,\"\\ud835\\udf05\":52,\"\\ud835\\udf06\":52,\"\\ud835\\udf07\":52,\"\\ud835\\udf08\":52,\"\\ud835\\udf09\":52,\"\\ud835\\udf0a\":52,\"\\ud835\\udf0b\":52,\"\\ud835\\udf0c\":52,\"\\ud835\\udf0d\":52,\"\\ud835\\udf0e\":52,\"\\ud835\\udf0f\":52,\"\\ud835\\udf10\":52,\"\\ud835\\udf11\":52,\"\\ud835\\udf12\":52,\"\\ud835\\udf13\":52,\"\\ud835\\udf14\":52,\"\\ud835\\udf16\":52,\"\\ud835\\udf17\":52,\"\\ud835\\udf18\":52,\"\\ud835\\udf19\":52,\"\\ud835\\udf1a\":52,\"\\ud835\\udf1b\":52,\"\\ud835\\udf1c\":52,\"\\ud835\\udf1d\":52,\"\\ud835\\udf1e\":52,\"\\ud835\\udf1f\":52,\"\\ud835\\udf20\":52,\"\\ud835\\udf21\":52,\"\\ud835\\udf22\":52,\"\\ud835\\udf23\":52,\"\\ud835\\udf24\":52,\"\\ud835\\udf25\":52,\"\\ud835\\udf26\":52,\"\\ud835\\udf27\":52,\"\\ud835\\udf28\":52,\"\\ud835\\udf29\":52,\"\\ud835\\udf2a\":52,\"\\ud835\\udf2b\":52,\"\\ud835\\udf2c\":52,\"\\ud835\\udf2d\":52,\"\\ud835\\udf2e\":52,\"\\ud835\\udf2f\":52,\"\\ud835\\udf30\":52,\"\\ud835\\udf31\":52,\"\\ud835\\udf32\":52,\"\\ud835\\udf33\":52,\"\\ud835\\udf34\":52,\"\\ud835\\udf36\":52,\"\\ud835\\udf37\":52,\"\\ud835\\udf38\":52,\"\\ud835\\udf39\":52,\"\\ud835\\udf3a\":52,\"\\ud835\\udf3b\":52,\"\\ud835\\udf3c\":52,\"\\ud835\\udf3d\":52,\"\\ud835\\udf3e\":52,\"\\ud835\\udf3f\":52,\"\\ud835\\udf40\":52,\"\\ud835\\udf41\":52,\"\\ud835\\udf42\":52,\"\\ud835\\udf43\":52,\"\\ud835\\udf44\":52,\"\\ud835\\udf45\":52,\"\\ud835\\udf46\":52,\"\\ud835\\udf47\":52,\"\\ud835\\udf48\":52,\"\\ud835\\udf49\":52,\"\\ud835\\udf4a\":52,\"\\ud835\\udf4b\":52,\"\\ud835\\udf4c\":52,\"\\ud835\\udf4d\":52,\"\\ud835\\udf4e\":52,\"\\ud835\\udf50\":52,\"\\ud835\\udf51\":52,\"\\ud835\\udf52\":52,\"\\ud835\\udf53\":52,\"\\ud835\\udf54\":52,\"\\ud835\\udf55\":52,\"\\ud835\\udf56\":52,\"\\ud835\\udf57\":52,\"\\ud835\\udf58\":52,\"\\ud835\\udf59\":52,\"\\ud835\\udf5a\":52,\"\\ud835\\udf5b\":52,\"\\ud835\\udf5c\":52,\"\\ud835\\udf5d\":52,\"\\ud835\\udf5e\":52,\"\\ud835\\udf5f\":52,\"\\ud835\\udf60\":52,\"\\ud835\\udf61\":52,\"\\ud835\\udf62\":52,\"\\ud835\\udf63\":52,\"\\ud835\\udf64\":52,\"\\ud835\\udf65\":52,\"\\ud835\\udf66\":52,\"\\ud835\\udf67\":52,\"\\ud835\\udf68\":52,\"\\ud835\\udf69\":52,\"\\ud835\\udf6a\":52,\"\\ud835\\udf6b\":52,\"\\ud835\\udf6c\":52,\"\\ud835\\udf6d\":52,\"\\ud835\\udf6e\":52,\"\\ud835\\udf70\":52,\"\\ud835\\udf71\":52,\"\\ud835\\udf72\":52,\"\\ud835\\udf73\":52,\"\\ud835\\udf74\":52,\"\\ud835\\udf75\":52,\"\\ud835\\udf76\":52,\"\\ud835\\udf77\":52,\"\\ud835\\udf78\":52,\"\\ud835\\udf79\":52,\"\\ud835\\udf7a\":52,\"\\ud835\\udf7b\":52,\"\\ud835\\udf7c\":52,\"\\ud835\\udf7d\":52,\"\\ud835\\udf7e\":52,\"\\ud835\\udf7f\":52,\"\\ud835\\udf80\":52,\"\\ud835\\udf81\":52,\"\\ud835\\udf82\":52,\"\\ud835\\udf83\":52,\"\\ud835\\udf84\":52,\"\\ud835\\udf85\":52,\"\\ud835\\udf86\":52,\"\\ud835\\udf87\":52,\"\\ud835\\udf88\":52,\"\\ud835\\udf8a\":52,\"\\ud835\\udf8b\":52,\"\\ud835\\udf8c\":52,\"\\ud835\\udf8d\":52,\"\\ud835\\udf8e\":52,\"\\ud835\\udf8f\":52,\"\\ud835\\udf90\":52,\"\\ud835\\udf91\":52,\"\\ud835\\udf92\":52,\"\\ud835\\udf93\":52,\"\\ud835\\udf94\":52,\"\\ud835\\udf95\":52,\"\\ud835\\udf96\":52,\"\\ud835\\udf97\":52,\"\\ud835\\udf98\":52,\"\\ud835\\udf99\":52,\"\\ud835\\udf9a\":52,\"\\ud835\\udf9b\":52,\"\\ud835\\udf9c\":52,\"\\ud835\\udf9d\":52,\"\\ud835\\udf9e\":52,\"\\ud835\\udf9f\":52,\"\\ud835\\udfa0\":52,\"\\ud835\\udfa1\":52,\"\\ud835\\udfa2\":52,\"\\ud835\\udfa3\":52,\"\\ud835\\udfa4\":52,\"\\ud835\\udfa5\":52,\"\\ud835\\udfa6\":52,\"\\ud835\\udfa7\":52,\"\\ud835\\udfa8\":52,\"\\ud835\\udfaa\":52,\"\\ud835\\udfab\":52,\"\\ud835\\udfac\":52,\"\\ud835\\udfad\":52,\"\\ud835\\udfae\":52,\"\\ud835\\udfaf\":52,\"\\ud835\\udfb0\":52,\"\\ud835\\udfb1\":52,\"\\ud835\\udfb2\":52,\"\\ud835\\udfb3\":52,\"\\ud835\\udfb4\":52,\"\\ud835\\udfb5\":52,\"\\ud835\\udfb6\":52,\"\\ud835\\udfb7\":52,\"\\ud835\\udfb8\":52,\"\\ud835\\udfb9\":52,\"\\ud835\\udfba\":52,\"\\ud835\\udfbb\":52,\"\\ud835\\udfbc\":52,\"\\ud835\\udfbd\":52,\"\\ud835\\udfbe\":52,\"\\ud835\\udfbf\":52,\"\\ud835\\udfc0\":52,\"\\ud835\\udfc1\":52,\"\\ud835\\udfc2\":52,\"\\ud835\\udfc4\":52,\"\\ud835\\udfc5\":52,\"\\ud835\\udfc6\":52,\"\\ud835\\udfc7\":52,\"\\ud835\\udfc8\":52,\"\\ud835\\udfc9\":52,\"\\ud835\\udfca\":52,\"\\ud835\\udfcb\":52,\"\\ud835\\udfce\":52,\"\\ud835\\udfcf\":52,\"\\ud835\\udfd0\":52,\"\\ud835\\udfd1\":52,\"\\ud835\\udfd2\":52,\"\\ud835\\udfd3\":52,\"\\ud835\\udfd4\":52,\"\\ud835\\udfd5\":52,\"\\ud835\\udfd6\":52,\"\\ud835\\udfd7\":52,\"\\ud835\\udfd8\":52,\"\\ud835\\udfd9\":52,\"\\ud835\\udfda\":52,\"\\ud835\\udfdb\":52,\"\\ud835\\udfdc\":52,\"\\ud835\\udfdd\":52,\"\\ud835\\udfde\":52,\"\\ud835\\udfdf\":52,\"\\ud835\\udfe0\":52,\"\\ud835\\udfe1\":52,\"\\ud835\\udfe2\":52,\"\\ud835\\udfe3\":52,\"\\ud835\\udfe4\":52,\"\\ud835\\udfe5\":52,\"\\ud835\\udfe6\":52,\"\\ud835\\udfe7\":52,\"\\ud835\\udfe8\":52,\"\\ud835\\udfe9\":52,\"\\ud835\\udfea\":52,\"\\ud835\\udfeb\":52,\"\\ud835\\udfec\":52,\"\\ud835\\udfed\":52,\"\\ud835\\udfee\":52,\"\\ud835\\udfef\":52,\"\\ud835\\udff0\":52,\"\\ud835\\udff1\":52,\"\\ud835\\udff2\":52,\"\\ud835\\udff3\":52,\"\\ud835\\udff4\":52,\"\\ud835\\udff5\":52,\"\\ud835\\udff6\":52,\"\\ud835\\udff7\":52,\"\\ud835\\udff8\":52,\"\\ud835\\udff9\":52,\"\\ud835\\udffa\":52,\"\\ud835\\udffb\":52,\"\\ud835\\udffc\":52,\"\\ud835\\udffd\":52,\"\\ud835\\udffe\":52,\"\\ud835\\udfff\":52,\"_130862\":12,\"__doc__\":27,\"__file__\":[41,62],\"__init__\":[6,13,41,57],\"__line__\":62,\"__precompile__\":[41,57],\"__text\":29,\"_atexit\":[5,6],\"_beta\":52,\"_chi\":52,\"_fileno\":13,\"_fopen\":21,\"_function\":56,\"_gamma\":52,\"_init\":55,\"_inlin\":9,\"_j_str267\":4,\"_julia_init\":6,\"_not_\":67,\"_phi\":52,\"_rho\":52,\"_schwa\":52,\"_start\":5,\"_var0\":46,\"_var1\":46,\"_var2\":46,\"_var3\":46,\"_var4\":46,\"abstract\":[5,12,16,20,21,23,25,26,27,33],\"b\\u00e9zout\":68,\"bj\\u00f6rck\":67,\"boolean\":[1,14,16,20,24,25,28,38,40,43,51,56,57,59,64,67,68,69,73,75],\"break\":[1,2,4,14,24,28,29,43,44,45],\"byte\":[10,12,21,31,33,39,42,45,46,47],\"case\":[1,3,10,11,13,14,16,17,20,21,22],\"catch\":[1,4],\"char\":[5,6,10,13,21,28,34,40,42,49,51,58,64,75],\"class\":[8,20,30,31,38,43,48,49,51,64],\"const\":[1,10,13,20,21,26,27,28,34,41,46,53,54,56,57,66],\"default\":[4,8,12,15,16,17,20,21,23,24,26,27,29],\"enum\":[21,27,43,57,65,66],\"export\":[1,3,8,12,21,26,28,29,41,44,45,57,58,61,66,67,71,72,76],\"final\":[1,4,5,6,12,14,16,21,23],\"float\":[4,18,21,22,23,25,31,32],\"fr\\u00e9chet\":67,\"function\":1,\"goto\":46,\"int\":[6,10,11,12,13,14,16,20,21,23,24,25,26,28,29,30,33,35,38,39,40,41,43,45,46,47,49,50,51,52,56,57,58,59,61,62,64,67,68,69,70,72],\"long\":[3,21,24,40,44,45,47,52,54,58,64,65,67,68,69,72],\"new\":[1,2,5,6,9,10,15,21,23,24],\"null\":[1,4,5,6,13,21,23,28],\"public\":[41,44,52],\"return\":[1,4,5,6,9,12,13,14,16,20],\"short\":[4,5,21,23],\"static\":[1,8,13,25,36,43],\"super\":[6,21,25,51,57,67],\"switch\":[24,29,31,44,45,70],\"throw\":[21,23],\"transient\":40,\"true\":[1,12,14,15,16,20,21,22,23,24,25,26,27,29,31,33,35,38,39,40,42,43,45,46,47,48,49,51,52,54,56,57,58,59,61,62,64,67,68,69,70,72,74,75],\"try\":[1,2,16,21,22,23],\"typeof\":[12,13,21,22,23,24,25,28,29,33,38,39,46,49,50,51,57,59,64,68],\"var\":[1,3,16,21,24,39,57,68,70],\"void\":[4,10,13,16,21,28,29,41,49,50,58,60,65,71],\"while\":[1,2,4,10,12,14,16,23,24,25,26,27,28,29,31,33,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,57,59,66,67,68,70,72,74],a_1:[21,40],a_2:[21,40],a_3:21,a_ldiv_b:68,a_ldiv_bc:68,a_ldiv_bt:68,a_mul_b:68,a_mul_bc:68,a_mul_bt:68,a_rdiv_bc:68,a_rdiv_bt:68,aaaa1aaaa2aaaa3:49,abbr:61,abbrevi:[26,39,50,61],abc:52,abcd:[42,52],abi_:5,abil:[3,14,24,36,39,40,41,51,64],abl:[4,16,23,24,29,30,35,42,44,45,46,51,54,57],abnrm:67,abort:4,about:[4,5,7,8,10,14],abov:[6,10,12,14,16,20,21,24,25,26,27,28,29,30,33,34,35,36,39,40,41,42,44,45,46,47,48,49,50,51,52,54,57,61,64,67,76],abracadabra:49,abruptli:21,abs2:[20,22,38,46,59,68],absenc:[25,26,40,51],absent:10,absolut:[22,26,33],abspath:62,abstol:[67,68],abstract_cal:47,abstract_call_gf:47,abstract_ev:47,abstractarrai:[14,20,21,35,40,45,46,50,56,59,67,74],abstractfloat:[12,16,25,40,46,51,57,69],abstractli:[40,75],abstractmatrix:[20,56,67],abstractrepl:34,abstractrng:69,abstractsparsematrix:20,abstractstr:[21,27,29,33,34,45,49,50,51,57,59,61,62,64,66,70,71,75],abstracttriangular:40,abstractvector:[20,46],abus:[23,39],ac_ldiv_b:68,ac_ldiv_bc:68,ac_mul_b:68,ac_mul_bc:68,ac_rdiv_b:68,ac_rdiv_bc:68,accent:[49,52,75],accept:[12,16,20,21,22,26,29,30,34,42,43,44,46,49,50,51,52,54,58,59,64,68,69,70,71,74,75],access:[4,8,10,14,16,20],accident:[29,39,41,44],accommod:[16,59,64],accomplish:[21,23,24,26,30,35,39,41,44,48,51,59],accord:[20,33,38,56,57,59,61,67,68,69,74,75],accordingli:[23,30,40,44,46,51,58],account:[33,43,44,49,67,76],accumul:[45,46],accur:[2,21,23,38,44,48,68],accuraci:[33,56,67,68],accurr:52,accustom:43,acd:49,achiev:[16,23,29,36,39,41,42,43,44,45,46,68],acidfre:52,aco:[20,38,68],acosd:[20,38,68],acosh:[20,38,68],acot:[20,38,68],acotd:[20,38,68],acoth:[20,38,68],acoust:67,acquir:70,acronym:[5,44],across:[21,36,38,43,45,51,64,67,70,76],acsc:[20,38,68],acscd:[20,38,68],acsch:[20,38,68],act:[4,20,21,30,39,40,43,51,70],action:[5,16,24,25,34,39,47],activ:[2,42,48,57],actual:[1,20,21,23,24,25,26,29,30,33,39,42,44,46,47,48,49,51,52,54,57,58,64,68,70],acut:52,ada:[25,51],adapt:[46,68],add:[1,4,5,12,17,23,26,27,29,38,39,40,41,44,45,46,47,50,51,55,59,64,68,70,71],add_builtin_func:6,add_float:46,addfun:11,addict:50,addit:[3,4,9,14,17,20,21,22,23,24,25,26,29,31,34,35,36,38,39,40,41,42,44,45,46,49,51,53,55,56,57,67,68,69,70,75],addition:[14,16,21,24,28,29,33,35,38,46,59,70,75],additon:76,addon:50,addopt:75,addproc:[45,70],addr:[64,65],address:[4,10,21,23,31,41],adjac:[20,33,56,74,75],adjust:17,adopt:[14,46,53],adot:52,advanc:24,advantag:[28,29,33,36,39,41,45,46,51,52,55,70],advection_chunk:45,advection_parallel:45,advection_seri:45,advection_shar:45,advection_shared_chunk:45,advic:46,advis:[52,68],aerial:52,aerial_tramwai:52,affect:[6,21,30,41,46,50,54,69,72],aforement:40,africa:52,after:[1,4,6,8,17,21,23,24,25,28,29,30,34,38,39,40,41,42,43,44,46,47,49,51,53,57,58,62,64,65,67,68,71,75],afterward:[23,24,44,64,70,71],again:[6,21,24,25,34,39,42,44,45,46,64,67,70,71,72],against:[8,16,28,29,44,50],agent:44,aggress:29,agre:[23,49],agroup:49,ah12:67,ahead:[26,45],ahr13:67,aid:[26,28,43],aim:36,airi:[20,38,68],airplan:52,airyai:[20,38,68],airyaiprim:[20,38,68],airybi:[20,38,68],airybiprim:[20,38,68],airyprim:[20,38,68],airyx:[38,68],aka:[16,21],alarm:52,alarm_clock:52,albeit:[5,45],alef:52,aleph:52,alert:50,alg:74,algebra:[18,29,32],algorithm:[3,10,14,16,25,29,35,40,44,45,46,51,56,59,67,68,69],alia:6,alias:[20,21,33,49],alien:52,align:[10,12,21],alik:21,all:[1,3,4,5,8,10,12,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,56],all_to_al:[45,70],allequ:52,allevi:49,alloc:[1,5,6],allow:[3,4,13,14,16,20,21,22,23,24,25,27,28,29,30,33,34,37,38,39,40,41,42,43,44,45,46,47,49,51],almost:[20,28,29,37,39,40,43,46,52,54],alon:[21,29,39,50,51,54],along:[5,14,20,23,26,35,44,45],alpha:[49,52,53,67],alphabet:75,alphanumer:75,alreadi:[21,23,28,29,30,34,35,39,44,50,51,55,57,59,64,70,71,74,75],also:[1,3,5,8,10,12,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,38,39,40,41,42,43,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,64,67,68,69,70,71,73,74,75],alt:34,alter:[21,23,30,39,51],altern:[10,20,24,25,28,29,33,39,41,46,47,48,50,52,55,57,58,59,61,64,68,75],although:[5,10,16,21,23,24,25,30,36,39,40,43,44,45,46,47,51,54,64,68],altogeth:[40,45,50],alveolar:52,alwai:[1,2,9,14,21,23,24,25,26,28,29,30,31,33,35,36,40,41,43,45,46,48,49,50,51,54,57,59,62,64,68,69],amalg:52,amalgam:52,ambigu:[33,39],ambul:52,amd:67,amen:[46,57],america:52,american:[52,68],among:[16,24,30,41,44,45,46,47,50,70],amount:[36,39,41,45,46,47,49,56,57,64],ampersand:52,amplifi:29,analog:[26,29,46],analogu:56,analysi:5,analyz:0,anatomi:24,anchor:52,and_int:46,angdnr:52,angel:52,anger:52,angl:[20,22,38,52,67,68],angleubar:52,angri:[49,52,75],angstrom:52,anguish:52,ani:[1,2,4,5,6,8,9,10,12,13,14],annot:[1,12,21,30,36,39,40,43,44],annuiti:52,anonymousmmap:64,anorm:67,anoth:[4,16,17,20,21,23,24,25,26,28,29,34,39,41,42,43,44,45,46,48,49,50,51,55,57,59,64,70,76],answer:[20,26,45,58,67,68,70],ant:52,antenna:52,anticlockwis:52,anymor:[44,54],anyon:[25,39,44],anyth:[20,24,29,34,35,36,38,39,41,44,49,57,59,69],anywai:[20,26,29,50],anywher:[21,24,30,40,49,51],apach:44,apart:29,apex:51,api:[10,21,26,28,29,36,42,44,61,64,67,74],apl:52,aplboxquest:52,aplboxupcaret:52,aplnotbackslash:52,aplnotslash:52,apolog:48,apostroph:52,appar:[40,41,49],appeal:[14,29],appear:[1,3,14,21,23,28,29,34,40,43,44,46,47,52,54,59,67,68,74],append:[9,14,21,40,43,45,47],appl:[31,34,43,49,52,57,75],appli:[14,20,22,23,24,25,27,30,33,36,38,39,40,43,44,45,46,51,56,57,59,61,62,64,67,68,70,74],applic:[3,12,14,20,21,24,25,27,28,30,33,36,40,46,47,49,51,57,64,66,67,68,69,70],apply_typ:12,appreci:8,approach:[3,14,26,27,29,31,34,36,39,44,45,46,52,67],appropri:[20,21,24,25,29,33,35,36,39,40,42,44,45,48,49,50,51,57,59,64,69,70,75],approv:44,approx:[52,76],approxeq:52,approxeqq:52,approxim:[21,25,47,52,57,68,76],approxnotequ:52,appveyor:[44,71],apr:61,april:[26,61],apropo:57,aptli:39,aquariu:52,arab:49,arbitrari:[1,20,21,25,27,30],arbitrarili:[27,38,40,43,44,51,69],arc:52,arceq:52,archaic:52,architectur:[33,49],archiv:5,area:11,aren:[23,41,44,48,49,67],arg1:[21,31,40,43],arg2:[21,31,40,43],arg3:43,arg:[1,2,4,5,6,9,10,13,16,21,22,23,28,29,30,31,34,39,40,46,57,60,64,70],argc:[6,21,28],args_morespecif:16,argtyp:[12,28],argument:1,argumenterror:[22,24,57,59],argumenttyp:[21,58],argumenttype1:58,argumentvalu:58,argumentvalue1:58,argv:[6,21,28,48],ari:[1,37,52],aris:[4,33,37,39],arisen:[23,25,51],arithmet:[20,21,22,25],arm:[16,21,52],arnoldi:67,around:[5,21,23,28,29,30,39,44,45,50,51,52],arrai:[1,3,4,6,8,9,10,12,14,16,18],arrang:[21,39,45,46,48],array_typ:28,arraycontain:46,arrayref:46,arraytyp:35,arriv:[6,24],arrow:[34,52],arrow_backward:52,arrow_double_down:52,arrow_double_up:52,arrow_down:52,arrow_down_smal:52,arrow_forward:52,arrow_heading_down:52,arrow_heading_up:52,arrow_left:52,arrow_lower_left:52,arrow_lower_right:52,arrow_right:52,arrow_right_hook:52,arrow_up:52,arrow_up_down:52,arrow_up_smal:52,arrow_upper_left:52,arrow_upper_right:52,arrows_clockwis:52,arrows_counterclockwis:52,art:52,arthur:40,articl:33,articul:52,articulated_lorri:52,artifici:40,artist:52,ascend:[44,59,68,74],ascii:[6,21,29,49,64,70,75],asciistr:[6,21,25,29,39,40,42,44,48,49,51,59,64,69,71,75],asec:[20,38,68],asecd:[20,38,68],asech:[20,38,68],asia:52,asid:50,asin:[20,38,68],asind:[20,38,68],asinh:[20,38,68],ask:[16,18,26],asl:[44,71],aspect:[46,48,50,51],assembl:[5,57],assert:[21,25,39,40,46,51,57,65,76],assertionerror:[39,57],assign:[1,12,16],assist:51,associ:[10,24,26,27,29,37,41,44,45,51,53,56,57],assum:[10,17,21,24,26,28,33,42,44,46,51,54,56,58,61,64,67,68,74],assumpt:[17,26,28,68],asteq:52,asteracc:52,asterisk:52,astonish:52,astrosun:52,asum:67,asymp:52,asymptot:52,async:[24,29,42,45,46,48,70],asyncstream:[6,13,45,70],asyncwork:21,at_ldiv_b:68,at_ldiv_bt:68,at_mul_b:68,at_mul_bt:68,at_rdiv_b:68,at_rdiv_bt:68,atan2:[20,38,68],atan:[20,38,68],atand:[20,38,68],atanh:[20,38,68],atexit:[5,57],athlet:52,athletic_sho:52,atm:52,atol:68,atom:1,atreplinit:[34,57],attach:51,attempt:[2,5,21,34,41,42,44,48,51,57,59,64],attent:[20,29],attitud:44,attr:12,atyp:10,aubergin:52,audio:64,audit:[2,44],aug:61,augment:36,august:61,australia:52,author:[27,44,47],auto_unbox:4,autom:[15,44,52],automat:[12,20,21,23,24,25,27],automobil:52,aux:48,auxiliari:[23,25],avail:[5,12,13,14,15,21,24,26,29,31,33,34,37,39,41,42],averag:[20,52],avoid:[20,21,22,23,26,29,30,33,39,40,41,42,43,44,45],awad:67,awai:[24,33,44,46,56,68],awar:[21,26,28,40,41,45,48,50],awint:52,awkward:[30,49],awri:2,axi:38,axpi:67,b96:67,b_a:21,b_a_2:21,babi:52,babuska:56,baby_bottl:52,baby_chick:52,baby_symbol:52,back:[4,5,6,16,21,23,24,25,28,38,44,45,46,49,51,52,54,64,68,70,71],backbon:51,backend:64,backepsilon:52,backhand:52,backppprim:52,backpprim:52,backprim:52,backsim:52,backsimeq:52,backslash:[49,52,53,64,73],backspac:34,backtick:[48,57],backtrac:[2,4,5,6,24,47,57,70,72],backtransform:67,backward:[57,67,68],bactrian:52,bad:[21,24],badg:52,badli:44,bag:[51,52],baggag:52,baggage_claim:52,bagmemb:52,bail:44,balanc:67,ball:52,balloon:52,ballot:52,ballot_box_with_check:52,bamboo:52,banana:[43,49,52,75],band:67,bang:74,bangbang:52,bank:52,banknot:52,banner:[31,34],bar:[23,24,27,29,30,31,39,40,41,44,46,47,48,51,52,54,58,59,70],bar_chart:52,barb:52,barbar:39,barber:52,barcap:52,barcup:52,baremodul:[27,41,54,57],barleftarrow:52,barleftarrowrightarrowbar:52,barovernorthwestarrow:52,barrier:28,barrightarrowdiamond:52,barve:52,barwedg:52,base64:64,base64decod:64,base64decodepip:64,base64encod:64,base64encodepip:64,base64pip:64,base:[1,2],basebal:52,basenam:62,bash:[8,21],basi:[26,67,74],basic:1,basketbal:52,bath:52,bathtub:52,batteri:52,bauer:67,baz:[23,24,29,30,39,48,51,59],bbb:52,bbba:52,bbbb:52,bbbc:52,bbbd:52,bbbe:52,bbbeight:52,bbbf:52,bbbfive:52,bbbfour:52,bbbg:52,bbbgamma:52,bbbh:52,bbbi:52,bbbj:52,bbbk:52,bbbl:52,bbbm:52,bbbn:52,bbbnine:52,bbbo:52,bbbone:52,bbbp:52,bbbpi:52,bbbq:52,bbbr:52,bbbseven:52,bbbsix:52,bbbt:52,bbbthree:52,bbbtwo:52,bbbu:52,bbbv:52,bbbw:52,bbbx:52,bbby:52,bbbz:52,bbbzero:52,bbrktbrk:52,bbsum:52,bce:26,bdsdc:67,bdsqr:67,beam:52,bear:52,beat:52,becaus:[4,5,12,13,14,16,20,21,23,24,26,28,29,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,59,65,67,68,69,72],becom:[14,23,24,29,30,39,45,46,47,48,49,50,51,53,67,70],bee:52,been:[2,4,5,12,14,23,24,25,29,30,34,36,37,38,41,42,44,45,46,47,48,49,51,54,57,65,67,70,71],beer:52,beetl:52,befor:[1,3,5,6,8,13,17,20,21,23,24,25,26,28,29,30,33,34,36,39,40,41,42,43,44,45,46,47,48,49,51,54,57,59,61,62,64,66,67,68,70,74,75],beforehand:21,begin:[3,6,12,14,16,21,23,24,27,29,30,31,34,39,42,44,45,46,47,49,51,53,54,55,59,62,64,70,73,75],beginn:52,behav:[17,20,21,22,23,26,29,39,40,45,46,49,50,51,54,56,59],behavior:[16,20,21,23,24,25,29],behaviour:[25,45,68,75],behind:[29,42,44,52],believ:36,bell:52,belong:[40,44,51,75],below:[3,6,16,20,21,24,28,30,31,35,39,41,44,45,46,47,49,51,52,54,57,67],belt:52,benchmark:[46,68],beneath:44,benefici:[29,51],benefit:[45,46],bento:52,benzen:52,benzenr:52,beowulf:70,bernoulli:56,berr:67,besid:[8,25,44,49,52,69],bess:[20,38,68],bessel:[38,68],besselh:[20,38,68],besselix:[38,68],besselj0:[20,38,68],besselj1:[20,38,68],besselj:[20,38,68],besseljx:[38,68],besselk:[20,38,68],besselkx:[38,68],bessely0:[20,38,68],bessely1:[20,38,68],besselyx:[38,68],best:[2,8,14,21,23,24,27,29,41,43,44,46,47,56,64,68],bet:[2,52],beta:20,beth:52,better:[8,14,17,20,23,25,39,41,44,45,46,48,50,57,68,72],between:[3,8],beverag:52,beyond:[20,25,40,49,57,64],bfft:68,bh83:67,bias:67,bicep:52,bicycl:52,bicyclist:52,bidiag:40,bidiagon:[37,40,67],big:[3,25,57,64,68,69],big_str:1,bigblacktriangledown:52,bigblacktriangleup:52,bigbot:52,bigcap:52,bigcirc:52,bigcup:52,bigcupdot:52,bigfloat:[12,33,40,43,68],bigger:29,biggest:[45,46],bigint:[25,29,33,40,43,69],biglib:41,bigodot:52,bigoplu:52,bigotim:52,bigslopedve:52,bigslopedwedg:52,bigsqcap:52,bigsqcup:52,bigstar:52,bigtim:52,bigtop:52,bigtriangledown:52,bigtriangleup:52,biguplu:52,bigve:52,bigwedg:52,bigwhitestar:52,bike:[44,52],bikini:52,billiard:52,bin:[2,4,8,21,28,64,68,69],bin_arr:69,binari:[2,20,29,31,33,37,38,42,43,44,52,56,57,59,64,68,69,70,76],bind:[6,12,22,23,27,29,30,31],bind_addr:[31,45,70],bindep:41,binomi:68,bird:52,birthdai:52,bischof1987:67,bischof:67,bisect:52,bit:[1,4,5,6],bitarrai:40,bitbroadcast:56,bitbucket:44,bitcod:[31,57],bitfield:62,bitpack:56,bitrand:69,bitshift:38,bitstyp:[21,45,49,51,70],bitunpack:56,bitvector:[56,59],bitwis:[20,24,33],bkarow:52,bkfact:67,bla:[2,20,21],black:[30,52],black_circl:52,black_jok:52,black_large_squar:52,black_medium_small_squar:52,black_medium_squar:52,black_nib:52,black_small_squar:52,black_square_button:52,blackcircledrightdot:52,blackcircledtwodot:52,blackcircleulquadwhit:52,blackinwhitediamond:52,blackinwhitesquar:52,blacklefthalfcircl:52,blacklozeng:52,blackpointerleft:52,blackpointerright:52,blackrighthalfcircl:52,blacksmilei:52,blacksquar:52,blacktriangl:52,blacktriangledown:52,blacktriangleleft:52,blacktriangleright:52,blank:[34,49,52,64],blanksymbol:52,blas_set_num_thread:67,blascopi:67,blasfloat:67,blindli:35,blkdiag:67,blkhorzov:52,blksize:[57,62],blkvertov:52,blockful:52,blockhalfshad:52,blocklefthalf:52,blocklowhalf:52,blockqtrshad:52,blockrighthalf:52,blockthreeqtrshad:52,blockuphalf:52,blog:[21,29,33,38,44],blond:52,bloomfilt:44,blossom:52,blowfish:52,blue:[52,64],blue_book:52,blue_car:52,blue_heart:52,blush:[29,52],boar:52,board:52,boat:52,bodi:[1,3,4,9,24,25,29,30,35,39,40,41,43,46,50,54,58,59,64,70],bodyexpr:3,boi:52,boilerpl:[21,39],bold:52,bolt:52,bomb:52,bone:52,bonu:16,boo:39,book:[33,44,52],bookmark:52,bookmark_tab:52,bool:[4,9,16,20,21,24,25,26,29,33,38,40,43,45,46,51,56,57,58,59,61,62,64,67,68,69,70,75],boom:[26,52],boot:[5,6,16,31,51,52],bootup:2,borrow:[36,48],bot:52,both:[3,5,12,14,16,17,20,21,22,23,24,25,26,27,29,30,33,34,35,39,40,41,43,44,45,46,47,48,49,50,51,52,54,56,57,59,67,68,71,74],botsemicircl:52,bottl:52,bottleneck:[46,47],bound:[1,3,5,6,13,14,16,22,29,30,31,39,44,46,49,51,53,54,56,57,66,67,68],boundari:[21,46,49,67],boundscheck:1,boundserror:[24,33,35,39,43,49,57,76],bouquet:52,bow:52,bowl:52,bowti:52,box:[1,4,5,6,10,28,46,51,52],boxast:52,boxbar:52,boxbslash:52,boxcircl:52,boxdiag:52,boxdot:52,boxed_uint8_cach:6,boxminu:52,boxplu:52,boxtim:52,brace:51,branch:[1,24,29],bread:52,breakag:44,bref:45,breve:52,brfft:68,bride:52,bride_with_veil:52,bridg:[28,52],bridge_at_night:52,brief:[33,35,44,45,64],briefcas:52,briefli:[23,40,46],bright:52,bring:[27,61],brittl:44,broad:[33,38,57],broadcast_f:56,broadcast_funct:56,broadcast_getindex:[20,56],broadcast_setindex:[20,56],broadli:14,broke:44,broken:[49,52,57,65],broken_heart:52,broker:45,brought:[41,45],browser:[47,52],bruce:33,bsd:[44,71],bsimilarleftarrow:52,bsimilarrightarrow:52,bsolhsub:52,bswap:69,btime:52,buf:13,buffalo:52,buffer:[13,21,34,42,47,48,64,72],bufferstream:45,bug:[17,21,29,44,46,50,52],bugfix:29,build:2,build_sysimg:15,built:[4,6,8,10,16,20,21],builtin:[4,5,6,8,16,35],bulb:52,bulid:8,bulk:[5,44],bullet:[27,52],bullettrain_front:52,bullettrain_sid:52,bullsey:52,bumpeq:52,bumpeqq:52,bumpi:52,bunch1977:67,bunch:[44,67],bunchkaufman:67,bundl:51,bunni:52,busi:47,busstop:52,bust:52,bust_in_silhouett:52,busts_in_silhouett:52,button:52,buy_drink_for:27,bytes2hex:69,bytestr:[21,57,62,75],c153:67,c169:67,c1cb1c1:44,c394:67,c410:67,c_char_p:28,c_null:[21,60],cablewai:52,cach:[4,16,21,39,41,44,45,46,57,64,68],cactu:52,cake:52,calcul:[3,24,26,28,33,39,45,46,59,65,67,68],calendar:[26,52,61],calendr:26,call1:46,callabl:[28,40,58,66,70],calle:[21,23,24],caller:[13,21,24,30,39,43,45,46],calloc:65,camel:[50,52,53],camera:52,camp:[25,51],can:[1,2,3,4,5,8,9,10,11,13,14,15,16,17,20,21,22,23,24,25,26,27,28],cancel:[34,52],cancer:52,candi:52,candid:[16,23,25,33,40,49,51],candra:52,candrabindu:52,cannot:[5,14,21,23,24,25,27,29,30,33,36,39,40,41,43,44,45,46,48,49,51,54,57,58,59,64,65,68,70],canon:[42,57,64,68,75],canonic:[62,75],cap:[46,52],capabl:[5,12,36,39,43,45,64],capac:59,capdot:52,capit:[33,42,50,52,53],capital_abcd:52,capricorn:52,capricornu:52,captur:[1,39,45,47,48,49,70,75],capwedg:52,car:52,card:52,card_index:52,cardin:52,care:[14,20,21,24,38,43,44,45,46],carefulli:[20,25,48],caret:52,carlo:45,caron:52,carousel:52,carousel_hors:52,carp:52,carri:[20,43,45,47],carriag:49,carriagereturn:52,cartesianindex:[20,40],cartesianindex_2:20,cartesianrang:56,casefold:75,casino:26,cast:[21,28,33,40],castl:52,casual:36,cat2:52,cat:[13,20,44,52,56,57],catalan:69,catch_backtrac:[24,57],catch_block:1,catdoc:27,categori:[25,38,53,75],caught:[1,4],caus:[4,20,21,24,29,30,38,39,41,45,46,47,48,51,57,58,68,70,75],caution:[46,50,52,57],cbind:43,cbrt:[20,38,52,68],ccall:[4,5,6,8,13,16],cchar:[21,58],cconvert:[21,58],cdecl:21,cdll:28,cdot:52,cdotp:52,cdoubl:[21,58],cedilla:52,ceil:[20,38,44,46,50,52,68],celebr:52,cell:[20,45,46,50,56,64,73],center:[52,68],centr:52,central:[37,40],cenv_t:16,ceremoni:52,certainli:48,cflag:[17,28],cfloat:[21,58],cglobal:[21,58],cgutil:8,chain:[1,21,24],chang:[8,11,21,23,24,26,28,29,33,34,38,39,40,41,42,43],change_arrai:29,change_valu:29,changedfil:44,chapter:[23,39,57],charact:[1,21,26,27,29,34,39,42,43,44,48],characterist:[29,33,37,45,46],charg:24,chart:52,chart_with_downwards_trend:52,chart_with_upwards_trend:52,charwidth:75,cheatsheet:31,check:[1,3,13,14,16,17,21,22,23,26,28,29,30,31,33,37,40,43,44,46,49,50],checkbound:56,checked_lib:41,checker:17,checkered_flag:52,checkmark:52,cheer:52,chequer:52,cherri:52,cherry_blossom:52,chestnut:52,chi:52,chick:52,chicken:52,child:[28,47,48,51,57],children:[17,48,51,52],children_cross:52,chime:52,chines:49,chmod:62,chocol:52,chocolate_bar:52,choic:[14,21,24,29,40,45,46,47,51,52,67,68,72,75],chol:67,choleski:[37,67],choleskypivot:[37,67],cholfact:67,cholmod:67,cholmodfactor:67,chomp:[48,64,75],choos:[29,40,44,45,47,50,51,56,64,68,74],chop:75,chosen:[20,24,30,45,46,59,67,68,70,74],chr2ind:[49,75],christma:52,christmas_tre:52,chunk:[5,45,51],church:52,cinema:52,cint:[16,21,58],cintmax_t:[21,58],circ:52,circeq:52,circl:52,circlearrowleft:52,circlearrowright:52,circledast:52,circledbullet:52,circledcirc:52,circleddash:52,circledequ:52,circledparallel:52,circledr:52,circledrightdot:52,circledstar:52,circledtwodot:52,circledwhitebullet:52,circlellquad:52,circlelrquad:52,circleonleftarrow:52,circleonrightarrow:52,circletophalfblack:52,circleulquad:52,circleurquad:52,circleurquadblack:52,circlevertfil:52,circshift:56,circu:52,circul:52,circular:52,circularli:56,circumflex:52,circumst:[9,10,14,24,46],circumv:[4,44,46],circus_t:52,cirfnint:52,city_sunris:52,city_sunset:52,cityscap:52,cjk:[31,52,53],claim:52,clamp:68,clang:[21,28,46],clap:52,clapper:52,clarifi:[14,46,50],clariti:[24,44],clark:40,clarke61:40,clash:39,classic:[21,26,30,48,51],classifi:[39,75],claus:1,cld:[38,46,68],clean:[5,6,24,26,44,54,57],cleaner:[33,50],cleanli:23,cleanup:[21,28,41,45,70],clear:[4,14,23,29,34,41,44],clear_malloc_data:[47,72],clearer:[33,47,51],clearest:43,clearli:[21,24,29,30,39,41,51],clever:[25,29,40],cleverest:29,click:[31,34,44,52],client:[6,42,47,57,64],clientsid:42,clink:52,clipboard:[52,57],clock1030:52,clock10:52,clock1130:52,clock11:52,clock1230:52,clock12:52,clock130:52,clock1:52,clock230:52,clock2:52,clock330:52,clock3:52,clock430:52,clock4:52,clock530:52,clock5:52,clock630:52,clock6:52,clock730:52,clock7:52,clock830:52,clock8:52,clock930:52,clock9:52,clock:[21,52],clockoint:52,clockwis:52,clonabl:44,clone:[43,44,71],clong:[21,58],clonglong:[21,58],close:[1,5,16,24,30,42,44,45,47,49,51,52,57,64,66,67,70],closed_book:52,closed_lock_with_kei:52,closed_umbrella:52,closedvarcap:52,closedvarcup:52,closedvarcupsmashprod:52,closer:[12,29,43,67],closest:[16,23,25,33,40,49,51,57,67],closet:52,closur:[54,57,70],cloth:52,cloud:52,clover:52,club:52,clubsuit:52,clutter:27,clwintegr:52,cmd:[1,39,45,48],cmd_gen:39,cmp:[29,68],coaster:52,cocktail:52,code_llvm:[12,46,57],code_llvm_raw:57,code_low:[12,46,57],code_n:[12,29,46,57],code_typ:[12,46,57],code_warntyp:12,codegen:[4,5,8],codepoint:75,coeffici:22,coff_t:58,coffe:52,coin:45,col:[46,47,56,67,72],cold:52,cold_sweat:52,coll:[59,69],collabor:44,collect:[2,8,16,18,20],collection2:59,collector:5,collid:44,collis:52,colon:[14,20,30,34,40,46,52,56,68],coloneq:52,color:[30,31,57,64],colptr:[20,67],com:[42,44,67],combin:[5,14,22,23,24,25,28],come:[3,5,23,24,25,33,34,35,39,43,44,46,47,49,54,74],comfort:29,comma:[21,39,51,52,54,64],commaminu:52,command:[4,5,6,8,14,15,17],comment:[8,10,16,23,39,43,44,49,61,64,73,75],comment_char:64,commit:[2,34,44,64,67,71],committe:45,common:[2,10,21,22,23,24,25,29,30,33,34,35,38,39,40,41,42,43,44,45,46,47,48],commonli:[10,20,33,45,49,51,59],commun:[44,45],compact:[3,30,36,37,64,67,75],compactli:[51,67],compar:[10,16,20,21,24,25,26,30,36,38,39,44,45,46,49,50,51,57,59,64,68,74],comparison:[1,20,21,22,24],compat:12,compens:56,compil:[1,2,4,5,6,7,8],compilecach:[41,57],complain:44,complement:[33,52,59],complementari:[38,68],complet:[4,10,13,20,21,23,25,29,30,31],complete_m:23,complex128:[21,67,69],complex64:[21,67,69],complex:[1,5,16,18,20,21],complic:[24,28,35,39,41,44,46,48],compon:[58,59,62,67,68,71,73],componentwis:67,compos:[5,49,75],composit:[21,22,23,40,41],compositeexcept:[24,70],compoundperiod:40,compq:67,comprehens:1,compress:4,compris:[1,49],comput:[3,5,14,16,18,20,21,23,24,25,28,29,30,31,32,33,34,35,36,37,38,39,43,44],compute_dot:21,conceiv:[16,46],concept:[37,40,50,51,54],conceptu:[40,49,51],concern:[29,39,54,65],concis:[24,30,46,50,57],conclud:[47,50],conclus:44,concret:[12,14,16,20,23,40,45,46,49,50,51,57],cond:[24,43,57,67],condit:1,conditionexpr:3,condskeel:67,confetti:52,confetti_bal:52,confid:47,configur:[6,28,34,44,45],confirm:[51,62],conflict:16,confound:52,confus:[25,29,43,44,47,49],cong:52,congdot:52,congratul:[2,52],congruent:[38,52],conic:52,conictap:52,conj:[22,56,68],conjquant:52,conjug:[43,52,56,67,68],conjunct:[30,34,55,56],connect:[24,31,42,44,45,48,49,51,64,70],connect_at:45,connect_id:[45,70],connector:53,conqueq:67,conquer:67,conscious:25,consecut:[1,52,58,64],consequ:[14,16,29,39,44,45,46,47,51,70],conserv:44,consid:[3,9,11,14,16,17,21,23,24,25,26,28,29,30,35,38,39,41,42,43,44,45,46,47,49,50,51,54,57,58,61,64,68,69,70,74],consist:[1,10,23,40,44],consol:[34,47],constant:[1,5,6,13,18,20],constantli:70,constitut:[16,45],constrain:[16,23,40,51],constraint:[16,23,38,40,67],construct:[1,3,4,10,14,16],construction_work:52,constructor:[10,18],constuct:61,consult:44,consum:[14,24,29,47,48,57,70],consumpt:57,contain:[1,2,3,5,6,9,10,13,14,15,16,20,21,23,24,26,27,28,30,35,39,41,43,44,45],content:[4,6,15,21,23,27,28,29,39,41,42,44,48,55,57,62,64,68,71],context:[10,23,24,26,28,29,39,41,43,44,45,46,51,53,57,70,73],contigu:[14,46,51,75],continu:[1,6,16,23,24,25,26,36,40,42,43,46,47,49,61,67],contour:52,contrast:[16,20,29,30,39,43,44,45,46,47,51,54],contravari:51,contrib:[2,17],contribut:[2,17,29,44],contributor:44,contriv:[24,39,46,49],control:[1,5,18,20],conv2:68,conv:68,convei:[1,29,36,54],conveni:[3,9,12,16,20,22,23,24,25,26,28,30,38,39,40,42,43,44,45,46,49,50,51,52,54,56,59,62,64,67,70],convenience_stor:52,convent:[9,20],converg:67,convers:[14,18,20],convert:[1,4,5,10,14,20,21,22,23,25,26,27],convolut:68,cook:[6,33,38,52],cooki:52,cool:52,cooper:[24,42,45],coordin:[24,38,51,68],cop:52,copi:[1,20,21,28,30,39,41,44,45,46,47,50,51,55,56,57,58,59,62,64,67,69,70,72,74,75],coprod:52,coproduct:52,copy_col:46,copy_col_row:46,copy_row:46,copy_row_col:46,copyast:[1,39],copyright:52,copysign:[20,38,68],cor:68,core2:15,core:[2,5,6,16,23],corn:52,corner:[44,52],corpu:2,correct:[21,23,29,33,39,46,51,58,68],correctli:[20,21,25,27,38,41,44,49,65],correl:68,correspond:[1,10,13,14,16],corrupt:[10,46,49,58],cosc:[20,38,68],cosd:[20,38,68],cosec:68,cosh:[20,38,68],cosin:[67,68],cospi:[20,38,68],cost:[29,33,39,47,55,68,74],cot:[20,38,68],cotang:68,cotd:[20,38,68],coth:[20,38,68],could:[14,20,23,24,25,26,29,30,31,33,34,35,38,39,40,41,42,45,46,47,49,50,51,57,64],count:[20,21,24,29,31,35,40,44,45,47,56,59,64,68,70,72],count_head:45,count_on:69,count_zero:69,counter:[8,29,41,47,54,57,70],counterintuit:51,counterpart:[20,43],countfrom:59,countlin:64,countnz:[20,56],coupl:[46,52],couple_with_heart:52,couplekiss:52,cours:[23,27,29,30,39,44,45,46,47,48,49,51,55],cousin:46,cov:68,covari:[16,51,68],cover:[10,39,40,49,52,67],coverag:[31,47],cow2:52,cow:52,cplex:44,cpp:[4,5,8,21],cptrdiff_t:[21,58],cpu:[2,14,15,24,31,45,46,60],cpu_cor:[60,70,76],cpu_target:15,crack:23,cracker:52,crash:0,cream:52,creat:[1,2,3,5,6,8,9,10,13,14,15,16,20],creation:[5,10,23,30,62,68],credit:52,credit_card:52,crescent:52,crescent_moon:52,criterion:26,critic:[12,21,45,46],crlf:[49,75],crocodil:52,cross:[5,13,49,52,67,68],crossed_flag:52,crosshatch:52,crown:52,crucial:[17,29,36],cruft:44,cry:52,crying_cat_fac:52,cryptograph:69,crystal:52,crystal_bal:52,cscd:[20,38,68],csch:[20,38,68],cshort:[21,58],csize_t:[21,58],cssize_t:[21,58],cstring:21,cstyle:4,csub:52,csube:52,csup:52,csupe:52,csv:[48,70],ct_eval_cal:47,ctime:[57,62],ctranspos:[30,67],ctrl:[27,57,58,70],cubatur:68,cube:[38,52],cuchar:[21,58],cuint:[21,58],cuintmax_t:[21,58],culong:[21,58],culonglong:[21,58],cumbersom:[42,49],cummax:56,cummin:56,cumprod:56,cumsum:56,cumsum_kbn:56,cumul:[47,56],cup:52,cupdot:52,cupid:52,cupve:52,curat:44,curiou:25,curl:[52,62],curli:[1,51,52],curly_loop:52,curlyeqprec:52,curlyeqsucc:52,curlyve:52,curlywedg:52,currenc:[52,53],currency_exchang:52,current:[1,3,4,5,6,8,14,15,16,17,20,21,24,28,29,31,35,40,41,42,43,44,45,46,47,48,49,51,52,54,57,59,60,61,62,64,65,66,67,68,69,70,71,72,74,75,76],current_modul:[6,21,41,57],current_task:[24,70],curri:52,cursor:[27,34],curv:[46,52],curvearrowleft:52,curvearrowright:52,cushort:[21,58],custard:52,custom:[8,20,24,26,27],custom_handl:76,customary_phras:53,customize_kei:34,cut:48,cwchar_t:[21,49,58,75],cwd:42,cwstring:21,cxx:21,cxxflag:28,cycl:59,cyclic:56,cyclon:52,cyril:49,d7ff:49,dagger:52,dai:[26,34,40,61],daili:36,dalet:52,daleth:52,damag:[46,48],dan:29,dancer:52,danger:[50,52],dango:52,dark:52,darrai:45,dart:52,darwin13:[31,34],darwin:60,dash:[44,52],dashleftharpoondown:52,dashrightharpoondown:52,dashv:52,data:[1,4,5,8,10,14,16,18,20],data_cel:64,dataarrai:68,databas:26,datafram:[43,44],datarootdir:[15,28],datatyp:[12,16,28,34,41,51,57],date:[2,18],date_str:26,dateformat:[26,61],datefunct:26,datetim:18,datetime2julian:61,datetime2rata:61,datetime2unix:61,david:33,dawson:[20,33,38,68],dayabbr:61,daylight:26,daynam:[26,61],dayofquart:[26,61],dayofweek:[26,61],dayofweekofmonth:[26,61],dayofyear:[26,61],daysinmonth:[26,61],daysinyear:61,daysofweekinmonth:61,dbg:[12,57],dbkarow:52,dblarrowupdown:52,dct:68,ddagger:52,ddddot:52,dddot:52,ddot:52,ddot_:21,ddotseq:52,ddownarrow:52,de77ee4dc0689b12c5e8b574aef7f70e8b311b0:44,dead:57,deal:[6,14,16,21,26,38,42,46,49],dealloc:21,dealt:26,debug_bootstrap:2,debugg:16,debuginfo:[5,8],dec:[61,69],decad:36,decemb:61,decid:[5,23,44,45,47,50,51],decidu:52,deciduous_tre:52,decim:[43,68,69],decis:[14,46,51],declar:[1,10,12,16,20,21,23,24,25],decod:64,decompos:75,decomposit:[20,37,67,75],deconv:68,decor:[27,52,64],decoupl:40,decreas:[46,47],decrement:[67,70],dedent:49,dedic:[25,34,39,70],deem:[22,29,40],deep:57,deepcopi:[20,57],deepcopy_intern:57,deeper:47,deepli:[24,29,39,47,51,52],defalg:74,default_handl:76,default_meta:71,default_sysimg_path:15,default_v:46,defeat:29,defer:64,defici:67,defin:[4,5,6,9,10,11,12,13,16,20,21,22,23,24],definit:1,deg2rad:68,degeneraci:67,degrad:29,degre:[23,25,38,52,56,68],del:52,delai:[30,47,52,57,72],deleg:[23,25,40,45],delet:4,deleteat:59,deliber:29,delici:52,delim:[64,75],delimet:64,delimit:[26,27,31,41,43,49,52,61,64,68,73,75],deliv:70,deliveri:52,delta:[44,52,53],demand:[5,10,24,51],demonstr:[21,30,39,41,44,45,51],den:[22,23,25,51,68],denomin:[20,22,23,25,51,57,68],denorm:[46,69],denot:[29,43,51],densearrai:[16,20,40],densest:33,densiti:[20,56],dep:[2,8,71],depart:52,department_stor:52,departur:36,depend:[5,10,11,14,16,21,24,25,26,29,30,33,39,40,41,42,43,44,45,46,49,51,56,57,59,64,66,67,68,70,71,72,73,75],deploi:36,depth:[12,33,71,72],depwarn:31,deregist:[45,70],deriv:[20,38,46,67,68],descend:51,describ:[1,3,5,14,16,17,21,22,23,24,25,29,30,33,34,35,36,41,44,45,47,49,51,54,56,60,61,64,67,68,70],descript:[6,20,21,33,35,38],descriptor:[48,62,64,70],deseri:[5,57,64],deserialis:6,deserv:23,desir:[5,24,26,41,45,46,47,50,57,62,68],desk:52,despit:[16,29,40,47,51],dest:[56,58,62,67],destin:[20,57,58,59],destroi:[28,29],destruct:59,destructur:[30,49],det:[37,67],detach:57,detail:[5,10,12],detect:[16,17,29,47,54,64],determin:[1,2,4,5,20,21,23,24,25],determinist:[4,39,48],dev:[13,44,57],devector:[36,43],deviat:[68,69],devic:[41,46,57,62,64],devnul:[57,64],devot:5,dezh:52,dft:68,dht:68,diacrit:[53,75],diaeresi:52,diag:[43,67],diagdown:52,diagind:67,diagm:[43,67],diagnos:46,diagnost:[8,24],diagon:[37,40,43,51,52,56,67],diagpoint:51,diagup:52,diamet:52,diamond:52,diamond_shape_with_a_dot_insid:52,diamondbotblack:52,diamondleftarrow:52,diamondleftarrowbar:52,diamondleftblack:52,diamondrightblack:52,diamondsuit:52,diamondtopblack:52,diassembl:8,dicei:52,diceii:52,diceiii:52,diceiv:52,dicev:52,dicevi:52,dict:[26,29,34,35,41,43,44,45,56,57,59,68,70,71,72],dict_comprehens:1,dictat:[25,51],dictchannel:45,dictionari:[27,30,34,41,44,45,50,56,57,59,68,70,71,72],did:[9,15,39,42,45,46,48,57],didn:[29,42,50],die:[52,61],diff:[14,44,56],differ:1,differenti:[51,52,68],difficult:[29,30,46,50,51,54],difficulti:[23,29,51],dig:16,digamma:[20,38,52,68],digest:46,digit:[1,5,33,43,49,52,53,61,64,68,69,75],digraph:52,dim:[3,10,14,20,21,28,35,39,45,56,58,59,64,68,69,70,74],dimanch:26,dimens:[3,14,20,28,35,38,39,43,45,46,51,56,59,64,67,68,69,73,74],dimension:[14,18],dimensionmismatch:57,diminish:36,dimlength:56,dingasterisk:52,dir:[31,44,57,62,70,71],direct:[2,12,15,20,21,22,24,39,44,51,52,67],directindexstr:34,directli:[1,5,8,10,13,21,22,23,24,25,28,33,35,36,39,41,44,45,46,47,48,50,52,56,57,64,65,71,74,75,76],directori:[2,4,5,8,17,28,41,43,44,47,55,57,60,62,64,70,71],dirichlet:[38,68],dirnam:62,disabl:[17,28,31,46,57,58],disable_sigint:58,disadvantag:55,disallow:[31,53],disambigu:[40,49,50,72],disappear:46,disappoint:52,disappointed_reliev:52,disasm:8,disastr:14,disc:52,discard:[44,57],disclaim:39,disconnect:42,discontinu:68,discourag:[43,53,70],discov:[4,21,34],discret:[26,61,68],discuss:[12,14,16,24,25,33,39,40,42,44,46,47,49,51,57],disin:52,disjoint:45,disjquant:52,disk:[2,42,52,64,70],dispar:40,dispatch:[5,12,14,16,21,23,25,30,36,39,40,43,51,57,60,64],displac:14,display:64,disregard:41,disrupt:50,distanc:[20,22,33,56,57],distinct:[1,14,16,23,24,26,35,39,40,41,45,49,51,54,75],distinguish:[16,26,38,39,43,45,57,74],distr:1,distribut:[2,5,17,20,28,29,36,43,44],distributedarrai:45,div:[14,20,23,25,26,33,38,46,52,68],diverg:[44,68],divid:[23,25,27,33,38,45,50,52,67,68],divideerror:[24,33,57],divideontim:52,divis:[22,23,25,26],divisor:[23,38,68],divrem:[38,68],dizzi:52,dizzy_fac:52,dl_load_path:[60,66],dlamch:67,dlclose:66,dlext:66,dll:[15,66],dlopen:[21,66],dlopen_:66,dlsym:[21,58,66],dlsym_:66,dmemdebug2:17,dmemdebug:17,do_cal:6,do_comput:48,do_not_litt:52,do_test:76,do_test_throw:76,do_work:48,doc:[1,27,31,34,45,68,75],doc_str:27,docil:27,docstr:27,document:3,doe:[1,6,14,16,17,20,21,22,23,24,25,26,28],doesn:[4,21,23,25,29,33,39,43,44,46,47,49,50,51,54,57,67],dog2:52,dog:52,doi:67,doll:52,dollar:52,dolphin:52,domain:[36,42,43,44,45,56,57,64],domainerror:[22,24],domin:46,don:[14,20,23,26,29,31,39,44,46,48],done:[6,21,23,24,26,27,28,29,33,35,39,40,41,42,43,44,45,46,48,50,54,56,57,59,64,71],door:52,dot:[20,21,35,43,46,52,54,62,67],dotc:67,doteq:52,dotequiv:52,doth:57,dotless:52,dotminu:52,dotmulfun:11,dotplu:52,dotsim:52,dotsminusdot:52,dottedcircl:52,dottedsquar:52,dottim:52,dotu:67,doubl:[20,21,28,31,33,34,39,44,48,49,50,52,58,64,67],doublebarve:52,doubleplu:52,doughnut:52,dow:61,down:[2,6,24,26,29,34,47,52,59,65],downarrow:52,downarrowbar:52,downarrowuparrow:52,downdasharrow:52,downdownarrow:52,downharpoonleft:52,downharpoonright:52,downharpoonsleftright:52,downleftrightvector:52,downleftteevector:52,downleftvectorbar:52,download:[29,31,44,62],downrightteevector:52,downrightvectorbar:52,downsid:46,downward:52,downwhitearrow:52,downzigzagarrow:52,dozen:[29,40],draft:52,draftingarrow:52,dragon:52,dragon_fac:52,dramat:45,draw:52,drawback:[29,51],drawn:68,drbkarrow:52,dress:52,drill:6,drink:52,drive:[45,62],driver:[45,70],droang:52,dromedari:52,dromedary_camel:52,drop:[14,20,52,56,59,62],droplet:52,dsfmt:47,dsfmt_gv_fill_array_close_open:47,dsol:52,dst:62,dt2:26,dth:61,dtruss:2,du2:67,dualmap:52,duck:[50,67],due:[2,21,24,29,44,45,46,47,48,50,57,67],dumbsum3:47,dumbsum:47,dummi:51,dummymodul:45,dump:[4,5,6,8,12,13,26,39,47,64],dup:67,duplic:56,dusk:52,dvd:52,dylib:[15,28,49,66],dynam:[5,8,21,25,28,30,34,36,39,40,41,43,45,46,49,51,57,63,64],dynamic_arch:2,e000:49,e10:33,each:[1,3,5,6,8,10,12,13,14,16,20,21,23,24,26,27,28,29,30,31,33,34,35,38,39,40,41,43,44,45,46,47,48,49,51,54,56,57,58,59,61,64,67,68,70,71,72,74,75],eachindex:[20,56],eachlin:[42,59,64],eachmatch:75,eagerli:43,ear:52,ear_of_ric:52,earli:[2,5,6,24],earlier:[23,44,46,70],earth:[26,52,61],earth_africa:52,earth_america:52,earth_asia:52,eas:36,easi:[16,20,21,24,27,30,33,34,36,39,44,45,49,50,51,57],easier:[3,21,24,30,41,42,43,44,45,50,51,59],easiest:[16,24,31,39,44],easili:[1,22,23,24,25,27,29,33,35,36,39,40,44,46,48,49,51,74],east:52,eax:29,echo:[13,31,34,39,42,44,48],economi:67,ecosystem:[10,46],edg:[1,39,68,70],edge1:68,edge2:68,edit:[12,34,44,53,57,71],edit_move_up:34,editor:[44,49],ef45f54b:44,effect:[4,20,21,23,24,27,29,30,33,38],effici:[5,14,20,21,26,28,29,35,36,38,39,40,43,45,46,47,49,50,51,54,55,56,57,59,61,64,67,68,74],effortless:22,egal:[10,57],egg:52,eggplant:52,egsdot:52,eiffel:51,eig:[37,67],eigen:[37,67],eigendecomposit:67,eigensolv:67,eigensystem:67,eigenvalu:67,eigenvector:67,eigfact:67,eight:[49,51,52],eight_pointed_black_star:52,eight_spoked_asterisk:52,eighteen:52,eighth:52,eighthnot:52,eigmax:[37,67],eigmin:[37,67],eigval:[37,67],eigvalu:67,eigvec:[37,67],eip:4,either:[3,8,16,17,20,21,23,24,25,26,27,29,30,31,35,38,39,40,43,44,46,49,50,51,54,56,57,58,62,64,67,68,69,70,75,76],elaps:[39,46,57,64],electr:52,electric_plug:52,eleg:[33,36],element:[1,3,12,14,16,20,21,23,24,26,27,28,29,30,34,35,38,39,40,42,43,45,46,47,48,49,50,51,52,55,56,57,58,59,61,64,67,68,69,70,74,75],element_typ:[20,56,59],elementari:[18,22,24,25,32],elementwis:[20,38,59,68,73],eleph:52,eleven:52,elig:54,elimin:[5,21,29,36,45,46,56,57],elint:52,ell:52,ellips:[39,52],ellipsi:[30,52],elor:52,elroang:52,els:[1,3,5,6,14,17,23,24,25,29,30,36,38,39,40,41,44,45,46,49,51,53,64],elsdot:52,elseexpr:3,elseif:[1,3,24,30,46],elsewher:[25,56,57,64,68],eltyp:[20,21,35,46,56,59,67,69],elzand:52,elzbar:52,elzbtdl:52,elzcirfb:52,elzcirfl:52,elzcirfr:52,elzclomeg:52,elzddfnc:52,elzdefa:52,elzdlcorn:52,elzdshfnc:52,elzdyogh:52,elzesh:52,elzfhr:52,elzglst:52,elzhlmrk:52,elzinglst:52,elzinvv:52,elzinvw:52,elzlap:52,elzlmrk:52,elzlow:52,elzlpargt:52,elzltlmr:52,elzltln:52,elzminhat:52,elzopeno:52,elzor:52,elzp:52,elzpalh:52,elzpbgam:52,elzpgamma:52,elzpscrv:52,elzpupsil:52,elzrai:52,elzrarrx:52,elzreapo:52,elzreglst:52,elzrh:52,elzrl:52,elzrlarr:52,elzrtl:52,elzrtld:52,elzrtll:52,elzrtln:52,elzrtlr:52,elzrtlt:52,elzrtlz:52,elzrttrnr:52,elzrvbul:52,elzsbbrg:52,elzsblhr:52,elzsbrhr:52,elzschwa:52,elzsqfl:52,elzsqfnw:52,elzsqfr:52,elzsqfs:52,elzsqspn:52,elztdcol:52,elztesh:52,elztim:52,elztrna:52,elztrnh:52,elztrni:52,elztrnm:52,elztrnmlr:52,elztrnr:52,elztrnrl:52,elztrnsa:52,elztrnt:52,elzvert:52,elzverti:52,elzvrecto:52,elzxh:52,elzxl:52,elzxrat:52,elzyogh:52,email:[44,52],embed:[10,15,18,21],embed_exampl:28,emblem:52,emdash:52,emerg:[25,27],emiss:5,emit:[5,29,31,41],emit_cal:4,emit_expr:[4,5],emit_funct:[4,5],emit_intrins:6,emit_known_cal:5,emoji:52,emphas:[39,50,57,70],emploi:[3,16,67],empti:[9,16,20,27,29,34,39],emptyfunc:40,emptyset:52,emptysetoarr:52,emptysetoarrl:52,emptysetobar:52,emptysetocirc:52,emul:[48,70],enabl:[1,5,8,17,27,28,31,35,44,45,46,56,57,58,64,75],enable_broadcast:64,enc:47,encapsul:21,enclos:[1,39,41,43,52,54,57,64,70],enclosecircl:52,enclosediamond:52,enclosesquar:52,enclosetriangl:52,encod:[14,49,53,64,68,69,75],encompass:54,encount:[2,5,33,39,41,44,49,51],encourag:[43,44,48],end:[1,2,3,5,9,11,12,14,16,20,21,23,24,25,26,27,29,30,31,33,34,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,64,67,68,70,73,75,76],endash:52,endian:64,endian_bom:[60,64],endof:[35,49,50,59,75],endors:44,endpoint:68,endswith:75,enforc:[23,46,75],eng:52,engin:[33,44,52],english:[26,49,61],enhanc:[33,44,55],enorm:51,enough:[8,20,23,25,29,33,36,39,45,46,47,57],enqueu:59,enspac:52,ensur:[13,20,21,22,23,29,30,38,39,44,45,46,50,51,58,64,70,71],entail:33,enter:[1,2,16,27,30,31,33,34,40,42,47,49,53],entir:[1,5,14,16,17,20,23,24,27,29,39,42,44,45,47,49,51,64,67,73],entireti:64,entiti:16,entri:[14,16,20,24,34,38,43,44,51,52,56,59,62,67,68,70,71],entropi:69,entrypoint:71,enumer:[29,43,46,50,57,59],enumnam:57,enumvalue1:57,enumvalue2:57,env:[1,10,16,21,57,60,71],envelop:52,envelope_with_arrow:52,envhash:[57,59],eof:[42,64],eoferror:[24,57,76],eol:64,eparsl:52,ephemer:46,epoch:[57,61,65],epsilon:25,eq_float:46,eqc:16,eqcirc:52,eqcolon:52,eqdef:52,eqdot:52,eqeqeq:52,eqgtr:52,eqless:52,eqqgtr:52,eqqless:52,eqqplu:52,eqqsim:52,eqqslantgtr:52,eqqslantless:52,eqsim:52,eqslantgtr:52,eqslantless:52,equ:67,equal:[14,16,21,22,24,27,33,38,39,43,44,45],equalleftarrow:52,equalparallel:52,equat:[67,68],equiangular:52,equilbr:67,equilibr:67,equiv:52,equival:[10,13,16,20,21,23,24,27,29,30,31,33,34,38,39,40,42,43,44,45,46,49,51,52,54,56,57,58,59,60,62,64,67,68,69,70,71,74,75],equivdd:52,eqvparsl:52,era:26,erf:[20,38,68],erfc:[20,38,68],erfcinv:[20,38,68],erfcx:[20,38,68],erfi:[20,38,68],erfinv:[20,38,68],err:[21,44,48,57],err_retri:70,err_stop:70,errno:[21,57,58,65],erron:33,error:1,errorexcept:[4,24,48,57,76],esc:[9,21,27,39,57,64],escap:[39,48,49,64,75],escape_str:75,esh:52,esoter:5,especi:[2,20,21,23,25,30,38,44,45,46,50,51,54,68],essenti:[16,18,21,23,24,28,33,38,39,46,51],ession:39,establish:[28,42,44,45,70],estim:[52,57,67,68],eta:[20,38,52,68],etc:[2,4,13,20,26,29,38,41,42,43,45,48,49,51,58,61,65,68],etcetera:[23,68],eth:52,etre:56,etymolog:5,euclid:68,euclidean:[67,68],euler:[52,68,69],eulerconst:52,eulergamma:69,euro:52,europ:52,european:52,european_castl:52,european_post_offic:52,ev_in:67,eval_user_input:47,evalfil:57,evalpoli:68,evalu:[1,3,5,6,12,16,20,21],even:[4,10,14,16,21,22,23,24,25,27,29,30,33,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,59,64,67,68,69,75],event:21,eventu:[5,16,24,30],ever:[23,25,40,46,51],evergreen:52,evergreen_tre:52,everi:[4,20,21,23,25,26,28,29,30,33,35,36,38,39,41,42,43,45,46,49,51,56,57,59,64,70],everydai:24,everyth:[4,25,26,28,38,44,46,49,51,57,62,64],everywher:[25,29,45,47,55,70],evil:52,evolv:11,ex1:39,ex2:39,ex3:39,exact:[20,22,30,33,50,51,64,68,72],exactli:[4,16,21,28,30,33,39,40,43,49,51,56,57,58,59,64,68,69],examin:[3,4,5,16,27,39,42,46,47,48,72],exampl:[1,3,4,5,6,8,9,10,11,12,14,15,16,20,21,22,23,24,25,26,27],exce:36,exceed:[33,68],excel:[29,33,38,49],except:[1,15,16,20,21,22],excerpt:49,excess:48,exchang:52,exclam:[52,57],exclud:[44,49,57,67],exclus:[21,38,68],exec:[2,48],exec_program:6,execut:[2,3,4],exeflag:[45,70],exenam:[45,70],exhaust:[31,64],exhibit:[20,23,47],exist:[1,21,23,25,26,28,29,30,33,36,39,40,41,42,43],existingarrai:28,exit:[4,5,24,30,31,34,45,57,70],exit_cod:5,exitcod:70,exp10:68,exp2:[20,68],exp:[20,22,24,38,68],expand:[1,5,12,20,21,27,29,39,56,57,59,62,68,75],expandus:62,expat:44,expect:[2,9,20,21,22,23,24,25,26,27,29,36,39,41,42,44,46,47,49,50,51,57,64,69],expedit:44,expens:[20,35,45,47,56,68],experi:[24,31,33,55,68],experienc:2,expert:[36,44],explain:[23,25,44,49,50,51,54],explan:[24,72],explicit:[1,20,21,23,25,28,29,30,33,39,40,41,43,44,45,46,49,51,54,61,70,71],explicitli:[2,20,21,22,23,24,25,26,30,33,36,38,40,41,43,45,46,47,51,53,56,57,59,67,74],exploit:[20,64,68],explor:[39,51,55,67],expm1:[20,38,68],expm:[37,67],expon:[20,38,69,73],exponenti:[14,33,38,43,46,67,68,69],expos:[5,29,35,42],expr1:39,expr2:39,express:1,expressionless:52,ext:48,extact:67,extend:[5,25,27,28,29,30,35,36,41,45,56,67,68,73,75],extens:[23,33,35,36,40,41,44,49,66,74,76],extent:26,extern:[2,18,20,21,24,32,35,41,43,44,45],extra:[14,20,21,30,35,39,44,46,47,51,54,64,70,76],extra_repl_keymap:34,extract:[4,9,10,14,16,22,28,30,39,49,57,67,69],extraordinarili:39,extraterrestri:52,extrem:[25,39,44,46,47,49,53,57],extrema:[59,68],extyp:76,eyeglass:52,ezh:52,f77:21,f_improv:46,face:[52,67],facepunch:52,facil:36,facilit:[3,24,30,40,41,45,55,70],fact:[14,23,26,29,30,39,45,46,47,48,50,51,67,68],factor:[2,22],factori:[24,33,38,52,56,68],faddeeva:68,fail:[2,17,21,23,24,29,30,39,44,45,48,49,51,57,67,70,75,76],failur:[4,29,41,44,57,65,66,70,76],fairli:[14,23,24,27,45,57],faithfulli:25,fall:[23,25,40,51,52,68],fallback:[20,35,41,57,64,68],fallen:[51,52],fallen_leaf:52,fallingdotseq:52,fals:[1,4,12,15,16,20,21,22,23,24,25,26,29,33,38,39,40,41,43,45,46,47,49,51,53,54,56,57,59,61,62,64,67,68,69,70,72,74,75],falsifi:24,famili:[44,51,52],familiar:[26,39,42,43,44,49,50],fan:68,fancier:35,faq:[43,50],far:[4,29,30,39,40,43,46,47,51,57],farther:33,fashion:57,fast:[14,20,29,31,36,37,44,45,46,56,68,70,74],fast_forward:52,fastcal:21,faster:[5,17,27,29,39,44,46,50,51,56,59,67,68,74],fastest:[45,68],fastmath:[31,46],fatal:70,father:[33,52],favor:[33,43,67,73],favorit:44,fax:52,fdiagovnearrow:52,fdiagovrdiag:52,fdio:64,fear:52,featur:[1,3,5,14,23,24,27,31,33,34,36,37,39,40,41,46,49,51,54],feb:[26,61],februari:[26,61],feed:[45,48,75],feedback:44,feeder:45,feel:[42,44,51],feet:52,femal:52,feminin:52,femtolisp:[5,6,13,17],fenc:[27,52],ferr:67,ferri:52,ferris_wheel:52,fetch:[39,45,46,47,48,50,57,62,70,72],fetchfrom:70,few:[2,3],fewer:[1,23,29,40],ffast:46,ffi:5,fft:[27,43,68],fftshift:68,fftw:68,field:[1,4,5,10,12,13],fieldnam:[12,51,57],fieldoffset:[12,57],fieldptr:10,fieldtyp:57,fieldvalu:40,fifo:62,figur:[2,4,26,44],file1:[41,45],file2:[41,45],file:1,file_fold:52,file_nam:64,filefunclin:[47,72],filemod:62,filenam:[5,29,42,57,64,69,70,72],filepath:62,files:62,filesystem:[18,41],fill:[5,20,21,28,35,36,45,46,47,52,56,59,64,65,67,69],fill_two:46,filt:68,filter:[59,68],finally_block:1,find:[2,3,8,10,16,17,20,26,29,34,36,37,39,40,41,43,44,46,47,49,50,51,56,59,67,68],find_librari:66,findfirst:56,findin:59,findlast:56,findmax:59,findmin:59,findn:[20,56],findnext:56,findnz:[20,56],findprev:56,fine:[17,26,30,46],finer:[45,75],finish:[16,21,23,24,25,44,45,70],finit:[33,38,46,49,52,56,57,68,69],finv:52,fire:[16,52],fire_engin:52,firewal:44,firework:52,first:[1,2,3,4,5,8,9,11,14,16,20,21,23,24,25,26,27,28,29,30,31,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,57,58,59,61,62,64,66,67,68,69,70,71,72,74,75],first_index:14,first_quarter_moon:52,first_quarter_moon_with_fac:52,firstdayofmonth:61,firstdayofquart:61,firstdayofweek:[26,61],firstdayofyear:61,firstlast:51,fish:52,fish_cak:52,fishey:52,fishhook:52,fishing_pole_and_fish:52,fist:52,fit:[29,36,38,43,46,51,64],fitzpatrick:52,five:[24,48,52,64],fix:[8,26,29,33,40,41],fixbar:44,fixbar_backup:44,fl_invoke_julia_macro:5,fl_print:[4,13],flag:[1,14,17,28,29,34,41,42,49,52,62,64,65,66,68,70,75],flaot64:67,flashlight:52,flat:[47,52,72],flatten:46,flavour:27,fld:[10,38,46,68],fldmod:[38,68],flex:52,flexibl:[3,23,24,33,36,39,40,45,51,53,64,74],flip:[30,45,68],flipbit:56,flipdim:56,flipsign:[38,68],flisp:[4,5,13],float16:[12,33,40,51,69],float32:[4,12,16,21,25,33,40,43,46,51,56,57,58,67,69],float64:[4,12,14,16,20,21,23,24,25,28,29,30,33,35,40,43,45,46,50,51,56,57,58,59,61,64,67,68,69,70,72,74],floatrang:40,floor:[20,38,44,46,50,52,68],flop:67,floppi:52,floppy_disk:52,flow:[1,18],flower:52,flower_playing_card:52,fltn:52,flush:[5,42,48,52,64,65],flush_cstdio:65,flutter:52,fly:[42,56],fma:68,fmt:[28,34,46,64],fname:4,focu:[1,36,51],focus:[16,46],foggi:52,foist:29,fold:[52,75],folder:[2,15,28,44,45,52],foldl:59,foldr:59,follow:[1,2,3,5,10,12,13,16,17,20,21,22,23,24,25,26,27,28,29,30,31,33,34,37,38,39,40,41,42,43,44,45,46,47,49,50,51,53,54,55,56,57,58,61,64,67,68,69,70,73,75],follow_symlink:62,font:52,foo:[1,16,21,23,24,25,27,29,30,31,39,40,41,44,46,48,50,51,54,56,58,59,70],foo_data:41,foo_data_ptr:41,foo_init:41,foobar:[21,44],food:52,foomanag:[45,70],foot:5,footbal:52,footnot:45,footprint:52,fopen:[21,64],foral:52,forbid:51,forc:[1,4,15,26,28,29,43,44,45,46,47,48,50,52,54,57,64,65,72],foremost:14,forev:59,forget:44,forgot:44,forio:31,fork:[44,48,52],fork_and_knif:52,forksnot:52,forkv:52,formal:26,format:[13,14,20,21,25,26,27,33,34,44,47,56,61,64,65,67,68],format_str:26,formatmessag:65,former:[30,46,48,49],formerli:46,formula:[33,35,67],forth:[24,44],fortran90:21,fortran:[18,20],fortun:[11,14,36,45,49],forum:45,forward:[34,44,46,54,67,69],forwardord:59,found:[9,10,16,20,24,28,29,30,34,37,41,42,43,44,49,51,56,64,67,70,75],fountain:52,four:[12,25,27,34,46,49,51,52,56,74,75],four_leaf_clov:52,fourier:68,fourth:[14,25,40,47,52],fourthroot:52,fpart:68,fpic:[21,28],fptosi:46,fptr:4,fptrunc:4,fraction:[38,52,68],fragment:[5,39],fraktur:52,frame:[4,6,28,43],free:[21,27,28,29,33,36],freebsd:44,freed:[21,28,45,57,65,75],freeli:[44,51],french:[26,52],french_daysofweek:26,frequent:[6,18,24],fresh:[31,34,44,47],freshli:54,frexp:68,fri:[52,61],fric:52,fridai:[26,61],fried_shrimp:52,friendli:8,frobeniu:67,frog:52,from:[1,2,3],front:[1,46,51,52],frown:52,frozen:5,fruit:[43,57],fs_caveat:64,fuel:52,fuelpump:52,fuji:52,full:[2,5,12,13,17,20,22,26,33,34,39,43,44,45,47,49,51,52,56,57,60,61,62,67,70],full_moon:52,full_moon_with_fac:52,fulli:[5,21,23,24,29,34,41,46,49,51,54,57,59,74],fullnam:57,fun:21,func10:39,func:[16,21,28,30,39,46,57,61,64,70],funcnam:72,function_modul:57,function_nam:[28,57],function_point:58,functionloc:57,functionobject:4,functiontyp:21,functor:[11,23,40],fundament:[16,23,26,51],further:[10,12,17,24,28,29],furthermor:[30,43,45,50,68],fuss:26,fussi:24,fussy_sqrt:24,futur:[5,11,21,27,29,40,41,44,45,46,50,59,66,67,72],fwrite:13,gadfli:44,gain:[20,21,51],gambl:26,game:[26,52],game_di:52,gamma:[20,38,52,68],gamut:22,gap:[14,59],garbag:5,garden:52,gather:46,gauss:68,gaussian:20,gbmv:67,gbsn:53,gbtr:67,gbtrf:67,gc_enabl:57,gcc:[15,21,28,29],gcd:[23,38,68],gcdx:68,gdb:[0,2],gdblookup:4,gebak:67,gebal:67,gebrd:67,gecon:67,gee:67,geev:67,geevx:67,gehrd:67,gel:67,gelqf:67,gelsd:67,gelsi:67,gem:52,gemini:52,gemm:67,gemqrt:67,gemv:67,gener:[1,2,3],generalizedeigen:67,generalizedschur:67,generalizedsvd:[37,67],generic_funct:1,gensym:[1,21,39,57],geometr:52,geqlf:67,geqp3:67,geqq:52,geqqslant:52,geqrf:67,geqrt3:67,geqrt:67,geqslant:52,ger:67,gerqf:67,gescc:52,gesdd:67,gesdot:52,gesdoto:52,gesdotol:52,gesl:52,gestur:52,gesv:67,gesvd:67,gesvx:67,get:[2,3,4,5,8,9,10,16,18,20,21,23,24,26,28,29],get_bigfloat_precis:69,get_process_titl:57,get_round:[68,69],get_zero_subnorm:69,getaddrinfo:[42,64],getenv:21,getfield:[46,57],gethostnam:[21,57],getipaddr:57,getkei:59,getlasterror:65,getpid:57,getr:67,getrf:67,getri:67,getstdout:41,gflop:46,gge:67,ggev:67,ggg:52,gggnest:52,gglse:67,ggsvd:67,ghost:52,ghz:46,gibbou:52,gid:[57,62],gift:52,gift_heart:52,gigabyt:29,gimel:52,girl:52,gist:2,git:[44,71],github:[2,44,67],gitignor:44,give:[12,15,20,21,22,23,26],given:[1,5,9,12,14,15,20,21,23,24,25,26,27,29,30,31,33,34,39,40,41,42,44,45,47,49,51,56,57,59,61,62,64,65,67,68,69,70,71,72,74,75,76],gla:52,glass:52,gle:52,glj:52,glm:43,global:[1,6,10,20],globalref:[1,46],globe:52,globe_with_meridian:52,gloss:49,glottal:52,glow:52,glue:21,glyph:52,gmp:[33,40],gmt:61,gnapprox:52,gneq:52,gneqq:52,gnsim:52,gnu:[2,28,33,66,69],goal:43,goat:52,goblin:52,goe:[1,2,24,44,48,49,56,57],goertzel:68,goldberg:33,golden:69,golf:52,good:[4,16,23,26,27,36,41,44,45,46,47,49,52,55],goodby:[49,75],googl:42,got:[29,51,57],gotcha:[21,51],gotoifnot:1,gotonod:1,gperm:62,gracefulli:[5,29,49],gradient:56,gradual:51,graduat:52,grant:46,grape:52,graph:51,graphem:75,graphic:[47,64],grave:52,great:[34,38,39,42,51],greater:[21,23,24,25,26,33,38,44,49,52,53,57,59,67,68,74,75],greatest:[21,23,38,44,51,68],greatli:[2,46],greedi:57,greedili:57,greek:[49,52],green:[36,52],green_appl:52,green_book:52,green_heart:52,greet:[31,34,49],gregorian:[26,61],grep:[48,57],grew:57,grey_exclam:52,grey_quest:52,grid:20,grimac:52,grin:52,group:[8,21,26,49,57,59,62,64,75],groupnam:49,grow:[14,33,43,47,52,57,64],grown:64,growth:67,gsime:52,gsiml:52,gtcc:52,gtcir:52,gtquest:52,gtrapprox:52,gtrdot:52,gtreqless:52,gtreqqless:52,gtrless:52,gtrsim:52,gtsv:67,gttr:67,gttrf:67,gua:52,guarante:[14,20,21,23,24,50,51,57,58,59],guard:29,guardsman:52,guess:26,guid:[2,18],guidanc:44,guidelin:29,guillemet:52,guilsinglleft:52,guilsinglright:52,guitar:52,gun:52,gvertneqq:52,h05:67,habit:44,hacek:52,hack:13,had:[41,42,44,46,47,70],hadamard:43,hair:52,haircut:52,half:[20,29,33,52,67,68,74],halfcomplex:68,halo:52,halv:68,hamburg:52,hammarl:67,hammer:52,hamster:52,hand:[5,8,23,24,25,26,29,33,35,36,38,39,43,44,51,52,54,67],handbag:52,handi:[9,20,24,30,39,49],handl:[4,5,6,8,13,14,16],handler:[1,6,13,24,31,58],handoff:5,hankei:52,hankel:[38,68],hankelh1:[20,38,68],hankelh1x:[38,68],hankelh2:[20,38,68],hankelh2x:[38,68],happen:[14,16,24,25,27,28,29,30,39,42,45,46,47,48,49,50,51,56,57,67,70,76],happi:[44,52],har:45,hard:[3,29,39,44,53],harder:[46,50],hardest:5,hardli:25,hardwar:[33,45,46,69],harm:[21,22],harpoon:52,hartlei:68,hash:[16,38,41,43,44,57,59],haskei:[50,59],haskel:51,hasn:44,hasplain:23,hassl:44,hat:[34,52,53],hatapprox:52,hatch:52,hatched_chick:52,hatching_chick:52,have:[1,2,3,9,10,11,12,14,16,20,21,22,23,24,25,26,27,28,29,30,31,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,59,61,64,65,67,68,69,70,71,72,75],haven:[41,44,46],haystack:75,hbar:[34,52],hc2r:68,hcat:[1,20,30,43,56],hdf5:64,head:[1,39,52],headach:38,header:[2,10,21,28,64],header_cel:64,headphon:52,heap:[28,29,41,58],heapifi:59,heappop:59,heappush:59,hear:52,hear_no_evil:52,heart:[16,52],heart_decor:52,heart_ey:52,heart_eyes_cat:52,heartbeat:52,heartpuls:52,heartsuit:[34,52],heatflow:46,heavi:[13,16,23,42,52],heavili:[14,16],heavy_check_mark:52,heavy_division_sign:52,heavy_dollar_sign:52,heavy_minus_sign:52,heavy_multiplication_x:52,heavy_plus_sign:52,hebrew:49,heel:52,held:[23,34,45],helicopt:52,hello:[6,13,34,39,42,46,48,49,51,53,75],help:[2,4,14,16,17,21,26,27,29,30,31],helper:[5,21],henc:[14,16,24,26,41,45,47,51,56,57,58,67,68],her:67,herb:52,here:[2,3,4,8,9,10,11,14,16,20,21,23,24,25,27,28,29,30,33,34,38,39,40,41,42,44,45,46,47,48,49,50,51,54,55,57,59,68,73,74],herk:67,hermaphrodit:52,hermitconjmatrix:[34,52],hermitian:[37,52,67],hessenberg:[37,67],hessenbergq:67,hessfact:67,hesv:67,heterogen:[20,56],hetr:67,hetrf:67,hetri:67,heurist:5,hex2byt:69,hex2num:69,hex:[33,43,69],hexadecim:[33,43,49,69,75],hexagon:52,hexagonblack:52,hibiscu:52,hidden:[39,41,57],hide:21,hierarch:51,hierarchi:[25,41,51],hierarchicalvalu:40,high:[21,24],high_bright:52,high_heel:52,higham:67,higher:[2,4,14,20,24,26,39,45,50,56,57,67,68,69],highest:[14,36,38,48,57,59],highli:[10,36,44,46,51,68],highlight:[12,33],hindi:49,hint:[1,9,39,46,64],hist2d:68,hist:[34,68],histogram:68,histori:[31,33,34,44],history_next:34,history_prev:34,histrang:68,hit:[2,31,34,44,52],hksearow:[34,52],hkswarow:[34,52],hocho:52,hoist:[5,46],hold:[16,21,23,25,28,35],hole:[46,52],holidai:26,home:[2,31,34,44,45,55,62,70],homebrew:44,homedir:[62,71],homer:31,homothet:52,honei:52,honest:26,honey_pot:52,honeybe:52,hood:16,hook:[6,37,52,57],hookleftarrow:[34,52],hookrightarrow:[34,52],hoop:52,hope:[3,27],hopefulli:[5,14,39],horizont:[43,52,56,73,75],horn:52,horner:68,horribl:1,hors:52,horse_rac:52,hospit:52,host:[28,31,42,44,45,57,64,70],hostnam:[21,45],hot:[35,52],hotel:52,hotspr:52,hour:[17,26,49,61,65],hourglass:52,hourglass_flowing_sand:52,hous:52,house_with_garden:52,household:67,how:[4,5,6,16,20,21,23,24,25,26,27,28],howev:[1,2,3,4,6,10,13,14,16,20,21,22,23,24,25,26,27,28,29,30,33,35,36,38,39,40,41,42,44,45,46,47,48,49,51,53,54,56,57,58,59,64,65,67,69],howmni:67,hrectangl:52,hrectangleblack:52,hslash:[34,52],hspace:[34,52],html:[44,64,67,75],html_str:75,htol:64,hton:64,http:[29,31,34,44,45,64,67,68],hub:44,human:[1,26,39,61],hundr:52,hurwitz:68,hush:52,hvcat:[20,30,43,56],hvcat_fil:46,hybrid:29,hyndman:68,hyperlink:44,hyphen:[52,75],hypot:[20,30,38,68],hypotenus:[30,38],i64:12,i686:4,i_1:[3,20],i_2:[3,20],i_3:3,i_d:3,i_j:3,i_k:20,i_n:20,iblock:67,iblock_in:67,ice_cream:52,icecream:52,iceil:76,icon:44,idct:68,idea:[5,23,30,44,46,47,51,55],ideal:[29,33,50],ident:[16,20,21,22,23,30,37,38,39,45,46,48,49,51,52,54,56,57,59,64,67,69,70,75],identifi:[1,10,21,22,30,33,35,39,40,41,43,44,45,46,47,49,51,53,70],ideograph:52,ideograph_advantag:52,idiom:[24,49],idiomat:[28,30,40,50],idl:70,idx:[45,46,75],ieee:[31,33,38,46,67,68,69],if_fals:73,if_tru:73,ifels:[46,57],iff:[57,59],ifft:68,ifftshift:68,iftru:58,ignor:[21,31,34,39,44,49,56,57,64,66,68,75],ignore_invalid_char:64,ignorestatu:57,ihi:67,iid:[20,68],iii:68,iiiint:52,iiint:52,iint:52,ijulia:[27,31,55,64],ill:67,illus:30,illustr:[24,27,39,41,46,47],ilo:67,image_fil:[5,6],imagin:[26,39,44,45,46],imaginari:[22,23,38,43,67,68,69],imath:52,immedi:[21,23,24,29,30,31,33,38,39,40,41,44,45,48,49,51,57,65,70],immut:[5,11,21,23,26,27],imp:52,impact:46,imper:[21,24,30,36,44],implement:[1,5,9,10,14,16],impli:[5,16,23,25,31,33,38,40,44,46,51,57,67],implic:51,implicit:[23,24,45],implicitli:[40,41,51,57],impos:[16,36,51,53],imposs:[28,29,39,46,51],imprecis:76,imul:29,inabl:29,inadequ:11,inadvert:51,inappropri:51,inbound:[46,58],inbox:52,inbox_trai:52,inbuilt:45,inc:29,incant:2,incept:36,inci:[21,67],includ:[1,2,3,4,5,12,14,15,16,17,20,21,24,25,26,27,28,29,30,31,33,35,36,38,39,41,43,44,45,46,47,49,51,52,53,55,56,57,58,61,62,64,67,68,70,74,75,76],include_depend:[41,57],include_str:57,inclus:[8,26,59],incom:[42,45,52,70],incoming_envelop:52,inconsist:[21,52,57],inconveni:[25,29],incorpor:44,incorrect:[39,44,57,58,67],increas:[20,26,47,51,52,56,64,67,68],increment:[26,29,31,34,41,44,52,59,61],incur:[33,39,46,47],incx:[21,67],ind2chr:[49,75],ind2sub:[14,56],ind:[39,56],inde:[14,16,29,46,59,74],indefinit:67,indent:[27,39,41,43,47,49],independ:[20,21,39,45,47,51,56,57,70,72,74],indetermin:21,index1:40,index2:40,index:3,indexexpr:3,indexin:[50,59],indexpid:[45,70],indic:[1,2,14,16,20,21,23,24,25,26,28,33,34,35,38,39,40,42,43,44,46,47,49,50,51,52,53,56,57,58,59,61,64,67,68,73,74,75,76],indirectli:20,indistinguish:[40,74],individu:[27,29,30,41,44,46,47,51,59,67,75],indmax:[56,59],indmin:59,induc:67,indxin:50,ineffici:[20,49,54],inequ:38,inertia:67,inevit:[25,48],inexact:[38,68],inexacterror:[23,24,25,38,51,57,68],inf16:[33,69],inf32:[33,69],inf:[22,33,38,46,67,68,69],infer:[1,4],infin:[33,38,52,67,68,69],infinit:[14,22,38,57,68,69],infix:[24,25,30,53,57],influenc:45,inform:[1,2,5,8,9,10,14,16,21,23],information_desk_person:52,information_sourc:52,infrastructur:[9,13,44,45],infrequ:47,infti:52,ing:[35,57],inher:50,inherit:[13,20,35,51,54,69],init:[6,13,44,45,46,47,59,70,71,72],init_stdio:13,init_work:[45,70],initerror:[24,57],initfn:[45,70],initi:[4,5],initialis:6,initializaton:45,inject:46,ink:[52,75],inlin:[1,5,9,16,21,27,29,31,46,47,50,57,68],inner:1,innermost:[20,46],innersimd:46,innoc:[26,46,52],innocu:[23,39],inod:[57,62],inplaceop:43,input:[1,11,14,16,18,20],inputindex:14,insan:39,insensit:[49,75],insert:1,insertionsort:74,insid:[1,2,5,9,16,21,23,24,25],insist:45,instabl:[29,46,57],instal:[28,31,41],instanc:[10,16,17,20,21,23,24,25,28,35,37,39,40,41,43,45,46,48],instant:[26,40,61],instanti:[14,16,21,51,73],instead:[1,5,9,10,12,14,16,20,21,22,23,24,25,26,27,29,30,31,33,35,38,39,41,42,43,44,45,46,48,49,50,51,53,54,55,56,57,59,61,62,64,66,67,68,69,70,74,75],insteadof:44,instrm:70,instruct:[2,5,6,9,15,21,29,31,36,44,46,47,51,57,72],instrument:47,insuffici:[17,69],int128:[29,33,34,40,43,51,69],int128_str:1,int16:[21,33,34,40,51,58,69,75],int32:[6,20,21,23,25,33,34,40,43,46,49,50,51,57,58,59,69,75],int32_t:28,int64:[12,14,16,20,21,22,23,24,25,26,29,30,33,34,35,39,40,43,45,46,49,51,56,57,58,59,61,68,69,74],int8:[16,20,21,25,33,34,38,40,51,69],intbar:52,intcap:52,intcup:52,integ:[1,3,6,13,14,16,18,20,21,22,23,25,26,28],integr:[22,23,28,48,51,52],integrand:68,intel:[2,46],intellig:[27,44,49],intend:[3,20,21,38,41,44,45,47,53,57,58,59,67],intens:[8,31,36],intent:[41,44,54,57],intention:[21,39],inter:20,interact:[4,5,10,16,18,21,22,24,28,30,31,32,33],interc:52,intercal:52,interchang:[43,51],interconvert:20,interest:[8,12,16,21,23,29,33,39,44,48],interfac:5,interior:[14,52],interleav:52,intermedi:[12,46,56,59,68],intern:[1,4],internet:44,interoper:[25,29,33],interpol:[12,14,27,33],interpret:[4,5,6,8,14,24,25,27,30,33,36,38,39,41,44,46,47,48,49,56,57,61,64,70,71],interrobang:52,interrog:12,interrupt:[24,34,45,57,58,70],interruptexcept:[24,57],intersect:[16,40,52,57,59],intersect_tupl:16,interv:[20,37,44,47,57,65,67,68,69,71],interval_:64,interven:48,interview:33,intfunc:29,intmax_t:[21,58],intorstr:51,intprod:52,intprodr:52,intrins:[5,6,8,35,56,57],introduc:[23,24,29,33,34,39,40,41,45,47,48,49,50,51,54],introductori:[31,47],intset:59,intuit:[8,51,54],intx:52,inv:[37,57,67,68],invalid:[5,21,22,23,28,29,41,45,46,49,58,64],invalidstateexcept:24,invalu:39,invari:[16,23,51,67],invdigamma:68,invers:[20,38,52,56,59,67,68,71],inversewhitecircl:52,invert:[52,67],investig:17,invis:[25,75],invmod:68,invnot:52,invok:[4,5,16,23,24,25,28,30,39,40,41,43,47,48,51,57,64,73,74],involv:[5,8,14,25,29,41,42,45,50,51,54,55,57],invperm:56,invwhitelowerhalfcircl:52,invwhiteupperhalfcircl:52,iobuff:[45,64,75],ios_init_stdstream:6,ios_stdout:4,ios_t:13,ios_writ:13,iostream:[13,34,42,64],iota:52,ipart:68,ipermut:56,ipermutedim:56,iphon:52,ipiv:67,ipv4:[42,64],ipv6:[42,64],ipython:64,irang:[45,67],irfft:68,irrat:40,irregular:26,irrelev:[39,54],is_assigned_char:75,isa:[14,24,38,39,46,50,51,57],isabspath:62,isalnum:75,isalpha:75,isapprox:[68,76],isascii:75,isbit:[10,12,21,41,51,57],isblockdev:62,ischardev:62,iscntrl:75,isconst:57,isdefin:[29,57],isdiag:67,isdigit:75,isdir:62,isdirpath:62,isdst:65,iseltyp:56,isempti:[39,59],isequ:[22,38,50,57,59],iseven:[30,46,54,69],isexecut:62,isfifo:62,isfil:[55,62],isfinit:[20,38,69],isgener:57,isgn:67,isgraph:75,isheap:59,ishermitian:67,isimmut:57,isin:52,isindot:52,isinf:[20,25,38,69],isinobar:52,isinteg:69,isinteract:[31,55,57],isinvb:52,isleaftyp:57,isleapyear:[26,61],isless:[57,68,74],islink:62,islow:75,ism:[49,75],ismark:64,ismatch:[49,75],ismount:62,isn:[14,16,21,25,29,44,48,51,57],isnan:[20,25,38,57,69],isnul:[51,57],isnumb:75,iso:26,isodd:[54,69],isol:[3,8,43,46],isopen:[42,57,64],ispath:62,isperm:56,isplit:67,isplit_in:67,isposdef:67,ispow2:[29,68],isprecompil:57,isprim:69,isprint:75,isprocess:51,ispunct:75,isqrt:68,isread:62,isreadi:[45,70],isreadonli:64,isreal:69,issetgid:62,issetuid:62,issocket:62,issort:74,isspac:[64,75],isspars:[20,56],isstag:16,issticki:62,issu:[2,14,17,21,26,29,33,39,41,43,44,45,46,49,50,51,52,55,67],issubnorm:69,issubset:59,issubtyp:[50,57],issue8859:67,issym:67,istaskdon:[24,70],istaskstart:[24,70],istext:64,istream:64,istril:67,istriu:67,istuesdai:26,isupp:[67,75],isvalid:[49,75],iswrit:62,isxdigit:75,ital:52,item:[16,27,35,43,45,57,59,64,68,70],iter1:1,iter2:1,iter:[1,3,6],iteratorsmd:[20,40],itersym:3,itertyp:35,ith:58,itr:59,itself:[1,5,12,14,15,16,20,21,23,25,27,29,33,35,36,38,39,40,41],ityp:67,izakaya:52,izakaya_lantern:52,j_1:3,j_2:3,j_d:3,jack:52,jack_o_lantern:52,jan:[26,61],januari:[26,61],japan:52,japanes:[49,52],japanese_castl:52,japanese_goblin:52,japanese_ogr:52,jargon:44,java:[24,25,26,29,40,43,49,51,68],javascript:[26,68],jean:52,jeudi:26,jiahao:27,jl_:[4,16,28],jl_add_standard_import:6,jl_alloc_array_1d:[10,28],jl_alloc_array_2d:[10,28],jl_alloc_array_3d:10,jl_alloc_cell_1d:10,jl_alloc_tupl:10,jl_any_typ:6,jl_appli:[4,6],jl_apply_array_typ:[10,28],jl_apply_gener:[4,6],jl_apply_typ:10,jl_args_morespecif:16,jl_array_data:28,jl_array_dim:28,jl_array_len:28,jl_array_ndim:28,jl_array_t:[10,28],jl_atexit_hook:5,jl_base_modul:[6,28],jl_bottom_typ:16,jl_box_:28,jl_box_float32:28,jl_box_float64:28,jl_box_int32:28,jl_box_uint16:10,jl_box_uint8:6,jl_breakpoint:[4,16],jl_call0:28,jl_call1:28,jl_call2:28,jl_call3:28,jl_call:28,jl_compil:4,jl_compile_al:6,jl_core_modul:6,jl_current_task:6,jl_datatype_t:[6,10],jl_dump_llvm_valu:4,jl_egal:10,jl_error:[4,28],jl_errorf:28,jl_eval_str:[4,28],jl_exception_in_transit:1,jl_exception_occur:28,jl_expand:5,jl_f_appli:6,jl_f_i:6,jl_f_top_ev:6,jl_filenam:4,jl_float64_typ:28,jl_fptr_t:10,jl_function_t:[4,10,28],jl_gc_allocobj:10,jl_gc_collect:28,jl_gc_enabl:28,jl_gc_init:6,jl_gc_is_en:28,jl_gc_pop:28,jl_gc_push1:28,jl_gc_push2:28,jl_gc_push3:28,jl_gc_push4:28,jl_gc_push:28,jl_gc_pusharg:28,jl_gc_run_all_fin:[5,6],jl_gc_wb:[10,28],jl_get_builtin_hook:6,jl_get_field:10,jl_get_funct:28,jl_get_glob:6,jl_get_nth_field_check:10,jl_init:28,jl_init_box_cach:6,jl_init_codegen:[5,6],jl_init_frontend:6,jl_init_intrinsic_funct:6,jl_init_primit:6,jl_init_restored_modul:6,jl_init_seri:6,jl_init_task:6,jl_init_typ:[6,10],jl_int32_typ:6,jl_interpret_toplevel_expr:6,jl_interrupt_except:6,jl_intrinsic_typ:6,jl_is_:28,jl_is_float64:28,jl_is_mut:10,jl_lambda_info_t:[4,5,10],jl_lamdbda_info_t:4,jl_lineno:4,jl_load:[4,5,6],jl_macroexpand:5,jl_main_modul:6,jl_module_run_initi:6,jl_new_abstracttyp:6,jl_new_arrai:10,jl_new_arrayv:10,jl_new_bit:10,jl_new_bitstyp:6,jl_new_closur:[6,10],jl_new_generic_funct:10,jl_new_lambda_info:10,jl_new_main_modul:6,jl_new_modul:6,jl_new_struct:10,jl_new_structv:10,jl_new_uniontyp:10,jl_null:6,jl_option:[4,5,6,28],jl_parse_eval_al:6,jl_parse_input_lin:6,jl_parse_next:6,jl_printf:13,jl_ptr_to_array_1d:28,jl_pvalue_t:10,jl_resolve_sysimg_loc:6,jl_restore_system_imag:[5,6],jl_root_task:6,jl_safe_printf:13,jl_save_system_imag:[5,6],jl_set_const:6,jl_set_typeof:10,jl_share:28,jl_static_show:13,jl_stderr:13,jl_stdin:13,jl_stdout:[6,13],jl_subtype_l:16,jl_svec_t:16,jl_sym_t:10,jl_symbol:[6,10],jl_task_typ:6,jl_throw:[4,6],jl_too_few_arg:4,jl_too_many_arg:4,jl_toplevel_ev:6,jl_toplevel_eval_flex:[5,6],jl_toplevel_eval_in:6,jl_trampolin:6,jl_tupl:10,jl_tuple_t:10,jl_tupletype_t:4,jl_tuplev:10,jl_type_error:28,jl_type_intersect:16,jl_type_morespecif:16,jl_type_typ:6,jl_typeof:[4,10],jl_typeof_str:28,jl_typetag_t:10,jl_unbox_float64:28,jl_uncompress_ast:4,jl_uniontype_t:10,jl_uv:[6,13],jl_uv_handle_typ:13,jl_uv_stderr:4,jl_uv_writ:[6,13],jl_value_t:[4,6],jl_vprintf:13,jl_write:13,jlbacktrac:4,jlcall_print_284639:6,jle:29,jlfrontend:5,jltype:10,jmath:52,job:[6,24,45,46,47,67],jobq:67,jobsvl:67,jobu:67,jobv:67,jobvl:67,jobvr:67,jobvsl:67,jobvsr:67,jobvt:67,jobz:67,john:[33,38],joi:[26,52],join:[49,52,62,75],joiner:52,joinpath:[15,28,62,71],jointli:45,joker:52,journal:67,joy_cat:52,jpvt:67,jrang:45,judgment:46,judici:[39,57],jul:61,juli:61,julia_:12,julia_convert_16886:4,julia_dir:28,julia_hom:[15,28,60,70],julia_init:5,julia_init_dir:28,julia_llvm_arg:8,julia_load_path:41,julia_pkgdir:71,julia_print_284639:6,julia_root:2,julia_worker_timeout:70,julia_write_282942:6,julialang:[29,31,34,44,67],julialibm:68,julian2datetim:61,julian_dai:61,juliapars:44,juliarc:[31,34,41,45,55,57,70],juliastat:[43,44],jump:[1,42,46,69],jumppoli:69,jun:61,june:61,juno:27,jupit:52,just:[1,3,5,6,8,10,11,14,16,17,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,38,39,40,42,43,44,45,46,47,48,49],juxtapos:[22,33],juxtaposit:33,k_1:68,k_2:68,kahan:[33,56],kappa:52,karpinski:44,katakana:52,kaufman:67,keep:[16,17,21,24,28,35,41,44,45,46,55,57,70,75],kei:[14,16,24,30,31],kept:[10,36,71,75],kernel:[24,45],kernelcontract:52,keyboard:52,keycap:52,keycap_ten:52,keyerror:[24,57],keymap:34,keytyp:59,keyword:[1,20,21,24,26],keyword_arg:70,kib:44,kick:46,kill:[34,45,57,70],kimono:52,kind:[4,14,17,23,24,25,26,29,38,39,40,42,46,49,51,54,56,57,68,76],kindli:44,kiss:52,kissing_cat:52,kissing_closed_ey:52,kissing_heart:52,kissing_smiling_ey:52,kiwi:57,knew:45,knife:52,know:[2,5,21,24,25,26,28,29,30,33,35,39,41,44,45,46,48,49,50,64],knowledg:[16,46],known:[5,10,16,21,22,23,24,26,27,30,31,33,35,39,40,41,44,46,47,50,51,52,56,67,68],knuth:[68,69],koala:52,koko:52,konstantinid:67,konstantino:67,koppa:52,korean:49,kron:[53,67],kroneck:[53,67],kronrod:68,krylov:67,kth:56,kung:67,kwarg:[30,70,72],kwsorter:1,ky88:67,label:[1,30,46],labelnod:1,labor:8,lack:[29,36,39,43,50,70],ladi:52,laid:[14,20],lambda:[1,4,12,52,67],lamda:52,lanczo:67,land:44,langl:52,languag:[5,18,20,21,24,25,26,28,29,30,32,36,38,39,40,41],lantern:52,lapack:[2,20,37],lappli:43,laptop:[45,47],larg:[10,20,25,28,29,30,35,36,38,39,41,43,44,45,46,51,52,56,57,59,64,67,68],large_blue_circl:52,large_blue_diamond:52,large_orange_diamond:52,larger:[20,23,25,28,33,43,44,49,52,57,59,67,68],largest:[20,25,29,33,56,57,59,67,68],last:[1,3,4,8,14,16,20,24,25,26,28,30,31,33,34,35,38,39,42,43,44,45,49,50,51,52,54,56,57,59,61,62,64,67,68,70,74,75],last_quarter_moon:52,last_quarter_moon_with_fac:52,lastdayofmonth:[26,61],lastdayofquart:[26,61],lastdayofweek:61,lastdayofyear:61,lastmain:57,lat:52,late:52,latenc:[46,48],later:[6,14,20,23,24,26,30,40,44,45,46,50,51,53,57,58,70],latest:[8,29,44,45],latex:[3,27,34,53],lather:55,latin:[52,75],latter:[16,25,43,44,46,48,49,54],laugh:52,launch:[24,31,45,47,70],launch_ntfi:70,law:[36,40],layer:[5,21,45],layout:[1,7],lazi:[23,43,52],lazili:43,lazysinv:52,lbeta:[20,38,68],lceil:52,lcfirst:75,lcm:[38,68],ldexp:[38,68],ldflag:28,ldlib:28,ldlt:67,ldltfact:67,ldsh:52,lea:29,lead:[20,26,29,41,43,44,46,54,67,69,75],leading_on:69,leading_zero:69,leaf:[10,21,46,52,57],leak:17,leaki:24,leap:[26,61],learn:[5,16,27,29,31,46],least:[14,16,20,33,38,42,44,46,47,49,57,59,64,67,68,69,75],leav:[1,23,24,29,39,44,50,52,74],led:47,ledger:52,left:[1,3,20,24,29,30,33,34,38,39,43,44,49,51,52,54,56,57,59,67,68,70,75,76],left_luggag:52,left_right_arrow:52,left_sv:67,leftarrow:52,leftarrowapprox:52,leftarrowbackapprox:52,leftarrowbsimilar:52,leftarrowonoplu:52,leftarrowplu:52,leftarrowtail:52,leftarrowtriangl:52,leftarrowx:52,leftbkarrow:52,leftcurvedarrow:52,leftdasharrow:52,leftdbkarrow:52,leftdotarrow:52,leftdownteevector:52,leftdownvectorbar:52,leftharpoonacc:52,leftharpoondown:52,leftharpoonsupdown:52,leftharpoonup:52,leftharpoonupdash:52,leftleftarrow:52,leftrightarrow:52,leftrightarrowcircl:52,leftrightarrowtriangl:52,leftrightharpoon:52,leftrightharpoondownup:52,leftrightharpoonsdown:52,leftrightharpoonsup:52,leftrightharpoonupdown:52,leftrightsquigarrow:52,leftrightvector:52,leftsquigarrow:52,leftteevector:52,leftthreearrow:52,leftthreetim:52,lefttrianglebar:52,leftupdownvector:52,leftupteevector:52,leftupvectorbar:52,leftvectorbar:52,leftward:52,leftwards_arrow_with_hook:52,leftwhitearrow:52,leg:52,legaci:6,legal:51,legend:37,lemon:52,len:[6,65,75],length:[10,11,14,16,20,21,26,28,30,35,38,39,43,45,46,49,56,57,59,64,67,68,69,70,74,75],leo:52,leopard:52,leqq:52,leqqslant:52,leqslant:52,lescc:52,lesdot:52,lesdoto:52,lesdotor:52,lesg:52,less:[1,14,16,20,21,23,24,26,29,33,38,39,40,43,44,45,47,48,49,50,51,52,57,68,70,74,75],lessapprox:52,lessdot:52,lesseqgtr:52,lesseqqgtr:52,lessgtr:52,lesssim:52,let:[1,3,4,5,11,16,21,23,24,26,27,28,35,39,41,42,43,44,45,47,48,49,51,53],letter:[48,49,52,53,62,75],level:[5,8,10,12,14,20,21,24,27],leverag:[23,45],lexcmp:57,lexic:54,lexicograph:[49,56,57,69,74],lexless:57,lfact:[20,38,68],lfloor:52,lgamma:[20,38,68],lgblkcircl:52,lgblksquar:52,lge:52,lgwhtcircl:52,lgwhtsquar:52,lib:[4,15,21,28,41,49,57],libc:[21,48,65,66],liber:29,liberti:52,libfil:66,libfoo:[21,41],libjulia:[15,28],liblapack:21,libllvm:[2,5],libm:[2,46],libopenbla:2,libopenlibm:2,libra:52,librari:[5,6],libstdc:28,libsupport_init:6,libuv:[5,6],licens:[36,44,46,71],lidict:72,lie:16,lieu:[6,43,67],life:39,lifetim:[45,70],lifo:57,lift:23,ligatur:[52,75],light:52,light_rail:52,lightweight:[4,24,36,44],like:[1,2,3,4,8,9,11,13,14,16,17,20,21,23,24,25,26,27,28,29,30,35,36,38,39],likewis:[12,14,16,24,29,49,51],limit:[5,21,25,26,31,36,39,44,45,47,49,52,61,64,67,72,75],linalg:[40,67],lindahua:44,line:[1,4,5,6,8,12,13,14,15,16,17,21,23,24,25,26],lineag:36,linearcach:16,linearfast:[20,35,56],linearindex:[20,35,56],linearli:[20,56],linearslow:[20,35,56],linecom:64,lineedit:34,linefe:[52,75],lineinfo:72,linenumbernod:1,liner:[24,48],linerang:72,linfo:[4,72],lingo:51,link:[2,8,21,27,28,29,44,52,62,64],linker:63,linreg:67,linspac:[20,43,45,56],lint:46,linux:[2,6,21,28,44,57,60],lip:52,lipstick:52,lisp:[5,30,36,39],list:[1,4,6,8,10,12,16,20,21,24,27,30,31,34,38,41,43,44,45,46,47,51,54,56,57,59,61,66,67,68,70,72,75,76],listen:[42,45,64],listenani:64,liter:[14,21,22,24,25,27],literatur:67,litter:52,littl:[16,26,29,36,40,44,45,46,47,50,51,64],live:[15,29,45,64],ljulia:28,llarc:52,llblacktriangl:52,llbracket:52,llcorner:52,lldb:4,lleftarrow:52,lllnest:52,lltriangl:52,llvm:[2,5,6,7],llvm_assert:8,llvm_debug:8,llvm_ver:8,llvmcall:[5,58],lmoustach:52,lnapprox:52,lneq:52,lneqq:52,lnsim:52,load:2,load_cache_path:[41,57],load_path:[41,57,60],loader:66,loaderror:[24,57],loan:67,local:[1,6,21,23,24,26,28,29,31,39,41,44,45,46,49,51],localdatetim:26,localfil:62,localhost:[42,64],localindex:[45,70],localmanag:[45,70],locat:[20,28,29,30,31,44],lock:[29,45,52,70],lock_with_ink_pen:52,locomot:52,log10:[20,38,68],log1p:[20,38,68],log2:[20,38,68],log:20,logabsdet:67,logarithm:[38,56,67,68],logdet:[37,67],logic:[21,25,38,43,44,45,52,67,69,70],login:[31,45],logm:67,logspac:56,lollipop:52,long_comput:70,longer:[24,28,29,39,44,47,49,55,58,70,71],longest:49,longleftarrow:52,longleftrightarrow:52,longleftsquigarrow:52,longmapsfrom:52,longmapsto:52,longrightarrow:52,longrightsquigarrow:52,look:[4,6,8,14,16,20,21,28,29,30,35,39,41,44,45,46,47,49,51,52,57,59,60,66,70],lookup:[4,21,41,46,64,66],loop:[1,3,5,8,16,21],looparrowleft:52,looparrowright:52,loopback:64,loopinc:46,loopinc_prealloc:46,lorri:52,lose:[44,65],loss:[23,26,51,57],lossless:23,losslessli:[57,61],lot:[14,16,20,29,35,65],loud_sound:52,loudli:52,loudspeak:52,love:52,love_hotel:52,love_lett:52,low:[5,10,14,27,33,45,52,70],low_bright:52,lowercas:[21,26,49,50,75],lowertriangular:[37,40,67],lowest:[10,22,23,33,38,57,59],lowint:52,lozeng:52,lpad:[33,75],lrarc:52,lrblacktriangl:52,lrcorner:52,lrtriangl:52,lrtriangleeq:52,lsh:52,lsime:52,lsimg:52,lsqhook:52,lst:[45,70],lstat:62,lstrip:75,lt_float:46,ltcc:52,ltcir:52,ltime:52,ltoh:64,ltp:67,ltquest:52,lua:36,lucid:33,lufact:67,luggag:52,lump:47,lunat:52,lundi:26,lutridiagon:37,luu:29,lvboxlin:52,lvertneqq:52,lyap:67,lyapunov:67,mac:41,machin:[5,12,21,25,26],machine_spec:70,machinefil:[31,45],maco:66,macrocal:1,macroexpand:[3,5,12,39,57],macron:52,mad:44,made:[20,23,29,30,41,44,45,46,57,64,70,75],mag:52,mag_right:52,magic:40,magnifi:[51,52],magnitud:[38,46,67,68],mahjong:52,mai:[2,3,5,10,11,12,14,15,16,17,20,21,23,24,25,26,27,28,29,30,31,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,61,64,65,67,68,69,70,72,74,75],mail:52,mailbox:52,mailbox_clos:52,mailbox_with_mail:52,mailbox_with_no_mail:52,main:5,mainli:29,mainstream:51,maintain:[1,2,24,41,48,59],maiz:52,major:[20,28,29,39,41,43,44,45,46,47,49,56,71],make:[2,4,5,8,13,14,16,17,20,21,22,23,24,25,27,28,29,30,33,34,35,36,38,39,40,41,42,43],make_expr2:39,male:52,malloc:[10,21,28,65],maltes:52,man:[33,52,65,66],man_with_gua_pi_mao:52,man_with_turban:52,manag:[2,18,21,24],mangl:21,mani:[1,2,3,4,5,10,12,14,15,16,20,21,23,24,25,26,27,28],manipul:[1,4,5,20,21,22,24],manner:[20,21,23,24,25,33,38,39,42,45,51,56,57,58,64,68],manpag:49,mans_sho:52,mantissa:[38,69],manual:[2,5,10,14,16],mao:52,map:6,mapfoldl:59,mapfoldr:59,mapl:52,maple_leaf:52,mapreduc:59,mapreducedim:56,mapsdown:52,mapsfrom:52,mapslic:56,mapsto:52,mapsup:52,mar:[26,52,61],march:[15,26,61],mardi:26,margin:76,mark:1,marker:[64,75],markup:46,masculin:52,mask:[6,43,52,62],massag:52,master:[34,44,45,70,71],master_slav:[45,70],match:[2,16,20,21,23,25,29,33,34,35,36,37,38,39,40,44,49,51,56,57,59,61,68,70,75],matchal:75,math:[3,22,24,29,31,34,46,53,68],math_expr:39,mathemat:[18,20,22,24,25,29,30,32,33,36],matlab:[24,29,36],matrix:14,matter:[2,16,20,25,26,29,39,44,45,46,49,51],matur:[21,44],max:[20,43,46,47,56,59,61,67,68],max_parallel:[45,70],maxab:59,maxdepth:[47,72],maxev:68,maxim:49,maximum:[20,33,43,45,47,50,56,59,67,68,69,70,75],maxintfloat:57,maxit:67,maxsiz:64,maxsum:40,maxval:59,mbf:52,mbfa:52,mbfalpha:52,mbfb:52,mbfbeta:52,mbfc:52,mbfchi:52,mbfd:52,mbfdelta:52,mbfdigamma:52,mbfe:52,mbfeight:52,mbfepsilon:52,mbfeta:52,mbff:52,mbffive:52,mbffour:52,mbffrak:52,mbffraka:52,mbffrakb:52,mbffrakc:52,mbffrakd:52,mbffrake:52,mbffrakf:52,mbffrakg:52,mbffrakh:52,mbffraki:52,mbffrakj:52,mbffrakk:52,mbffrakl:52,mbffrakm:52,mbffrakn:52,mbffrako:52,mbffrakp:52,mbffrakq:52,mbffrakr:52,mbffrakt:52,mbffraku:52,mbffrakv:52,mbffrakw:52,mbffrakx:52,mbffrakz:52,mbfg:52,mbfgamma:52,mbfh:52,mbfi:52,mbfiota:52,mbfit:52,mbfita:52,mbfitalpha:52,mbfitb:52,mbfitbeta:52,mbfitc:52,mbfitchi:52,mbfitd:52,mbfitdelta:52,mbfite:52,mbfitepsilon:52,mbfiteta:52,mbfitf:52,mbfitg:52,mbfitgamma:52,mbfith:52,mbfiti:52,mbfitiota:52,mbfitj:52,mbfitk:52,mbfitkappa:52,mbfitl:52,mbfitlambda:52,mbfitm:52,mbfitmu:52,mbfitn:52,mbfitnabla:52,mbfitnu:52,mbfito:52,mbfitomega:52,mbfitomicron:52,mbfitp:52,mbfitparti:52,mbfitphi:52,mbfitpi:52,mbfitpsi:52,mbfitq:52,mbfitr:52,mbfitrho:52,mbfitsans:52,mbfitsansa:52,mbfitsansalpha:52,mbfitsansb:52,mbfitsansbeta:52,mbfitsansc:52,mbfitsanschi:52,mbfitsansd:52,mbfitsansdelta:52,mbfitsansepsilon:52,mbfitsanseta:52,mbfitsansf:52,mbfitsansg:52,mbfitsansgamma:52,mbfitsansh:52,mbfitsansi:52,mbfitsansiota:52,mbfitsansj:52,mbfitsansk:52,mbfitsanskappa:52,mbfitsansl:52,mbfitsanslambda:52,mbfitsansm:52,mbfitsansmu:52,mbfitsansn:52,mbfitsansnabla:52,mbfitsansnu:52,mbfitsanso:52,mbfitsansomega:52,mbfitsansomicron:52,mbfitsansp:52,mbfitsansparti:52,mbfitsansphi:52,mbfitsanspi:52,mbfitsanspsi:52,mbfitsansq:52,mbfitsansr:52,mbfitsansrho:52,mbfitsanss:52,mbfitsanssigma:52,mbfitsanst:52,mbfitsanstau:52,mbfitsanstheta:52,mbfitsansu:52,mbfitsansupsilon:52,mbfitsansv:52,mbfitsansvarepsilon:52,mbfitsansvarkappa:52,mbfitsansvarphi:52,mbfitsansvarpi:52,mbfitsansvarrho:52,mbfitsansvarsigma:52,mbfitsansvartheta:52,mbfitsansw:52,mbfitsansx:52,mbfitsansxi:52,mbfitsansz:52,mbfitsanszeta:52,mbfitsigma:52,mbfitt:52,mbfittau:52,mbfittheta:52,mbfitu:52,mbfitupsilon:52,mbfitv:52,mbfitvarepsilon:52,mbfitvarkappa:52,mbfitvarphi:52,mbfitvarpi:52,mbfitvarrho:52,mbfitvarsigma:52,mbfitvartheta:52,mbfitw:52,mbfitx:52,mbfitxi:52,mbfitz:52,mbfitzeta:52,mbfj:52,mbfk:52,mbfkappa:52,mbfl:52,mbflambda:52,mbfm:52,mbfmu:52,mbfn:52,mbfnabla:52,mbfnine:52,mbfnu:52,mbfo:52,mbfomega:52,mbfomicron:52,mbfone:52,mbfp:52,mbfpartial:52,mbfphi:52,mbfpi:52,mbfpsi:52,mbfq:52,mbfr:52,mbfrho:52,mbfsans:52,mbfsansa:52,mbfsansalpha:52,mbfsansb:52,mbfsansbeta:52,mbfsansc:52,mbfsanschi:52,mbfsansd:52,mbfsansdelta:52,mbfsanseight:52,mbfsansepsilon:52,mbfsanseta:52,mbfsansf:52,mbfsansfiv:52,mbfsansfour:52,mbfsansg:52,mbfsansgamma:52,mbfsansh:52,mbfsansi:52,mbfsansiota:52,mbfsansj:52,mbfsansk:52,mbfsanskappa:52,mbfsansl:52,mbfsanslambda:52,mbfsansm:52,mbfsansmu:52,mbfsansn:52,mbfsansnabla:52,mbfsansnin:52,mbfsansnu:52,mbfsanso:52,mbfsansomega:52,mbfsansomicron:52,mbfsanson:52,mbfsansp:52,mbfsansparti:52,mbfsansphi:52,mbfsanspi:52,mbfsanspsi:52,mbfsansq:52,mbfsansr:52,mbfsansrho:52,mbfsanss:52,mbfsansseven:52,mbfsanssigma:52,mbfsanssix:52,mbfsanst:52,mbfsanstau:52,mbfsanstheta:52,mbfsansthre:52,mbfsanstwo:52,mbfsansu:52,mbfsansupsilon:52,mbfsansv:52,mbfsansvarepsilon:52,mbfsansvarkappa:52,mbfsansvarphi:52,mbfsansvarpi:52,mbfsansvarrho:52,mbfsansvarsigma:52,mbfsansvartheta:52,mbfsansw:52,mbfsansx:52,mbfsansxi:52,mbfsansz:52,mbfsanszero:52,mbfsanszeta:52,mbfscr:52,mbfscra:52,mbfscrb:52,mbfscrc:52,mbfscrd:52,mbfscre:52,mbfscrf:52,mbfscrg:52,mbfscrh:52,mbfscri:52,mbfscrj:52,mbfscrk:52,mbfscrl:52,mbfscrm:52,mbfscrn:52,mbfscro:52,mbfscrp:52,mbfscrq:52,mbfscrr:52,mbfscrt:52,mbfscru:52,mbfscrv:52,mbfscrw:52,mbfscrx:52,mbfscry:52,mbfscrz:52,mbfseven:52,mbfsigma:52,mbfsix:52,mbft:52,mbftau:52,mbftheta:52,mbfthree:52,mbftwo:52,mbfu:52,mbfupsilon:52,mbfv:52,mbfvarepsilon:52,mbfvarkappa:52,mbfvarphi:52,mbfvarpi:52,mbfvarrho:52,mbfvarsigma:52,mbfvartheta:52,mbfw:52,mbfx:52,mbfxi:52,mbfy:52,mbfz:52,mbfzero:52,mbfzeta:52,mcjit:5,mdai:65,mdblkcircl:52,mdblkdiamond:52,mdblklozeng:52,mdblksquar:52,mdlgblkcircl:52,mdlgblkdiamond:52,mdlgwhtdiamond:52,mdnode:8,mdsmblksquar:52,mdsmwhtcircl:52,mdsmwhtsquar:52,mdwhtcircl:52,mdwhtdiamond:52,mdwhtlozeng:52,mdwhtsquar:52,mean:[1,5,14,15,16,20,21,23,24,26,28],meaning:51,meaningless:74,meant:[25,41,44,48],meantim:44,meanwhil:42,measangledltosw:52,measangledrtos:52,measangleldtosw:52,measanglelutonw:52,measanglerdtos:52,measangleruton:52,measangleultonw:52,measangleurton:52,measeq:52,measur:[26,45],measuredangl:52,measuredangleleft:52,meat:52,meat_on_bon:52,mechan:[6,7],medblackstar:52,median:68,medic:52,medium:52,medwhitestar:52,mega:52,megaphon:52,melon:52,mem:[46,47,72],member:[43,52,57,59,62],membership:52,memdebug2:17,memdebug:17,memo:52,memori:[5,7],men:52,mental:[26,44],mention:[23,25,29,30,40,42,47,51,57,64],mercredi:26,mercuri:52,mere:[45,46],merg:[29,44,59,72],mergesort:74,meridian:52,mersenn:69,mersennetwist:69,mesh:45,mess:23,messag:13,met:70,meta:[1,7],meta_branch:[44,71],metacharact:[48,49],metadata:[1,8,9,10,27],metaprogram:[12,18,27,32,36],meter:11,meterunit:11,meth:40,method:1,method_exist:57,method_to_break:4,methoderror:[16,23,24,25,33,35,40,49,50,51,57,64],methodswith:[12,57],metro:52,mfrak:52,mfraka:52,mfrakb:52,mfrakc:52,mfrakd:52,mfrake:52,mfrakf:52,mfrakg:52,mfrakh:52,mfraki:52,mfrakj:52,mfrakk:52,mfrakl:52,mfrakm:52,mfrakn:52,mfrako:52,mfrakp:52,mfrakq:52,mfrakr:52,mfrakt:52,mfraku:52,mfrakv:52,mfrakw:52,mfrakx:52,mfrakz:52,mho:52,microphon:52,microscop:52,microsecond:[47,57],mid:[46,52],midbarve:52,midbarwedg:52,middl:[38,45,52,68],midlin:52,midpoint:[29,68],midwai:13,might:[1,4,9,14,20,21,24,28,29,30,39,40,42,44,45,46,47,50,51,54,55,57,59,64,69,70],milki:52,milky_wai:52,mill:52,millisecond:[26,45,61,70],mime:64,mimewrit:64,mimic:48,min:[3,20,43,56,59,65,68],minab:59,mind:[17,21,29,46],minibu:52,minidisc:52,minim:[5,17,44,45,51,64,67,68],minimum:[20,24,33,43,44,49,56,59,64,67,68,70],minmax:68,minor:[29,44,46,49,71],minu:[38,52,68],minusdot:52,minusfdot:52,minusrdot:52,minut:[26,31,49,61,65],minval:59,mirror:[10,21,26],miser:17,misfeatur:1,misplac:39,miss:[10,14],mit:[31,36,44,52,71],mita:52,mitalpha:52,mitb:52,mitbbb:52,mitbbbd:52,mitbbbi:52,mitbbbj:52,mitbeta:52,mitc:52,mitchi:52,mitd:52,mitdelta:52,mite:52,mitepsilon:52,miteta:52,mitf:52,mitg:52,mitgamma:52,mith:52,miti:52,mitiota:52,mitj:52,mitk:52,mitkappa:52,mitl:52,mitlambda:52,mitm:52,mitmu:52,mitn:52,mitnabla:52,mitnu:52,mito:52,mitomega:52,mitomicron:52,mitp:52,mitparti:52,mitphi:52,mitpi:52,mitpsi:52,mitq:52,mitr:52,mitrho:52,mitsans:52,mitsansa:52,mitsansb:52,mitsansc:52,mitsansd:52,mitsansf:52,mitsansg:52,mitsansh:52,mitsansi:52,mitsansj:52,mitsansk:52,mitsansl:52,mitsansm:52,mitsansn:52,mitsanso:52,mitsansp:52,mitsansq:52,mitsansr:52,mitsanss:52,mitsanst:52,mitsansu:52,mitsansv:52,mitsansw:52,mitsansx:52,mitsansz:52,mitsigma:52,mitt:52,mittau:52,mittheta:52,mitu:52,mitupsilon:52,mitv:52,mitvarepsilon:52,mitvarkappa:52,mitvarphi:52,mitvarpi:52,mitvarrho:52,mitvarsigma:52,mitvartheta:52,mitw:52,mitx:52,mitxi:52,mitz:52,mitzeta:52,mix:25,mixin:41,mixtur:[25,38],mkdir:62,mkpath:62,mktemp:62,mktempdir:62,mlcp:52,mmap:[64,65,70],mobil:52,mobile_phone_off:52,mod1:68,mod2pi:[38,68],mod:[1,20,33,38,41,57,68],modal:35,mode:[17,31],model:[36,43,52],modern:[33,36,45],modf:68,modif:[10,20,21,30,47,49,51,54,56,67],modifi:[4,15,17,20],modtwosum:52,modul:[1,3,5,6,12,13,15,16,18,26],modular:33,module_nam:57,module_par:57,modulenam:41,modulo:[38,52,68],modulu:[33,38,43,68],mohi:67,moment:[16,26,44,46],mon:61,mondai:[26,61],monei:52,money_with_w:52,moneybag:52,monitor:64,monkei:52,monkey_fac:52,monorail:52,monospac:52,monster:52,mont:45,month:[26,29,40,61,65],monthabbr:61,monthdai:[26,61],monthnam:[26,61],monthtovalu:26,monthtovalueabbr:26,moon:52,moor:[36,67],more:[1,3,4],moreequ:67,moreov:[21,23,39,47,48],morespecif:16,morev:69,mortar_board:52,most:[1,3,4,10,14,16,17,20,21,23,24,25,26,27,28,29,30,33,34,35,36,38,39,40,41,43,44,45,46,47,48,49,51,53,54,55,56,57,58,59,61,64,67,68,69,72,75],mostli:[1,13,36,41,43,49,57,75],motiv:[14,26,39,45],mount:[52,62],mount_fuji:52,mountain:52,mountain_bicyclist:52,mountain_cablewai:52,mountain_railwai:52,mous:52,mouse2:52,mouth:52,mov:29,move:[20,21,24,33,34,36,39,41,44,45,54,62,69,71],movement:34,movi:52,movie_camera:52,moyai:52,mpfr:[33,40,69],mpi:45,ms_async:[60,65],ms_invalid:[60,65],ms_sync:[60,65],msans:52,msansa:52,msansb:52,msansc:52,msansd:52,msanseight:52,msansf:52,msansfiv:52,msansfour:52,msansg:52,msansh:52,msansi:52,msansj:52,msansk:52,msansl:52,msansm:52,msansn:52,msansnin:52,msanso:52,msanson:52,msansp:52,msansq:52,msansr:52,msanss:52,msansseven:52,msanssix:52,msanst:52,msansthre:52,msanstwo:52,msansu:52,msansv:52,msansw:52,msansx:52,msansz:52,msanszero:52,mscr:52,mscra:52,mscrb:52,mscrc:52,mscrd:52,mscre:52,mscrf:52,mscrg:52,mscrh:52,mscri:52,mscrj:52,mscrk:52,mscrl:52,mscrm:52,mscrn:52,mscro:52,mscrp:52,mscrq:52,mscrr:52,mscrt:52,mscru:52,mscrv:52,mscrw:52,mscrx:52,mscry:52,mscrz:52,msg:[39,57,64],msg_bodi:39,msync:65,msys2:28,mtime:[57,62,64],mtt:52,mtta:52,mttb:52,mttc:52,mttd:52,mtte:52,mtteight:52,mttf:52,mttfive:52,mttfour:52,mttg:52,mtth:52,mtti:52,mttj:52,mttk:52,mttl:52,mttm:52,mttn:52,mttnine:52,mtto:52,mttone:52,mttp:52,mttq:52,mttr:52,mttseven:52,mttsix:52,mttt:52,mttthree:52,mtttwo:52,mttu:52,mttv:52,mttw:52,mttx:52,mtty:52,mttz:52,mttzero:52,much:[1,5,17,21,23,24,26,29,33,36,40,41,43,44,45,46,47,48,50,51,52,56,57,67,68],mug:52,muladd:68,mulfun:11,multi:[3,18],multicast:64,multicast_loop:64,multicast_ttl:64,multicor:45,multidimension:[3,20],multilin:[24,43],multilinear:39,multimap:52,multimedia:16,multipl:[3,5,10,14,15,17,20,21,22,23,24,25,26],multipli:[25,27,29,33,59,67,68,73],multiprocess:45,multiset:52,multitask:24,muscl:52,mushroom:52,music:52,musical_keyboard:52,musical_not:52,musical_scor:52,must:[2,3,5,8,10,20,21,22,23,24,25,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,51,53,56,57,58,59,61,62,64,67,68,69,70,71,75],mutabl:[1,10,20,21,29,30,35,51,54,56,57],mutat:[20,27,29,35,43,53,56,59,74],mute:52,mutual:[21,54],my_real_callback:21,myaccount:44,myambiguouscontain:46,myambiguoustyp:46,myappend:40,myarg:24,myarrai:[20,56],mybettercontain:46,mycod:41,mycompar:21,mycompare_c:21,mycontain:46,mycustomexcept:24,myfix:44,myfork:44,myfun:46,myfunc:[21,46,47],myfunct:[9,43],myid:[41,45,70],myimag:64,myintersect:16,mykei:34,mylib:21,mylibvar:21,mymacro:43,mymodul:[29,39,41],mynewcod:29,mypackag:15,myplu:51,myrang:45,mysimplecontain:46,mystdout:41,mysteri:[16,39],mystillambiguoustyp:46,mysum:3,mytask:24,mytyp:[16,29,41,45,46,50],mytypeof:40,myundefvarerror:24,n_1:68,n_d:68,nabla:52,nadir:51,nail:52,nail_car:52,naiv:39,nall:3,name:[1,4,5,6,10,12,15,16,20,21,22,24,25,26,27,29],name_badg:52,namespac:29,nan16:[33,69],nan32:[33,38,69],nan:[22,33,38,46,57,64,68,69,76],nan_dom_err:46,nand:52,nanosecond:57,napprox:52,narg:[4,28],nargout:43,nasymp:52,nativ:[4,5,8,15,21,25],nativetyp:50,natur:[3,14,23,24,25,26,27,29,33,38,44,45,46,50,51,52,62,68],navig:44,nb_avail:64,nbad:[49,75],nbumpeq:52,nbyte:10,nce:47,nchunk:45,ncol:43,ncong:52,nconv:67,ncv:67,ndigit:68,ndim:[14,20,28,35,56,68],ndrang:59,nearest:[33,34,38,68,70],nearli:[20,36,47,48],nearrow:52,necessari:[1,3,9,14,20,21,22,24,25,27,28,29,30,38,39,43,44,45,46,48,50,51,54,57,59,62,64],necessarili:[1,9,14,24,28,49,67],neckti:52,need:[1,2,3,4,5,10,13,14,16,20,21,23,24,25,26,28,29,30,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,61,62,64,65,68,71,72,74,75],needl:75,neg:[22,23,24,26,29,33,38,43,52,67,68,69],negat:[24,33,38,44,52,61],negative_squared_cross_mark:52,neglig:74,nehalem:2,neighbor:20,neither:[14,16,24,29,33,40,49,52,56,58,62],nel:75,nelli:40,neovnwarrow:52,neovsearrow:52,neptun:52,neqsim:52,nequiv:52,nest:[3,9,12,24,39,47,52,54,57,68],nestabl:73,nestedgreatergreat:52,nestedlessless:52,net:46,netlib:67,network:[18,32],neumaier:56,neuter:52,neutral:[52,59],neutral_fac:52,nev:67,never:[21,24,25,30,31,39,46,48,51,54,58,61,64,68],nevertheless:40,new_moon:52,new_moon_with_fac:52,newbranch:44,newcom:[29,44],newer:44,newest:71,newli:[42,44,45,51,54,70],newlin:[42,49,64,75],newline2l:75,newline2lf:75,newline2p:75,newobj:10,newspap:52,newstruct:10,newvarnod:1,nexist:52,nexpr:3,next:[1,2,6,14,15,16,21,24,26,28,29,33,34,35,39,42,43,44,45,46,47,49,51,54,56,57,59,61,64,65,68,69,70,71,75],nextfloat:[33,69],nextidx:45,nextind:[49,75],nextpow2:68,nextpow:68,nextprod:68,nfc:75,nfd:75,nfield:[10,57],nfkc:75,nfkd:75,ngener:3,ngeq:52,ngeqslant:52,ngtr:52,ngtrsim:52,nhdownarrow:52,nhead:45,nhuparrow:52,nib:52,nice:68,nichola:67,nif:3,night:52,night_with_star:52,nine:52,niobar:52,nisd:52,niter:67,nle:48,nleftarrow:52,nleftrightarrow:52,nleq:52,nleqslant:52,nless:52,nlesssim:52,nlink:[57,62],nloop:3,nmemb:21,nmid:52,nmult:67,nni:52,nnz:[20,56],no_affin:2,no_bel:52,no_bicycl:52,no_entri:52,no_entry_sign:52,no_good:52,no_mobile_phon:52,no_mouth:52,no_pedestrian:52,no_smok:52,node:[1,5,31,45,51,57,70],nodej:64,nofield:51,noh:[49,75],noinlin:[1,27],nois:[30,33,46,47],nolinebreak:52,nolta:44,nomenclatur:23,nomin:51,non:[3,17,20],none:[1,12,16,17,20,23,24,29,30,31,39,40,46,47,50,51,54,57,71,76],nonempti:67,nonfork:52,nonneg:24,nonposit:67,nonprincip:67,nonscalar:35,nonsymmetr:67,nontrivi:56,nonzero:[20,51,56,67],noop:37,nope:26,nor:[33,40,45,49,52,56,58,62,70],norm:[46,51,67,68],normal:[2,20,21,22,23,24,26,28,29,30,39,41,43,44,48,49,52,54,56,57,62,68,69,71,75],normalform:75,normalize_str:75,normpath:[62,71],normtyp:67,north:52,nose:52,notabl:[8,21,28,38,54],notat:[20,22,30,33,36,38,39,43,48,49,51,52,54,59,64],note:[2,4,5,6,10,11,12,14,15,16,17,20,21,22,24,25,26],notebook:[52,64],notebook_with_decorative_cov:52,noteworthi:[18,32],notgreatergreat:52,notgreaterless:52,noth:[1,3,6,10,15,16,21,24,25,28,29,34,39,42,44,46,48,49,50,51,57,60,62,64,67,68,70,71,75,76],nothing:10,notic:[21,24,25,28,29,30,35,39,41,42,45,46,49,51],notif:[45,64,70],notifi:[10,21,24,28,44,45,64,70],notin:52,notion:[14,25,26,48,68,74],notlefttrianglebar:52,notlessgreat:52,notlessless:52,notnestedgreatergreat:52,notnestedlessless:52,notori:21,notrighttrianglebar:52,notsquaresubset:52,notsquaresuperset:52,nov:[26,61],novemb:[26,61],now:[1,4,6,11,14,15,16,21,23,25,26,28,29,35,39,40,42,43,44,45,46,47,51,55,61,64],nowher:25,nparallel:52,npolint:52,nprec:52,npreccurlyeq:52,npreceq:52,nprecsim:52,nproc:[45,70],nref:3,nrightarrow:52,nrm2:67,nrow:43,nsim:52,nsime:52,nsqsubseteq:52,nsqsupseteq:52,nstep:46,nsubset:52,nsubseteq:52,nsubseteqq:52,nsucc:52,nsucccurlyeq:52,nsucceq:52,nsuccsim:52,nsupset:52,nsupseteq:52,nsupseteqq:52,nsv:67,nth:49,nthperm:56,ntoh:64,ntriangleleft:52,ntrianglelefteq:52,ntriangleright:52,ntrianglerighteq:52,ntupl:[3,14,35,39,45,57,70],nul:[21,57,75],nullabl:[29,45,50],nullexcept:[51,57],nullspac:67,num2hex:69,num:[22,23,25,30,51,65,68,69],numcor:76,numer:[8,21,22,23,25,29,31],numericextens:44,numero:52,numpi:[43,46],nut:52,nut_and_bolt:52,nutshel:44,nvdash:52,nvleftarrow:52,nvleftarrowtail:52,nvleftrightarrow:52,nvrightarrow:52,nvrightarrowtail:52,nvtwoheadleftarrow:52,nvtwoheadleftarrowtail:52,nvtwoheadrightarrow:52,nvtwoheadrightarrowtail:52,nwarrow:52,nworker:[46,70],nwovnearrow:52,nx1:43,nzrang:56,nzval:[20,67],obar:52,obei:69,obj1:29,obj2:29,obj3:29,obj:[4,23,40,57],objconstructor:29,object:[1,4,5,6,7,8],object_id:[41,57],object_inst:58,objectiddict:[41,57,59],obliqu:52,observ:[12,25,33,49,68],obslash:52,obtain:[21,24,28,45,47,53,58,62,64,65,67,68,72,75],obviou:[1,14,23,24,29,30,45,49],obvious:[41,46,53],occas:51,occasion:[2,29,39,40,44,45,55],occur:[2,4,16,21,24,25,29,33,35,39,40,41,43,45,46,47,48,49,51,57,61,64,70,74],occurr:75,ocean:52,ocirc:52,oclock:52,ocommatopright:52,oct:[44,61,69],octal:[33,43,49,69],octob:61,octopu:52,odd:[14,26,44,46,51,54,69],oden:52,odiv:52,odot:52,odotslashdot:52,off:[1,5,24,25,36,38,44,45,52,64,67,70],off_t:58,offend:64,offer:[2,20,38],offic:52,offici:[35,44],offset:[5,12,14,20,39,49,57,58,64,70],often:[2,14,16,17,20,21,23,24,25,26,30,33,35,36,37,38,39,40,41,43,44,45,46,47,50,51,57,68,70],oftentim:46,oftyp:[46,57],ogonek:52,ogr:52,ogreaterthan:52,ohm:52,oiiint:52,oiint:52,oint:52,ointctrclockwis:52,ok_hand:52,ok_woman:52,old:[28,29,33,34,51,64,69],older:[3,15,34,52,67],older_man:52,older_woman:52,olessthan:52,olsen:26,omega:52,omicron:52,ominu:52,omit:[16,20,21,24,25,30,31,40,45,50,51,67,68,75],onc:[1,2,4,16,23,28,29,31,33,36,38,39,40,41,43,44,45,46,47,48,54,56,57,59,64,70,71],oncom:52,oncoming_automobil:52,oncoming_bu:52,oncoming_police_car:52,oncoming_taxi:52,ongo:25,onli:[1,4,6,8,10,14,16,21,22],onlin:[33,44],onto:[1,24,29,33,43,45,64],oop:[29,44],op1:39,op2:39,opaqu:[10,64,66],open:[2,20,24,30,36,41,42,44,45,47,48,49,52,62,64,67,71],open_file_fold:52,open_hand:52,open_mouth:52,openbracketleft:52,openbracketright:52,operand:[22,23,24,25,30,38,46,51],operm:62,ophiuchu:52,oplu:52,opluslhrim:52,oplusrhrim:52,oppos:[2,24,27,75],opposit:[28,43,51,68],opr1:39,opr1f:39,opr2:39,opr2f:39,opt:[8,22,35,54,56],optic:52,optim:5,option:[3,4,6],oqaqu:10,or_int:46,orang:[52,57],orange_book:52,ord:[49,59],order:[1,4,5,16,20,21,23,24,26,28,30,33,35,38,39,41,43,44,45],orderedpair:23,ordin:52,ordinalrang:[40,74],ordinari:[21,29,39,40,49,51,57,67,68],ordschur:67,org:[29,31,34,44,45,64,67,68],organ:[40,43,44,51],orghr:67,orglq:67,orgqr:67,orient:[25,36,40,51,67],origin:[20,21,24,25,26,44,46,51,52,57,59,64,65,67,71,74,75],ormlq:67,ormqr:67,ormrz:67,ornament:52,orthogon:[52,67],orthonorm:67,os_nam:[21,60],oscillatori:68,oslash:52,ostream:64,osx:[2,6,21,44,57],other:[2,3,4,5,6,8,10,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],otherlib:41,otherwis:[5,8,10,12,16,20,21,23,24,26,29,33,38,39,40,43,44,45,48,51,53,56,57,59,61,62,64,67,68,69,70,71,72,75],otim:52,otimeshat:52,otimeslhrim:52,otimesrhrim:52,oturnedcomma:52,ouch:29,ouput:2,our:[2,6,14,16,25,26,28,29,35,40,45,46,47],ourselv:35,out:[2,4,8,14,16,20,21,22,23,26,28,39,40,42,43,44,45,46,47,48,51,52,54,57,64,68,71],outbox:52,outbox_trai:52,outcom:[26,29],outer:1,outfil:30,outlin:24,outliv:[54,57],outofmemoryerror:[24,57],output:[2,4,12,13,28],outset:44,outsid:[23,24],outstand:14,outstrm:70,outward:40,over:[1,4,5,6,14,16,20,21,24,29,33,35,36,38,39,40,43,44,45,46,49,50,51,52,56,59,61,64,67,68,69,70,72,75],overal:[23,40,46,47],overbar:52,overbrac:52,overbracket:52,overflow:[29,30],overflowerror:[24,57],overhead:[14,21,29,33,37,43,45,46,47],overlai:52,overlap:[13,46,49,52,56,67,75],overleftarrow:52,overleftrightarrow:52,overlin:52,overload:23,overrid:[8,31,35,51,57,59,64],overridden:27,overscor:52,overwrit:[59,67,68],overwritten:[6,20,53,56,67,68],ovhook:52,own:[1,10,16,21,23,24,25,35,36,38,39,41,43,44,45,46,47,49,51,56,57,58,59,62,64,69,70],owner:[44,62],pace:36,pack:[21,50,51,56],packag:[15,18,20,21,26,27],packet:64,pad:[21,69,75],page:[2,14,29,34,35,44,52,65,66],page_facing_up:52,page_with_curl:52,pager:[52,57],pai:[20,29],pair:[16,21,23,25,28,30,38,39,40,41,45,49,51,52,54,57,59,64,67,68,70],palat:52,palett:52,palm:52,palm_tre:52,panda:52,panda_fac:52,paper:[33,52],paperclip:52,paradigm:[36,40],paragraph:[27,38,52,75],parallel:[18,24,31,32,36,43],parallelogram:52,parallelogramblack:52,param:[10,45,70],paramet:1,parameter:[24,46,51,67],parametr:[16,20],paren:50,parent:[10,14,17,20,28,41,47,48,51,54,56,57,62,70],parenthes:[1,21,24,30,33,39,43,49],parenthesi:[3,30,43,52],parenthet:33,parentindex:[14,56],park:52,parlanc:[26,39,51],pars:[1,3,4],parse_opt:6,parseerror:[24,57],parseip:64,parser:[1,5,6,26,27,39,49],part:[1,5,20,22,23,25,26,29,35,39,41,45,46,48,49,52,56,57,61,62,64,67,68,71,75],part_alternation_mark:52,parti:52,partial:[16,21,24,39,46,49,52,59,68,74,76],partialmeetcontract:52,partialquicksort:74,particip:[25,33,40,44,45,70],particularli:[4,16,24,25,40,43,46,49,50,51,57],partit:[56,70],partli:[36,44],partly_sunni:52,pass:[4,5],passport:52,passport_control:52,passwd:48,passwordless:[31,45],past:[36,39,48,57],pat:75,patch:[44,49,71],patchwork:40,path:[6,21,24,27,28],path_to_your_script:2,patholog:39,patient:68,pattern:[3,5,20,21,24,35,39,42,43,45,46,49,55,57,61,64,75],paus:42,paw:52,pcre:49,pdf:48,peach:52,peak:67,peakflop:67,pear:[43,52],pearson:68,ped:65,pedagog:25,pedestrian:52,peek:59,pem:70,pen:52,penalti:[46,50],pencil2:52,pencil:[44,52],pend:28,penguin:52,penros:67,pensiv:52,pentagon:52,pentagonblack:52,penv:16,peopl:[44,62],per:[21,27,39,41,45,49,52],perceiv:75,perfect:26,perfectli:[41,45,46],perform:[3,9,14,16,18,20,21,22,24,25,26,28,29,30,32,33,35,36,38,39,40,41,43,44,45],performing_art:52,perhap:[3,4,16,23,26,29,39,40,45,46,49,51],perl:[24,25,30,31,36,48,49,64],perlr:49,perm:[56,67],perman:[44,52],permiss:[46,62],permit:[10,16,21,31,38,51,59,69],permut:[25,56,67,74],permutedim:56,perp:52,perpendicular:52,persev:52,persever:52,persist:41,person:[39,44,52],person_frown:52,person_with_blond_hair:52,person_with_pouting_fac:52,perspcorrespond:52,perspect:[39,52],pertain:[43,54],pertin:2,perus:23,peseta:52,pharyng:52,phase:[2,4,22,41,68],phi:52,philadelphia:67,philosophi:[21,44],phone:52,php:26,phrase:5,physic:[11,26],pick:[4,8,16,24,40,44,45,68,69,74],pictur:[30,46],pid:[45,46,70],piec:[5,13,23,24,45,47,50,51],piecewis:40,pig2:52,pig:52,pig_nos:52,pilcrow:52,pile:52,pill:52,pine:52,pineappl:[49,52,75],pinv:67,pipe:[13,42,48,52,57,64],pipebuff:64,pipeendpoint:64,pipeserv:[42,64],pisc:52,pistol:52,pitchfork:52,pitfal:[48,69],pittsburgh:26,piv:67,pivot:[37,67],pizza:52,pkg1:71,pkg2:71,pkg:[40,41,44,49,57,71],place:[9,13,15,16,20,21,24,25,27,28,29,33,34,38,39,41,43,46,47,51,52,53,54,56,57,59,67,68,74],plai:[16,46,52],plain:[21,23,30,39,45,49,51,57,64],plan:[1,8,41,44,68],plan_bfft:68,plan_brfft:68,plan_dct:68,plan_fft:68,plan_idct:68,plan_ifft:68,plan_irfft:68,plan_r2r:68,plan_rfft:68,planck:52,planckconst:52,plane:68,planner:68,platform:[2,4,6,10,13,15,21,29,34,45,57,64,65,66,71,76],pleas:[2,21,62],plot:[30,44,67],plu:[34,38,47,50,52,64],plug:[52,69],plumb:[45,48],plural:44,plusdot:52,pluseqq:52,plushat:52,plussim:52,plussubtwo:52,plustrif:52,pluto:52,pma:44,pmap:[45,70],pmax:43,pmin:43,png:64,point:[1,4,5,6,8,10,12,13,16,18,20,22,23,24,25,28,29,30,31,32],point_down:52,point_left:52,point_right:52,point_up:52,point_up_2:52,pointer:[5,6,10,13,14,20],pointer_from_objref:[16,21,58],pointer_to_arrai:[21,58],pointi:51,pointint:52,pointless:30,pole:52,polic:52,police_car:52,polici:8,polish:52,poll:[64,70],poll_fd:[64,70],poll_fil:64,pollint:70,polyalgorithm:67,polygamma:68,polymorph:[25,51],polynomi:[30,33,68,69],poo:52,poodl:52,pool:[6,10,17,45,70],poor:[23,29],poorer:46,poorli:[14,46],pop:[1,29,50,59,64],popdisplai:64,popmeta:9,popper:52,popul:[16,21,43,44,69],popular:[22,36,51],port:[31,42,45,48,64,70],port_hint:64,portabl:[21,38,64,72],portion:[2,10,24,45,49,61,69],posdefexcept:67,posit:[20,24,26,30,33,38,40,44,46,49,54,56,59,64,67,68,69,74],posix:66,possess:45,possibl:[10,11,14,15,16,17,20,21,23,24,25,26,28,29,30,33,35,36,39,40,41,44,45,46,47,49],post:[3,21,29,31,33,38],post_offic:52,postal:52,postal_horn:52,postalmark:52,postbox:52,postexpr:3,postscript:64,posv:67,pot:52,potabl:52,potable_wat:52,potato:52,potenti:[21,24,29,38,39,41,43,44,46,47,51,53,57,59,64,66],potr:67,potrf:67,potri:67,pouch:52,poultri:52,poultry_leg:52,pound:52,pout:52,pouting_cat:52,pow:[11,43],power:[3,20,23,24,29,30,35,36],power_by_squar:29,powermod:68,powerpc:21,pppprime:52,ppprime:52,pprime:52,practic:[3,21,24,25,26,27,41,45,46,49,51,64],prai:52,pre:[2,3,6,16,25,44],prealloc:[35,46,56,67,68,74],prec:52,precapprox:52,precaut:21,preccurlyeq:52,preced:[14,21,24,33],preceq:52,preceqq:52,precis:[25,26,29,30],precnapprox:52,precneq:52,precneqq:52,precnsim:52,precompil:[5,15,31],precsim:52,predefin:[22,25,51],predic:[56,59,64],predict:[28,29],preemptiv:45,preexpr:3,prefer:[27,29,34,36,50,57,58,62,64,67,69,74],prefix:[3,6,20,21,33,34,39,43,45,48,49,57,58,61,66,68,70,71,73,75],preload:45,prematur:21,premium:29,prepar:3,prepars:[2,15],prepend:[20,55,59],preprocessor:39,prereleas:[34,44],prescript:52,presenc:[26,29,45,51,59],present:[1,3,23,29,31,33,40,42,44,46,48,51,52,57,59,70,75],preserv:[6,20,21,50,59,68],press:[27,34,42,67,70],pressur:45,presum:23,pretend:49,pretti:[26,35],prev:64,prevent:[4,41,46,57],prevfloat:[33,69],prevind:75,previou:[14,24,28,30,34,39,44,46,47,48,51,56,57,61,64,67,68,69,70,72,75],previous:[5,12,23,29,46,51,57,64],prevpow2:68,prevpow:68,prevprod:68,primal:69,primari:[16,30,51],primarili:[5,72],prime:[52,53,68,69],primesmask:69,primit:[5,21,22,24,28,33,36,38,45],princess:52,princip:[22,46,67],print:[2,4,5,6,8,12,13,16,24,28,29,31,34,38,39,41,42,43,44,45,46,47,48,49,52,57,64,67,71,72,75,76],print_escap:[64,75],print_join:64,print_shortest:64,print_unescap:[64,75],print_with_color:64,printabl:[64,75],printarg:29,printer:75,printf:7,println:[3,6,12,13,21,24,28,29,31,33,35,38,39,40,42,43,45,46,48,49,51,59,64,76],printout:39,prior:[14,25,29,30,62],priori:[10,21],priorit:59,prioriti:59,privat:[35,39,41,44,54],privileg:64,probabilist:69,probabl:[20,21,23,24,26,27,29,36,38,43,46,47,51,56,57,68,69],problem:[4,21,23,24,25,29,36,39,40,44,45,46,49,50,54,67,68],problemat:[29,57],proc:[10,31,45,70],proce:[5,40,44,45],procedur:[2,24,44,47,67],proceed:70,process:2,process_exit:57,process_messag:[45,70],process_opt:6,process_run:57,processexitedexcept:57,processor:[15,31,45,46,67,68,76],prod:[35,43,52,59],produc:[20,21,23,24,25,29,30,33,39,41,43,45,46,47,48,49,53,57,64,67,68,70],product:[21,24,36,37,43,48,52,53,56,59,62,67,68],prof:47,profil:[17,18,32,40,46],profileview:[46,47],proflin:52,profoundli:39,profsurf:52,prog:39,prognam:17,program:[2,5,6,10,17,18,20,21,24,25,28,29,30,31,32,33,34,36],programfil:31,programm:[24,25,29,36,39,42,45,51],programmat:[23,27,39,44,45,49],progress:[16,27,46],project:[28,36,44,46,55,67],prolept:[26,61],promis:46,promot:7,promote_op:11,promote_rul:[11,25,57],promote_shap:56,promote_typ:[11,25,50,57],prompt:[4,16,21,31],promptstat:34,proof:52,propag:[5,21,22,24,46,54,70],proper:[21,45,51],propercas:26,properli:[2,41,57],properti:[1,9,10,28,46,51,52,57,59,74],propertylin:52,proport:[47,52,68],propos:44,propto:52,protect:[44,58,62],protocol:44,prototyp:[21,36],prove:52,provid:[3,9,11,12,13,17,20,21,22,23,24,25,26,30,31,33,35,36,38,39,40,41,42,43,44,45,47,49,50,51,53,54,55,56,57,59,61,62,64,67,68,69,70,71,74,75,76],provis:23,proxi:[45,70],prurel:52,pseudo:[1,5,44],pseudoinvers:67,psi:52,pstrf:67,ptl:67,ptld:67,ptr:[10,13,16,20,21,29,40,41,50,51,58,64,65,75],ptrdiff_t:[21,58],ptsv:67,pttr:67,pttrf:67,publicli:44,publish:29,pull:[5,44,47,67,71],pump:52,punctuat:[18,49,53,63],pure:[14,30,51,70],pure_instruct:29,purer:51,purpl:52,purple_heart:52,purpos:[10,12,20,27,30,33,39,40,41,45,46,51,54,57,60,64,70],purs:52,pursu:61,push:[1,14,28,29,35,41,43,44,46,50,59,64,71],pushdisplai:64,pushmeta:9,pushpin:52,put:[28,31,34,40,41,44,45,46,47,52,55,56,66,68,70,74],put_litter_in_its_plac:52,pwd:[17,62,70],pyplot:[44,67],python:[24,25,26,28,30,36,38],qbp:67,qed:52,qrcompactwi:[37,67],qrcompactwyq:67,qrfact:67,qrpackedq:67,qrpivot:[37,67],qsort:21,quad:52,quadgk:68,quadrant:[52,68],quadratur:68,quadrupl:52,qualifi:[29,41,54,57],qualiti:21,quantil:68,quantiti:67,quarter:[26,52,61],quarternot:52,quarterofyear:[26,61],quasi:[1,67],quaternion:52,queri:[10,20,24],questeq:52,question:[18,25,28],queu:[24,70],queue:[24,45,59,70],quick:[20,34,50],quickli:[45,68],quicksort:74,quiet:31,quit:[5,14,17,20,21,23,24,25,26,29,30,31,34,35,38,39,40,44,45,46,47,48,49,51,54,57,72,74],quot:[1,3,9,12,21,27,34],quotat:[49,52],quotenod:[1,39],quotient:[38,68],qux:[48,51],qword:29,r2hc:68,r2r:68,r_str:[39,75],rabbit2:52,rabbit:52,race:[48,52,70],racehors:52,racquet:52,rad2deg:68,radian:[22,38,68],radic:[26,52],radio:52,radio_button:52,rage:52,rai:52,rail:52,railwai:52,railway_car:52,rain:52,rainbow:52,rais:[23,24,28,29,38,39,40,41,46,49,51,52,57,58,62,66,69,70],raised_hand:52,raising_hand:52,ram:[45,52],ramen:52,ramif:26,rand2:45,rand:[20,24,35,39,43,45,46,47,56,64,69,74],randcycl:56,randexp:69,randjump:69,randn:[20,45,46,69,74],random:[20,43,45,46,47,56],randomdevic:69,randomli:[45,46,56,69],randommatric:44,randperm:56,randstr:75,randsubseq:56,rang:[3,14,20,21,24,26,29,33,35,37,40,41,43,44,45,46,49,51,56,57,59,61,67,68,70,72,73,74,75],rangeexpr:3,rangl:52,rank:[45,67],rapid:76,rapidli:[6,46],rasp:52,rat:[44,52],rata2datetim:61,rata:61,rate:[29,67,69],rather:[14,16,20,21,23,24,26,29,30,31,33,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,56,57,59,62,67,75],ratio:[22,23,25,51,69],ration:18,rational:33,raw:[5,26,41,42,61,64],rawfd:70,rax:29,rbind:43,rbp:29,rc1:[44,49],rc2:49,rceil:52,rcond:67,rcondv:67,rdev:[57,62],rdi:29,rdiagovfdiag:52,rdiagovsearrow:52,rdsh:52,reach:[5,16,23,24,45,64],reachabl:[10,13,57],read:[3,5,8,10,13,24,25,28,29],read_and_capit:42,readabl:[20,21,39,40,43,49,50,64],readal:[42,48,64],readandwrit:57,readavail:64,readbyt:[42,64],readchomp:64,readcsv:64,readdir:62,readdlm:64,reader:[23,25,45,48,51],readi:[24,30,44,45,47],readili:[14,46],readlin:[42,64],readlink:62,readm:[44,71],readonli:64,readonlymemoryerror:[24,57],readuntil:64,real:[4,16,21,22,23,24,25,26,28,29,30,33,40,43,45,46,49,50,51,57,64,67,68,69],realist:24,realiz:[29,50,67],realli:[4,16,21,23,25,29,39,44,46,47,50,51,56],realloc:65,realmax:57,realmin:57,realpath:62,reappear:44,rearrang:1,reason:[14,15,16,17,21,23,24,25,26,29,36,39,41,45,46,47,48,49,51,54,74],reassign:[5,29,53],rebind:[29,38,43],rebuild:15,recal:[23,25,33,39,40,49,51],recap:51,receiv:[21,35,39,40,44,45,52,64,70],recent:[4,34,44],reciproc:67,recommend:[3,20,21,22,28,33,36,38,44,46,47,53,67,68,70],recompil:[4,41,46,51,57],recomput:44,reconstruct:[20,29,67],record_backtrac:4,recreat:52,rectangl:52,rectangular:[52,67],recur:[26,61],recurs:[1,5,12,20,21,23,24,39,41,44,47,54,57,62,67,68,71],recv:64,recvfrom:64,recycl:52,red:[46,52,57,64],red_circl:52,redefin:[29,53],redefinit:29,redesign:41,redft00:68,redft01:68,redft10:68,redft11:68,redirect:[34,48,57,64],redirect_stderr:64,redirect_stdin:64,redirect_stdout:64,redisplai:64,reduc:[17,21,22,29,30,33,41,45,46,47,49,56,57,59,67,70],reducedim:56,reduct:[43,45,46,56,59,70],redund:[1,25,39,44,50,51],reenable_sigint:58,reentrant:70,reentrantlock:[29,70],ref:[1,6,21,46,58,68],refer:[1,2],referenc:[20,21,27,28,41,49,51,57,58,59,66,70],referenti:23,reflect:10,reflector:67,regard:[43,49,65],regardless:[12,13,24,33,40,44,51,57],regex:[39,49,57,75],regexmatch:[49,75],region:[54,56,59,65,67,68],regist:[4,5,10,34,41,44,45,52,57,64,70,71,74],registerhandl:76,registr:44,regress:67,regular:[20,29,39,45],reid:31,reim:68,reinit_stdio:13,reinstal:44,reinterpret:[20,21,56,69],rejectna:75,rel:[10,12,14,25,26,27,33],relat:[4,16,18,21,24,27,45,46,49,51,52,63,69],relationship:[8,51,67],relax:[23,52],releas:[8,21,28],relev:[5,14,16,21,27,43,45,46,47,50,57,67,70],reli:[13,14,29,35,50,51,62,68,74],reliabl:64,reliev:52,reload:[29,41,44,55,57],relpath:62,reltol:68,relton:67,rem1:68,rem:[33,38,68],remain:[5,14,21,24,35,39,40,44,45,46,51,56,58,74],remaind:[33,38,39,68,73],rememb:[21,24,26,28,30,44,45,46,50],reminisc:39,remot:44,remotecal:[45,50,70],remotecall_fetch:[45,46,50,70],remotecall_wait:[45,70],remoteexcept:[24,70],remov:1,remove_destin:62,renam:[39,62,64],renc:47,render:[27,28,52],reorder:[46,59,67],rep:[46,69],repeat:3,repeat_on:52,repeatedli:[6,24,44,46,61,64],repetit:[3,24,39],repl:[5,6,16,27,28],replac:[3,8],replic:[20,38],repmat:[20,46,67],repo:[44,71],report:0,repr:75,repres:[1,10,11,12,13,14,16,20,21,22,23,24,25,26,27,28,29,33,37,39,43,45,46,47,48,49,50],represent:[1,5,10,11,12,20,23,25,26,29,33,38],reprmim:64,reproduc:69,repstr:34,request:[2,6,20,23,24,25,28,31,42,44,45,47,56,64,67,69,70,71],requir:[4,10,12,14,20,21,23,24,25,28,29,30,35,36,38,39,41,42,43],requisit:50,rese:69,resembl:[45,51],reserv:[30,41,59],reset:[44,47,64],reshap:[14,20,41,56],resid:[47,61,67],residu:67,resiz:[56,59,64],resolut:[42,44,57,61],resolv:[1,21,26,29,33,39,40,41],resort:44,resourc:24,respect:[3,16,20,22,24,25,26,27,33,34,38,43,46,48,49,51,56,57,58,64,67,68,75],respond:44,respons:[21,24,28,44,45,46],rest:[5,20,23,25,44,46,59],restart:[24,45,55,70],restor:[57,70],restore_sign:6,restrict:[11,21,23,27,40,41,51,53,57,64,67],restroom:52,result:[1,4,5,8,10,11,12,14,16,20,21,22,23,24,25,26,28],resultexpr:76,resum:[24,42],ret:[12,28,29,46],ret_unbox:28,retain:[45,48,59],retexpr:39,rethrow:[24,28,57,76],retri:70,retriev:[13,20,21,26,27,28,42,45,54,59,65,72,75],retroflex:52,retun:45,returntyp:[21,58],retval:58,reus:[44,46,54,59,67,68],reusabl:[21,46,50],rev:74,revangl:52,revangleubar:52,reveal:[16,23,47,51],revemptyset:52,revers:[5,21,23,28,34,43,52,56,58,64,74,75],reverseind:56,reverseupequilibrium:52,revert:6,review:21,revisit:67,revolut:61,revolv:52,revolving_heart:52,revstr:34,rewind:52,rewrit:[28,30,39,46,49],rewritten:39,rfft:68,rfloor:52,rfn:56,rho:52,ribbon:52,rice:52,rice_bal:52,rice_crack:52,rice_scen:52,rich:[35,36,37,42,55,64],richer:64,richest:64,riemann:[38,68],right:[3,5,20,24,25,26,29,30,34,35,38,42,43,44,51,52,54,56,57,59,67,68,75,76],right_sv:67,rightangl:52,rightanglearc:52,rightanglemdot:52,rightarrow:52,rightarrowbackapprox:52,rightarrowbar:52,rightarrowbsimilar:52,rightarrowdiamond:52,rightarrowgtr:52,rightarrowplu:52,rightarrowsupset:52,rightarrowtail:52,rightarrowtriangl:52,rightdasharrow:52,rightdotarrow:52,rightdownteevector:52,rightdownvectorbar:52,righthand:52,rightharpoonacc:52,rightharpoondown:52,rightharpoonsupdown:52,rightharpoonup:52,rightharpoonupdash:52,rightleftarrow:52,rightleftharpoon:52,rightleftharpoonsdown:52,rightleftharpoonsup:52,rightmoon:52,rightpentagon:52,rightpentagonblack:52,rightrightarrow:52,rightsquigarrow:52,rightteevector:52,rightthreearrow:52,rightthreetim:52,righttrianglebar:52,rightupdownvector:52,rightupteevector:52,rightupvectorbar:52,rightvectorbar:52,rightward:52,rightwhitearrow:52,rind:59,ring:52,ringplu:52,rins:55,rip:4,rise:52,risingdotseq:52,risk:23,ritz:67,ritzvec:67,rival:36,rma:45,rmoustach:52,rmproc:[45,70],rmt:44,rndmat:44,rng:[56,69,75],rnk:67,roast:52,robust:51,rocket:52,rodft00:68,rodft01:68,rodft10:68,rodft11:68,rol:56,role:[16,36,46],roll:44,roller:52,roller_coast:52,room:47,rooster:52,root:[2,6,22,24,28],ropestr:34,ror:56,rose:52,rot180:56,rotat:[26,52,56,67],rotating_light:52,rotl90:56,rotr90:56,rough:68,roughli:[16,68,75],round:[17,20,25,30],round_pushpin:52,rounddown:[33,68,69],roundfromzero:69,roundimpli:52,roundingmod:[68,69],roundingmodeimaginari:68,roundingmoder:68,roundnearest:[33,68,69],roundnearesttiesawai:68,roundnearesttiesup:68,roundtozero:[68,69],roundup:[33,68,69],rout:13,routin:[20,21,24,37,41,46,51,65],row:[1,20,43,45,46,56,64,67,68,74],rowboat:52,rowval:[20,56,67],rpad:[46,75],rppolint:52,rrbracket:52,rrightarrow:52,rsearch:75,rsearchindex:75,rsh:52,rsi:29,rsolbar:52,rsp:29,rsplit:75,rsqhook:52,rstrip:75,rtime:52,rtld_deepbind:[60,66],rtld_first:[60,66],rtld_global:[28,60,66],rtld_lazi:[60,66],rtld_local:[60,66],rtld_nodelet:[60,66],rtld_noload:[60,66],rtld_now:[60,66],rtol:68,rubi:[24,30,31,36,48,51],rug:29,rugbi:52,rugby_footbal:52,rule:[11,16,21],ruledelai:52,ruler:52,run:1,run_repl:47,runnabl:[24,70],runner:52,running_shirt_with_sash:52,runtest:[17,44,71,76],rval:59,rvboxlin:52,s13:67,s1a:14,s29:4,s84:67,s_1:3,s_2:3,s_3:3,s_4:3,s_j:3,saba:[2,49],sacrif:20,safe:[14,21,28,41,45,46,48,49,50],safe_oper:41,sagittariu:52,sai:[4,5,14,23,25,26,29,35,39,44,47,51,55],sailboat:52,sake:[24,52],salient:51,same:[2,4,15,16,20,21,23,24,25,26,27,28],same_typ:40,same_type_numer:40,samedi:26,sampi:52,sampl:[17,28,45,47,56,68,72],samuel:67,san:52,sand:52,sandal:52,sanslmirror:52,sanslturn:52,santa:52,sash:52,sat:61,satchel:52,satellit:52,satisfi:[26,38,44,56,61,67,68],satur:[29,48],saturdai:61,saturn:52,sauc:27,save:[5,6,16,20,24,26,28,31,34,35,44,47,55,67,68,72],savour:52,saw:[16,42],saxophon:52,sayhello:39,sbmv:67,scal:67,scala:51,scalabl:45,scalar:[20,21,35,37,38,43,56,57,67,68],scale:36,scan:9,scanner:6,scatter:46,scenario:[25,41,44,51],scene:42,schedul:[21,24],scheme:[1,30,49],school:52,school_satchel:52,schreiber1989:67,schreiber:67,schur:67,schurfact:67,schwa:52,sci:67,scientif:[33,36,57,67],scientist:33,scissor:52,scm:[1,5,44],scope:[18,24,29],score:52,scorpio:52,scorpiu:52,scpolint:52,scratch:55,scream:52,scream_cat:52,screen:34,scriptfil:31,scroll:52,scurel:52,sdata:[45,70],seamless:40,seamlessli:36,search:[6,12,16,27],searchabl:34,searchindex:75,searchsort:[20,74],searchsortedfirst:74,searchsortedlast:74,searrow:52,seat:52,sec:[20,38,65,68,70],secant:68,secd:[20,38,68],sech:[20,38,68],second:[1,3,6,11,14,16,20,21,23,24,25,26,27,28,30,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,57,61,64,65,67,68,70,72,75],secret:[27,52],section:[3,10,12,17,20,21,22,24,25,29,30,34,35,36,37,39,40,43,44,45,46,49,50,51,52,54,56,57,59],see:[4,6,10,12,13,16,17,20,21,23,24,25,26,28,29,30,31,33,34,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,62,64,65,66,67,68,69,70,72,74,75],see_no_evil:52,seed:69,seedl:52,seek:64,seekend:64,seekstart:64,seem:[16,24,29,30,40,44,45,46,51,54],seen:[23,28,33,39,43,45,76],segfault:[0,1],segment:[45,52,64,68],select:[5,12,20,43,51,55,67,68,74],selector:52,selectperm:74,self:[5,13,17,23],selfreferenti:23,semant:[30,39,49,53,54,68,70],semi:67,semicircl:52,semicircular:52,semicolon:[3,20,24,30,31,34,43,47],semidirect:52,seminumer:69,send:[34,44,45,57,64,70],sens:[23,25,28,29,30,38,40,41,45,48,50,51,54,57,59,67,68,70,74],sensibl:23,sensit:7,sent:[4,42,45,48,64,70],seovnearrow:52,sep:61,separ:[13,14,23,24,27,29,31,33,35,39,40,41,43,44,45],septemb:61,sequenc:[1,3,5,24,33,35,47,49,52,59,64,68,69,75],sequenti:[30,35,59],seri:[20,24,33,39,49,50,54,56,64],serial:[5,41,45,46,57,64],serialis:[6,13],serif:52,serious:46,serv:[16,23,27,30,46,51,57],server:[42,64],servic:44,session:[4,15,21,24],set:[4,5,6,8,13,15],set_bigfloat_precis:[33,69],set_num_thread:68,set_process_titl:57,set_round:[33,69],set_zero_subnorm:[46,69],setdiff:59,setenv:57,setfield:57,setgid:62,setjmp:1,setminu:52,setopt:64,setuid:62,setup:28,setup_interfac:34,seven:52,sever:[4,10,12,17,21,23,24,26,28,29,30,33,34,41,42,43,44,45,46,48,51,53,56,64,67,68],sha1:44,shade:52,shadow:30,shallow:57,shape:[20,35,52,56,68],share:[15,21,24,28,30,41,43],sharedarrai:[45,64,70],sharp:52,shave:52,shaved_ic:52,shed:44,sheep:52,sheer:46,shell:[21,28],shell_pars:39,shield:46,shift:[38,43,56,59,67,68],shini:44,ship:[15,17,21,22,52],shirt:52,shoe:52,shoot:52,shortcak:52,shortcut:41,shorter:[39,44,46],shortest:[49,64],shorthand:[2,4,6,16,20,38,43,49],shortli:23,shot:24,should:[2,3,5,10,11,14,15,16,17,20,21,23,25,26,27,28,29,30,31,33,34,38,39,40,41,42,43,44,45,46,49,50,51,54,56,57,58,59,61,64,65,67,68,70,75],shouldn:57,show:[6,16,17,20,28,31,34,38,39,40,41,42,44,45,47,48,50,52,56,57,64],show_delim_arrai:16,show_sexpr:[12,39],showal:[64,75],showarg:39,showcompact:64,shower:52,showerror:[24,64],showlimit:16,shown:[31,41,45,46,49,51,53,57,67,72],showpar:57,shrimp:52,shuffl:[52,56],siam:67,side:[4,5,29,30,38,39,41,42,43,44,45,51,54,67,76],sidestep:51,siev:69,sig:16,sigabrt:6,sigbu:6,sigdie_handl:6,sigfp:6,sigil:6,siginfo:6,sigint:6,sigint_handl:6,sigma:[52,67],sign:[5,16,21,23,25,33],signal:[6,13,28,31,45,57,60,67],signal_strength:52,signatur:[4,5,9,12,16,21,25,30,34,40,45,50,51,57],signbit:[38,57,68],signif:68,signific:[1,24,33,36,39,43,45,46,49,51,68,69],significand:[20,33,38,68,69],significantli:[33,47,51,68],signum:57,sigpip:6,sigquit:6,sigsegv:6,sigsi:6,sigterm:[6,57],silent:[21,29,46,49,66],silhouett:52,sim:52,simd:[8,46],simdloop:8,simeq:52,simg:52,simgtr:52,similar:[2,3,5,14,16,20,21,22,23,24,26,27,31,35,39,41,43,45,46,47,48,51,52,54,56,57,58,61,64,66,67,68,74,75],similarleftarrow:52,similarli:[4,20,21,24,25,26,30,33,43,44,50,51,54,59,61,64,67],siml:52,simless:52,simminussim:52,simpl:[3,5,11,20,21,23,24,26,28,29,30,35,38,39,40],simpler:[5,26,35,39,42,51],simplest:[14,20,23,25,44],simplevector:[1,16],simpli:[1,10,16,23,24,25,26,27,28,29,30,34,35,39,40,44,45,49,50,51,56,58,64,68],simplic:51,simplif:67,simplifi:[21,26,39,44,51],simplu:52,simrdot:52,simul:[30,45],simultan:[45,48,56,61],sin:[20,38,41,46,68],sinc:[1,4,5,6,10,14,20,21,22,23,24,25,26,28,29,30,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,56,57,59,61,64,65,67,68,70,74],sind:[20,38,68],sine:[38,52,67,68],sinewav:52,singl:[1,3,8,11,14,16,20,23,24,25,26,27,29,30,33,35,36,38,39,40,41,43,44,45,46,48,49,50,51,52,56,57,59,61,64,68,72,73,74,75],singleasyncwork:21,singleton:4,singular:[37,43,45,67,68],sinh:[20,22,38,68],sinpi:[20,38,68],sit:[2,15],site:[39,46,51,62,71],sitofp:46,situat:[23,24,28,29,30,33,38,39,41,45,46,49,51,58,62,64,66,70],six:[49,52],six_pointed_star:52,size0:28,size1:28,size:[3,10,14,20,21,25,28,29,33,35,37,43,45,46,47,49,51,56,57,58,59,60,61,62,64,65,67,68,69,70,74,75],size_t:[10,16,21,28,58],sizehint:59,sizeof:[6,21,28,33,57,75],skeel:67,ski:52,skin:52,skip:[5,21,60,64,70],skipblank:64,skipchar:64,skipstart:64,skull:52,slant:52,slash:52,sleep:[48,52,70],sleepi:52,slice:[14,43,46,52,56,67,68],slicedim:56,slight:54,slightli:[21,23,29,30,39,42,46,49,51,54,59,64,68],slope:52,slot:[26,29,39,52,61],slot_machin:52,slow:[14,20,36,46],slowdown:46,slower:[2,4,20,24,33,36],slowest:14,slowli:46,slt_int:46,small:[5,20,24,25,28,35,44,45,46,52,56,68,74,76],small_blue_diamond:52,small_orange_diamond:52,small_red_triangl:52,small_red_triangle_down:52,smaller:[5,10,33,46,51,52,59,68,76],smallest:[20,29,33,57,59,67,68,69],smallin:52,smallni:52,smart:45,smash:52,smashtim:52,smblkdiamond:52,smblklozeng:52,smblksquar:52,smc:17,smeparsl:52,smile:52,smile_cat:52,smilei:52,smiley_cat:52,smiling_imp:52,smirk:52,smirk_cat:52,smoke:52,smooth:68,smoothli:[40,44],smt:52,smte:52,smwhitestar:52,smwhtcircl:52,smwhtlozeng:52,smwhtsquar:52,snail:52,snake:52,snapshot:47,sneaki:16,snippet:[28,41],snow:52,snowboard:52,snowflak:52,snowman:52,sob:52,soccer:52,sock:[42,64],socket:[42,45,62,64,70],soft:52,softwar:[33,44,49,52],sold:27,solid:30,solidu:52,solut:[23,35,44,45,46,48,67,68],solv:[24,39,50,54,67],solve_tvar_constraint:16,solver:67,some:[1,2,3,4,5,8,9,10,14,16,17,20,21,23,24,25,26,27,28,29,30,33,35,36,38,39,40,41,43,44,45,46,47,48,49,50,51,53,54,55,56,57,59,62,64,65,67,68,69,70,74],some_arrai:28,some_complicated_th:21,some_different_th:21,some_old_valu:28,some_other_valu:28,some_specific_typ:28,some_valu:28,some_young_valu:28,somebodi:41,somefunct:29,someon:[23,26,44],someotherfunct:29,someth:[2,3,4,16,20,25,27,28,29,36,39,42,43,44,46,48,49],sometim:[4,20,23,24,25,26,28,29,30,36,39,40,41,45,46,47,51,53,57,60,67],somewhat:[16,24,42,46,49,51,54],somewher:[4,45,50],soon:[45,50,52,57],sooner:45,sophist:[23,25,30,39,43,48],sorri:26,sort:1,sortcol:74,sortedbi:[47,72],sortingalgorithm:44,sortperm:74,sortrow:74,sound:52,sourc:[2,5,6,15,17,27,28,29,31,36,39,41,44,46,47,49,51,52,54,56,57,58,64,70,72,76],source_path:41,sout:52,south:52,space:[4,6,14,16,20,24,35,38,43,44,47,48,49,50,52,56,64,67,68,73,75],space_invad:52,spade:52,spadesuit:52,spaghetti:52,span:[45,56,67],sparam:10,sparkl:52,sparkler:52,sparkling_heart:52,sparsearrai:35,sparsematrix:[35,40,50],sparsematrixcsc:[14,20,40,67],sparser:33,sparsevec:56,sparsiti:20,spawn:[31,45,48,57,70],spawnat:[45,46,70],spdiagm:56,speak:[3,14,16,36],speak_no_evil:52,speaker:[49,52],specfunctionobject:4,special:[1,4,9,10,13,14,16,20],specif:[1,4,5,6,12,14,16,20],specifi:[3,8,9,14,16,20,21,23,24,25,26,29,30,31,33,35,38,39,40,41,42,43,44],specific:67,spectral:37,spectrum:67,spectyp:4,speech:[52,67],speech_balloon:52,speed:[6,36,45,47,52,64,67,69],speedboat:52,speedup:[46,64],spell:54,spend:68,spent:47,spey:[20,56],spheric:52,sphericalangl:52,sphericalangleup:52,spiral:52,splash:52,splat:3,splice:[30,39,50,59,73],split:14,splitdir:62,splitdriv:62,splitext:62,spoil:23,spoke:52,spone:[20,56],spot:[4,46,47],spout:52,spqr:67,sprand:[20,56,67],sprandbool:[20,56],sprandn:[20,56],spring:52,sprint:64,sprintf:[64,68],spuriou:17,spzero:[20,56],sqcap:52,sqcup:52,sqlozeng:52,sqrint:52,sqrt:[20,22,24,28,29,30,33,34,38,43,46,47,51,52,53,67,68,69],sqrt_second:24,sqrtbottom:52,sqrtm:[37,67],sqsubset:52,sqsubseteq:52,sqsubsetneq:52,sqsupset:52,sqsupseteq:52,squar:[20,22,24,28,29,35,37,38,43,45,46,52,59,67,68],squarebotblack:52,squarecrossfil:52,squarehfil:52,squarehvfil:52,squarellblack:52,squarellquad:52,squarelrquad:52,squareneswfil:52,squarenwsefil:52,squaresvector:35,squaretopblack:52,squareulblack:52,squareulquad:52,squareurblack:52,squareurquad:52,squarevfil:52,squeez:56,squiggl:52,squoval:52,srand:69,src:[2,5,8,13,44,49,56,58,62,67,71],ssa:[1,58],ssh:[31,44,45,70],sshflag:[45,70],sshmanag:[45,70],ssize_t:[21,58],sspreq:12,ssr:67,stabil:[29,46,50,74,75],stack:[1,4,6,24,28,46,56,57,64],stackoverflowerror:57,stage:[1,4,5,21,44,48,57],stai:44,stand:[5,16],standalon:41,standard:[12,13,14,16],star2:52,star:[45,52],starequ:52,start:[1,2,3,4,5,6,9,12,14,15,16,18,20,24,26,28,29],startpath:62,startswith:75,stat:[44,62,67],state:[4,6,16,23],statement:[1,3,9,12],static_typeof:1,station:52,statist:[29,43,47,67],statistician:68,statstruct:[57,64],statu:[12,24],statue_of_liberti:52,std:[13,35,68],stdcall:21,stderr:[4,13,48,57,60,64,65],stderr_fileno:13,stdin:[13,42,48,57,60,64],stdio:[4,6,7],stdm:68,stdout:[13,29,41,42,45,47,48,57,60,64,65,72],stdout_fileno:13,steam:52,steam_locomot:52,stebz:67,stefan:44,stefankarpinski:44,stegr:67,stein:67,stem:52,step:[2,4,5,8,16,23,28,39,41,44,45,46,50,59,61,64,68,69],steprang:[20,26,61],sterl:52,stev:67,stew:52,stewart:67,stick:50,sticki:62,stigma:52,stile:52,still:[4,13,23,24],stirl:56,stmt1:1,stmt2:1,stone:52,stop:[20,24,26,47,52,56,57,61,68,70,72],storag:[6,10,14],store:[1,6,10,12,14,15,20,21,23,24,26,27,28,29,41,45,46,47,48,50,51,52,53,54,56,57,58,59,64,67,68,70,72],stori:23,str:[4,10,13,28,39,49,57,64,69,75],strace:2,straight:[46,52,67,68],straight_rul:52,straightforward:[16,26,31,49],straightforwardli:14,strang:30,strange_two:46,strategi:[8,14,44],strawberri:52,strcmp:4,stream:[1,4,6,13,18],streamer:52,street:26,strength:[42,47],strerror:65,strftime:65,stri:34,strict:[23,25,27,46],stricter:24,strictli:[16,24,25,43,52,57],stride1:14,stride:[3,14,20,34,46,56,67],stridedarrai:34,stridedmatrix:[20,34,67],stridedvecormat:34,stridedvector:[20,34],stringmim:[34,64],strip:[8,34,44,49,75],stripcc:75,stripignor:75,stripmark:75,strn:52,stroke:52,strong:36,strongest:39,strongli:[21,28,38,44,48,52],strptime:65,struck:52,struct:[1,4,5,6,10,16],structinfo:57,structur:[1,5,12,18,20,21,23,25,35,37,39,40,43,44,46,51,56,57],strwidth:75,stuck:52,stuck_out_tongu:52,stuck_out_tongue_closed_ey:52,stuck_out_tongue_winking_ey:52,studi:8,style:[12,14,18,20,21,24,30,32,34,39,41,43,46,49],sub2ind:[14,39,56],sub2ind_gen:39,sub2ind_gen_impl:39,sub2ind_loop:39,sub2ind_rec:39,sub:[14,20,56,67,70],subarrai:7,subarray2:14,subclass:[40,64],subdiagon:67,subdivid:[51,68],subedot:52,subexpress:[1,24,27,39],subgroup:52,subject:[23,33,38,47,67],submatric:67,submatrix:67,submit:[17,44],submodul:41,submult:52,subscript:[35,46,52,56],subsequ:[5,26,29,30,35,39,40,41,49,53,56,59,68,69,70,72],subset:[16,21,25,30,47,52,53,56,59,67,68,75],subsetapprox:52,subsetdot:52,subseteq:52,subseteqq:52,subsetneq:52,subsetneqq:52,subsetplu:52,subsim:52,subsitut:49,subspac:67,substanti:[29,46,47],substitut:[21,28,34,39,49],substitutionstr:75,substr:[34,43,49,75],subsub:52,subsup:52,subtl:[17,42],subtleti:[33,54,57],subtract:[25,27,29,38,39,68],subtyp:12,succ:52,succapprox:52,succcurlyeq:52,succe:[23,49,52],succeed:[16,67],succeq:52,succeqq:52,success:[14,23,42,57,66,67,70,76],successfulli:[4,23,24,44,45,48,57,66],succinctli:[26,46],succnapprox:52,succneq:52,succneqq:52,succnsim:52,succsim:52,suffer:46,suffic:[22,46,51],suffici:[11,25,40,51],suffix:[38,43,44,75],sugar:43,suggest:[8,21,44,46,47,50,59],suitabl:[5,58,69],suitespars:67,suitesparse_long:67,sum:[23,25,35,43,45,46,47,52,56,57,59,67,68,69],sum_kbn:[50,56],sumab:59,sumabs2:[59,68],sumfoo:46,sumint:52,summar:[37,46,57],summarys:57,summat:[52,56],summedarrai:23,summer:26,sun:[52,61],sun_with_fac:52,sundai:[26,61],sunflow:52,sunglass:52,sunni:52,sunris:52,sunrise_over_mountain:52,sunset:52,supdsub:52,supedot:52,superdiagon:67,superfici:29,superscript:52,superset:52,supertyp:[34,35,51,57],suphsol:52,suphsub:52,supmult:52,supp:17,support:[1,13,14,16,17,20,21,22,24,26,27,28,29,30,33,35,36,38,39,41,43,44,45,48,49,50,51,56,57,62,64,65,67,68,69],suppos:[21,23,24,29,41,44,48,51],supset:52,supsetapprox:52,supsetdot:52,supseteq:52,supseteqq:52,supsetneq:52,supsetneqq:52,supsetplu:52,supsim:52,supsub:52,supsup:52,surd:52,sure:[8,14,20,21,24,28,41,42,44,64,71],surfer:52,surpris:[16,29,33,38,46,47],surprisingli:[39,45,51],surrend:45,surround:[5,21,39,51],surviv:28,suscept:50,sushi:52,suspect:46,suspend:[24,45,70],suspens:[23,52],suspension_railwai:52,svd:[37,43,45,46,67],svdfact:67,svdval:[37,67],svec:[12,16],sven:67,svn:8,swap:[68,69],swarrow:52,sweat:52,sweat_drop:52,sweat_smil:52,sweep:29,sweet:52,sweet_potato:52,swimmer:52,swirl:52,syconv:67,syev:67,syevr:67,sygvd:67,sylvest:67,sym:[27,39,40,66],symbol:[1,2,3,4,6,9,10,12,16,21,24,25,27,29,30,34],symbolnod:1,symdiff:59,symlink:62,symm:67,symmetr:[24,37,56,59,67],symmetri:[25,37,68],symperm:56,symptom:2,symtridiagon:[37,40,67],symv:67,sync:[29,45,46,64,70],synonym:[21,75],syntact:[1,33,38,39,41,43,57],syr:67,syring:52,syrk:67,sys0:4,syscal:4,sysfunc:58,sysimag:31,sysimg_path:15,system:[1,2],systemat:44,systemerror:[24,57,58],sysv:67,sytr:67,sytrf:67,sytri:67,t_interpret:47,tabl:[2,6,12,16,20,21,27,37,43,52,54,57,59,67],tack:52,tackl:[14,49],tada:52,tag:[4,5,6,10,21],tail:[39,48,52],take:[4,5,12,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,33,35,38,39,40,41,42,43,44,45,46,47,50,51,52,57,58,59,61,64,67,68,70,72,76],take_ownership:58,takebuf_arrai:64,takebuf_str:64,taken:[3,24,31,38,40,43,45],talk:7,tan:[20,38,68],tanabata:52,tanabata_tre:52,tand:[20,38,68],tangent:68,tangerin:52,tanh:[20,38,68],taocp:68,taper:52,target:[1,15,31,33,46,47,62],task:[4,5,6,15,18],task_local_storag:[24,70,76],taskhdl:24,tast:44,tau:[52,67],taup:67,tauq:67,tauru:52,taxi:52,tbaa:8,tcpserver:[42,64],tcpsocket:[42,64],tea:52,teacup:52,tear:52,teardrop:52,teaser:46,technic:[20,23,27,29,31,34,56,64,68],techniqu:[4,29,30,36,46,47,68],technolog:40,tediou:39,tedium:46,telephon:52,telephone_receiv:52,telescop:52,televis:52,tell:[1,27,28,40,44,49,51,57,65,70,75],teller:52,tempdir:62,templat:51,tempnam:62,tempor:[26,61],temporari:[13,20,29,39,46,48,55,62,74],temporarili:[24,57,58,62],tempt:50,ten:[39,52],tend:[20,38,47,50,68],tenni:52,tensor:[45,67],tent:[47,52],term:[2,3,5,14,16,22,23,25,26,30,35,39,40,41,48,49,51],termin:[21,24,28,34,42,43,44,45,49,57,61,70,75],terminolog:[21,23],ternari:[21,24],terribl:48,territori:44,ters:[24,30,39],tesh:52,test:[2,4,10,16],test_approx_eq:76,test_approx_eq_ep:76,test_handl:76,test_throw:76,testabl:50,testcb:70,testsocket:42,text:[26,27,31,34],text_str:75,textasciiacut:52,textasciicaron:52,textasciidieresi:52,textasciimacron:52,textbrokenbar:52,textdisplai:64,textdoublepip:52,textexclamdown:52,texthvlig:52,textnrleg:52,textnumero:52,textonehalf:52,textonequart:52,textordfeminin:52,textordmasculin:52,textpertenthousand:52,textperthousand:52,textphi:52,textquestiondown:52,textquotedblleft:52,textquotedblright:52,texttheta:52,textthreequart:52,texttildelow:52,texttrademark:52,textturnk:52,textual:[39,64],textvisiblespac:52,tgsen:67,than:[1,2,14,16,17,20,21,22,23,24,25,26,27,28,29,30,31,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,59,62,64,67,68,69,70,74,75],thank:[33,51],thankfulli:26,thanksgiv:26,the_except:1,thei:[1,5,16,20,21,22,23,24,25,26,29,30,33,35,36,39,40,41,43,44,45,46,48,49,50,51,52,53,54,56,57,58,59,64,67,69,70,71,74,75],them:[5,14,16,20,21,22,23,24,25,27,29,30,33,37,38,39,41,43,44,45,46,47,48,49,50,51,54,57,59,64,67,68,69,70,71],themselv:[12,23,30,36,41,45,49,51,59],theori:[16,29,51],therebi:[15,23,30,41,45,51,74],therefor:[5,8,12,14,16,20,21,23,25,30,37,39,43,45,46,49,50,51,52,54,55,59,64,67,68],therein:41,thereof:[12,51,70],theta:52,thi:[1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,61,62,64,65,66,67,68,69,70,71,72,74,75,76],thickspac:52,thin:[28,52,67],thing1:41,thing2:41,thing:[14,16,17,23,26,27,28,29,39,42,44,45,46,48,49,50,51,54,68,74],think:[2,24,25,26,29,42,45,51],thinspac:52,third:[3,14,20,23,25,26,30,38,40,47,49,52,56,68,75],thirti:52,this_function_does_not_exist:28,thiscal:21,thisindex:14,thorn:52,those:1,though:[6,14,16,21,22,25,26,28,30,35,40,42,43,44,47,51,57,67,75],thought:[29,45,51,52],thought_balloon:52,thousand:52,three:[14,16,21,24,30,33,35,38,39,40,41,44,45,46,48,49,50,51,52,54,64,67,68,75,76],threearg:29,threedangl:52,threeunderdot:52,threshold:[25,67],through:[4,5,6,13,16],throughout:[13,23,35,50,51],throughput:48,thrown:[21,23,24,25,28,49,50,51,57,64,67,70],thu:[20,21,23,25,26,29,33,38,39,40,42,45,46,49,50,51,54,59,61],thumb:[46,52],thursdai:[26,61],ti1:40,ti2:40,tic:[43,46,57],ticket:52,tidi:44,tie:[23,52],tieconcat:52,tiger2:52,tiger:52,tight:[46,57],tightli:[22,38,52,56],tild:[52,62],tildetrpl:52,tile:52,till:[45,70],time:[1,2,3,4,5,6,14,15,17,18,20,21,24,26,27,28,29,30,31,36,37,38,39,40,41,43,44,45],time_n:57,timedout:64,timedwait:70,timeit:46,timelimit:68,timelin:[26,61],timeout:[64,70],timeout_:64,timer:[57,64],timesbar:52,timestamp:62,timestep:46,timestr:65,timev:57,timezon:[26,61,65],tini:[45,46],tip:0,tire:52,tired_fac:52,titl:[57,67],titlecas:75,tmp:[15,44,47,55,64],tmstruct:65,to_funct:4,toc:[43,46,57],todai:[29,61],todo:6,toea:52,tofirst:61,togeth:[5,23,24,25,27,31,34,39,40,41,45,47,49,50,57,74,75],toggl:59,toi:[35,45],toilet:52,token:[5,44,75],tokyo:52,tokyo_tow:52,tol:[25,67,68,76],tolast:61,told:21,toler:[25,57,67,68,76],tomato:52,tona:52,tone:52,tonext:[26,61],tongu:52,too:[3,10,13,27,28,30,35,39,43,44,45,46,57,64],took:[29,57],tool:[2,8,17,39,44],top:[8,10,12,21,33,35],topbot:52,tophat:52,topic:[24,33,34,57],toplevel:[1,5,6,27,46],topmost:64,topnod:1,toprev:[26,61],topsemicircl:52,toq:57,torch:52,tosa:52,total:[44,45,47,57,61,64,68,74],touch:62,towa:52,toward:[2,25,33,38,68],tower:52,trace:[4,17,67],track:[2,5,8,10,24,31,35,44,45,46,47,57,70,72],tractor:52,trade:[36,52],trademark:52,tradit:[22,30,36,40,49,51,64,75],tradition:[25,30,36,51],traffic:[45,52],traffic_light:52,trai:52,trail:[20,21,30,31,34,49,51,56,64,69,75],trailing_on:69,trailing_zero:69,train2:52,train:52,tram:52,tramwai:52,tran:67,trang:45,transa:67,transact:67,transb:67,transfinit:52,transform:[5,20,23,30,39,43,56,57,59,67,68,70,74,75],transit:26,translat:6,transpar:[10,29,49],transpos:[20,30,34,35,56,67,73],transposit:[43,67],transvers:52,trap:29,trapezium:52,trapezoid:67,trash:71,travers:57,travi:[44,71],trcon:67,treat:[20,21,39,43],tree:[2,5,12,27,28,39,44,47,52,56,72,76],trend:52,trevc:67,tri:[5,21,26,28,57,64],trial:[45,46],triangl:[30,38,52,67],trianglecdot:52,triangledown:52,triangleleft:52,triangleleftblack:52,trianglelefteq:52,triangleminu:52,triangleplu:52,triangleq:52,triangleright:52,trianglerightblack:52,trianglerighteq:52,triangletim:52,triangular:[37,40,52,56,67],triangular_flag_on_post:52,triangular_rul:52,trick:51,tricki:[26,38],trickier:41,trident:52,tridiag:40,tridiagon:[37,40,67],trigamma:68,trigger:[12,16,21,47,57,70],tril:67,trip:[5,43,46],tripl:[1,43],tripleplu:52,triu:[56,67],triumph:52,trivial:[29,44,45,46],trmm:67,trmv:67,trolleybu:52,trophi:52,tropic:52,tropical_drink:52,tropical_fish:52,troubl:[45,49,50],trrf:67,trsen:67,trsm:67,trsv:67,trsyl:67,trtr:67,trtri:67,truck:52,trumpet:52,trunc:[20,21,38,46,61,68],truncat:[14,21,25,38,46,47,61,64,68],try_block:1,trypars:69,tst:55,ttl:64,tty:[6,13,42,64],tty_col:[47,72],tue:[26,61],tuesdai:[26,61],tulip:52,tunnel:[45,70],tupl:[1,3,4,8,9,10,12,14],tuple2:51,turban:52,turn:[1,5,9,21,23,24,26,31,41,46,47,49,51,52,57,58,67],turnangl:52,turnediota:52,turnednot:52,turnstil:52,turtl:52,tutori:31,tv1:40,tv2:40,tvar:16,twelv:52,twice:[38,47],twist:52,twisted_rightwards_arrow:52,twister:69,two:[1,4,10,14,16,20,21,23,24,25,26,27],two_heart:52,two_men_holding_hand:52,two_women_holding_hand:52,twocap:52,twocup:52,twoheaddownarrow:52,twoheadleftarrow:52,twoheadleftarrowtail:52,twoheadleftdbkarrow:52,twoheadmapsfrom:52,twoheadmapsto:52,twoheadrightarrow:52,twoheadrightarrowtail:52,twoheaduparrow:52,twoheaduparrowcircl:52,twonot:52,twostep:39,txt:[42,47,48,57,64],typ:[39,57],type1:57,type2:57,type_goto:1,type_intersection_match:16,type_match:16,type_match_morespecif:16,type_morespecif:16,typea:43,typealia:[21,27,51],typeassert:[21,51],typeb:43,typecheck:46,typed_comprehens:1,typed_dict_comprehens:1,typed_hcat:1,typed_vcat:1,typedef:[10,16,21],typeerror:[24,51,57],typeinf:[5,47],typeintersect:[16,57],typejoin:[16,57],typeless:36,typemax:[29,33,47,57,64,69,72],typemin:[29,33,57,69],typesof:12,typic:[2,5,9,10,17,20,21,22,23,24,25,28,30,33,35,36,40,41,43,45,47,49,50,51,56,57,58,64,67,68,69,71,74],typo:44,tzrzf:67,u10ffff:49,u110000:49,u2200:[39,49],u2203:49,u5272:52,u5408:52,u55b6:52,u6307:52,u6708:52,u6709:52,u6e80:52,u7121:52,u7533:52,u78:49,u7981:52,u7a7a:52,u80:49,uax:75,ucfirst:75,udp:64,udpsocket:64,uff:49,uglier:46,uid:[16,57,62],uint128:[33,40,43,51,69],uint128_str:1,uint16:[21,25,33,40,43,51,58,64,69,75],uint16_t:10,uint32:[21,33,38,40,43,51,56,58,69,75],uint32_t:[6,10],uint64:[21,33,40,43,51,57,58,69],uint8:[16,21,25,33,38,40,42,43,46,49,50,51,57,58,64,69,75],uint8_t:6,uint:[21,33,51,57,58],uintmax_t:[21,58],ularc:52,ulblacktriangl:52,ulcorn:52,ull:43,ultim:[23,24,29,64],ultriangl:52,umbrella:[51,52],umfpack:37,umfpacklu:[37,67],uminu:52,unabl:[4,24],unalloc:64,unalt:49,unambigu:51,unamus:52,unannot:12,unari:[20,33,38,68],unassign:[23,75],unavoid:[41,44,45],unawar:26,unbalanc:45,unbind:29,unbound:[16,29,69],unbox:[5,8,10,28],uncaught:24,uncertain:46,uncertainti:[46,47],unclear:43,uncommon:44,uncondit:1,uncondition:46,unconnect:[45,70],unconstrain:[40,51],undecor:27,undefin:[10,16,21,23,30,35,38,39,40,45,50,57,58,59,70],undefreferror:[16,23,24,57],undefvarerror:[24,39,54,57],under:[4,14,16],underag:52,underbar:52,underbrac:52,underbracket:52,underdot:52,underflow:[29,68],undergo:2,underleftarrow:52,underleftharpoondown:52,underli:[14,16,20,21,26,29,33,42,45,46,58,64,67],underneath:67,underrightarrow:52,underrightharpoondown:52,underscor:[21,33,50,53],understand:[10,12,16,24,25,33,36,39,41,45,47],undesir:48,undo:68,unduli:51,unequ:57,unescap:[49,64,75],unescape_str:75,unevenli:56,unexpect:[24,26,46,53,56,67],unexpectedli:[2,17,20,29,46,51],unfamiliar:33,unfortun:[14,29,46],unhappi:29,unicod:[18,30,32,34,36],unicodeerror:[24,49],unifi:[13,36,52],uniform:[13,14],uniformli:[14,20,69],uniformsc:[37,40,67],unimpl:21,uniniti:[20,21,23,29,56,64,70],uninterpret:21,unintuit:[24,36],uninvit:23,uniqu:[4,10,16,22,34,39,40,41,44,47,56,57,59,62,67,68],uniquedbyid:41,unit:[11,18,38,43,46,52,63,67,69],unitari:[67,68],unitlowertriangular:40,unitrang:[14,46,50,56,59,67],unituppertriangular:40,univers:[16,52],universaldeclarationofhumanrightsstart:53,unix2datetim:61,unix:[21,42,44,45,47,48,57,61,62,71],unknown:[8,10,21,51,68],unless:[15,21,41,44,46,47,48,49,50,53,54,56,57,61,69,70,72,74,75],unlik:[1,16,20,24,29,35,38,43,45,48,49,51,54,58],unlimit:51,unlock:[29,52,70],unmark:64,unmatch:75,unmodifi:[43,62,67,74],unnam:[21,30,58],unnatur:36,unnecessari:[26,27,33,42,46,49],unnorm:68,unobtrus:[36,51],unord:[57,59,68],unpermut:67,unpin:44,unpreced:36,unpredict:[29,45,57,70],unquot:[12,39,43,49],unrel:[41,49],unrol:[29,39],unsaf:[10,21,31],unsafe_convert:[20,21,58],unsafe_copi:58,unsafe_load:[21,50,58],unsafe_pointer_to_objref:[21,58],unsafe_stor:[21,58],unsafe_trunc:68,unscal:67,unset:57,unsettl:29,unshift:59,unsign:[21,33,38,43,51,58,68,69],unsort:20,unspecifi:[23,46,59,68,70],unstabl:[29,46,49],unsupport:[21,39],until:[5,13,16,21,23,24,40,44,45,51,61,64,68,70],unus:1,unusu:[44,46],unwant:50,unwind:[3,6,24],upand:52,uparrow:52,uparrowbar:52,upcom:41,updasharrow:52,updat:[28,29,34,35],updownarrow:52,updownarrowbar:52,updownharpoonleftright:52,updownharpoonrightleft:52,upepsilon:52,upequilibrium:52,uperm:62,upgrad:[44,71],upharpoonleft:52,upharpoonright:52,upharpoonsleftright:52,upin:52,upint:52,upkoppa:52,uplo:67,upload:44,uplu:52,upmu:52,upnu:52,upoldkoppa:52,upomicron:52,upper:[16,37,44,49,52,53,56,67,68,75],uppercas:[21,42,49,75],uppertriangular:[37,40,67],upsampi:52,upsilon:52,upstigma:52,upstream:44,upuparrow:52,upvarbeta:52,upward:52,upwhitearrow:52,uranu:52,urarc:52,urblacktriangl:52,urcorn:52,url:[44,62,67,71],urtriangl:52,usa:44,usabl:[4,5,51],use64bitint:2,use_llvm_shlib:8,use_mmap:64,usefulli:4,user:[5,8,14,15,17,20,23,24,25,26,27,29,30,31,33,34,36,39,41,43,44,45,46,47,48,49,50,51,52,53,57,61,62,64,67,68,70,72,75,76],userdata:45,userimg:[15,41],userimg_path:15,usernam:44,usr:[2,4,8,28,49],usual:[4,8,20,22,23,26,27,30,36,38,42,44,46,47,50,54,56,57,64,67,68,69],ut1:26,utc:[2,31,34,61],utf16:[21,44,49,75],utf16str:[34,49,75],utf32:[21,49,75],utf32str:[49,75],utf8:[31,49,53,59,75],utf8str:[26,34,42,49,59,75],utf:[21,36],util:[8,39,41,51],utinst:[26,61],uuparrow:52,uv_async_send:21,uv_handle_typ:13,uv_handle_type_max:13,uv_stream_t:13,uv_writ:[6,13],uvw:13,va_arg:21,va_list:13,vagu:20,val1:1,val2:1,val:[11,21,28,39,43,51,56,57,67,68,70],valgrind:0,valid:[1,13,15,21,23,25,26,28,29,33,35,38,41,43,44,49,50,51,53,56,57,58,59,62,65,66,67,68,69,72,75],valtyp:59,valu:[1,3,4,5,6,10,13,14,16,20,21,22,23,24,25,26,27,28],value1:[43,54],value2:43,value3:54,value_t:4,valuetodayofweek:26,valuetomonth:26,valuetyp:59,van:67,var1:[1,54],var2:[1,54],var3:54,var_sym:39,vararg:[1,16,21],varcarriagereturn:52,varclubsuit:52,vardiamondsuit:52,vardim:68,vardoublebarwedg:52,varepsilon:52,varheartsuit:52,varhexagon:52,varhexagonblack:52,varhexagonlrbond:52,vari:[29,34,64,67],variabl:[1,3],variablenam:43,variad:21,varianc:68,variant:[21,27,38,46,49,52,64,67,68,72,74],varieti:[12,24,25,51],varinfo:1,variou:[5,6,10,21,24,25,31,37,40,42,44,45,48,49,51,57,68,75],varisin:52,varisinobar:52,varkappa:52,varlrtriangl:52,varm:68,varni:52,varniobar:52,varnoth:52,varointclockwis:52,varphi:52,varpi:52,varrho:52,varsigma:52,varspadesuit:52,varstar:52,varsubsetneqq:52,varsupsetneq:52,vartheta:52,vartriangl:52,vartriangleleft:52,vartriangleright:52,varveebar:52,vast:[39,41],vastli:15,vcat:[1,20,30,43,56],vdash:52,vdot:52,vec:[29,46,52,56],vecdot:67,vecnorm:[67,68],vect:1,vector:[1,8],vectorize_1arg:20,vectorize_2arg:20,vee:52,veebar:52,veedoublebar:52,veeeq:52,veemidvert:52,veeodot:52,vehicl:52,veil:52,vendredi:26,venu:52,ver:71,verbatim:39,verbos:[4,39,49,57],verbose_fussy_sqrt:24,veri:[1,2,5,9,14,16,23,24,25,27,29,35,36,39,40,42,43,44,45,46,47,49,51,52,56,59,68,74],verifi:[21,23,28,44,45,46,56,76],versa:[14,38,57],versioninfo:[2,57],versionnumb:[44,49,71],versionweight:40,versu:[22,46,55],vert:52,vertic:[43,52,56,73],vertical_traffic_light:52,vertoverlai:52,verymuchless:52,via:[5,8,11,16,21,23,27,29,30,31,36,40,41,43,44,45,46,47,48,51,54,55,57,64,67,68,69,70,74,75,76],vibrat:52,vibration_mod:52,vice:[14,38,57],victori:52,video:[31,52,64],video_camera:52,video_gam:52,videocassett:52,view:[4,5,12,14,26,39,41,47,52,56],viewdata:52,viewindex:14,violat:[23,39,51],violin:52,virgo:52,virtual:[1,5,43],visibl:[20,21,24,30,41,43,44,45,54,57,64],visit:[20,56],visual:[1,30,33,44,46,71,75],voic:52,vol:[67,68],volcano:52,voltag:52,volum:[48,52],vrectangleblack:52,vsl:67,vsr:67,vulgar:52,vvdash:52,vvert:52,vwprebuild:40,vwprebuilditem:40,vysmblkcircl:52,vysmblksquar:52,vysmwhtsquar:52,w_in:67,wai:[3,4,5,6,8,13,14,16,17,20,21,23,24,25,27,28,29,31,33,35,36,39,41,42,43,44,45,46,47,49,50,51,52,54,57,64,68,70,74],wait:[2,5,24,29,42,45,46,48,57,64,70],wake:[57,70],walk:[4,52],wane:52,waning_crescent_moon:52,waning_gibbous_moon:52,want:[3,4,5,9,17,21,23,24,25],warm:16,warn:[8,13,17],wast:20,watch:[16,43,52,64],watch_fil:64,water:52,water_buffalo:52,watermelon:52,wave:[46,52],wavi:52,wavy_dash:52,wax:52,waxing_crescent_moon:52,wchar_t:[21,58],wdai:65,weak:[6,59],weakkeydict:59,weakref:41,weari:52,web:44,websit:44,wed:[44,52,61],wedg:52,wedgedot:52,wedgedoublebar:52,wedgemidvert:52,wedgeodot:52,wedgeonwedg:52,wedgeq:52,wednesdai:[26,61],week:[26,40,61],weight:[20,67],well:[5,17,20,24,25,26,27,28,33,34,35,37,38,40,43,44,45,46,47,49,50,51,53,54,56,57,67,68,74],were:[3,4,14,21,23,26,29,30,34,38,40,41,43,47,51,67,74],weren:24,west:52,wget:62,whale2:52,whale:52,what:[2,3,4,5,14,16,23,24,25,26,28],whatev:[5,6,21,39,44,54,71,74],whatsoev:49,wheel:52,wheelchair:52,whenev:[5,10,21,23,24,31,40,41,45,46,57,67],where:[1,3,4,6,8,13,15,16,20,21,22,23,24,26,28,29,30,33,35,36,38,39,40,41,43,44,45,46,47,50,51,54,56,57,58,59,60,61,62,64,66,67,68,69,74,75,76],wherea:[3,14,16,20,39,43,48,49,51,56,64,67,72],wherebi:20,wherein:[45,51],wherev:[13,38,59],whether:[1,5,13,16,22,23,24,25,28,31,33,36,37,38,40,44,46,47,49],which:[1,3,4,5,6,9,10,12,14,15,16,20,21,23,24,25,26,27,28,29,30,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,74,75,76],whichev:[45,56,70],white:52,white_check_mark:52,white_circl:52,white_flow:52,white_large_squar:52,white_medium_small_squar:52,white_medium_squar:52,white_small_squar:52,white_square_button:52,whitearrowupfrombar:52,whiteinwhitetriangl:52,whitepointerleft:52,whitepointerright:52,whitespac:[33,34,39,43,44,49,64,75],whizbang:44,who:[4,21,24,28,29,33,41,44,57,62,72],whoa:40,whole:[5,6,14,20,21,23,41,45,46,49,51,58,68,75],whom:49,whose:[1,23,25,30,38,41,42,45,49,51,57,59,62,64,67,68,75],whthorzov:52,whtvertov:52,why:[2,3,16,24,26],wide:[21,25,44,47,49,52,75],wideangledown:52,wideangleup:52,widebridgeabov:52,widemul:68,widen:[23,57],wider:[20,47],wideutild:52,width:[21,26,30,49,61,72],william:33,willing:29,win32:65,win64:49,wind:[44,52],wind_chim:52,window:[6,15,21,28,42,44,47,57,60,62,64,65],wine:52,wine_glass:52,wing:52,wink:52,winston:44,wint_t:21,wip:44,wise:[29,43,67,68],wish:[9,20,24,44,45,46,56,64,70],with_bigfloat_precis:[33,69],with_handl:76,with_keyword:46,with_output_limit:16,with_round:[33,69],withenv:57,within:[1,4,9,16,20,21,25,29,30,33,39,41,43,44,45,46,49,54,55,56,57,59,64,67,68,70,75],without:[1,3,5,9,10,14,20,21,23,24,27,28,29,30,33,34,37,39,40,41,43,44,45,46,48,49,50,51,52,53,54,55,56,57,59,61,64,67,68,69,70,75],wittingli:15,wizardri:56,woken:[57,70],wolf:52,woman:52,womans_cloth:52,womans_hat:52,women:52,won:[39,41,44,48,51],word:[5,16,25,29,30,33,34,38,39,40,43,44,47,48,50,51,52,53,60,64],word_siz:[2,33,60],work:[3,4,5,6,7],workaround:29,worker:[17,31,45,46,48,52,67,70],workerconfig:[45,70],workflow:[18,29],working_dir:57,workload:45,workspac:[41,54,57],world:[4,6,23,39,42,46,48,49,51,53,75],worri:[21,25,41,42,44,52],wors:[29,54],worth:[11,16,38,45,50,70],would:[3,5,8,14,15,16,17,20,21,23,24,25,26,29,30,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,56,57,58,61,64,68,69,74,75],wouldn:29,wrap:[1,21,24,26,28,29,30,33,35,39,43,44,46,50,52,55,57,58,61,67,70],wraparound:[33,57],wrapper:[5,6],wreath:52,wrench:52,wrinkl:23,writabl:[64,70],write:[3,4,6,13,20,21,23,24,25,28],writeal:48,writecsv:64,writedlm:64,writefunc:64,writemim:[27,64],writer:[45,48],written:[1,5,16,20,21,22,24,27,28,29,30,31,34,35,36,38,39,40,41,42,44,45,46,47,48,50,51,57,58,64,65,68,70],wrong:[2,21,24,30,39,41,57],wry:52,wstring:[21,49,75],www:[45,67,68],x7f:49,x80:49,x86:21,x86_64:[2,21,31,34],x_str:1,xarg:28,xcorr:68,xdata:28,xdump:[16,64],xff:[33,39,49],xinc:46,xor:[38,43,52,73],xylophon:[48,49],xyz:57,yank:34,yao:67,ydai:65,year:[26,40,44,57,61,65],yearmonth:[26,61],yearmonthdai:[26,61],yellow:52,yellow_heart:52,yen:52,yet:[9,16,21,24,26,30,33,36,39,40,42,44,46,49,51,57,64,68],yield:[1,21,29,33,46,57,59,64,68,69,70],yieldto:[24,70],yml:[44,71],yogh:52,you:[2,3,4,8,9,10,14,16,17,20,21,22,23,24,25,26,27,28,29,30,31,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,55,56,57,58,59,61,64,65,67,68,69,70,71,72,74,75,76],young:28,your:[2,4,9,17,20,21,23,24,27,29,30,38,39,41,42],yourself:[16,21,23,29,44,46,47],yum:52,yup:52,yyyi:61,yyyymm:26,yyyymmdd:[26,61],zap:52,zbar:52,zero:[3,6,20,21,22,23,24,25,26,28,29,30],zeromq:45,zerox:39,zeta:[20,38,52,68],zigzag:52,zip:[43,57,59,64],zlocal:21,zmat:67,zone:26,zzz:52},titles:[\"Developing/debugging Julia&#8217;s C code\",\"Julia ASTs\",\"Reporting and analyzing crashes (segfaults)\",\"Base.Cartesian\",\"gdb debugging tips\",\"Eval of Julia code\",\"Initialization of the Julia runtime\",\"Documentation of Julia&#8217;s Internals\",\"Working with LLVM\",\"Talking to the compiler (the <code class=\\\"docutils literal\\\"><span class=\\\"pre\\\">:meta</span></code> mechanism)\",\"Memory layout of Julia Objects\",\"Operator-sensitive promotion\",\"Reflection and introspection\",\"printf() and stdio in the Julia runtime\",\"SubArrays\",\"System Image Building\",\"More about types\",\"Using Valgrind with Julia\",\"Julia Documentation\",\"Julia Documentation\",\"Multi-dimensional Arrays\",\"Calling C and Fortran Code\",\"Complex and Rational Numbers\",\"Constructors\",\"Control Flow\",\"Conversion and Promotion\",\"Date and DateTime\",\"Documentation\",\"Embedding Julia\",\"Frequently Asked Questions\",\"Functions\",\"Getting Started\",\"The Julia Manual\",\"Integers and Floating-Point Numbers\",\"Interacting With Julia\",\"Interfaces\",\"Introduction\",\"Linear algebra\",\"Mathematical Operations and Elementary Functions\",\"Metaprogramming\",\"Methods\",\"Modules\",\"Networking and Streams\",\"Noteworthy Differences from other Languages\",\"Packages\",\"Parallel Computing\",\"Performance Tips\",\"Profiling\",\"Running External Programs\",\"Strings\",\"Style Guide\",\"Types\",\"Unicode Input\",\"Variables\",\"Scope of Variables\",\"Workflow Tips\",\"Arrays\",\"Essentials\",\"C Interface\",\"Collections and Data Structures\",\"Constants\",\"Dates and Time\",\"Filesystem\",\"The Julia Standard Library\",\"I/O and Network\",\"C Standard Library\",\"Dynamic Linker\",\"Linear Algebra\",\"Mathematics\",\"Numbers\",\"Tasks and Parallel Computing\",\"Package Manager Functions\",\"Profiling\",\"Punctuation\",\"Sorting and Related Functions\",\"Strings\",\"Unit and Functional Testing\"],titleterms:{\"_start\":6,\"abstract\":[35,46,51],\"break\":46,\"byte\":49,\"case\":[23,25],\"catch\":[24,50],\"default\":[30,41],\"final\":24,\"float\":[33,50],\"function\":[3,4,20,21,24,26,27,28,29,30,38,39,40,46,50,56,57,59,61,67,68,69,71,74,76],\"import\":[1,29],\"new\":[25,44],\"null\":29,\"return\":[21,28,30],\"short\":24,\"static\":50,\"throw\":[24,28],\"try\":[24,50],about:[16,21,50],absolut:[38,41],abstractchannel:45,access:[21,27,28,46,51],accessor:[26,61],accumul:47,address:42,adjust:[26,61],advanc:[27,39],aka:24,algebra:[37,67],algorithm:74,alia:8,alias:51,all:57,alloc:[10,29,46,47],allow:53,along:46,ambigu:40,analysi:[8,47],analyz:2,ani:16,annot:46,anonym:[3,30],append:50,arbitrari:33,argument:[3,21,29,30,40,46,50],arithmet:[26,29,33,38],around:57,arrai:[20,28,29,35,45,46,49,56,70],ask:29,assign:[20,56],associ:59,ast:1,asynchron:29,attent:46,auto:21,automat:28,avail:[44,45],avoid:[46,48,50],background:33,bare:41,base:[3,6,50,55,76],basic:[3,20,39,42,47,49,55,56],behavior:[30,33],beta:29,between:[13,29],bigfloat:69,bind:34,bit:[10,21,51],bitarrai:56,bitwis:38,bla:67,block:[1,30,54],bootstrap:[2,4,5],bottom:16,bracket:1,branch:44,breakpoint:4,broadcast:20,browser:55,build:[4,8,15,28,39],built:24,call:[1,4,21,23,28,29,40],callback:21,caller:50,can:29,care:50,cartesian:[3,14],caveat:17,ccall:21,certain:[4,29],cfunction:21,chain:38,chang:[44,46],channel:45,charact:49,check:51,checkout:44,circuit:24,claus:24,clear:47,cluster:[45,70],clustermanag:45,code:[0,5,13,21,27,39,44,45,50],code_warntyp:46,coeffici:33,collect:[21,45,59],collector:[10,28],column:[20,46],combin:29,combinator:56,command:28,common:49,comparison:[26,38],compat:21,compil:9,complet:34,complex:[22,48],composit:51,compound:24,comprehens:[20,54],compress:20,comput:[45,70],concaten:[20,56],concurr:29,condit:[4,24,50],config:28,configur:47,conflict:33,confus:50,consider:17,consist:50,constant:[21,54,60,61,69],construct:[20,51],constructor:[20,23,26,29,56],contain:[46,50],control:[24,47],convent:[21,50,53],convers:[21,23,25,38,61],convert:28,core:24,coroutin:24,correspond:[20,21],crash:2,creat:[21,44],csc:20,custom:[34,44,45],data:[21,45,59,69],date:[26,61],datetim:26,deadlock:48,debug:[0,4],declar:[29,46,51],defin:[25,40],definit:[5,29,41,46],delet:29,dens:20,deprec:[21,29,46],dequeu:59,descript:44,design:14,detail:[14,44],determin:28,develop:[0,18,44],differ:[8,29,34,43],dimension:20,dirti:44,displai:[4,47],distribut:45,divers:50,divis:[33,38],document:[7,18,19,27,44],doe:29,domainerror:29,don:50,durat:26,dure:[2,4,13,46],dynam:66,editor:55,effect:39,elabor:50,elementari:[37,38],embed:28,empti:40,environ:2,epsilon:33,equal:50,error:[2,24,33,57],essenti:57,eval:[5,6,39],evalu:[24,30,39],event:[24,57],exampl:[28,39,42,48],except:[24,28],excess:50,execut:[5,44,46],exist:44,expans:5,experiment:45,expos:50,expr:1,express:[3,24,39,49],extern:48,factor:37,few:14,field:[14,46,50],file:[4,41,42],filesystem:62,fix:[44,46],flow:24,form:1,format:69,fortran:21,framework:[4,76],free:44,frequent:29,from:[4,43,46],further:30,garbag:[10,21,28,45],gdb:4,gener:[5,17,27,39,40,44,50,57,59,64,69,70],get:[31,57],getindex:14,give:29,global:[21,27,46,54],glossari:2,guid:[21,27,50],guidelin:44,handl:[21,24,50],handler:76,hard:54,heap:59,help:34,high:28,hoc:44,hold:39,how:29,hygien:39,hyperbol:38,imag:[5,15],immut:[29,51],implement:20,importal:29,improv:8,incomplet:23,index:[14,20,35,56,59],indirect:21,infer:5,info:2,inform:24,initi:[6,20,23,41,44,55],initialis:13,inner:23,input:[21,52],insert:4,insid:29,inspect:4,instal:44,instanc:50,integ:[29,33,69],integr:68,inter:29,interact:34,interfac:[8,13,35,50,58,70],intern:[7,16,57],interpol:[39,46,48,49],introduct:[16,36,57],introspect:12,invoc:39,iter:[20,35,59],itself:44,jit:5,jl_atexit_hook:6,jl_std:13,jl_value_t:10,jltype:16,julia:[0,1,2,4,5,6,7,8,10,13,15,17,18,19,21,28,29,32,34,50,63,76],julia_init:6,julia_sav:6,julian:34,just:50,kei:34,kernel:46,keybind:34,keyword:[30,40,46],lambdastaticdata:1,languag:43,lapack:67,layout:10,legaci:13,let:54,level:[28,41,50],librari:[13,18,63,65],libuv:13,like:[40,59],line:28,linear:[14,37,67],linker:66,liter:[33,39,49,50],llvm:[8,58],load:[4,45],local:54,locat:46,log:38,loop:[24,45,54],lower:1,machin:[29,33],machineri:16,macro:[1,3,5,27,39,50,76],main:6,make:44,makefil:28,manag:[28,45,70,71],mani:29,manipul:28,manual:[18,32,44],map:[21,45,64],mark:10,markdown:27,mathemat:[38,56,68],matlab:43,matric:[20,37,56],matrix:[20,37],mean:29,measur:46,mechan:9,memori:[10,21,28,29,46,47,64],messag:24,meta:9,metadata:44,metaprogram:39,method:[4,16,20,23,27,40,50],miscellanea:41,miss:[29,51],mix:29,mode:[33,34],modifi:[21,29,50],modul:[27,29,41],more:[5,16,21],movement:45,mozilla:4,multi:20,multidimension:28,multimedia:64,multipl:[27,30,46],name:[30,44,50,53],namespac:41,nativ:29,network:[42,45,46,64],nightli:29,non:[21,39,49],note:[27,40],noteworthi:43,nothing:29,nullabl:[51,57],number:[1,3,22,33,46,49,69],numer:[33,38,50,68,69],object:[10,27,29,40,51,57],offlin:44,onli:23,oper:[1,11,20,21,24,29,30,37,38,49,50,51,56,68],optim:[8,46],option:[8,30,40,47],order:[46,74],other:43,outer:23,output:[29,46],outsid:29,overflow:33,overli:50,overload:[40,50],overus:50,overview:8,ownership:21,packag:[29,44,45,71],pai:46,parallel:[45,46,70],paramet:[14,28,46,50],parametr:[23,40,51],parenthes:50,pars:5,particular:4,pass:[8,21,29,30],path:41,perform:46,period:[26,61],pin:44,pipelin:48,point:33,pointer:21,possibl:50,post:44,power:38,pre:46,preced:38,precis:33,precompil:41,principl:3,printf:13,priorityqueu:59,process:[4,68],profil:[47,72],program:[39,48],promot:[11,25],prompt:34,publish:44,punctuat:73,python:43,queri:[26,61],question:29,quot:[39,48,49],random:69,ration:[22,23,25],read:30,rebas:44,record:4,refer:[3,21,33,45],reflect:[12,57],regular:49,rel:41,relat:74,releas:29,remot:45,remoteref:45,remov:[29,44],repeat:24,repl:[29,55],replac:14,replai:4,report:2,repositori:44,repres:51,represent:39,requir:44,resolv:42,resourc:31,result:[29,47],root:38,round:[33,38],rule:25,run:[2,17,48],runtim:[6,13],safe:51,safeti:21,same:29,scale:37,schedul:45,scope:[30,54],script:[2,50],search:34,seemingli:29,segfault:2,sensibl:29,sensit:11,separ:46,session:29,set:[16,59],setindex:14,setup:44,share:[45,70],shell:34,sign:38,signal:68,simpl:42,simplifi:55,singleton:[10,51],slurp:29,soft:54,someth:50,sort:[16,74],spars:[20,56],speak:44,special:[21,30,33,37,38],specif:[21,44,50],specifi:45,splat:29,split:29,squash:44,stabl:[29,46],standard:[18,39,41,49,63,65,67,69],start:31,startup:2,state:24,statement:24,statist:68,statu:44,stdio:13,still:29,storag:20,strang:50,stream:[29,42],string:[1,39,46,49,75],struct:21,structur:59,studi:[23,25],style:50,stylist:53,subarrai:14,subnorm:46,subtyp:16,suit:17,summari:[41,44],suppli:3,support:70,suppress:17,surfac:1,symbol:39,synchron:[29,45],syntax:[1,3,21,27,30,33,57],sysimg:[2,6],system:[5,15,21,57],tab:34,tag:44,taken:46,talk:9,task:[24,70],tcp:42,test:[17,76],text:[42,64],those:4,thread:21,through:21,time:[46,61],timetyp:26,tip:[4,46,55],tool:46,top:41,topolog:45,trait:20,translat:[14,21],transport:45,treat:46,trigonometr:38,tripl:49,true_main:6,tupl:[16,51],tweak:46,two:29,type:[1,5,10,14,16,20,21,26,27,28,29,46,50,51,57,61,69],typenam:16,typevar:16,unchang:29,under:17,unicod:[49,52],uniform:37,union:[16,50,51],unit:76,unnecessari:50,unregist:44,unsaf:50,untyp:46,updat:[38,44],upon:4,usag:[3,27,41,47],utf:49,valgrind:17,valu:[29,30,33,38,46,51],vararg:[30,51],variabl:[4,21,27,29,46,53,54],variat:21,vector:20,version:[2,8,29,49],want:29,warn:[24,46],what:29,when:[2,29,50],whether:50,why:[29,39],work:[8,28,29,42],workflow:55,wrapper:13,write:[29,46,50],your:44,zero:[33,46]}})",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/genindex.html": "\n\n\n<!DOCTYPE html>\n<!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]-->\n<!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]-->\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  \n  <title>Index &mdash; Julia Language 0.4.5 documentation</title>\n  \n\n  \n  \n\n  \n  <link href='https://fonts.googleapis.com/css?family=Lato:400,700|Roboto+Slab:400,700|Inconsolata:400,700' rel='stylesheet' type='text/css'>\n\n  \n  \n    \n\n  \n\n  \n  \n    <link rel=\"stylesheet\" href=\"_static/julia.css\" type=\"text/css\" />\n  \n\n  \n    <link rel=\"stylesheet\" href=\"_static/julia.css\" type=\"text/css\" />\n  \n    <link rel=\"top\" title=\"Julia Language 0.4.5 documentation\" href=\"index.html\"/> \n\n  \n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js\"></script>\n\n</head>\n\n<body class=\"wy-body-for-nav\" role=\"document\">\n\n  <div class=\"wy-grid-for-nav\">\n\n    \n    <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side\">\n      <div class=\"wy-side-nav-search\">\n        <a href=\"http://julialang.org/\"><img src=\"_static/julia-logo.svg\" class=\"logo\"></a>\n        <!--\n        <a href=\"index.html\" class=\"fa fa-home\"> Julia Language</a>\n        -->\n        <div role=\"search\">\n  <form id =\"rtd-search-form\" class=\"wy-form\" action=\"search.html\" method=\"get\">\n    <input type=\"text\" name=\"q\" placeholder=\"Search docs\" />\n    <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />\n    <input type=\"hidden\" name=\"area\" value=\"default\" />\n  </form>\n</div>\n      </div>\n\n      <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\">\n        \n        \n            <ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/introduction.html\">Introduction</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/getting-started.html\">Getting Started</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/getting-started.html#resources\">Resources</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/variables.html\">Variables</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/variables.html#allowed-variable-names\">Allowed Variable Names</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/variables.html#stylistic-conventions\">Stylistic Conventions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/integers-and-floating-point-numbers.html\">Integers and Floating-Point Numbers</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/integers-and-floating-point-numbers.html#integers\">Integers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/integers-and-floating-point-numbers.html#floating-point-numbers\">Floating-Point Numbers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/integers-and-floating-point-numbers.html#arbitrary-precision-arithmetic\">Arbitrary Precision Arithmetic</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/integers-and-floating-point-numbers.html#numeric-literal-coefficients\">Numeric Literal Coefficients</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/integers-and-floating-point-numbers.html#literal-zero-and-one\">Literal zero and one</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/mathematical-operations.html\">Mathematical Operations and Elementary Functions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/mathematical-operations.html#arithmetic-operators\">Arithmetic Operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/mathematical-operations.html#bitwise-operators\">Bitwise Operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/mathematical-operations.html#updating-operators\">Updating operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/mathematical-operations.html#numeric-comparisons\">Numeric Comparisons</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/mathematical-operations.html#numerical-conversions\">Numerical Conversions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/mathematical-operations.html#elementary-functions\">Elementary Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/complex-and-rational-numbers.html\">Complex and Rational Numbers</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/complex-and-rational-numbers.html#complex-numbers\">Complex Numbers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/complex-and-rational-numbers.html#rational-numbers\">Rational Numbers</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/strings.html\">Strings</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#characters\">Characters</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#string-basics\">String Basics</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#unicode-and-utf-8\">Unicode and UTF-8</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#interpolation\">Interpolation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#triple-quoted-string-literals\">Triple-Quoted String Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#common-operations\">Common Operations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#non-standard-string-literals\">Non-Standard String Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#regular-expressions\">Regular Expressions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#id3\">Byte Array Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/strings.html#version-number-literals\">Version Number Literals</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/functions.html\">Functions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#argument-passing-behavior\">Argument Passing Behavior</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#the-return-keyword\">The <code class=\"docutils literal\"><span class=\"pre\">return</span></code> Keyword</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#operators-are-functions\">Operators Are Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#operators-with-special-names\">Operators With Special Names</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#anonymous-functions\">Anonymous Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#multiple-return-values\">Multiple Return Values</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#varargs-functions\">Varargs Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#optional-arguments\">Optional Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#keyword-arguments\">Keyword Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#evaluation-scope-of-default-values\">Evaluation Scope of Default Values</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#do-block-syntax-for-function-arguments\">Do-Block Syntax for Function Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/functions.html#further-reading\">Further Reading</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/control-flow.html\">Control Flow</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/control-flow.html#compound-expressions\">Compound Expressions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/control-flow.html#conditional-evaluation\">Conditional Evaluation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/control-flow.html#short-circuit-evaluation\">Short-Circuit Evaluation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/control-flow.html#repeated-evaluation-loops\">Repeated Evaluation: Loops</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/control-flow.html#exception-handling\">Exception Handling</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/control-flow.html#tasks-aka-coroutines\">Tasks (aka Coroutines)</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/variables-and-scoping.html\">Scope of Variables</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/variables-and-scoping.html#global-scope\">Global Scope</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/variables-and-scoping.html#local-scope\">Local Scope</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/variables-and-scoping.html#constants\">Constants</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/types.html\">Types</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#type-declarations\">Type Declarations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#abstract-types\">Abstract Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#bits-types\">Bits Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#composite-types\">Composite Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#immutable-composite-types\">Immutable Composite Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#declared-types\">Declared Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#type-unions\">Type Unions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#man-parametric-types\">Parametric Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#type-aliases\">Type Aliases</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#operations-on-types\">Operations on Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#value-types\">&#8220;Value types&#8221;</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/types.html#nullable-types-representing-missing-values\">Nullable Types: Representing Missing Values</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/methods.html\">Methods</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/methods.html#defining-methods\">Defining Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/methods.html#method-ambiguities\">Method Ambiguities</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/methods.html#parametric-methods\">Parametric Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/methods.html#note-on-optional-and-keyword-arguments\">Note on Optional and keyword Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/methods.html#call-overloading-and-function-like-objects\">Call overloading and function-like objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/methods.html#empty-generic-functions\">Empty generic functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/constructors.html\">Constructors</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/constructors.html#outer-constructor-methods\">Outer Constructor Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/constructors.html#inner-constructor-methods\">Inner Constructor Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/constructors.html#incomplete-initialization\">Incomplete Initialization</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/constructors.html#parametric-constructors\">Parametric Constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/constructors.html#case-study-rational\">Case Study: Rational</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/constructors.html#constructors-call-and-conversion\">Constructors, Call, and Conversion</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/constructors.html#outer-only-constructors\">Outer-only constructors</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/conversion-and-promotion.html\">Conversion and Promotion</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/conversion-and-promotion.html#conversion\">Conversion</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/conversion-and-promotion.html#promotion\">Promotion</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/interfaces.html\">Interfaces</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/interfaces.html#iteration\">Iteration</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/interfaces.html#indexing\">Indexing</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/interfaces.html#abstract-arrays\">Abstract Arrays</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/modules.html\">Modules</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/modules.html#summary-of-module-usage\">Summary of module usage</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/documentation.html\">Documentation</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/documentation.html#accessing-documentation\">Accessing Documentation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/documentation.html#functions-methods\">Functions &amp; Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/documentation.html#advanced-usage\">Advanced Usage</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/documentation.html#syntax-guide\">Syntax Guide</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/documentation.html#markdown-syntax-notes\">Markdown Syntax Notes</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/metaprogramming.html\">Metaprogramming</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/metaprogramming.html#program-representation\">Program representation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/metaprogramming.html#expressions-and-evaluation\">Expressions and evaluation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/metaprogramming.html#macros\">Macros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/metaprogramming.html#code-generation\">Code Generation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/metaprogramming.html#non-standard-string-literals\">Non-Standard String Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/metaprogramming.html#generated-functions\">Generated functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/arrays.html\">Multi-dimensional Arrays</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/arrays.html#arrays\">Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/arrays.html#sparse-matrices\">Sparse Matrices</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/linear-algebra.html\">Linear algebra</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/linear-algebra.html#matrix-factorizations\">Matrix factorizations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/linear-algebra.html#special-matrices\">Special matrices</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/networking-and-streams.html\">Networking and Streams</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/networking-and-streams.html#basic-stream-i-o\">Basic Stream I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/networking-and-streams.html#text-i-o\">Text I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/networking-and-streams.html#working-with-files\">Working with Files</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/networking-and-streams.html#a-simple-tcp-example\">A simple TCP example</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/networking-and-streams.html#resolving-ip-addresses\">Resolving IP Addresses</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/parallel-computing.html\">Parallel Computing</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#code-availability-and-loading-packages\">Code Availability and Loading Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#data-movement\">Data Movement</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#parallel-map-and-loops\">Parallel Map and Loops</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#synchronization-with-remote-references\">Synchronization With Remote References</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#scheduling\">Scheduling</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#channels\">Channels</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#remoterefs-and-abstractchannels\">RemoteRefs and AbstractChannels</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#shared-arrays\">Shared Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#distributed-garbage-collection\">Distributed Garbage Collection</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#clustermanagers\">ClusterManagers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#cluster-managers-with-custom-transports\">Cluster Managers with custom transports</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/parallel-computing.html#specifying-network-topology-experimental\">Specifying network topology (Experimental)</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/dates.html\">Date and DateTime</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/dates.html#constructors\">Constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/dates.html#durations-comparisons\">Durations/Comparisons</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/dates.html#accessor-functions\">Accessor Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/dates.html#query-functions\">Query Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/dates.html#timetype-period-arithmetic\">TimeType-Period Arithmetic</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/dates.html#adjuster-functions\">Adjuster Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/dates.html#period-types\">Period Types</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/running-external-programs.html\">Running External Programs</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/running-external-programs.html#interpolation\">Interpolation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/running-external-programs.html#quoting\">Quoting</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/running-external-programs.html#pipelines\">Pipelines</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html\">Calling C and Fortran Code</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#creating-c-compatible-julia-function-pointers\">Creating C-Compatible Julia Function Pointers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#mapping-c-types-to-julia\">Mapping C Types to Julia</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#mapping-c-functions-to-julia\">Mapping C Functions to Julia</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#garbage-collection-safety\">Garbage Collection Safety</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#non-constant-function-specifications\">Non-constant Function Specifications</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#indirect-calls\">Indirect Calls</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#calling-convention\">Calling Convention</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#accessing-global-variables\">Accessing Global Variables</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#accessing-data-through-a-pointer\">Accessing Data through a Pointer</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#thread-safety\">Thread-safety</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#more-about-callbacks\">More About Callbacks</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#c\">C++</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/calling-c-and-fortran-code.html#handling-operating-system-variation\">Handling Operating System Variation</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/interacting-with-julia.html\">Interacting With Julia</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/interacting-with-julia.html#the-different-prompt-modes\">The different prompt modes</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/interacting-with-julia.html#key-bindings\">Key bindings</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/interacting-with-julia.html#tab-completion\">Tab completion</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/embedding.html\">Embedding Julia</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/embedding.html#high-level-embedding\">High-Level Embedding</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/embedding.html#converting-types\">Converting Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/embedding.html#calling-julia-functions\">Calling Julia Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/embedding.html#memory-management\">Memory Management</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/embedding.html#working-with-arrays\">Working with Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/embedding.html#exceptions\">Exceptions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/packages.html\">Packages</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#package-status\">Package Status</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#adding-and-removing-packages\">Adding and Removing Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#offline-installation-of-packages\">Offline Installation of Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#installing-unregistered-packages\">Installing Unregistered Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#updating-packages\">Updating Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#checkout-pin-and-free\">Checkout, Pin and Free</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#custom-metadata-repository\">Custom METADATA Repository</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/packages.html#package-development\">Package Development</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#initial-setup\">Initial Setup</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#making-changes-to-an-existing-package\">Making changes to an existing package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#creating-a-new-package\">Creating a new Package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#fixing-package-requirements\">Fixing Package Requirements</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/packages.html#man-package-requirements\">Requirements Specification</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/profile.html\">Profiling</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/profile.html#basic-usage\">Basic usage</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/profile.html#accumulation-and-clearing\">Accumulation and clearing</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/profile.html#options-for-controlling-the-display-of-profile-results\">Options for controlling the display of profile results</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/profile.html#configuration\">Configuration</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/profile.html#memory-allocation-analysis\">Memory allocation analysis</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/performance-tips.html\">Performance Tips</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#avoid-global-variables\">Avoid global variables</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#measure-performance-with-time-and-pay-attention-to-memory-allocation\">Measure performance with <code class=\"docutils literal\"><span class=\"pre\">&#64;time</span></code> and pay attention to memory allocation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#tools\">Tools</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#avoid-containers-with-abstract-type-parameters\">Avoid containers with abstract type parameters</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#type-declarations\">Type declarations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#break-functions-into-multiple-definitions\">Break functions into multiple definitions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#write-type-stable-functions\">Write &#8220;type-stable&#8221; functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#avoid-changing-the-type-of-a-variable\">Avoid changing the type of a variable</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#separate-kernel-functions\">Separate kernel functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#access-arrays-in-memory-order-along-columns\">Access arrays in memory order, along columns</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#pre-allocating-outputs\">Pre-allocating outputs</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#avoid-string-interpolation-for-i-o\">Avoid string interpolation for I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#optimize-network-i-o-during-parallel-execution\">Optimize network I/O during parallel execution</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#fix-deprecation-warnings\">Fix deprecation warnings</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#tweaks\">Tweaks</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#performance-annotations\">Performance Annotations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#treat-subnormal-numbers-as-zeros\">Treat Subnormal Numbers as Zeros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/performance-tips.html#code-warntype\"><code class=\"docutils literal\"><span class=\"pre\">&#64;code_warntype</span></code></a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/workflow-tips.html\">Workflow Tips</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/workflow-tips.html#repl-based-workflow\">REPL-based workflow</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/workflow-tips.html#browser-based-workflow\">Browser-based workflow</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/style-guide.html\">Style Guide</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#write-functions-not-just-scripts\">Write functions, not just scripts</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#avoid-writing-overly-specific-types\">Avoid writing overly-specific types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#handle-excess-argument-diversity-in-the-caller\">Handle excess argument diversity in the caller</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#append-to-names-of-functions-that-modify-their-arguments\">Append <code class=\"docutils literal\"><span class=\"pre\">!</span></code> to names of functions that modify their arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#avoid-strange-type-unions\">Avoid strange type Unions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#avoid-type-unions-in-fields\">Avoid type Unions in fields</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#avoid-elaborate-container-types\">Avoid elaborate container types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#use-naming-conventions-consistent-with-julia-s-base\">Use naming conventions consistent with Julia&#8217;s <code class=\"docutils literal\"><span class=\"pre\">base/</span></code></a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#don-t-overuse-try-catch\">Don&#8217;t overuse try-catch</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#don-t-parenthesize-conditions\">Don&#8217;t parenthesize conditions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#don-t-overuse\">Don&#8217;t overuse ...</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#don-t-use-unnecessary-static-parameters\">Don&#8217;t use unnecessary static parameters</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#avoid-confusion-about-whether-something-is-an-instance-or-a-type\">Avoid confusion about whether something is an instance or a type</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#don-t-overuse-macros\">Don&#8217;t overuse macros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#don-t-expose-unsafe-operations-at-the-interface-level\">Don&#8217;t expose unsafe operations at the interface level</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#don-t-overload-methods-of-base-container-types\">Don&#8217;t overload methods of base container types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#be-careful-with-type-equality\">Be careful with type equality</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#do-not-write-x-f-x\">Do not write <code class=\"docutils literal\"><span class=\"pre\">x-&gt;f(x)</span></code></a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/style-guide.html#avoid-using-floats-for-numeric-literals-in-generic-code-when-possible\">Avoid using floats for numeric literals in generic code when possible</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/faq.html\">Frequently Asked Questions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/faq.html#sessions-and-the-repl\">Sessions and the REPL</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/faq.html#functions\">Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/faq.html#types-type-declarations-and-constructors\">Types, type declarations, and constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/faq.html#packages-and-modules\">Packages and Modules</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/faq.html#nothingness-and-missing-values\">Nothingness and missing values</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/faq.html#memory\">Memory</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/faq.html#asynchronous-io-and-concurrent-synchronous-writes\">Asynchronous IO and concurrent synchronous writes</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/faq.html#julia-releases\">Julia Releases</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/noteworthy-differences.html\">Noteworthy Differences from other Languages</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/noteworthy-differences.html#noteworthy-differences-from-matlab\">Noteworthy differences from MATLAB</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/noteworthy-differences.html#noteworthy-differences-from-r\">Noteworthy differences from R</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/noteworthy-differences.html#noteworthy-differences-from-python\">Noteworthy differences from Python</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"manual/noteworthy-differences.html#noteworthy-differences-from-c-c\">Noteworthy differences from C/C++</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"manual/unicode-input.html\">Unicode Input</a></li>\n</ul>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/base.html\">Essentials</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#introduction\">Introduction</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#getting-around\">Getting Around</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#all-objects\">All Objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#types\">Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#generic-functions\">Generic Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#syntax\">Syntax</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#nullables\">Nullables</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#system\">System</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#errors\">Errors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#events\">Events</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#reflection\">Reflection</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/base.html#internals\">Internals</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/collections.html\">Collections and Data Structures</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/collections.html#iteration\">Iteration</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/collections.html#general-collections\">General Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/collections.html#iterable-collections\">Iterable Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/collections.html#indexable-collections\">Indexable Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/collections.html#associative-collections\">Associative Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/collections.html#set-like-collections\">Set-Like Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/collections.html#dequeues\">Dequeues</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/collections.html#priorityqueue\">PriorityQueue</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/collections.html#heap-functions\">Heap Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/math.html\">Mathematics</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/math.html#mathematical-operators\">Mathematical Operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/math.html#mathematical-functions\">Mathematical Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/math.html#statistics\">Statistics</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/math.html#signal-processing\">Signal Processing</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/math.html#numerical-integration\">Numerical Integration</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/numbers.html\">Numbers</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/numbers.html#standard-numeric-types\">Standard Numeric Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/numbers.html#data-formats\">Data Formats</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/numbers.html#general-number-functions-and-constants\">General Number Functions and Constants</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/numbers.html#bigfloats\">BigFloats</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/numbers.html#random-numbers\">Random Numbers</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/strings.html\">Strings</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/arrays.html\">Arrays</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/arrays.html#basic-functions\">Basic functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/arrays.html#constructors\">Constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/arrays.html#mathematical-operators-and-functions\">Mathematical operators and functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/arrays.html#indexing-assignment-and-concatenation\">Indexing, Assignment, and Concatenation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/arrays.html#array-functions\">Array functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/arrays.html#combinatorics\">Combinatorics</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/arrays.html#bitarrays\">BitArrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/arrays.html#sparse-matrices\">Sparse Matrices</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/parallel.html\">Tasks and Parallel Computing</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/parallel.html#tasks\">Tasks</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/parallel.html#general-parallel-computing-support\">General Parallel Computing Support</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/parallel.html#shared-arrays\">Shared Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/parallel.html#cluster-manager-interface\">Cluster Manager Interface</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/linalg.html\">Linear Algebra</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/linalg.html#module-Base.LinAlg\">Standard Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/linalg.html#module-Base.LinAlg.BLAS\">BLAS Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/linalg.html#module-Base.LinAlg.LAPACK\">LAPACK Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/constants.html\">Constants</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/file.html\">Filesystem</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/io-network.html\">I/O and Network</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/io-network.html#general-i-o\">General I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/io-network.html#text-i-o\">Text I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/io-network.html#multimedia-i-o\">Multimedia I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/io-network.html#memory-mapped-i-o\">Memory-mapped I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/io-network.html#network-i-o\">Network I/O</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/punctuation.html\">Punctuation</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/sort.html\">Sorting and Related Functions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/sort.html#sorting-functions\">Sorting Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/sort.html#order-related-functions\">Order-Related Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/sort.html#sorting-algorithms\">Sorting Algorithms</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/pkg.html\">Package Manager Functions</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/dates.html\">Dates and Time</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/dates.html#dates-and-time-types\">Dates and Time Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/dates.html#dates-functions\">Dates Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/test.html\">Unit and Functional Testing</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/test.html#testing-base-julia\">Testing Base Julia</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/test.html#test-framework\">Test Framework</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/test.html#handlers\">Handlers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/test.html#macros\">Macros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"stdlib/test.html#functions\">Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/c.html\">C Interface</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/c.html#llvm-interface\">LLVM Interface</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"stdlib/profile.html\">Profiling</a></li>\n</ul>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"devdocs/reflection.html\">Reflection and introspection</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"devdocs/julia.html\">Documentation of Julia&#8217;s Internals</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/init.html\">Initialization of the Julia runtime</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/eval.html\">Eval of Julia code</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/ast.html\">Julia ASTs</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/types.html\">More about types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/object.html\">Memory layout of Julia Objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/cartesian.html\">Base.Cartesian</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/meta.html\">Talking to the compiler (the <code class=\"docutils literal\"><span class=\"pre\">:meta</span></code> mechanism)</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/subarrays.html\">SubArrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/sysimg.html\">System Image Building</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/llvm.html\">Working with LLVM</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/stdio.html\">printf() and stdio in the Julia runtime</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/promote-op.html\">Operator-sensitive promotion</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"devdocs/C.html\">Developing/debugging Julia&#8217;s C code</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/backtraces.html\">Reporting and analyzing crashes (segfaults)</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/debuggingtips.html\">gdb debugging tips</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"devdocs/valgrind.html\">Using Valgrind with Julia</a></li>\n</ul>\n</li>\n</ul>\n\n        \n      </div>\n      &nbsp;\n    </nav>\n\n    <section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">\n\n      \n      <nav class=\"wy-nav-top\" role=\"navigation\" aria-label=\"top navigation\">\n        <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>\n        <a href=\"index.html\">Julia Language</a>\n      </nav>\n\n\n      \n      <div class=\"wy-nav-content\">\n        <div class=\"rst-content\">\n          <div role=\"navigation\" aria-label=\"breadcrumbs navigation\">\n  <ul class=\"wy-breadcrumbs\">\n    <li><a href=\"index.html\">Docs</a> &raquo;</li>\n      \n    <li></li>\n      <li class=\"wy-breadcrumbs-aside\">\n        \n      </li>\n  </ul>\n  <hr/>\n</div>\n          <div role=\"main\" class=\"document\">\n            \n\n<h1 id=\"index\">Index</h1>\n\n<div class=\"genindex-jumpbox\">\n <a href=\"#Symbols\"><strong>Symbols</strong></a>\n | <a href=\"#_\"><strong>_</strong></a>\n | <a href=\"#A\"><strong>A</strong></a>\n | <a href=\"#B\"><strong>B</strong></a>\n | <a href=\"#C\"><strong>C</strong></a>\n | <a href=\"#D\"><strong>D</strong></a>\n | <a href=\"#E\"><strong>E</strong></a>\n | <a href=\"#F\"><strong>F</strong></a>\n | <a href=\"#G\"><strong>G</strong></a>\n | <a href=\"#H\"><strong>H</strong></a>\n | <a href=\"#I\"><strong>I</strong></a>\n | <a href=\"#J\"><strong>J</strong></a>\n | <a href=\"#K\"><strong>K</strong></a>\n | <a href=\"#L\"><strong>L</strong></a>\n | <a href=\"#M\"><strong>M</strong></a>\n | <a href=\"#N\"><strong>N</strong></a>\n | <a href=\"#O\"><strong>O</strong></a>\n | <a href=\"#P\"><strong>P</strong></a>\n | <a href=\"#Q\"><strong>Q</strong></a>\n | <a href=\"#R\"><strong>R</strong></a>\n | <a href=\"#S\"><strong>S</strong></a>\n | <a href=\"#T\"><strong>T</strong></a>\n | <a href=\"#U\"><strong>U</strong></a>\n | <a href=\"#V\"><strong>V</strong></a>\n | <a href=\"#W\"><strong>W</strong></a>\n | <a href=\"#X\"><strong>X</strong></a>\n | <a href=\"#Y\"><strong>Y</strong></a>\n | <a href=\"#Z\"><strong>Z</strong></a>\n | <a href=\"#Symbols\"><strong>Symbols</strong></a>\n \n</div>\n<h2 id=\"Symbols\">Symbols</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.!\">!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.!=\">!=() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.!==\">!==() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.$\">$() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.%\">%() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.&\">&amp;() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.*\">*() (in module Base)</a>, <a href=\"stdlib/math.html#Base.*\">[1]</a>, <a href=\"stdlib/strings.html#Base.*\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.+\">+() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.-\">-() (in module Base)</a>, <a href=\"stdlib/math.html#Base.-\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..!=\">.!=() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..*\">.*() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..+\">.+() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..-\">.-() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base../\">./() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..<\">.&lt;() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..<=\">.&lt;=() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..==\">.==() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..\u2260\">.\u2260() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..>\">.&gt;() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..>=\">.&gt;=() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..\\\">.\\() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..^\">.^() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..\u2264\">.\u2264() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base..\u2265\">.\u2265() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base./\">/() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.//\">//() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.:\">:() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.<\">&lt;() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.<:\">&lt;:() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.<<\">&lt;&lt;() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.<=\">&lt;=() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.==\">==() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.===\">===() (in module Base)</a>, <a href=\"stdlib/math.html#Base.===\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.\u2260\">\u2260() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.>\">&gt;() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.>=\">&gt;=() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.>>\">&gt;&gt;() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.>>>\">&gt;&gt;&gt;() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"manual/documentation.html#@__doc__\">@__doc__() (built-in function)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@allocated\">@allocated() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@async\">@async() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/base.html#Base.@code_llvm\">@code_llvm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@code_lowered\">@code_lowered() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@code_native\">@code_native() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@code_typed\">@code_typed() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@code_warntype\">@code_warntype() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@edit\">@edit() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@elapsed\">@elapsed() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@eval\">@eval() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.@evalpoly\">@evalpoly() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@everywhere\">@everywhere() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@fetch\">@fetch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@fetchfrom\">@fetchfrom() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@gensym\">@gensym() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@less\">@less() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@linux\">@linux() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@osx\">@osx() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@parallel\">@parallel() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.@printf\">@printf() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/profile.html#Base.@profile\">@profile() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@schedule\">@schedule() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@show\">@show() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@spawn\">@spawn() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@spawnat\">@spawnat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.@sprintf\">@sprintf() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@sync\">@sync() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.@task\">@task() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/test.html#Base.Test.@test\">@test() (in module Base.Test)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/test.html#Base.Test.@test_approx_eq\">@test_approx_eq() (in module Base.Test)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/test.html#Base.Test.@test_approx_eq_eps\">@test_approx_eq_eps() (in module Base.Test)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/test.html#Base.Test.@test_throws\">@test_throws() (in module Base.Test)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@time\">@time() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@timed\">@timed() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@timev\">@timev() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@unix\">@unix() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@which\">@which() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.@windows\">@windows() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.\\\">\\() (in module Base)</a>, <a href=\"stdlib/math.html#Base.\\\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.^\">^() (in module Base)</a>, <a href=\"stdlib/strings.html#Base.^\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.|\">|() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.|>\">|&gt;() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.~\">~() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"_\">_</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/base.html#Base.__precompile__\">__precompile__() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"A\">A</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.A_ldiv_Bc\">A_ldiv_Bc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.A_ldiv_Bt\">A_ldiv_Bt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.A_mul_B!\">A_mul_B!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.A_mul_Bc\">A_mul_Bc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.A_mul_Bt\">A_mul_Bt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.A_rdiv_Bc\">A_rdiv_Bc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.A_rdiv_Bt\">A_rdiv_Bt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.abs\">abs() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.abs2\">abs2() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.abspath\">abspath() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.Ac_ldiv_B\">Ac_ldiv_B() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.Ac_ldiv_Bc\">Ac_ldiv_Bc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.Ac_mul_B\">Ac_mul_B() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.Ac_mul_Bc\">Ac_mul_Bc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.Ac_rdiv_B\">Ac_rdiv_B() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.Ac_rdiv_Bc\">Ac_rdiv_Bc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.accept\">accept() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.acos\">acos() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.acosd\">acosd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.acosh\">acosh() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.acot\">acot() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.acotd\">acotd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.acoth\">acoth() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.acsc\">acsc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.acscd\">acscd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.acsch\">acsch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.add\">add() (in module Base.Pkg)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.addprocs\">addprocs() (in module Base)</a>, <a href=\"stdlib/parallel.html#Base.addprocs\">[1]</a>, <a href=\"stdlib/parallel.html#Base.addprocs\">[2]</a>, <a href=\"stdlib/parallel.html#Base.addprocs\">[3]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.airy\">airy() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.airyai\">airyai() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.airyaiprime\">airyaiprime() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.airybi\">airybi() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.airybiprime\">airybiprime() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.airyprime\">airyprime() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.airyx\">airyx() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.all!\">all!() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/collections.html#Base.all\">all() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.all\">[1]</a>, <a href=\"stdlib/collections.html#Base.all\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.angle\">angle() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ans\">ans (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/constants.html#Base.ANY\">ANY (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.any!\">any!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.any\">any() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.any\">[1]</a>, <a href=\"stdlib/collections.html#Base.any\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.append!\">append!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.applicable\">applicable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.apropos\">apropos() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/constants.html#Base.ARGS\">ARGS (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ArgumentError\">ArgumentError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.Array\">Array() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.ascii\">ascii() (in module Base)</a>, <a href=\"stdlib/strings.html#Base.ascii\">[1]</a>, <a href=\"stdlib/strings.html#Base.ascii\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.asec\">asec() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.asecd\">asecd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.asech\">asech() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.asin\">asin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.asind\">asind() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.asinh\">asinh() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.assert\">assert() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.AssertionError\">AssertionError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.asum\">asum() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.At_ldiv_B\">At_ldiv_B() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.At_ldiv_Bt\">At_ldiv_Bt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.At_mul_B\">At_mul_B() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.At_mul_Bt\">At_mul_Bt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.At_rdiv_B\">At_rdiv_B() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.At_rdiv_Bt\">At_rdiv_Bt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.atan\">atan() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.atan2\">atan2() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.atand\">atand() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.atanh\">atanh() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.atexit\">atexit() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.atreplinit\">atreplinit() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.available\">available() (in module Base.Pkg)</a>, <a href=\"stdlib/pkg.html#Base.Pkg.available\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.axpy!\">axpy!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"B\">B</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/base.html#Base.backtrace\">backtrace() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"manual/modules.html#index-0\">baremodule</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.base\">base() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"devdocs/cartesian.html#module-Base.Cartesian\">Base.Cartesian (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#module-Base.Collections\">Base.Collections (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.Base.compilecache\">Base.compilecache() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#module-Base.LinAlg\">Base.LinAlg (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#module-Base.LinAlg.BLAS\">Base.LinAlg.BLAS (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#module-Base.LinAlg.LAPACK\">Base.LinAlg.LAPACK (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.Base.linearindexing\">Base.linearindexing() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#module-Base.Pkg\">Base.Pkg (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.Base.process_messages\">Base.process_messages() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.Base.summarysize\">Base.summarysize() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/test.html#module-Base.Test\">Base.Test (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.base64decode\">base64decode() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.Base64DecodePipe\">Base64DecodePipe() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.base64encode\">base64encode() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.Base64EncodePipe\">Base64EncodePipe() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.basename\">basename() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.bdsdc!\">bdsdc!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.bdsqr!\">bdsqr!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besselh\">besselh() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besseli\">besseli() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besselix\">besselix() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besselj\">besselj() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besselj0\">besselj0() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besselj1\">besselj1() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besseljx\">besseljx() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besselk\">besselk() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besselkx\">besselkx() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.bessely\">bessely() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.bessely0\">bessely0() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.bessely1\">bessely1() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.besselyx\">besselyx() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.beta\">beta() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.bfft!\">bfft!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.bfft\">bfft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.Bidiagonal\">Bidiagonal() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.big\">big() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.BigFloat\">BigFloat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.BigInt\">BigInt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.bin\">bin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.bind\">bind() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.binomial\">binomial() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.bitbroadcast\">bitbroadcast() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.bitpack\">bitpack() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.bitrand\">bitrand() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.bits\">bits() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.bitunpack\">bitunpack() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.bkfact!\">bkfact!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.bkfact\">bkfact() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.blas_set_num_threads\">blas_set_num_threads() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.blascopy!\">blascopy!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.blkdiag\">blkdiag() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.BoundsError\">BoundsError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.brfft\">brfft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.broadcast!\">broadcast!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.broadcast!_function\">broadcast!_function() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.broadcast\">broadcast() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.broadcast_function\">broadcast_function() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.broadcast_getindex\">broadcast_getindex() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.broadcast_setindex!\">broadcast_setindex!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.bswap\">bswap() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.build\">build() (in module Base.Pkg)</a>, <a href=\"stdlib/pkg.html#Base.Pkg.build\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"devdocs/sysimg.html#build_sysimg\">build_sysimg() (built-in function)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.bytes2hex\">bytes2hex() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.bytestring\">bytestring() (in module Base)</a>, <a href=\"stdlib/strings.html#Base.bytestring\">[1]</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"C\">C</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/constants.html#Base.C_NULL\">C_NULL (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.call\">call() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/profile.html#Base.Profile.callers\">callers() (in module Base.Profile)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.calloc\">calloc() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.cat\">cat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.catalan\">catalan (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.catch_backtrace\">catch_backtrace() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cbrt\">cbrt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.ccall\">ccall() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cchar\">Cchar (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.cconvert\">cconvert() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.cd\">cd() (in module Base)</a>, <a href=\"stdlib/file.html#Base.cd\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cdouble\">Cdouble (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.ceil\">ceil() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.cell\">cell() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cfloat\">Cfloat (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.cfunction\">cfunction() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.cglobal\">cglobal() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.Channel{T}\">Channel{T}() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.charwidth\">charwidth() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.checkbounds\">checkbounds() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.checkbounds\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.checkout\">checkout() (in module Base.Pkg)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.chmod\">chmod() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.chol\">chol() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.cholfact!\">cholfact!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.cholfact\">cholfact() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.cholfact\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.chomp\">chomp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.chop\">chop() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.chr2ind\">chr2ind() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cint\">Cint (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cintmax_t\">Cintmax_t (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.circshift\">circshift() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cis\">cis() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.clamp\">clamp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cld\">cld() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/profile.html#Base.Profile.clear\">clear() (in module Base.Profile)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/profile.html#Base.Profile.clear_malloc_data\">clear_malloc_data() (in module Base.Profile)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.clipboard\">clipboard() (in module Base)</a>, <a href=\"stdlib/base.html#Base.clipboard\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.clone\">clone() (in module Base.Pkg)</a>, <a href=\"stdlib/pkg.html#Base.Pkg.clone\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Clong\">Clong (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Clonglong\">Clonglong (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.close\">close() (in module Base)</a>, <a href=\"stdlib/parallel.html#Base.close\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cmp\">cmp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.code_llvm\">code_llvm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.code_lowered\">code_lowered() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.code_native\">code_native() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.code_typed\">code_typed() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.code_warntype\">code_warntype() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Coff_t\">Coff_t (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.collect\">collect() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.collect\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.colon\">colon() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.combinations\">combinations() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.complement!\">complement!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.complement\">complement() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.complex\">complex() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.cond\">cond() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.Condition\">Condition() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.condskeel\">condskeel() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/arrays.html#Base.conj!\">conj!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.conj\">conj() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.connect\">connect() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.connect\">[1]</a>, <a href=\"stdlib/parallel.html#Base.connect\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.consume\">consume() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.contains\">contains() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.conv\">conv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.conv2\">conv2() (in module Base)</a>, <a href=\"stdlib/math.html#Base.conv2\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.convert\">convert() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.copy!\">copy!() (in module Base)</a>, <a href=\"stdlib/c.html#Base.copy!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.copy\">copy() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.copysign\">copysign() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cor\">cor() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cos\">cos() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cosc\">cosc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cosd\">cosd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cosh\">cosh() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cospi\">cospi() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cot\">cot() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cotd\">cotd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.coth\">coth() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.count\">count() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.count_ones\">count_ones() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.count_zeros\">count_zeros() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.countfrom\">countfrom() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.countlines\">countlines() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.countnz\">countnz() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cov\">cov() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.cp\">cp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cptrdiff_t\">Cptrdiff_t (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/constants.html#Base.CPU_CORES\">CPU_CORES (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.cross\">cross() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.csc\">csc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.cscd\">cscd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.csch\">csch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cshort\">Cshort (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Csize_t\">Csize_t (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cssize_t\">Cssize_t (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.ctime\">ctime() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.ctranspose!\">ctranspose!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.ctranspose\">ctranspose() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cuchar\">Cuchar (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cuint\">Cuint (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cuintmax_t\">Cuintmax_t (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Culong\">Culong (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Culonglong\">Culonglong (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.cummax\">cummax() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.cummin\">cummin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.cumprod!\">cumprod!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.cumprod\">cumprod() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.cumsum!\">cumsum!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.cumsum\">cumsum() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.cumsum_kbn\">cumsum_kbn() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.current_module\">current_module() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.current_task\">current_task() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cushort\">Cushort (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Cwchar_t\">Cwchar_t (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.cycle\">cycle() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"D\">D</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Date\">Date (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Date\">Date() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.Date\">[1]</a>, <a href=\"stdlib/dates.html#Dates.Date\">[2]</a>, <a href=\"stdlib/dates.html#Dates.Date\">[3]</a>, <a href=\"stdlib/dates.html#Dates.Date\">[4]</a>, <a href=\"stdlib/dates.html#Dates.Date\">[5]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#module-Dates\">Dates (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Dates.DateFormat\">Dates.DateFormat() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.DateTime\">DateTime (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.DateTime\">DateTime() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.DateTime\">[1]</a>, <a href=\"stdlib/dates.html#Dates.DateTime\">[2]</a>, <a href=\"stdlib/dates.html#Dates.DateTime\">[3]</a>, <a href=\"stdlib/dates.html#Dates.DateTime\">[4]</a>, <a href=\"stdlib/dates.html#Dates.DateTime\">[5]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.datetime2julian\">datetime2julian() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.datetime2rata\">datetime2rata() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.datetime2unix\">datetime2unix() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.dawson\">dawson() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Day\">Day (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Day\">Day() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.Day\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.day\">day() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.dayabbr\">dayabbr() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.dayname\">dayname() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.dayofquarter\">dayofquarter() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.dayofweek\">dayofweek() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.dayofweekofmonth\">dayofweekofmonth() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.dayofyear\">dayofyear() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.daysinmonth\">daysinmonth() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.daysinyear\">daysinyear() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.daysofweekinmonth\">daysofweekinmonth() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.dct!\">dct!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.dct\">dct() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.dec\">dec() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.deconv\">deconv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.deepcopy\">deepcopy() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.default\">default() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.deg2rad\">deg2rad() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.delete!\">delete!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.deleteat!\">deleteat!() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.deleteat!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.den\">den() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Collections.dequeue!\">dequeue!() (in module Base.Collections)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.deserialize\">deserialize() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.det\">det() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/base.html#Base.detach\">detach() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.DevNull\">DevNull (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.diag\">diag() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.diagind\">diagind() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.diagm\">diagm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Dict\">Dict() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.diff\">diff() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.digamma\">digamma() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.digits!\">digits!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.digits\">digits() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.DimensionMismatch\">DimensionMismatch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.dir\">dir() (in module Base.Pkg)</a>, <a href=\"stdlib/pkg.html#Base.Pkg.dir\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.dirname\">dirname() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.disable_sigint\">disable_sigint() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.display\">display() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.displayable\">displayable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.div\">div() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.DivideError\">DivideError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.divrem\">divrem() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.DL_LOAD_PATH\">DL_LOAD_PATH (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.dlclose\">dlclose() (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.dlext\">dlext (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.dlopen\">dlopen() (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.dlopen_e\">dlopen_e() (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.dlsym\">dlsym() (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.dlsym_e\">dlsym_e() (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.DomainError\">DomainError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.done\">done() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.dot\">dot() (in module Base)</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.dot\">(in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.dotc\">dotc() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.dotu\">dotu() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.download\">download() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.drop\">drop() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.dump\">dump() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"E\">E</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/numbers.html#Base.e\">e (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.eachindex\">eachindex() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.eachline\">eachline() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.eachmatch\">eachmatch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.edit\">edit() (in module Base)</a>, <a href=\"stdlib/base.html#Base.edit\">[1]</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.edit\">(in module Base.Pkg)</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.eig\">eig() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.eig\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.eigfact!\">eigfact!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.eigfact\">eigfact() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.eigfact\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.eigmax\">eigmax() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.eigmin\">eigmin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.eigs\">eigs() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.eigs\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.eigvals!\">eigvals!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.eigvals\">eigvals() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.eigvecs\">eigvecs() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.eltype\">eltype() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.empty!\">empty!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.ENDIAN_BOM\">ENDIAN_BOM (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.endof\">endof() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.endswith\">endswith() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Collections.enqueue!\">enqueue!() (in module Base.Collections)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.enumerate\">enumerate() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ENV\">ENV (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.EnvHash\">EnvHash() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.eof\">eof() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.EOFError\">EOFError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.eps\">eps() (in module Base)</a>, <a href=\"stdlib/base.html#Base.eps\">[1]</a>, <a href=\"stdlib/base.html#Base.eps\">[2]</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/dates.html#Dates.eps\">(in module Dates)</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/math.html#Base.erf\">erf() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.erfc\">erfc() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.erfcinv\">erfcinv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.erfcx\">erfcx() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.erfi\">erfi() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.erfinv\">erfinv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.errno\">errno() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.error\">error() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ErrorException\">ErrorException() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.esc\">esc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.escape_string\">escape_string() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.eta\">eta() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.etree\">etree() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.eu\">eu (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.eulergamma\">eulergamma (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.eval\">eval() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.evalfile\">evalfile() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.exit\">exit() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.exp\">exp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.exp10\">exp10() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.exp2\">exp2() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.expand\">expand() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.expanduser\">expanduser() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.expm\">expm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.expm1\">expm1() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.exponent\">exponent() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"manual/modules.html#index-0\">export</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.extrema\">extrema() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.eye\">eye() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.eye\">[1]</a>, <a href=\"stdlib/arrays.html#Base.eye\">[2]</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"F\">F</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.factor\">factor() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.factorial\">factorial() (in module Base)</a>, <a href=\"stdlib/math.html#Base.factorial\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.factorize\">factorize() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.falses\">falses() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.fd\">fd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.fdio\">fdio() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.fetch\">fetch() (in module Base)</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/profile.html#Base.Profile.fetch\">(in module Base.Profile)</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/math.html#Base.fft!\">fft!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.fft\">fft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.fftshift\">fftshift() (in module Base)</a>, <a href=\"stdlib/math.html#Base.fftshift\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.fieldnames\">fieldnames() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.fieldoffsets\">fieldoffsets() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.fieldtype\">fieldtype() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.filemode\">filemode() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.filesize\">filesize() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.fill!\">fill!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.fill\">fill() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.filt!\">filt!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.filt\">filt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.filter!\">filter!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.filter\">filter() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.finalize\">finalize() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.finalizer\">finalizer() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.find\">find() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.find\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.find_library\">find_library() (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.findfirst\">findfirst() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.findfirst\">[1]</a>, <a href=\"stdlib/arrays.html#Base.findfirst\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.findin\">findin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.findlast\">findlast() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.findlast\">[1]</a>, <a href=\"stdlib/arrays.html#Base.findlast\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.findmax!\">findmax!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.findmax\">findmax() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.findmax\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.findmin!\">findmin!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.findmin\">findmin() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.findmin\">[1]</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/arrays.html#Base.findn\">findn() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.findnext\">findnext() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.findnext\">[1]</a>, <a href=\"stdlib/arrays.html#Base.findnext\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.findnz\">findnz() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.findprev\">findprev() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.findprev\">[1]</a>, <a href=\"stdlib/arrays.html#Base.findprev\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.first\">first() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.firstdayofmonth\">firstdayofmonth() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.firstdayofquarter\">firstdayofquarter() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.firstdayofweek\">firstdayofweek() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.firstdayofyear\">firstdayofyear() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.fld\">fld() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.fldmod\">fldmod() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.flipbits!\">flipbits!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.flipdim\">flipdim() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.flipsign\">flipsign() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.float\">float() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.Float32\">Float32() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.Float64\">Float64() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.floor\">floor() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.flush\">flush() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.flush_cstdio\">flush_cstdio() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.fma\">fma() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.foldl\">foldl() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.foldl\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.foldr\">foldr() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.foldr\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.FormatMessage\">FormatMessage() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.free\">free() (in module Base.Pkg)</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/libc.html#Libc.free\">(in module Libc)</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/math.html#Base.frexp\">frexp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.full\">full() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.full\">[1]</a>, <a href=\"stdlib/linalg.html#Base.full\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.fullname\">fullname() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.function_module\">function_module() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.function_name\">function_name() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.functionloc\">functionloc() (in module Base)</a>, <a href=\"stdlib/base.html#Base.functionloc\">[1]</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"G\">G</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.gamma\">gamma() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.gbmv!\">gbmv!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.gbmv\">gbmv() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gbtrf!\">gbtrf!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gbtrs!\">gbtrs!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.gc\">gc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.gc_enable\">gc_enable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.gcd\">gcd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.gcdx\">gcdx() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gebak!\">gebak!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gebal!\">gebal!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gebrd!\">gebrd!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gecon!\">gecon!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gees!\">gees!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geev!\">geev!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geevx!\">geevx!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gehrd!\">gehrd!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gelqf!\">gelqf!() (in module Base.LinAlg.LAPACK)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gelqf!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gels!\">gels!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gelsd!\">gelsd!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gelsy!\">gelsy!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.gemm!\">gemm!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.gemm\">gemm() (in module Base.LinAlg.BLAS)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.gemm\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gemqrt!\">gemqrt!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.gemv!\">gemv!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.gemv\">gemv() (in module Base.LinAlg.BLAS)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.gemv\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.generate\">generate() (in module Base.Pkg)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.gensym\">gensym() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqlf!\">geqlf!() (in module Base.LinAlg.LAPACK)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqlf!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqp3!\">geqp3!() (in module Base.LinAlg.LAPACK)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqp3!\">[1]</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqp3!\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqrf!\">geqrf!() (in module Base.LinAlg.LAPACK)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqrf!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqrt!\">geqrt!() (in module Base.LinAlg.LAPACK)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqrt!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqrt3!\">geqrt3!() (in module Base.LinAlg.LAPACK)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.geqrt3!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.ger!\">ger!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gerqf!\">gerqf!() (in module Base.LinAlg.LAPACK)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gerqf!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gesdd!\">gesdd!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gesv!\">gesv!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gesvd!\">gesvd!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gesvx!\">gesvx!() (in module Base.LinAlg.LAPACK)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gesvx!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.get!\">get!() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.get!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.get\">get() (in module Base)</a>, <a href=\"stdlib/base.html#Base.get\">[1]</a>, <a href=\"stdlib/collections.html#Base.get\">[2]</a>, <a href=\"stdlib/collections.html#Base.get\">[3]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.get_bigfloat_precision\">get_bigfloat_precision() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.get_rounding\">get_rounding() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.get_zero_subnormals\">get_zero_subnormals() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.getaddrinfo\">getaddrinfo() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.getfield\">getfield() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.gethostname\">gethostname() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.getindex\">getindex() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.getindex\">[1]</a>, <a href=\"stdlib/collections.html#Base.getindex\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.getipaddr\">getipaddr() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.getkey\">getkey() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.GetLastError\">GetLastError() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.getpid\">getpid() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.getrf!\">getrf!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.getri!\">getri!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.getrs!\">getrs!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gges!\">gges!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.ggev!\">ggev!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gglse!\">gglse!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.ggsvd!\">ggsvd!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.givens{T}\">givens{T}() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.givens{T}\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.golden\">golden (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.gperm\">gperm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.gradient\">gradient() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.graphemes\">graphemes() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gtsv!\">gtsv!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gttrf!\">gttrf!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.gttrs!\">gttrs!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"H\">H</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.hankelh1\">hankelh1() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.hankelh1x\">hankelh1x() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.hankelh2\">hankelh2() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.hankelh2x\">hankelh2x() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.hash\">hash() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.haskey\">haskey() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.hcat\">hcat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Collections.heapify!\">heapify!() (in module Base.Collections)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Collections.heapify\">heapify() (in module Base.Collections)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Collections.heappop!\">heappop!() (in module Base.Collections)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Collections.heappush!\">heappush!() (in module Base.Collections)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.her!\">her!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.herk!\">herk!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.herk\">herk() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.hessfact!\">hessfact!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.hessfact\">hessfact() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.hesv!\">hesv!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.hetrf!\">hetrf!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.hetri!\">hetri!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.hetrs!\">hetrs!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.hex\">hex() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.hex2bytes\">hex2bytes() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.hex2num\">hex2num() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.hist!\">hist!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.hist\">hist() (in module Base)</a>, <a href=\"stdlib/math.html#Base.hist\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.hist2d!\">hist2d!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.hist2d\">hist2d() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.histrange\">histrange() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.homedir\">homedir() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Hour\">Hour (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Hour\">Hour() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.Hour\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.hour\">hour() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.htol\">htol() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.hton\">hton() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.hvcat\">hvcat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.hypot\">hypot() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"I\">I</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.I\">I (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.idct!\">idct!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.idct\">idct() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.identity\">identity() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ifelse\">ifelse() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.ifft!\">ifft!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.ifft\">ifft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.ifftshift\">ifftshift() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ignorestatus\">ignorestatus() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.im\">im (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.imag\">imag() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"manual/modules.html#index-0\">import</a>\n  </dt>\n\n      \n  <dt><a href=\"manual/modules.html#index-0\">importall</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.in\">in() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.include\">include() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.include_dependency\">include_dependency() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.include_string\">include_string() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.ind2chr\">ind2chr() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.ind2sub\">ind2sub() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.ind2sub\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.indexin\">indexin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.indexpids\">indexpids() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.indmax\">indmax() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.indmin\">indmin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.InexactError\">InexactError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.Inf\">Inf (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.inf\">inf() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.Inf16\">Inf16 (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.Inf32\">Inf32 (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.info\">info() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.init\">init() (in module Base.Pkg)</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/profile.html#Base.Profile.init\">(in module Base.Profile)</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/parallel.html#Base.init_worker\">init_worker() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.InitError\">InitError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.insert!\">insert!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.installed\">installed() (in module Base.Pkg)</a>, <a href=\"stdlib/pkg.html#Base.Pkg.installed\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.instances\">instances() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Instant\">Instant (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.interrupt\">interrupt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.InterruptException\">InterruptException() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.intersect!\">intersect!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.intersect\">intersect() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.IntSet\">IntSet() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.inv\">inv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.invdigamma\">invdigamma() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.invmod\">invmod() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.invoke\">invoke() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.invperm\">invperm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.IOBuffer\">IOBuffer() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.IOBuffer\">[1]</a>, <a href=\"stdlib/io-network.html#Base.IOBuffer\">[2]</a>, <a href=\"stdlib/io-network.html#Base.IOBuffer\">[3]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.ipermute!\">ipermute!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.ipermutedims\">ipermutedims() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.IPv4\">IPv4() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.IPv6\">IPv6() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.irfft\">irfft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.is\">is() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.is_assigned_char\">is_assigned_char() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isa\">isa() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.isabspath\">isabspath() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isalnum\">isalnum() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isalpha\">isalpha() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.isapprox\">isapprox() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isascii\">isascii() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isbits\">isbits() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.isblockdev\">isblockdev() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.ischardev\">ischardev() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.iscntrl\">iscntrl() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isconst\">isconst() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isdefined\">isdefined() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.isdiag\">isdiag() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isdigit\">isdigit() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.isdir\">isdir() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.isdirpath\">isdirpath() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.iseltype\">iseltype() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.isempty\">isempty() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isequal\">isequal() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.iseven\">iseven() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.isexecutable\">isexecutable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.isfifo\">isfifo() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.isfile\">isfile() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.isfinite\">isfinite() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isgeneric\">isgeneric() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isgraph\">isgraph() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Collections.isheap\">isheap() (in module Base.Collections)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.ishermitian\">ishermitian() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isimmutable\">isimmutable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.isinf\">isinf() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.isinteger\">isinteger() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isinteractive\">isinteractive() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isleaftype\">isleaftype() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.isleapyear\">isleapyear() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isless\">isless() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.islink\">islink() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.islower\">islower() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.ismarked\">ismarked() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.ismatch\">ismatch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.ismount\">ismount() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.isnan\">isnan() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.isnull\">isnull() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isnumber\">isnumber() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.isodd\">isodd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.isopen\">isopen() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.ispath\">ispath() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.isperm\">isperm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.isposdef!\">isposdef!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.isposdef\">isposdef() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.ispow2\">ispow2() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.isprime\">isprime() (in module Base)</a>, <a href=\"stdlib/numbers.html#Base.isprime\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isprint\">isprint() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.ispunct\">ispunct() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.isqrt\">isqrt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.isreadable\">isreadable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.isreadonly\">isreadonly() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.isready\">isready() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.isreal\">isreal() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.issetgid\">issetgid() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.issetuid\">issetuid() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.issocket\">issocket() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.issorted\">issorted() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isspace\">isspace() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.issparse\">issparse() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.issticky\">issticky() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.issubnormal\">issubnormal() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.issubset\">issubset() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.issubset\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.issubtype\">issubtype() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.issym\">issym() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.istaskdone\">istaskdone() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.istaskstarted\">istaskstarted() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.istext\">istext() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.istril\">istril() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.istriu\">istriu() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isupper\">isupper() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isvalid\">isvalid() (in module Base)</a>, <a href=\"stdlib/strings.html#Base.isvalid\">[1]</a>, <a href=\"stdlib/strings.html#Base.isvalid\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.iswritable\">iswritable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.isxdigit\">isxdigit() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"J\">J</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/strings.html#Base.join\">join() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.joinpath\">joinpath() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/constants.html#Base.JULIA_HOME\">JULIA_HOME (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.julian2datetime\">julian2datetime() (in module Dates)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"K\">K</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/base.html#Base.KeyError\">KeyError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.keys\">keys() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.keytype\">keytype() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/base.html#Base.kill\">kill() (in module Base)</a>, <a href=\"stdlib/parallel.html#Base.kill\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.kron\">kron() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"L\">L</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/collections.html#Base.last\">last() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.lastdayofmonth\">lastdayofmonth() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.lastdayofquarter\">lastdayofquarter() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.lastdayofweek\">lastdayofweek() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.lastdayofyear\">lastdayofyear() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.launch\">launch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.lbeta\">lbeta() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.lcfirst\">lcfirst() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.lcm\">lcm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.ldexp\">ldexp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.ldltfact!\">ldltfact!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.ldltfact\">ldltfact() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.ldltfact\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.leading_ones\">leading_ones() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.leading_zeros\">leading_zeros() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.length\">length() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.length\">[1]</a>, <a href=\"stdlib/strings.html#Base.length\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.less\">less() (in module Base)</a>, <a href=\"stdlib/base.html#Base.less\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.lexcmp\">lexcmp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.lexless\">lexless() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.lfact\">lfact() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.lgamma\">lgamma() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#module-Libc\">Libc (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#module-Libdl\">Libdl (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.linreg\">linreg() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.linreg\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.linspace\">linspace() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/io-network.html#Base.listen\">listen() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.listen\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.listenany\">listenany() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.llvmcall\">llvmcall() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/constants.html#Base.LOAD_PATH\">LOAD_PATH (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.LoadError\">LoadError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.localindexes\">localindexes() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.lock\">lock() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.log\">log() (in module Base)</a>, <a href=\"stdlib/math.html#Base.log\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.log10\">log10() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.log1p\">log1p() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.log2\">log2() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.logabsdet\">logabsdet() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.logdet\">logdet() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.logm\">logm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.logspace\">logspace() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.lowercase\">lowercase() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.lpad\">lpad() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.lstat\">lstat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.lstrip\">lstrip() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.ltoh\">ltoh() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.lu\">lu() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.lufact!\">lufact!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.lufact\">lufact() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.lyap\">lyap() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"M\">M</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/base.html#Base.macroexpand\">macroexpand() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.malloc\">malloc() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.manage\">manage() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.map!\">map!() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.map!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.map\">map() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.mapfoldl\">mapfoldl() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.mapfoldl\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.mapfoldr\">mapfoldr() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.mapfoldr\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.mapreduce\">mapreduce() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.mapreduce\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.mapreducedim\">mapreducedim() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.mapslices\">mapslices() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.mark\">mark() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.match\">match() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.matchall\">matchall() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.max\">max() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.maxabs!\">maxabs!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.maxabs\">maxabs() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.maxabs\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.maximum!\">maximum!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.maximum\">maximum() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.maximum\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.maxintfloat\">maxintfloat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.mean!\">mean!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.mean\">mean() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.median!\">median!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.median\">median() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.merge!\">merge!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.merge\">merge() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.MersenneTwister\">MersenneTwister() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.method_exists\">method_exists() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.MethodError\">MethodError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.methods\">methods() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.methodswith\">methodswith() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.middle\">middle() (in module Base)</a>, <a href=\"stdlib/math.html#Base.middle\">[1]</a>, <a href=\"stdlib/math.html#Base.middle\">[2]</a>, <a href=\"stdlib/math.html#Base.middle\">[3]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.midpoints\">midpoints() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Millisecond\">Millisecond (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Millisecond\">Millisecond() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.Millisecond\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.millisecond\">millisecond() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.mimewritable\">mimewritable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.min\">min() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/collections.html#Base.minabs!\">minabs!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.minabs\">minabs() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.minabs\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.minimum!\">minimum!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.minimum\">minimum() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.minimum\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.minmax\">minmax() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Minute\">Minute (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Minute\">Minute() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.Minute\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.minute\">minute() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.mkdir\">mkdir() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.mkpath\">mkpath() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.mktemp\">mktemp() (in module Base)</a>, <a href=\"stdlib/file.html#Base.mktemp\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.mktempdir\">mktempdir() (in module Base)</a>, <a href=\"stdlib/file.html#Base.mktempdir\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.Mmap.Anonymous\">Mmap.Anonymous() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.Mmap.mmap\">Mmap.mmap() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.Mmap.mmap\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.Mmap.sync!\">Mmap.sync!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.mod\">mod() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.mod1\">mod1() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.mod2pi\">mod2pi() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.modf\">modf() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"manual/modules.html#index-0\">module</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.module_name\">module_name() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.module_parent\">module_parent() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Month\">Month (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Month\">Month() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.Month\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.month\">month() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.monthabbr\">monthabbr() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.monthday\">monthday() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.monthname\">monthname() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.MS_ASYNC\">MS_ASYNC (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.MS_INVALIDATE\">MS_INVALIDATE (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.MS_SYNC\">MS_SYNC (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.msync\">msync() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.mtime\">mtime() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.muladd\">muladd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.mv\">mv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.myid\">myid() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"N\">N</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/base.html#Base.names\">names() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.NaN\">NaN (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.nan\">nan() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.NaN16\">NaN16 (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.NaN32\">NaN32 (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.nb_available\">nb_available() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.ndigits\">ndigits() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.ndims\">ndims() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.next\">next() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.nextfloat\">nextfloat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.nextind\">nextind() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.nextpow\">nextpow() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.nextpow2\">nextpow2() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.nextprod\">nextprod() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.nfields\">nfields() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.nnz\">nnz() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.nonzeros\">nonzeros() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.norm\">norm() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/strings.html#Base.normalize_string\">normalize_string() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.normpath\">normpath() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/constants.html#Base.nothing\">nothing (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.notify\">notify() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.now\">now() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.now\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.nprocs\">nprocs() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.nrm2\">nrm2() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.nthperm!\">nthperm!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.nthperm\">nthperm() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.nthperm\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.ntoh\">ntoh() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ntuple\">ntuple() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.Nullable\">Nullable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.NullException\">NullException() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.nullspace\">nullspace() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.num\">num() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.num2hex\">num2hex() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.nworkers\">nworkers() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.nzrange\">nzrange() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"O\">O</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/base.html#Base.object_id\">object_id() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.oct\">oct() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.oftype\">oftype() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.one\">one() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.ones\">ones() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.ones\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.open\">open() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.open\">[1]</a>, <a href=\"stdlib/io-network.html#Base.open\">[2]</a>, <a href=\"stdlib/io-network.html#Base.open\">[3]</a>, <a href=\"stdlib/io-network.html#Base.open\">[4]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.operm\">operm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.ordschur!\">ordschur!() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.ordschur!\">[1]</a>, <a href=\"stdlib/linalg.html#Base.ordschur!\">[2]</a>, <a href=\"stdlib/linalg.html#Base.ordschur!\">[3]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.ordschur\">ordschur() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.ordschur\">[1]</a>, <a href=\"stdlib/linalg.html#Base.ordschur\">[2]</a>, <a href=\"stdlib/linalg.html#Base.ordschur\">[3]</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.orghr!\">orghr!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.orglq!\">orglq!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.orgqr!\">orgqr!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.ormlq!\">ormlq!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.ormqr!\">ormqr!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.ormrz!\">ormrz!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/constants.html#Base.OS_NAME\">OS_NAME (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.OutOfMemoryError\">OutOfMemoryError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.OverflowError\">OverflowError() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"P\">P</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/arrays.html#Base.parent\">parent() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.parentindexes\">parentindexes() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.parse\">parse() (in module Base)</a>, <a href=\"stdlib/base.html#Base.parse\">[1]</a>, <a href=\"stdlib/numbers.html#Base.parse\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ParseError\">ParseError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.parseip\">parseip() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.partitions\">partitions() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.partitions\">[1]</a>, <a href=\"stdlib/arrays.html#Base.partitions\">[2]</a>, <a href=\"stdlib/arrays.html#Base.partitions\">[3]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.peakflops\">peakflops() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Collections.peek\">peek() (in module Base.Collections)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Period\">Period (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.permutations\">permutations() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.permute!\">permute!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.permutedims!\">permutedims!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.permutedims\">permutedims() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.pi\">pi (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.pin\">pin() (in module Base.Pkg)</a>, <a href=\"stdlib/pkg.html#Base.Pkg.pin\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.pinv\">pinv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.PipeBuffer\">PipeBuffer() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.PipeBuffer\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.pipeline\">pipeline() (in module Base)</a>, <a href=\"stdlib/base.html#Base.pipeline\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_bfft!\">plan_bfft!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_bfft\">plan_bfft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_brfft\">plan_brfft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_dct!\">plan_dct!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_dct\">plan_dct() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_fft!\">plan_fft!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_fft\">plan_fft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_idct!\">plan_idct!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_idct\">plan_idct() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_ifft!\">plan_ifft!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_ifft\">plan_ifft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_irfft\">plan_irfft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.FFTW.plan_r2r!\">plan_r2r!() (in module Base.FFTW)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.FFTW.plan_r2r\">plan_r2r() (in module Base.FFTW)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.plan_rfft\">plan_rfft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.pmap\">pmap() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.pointer\">pointer() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.pointer_from_objref\">pointer_from_objref() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.pointer_to_array\">pointer_to_array() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.poll_fd\">poll_fd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.poll_file\">poll_file() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.polygamma\">polygamma() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.pop!\">pop!() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.pop!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.popdisplay\">popdisplay() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.position\">position() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.posv!\">posv!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.potrf!\">potrf!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.potri!\">potri!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.potrs!\">potrs!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.powermod\">powermod() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.precision\">precision() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.precompile\">precompile() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.prepend!\">prepend!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.prevfloat\">prevfloat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.prevind\">prevind() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.prevpow\">prevpow() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.prevpow2\">prevpow2() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.prevprod\">prevprod() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.primes\">primes() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.primesmask\">primesmask() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.print\">print() (in module Base)</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/profile.html#Base.Profile.print\">(in module Base.Profile)</a>, <a href=\"stdlib/profile.html#Base.Profile.print\">[1]</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/io-network.html#Base.print_escaped\">print_escaped() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.print_joined\">print_joined() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.print_shortest\">print_shortest() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.print_unescaped\">print_unescaped() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.print_with_color\">print_with_color() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.println\">println() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Collections.PriorityQueue\">PriorityQueue() (in module Base.Collections)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.process_exited\">process_exited() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.process_running\">process_running() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ProcessExitedException\">ProcessExitedException() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.procs\">procs() (in module Base)</a>, <a href=\"stdlib/parallel.html#Base.procs\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.prod!\">prod!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.prod\">prod() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.prod\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.produce\">produce() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/profile.html#module-Profile\">Profile (module)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.promote\">promote() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.promote_rule\">promote_rule() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.promote_shape\">promote_shape() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.promote_type\">promote_type() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.pstrf!\">pstrf!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Ptr{T}\">Ptr{T} (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.ptsv!\">ptsv!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.pttrf!\">pttrf!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.pttrs!\">pttrs!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.publish\">publish() (in module Base.Pkg)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.push!\">push!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.pushdisplay\">pushdisplay() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.put!\">put!() (in module Base)</a>, <a href=\"stdlib/parallel.html#Base.put!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.pwd\">pwd() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"Q\">Q</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.qr\">qr() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.qrfact!\">qrfact!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.qrfact\">qrfact() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.qrfact\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.quadgk\">quadgk() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.quantile!\">quantile!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.quantile\">quantile() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.quarterofyear\">quarterofyear() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.quit\">quit() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"R\">R</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.FFTW.r2r!\">r2r!() (in module Base.FFTW)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.FFTW.r2r\">r2r() (in module Base.FFTW)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.rad2deg\">rad2deg() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.rand!\">rand!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.rand\">rand() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.randcycle\">randcycle() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.randexp!\">randexp!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.randexp\">randexp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.randjump\">randjump() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.randn!\">randn!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.randn\">randn() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.RandomDevice\">RandomDevice() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.randperm\">randperm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.randstring\">randstring() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.randsubseq!\">randsubseq!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.randsubseq\">randsubseq() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.range\">range() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.rank\">rank() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.rata2datetime\">rata2datetime() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.rationalize\">rationalize() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.read!\">read!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.read\">read() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.read\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readall\">readall() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.readall\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.readandwrite\">readandwrite() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readavailable\">readavailable() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readbytes!\">readbytes!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readbytes\">readbytes() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readchomp\">readchomp() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readcsv\">readcsv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.readdir\">readdir() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readdlm\">readdlm() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.readdlm\">[1]</a>, <a href=\"stdlib/io-network.html#Base.readdlm\">[2]</a>, <a href=\"stdlib/io-network.html#Base.readdlm\">[3]</a>, <a href=\"stdlib/io-network.html#Base.readdlm\">[4]</a>, <a href=\"stdlib/io-network.html#Base.readdlm\">[5]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readline\">readline() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readlines\">readlines() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.readlink\">readlink() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.ReadOnlyMemoryError\">ReadOnlyMemoryError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.readuntil\">readuntil() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.real\">real() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.realloc\">realloc() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.realmax\">realmax() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.realmin\">realmin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.realpath\">realpath() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.recur{T<:TimeType}\">recur{T&lt;:TimeType}() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.recv\">recv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.recvfrom\">recvfrom() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.redirect_stderr\">redirect_stderr() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.redirect_stdin\">redirect_stdin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.redirect_stdout\">redirect_stdout() (in module Base)</a>, <a href=\"stdlib/io-network.html#Base.redirect_stdout\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.redisplay\">redisplay() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.reduce\">reduce() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.reduce\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.reducedim\">reducedim() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.reenable_sigint\">reenable_sigint() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.ReentrantLock\">ReentrantLock() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.Ref{T}\">Ref{T} (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.register\">register() (in module Base.Pkg)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.reim\">reim() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.reinterpret\">reinterpret() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.reload\">reload() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.relpath\">relpath() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.rem\">rem() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.rem1\">rem1() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.remotecall\">remotecall() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.remotecall_fetch\">remotecall_fetch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.remotecall_wait\">remotecall_wait() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.RemoteRef\">RemoteRef() (in module Base)</a>, <a href=\"stdlib/parallel.html#Base.RemoteRef\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.repeat\">repeat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.repeated\">repeated() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.replace\">replace() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.repmat\">repmat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.repr\">repr() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.reprmime\">reprmime() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.require\">require() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.reset\">reset() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.reshape\">reshape() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.resize!\">resize!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.resolve\">resolve() (in module Base.Pkg)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.rest\">rest() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.rethrow\">rethrow() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/profile.html#Base.Profile.retrieve\">retrieve() (in module Base.Profile)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.reverse!\">reverse!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.reverse\">reverse() (in module Base)</a>, <a href=\"stdlib/strings.html#Base.reverse\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.reverseind\">reverseind() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.rfft\">rfft() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.rm\">rm() (in module Base)</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.rm\">(in module Base.Pkg)</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/parallel.html#Base.rmprocs\">rmprocs() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.rol!\">rol!() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.rol!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.rol\">rol() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.ror!\">ror!() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.ror!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.ror\">ror() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.rot180\">rot180() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.rot180\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.rotl90\">rotl90() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.rotl90\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.rotr90\">rotr90() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.rotr90\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.round\">round() (in module Base)</a>, <a href=\"stdlib/math.html#Base.round\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.RoundDown\">RoundDown (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.RoundingMode\">RoundingMode (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.RoundNearest\">RoundNearest (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.RoundNearestTiesAway\">RoundNearestTiesAway (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.RoundNearestTiesUp\">RoundNearestTiesUp (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.RoundToZero\">RoundToZero (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.RoundUp\">RoundUp (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.rowvals\">rowvals() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.rpad\">rpad() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.rsearch\">rsearch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.rsearchindex\">rsearchindex() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.rsplit\">rsplit() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.rstrip\">rstrip() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.RTLD_DEEPBIND\">RTLD_DEEPBIND (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.RTLD_FIRST\">RTLD_FIRST (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.RTLD_GLOBAL\">RTLD_GLOBAL (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.RTLD_LAZY\">RTLD_LAZY (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.RTLD_LOCAL\">RTLD_LOCAL (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.RTLD_NODELETE\">RTLD_NODELETE (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.RTLD_NOLOAD\">RTLD_NOLOAD (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libdl.html#Libdl.RTLD_NOW\">RTLD_NOW (in module Libdl)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.run\">run() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/test.html#Base.runtests\">runtests() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"S\">S</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.sbmv!\">sbmv!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.sbmv\">sbmv() (in module Base.LinAlg.BLAS)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.sbmv\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.scal!\">scal!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.scal\">scal() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.scale!\">scale!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.scale\">scale() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.schedule\">schedule() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.schur\">schur() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.schur\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.schurfact!\">schurfact!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.schurfact\">schurfact() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.schurfact\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.sdata\">sdata() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.search\">search() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.searchindex\">searchindex() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.searchsorted\">searchsorted() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.searchsortedfirst\">searchsortedfirst() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.searchsortedlast\">searchsortedlast() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.sec\">sec() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.secd\">secd() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.sech\">sech() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Second\">Second (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Second\">Second() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.Second\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.second\">second() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.seek\">seek() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.seekend\">seekend() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.seekstart\">seekstart() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.select!\">select!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.select\">select() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.selectperm!\">selectperm!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.selectperm\">selectperm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.send\">send() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.serialize\">serialize() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.Set\">Set() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.set_bigfloat_precision\">set_bigfloat_precision() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.set_rounding\">set_rounding() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.set_zero_subnormals\">set_zero_subnormals() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.setdiff!\">setdiff!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.setdiff\">setdiff() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.setenv\">setenv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.setfield!\">setfield!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.setindex!\">setindex!() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.setindex!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.setopt\">setopt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.SharedArray\">SharedArray() (in module Base)</a>, <a href=\"stdlib/parallel.html#Base.SharedArray\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.shift!\">shift!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.show\">show() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.showall\">showall() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.showcompact\">showcompact() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.showerror\">showerror() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.shuffle!\">shuffle!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.shuffle\">shuffle() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.sign\">sign() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.signbit\">signbit() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.signed\">signed() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.signif\">signif() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.significand\">significand() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.similar\">similar() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.sin\">sin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.sinc\">sinc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.sind\">sind() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.sinh\">sinh() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.sinpi\">sinpi() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.size\">size() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.sizehint!\">sizehint!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.sizeof\">sizeof() (in module Base)</a>, <a href=\"stdlib/strings.html#Base.sizeof\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.skip\">skip() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.skipchars\">skipchars() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.sleep\">sleep() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.slice\">slice() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.slicedim\">slicedim() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.sort!\">sort!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.sort\">sort() (in module Base)</a>, <a href=\"stdlib/sort.html#Base.sort\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.sortcols\">sortcols() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.sortperm!\">sortperm!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.sortperm\">sortperm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/sort.html#Base.sortrows\">sortrows() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.sparse\">sparse() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.sparse\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.sparsevec\">sparsevec() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.sparsevec\">[1]</a>, <a href=\"stdlib/arrays.html#Base.sparsevec\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.spawn\">spawn() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.spdiagm\">spdiagm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.speye\">speye() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.splice!\">splice!() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.splice!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.split\">split() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.splitdir\">splitdir() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/file.html#Base.splitdrive\">splitdrive() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.splitext\">splitext() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.spones\">spones() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.sprand\">sprand() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.sprandbool\">sprandbool() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.sprandn\">sprandn() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.sprint\">sprint() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.spzeros\">spzeros() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.sqrt\">sqrt() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.sqrtm\">sqrtm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.squeeze\">squeeze() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.srand\">srand() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.StackOverflowError\">StackOverflowError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.start\">start() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.startswith\">startswith() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.stat\">stat() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.status\">status() (in module Base.Pkg)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.std\">std() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.STDERR\">STDERR (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.STDIN\">STDIN (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.stdm\">stdm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.STDOUT\">STDOUT (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.stebz!\">stebz!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.stegr!\">stegr!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.stein!\">stein!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.step\">step() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.stev!\">stev!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.strerror\">strerror() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.strftime\">strftime() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.stride\">stride() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.strides\">strides() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.string\">string() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.stringmime\">stringmime() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.strip\">strip() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.strptime\">strptime() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.strwidth\">strwidth() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.sub\">sub() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.sub2ind\">sub2ind() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.subtypes\">subtypes() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.success\">success() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.sum!\">sum!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.sum\">sum() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.sum\">[1]</a>, <a href=\"stdlib/collections.html#Base.sum\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.sum_kbn\">sum_kbn() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.sumabs!\">sumabs!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.sumabs\">sumabs() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.sumabs\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.sumabs2!\">sumabs2!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.sumabs2\">sumabs2() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.sumabs2\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.summary\">summary() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.super\">super() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.svd\">svd() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.svd\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.svdfact!\">svdfact!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.svdfact\">svdfact() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.svdfact\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.svds\">svds() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.svdvals!\">svdvals!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.svdvals\">svdvals() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.svdvals\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.syconv!\">syconv!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.syev!\">syev!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.syevr!\">syevr!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.sygvd!\">sygvd!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.sylvester\">sylvester() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.symbol\">symbol() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.symdiff!\">symdiff!() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.symdiff!\">[1]</a>, <a href=\"stdlib/collections.html#Base.symdiff!\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.symdiff\">symdiff() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.symlink\">symlink() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.symm!\">symm!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.symm\">symm() (in module Base.LinAlg.BLAS)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.symm\">[1]</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.symm\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.symperm\">symperm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.SymTridiagonal\">SymTridiagonal() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.symv!\">symv!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.symv\">symv() (in module Base.LinAlg.BLAS)</a>, <a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.symv\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.syr!\">syr!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.syrk!\">syrk!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.syrk\">syrk() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.Sys.get_process_title\">Sys.get_process_title() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.Sys.set_process_title\">Sys.set_process_title() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.SystemError\">SystemError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.systemerror\">systemerror() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.sysv!\">sysv!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.sytrf!\">sytrf!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.sytri!\">sytri!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.sytrs!\">sytrs!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"T\">T</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.tag\">tag() (in module Base.Pkg)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.take!\">take!() (in module Base)</a>, <a href=\"stdlib/parallel.html#Base.take!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.take\">take() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.takebuf_array\">takebuf_array() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.takebuf_string\">takebuf_string() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.tan\">tan() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.tand\">tand() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.tanh\">tanh() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.Task\">Task() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.task_local_storage\">task_local_storage() (in module Base)</a>, <a href=\"stdlib/parallel.html#Base.task_local_storage\">[1]</a>, <a href=\"stdlib/parallel.html#Base.task_local_storage\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.tempdir\">tempdir() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.tempname\">tempname() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.test\">test() (in module Base.Pkg)</a>, <a href=\"stdlib/pkg.html#Base.Pkg.test\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.TextDisplay\">TextDisplay() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.tgsen!\">tgsen!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.throw\">throw() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.tic\">tic() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.time\">time() (in module Base)</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/libc.html#Libc.time\">(in module Libc)</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/base.html#Base.time_ns\">time_ns() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.timedwait\">timedwait() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.Timer\">Timer() (in module Base)</a>, <a href=\"stdlib/base.html#Base.Timer\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.TimeType\">TimeType (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/libc.html#Libc.TmStruct\">TmStruct() (in module Libc)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.toc\">toc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.today\">today() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.tofirst\">tofirst() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.tolast\">tolast() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.tonext\">tonext() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.tonext\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.toprev\">toprev() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.toprev\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.toq\">toq() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.touch\">touch() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.trace\">trace() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.trailing_ones\">trailing_ones() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.trailing_zeros\">trailing_zeros() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.transpose!\">transpose!() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.transpose\">transpose() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.trcon!\">trcon!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.trevc!\">trevc!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.Tridiagonal\">Tridiagonal() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.trigamma\">trigamma() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.tril!\">tril!() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.tril!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.tril\">tril() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.tril\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.triu!\">triu!() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.triu!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.triu\">triu() (in module Base)</a>, <a href=\"stdlib/linalg.html#Base.triu\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.trmm!\">trmm!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.trmm\">trmm() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.trmv!\">trmv!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.trmv\">trmv() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.trrfs!\">trrfs!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.trsen!\">trsen!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.trsm!\">trsm!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.trsm\">trsm() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.trsv!\">trsv!() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.BLAS.trsv\">trsv() (in module Base.LinAlg.BLAS)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.trsyl!\">trsyl!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.trtri!\">trtri!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.trtrs!\">trtrs!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.trues\">trues() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.trunc\">trunc() (in module Base)</a>\n  </dt>\n\n      <dd><dl>\n        \n  <dt><a href=\"stdlib/dates.html#Dates.trunc\">(in module Dates)</a>\n  </dt>\n\n      </dl></dd>\n      \n  <dt><a href=\"stdlib/io-network.html#Base.truncate\">truncate() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.tryparse\">tryparse() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.tuple\">tuple() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.TypeError\">TypeError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.typeintersect\">typeintersect() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.typejoin\">typejoin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.typemax\">typemax() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.typemin\">typemin() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.typeof\">typeof() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.LinAlg.LAPACK.tzrzf!\">tzrzf!() (in module Base.LinAlg.LAPACK)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"U\">U</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/strings.html#Base.ucfirst\">ucfirst() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.UndefRefError\">UndefRefError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.UndefVarError\">UndefVarError() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.unescape_string\">unescape_string() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.union!\">union!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.union\">union() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.unique\">unique() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.unix2datetime\">unix2datetime() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.unlock\">unlock() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.unmark\">unmark() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.unsafe_convert\">unsafe_convert() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.unsafe_copy!\">unsafe_copy!() (in module Base)</a>, <a href=\"stdlib/c.html#Base.unsafe_copy!\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.unsafe_load\">unsafe_load() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/c.html#Base.unsafe_pointer_to_objref\">unsafe_pointer_to_objref() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/c.html#Base.unsafe_store!\">unsafe_store!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.unsafe_trunc\">unsafe_trunc() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.unshift!\">unshift!() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.unsigned\">unsigned() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/pkg.html#Base.Pkg.update\">update() (in module Base.Pkg)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/file.html#Base.uperm\">uperm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.uppercase\">uppercase() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"manual/modules.html#index-0\">using</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.utf16\">utf16() (in module Base)</a>, <a href=\"stdlib/strings.html#Base.utf16\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.utf32\">utf32() (in module Base)</a>, <a href=\"stdlib/strings.html#Base.utf32\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.utf8\">utf8() (in module Base)</a>, <a href=\"stdlib/strings.html#Base.utf8\">[1]</a>, <a href=\"stdlib/strings.html#Base.utf8\">[2]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.UTInstant{T}\">UTInstant{T} (in module Dates)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"V\">V</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/collections.html#Base.valtype\">valtype() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.values\">values() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.Val{c}\">Val{c}() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.var\">var() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.varm\">varm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.vcat\">vcat() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/arrays.html#Base.vec\">vec() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.vecdot\">vecdot() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.vecnorm\">vecnorm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/constants.html#Base.VERSION\">VERSION (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.versioninfo\">versioninfo() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"W\">W</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/parallel.html#Base.wait\">wait() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.warn\">warn() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.watch_file\">watch_file() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Week\">Week (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Week\">Week() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.Week\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.week\">week() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.which\">which() (in module Base)</a>, <a href=\"stdlib/base.html#Base.which\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.whos\">whos() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.widemul\">widemul() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.widen\">widen() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.with_bigfloat_precision\">with_bigfloat_precision() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/test.html#Base.Test.with_handler\">with_handler() (in module Base.Test)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.with_rounding\">with_rounding() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.withenv\">withenv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/constants.html#Base.WORD_SIZE\">WORD_SIZE (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.workers\">workers() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.workspace\">workspace() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.write\">write() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.writecsv\">writecsv() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.writedlm\">writedlm() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/io-network.html#Base.writemime\">writemime() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/strings.html#Base.wstring\">wstring() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"X\">X</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.xcorr\">xcorr() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/io-network.html#Base.xdump\">xdump() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"Y\">Y</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Year\">Year (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.Year\">Year() (in module Dates)</a>, <a href=\"stdlib/dates.html#Dates.Year\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.year\">year() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/dates.html#Dates.yearmonth\">yearmonth() (in module Dates)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/dates.html#Dates.yearmonthday\">yearmonthday() (in module Dates)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.yield\">yield() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/parallel.html#Base.yieldto\">yieldto() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"Z\">Z</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/numbers.html#Base.zero\">zero() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/arrays.html#Base.zeros\">zeros() (in module Base)</a>, <a href=\"stdlib/arrays.html#Base.zeros\">[1]</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/math.html#Base.zeta\">zeta() (in module Base)</a>, <a href=\"stdlib/math.html#Base.zeta\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.zip\">zip() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n<h2 id=\"Symbols\">Symbols</h2>\n<table style=\"width: 100%\" class=\"indextable genindextable\"><tr>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/linalg.html#Base.\u00d7\">\u00d7() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.\u00f7\">\u00f7() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.\u03b3\">\u03b3 (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.\u03c0\">\u03c0 (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/numbers.html#Base.\u03c6\">\u03c6 (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.\u2208\">\u2208() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.\u2209\">\u2209() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.\u220b\">\u220b() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.\u220c\">\u220c() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.\u2229\">\u2229() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n  <td style=\"width: 33%\" valign=\"top\"><dl>\n      \n  <dt><a href=\"stdlib/collections.html#Base.\u222a\">\u222a() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/base.html#Base.\u2261\">\u2261() (in module Base)</a>, <a href=\"stdlib/math.html#Base.\u2261\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.\u2262\">\u2262() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.\u2264\">\u2264() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/math.html#Base.\u2265\">\u2265() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.\u2286\">\u2286() (in module Base)</a>, <a href=\"stdlib/collections.html#Base.\u2286\">[1]</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.\u2288\">\u2288() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/collections.html#Base.\u228a\">\u228a() (in module Base)</a>\n  </dt>\n\n      \n  <dt><a href=\"stdlib/linalg.html#Base.\u22c5\">\u22c5() (in module Base)</a>\n  </dt>\n\n  </dl></td>\n</tr></table>\n\n\n\n          </div>\n          <footer>\n  \n\n  <hr/>\n\n  <div role=\"contentinfo\">\n    <p>\n    </p>\n  </div>\n\n  <a href=\"https://github.com/snide/sphinx_rtd_theme\">Sphinx theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a>\n</footer>\n        </div>\n      </div>\n\n    </section>\n\n  </div>\n  \n\n  \n\n    <script type=\"text/javascript\">\n        var DOCUMENTATION_OPTIONS = {\n            URL_ROOT:'./',\n            VERSION:'0.4.5',\n            COLLAPSE_INDEX:false,\n            FILE_SUFFIX:'.html',\n            HAS_SOURCE:  true\n        };\n    </script>\n      <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>\n      <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>\n      <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>\n      <script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"_static/js/theme.js\"></script>\n  \n\n  \n  \n  <script type=\"text/javascript\">\n      jQuery(function () {\n          SphinxRtdTheme.StickyNav.enable();\n      });\n  </script>\n   \n\n</body>\n</html>",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/stdlib/libdl.html": "\n\n<!DOCTYPE html>\n<!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]-->\n<!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]-->\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  \n  <title>Dynamic Linker &mdash; Julia Language 0.4.5 documentation</title>\n  \n\n  \n  \n\n  \n  <link href='https://fonts.googleapis.com/css?family=Lato:400,700|Roboto+Slab:400,700|Inconsolata:400,700' rel='stylesheet' type='text/css'>\n\n  \n  \n    \n\n  \n\n  \n  \n    <link rel=\"stylesheet\" href=\"../_static/julia.css\" type=\"text/css\" />\n  \n\n  \n    <link rel=\"stylesheet\" href=\"../_static/julia.css\" type=\"text/css\" />\n  \n    <link rel=\"top\" title=\"Julia Language 0.4.5 documentation\" href=\"../index.html\"/> \n\n  \n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js\"></script>\n\n</head>\n\n<body class=\"wy-body-for-nav\" role=\"document\">\n\n  <div class=\"wy-grid-for-nav\">\n\n    \n    <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side\">\n      <div class=\"wy-side-nav-search\">\n        <a href=\"http://julialang.org/\"><img src=\"../_static/julia-logo.svg\" class=\"logo\"></a>\n        <!--\n        <a href=\"../index.html\" class=\"fa fa-home\"> Julia Language</a>\n        -->\n        <div role=\"search\">\n  <form id =\"rtd-search-form\" class=\"wy-form\" action=\"../search.html\" method=\"get\">\n    <input type=\"text\" name=\"q\" placeholder=\"Search docs\" />\n    <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />\n    <input type=\"hidden\" name=\"area\" value=\"default\" />\n  </form>\n</div>\n      </div>\n\n      <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\">\n        \n        \n            <ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/introduction.html\">Introduction</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/getting-started.html\">Getting Started</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/getting-started.html#resources\">Resources</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/variables.html\">Variables</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/variables.html#allowed-variable-names\">Allowed Variable Names</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/variables.html#stylistic-conventions\">Stylistic Conventions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/integers-and-floating-point-numbers.html\">Integers and Floating-Point Numbers</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/integers-and-floating-point-numbers.html#integers\">Integers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/integers-and-floating-point-numbers.html#floating-point-numbers\">Floating-Point Numbers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/integers-and-floating-point-numbers.html#arbitrary-precision-arithmetic\">Arbitrary Precision Arithmetic</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/integers-and-floating-point-numbers.html#numeric-literal-coefficients\">Numeric Literal Coefficients</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/integers-and-floating-point-numbers.html#literal-zero-and-one\">Literal zero and one</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/mathematical-operations.html\">Mathematical Operations and Elementary Functions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/mathematical-operations.html#arithmetic-operators\">Arithmetic Operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/mathematical-operations.html#bitwise-operators\">Bitwise Operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/mathematical-operations.html#updating-operators\">Updating operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/mathematical-operations.html#numeric-comparisons\">Numeric Comparisons</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/mathematical-operations.html#numerical-conversions\">Numerical Conversions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/mathematical-operations.html#elementary-functions\">Elementary Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/complex-and-rational-numbers.html\">Complex and Rational Numbers</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/complex-and-rational-numbers.html#complex-numbers\">Complex Numbers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/complex-and-rational-numbers.html#rational-numbers\">Rational Numbers</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/strings.html\">Strings</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#characters\">Characters</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#string-basics\">String Basics</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#unicode-and-utf-8\">Unicode and UTF-8</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#interpolation\">Interpolation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#triple-quoted-string-literals\">Triple-Quoted String Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#common-operations\">Common Operations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#non-standard-string-literals\">Non-Standard String Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#regular-expressions\">Regular Expressions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#id3\">Byte Array Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/strings.html#version-number-literals\">Version Number Literals</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/functions.html\">Functions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#argument-passing-behavior\">Argument Passing Behavior</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#the-return-keyword\">The <code class=\"docutils literal\"><span class=\"pre\">return</span></code> Keyword</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#operators-are-functions\">Operators Are Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#operators-with-special-names\">Operators With Special Names</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#anonymous-functions\">Anonymous Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#multiple-return-values\">Multiple Return Values</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#varargs-functions\">Varargs Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#optional-arguments\">Optional Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#keyword-arguments\">Keyword Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#evaluation-scope-of-default-values\">Evaluation Scope of Default Values</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#do-block-syntax-for-function-arguments\">Do-Block Syntax for Function Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/functions.html#further-reading\">Further Reading</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/control-flow.html\">Control Flow</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/control-flow.html#compound-expressions\">Compound Expressions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/control-flow.html#conditional-evaluation\">Conditional Evaluation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/control-flow.html#short-circuit-evaluation\">Short-Circuit Evaluation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/control-flow.html#repeated-evaluation-loops\">Repeated Evaluation: Loops</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/control-flow.html#exception-handling\">Exception Handling</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/control-flow.html#tasks-aka-coroutines\">Tasks (aka Coroutines)</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/variables-and-scoping.html\">Scope of Variables</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/variables-and-scoping.html#global-scope\">Global Scope</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/variables-and-scoping.html#local-scope\">Local Scope</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/variables-and-scoping.html#constants\">Constants</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/types.html\">Types</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#type-declarations\">Type Declarations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#abstract-types\">Abstract Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#bits-types\">Bits Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#composite-types\">Composite Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#immutable-composite-types\">Immutable Composite Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#declared-types\">Declared Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#type-unions\">Type Unions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#man-parametric-types\">Parametric Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#type-aliases\">Type Aliases</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#operations-on-types\">Operations on Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#value-types\">&#8220;Value types&#8221;</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/types.html#nullable-types-representing-missing-values\">Nullable Types: Representing Missing Values</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/methods.html\">Methods</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/methods.html#defining-methods\">Defining Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/methods.html#method-ambiguities\">Method Ambiguities</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/methods.html#parametric-methods\">Parametric Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/methods.html#note-on-optional-and-keyword-arguments\">Note on Optional and keyword Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/methods.html#call-overloading-and-function-like-objects\">Call overloading and function-like objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/methods.html#empty-generic-functions\">Empty generic functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/constructors.html\">Constructors</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/constructors.html#outer-constructor-methods\">Outer Constructor Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/constructors.html#inner-constructor-methods\">Inner Constructor Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/constructors.html#incomplete-initialization\">Incomplete Initialization</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/constructors.html#parametric-constructors\">Parametric Constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/constructors.html#case-study-rational\">Case Study: Rational</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/constructors.html#constructors-call-and-conversion\">Constructors, Call, and Conversion</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/constructors.html#outer-only-constructors\">Outer-only constructors</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/conversion-and-promotion.html\">Conversion and Promotion</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/conversion-and-promotion.html#conversion\">Conversion</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/conversion-and-promotion.html#promotion\">Promotion</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/interfaces.html\">Interfaces</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/interfaces.html#iteration\">Iteration</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/interfaces.html#indexing\">Indexing</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/interfaces.html#abstract-arrays\">Abstract Arrays</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/modules.html\">Modules</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/modules.html#summary-of-module-usage\">Summary of module usage</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/documentation.html\">Documentation</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/documentation.html#accessing-documentation\">Accessing Documentation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/documentation.html#functions-methods\">Functions &amp; Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/documentation.html#advanced-usage\">Advanced Usage</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/documentation.html#syntax-guide\">Syntax Guide</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/documentation.html#markdown-syntax-notes\">Markdown Syntax Notes</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/metaprogramming.html\">Metaprogramming</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/metaprogramming.html#program-representation\">Program representation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/metaprogramming.html#expressions-and-evaluation\">Expressions and evaluation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/metaprogramming.html#macros\">Macros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/metaprogramming.html#code-generation\">Code Generation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/metaprogramming.html#non-standard-string-literals\">Non-Standard String Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/metaprogramming.html#generated-functions\">Generated functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/arrays.html\">Multi-dimensional Arrays</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/arrays.html#arrays\">Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/arrays.html#sparse-matrices\">Sparse Matrices</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/linear-algebra.html\">Linear algebra</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/linear-algebra.html#matrix-factorizations\">Matrix factorizations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/linear-algebra.html#special-matrices\">Special matrices</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/networking-and-streams.html\">Networking and Streams</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/networking-and-streams.html#basic-stream-i-o\">Basic Stream I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/networking-and-streams.html#text-i-o\">Text I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/networking-and-streams.html#working-with-files\">Working with Files</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/networking-and-streams.html#a-simple-tcp-example\">A simple TCP example</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/networking-and-streams.html#resolving-ip-addresses\">Resolving IP Addresses</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html\">Parallel Computing</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#code-availability-and-loading-packages\">Code Availability and Loading Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#data-movement\">Data Movement</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#parallel-map-and-loops\">Parallel Map and Loops</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#synchronization-with-remote-references\">Synchronization With Remote References</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#scheduling\">Scheduling</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#channels\">Channels</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#remoterefs-and-abstractchannels\">RemoteRefs and AbstractChannels</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#shared-arrays\">Shared Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#distributed-garbage-collection\">Distributed Garbage Collection</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#clustermanagers\">ClusterManagers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#cluster-managers-with-custom-transports\">Cluster Managers with custom transports</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/parallel-computing.html#specifying-network-topology-experimental\">Specifying network topology (Experimental)</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/dates.html\">Date and DateTime</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/dates.html#constructors\">Constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/dates.html#durations-comparisons\">Durations/Comparisons</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/dates.html#accessor-functions\">Accessor Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/dates.html#query-functions\">Query Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/dates.html#timetype-period-arithmetic\">TimeType-Period Arithmetic</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/dates.html#adjuster-functions\">Adjuster Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/dates.html#period-types\">Period Types</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/running-external-programs.html\">Running External Programs</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/running-external-programs.html#interpolation\">Interpolation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/running-external-programs.html#quoting\">Quoting</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/running-external-programs.html#pipelines\">Pipelines</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html\">Calling C and Fortran Code</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#creating-c-compatible-julia-function-pointers\">Creating C-Compatible Julia Function Pointers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#mapping-c-types-to-julia\">Mapping C Types to Julia</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#mapping-c-functions-to-julia\">Mapping C Functions to Julia</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#garbage-collection-safety\">Garbage Collection Safety</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#non-constant-function-specifications\">Non-constant Function Specifications</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#indirect-calls\">Indirect Calls</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#calling-convention\">Calling Convention</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#accessing-global-variables\">Accessing Global Variables</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#accessing-data-through-a-pointer\">Accessing Data through a Pointer</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#thread-safety\">Thread-safety</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#more-about-callbacks\">More About Callbacks</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#c\">C++</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/calling-c-and-fortran-code.html#handling-operating-system-variation\">Handling Operating System Variation</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/interacting-with-julia.html\">Interacting With Julia</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/interacting-with-julia.html#the-different-prompt-modes\">The different prompt modes</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/interacting-with-julia.html#key-bindings\">Key bindings</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/interacting-with-julia.html#tab-completion\">Tab completion</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/embedding.html\">Embedding Julia</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/embedding.html#high-level-embedding\">High-Level Embedding</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/embedding.html#converting-types\">Converting Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/embedding.html#calling-julia-functions\">Calling Julia Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/embedding.html#memory-management\">Memory Management</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/embedding.html#working-with-arrays\">Working with Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/embedding.html#exceptions\">Exceptions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/packages.html\">Packages</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#package-status\">Package Status</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#adding-and-removing-packages\">Adding and Removing Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#offline-installation-of-packages\">Offline Installation of Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#installing-unregistered-packages\">Installing Unregistered Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#updating-packages\">Updating Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#checkout-pin-and-free\">Checkout, Pin and Free</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#custom-metadata-repository\">Custom METADATA Repository</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/packages.html#package-development\">Package Development</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#initial-setup\">Initial Setup</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#making-changes-to-an-existing-package\">Making changes to an existing package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#creating-a-new-package\">Creating a new Package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#fixing-package-requirements\">Fixing Package Requirements</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/packages.html#man-package-requirements\">Requirements Specification</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/profile.html\">Profiling</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/profile.html#basic-usage\">Basic usage</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/profile.html#accumulation-and-clearing\">Accumulation and clearing</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/profile.html#options-for-controlling-the-display-of-profile-results\">Options for controlling the display of profile results</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/profile.html#configuration\">Configuration</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/profile.html#memory-allocation-analysis\">Memory allocation analysis</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/performance-tips.html\">Performance Tips</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#avoid-global-variables\">Avoid global variables</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#measure-performance-with-time-and-pay-attention-to-memory-allocation\">Measure performance with <code class=\"docutils literal\"><span class=\"pre\">&#64;time</span></code> and pay attention to memory allocation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#tools\">Tools</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#avoid-containers-with-abstract-type-parameters\">Avoid containers with abstract type parameters</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#type-declarations\">Type declarations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#break-functions-into-multiple-definitions\">Break functions into multiple definitions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#write-type-stable-functions\">Write &#8220;type-stable&#8221; functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#avoid-changing-the-type-of-a-variable\">Avoid changing the type of a variable</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#separate-kernel-functions\">Separate kernel functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#access-arrays-in-memory-order-along-columns\">Access arrays in memory order, along columns</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#pre-allocating-outputs\">Pre-allocating outputs</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#avoid-string-interpolation-for-i-o\">Avoid string interpolation for I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#optimize-network-i-o-during-parallel-execution\">Optimize network I/O during parallel execution</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#fix-deprecation-warnings\">Fix deprecation warnings</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#tweaks\">Tweaks</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#performance-annotations\">Performance Annotations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#treat-subnormal-numbers-as-zeros\">Treat Subnormal Numbers as Zeros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/performance-tips.html#code-warntype\"><code class=\"docutils literal\"><span class=\"pre\">&#64;code_warntype</span></code></a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/workflow-tips.html\">Workflow Tips</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/workflow-tips.html#repl-based-workflow\">REPL-based workflow</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/workflow-tips.html#browser-based-workflow\">Browser-based workflow</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/style-guide.html\">Style Guide</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#write-functions-not-just-scripts\">Write functions, not just scripts</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#avoid-writing-overly-specific-types\">Avoid writing overly-specific types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#handle-excess-argument-diversity-in-the-caller\">Handle excess argument diversity in the caller</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#append-to-names-of-functions-that-modify-their-arguments\">Append <code class=\"docutils literal\"><span class=\"pre\">!</span></code> to names of functions that modify their arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#avoid-strange-type-unions\">Avoid strange type Unions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#avoid-type-unions-in-fields\">Avoid type Unions in fields</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#avoid-elaborate-container-types\">Avoid elaborate container types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#use-naming-conventions-consistent-with-julia-s-base\">Use naming conventions consistent with Julia&#8217;s <code class=\"docutils literal\"><span class=\"pre\">base/</span></code></a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#don-t-overuse-try-catch\">Don&#8217;t overuse try-catch</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#don-t-parenthesize-conditions\">Don&#8217;t parenthesize conditions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#don-t-overuse\">Don&#8217;t overuse ...</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#don-t-use-unnecessary-static-parameters\">Don&#8217;t use unnecessary static parameters</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#avoid-confusion-about-whether-something-is-an-instance-or-a-type\">Avoid confusion about whether something is an instance or a type</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#don-t-overuse-macros\">Don&#8217;t overuse macros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#don-t-expose-unsafe-operations-at-the-interface-level\">Don&#8217;t expose unsafe operations at the interface level</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#don-t-overload-methods-of-base-container-types\">Don&#8217;t overload methods of base container types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#be-careful-with-type-equality\">Be careful with type equality</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#do-not-write-x-f-x\">Do not write <code class=\"docutils literal\"><span class=\"pre\">x-&gt;f(x)</span></code></a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/style-guide.html#avoid-using-floats-for-numeric-literals-in-generic-code-when-possible\">Avoid using floats for numeric literals in generic code when possible</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/faq.html\">Frequently Asked Questions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/faq.html#sessions-and-the-repl\">Sessions and the REPL</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/faq.html#functions\">Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/faq.html#types-type-declarations-and-constructors\">Types, type declarations, and constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/faq.html#packages-and-modules\">Packages and Modules</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/faq.html#nothingness-and-missing-values\">Nothingness and missing values</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/faq.html#memory\">Memory</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/faq.html#asynchronous-io-and-concurrent-synchronous-writes\">Asynchronous IO and concurrent synchronous writes</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/faq.html#julia-releases\">Julia Releases</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/noteworthy-differences.html\">Noteworthy Differences from other Languages</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/noteworthy-differences.html#noteworthy-differences-from-matlab\">Noteworthy differences from MATLAB</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/noteworthy-differences.html#noteworthy-differences-from-r\">Noteworthy differences from R</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/noteworthy-differences.html#noteworthy-differences-from-python\">Noteworthy differences from Python</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../manual/noteworthy-differences.html#noteworthy-differences-from-c-c\">Noteworthy differences from C/C++</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../manual/unicode-input.html\">Unicode Input</a></li>\n</ul>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"base.html\">Essentials</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#introduction\">Introduction</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#getting-around\">Getting Around</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#all-objects\">All Objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#types\">Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#generic-functions\">Generic Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#syntax\">Syntax</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#nullables\">Nullables</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#system\">System</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#errors\">Errors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#events\">Events</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#reflection\">Reflection</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"base.html#internals\">Internals</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"collections.html\">Collections and Data Structures</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"collections.html#iteration\">Iteration</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"collections.html#general-collections\">General Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"collections.html#iterable-collections\">Iterable Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"collections.html#indexable-collections\">Indexable Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"collections.html#associative-collections\">Associative Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"collections.html#set-like-collections\">Set-Like Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"collections.html#dequeues\">Dequeues</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"collections.html#priorityqueue\">PriorityQueue</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"collections.html#heap-functions\">Heap Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"math.html\">Mathematics</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"math.html#mathematical-operators\">Mathematical Operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"math.html#mathematical-functions\">Mathematical Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"math.html#statistics\">Statistics</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"math.html#signal-processing\">Signal Processing</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"math.html#numerical-integration\">Numerical Integration</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"numbers.html\">Numbers</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"numbers.html#standard-numeric-types\">Standard Numeric Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"numbers.html#data-formats\">Data Formats</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"numbers.html#general-number-functions-and-constants\">General Number Functions and Constants</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"numbers.html#bigfloats\">BigFloats</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"numbers.html#random-numbers\">Random Numbers</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"strings.html\">Strings</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"arrays.html\">Arrays</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#basic-functions\">Basic functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#constructors\">Constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#mathematical-operators-and-functions\">Mathematical operators and functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#indexing-assignment-and-concatenation\">Indexing, Assignment, and Concatenation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#array-functions\">Array functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#combinatorics\">Combinatorics</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#bitarrays\">BitArrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#sparse-matrices\">Sparse Matrices</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"parallel.html\">Tasks and Parallel Computing</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel.html#tasks\">Tasks</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel.html#general-parallel-computing-support\">General Parallel Computing Support</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel.html#shared-arrays\">Shared Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel.html#cluster-manager-interface\">Cluster Manager Interface</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"linalg.html\">Linear Algebra</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"linalg.html#module-Base.LinAlg\">Standard Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"linalg.html#module-Base.LinAlg.BLAS\">BLAS Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"linalg.html#module-Base.LinAlg.LAPACK\">LAPACK Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"constants.html\">Constants</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"file.html\">Filesystem</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"io-network.html\">I/O and Network</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"io-network.html#general-i-o\">General I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"io-network.html#text-i-o\">Text I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"io-network.html#multimedia-i-o\">Multimedia I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"io-network.html#memory-mapped-i-o\">Memory-mapped I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"io-network.html#network-i-o\">Network I/O</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"punctuation.html\">Punctuation</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"sort.html\">Sorting and Related Functions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"sort.html#sorting-functions\">Sorting Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"sort.html#order-related-functions\">Order-Related Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"sort.html#sorting-algorithms\">Sorting Algorithms</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pkg.html\">Package Manager Functions</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"dates.html\">Dates and Time</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"dates.html#dates-and-time-types\">Dates and Time Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"dates.html#dates-functions\">Dates Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"test.html\">Unit and Functional Testing</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"test.html#testing-base-julia\">Testing Base Julia</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"test.html#test-framework\">Test Framework</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"test.html#handlers\">Handlers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"test.html#macros\">Macros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"test.html#functions\">Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"c.html\">C Interface</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"c.html#llvm-interface\">LLVM Interface</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"profile.html\">Profiling</a></li>\n</ul>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../devdocs/reflection.html\">Reflection and introspection</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../devdocs/julia.html\">Documentation of Julia&#8217;s Internals</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/init.html\">Initialization of the Julia runtime</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/eval.html\">Eval of Julia code</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/ast.html\">Julia ASTs</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/types.html\">More about types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/object.html\">Memory layout of Julia Objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/cartesian.html\">Base.Cartesian</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/meta.html\">Talking to the compiler (the <code class=\"docutils literal\"><span class=\"pre\">:meta</span></code> mechanism)</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/subarrays.html\">SubArrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/sysimg.html\">System Image Building</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/llvm.html\">Working with LLVM</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/stdio.html\">printf() and stdio in the Julia runtime</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/promote-op.html\">Operator-sensitive promotion</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../devdocs/C.html\">Developing/debugging Julia&#8217;s C code</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/backtraces.html\">Reporting and analyzing crashes (segfaults)</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/debuggingtips.html\">gdb debugging tips</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/valgrind.html\">Using Valgrind with Julia</a></li>\n</ul>\n</li>\n</ul>\n\n        \n      </div>\n      &nbsp;\n    </nav>\n\n    <section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">\n\n      \n      <nav class=\"wy-nav-top\" role=\"navigation\" aria-label=\"top navigation\">\n        <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>\n        <a href=\"../index.html\">Julia Language</a>\n      </nav>\n\n\n      \n      <div class=\"wy-nav-content\">\n        <div class=\"rst-content\">\n          <div role=\"navigation\" aria-label=\"breadcrumbs navigation\">\n  <ul class=\"wy-breadcrumbs\">\n    <li><a href=\"../index.html\">Docs</a> &raquo;</li>\n      \n    <li>Dynamic Linker</li>\n      <li class=\"wy-breadcrumbs-aside\">\n        \n          <a href=\"../_sources/stdlib/libdl.txt\" rel=\"nofollow\"> View page source</a>\n        \n      </li>\n  </ul>\n  <hr/>\n</div>\n          <div role=\"main\" class=\"document\">\n            \n  <span class=\"target\" id=\"module-Libdl\"></span><div class=\"section\" id=\"dynamic-linker\">\n<h1>Dynamic Linker<a class=\"headerlink\" href=\"#dynamic-linker\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<dl class=\"function\">\n<dt id=\"Libdl.dlopen\">\n<code class=\"descname\">dlopen</code><span class=\"sig-paren\">(</span><em>libfile::AbstractString</em><span class=\"optional\">[</span>, <em>flags::Integer</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#Libdl.dlopen\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load a shared library, returning an opaque handle.</p>\n<p>The optional flags argument is a bitwise-or of zero or more of <code class=\"docutils literal\"><span class=\"pre\">RTLD_LOCAL</span></code>, <code class=\"docutils literal\"><span class=\"pre\">RTLD_GLOBAL</span></code>, <code class=\"docutils literal\"><span class=\"pre\">RTLD_LAZY</span></code>, <code class=\"docutils literal\"><span class=\"pre\">RTLD_NOW</span></code>, <code class=\"docutils literal\"><span class=\"pre\">RTLD_NODELETE</span></code>, <code class=\"docutils literal\"><span class=\"pre\">RTLD_NOLOAD</span></code>, <code class=\"docutils literal\"><span class=\"pre\">RTLD_DEEPBIND</span></code>, and <code class=\"docutils literal\"><span class=\"pre\">RTLD_FIRST</span></code>. These are converted to the corresponding flags of the POSIX (and/or GNU libc and/or MacOS) dlopen command, if possible, or are ignored if the specified functionality is not available on the current platform. The default flags are platform specific. On MacOS the default <code class=\"docutils literal\"><span class=\"pre\">dlopen</span></code> flags are <code class=\"docutils literal\"><span class=\"pre\">RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL</span></code> while on other platforms the defaults are <code class=\"docutils literal\"><span class=\"pre\">RTLD_LAZY|RTLD_DEEPBIND|RTLD_LOCAL</span></code>. An important usage of these flags is to specify non default behavior for when the dynamic library loader binds library references to exported symbols and if the bound references are put into process local or global scope. For instance <code class=\"docutils literal\"><span class=\"pre\">RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL</span></code> allows the library&#8217;s symbols to be available for usage in other shared libraries, addressing situations where there are dependencies between shared libraries.</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"Libdl.dlopen_e\">\n<code class=\"descname\">dlopen_e</code><span class=\"sig-paren\">(</span><em>libfile::AbstractString</em><span class=\"optional\">[</span>, <em>flags::Integer</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#Libdl.dlopen_e\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Similar to <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code class=\"xref jl jl-func docutils literal\"><span class=\"pre\">dlopen()</span></code></a>, except returns a <code class=\"docutils literal\"><span class=\"pre\">NULL</span></code> pointer instead of raising errors.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.RTLD_DEEPBIND\">\n<code class=\"descname\">RTLD_DEEPBIND</code><a class=\"headerlink\" href=\"#Libdl.RTLD_DEEPBIND\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code class=\"xref jl jl-func docutils literal\"><span class=\"pre\">dlopen()</span></code></a>. See your platform man page for details, if applicable.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.RTLD_FIRST\">\n<code class=\"descname\">RTLD_FIRST</code><a class=\"headerlink\" href=\"#Libdl.RTLD_FIRST\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code class=\"xref jl jl-func docutils literal\"><span class=\"pre\">dlopen()</span></code></a>. See your platform man page for details, if applicable.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.RTLD_GLOBAL\">\n<code class=\"descname\">RTLD_GLOBAL</code><a class=\"headerlink\" href=\"#Libdl.RTLD_GLOBAL\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code class=\"xref jl jl-func docutils literal\"><span class=\"pre\">dlopen()</span></code></a>. See your platform man page for details, if applicable.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.RTLD_LAZY\">\n<code class=\"descname\">RTLD_LAZY</code><a class=\"headerlink\" href=\"#Libdl.RTLD_LAZY\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code class=\"xref jl jl-func docutils literal\"><span class=\"pre\">dlopen()</span></code></a>. See your platform man page for details, if applicable.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.RTLD_LOCAL\">\n<code class=\"descname\">RTLD_LOCAL</code><a class=\"headerlink\" href=\"#Libdl.RTLD_LOCAL\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code class=\"xref jl jl-func docutils literal\"><span class=\"pre\">dlopen()</span></code></a>. See your platform man page for details, if applicable.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.RTLD_NODELETE\">\n<code class=\"descname\">RTLD_NODELETE</code><a class=\"headerlink\" href=\"#Libdl.RTLD_NODELETE\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code class=\"xref jl jl-func docutils literal\"><span class=\"pre\">dlopen()</span></code></a>. See your platform man page for details, if applicable.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.RTLD_NOLOAD\">\n<code class=\"descname\">RTLD_NOLOAD</code><a class=\"headerlink\" href=\"#Libdl.RTLD_NOLOAD\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code class=\"xref jl jl-func docutils literal\"><span class=\"pre\">dlopen()</span></code></a>. See your platform man page for details, if applicable.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.RTLD_NOW\">\n<code class=\"descname\">RTLD_NOW</code><a class=\"headerlink\" href=\"#Libdl.RTLD_NOW\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Enum constant for <a class=\"reference internal\" href=\"#Libdl.dlopen\" title=\"Libdl.dlopen\"><code class=\"xref jl jl-func docutils literal\"><span class=\"pre\">dlopen()</span></code></a>. See your platform man page for details, if applicable.</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"Libdl.dlsym\">\n<code class=\"descname\">dlsym</code><span class=\"sig-paren\">(</span><em>handle</em>, <em>sym</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#Libdl.dlsym\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Look up a symbol from a shared library handle, return callable function pointer on success.</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"Libdl.dlsym_e\">\n<code class=\"descname\">dlsym_e</code><span class=\"sig-paren\">(</span><em>handle</em>, <em>sym</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#Libdl.dlsym_e\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Look up a symbol from a shared library handle, silently return <code class=\"docutils literal\"><span class=\"pre\">NULL</span></code> pointer on lookup failure.</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"Libdl.dlclose\">\n<code class=\"descname\">dlclose</code><span class=\"sig-paren\">(</span><em>handle</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#Libdl.dlclose\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Close shared library referenced by handle.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.dlext\">\n<code class=\"descname\">dlext</code><a class=\"headerlink\" href=\"#Libdl.dlext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>File extension for dynamic libraries (e.g. dll, dylib, so) on the current platform.</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"Libdl.find_library\">\n<code class=\"descname\">find_library</code><span class=\"sig-paren\">(</span><em>names</em>, <em>locations</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#Libdl.find_library\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Searches for the first library in <code class=\"docutils literal\"><span class=\"pre\">names</span></code> in the paths in the <code class=\"docutils literal\"><span class=\"pre\">locations</span></code> list, <code class=\"docutils literal\"><span class=\"pre\">DL_LOAD_PATH</span></code>, or system library paths (in that order) which can successfully be dlopen&#8217;d. On success, the return value will be one of the names (potentially prefixed by one of the paths in locations). This string can be assigned to a <code class=\"docutils literal\"><span class=\"pre\">global</span> <span class=\"pre\">const</span></code> and used as the library name in future <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code>&#8216;s. On failure, it returns the empty string.</p>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"Libdl.DL_LOAD_PATH\">\n<code class=\"descname\">DL_LOAD_PATH</code><a class=\"headerlink\" href=\"#Libdl.DL_LOAD_PATH\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>When calling <code class=\"docutils literal\"><span class=\"pre\">dlopen</span></code>, the paths in this list will be searched first, in order, before searching the\nsystem locations for a valid library handle.</p>\n</dd></dl>\n\n</div>\n\n\n          </div>\n          <footer>\n  \n\n  <hr/>\n\n  <div role=\"contentinfo\">\n    <p>\n    </p>\n  </div>\n\n  <a href=\"https://github.com/snide/sphinx_rtd_theme\">Sphinx theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a>\n</footer>\n        </div>\n      </div>\n\n    </section>\n\n  </div>\n  \n\n  \n\n    <script type=\"text/javascript\">\n        var DOCUMENTATION_OPTIONS = {\n            URL_ROOT:'../',\n            VERSION:'0.4.5',\n            COLLAPSE_INDEX:false,\n            FILE_SUFFIX:'.html',\n            HAS_SOURCE:  true\n        };\n    </script>\n      <script type=\"text/javascript\" src=\"../_static/jquery.js\"></script>\n      <script type=\"text/javascript\" src=\"../_static/underscore.js\"></script>\n      <script type=\"text/javascript\" src=\"../_static/doctools.js\"></script>\n      <script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"../_static/js/theme.js\"></script>\n  \n\n  \n  \n  <script type=\"text/javascript\">\n      jQuery(function () {\n          SphinxRtdTheme.StickyNav.enable();\n      });\n  </script>\n   \n\n</body>\n</html>",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/manual/calling-c-and-fortran-code.html": "\n\n<!DOCTYPE html>\n<!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]-->\n<!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]-->\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  \n  <title>Calling C and Fortran Code &mdash; Julia Language 0.4.5 documentation</title>\n  \n\n  \n  \n\n  \n  <link href='https://fonts.googleapis.com/css?family=Lato:400,700|Roboto+Slab:400,700|Inconsolata:400,700' rel='stylesheet' type='text/css'>\n\n  \n  \n    \n\n  \n\n  \n  \n    <link rel=\"stylesheet\" href=\"../_static/julia.css\" type=\"text/css\" />\n  \n\n  \n    <link rel=\"stylesheet\" href=\"../_static/julia.css\" type=\"text/css\" />\n  \n    <link rel=\"top\" title=\"Julia Language 0.4.5 documentation\" href=\"../index.html\"/>\n        <link rel=\"next\" title=\"Interacting With Julia\" href=\"interacting-with-julia.html\"/>\n        <link rel=\"prev\" title=\"Running External Programs\" href=\"running-external-programs.html\"/> \n\n  \n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js\"></script>\n\n</head>\n\n<body class=\"wy-body-for-nav\" role=\"document\">\n\n  <div class=\"wy-grid-for-nav\">\n\n    \n    <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side\">\n      <div class=\"wy-side-nav-search\">\n        <a href=\"http://julialang.org/\"><img src=\"../_static/julia-logo.svg\" class=\"logo\"></a>\n        <!--\n        <a href=\"../index.html\" class=\"fa fa-home\"> Julia Language</a>\n        -->\n        <div role=\"search\">\n  <form id =\"rtd-search-form\" class=\"wy-form\" action=\"../search.html\" method=\"get\">\n    <input type=\"text\" name=\"q\" placeholder=\"Search docs\" />\n    <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />\n    <input type=\"hidden\" name=\"area\" value=\"default\" />\n  </form>\n</div>\n      </div>\n\n      <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\">\n        \n        \n            <ul class=\"current\">\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"introduction.html\">Introduction</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"getting-started.html\">Getting Started</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"getting-started.html#resources\">Resources</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"variables.html\">Variables</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"variables.html#allowed-variable-names\">Allowed Variable Names</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"variables.html#stylistic-conventions\">Stylistic Conventions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"integers-and-floating-point-numbers.html\">Integers and Floating-Point Numbers</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"integers-and-floating-point-numbers.html#integers\">Integers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"integers-and-floating-point-numbers.html#floating-point-numbers\">Floating-Point Numbers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"integers-and-floating-point-numbers.html#arbitrary-precision-arithmetic\">Arbitrary Precision Arithmetic</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"integers-and-floating-point-numbers.html#numeric-literal-coefficients\">Numeric Literal Coefficients</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"integers-and-floating-point-numbers.html#literal-zero-and-one\">Literal zero and one</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"mathematical-operations.html\">Mathematical Operations and Elementary Functions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"mathematical-operations.html#arithmetic-operators\">Arithmetic Operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"mathematical-operations.html#bitwise-operators\">Bitwise Operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"mathematical-operations.html#updating-operators\">Updating operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"mathematical-operations.html#numeric-comparisons\">Numeric Comparisons</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"mathematical-operations.html#numerical-conversions\">Numerical Conversions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"mathematical-operations.html#elementary-functions\">Elementary Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"complex-and-rational-numbers.html\">Complex and Rational Numbers</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"complex-and-rational-numbers.html#complex-numbers\">Complex Numbers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"complex-and-rational-numbers.html#rational-numbers\">Rational Numbers</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"strings.html\">Strings</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#characters\">Characters</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#string-basics\">String Basics</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#unicode-and-utf-8\">Unicode and UTF-8</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#interpolation\">Interpolation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#triple-quoted-string-literals\">Triple-Quoted String Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#common-operations\">Common Operations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#non-standard-string-literals\">Non-Standard String Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#regular-expressions\">Regular Expressions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#id3\">Byte Array Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"strings.html#version-number-literals\">Version Number Literals</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"functions.html\">Functions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#argument-passing-behavior\">Argument Passing Behavior</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#the-return-keyword\">The <code class=\"docutils literal\"><span class=\"pre\">return</span></code> Keyword</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#operators-are-functions\">Operators Are Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#operators-with-special-names\">Operators With Special Names</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#anonymous-functions\">Anonymous Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#multiple-return-values\">Multiple Return Values</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#varargs-functions\">Varargs Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#optional-arguments\">Optional Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#keyword-arguments\">Keyword Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#evaluation-scope-of-default-values\">Evaluation Scope of Default Values</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#do-block-syntax-for-function-arguments\">Do-Block Syntax for Function Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"functions.html#further-reading\">Further Reading</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"control-flow.html\">Control Flow</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"control-flow.html#compound-expressions\">Compound Expressions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"control-flow.html#conditional-evaluation\">Conditional Evaluation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"control-flow.html#short-circuit-evaluation\">Short-Circuit Evaluation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"control-flow.html#repeated-evaluation-loops\">Repeated Evaluation: Loops</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"control-flow.html#exception-handling\">Exception Handling</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"control-flow.html#tasks-aka-coroutines\">Tasks (aka Coroutines)</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"variables-and-scoping.html\">Scope of Variables</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"variables-and-scoping.html#global-scope\">Global Scope</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"variables-and-scoping.html#local-scope\">Local Scope</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"variables-and-scoping.html#constants\">Constants</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"types.html\">Types</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#type-declarations\">Type Declarations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#abstract-types\">Abstract Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#bits-types\">Bits Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#composite-types\">Composite Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#immutable-composite-types\">Immutable Composite Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#declared-types\">Declared Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#type-unions\">Type Unions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#man-parametric-types\">Parametric Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#type-aliases\">Type Aliases</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#operations-on-types\">Operations on Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#value-types\">&#8220;Value types&#8221;</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"types.html#nullable-types-representing-missing-values\">Nullable Types: Representing Missing Values</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"methods.html\">Methods</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"methods.html#defining-methods\">Defining Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"methods.html#method-ambiguities\">Method Ambiguities</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"methods.html#parametric-methods\">Parametric Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"methods.html#note-on-optional-and-keyword-arguments\">Note on Optional and keyword Arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"methods.html#call-overloading-and-function-like-objects\">Call overloading and function-like objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"methods.html#empty-generic-functions\">Empty generic functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"constructors.html\">Constructors</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"constructors.html#outer-constructor-methods\">Outer Constructor Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"constructors.html#inner-constructor-methods\">Inner Constructor Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"constructors.html#incomplete-initialization\">Incomplete Initialization</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"constructors.html#parametric-constructors\">Parametric Constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"constructors.html#case-study-rational\">Case Study: Rational</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"constructors.html#constructors-call-and-conversion\">Constructors, Call, and Conversion</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"constructors.html#outer-only-constructors\">Outer-only constructors</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"conversion-and-promotion.html\">Conversion and Promotion</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"conversion-and-promotion.html#conversion\">Conversion</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"conversion-and-promotion.html#promotion\">Promotion</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"interfaces.html\">Interfaces</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"interfaces.html#iteration\">Iteration</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"interfaces.html#indexing\">Indexing</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"interfaces.html#abstract-arrays\">Abstract Arrays</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"modules.html\">Modules</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"modules.html#summary-of-module-usage\">Summary of module usage</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"documentation.html\">Documentation</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"documentation.html#accessing-documentation\">Accessing Documentation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"documentation.html#functions-methods\">Functions &amp; Methods</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"documentation.html#advanced-usage\">Advanced Usage</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"documentation.html#syntax-guide\">Syntax Guide</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"documentation.html#markdown-syntax-notes\">Markdown Syntax Notes</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"metaprogramming.html\">Metaprogramming</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metaprogramming.html#program-representation\">Program representation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metaprogramming.html#expressions-and-evaluation\">Expressions and evaluation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metaprogramming.html#macros\">Macros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metaprogramming.html#code-generation\">Code Generation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metaprogramming.html#non-standard-string-literals\">Non-Standard String Literals</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metaprogramming.html#generated-functions\">Generated functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"arrays.html\">Multi-dimensional Arrays</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#arrays\">Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"arrays.html#sparse-matrices\">Sparse Matrices</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"linear-algebra.html\">Linear algebra</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"linear-algebra.html#matrix-factorizations\">Matrix factorizations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"linear-algebra.html#special-matrices\">Special matrices</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"networking-and-streams.html\">Networking and Streams</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"networking-and-streams.html#basic-stream-i-o\">Basic Stream I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"networking-and-streams.html#text-i-o\">Text I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"networking-and-streams.html#working-with-files\">Working with Files</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"networking-and-streams.html#a-simple-tcp-example\">A simple TCP example</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"networking-and-streams.html#resolving-ip-addresses\">Resolving IP Addresses</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"parallel-computing.html\">Parallel Computing</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#code-availability-and-loading-packages\">Code Availability and Loading Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#data-movement\">Data Movement</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#parallel-map-and-loops\">Parallel Map and Loops</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#synchronization-with-remote-references\">Synchronization With Remote References</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#scheduling\">Scheduling</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#channels\">Channels</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#remoterefs-and-abstractchannels\">RemoteRefs and AbstractChannels</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#shared-arrays\">Shared Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#distributed-garbage-collection\">Distributed Garbage Collection</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#clustermanagers\">ClusterManagers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#cluster-managers-with-custom-transports\">Cluster Managers with custom transports</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"parallel-computing.html#specifying-network-topology-experimental\">Specifying network topology (Experimental)</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"dates.html\">Date and DateTime</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"dates.html#constructors\">Constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"dates.html#durations-comparisons\">Durations/Comparisons</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"dates.html#accessor-functions\">Accessor Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"dates.html#query-functions\">Query Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"dates.html#timetype-period-arithmetic\">TimeType-Period Arithmetic</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"dates.html#adjuster-functions\">Adjuster Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"dates.html#period-types\">Period Types</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"running-external-programs.html\">Running External Programs</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"running-external-programs.html#interpolation\">Interpolation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"running-external-programs.html#quoting\">Quoting</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"running-external-programs.html#pipelines\">Pipelines</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1 current\"><a class=\"current reference internal\" href=\"\">Calling C and Fortran Code</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#creating-c-compatible-julia-function-pointers\">Creating C-Compatible Julia Function Pointers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#mapping-c-types-to-julia\">Mapping C Types to Julia</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#mapping-c-functions-to-julia\">Mapping C Functions to Julia</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#garbage-collection-safety\">Garbage Collection Safety</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#non-constant-function-specifications\">Non-constant Function Specifications</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#indirect-calls\">Indirect Calls</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#calling-convention\">Calling Convention</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#accessing-global-variables\">Accessing Global Variables</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#accessing-data-through-a-pointer\">Accessing Data through a Pointer</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#thread-safety\">Thread-safety</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#more-about-callbacks\">More About Callbacks</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#c\">C++</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#handling-operating-system-variation\">Handling Operating System Variation</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"interacting-with-julia.html\">Interacting With Julia</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"interacting-with-julia.html#the-different-prompt-modes\">The different prompt modes</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"interacting-with-julia.html#key-bindings\">Key bindings</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"interacting-with-julia.html#tab-completion\">Tab completion</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"embedding.html\">Embedding Julia</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"embedding.html#high-level-embedding\">High-Level Embedding</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"embedding.html#converting-types\">Converting Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"embedding.html#calling-julia-functions\">Calling Julia Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"embedding.html#memory-management\">Memory Management</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"embedding.html#working-with-arrays\">Working with Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"embedding.html#exceptions\">Exceptions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"packages.html\">Packages</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#package-status\">Package Status</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#adding-and-removing-packages\">Adding and Removing Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#offline-installation-of-packages\">Offline Installation of Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#installing-unregistered-packages\">Installing Unregistered Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#updating-packages\">Updating Packages</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#checkout-pin-and-free\">Checkout, Pin and Free</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#custom-metadata-repository\">Custom METADATA Repository</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"packages.html#package-development\">Package Development</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#initial-setup\">Initial Setup</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#making-changes-to-an-existing-package\">Making changes to an existing package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#creating-a-new-package\">Creating a new Package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#fixing-package-requirements\">Fixing Package Requirements</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"packages.html#man-package-requirements\">Requirements Specification</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"profile.html\">Profiling</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"profile.html#basic-usage\">Basic usage</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"profile.html#accumulation-and-clearing\">Accumulation and clearing</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"profile.html#options-for-controlling-the-display-of-profile-results\">Options for controlling the display of profile results</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"profile.html#configuration\">Configuration</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"profile.html#memory-allocation-analysis\">Memory allocation analysis</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"performance-tips.html\">Performance Tips</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#avoid-global-variables\">Avoid global variables</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#measure-performance-with-time-and-pay-attention-to-memory-allocation\">Measure performance with <code class=\"docutils literal\"><span class=\"pre\">&#64;time</span></code> and pay attention to memory allocation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#tools\">Tools</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#avoid-containers-with-abstract-type-parameters\">Avoid containers with abstract type parameters</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#type-declarations\">Type declarations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#break-functions-into-multiple-definitions\">Break functions into multiple definitions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#write-type-stable-functions\">Write &#8220;type-stable&#8221; functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#avoid-changing-the-type-of-a-variable\">Avoid changing the type of a variable</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#separate-kernel-functions\">Separate kernel functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#access-arrays-in-memory-order-along-columns\">Access arrays in memory order, along columns</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#pre-allocating-outputs\">Pre-allocating outputs</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#avoid-string-interpolation-for-i-o\">Avoid string interpolation for I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#optimize-network-i-o-during-parallel-execution\">Optimize network I/O during parallel execution</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#fix-deprecation-warnings\">Fix deprecation warnings</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#tweaks\">Tweaks</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#performance-annotations\">Performance Annotations</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#treat-subnormal-numbers-as-zeros\">Treat Subnormal Numbers as Zeros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"performance-tips.html#code-warntype\"><code class=\"docutils literal\"><span class=\"pre\">&#64;code_warntype</span></code></a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"workflow-tips.html\">Workflow Tips</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"workflow-tips.html#repl-based-workflow\">REPL-based workflow</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"workflow-tips.html#browser-based-workflow\">Browser-based workflow</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"style-guide.html\">Style Guide</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#write-functions-not-just-scripts\">Write functions, not just scripts</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#avoid-writing-overly-specific-types\">Avoid writing overly-specific types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#handle-excess-argument-diversity-in-the-caller\">Handle excess argument diversity in the caller</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#append-to-names-of-functions-that-modify-their-arguments\">Append <code class=\"docutils literal\"><span class=\"pre\">!</span></code> to names of functions that modify their arguments</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#avoid-strange-type-unions\">Avoid strange type Unions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#avoid-type-unions-in-fields\">Avoid type Unions in fields</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#avoid-elaborate-container-types\">Avoid elaborate container types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#use-naming-conventions-consistent-with-julia-s-base\">Use naming conventions consistent with Julia&#8217;s <code class=\"docutils literal\"><span class=\"pre\">base/</span></code></a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#don-t-overuse-try-catch\">Don&#8217;t overuse try-catch</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#don-t-parenthesize-conditions\">Don&#8217;t parenthesize conditions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#don-t-overuse\">Don&#8217;t overuse ...</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#don-t-use-unnecessary-static-parameters\">Don&#8217;t use unnecessary static parameters</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#avoid-confusion-about-whether-something-is-an-instance-or-a-type\">Avoid confusion about whether something is an instance or a type</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#don-t-overuse-macros\">Don&#8217;t overuse macros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#don-t-expose-unsafe-operations-at-the-interface-level\">Don&#8217;t expose unsafe operations at the interface level</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#don-t-overload-methods-of-base-container-types\">Don&#8217;t overload methods of base container types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#be-careful-with-type-equality\">Be careful with type equality</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#do-not-write-x-f-x\">Do not write <code class=\"docutils literal\"><span class=\"pre\">x-&gt;f(x)</span></code></a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"style-guide.html#avoid-using-floats-for-numeric-literals-in-generic-code-when-possible\">Avoid using floats for numeric literals in generic code when possible</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"faq.html\">Frequently Asked Questions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq.html#sessions-and-the-repl\">Sessions and the REPL</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq.html#functions\">Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq.html#types-type-declarations-and-constructors\">Types, type declarations, and constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq.html#packages-and-modules\">Packages and Modules</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq.html#nothingness-and-missing-values\">Nothingness and missing values</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq.html#memory\">Memory</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq.html#asynchronous-io-and-concurrent-synchronous-writes\">Asynchronous IO and concurrent synchronous writes</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq.html#julia-releases\">Julia Releases</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"noteworthy-differences.html\">Noteworthy Differences from other Languages</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"noteworthy-differences.html#noteworthy-differences-from-matlab\">Noteworthy differences from MATLAB</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"noteworthy-differences.html#noteworthy-differences-from-r\">Noteworthy differences from R</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"noteworthy-differences.html#noteworthy-differences-from-python\">Noteworthy differences from Python</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"noteworthy-differences.html#noteworthy-differences-from-c-c\">Noteworthy differences from C/C++</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"unicode-input.html\">Unicode Input</a></li>\n</ul>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/base.html\">Essentials</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#introduction\">Introduction</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#getting-around\">Getting Around</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#all-objects\">All Objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#types\">Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#generic-functions\">Generic Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#syntax\">Syntax</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#nullables\">Nullables</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#system\">System</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#errors\">Errors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#events\">Events</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#reflection\">Reflection</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/base.html#internals\">Internals</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/collections.html\">Collections and Data Structures</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/collections.html#iteration\">Iteration</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/collections.html#general-collections\">General Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/collections.html#iterable-collections\">Iterable Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/collections.html#indexable-collections\">Indexable Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/collections.html#associative-collections\">Associative Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/collections.html#set-like-collections\">Set-Like Collections</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/collections.html#dequeues\">Dequeues</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/collections.html#priorityqueue\">PriorityQueue</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/collections.html#heap-functions\">Heap Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/math.html\">Mathematics</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/math.html#mathematical-operators\">Mathematical Operators</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/math.html#mathematical-functions\">Mathematical Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/math.html#statistics\">Statistics</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/math.html#signal-processing\">Signal Processing</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/math.html#numerical-integration\">Numerical Integration</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/numbers.html\">Numbers</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/numbers.html#standard-numeric-types\">Standard Numeric Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/numbers.html#data-formats\">Data Formats</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/numbers.html#general-number-functions-and-constants\">General Number Functions and Constants</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/numbers.html#bigfloats\">BigFloats</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/numbers.html#random-numbers\">Random Numbers</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/strings.html\">Strings</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/arrays.html\">Arrays</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/arrays.html#basic-functions\">Basic functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/arrays.html#constructors\">Constructors</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/arrays.html#mathematical-operators-and-functions\">Mathematical operators and functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/arrays.html#indexing-assignment-and-concatenation\">Indexing, Assignment, and Concatenation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/arrays.html#array-functions\">Array functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/arrays.html#combinatorics\">Combinatorics</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/arrays.html#bitarrays\">BitArrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/arrays.html#sparse-matrices\">Sparse Matrices</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/parallel.html\">Tasks and Parallel Computing</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/parallel.html#tasks\">Tasks</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/parallel.html#general-parallel-computing-support\">General Parallel Computing Support</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/parallel.html#shared-arrays\">Shared Arrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/parallel.html#cluster-manager-interface\">Cluster Manager Interface</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/linalg.html\">Linear Algebra</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/linalg.html#module-Base.LinAlg\">Standard Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/linalg.html#module-Base.LinAlg.BLAS\">BLAS Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/linalg.html#module-Base.LinAlg.LAPACK\">LAPACK Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/constants.html\">Constants</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/file.html\">Filesystem</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/io-network.html\">I/O and Network</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/io-network.html#general-i-o\">General I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/io-network.html#text-i-o\">Text I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/io-network.html#multimedia-i-o\">Multimedia I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/io-network.html#memory-mapped-i-o\">Memory-mapped I/O</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/io-network.html#network-i-o\">Network I/O</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/punctuation.html\">Punctuation</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/sort.html\">Sorting and Related Functions</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/sort.html#sorting-functions\">Sorting Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/sort.html#order-related-functions\">Order-Related Functions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/sort.html#sorting-algorithms\">Sorting Algorithms</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/pkg.html\">Package Manager Functions</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/dates.html\">Dates and Time</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/dates.html#dates-and-time-types\">Dates and Time Types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/dates.html#dates-functions\">Dates Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/test.html\">Unit and Functional Testing</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/test.html#testing-base-julia\">Testing Base Julia</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/test.html#test-framework\">Test Framework</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/test.html#handlers\">Handlers</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/test.html#macros\">Macros</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../stdlib/test.html#functions\">Functions</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/c.html\">C Interface</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/c.html#llvm-interface\">LLVM Interface</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../stdlib/profile.html\">Profiling</a></li>\n</ul>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../devdocs/reflection.html\">Reflection and introspection</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../devdocs/julia.html\">Documentation of Julia&#8217;s Internals</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/init.html\">Initialization of the Julia runtime</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/eval.html\">Eval of Julia code</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/ast.html\">Julia ASTs</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/types.html\">More about types</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/object.html\">Memory layout of Julia Objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/cartesian.html\">Base.Cartesian</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/meta.html\">Talking to the compiler (the <code class=\"docutils literal\"><span class=\"pre\">:meta</span></code> mechanism)</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/subarrays.html\">SubArrays</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/sysimg.html\">System Image Building</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/llvm.html\">Working with LLVM</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/stdio.html\">printf() and stdio in the Julia runtime</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/promote-op.html\">Operator-sensitive promotion</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../devdocs/C.html\">Developing/debugging Julia&#8217;s C code</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/backtraces.html\">Reporting and analyzing crashes (segfaults)</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/debuggingtips.html\">gdb debugging tips</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../devdocs/valgrind.html\">Using Valgrind with Julia</a></li>\n</ul>\n</li>\n</ul>\n\n        \n      </div>\n      &nbsp;\n    </nav>\n\n    <section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">\n\n      \n      <nav class=\"wy-nav-top\" role=\"navigation\" aria-label=\"top navigation\">\n        <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>\n        <a href=\"../index.html\">Julia Language</a>\n      </nav>\n\n\n      \n      <div class=\"wy-nav-content\">\n        <div class=\"rst-content\">\n          <div role=\"navigation\" aria-label=\"breadcrumbs navigation\">\n  <ul class=\"wy-breadcrumbs\">\n    <li><a href=\"../index.html\">Docs</a> &raquo;</li>\n      \n    <li>Calling C and Fortran Code</li>\n      <li class=\"wy-breadcrumbs-aside\">\n        \n          <a href=\"../_sources/manual/calling-c-and-fortran-code.txt\" rel=\"nofollow\"> View page source</a>\n        \n      </li>\n  </ul>\n  <hr/>\n</div>\n          <div role=\"main\" class=\"document\">\n            \n  <div class=\"section\" id=\"calling-c-and-fortran-code\">\n<span id=\"man-calling-c-and-fortran-code\"></span><h1>Calling C and Fortran Code<a class=\"headerlink\" href=\"#calling-c-and-fortran-code\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Though most code can be written in Julia, there are many high-quality,\nmature libraries for numerical computing already written in C and\nFortran. To allow easy use of this existing code, Julia makes it simple\nand efficient to call C and Fortran functions. Julia has a &#8220;no\nboilerplate&#8221; philosophy: functions can be called directly from Julia\nwithout any &#8220;glue&#8221; code, code generation, or compilation \u2014 even from the\ninteractive prompt. This is accomplished just by making an appropriate call\nwith <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> syntax, which looks like an ordinary function call.</p>\n<p>The code to be called must be available as a shared library. Most C and\nFortran libraries ship compiled as shared libraries already, but if you\nare compiling the code yourself using GCC (or Clang), you will need to\nuse the <code class=\"docutils literal\"><span class=\"pre\">-shared</span></code> and <code class=\"docutils literal\"><span class=\"pre\">-fPIC</span></code> options. The machine instructions\ngenerated by Julia&#8217;s JIT are the same as a native C call would be, so\nthe resulting overhead is the same as calling a library function from C\ncode. (Non-library function calls in both C and Julia can be inlined and\nthus may have even less overhead than calls to shared library functions.\nWhen both libraries and executables are generated by LLVM, it is\npossible to perform whole-program optimizations that can even optimize\nacross this boundary, but Julia does not yet support that. In the\nfuture, however, it may do so, yielding even greater performance gains.)</p>\n<p>Shared libraries and functions are referenced by a tuple of the\nform <code class=\"docutils literal\"><span class=\"pre\">(:function,</span> <span class=\"pre\">&quot;library&quot;)</span></code> or <code class=\"docutils literal\"><span class=\"pre\">(&quot;function&quot;,</span> <span class=\"pre\">&quot;library&quot;)</span></code> where <code class=\"docutils literal\"><span class=\"pre\">function</span></code>\nis the C-exported function name. <code class=\"docutils literal\"><span class=\"pre\">library</span></code> refers to the shared library\nname: shared libraries available in the (platform-specific) load path\nwill be resolved by name, and if necessary a direct path may be specified.</p>\n<p>A function name may be used alone in place of the tuple (just\n<code class=\"docutils literal\"><span class=\"pre\">:function</span></code> or <code class=\"docutils literal\"><span class=\"pre\">&quot;function&quot;</span></code>). In this case the name is resolved within\nthe current process. This form can be used to call C library functions,\nfunctions in the Julia runtime, or functions in an application linked to\nJulia.</p>\n<p>By default, Fortran compilers <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Name_mangling#Fortran\">generate mangled names</a>\n(for example, converting function names to lowercase or uppercase,\noften appending an underscore), and so to call a Fortran function via\n<code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> you must pass the mangled identifier corresponding to the rule\nfollowed by your Fortran compiler.  Also, when calling a Fortran\nfunction, all inputs must be passed by reference.</p>\n<p>Finally, you can use <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> to actually generate a call to the\nlibrary function. Arguments to <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> are as follows:</p>\n<ol class=\"arabic simple\">\n<li>(:function, &#8220;library&#8221;) pair (must be a constant, but see below).</li>\n<li>Return type (see below for mapping the declared C type to Julia)<ul>\n<li>This argument will be evaluated at compile-time.</li>\n</ul>\n</li>\n<li>A tuple of input types. The input types must be written as a literal tuple,\nnot a tuple-valued variable or expression.<ul>\n<li>This argument will be evaluated at compile-time.</li>\n</ul>\n</li>\n<li>The following arguments, if any, are the actual argument values\npassed to the function.</li>\n</ol>\n<p>As a complete but simple example, the following calls the <code class=\"docutils literal\"><span class=\"pre\">clock</span></code>\nfunction from the standard C library:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"k\">ccall</span><span class=\"p\">(</span> <span class=\"p\">(:</span><span class=\"n\">clock</span><span class=\"p\">,</span> <span class=\"s\">&quot;libc&quot;</span><span class=\"p\">),</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"p\">())</span>\n<span class=\"mi\">2292761</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">t</span>\n<span class=\"mi\">2292761</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nb\">typeof</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">)</span>\n<span class=\"kt\">Int32</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">clock</span></code> takes no arguments and returns an <code class=\"docutils literal\"><span class=\"pre\">Int32</span></code>. One common gotcha\nis that a 1-tuple must be written with a trailing comma. For\nexample, to call the <code class=\"docutils literal\"><span class=\"pre\">getenv</span></code> function to get a pointer to the value\nof an environment variable, one makes a call like this:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"k\">ccall</span><span class=\"p\">((:</span><span class=\"n\">getenv</span><span class=\"p\">,</span> <span class=\"s\">&quot;libc&quot;</span><span class=\"p\">),</span> <span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">},),</span> <span class=\"s\">&quot;SHELL&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">}</span> <span class=\"p\">@</span><span class=\"mh\">0x00007fff5fbffc45</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">bytestring</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"s\">&quot;/bin/bash&quot;</span>\n</pre></div>\n</div>\n<p>Note that the argument type tuple must be written as <code class=\"docutils literal\"><span class=\"pre\">(Ptr{UInt8},)</span></code>,\nrather than <code class=\"docutils literal\"><span class=\"pre\">(Ptr{UInt8})</span></code>. This is because <code class=\"docutils literal\"><span class=\"pre\">(Ptr{UInt8})</span></code> is just\nthe expression <code class=\"docutils literal\"><span class=\"pre\">Ptr{UInt8}</span></code> surrounded by parentheses, rather than\na 1-tuple containing <code class=\"docutils literal\"><span class=\"pre\">Ptr{UInt8}</span></code>:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">})</span>\n<span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">}</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">},)</span>\n<span class=\"p\">(</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">},)</span>\n</pre></div>\n</div>\n<p>In practice, especially when providing reusable functionality, one\ngenerally wraps <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> uses in Julia functions that set up arguments\nand then check for errors in whatever manner the C or Fortran function\nindicates them, propagating to the Julia caller as exceptions. This is\nespecially important since C and Fortran APIs are notoriously\ninconsistent about how they indicate error conditions. For example, the\n<code class=\"docutils literal\"><span class=\"pre\">getenv</span></code> C library function is wrapped in the following Julia function\nin\n<a class=\"reference external\" href=\"https://github.com/JuliaLang/julia/blob/master/base/env.jl\">env.jl</a>:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"k\">function</span><span class=\"nf\"> getenv</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">::</span><span class=\"n\">AbstractString</span><span class=\"p\">)</span>\n  <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"k\">ccall</span><span class=\"p\">((:</span><span class=\"n\">getenv</span><span class=\"p\">,</span> <span class=\"s\">&quot;libc&quot;</span><span class=\"p\">),</span>\n              <span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">},),</span> <span class=\"n\">var</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">C_NULL</span>\n    <span class=\"nb\">error</span><span class=\"p\">(</span><span class=\"s\">&quot;getenv: undefined variable: &quot;</span><span class=\"p\">,</span> <span class=\"n\">var</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n  <span class=\"n\">bytestring</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n<p>The C <code class=\"docutils literal\"><span class=\"pre\">getenv</span></code> function indicates an error by returning <code class=\"docutils literal\"><span class=\"pre\">NULL</span></code>, but\nother standard C functions indicate errors in various different ways,\nincluding by returning -1, 0, 1 and other special values. This wrapper\nthrows an exception clearly indicating the problem if the caller tries\nto get a non-existent environment variable:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">&quot;SHELL&quot;</span><span class=\"p\">)</span>\n<span class=\"s\">&quot;/bin/bash&quot;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">&quot;FOOBAR&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">getenv</span><span class=\"p\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"n\">FOOBAR</span>\n</pre></div>\n</div>\n<p>Here is a slightly more complex example that discovers the local\nmachine&#8217;s hostname:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"k\">function</span><span class=\"nf\"> gethostname</span><span class=\"p\">()</span>\n  <span class=\"n\">hostname</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">UInt8</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n  <span class=\"k\">ccall</span><span class=\"p\">((:</span><span class=\"n\">gethostname</span><span class=\"p\">,</span> <span class=\"s\">&quot;libc&quot;</span><span class=\"p\">),</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span>\n        <span class=\"p\">(</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">},</span> <span class=\"n\">Csize_t</span><span class=\"p\">),</span>\n        <span class=\"n\">hostname</span><span class=\"p\">,</span> <span class=\"nb\">sizeof</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">))</span>\n  <span class=\"n\">hostname</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c\"># ensure null-termination</span>\n  <span class=\"k\">return</span> <span class=\"n\">bytestring</span><span class=\"p\">(</span><span class=\"n\">pointer</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n<p>This example first allocates an array of bytes, then calls the C library\nfunction <code class=\"docutils literal\"><span class=\"pre\">gethostname</span></code> to fill the array in with the hostname, takes a\npointer to the hostname buffer, and converts the pointer to a Julia\nstring, assuming that it is a NUL-terminated C string. It is common for\nC libraries to use this pattern of requiring the caller to allocate\nmemory to be passed to the callee and filled in. Allocation of memory\nfrom Julia like this is generally accomplished by creating an\nuninitialized array and passing a pointer to its data to the C function.</p>\n<div class=\"section\" id=\"creating-c-compatible-julia-function-pointers\">\n<h2>Creating C-Compatible Julia Function Pointers<a class=\"headerlink\" href=\"#creating-c-compatible-julia-function-pointers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>It is possible to pass Julia functions to native c-functions that accept\nfunction pointer arguments. For example, to match c-prototypes of the form:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">typedef</span> <span class=\"n\">returntype</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">functiontype</span><span class=\"p\">)(</span><span class=\"n\">argumenttype</span><span class=\"p\">,</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The function <code class=\"docutils literal\"><span class=\"pre\">cfunction</span></code> generates the c-compatible function pointer for\na call to a Julia library function.\nArguments to <code class=\"docutils literal\"><span class=\"pre\">cfunction</span></code> are as follows:</p>\n<ol class=\"arabic simple\">\n<li>A Julia Function</li>\n<li>Return type</li>\n<li>A tuple of input types</li>\n</ol>\n<p>A classic example is the standard C library <code class=\"docutils literal\"><span class=\"pre\">qsort</span></code> function,\ndeclared as:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">void</span> <span class=\"n\">qsort</span><span class=\"p\">(</span><span class=\"n\">void</span> <span class=\"o\">*</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">nmemb</span><span class=\"p\">,</span> <span class=\"n\">size_t</span> <span class=\"n\">size</span><span class=\"p\">,</span>\n           <span class=\"n\">int</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">compare</span><span class=\"p\">)(</span><span class=\"kd\">const</span> <span class=\"n\">void</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kd\">const</span> <span class=\"n\">void</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">));</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal\"><span class=\"pre\">base</span></code> argument is a pointer to an array of length <code class=\"docutils literal\"><span class=\"pre\">nmemb</span></code>, with elements of\n<code class=\"docutils literal\"><span class=\"pre\">size</span></code> bytes each. <code class=\"docutils literal\"><span class=\"pre\">compare</span></code> is a callback function which takes pointers to two\nelements <code class=\"docutils literal\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal\"><span class=\"pre\">b</span></code> and returns an integer less/greater than zero if <code class=\"docutils literal\"><span class=\"pre\">a</span></code> should\nappear before/after <code class=\"docutils literal\"><span class=\"pre\">b</span></code> (or zero if any order is permitted). Now, suppose that we\nhave a 1d array <code class=\"docutils literal\"><span class=\"pre\">A</span></code> of values in Julia that we want to sort using the <code class=\"docutils literal\"><span class=\"pre\">qsort</span></code>\nfunction (rather than Julia&#8217;s built-in <code class=\"docutils literal\"><span class=\"pre\">sort</span></code> function). Before we worry about calling\n<code class=\"docutils literal\"><span class=\"pre\">qsort</span></code> and passing arguments, we need to write a comparison function that works for\nsome arbitrary type T:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"k\">function</span><span class=\"nf\"> mycompare</span><span class=\"p\">{</span><span class=\"n\">T</span><span class=\"p\">}(</span><span class=\"n\">a</span><span class=\"p\">::</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">::</span><span class=\"n\">T</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">convert</span><span class=\"p\">(</span><span class=\"n\">Cint</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)::</span><span class=\"n\">Cint</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n<p>Notice that we have to be careful about the return type: <code class=\"docutils literal\"><span class=\"pre\">qsort</span></code> expects a function\nreturning a C <code class=\"docutils literal\"><span class=\"pre\">int</span></code>, so we must be sure to return <code class=\"docutils literal\"><span class=\"pre\">Cint</span></code> via a call to <code class=\"docutils literal\"><span class=\"pre\">convert</span></code>\nand a <code class=\"docutils literal\"><span class=\"pre\">typeassert</span></code>.</p>\n<p>In order to pass this function to C, we obtain its address using the function <code class=\"docutils literal\"><span class=\"pre\">cfunction</span></code>:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">const</span> <span class=\"n\">mycompare_c</span> <span class=\"o\">=</span> <span class=\"n\">cfunction</span><span class=\"p\">(</span><span class=\"n\">mycompare</span><span class=\"p\">,</span> <span class=\"n\">Cint</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Ref</span><span class=\"p\">{</span><span class=\"n\">Cdouble</span><span class=\"p\">},</span> <span class=\"n\">Ref</span><span class=\"p\">{</span><span class=\"n\">Cdouble</span><span class=\"p\">}))</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">cfunction</span></code> accepts three arguments: the Julia function (<code class=\"docutils literal\"><span class=\"pre\">mycompare</span></code>), the return\ntype (<code class=\"docutils literal\"><span class=\"pre\">Cint</span></code>), and a tuple of the argument types, in this case to sort an array of\n<code class=\"docutils literal\"><span class=\"pre\">Cdouble</span></code> (Float64) elements.</p>\n<p>The final call to <code class=\"docutils literal\"><span class=\"pre\">qsort</span></code> looks like this:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.7</span><span class=\"p\">,</span> <span class=\"mf\">4.4</span><span class=\"p\">,</span> <span class=\"mf\">3.1</span><span class=\"p\">]</span>\n<span class=\"k\">ccall</span><span class=\"p\">(:</span><span class=\"n\">qsort</span><span class=\"p\">,</span> <span class=\"n\">Void</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">Cdouble</span><span class=\"p\">},</span> <span class=\"n\">Csize_t</span><span class=\"p\">,</span> <span class=\"n\">Csize_t</span><span class=\"p\">,</span> <span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">Void</span><span class=\"p\">}),</span>\n      <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">),</span> <span class=\"nb\">sizeof</span><span class=\"p\">(</span><span class=\"n\">eltype</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)),</span> <span class=\"n\">mycompare_c</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>After this executes, <code class=\"docutils literal\"><span class=\"pre\">A</span></code> is changed to the sorted array <code class=\"docutils literal\"><span class=\"pre\">[-2.7,</span> <span class=\"pre\">1.3,</span> <span class=\"pre\">3.1,</span> <span class=\"pre\">4.4]</span></code>.\nNote that Julia knows how to convert an array into a <code class=\"docutils literal\"><span class=\"pre\">Ptr{Cdouble}</span></code>, how to compute\nthe size of a type in bytes (identical to C&#8217;s <code class=\"docutils literal\"><span class=\"pre\">sizeof</span></code> operator), and so on.\nFor fun, try inserting a <code class=\"docutils literal\"><span class=\"pre\">println(&quot;mycompare($a,$b)&quot;)</span></code> line into <code class=\"docutils literal\"><span class=\"pre\">mycompare</span></code>, which\nwill allow you to see the comparisons that <code class=\"docutils literal\"><span class=\"pre\">qsort</span></code> is performing (and to verify that\nit is really calling the Julia function that you passed to it).</p>\n</div>\n<div class=\"section\" id=\"mapping-c-types-to-julia\">\n<h2>Mapping C Types to Julia<a class=\"headerlink\" href=\"#mapping-c-types-to-julia\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>It is critical to exactly match the declared C type with its declaration\nin Julia. Inconsistencies can cause code that works correctly on one system\nto fail or produce indeterminate results on a different system.</p>\n<p>Note that no C header files are used anywhere in the process of calling C\nfunctions: you are responsible for making sure that your Julia types and\ncall signatures accurately reflect those in the C header file. (The <a class=\"reference external\" href=\"https://github.com/ihnorton/Clang.jl\">Clang\npackage</a> can be used to auto-generate\nJulia code from a C header file.)</p>\n<div class=\"section\" id=\"auto-conversion\">\n<h3>Auto-conversion:<a class=\"headerlink\" href=\"#auto-conversion\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Julia automatically inserts calls to the <code class=\"docutils literal\"><span class=\"pre\">convert</span></code> function to convert\neach argument to the specified type. For example, the following call:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"k\">ccall</span><span class=\"p\">((:</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"s\">&quot;libfoo&quot;</span><span class=\"p\">),</span> <span class=\"n\">Void</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>will behave as if the following were written:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"k\">ccall</span><span class=\"p\">((:</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"s\">&quot;libfoo&quot;</span><span class=\"p\">),</span> <span class=\"n\">Void</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">),</span>\n      <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">unsafe_convert</span><span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">cconvert</span><span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)),</span>\n      <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">unsafe_convert</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">cconvert</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">cconvert</span></code> normally just calls <code class=\"docutils literal\"><span class=\"pre\">convert</span></code>, but can be defined to return\nan arbitrary new object more appropriate for passing to C. For example,\nthis is used to convert an <code class=\"docutils literal\"><span class=\"pre\">Array</span></code> of objects (e.g. strings) to an\narray of pointers.</p>\n<p><code class=\"docutils literal\"><span class=\"pre\">unsafe_convert</span></code> handles conversion to <code class=\"docutils literal\"><span class=\"pre\">Ptr</span></code> types. It is considered\nunsafe because converting an object to a native pointer can hide the object\nfrom the garbage collector, causing it to be freed prematurely.</p>\n</div>\n<div class=\"section\" id=\"type-correspondences\">\n<h3>Type Correspondences:<a class=\"headerlink\" href=\"#type-correspondences\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>First, a review of some relevant Julia type terminology:</p>\n<table border=\"1\" class=\"text-wrap docutils\">\n<colgroup>\n<col width=\"26%\" />\n<col width=\"26%\" />\n<col width=\"48%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Syntax / Keyword</th>\n<th class=\"head\">Example</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">type</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">ASCIIString</span></code></td>\n<td>&#8220;Leaf Type&#8221; :: A group of related data that includes\na type-tag, is managed by the Julia GC, and\nis defined by object-identity.\nThe type parameters of a leaf type must be fully defined\n(no <code class=\"docutils literal\"><span class=\"pre\">TypeVars</span></code> are allowed)\nin order for the instance to be constructed.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">abstract</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Any</span></code>,\n<code class=\"docutils literal\"><span class=\"pre\">AbstractArray{T,N}</span></code>,\n<code class=\"docutils literal\"><span class=\"pre\">Complex{T}</span></code></td>\n<td>&#8220;Super Type&#8221; :: A super-type (not a leaf-type)\nthat cannot be instantiated, but can be used to\ndescribe a group of types.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">{T}</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Vector{Int}</span></code></td>\n<td><p class=\"first\">&#8220;Type Parameter&#8221; :: A specialization of a type\n(typically used for dispatch or storage optimization).</p>\n<p class=\"last\">&#8220;TypeVar&#8221; :: The <code class=\"docutils literal\"><span class=\"pre\">T</span></code> in the type parameter declaration\nis referred to as a TypeVar (short for type variable).</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">bitstype</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Int</span></code>,\n<code class=\"docutils literal\"><span class=\"pre\">Float64</span></code></td>\n<td>&#8220;Bits Type&#8221; :: A type with no fields, but a size. It\nis stored and defined by-value.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">immutable</span></code></td>\n<td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">Pair{Int,Int}</span></code></p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">Complex128</span></code> (<code class=\"docutils literal\"><span class=\"pre\">isbits</span></code>)</p>\n</td>\n<td><p class=\"first\">&#8220;Immutable&#8221; :: A type with all fields defined to be\nconstant. It is defined by-value. And may be stored\nwith a type-tag.</p>\n<p class=\"last\">&#8220;Is-Bits&#8221; :: A <code class=\"docutils literal\"><span class=\"pre\">bitstype</span></code>, or an <code class=\"docutils literal\"><span class=\"pre\">immutable</span></code> type\nwhere all fields are other <code class=\"docutils literal\"><span class=\"pre\">isbits</span></code> types. It is\ndefined by-value, and is stored without a type-tag.</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">type</span> <span class=\"pre\">...;</span> <span class=\"pre\">end</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">nothing</span></code></td>\n<td>&#8220;Singleton&#8221; :: a Leaf Type or Immutable with no fields.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">(...)</span></code> or <code class=\"docutils literal\"><span class=\"pre\">tuple(...)`</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">(1,2,3)</span></code></td>\n<td>&#8220;Tuple&#8221; :: an immutable data-structure similar to an\nanonymous immutable type, or a constant array.\nRepresented as either an array or a struct.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">typealias</span></code></td>\n<td>Not applicable here</td>\n<td>Type aliases, and other similar mechanisms of\ndoing type indirection, are resolved to their base\ntype (this includes assigning a type to another name,\nor getting the type out of a function call).</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"bits-types\">\n<h3>Bits Types:<a class=\"headerlink\" href=\"#bits-types\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>There are several special types to be aware of, as no other type can be defined to behave the same:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal\"><span class=\"pre\">Float32</span></code></dt>\n<dd>Exactly corresponds to the <code class=\"docutils literal\"><span class=\"pre\">float</span></code> type in C (or <code class=\"docutils literal\"><span class=\"pre\">REAL*4</span></code> in Fortran).</dd>\n<dt><code class=\"docutils literal\"><span class=\"pre\">Float64</span></code></dt>\n<dd>Exactly corresponds to the <code class=\"docutils literal\"><span class=\"pre\">double</span></code> type in C (or <code class=\"docutils literal\"><span class=\"pre\">REAL*8</span></code> in Fortran).</dd>\n<dt><code class=\"docutils literal\"><span class=\"pre\">Complex64</span></code></dt>\n<dd>Exactly corresponds to the <code class=\"docutils literal\"><span class=\"pre\">complex</span> <span class=\"pre\">float</span></code> type in C (or <code class=\"docutils literal\"><span class=\"pre\">COMPLEX*8</span></code> in Fortran).</dd>\n<dt><code class=\"docutils literal\"><span class=\"pre\">Complex128</span></code></dt>\n<dd>Exactly corresponds to the <code class=\"docutils literal\"><span class=\"pre\">complex</span> <span class=\"pre\">double</span></code> type in C (or <code class=\"docutils literal\"><span class=\"pre\">COMPLEX*16</span></code> in Fortran).</dd>\n<dt><code class=\"docutils literal\"><span class=\"pre\">Signed</span></code></dt>\n<dd>Exactly corresponds to the <code class=\"docutils literal\"><span class=\"pre\">signed</span></code> type annotation in C (or any <code class=\"docutils literal\"><span class=\"pre\">INTEGER</span></code> type in Fortran). Any Julia type that is not a subtype of <code class=\"docutils literal\"><span class=\"pre\">Signed</span></code> is assumed to be unsigned.</dd>\n<dt><code class=\"docutils literal\"><span class=\"pre\">Ref{T}</span></code></dt>\n<dd>Behaves like a <code class=\"docutils literal\"><span class=\"pre\">Ptr{T}</span></code> that owns its memory.</dd>\n<dt><code class=\"docutils literal\"><span class=\"pre\">Array{T,N}</span></code></dt>\n<dd><p class=\"first\">When an array is passed to C as a <code class=\"docutils literal\"><span class=\"pre\">Ptr{T}</span></code> argument, it is\nnot reinterpret-cast: Julia requires that the element type of the\narray matches <code class=\"docutils literal\"><span class=\"pre\">T</span></code>, and the address of the first element is passed.</p>\n<p>Therefore, if an <code class=\"docutils literal\"><span class=\"pre\">Array</span></code> contains data in the wrong format, it will\nhave to be explicitly converted using a call such as <code class=\"docutils literal\"><span class=\"pre\">trunc(Int32,a)</span></code>.</p>\n<p>To pass an array <code class=\"docutils literal\"><span class=\"pre\">A</span></code> as a pointer of a different type <em>without</em>\nconverting the data beforehand (for example, to pass a <code class=\"docutils literal\"><span class=\"pre\">Float64</span></code> array\nto a function that operates on uninterpreted bytes), you can\ndeclare the argument as <code class=\"docutils literal\"><span class=\"pre\">Ptr{Void}</span></code>.</p>\n<p class=\"last\">If an array of eltype <code class=\"docutils literal\"><span class=\"pre\">Ptr{T}</span></code> is passed as a <code class=\"docutils literal\"><span class=\"pre\">Ptr{Ptr{T}}</span></code> argument, the Julia base library\n<code class=\"docutils literal\"><span class=\"pre\">cconvert</span></code> function will attempt to first make a null-terminated copy of the array with\neach element replaced by its <code class=\"docutils literal\"><span class=\"pre\">cconvert</span></code> version. This allows, for example, passing an <code class=\"docutils literal\"><span class=\"pre\">argv</span></code>\npointer array of type <code class=\"docutils literal\"><span class=\"pre\">Vector{ByteString}</span></code> to an argument of type <code class=\"docutils literal\"><span class=\"pre\">Ptr{Ptr{Cchar}}</span></code>.</p>\n</dd>\n</dl>\n<p>On all systems we currently support, basic C/C++ value types may be\ntranslated to Julia types as follows. Every C type also has a corresponding\nJulia type with the same name, prefixed by C. This can help for writing portable code (and remembering that an <code class=\"docutils literal\"><span class=\"pre\">int</span></code> in C is not the same as an <code class=\"docutils literal\"><span class=\"pre\">Int</span></code> in Julia).</p>\n<p><strong>System Independent:</strong></p>\n<table border=\"1\" class=\"text-wrap docutils\">\n<colgroup>\n<col width=\"32%\" />\n<col width=\"16%\" />\n<col width=\"20%\" />\n<col width=\"32%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">C name</th>\n<th class=\"head\">Fortran name</th>\n<th class=\"head\">Standard Julia Alias</th>\n<th class=\"head\">Julia Base Type</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">char</span></code></p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">bool</span></code> (C++)</p>\n</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">CHARACTER</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cuchar</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">UInt8</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">short</span></code></td>\n<td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">INTEGER*2</span></code></p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">LOGICAL*2</span></code></p>\n</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cshort</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Int16</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">short</span></code></td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cushort</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">UInt16</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">int</span></code></p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">BOOL</span></code> (C, typical)</p>\n</td>\n<td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">INTEGER*4</span></code></p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">LOGICAL*4</span></code></p>\n</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cint</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Int32</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">int</span></code></td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cuint</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">UInt32</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">long</span> <span class=\"pre\">long</span></code></td>\n<td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">INTEGER*8</span></code></p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">LOGICAL*8</span></code></p>\n</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Clonglong</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Int64</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">long</span> <span class=\"pre\">long</span></code></td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Culonglong</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">UInt64</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">intmax_t</span></code></td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cintmax_t</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Int64</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">uintmax_t</span></code></td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cuintmax_t</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">UInt64</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">float</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">REAL*4i</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cfloat</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Float32</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">double</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">REAL*8</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cdouble</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Float64</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">complex</span> <span class=\"pre\">float</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">COMPLEX*8</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Complex64</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Complex{Float32}</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">complex</span> <span class=\"pre\">double</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">COMPLEX*16</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Complex128</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Complex{Float64}</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">ptrdiff_t</span></code></td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cptrdiff_t</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Int</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">ssize_t</span></code></td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cssize_t</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Int</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">size_t</span></code></td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Csize_t</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">UInt</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">void</span></code></td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Void</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">void*</span></code></td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Ptr{Void}</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">T*</span></code> (where T represents an\nappropriately defined type)</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Ref{T}</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">char*</span></code>\n(or <code class=\"docutils literal\"><span class=\"pre\">char[]</span></code>, e.g. a string)</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">CHARACTER*N</span></code></td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cstring</span></code> if NUL-terminated, or\n<code class=\"docutils literal\"><span class=\"pre\">Ptr{UInt8}</span></code> if not</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">char**</span></code> (or <code class=\"docutils literal\"><span class=\"pre\">*char[]</span></code>)</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Ptr{Ptr{UInt8}}</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">jl_value_t*</span></code>\n(any Julia Type)</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Any</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">jl_value_t**</span></code>\n(a reference to a Julia Type)</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Ref{Any}</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">va_arg</span></code></td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>Not supported</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">...</span></code>\n(variadic function specification)</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td><code class=\"docutils literal\"><span class=\"pre\">T...</span></code> (where <code class=\"docutils literal\"><span class=\"pre\">T</span></code>\nis one of the above types,\nvariadic functions of different\nargument types are not supported)</td>\n</tr>\n</tbody>\n</table>\n<p>The <code class=\"docutils literal\"><span class=\"pre\">Cstring</span></code> type is essentially a synonym for <code class=\"docutils literal\"><span class=\"pre\">Ptr{UInt8}</span></code>, except the conversion to <code class=\"docutils literal\"><span class=\"pre\">Cstring</span></code> throws an\nerror if the Julia string contains any embedded NUL characters (which would cause the string to be silently\ntruncated if the C routine treats NUL as the terminator).  If you are passing a <code class=\"docutils literal\"><span class=\"pre\">char*</span></code> to a C routine that\ndoes not assume NUL termination (e.g. because you pass an explicit string length), or if you know for certain that\nyour Julia string does not contain NUL and want to skip the check, you can use <code class=\"docutils literal\"><span class=\"pre\">Ptr{UInt8}</span></code> as the argument type.</p>\n<p><strong>System-dependent:</strong></p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"32%\" />\n<col width=\"32%\" />\n<col width=\"35%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">C name</th>\n<th class=\"head\">Standard Julia Alias</th>\n<th class=\"head\">Julia Base Type</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">char</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cchar</span></code></td>\n<td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">Int8</span></code> (x86, x86_64)</p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">UInt8</span></code> (powerpc, arm)</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">long</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Clong</span></code></td>\n<td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">Int</span></code> (UNIX)</p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">Int32</span></code> (Windows)</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">long</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Culong</span></code></td>\n<td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">UInt</span></code> (UNIX)</p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">UInt32</span></code> (Windows)</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal\"><span class=\"pre\">wchar_t</span></code></td>\n<td><code class=\"docutils literal\"><span class=\"pre\">Cwchar_t</span></code></td>\n<td><p class=\"first\"><code class=\"docutils literal\"><span class=\"pre\">Int32</span></code> (UNIX)</p>\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">UInt16</span></code> (Windows)</p>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">When calling a Fortran function, all inputs must be passed by reference, so\nall type correspondences above should contain an additional <code class=\"docutils literal\"><span class=\"pre\">Ptr{..}</span></code> or\n<code class=\"docutils literal\"><span class=\"pre\">Ref{..}</span></code> wrapper around their type specification.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">For string arguments (<code class=\"docutils literal\"><span class=\"pre\">char*</span></code>) the Julia type should be <code class=\"docutils literal\"><span class=\"pre\">Cstring</span></code> (if NUL-\nterminated data is expected) or either <code class=\"docutils literal\"><span class=\"pre\">Ptr{Cchar}</span></code> or <code class=\"docutils literal\"><span class=\"pre\">Ptr{UInt8}</span></code>\notherwise (these two pointer types have the same effect), as described above,\nnot <code class=\"docutils literal\"><span class=\"pre\">ASCIIString</span></code>. Similarly, for array arguments (<code class=\"docutils literal\"><span class=\"pre\">T[]</span></code> or <code class=\"docutils literal\"><span class=\"pre\">T*</span></code>), the\nJulia type should again be <code class=\"docutils literal\"><span class=\"pre\">Ptr{T}</span></code>, not <code class=\"docutils literal\"><span class=\"pre\">Vector{T}</span></code>.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Julia&#8217;s <code class=\"docutils literal\"><span class=\"pre\">Char</span></code> type is 32 bits, which is not the same as the wide character\ntype (<code class=\"docutils literal\"><span class=\"pre\">wchar_t</span></code> or <code class=\"docutils literal\"><span class=\"pre\">wint_t</span></code>) on all platforms.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">For <code class=\"docutils literal\"><span class=\"pre\">wchar_t*</span></code> arguments, the Julia type should be <code class=\"docutils literal\"><span class=\"pre\">Cwstring</span></code> (if the C\nroutine expects a NUL-terminated string) or <code class=\"docutils literal\"><span class=\"pre\">Ptr{Cwchar_t}</span></code> otherwise, and\ndata can be converted to/from ordinary Julia strings by the <code class=\"docutils literal\"><span class=\"pre\">wstring(s)</span></code>\nfunction (equivalent to either <code class=\"docutils literal\"><span class=\"pre\">utf16(s)</span></code> or <code class=\"docutils literal\"><span class=\"pre\">utf32(s)</span></code> depending upon the\nwidth of <code class=\"docutils literal\"><span class=\"pre\">Cwchar_t</span></code>); this conversion will be called automatically for\n<code class=\"docutils literal\"><span class=\"pre\">Cwstring</span></code> arguments.    Note also that ASCII, UTF-8, UTF-16, and UTF-32\nstring data in Julia is internally NUL-terminated, so it can be passed to C\nfunctions expecting NUL-terminated data without making a copy (but using the\n<code class=\"docutils literal\"><span class=\"pre\">Cwstring</span></code> type will cause an error to be thrown if the string itself\ncontains NUL characters).</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>C functions that take an argument of the type <code class=\"docutils literal\"><span class=\"pre\">char**</span></code> can be called by\nusing a <code class=\"docutils literal\"><span class=\"pre\">Ptr{Ptr{UInt8}}</span></code> type within Julia. For example, C functions of the\nform:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">int</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">);</span>\n</pre></div>\n</div>\n<p>can be called via the following Julia code:</p>\n<div class=\"last highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">argv</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s\">&quot;a.out&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;arg1&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;arg2&quot;</span> <span class=\"p\">]</span>\n<span class=\"k\">ccall</span><span class=\"p\">(:</span><span class=\"n\">main</span><span class=\"p\">,</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">}}),</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">),</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">A C function declared to return <code class=\"docutils literal\"><span class=\"pre\">Void</span></code> will return the value <code class=\"docutils literal\"><span class=\"pre\">nothing</span></code> in\nJulia.</p>\n</div>\n</div>\n<div class=\"section\" id=\"struct-type-correspondences\">\n<h3>Struct Type correspondences<a class=\"headerlink\" href=\"#struct-type-correspondences\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Composite types, aka <code class=\"docutils literal\"><span class=\"pre\">struct</span></code> in C or <code class=\"docutils literal\"><span class=\"pre\">TYPE</span></code> in Fortran90\n(or <code class=\"docutils literal\"><span class=\"pre\">STRUCTURE</span></code> / <code class=\"docutils literal\"><span class=\"pre\">RECORD</span></code> in some variants of F77),\ncan be mirrored in Julia by creating a <code class=\"docutils literal\"><span class=\"pre\">type</span></code> or <code class=\"docutils literal\"><span class=\"pre\">immutable</span></code>\ndefinition with the same field layout.</p>\n<p>When used recursively, <code class=\"docutils literal\"><span class=\"pre\">isbits</span></code> types are stored inline.\nAll other types are stored as a pointer to the data.\nWhen mirroring a struct used by-value inside another struct in C,\nit is imperative that you do not attempt to manually copy the fields over,\nas this will not preserve the correct field alignment.\nInstead, declare an immutable isbits type and use that instead.\nUnnamed structs are not possible in the translation to Julia.</p>\n<p>Packed structs and union declarations are not supported by Julia.</p>\n<p>You can get a near approximation of a <code class=\"docutils literal\"><span class=\"pre\">union</span></code> if you know, a priori,\nthe field that will have the greatest size (potentially including padding).\nWhen translating your fields to Julia, declare the Julia field to be only\nof that type.</p>\n<p>Arrays of parameters must be expanded manually, currently\n(either inline, or in an immutable helper-type). For example:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"k\">in</span> <span class=\"n\">C</span><span class=\"p\">:</span>\n<span class=\"n\">struct</span> <span class=\"n\">B</span> <span class=\"p\">{</span>\n    <span class=\"n\">int</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"p\">};</span>\n<span class=\"n\">b_a_2</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n\n<span class=\"k\">in</span> <span class=\"n\">Julia</span><span class=\"p\">:</span>\n<span class=\"k\">immutable</span> <span class=\"n\">B_A</span>\n    <span class=\"n\">A_1</span><span class=\"p\">::</span><span class=\"n\">Cint</span>\n    <span class=\"n\">A_2</span><span class=\"p\">::</span><span class=\"n\">Cint</span>\n    <span class=\"n\">A_3</span><span class=\"p\">::</span><span class=\"n\">Cint</span>\n<span class=\"k\">end</span>\n<span class=\"k\">type</span><span class=\"nc\"> B</span>\n    <span class=\"n\">A</span><span class=\"p\">::</span><span class=\"n\">B_A</span>\n<span class=\"k\">end</span>\n<span class=\"n\">b_a_2</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Arrays of unknown size are not supported.</p>\n<p>In the future, some of these restrictions may be reduced or eliminated.</p>\n</div>\n<div class=\"section\" id=\"memory-ownership\">\n<h3>Memory Ownership:<a class=\"headerlink\" href=\"#memory-ownership\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><strong>malloc/free</strong></p>\n<p>Memory allocation and deallocation of such objects must be\nhandled by calls to the appropriate cleanup routines in the libraries\nbeing used, just like in any C program. Do not try to free an object\nreceived from a C library with <code class=\"docutils literal\"><span class=\"pre\">Libc.free</span></code> in Julia, as this may result\nin the <code class=\"docutils literal\"><span class=\"pre\">free</span></code> function being called via the wrong <code class=\"docutils literal\"><span class=\"pre\">libc</span></code> library and\ncause Julia to crash. The reverse (passing an object allocated in Julia\nto be freed by an external library) is equally invalid.</p>\n<p><strong>Ptr{T} vs. Array{T} vs. Ref{T} vs. T</strong></p>\n<p>The choice of type-wrapper declaration strongly depends on who allocated the memory,\nand the declared type.\nIn general, use <code class=\"docutils literal\"><span class=\"pre\">T</span></code> if the memory is intended to be allocated in\n(and managed by) Julia (with type-tag).\nUse <code class=\"docutils literal\"><span class=\"pre\">Ptr{T}</span></code> if the memory is expected to be populated by <code class=\"docutils literal\"><span class=\"pre\">C</span></code> (without type-tag).\nUse <code class=\"docutils literal\"><span class=\"pre\">Ref{T}</span></code> if you have an <code class=\"docutils literal\"><span class=\"pre\">isbits</span></code> type,\nbut you want to turn it into a pointer to a struct in another struct definition.</p>\n<p>See issue #2818 for some work that needs to be done to simplify this so that Julia\ntypes can be used to recursively mirror c-style structs,\nwithout requiring as much manual management of the <code class=\"docutils literal\"><span class=\"pre\">Ptr</span></code> conversions.\nAfter #2818 is implemented, it will be true that an <code class=\"docutils literal\"><span class=\"pre\">Vector{T}</span></code> will be equivalent to\nan <code class=\"docutils literal\"><span class=\"pre\">Ptr{Ptr{T}}</span></code>. That is currently not true, and the conversion must be explicitly.</p>\n</div>\n</div>\n<div class=\"section\" id=\"mapping-c-functions-to-julia\">\n<h2>Mapping C Functions to Julia<a class=\"headerlink\" href=\"#mapping-c-functions-to-julia\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"ccall-cfunction-argument-translation-guide\">\n<h3>ccall/cfunction argument translation guide<a class=\"headerlink\" href=\"#ccall-cfunction-argument-translation-guide\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For translating a <code class=\"docutils literal\"><span class=\"pre\">c</span></code> argument list to <code class=\"docutils literal\"><span class=\"pre\">Julia</span></code>:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal\"><span class=\"pre\">T</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is one of the primitive types:\n<code class=\"docutils literal\"><span class=\"pre\">char</span></code>, <code class=\"docutils literal\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal\"><span class=\"pre\">long</span></code>, <code class=\"docutils literal\"><span class=\"pre\">short</span></code>, <code class=\"docutils literal\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal\"><span class=\"pre\">double</span></code>, <code class=\"docutils literal\"><span class=\"pre\">complex</span></code>, <code class=\"docutils literal\"><span class=\"pre\">enum</span></code>\nor any of their <code class=\"docutils literal\"><span class=\"pre\">typedef</span></code> equivalents<ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">T</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is an equivalent Julia Bits Type (per the table above)</li>\n<li>if <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is an <code class=\"docutils literal\"><span class=\"pre\">enum</span></code>, the argument type should be equivalent to <code class=\"docutils literal\"><span class=\"pre\">Cint</span></code> or <code class=\"docutils literal\"><span class=\"pre\">Cuint</span></code></li>\n<li>argument value will be copied (passed by-value)</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">struct</span> <span class=\"pre\">T</span></code> (including typedef to a struct)<ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">T</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is a Julia Leaf Type</li>\n<li>argument value will be copied (passed by-value)</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">void*</span></code><ul>\n<li>depends on how this parameter is used, first translate this to the intended pointer type,\nthen determine the Julia equivalent using the remaining rules in this list</li>\n<li>this argument may be declared as <code class=\"docutils literal\"><span class=\"pre\">Ptr{Void}</span></code>, if it really is just an unknown pointer</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">jl_value_t*</span></code><ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Any</span></code></li>\n<li>argument value must be a valid Julia object</li>\n<li>currently unsupported by cfunction</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">jl_value_t**</span></code><ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Ref{Any}</span></code></li>\n<li>argument value must be a valid Julia object (or <code class=\"docutils literal\"><span class=\"pre\">C_NULL</span></code>)</li>\n<li>currently unsupported by cfunction</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">T*</span></code><ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Ref{T}</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is the Julia type corresponding to <code class=\"docutils literal\"><span class=\"pre\">T</span></code></li>\n<li>argument value will be copied if it is an <code class=\"docutils literal\"><span class=\"pre\">isbits</span></code> type\notherwise, the value must be a valid Julia object</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">(T*)(...)</span></code> (e.g. a pointer to a function)<ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Ptr{Void}</span></code> (you may need to use <code class=\"docutils literal\"><span class=\"pre\">cfunction</span></code> explicitly to create this pointer)</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">...</span></code> (e.g. a vararg)<ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">T...</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is the Julia type</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">va_arg</span></code><ul>\n<li>not supported</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"ccall-cfunction-return-type-translation-guide\">\n<h3>ccall/cfunction return type translation guide<a class=\"headerlink\" href=\"#ccall-cfunction-return-type-translation-guide\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For translating a <code class=\"docutils literal\"><span class=\"pre\">c</span></code> return type to <code class=\"docutils literal\"><span class=\"pre\">Julia</span></code>:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal\"><span class=\"pre\">void</span></code><ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Void</span></code> (this will return the singleton instance <code class=\"docutils literal\"><span class=\"pre\">nothing::Void</span></code>)</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">T</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is one of the primitive types:\n<code class=\"docutils literal\"><span class=\"pre\">char</span></code>, <code class=\"docutils literal\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal\"><span class=\"pre\">long</span></code>, <code class=\"docutils literal\"><span class=\"pre\">short</span></code>, <code class=\"docutils literal\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal\"><span class=\"pre\">double</span></code>, <code class=\"docutils literal\"><span class=\"pre\">complex</span></code>, <code class=\"docutils literal\"><span class=\"pre\">enum</span></code>\nor any of their <code class=\"docutils literal\"><span class=\"pre\">typedef</span></code> equivalents<ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">T</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is an equivalent Julia Bits Type (per the table above)</li>\n<li>if <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is an <code class=\"docutils literal\"><span class=\"pre\">enum</span></code>, the argument type should be equivalent to <code class=\"docutils literal\"><span class=\"pre\">Cint</span></code> or <code class=\"docutils literal\"><span class=\"pre\">Cuint</span></code></li>\n<li>argument value will be copied (returned by-value)</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">struct</span> <span class=\"pre\">T</span></code> (including typedef to a struct)<ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">T</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is a Julia Leaf Type</li>\n<li>argument value will be copied (returned by-value)</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">void*</span></code><ul>\n<li>depends on how this parameter is used, first translate this to the intended pointer type,\nthen determine the Julia equivalent using the remaining rules in this list</li>\n<li>this argument may be declared as <code class=\"docutils literal\"><span class=\"pre\">Ptr{Void}</span></code>, if it really is just an unknown pointer</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">jl_value_t*</span></code><ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Any</span></code></li>\n<li>argument value must be a valid Julia object</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">jl_value_t**</span></code><ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Ref{Any}</span></code></li>\n<li>argument value must be a valid Julia object (or <code class=\"docutils literal\"><span class=\"pre\">C_NULL</span></code>)</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">T*</span></code><ul>\n<li>If the memory is already owned by Julia, or is an <code class=\"docutils literal\"><span class=\"pre\">isbits</span></code> type, and is known to be non-null:<ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Ref{T}</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is the Julia type corresponding to <code class=\"docutils literal\"><span class=\"pre\">T</span></code></li>\n<li>a return type of <code class=\"docutils literal\"><span class=\"pre\">Ref{Any}</span></code> is invalid, it should either be <code class=\"docutils literal\"><span class=\"pre\">Any</span></code>\n(corresponding to <code class=\"docutils literal\"><span class=\"pre\">jl_value_t*</span></code>) or <code class=\"docutils literal\"><span class=\"pre\">Ptr{Any}</span></code> (corresponding to <code class=\"docutils literal\"><span class=\"pre\">Ptr{Any}</span></code>)</li>\n<li>currently partially unsupported by cfunction due to #2818</li>\n<li>C <strong>MUST NOT</strong> modify the memory returned via <code class=\"docutils literal\"><span class=\"pre\">Ref{T}</span></code> if <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is an <code class=\"docutils literal\"><span class=\"pre\">isbits</span></code> type</li>\n</ul>\n</li>\n<li>If the memory is owned by C:<ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Ptr{T}</span></code>, where <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is the Julia type corresponding to <code class=\"docutils literal\"><span class=\"pre\">T</span></code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">(T*)(...)</span></code> (e.g. a pointer to a function)<ul>\n<li><code class=\"docutils literal\"><span class=\"pre\">Ptr{Void}</span></code> (you may need to use <code class=\"docutils literal\"><span class=\"pre\">cfunction</span></code> explicitly to create this pointer)</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"passing-pointers-for-modifying-inputs\">\n<h3>Passing Pointers for Modifying Inputs<a class=\"headerlink\" href=\"#passing-pointers-for-modifying-inputs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Because C doesn&#8217;t support multiple return values,\noften C functions will take pointers to data that the function will modify.\nTo accomplish this within a <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code>,\nyou need to first encapsulate the value inside an <code class=\"docutils literal\"><span class=\"pre\">Ref{T}</span></code> of the appropriate type.\nWhen you pass this <code class=\"docutils literal\"><span class=\"pre\">Ref</span></code> object as an argument,\njulia will automatically pass a C pointer to the encapsulated data:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">Ref</span><span class=\"p\">{</span><span class=\"n\">Cint</span><span class=\"p\">}(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">range</span> <span class=\"o\">=</span> <span class=\"n\">Ref</span><span class=\"p\">{</span><span class=\"n\">Cfloat</span><span class=\"p\">}(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">ccall</span><span class=\"p\">(:</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">Void</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Ref</span><span class=\"p\">{</span><span class=\"n\">Cint</span><span class=\"p\">},</span> <span class=\"n\">Ref</span><span class=\"p\">{</span><span class=\"n\">Cfloat</span><span class=\"p\">}),</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">range</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Upon return, the contents of <code class=\"docutils literal\"><span class=\"pre\">width</span></code> and <code class=\"docutils literal\"><span class=\"pre\">range</span></code> can be retrieved\n(if they were changed by <code class=\"docutils literal\"><span class=\"pre\">foo</span></code>) by <code class=\"docutils literal\"><span class=\"pre\">width[]</span></code> and <code class=\"docutils literal\"><span class=\"pre\">range[]</span></code>; that is,\nthey act like zero-dimensional arrays.</p>\n</div>\n<div class=\"section\" id=\"special-reference-syntax-for-ccall-deprecated\">\n<h3>Special Reference Syntax for ccall (deprecated):<a class=\"headerlink\" href=\"#special-reference-syntax-for-ccall-deprecated\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal\"><span class=\"pre\">&amp;</span></code> syntax is deprecated, use the <code class=\"docutils literal\"><span class=\"pre\">Ref{T}</span></code> argument type instead.</p>\n<p>A prefix <code class=\"docutils literal\"><span class=\"pre\">&amp;</span></code> is used on an argument to ccall to indicate that a pointer\nto a scalar argument should be passed instead of the scalar value itself\n(required for all Fortran function arguments, as noted above). The following\nexample computes a dot product using a BLAS function.</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"k\">function</span><span class=\"nf\"> compute_dot</span><span class=\"p\">(</span><span class=\"n\">DX</span><span class=\"p\">::</span><span class=\"n\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"n\">DY</span><span class=\"p\">::</span><span class=\"n\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span>\n  <span class=\"nb\">assert</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">DX</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">DY</span><span class=\"p\">))</span>\n  <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">DX</span><span class=\"p\">)</span>\n  <span class=\"n\">incx</span> <span class=\"o\">=</span> <span class=\"n\">incy</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"k\">ccall</span><span class=\"p\">((:</span><span class=\"n\">ddot_</span><span class=\"p\">,</span> <span class=\"s\">&quot;libLAPACK&quot;</span><span class=\"p\">),</span>\n                  <span class=\"kt\">Float64</span><span class=\"p\">,</span>\n                  <span class=\"p\">(</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Int32</span><span class=\"p\">},</span> <span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Int32</span><span class=\"p\">},</span> <span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Int32</span><span class=\"p\">}),</span>\n                  <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">DX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">incx</span><span class=\"p\">,</span> <span class=\"n\">DY</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">incy</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">product</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n<p>The meaning of prefix <code class=\"docutils literal\"><span class=\"pre\">&amp;</span></code> is not quite the same as in C. In\nparticular, any changes to the referenced variables will not be\nvisible in Julia unless the type is mutable (declared via\n<code class=\"docutils literal\"><span class=\"pre\">type</span></code>). However, even for immutable types it will not cause any\nharm for called functions to attempt such modifications (that is,\nwriting through the passed pointers). Moreover, <code class=\"docutils literal\"><span class=\"pre\">&amp;</span></code> may be used with\nany expression, such as <code class=\"docutils literal\"><span class=\"pre\">&amp;0</span></code> or <code class=\"docutils literal\"><span class=\"pre\">&amp;f(x)</span></code>.</p>\n<p>When a scalar value is passed with <code class=\"docutils literal\"><span class=\"pre\">&amp;</span></code> as an argument of type\n<code class=\"docutils literal\"><span class=\"pre\">Ptr{T}</span></code>, the value will first be converted to type <code class=\"docutils literal\"><span class=\"pre\">T</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"garbage-collection-safety\">\n<h2>Garbage Collection Safety<a class=\"headerlink\" href=\"#garbage-collection-safety\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When passing data to a ccall, it is best to avoid using the <code class=\"docutils literal\"><span class=\"pre\">pointer()</span></code>\nfunction. Instead define a convert method and pass the variables directly to\nthe ccall. ccall automatically arranges that all of its arguments will be\npreserved from garbage collection until the call returns. If a C API will\nstore a reference to memory allocated by Julia, after the ccall returns, you\nmust arrange that the object remains visible to the garbage collector. The\nsuggested way to handle this is to make a global variable of type\n<code class=\"docutils literal\"><span class=\"pre\">Array{Ref,1}</span></code> to hold these values, until the C library notifies you that\nit is finished with them.</p>\n<p>Whenever you have created a pointer to Julia data, you must ensure the original data\nexists until you are done with using the pointer. Many methods in Julia such as\n<code class=\"docutils literal\"><span class=\"pre\">unsafe_load()</span></code> and <code class=\"docutils literal\"><span class=\"pre\">bytestring()</span></code> make copies of data instead of taking ownership\nof the buffer, so that it is safe to free (or alter) the original data without\naffecting Julia. A notable exception is <code class=\"docutils literal\"><span class=\"pre\">pointer_to_array()</span></code> which, for performance\nreasons, shares (or can be told to take ownership of) the underlying buffer.</p>\n<p>The garbage collector does not guarantee any order of finalization. That is, if <code class=\"docutils literal\"><span class=\"pre\">a</span></code>\ncontained a reference to <code class=\"docutils literal\"><span class=\"pre\">b</span></code> and both <code class=\"docutils literal\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal\"><span class=\"pre\">b</span></code> are due for garbage\ncollection, there is no guarantee that <code class=\"docutils literal\"><span class=\"pre\">b</span></code> would be finalized after <code class=\"docutils literal\"><span class=\"pre\">a</span></code>. If\nproper finalization of <code class=\"docutils literal\"><span class=\"pre\">a</span></code> depends on <code class=\"docutils literal\"><span class=\"pre\">b</span></code> being valid, it must be handled in\nother ways.</p>\n</div>\n<div class=\"section\" id=\"non-constant-function-specifications\">\n<h2>Non-constant Function Specifications<a class=\"headerlink\" href=\"#non-constant-function-specifications\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A <code class=\"docutils literal\"><span class=\"pre\">(name,</span> <span class=\"pre\">library)</span></code> function specification must be a constant expression.\nHowever, it is possible to use computed values as function names by staging\nthrough <code class=\"docutils literal\"><span class=\"pre\">eval</span></code> as follows:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"p\">@</span><span class=\"n\">eval</span> <span class=\"k\">ccall</span><span class=\"p\">((</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span><span class=\"s\">&quot;b&quot;</span><span class=\"p\">)),</span><span class=\"s\">&quot;lib&quot;</span><span class=\"p\">),</span> <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>This expression constructs a name using <code class=\"docutils literal\"><span class=\"pre\">string</span></code>, then substitutes this\nname into a new <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> expression, which is then evaluated. Keep in mind that\n<code class=\"docutils literal\"><span class=\"pre\">eval</span></code> only operates at the top level, so within this expression local\nvariables will not be available (unless their values are substituted with\n<code class=\"docutils literal\"><span class=\"pre\">$</span></code>). For this reason, <code class=\"docutils literal\"><span class=\"pre\">eval</span></code> is typically only used to form top-level\ndefinitions, for example when wrapping libraries that contain many\nsimilar functions.</p>\n<p>If your usage is more dynamic, use indirect calls as described in the next section.</p>\n</div>\n<div class=\"section\" id=\"indirect-calls\">\n<h2>Indirect Calls<a class=\"headerlink\" href=\"#indirect-calls\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The first argument to <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> can also be an expression evaluated at run time.\nIn this case, the expression must evaluate to a <code class=\"docutils literal\"><span class=\"pre\">Ptr</span></code>,\nwhich will be used as the address of the native function to call.\nThis behavior occurs when the first <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> argument contains references to non-constants,\nsuch as local variables, function arguments, or non-constant globals.</p>\n<p>For example, you might lookup the function via <code class=\"docutils literal\"><span class=\"pre\">dlsym</span></code>,\nthen cache it in a global variable for that session. For example:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"k\">macro</span> <span class=\"nb\">dlsym</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">lib</span><span class=\"p\">)</span>\n    <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">zlocal</span> <span class=\"o\">=</span> <span class=\"n\">gensym</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)),</span> <span class=\"n\">gensym</span><span class=\"p\">()</span>\n    <span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">current_module</span><span class=\"p\">(),:(</span><span class=\"kd\">global</span> <span class=\"o\">$</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">C_NULL</span><span class=\"p\">))</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n    <span class=\"k\">quote</span>\n        <span class=\"k\">let</span> <span class=\"o\">$</span><span class=\"n\">zlocal</span><span class=\"p\">::</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">Void</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"n\">z</span><span class=\"p\">::</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">Void</span><span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">$</span><span class=\"n\">zlocal</span> <span class=\"o\">==</span> <span class=\"n\">C_NULL</span>\n               <span class=\"o\">$</span><span class=\"n\">zlocal</span> <span class=\"o\">=</span> <span class=\"nb\">dlsym</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">))::</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">Void</span><span class=\"p\">},</span> <span class=\"o\">$</span><span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)))</span>\n               <span class=\"kd\">global</span> <span class=\"o\">$</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"o\">$</span><span class=\"n\">zlocal</span>\n            <span class=\"k\">end</span>\n            <span class=\"o\">$</span><span class=\"n\">zlocal</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">mylibvar</span> <span class=\"o\">=</span> <span class=\"nb\">dlopen</span><span class=\"p\">(</span><span class=\"s\">&quot;mylib&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">ccall</span><span class=\"p\">(@</span><span class=\"nb\">dlsym</span><span class=\"p\">(</span><span class=\"s\">&quot;myfunc&quot;</span><span class=\"p\">,</span> <span class=\"n\">mylibvar</span><span class=\"p\">),</span> <span class=\"n\">Void</span><span class=\"p\">,</span> <span class=\"p\">())</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"calling-convention\">\n<h2>Calling Convention<a class=\"headerlink\" href=\"#calling-convention\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The second argument to <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> can optionally be a calling convention\nspecifier (immediately preceding return type). Without any specifier,\nthe platform-default C calling convention is used. Other supported\nconventions are: <code class=\"docutils literal\"><span class=\"pre\">stdcall</span></code>, <code class=\"docutils literal\"><span class=\"pre\">cdecl</span></code>, <code class=\"docutils literal\"><span class=\"pre\">fastcall</span></code>, and <code class=\"docutils literal\"><span class=\"pre\">thiscall</span></code>.\nFor example (from base/libc.jl) we see the same <code class=\"docutils literal\"><span class=\"pre\">gethostname</span></code> ccall as above,\nbut with the correct signature for Windows:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hn</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">UInt8</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">)</span>\n<span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"k\">ccall</span><span class=\"p\">(:</span><span class=\"n\">gethostname</span><span class=\"p\">,</span> <span class=\"n\">stdcall</span><span class=\"p\">,</span> <span class=\"kt\">Int32</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"n\">UInt8</span><span class=\"p\">},</span> <span class=\"n\">UInt32</span><span class=\"p\">),</span> <span class=\"n\">hn</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">hn</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>For more information, please see the <a class=\"reference external\" href=\"http://llvm.org/docs/LangRef.html#calling-conventions\">LLVM Language Reference</a>.</p>\n</div>\n<div class=\"section\" id=\"accessing-global-variables\">\n<h2>Accessing Global Variables<a class=\"headerlink\" href=\"#accessing-global-variables\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Global variables exported by native libraries can be accessed by name using the\n<code class=\"docutils literal\"><span class=\"pre\">cglobal</span></code> function. The arguments to <code class=\"docutils literal\"><span class=\"pre\">cglobal</span></code> are a symbol specification\nidentical to that used by <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code>, and a type describing the value stored in\nthe variable:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">cglobal</span><span class=\"p\">((:</span><span class=\"n\">errno</span><span class=\"p\">,:</span><span class=\"n\">libc</span><span class=\"p\">),</span> <span class=\"kt\">Int32</span><span class=\"p\">)</span>\n<span class=\"n\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Int32</span><span class=\"p\">}</span> <span class=\"p\">@</span><span class=\"mh\">0x00007f418d0816b8</span>\n</pre></div>\n</div>\n<p>The result is a pointer giving the address of the value. The value can be\nmanipulated through this pointer using <code class=\"docutils literal\"><span class=\"pre\">unsafe_load</span></code> and <code class=\"docutils literal\"><span class=\"pre\">unsafe_store</span></code>.</p>\n</div>\n<div class=\"section\" id=\"accessing-data-through-a-pointer\">\n<h2>Accessing Data through a Pointer<a class=\"headerlink\" href=\"#accessing-data-through-a-pointer\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The following methods are described as &#8220;unsafe&#8221; because a bad pointer\nor type declaration can cause Julia to terminate abruptly\n(although, that&#8217;s quite alike with ccall).</p>\n<p>Given a <code class=\"docutils literal\"><span class=\"pre\">Ptr{T}</span></code>, the contents of type <code class=\"docutils literal\"><span class=\"pre\">T</span></code> can generally be copied from\nthe referenced memory into a Julia object using <code class=\"docutils literal\"><span class=\"pre\">unsafe_load(ptr,</span> <span class=\"pre\">[index])</span></code>.\nThe index argument is optional (default is 1),\nand follows the Julia-convention of 1-based indexing.\nThis function is intentionally similar to the behavior of <code class=\"docutils literal\"><span class=\"pre\">getindex()</span></code> and <code class=\"docutils literal\"><span class=\"pre\">setindex!()</span></code>\n(e.g. <code class=\"docutils literal\"><span class=\"pre\">[]</span></code> access syntax).</p>\n<p>The return value will be a new object initialized\nto contain a copy of the contents of the referenced memory.\nThe referenced memory can safely be freed or released.</p>\n<p>If <code class=\"docutils literal\"><span class=\"pre\">T</span></code> is <code class=\"docutils literal\"><span class=\"pre\">Any</span></code>, then the memory is assumed to contain a reference to\na Julia object (a <code class=\"docutils literal\"><span class=\"pre\">jl_value_t*</span></code>), the result will be a reference to this object,\nand the object will not be copied. You must be careful in this case to ensure\nthat the object was always visible to the garbage collector (pointers do not\ncount, but the new reference does) to ensure the memory is not prematurely freed.\nNote that if the object was not originally allocated by Julia, the new object\nwill never be finalized by Julia&#8217;s garbage collector.  If the <code class=\"docutils literal\"><span class=\"pre\">Ptr</span></code> itself\nis actually a <code class=\"docutils literal\"><span class=\"pre\">jl_value_t*</span></code>, it can be converted back to a Julia object\nreference by <code class=\"docutils literal\"><span class=\"pre\">unsafe_pointer_to_objref(ptr)</span></code>.  (Julia values <code class=\"docutils literal\"><span class=\"pre\">v</span></code>\ncan be converted to <code class=\"docutils literal\"><span class=\"pre\">jl_value_t*</span></code> pointers, as <code class=\"docutils literal\"><span class=\"pre\">Ptr{Void}</span></code>, by calling\n<code class=\"docutils literal\"><span class=\"pre\">pointer_from_objref(v)</span></code>.)</p>\n<p>The reverse operation (writing data to a Ptr{T}), can be performed using\n<code class=\"docutils literal\"><span class=\"pre\">unsafe_store!(ptr,</span> <span class=\"pre\">value,</span> <span class=\"pre\">[index])</span></code>.  Currently, this is only supported\nfor bitstypes or other pointer-free (<code class=\"docutils literal\"><span class=\"pre\">isbits</span></code>) immutable types.</p>\n<p>Any operation that throws an error is probably currently unimplemented\nand should be posted as a bug so that it can be resolved.</p>\n<p>If the pointer of interest is a plain-data array (bitstype or immutable), the\nfunction <code class=\"docutils literal\"><span class=\"pre\">pointer_to_array(ptr,dims,[own])</span></code> may be more useful. The final\nparameter should be true if Julia should &#8220;take ownership&#8221; of the underlying\nbuffer and call <code class=\"docutils literal\"><span class=\"pre\">free(ptr)</span></code> when the returned <code class=\"docutils literal\"><span class=\"pre\">Array</span></code> object is finalized.\nIf the <code class=\"docutils literal\"><span class=\"pre\">own</span></code> parameter is omitted or false, the caller must ensure the\nbuffer remains in existence until all access is complete.</p>\n<p>Arithmetic on the <code class=\"docutils literal\"><span class=\"pre\">Ptr</span></code> type in Julia (e.g. using <code class=\"docutils literal\"><span class=\"pre\">+</span></code>) does not behave the\nsame as C&#8217;s pointer arithmetic. Adding an integer to a <code class=\"docutils literal\"><span class=\"pre\">Ptr</span></code> in Julia always\nmoves the pointer by some number of <em>bytes</em>, not elements. This way, the\naddress values obtained from pointer arithmetic do not depend on the\nelement types of pointers.</p>\n</div>\n<div class=\"section\" id=\"thread-safety\">\n<h2>Thread-safety<a class=\"headerlink\" href=\"#thread-safety\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Some C libraries execute their callbacks from a different thread, and\nsince Julia isn&#8217;t thread-safe you&#8217;ll need to take some extra\nprecautions. In particular, you&#8217;ll need to set up a two-layered\nsystem: the C callback should only <em>schedule</em> (via Julia&#8217;s event loop)\nthe execution of your &#8220;real&#8221; callback. To do this, you pass a function\nof one argument (the <code class=\"docutils literal\"><span class=\"pre\">AsyncWork</span></code> object for which the event was\ntriggered, which you&#8217;ll probably just ignore) to <code class=\"docutils literal\"><span class=\"pre\">SingleAsyncWork</span></code>:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cb</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">SingleAsyncWork</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">-&gt;</span> <span class=\"n\">my_real_callback</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>The callback you pass to C should only execute a <code class=\"docutils literal\"><span class=\"pre\">ccall</span></code> to\n<code class=\"docutils literal\"><span class=\"pre\">:uv_async_send</span></code>, passing <code class=\"docutils literal\"><span class=\"pre\">cb.handle</span></code> as the argument.</p>\n</div>\n<div class=\"section\" id=\"more-about-callbacks\">\n<h2>More About Callbacks<a class=\"headerlink\" href=\"#more-about-callbacks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For more details on how to pass callbacks to C libraries, see this\n<a class=\"reference external\" href=\"http://julialang.org/blog/2013/05/callback\">blog post</a>.</p>\n</div>\n<div class=\"section\" id=\"c\">\n<h2>C++<a class=\"headerlink\" href=\"#c\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Limited support for C++ is provided by the <a class=\"reference external\" href=\"https://github.com/timholy/Cpp.jl\">Cpp</a>,\n<a class=\"reference external\" href=\"https://github.com/ihnorton/Clang.jl\">Clang</a>, and <a class=\"reference external\" href=\"https://github.com/Keno/Cxx.jl\">Cxx</a> packages.</p>\n</div>\n<div class=\"section\" id=\"handling-operating-system-variation\">\n<h2>Handling Operating System Variation<a class=\"headerlink\" href=\"#handling-operating-system-variation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When dealing with platform libraries, it is often necessary to provide special cases\nfor various platforms. The variable <code class=\"docutils literal\"><span class=\"pre\">OS_NAME</span></code> can be used to write these special\ncases. Additionally, there are several macros intended to make this easier:\n<code class=\"docutils literal\"><span class=\"pre\">&#64;windows</span></code>, <code class=\"docutils literal\"><span class=\"pre\">&#64;unix</span></code>, <code class=\"docutils literal\"><span class=\"pre\">&#64;linux</span></code>, and <code class=\"docutils literal\"><span class=\"pre\">&#64;osx</span></code>. Note that linux and osx are mutually\nexclusive subsets of unix. Their usage takes the form of a ternary conditional\noperator, as demonstrated in the following examples.</p>\n<p>Simple blocks:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"k\">ccall</span><span class=\"p\">(</span> <span class=\"p\">(@</span><span class=\"n\">windows</span><span class=\"o\">?</span> <span class=\"p\">:</span><span class=\"n\">_fopen</span> <span class=\"p\">:</span> <span class=\"p\">:</span><span class=\"n\">fopen</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Complex blocks:</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"p\">@</span><span class=\"n\">linux</span><span class=\"o\">?</span> <span class=\"p\">(</span>\n         <span class=\"k\">begin</span>\n             <span class=\"n\">some_complicated_thing</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n         <span class=\"k\">end</span>\n       <span class=\"p\">:</span> <span class=\"k\">begin</span>\n             <span class=\"n\">some_different_thing</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n         <span class=\"k\">end</span>\n       <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Chaining (parentheses optional, but recommended for readability):</p>\n<div class=\"highlight-julia\"><div class=\"highlight\"><pre><span></span><span class=\"p\">@</span><span class=\"n\">windows</span><span class=\"o\">?</span> <span class=\"p\">:</span><span class=\"n\">a</span> <span class=\"p\">:</span> <span class=\"p\">(@</span><span class=\"n\">osx</span><span class=\"o\">?</span> <span class=\"p\">:</span><span class=\"n\">b</span> <span class=\"p\">:</span> <span class=\"p\">:</span><span class=\"n\">c</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n\n\n          </div>\n          <footer>\n  \n    <div class=\"rst-footer-buttons\" role=\"navigation\" aria-label=\"footer navigation\">\n      \n        <a href=\"interacting-with-julia.html\" class=\"btn btn-neutral float-right\" title=\"Interacting With Julia\">Next <span class=\"fa fa-arrow-circle-right\"></span></a>\n      \n      \n        <a href=\"running-external-programs.html\" class=\"btn btn-neutral\" title=\"Running External Programs\"><span class=\"fa fa-arrow-circle-left\"></span> Previous</a>\n      \n    </div>\n  \n\n  <hr/>\n\n  <div role=\"contentinfo\">\n    <p>\n    </p>\n  </div>\n\n  <a href=\"https://github.com/snide/sphinx_rtd_theme\">Sphinx theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a>\n</footer>\n        </div>\n      </div>\n\n    </section>\n\n  </div>\n  \n\n  \n\n    <script type=\"text/javascript\">\n        var DOCUMENTATION_OPTIONS = {\n            URL_ROOT:'../',\n            VERSION:'0.4.5',\n            COLLAPSE_INDEX:false,\n            FILE_SUFFIX:'.html',\n            HAS_SOURCE:  true\n        };\n    </script>\n      <script type=\"text/javascript\" src=\"../_static/jquery.js\"></script>\n      <script type=\"text/javascript\" src=\"../_static/underscore.js\"></script>\n      <script type=\"text/javascript\" src=\"../_static/doctools.js\"></script>\n      <script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"../_static/js/theme.js\"></script>\n  \n\n  \n  \n  <script type=\"text/javascript\">\n      jQuery(function () {\n          SphinxRtdTheme.StickyNav.enable();\n      });\n  </script>\n   \n\n</body>\n</html>",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_sources/stdlib/libdl.txt": ".. module:: Libdl\n\n****************\n Dynamic Linker\n****************\n\n.. function:: dlopen(libfile::AbstractString [, flags::Integer])\n\n   .. Docstring generated from Julia source\n\n   Load a shared library, returning an opaque handle.\n\n   The optional flags argument is a bitwise-or of zero or more of ``RTLD_LOCAL``\\ , ``RTLD_GLOBAL``\\ , ``RTLD_LAZY``\\ , ``RTLD_NOW``\\ , ``RTLD_NODELETE``\\ , ``RTLD_NOLOAD``\\ , ``RTLD_DEEPBIND``\\ , and ``RTLD_FIRST``\\ . These are converted to the corresponding flags of the POSIX (and/or GNU libc and/or MacOS) dlopen command, if possible, or are ignored if the specified functionality is not available on the current platform. The default flags are platform specific. On MacOS the default ``dlopen`` flags are ``RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL`` while on other platforms the defaults are ``RTLD_LAZY|RTLD_DEEPBIND|RTLD_LOCAL``\\ . An important usage of these flags is to specify non default behavior for when the dynamic library loader binds library references to exported symbols and if the bound references are put into process local or global scope. For instance ``RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL`` allows the library's symbols to be available for usage in other shared libraries, addressing situations where there are dependencies between shared libraries.\n\n.. function:: dlopen_e(libfile::AbstractString [, flags::Integer])\n\n   .. Docstring generated from Julia source\n\n   Similar to :func:`dlopen`, except returns a ``NULL`` pointer instead of raising errors.\n\n.. data:: RTLD_DEEPBIND\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_FIRST\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_GLOBAL\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_LAZY\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_LOCAL\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_NODELETE\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_NOLOAD\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_NOW\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. function:: dlsym(handle, sym)\n\n   .. Docstring generated from Julia source\n\n   Look up a symbol from a shared library handle, return callable function pointer on success.\n\n.. function:: dlsym_e(handle, sym)\n\n   .. Docstring generated from Julia source\n\n   Look up a symbol from a shared library handle, silently return ``NULL`` pointer on lookup failure.\n\n.. function:: dlclose(handle)\n\n   .. Docstring generated from Julia source\n\n   Close shared library referenced by handle.\n\n.. data:: dlext\n\n   File extension for dynamic libraries (e.g. dll, dylib, so) on the current platform.\n\n.. function:: find_library(names, locations)\n\n   .. Docstring generated from Julia source\n\n   Searches for the first library in ``names`` in the paths in the ``locations`` list, ``DL_LOAD_PATH``\\ , or system library paths (in that order) which can successfully be dlopen'd. On success, the return value will be one of the names (potentially prefixed by one of the paths in locations). This string can be assigned to a ``global const`` and used as the library name in future ``ccall``\\ 's. On failure, it returns the empty string.\n\n.. data:: DL_LOAD_PATH\n\n   When calling ``dlopen``, the paths in this list will be searched first, in order, before searching the\n   system locations for a valid library handle.\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_sources/manual/calling-c-and-fortran-code.txt": ".. _man-calling-c-and-fortran-code:\n\n****************************\n Calling C and Fortran Code\n****************************\n\nThough most code can be written in Julia, there are many high-quality,\nmature libraries for numerical computing already written in C and\nFortran. To allow easy use of this existing code, Julia makes it simple\nand efficient to call C and Fortran functions. Julia has a \"no\nboilerplate\" philosophy: functions can be called directly from Julia\nwithout any \"glue\" code, code generation, or compilation \u2014 even from the\ninteractive prompt. This is accomplished just by making an appropriate call\nwith ``ccall`` syntax, which looks like an ordinary function call.\n\nThe code to be called must be available as a shared library. Most C and\nFortran libraries ship compiled as shared libraries already, but if you\nare compiling the code yourself using GCC (or Clang), you will need to\nuse the ``-shared`` and ``-fPIC`` options. The machine instructions\ngenerated by Julia's JIT are the same as a native C call would be, so\nthe resulting overhead is the same as calling a library function from C\ncode. (Non-library function calls in both C and Julia can be inlined and\nthus may have even less overhead than calls to shared library functions.\nWhen both libraries and executables are generated by LLVM, it is\npossible to perform whole-program optimizations that can even optimize\nacross this boundary, but Julia does not yet support that. In the\nfuture, however, it may do so, yielding even greater performance gains.)\n\nShared libraries and functions are referenced by a tuple of the\nform ``(:function, \"library\")`` or ``(\"function\", \"library\")`` where ``function``\nis the C-exported function name. ``library`` refers to the shared library\nname: shared libraries available in the (platform-specific) load path\nwill be resolved by name, and if necessary a direct path may be specified.\n\nA function name may be used alone in place of the tuple (just\n``:function`` or ``\"function\"``). In this case the name is resolved within\nthe current process. This form can be used to call C library functions,\nfunctions in the Julia runtime, or functions in an application linked to\nJulia.\n\nBy default, Fortran compilers `generate mangled names\n<https://en.wikipedia.org/wiki/Name_mangling#Fortran>`_\n(for example, converting function names to lowercase or uppercase,\noften appending an underscore), and so to call a Fortran function via\n``ccall`` you must pass the mangled identifier corresponding to the rule\nfollowed by your Fortran compiler.  Also, when calling a Fortran\nfunction, all inputs must be passed by reference.\n\nFinally, you can use ``ccall`` to actually generate a call to the\nlibrary function. Arguments to ``ccall`` are as follows:\n\n1. (:function, \"library\") pair (must be a constant, but see below).\n\n2. Return type (see below for mapping the declared C type to Julia)\n\n   - This argument will be evaluated at compile-time.\n\n3. A tuple of input types. The input types must be written as a literal tuple,\n   not a tuple-valued variable or expression.\n\n   - This argument will be evaluated at compile-time.\n\n4. The following arguments, if any, are the actual argument values\n   passed to the function.\n\nAs a complete but simple example, the following calls the ``clock``\nfunction from the standard C library::\n\n    julia> t = ccall( (:clock, \"libc\"), Int32, ())\n    2292761\n\n    julia> t\n    2292761\n\n    julia> typeof(ans)\n    Int32\n\n``clock`` takes no arguments and returns an ``Int32``. One common gotcha\nis that a 1-tuple must be written with a trailing comma. For\nexample, to call the ``getenv`` function to get a pointer to the value\nof an environment variable, one makes a call like this::\n\n    julia> path = ccall((:getenv, \"libc\"), Ptr{UInt8}, (Ptr{UInt8},), \"SHELL\")\n    Ptr{UInt8} @0x00007fff5fbffc45\n\n    julia> bytestring(path)\n    \"/bin/bash\"\n\nNote that the argument type tuple must be written as ``(Ptr{UInt8},)``,\nrather than ``(Ptr{UInt8})``. This is because ``(Ptr{UInt8})`` is just\nthe expression ``Ptr{UInt8}`` surrounded by parentheses, rather than\na 1-tuple containing ``Ptr{UInt8}``::\n\n    julia> (Ptr{UInt8})\n    Ptr{UInt8}\n\n    julia> (Ptr{UInt8},)\n    (Ptr{UInt8},)\n\nIn practice, especially when providing reusable functionality, one\ngenerally wraps ``ccall`` uses in Julia functions that set up arguments\nand then check for errors in whatever manner the C or Fortran function\nindicates them, propagating to the Julia caller as exceptions. This is\nespecially important since C and Fortran APIs are notoriously\ninconsistent about how they indicate error conditions. For example, the\n``getenv`` C library function is wrapped in the following Julia function\nin\n`env.jl <https://github.com/JuliaLang/julia/blob/master/base/env.jl>`_::\n\n    function getenv(var::AbstractString)\n      val = ccall((:getenv, \"libc\"),\n                  Ptr{UInt8}, (Ptr{UInt8},), var)\n      if val == C_NULL\n        error(\"getenv: undefined variable: \", var)\n      end\n      bytestring(val)\n    end\n\nThe C ``getenv`` function indicates an error by returning ``NULL``, but\nother standard C functions indicate errors in various different ways,\nincluding by returning -1, 0, 1 and other special values. This wrapper\nthrows an exception clearly indicating the problem if the caller tries\nto get a non-existent environment variable::\n\n    julia> getenv(\"SHELL\")\n    \"/bin/bash\"\n\n    julia> getenv(\"FOOBAR\")\n    getenv: undefined variable: FOOBAR\n\nHere is a slightly more complex example that discovers the local\nmachine's hostname::\n\n    function gethostname()\n      hostname = Array(UInt8, 128)\n      ccall((:gethostname, \"libc\"), Int32,\n            (Ptr{UInt8}, Csize_t),\n            hostname, sizeof(hostname))\n      hostname[end] = 0; # ensure null-termination\n      return bytestring(pointer(hostname))\n    end\n\nThis example first allocates an array of bytes, then calls the C library\nfunction ``gethostname`` to fill the array in with the hostname, takes a\npointer to the hostname buffer, and converts the pointer to a Julia\nstring, assuming that it is a NUL-terminated C string. It is common for\nC libraries to use this pattern of requiring the caller to allocate\nmemory to be passed to the callee and filled in. Allocation of memory\nfrom Julia like this is generally accomplished by creating an\nuninitialized array and passing a pointer to its data to the C function.\n\nCreating C-Compatible Julia Function Pointers\n---------------------------------------------\n\nIt is possible to pass Julia functions to native c-functions that accept\nfunction pointer arguments. For example, to match c-prototypes of the form::\n\n    typedef returntype (*functiontype)(argumenttype,...)\n\nThe function ``cfunction`` generates the c-compatible function pointer for\na call to a Julia library function.\nArguments to ``cfunction`` are as follows:\n\n1. A Julia Function\n\n2. Return type\n\n3. A tuple of input types\n\nA classic example is the standard C library ``qsort`` function,\ndeclared as::\n\n    void qsort(void *base, size_t nmemb, size_t size,\n               int(*compare)(const void *a, const void *b));\n\nThe ``base`` argument is a pointer to an array of length ``nmemb``, with elements of\n``size`` bytes each. ``compare`` is a callback function which takes pointers to two\nelements ``a`` and ``b`` and returns an integer less/greater than zero if ``a`` should\nappear before/after ``b`` (or zero if any order is permitted). Now, suppose that we\nhave a 1d array ``A`` of values in Julia that we want to sort using the ``qsort``\nfunction (rather than Julia's built-in ``sort`` function). Before we worry about calling\n``qsort`` and passing arguments, we need to write a comparison function that works for\nsome arbitrary type T::\n\n    function mycompare{T}(a::T, b::T)\n        return convert(Cint, a < b ? -1 : a > b ? +1 : 0)::Cint\n    end\n\nNotice that we have to be careful about the return type: ``qsort`` expects a function\nreturning a C ``int``, so we must be sure to return ``Cint`` via a call to ``convert``\nand a ``typeassert``.\n\nIn order to pass this function to C, we obtain its address using the function ``cfunction``::\n\n    const mycompare_c = cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}))\n\n``cfunction`` accepts three arguments: the Julia function (``mycompare``), the return\ntype (``Cint``), and a tuple of the argument types, in this case to sort an array of\n``Cdouble`` (Float64) elements.\n\nThe final call to ``qsort`` looks like this::\n\n    A = [1.3, -2.7, 4.4, 3.1]\n    ccall(:qsort, Void, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Void}),\n          A, length(A), sizeof(eltype(A)), mycompare_c)\n\nAfter this executes, ``A`` is changed to the sorted array ``[-2.7, 1.3, 3.1, 4.4]``.\nNote that Julia knows how to convert an array into a ``Ptr{Cdouble}``, how to compute\nthe size of a type in bytes (identical to C's ``sizeof`` operator), and so on.\nFor fun, try inserting a ``println(\"mycompare($a,$b)\")`` line into ``mycompare``, which\nwill allow you to see the comparisons that ``qsort`` is performing (and to verify that\nit is really calling the Julia function that you passed to it).\n\n\nMapping C Types to Julia\n------------------------\n\nIt is critical to exactly match the declared C type with its declaration\nin Julia. Inconsistencies can cause code that works correctly on one system\nto fail or produce indeterminate results on a different system.\n\nNote that no C header files are used anywhere in the process of calling C\nfunctions: you are responsible for making sure that your Julia types and\ncall signatures accurately reflect those in the C header file. (The `Clang\npackage <https://github.com/ihnorton/Clang.jl>`_ can be used to auto-generate\nJulia code from a C header file.)\n\nAuto-conversion:\n~~~~~~~~~~~~~~~~\n\nJulia automatically inserts calls to the ``convert`` function to convert\neach argument to the specified type. For example, the following call::\n\n    ccall((:foo, \"libfoo\"), Void, (Int32, Float64), x, y)\n\nwill behave as if the following were written::\n\n    ccall((:foo, \"libfoo\"), Void, (Int32, Float64),\n          Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),\n          Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))\n\n``cconvert`` normally just calls ``convert``, but can be defined to return\nan arbitrary new object more appropriate for passing to C. For example,\nthis is used to convert an ``Array`` of objects (e.g. strings) to an\narray of pointers.\n\n``unsafe_convert`` handles conversion to ``Ptr`` types. It is considered\nunsafe because converting an object to a native pointer can hide the object\nfrom the garbage collector, causing it to be freed prematurely.\n\nType Correspondences:\n~~~~~~~~~~~~~~~~~~~~~\n\nFirst, a review of some relevant Julia type terminology:\n\n.. rst-class:: text-wrap\n\n==============================  ==============================  ======================================================\nSyntax / Keyword                Example                         Description\n==============================  ==============================  ======================================================\n``type``                        ``ASCIIString``                 \"Leaf Type\" :: A group of related data that includes\n                                                                a type-tag, is managed by the Julia GC, and\n                                                                is defined by object-identity.\n                                                                The type parameters of a leaf type must be fully defined\n                                                                (no ``TypeVars`` are allowed)\n                                                                in order for the instance to be constructed.\n\n``abstract``                    ``Any``,                        \"Super Type\" :: A super-type (not a leaf-type)\n                                ``AbstractArray{T,N}``,         that cannot be instantiated, but can be used to\n                                ``Complex{T}``                  describe a group of types.\n\n``{T}``                         ``Vector{Int}``                 \"Type Parameter\" :: A specialization of a type\n                                                                (typically used for dispatch or storage optimization).\n\n                                                                \"TypeVar\" :: The ``T`` in the type parameter declaration\n                                                                is referred to as a TypeVar (short for type variable).\n\n``bitstype``                    ``Int``,                        \"Bits Type\" :: A type with no fields, but a size. It\n                                ``Float64``                     is stored and defined by-value.\n\n``immutable``                   ``Pair{Int,Int}``               \"Immutable\" :: A type with all fields defined to be\n                                                                constant. It is defined by-value. And may be stored\n                                                                with a type-tag.\n\n                                ``Complex128`` (``isbits``)     \"Is-Bits\" :: A ``bitstype``, or an ``immutable`` type\n                                                                where all fields are other ``isbits`` types. It is\n                                                                defined by-value, and is stored without a type-tag.\n\n``type ...; end``               ``nothing``                     \"Singleton\" :: a Leaf Type or Immutable with no fields.\n\n``(...)`` or ``tuple(...)```    ``(1,2,3)``                     \"Tuple\" :: an immutable data-structure similar to an\n                                                                anonymous immutable type, or a constant array.\n                                                                Represented as either an array or a struct.\n\n``typealias``                   Not applicable here             Type aliases, and other similar mechanisms of\n                                                                doing type indirection, are resolved to their base\n                                                                type (this includes assigning a type to another name,\n                                                                or getting the type out of a function call).\n==============================  ==============================  ======================================================\n\nBits Types:\n~~~~~~~~~~~\n\nThere are several special types to be aware of, as no other type can be defined to behave the same:\n\n``Float32``\n    Exactly corresponds to the ``float`` type in C (or ``REAL*4`` in Fortran).\n\n``Float64``\n    Exactly corresponds to the ``double`` type in C (or ``REAL*8`` in Fortran).\n\n``Complex64``\n    Exactly corresponds to the ``complex float`` type in C (or ``COMPLEX*8`` in Fortran).\n\n``Complex128``\n    Exactly corresponds to the ``complex double`` type in C (or ``COMPLEX*16`` in Fortran).\n\n``Signed``\n    Exactly corresponds to the ``signed`` type annotation in C (or any ``INTEGER`` type in Fortran). Any Julia type that is not a subtype of ``Signed`` is assumed to be unsigned.\n\n``Ref{T}``\n    Behaves like a ``Ptr{T}`` that owns its memory.\n\n``Array{T,N}``\n    When an array is passed to C as a ``Ptr{T}`` argument, it is\n    not reinterpret-cast: Julia requires that the element type of the\n    array matches ``T``, and the address of the first element is passed.\n\n    Therefore, if an ``Array`` contains data in the wrong format, it will\n    have to be explicitly converted using a call such as ``trunc(Int32,a)``.\n\n    To pass an array ``A`` as a pointer of a different type *without*\n    converting the data beforehand (for example, to pass a ``Float64`` array\n    to a function that operates on uninterpreted bytes), you can\n    declare the argument as ``Ptr{Void}``.\n\n    If an array of eltype ``Ptr{T}`` is passed as a ``Ptr{Ptr{T}}`` argument, the Julia base library\n    ``cconvert`` function will attempt to first make a null-terminated copy of the array with\n    each element replaced by its ``cconvert`` version. This allows, for example, passing an ``argv``\n    pointer array of type ``Vector{ByteString}`` to an argument of type ``Ptr{Ptr{Cchar}}``.\n\nOn all systems we currently support, basic C/C++ value types may be\ntranslated to Julia types as follows. Every C type also has a corresponding\nJulia type with the same name, prefixed by C. This can help for writing portable code (and remembering that an ``int`` in C is not the same as an ``Int`` in Julia).\n\n**System Independent:**\n\n.. rst-class:: text-wrap\n\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| C name                            | Fortran name    | Standard Julia Alias | Julia Base Type                   |\n+===================================+=================+======================+===================================+\n| ``unsigned char``                 | ``CHARACTER``   | ``Cuchar``           | ``UInt8``                         |\n|                                   |                 |                      |                                   |\n| ``bool`` (C++)                    |                 |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``short``                         | ``INTEGER*2``   | ``Cshort``           | ``Int16``                         |\n|                                   |                 |                      |                                   |\n|                                   | ``LOGICAL*2``   |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``unsigned short``                |                 | ``Cushort``          | ``UInt16``                        |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``int``                           | ``INTEGER*4``   | ``Cint``             | ``Int32``                         |\n|                                   |                 |                      |                                   |\n| ``BOOL`` (C, typical)             | ``LOGICAL*4``   |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``unsigned int``                  |                 | ``Cuint``            | ``UInt32``                        |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``long long``                     | ``INTEGER*8``   | ``Clonglong``        | ``Int64``                         |\n|                                   |                 |                      |                                   |\n|                                   | ``LOGICAL*8``   |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``unsigned long long``            |                 | ``Culonglong``       | ``UInt64``                        |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``intmax_t``                      |                 | ``Cintmax_t``        | ``Int64``                         |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``uintmax_t``                     |                 | ``Cuintmax_t``       | ``UInt64``                        |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``float``                         | ``REAL*4i``     | ``Cfloat``           | ``Float32``                       |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``double``                        | ``REAL*8``      | ``Cdouble``          | ``Float64``                       |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``complex float``                 | ``COMPLEX*8``   | ``Complex64``        | ``Complex{Float32}``              |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``complex double``                | ``COMPLEX*16``  | ``Complex128``       | ``Complex{Float64}``              |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``ptrdiff_t``                     |                 | ``Cptrdiff_t``       | ``Int``                           |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``ssize_t``                       |                 | ``Cssize_t``         | ``Int``                           |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``size_t``                        |                 | ``Csize_t``          | ``UInt``                          |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``void``                          |                 |                      | ``Void``                          |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``void*``                         |                 |                      | ``Ptr{Void}``                     |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``T*`` (where T represents an     |                 |                      | ``Ref{T}``                        |\n| appropriately defined type)       |                 |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``char*``                         | ``CHARACTER*N`` |                      | ``Cstring`` if NUL-terminated, or |\n| (or ``char[]``, e.g. a string)    |                 |                      | ``Ptr{UInt8}`` if not             |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``char**`` (or ``*char[]``)       |                 |                      | ``Ptr{Ptr{UInt8}}``               |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``jl_value_t*``                   |                 |                      | ``Any``                           |\n| (any Julia Type)                  |                 |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``jl_value_t**``                  |                 |                      | ``Ref{Any}``                      |\n| (a reference to a Julia Type)     |                 |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``va_arg``                        |                 |                      | Not supported                     |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``...``                           |                 |                      | ``T...`` (where ``T``             |\n| (variadic function specification) |                 |                      | is one of the above types,        |\n|                                   |                 |                      | variadic functions of different   |\n|                                   |                 |                      | argument types are not supported) |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n\nThe ``Cstring`` type is essentially a synonym for ``Ptr{UInt8}``, except the conversion to ``Cstring`` throws an\nerror if the Julia string contains any embedded NUL characters (which would cause the string to be silently\ntruncated if the C routine treats NUL as the terminator).  If you are passing a ``char*`` to a C routine that\ndoes not assume NUL termination (e.g. because you pass an explicit string length), or if you know for certain that\nyour Julia string does not contain NUL and want to skip the check, you can use ``Ptr{UInt8}`` as the argument type.\n\n**System-dependent:**\n\n======================  ======================  =======\nC name                  Standard Julia Alias    Julia Base Type\n======================  ======================  =======\n``char``                ``Cchar``               ``Int8`` (x86, x86_64)\n\n                                                ``UInt8`` (powerpc, arm)\n\n``long``                ``Clong``               ``Int`` (UNIX)\n\n                                                ``Int32`` (Windows)\n\n``unsigned long``       ``Culong``              ``UInt`` (UNIX)\n\n                                                ``UInt32`` (Windows)\n\n``wchar_t``             ``Cwchar_t``            ``Int32`` (UNIX)\n\n                                                ``UInt16`` (Windows)\n======================  ======================  =======\n\n.. note::\n\n    When calling a Fortran function, all inputs must be passed by reference, so\n    all type correspondences above should contain an additional ``Ptr{..}`` or\n    ``Ref{..}`` wrapper around their type specification.\n\n.. warning::\n\n    For string arguments (``char*``) the Julia type should be ``Cstring`` (if NUL-\n    terminated data is expected) or either ``Ptr{Cchar}`` or ``Ptr{UInt8}``\n    otherwise (these two pointer types have the same effect), as described above,\n    not ``ASCIIString``. Similarly, for array arguments (``T[]`` or ``T*``), the\n    Julia type should again be ``Ptr{T}``, not ``Vector{T}``.\n\n.. warning::\n\n    Julia's ``Char`` type is 32 bits, which is not the same as the wide character\n    type (``wchar_t`` or ``wint_t``) on all platforms.\n\n.. note::\n\n    For ``wchar_t*`` arguments, the Julia type should be ``Cwstring`` (if the C\n    routine expects a NUL-terminated string) or ``Ptr{Cwchar_t}`` otherwise, and\n    data can be converted to/from ordinary Julia strings by the ``wstring(s)``\n    function (equivalent to either ``utf16(s)`` or ``utf32(s)`` depending upon the\n    width of ``Cwchar_t``); this conversion will be called automatically for\n    ``Cwstring`` arguments.    Note also that ASCII, UTF-8, UTF-16, and UTF-32\n    string data in Julia is internally NUL-terminated, so it can be passed to C\n    functions expecting NUL-terminated data without making a copy (but using the\n    ``Cwstring`` type will cause an error to be thrown if the string itself\n    contains NUL characters).\n\n.. note::\n\n    C functions that take an argument of the type ``char**`` can be called by\n    using a ``Ptr{Ptr{UInt8}}`` type within Julia. For example, C functions of the\n    form::\n\n        int main(int argc, char **argv);\n\n    can be called via the following Julia code::\n\n        argv = [ \"a.out\", \"arg1\", \"arg2\" ]\n        ccall(:main, Int32, (Int32, Ptr{Ptr{UInt8}}), length(argv), argv)\n\n.. note::\n\n    A C function declared to return ``Void`` will return the value ``nothing`` in\n    Julia.\n\nStruct Type correspondences\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nComposite types, aka ``struct`` in C or ``TYPE`` in Fortran90\n(or ``STRUCTURE`` / ``RECORD`` in some variants of F77),\ncan be mirrored in Julia by creating a ``type`` or ``immutable``\ndefinition with the same field layout.\n\nWhen used recursively, ``isbits`` types are stored inline.\nAll other types are stored as a pointer to the data.\nWhen mirroring a struct used by-value inside another struct in C,\nit is imperative that you do not attempt to manually copy the fields over,\nas this will not preserve the correct field alignment.\nInstead, declare an immutable isbits type and use that instead.\nUnnamed structs are not possible in the translation to Julia.\n\nPacked structs and union declarations are not supported by Julia.\n\nYou can get a near approximation of a ``union`` if you know, a priori,\nthe field that will have the greatest size (potentially including padding).\nWhen translating your fields to Julia, declare the Julia field to be only\nof that type.\n\nArrays of parameters must be expanded manually, currently\n(either inline, or in an immutable helper-type). For example::\n\n    in C:\n    struct B {\n        int A[3];\n    };\n    b_a_2 = B.A[2];\n\n    in Julia:\n    immutable B_A\n        A_1::Cint\n        A_2::Cint\n        A_3::Cint\n    end\n    type B\n        A::B_A\n    end\n    b_a_2 = B.A.(2)\n\nArrays of unknown size are not supported.\n\nIn the future, some of these restrictions may be reduced or eliminated.\n\nMemory Ownership:\n~~~~~~~~~~~~~~~~~\n\n**malloc/free**\n\nMemory allocation and deallocation of such objects must be\nhandled by calls to the appropriate cleanup routines in the libraries\nbeing used, just like in any C program. Do not try to free an object\nreceived from a C library with ``Libc.free`` in Julia, as this may result\nin the ``free`` function being called via the wrong ``libc`` library and\ncause Julia to crash. The reverse (passing an object allocated in Julia\nto be freed by an external library) is equally invalid.\n\n**Ptr{T} vs. Array{T} vs. Ref{T} vs. T**\n\nThe choice of type-wrapper declaration strongly depends on who allocated the memory,\nand the declared type.\nIn general, use ``T`` if the memory is intended to be allocated in\n(and managed by) Julia (with type-tag).\nUse ``Ptr{T}`` if the memory is expected to be populated by ``C`` (without type-tag).\nUse ``Ref{T}`` if you have an ``isbits`` type,\nbut you want to turn it into a pointer to a struct in another struct definition.\n\nSee issue #2818 for some work that needs to be done to simplify this so that Julia\ntypes can be used to recursively mirror c-style structs,\nwithout requiring as much manual management of the ``Ptr`` conversions.\nAfter #2818 is implemented, it will be true that an ``Vector{T}`` will be equivalent to\nan ``Ptr{Ptr{T}}``. That is currently not true, and the conversion must be explicitly.\n\nMapping C Functions to Julia\n----------------------------\n\nccall/cfunction argument translation guide\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor translating a ``c`` argument list to ``Julia``:\n\n* ``T``, where ``T`` is one of the primitive types:\n  ``char``, ``int``, ``long``, ``short``, ``float``, ``double``, ``complex``, ``enum``\n  or any of their ``typedef`` equivalents\n\n  + ``T``, where ``T`` is an equivalent Julia Bits Type (per the table above)\n  + if ``T`` is an ``enum``, the argument type should be equivalent to ``Cint`` or ``Cuint``\n  + argument value will be copied (passed by-value)\n\n* ``struct T`` (including typedef to a struct)\n\n  + ``T``, where ``T`` is a Julia Leaf Type\n  + argument value will be copied (passed by-value)\n\n* ``void*``\n\n  + depends on how this parameter is used, first translate this to the intended pointer type,\n    then determine the Julia equivalent using the remaining rules in this list\n  + this argument may be declared as ``Ptr{Void}``, if it really is just an unknown pointer\n\n* ``jl_value_t*``\n\n  + ``Any``\n  + argument value must be a valid Julia object\n  + currently unsupported by cfunction\n\n* ``jl_value_t**``\n\n  + ``Ref{Any}``\n  + argument value must be a valid Julia object (or ``C_NULL``)\n  + currently unsupported by cfunction\n\n* ``T*``\n\n  + ``Ref{T}``, where ``T`` is the Julia type corresponding to ``T``\n  + argument value will be copied if it is an ``isbits`` type\n    otherwise, the value must be a valid Julia object\n\n* ``(T*)(...)`` (e.g. a pointer to a function)\n\n  + ``Ptr{Void}`` (you may need to use ``cfunction`` explicitly to create this pointer)\n\n* ``...`` (e.g. a vararg)\n\n  + ``T...``, where ``T`` is the Julia type\n\n* ``va_arg``\n\n  + not supported\n\nccall/cfunction return type translation guide\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor translating a ``c`` return type to ``Julia``:\n\n* ``void``\n\n  + ``Void`` (this will return the singleton instance ``nothing::Void``)\n\n* ``T``, where ``T`` is one of the primitive types:\n  ``char``, ``int``, ``long``, ``short``, ``float``, ``double``, ``complex``, ``enum``\n  or any of their ``typedef`` equivalents\n\n  + ``T``, where ``T`` is an equivalent Julia Bits Type (per the table above)\n  + if ``T`` is an ``enum``, the argument type should be equivalent to ``Cint`` or ``Cuint``\n  + argument value will be copied (returned by-value)\n\n* ``struct T`` (including typedef to a struct)\n\n  + ``T``, where ``T`` is a Julia Leaf Type\n  + argument value will be copied (returned by-value)\n\n* ``void*``\n\n  + depends on how this parameter is used, first translate this to the intended pointer type,\n    then determine the Julia equivalent using the remaining rules in this list\n  + this argument may be declared as ``Ptr{Void}``, if it really is just an unknown pointer\n\n* ``jl_value_t*``\n\n  + ``Any``\n  + argument value must be a valid Julia object\n\n* ``jl_value_t**``\n\n  + ``Ref{Any}``\n  + argument value must be a valid Julia object (or ``C_NULL``)\n\n* ``T*``\n\n  + If the memory is already owned by Julia, or is an ``isbits`` type, and is known to be non-null:\n\n    + ``Ref{T}``, where ``T`` is the Julia type corresponding to ``T``\n    + a return type of ``Ref{Any}`` is invalid, it should either be ``Any``\n      (corresponding to ``jl_value_t*``) or ``Ptr{Any}`` (corresponding to ``Ptr{Any}``)\n    + currently partially unsupported by cfunction due to #2818\n    + C **MUST NOT** modify the memory returned via ``Ref{T}`` if ``T`` is an ``isbits`` type\n\n  + If the memory is owned by C:\n\n    + ``Ptr{T}``, where ``T`` is the Julia type corresponding to ``T``\n\n* ``(T*)(...)`` (e.g. a pointer to a function)\n\n  + ``Ptr{Void}`` (you may need to use ``cfunction`` explicitly to create this pointer)\n\nPassing Pointers for Modifying Inputs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBecause C doesn't support multiple return values,\noften C functions will take pointers to data that the function will modify.\nTo accomplish this within a ``ccall``,\nyou need to first encapsulate the value inside an ``Ref{T}`` of the appropriate type.\nWhen you pass this ``Ref`` object as an argument,\njulia will automatically pass a C pointer to the encapsulated data::\n\n    width = Ref{Cint}(0)\n    range = Ref{Cfloat}(0)\n    ccall(:foo, Void, (Ref{Cint}, Ref{Cfloat}), width, range)\n\nUpon return, the contents of ``width`` and ``range`` can be retrieved\n(if they were changed by ``foo``) by ``width[]`` and ``range[]``; that is,\nthey act like zero-dimensional arrays.\n\nSpecial Reference Syntax for ccall (deprecated):\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``&`` syntax is deprecated, use the ``Ref{T}`` argument type instead.\n\nA prefix ``&`` is used on an argument to ccall to indicate that a pointer\nto a scalar argument should be passed instead of the scalar value itself\n(required for all Fortran function arguments, as noted above). The following\nexample computes a dot product using a BLAS function.\n\n::\n\n    function compute_dot(DX::Vector{Float64}, DY::Vector{Float64})\n      assert(length(DX) == length(DY))\n      n = length(DX)\n      incx = incy = 1\n      product = ccall((:ddot_, \"libLAPACK\"),\n                      Float64,\n                      (Ptr{Int32}, Ptr{Float64}, Ptr{Int32}, Ptr{Float64}, Ptr{Int32}),\n                      &n, DX, &incx, DY, &incy)\n      return product\n    end\n\nThe meaning of prefix ``&`` is not quite the same as in C. In\nparticular, any changes to the referenced variables will not be\nvisible in Julia unless the type is mutable (declared via\n``type``). However, even for immutable types it will not cause any\nharm for called functions to attempt such modifications (that is,\nwriting through the passed pointers). Moreover, ``&`` may be used with\nany expression, such as ``&0`` or ``&f(x)``.\n\nWhen a scalar value is passed with ``&`` as an argument of type\n``Ptr{T}``, the value will first be converted to type ``T``.\n\n\nGarbage Collection Safety\n-------------------------\nWhen passing data to a ccall, it is best to avoid using the ``pointer()``\nfunction. Instead define a convert method and pass the variables directly to\nthe ccall. ccall automatically arranges that all of its arguments will be\npreserved from garbage collection until the call returns. If a C API will\nstore a reference to memory allocated by Julia, after the ccall returns, you\nmust arrange that the object remains visible to the garbage collector. The\nsuggested way to handle this is to make a global variable of type\n``Array{Ref,1}`` to hold these values, until the C library notifies you that\nit is finished with them.\n\nWhenever you have created a pointer to Julia data, you must ensure the original data\nexists until you are done with using the pointer. Many methods in Julia such as\n``unsafe_load()`` and ``bytestring()`` make copies of data instead of taking ownership\nof the buffer, so that it is safe to free (or alter) the original data without\naffecting Julia. A notable exception is ``pointer_to_array()`` which, for performance\nreasons, shares (or can be told to take ownership of) the underlying buffer.\n\nThe garbage collector does not guarantee any order of finalization. That is, if ``a``\ncontained a reference to ``b`` and both ``a`` and ``b`` are due for garbage\ncollection, there is no guarantee that ``b`` would be finalized after ``a``. If\nproper finalization of ``a`` depends on ``b`` being valid, it must be handled in\nother ways.\n\n\nNon-constant Function Specifications\n------------------------------------\n\nA ``(name, library)`` function specification must be a constant expression.\nHowever, it is possible to use computed values as function names by staging\nthrough ``eval`` as follows::\n\n    @eval ccall(($(string(\"a\",\"b\")),\"lib\"), ...\n\nThis expression constructs a name using ``string``, then substitutes this\nname into a new ``ccall`` expression, which is then evaluated. Keep in mind that\n``eval`` only operates at the top level, so within this expression local\nvariables will not be available (unless their values are substituted with\n``$``). For this reason, ``eval`` is typically only used to form top-level\ndefinitions, for example when wrapping libraries that contain many\nsimilar functions.\n\nIf your usage is more dynamic, use indirect calls as described in the next section.\n\n\nIndirect Calls\n--------------\n\nThe first argument to ``ccall`` can also be an expression evaluated at run time.\nIn this case, the expression must evaluate to a ``Ptr``,\nwhich will be used as the address of the native function to call.\nThis behavior occurs when the first ``ccall`` argument contains references to non-constants,\nsuch as local variables, function arguments, or non-constant globals.\n\nFor example, you might lookup the function via ``dlsym``,\nthen cache it in a global variable for that session. For example::\n\n    macro dlsym(func, lib)\n        z, zlocal = gensym(string(func)), gensym()\n        eval(current_module(),:(global $z = C_NULL))\n        z = esc(z)\n        quote\n            let $zlocal::Ptr{Void} = $z::Ptr{Void}\n                if $zlocal == C_NULL\n                   $zlocal = dlsym($(esc(lib))::Ptr{Void}, $(esc(func)))\n                   global $z = $zlocal\n                end\n                $zlocal\n            end\n        end\n    end\n\n    mylibvar = dlopen(\"mylib\")\n    ccall(@dlsym(\"myfunc\", mylibvar), Void, ())\n\n\nCalling Convention\n------------------\n\nThe second argument to ``ccall`` can optionally be a calling convention\nspecifier (immediately preceding return type). Without any specifier,\nthe platform-default C calling convention is used. Other supported\nconventions are: ``stdcall``, ``cdecl``, ``fastcall``, and ``thiscall``.\nFor example (from base/libc.jl) we see the same ``gethostname`` ccall as above,\nbut with the correct signature for Windows::\n\n    hn = Array(UInt8, 256)\n    err = ccall(:gethostname, stdcall, Int32, (Ptr{UInt8}, UInt32), hn, length(hn))\n\nFor more information, please see the `LLVM Language Reference`_.\n\n.. _LLVM Language Reference: http://llvm.org/docs/LangRef.html#calling-conventions\n\n\nAccessing Global Variables\n--------------------------\n\nGlobal variables exported by native libraries can be accessed by name using the\n``cglobal`` function. The arguments to ``cglobal`` are a symbol specification\nidentical to that used by ``ccall``, and a type describing the value stored in\nthe variable::\n\n    julia> cglobal((:errno,:libc), Int32)\n    Ptr{Int32} @0x00007f418d0816b8\n\nThe result is a pointer giving the address of the value. The value can be\nmanipulated through this pointer using ``unsafe_load`` and ``unsafe_store``.\n\n\nAccessing Data through a Pointer\n--------------------------------\nThe following methods are described as \"unsafe\" because a bad pointer\nor type declaration can cause Julia to terminate abruptly\n(although, that's quite alike with ccall).\n\nGiven a ``Ptr{T}``, the contents of type ``T`` can generally be copied from\nthe referenced memory into a Julia object using ``unsafe_load(ptr, [index])``.\nThe index argument is optional (default is 1),\nand follows the Julia-convention of 1-based indexing.\nThis function is intentionally similar to the behavior of ``getindex()`` and ``setindex!()``\n(e.g. ``[]`` access syntax).\n\nThe return value will be a new object initialized\nto contain a copy of the contents of the referenced memory.\nThe referenced memory can safely be freed or released.\n\nIf ``T`` is ``Any``, then the memory is assumed to contain a reference to\na Julia object (a ``jl_value_t*``), the result will be a reference to this object,\nand the object will not be copied. You must be careful in this case to ensure\nthat the object was always visible to the garbage collector (pointers do not\ncount, but the new reference does) to ensure the memory is not prematurely freed.\nNote that if the object was not originally allocated by Julia, the new object\nwill never be finalized by Julia's garbage collector.  If the ``Ptr`` itself\nis actually a ``jl_value_t*``, it can be converted back to a Julia object\nreference by ``unsafe_pointer_to_objref(ptr)``.  (Julia values ``v``\ncan be converted to ``jl_value_t*`` pointers, as ``Ptr{Void}``, by calling\n``pointer_from_objref(v)``.)\n\nThe reverse operation (writing data to a Ptr{T}), can be performed using\n``unsafe_store!(ptr, value, [index])``.  Currently, this is only supported\nfor bitstypes or other pointer-free (``isbits``) immutable types.\n\nAny operation that throws an error is probably currently unimplemented\nand should be posted as a bug so that it can be resolved.\n\nIf the pointer of interest is a plain-data array (bitstype or immutable), the\nfunction ``pointer_to_array(ptr,dims,[own])`` may be more useful. The final\nparameter should be true if Julia should \"take ownership\" of the underlying\nbuffer and call ``free(ptr)`` when the returned ``Array`` object is finalized.\nIf the ``own`` parameter is omitted or false, the caller must ensure the\nbuffer remains in existence until all access is complete.\n\nArithmetic on the ``Ptr`` type in Julia (e.g. using ``+``) does not behave the\nsame as C's pointer arithmetic. Adding an integer to a ``Ptr`` in Julia always\nmoves the pointer by some number of *bytes*, not elements. This way, the\naddress values obtained from pointer arithmetic do not depend on the\nelement types of pointers.\n\n\nThread-safety\n-------------\n\nSome C libraries execute their callbacks from a different thread, and\nsince Julia isn't thread-safe you'll need to take some extra\nprecautions. In particular, you'll need to set up a two-layered\nsystem: the C callback should only *schedule* (via Julia's event loop)\nthe execution of your \"real\" callback. To do this, you pass a function\nof one argument (the ``AsyncWork`` object for which the event was\ntriggered, which you'll probably just ignore) to ``SingleAsyncWork``::\n\n  cb = Base.SingleAsyncWork(data -> my_real_callback(args))\n\nThe callback you pass to C should only execute a ``ccall`` to\n``:uv_async_send``, passing ``cb.handle`` as the argument.\n\nMore About Callbacks\n--------------------\n\nFor more details on how to pass callbacks to C libraries, see this\n`blog post <http://julialang.org/blog/2013/05/callback>`_.\n\nC++\n---\n\nLimited support for C++ is provided by the `Cpp <https://github.com/timholy/Cpp.jl>`_,\n`Clang <https://github.com/ihnorton/Clang.jl>`_, and `Cxx <https://github.com/Keno/Cxx.jl>`_ packages.\n\nHandling Operating System Variation\n-----------------------------------\n\nWhen dealing with platform libraries, it is often necessary to provide special cases\nfor various platforms. The variable ``OS_NAME`` can be used to write these special\ncases. Additionally, there are several macros intended to make this easier:\n``@windows``, ``@unix``, ``@linux``, and ``@osx``. Note that linux and osx are mutually\nexclusive subsets of unix. Their usage takes the form of a ternary conditional\noperator, as demonstrated in the following examples.\n\nSimple blocks::\n\n    ccall( (@windows? :_fopen : :fopen), ...)\n\nComplex blocks::\n\n    @linux? (\n             begin\n                 some_complicated_thing(a)\n             end\n           : begin\n                 some_different_thing(a)\n             end\n           )\n\nChaining (parentheses optional, but recommended for readability)::\n\n    @windows? :a : (@osx? :b : :c)\n\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/stdlib/libdl.rst": ".. module:: Libdl\n\n****************\n Dynamic Linker\n****************\n\n.. function:: dlopen(libfile::AbstractString [, flags::Integer])\n\n   .. Docstring generated from Julia source\n\n   Load a shared library, returning an opaque handle.\n\n   The optional flags argument is a bitwise-or of zero or more of ``RTLD_LOCAL``\\ , ``RTLD_GLOBAL``\\ , ``RTLD_LAZY``\\ , ``RTLD_NOW``\\ , ``RTLD_NODELETE``\\ , ``RTLD_NOLOAD``\\ , ``RTLD_DEEPBIND``\\ , and ``RTLD_FIRST``\\ . These are converted to the corresponding flags of the POSIX (and/or GNU libc and/or MacOS) dlopen command, if possible, or are ignored if the specified functionality is not available on the current platform. The default flags are platform specific. On MacOS the default ``dlopen`` flags are ``RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL`` while on other platforms the defaults are ``RTLD_LAZY|RTLD_DEEPBIND|RTLD_LOCAL``\\ . An important usage of these flags is to specify non default behavior for when the dynamic library loader binds library references to exported symbols and if the bound references are put into process local or global scope. For instance ``RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL`` allows the library's symbols to be available for usage in other shared libraries, addressing situations where there are dependencies between shared libraries.\n\n.. function:: dlopen_e(libfile::AbstractString [, flags::Integer])\n\n   .. Docstring generated from Julia source\n\n   Similar to :func:`dlopen`, except returns a ``NULL`` pointer instead of raising errors.\n\n.. data:: RTLD_DEEPBIND\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_FIRST\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_GLOBAL\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_LAZY\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_LOCAL\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_NODELETE\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_NOLOAD\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. data:: RTLD_NOW\n\n   Enum constant for :func:`dlopen`. See your platform man page for details, if applicable.\n\n.. function:: dlsym(handle, sym)\n\n   .. Docstring generated from Julia source\n\n   Look up a symbol from a shared library handle, return callable function pointer on success.\n\n.. function:: dlsym_e(handle, sym)\n\n   .. Docstring generated from Julia source\n\n   Look up a symbol from a shared library handle, silently return ``NULL`` pointer on lookup failure.\n\n.. function:: dlclose(handle)\n\n   .. Docstring generated from Julia source\n\n   Close shared library referenced by handle.\n\n.. data:: dlext\n\n   File extension for dynamic libraries (e.g. dll, dylib, so) on the current platform.\n\n.. function:: find_library(names, locations)\n\n   .. Docstring generated from Julia source\n\n   Searches for the first library in ``names`` in the paths in the ``locations`` list, ``DL_LOAD_PATH``\\ , or system library paths (in that order) which can successfully be dlopen'd. On success, the return value will be one of the names (potentially prefixed by one of the paths in locations). This string can be assigned to a ``global const`` and used as the library name in future ``ccall``\\ 's. On failure, it returns the empty string.\n\n.. data:: DL_LOAD_PATH\n\n   When calling ``dlopen``, the paths in this list will be searched first, in order, before searching the\n   system locations for a valid library handle.\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/manual/calling-c-and-fortran-code.rst": ".. _man-calling-c-and-fortran-code:\n\n****************************\n Calling C and Fortran Code\n****************************\n\nThough most code can be written in Julia, there are many high-quality,\nmature libraries for numerical computing already written in C and\nFortran. To allow easy use of this existing code, Julia makes it simple\nand efficient to call C and Fortran functions. Julia has a \"no\nboilerplate\" philosophy: functions can be called directly from Julia\nwithout any \"glue\" code, code generation, or compilation \u2014 even from the\ninteractive prompt. This is accomplished just by making an appropriate call\nwith ``ccall`` syntax, which looks like an ordinary function call.\n\nThe code to be called must be available as a shared library. Most C and\nFortran libraries ship compiled as shared libraries already, but if you\nare compiling the code yourself using GCC (or Clang), you will need to\nuse the ``-shared`` and ``-fPIC`` options. The machine instructions\ngenerated by Julia's JIT are the same as a native C call would be, so\nthe resulting overhead is the same as calling a library function from C\ncode. (Non-library function calls in both C and Julia can be inlined and\nthus may have even less overhead than calls to shared library functions.\nWhen both libraries and executables are generated by LLVM, it is\npossible to perform whole-program optimizations that can even optimize\nacross this boundary, but Julia does not yet support that. In the\nfuture, however, it may do so, yielding even greater performance gains.)\n\nShared libraries and functions are referenced by a tuple of the\nform ``(:function, \"library\")`` or ``(\"function\", \"library\")`` where ``function``\nis the C-exported function name. ``library`` refers to the shared library\nname: shared libraries available in the (platform-specific) load path\nwill be resolved by name, and if necessary a direct path may be specified.\n\nA function name may be used alone in place of the tuple (just\n``:function`` or ``\"function\"``). In this case the name is resolved within\nthe current process. This form can be used to call C library functions,\nfunctions in the Julia runtime, or functions in an application linked to\nJulia.\n\nBy default, Fortran compilers `generate mangled names\n<https://en.wikipedia.org/wiki/Name_mangling#Fortran>`_\n(for example, converting function names to lowercase or uppercase,\noften appending an underscore), and so to call a Fortran function via\n``ccall`` you must pass the mangled identifier corresponding to the rule\nfollowed by your Fortran compiler.  Also, when calling a Fortran\nfunction, all inputs must be passed by reference.\n\nFinally, you can use ``ccall`` to actually generate a call to the\nlibrary function. Arguments to ``ccall`` are as follows:\n\n1. (:function, \"library\") pair (must be a constant, but see below).\n\n2. Return type (see below for mapping the declared C type to Julia)\n\n   - This argument will be evaluated at compile-time.\n\n3. A tuple of input types. The input types must be written as a literal tuple,\n   not a tuple-valued variable or expression.\n\n   - This argument will be evaluated at compile-time.\n\n4. The following arguments, if any, are the actual argument values\n   passed to the function.\n\nAs a complete but simple example, the following calls the ``clock``\nfunction from the standard C library::\n\n    julia> t = ccall( (:clock, \"libc\"), Int32, ())\n    2292761\n\n    julia> t\n    2292761\n\n    julia> typeof(ans)\n    Int32\n\n``clock`` takes no arguments and returns an ``Int32``. One common gotcha\nis that a 1-tuple must be written with a trailing comma. For\nexample, to call the ``getenv`` function to get a pointer to the value\nof an environment variable, one makes a call like this::\n\n    julia> path = ccall((:getenv, \"libc\"), Ptr{UInt8}, (Ptr{UInt8},), \"SHELL\")\n    Ptr{UInt8} @0x00007fff5fbffc45\n\n    julia> bytestring(path)\n    \"/bin/bash\"\n\nNote that the argument type tuple must be written as ``(Ptr{UInt8},)``,\nrather than ``(Ptr{UInt8})``. This is because ``(Ptr{UInt8})`` is just\nthe expression ``Ptr{UInt8}`` surrounded by parentheses, rather than\na 1-tuple containing ``Ptr{UInt8}``::\n\n    julia> (Ptr{UInt8})\n    Ptr{UInt8}\n\n    julia> (Ptr{UInt8},)\n    (Ptr{UInt8},)\n\nIn practice, especially when providing reusable functionality, one\ngenerally wraps ``ccall`` uses in Julia functions that set up arguments\nand then check for errors in whatever manner the C or Fortran function\nindicates them, propagating to the Julia caller as exceptions. This is\nespecially important since C and Fortran APIs are notoriously\ninconsistent about how they indicate error conditions. For example, the\n``getenv`` C library function is wrapped in the following Julia function\nin\n`env.jl <https://github.com/JuliaLang/julia/blob/master/base/env.jl>`_::\n\n    function getenv(var::AbstractString)\n      val = ccall((:getenv, \"libc\"),\n                  Ptr{UInt8}, (Ptr{UInt8},), var)\n      if val == C_NULL\n        error(\"getenv: undefined variable: \", var)\n      end\n      bytestring(val)\n    end\n\nThe C ``getenv`` function indicates an error by returning ``NULL``, but\nother standard C functions indicate errors in various different ways,\nincluding by returning -1, 0, 1 and other special values. This wrapper\nthrows an exception clearly indicating the problem if the caller tries\nto get a non-existent environment variable::\n\n    julia> getenv(\"SHELL\")\n    \"/bin/bash\"\n\n    julia> getenv(\"FOOBAR\")\n    getenv: undefined variable: FOOBAR\n\nHere is a slightly more complex example that discovers the local\nmachine's hostname::\n\n    function gethostname()\n      hostname = Array(UInt8, 128)\n      ccall((:gethostname, \"libc\"), Int32,\n            (Ptr{UInt8}, Csize_t),\n            hostname, sizeof(hostname))\n      hostname[end] = 0; # ensure null-termination\n      return bytestring(pointer(hostname))\n    end\n\nThis example first allocates an array of bytes, then calls the C library\nfunction ``gethostname`` to fill the array in with the hostname, takes a\npointer to the hostname buffer, and converts the pointer to a Julia\nstring, assuming that it is a NUL-terminated C string. It is common for\nC libraries to use this pattern of requiring the caller to allocate\nmemory to be passed to the callee and filled in. Allocation of memory\nfrom Julia like this is generally accomplished by creating an\nuninitialized array and passing a pointer to its data to the C function.\n\nCreating C-Compatible Julia Function Pointers\n---------------------------------------------\n\nIt is possible to pass Julia functions to native c-functions that accept\nfunction pointer arguments. For example, to match c-prototypes of the form::\n\n    typedef returntype (*functiontype)(argumenttype,...)\n\nThe function ``cfunction`` generates the c-compatible function pointer for\na call to a Julia library function.\nArguments to ``cfunction`` are as follows:\n\n1. A Julia Function\n\n2. Return type\n\n3. A tuple of input types\n\nA classic example is the standard C library ``qsort`` function,\ndeclared as::\n\n    void qsort(void *base, size_t nmemb, size_t size,\n               int(*compare)(const void *a, const void *b));\n\nThe ``base`` argument is a pointer to an array of length ``nmemb``, with elements of\n``size`` bytes each. ``compare`` is a callback function which takes pointers to two\nelements ``a`` and ``b`` and returns an integer less/greater than zero if ``a`` should\nappear before/after ``b`` (or zero if any order is permitted). Now, suppose that we\nhave a 1d array ``A`` of values in Julia that we want to sort using the ``qsort``\nfunction (rather than Julia's built-in ``sort`` function). Before we worry about calling\n``qsort`` and passing arguments, we need to write a comparison function that works for\nsome arbitrary type T::\n\n    function mycompare{T}(a::T, b::T)\n        return convert(Cint, a < b ? -1 : a > b ? +1 : 0)::Cint\n    end\n\nNotice that we have to be careful about the return type: ``qsort`` expects a function\nreturning a C ``int``, so we must be sure to return ``Cint`` via a call to ``convert``\nand a ``typeassert``.\n\nIn order to pass this function to C, we obtain its address using the function ``cfunction``::\n\n    const mycompare_c = cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}))\n\n``cfunction`` accepts three arguments: the Julia function (``mycompare``), the return\ntype (``Cint``), and a tuple of the argument types, in this case to sort an array of\n``Cdouble`` (Float64) elements.\n\nThe final call to ``qsort`` looks like this::\n\n    A = [1.3, -2.7, 4.4, 3.1]\n    ccall(:qsort, Void, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Void}),\n          A, length(A), sizeof(eltype(A)), mycompare_c)\n\nAfter this executes, ``A`` is changed to the sorted array ``[-2.7, 1.3, 3.1, 4.4]``.\nNote that Julia knows how to convert an array into a ``Ptr{Cdouble}``, how to compute\nthe size of a type in bytes (identical to C's ``sizeof`` operator), and so on.\nFor fun, try inserting a ``println(\"mycompare($a,$b)\")`` line into ``mycompare``, which\nwill allow you to see the comparisons that ``qsort`` is performing (and to verify that\nit is really calling the Julia function that you passed to it).\n\n\nMapping C Types to Julia\n------------------------\n\nIt is critical to exactly match the declared C type with its declaration\nin Julia. Inconsistencies can cause code that works correctly on one system\nto fail or produce indeterminate results on a different system.\n\nNote that no C header files are used anywhere in the process of calling C\nfunctions: you are responsible for making sure that your Julia types and\ncall signatures accurately reflect those in the C header file. (The `Clang\npackage <https://github.com/ihnorton/Clang.jl>`_ can be used to auto-generate\nJulia code from a C header file.)\n\nAuto-conversion:\n~~~~~~~~~~~~~~~~\n\nJulia automatically inserts calls to the ``convert`` function to convert\neach argument to the specified type. For example, the following call::\n\n    ccall((:foo, \"libfoo\"), Void, (Int32, Float64), x, y)\n\nwill behave as if the following were written::\n\n    ccall((:foo, \"libfoo\"), Void, (Int32, Float64),\n          Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),\n          Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))\n\n``cconvert`` normally just calls ``convert``, but can be defined to return\nan arbitrary new object more appropriate for passing to C. For example,\nthis is used to convert an ``Array`` of objects (e.g. strings) to an\narray of pointers.\n\n``unsafe_convert`` handles conversion to ``Ptr`` types. It is considered\nunsafe because converting an object to a native pointer can hide the object\nfrom the garbage collector, causing it to be freed prematurely.\n\nType Correspondences:\n~~~~~~~~~~~~~~~~~~~~~\n\nFirst, a review of some relevant Julia type terminology:\n\n.. rst-class:: text-wrap\n\n==============================  ==============================  ======================================================\nSyntax / Keyword                Example                         Description\n==============================  ==============================  ======================================================\n``type``                        ``ASCIIString``                 \"Leaf Type\" :: A group of related data that includes\n                                                                a type-tag, is managed by the Julia GC, and\n                                                                is defined by object-identity.\n                                                                The type parameters of a leaf type must be fully defined\n                                                                (no ``TypeVars`` are allowed)\n                                                                in order for the instance to be constructed.\n\n``abstract``                    ``Any``,                        \"Super Type\" :: A super-type (not a leaf-type)\n                                ``AbstractArray{T,N}``,         that cannot be instantiated, but can be used to\n                                ``Complex{T}``                  describe a group of types.\n\n``{T}``                         ``Vector{Int}``                 \"Type Parameter\" :: A specialization of a type\n                                                                (typically used for dispatch or storage optimization).\n\n                                                                \"TypeVar\" :: The ``T`` in the type parameter declaration\n                                                                is referred to as a TypeVar (short for type variable).\n\n``bitstype``                    ``Int``,                        \"Bits Type\" :: A type with no fields, but a size. It\n                                ``Float64``                     is stored and defined by-value.\n\n``immutable``                   ``Pair{Int,Int}``               \"Immutable\" :: A type with all fields defined to be\n                                                                constant. It is defined by-value. And may be stored\n                                                                with a type-tag.\n\n                                ``Complex128`` (``isbits``)     \"Is-Bits\" :: A ``bitstype``, or an ``immutable`` type\n                                                                where all fields are other ``isbits`` types. It is\n                                                                defined by-value, and is stored without a type-tag.\n\n``type ...; end``               ``nothing``                     \"Singleton\" :: a Leaf Type or Immutable with no fields.\n\n``(...)`` or ``tuple(...)```    ``(1,2,3)``                     \"Tuple\" :: an immutable data-structure similar to an\n                                                                anonymous immutable type, or a constant array.\n                                                                Represented as either an array or a struct.\n\n``typealias``                   Not applicable here             Type aliases, and other similar mechanisms of\n                                                                doing type indirection, are resolved to their base\n                                                                type (this includes assigning a type to another name,\n                                                                or getting the type out of a function call).\n==============================  ==============================  ======================================================\n\nBits Types:\n~~~~~~~~~~~\n\nThere are several special types to be aware of, as no other type can be defined to behave the same:\n\n``Float32``\n    Exactly corresponds to the ``float`` type in C (or ``REAL*4`` in Fortran).\n\n``Float64``\n    Exactly corresponds to the ``double`` type in C (or ``REAL*8`` in Fortran).\n\n``Complex64``\n    Exactly corresponds to the ``complex float`` type in C (or ``COMPLEX*8`` in Fortran).\n\n``Complex128``\n    Exactly corresponds to the ``complex double`` type in C (or ``COMPLEX*16`` in Fortran).\n\n``Signed``\n    Exactly corresponds to the ``signed`` type annotation in C (or any ``INTEGER`` type in Fortran). Any Julia type that is not a subtype of ``Signed`` is assumed to be unsigned.\n\n``Ref{T}``\n    Behaves like a ``Ptr{T}`` that owns its memory.\n\n``Array{T,N}``\n    When an array is passed to C as a ``Ptr{T}`` argument, it is\n    not reinterpret-cast: Julia requires that the element type of the\n    array matches ``T``, and the address of the first element is passed.\n\n    Therefore, if an ``Array`` contains data in the wrong format, it will\n    have to be explicitly converted using a call such as ``trunc(Int32,a)``.\n\n    To pass an array ``A`` as a pointer of a different type *without*\n    converting the data beforehand (for example, to pass a ``Float64`` array\n    to a function that operates on uninterpreted bytes), you can\n    declare the argument as ``Ptr{Void}``.\n\n    If an array of eltype ``Ptr{T}`` is passed as a ``Ptr{Ptr{T}}`` argument, the Julia base library\n    ``cconvert`` function will attempt to first make a null-terminated copy of the array with\n    each element replaced by its ``cconvert`` version. This allows, for example, passing an ``argv``\n    pointer array of type ``Vector{ByteString}`` to an argument of type ``Ptr{Ptr{Cchar}}``.\n\nOn all systems we currently support, basic C/C++ value types may be\ntranslated to Julia types as follows. Every C type also has a corresponding\nJulia type with the same name, prefixed by C. This can help for writing portable code (and remembering that an ``int`` in C is not the same as an ``Int`` in Julia).\n\n**System Independent:**\n\n.. rst-class:: text-wrap\n\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| C name                            | Fortran name    | Standard Julia Alias | Julia Base Type                   |\n+===================================+=================+======================+===================================+\n| ``unsigned char``                 | ``CHARACTER``   | ``Cuchar``           | ``UInt8``                         |\n|                                   |                 |                      |                                   |\n| ``bool`` (C++)                    |                 |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``short``                         | ``INTEGER*2``   | ``Cshort``           | ``Int16``                         |\n|                                   |                 |                      |                                   |\n|                                   | ``LOGICAL*2``   |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``unsigned short``                |                 | ``Cushort``          | ``UInt16``                        |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``int``                           | ``INTEGER*4``   | ``Cint``             | ``Int32``                         |\n|                                   |                 |                      |                                   |\n| ``BOOL`` (C, typical)             | ``LOGICAL*4``   |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``unsigned int``                  |                 | ``Cuint``            | ``UInt32``                        |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``long long``                     | ``INTEGER*8``   | ``Clonglong``        | ``Int64``                         |\n|                                   |                 |                      |                                   |\n|                                   | ``LOGICAL*8``   |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``unsigned long long``            |                 | ``Culonglong``       | ``UInt64``                        |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``intmax_t``                      |                 | ``Cintmax_t``        | ``Int64``                         |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``uintmax_t``                     |                 | ``Cuintmax_t``       | ``UInt64``                        |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``float``                         | ``REAL*4i``     | ``Cfloat``           | ``Float32``                       |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``double``                        | ``REAL*8``      | ``Cdouble``          | ``Float64``                       |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``complex float``                 | ``COMPLEX*8``   | ``Complex64``        | ``Complex{Float32}``              |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``complex double``                | ``COMPLEX*16``  | ``Complex128``       | ``Complex{Float64}``              |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``ptrdiff_t``                     |                 | ``Cptrdiff_t``       | ``Int``                           |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``ssize_t``                       |                 | ``Cssize_t``         | ``Int``                           |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``size_t``                        |                 | ``Csize_t``          | ``UInt``                          |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``void``                          |                 |                      | ``Void``                          |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``void*``                         |                 |                      | ``Ptr{Void}``                     |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``T*`` (where T represents an     |                 |                      | ``Ref{T}``                        |\n| appropriately defined type)       |                 |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``char*``                         | ``CHARACTER*N`` |                      | ``Cstring`` if NUL-terminated, or |\n| (or ``char[]``, e.g. a string)    |                 |                      | ``Ptr{UInt8}`` if not             |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``char**`` (or ``*char[]``)       |                 |                      | ``Ptr{Ptr{UInt8}}``               |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``jl_value_t*``                   |                 |                      | ``Any``                           |\n| (any Julia Type)                  |                 |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``jl_value_t**``                  |                 |                      | ``Ref{Any}``                      |\n| (a reference to a Julia Type)     |                 |                      |                                   |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``va_arg``                        |                 |                      | Not supported                     |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n| ``...``                           |                 |                      | ``T...`` (where ``T``             |\n| (variadic function specification) |                 |                      | is one of the above types,        |\n|                                   |                 |                      | variadic functions of different   |\n|                                   |                 |                      | argument types are not supported) |\n+-----------------------------------+-----------------+----------------------+-----------------------------------+\n\nThe ``Cstring`` type is essentially a synonym for ``Ptr{UInt8}``, except the conversion to ``Cstring`` throws an\nerror if the Julia string contains any embedded NUL characters (which would cause the string to be silently\ntruncated if the C routine treats NUL as the terminator).  If you are passing a ``char*`` to a C routine that\ndoes not assume NUL termination (e.g. because you pass an explicit string length), or if you know for certain that\nyour Julia string does not contain NUL and want to skip the check, you can use ``Ptr{UInt8}`` as the argument type.\n\n**System-dependent:**\n\n======================  ======================  =======\nC name                  Standard Julia Alias    Julia Base Type\n======================  ======================  =======\n``char``                ``Cchar``               ``Int8`` (x86, x86_64)\n\n                                                ``UInt8`` (powerpc, arm)\n\n``long``                ``Clong``               ``Int`` (UNIX)\n\n                                                ``Int32`` (Windows)\n\n``unsigned long``       ``Culong``              ``UInt`` (UNIX)\n\n                                                ``UInt32`` (Windows)\n\n``wchar_t``             ``Cwchar_t``            ``Int32`` (UNIX)\n\n                                                ``UInt16`` (Windows)\n======================  ======================  =======\n\n.. note::\n\n    When calling a Fortran function, all inputs must be passed by reference, so\n    all type correspondences above should contain an additional ``Ptr{..}`` or\n    ``Ref{..}`` wrapper around their type specification.\n\n.. warning::\n\n    For string arguments (``char*``) the Julia type should be ``Cstring`` (if NUL-\n    terminated data is expected) or either ``Ptr{Cchar}`` or ``Ptr{UInt8}``\n    otherwise (these two pointer types have the same effect), as described above,\n    not ``ASCIIString``. Similarly, for array arguments (``T[]`` or ``T*``), the\n    Julia type should again be ``Ptr{T}``, not ``Vector{T}``.\n\n.. warning::\n\n    Julia's ``Char`` type is 32 bits, which is not the same as the wide character\n    type (``wchar_t`` or ``wint_t``) on all platforms.\n\n.. note::\n\n    For ``wchar_t*`` arguments, the Julia type should be ``Cwstring`` (if the C\n    routine expects a NUL-terminated string) or ``Ptr{Cwchar_t}`` otherwise, and\n    data can be converted to/from ordinary Julia strings by the ``wstring(s)``\n    function (equivalent to either ``utf16(s)`` or ``utf32(s)`` depending upon the\n    width of ``Cwchar_t``); this conversion will be called automatically for\n    ``Cwstring`` arguments.    Note also that ASCII, UTF-8, UTF-16, and UTF-32\n    string data in Julia is internally NUL-terminated, so it can be passed to C\n    functions expecting NUL-terminated data without making a copy (but using the\n    ``Cwstring`` type will cause an error to be thrown if the string itself\n    contains NUL characters).\n\n.. note::\n\n    C functions that take an argument of the type ``char**`` can be called by\n    using a ``Ptr{Ptr{UInt8}}`` type within Julia. For example, C functions of the\n    form::\n\n        int main(int argc, char **argv);\n\n    can be called via the following Julia code::\n\n        argv = [ \"a.out\", \"arg1\", \"arg2\" ]\n        ccall(:main, Int32, (Int32, Ptr{Ptr{UInt8}}), length(argv), argv)\n\n.. note::\n\n    A C function declared to return ``Void`` will return the value ``nothing`` in\n    Julia.\n\nStruct Type correspondences\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nComposite types, aka ``struct`` in C or ``TYPE`` in Fortran90\n(or ``STRUCTURE`` / ``RECORD`` in some variants of F77),\ncan be mirrored in Julia by creating a ``type`` or ``immutable``\ndefinition with the same field layout.\n\nWhen used recursively, ``isbits`` types are stored inline.\nAll other types are stored as a pointer to the data.\nWhen mirroring a struct used by-value inside another struct in C,\nit is imperative that you do not attempt to manually copy the fields over,\nas this will not preserve the correct field alignment.\nInstead, declare an immutable isbits type and use that instead.\nUnnamed structs are not possible in the translation to Julia.\n\nPacked structs and union declarations are not supported by Julia.\n\nYou can get a near approximation of a ``union`` if you know, a priori,\nthe field that will have the greatest size (potentially including padding).\nWhen translating your fields to Julia, declare the Julia field to be only\nof that type.\n\nArrays of parameters must be expanded manually, currently\n(either inline, or in an immutable helper-type). For example::\n\n    in C:\n    struct B {\n        int A[3];\n    };\n    b_a_2 = B.A[2];\n\n    in Julia:\n    immutable B_A\n        A_1::Cint\n        A_2::Cint\n        A_3::Cint\n    end\n    type B\n        A::B_A\n    end\n    b_a_2 = B.A.(2)\n\nArrays of unknown size are not supported.\n\nIn the future, some of these restrictions may be reduced or eliminated.\n\nMemory Ownership:\n~~~~~~~~~~~~~~~~~\n\n**malloc/free**\n\nMemory allocation and deallocation of such objects must be\nhandled by calls to the appropriate cleanup routines in the libraries\nbeing used, just like in any C program. Do not try to free an object\nreceived from a C library with ``Libc.free`` in Julia, as this may result\nin the ``free`` function being called via the wrong ``libc`` library and\ncause Julia to crash. The reverse (passing an object allocated in Julia\nto be freed by an external library) is equally invalid.\n\n**Ptr{T} vs. Array{T} vs. Ref{T} vs. T**\n\nThe choice of type-wrapper declaration strongly depends on who allocated the memory,\nand the declared type.\nIn general, use ``T`` if the memory is intended to be allocated in\n(and managed by) Julia (with type-tag).\nUse ``Ptr{T}`` if the memory is expected to be populated by ``C`` (without type-tag).\nUse ``Ref{T}`` if you have an ``isbits`` type,\nbut you want to turn it into a pointer to a struct in another struct definition.\n\nSee issue #2818 for some work that needs to be done to simplify this so that Julia\ntypes can be used to recursively mirror c-style structs,\nwithout requiring as much manual management of the ``Ptr`` conversions.\nAfter #2818 is implemented, it will be true that an ``Vector{T}`` will be equivalent to\nan ``Ptr{Ptr{T}}``. That is currently not true, and the conversion must be explicitly.\n\nMapping C Functions to Julia\n----------------------------\n\nccall/cfunction argument translation guide\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor translating a ``c`` argument list to ``Julia``:\n\n* ``T``, where ``T`` is one of the primitive types:\n  ``char``, ``int``, ``long``, ``short``, ``float``, ``double``, ``complex``, ``enum``\n  or any of their ``typedef`` equivalents\n\n  + ``T``, where ``T`` is an equivalent Julia Bits Type (per the table above)\n  + if ``T`` is an ``enum``, the argument type should be equivalent to ``Cint`` or ``Cuint``\n  + argument value will be copied (passed by-value)\n\n* ``struct T`` (including typedef to a struct)\n\n  + ``T``, where ``T`` is a Julia Leaf Type\n  + argument value will be copied (passed by-value)\n\n* ``void*``\n\n  + depends on how this parameter is used, first translate this to the intended pointer type,\n    then determine the Julia equivalent using the remaining rules in this list\n  + this argument may be declared as ``Ptr{Void}``, if it really is just an unknown pointer\n\n* ``jl_value_t*``\n\n  + ``Any``\n  + argument value must be a valid Julia object\n  + currently unsupported by cfunction\n\n* ``jl_value_t**``\n\n  + ``Ref{Any}``\n  + argument value must be a valid Julia object (or ``C_NULL``)\n  + currently unsupported by cfunction\n\n* ``T*``\n\n  + ``Ref{T}``, where ``T`` is the Julia type corresponding to ``T``\n  + argument value will be copied if it is an ``isbits`` type\n    otherwise, the value must be a valid Julia object\n\n* ``(T*)(...)`` (e.g. a pointer to a function)\n\n  + ``Ptr{Void}`` (you may need to use ``cfunction`` explicitly to create this pointer)\n\n* ``...`` (e.g. a vararg)\n\n  + ``T...``, where ``T`` is the Julia type\n\n* ``va_arg``\n\n  + not supported\n\nccall/cfunction return type translation guide\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor translating a ``c`` return type to ``Julia``:\n\n* ``void``\n\n  + ``Void`` (this will return the singleton instance ``nothing::Void``)\n\n* ``T``, where ``T`` is one of the primitive types:\n  ``char``, ``int``, ``long``, ``short``, ``float``, ``double``, ``complex``, ``enum``\n  or any of their ``typedef`` equivalents\n\n  + ``T``, where ``T`` is an equivalent Julia Bits Type (per the table above)\n  + if ``T`` is an ``enum``, the argument type should be equivalent to ``Cint`` or ``Cuint``\n  + argument value will be copied (returned by-value)\n\n* ``struct T`` (including typedef to a struct)\n\n  + ``T``, where ``T`` is a Julia Leaf Type\n  + argument value will be copied (returned by-value)\n\n* ``void*``\n\n  + depends on how this parameter is used, first translate this to the intended pointer type,\n    then determine the Julia equivalent using the remaining rules in this list\n  + this argument may be declared as ``Ptr{Void}``, if it really is just an unknown pointer\n\n* ``jl_value_t*``\n\n  + ``Any``\n  + argument value must be a valid Julia object\n\n* ``jl_value_t**``\n\n  + ``Ref{Any}``\n  + argument value must be a valid Julia object (or ``C_NULL``)\n\n* ``T*``\n\n  + If the memory is already owned by Julia, or is an ``isbits`` type, and is known to be non-null:\n\n    + ``Ref{T}``, where ``T`` is the Julia type corresponding to ``T``\n    + a return type of ``Ref{Any}`` is invalid, it should either be ``Any``\n      (corresponding to ``jl_value_t*``) or ``Ptr{Any}`` (corresponding to ``Ptr{Any}``)\n    + currently partially unsupported by cfunction due to #2818\n    + C **MUST NOT** modify the memory returned via ``Ref{T}`` if ``T`` is an ``isbits`` type\n\n  + If the memory is owned by C:\n\n    + ``Ptr{T}``, where ``T`` is the Julia type corresponding to ``T``\n\n* ``(T*)(...)`` (e.g. a pointer to a function)\n\n  + ``Ptr{Void}`` (you may need to use ``cfunction`` explicitly to create this pointer)\n\nPassing Pointers for Modifying Inputs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBecause C doesn't support multiple return values,\noften C functions will take pointers to data that the function will modify.\nTo accomplish this within a ``ccall``,\nyou need to first encapsulate the value inside an ``Ref{T}`` of the appropriate type.\nWhen you pass this ``Ref`` object as an argument,\njulia will automatically pass a C pointer to the encapsulated data::\n\n    width = Ref{Cint}(0)\n    range = Ref{Cfloat}(0)\n    ccall(:foo, Void, (Ref{Cint}, Ref{Cfloat}), width, range)\n\nUpon return, the contents of ``width`` and ``range`` can be retrieved\n(if they were changed by ``foo``) by ``width[]`` and ``range[]``; that is,\nthey act like zero-dimensional arrays.\n\nSpecial Reference Syntax for ccall (deprecated):\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``&`` syntax is deprecated, use the ``Ref{T}`` argument type instead.\n\nA prefix ``&`` is used on an argument to ccall to indicate that a pointer\nto a scalar argument should be passed instead of the scalar value itself\n(required for all Fortran function arguments, as noted above). The following\nexample computes a dot product using a BLAS function.\n\n::\n\n    function compute_dot(DX::Vector{Float64}, DY::Vector{Float64})\n      assert(length(DX) == length(DY))\n      n = length(DX)\n      incx = incy = 1\n      product = ccall((:ddot_, \"libLAPACK\"),\n                      Float64,\n                      (Ptr{Int32}, Ptr{Float64}, Ptr{Int32}, Ptr{Float64}, Ptr{Int32}),\n                      &n, DX, &incx, DY, &incy)\n      return product\n    end\n\nThe meaning of prefix ``&`` is not quite the same as in C. In\nparticular, any changes to the referenced variables will not be\nvisible in Julia unless the type is mutable (declared via\n``type``). However, even for immutable types it will not cause any\nharm for called functions to attempt such modifications (that is,\nwriting through the passed pointers). Moreover, ``&`` may be used with\nany expression, such as ``&0`` or ``&f(x)``.\n\nWhen a scalar value is passed with ``&`` as an argument of type\n``Ptr{T}``, the value will first be converted to type ``T``.\n\n\nGarbage Collection Safety\n-------------------------\nWhen passing data to a ccall, it is best to avoid using the ``pointer()``\nfunction. Instead define a convert method and pass the variables directly to\nthe ccall. ccall automatically arranges that all of its arguments will be\npreserved from garbage collection until the call returns. If a C API will\nstore a reference to memory allocated by Julia, after the ccall returns, you\nmust arrange that the object remains visible to the garbage collector. The\nsuggested way to handle this is to make a global variable of type\n``Array{Ref,1}`` to hold these values, until the C library notifies you that\nit is finished with them.\n\nWhenever you have created a pointer to Julia data, you must ensure the original data\nexists until you are done with using the pointer. Many methods in Julia such as\n``unsafe_load()`` and ``bytestring()`` make copies of data instead of taking ownership\nof the buffer, so that it is safe to free (or alter) the original data without\naffecting Julia. A notable exception is ``pointer_to_array()`` which, for performance\nreasons, shares (or can be told to take ownership of) the underlying buffer.\n\nThe garbage collector does not guarantee any order of finalization. That is, if ``a``\ncontained a reference to ``b`` and both ``a`` and ``b`` are due for garbage\ncollection, there is no guarantee that ``b`` would be finalized after ``a``. If\nproper finalization of ``a`` depends on ``b`` being valid, it must be handled in\nother ways.\n\n\nNon-constant Function Specifications\n------------------------------------\n\nA ``(name, library)`` function specification must be a constant expression.\nHowever, it is possible to use computed values as function names by staging\nthrough ``eval`` as follows::\n\n    @eval ccall(($(string(\"a\",\"b\")),\"lib\"), ...\n\nThis expression constructs a name using ``string``, then substitutes this\nname into a new ``ccall`` expression, which is then evaluated. Keep in mind that\n``eval`` only operates at the top level, so within this expression local\nvariables will not be available (unless their values are substituted with\n``$``). For this reason, ``eval`` is typically only used to form top-level\ndefinitions, for example when wrapping libraries that contain many\nsimilar functions.\n\nIf your usage is more dynamic, use indirect calls as described in the next section.\n\n\nIndirect Calls\n--------------\n\nThe first argument to ``ccall`` can also be an expression evaluated at run time.\nIn this case, the expression must evaluate to a ``Ptr``,\nwhich will be used as the address of the native function to call.\nThis behavior occurs when the first ``ccall`` argument contains references to non-constants,\nsuch as local variables, function arguments, or non-constant globals.\n\nFor example, you might lookup the function via ``dlsym``,\nthen cache it in a global variable for that session. For example::\n\n    macro dlsym(func, lib)\n        z, zlocal = gensym(string(func)), gensym()\n        eval(current_module(),:(global $z = C_NULL))\n        z = esc(z)\n        quote\n            let $zlocal::Ptr{Void} = $z::Ptr{Void}\n                if $zlocal == C_NULL\n                   $zlocal = dlsym($(esc(lib))::Ptr{Void}, $(esc(func)))\n                   global $z = $zlocal\n                end\n                $zlocal\n            end\n        end\n    end\n\n    mylibvar = dlopen(\"mylib\")\n    ccall(@dlsym(\"myfunc\", mylibvar), Void, ())\n\n\nCalling Convention\n------------------\n\nThe second argument to ``ccall`` can optionally be a calling convention\nspecifier (immediately preceding return type). Without any specifier,\nthe platform-default C calling convention is used. Other supported\nconventions are: ``stdcall``, ``cdecl``, ``fastcall``, and ``thiscall``.\nFor example (from base/libc.jl) we see the same ``gethostname`` ccall as above,\nbut with the correct signature for Windows::\n\n    hn = Array(UInt8, 256)\n    err = ccall(:gethostname, stdcall, Int32, (Ptr{UInt8}, UInt32), hn, length(hn))\n\nFor more information, please see the `LLVM Language Reference`_.\n\n.. _LLVM Language Reference: http://llvm.org/docs/LangRef.html#calling-conventions\n\n\nAccessing Global Variables\n--------------------------\n\nGlobal variables exported by native libraries can be accessed by name using the\n``cglobal`` function. The arguments to ``cglobal`` are a symbol specification\nidentical to that used by ``ccall``, and a type describing the value stored in\nthe variable::\n\n    julia> cglobal((:errno,:libc), Int32)\n    Ptr{Int32} @0x00007f418d0816b8\n\nThe result is a pointer giving the address of the value. The value can be\nmanipulated through this pointer using ``unsafe_load`` and ``unsafe_store``.\n\n\nAccessing Data through a Pointer\n--------------------------------\nThe following methods are described as \"unsafe\" because a bad pointer\nor type declaration can cause Julia to terminate abruptly\n(although, that's quite alike with ccall).\n\nGiven a ``Ptr{T}``, the contents of type ``T`` can generally be copied from\nthe referenced memory into a Julia object using ``unsafe_load(ptr, [index])``.\nThe index argument is optional (default is 1),\nand follows the Julia-convention of 1-based indexing.\nThis function is intentionally similar to the behavior of ``getindex()`` and ``setindex!()``\n(e.g. ``[]`` access syntax).\n\nThe return value will be a new object initialized\nto contain a copy of the contents of the referenced memory.\nThe referenced memory can safely be freed or released.\n\nIf ``T`` is ``Any``, then the memory is assumed to contain a reference to\na Julia object (a ``jl_value_t*``), the result will be a reference to this object,\nand the object will not be copied. You must be careful in this case to ensure\nthat the object was always visible to the garbage collector (pointers do not\ncount, but the new reference does) to ensure the memory is not prematurely freed.\nNote that if the object was not originally allocated by Julia, the new object\nwill never be finalized by Julia's garbage collector.  If the ``Ptr`` itself\nis actually a ``jl_value_t*``, it can be converted back to a Julia object\nreference by ``unsafe_pointer_to_objref(ptr)``.  (Julia values ``v``\ncan be converted to ``jl_value_t*`` pointers, as ``Ptr{Void}``, by calling\n``pointer_from_objref(v)``.)\n\nThe reverse operation (writing data to a Ptr{T}), can be performed using\n``unsafe_store!(ptr, value, [index])``.  Currently, this is only supported\nfor bitstypes or other pointer-free (``isbits``) immutable types.\n\nAny operation that throws an error is probably currently unimplemented\nand should be posted as a bug so that it can be resolved.\n\nIf the pointer of interest is a plain-data array (bitstype or immutable), the\nfunction ``pointer_to_array(ptr,dims,[own])`` may be more useful. The final\nparameter should be true if Julia should \"take ownership\" of the underlying\nbuffer and call ``free(ptr)`` when the returned ``Array`` object is finalized.\nIf the ``own`` parameter is omitted or false, the caller must ensure the\nbuffer remains in existence until all access is complete.\n\nArithmetic on the ``Ptr`` type in Julia (e.g. using ``+``) does not behave the\nsame as C's pointer arithmetic. Adding an integer to a ``Ptr`` in Julia always\nmoves the pointer by some number of *bytes*, not elements. This way, the\naddress values obtained from pointer arithmetic do not depend on the\nelement types of pointers.\n\n\nThread-safety\n-------------\n\nSome C libraries execute their callbacks from a different thread, and\nsince Julia isn't thread-safe you'll need to take some extra\nprecautions. In particular, you'll need to set up a two-layered\nsystem: the C callback should only *schedule* (via Julia's event loop)\nthe execution of your \"real\" callback. To do this, you pass a function\nof one argument (the ``AsyncWork`` object for which the event was\ntriggered, which you'll probably just ignore) to ``SingleAsyncWork``::\n\n  cb = Base.SingleAsyncWork(data -> my_real_callback(args))\n\nThe callback you pass to C should only execute a ``ccall`` to\n``:uv_async_send``, passing ``cb.handle`` as the argument.\n\nMore About Callbacks\n--------------------\n\nFor more details on how to pass callbacks to C libraries, see this\n`blog post <http://julialang.org/blog/2013/05/callback>`_.\n\nC++\n---\n\nLimited support for C++ is provided by the `Cpp <https://github.com/timholy/Cpp.jl>`_,\n`Clang <https://github.com/ihnorton/Clang.jl>`_, and `Cxx <https://github.com/Keno/Cxx.jl>`_ packages.\n\nHandling Operating System Variation\n-----------------------------------\n\nWhen dealing with platform libraries, it is often necessary to provide special cases\nfor various platforms. The variable ``OS_NAME`` can be used to write these special\ncases. Additionally, there are several macros intended to make this easier:\n``@windows``, ``@unix``, ``@linux``, and ``@osx``. Note that linux and osx are mutually\nexclusive subsets of unix. Their usage takes the form of a ternary conditional\noperator, as demonstrated in the following examples.\n\nSimple blocks::\n\n    ccall( (@windows? :_fopen : :fopen), ...)\n\nComplex blocks::\n\n    @linux? (\n             begin\n                 some_complicated_thing(a)\n             end\n           : begin\n                 some_different_thing(a)\n             end\n           )\n\nChaining (parentheses optional, but recommended for readability)::\n\n    @windows? :a : (@osx? :b : :c)\n\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/contrib/build_sysimg.jl": "#!/usr/bin/env julia\n# This file is a part of Julia. License is MIT: http://julialang.org/license\n\n# Build a system image binary at sysimg_path.dlext. Allow insertion of a userimg via\n# userimg_path.  If sysimg_path.dlext is currently loaded into memory, don't continue\n# unless force is set to true.  Allow targeting of a CPU architecture via cpu_target\n@unix_only function default_sysimg_path(debug=false)\n    splitext(Libdl.dlpath(debug ? \"sys-debug\" : \"sys\"))[1]\nend\n\n@windows_only function default_sysimg_path(debug=false)\n    joinpath(JULIA_HOME, \"..\", \"lib\", \"julia\", debug ? \"sys-debug\" : \"sys\")\nend\n\nfunction build_sysimg(sysimg_path=nothing, cpu_target=\"native\", userimg_path=nothing; force=false, debug=false)\n    if sysimg_path == nothing\n        sysimg_path = default_sysimg_path(debug)\n    end\n\n    # Quit out if a sysimg is already loaded and is in the same spot as sysimg_path, unless forcing\n    sysimg = Libdl.dlopen_e(\"sys\")\n    if sysimg != C_NULL\n        if !force && Base.samefile(Libdl.dlpath(sysimg), \"$(sysimg_path).$(Libdl.dlext)\")\n            info(\"System image already loaded at $(Libdl.dlpath(sysimg)), set force to override\")\n            return\n        end\n    end\n\n    # Canonicalize userimg_path before we enter the base_dir\n    if userimg_path != nothing\n        userimg_path = abspath(userimg_path)\n    end\n\n    # Enter base/ and setup some useful paths\n    base_dir = dirname(Base.find_source_file(\"sysimg.jl\"))\n    cd(base_dir) do\n        julia = joinpath(JULIA_HOME, debug ? \"julia-debug\" : \"julia\")\n        cc = find_system_compiler()\n\n        # Ensure we have write-permissions to wherever we're trying to write to\n        try\n            touch(\"$sysimg_path.ji\")\n        catch\n            err_msg =  \"Unable to modify $sysimg_path.ji, ensure parent directory exists \"\n            err_msg *= \"and is writable. Absolute paths work best.)\"\n            error( err_msg )\n        end\n\n        # Copy in userimg.jl if it exists...\n        if userimg_path != nothing\n            if !isfile(userimg_path)\n                error(\"$userimg_path is not found, ensure it is an absolute path!\")\n            end\n            if isfile(\"userimg.jl\")\n                error(\"$base_dir/userimg.jl already exists, delete manually to continue.\")\n            end\n            cp(userimg_path, \"userimg.jl\")\n        end\n        try\n            # Start by building inference0.{ji,o}\n            inference0_path = joinpath(dirname(sysimg_path), \"inference0\")\n            info(\"Building inference0.o...\")\n            println(\"$julia -C $cpu_target --output-ji $inference0_path.ji --output-o $inference0_path.o coreimg.jl\")\n            run(`$julia -C $cpu_target --output-ji $inference0_path.ji --output-o $inference0_path.o coreimg.jl`)\n\n            # Bootstrap off off that to create inference.{ji,o}\n            inference_path = joinpath(dirname(sysimg_path), \"inference\")\n            info(\"Building inference.o...\")\n            println(\"$julia -C $cpu_target --output-ji $inference_path.ji --output-o $inference_path.o coreimg.jl\")\n            run(`$julia -C $cpu_target --output-ji $inference_path.ji --output-o $inference_path.o coreimg.jl`)\n\n            # Bootstrap off off that to create sys.{ji,o}\n            info(\"Building sys.o...\")\n            println(\"$julia -C $cpu_target --output-ji $sysimg_path.ji --output-o $sysimg_path.o -J $inference_path.ji --startup-file=no sysimg.jl\")\n            run(`$julia -C $cpu_target --output-ji $sysimg_path.ji --output-o $sysimg_path.o -J $inference_path.ji --startup-file=no sysimg.jl`)\n\n            if cc != nothing\n                link_sysimg(sysimg_path, cc, debug)\n            else\n                info(\"System image successfully built at $sysimg_path.ji\")\n            end\n\n            if !Base.samefile(\"$(default_sysimg_path(debug)).ji\", \"$sysimg_path.ji\")\n                if Base.isfile(\"$sysimg_path.$(Libdl.dlext)\")\n                    info(\"To run Julia with this image loaded, run: julia -J $sysimg_path.$(Libdl.dlext)\")\n                else\n                    info(\"To run Julia with this image loaded, run: julia -J $sysimg_path.ji\")\n                end\n            else\n                info(\"Julia will automatically load this system image at next startup\")\n            end\n        finally\n            # Cleanup userimg.jl\n            if userimg_path != nothing && isfile(\"userimg.jl\")\n                rm(\"userimg.jl\")\n            end\n        end\n    end\nend\n\n# Search for a compiler to link sys.o into sys.dl_ext.  Honor LD environment variable.\nfunction find_system_compiler()\n    if haskey( ENV, \"CC\" )\n        if !success(`$(ENV[\"CC\"]) -v`)\n            warn(\"Using compiler override $(ENV[\"CC\"]), but unable to run `$(ENV[\"CC\"]) -v`\")\n        end\n        return ENV[\"CC\"]\n    end\n\n    # On Windows, check to see if WinRPM is installed, and if so, see if gcc is installed\n    @windows_only try\n        eval(Main, :(using WinRPM))\n        winrpmgcc = joinpath(WinRPM.installdir,\"usr\",\"$(Sys.ARCH)-w64-mingw32\",\n            \"sys-root\",\"mingw\",\"bin\",\"gcc.exe\")\n        if success(`$winrpmgcc --version`)\n            return winrpmgcc\n        else\n            throw()\n        end\n    catch\n        warn(\"Install GCC via `Pkg.add(\\\"WinRPM\\\"); WinRPM.install(\\\"gcc\\\")` to generate sys.dll for faster startup times\")\n    end\n\n\n    # See if `cc` exists\n    try\n        if success(`cc -v`)\n            return \"cc\"\n        end\n    end\n\n    warn( \"No supported compiler found; startup times will be longer\" )\nend\n\n# Link sys.o into sys.$(dlext)\nfunction link_sysimg(sysimg_path=nothing, cc=find_system_compiler(), debug=false)\n    if sysimg_path == nothing\n        sysimg_path = default_sysimg_path(debug)\n    end\n    julia_libdir = dirname(Libdl.dlpath(debug ? \"libjulia-debug\" : \"libjulia\"))\n\n    FLAGS = [\"-L$julia_libdir\"]\n\n    push!(FLAGS, \"-shared\")\n    push!(FLAGS, debug ? \"-ljulia-debug\" : \"-ljulia\")\n    @windows_only push!(FLAGS, \"-lssp\")\n\n    info(\"Linking sys.$(Libdl.dlext)\")\n    run(`$cc $FLAGS -o $sysimg_path.$(Libdl.dlext) $sysimg_path.o`)\n\n    info(\"System image successfully built at $sysimg_path.$(Libdl.dlext)\")\nend\n\n# When running this file as a script, try to do so with default values.  If arguments are passed\n# in, use them as the arguments to build_sysimg above\nif !isinteractive()\n    if length(ARGS) > 5 || (\"--help\" in ARGS || \"-h\" in ARGS)\n        println(\"Usage: build_sysimg.jl <sysimg_path> <cpu_target> <usrimg_path.jl> [--force] [--debug] [--help]\")\n        println(\"   <sysimg_path>    is an absolute, extensionless path to store the system image at\")\n        println(\"   <cpu_target>     is an LLVM cpu target to build the system image against\")\n        println(\"   <usrimg_path.jl> is the path to a user image to be baked into the system image\")\n        println(\"   --debug          Using julia-debug instead of julia to build the system image\")\n        println(\"   --force          Set if you wish to overwrite the default system image\")\n        println(\"   --help           Print out this help text and exit\")\n        println()\n        println(\" Example:\")\n        println(\"   build_sysimg.jl /usr/local/lib/julia/sys core2 ~/my_usrimg.jl --force\")\n        println()\n        println(\" Running this script with no arguments is equivalent to:\")\n        println(\"   build_sysimg.jl $(default_sysimg_path()) native\")\n        return 0\n    end\n\n    debug_flag = \"--debug\" in ARGS\n    filter!(x -> x != \"--debug\", ARGS)\n    force_flag = \"--force\" in ARGS\n    filter!(x -> x != \"--force\", ARGS)\n    build_sysimg(ARGS...; force=force_flag, debug=debug_flag)\nend\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/contrib/BBEditTextWrangler-julia.plist": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n\t\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n\n<plist version=\"1.0\">\n\n<!--\n      Julia codeless language module for BBEdit and TextWrangler text editors\n\n      version of 2014-09-10 20:17:45\n\n-->\n\n<dict>\n\t<key>BBEditDocumentType</key>\n\t<string>CodelessLanguageModule</string>\n\n\t<key>BBLMLanguageDisplayName</key>\n\t<string>Julia</string>\n\n\t<key>BBLMLanguageCode</key>\n\t<string>Jul!</string>\n\n\t<key>BBLMSuffixMap</key>\n\t<array>\n\t\t<dict>\n    \t\t<key>BBLMLanguageSuffix</key>\n    \t\t<string>.jl</string>\n\t\t</dict>\n\t</array>\n\n\t<key>BBLMColorsSyntax</key>\n\t<true/>\n\n\t<key>BBLMScansFunctions</key>\n    <true/>\n\n    <key>BBLMKeywordList</key>\n      <array>\n      <!-- these reserved words from julia-parser.scm added by hand -->\n            <string>abstract</string>\n            <string>baremodule</string>\n            <string>begin</string>\n            <string>bitstype</string>\n            <string>break</string>\n            <string>ccall</string>\n            <string>const</string>\n            <string>continue</string>\n            <string>do</string>\n            <string>else</string>\n            <string>elseif</string>\n            <string>end</string>\n            <string>export</string>\n            <string>for</string>\n            <string>function</string>\n            <string>global</string>\n            <string>if</string>\n            <string>immutable</string>\n            <string>import</string>\n            <string>importall</string>\n            <string>let</string>\n            <string>local</string>\n            <string>macro</string>\n            <string>module</string>\n            <string>quote</string>\n            <string>return</string>\n            <string>try</string>\n            <string>type</string>\n            <string>typealias</string>\n            <string>using</string>\n            <string>while</string>\n\n      <!-- dunno where this one is defined, added by hand -->\n\n            <string>typeof</string>\n\n      <!-- these generated from names(Base) -->\n              <string>@MIME</string>\n              <string>@MIME_str</string>\n              <string>@__FILE__</string>\n              <string>@allocated</string>\n              <string>@assert</string>\n              <string>@async</string>\n              <string>@b_str</string>\n              <string>@bigint_str</string>\n              <string>@boundscheck</string>\n              <string>@cmd</string>\n              <string>@code_llvm</string>\n              <string>@code_lowered</string>\n              <string>@code_native</string>\n              <string>@code_typed</string>\n              <string>@deprecate</string>\n              <string>@edit</string>\n              <string>@elapsed</string>\n              <string>@eval</string>\n              <string>@evalpoly</string>\n              <string>@everywhere</string>\n              <string>@fetch</string>\n              <string>@fetchfrom</string>\n              <string>@gensym</string>\n              <string>@goto</string>\n              <string>@inbounds</string>\n              <string>@int128_str</string>\n              <string>@ip_str</string>\n              <string>@label</string>\n              <string>@less</string>\n              <string>@linux</string>\n              <string>@linux_only</string>\n              <string>@non_windowsxp_only</string>\n              <string>@osx</string>\n              <string>@osx_only</string>\n              <string>@parallel</string>\n              <string>@printf</string>\n              <string>@profile</string>\n              <string>@r_str</string>\n              <string>@schedule</string>\n              <string>@show</string>\n              <string>@simd</string>\n              <string>@spawn</string>\n              <string>@spawnat</string>\n              <string>@sprintf</string>\n              <string>@sync</string>\n              <string>@task</string>\n              <string>@thunk</string>\n              <string>@time</string>\n              <string>@timed</string>\n              <string>@uint128_str</string>\n              <string>@unexpected</string>\n              <string>@unix</string>\n              <string>@unix_only</string>\n              <string>@v_str</string>\n              <string>@vectorize_1arg</string>\n              <string>@vectorize_2arg</string>\n              <string>@which</string>\n              <string>@windows</string>\n              <string>@windows_only</string>\n              <string>@windowsxp_only</string>\n              <string>A_ldiv_B!</string>\n              <string>A_ldiv_Bc</string>\n              <string>A_ldiv_Bt</string>\n              <string>A_mul_B!</string>\n              <string>A_mul_Bc</string>\n              <string>A_mul_Bc!</string>\n              <string>A_mul_Bt</string>\n              <string>A_mul_Bt!</string>\n              <string>A_rdiv_Bc</string>\n              <string>A_rdiv_Bt</string>\n              <string>Ac_ldiv_B</string>\n              <string>Ac_ldiv_Bc</string>\n              <string>Ac_mul_B</string>\n              <string>Ac_mul_B!</string>\n              <string>Ac_mul_Bc</string>\n              <string>Ac_mul_Bc!</string>\n              <string>Ac_rdiv_B</string>\n              <string>Ac_rdiv_Bc</string>\n              <string>At_ldiv_B</string>\n              <string>At_ldiv_Bt</string>\n              <string>At_mul_B</string>\n              <string>At_mul_B!</string>\n              <string>At_mul_Bt</string>\n              <string>At_mul_Bt!</string>\n              <string>At_rdiv_B</string>\n              <string>At_rdiv_Bt</string>\n              <string>PipeBuffer</string>\n              <string>abs</string>\n              <string>abs2</string>\n              <string>abspath</string>\n              <string>accept</string>\n              <string>acos</string>\n              <string>acosd</string>\n              <string>acosh</string>\n              <string>acot</string>\n              <string>acotd</string>\n              <string>acoth</string>\n              <string>acsc</string>\n              <string>acscd</string>\n              <string>acsch</string>\n              <string>addprocs</string>\n              <string>airy</string>\n              <string>airyai</string>\n              <string>airyaiprime</string>\n              <string>airybi</string>\n              <string>airybiprime</string>\n              <string>airyprime</string>\n              <string>airyx</string>\n              <string>all</string>\n              <string>all!</string>\n              <string>angle</string>\n              <string>any</string>\n              <string>any!</string>\n              <string>append!</string>\n              <string>ascii</string>\n              <string>asec</string>\n              <string>asecd</string>\n              <string>asech</string>\n              <string>asin</string>\n              <string>asind</string>\n              <string>asinh</string>\n              <string>assert</string>\n              <string>atan</string>\n              <string>atan2</string>\n              <string>atand</string>\n              <string>atanh</string>\n              <string>atexit</string>\n              <string>backtrace</string>\n              <string>base</string>\n              <string>base64</string>\n              <string>basename</string>\n              <string>beginswith</string>\n              <string>besselh</string>\n              <string>besseli</string>\n              <string>besselix</string>\n              <string>besselj</string>\n              <string>besselj0</string>\n              <string>besselj1</string>\n              <string>besseljx</string>\n              <string>besselk</string>\n              <string>besselkx</string>\n              <string>bessely</string>\n              <string>bessely0</string>\n              <string>bessely1</string>\n              <string>besselyx</string>\n              <string>beta</string>\n              <string>bfft</string>\n              <string>bfft!</string>\n              <string>big</string>\n              <string>bin</string>\n              <string>bind</string>\n              <string>binomial</string>\n              <string>bitbroadcast</string>\n              <string>bitmix</string>\n              <string>bitpack</string>\n              <string>bits</string>\n              <string>bitunpack</string>\n              <string>bkfact</string>\n              <string>bkfact!</string>\n              <string>blas_set_num_threads</string>\n              <string>blkdiag</string>\n              <string>bool</string>\n              <string>brfft</string>\n              <string>broadcast</string>\n              <string>broadcast!</string>\n              <string>broadcast!_function</string>\n              <string>broadcast_function</string>\n              <string>broadcast_getindex</string>\n              <string>broadcast_setindex!</string>\n              <string>bswap</string>\n              <string>bytes2hex</string>\n              <string>bytestring</string>\n              <string>c_calloc</string>\n              <string>c_free</string>\n              <string>c_malloc</string>\n              <string>c_realloc</string>\n              <string>cartesianmap</string>\n              <string>cat</string>\n              <string>catch_backtrace</string>\n              <string>cbrt</string>\n              <string>cd</string>\n              <string>ceil</string>\n              <string>cell</string>\n              <string>cfunction</string>\n              <string>char</string>\n              <string>charwidth</string>\n              <string>checkbounds</string>\n              <string>chol</string>\n              <string>cholfact</string>\n              <string>cholfact!</string>\n              <string>chomp</string>\n              <string>chop</string>\n              <string>chr2ind</string>\n              <string>circshift</string>\n              <string>cis</string>\n              <string>clamp</string>\n              <string>clear_malloc_data</string>\n              <string>clipboard</string>\n              <string>close</string>\n              <string>cmp</string>\n              <string>code_llvm</string>\n              <string>code_lowered</string>\n              <string>code_native</string>\n              <string>code_typed</string>\n              <string>collect</string>\n              <string>colon</string>\n              <string>combinations</string>\n              <string>complement</string>\n              <string>complement!</string>\n              <string>complex</string>\n              <string>complex128</string>\n              <string>complex32</string>\n              <string>complex64</string>\n              <string>cond</string>\n              <string>condskeel</string>\n              <string>conj</string>\n              <string>conj!</string>\n              <string>connect</string>\n              <string>consume</string>\n              <string>contains</string>\n              <string>conv</string>\n              <string>conv2</string>\n              <string>convert</string>\n              <string>copy</string>\n              <string>copy!</string>\n              <string>copysign</string>\n              <string>cor</string>\n              <string>cos</string>\n              <string>cosc</string>\n              <string>cosd</string>\n              <string>cosh</string>\n              <string>cospi</string>\n              <string>cot</string>\n              <string>cotd</string>\n              <string>coth</string>\n              <string>count</string>\n              <string>count_ones</string>\n              <string>count_zeros</string>\n              <string>countlines</string>\n              <string>countnz</string>\n              <string>cov</string>\n              <string>cp</string>\n              <string>cross</string>\n              <string>csc</string>\n              <string>cscd</string>\n              <string>csch</string>\n              <string>ctime</string>\n              <string>ctranspose</string>\n              <string>cummax</string>\n              <string>cummin</string>\n              <string>cumprod</string>\n              <string>cumprod!</string>\n              <string>cumsum</string>\n              <string>cumsum!</string>\n              <string>cumsum_kbn</string>\n              <string>current_module</string>\n              <string>current_task</string>\n              <string>dawson</string>\n              <string>dct</string>\n              <string>dct!</string>\n              <string>dec</string>\n              <string>deconv</string>\n              <string>deepcopy</string>\n              <string>deg2rad</string>\n              <string>degrees2radians</string>\n              <string>delete!</string>\n              <string>deleteat!</string>\n              <string>den</string>\n              <string>dense</string>\n              <string>deserialize</string>\n              <string>det</string>\n              <string>detach</string>\n              <string>dfill</string>\n              <string>diag</string>\n              <string>diagind</string>\n              <string>diagm</string>\n              <string>diff</string>\n              <string>digamma</string>\n              <string>digits</string>\n              <string>dirname</string>\n              <string>disable_sigint</string>\n              <string>display</string>\n              <string>displayable</string>\n              <string>distribute</string>\n              <string>div</string>\n              <string>divrem</string>\n              <string>dlclose</string>\n              <string>dlopen</string>\n              <string>dlopen_e</string>\n              <string>dlsym</string>\n              <string>dlsym_e</string>\n              <string>done</string>\n              <string>dones</string>\n              <string>dot</string>\n              <string>download</string>\n              <string>drand</string>\n              <string>drandn</string>\n              <string>dump</string>\n              <string>dzeros</string>\n              <string>eachline</string>\n              <string>eachmatch</string>\n              <string>edit</string>\n              <string>eig</string>\n              <string>eigfact</string>\n              <string>eigfact!</string>\n              <string>eigmax</string>\n              <string>eigmin</string>\n              <string>eigs</string>\n              <string>eigvals</string>\n              <string>eigvecs</string>\n              <string>eltype</string>\n              <string>empty!</string>\n              <string>endof</string>\n              <string>endswith</string>\n              <string>enumerate</string>\n              <string>eof</string>\n              <string>eps</string>\n              <string>erf</string>\n              <string>erfc</string>\n              <string>erfcinv</string>\n              <string>erfcx</string>\n              <string>erfi</string>\n              <string>erfinv</string>\n              <string>errno</string>\n              <string>error</string>\n              <string>esc</string>\n              <string>escape_string</string>\n              <string>eta</string>\n              <string>etree</string>\n              <string>evalfile</string>\n              <string>exit</string>\n              <string>exp</string>\n              <string>exp10</string>\n              <string>exp2</string>\n              <string>expand</string>\n              <string>expanduser</string>\n              <string>expm</string>\n              <string>expm1</string>\n              <string>exponent</string>\n              <string>extrema</string>\n              <string>eye</string>\n              <string>factor</string>\n              <string>factorial</string>\n              <string>factorize</string>\n              <string>falses</string>\n              <string>fd</string>\n              <string>fdio</string>\n              <string>fetch</string>\n              <string>fft</string>\n              <string>fft!</string>\n              <string>fftshift</string>\n              <string>fieldoffsets</string>\n              <string>filemode</string>\n              <string>filesize</string>\n              <string>fill</string>\n              <string>fill!</string>\n              <string>filt</string>\n              <string>filt!</string>\n              <string>filter</string>\n              <string>filter!</string>\n              <string>finalizer</string>\n              <string>find</string>\n              <string>find_library</string>\n              <string>findfirst</string>\n              <string>findin</string>\n              <string>findmax</string>\n              <string>findmin</string>\n              <string>findn</string>\n              <string>findnext</string>\n              <string>findnz</string>\n              <string>first</string>\n              <string>fld</string>\n              <string>flipbits!</string>\n              <string>flipdim</string>\n              <string>fliplr</string>\n              <string>flipsign</string>\n              <string>flipud</string>\n              <string>float</string>\n              <string>float16</string>\n              <string>float32</string>\n              <string>float32_isvalid</string>\n              <string>float64</string>\n              <string>float64_isvalid</string>\n              <string>floor</string>\n              <string>flush</string>\n              <string>flush_cstdio</string>\n              <string>foldl</string>\n              <string>foldr</string>\n              <string>frexp</string>\n              <string>full</string>\n              <string>fullname</string>\n              <string>functionloc</string>\n              <string>functionlocs</string>\n              <string>gamma</string>\n              <string>gc</string>\n              <string>gc_disable</string>\n              <string>gc_enable</string>\n              <string>gcd</string>\n              <string>gcdx</string>\n              <string>gensym</string>\n              <string>get</string>\n              <string>get!</string>\n              <string>get_bigfloat_precision</string>\n              <string>get_bigfloat_rounding</string>\n              <string>get_rounding</string>\n              <string>getaddrinfo</string>\n              <string>gethostname</string>\n              <string>getindex</string>\n              <string>getipaddr</string>\n              <string>getkey</string>\n              <string>getpid</string>\n              <string>givens</string>\n              <string>gperm</string>\n              <string>gradient</string>\n              <string>hankelh1</string>\n              <string>hankelh1x</string>\n              <string>hankelh2</string>\n              <string>hankelh2x</string>\n              <string>hash</string>\n              <string>haskey</string>\n              <string>hcat</string>\n              <string>hessfact</string>\n              <string>hessfact!</string>\n              <string>hex</string>\n              <string>hex2bytes</string>\n              <string>hex2num</string>\n              <string>hist</string>\n              <string>hist2d</string>\n              <string>histrange</string>\n              <string>homedir</string>\n              <string>htol</string>\n              <string>hton</string>\n              <string>hvcat</string>\n              <string>hypot</string>\n              <string>iceil</string>\n              <string>idct</string>\n              <string>idct!</string>\n              <string>identity</string>\n              <string>ifelse</string>\n              <string>ifft</string>\n              <string>ifft!</string>\n              <string>ifftshift</string>\n              <string>ifloor</string>\n              <string>ignorestatus</string>\n              <string>imag</string>\n              <string>in</string>\n              <string>include</string>\n              <string>include_string</string>\n              <string>ind2chr</string>\n              <string>ind2sub</string>\n              <string>indexin</string>\n              <string>indexpids</string>\n              <string>indmax</string>\n              <string>indmin</string>\n              <string>inf</string>\n              <string>info</string>\n              <string>infs</string>\n              <string>insert!</string>\n              <string>int</string>\n              <string>int128</string>\n              <string>int16</string>\n              <string>int32</string>\n              <string>int64</string>\n              <string>int8</string>\n              <string>integer</string>\n              <string>interrupt</string>\n              <string>intersect</string>\n              <string>intersect!</string>\n              <string>inv</string>\n              <string>invdigamma</string>\n              <string>invmod</string>\n              <string>invperm</string>\n              <string>ipermute!</string>\n              <string>ipermutedims</string>\n              <string>irfft</string>\n              <string>iround</string>\n              <string>is_assigned_char</string>\n              <string>is_valid_ascii</string>\n              <string>is_valid_char</string>\n              <string>is_valid_utf16</string>\n              <string>is_valid_utf8</string>\n              <string>isabspath</string>\n              <string>isalnum</string>\n              <string>isalpha</string>\n              <string>isapprox</string>\n              <string>isascii</string>\n              <string>isbits</string>\n              <string>isblank</string>\n              <string>isblockdev</string>\n              <string>ischardev</string>\n              <string>iscntrl</string>\n              <string>isconst</string>\n              <string>isdigit</string>\n              <string>isdir</string>\n              <string>isdirpath</string>\n              <string>iseltype</string>\n              <string>isempty</string>\n              <string>isequal</string>\n              <string>iseven</string>\n              <string>isexecutable</string>\n              <string>isfifo</string>\n              <string>isfile</string>\n              <string>isfinite</string>\n              <string>isgeneric</string>\n              <string>isgraph</string>\n              <string>ishermitian</string>\n              <string>isimmutable</string>\n              <string>isinf</string>\n              <string>isinteger</string>\n              <string>isinteractive</string>\n              <string>isleaftype</string>\n              <string>isless</string>\n              <string>islink</string>\n              <string>islower</string>\n              <string>ismarked</string>\n              <string>ismatch</string>\n              <string>isnan</string>\n              <string>isodd</string>\n              <string>isopen</string>\n              <string>ispath</string>\n              <string>isperm</string>\n              <string>isposdef</string>\n              <string>isposdef!</string>\n              <string>ispow2</string>\n              <string>isprime</string>\n              <string>isprint</string>\n              <string>ispunct</string>\n              <string>isqrt</string>\n              <string>isreadable</string>\n              <string>isreadonly</string>\n              <string>isready</string>\n              <string>isreal</string>\n              <string>issetgid</string>\n              <string>issetuid</string>\n              <string>issocket</string>\n              <string>issorted</string>\n              <string>isspace</string>\n              <string>issparse</string>\n              <string>issticky</string>\n              <string>issubnormal</string>\n              <string>issubset</string>\n              <string>issym</string>\n              <string>istaskdone</string>\n              <string>istext</string>\n              <string>istril</string>\n              <string>istriu</string>\n              <string>isupper</string>\n              <string>isvalid</string>\n              <string>iswritable</string>\n              <string>isxdigit</string>\n              <string>itrunc</string>\n              <string>join</string>\n              <string>joinpath</string>\n              <string>keys</string>\n              <string>kill</string>\n              <string>kron</string>\n              <string>last</string>\n              <string>lbeta</string>\n              <string>lcfirst</string>\n              <string>lcm</string>\n              <string>ldexp</string>\n              <string>ldltfact</string>\n              <string>ldltfact!</string>\n              <string>leading_ones</string>\n              <string>leading_zeros</string>\n              <string>length</string>\n              <string>less</string>\n              <string>lexcmp</string>\n              <string>lexless</string>\n              <string>lfact</string>\n              <string>lgamma</string>\n              <string>linrange</string>\n              <string>linreg</string>\n              <string>linspace</string>\n              <string>listen</string>\n              <string>listenany</string>\n              <string>localindexes</string>\n              <string>localpart</string>\n              <string>log</string>\n              <string>log10</string>\n              <string>log1p</string>\n              <string>log2</string>\n              <string>logdet</string>\n              <string>logspace</string>\n              <string>lowercase</string>\n              <string>lpad</string>\n              <string>lstat</string>\n              <string>lstrip</string>\n              <string>ltoh</string>\n              <string>lu</string>\n              <string>lufact</string>\n              <string>lufact!</string>\n              <string>lyap</string>\n              <string>macroexpand</string>\n              <string>map</string>\n              <string>map!</string>\n              <string>mapreduce</string>\n              <string>mapslices</string>\n              <string>mark</string>\n              <string>match</string>\n              <string>matchall</string>\n              <string>max</string>\n              <string>maxabs</string>\n              <string>maxabs!</string>\n              <string>maximum</string>\n              <string>maximum!</string>\n              <string>maxintfloat</string>\n              <string>mean</string>\n              <string>mean!</string>\n              <string>median</string>\n              <string>median!</string>\n              <string>merge</string>\n              <string>merge!</string>\n              <string>methods</string>\n              <string>methodswith</string>\n              <string>middle</string>\n              <string>midpoints</string>\n              <string>mimewritable</string>\n              <string>min</string>\n              <string>minabs</string>\n              <string>minabs!</string>\n              <string>minimum</string>\n              <string>minimum!</string>\n              <string>minmax</string>\n              <string>mkdir</string>\n              <string>mkpath</string>\n              <string>mktemp</string>\n              <string>mktempdir</string>\n              <string>mmap</string>\n              <string>mmap_array</string>\n              <string>mmap_bitarray</string>\n              <string>mod</string>\n              <string>mod1</string>\n              <string>mod2pi</string>\n              <string>modf</string>\n              <string>module_name</string>\n              <string>module_parent</string>\n              <string>msync</string>\n              <string>mtime</string>\n              <string>mv</string>\n              <string>myid</string>\n              <string>myindexes</string>\n              <string>names</string>\n              <string>nan</string>\n              <string>nans</string>\n              <string>nb_available</string>\n              <string>ndigits</string>\n              <string>ndims</string>\n              <string>next</string>\n              <string>nextfloat</string>\n              <string>nextind</string>\n              <string>nextpow</string>\n              <string>nextpow2</string>\n              <string>nextprod</string>\n              <string>nfilled</string>\n              <string>nnz</string>\n              <string>nonzeros</string>\n              <string>norm</string>\n              <string>normalize_string</string>\n              <string>normfro</string>\n              <string>normpath</string>\n              <string>notify</string>\n              <string>nprocs</string>\n              <string>nthperm</string>\n              <string>nthperm!</string>\n              <string>ntoh</string>\n              <string>ntuple</string>\n              <string>null</string>\n              <string>num</string>\n              <string>num2hex</string>\n              <string>nworkers</string>\n              <string>object_id</string>\n              <string>oct</string>\n              <string>oftype</string>\n              <string>one</string>\n              <string>ones</string>\n              <string>open</string>\n              <string>operm</string>\n              <string>parent</string>\n              <string>parentindexes</string>\n              <string>parse</string>\n              <string>parsefloat</string>\n              <string>parseint</string>\n              <string>parseip</string>\n              <string>partitions</string>\n              <string>peakflops</string>\n              <string>permutations</string>\n              <string>permute!</string>\n              <string>permutedims</string>\n              <string>permutedims!</string>\n              <string>pinv</string>\n              <string>plan_bfft</string>\n              <string>plan_bfft!</string>\n              <string>plan_brfft</string>\n              <string>plan_dct</string>\n              <string>plan_dct!</string>\n              <string>plan_fft</string>\n              <string>plan_fft!</string>\n              <string>plan_idct</string>\n              <string>plan_idct!</string>\n              <string>plan_ifft</string>\n              <string>plan_ifft!</string>\n              <string>plan_irfft</string>\n              <string>plan_rfft</string>\n              <string>pmap</string>\n              <string>pointer</string>\n              <string>pointer_from_objref</string>\n              <string>pointer_to_array</string>\n              <string>poll_fd</string>\n              <string>poll_file</string>\n              <string>polygamma</string>\n              <string>pop!</string>\n              <string>popdisplay</string>\n              <string>position</string>\n              <string>powermod</string>\n              <string>precision</string>\n              <string>precompile</string>\n              <string>prepend!</string>\n              <string>prevfloat</string>\n              <string>prevind</string>\n              <string>prevpow</string>\n              <string>prevpow2</string>\n              <string>prevprod</string>\n              <string>primes</string>\n              <string>print</string>\n              <string>print_escaped</string>\n              <string>print_joined</string>\n              <string>print_shortest</string>\n              <string>print_unescaped</string>\n              <string>print_with_color</string>\n              <string>println</string>\n              <string>process_exited</string>\n              <string>process_running</string>\n              <string>procs</string>\n              <string>prod</string>\n              <string>prod!</string>\n              <string>produce</string>\n              <string>promote</string>\n              <string>promote_rule</string>\n              <string>promote_shape</string>\n              <string>promote_type</string>\n              <string>push!</string>\n              <string>pushdisplay</string>\n              <string>put</string>\n              <string>put!</string>\n              <string>pwd</string>\n              <string>qr</string>\n              <string>qrfact</string>\n              <string>qrfact!</string>\n              <string>quadgk</string>\n              <string>quantile</string>\n              <string>quantile!</string>\n              <string>quit</string>\n              <string>rad2deg</string>\n              <string>radians2degrees</string>\n              <string>rand</string>\n              <string>rand!</string>\n              <string>randbool</string>\n              <string>randbool!</string>\n              <string>randcycle</string>\n              <string>randn</string>\n              <string>randn!</string>\n              <string>randperm</string>\n              <string>randstring</string>\n              <string>randsubseq</string>\n              <string>randsubseq!</string>\n              <string>range</string>\n              <string>rank</string>\n              <string>rationalize</string>\n              <string>read</string>\n              <string>read!</string>\n              <string>readall</string>\n              <string>readandwrite</string>\n              <string>readavailable</string>\n              <string>readbytes</string>\n              <string>readbytes!</string>\n              <string>readchomp</string>\n              <string>readcsv</string>\n              <string>readdir</string>\n              <string>readdlm</string>\n              <string>readline</string>\n              <string>readlines</string>\n              <string>readsfrom</string>\n              <string>readuntil</string>\n              <string>real</string>\n              <string>realmax</string>\n              <string>realmin</string>\n              <string>realpath</string>\n              <string>recv</string>\n              <string>redirect_stderr</string>\n              <string>redirect_stdin</string>\n              <string>redirect_stdout</string>\n              <string>redisplay</string>\n              <string>reduce</string>\n              <string>reducedim</string>\n              <string>reenable_sigint</string>\n              <string>reim</string>\n              <string>reinterpret</string>\n              <string>reload</string>\n              <string>rem</string>\n              <string>rem1</string>\n              <string>remotecall</string>\n              <string>remotecall_fetch</string>\n              <string>remotecall_wait</string>\n              <string>repeat</string>\n              <string>replace</string>\n              <string>repmat</string>\n              <string>repr</string>\n              <string>reprmime</string>\n              <string>require</string>\n              <string>reset</string>\n              <string>reshape</string>\n              <string>resize!</string>\n              <string>rethrow</string>\n              <string>reverse</string>\n              <string>reverse!</string>\n              <string>rfft</string>\n              <string>rm</string>\n              <string>rmdir</string>\n              <string>rmprocs</string>\n              <string>rol</string>\n              <string>ror</string>\n              <string>rot180</string>\n              <string>rotl90</string>\n              <string>rotr90</string>\n              <string>round</string>\n              <string>rpad</string>\n              <string>rref</string>\n              <string>rsearch</string>\n              <string>rsearchindex</string>\n              <string>rsplit</string>\n              <string>rstrip</string>\n              <string>run</string>\n              <string>scale</string>\n              <string>scale!</string>\n              <string>schedule</string>\n              <string>schur</string>\n              <string>schurfact</string>\n              <string>schurfact!</string>\n              <string>sdata</string>\n              <string>search</string>\n              <string>searchindex</string>\n              <string>searchsorted</string>\n              <string>searchsortedfirst</string>\n              <string>searchsortedlast</string>\n              <string>sec</string>\n              <string>secd</string>\n              <string>sech</string>\n              <string>seek</string>\n              <string>seekend</string>\n              <string>seekstart</string>\n              <string>select</string>\n              <string>select!</string>\n              <string>send</string>\n              <string>serialize</string>\n              <string>set_bigfloat_precision</string>\n              <string>set_bigfloat_rounding</string>\n              <string>set_rounding</string>\n              <string>setdiff</string>\n              <string>setdiff!</string>\n              <string>setenv</string>\n              <string>setfield</string>\n              <string>setindex!</string>\n              <string>shift!</string>\n              <string>show</string>\n              <string>showall</string>\n              <string>showcompact</string>\n              <string>showerror</string>\n              <string>shuffle</string>\n              <string>shuffle!</string>\n              <string>sign</string>\n              <string>signbit</string>\n              <string>signed</string>\n              <string>signif</string>\n              <string>significand</string>\n              <string>similar</string>\n              <string>sin</string>\n              <string>sinc</string>\n              <string>sind</string>\n              <string>sinh</string>\n              <string>sinpi</string>\n              <string>size</string>\n              <string>sizehint</string>\n              <string>sizeof</string>\n              <string>skip</string>\n              <string>skipchars</string>\n              <string>sleep</string>\n              <string>slice</string>\n              <string>slicedim</string>\n              <string>sort</string>\n              <string>sort!</string>\n              <string>sortcols</string>\n              <string>sortperm</string>\n              <string>sortrows</string>\n              <string>sparse</string>\n              <string>sparsevec</string>\n              <string>spawn</string>\n              <string>spdiagm</string>\n              <string>speye</string>\n              <string>splice!</string>\n              <string>split</string>\n              <string>splitdir</string>\n              <string>splitdrive</string>\n              <string>splitext</string>\n              <string>spones</string>\n              <string>sprand</string>\n              <string>sprandbool</string>\n              <string>sprandn</string>\n              <string>sprint</string>\n              <string>spzeros</string>\n              <string>sqrt</string>\n              <string>sqrtm</string>\n              <string>squeeze</string>\n              <string>srand</string>\n              <string>start</string>\n              <string>start_reading</string>\n              <string>start_timer</string>\n              <string>start_watching</string>\n              <string>stat</string>\n              <string>std</string>\n              <string>stdm</string>\n              <string>step</string>\n              <string>stop_reading</string>\n              <string>stop_timer</string>\n              <string>strerror</string>\n              <string>strftime</string>\n              <string>stride</string>\n              <string>strides</string>\n              <string>string</string>\n              <string>stringmime</string>\n              <string>strip</string>\n              <string>strptime</string>\n              <string>strwidth</string>\n              <string>sub</string>\n              <string>sub2ind</string>\n              <string>subtypes</string>\n              <string>success</string>\n              <string>sum</string>\n              <string>sum!</string>\n              <string>sum_kbn</string>\n              <string>sumabs</string>\n              <string>sumabs!</string>\n              <string>sumabs2</string>\n              <string>sumabs2!</string>\n              <string>summary</string>\n              <string>super</string>\n              <string>svd</string>\n              <string>svdfact</string>\n              <string>svdfact!</string>\n              <string>svdvals</string>\n              <string>svdvals!</string>\n              <string>sylvester</string>\n              <string>symbol</string>\n              <string>symdiff</string>\n              <string>symdiff!</string>\n              <string>symlink</string>\n              <string>symperm</string>\n              <string>systemerror</string>\n              <string>take</string>\n              <string>take!</string>\n              <string>takebuf_array</string>\n              <string>takebuf_string</string>\n              <string>tan</string>\n              <string>tand</string>\n              <string>tanh</string>\n              <string>task_local_storage</string>\n              <string>tempdir</string>\n              <string>tempname</string>\n              <string>tic</string>\n              <string>time</string>\n              <string>time_ns</string>\n              <string>timedwait</string>\n              <string>toc</string>\n              <string>toq</string>\n              <string>touch</string>\n              <string>trace</string>\n              <string>trailing_ones</string>\n              <string>trailing_zeros</string>\n              <string>transpose</string>\n              <string>trigamma</string>\n              <string>tril</string>\n              <string>tril!</string>\n              <string>triu</string>\n              <string>triu!</string>\n              <string>trues</string>\n              <string>trunc</string>\n              <string>truncate</string>\n              <string>typeintersect</string>\n              <string>typejoin</string>\n              <string>typemax</string>\n              <string>typemin</string>\n              <string>ucfirst</string>\n              <string>uint</string>\n              <string>uint128</string>\n              <string>uint16</string>\n              <string>uint32</string>\n              <string>uint64</string>\n              <string>uint8</string>\n              <string>unescape_string</string>\n              <string>union</string>\n              <string>union!</string>\n              <string>unique</string>\n              <string>unmark</string>\n              <string>unsafe_copy!</string>\n              <string>unsafe_load</string>\n              <string>unsafe_pointer_to_objref</string>\n              <string>unsafe_store!</string>\n              <string>unshift!</string>\n              <string>unsigned</string>\n              <string>uperm</string>\n              <string>uppercase</string>\n              <string>utf16</string>\n              <string>utf32</string>\n              <string>utf8</string>\n              <string>values</string>\n              <string>var</string>\n              <string>varm</string>\n              <string>vcat</string>\n              <string>vec</string>\n              <string>vecnorm</string>\n              <string>versioninfo</string>\n              <string>wait</string>\n              <string>warn</string>\n              <string>watch_file</string>\n              <string>which</string>\n              <string>whos</string>\n              <string>widemul</string>\n              <string>widen</string>\n              <string>with_bigfloat_precision</string>\n              <string>with_bigfloat_rounding</string>\n              <string>with_rounding</string>\n              <string>workers</string>\n              <string>workspace</string>\n              <string>write</string>\n              <string>writecsv</string>\n              <string>writedlm</string>\n              <string>writemime</string>\n              <string>writesto</string>\n              <string>wstring</string>\n              <string>xcorr</string>\n              <string>xdump</string>\n              <string>yield</string>\n              <string>zero</string>\n              <string>zeros</string>\n              <string>zeta</string>\n              <string>zip</string>\n    </array>\n\n    <!-- these are the names(Base) ... strings that start with capital letter and are not functions. -->\n\n    <key>BBLMPredefinedNameList</key>\n      <array>\n              <string>AbstractMatrix</string>\n              <string>AbstractRNG</string>\n              <string>AbstractSparseArray</string>\n              <string>AbstractSparseMatrix</string>\n              <string>AbstractSparseVector</string>\n              <string>AbstractVecOrMat</string>\n              <string>AbstractVector</string>\n              <string>ArgumentError</string>\n              <string>Array</string>\n              <string>Associative</string>\n              <string>BLAS</string>\n              <string>Base</string>\n              <string>Base64Pipe</string>\n              <string>Bidiagonal</string>\n              <string>BigFloat</string>\n              <string>BigInt</string>\n              <string>BitArray</string>\n              <string>BitMatrix</string>\n              <string>BitVector</string>\n              <string>CFILE</string>\n              <string>Cchar</string>\n              <string>Cdouble</string>\n              <string>Cfloat</string>\n              <string>CharString</string>\n              <string>Cint</string>\n              <string>Clong</string>\n              <string>Clonglong</string>\n              <string>ClusterManager</string>\n              <string>Cmd</string>\n              <string>Coff_t</string>\n              <string>Collections</string>\n              <string>Colon</string>\n              <string>Complex</string>\n              <string>Complex128</string>\n              <string>Complex32</string>\n              <string>Complex64</string>\n              <string>Condition</string>\n              <string>Cptrdiff_t</string>\n              <string>Cshort</string>\n              <string>Csize_t</string>\n              <string>Cssize_t</string>\n              <string>Cuchar</string>\n              <string>Cuint</string>\n              <string>Culong</string>\n              <string>Culonglong</string>\n              <string>Cushort</string>\n              <string>Cwchar_t</string>\n              <string>DArray</string>\n              <string>DenseMatrix</string>\n              <string>DenseVecOrMat</string>\n              <string>DenseVector</string>\n              <string>Diagonal</string>\n              <string>Dict</string>\n              <string>DimensionMismatch</string>\n              <string>Display</string>\n              <string>EOFError</string>\n              <string>EachLine</string>\n              <string>Enumerate</string>\n              <string>ErrorException</string>\n              <string>FFTW</string>\n              <string>Factorization</string>\n              <string>FileMonitor</string>\n              <string>FileOffset</string>\n              <string>Filter</string>\n              <string>FloatRange</string>\n              <string>Graphics</string>\n              <string>Hermitian</string>\n              <string>IO</string>\n              <string>IOBuffer</string>\n              <string>IOStream</string>\n              <string>IPv4</string>\n              <string>IPv6</string>\n              <string>IntSet</string>\n              <string>KeyError</string>\n              <string>LAPACK</string>\n              <string>LoadError</string>\n              <string>LocalProcess</string>\n              <string>MIME</string>\n              <string>Irrational</string>\n              <string>Matrix</string>\n              <string>MersenneTwister</string>\n              <string>Meta</string>\n              <string>MethodError</string>\n              <string>ObjectIdDict</string>\n              <string>Operators</string>\n              <string>OrdinalRange</string>\n              <string>ParseError</string>\n              <string>Pkg</string>\n              <string>PollingFileWatcher</string>\n              <string>ProcessExitedException</string>\n              <string>ProcessGroup</string>\n              <string>Profile</string>\n              <string>Range</string>\n              <string>Range1</string>\n              <string>Ranges</string>\n              <string>Rational</string>\n              <string>RawFD</string>\n              <string>Regex</string>\n              <string>RegexMatch</string>\n              <string>RemoteRef</string>\n              <string>RepString</string>\n              <string>RevString</string>\n              <string>RopeString</string>\n              <string>RoundDown</string>\n              <string>RoundFromZero</string>\n              <string>RoundNearest</string>\n              <string>RoundToZero</string>\n              <string>RoundUp</string>\n              <string>RoundingMode</string>\n              <string>Set</string>\n              <string>SharedArray</string>\n              <string>SharedMatrix</string>\n              <string>SharedVector</string>\n              <string>SparseMatrixCSC</string>\n              <string>Stat</string>\n              <string>StatStruct</string>\n              <string>StepRange</string>\n              <string>StridedArray</string>\n              <string>StridedMatrix</string>\n              <string>StridedVecOrMat</string>\n              <string>StridedVector</string>\n              <string>SubArray</string>\n              <string>SubDArray</string>\n              <string>SubOrDArray</string>\n              <string>SubString</string>\n              <string>SymTridiagonal</string>\n              <string>Symmetric</string>\n              <string>Sys</string>\n              <string>SystemError</string>\n              <string>Test</string>\n              <string>TextDisplay</string>\n              <string>Timer</string>\n              <string>TmStruct</string>\n              <string>Triangular</string>\n              <string>Tridiagonal</string>\n              <string>TypeError</string>\n              <string>UTF16String</string>\n              <string>UTF32String</string>\n              <string>UdpSocket</string>\n              <string>UniformScaling</string>\n              <string>UnitRange</string>\n              <string>VecOrMat</string>\n              <string>Vector</string>\n              <string>VersionNumber</string>\n              <string>WString</string>\n              <string>WeakKeyDict</string>\n              <string>WeakRef</string>\n              <string>Zip</string>\n    </array>\n\n\t<key>Language Features</key>\n\t<dict>\n\t\t<key>Identifier and Keyword Character Class</key>\n\t\t<string>A-Za-z0-9_!</string>\n\n\t\t<key>Escape Char in Strings 1</key>\n\t\t<string>\\</string>\n\n\t\t<key>End-of-line Ends Strings 1</key>\n\t\t<false/>\n\n\t\t<key>End-of-line Ends Strings 2</key>\n\t\t<false/>\n\n        <!-- function-matching regex, might need tweaking -->\n\t\t<key>Function Pattern</key>\n        <string><![CDATA[\n        (?x:\n            (?P<leadspace>^\\s*)\n            (?P<function>\n                function\\s+\n                (?P<function_name>\n                    [a-zA-Z0-9_!?.]+\n                )\n                (?s:.+?)\n                \\r(?P=leadspace)end\n            )\n        )\n        ]]>\n        </string>\n\n        <!-- string-matching regex -->\n        <key>String Pattern</key>\n        <string><![CDATA[\n        (?x:\n            (\\\"\\\"\\\"(\\\\\"\\\"\\\"|[^\\\"\\\"\\\"]|\\\\\\r)*\\\"\\\"\\\")  | (?# Triple-Double-quote)\n            (\"(\\\\\"|[^\"\\r]|\\\\\\r)*\")        | (?# Single-Double-quote)\n            (r\"(\\\\\"|[^\"\\r]|\\\\\\r)*\")       | (?# Regex-quote)\n            ('(\\\\|[^'\\r]|\\\\\\r)*')         | (?# Character single)\n            (`(\\\\\"|[^`\\r]|\\\\\\r)*`)          (?# Back-quote)\n        )\n        ]]></string>\n\n     <!-- comment-matching regex - nicked from the BBEdit docs.\n\n          I can only do a single unnested multiline comment block, but\n          perhaps some fiendishly cunning recursive regex could do nested multiline comments...?\n\n    -->\n\t<key>Comment Pattern</key>\n    <string><![CDATA[\n    (?msx:\n        (\\#=(.*?)=\\#) | (?# one unnested multiline comment block)\n        (\\#.*?$)        (?# a single line comment)\n    )\n    ]]></string>\n\t</dict>\n</dict>\n</plist>\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/base/libdl.jl": "# This file is a part of Julia. License is MIT: http://julialang.org/license\n\nmodule Libdl\n\nexport DL_LOAD_PATH, RTLD_DEEPBIND, RTLD_FIRST, RTLD_GLOBAL, RTLD_LAZY, RTLD_LOCAL,\n    RTLD_NODELETE, RTLD_NOLOAD, RTLD_NOW, dlclose, dlopen, dlopen_e, dlsym, dlsym_e,\n    dlpath, find_library, dlext, dllist\n\nconst DL_LOAD_PATH = ByteString[]\n@osx_only push!(DL_LOAD_PATH, \"@executable_path/../lib/julia\")\n@osx_only push!(DL_LOAD_PATH, \"@executable_path/../lib\")\n\n# constants to match JL_RTLD_* in src/julia.h\nconst RTLD_LOCAL     = 0x00000001\nconst RTLD_GLOBAL    = 0x00000002\nconst RTLD_LAZY      = 0x00000004\nconst RTLD_NOW       = 0x00000008\nconst RTLD_NODELETE  = 0x00000010\nconst RTLD_NOLOAD    = 0x00000020\nconst RTLD_DEEPBIND  = 0x00000040\nconst RTLD_FIRST     = 0x00000080\n\nfunction dlsym(hnd::Ptr, s::Union{Symbol,AbstractString})\n    hnd == C_NULL && throw(ArgumentError(\"NULL library handle\"))\n    ccall(:jl_dlsym, Ptr{Void}, (Ptr{Void}, Cstring), hnd, s)\nend\n\nfunction dlsym_e(hnd::Ptr, s::Union{Symbol,AbstractString})\n    hnd == C_NULL && throw(ArgumentError(\"NULL library handle\"))\n    ccall(:jl_dlsym_e, Ptr{Void}, (Ptr{Void}, Cstring), hnd, s)\nend\n\ndlopen(s::Symbol, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND) =\n    dlopen(string(s), flags)\n\ndlopen(s::AbstractString, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND) =\n    ccall(:jl_load_dynamic_library, Ptr{Void}, (Cstring,UInt32), s, flags)\n\ndlopen_e(s::Symbol, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND) =\n    dlopen_e(string(s), flags)\n\ndlopen_e(s::AbstractString, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND) =\n    ccall(:jl_load_dynamic_library_e, Ptr{Void}, (Cstring,UInt32), s, flags)\n\nfunction dlclose(p::Ptr)\n    if p != C_NULL\n        ccall(:uv_dlclose,Void,(Ptr{Void},),p)\n        Libc.free(p)\n    end\nend\n\nfunction find_library(libnames::Vector, extrapaths::Vector=ASCIIString[])\n    for lib in libnames\n        for path in extrapaths\n            l = joinpath(path, lib)\n            p = dlopen_e(l, RTLD_LAZY)\n            if p != C_NULL\n                dlclose(p)\n                return l\n            end\n        end\n        p = dlopen_e(lib, RTLD_LAZY)\n        if p != C_NULL\n            dlclose(p)\n            return lib\n        end\n    end\n    return \"\"\nend\n\nfunction dlpath(handle::Ptr{Void})\n    p = ccall(:jl_pathname_for_handle, Ptr{UInt8}, (Ptr{Void},), handle)\n    s = bytestring(p)\n    @windows_only Libc.free(p)\n    return s\nend\n\nfunction dlpath(libname::Union{AbstractString, Symbol})\n    handle = dlopen(libname)\n    path = dlpath(handle)\n    dlclose(handle)\n    return path\nend\n\nif OS_NAME === :Darwin\n    const dlext = \"dylib\"\nelseif OS_NAME === :Windows\n    const dlext = \"dll\"\nelse\n    #assume OS_NAME === :Linux, or similar\n    const dlext = \"so\"\nend\n\n@linux_only begin\n    immutable dl_phdr_info\n        # Base address of object\n        addr::Cuint\n\n        # Null-terminated name of object\n        name::Ptr{UInt8}\n\n        # Pointer to array of ELF program headers for this object\n        phdr::Ptr{Void}\n\n        # Number of program headers for this object\n        phnum::Cshort\n    end\n\n    # This callback function called by dl_iterate_phdr() on Linux\n    function dl_phdr_info_callback(di::dl_phdr_info, size::Csize_t, dynamic_libraries::Array{AbstractString,1})\n        # Skip over objects without a path (as they represent this own object)\n        name = bytestring(di.name)\n        if !isempty(name)\n            push!(dynamic_libraries, name)\n        end\n        return convert(Cint, 0)::Cint\n    end\nend #@linux_only\n\nfunction dllist()\n    dynamic_libraries = Array(AbstractString,0)\n\n    @linux_only begin\n        const callback = cfunction(dl_phdr_info_callback, Cint,\n                                   (Ref{dl_phdr_info}, Csize_t, Ref{Array{AbstractString,1}} ))\n        ccall(:dl_iterate_phdr, Cint, (Ptr{Void}, Ref{Array{AbstractString,1}}), callback, dynamic_libraries)\n    end\n\n    @osx_only begin\n        numImages = ccall(:_dyld_image_count, Cint, (), )\n\n        # start at 1 instead of 0 to skip self\n        for i in 1:numImages-1\n            name = bytestring(ccall(:_dyld_get_image_name, Ptr{UInt8}, (UInt32,), i))\n            push!(dynamic_libraries, name)\n        end\n    end\n\n    @windows_only begin\n        ccall(:jl_dllist, Cint, (Any,), dynamic_libraries)\n    end\n\n    dynamic_libraries\nend\n\nend # module\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/base/deprecated.jl": "# This file is a part of Julia. License is MIT: http://julialang.org/license\n\n# Deprecated functions and objects\n#\n# Please add new deprecations at the bottom of the file.\n# A function deprecated in a release will be removed in the next one.\n# Please also add a reference to the pull request which introduced the\n# deprecation.\n#\n# For simple cases where a direct replacement is available, use @deprecate:\n# the first argument is the signature of the deprecated method, the second one\n# is the call which replaces it. Remove the definition of the deprecated method\n# and unexport it, as @deprecate takes care of calling the replacement\n# and of exporting the function.\n#\n# For more complex cases, move the body of the deprecated method in this file,\n# and call depwarn() directly from inside it. The symbol depwarn() expects is\n# the name of the function, which is used to ensure that the deprecation warning\n# is only printed the first time for each call place.\n\nmacro deprecate(old,new)\n    meta = Expr(:meta, :noinline)\n    if isa(old,Symbol)\n        oldname = Expr(:quote,old)\n        newname = Expr(:quote,new)\n        Expr(:toplevel,\n            Expr(:export,esc(old)),\n            :(function $(esc(old))(args...)\n                  $meta\n                  depwarn(string($oldname,\" is deprecated, use \",$newname,\" instead.\"),\n                          $oldname)\n                  $(esc(new))(args...)\n              end))\n    elseif isa(old,Expr) && old.head == :call\n        remove_linenums!(new)\n        oldcall = sprint(io->show_unquoted(io,old))\n        newcall = sprint(io->show_unquoted(io,new))\n        oldsym = if isa(old.args[1],Symbol)\n            old.args[1]\n        elseif isa(old.args[1],Expr) && old.args[1].head == :curly\n            old.args[1].args[1]\n        else\n            error(\"invalid usage of @deprecate\")\n        end\n        oldname = Expr(:quote, oldsym)\n        Expr(:toplevel,\n            Expr(:export,esc(oldsym)),\n            :($(esc(old)) = begin\n                  $meta\n                  depwarn(string($oldcall,\" is deprecated, use \",$newcall,\" instead.\"),\n                          $oldname)\n                  $(esc(new))\n              end))\n    else\n        error(\"invalid usage of @deprecate\")\n    end\nend\n\nremove_linenums!(ex) = ex\nfunction remove_linenums!(ex::Expr)\n    filter!(x->!((isa(x,Expr) && is(x.head,:line)) || isa(x,LineNumberNode)), ex.args)\n    for subex in ex.args\n        remove_linenums!(subex)\n    end\n    ex\nend\n\nfunction depwarn(msg, funcsym)\n    opts = JLOptions()\n    if opts.depwarn > 0\n        ln = unsafe_load(cglobal(:jl_lineno, Int))\n        fn = bytestring(unsafe_load(cglobal(:jl_filename, Ptr{Cchar})))\n        bt = backtrace()\n        caller = firstcaller(bt, funcsym)\n        if opts.depwarn == 1 # raise a warning\n            warn(msg, once=(caller != C_NULL), key=caller, bt=bt,\n                 filename=fn, lineno=ln)\n        elseif opts.depwarn == 2 # raise an error\n            throw(ErrorException(msg))\n        end\n    end\nend\n\nfunction firstcaller(bt::Array{Ptr{Void},1}, funcsym::Symbol)\n    # Identify the calling line\n    i = 1\n    while i <= length(bt)\n        lkup = ccall(:jl_lookup_code_address, Any, (Ptr{Void},Cint), bt[i], true)\n        i += 1\n        if lkup === ()\n            continue\n        end\n        fname, file, line, inlinedat_file, inlinedat_line, fromC = lkup\n        if fname == funcsym\n            break\n        end\n    end\n    if i <= length(bt)\n        return bt[i]\n    end\n    return C_NULL\nend\n\ndeprecate(s::Symbol) = deprecate(current_module(), s)\ndeprecate(m::Module, s::Symbol) = ccall(:jl_deprecate_binding, Void, (Any, Any), m, s)\n\nmacro deprecate_binding(old, new)\n    Expr(:toplevel,\n         Expr(:export, esc(old)),\n         Expr(:const, Expr(:(=), esc(old), esc(new))),\n         Expr(:call, :deprecate, Expr(:quote, old)))\nend\n\n# 0.4 deprecations\n\n@deprecate split(x,y,l::Integer,k::Bool) split(x,y;limit=l,keep=k)\n@deprecate split(x,y,l::Integer) split(x,y;limit=l)\n@deprecate split(x,y,k::Bool) split(x,y;keep=k)\n\n@deprecate rsplit(x,y,l::Integer,k::Bool) rsplit(x,y;limit=l,keep=k)\n@deprecate rsplit(x,y,l::Integer) rsplit(x,y;limit=l)\n@deprecate rsplit(x,y,k::Bool) rsplit(x,y;keep=k)\n\nconst TcpSocket = TCPSocket\ndeprecate(:TcpSocket)\nconst IpAddr = IPAddr\ndeprecate(:IpAddr)\n@deprecate_binding UdpSocket UDPSocket\n\n@deprecate isblank(c::Char) c == ' ' || c == '\\t'\n@deprecate isblank(s::AbstractString) all(c -> c == ' ' || c == '\\t', s)\n\n@deprecate_binding Nothing Void\n@deprecate_binding None Union{}\n\nexport apply\n@noinline function apply(f, args...)\n    depwarn(\"apply(f, x) is deprecated, use `f(x...)` instead\", :apply)\n    return Core._apply(call, f, args...)\nend\n\n@deprecate median(v::AbstractArray; checknan::Bool=true)  median(v)\n@deprecate median(v::AbstractArray, region; checknan::Bool=true)  median(v, region)\n@deprecate median!(v::AbstractVector; checknan::Bool=true)  median!(v)\n\n@deprecate Dict{K,V}(ks::AbstractArray{K}, vs::AbstractArray{V}) Dict{K,V}(zip(ks, vs))\n@deprecate Dict{K,V}(ks::Tuple{Vararg{K}}, vs::Tuple{Vararg{V}}) Dict{K,V}(zip(ks, vs))\n@deprecate Dict{K}(ks::Tuple{Vararg{K}}, vs::Tuple)              Dict{K,Any}(zip(ks, vs))\n@deprecate Dict{V}(ks::Tuple, vs::Tuple{Vararg{V}})              Dict{Any,V}(zip(ks, vs))\n@deprecate Dict(ks, vs)                                          Dict{Any,Any}(zip(ks, vs))\n\n@deprecate itrunc{T<:Integer}(::Type{T}, n::Integer) (n % T)\n\n@deprecate oftype{T}(::Type{T},c)  convert(T,c)\n\n@deprecate inf(x::AbstractFloat)  oftype(x,Inf)\n@deprecate nan(x::AbstractFloat)  oftype(x,NaN)\n@deprecate inf{T<:AbstractFloat}(::Type{T})  convert(T,Inf)\n@deprecate nan{T<:AbstractFloat}(::Type{T})  convert(T,NaN)\n\n@deprecate_binding String AbstractString\n\n# 13221 - when removing Uint deprecation, remove hack in jl_binding_deprecation_warning\n@deprecate_binding Uint    UInt\n@deprecate_binding Uint8   UInt8\n@deprecate_binding Uint16  UInt16\n@deprecate_binding Uint32  UInt32\n@deprecate_binding Uint64  UInt64\n@deprecate_binding Uint128 UInt128\n\n@deprecate zero{T}(::Type{Ptr{T}}) Ptr{T}(0)\n@deprecate zero{T}(x::Ptr{T})      Ptr{T}(0)\n@deprecate one{T}(::Type{Ptr{T}})  Ptr{T}(1)\n@deprecate one{T}(x::Ptr{T})       Ptr{T}(1)\n\n@deprecate rand!(r::Range, A::AbstractArray) rand!(A, r)\n@deprecate rand!(mt::MersenneTwister, r::Range, A::AbstractArray) rand!(mt, A, r)\n\n@deprecate itrunc(x)              trunc(Integer,x)\n@deprecate itrunc{T<:Integer}(::Type{T},x::Real) trunc(T,x)\n@deprecate iceil(x)               ceil(Integer,x)\n@deprecate iceil{T}(::Type{T},x)  ceil(T,x)\n@deprecate ifloor(x)              floor(Integer,x)\n@deprecate ifloor{T}(::Type{T},x) floor(T,x)\n@deprecate iround(x)              round(Integer,x)\n@deprecate iround{T}(::Type{T},x) round(T,x)\n\n@deprecate_binding Base64Pipe Base64EncodePipe\n@deprecate base64 base64encode\n\n@deprecate prevind(a::Any, i::Integer)   i-1\n@deprecate nextind(a::Any, i::Integer)   i+1\n\n@deprecate givens{T}(f::T, g::T, i1::Integer, i2::Integer, cols::Integer)   givens(f, g, i1, i2)\n\n@deprecate squeeze(X, dims) squeeze(X, tuple(dims...))\n\n@deprecate sizehint(A, n) sizehint!(A, n)\n\n@deprecate randbool!                               rand!\n@deprecate randbool()                              rand(Bool)\n@deprecate randbool(r::AbstractRNG)                rand(r, Bool)\n@deprecate randbool(dims::Dims)                    bitrand(dims)\n@deprecate randbool(dims::Int...)                  bitrand(dims)\n@deprecate randbool(r::AbstractRNG, dims::Dims)    bitrand(r, dims)\n@deprecate randbool(r::AbstractRNG, dims::Int...)  bitrand(r, dims)\n\n@deprecate beginswith startswith\n\n@deprecate functionlocs(f,t)  map(functionloc, methods(f,t))\n\n@deprecate null nullspace\n\n@deprecate error(ex::Exception) throw(ex)\n@deprecate error{E<:Exception}(::Type{E}) throw(E())\n\n@deprecate_binding MemoryError OutOfMemoryError\n\n@deprecate map!(f::Callable, dest::StridedArray, A::StridedArray, B::Number) broadcast!(f, dest, A, B)\n@deprecate map!(f::Callable, dest::StridedArray, A::Number, B::StridedArray) broadcast!(f, dest, A, B)\n\n#9295\n@deprecate push!(t::Associative, key, v)  setindex!(t, v, key)\n\n@deprecate (|>)(src::AbstractCmd,    dest::AbstractCmd)    pipeline(src, dest)\n@deprecate (.>)(src::AbstractCmd,    dest::AbstractCmd)    pipeline(src, stderr=dest)\n@deprecate (|>)(src::Redirectable,   dest::AbstractCmd)    pipeline(src, dest)\n@deprecate (|>)(src::AbstractCmd,    dest::Redirectable)   pipeline(src, dest)\n@deprecate (.>)(src::AbstractCmd,    dest::Redirectable)   pipeline(src, stderr=dest)\n@deprecate (|>)(src::AbstractCmd,    dest::AbstractString) pipeline(src, dest)\n@deprecate (|>)(src::AbstractString, dest::AbstractCmd)    pipeline(src, dest)\n@deprecate (.>)(src::AbstractCmd,    dest::AbstractString) pipeline(src, stderr=dest)\n@deprecate (>>)(src::AbstractCmd,    dest::AbstractString) pipeline(src, stdout=dest, append=true)\n@deprecate (.>>)(src::AbstractCmd,   dest::AbstractString) pipeline(src, stderr=dest, append=true)\n@deprecate pipe pipeline\n\n# 10314\n@deprecate filter!(r::Regex, d::Dict) filter!((k,v)->ismatch(r,k), d)\n\n# 1470\n@deprecate integer(s::AbstractString)   parse(Int,s)\n@deprecate unsigned(s::AbstractString)  parse(UInt,s)\n@deprecate int(s::AbstractString)       parse(Int,s)\n@deprecate uint(s::AbstractString)      parse(UInt,s)\n@deprecate int8(s::AbstractString)      parse(Int8,s)\n@deprecate uint8(s::AbstractString)     parse(UInt8,s)\n@deprecate int16(s::AbstractString)     parse(Int16,s)\n@deprecate uint16(s::AbstractString)    parse(UInt16,s)\n@deprecate int32(s::AbstractString)     parse(Int32,s)\n@deprecate uint32(s::AbstractString)    parse(UInt32,s)\n@deprecate int64(s::AbstractString)     parse(Int64,s)\n@deprecate uint64(s::AbstractString)    parse(UInt64,s)\n@deprecate int128(s::AbstractString)    parse(Int128,s)\n@deprecate uint128(s::AbstractString)   parse(UInt128,s)\n@deprecate float64(s::AbstractString)   parse(Float64,s)\n@deprecate float32(s::AbstractString)   parse(Float32,s)\n\nfor (f,t) in ((:integer, Integer), (:signed, Signed), (:unsigned, Unsigned))\n    @eval begin\n        @deprecate $f(x::AbstractArray) round($t, x)\n    end\nend\n\nfor (f,t) in ((:int,    Int), (:int8,   Int8), (:int16,  Int16), (:int32,  Int32),\n              (:int64,  Int64), (:int128, Int128), (:uint,   UInt), (:uint8,  UInt8),\n              (:uint16, UInt16), (:uint32, UInt32), (:uint64, UInt64), (:uint128,UInt128))\n    ex1 = sprint(io->show_unquoted(io,:([parse($t,s) for s in a])))\n    ex2 = sprint(io->show_unquoted(io,:(round($t, a))))\n    name = Expr(:quote,f)\n    @eval begin\n        function ($f)(x::AbstractArray)\n            if all(y->isa(y,AbstractString), x)\n                depwarn(string($name,\"(a::AbstractArray) is deprecated, use \", $ex1, \" instead.\"), $name)\n                return [parse($t,s) for s in x]\n            elseif all(y->isa(y,Number), x)\n                depwarn(string($name,\"(a::AbstractArray) is deprecated, use \", $ex2, \" instead.\"), $name)\n                return round($t, x)\n            end\n            y = similar(x,$t)\n            i = 1\n            for e in x\n                y[i] = ($f)(e)\n                i += 1\n            end\n            y\n        end\n    end\nend\n\nfor (f,t) in ((:char, Char), (:bool, Bool), (:float16, Float16), (:float32, Float32),\n              (:float64, Float64), (:complex64, Complex64), (:complex128, Complex128))\n    @eval begin\n        @deprecate $f(x::AbstractArray) map($t, x)\n    end\nend\n\nconst convert_funcs_and_types =\n    ((:integer, Integer), (:signed, Signed), (:unsigned, Unsigned), (:int, Int), (:int8, Int8),\n     (:int16, Int16), (:int32, Int32), (:int64, Int64), (:int128, Int128), (:uint, UInt),\n     (:uint8, UInt8), (:uint16, UInt16), (:uint32, UInt32), (:uint64, UInt64), (:uint128,UInt128),\n     (:float16, Float16), (:float32, Float32), (:float64, Float64))\n\nfor (f,t) in convert_funcs_and_types\n     @eval begin\n         @deprecate $f(r::StepRange) map($t, r)\n         @deprecate $f(r::UnitRange) map($t, r)\n     end\nend\n\nfor (f,t) in ((:float16,:Float16),(:float32,:Float32),(:float64,:Float64))\n    @eval begin\n        @deprecate $f(r::FloatRange) map($t, r)\n    end\nend\n\n@deprecate int(x)  Int(x)\n@deprecate uint(x) UInt(x)\n\n@deprecate bool(x::Number)  x!=0\n\n@deprecate char(x)                 Char(x)\n@deprecate char(x::AbstractFloat)  Char(round(UInt32,x))\n@deprecate integer(x::Char)        Int(x)\n\n@deprecate complex128(r::Real, i::Real)  Complex128(r, i)\n@deprecate complex128(z)                 Complex128(z)\n@deprecate complex64(r::Real, i::Real)   Complex64(r, i)\n@deprecate complex64(z)                  Complex64(z)\n@deprecate complex32(r::Real, i::Real)   Complex32(r, i)\n@deprecate complex32(z)                  Complex32(z)\n\nfor (f,t) in convert_funcs_and_types\n    @eval begin\n        @deprecate $f(z::Complex)  Complex($t(real(z)), $t(imag(z)))\n    end\nend\n\n@deprecate float16(x) Float16(x)\n@deprecate float32(x) Float32(x)\n@deprecate float64(x) Float64(x)\n\n@deprecate int8(x)   Int8(x)\n@deprecate int16(x)  Int16(x)\n@deprecate int32(x)  Int32(x)\n@deprecate int64(x)  Int64(x)\n@deprecate int128(x) Int128(x)\n\n@deprecate uint8(x)           UInt8(x)\n@deprecate uint8(x::Integer)  x % UInt8\n@deprecate uint8(x::Bool)     UInt8(x)\n\n@deprecate uint16(x)  UInt16(x)\n@deprecate uint32(x)  UInt32(x)\n@deprecate uint64(x)  UInt64(x)\n@deprecate uint128(x) UInt128(x)\n\n@deprecate integer(x) Integer(x)\n\nfor (f,t) in ((:uint8,:UInt8), (:uint16,:UInt16), (:uint32,:UInt32), (:uint64,:Uint64),\n              (:int8,:Int8),   (:int16,:Int16),   (:int32,:Int32),   (:int64,:Int64),\n              (:int128,:Int128), (:uint128,:UInt128), (:signed,:Int), (:unsigned,:UInt),\n              (:integer,:Int), (:int,:Int), (:uint,:UInt))\n    @eval begin\n        @deprecate ($f)(x::AbstractFloat)  round($t,x)\n        @deprecate ($f)(x::Rational)       round($t,x)\n    end\nend\n\n@deprecate integer(x::Ptr)   convert(UInt, x)\n@deprecate unsigned(x::Ptr)  convert(UInt, x)\n\nfor (f,t) in ((:float32, Float32), (:float64, Float64))\n    @eval begin\n        @deprecate ($f){S<:AbstractString}(a::AbstractArray{S}) [parse($t,s) for s in a]\n    end\nend\n\n@deprecate flipud(A::AbstractArray) flipdim(A, 1)\n@deprecate fliplr(A::AbstractArray) flipdim(A, 2)\n\n@deprecate sub2ind{T<:Integer}(dims::Array{T}, sub::Array{T}) sub2ind(tuple(dims...), sub...)\n@deprecate ind2sub!{T<:Integer}(sub::Array{T}, dims::Array{T}, ind::T) ind2sub!(sub, tuple(dims...), ind)\n\n@deprecate strftime     Libc.strftime\n@deprecate strptime     Libc.strptime\n@deprecate flush_cstdio Libc.flush_cstdio\n@deprecate c_free       Libc.free\n@deprecate c_malloc     Libc.malloc\n@deprecate c_calloc     Libc.calloc\n@deprecate c_realloc    Libc.realloc\n@deprecate errno        Libc.errno\n@deprecate strerror     Libc.strerror\n\n@deprecate dlclose      Libdl.dlclose\n@deprecate dlopen       Libdl.dlopen\n@deprecate dlopen_e     Libdl.dlopen_e\n@deprecate dlsym        Libdl.dlsym\n@deprecate dlsym_e      Libdl.dlsym_e\n@deprecate find_library Libdl.find_library\n\n@deprecate cholfact(A::AbstractMatrix, \u03b2::Number) cholfact(A, shift=\u03b2)\n@deprecate ldltfact(A::AbstractMatrix, \u03b2::Number) ldltfact(A, shift=\u03b2)\n\n@deprecate with_env(f::Function, key::AbstractString, val) withenv(f, key=>val)\n\n@deprecate ntuple(n::Integer, f::Function) ntuple(f, n)\n\n# 0.4 discontinued functions\n\n@noinline function subtypetree(x::DataType, level=-1)\n    depwarn(\"`subtypetree` is discontinued\", :subtypetree)\n    (level == 0 ? (x, []) : (x, Any[subtypetree(y, level-1) for y in subtypes(x)]))\nend\n\n@noinline function unsafe_convert{P}(::Type{P}, x)\n    P<:Ptr || throw(MethodError(unsafe_convert, (Type{P}, x)))\n    ret = convert(P, x) # attempt the call first, so we only print the depwarn if it can even succeed\n    depwarn(\"convert(::Type{Ptr}, ::$(typeof(x))) methods should be converted to be methods of unsafe_convert\", :unsafe_convert)\n    return ret\nend\n\n@noinline function convert{T}(::Type{Ptr{T}}, x::Integer)\n    depwarn(\"converting integers to pointers is discontinued\", :convert)\n    box(Ptr{T},unbox(UInt,UInt(x)))\nend\n@noinline function convert{T}(::Type{Ptr{T}}, x::Signed)\n    depwarn(\"converting signed numbers to pointers is discontinued\", :convert)\n    box(Ptr{T},unbox(Int,Int(x)))\nend\n\n# 8898\n@deprecate precision(x::DateTime) eps(x)\n@deprecate precision(x::Date) eps(x)\n\n@deprecate names(t::DataType) fieldnames(t)\n@deprecate names(v) fieldnames(v)\n\n@noinline function push!(A)\n    depwarn(\"push!(A) has been deprecated\", :push!)\n    A\nend\n\n# 10458\nto_index_nodep(i::Real) = convert(Int,i)::Int\n\n@noinline function to_index(i::Real)\n    depwarn(\"Indexing with non-Integer Reals is deprecated.  It may be that your index arose from an integer division of the form i/j, in which case you should consider using i\u00f7j or div(i,j) instead.\", :to_index)\n    to_index_nodep(i)\nend\n\nto_index{T<:Integer}(A::AbstractArray{T}) = A\n@noinline function to_index{T<:Real}(A::AbstractArray{T})\n    depwarn(\"indexing with non Integer AbstractArrays is deprecated\", :to_index)\n    Int[to_index_nodep(x) for x in A]\nend\n\n@noinline function to_index(I::Tuple)\n    depwarn(\"to_index(I::Tuple) is deprecated, use to_indexes(I...) instead.\", :to_index)\n    to_indexes(I...)\nend\n\n@deprecate getindex(c::Char, I::Real...) getindex(c, map(Int, I)...)\n@deprecate getindex(s::AbstractString, x::Real) getindex(s, Int(x))\n@deprecate checkbounds(s::AbstractString, i::Real) checkbounds(s, Int(i))\n\n@noinline function float_isvalid{T<:Union{Float32,Float64}}(s::AbstractString, out::Array{T,1})\n    tf = tryparse(T, s)\n    isnull(tf) || (out[1] = get(tf))\n    !isnull(tf)\nend\n\n@noinline function float32_isvalid(s::AbstractString, out::Array{Float32,1})\n    depwarn(\"float32_isvalid is deprecated, use tryparse(Float32,s) instead\", :float32_isvalid)\n    float_isvalid(s, out)\nend\n\n@noinline function float64_isvalid(s::AbstractString, out::Array{Float64,1})\n    depwarn(\"float64_isvalid is deprecated, use tryparse(Float64,s) instead\", :float64_isvalid)\n    float_isvalid(s, out)\nend\n\nexport float32_isvalid, float64_isvalid\n\n@deprecate parsefloat(s::AbstractString) parse(Float64,s)\n@deprecate parsefloat(T, s)              parse(T, s)\n\n@deprecate parseint(s)                parse(Int, s)\n@deprecate parseint(s,base)           parse(Int, s, base)\n@deprecate parseint(T::Type, s)       parse(T, s)\n@deprecate parseint(T::Type, s, base) parse(T, s, base)\n\n@deprecate linrange linspace\n\n@deprecate BigFloat(s::AbstractString) parse(BigFloat,s)\n@deprecate BigInt(s::AbstractString) parse(BigInt,s)\n\n@deprecate (~)(x::Char)           Char(~UInt32(x))\n@deprecate (&)(x::Char, y::Char)  Char(UInt32(x) & UInt32(y))\n@deprecate (|)(x::Char, y::Char)  Char(UInt32(x) | UInt32(y))\n@deprecate ($)(x::Char, y::Char)  Char(UInt32(x) $ UInt32(y))\n\n# 11241\n@deprecate is_valid_char(ch::Char)          isvalid(ch)\n@deprecate is_valid_ascii(str::ASCIIString) isvalid(str)\n@deprecate is_valid_utf8(str::UTF8String)   isvalid(str)\n@deprecate is_valid_utf16(str::UTF16String) isvalid(str)\n@deprecate is_valid_utf32(str::UTF32String) isvalid(str)\n@deprecate is_valid_char(ch)   isvalid(Char, ch)\n@deprecate is_valid_ascii(str) isvalid(ASCIIString, str)\n@deprecate is_valid_utf8(str)  isvalid(UTF8String, str)\n@deprecate is_valid_utf16(str) isvalid(UTF16String, str)\n@deprecate is_valid_utf32(str) isvalid(UTF32String, str)\n\n# 11379\n@deprecate utf32(c::Integer...)   UTF32String(UInt32[c...,0])\n\n# 12087\n@deprecate call(P::Base.DFT.Plan, A) P * A\nfor f in (:plan_fft, :plan_ifft, :plan_bfft, :plan_fft!, :plan_ifft!, :plan_bfft!, :plan_rfft)\n    @eval @deprecate $f(A, dims, flags) $f(A, dims; flags=flags)\n    @eval @deprecate $f(A, dims, flags, tlim) $f(A, dims; flags=flags, timelimit=tlim)\nend\nfor f in (:plan_brfft, :plan_irfft)\n    @eval @deprecate $f(A, d, dims, flags) $f(A, d, dims; flags=flags)\n    @eval @deprecate $f(A, d, dims, flags, tlim) $f(A, d, dims; flags=flags, timelimit=tlim)\nend\n\n# 10862\n\n@noinline function chol(A::AbstractMatrix, uplo::Symbol)\n    depwarn(string(\"chol(a::AbstractMatrix, uplo::Symbol) is deprecated, \",\n        \"use chol(a::AbstractMatrix, uplo::Union{Val{:L},Val{:U}}) instead\"), :chol)\n    chol(A, Val{uplo})\nend\n\n# 11554\n\nread!(from::AbstractIOBuffer, p::Ptr, nb::Integer) = read!(from, p, Int(nb))\nfunction read!(from::AbstractIOBuffer, p::Ptr, nb::Int)\n    depwarn(\"read!(::IOBuffer, ::Ptr) is unsafe and therefore deprecated\", :read!)\n    from.readable || throw(ArgumentError(\"read failed, IOBuffer is not readable\"))\n    avail = nb_available(from)\n    adv = min(avail, nb)\n    ccall(:memcpy, Ptr{Void}, (Ptr{Void}, Ptr{Void}, UInt), p, pointer(from.data, from.ptr), adv)\n    from.ptr += adv\n    if nb > avail\n        throw(EOFError())\n    end\n    p\nend\n\n@deprecate gc_enable() gc_enable(true)\n@deprecate gc_disable() gc_enable(false)\n\n@deprecate stop_timer close\n\nfunction Timer(f::Function)\n    error(\"Timer(f) is deprecated. Use Timer(f, delay, repeat) instead.\")\nend\n\nfunction start_timer(t, d, r)\n    error(\"start_timer is deprecated. Use Timer(callback, delay, repeat) instead.\")\nend\n\n@deprecate_binding UnionType Union\n\n@deprecate_binding MathConst Irrational\n\nmacro math_const(sym, val, def)\n    depwarn(\"@math_const is deprecated and renamed to @irrational.\", symbol(\"@math_const\"))\n    :(@irrational $(esc(sym)) $(esc(val)) $(esc(def)))\nend\nexport @math_const\n\n# 11280, mmap\n\nexport msync\nmsync{T}(A::Array{T}) = msync(pointer(A), length(A)*sizeof(T))\nmsync(B::BitArray) = msync(pointer(B.chunks), length(B.chunks)*sizeof(UInt64))\n\n@unix_only begin\nexport mmap\n@noinline function mmap(len::Integer, prot::Integer, flags::Integer, fd, offset::Integer)\n    depwarn(\"`mmap` is deprecated, use `Mmap.mmap(io, Array{T,N}, dims, offset)` instead to return an mmapped-array\", :mmap)\n    const pagesize::Int = ccall(:jl_getpagesize, Clong, ())\n    # Check that none of the computations will overflow\n    if len < 0\n        throw(ArgumentError(\"requested size must be \u2265 0, got $len\"))\n    end\n    if len > typemax(Int)-pagesize\n        throw(ArgumentError(\"requested size must be \u2264 $(typemax(Int)-pagesize), got $len\"))\n    end\n    # Set the offset to a page boundary\n    offset_page::FileOffset = floor(Integer,offset/pagesize)*pagesize\n    len_page::Int = (offset-offset_page) + len\n    # Mmap the file\n    p = ccall(:jl_mmap, Ptr{Void}, (Ptr{Void}, Csize_t, Cint, Cint, Cint, FileOffset), C_NULL, len_page, prot, flags, fd, offset_page)\n    systemerror(\"memory mapping failed\", reinterpret(Int,p) == -1)\n    # Also return a pointer that compensates for any adjustment in the offset\n    return p, Int(offset-offset_page)\nend\n\n@noinline function munmap(p::Ptr,len::Integer)\n    depwarn(\"`munmap` is deprecated, `mmap` Arrays are automatically munmapped when finalized\", :munmap)\n    systemerror(\"munmap\", ccall(:munmap,Cint,(Ptr{Void},Int),p,len) != 0)\nend\n\nconst MS_ASYNC = 1\nconst MS_INVALIDATE = 2\nconst MS_SYNC = 4\n@noinline function msync(p::Ptr, len::Integer, flags::Integer=MS_SYNC)\n    depwarn(\"`msync` is deprecated, use `Mmap.sync!(array)` instead\", :msync)\n    systemerror(\"msync\", ccall(:msync, Cint, (Ptr{Void}, Csize_t, Cint), p, len, flags) != 0)\nend\nend\n\n\n@windows_only begin\n@noinline function munmap(viewhandle::Ptr, mmaphandle::Ptr)\n    depwarn(\"`munmap` is deprecated, `mmap` Arrays are automatically munmapped when finalized\", :munmap)\n    status = ccall(:UnmapViewOfFile, stdcall, Cint, (Ptr{Void},), viewhandle)!=0\n    status |= ccall(:CloseHandle, stdcall, Cint, (Ptr{Void},), mmaphandle)!=0\n    if !status\n        error(\"could not unmap view: $(Libc.FormatMessage())\")\n    end\nend\n\n@noinline function msync(p::Ptr, len::Integer)\n    depwarn(\"`msync` is deprecated, use `Mmap.sync!(array)` instead\", :msync)\n    status = ccall(:FlushViewOfFile, stdcall, Cint, (Ptr{Void}, Csize_t), p, len)!=0\n    if !status\n        error(\"could not msync: $(Libc.FormatMessage())\")\n    end\nend\n\nend\n\n@unix_only @deprecate mmap_array{T,N}(::Type{T}, dims::NTuple{N,Integer}, s::IO, offset=position(s)) Mmap.mmap(s, Array{T,N}, dims, offset)\n\n@windows_only begin\ntype SharedMemSpec\n    name :: AbstractString\n    readonly :: Bool\n    create :: Bool\nend\nexport mmap_array\n@noinline function mmap_array{T,N}(::Type{T}, dims::NTuple{N,Integer}, s::Union{IO,SharedMemSpec}, offset::FileOffset)\n    depwarn(\"`mmap_array` is deprecated, use `Mmap.mmap(io, Array{T,N}, dims, offset)` instead to return an mmapped-array\", :mmap_array)\n    if isa(s,SharedMemSpec)\n        a = Mmap.Anonymous(s.name, s.readonly, s.create)\n    else\n        a = s\n    end\n    return Mmap.mmap(a, Array{T,N}, dims, offset)\nend\nend\n\n@deprecate mmap_bitarray{N}(::Type{Bool}, dims::NTuple{N,Integer}, s::IOStream, offset::FileOffset=position(s)) mmap(s, BitArray, dims, offset)\n@deprecate mmap_bitarray{N}(dims::NTuple{N,Integer}, s::IOStream, offset=position(s)) mmap(s, BitArray, dims, offset)\n\n# T[a:b] and T[a:s:b]\n@noinline function getindex{T<:Union{Char,Number}}(::Type{T}, r::Range)\n    depwarn(\"T[a:b] concatenation is deprecated; use T[a:b;] instead\", :getindex)\n    copy!(Array(T,length(r)), r)\nend\n\n@noinline function getindex{T<:Union{Char,Number}}(::Type{T}, r1::Range, rs::Range...)\n    depwarn(\"T[a:b,...] concatenation is deprecated; use T[a:b;...] instead\", :getindex)\n    a = Array(T,length(r1)+sum(length,rs))\n    o = 1\n    copy!(a, o, r1)\n    o += length(r1)\n    for r in rs\n        copy!(a, o, r)\n        o += length(r)\n    end\n    return a\nend\n\n## require ##\n\nfunction maybe_require_file(name::AbstractString)\n    isabspath(name) && return name\n    isfile(name) && return abspath(name)\n    if !endswith(name,\".jl\")\n        fname = string(name,\".jl\")\n        isfile(fname) && return abspath(fname)\n    end\n    return name\nend\n\ninclude(\"require.jl\")\n@noinline function require(f::AbstractString)\n    depwarn(\"`require` is deprecated, use `using` or `import` instead\", :require)\n    if endswith(f,\".jl\") || contains(f,path_separator)\n        # specifying file path\n        OldRequire.require(f)\n    else\n        # require(\"Foo\") --- ambiguous. might be file or package\n        filename = maybe_require_file(f)\n        if filename == f\n            mod = symbol(require_modname(f))\n            M = current_module()\n            if isdefined(M,mod) && isa(eval(M,mod),Module)\n                return\n            end\n            require(mod)\n        else\n            OldRequire.require(f)\n        end\n    end\nend\n@noinline function require(f::AbstractString, fs::AbstractString...)\n    require(f)\n    for fn in fs\n        require(fn)\n    end\nend\nexport require\n\n## ropes for efficient concatenation, etc. ##\n\nimmutable RopeString <: AbstractString\n    head::AbstractString\n    tail::AbstractString\n    depth::Int32\n    endof::Int\n\n    @inline function _new(h, t, d, e)\n        depwarn(\"`RopeString` is deprecated, use `string` instead\", :RopeString)\n        new(h, t, d, e)\n    end\n\n    @noinline RopeString(h::RopeString, t::RopeString) =\n        strdepth(h.tail) + strdepth(t) < strdepth(h.head) ?\n            RopeString(h.head, RopeString(h.tail, t)) :\n            _new(h, t, max(h.depth,t.depth)+1, endof(h)+endof(t))\n\n    @noinline RopeString(h::RopeString, t::AbstractString) =\n        strdepth(h.tail) < strdepth(h.head) ?\n            RopeString(h.head, RopeString(h.tail, t)) :\n            _new(h, t, h.depth+1, endof(h)+endof(t))\n\n    @noinline RopeString(h::AbstractString, t::RopeString) =\n        strdepth(t.head) < strdepth(t.tail) ?\n            RopeString(RopeString(h, t.head), t.tail) :\n            _new(h, t, t.depth+1, endof(h)+endof(t))\n\n    @noinline RopeString(h::AbstractString, t::AbstractString) =\n        _new(h, t, 1, endof(h)+endof(t))\nend\nRopeString(s::AbstractString) = RopeString(s,\"\")\n\nstrdepth(s::AbstractString) = 0\nstrdepth(s::RopeString) = s.depth\n\nfunction next(s::RopeString, i::Int)\n    eh = endof(s.head)\n    if i <= eh\n        return next(s.head, i)\n    else\n        c, j = next(s.tail, i-eh)\n        return c, j+eh\n    end\nend\n\nendof(s::RopeString) = s.endof\nlength(s::RopeString) = length(s.head) + length(s.tail)\nwrite(io::IO, s::RopeString) = (write(io, s.head); write(io, s.tail))\nsizeof(s::RopeString) = sizeof(s.head) + sizeof(s.tail)\n\nexport RopeString\n\n@noinline function complement!(s::IntSet)\n    depwarn(\"complement IntSets are deprecated\", :complement!);\n    for n = 1:length(s.bits)\n        s.bits[n] = ~s.bits[n]\n    end\n    s.fill1s = !s.fill1s\n    s\nend\n@noinline complement(s::IntSet) = complement!(copy(s))\nexport complement, complement!\n\n\n# 11774\n# when removing these deprecations, move them to reduce.jl, remove the depwarns and uncomment the errors.\n\nnonboolean_warning(f, op, status) = \"\"\"\n\n    Using non-boolean collections with $f(itr) is $status, use reduce($op, itr) instead.\n    If you are using $f(map(f, itr)) or $f([f(x) for x in itr]), use $f(f, itr) instead.\n\"\"\"\n\n\n@noinline function nonboolean_any(itr)\n    depwarn(nonboolean_warning(:any, :|, \"deprecated\"), :nonboolean_any)\n    #throw(ArgumentError(nonboolean_warning(:any, :|, \"not supported\")))\n    reduce(|, itr)\nend\n\n@noinline function nonboolean_all(itr)\n    depwarn(nonboolean_warning(:all, :&, \"deprecated\"), :nonboolean_all)\n    #throw(ArgumentError(nonboolean_warning(:all, :&, \"not supported\")))\n    reduce(&, itr)\nend\n\n@deprecate iseltype(x,T)  eltype(x) <: T\n\n@deprecate_binding FloatingPoint AbstractFloat\n\n# 11447\n\n@noinline function Regex(pattern::AbstractString, options::Integer)\n    flags = string([opt & options != 0? flag : \"\"\n        for (opt,flag) in [\n            (PCRE.CASELESS,  \"i\"),\n            (PCRE.MULTILINE, \"m\"),\n            (PCRE.DOTALL,    \"s\"),\n            (PCRE.EXTENDED,  \"x\")\n        ]\n    ]...)\n    depwarn(\"Constructing regexes with integer flags is deprecated, \"*\n            \"use string flags instead: Regex(\\\"$pattern\\\", \\\"$flags\\\").\", :Regex)\n    Regex(pattern, flags)\nend\n\n@deprecate cartesianmap(f, dims) for idx in CartesianRange(dims); f(idx.I...); end\n\n@deprecate Union(args...) Union{args...}\n\n# 12839\nconst AsyncStream = IO\ndeprecate(:AsyncStream)\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/base/sparse/cholmod.jl": "# This file is a part of Julia. License is MIT: http://julialang.org/license\n\nmodule CHOLMOD\n\nimport Base: (*), convert, copy, eltype, get, getindex, show, showarray, size,\n             linearindexing, LinearFast, LinearSlow, ctranspose\n\nimport Base.LinAlg: (\\), A_mul_Bc, A_mul_Bt, Ac_ldiv_B, Ac_mul_B, At_ldiv_B, At_mul_B,\n                 cholfact, det, diag, ishermitian, isposdef,\n                 issym, ldltfact, logdet\n\nimport Base.SparseMatrix: sparse, nnz\n\nexport\n    Dense,\n    Factor,\n    Sparse\n\nusing Base.SparseMatrix: AbstractSparseMatrix, SparseMatrixCSC, increment, indtype\n\n#########\n# Setup #\n#########\n\ninclude(\"cholmod_h.jl\")\n\nconst CHOLMOD_MIN_VERSION = v\"2.1.1\"\n\n### These offsets are defined in SuiteSparse_wrapper.c\nconst common_size = ccall((:jl_cholmod_common_size,:libsuitesparse_wrapper),Int,())\n\nconst cholmod_com_offsets = Array(Csize_t, 19)\nccall((:jl_cholmod_common_offsets, :libsuitesparse_wrapper),\n    Void, (Ptr{Csize_t},), cholmod_com_offsets)\n\n## macro to generate the name of the C function according to the integer type\nmacro cholmod_name(nm,typ) string(\"cholmod_\", eval(typ) == SuiteSparse_long ? \"l_\" : \"\", nm) end\n\nfunction start(a::Vector{UInt8})\n    @isok ccall((@cholmod_name(\"start\", SuiteSparse_long), :libcholmod),\n        Cint, (Ptr{UInt8},), a)\n    return a\nend\n\nfunction finish(a::Vector{UInt8})\n    @isok ccall((@cholmod_name(\"finish\", SuiteSparse_long), :libcholmod),\n        Cint, (Ptr{UInt8},), a)\n    return a\nend\n\nfunction defaults(a::Vector{UInt8})\n    @isok ccall((@cholmod_name(\"defaults\", SuiteSparse_long), :libcholmod),\n        Cint, (Ptr{UInt8},), a)\n    return a\nend\n\ncommon() = commonStruct\n\nconst build_version_array = Array(Cint, 3)\nccall((:jl_cholmod_version, :libsuitesparse_wrapper), Cint, (Ptr{Cint},), build_version_array)\nconst build_version = VersionNumber(build_version_array...)\n\nfunction __init__()\n    try\n        ### Check if the linked library is compatible with the Julia code\n        if Libdl.dlsym_e(Libdl.dlopen(\"libcholmod\"), :cholmod_version) != C_NULL\n            current_version_array = Array(Cint, 3)\n            ccall((:cholmod_version, :libcholmod), Cint, (Ptr{Cint},), current_version_array)\n            current_version = VersionNumber(current_version_array...)\n        else # CHOLMOD < 2.1.1 does not include cholmod_version()\n            current_version = v\"0.0.0\"\n        end\n\n\n        if current_version < CHOLMOD_MIN_VERSION\n            warn(\"\"\"\n\n                CHOLMOD version incompatibility\n\n                Julia was compiled with CHOLMOD version $build_version. It is\n                currently linked with a version older than\n                $(CHOLMOD_MIN_VERSION). This might cause Julia to\n                terminate when working with sparse matrix factorizations,\n                e.g. solving systems of equations with \\\\.\n\n                It is recommended that you use Julia with a recent version\n                of CHOLMOD, or download the generic binaries\n                from www.julialang.org, which ship with the correct\n                versions of all dependencies.\n            \"\"\")\n        elseif build_version_array[1] != current_version_array[1]\n            warn(\"\"\"\n\n                CHOLMOD version incompatibility\n\n                Julia was compiled with CHOLMOD version $build_version. It is\n                currently linked with version $current_version.\n                This might cause Julia to terminate when working with\n                sparse matrix factorizations, e.g. solving systems of\n                equations with \\\\.\n\n                It is recommended that you use Julia with the same major\n                version of CHOLMOD as the one used during the build, or\n                download the generic binaries from www.julialang.org,\n                which ship with the correct versions of all dependencies.\n            \"\"\")\n        end\n\n        intsize = Int(ccall((:jl_cholmod_sizeof_long,:libsuitesparse_wrapper),Csize_t,()))\n        if intsize != 4length(IndexTypes)\n            warn(\"\"\"\n\n                 CHOLMOD integer size incompatibility\n\n                 Julia was compiled with a version of CHOLMOD that\n                 supported $(32length(IndexTypes)) bit integers. It is\n                 currently linked with version that supports $(8intsize)\n                 integers. This might cause Julia to terminate when\n                 working with sparse matrix factorizations, e.g. solving\n                 systems of equations with \\\\.\n\n                 This problem can be fixed by modifying the Julia build\n                 configuration or by downloading the OS X or generic\n                 Linux binary from www.julialang.org, which include\n                 the correct versions of all dependencies.\n             \"\"\")\n        end\n\n        ### Initiate CHOLMOD\n        ### The common struct. Controls the type of factorization and keeps pointers\n        ### to temporary memory.\n        global const commonStruct = fill(0xff, common_size)\n\n        global const common_supernodal =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[4] + 1))\n        global const common_final_ll =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[7] + 1))\n        global const common_print =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[13] + 1))\n        global const common_itype =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[18] + 1))\n        global const common_dtype =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[19] + 1))\n        global const common_nmethods =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[15] + 1))\n        global const common_postorder =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[17] + 1))\n\n        start(commonStruct)              # initializes CHOLMOD\n        set_print_level(commonStruct, 0) # no printing from CHOLMOD by default\n\n        # Register gc tracked allocator if CHOLMOD is new enough\n        if current_version >= v\"3.0.0\"\n            cnfg = cglobal((:SuiteSparse_config, :libsuitesparseconfig), Ptr{Void})\n            unsafe_store!(cnfg, cglobal(:jl_malloc, Ptr{Void}), 1)\n            unsafe_store!(cnfg, cglobal(:jl_calloc, Ptr{Void}), 2)\n            unsafe_store!(cnfg, cglobal(:jl_realloc, Ptr{Void}), 3)\n            unsafe_store!(cnfg, cglobal(:jl_free, Ptr{Void}), 4)\n        end\n\n    catch ex\n        Base.showerror_nostdio(ex,\n            \"WARNING: Error during initialization of module CHOLMOD\")\n    end\nend\n\nfunction set_print_level(cm::Array{UInt8}, lev::Integer)\n    global common_print\n    unsafe_store!(common_print, lev)\nend\n\n####################\n# Type definitions #\n####################\n\nabstract SuiteSparseStruct\n\n# The three core data types for CHOLMOD: Dense, Sparse and Factor.\n# CHOLMOD manages the memory, so the Julia versions only wrap a\n# pointer to a struct.  Therefore finalizers should be registered each\n# time a pointer is returned from CHOLMOD.\n\n# Dense\nimmutable C_Dense{T<:VTypes} <: SuiteSparseStruct\n    nrow::Csize_t\n    ncol::Csize_t\n    nzmax::Csize_t\n    d::Csize_t\n    x::Ptr{T}\n    z::Ptr{Void}\n    xtype::Cint\n    dtype::Cint\nend\n\ntype Dense{T<:VTypes} <: DenseMatrix{T}\n    p::Ptr{C_Dense{T}}\nend\n\n# Sparse\nimmutable C_Sparse{Tv<:VTypes} <: SuiteSparseStruct\n    nrow::Csize_t\n    ncol::Csize_t\n    nzmax::Csize_t\n    p::Ptr{SuiteSparse_long}\n    i::Ptr{SuiteSparse_long}\n    nz::Ptr{SuiteSparse_long}\n    x::Ptr{Tv}\n    z::Ptr{Void}\n    stype::Cint\n    itype::Cint\n    xtype::Cint\n    dtype::Cint\n    sorted::Cint\n    packed::Cint\nend\n\n# Corresponds to the exact definition of cholmod_sparse_struct in the library.\n# Useful when reading matrices of unknown type from files as in\n# cholmod_read_sparse\nimmutable C_SparseVoid <: SuiteSparseStruct\n    nrow::Csize_t\n    ncol::Csize_t\n    nzmax::Csize_t\n    p::Ptr{Void}\n    i::Ptr{Void}\n    nz::Ptr{Void}\n    x::Ptr{Void}\n    z::Ptr{Void}\n    stype::Cint\n    itype::Cint\n    xtype::Cint\n    dtype::Cint\n    sorted::Cint\n    packed::Cint\nend\n\ntype Sparse{Tv<:VTypes} <: AbstractSparseMatrix{Tv,SuiteSparse_long}\n    p::Ptr{C_Sparse{Tv}}\n    function Sparse(p::Ptr{C_Sparse{Tv}})\n        if p == C_NULL\n            throw(ArgumentError(\"sparse matrix construction failed for unknown reasons. Please submit a bug report.\"))\n        end\n        new(p)\n    end\nend\nSparse{Tv<:VTypes}(p::Ptr{C_Sparse{Tv}}) = Sparse{Tv}(p)\n\n# Factor\n\nif build_version >= v\"2.1.0\" # CHOLMOD version 2.1.0 or later\n    immutable C_Factor{Tv<:VTypes} <: SuiteSparseStruct\n        n::Csize_t\n        minor::Csize_t\n        Perm::Ptr{SuiteSparse_long}\n        ColCount::Ptr{SuiteSparse_long}\n        IPerm::Ptr{SuiteSparse_long}        # this pointer was added in verison 2.1.0\n        nzmax::Csize_t\n        p::Ptr{SuiteSparse_long}\n        i::Ptr{SuiteSparse_long}\n        x::Ptr{Tv}\n        z::Ptr{Void}\n        nz::Ptr{SuiteSparse_long}\n        next::Ptr{SuiteSparse_long}\n        prev::Ptr{SuiteSparse_long}\n        nsuper::Csize_t\n        ssize::Csize_t\n        xsize::Csize_t\n        maxcsize::Csize_t\n        maxesize::Csize_t\n        super::Ptr{SuiteSparse_long}\n        pi::Ptr{SuiteSparse_long}\n        px::Ptr{SuiteSparse_long}\n        s::Ptr{SuiteSparse_long}\n        ordering::Cint\n        is_ll::Cint\n        is_super::Cint\n        is_monotonic::Cint\n        itype::Cint\n        xtype::Cint\n        dtype::Cint\n    end\nelse\n    immutable C_Factor{Tv<:VTypes} <: SuiteSparseStruct\n        n::Csize_t\n        minor::Csize_t\n        Perm::Ptr{SuiteSparse_long}\n        ColCount::Ptr{SuiteSparse_long}\n        nzmax::Csize_t\n        p::Ptr{SuiteSparse_long}\n        i::Ptr{SuiteSparse_long}\n        x::Ptr{Tv}\n        z::Ptr{Void}\n        nz::Ptr{SuiteSparse_long}\n        next::Ptr{SuiteSparse_long}\n        prev::Ptr{SuiteSparse_long}\n        nsuper::Csize_t\n        ssize::Csize_t\n        xsize::Csize_t\n        maxcsize::Csize_t\n        maxesize::Csize_t\n        super::Ptr{SuiteSparse_long}\n        pi::Ptr{SuiteSparse_long}\n        px::Ptr{SuiteSparse_long}\n        s::Ptr{SuiteSparse_long}\n        ordering::Cint\n        is_ll::Cint\n        is_super::Cint\n        is_monotonic::Cint\n        itype::Cint\n        xtype::Cint\n        dtype::Cint\n    end\nend\n\ntype Factor{Tv} <: Factorization{Tv}\n    p::Ptr{C_Factor{Tv}}\n    function Factor(p::Ptr{C_Factor{Tv}})\n        if p == C_NULL\n            throw(ArgumentError(\"factorization construction failed for unknown reasons. Please submit a bug report.\"))\n        end\n        new(p)\n    end\nend\nFactor{Tv<:VTypes}(p::Ptr{C_Factor{Tv}}) = Factor{Tv}(p)\n\n# Define get similar to get(Nullable) to check pointers. All pointer loads should be wrapped in get to make sure\n# that SuiteSparse is not called with a C_NULL pointer which could cause a segfault. Pointers are set to null\n# when serialized so this can happen when mutiple processes are in use.\nfunction get{T<:SuiteSparseStruct}(p::Ptr{T})\n    if p == C_NULL\n        throw(ArgumentError(\"pointer to the $T object is null. This can happen if the object has been serialized.\"))\n    else\n        return p\n    end\nend\n\n# FactorComponent, for encoding particular factors from a factorization\ntype FactorComponent{Tv,S} <: AbstractMatrix{Tv}\n    F::Factor{Tv}\n\n    function FactorComponent(F::Factor{Tv})\n        s = unsafe_load(get(F.p))\n        if s.is_ll != 0\n            S == :L || S == :U || S == :PtL || S == :UP || throw(CHOLMODException(string(S, \" not supported for sparse LLt matrices; try :L, :U, :PtL, or :UP\")))\n        else\n            S == :L || S == :U || S == :PtL || S == :UP ||\n            S == :D || S == :LD || S == :DU || S == :PtLD || S == :DUP ||\n            throw(CHOLMODException(string(S, \" not supported for sparse LDLt matrices; try :L, :U, :PtL, :UP, :D, :LD, :DU, :PtLD, or :DUP\")))\n        end\n        new(F)\n    end\nend\nfunction FactorComponent{Tv}(F::Factor{Tv}, sym::Symbol)\n    FactorComponent{Tv,sym}(F)\nend\n\nFactor(FC::FactorComponent) = Factor(FC.F)\n\n#################\n# Thin wrappers #\n#################\n\n# Dense wrappers\n## Note! Integer type defaults to Cint, but this is actually not necessary, but\n## making this a choice would require another type parameter in the Dense type\n\n### cholmod_core_h ###\nfunction allocate_dense(nrow::Integer, ncol::Integer, d::Integer, ::Type{Float64})\n    d = Dense(ccall((:cholmod_l_allocate_dense, :libcholmod), Ptr{C_Dense{Float64}},\n        (Csize_t, Csize_t, Csize_t, Cint, Ptr{Void}),\n        nrow, ncol, d, REAL, common()))\n    finalizer(d, free!)\n    d\nend\nfunction allocate_dense(nrow::Integer, ncol::Integer, d::Integer, ::Type{Complex{Float64}})\n    d = Dense(ccall((:cholmod_l_allocate_dense, :libcholmod), Ptr{C_Dense{Complex{Float64}}},\n        (Csize_t, Csize_t, Csize_t, Cint, Ptr{Void}),\n        nrow, ncol, d, COMPLEX, common()))\n    finalizer(d, free!)\n    d\nend\n\nfree_dense!{T}(p::Ptr{C_Dense{T}}) = ccall((:cholmod_l_free_dense, :libcholmod), Cint, (Ref{Ptr{C_Dense{T}}}, Ptr{Void}), p, common())\n\nfunction zeros{T<:VTypes}(m::Integer, n::Integer, ::Type{T})\n    d = Dense(ccall((:cholmod_l_zeros, :libcholmod), Ptr{C_Dense{T}},\n        (Csize_t, Csize_t, Cint, Ptr{UInt8}),\n         m, n, xtyp(T), common()))\n    finalizer(d, free!)\n    d\nend\nzeros(m::Integer, n::Integer) = zeros(m, n, Float64)\n\nfunction ones{T<:VTypes}(m::Integer, n::Integer, ::Type{T})\n    d = Dense(ccall((:cholmod_l_ones, :libcholmod), Ptr{C_Dense{T}},\n        (Csize_t, Csize_t, Cint, Ptr{UInt8}),\n         m, n, xtyp(T), common()))\n    finalizer(d, free!)\n    d\nend\nones(m::Integer, n::Integer) = ones(m, n, Float64)\n\nfunction eye{T<:VTypes}(m::Integer, n::Integer, ::Type{T})\n    d = Dense(ccall((:cholmod_l_eye, :libcholmod), Ptr{C_Dense{T}},\n        (Csize_t, Csize_t, Cint, Ptr{UInt8}),\n         m, n, xtyp(T), common()))\n    finalizer(d, free!)\n    d\nend\neye(m::Integer, n::Integer) = eye(m, n, Float64)\neye(n::Integer) = eye(n, n, Float64)\n\nfunction copy_dense{Tv<:VTypes}(A::Dense{Tv})\n    d = Dense(ccall((:cholmod_l_copy_dense, :libcholmod), Ptr{C_Dense{Tv}},\n        (Ptr{C_Dense{Tv}}, Ptr{UInt8}),\n         get(A.p), common()))\n    finalizer(d, free!)\n    d\nend\n\n### cholmod_matrixops.h ###\nfunction norm_dense{Tv<:VTypes}(D::Dense{Tv}, p::Integer)\n    s = unsafe_load(get(D.p))\n    if p == 2\n        if s.ncol > 1\n            throw(ArgumentError(\"2 norm only supported when matrix has one column\"))\n        end\n    elseif p != 0 && p != 1\n        throw(ArgumentError(\"second argument must be either 0 (Inf norm), 1, or 2\"))\n    end\n    ccall((:cholmod_l_norm_dense, :libcholmod), Cdouble,\n        (Ptr{C_Dense{Tv}}, Cint, Ptr{UInt8}),\n          get(D.p), p, common())\nend\n\n### cholmod_check.h ###\nfunction check_dense{T<:VTypes}(A::Dense{T})\n    ccall((:cholmod_l_check_dense, :libcholmod), Cint,\n          (Ptr{C_Dense{T}}, Ptr{UInt8}),\n          A.p, common())!=0\nend\n\n# Non-Dense wrappers\n### cholmod_core.h ###\nfunction allocate_sparse(nrow::Integer, ncol::Integer, nzmax::Integer, sorted::Bool, packed::Bool, stype::Integer, ::Type{Float64})\n    s = Sparse(ccall((@cholmod_name(\"allocate_sparse\", SuiteSparse_long), :libcholmod), Ptr{C_Sparse{Float64}},\n            (Csize_t, Csize_t, Csize_t, Cint,\n                Cint, Cint, Cint, Ptr{Void}),\n            nrow, ncol, nzmax, sorted,\n                packed, stype, REAL, common()))\n    finalizer(s, free!)\n    s\nend\nfunction allocate_sparse(nrow::Integer, ncol::Integer, nzmax::Integer, sorted::Bool, packed::Bool, stype::Integer, ::Type{Complex{Float64}})\n    s = Sparse(ccall((@cholmod_name(\"allocate_sparse\", SuiteSparse_long), :libcholmod),\n            Ptr{C_Sparse{Complex{Float64}}},\n                (Csize_t, Csize_t, Csize_t, Cint,\n                 Cint, Cint, Cint, Ptr{Void}),\n                nrow, ncol, nzmax, sorted,\n                packed, stype, COMPLEX, common()))\n    finalizer(s, free!)\n    s\nend\nfunction free_sparse!{Tv<:VTypes}(ptr::Ptr{C_Sparse{Tv}})\n    @isok ccall((@cholmod_name(\"free_sparse\", SuiteSparse_long), :libcholmod), Cint,\n            (Ptr{Ptr{C_Sparse{Tv}}}, Ptr{UInt8}),\n                &ptr, common())\nend\n\nfunction free_sparse!(ptr::Ptr{C_SparseVoid})\n    @isok ccall((@cholmod_name(\"free_sparse\", SuiteSparse_long), :libcholmod), Cint,\n            (Ptr{Ptr{C_SparseVoid}}, Ptr{UInt8}),\n                &ptr, common())\nend\n\nfunction free_factor!{Tv<:VTypes}(ptr::Ptr{C_Factor{Tv}})\n    # Warning! Important that finalizer doesn't modify the global Common struct.\n    @isok ccall((@cholmod_name(\"free_factor\", SuiteSparse_long), :libcholmod), Cint,\n            (Ptr{Ptr{C_Factor{Tv}}}, Ptr{Void}),\n                &ptr, common())\nend\n\nfunction aat{Tv<:VRealTypes}(A::Sparse{Tv}, fset::Vector{SuiteSparse_long}, mode::Integer)\n    s = Sparse(ccall((@cholmod_name(\"aat\", SuiteSparse_long), :libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{SuiteSparse_long}, Csize_t, Cint, Ptr{UInt8}),\n                get(A.p), fset, length(fset), mode, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction sparse_to_dense{Tv<:VTypes}(A::Sparse{Tv})\n    d = Dense(ccall((@cholmod_name(\"sparse_to_dense\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Dense{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(A.p), common()))\n    finalizer(d, free!)\n    d\nend\nfunction dense_to_sparse{Tv<:VTypes}(D::Dense{Tv}, ::Type{SuiteSparse_long})\n    s = Sparse(ccall((@cholmod_name(\"dense_to_sparse\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Dense{Tv}}, Cint, Ptr{UInt8}),\n                get(D.p), true, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction factor_to_sparse!{Tv<:VTypes}(F::Factor{Tv})\n    ss = unsafe_load(F.p)\n    ss.xtype > PATTERN || throw(CHOLMODException(\"only numeric factors are supported\"))\n    s = Sparse(ccall((@cholmod_name(\"factor_to_sparse\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n                get(F.p), common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction change_factor!{Tv<:VTypes}(::Type{Float64}, to_ll::Bool, to_super::Bool, to_packed::Bool, to_monotonic::Bool, F::Factor{Tv})\n    @isok ccall((@cholmod_name(\"change_factor\", SuiteSparse_long),:libcholmod), Cint,\n            (Cint, Cint, Cint, Cint, Cint, Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n                REAL, to_ll, to_super, to_packed, to_monotonic, get(F.p), common())\n    Factor{Float64}(F.p)\nend\n\nfunction change_factor!{Tv<:VTypes}(::Type{Complex{Float64}}, to_ll::Bool, to_super::Bool, to_packed::Bool, to_monotonic::Bool, F::Factor{Tv})\n    @isok ccall((@cholmod_name(\"change_factor\", SuiteSparse_long),:libcholmod), Cint,\n            (Cint, Cint, Cint, Cint, Cint, Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n                COMPLEX, to_ll, to_super, to_packed, to_monotonic, get(F.p), common())\n    Factor{Complex{Float64}}(F.p)\nend\n\nfunction check_sparse{Tv<:VTypes}(A::Sparse{Tv})\n    ccall((@cholmod_name(\"check_sparse\", SuiteSparse_long),:libcholmod), Cint,\n          (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n          get(A.p), common())!=0\nend\n\nfunction check_factor{Tv<:VTypes}(F::Factor{Tv})\n    ccall((@cholmod_name(\"check_factor\", SuiteSparse_long),:libcholmod), Cint,\n          (Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n          get(F.p), common())!=0\nend\n\nfunction nnz{Tv<:VTypes}(A::Sparse{Tv})\n    ccall((@cholmod_name(\"nnz\", SuiteSparse_long),:libcholmod), Int,\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(A.p), common())\nend\n\nfunction speye{Tv<:VTypes}(m::Integer, n::Integer, ::Type{Tv})\n    s = Sparse(ccall((@cholmod_name(\"speye\", SuiteSparse_long), :libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Csize_t, Csize_t, Cint, Ptr{UInt8}),\n                m, n, xtyp(Tv), common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction spzeros{Tv<:VTypes}(m::Integer, n::Integer, nzmax::Integer, ::Type{Tv})\n    s = Sparse(ccall((@cholmod_name(\"spzeros\", SuiteSparse_long), :libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Csize_t, Csize_t, Csize_t, Cint, Ptr{UInt8}),\n             m, n, nzmax, xtyp(Tv), common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction transpose_{Tv<:VTypes}(A::Sparse{Tv}, values::Integer)\n    s = Sparse(ccall((@cholmod_name(\"transpose\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Cint, Ptr{UInt8}),\n                get(A.p), values, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction copy_factor{Tv<:VTypes}(F::Factor{Tv})\n    f = Factor(ccall((@cholmod_name(\"copy_factor\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Factor{Tv}},\n            (Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n                get(F.p), common()))\n    finalizer(f, free!)\n    f\nend\nfunction copy_sparse{Tv<:VTypes}(A::Sparse{Tv})\n    s = Sparse(ccall((@cholmod_name(\"copy_sparse\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(A.p), common()))\n    finalizer(s, free!)\n    s\nend\nfunction copy{Tv<:VRealTypes}(A::Sparse{Tv}, stype::Integer, mode::Integer)\n    s = Sparse(ccall((@cholmod_name(\"copy\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Cint, Cint, Ptr{UInt8}),\n                get(A.p), stype, mode, common()))\n    finalizer(s, free!)\n    s\nend\n\n### cholmod_check.h ###\nfunction print_sparse{Tv<:VTypes}(A::Sparse{Tv}, name::ASCIIString)\n    cm = common()\n    set_print_level(cm, 3)\n    @isok ccall((@cholmod_name(\"print_sparse\", SuiteSparse_long),:libcholmod), Cint,\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}, Ptr{UInt8}),\n                 get(A.p), name, cm)\n    nothing\nend\nfunction print_factor{Tv<:VTypes}(F::Factor{Tv}, name::ASCIIString)\n    cm = common()\n    set_print_level(cm, 3)\n    @isok ccall((@cholmod_name(\"print_factor\", SuiteSparse_long),:libcholmod), Cint,\n            (Ptr{C_Factor{Tv}}, Ptr{UInt8}, Ptr{UInt8}),\n                get(F.p), name, cm)\n    nothing\nend\n\n### cholmod_matrixops.h ###\nfunction ssmult{Tv<:VRealTypes}(A::Sparse{Tv}, B::Sparse{Tv}, stype::Integer, values::Bool, sorted::Bool)\n    lA = unsafe_load(get(A.p))\n    lB = unsafe_load(get(B.p))\n    if lA.ncol != lB.nrow\n        throw(DimensionMismatch(\"inner matrix dimensions do not fit\"))\n    end\n    s = Sparse(ccall((@cholmod_name(\"ssmult\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{C_Sparse{Tv}}, Cint, Cint,\n                Cint, Ptr{UInt8}),\n             get(A.p), get(B.p), stype, values,\n                sorted, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction norm_sparse{Tv<:VTypes}(A::Sparse{Tv}, norm::Integer)\n    if norm != 0 && norm != 1\n        throw(ArgumentError(\"norm argument must be either 0 or 1\"))\n    end\n    ccall((@cholmod_name(\"norm_sparse\", SuiteSparse_long), :libcholmod), Cdouble,\n            (Ptr{C_Sparse{Tv}}, Cint, Ptr{UInt8}),\n                get(A.p), norm, common())\nend\n\nfunction horzcat{Tv<:VRealTypes}(A::Sparse{Tv}, B::Sparse{Tv}, values::Bool)\n    s = Sparse(ccall((@cholmod_name(\"horzcat\", SuiteSparse_long), :libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{C_Sparse{Tv}}, Cint, Ptr{UInt8}),\n             get(A.p), get(B.p), values, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction scale!{Tv<:VRealTypes}(S::Dense{Tv}, scale::Integer, A::Sparse{Tv})\n    sS = unsafe_load(get(S.p))\n    sA = unsafe_load(get(A.p))\n    sS.ncol == 1 || sS.nrow == 1 || throw(DimensionMismatch(\"first argument must be a vector\"))\n    if scale == SCALAR && sS.nrow != 1\n        throw(DimensionMismatch(\"scaling argument must have length one\"))\n    elseif scale == ROW && sS.nrow*sS.ncol != sA.nrow\n        throw(DimensionMismatch(\"scaling vector has length $(sS.nrow*sS.ncol), but matrix has $(sA.nrow) rows.\"))\n    elseif scale == COL && sS.nrow*sS.ncol != sA.ncol\n        throw(DimensionMismatch(\"scaling vector has length $(sS.nrow*sS.ncol), but matrix has $(sA.ncol) columns\"))\n    elseif scale == SYM\n        if sA.nrow != sA.ncol\n            throw(DimensionMismatch(\"matrix must be square\"))\n        elseif sS.nrow*sS.ncol != sA.nrow\n            throw(DimensionMismatch(\"scaling vector has length $(sS.nrow*sS.ncol), but matrix has $(sA.ncol) columns and rows\"))\n        end\n    end\n\n    sA = unsafe_load(get(A.p))\n    @isok ccall((@cholmod_name(\"scale\",SuiteSparse_long),:libcholmod), Cint,\n            (Ptr{C_Dense{Tv}}, Cint, Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(S.p), scale, get(A.p), common())\n    A\nend\n\nfunction sdmult!{Tv<:VTypes}(A::Sparse{Tv}, transpose::Bool, \u03b1::Number, \u03b2::Number, X::Dense{Tv}, Y::Dense{Tv})\n    m, n = size(A)\n    nc = transpose ? m : n\n    nr = transpose ? n : m\n    if nc != size(X, 1)\n        throw(DimensionMismatch(\"incompatible dimensions, $nc and $(size(X,1))\"))\n    end\n    @isok ccall((@cholmod_name(\"sdmult\", SuiteSparse_long),:libcholmod), Cint,\n            (Ptr{C_Sparse{Tv}}, Cint,\n             Ref{Complex128}, Ref{Complex128},\n             Ptr{C_Dense{Tv}}, Ptr{C_Dense{Tv}}, Ptr{UInt8}),\n                get(A.p), transpose, \u03b1, \u03b2, get(X.p), get(Y.p), common())\n    Y\nend\n\nfunction vertcat{Tv<:VRealTypes}(A::Sparse{Tv}, B::Sparse{Tv}, values::Bool)\n    s = Sparse(ccall((@cholmod_name(\"vertcat\", SuiteSparse_long), :libcholmod), Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{C_Sparse{Tv}}, Cint, Ptr{UInt8}),\n                get(A.p), get(B.p), values, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction symmetry{Tv<:VTypes}(A::Sparse{Tv}, option::Integer)\n    xmatched = Array(SuiteSparse_long, 1)\n    pmatched = Array(SuiteSparse_long, 1)\n    nzoffdiag = Array(SuiteSparse_long, 1)\n    nzdiag = Array(SuiteSparse_long, 1)\n    rv = ccall((@cholmod_name(\"symmetry\", SuiteSparse_long), :libcholmod), Cint,\n            (Ptr{C_Sparse{Tv}}, Cint, Ptr{SuiteSparse_long}, Ptr{SuiteSparse_long},\n                Ptr{SuiteSparse_long}, Ptr{SuiteSparse_long}, Ptr{UInt8}),\n                    get(A.p), option, xmatched, pmatched,\n                        nzoffdiag, nzdiag, common())\n    rv, xmatched[1], pmatched[1], nzoffdiag[1], nzdiag[1]\nend\n\n# cholmod_cholesky.h\n# For analyze, analyze_p, and factorize_p!, the Common argument must be\n# supplied in order to control if the factorization is LLt or LDLt\nfunction analyze{Tv<:VTypes}(A::Sparse{Tv}, cmmn::Vector{UInt8})\n    f = Factor(ccall((@cholmod_name(\"analyze\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Factor{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(A.p), cmmn))\n    finalizer(f, free!)\n    f\nend\nfunction analyze_p{Tv<:VTypes}(A::Sparse{Tv}, perm::Vector{SuiteSparse_long},\n    cmmn::Vector{UInt8})\n    length(perm) != size(A,1) && throw(BoundsError())\n    f = Factor(ccall((@cholmod_name(\"analyze_p\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Factor{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{SuiteSparse_long}, Ptr{SuiteSparse_long}, Csize_t, Ptr{UInt8}),\n                get(A.p), perm, C_NULL, 0, cmmn))\n    finalizer(f, free!)\n    f\nend\nfunction factorize!{Tv<:VTypes}(A::Sparse{Tv}, F::Factor{Tv}, cmmn::Vector{UInt8})\n    @isok ccall((@cholmod_name(\"factorize\", SuiteSparse_long),:libcholmod), Cint,\n        (Ptr{C_Sparse{Tv}}, Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n            get(A.p), get(F.p), cmmn)\n    F\nend\nfunction factorize_p!{Tv<:VTypes}(A::Sparse{Tv}, \u03b2::Real, F::Factor{Tv}, cmmn::Vector{UInt8})\n    # note that \u03b2 is passed as a complex number (double beta[2]),\n    # but the CHOLMOD manual says that only beta[0] (real part) is used\n    @isok ccall((@cholmod_name(\"factorize_p\", SuiteSparse_long),:libcholmod), Cint,\n        (Ptr{C_Sparse{Tv}}, Ref{Complex128}, Ptr{SuiteSparse_long}, Csize_t,\n         Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n            get(A.p), \u03b2, C_NULL, 0, get(F.p), cmmn)\n    F\nend\n\nfunction solve{Tv<:VTypes}(sys::Integer, F::Factor{Tv}, B::Dense{Tv})\n    if size(F,1) != size(B,1)\n        throw(DimensionMismatch(\"LHS and RHS should have the same number of rows. LHS has $(size(F,1)) rows, but RHS has $(size(B,1)) rows.\"))\n    end\n    d = Dense(ccall((@cholmod_name(\"solve\", SuiteSparse_long),:libcholmod), Ptr{C_Dense{Tv}},\n            (Cint, Ptr{C_Factor{Tv}}, Ptr{C_Dense{Tv}}, Ptr{UInt8}),\n                sys, get(F.p), get(B.p), common()))\n    finalizer(d, free!)\n    d\nend\n\nfunction spsolve{Tv<:VTypes}(sys::Integer, F::Factor{Tv}, B::Sparse{Tv})\n    if size(F,1) != size(B,1)\n        throw(DimensionMismatch(\"LHS and RHS should have the same number of rows. LHS has $(size(F,1)) rows, but RHS has $(size(B,1)) rows.\"))\n    end\n    s = Sparse(ccall((@cholmod_name(\"spsolve\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Cint, Ptr{C_Factor{Tv}}, Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                sys, get(F.p), get(B.p), common()))\n    finalizer(s, free!)\n    s\nend\n\n# Autodetects the types\nfunction read_sparse(file::Libc.FILE, ::Type{SuiteSparse_long})\n    ptr = ccall((@cholmod_name(\"read_sparse\", SuiteSparse_long), :libcholmod),\n        Ptr{C_SparseVoid},\n            (Ptr{Void}, Ptr{UInt8}),\n                file.ptr, common())\n    if ptr == C_NULL\n        throw(ArgumentError(\"sparse matrix construction failed. Check that input file is valid.\"))\n    end\n    s = Sparse(ptr)\n    finalizer(s, free!)\n    s\nend\n\nfunction read_sparse(file::IO, T)\n    cfile = Libc.FILE(file)\n    try return read_sparse(cfile, T)\n    finally close(cfile)\n    end\nend\n\nfunction get_perm(F::Factor)\n    s = unsafe_load(get(F.p))\n    p = pointer_to_array(s.Perm, s.n, false)\n    p+1\nend\nget_perm(FC::FactorComponent) = get_perm(Factor(FC))\n\n#########################\n# High level interfaces #\n#########################\n\n# Convertion/construction\nfunction convert(::Type{Dense}, A::VecOrMat)\n    T = promote_type(eltype(A), Float64)\n    d = allocate_dense(size(A, 1), size(A, 2), stride(A, 2), T)\n    s = unsafe_load(d.p)\n    for i in eachindex(A)\n        unsafe_store!(s.x, A[i], i)\n    end\n    d\nend\nconvert(::Type{Dense}, A::Sparse) = sparse_to_dense(A)\n\n# This constructior assumes zero based colptr and rowval\nfunction convert{Tv<:VTypes}(::Type{Sparse}, m::Integer, n::Integer, colptr::Vector{SuiteSparse_long}, rowval::Vector{SuiteSparse_long}, nzval::Vector{Tv}, stype)\n\n    # check if columns are sorted\n    iss = true\n    for i = 2:length(colptr)\n        if !issorted(sub(rowval, colptr[i - 1] + 1:colptr[i]))\n            iss = false\n            break\n        end\n    end\n\n    o = allocate_sparse(m, n, length(nzval), iss, true, stype, Tv)\n    s = unsafe_load(o.p)\n\n    unsafe_copy!(s.p, pointer(colptr), length(colptr))\n    unsafe_copy!(s.i, pointer(rowval), length(rowval))\n    unsafe_copy!(s.x, pointer(nzval), length(nzval))\n\n    @isok check_sparse(o)\n\n    return o\n\nend\nfunction convert{Tv<:VTypes}(::Type{Sparse}, m::Integer, n::Integer, colptr::Vector{SuiteSparse_long}, rowval::Vector{SuiteSparse_long}, nzval::Vector{Tv})\n    o = Sparse(m, n, colptr, rowval, nzval, 0)\n\n    # check if array is symmetric and change stype if it is\n    if ishermitian(o)\n        change_stype!(o, -1)\n    end\n    o\nend\n\nfunction convert{Tv<:VTypes}(::Type{Sparse}, A::SparseMatrixCSC{Tv,SuiteSparse_long}, stype::Integer)\n    o = allocate_sparse(A.m, A.n, length(A.nzval), true, true, stype, Tv)\n    s = unsafe_load(o.p)\n    for i = 1:length(A.colptr)\n        unsafe_store!(s.p, A.colptr[i] - 1, i)\n    end\n    for i = 1:length(A.rowval)\n        unsafe_store!(s.i, A.rowval[i] - 1, i)\n    end\n    unsafe_copy!(s.x, pointer(A.nzval), length(A.nzval))\n\n    @isok check_sparse(o)\n\n    return o\nend\n\nfunction convert{Tv<:VTypes,Ti<:ITypes}(::Type{Sparse}, A::SparseMatrixCSC{Tv,Ti})\n    o = Sparse(A, 0)\n    # check if array is symmetric and change stype if it is\n    if ishermitian(o)\n        change_stype!(o, -1)\n    end\n    o\nend\nconvert{Ti<:ITypes}(::Type{Sparse}, A::SparseMatrixCSC{Float32,Ti}) = convert(Sparse, convert(SparseMatrixCSC{Float64,SuiteSparse_long}, A))\nconvert{Ti<:ITypes}(::Type{Sparse}, A::SparseMatrixCSC{Complex{Float32},Ti}) = convert(Sparse, convert(SparseMatrixCSC{Complex{Float64},SuiteSparse_long}, A))\nconvert(::Type{Sparse}, A::Symmetric{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}}) = Sparse(A.data, A.uplo == 'L' ? -1 : 1)\nconvert{Tv<:VTypes}(::Type{Sparse}, A::Hermitian{Tv,SparseMatrixCSC{Tv,SuiteSparse_long}}) = Sparse(A.data, A.uplo == 'L' ? -1 : 1)\nfunction convert{T,Ti<:ITypes}(::Type{Sparse},\n    A::Union{SparseMatrixCSC{T,Ti},\n             Symmetric{T,SparseMatrixCSC{T,Ti}},\n             Hermitian{T,SparseMatrixCSC{T,Ti}}},\n    args...)\n    return Sparse(float(A), args...)\nend\n\n# Useful when reading in files, but not type stable\nfunction convert(::Type{Sparse}, p::Ptr{C_SparseVoid})\n\n    if p == C_NULL\n        throw(ArgumentError(\"sparse matrix construction failed for unknown reasons. Please submit a bug report.\"))\n    end\n\n    s = unsafe_load(p)\n\n    # Check integer type\n    if s.itype == INT\n        free_sparse!(p)\n        throw(CHOLMODException(\"the value of itype was $s.itype. Only integer type of $SuiteSparse_long is supported.\"))\n    elseif s.itype == INTLONG\n        free_sparse!(p)\n        throw(CHOLMODException(\"the value of itype was $s.itype. This combination of integer types shouldn't happen. Please submit a bug report.\"))\n    elseif s.itype != LONG # must be s.itype == LONG\n        free_sparse!(p)\n        throw(CHOLMODException(\"illegal value of itype: $s.itype\"))\n    end\n\n    # Check for double or single precision\n    if s.dtype == DOUBLE\n        Tv = Float64\n    elseif s.dtype == SINGLE\n        # Tv = Float32 # this should be supported at some point\n        free_sparse!(p)\n        throw(CHOLMODException(\"single precision not supported yet\"))\n    else\n        free_sparse!(p)\n        throw(CHOLMODException(\"illegal value of dtype: $s.dtype\"))\n    end\n\n    # Check for real or complex\n    if s.xtype == COMPLEX\n        Tv = Complex{Tv}\n    elseif s.xtype != REAL\n        free_sparse!(p)\n        throw(CHOLMODException(\"illegal value of xtype: $s.xtype\"))\n    end\n\n    return Sparse(convert(Ptr{C_Sparse{Tv}}, p))\n\nend\n\nconvert(::Type{Sparse}, A::Dense) = dense_to_sparse(A, SuiteSparse_long)\nconvert(::Type{Sparse}, L::Factor) = factor_to_sparse!(copy(L))\nfunction convert(::Type{Sparse}, filename::ByteString)\n    open(filename) do f\n        return read_sparse(f, SuiteSparse_long)\n    end\nend\n\n## convertion back to base Julia types\nfunction convert{T}(::Type{Matrix{T}}, D::Dense{T})\n    s = unsafe_load(D.p)\n    a = Array(T, s.nrow, s.ncol)\n    if s.d == s.nrow\n        unsafe_copy!(pointer(a), s.x, s.d*s.ncol)\n    else\n        for j = 1:s.ncol\n            for i = 1:s.nrow\n                a[i,j] = unsafe_load(s.x, i + (j - 1)*s.d)\n            end\n        end\n    end\n    a\nend\nconvert{T}(::Type{Matrix}, D::Dense{T}) = convert(Matrix{T}, D)\nfunction convert{T}(::Type{Vector{T}}, D::Dense{T})\n    if size(D, 2) > 1\n        throw(DimensionMismatch(\"input must be a vector but had $(size(D, 2)) columns\"))\n    end\n    reshape(convert(Matrix, D), size(D, 1))\nend\nconvert{T}(::Type{Vector}, D::Dense{T}) = convert(Vector{T}, D)\n\nfunction convert{Tv}(::Type{SparseMatrixCSC{Tv,SuiteSparse_long}}, A::Sparse{Tv})\n    s = unsafe_load(A.p)\n    if s.stype != 0\n        throw(ArgumentError(\"matrix has stype != 0. Convert to matrix with stype == 0 before converting to SparseMatrixCSC\"))\n    end\n    return SparseMatrixCSC(s.nrow, s.ncol, increment(pointer_to_array(s.p, (s.ncol + 1,), false)), increment(pointer_to_array(s.i, (s.nzmax,), false)), copy(pointer_to_array(s.x, (s.nzmax,), false)))\nend\nfunction convert(::Type{Symmetric{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}}}, A::Sparse{Float64})\n    s = unsafe_load(A.p)\n    if !issym(A)\n        throw(ArgumentError(\"matrix is not symmetric\"))\n    end\n    return Symmetric(SparseMatrixCSC(s.nrow, s.ncol, increment(pointer_to_array(s.p, (s.ncol + 1,), false)), increment(pointer_to_array(s.i, (s.nzmax,), false)), copy(pointer_to_array(s.x, (s.nzmax,), false))), s.stype > 0 ? :U : :L)\nend\nfunction convert{Tv<:VTypes}(::Type{Hermitian{Tv,SparseMatrixCSC{Tv,SuiteSparse_long}}}, A::Sparse{Tv})\n    s = unsafe_load(A.p)\n    if !ishermitian(A)\n        throw(ArgumentError(\"matrix is not Hermitian\"))\n    end\n    return Hermitian(SparseMatrixCSC(s.nrow, s.ncol, increment(pointer_to_array(s.p, (s.ncol + 1,), false)), increment(pointer_to_array(s.i, (s.nzmax,), false)), copy(pointer_to_array(s.x, (s.nzmax,), false))), s.stype > 0 ? :U : :L)\nend\nfunction sparse(A::Sparse{Float64}) # Notice! Cannot be type stable because of stype\n    s = unsafe_load(A.p)\n    if s.stype == 0\n        return convert(SparseMatrixCSC{Float64,SuiteSparse_long}, A)\n    end\n    return convert(Symmetric{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}}, A)\nend\nfunction sparse(A::Sparse{Complex{Float64}}) # Notice! Cannot be type stable because of stype\n    s = unsafe_load(A.p)\n    if s.stype == 0\n        return convert(SparseMatrixCSC{Complex{Float64},SuiteSparse_long}, A)\n    end\n    return convert(Hermitian{Complex{Float64},SparseMatrixCSC{Complex{Float64},SuiteSparse_long}}, A)\nend\nfunction sparse(F::Factor)\n    s = unsafe_load(F.p)\n    if s.is_ll != 0\n        L = Sparse(F)\n        A = sparse(L*L')\n    else\n        LD = sparse(F[:LD])\n        L, d = getLd!(LD)\n        A = scale(L, d)*L'\n    end\n    SparseMatrix.sortSparseMatrixCSC!(A)\n    p = get_perm(F)\n    if p != [1:s.n;]\n        pinv = Array(Int, length(p))\n        for k = 1:length(p)\n            pinv[p[k]] = k\n        end\n        A = A[pinv,pinv]\n    end\n    A\nend\n\nsparse(D::Dense) = sparse(Sparse(D))\n\nfunction sparse{Tv}(FC::FactorComponent{Tv,:L})\n    F = Factor(FC)\n    s = unsafe_load(F.p)\n    s.is_ll != 0 || throw(CHOLMODException(\"sparse: supported only for :LD on LDLt factorizations\"))\n    sparse(Sparse(F))\nend\nsparse{Tv}(FC::FactorComponent{Tv,:LD}) = sparse(Sparse(Factor(FC)))\n\n# Calculate the offset into the stype field of the cholmod_sparse_struct and\n# change the value\nlet offidx=findfirst(fieldnames(C_Sparse) .== :stype)\n\n    global change_stype!\n    function change_stype!(A::Sparse, i::Integer)\n        offset = fieldoffsets(C_Sparse)[offidx]\n        unsafe_store!(convert(Ptr{Cint}, A.p), i, div(offset, 4) + 1)\n        return A\n    end\nend\n\nfree!(A::Dense) = free_dense!(A.p)\nfree!(A::Sparse) = free_sparse!(A.p)\nfree!(F::Factor) = free_factor!(F.p)\n\neltype{T<:VTypes}(::Type{Dense{T}}) = T\neltype{T<:VTypes}(::Type{Factor{T}}) = T\neltype{T<:VTypes}(::Type{Sparse{T}}) = T\n\nnnz(F::Factor) = nnz(Sparse(F))\n\nfunction show(io::IO, F::Factor)\n    println(io, typeof(F))\n    showfactor(io, F)\nend\n\n# FactorComponent is a subtype of AbstractArray and we therefore define showarray instead of show\nfunction showarray(io::IO, FC::FactorComponent; kargs...)\n    println(io, typeof(FC))\n    showfactor(io, Factor(FC))\nend\n\nfunction showfactor(io::IO, F::Factor)\n    s = unsafe_load(get(F.p))\n    @printf(io, \"type: %12s\\n\", s.is_ll!=0 ? \"LLt\" : \"LDLt\")\n    @printf(io, \"method: %10s\\n\", s.is_super!=0 ? \"supernodal\" : \"simplicial\")\n    @printf(io, \"maxnnz: %10d\\n\", Int(s.nzmax))\n    @printf(io, \"nnz: %13d\\n\", nnz(F))\nend\n\nisvalid(A::Dense) = check_dense(A)\nisvalid(A::Sparse) = check_sparse(A)\nisvalid(A::Factor) = check_factor(A)\n\ncopy(A::Dense) = copy_dense(A)\ncopy(A::Sparse) = copy_sparse(A)\ncopy(A::Factor) = copy_factor(A)\n\nfunction size(A::Union{Dense,Sparse})\n    s = unsafe_load(get(A.p))\n    return (Int(s.nrow), Int(s.ncol))\nend\nfunction size(F::Factor, i::Integer)\n    if i < 1\n        throw(ArgumentError(\"dimension must be positive\"))\n    end\n    s = unsafe_load(get(F.p))\n    if i <= 2\n        return Int(s.n)\n    end\n    return 1\nend\n\nlinearindexing(::Dense) = LinearFast()\n\nsize(FC::FactorComponent, i::Integer) = size(FC.F, i)\nsize(FC::FactorComponent) = size(FC.F)\n\nctranspose{Tv}(FC::FactorComponent{Tv,:L}) = FactorComponent{Tv,:U}(FC.F)\nctranspose{Tv}(FC::FactorComponent{Tv,:U}) = FactorComponent{Tv,:L}(FC.F)\nctranspose{Tv}(FC::FactorComponent{Tv,:PtL}) = FactorComponent{Tv,:UP}(FC.F)\nctranspose{Tv}(FC::FactorComponent{Tv,:UP}) = FactorComponent{Tv,:PtL}(FC.F)\nctranspose{Tv}(FC::FactorComponent{Tv,:D}) = FC\nctranspose{Tv}(FC::FactorComponent{Tv,:LD}) = FactorComponent{Tv,:DU}(FC.F)\nctranspose{Tv}(FC::FactorComponent{Tv,:DU}) = FactorComponent{Tv,:LD}(FC.F)\nctranspose{Tv}(FC::FactorComponent{Tv,:PtLD}) = FactorComponent{Tv,:DUP}(FC.F)\nctranspose{Tv}(FC::FactorComponent{Tv,:DUP}) = FactorComponent{Tv,:PtLD}(FC.F)\n\nfunction getindex(A::Dense, i::Integer)\n    s = unsafe_load(get(A.p))\n    0 < i <= s.nrow*s.ncol || throw(BoundsError())\n    unsafe_load(s.x, i)\nend\n\nlinearindexing(::Sparse) = LinearSlow()\nfunction getindex{T}(A::Sparse{T}, i0::Integer, i1::Integer)\n    s = unsafe_load(get(A.p))\n    !(1 <= i0 <= s.nrow && 1 <= i1 <= s.ncol) && throw(BoundsError())\n    s.stype < 0 && i0 < i1 && return conj(A[i1,i0])\n    s.stype > 0 && i0 > i1 && return conj(A[i1,i0])\n\n    r1 = Int(unsafe_load(s.p, i1) + 1)\n    r2 = Int(unsafe_load(s.p, i1 + 1))\n    (r1 > r2) && return zero(T)\n    r1 = Int(searchsortedfirst(pointer_to_array(s.i, (s.nzmax,), false), i0 - 1, r1, r2, Base.Order.Forward))\n    ((r1 > r2) || (unsafe_load(s.i, r1) + 1 != i0)) ? zero(T) : unsafe_load(s.x, r1)\nend\n\nfunction getindex(F::Factor, sym::Symbol)\n    sym == :p && return get_perm(F)\n    FactorComponent(F, sym)\nend\n\nfunction getLd!(S::SparseMatrixCSC)\n    d = Array(eltype(S), size(S, 1))\n    fill!(d, 0)\n    col = 1\n    for k = 1:length(S.nzval)\n        while k >= S.colptr[col+1]\n            col += 1\n        end\n        if S.rowval[k] == col\n            d[col] = S.nzval[k]\n            S.nzval[k] = 1\n        end\n    end\n    S, d\nend\n\n## Multiplication\n(*)(A::Sparse, B::Sparse) = ssmult(A, B, 0, true, true)\n(*)(A::Sparse, B::Dense) = sdmult!(A, false, 1., 0., B, zeros(size(A, 1), size(B, 2)))\n(*)(A::Sparse, B::VecOrMat) = (*)(A, Dense(B))\n\nfunction A_mul_Bc{Tv<:VRealTypes}(A::Sparse{Tv}, B::Sparse{Tv})\n    cm = common()\n\n    if !is(A,B)\n        aa1 = transpose_(B, 2)\n        ## result of ssmult will have stype==0, contain numerical values and be sorted\n        return ssmult(A, aa1, 0, true, true)\n    end\n\n    ## The A*A' case is handled by cholmod_aat. This routine requires\n    ## A->stype == 0 (storage of upper and lower parts). If neccesary\n    ## the matrix A is first converted to stype == 0\n    s = unsafe_load(A.p)\n    if s.stype != 0\n        aa1 = copy(A, 0, 1)\n        return aat(aa1, SuiteSparse_long[0:s.ncol-1;], 1)\n    else\n        return aat(A, SuiteSparse_long[0:s.ncol-1;], 1)\n    end\nend\n\nfunction Ac_mul_B(A::Sparse, B::Sparse)\n    aa1 = transpose_(A, 2)\n    if is(A,B)\n        return A_mul_Bc(aa1, aa1)\n    end\n    ## result of ssmult will have stype==0, contain numerical values and be sorted\n    return ssmult(aa1, B, 0, true, true)\nend\n\nAc_mul_B(A::Sparse, B::Dense) = sdmult!(A, true, 1., 0., B, zeros(size(A, 2), size(B, 2)))\nAc_mul_B(A::Sparse, B::VecOrMat) =  Ac_mul_B(A, Dense(B))\n\n\n## Factorization methods\n\nfunction fact_{Tv<:VTypes}(A::Sparse{Tv}, cm::Array{UInt8};\n    shift::Real=0.0, perm::AbstractVector{SuiteSparse_long}=SuiteSparse_long[],\n    postorder::Bool=true, userperm_only::Bool=true)\n\n    sA = unsafe_load(get(A.p))\n    sA.stype == 0 && throw(ArgumentError(\"sparse matrix is not symmetric/Hermitian\"))\n\n    if !postorder\n        unsafe_store!(common_postorder, 0)\n    end\n\n    if isempty(perm)\n        F = analyze(A, cm)\n    else # user permutation provided\n        if userperm_only # use perm even if it is worse than AMD\n            unsafe_store!(common_nmethods, 1)\n        end\n        F = analyze_p(A, SuiteSparse_long[p-1 for p in perm], cm)\n    end\n\n    factorize_p!(A, shift, F, cm)\n    return F\nend\n\nfunction cholfact(A::Sparse; kws...)\n    cm = defaults(common()) # setting the common struct to default values. Should only be done when creating new factorization.\n    set_print_level(cm, 0) # no printing from CHOLMOD by default\n\n    # Makes it an LLt\n    unsafe_store!(common_final_ll, 1)\n\n    F = fact_(A, cm; kws...)\n    s = unsafe_load(get(F.p))\n    s.minor < size(A, 1) && throw(Base.LinAlg.PosDefException(s.minor))\n    return F\nend\n\nfunction ldltfact(A::Sparse; kws...)\n    cm = defaults(common()) # setting the common struct to default values. Should only be done when creating new factorization.\n    set_print_level(cm, 0) # no printing from CHOLMOD by default\n\n    # Makes it an LDLt\n    unsafe_store!(common_final_ll, 0)\n\n    # Really make sure it's an LDLt by avoiding supernodal factorisation\n    unsafe_store!(common_supernodal, 0)\n\n    F = fact_(A, cm; kws...)\n    s = unsafe_load(get(F.p))\n    s.minor < size(A, 1) && throw(Base.LinAlg.ArgumentError(\"matrix has one or more zero pivots\"))\n    return F\nend\n\n\nfor f in (:cholfact, :ldltfact)\n    @eval begin\n        $f(A::SparseMatrixCSC; kws...) = $f(Sparse(A); kws...)\n        $f(A::Symmetric{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}}; kws...) = $f(Sparse(A); kws...)\n        $f(A::Hermitian{Complex{Float64},SparseMatrixCSC{Complex{Float64},SuiteSparse_long}}; kws...) = $f(Sparse(A); kws...)\n    end\nend\n\nfunction update!{Tv<:VTypes}(F::Factor{Tv}, A::Sparse{Tv}; shift::Real=0.0)\n    cm = defaults(common()) # setting the common struct to default values. Should only be done when creating new factorization.\n    set_print_level(cm, 0) # no printing from CHOLMOD by default\n\n    s = unsafe_load(get(F.p))\n    if s.is_ll!=0\n        unsafe_store!(common_final_ll, 1) # Makes it an LLt\n    end\n    factorize_p!(A, shift, F, cm)\nend\nupdate!{T<:VTypes}(F::Factor{T}, A::SparseMatrixCSC{T}; kws...) = update!(F, Sparse(A); kws...)\n\n## Solvers\n\nfor (T, f) in ((:Dense, :solve), (:Sparse, :spsolve))\n    @eval begin\n        # Solve Lx = b and L'x=b where A = L*L'\n        function (\\){T}(L::FactorComponent{T,:L}, B::$T)\n            ($f)(CHOLMOD_L, Factor(L), B)\n        end\n        function (\\){T}(L::FactorComponent{T,:U}, B::$T)\n            ($f)(CHOLMOD_Lt, Factor(L), B)\n        end\n        # Solve PLx = b and L'P'x=b where A = P*L*L'*P'\n        function (\\){T}(L::FactorComponent{T,:PtL}, B::$T)\n            F = Factor(L)\n            ($f)(CHOLMOD_L, F, ($f)(CHOLMOD_P, F, B))  # Confusingly, CHOLMOD_P solves P'x = b\n        end\n        function (\\){T}(L::FactorComponent{T,:UP}, B::$T)\n            F = Factor(L)\n            ($f)(CHOLMOD_Pt, F, ($f)(CHOLMOD_Lt, F, B))\n        end\n        # Solve various equations for A = L*D*L' and A = P*L*D*L'*P'\n        function (\\){T}(L::FactorComponent{T,:D}, B::$T)\n            ($f)(CHOLMOD_D, Factor(L), B)\n        end\n        function (\\){T}(L::FactorComponent{T,:LD}, B::$T)\n            ($f)(CHOLMOD_LD, Factor(L), B)\n        end\n        function (\\){T}(L::FactorComponent{T,:DU}, B::$T)\n            ($f)(CHOLMOD_DLt, Factor(L), B)\n        end\n        function (\\){T}(L::FactorComponent{T,:PtLD}, B::$T)\n            F = Factor(L)\n            ($f)(CHOLMOD_LD, F, ($f)(CHOLMOD_P, F, B))\n        end\n        function (\\){T}(L::FactorComponent{T,:DUP}, B::$T)\n            F = Factor(L)\n            ($f)(CHOLMOD_Pt, F, ($f)(CHOLMOD_DLt, F, B))\n        end\n    end\nend\n\nfunction (\\)(L::FactorComponent, b::Vector)\n    reshape(convert(Matrix, L\\Dense(b)), length(b))\nend\nfunction (\\)(L::FactorComponent, B::Matrix)\n    convert(Matrix, L\\Dense(B))\nend\nfunction (\\)(L::FactorComponent, B::SparseMatrixCSC)\n    sparse(L\\Sparse(B,0))\nend\n\nAc_ldiv_B(L::FactorComponent, B) = ctranspose(L)\\B\n\n(\\)(L::Factor, B::Dense) = solve(CHOLMOD_A, L, B)\n(\\)(L::Factor, b::Vector) = reshape(convert(Matrix, solve(CHOLMOD_A, L, Dense(b))), length(b))\n(\\)(L::Factor, B::Matrix) = convert(Matrix, solve(CHOLMOD_A, L, Dense(B)))\n(\\)(L::Factor, B::Sparse) = spsolve(CHOLMOD_A, L, B)\n# When right hand side is sparse, we have to ensure that the rhs is not marked as symmetric.\n(\\)(L::Factor, B::SparseMatrixCSC) = sparse(spsolve(CHOLMOD_A, L, Sparse(B, 0)))\n\nAc_ldiv_B(L::Factor, B::Dense) = solve(CHOLMOD_A, L, B)\nAc_ldiv_B(L::Factor, B::VecOrMat) = convert(Matrix, solve(CHOLMOD_A, L, Dense(B)))\nAc_ldiv_B(L::Factor, B::Sparse) = spsolve(CHOLMOD_A, L, B)\nAc_ldiv_B(L::Factor, B::SparseMatrixCSC) = Ac_ldiv_B(L, Sparse(B))\n\n## Other convenience methods\nfunction diag{Tv}(F::Factor{Tv})\n    f = unsafe_load(get(F.p))\n    fsuper = f.super\n    fpi = f.pi\n    res = Base.zeros(Tv, Int(f.n))\n    xv  = f.x\n    if f.is_super!=0\n        px = f.px\n        pos = 1\n        for i in 1:f.nsuper\n            base = unsafe_load(px, i) + 1\n            res[pos] = unsafe_load(xv, base)\n            pos += 1\n            for j in 1:unsafe_load(fsuper, i + 1) - unsafe_load(fsuper, i) - 1\n                res[pos] = unsafe_load(xv, base + j*(unsafe_load(fpi, i + 1) - unsafe_load(fpi, i) + 1))\n                pos += 1\n            end\n        end\n    else\n        c0 = f.p\n        r0 = f.i\n        xv = f.x\n        for j in 1:f.n\n            jj = unsafe_load(c0, j) + 1\n            assert(unsafe_load(r0, jj) == j - 1)\n            res[j] = unsafe_load(xv, jj)\n        end\n    end\n    res\nend\n\nfunction logdet{Tv<:VTypes}(F::Factor{Tv})\n    f = unsafe_load(get(F.p))\n    res = zero(Tv)\n    for d in diag(F) res += log(abs(d)) end\n    f.is_ll!=0 ? 2res : res\nend\n\ndet(L::Factor) = exp(logdet(L))\n\nfunction isposdef{Tv<:VTypes}(A::SparseMatrixCSC{Tv,SuiteSparse_long})\n    if !ishermitian(A)\n        return false\n    end\n    try\n        f = cholfact(A)\n    catch e\n        isa(e, LinAlg.PosDefException) || rethrow(e)\n        return false\n    end\n    true\nend\n\nfunction issym(A::Sparse)\n    s = unsafe_load(A.p)\n    if s.stype != 0\n        return isreal(A)\n    end\n    i = symmetry(A, 1)[1]\n    return i == MM_SYMMETRIC || i == MM_SYMMETRIC_POSDIAG\nend\n\nfunction ishermitian(A::Sparse{Float64})\n    s = unsafe_load(A.p)\n    if s.stype != 0\n        return true\n    else\n        i = symmetry(A, 1)[1]\n        return i == MM_SYMMETRIC || i == MM_SYMMETRIC_POSDIAG\n    end\nend\nfunction ishermitian(A::Sparse{Complex{Float64}})\n    s = unsafe_load(A.p)\n    if s.stype != 0\n        return true\n    else\n        i = symmetry(A, 1)[1]\n        return i == MM_HERMITIAN || i == MM_HERMITIAN_POSDIAG\n    end\nend\n\n(*){Ti}(A::Symmetric{Float64,SparseMatrixCSC{Float64,Ti}}, B::SparseMatrixCSC{Float64,Ti}) = sparse(Sparse(A)*Sparse(B))\n(*){Ti}(A::Hermitian{Complex{Float64},SparseMatrixCSC{Complex{Float64},Ti}}, B::SparseMatrixCSC{Complex{Float64},Ti}) = sparse(Sparse(A)*Sparse(B))\n\nend #module\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/base/docs/helpdb.jl": "# This file is a part of Julia. License is MIT: http://julialang.org/license\n\n# Base.LinAlg.BLAS\n\nimport .Docs: keywords\n\ndoc\"\"\"\n    ger!(alpha, x, y, A)\n\nRank-1 update of the matrix `A` with vectors `x` and `y` as `alpha*x*y' + A`.\n\"\"\"\nLinAlg.BLAS.ger!\n\ndoc\"\"\"\n    gbmv!(trans, m, kl, ku, alpha, A, x, beta, y)\n\nUpdate vector `y` as `alpha*A*x + beta*y` or `alpha*A'*x + beta*y` according to `trans` ('N' or 'T'). The matrix `A` is a general band matrix of dimension `m` by `size(A,2)` with `kl` sub-diagonals and `ku` super-diagonals. Returns the updated `y`.\n\"\"\"\nLinAlg.BLAS.gbmv!\n\ndoc\"\"\"\n    gbmv(trans, m, kl, ku, alpha, A, x, beta, y)\n\nReturns `alpha*A*x` or `alpha*A'*x` according to `trans` ('N' or 'T'). The matrix `A` is a general band matrix of dimension `m` by `size(A,2)` with `kl` sub-diagonals and `ku` super-diagonals.\n\"\"\"\nLinAlg.BLAS.gbmv\n\ndoc\"\"\"\n    gemm!(tA, tB, alpha, A, B, beta, C)\n\nUpdate `C` as `alpha*A*B + beta*C` or the other three variants according to `tA` (transpose `A`) and `tB`. Returns the updated `C`.\n\"\"\"\nLinAlg.BLAS.gemm!\n\ndoc\"\"\"\n    gemv!(tA, alpha, A, x, beta, y)\n\nUpdate the vector `y` as `alpha*A*x + beta*y` or `alpha*A'x + beta*y` according to `tA` (transpose `A`). Returns the updated `y`.\n\"\"\"\nLinAlg.BLAS.gemv!\n\ndoc\"\"\"\n    blascopy!(n, X, incx, Y, incy)\n\nCopy `n` elements of array `X` with stride `incx` to array `Y` with stride `incy`. Returns `Y`.\n\"\"\"\nLinAlg.BLAS.blascopy!\n\ndoc\"\"\"\n    scal!(n, a, X, incx)\n\nOverwrite `X` with `a*X`. Returns `X`.\n\"\"\"\nLinAlg.BLAS.scal!\n\ndoc\"\"\"\n    gemv(tA, alpha, A, x)\n\nReturns `alpha*A*x` or `alpha*A'x` according to `tA` (transpose `A`).\n\"\"\"\nLinAlg.BLAS.gemv(tA, alpha, A, x)\n\ndoc\"\"\"\n    gemv(tA, A, x)\n\nReturns `A*x` or `A'x` according to `tA` (transpose `A`).\n\"\"\"\nLinAlg.BLAS.gemv(tA, A, x)\n\ndoc\"\"\"\n    syr!(uplo, alpha, x, A)\n\nRank-1 update of the symmetric matrix `A` with vector `x` as `alpha*x*x.' + A`. When `uplo` is 'U' the upper triangle of `A` is updated ('L' for lower triangle). Returns `A`.\n\"\"\"\nLinAlg.BLAS.syr!\n\ndoc\"\"\"\n    trsm!(side, ul, tA, dA, alpha, A, B)\n\nOverwrite `B` with the solution to `A*X = alpha*B` or one of the other three variants determined by `side` (`A` on left or right of `X`) and `tA` (transpose `A`). Only the `ul` triangle of `A` is used. `dA` indicates if `A` is unit-triangular (the diagonal is assumed to be all ones). Returns the updated `B`.\n\"\"\"\nLinAlg.BLAS.trsm!\n\ndoc\"\"\"\n    trsv!(ul, tA, dA, A, b)\n\nOverwrite `b` with the solution to `A*x = b` or one of the other two variants determined by `tA` (transpose `A`) and `ul` (triangle of `A` used). `dA` indicates if `A` is unit-triangular (the diagonal is assumed to be all ones). Returns the updated `b`.\n\"\"\"\nLinAlg.BLAS.trsv!\n\ndoc\"\"\"\n    her!(uplo, alpha, x, A)\n\nMethods for complex arrays only. Rank-1 update of the Hermitian matrix `A` with vector `x` as `alpha*x*x' + A`. When `uplo` is 'U' the upper triangle of `A` is updated ('L' for lower triangle). Returns `A`.\n\"\"\"\nLinAlg.BLAS.her!\n\ndoc\"\"\"\n    trsv(ul, tA, dA, A, b)\n\nReturns the solution to `A*x = b` or one of the other two variants determined by `tA` (transpose `A`) and `ul` (triangle of `A` is used.) `dA` indicates if `A` is unit-triangular (the diagonal is assumed to be all ones).\n\"\"\"\nLinAlg.BLAS.trsv\n\ndoc\"\"\"\n    dot(n, X, incx, Y, incy)\n\nDot product of two vectors consisting of `n` elements of array `X` with stride `incx` and `n` elements of array `Y` with stride `incy`.\n\"\"\"\nLinAlg.BLAS.dot\n\ndoc\"\"\"\n    dotu(n, X, incx, Y, incy)\n\nDot function for two complex vectors.\n\"\"\"\nLinAlg.BLAS.dotu\n\ndoc\"\"\"\n    herk!(uplo, trans, alpha, A, beta, C)\n\nMethods for complex arrays only. Rank-k update of the Hermitian matrix `C` as `alpha*A*A' + beta*C` or `alpha*A'*A + beta*C` according to whether `trans` is 'N' or 'T'. When `uplo` is 'U' the upper triangle of `C` is updated ('L' for lower triangle). Returns `C`.\n\"\"\"\nLinAlg.BLAS.herk!\n\ndoc\"\"\"\n    trmv(side, ul, tA, dA, alpha, A, b)\n\nReturns `alpha*A*b` or one of the other three variants determined by `side` (`A` on left or right) and `tA` (transpose `A`). Only the `ul` triangle of `A` is used. `dA` indicates if `A` is unit-triangular (the diagonal is assumed to be all ones).\n\"\"\"\nLinAlg.BLAS.trmv\n\ndoc\"\"\"\n    symv(ul, alpha, A, x)\n\nReturns `alpha*A*x`. `A` is assumed to be symmetric. Only the `ul` triangle of `A` is used.\n\"\"\"\nLinAlg.BLAS.symv(ul, alpha, A, x)\n\ndoc\"\"\"\n    symv(ul, A, x)\n\nReturns `A*x`. `A` is assumed to be symmetric. Only the `ul` triangle of `A` is used.\n\"\"\"\nLinAlg.BLAS.symv(ul, A, x)\n\ndoc\"\"\"\n    dotc(n, X, incx, U, incy)\n\nDot function for two complex vectors conjugating the first vector.\n\"\"\"\nLinAlg.BLAS.dotc\n\ndoc\"\"\"\n    axpy!(a, X, Y)\n\nOverwrite `Y` with `a*X + Y`. Returns `Y`.\n\"\"\"\nLinAlg.BLAS.axpy!\n\ndoc\"\"\"\n    syrk!(uplo, trans, alpha, A, beta, C)\n\nRank-k update of the symmetric matrix `C` as `alpha*A*A.' + beta*C` or `alpha*A.'*A + beta*C` according to whether `trans` is 'N' or 'T'. When `uplo` is 'U' the upper triangle of `C` is updated ('L' for lower triangle). Returns `C`.\n\"\"\"\nLinAlg.BLAS.syrk!\n\ndoc\"\"\"\n    sbmv(uplo, k, alpha, A, x)\n\nReturns `alpha*A*x` where `A` is a symmetric band matrix of order `size(A,2)` with `k` super-diagonals stored in the argument `A`.\n\"\"\"\nLinAlg.BLAS.sbmv(uplo, k, alpha, A, x)\n\ndoc\"\"\"\n    sbmv(uplo, k, A, x)\n\nReturns `A*x` where `A` is a symmetric band matrix of order `size(A,2)` with `k` super-diagonals stored in the argument `A`.\n\"\"\"\nLinAlg.BLAS.sbmv(uplo, k, A, x)\n\ndoc\"\"\"\n    sbmv!(uplo, k, alpha, A, x, beta, y)\n\nUpdate vector `y` as `alpha*A*x + beta*y` where `A` is a a symmetric band matrix of order `size(A,2)` with `k` super-diagonals stored in the argument `A`. The storage layout for `A` is described the reference BLAS module, level-2 BLAS at <http://www.netlib.org/lapack/explore-html/>.\n\nReturns the updated `y`.\n\"\"\"\nLinAlg.BLAS.sbmv!\n\ndoc\"\"\"\n    symv!(ul, alpha, A, x, beta, y)\n\nUpdate the vector `y` as `alpha*A*x + beta*y`. `A` is assumed to be symmetric. Only the `ul` triangle of `A` is used. Returns the updated `y`.\n\"\"\"\nLinAlg.BLAS.symv!\n\ndoc\"\"\"\n    symm(side, ul, alpha, A, B)\n\nReturns `alpha*A*B` or `alpha*B*A` according to `side`. `A` is assumed to be symmetric. Only the `ul` triangle of `A` is used.\n\"\"\"\nLinAlg.BLAS.symm(side, ul, alpha, A, B)\n\ndoc\"\"\"\n    symm(side, ul, A, B)\n\nReturns `A*B` or `B*A` according to `side`. `A` is assumed to be symmetric. Only the `ul` triangle of `A` is used.\n\"\"\"\nLinAlg.BLAS.symm(side, ul, A, B)\n\ndoc\"\"\"\n    symm(tA, tB, alpha, A, B)\n\nReturns `alpha*A*B` or the other three variants according to `tA` (transpose `A`) and `tB`.\n\"\"\"\nLinAlg.BLAS.symm(tA::Char, tB::Char, alpha, A, B)\n\ndoc\"\"\"\n    herk(uplo, trans, alpha, A)\n\nMethods for complex arrays only. Returns either the upper triangle or the lower triangle, according to `uplo` ('U' or 'L'), of `alpha*A*A'` or `alpha*A'*A`, according to `trans` ('N' or 'T').\n\"\"\"\nLinAlg.BLAS.herk\n\ndoc\"\"\"\n    syrk(uplo, trans, alpha, A)\n\nReturns either the upper triangle or the lower triangle, according to `uplo` ('U' or 'L'), of `alpha*A*A.'` or `alpha*A.'*A`, according to `trans` ('N' or 'T').\n\"\"\"\nLinAlg.BLAS.syrk\n\ndoc\"\"\"\n    trsm(side, ul, tA, dA, alpha, A, B)\n\nReturns the solution to `A*X = alpha*B` or one of the other three variants determined by `side` (`A` on left or right of `X`) and `tA` (transpose `A`). Only the `ul` triangle of `A` is used. `dA` indicates if `A` is unit-triangular (the diagonal is assumed to be all ones).\n\"\"\"\nLinAlg.BLAS.trsm\n\ndoc\"\"\"\n    blas_set_num_threads(n)\n\nSet the number of threads the BLAS library should use.\n\"\"\"\nLinAlg.BLAS.blas_set_num_threads\n\ndoc\"\"\"\n    asum(n, X, incx)\n\nsum of the absolute values of the first `n` elements of array `X` with stride `incx`.\n\"\"\"\nLinAlg.BLAS.asum\n\ndoc\"\"\"\n    trmv!(side, ul, tA, dA, alpha, A, b)\n\nUpdate `b` as `alpha*A*b` or one of the other three variants determined by `side` (`A` on left or right) and `tA` (transpose `A`). Only the `ul` triangle of `A` is used. `dA` indicates if `A` is unit-triangular (the diagonal is assumed to be all ones). Returns the updated `b`.\n\"\"\"\nLinAlg.BLAS.trmv!\n\ndoc\"\"\"\n    gemm(tA, tB, alpha, A, B)\n\nReturns `alpha*A*B` or the other three variants according to `tA` (transpose `A`) and `tB`.\n\"\"\"\nLinAlg.BLAS.gemm(tA, tB, alpha, A, B)\n\ndoc\"\"\"\n    gemm(tA, tB, A, B)\n\nReturns `A*B` or the other three variants according to `tA` (transpose `A`) and `tB`.\n\"\"\"\nLinAlg.BLAS.gemm(tA, tB, A, B)\n\ndoc\"\"\"\n    symm!(side, ul, alpha, A, B, beta, C)\n\nUpdate `C` as `alpha*A*B + beta*C` or `alpha*B*A + beta*C` according to `side`. `A` is assumed to be symmetric. Only the `ul` triangle of `A` is used. Returns the updated `C`.\n\"\"\"\nLinAlg.BLAS.symm!\n\ndoc\"\"\"\n    scal(n, a, X, incx)\n\nReturns `a*X`.\n\"\"\"\nLinAlg.BLAS.scal\n\ndoc\"\"\"\n    nrm2(n, X, incx)\n\n2-norm of a vector consisting of `n` elements of array `X` with stride `incx`.\n\"\"\"\nLinAlg.BLAS.nrm2\n\ndoc\"\"\"\n    trmm!(side, ul, tA, dA, alpha, A, B)\n\nUpdate `B` as `alpha*A*B` or one of the other three variants determined by `side` (`A` on left or right) and `tA` (transpose `A`). Only the `ul` triangle of `A` is used. `dA` indicates if `A` is unit-triangular (the diagonal is assumed to be all ones). Returns the updated `B`.\n\"\"\"\nLinAlg.BLAS.trmm!\n\ndoc\"\"\"\n    trmm(side, ul, tA, dA, alpha, A, B)\n\nReturns `alpha*A*B` or one of the other three variants determined by `side` (`A` on left or right) and `tA` (transpose `A`). Only the `ul` triangle of `A` is used. `dA` indicates if `A` is unit-triangular (the diagonal is assumed to be all ones).\n\"\"\"\nLinAlg.BLAS.trmm\n\n# Libdl\n\ndoc\"\"\"\n    dlopen(libfile::AbstractString [, flags::Integer])\n\nLoad a shared library, returning an opaque handle.\n\nThe optional flags argument is a bitwise-or of zero or more of `RTLD_LOCAL`, `RTLD_GLOBAL`, `RTLD_LAZY`, `RTLD_NOW`, `RTLD_NODELETE`, `RTLD_NOLOAD`, `RTLD_DEEPBIND`, and `RTLD_FIRST`. These are converted to the corresponding flags of the POSIX (and/or GNU libc and/or MacOS) dlopen command, if possible, or are ignored if the specified functionality is not available on the current platform. The default flags are platform specific. On MacOS the default `dlopen` flags are `RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL` while on other platforms the defaults are `RTLD_LAZY|RTLD_DEEPBIND|RTLD_LOCAL`. An important usage of these flags is to specify non default behavior for when the dynamic library loader binds library references to exported symbols and if the bound references are put into process local or global scope. For instance `RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL` allows the library's symbols to be available for usage in other shared libraries, addressing situations where there are dependencies between shared libraries.\n\"\"\"\nLibdl.dlopen\n\ndoc\"\"\"\n    dlclose(handle)\n\nClose shared library referenced by handle.\n\"\"\"\nLibdl.dlclose\n\ndoc\"\"\"\n    dlsym_e(handle, sym)\n\nLook up a symbol from a shared library handle, silently return `NULL` pointer on lookup failure.\n\"\"\"\nLibdl.dlsym_e\n\ndoc\"\"\"\n```rst\n..  dlopen_e(libfile::AbstractString [, flags::Integer])\n\nSimilar to :func:`dlopen`, except returns a ``NULL`` pointer instead of raising errors.\n```\n\"\"\"\nLibdl.dlopen_e\n\ndoc\"\"\"\n    find_library(names, locations)\n\nSearches for the first library in `names` in the paths in the `locations` list, `DL_LOAD_PATH`, or system library paths (in that order) which can successfully be dlopen'd. On success, the return value will be one of the names (potentially prefixed by one of the paths in locations). This string can be assigned to a `global const` and used as the library name in future `ccall`'s. On failure, it returns the empty string.\n\"\"\"\nLibdl.find_library\n\ndoc\"\"\"\n    dlsym(handle, sym)\n\nLook up a symbol from a shared library handle, return callable function pointer on success.\n\"\"\"\nLibdl.dlsym\n\n# Libc\n\ndoc\"\"\"\n    TmStruct([seconds])\n\nConvert a number of seconds since the epoch to broken-down format, with fields `sec`, `min`, `hour`, `mday`, `month`, `year`, `wday`, `yday`, and `isdst`.\n\"\"\"\nLibc.TmStruct\n\ndoc\"\"\"\n    dlext\n\nFile extension for dynamic libraries (e.g. dll, dylib, so) on the current platform.\n\"\"\"\nLibdl.dlext\n\ndoc\"\"\"\n    time(t::TmStruct)\n\nConverts a `TmStruct` struct to a number of seconds since the epoch.\n\"\"\"\nLibc.time\n\ndoc\"\"\"\n    calloc(num::Integer, size::Integer) -> Ptr{Void}\n\nCall `calloc` from the C standard library.\n\"\"\"\nLibc.calloc\n\ndoc\"\"\"\n    strerror(n=errno())\n\nConvert a system call error code to a descriptive string\n\"\"\"\nLibc.strerror\n\ndoc\"\"\"\n    realloc(addr::Ptr, size::Integer) -> Ptr{Void}\n\nCall `realloc` from the C standard library.\n\nSee warning in the documentation for `free` regarding only using this on memory originally obtained from `malloc`.\n\"\"\"\nLibc.realloc\n\ndoc\"\"\"\n    free(addr::Ptr)\n\nCall `free` from the C standard library. Only use this on memory obtained from `malloc`, not on pointers retrieved from other C libraries. `Ptr` objects obtained from C libraries should be freed by the free functions defined in that library, to avoid assertion failures if multiple `libc` libraries exist on the system.\n\"\"\"\nLibc.free\n\ndoc\"\"\"\n    strftime([format], time)\n\nConvert time, given as a number of seconds since the epoch or a `TmStruct`, to a formatted string using the given format. Supported formats are the same as those in the standard C library.\n\"\"\"\nLibc.strftime\n\ndoc\"\"\"\n    errno([code])\n\nGet the value of the C library's `errno`. If an argument is specified, it is used to set the value of `errno`.\n\nThe value of `errno` is only valid immediately after a `ccall` to a C library routine that sets it. Specifically, you cannot call `errno` at the next prompt in a REPL, because lots of code is executed between prompts.\n\"\"\"\nLibc.errno\n\ndoc\"\"\"\n    malloc(size::Integer) -> Ptr{Void}\n\nCall `malloc` from the C standard library.\n\"\"\"\nLibc.malloc\n\ndoc\"\"\"\n    strptime([format], timestr)\n\nParse a formatted time string into a `TmStruct` giving the seconds, minute, hour, date, etc. Supported formats are the same as those in the standard C library. On some platforms, timezones will not be parsed correctly. If the result of this function will be passed to `time` to convert it to seconds since the epoch, the `isdst` field should be filled in manually. Setting it to `-1` will tell the C library to use the current system settings to determine the timezone.\n\"\"\"\nLibc.strptime\n\ndoc\"\"\"\n    flush_cstdio()\n\nFlushes the C `stdout` and `stderr` streams (which may have been written to by external C code).\n\"\"\"\nLibc.flush_cstdio\n\ndoc\"\"\"\n```rst\n..  msync(ptr, len, [flags])\n\nForces synchronization of the :func:`mmap`\\ ped memory region from ``ptr`` to ``ptr+len``. Flags defaults to ``MS_SYNC``, but can be a combination of ``MS_ASYNC``, ``MS_SYNC``, or ``MS_INVALIDATE``. See your platform man page for specifics. The flags argument is not valid on Windows.\n\nYou may not need to call ``msync``, because synchronization is performed at intervals automatically by the operating system. However, you can call this directly if, for example, you are concerned about losing the result of a long-running calculation.\n```\n\"\"\"\nLibc.msync\n\n# Base.Collections\n\ndoc\"\"\"\n```rst\n..  PriorityQueue(K, V, [ord])\n\nConstruct a new :obj:`PriorityQueue`, with keys of type ``K`` and values/priorites of\ntype ``V``. If an order is not given, the priority queue is min-ordered using\nthe default comparison for ``V``.\n```\n\"\"\"\nCollections.PriorityQueue\n\ndoc\"\"\"\n    enqueue!(pq, k, v)\n\nInsert the a key `k` into a priority queue `pq` with priority `v`.\n\"\"\"\nCollections.enqueue!\n\ndoc\"\"\"\n    dequeue!(pq)\n\nRemove and return the lowest priority key from a priority queue.\n\"\"\"\nCollections.dequeue!\n\ndoc\"\"\"\n    peek(pq)\n\nReturn the lowest priority key from a priority queue without removing that key from the queue.\n\"\"\"\nCollections.peek\n\ndoc\"\"\"\n```rst\n..  heapify!(v, [ord])\n\nIn-place :func:`heapify`.\n```\n\"\"\"\nCollections.heapify!\n\ndoc\"\"\"\n    heappush!(v, x, [ord])\n\nGiven a binary heap-ordered array, push a new element `x`, preserving the heap property. For efficiency, this function does not check that the array is indeed heap-ordered.\n\"\"\"\nCollections.heappush!\n\ndoc\"\"\"\n    heappop!(v, [ord])\n\nGiven a binary heap-ordered array, remove and return the lowest ordered element. For efficiency, this function does not check that the array is indeed heap-ordered.\n\"\"\"\nCollections.heappop!\n\ndoc\"\"\"\n    heapify(v, [ord])\n\nReturn a new vector in binary heap order, optionally using the given ordering.\n\"\"\"\nCollections.heapify\n\ndoc\"\"\"\n    isheap(v, [ord])\n\nReturn `true` iff an array is heap-ordered according to the given order.\n\"\"\"\nCollections.isheap\n\n# Base.Test\n\ndoc\"\"\"\n    @test_throws(extype, ex)\n\nTest that the expression `ex` throws an exception of type `extype` and calls the current handler to handle the result.\n\"\"\"\n:(Test.@test_throws)\n\ndoc\"\"\"\n    @test_approx_eq_eps(a, b, tol)\n\nTest two floating point numbers `a` and `b` for equality taking in account a margin of tolerance given by `tol`.\n\"\"\"\n:(Test.@test_approx_eq_eps)\n\ndoc\"\"\"\n    @test(ex)\n\nTest the expression `ex` and calls the current handler to handle the result.\n\"\"\"\n:(Test.@test)\n\ndoc\"\"\"\n    @test_approx_eq(a, b)\n\nTest two floating point numbers `a` and `b` for equality taking in account small numerical errors.\n\"\"\"\n:(Test.@test_approx_eq)\n\ndoc\"\"\"\n    with_handler(f, handler)\n\nRun the function `f` using the `handler` as the handler.\n\"\"\"\nTest.with_handler\n\n# Base.Profile\n\ndoc\"\"\"\n```rst\n..  print([io::IO = STDOUT,] [data::Vector]; format = :tree, C = false, combine = true, cols = tty_cols(), maxdepth = typemax(Int), sortedby = :filefuncline)\n\nPrints profiling results to ``io`` (by default, ``STDOUT``). If you\ndo not supply a ``data`` vector, the internal buffer of accumulated\nbacktraces will be used.  ``format`` can be ``:tree`` or\n``:flat``. If ``C==true``, backtraces from C and Fortran code are\nshown. ``combine==true`` merges instruction pointers that\ncorrespond to the same line of code.  ``cols`` controls the width\nof the display. ``maxdepth`` can be used to limit the depth of printing in ``:tree``\nformat, while ``sortedby`` can be used to control the order in ``:flat``\nformat (``:filefuncline`` sorts by the source line, whereas ``:count``\nsorts in order of number of collected samples).\n```\n\"\"\"\nProfile.print(io::IO = STDOUT, data::Vector=?)\n\ndoc\"\"\"\n```rst\n..  print([io::IO = STDOUT,] data::Vector, lidict::Dict; kwargs)\n\nPrints profiling results to ``io``. This variant is used to examine\nresults exported by a previous call to :func:`retrieve`.\nSupply the vector ``data`` of backtraces and a dictionary\n``lidict`` of line information.\n\nSee ``Profile.print([io], data)`` for an explanation of the valid keyword arguments.\n```\n\"\"\"\nProfile.print(io::IO = STDOUT, data::Vector = ?, lidict::Dict = ?)\n\ndoc\"\"\"\n    init(; n::Integer, delay::Float64)\n\nConfigure the `delay` between backtraces (measured in seconds), and the number `n` of instruction pointers that may be stored. Each instruction pointer corresponds to a single line of code; backtraces generally consist of a long list of instruction pointers. Default settings can be obtained by calling this function with no arguments, and each can be set independently using keywords or in the order `(n, delay)`.\n\"\"\"\nProfile.init\n\ndoc\"\"\"\n```rst\n..  clear_malloc_data()\n\nClears any stored memory allocation data when running julia with\n``--track-allocation``.  Execute the command(s) you want to test\n(to force JIT-compilation), then call :func:`clear_malloc_data`.\nThen execute your command(s) again, quit Julia, and examine the\nresulting ``*.mem`` files.\n```\n\"\"\"\nProfile.clear_malloc_data\n\ndoc\"\"\"\n```rst\n..  callers(funcname, [data, lidict], [filename=<filename>], [linerange=<start:stop>]) -> Vector{Tuple{count, linfo}}\n\nGiven a previous profiling run, determine who called a particular\nfunction. Supplying the filename (and optionally, range of line\nnumbers over which the function is defined) allows you to\ndisambiguate an overloaded method. The returned value is a vector\ncontaining a count of the number of calls and line information\nabout the caller.  One can optionally supply backtrace data\nobtained from :func:`retrieve`; otherwise, the current internal profile\nbuffer is used.\n```\n\"\"\"\nProfile.callers\n\ndoc\"\"\"\n```rst\n..  fetch() -> data\n\nReturns a reference to the internal buffer of backtraces. Note that\nsubsequent operations, like :func:`clear`, can affect\n``data`` unless you first make a copy. Note that the values in\n``data`` have meaning only on this machine in the current session,\nbecause it depends on the exact memory addresses used in\nJIT-compiling. This function is primarily for internal use;\n:func:`retrieve` may be a better choice for most users.\n```\n\"\"\"\nProfile.fetch\n\ndoc\"\"\"\n    retrieve() -> data, lidict\n\n\"Exports\" profiling results in a portable format, returning the set of all backtraces (`data`) and a dictionary that maps the (session-specific) instruction pointers in `data` to `LineInfo` values that store the file name, function name, and line number. This function allows you to save profiling results for future analysis.\n\"\"\"\nProfile.retrieve\n\ndoc\"\"\"\n    clear()\n\nClear any existing backtraces from the internal buffer.\n\"\"\"\nProfile.clear\n\n# Base.Cartesian\n\ndoc\"\"\"\n    @nall N expr\n\n`@nall 3 d->(i_d > 1)` would generate the expression `(i_1 > 1 && i_2 > 1 && i_3 > 1)`. This can be convenient for bounds-checking.\n\"\"\"\n:(Cartesian.@nall)\n\ndoc\"\"\"\n    @nloops N itersym rangeexpr bodyexpr\n    @nloops N itersym rangeexpr preexpr bodyexpr\n    @nloops N itersym rangeexpr preexpr postexpr bodyexpr\n\nGenerate `N` nested loops, using `itersym` as the prefix for the iteration variables. `rangeexpr` may be an anonymous-function expression, or a simple symbol `var` in which case the range is `1:size(var,d)` for dimension `d`.\n\nOptionally, you can provide \"pre\" and \"post\" expressions. These get executed first and last, respectively, in the body of each loop. For example, :\n\n    @nloops 2 i A d->j_d=min(i_d,5) begin\n        s += @nref 2 A j\n    end\n\nwould generate :\n\n    for i_2 = 1:size(A, 2)\n        j_2 = min(i_2, 5)\n        for i_1 = 1:size(A, 1)\n            j_1 = min(i_1, 5)\n            s += A[j_1,j_2]\n        end\n    end\n\nIf you want just a post-expression, supply `nothing` for the pre-expression. Using parenthesis and semicolons, you can supply multi-statement expressions.\n\"\"\"\n:(Cartesian.@nloops)\n\ndoc\"\"\"\n    @ntuple N expr\n\nGenerates an `N`-tuple. `@ntuple 2 i` would generate `(i_1, i_2)`, and `@ntuple 2 k->k+1` would generate `(2,3)`.\n\"\"\"\n:(Cartesian.@ntuple)\n\ndoc\"\"\"\n    @nif N conditionexpr expr\n    @nif N conditionexpr expr elseexpr\n\nGenerates a sequence of `if ... elseif ... else ... end` statements. For example:\n\n    @nif 3 d->(i_d >= size(A,d)) d->(error(\"Dimension \", d, \" too big\")) d->println(\"All OK\")\n\nwould generate:\n\n    if i_1 > size(A, 1)\n        error(\"Dimension \", 1, \" too big\")\n    elseif i_2 > size(A, 2)\n        error(\"Dimension \", 2, \" too big\")\n    else\n        println(\"All OK\")\n    end\n\"\"\"\n:(Cartesian.@nif)\n\ndoc\"\"\"\n    @nref N A indexexpr\n\nGenerate expressions like `A[i_1,i_2,...]`. `indexexpr` can either be an iteration-symbol prefix, or an anonymous-function expression.\n\"\"\"\n:(Cartesian.@nref)\n\ndoc\"\"\"\n    @nexprs N expr\n\nGenerate `N` expressions. `expr` should be an anonymous-function expression.\n\"\"\"\n:(Cartesian.@nexprs)\n\n# Base\n\ndoc\"\"\"\n    @time\n\nA macro to execute an expression, printing the time it took to execute, the number of allocations, and the total number of bytes its execution caused to be allocated, before returning the value of the expression.\n\"\"\"\n:@time\n\ndoc\"\"\"\n    systemerror(sysfunc, iftrue)\n\nRaises a `SystemError` for `errno` with the descriptive string `sysfunc` if `iftrue` is `true`\n\"\"\"\nsystemerror\n\ndoc\"\"\"\n    writedlm(f, A, delim='\\\\t')\n\nWrite `A` (a vector, matrix or an iterable collection of iterable rows) as text to `f` (either a filename string or an `IO` stream) using the given delimeter `delim` (which defaults to tab, but can be any printable Julia object, typically a `Char` or `AbstractString`).\n\nFor example, two vectors `x` and `y` of the same length can be written as two columns of tab-delimited text to `f` by either `writedlm(f, [x y])` or by `writedlm(f, zip(x, y))`.\n\"\"\"\nwritedlm\n\ndoc\"\"\"\n    cholfact(A, [LU=:U[,pivot=Val{false}]][;tol=-1.0]) -> Cholesky\n\nCompute the Cholesky factorization of a dense symmetric positive (semi)definite matrix `A` and return either a `Cholesky` if `pivot==Val{false}` or `CholeskyPivoted` if `pivot==Val{true}`. `LU` may be `:L` for using the lower part or `:U` for the upper part. The default is to use `:U`. The triangular matrix can be obtained from the factorization `F` with: `F[:L]` and `F[:U]`. The following functions are available for `Cholesky` objects: `size`, `\\`, `inv`, `det`. For `CholeskyPivoted` there is also defined a `rank`. If `pivot==Val{false}` a `PosDefException` exception is thrown in case the matrix is not positive definite. The argument `tol` determines the tolerance for determining the rank. For negative values, the tolerance is the machine precision.\n\"\"\"\ncholfact(A, LU=:U, pivot=Val{false})\n\ndoc\"\"\"\n    cholfact(A; shift=0, perm=Int[]) -> CHOLMOD.Factor\n\nCompute the Cholesky factorization of a sparse positive definite matrix `A`. A fill-reducing permutation is used. `F = cholfact(A)` is most frequently used to solve systems of equations with `F\\b`, but also the methods `diag`, `det`, `logdet` are defined for `F`. You can also extract individual factors from `F`, using `F[:L]`. However, since pivoting is on by default, the factorization is internally represented as `A == P'*L*L'*P` with a permutation matrix `P`; using just `L` without accounting for `P` will give incorrect answers. To include the effects of permutation, it's typically preferable to extact \"combined\" factors like `PtL = F[:PtL]` (the equivalent of `P'*L`) and `LtP = F[:UP]` (the equivalent of `L'*P`).\n\nSetting optional `shift` keyword argument computes the factorization of `A+shift*I` instead of `A`. If the `perm` argument is nonempty, it should be a permutation of `1:size(A,1)` giving the ordering to use (instead of CHOLMOD's default AMD ordering).\n\nThe function calls the C library CHOLMOD and many other functions from the library are wrapped but not exported.\n\"\"\"\ncholfact(A)\n\ndoc\"\"\"\n    digamma(x)\n\nCompute the digamma function of `x` (the logarithmic derivative of `gamma(x)`)\n\"\"\"\ndigamma\n\ndoc\"\"\"\n    fill!(A, x)\n\nFill array `A` with the value `x`. If `x` is an object reference, all elements will refer to the same object. `fill!(A, Foo())` will return `A` filled with the result of evaluating `Foo()` once.\n\"\"\"\nfill!\n\ndoc\"\"\"\n    read!(stream, array::Array)\n\nRead binary data from a stream, filling in the argument `array`.\n\"\"\"\nread!\n\ndoc\"\"\"\n    empty!(collection) -> collection\n\nRemove all elements from a `collection`.\n\"\"\"\nempty!\n\ndoc\"\"\"\n    asin(x)\n\nCompute the inverse sine of `x`, where the output is in radians\n\"\"\"\nasin\n\ndoc\"\"\"\n    <:(T1, T2)\n\nSubtype operator, equivalent to `issubtype(T1,T2)`.\n\"\"\"\nBase.(:(<:))\n\ndoc\"\"\"\n    schedule(t::Task, [val]; error=false)\n\nAdd a task to the scheduler's queue. This causes the task to run constantly when the system is otherwise idle, unless the task performs a blocking operation such as `wait`.\n\nIf a second argument is provided, it will be passed to the task (via the return value of `yieldto`) when it runs again. If `error` is `true`, the value is raised as an exception in the woken task.\n\"\"\"\nschedule\n\ndoc\"\"\"\n```rst\n..  step(r)\n\nGet the step size of a :obj:`Range` object.\n```\n\"\"\"\nstep\n\ndoc\"\"\"\n    utf32(s)\n\nCreate a UTF-32 string from a byte array, array of `Char` or `UInt32`, or any other string type. (Conversions of byte arrays check for a byte-order marker in the first four bytes, and do not include it in the resulting string.)\n\nNote that the resulting `UTF32String` data is terminated by the NUL codepoint (32-bit zero), which is not treated as a character in the string (so that it is mostly invisible in Julia); this allows the string to be passed directly to external functions requiring NUL-terminated data. This NUL is appended automatically by the `utf32(s)` conversion function. If you have a `Char` or `UInt32` array `A` that is already NUL-terminated UTF-32 data, then you can instead use `UTF32String(A)` to construct the string without making a copy of the data and treating the NUL as a terminator rather than as part of the string.\n\"\"\"\nutf32(s)\n\ndoc\"\"\"\n    utf32(::Union{Ptr{Char},Ptr{UInt32},Ptr{Int32}} [, length])\n\nCreate a string from the address of a NUL-terminated UTF-32 string. A copy is made; the pointer can be safely freed. If `length` is specified, the string does not have to be NUL-terminated.\n\"\"\"\nutf32(::Union{Ptr{Char},Ptr{UInt32},Ptr{Int32}}, length=?)\n\ndoc\"\"\"\n    takebuf_array(b::IOBuffer)\n\nObtain the contents of an `IOBuffer` as an array, without copying. Afterwards, the IOBuffer is reset to its initial state.\n\"\"\"\ntakebuf_array\n\ndoc\"\"\"\n    download(url,[localfile])\n\nDownload a file from the given url, optionally renaming it to the given local file name. Note that this function relies on the availability of external tools such as `curl`, `wget` or `fetch` to download the file and is provided for convenience. For production use or situations in which more options are needed, please use a package that provides the desired functionality instead.\n\"\"\"\ndownload\n\ndoc\"\"\"\n    @everywhere\n\nExecute an expression on all processes. Errors on any of the processes are collected into a `CompositeException` and thrown.\n\"\"\"\n:@everywhere\n\ndoc\"\"\"\n    lstrip(string, [chars])\n\nReturn `string` with any leading whitespace removed. If `chars` (a character, or vector or set of characters) is provided, instead remove characters contained in it.\n\"\"\"\nlstrip\n\ndoc\"\"\"\n    reenable_sigint(f::Function)\n\nRe-enable Ctrl-C handler during execution of a function. Temporarily reverses the effect of `disable_sigint`.\n\"\"\"\nreenable_sigint\n\ndoc\"\"\"\n    indmin(itr) -> Integer\n\nReturns the index of the minimum element in a collection.\n\"\"\"\nindmin\n\ndoc\"\"\"\n    powermod(x, p, m)\n\nCompute $x^p \\pmod m$.\n\"\"\"\npowermod\n\ndoc\"\"\"\n    typeintersect(T, S)\n\nCompute a type that contains the intersection of `T` and `S`. Usually this will be the smallest such type or one close to it.\n\"\"\"\ntypeintersect\n\ndoc\"\"\"\n    pointer(array [, index])\n\nGet the native address of an array or string element. Be careful to ensure that a julia reference to `a` exists as long as this pointer will be used. This function is \"unsafe\" like `unsafe_convert`.\n\nCalling `Ref(array[, index])` is generally preferable to this function.\n\"\"\"\npointer\n\ndoc\"\"\"\n    isnan(f) -> Bool\n\nTest whether a floating point number is not a number (NaN)\n\"\"\"\nisnan\n\ndoc\"\"\"\n```rst\n..  println(x)\n\nPrint (using :func:`print`) ``x`` followed by a newline.\n```\n\"\"\"\nprintln\n\ndoc\"\"\"\n    besselj(nu, x)\n\nBessel function of the first kind of order `nu`, $J_\\nu(x)$.\n\"\"\"\nbesselj\n\ndoc\"\"\"\n```rst\n..  @code_lowered\n\nEvaluates the arguments to the function call, determines their types, and calls :func:`code_lowered` on the resulting expression.\n```\n\"\"\"\n:@code_lowered\n\ndoc\"\"\"\n    //(num, den)\n\nDivide two integers or rational numbers, giving a `Rational` result.\n\"\"\"\nBase.(:(//))\n\ndoc\"\"\"\n    At_mul_B(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d40\u22c5B$\n\"\"\"\nAt_mul_B\n\ndoc\"\"\"\n    methods(f, [types])\n\nReturns the method table for `f`.\n\nIf `types` is specified, returns an array of methods whose types match.\n\"\"\"\nmethods\n\ndoc\"\"\"\n```rst\n..  pmap(f, lsts...; err_retry=true, err_stop=false, pids=workers())\n\nTransform collections ``lsts`` by applying ``f`` to each element in parallel.\n(Note that ``f`` must be made available to all worker processes; see :ref:`Code Availability and Loading Packages <man-parallel-computing-code-availability>` for details.)\nIf ``nprocs() > 1``, the calling process will be dedicated to assigning tasks.\nAll other available processes will be used as parallel workers, or on the processes specified by ``pids``.\n\nIf ``err_retry`` is ``true``, it retries a failed application of ``f`` on a different worker.\nIf ``err_stop`` is ``true``, it takes precedence over the value of ``err_retry`` and ``pmap`` stops execution on the first error.\n```\n\"\"\"\npmap\n\ndoc\"\"\"\n    workers()\n\nReturns a list of all worker process identifiers.\n\"\"\"\nworkers\n\ndoc\"\"\"\n    isinteger(x) -> Bool\n\nTest whether `x` or all its elements are numerically equal to some integer\n\"\"\"\nisinteger\n\ndoc\"\"\"\n    sortrows(A, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nSort the rows of matrix `A` lexicographically.\n\"\"\"\nsortrows\n\ndoc\"\"\"\n    ./(x, y)\n\nElement-wise right division operator.\n\"\"\"\nBase.(:(./))\n\ndoc\"\"\"\n    IPv6(host::Integer) -> IPv6\n\nReturns IPv6 object from ip address formatted as Integer\n\"\"\"\nIPv6\n\ndoc\"\"\"\n    prod!(r, A)\n\nMultiply elements of `A` over the singleton dimensions of `r`, and write results to `r`.\n\"\"\"\nprod!\n\ndoc\"\"\"\n    hist2d!(counts, M, e1, e2) -> (e1, e2, counts)\n\nCompute a \"2d histogram\" with respect to the bins delimited by the edges given in `e1` and `e2`. This function writes the results to a pre-allocated array `counts`.\n\"\"\"\nhist2d!\n\ndoc\"\"\"\n    fieldtype(T, name::Symbol | index::Int)\n\nDetermine the declared type of a field (specified by name or index) in a composite DataType `T`.\n\"\"\"\nfieldtype\n\ndoc\"\"\"\n    hypot(x, y)\n\nCompute the $\\sqrt{x^2+y^2}$ avoiding overflow and underflow\n\"\"\"\nhypot\n\ndoc\"\"\"\n    airybi(x)\n\nAiry function $\\operatorname{Bi}(x)$.\n\"\"\"\nairybi\n\ndoc\"\"\"\n    gensym([tag])\n\nGenerates a symbol which will not conflict with other variable names.\n\"\"\"\ngensym\n\ndoc\"\"\"\n    cummin(A, [dim])\n\nCumulative minimum along a dimension. The dimension defaults to 1.\n\"\"\"\ncummin\n\ndoc\"\"\"\n    minabs!(r, A)\n\nCompute the minimum absolute values over the singleton dimensions of `r`, and write values to `r`.\n\"\"\"\nminabs!\n\ndoc\"\"\"\n    prevprod([k_1,k_2,...], n)\n\nPrevious integer not greater than `n` that can be written as $\\prod k_i^{p_i}$ for integers $p_1$, $p_2$, etc.\n\"\"\"\nprevprod\n\ndoc\"\"\"\n    @evalpoly(z, c...)\n\nEvaluate the polynomial $\\sum_k c[k] z^{k-1}$ for the\ncoefficients `c[1]`, `c[2]`, ...; that is, the coefficients are\ngiven in ascending order by power of `z`.  This macro expands to\nefficient inline code that uses either Horner's method or, for\ncomplex `z`, a more efficient Goertzel-like algorithm.\n\"\"\"\n:@evalpoly\n\ndoc\"\"\"\n```rst\n..  eigfact!(A, [B])\n\nSame as :func:`eigfact`, but saves space by overwriting the input ``A`` (and\n``B``), instead of creating a copy.\n```\n\"\"\"\neigfact!\n\ndoc\"\"\"\n    cosh(x)\n\nCompute hyperbolic cosine of `x`\n\"\"\"\ncosh\n\ndoc\"\"\"\n```rst\n..  ipermutedims(A, perm)\n\nLike :func:`permutedims`, except the inverse of the given permutation is applied.\n```\n\"\"\"\nipermutedims\n\ndoc\"\"\"\n    dirname(path::AbstractString) -> AbstractString\n\nGet the directory part of a path.\n\"\"\"\ndirname\n\ndoc\"\"\"\n    isfile(path) -> Bool\n\nReturns `true` if `path` is a regular file, `false` otherwise.\n\"\"\"\nisfile\n\ndoc\"\"\"\n    symlink(target, link)\n\nCreates a symbolic link to `target` with the name `link`.\n\n**note**\n\nThis function raises an error under operating systems that do not support soft symbolic links, such as Windows XP.\n\"\"\"\nsymlink\n\ndoc\"\"\"\n    task_local_storage(symbol)\n\nLook up the value of a symbol in the current task's task-local storage.\n\"\"\"\ntask_local_storage(symbol)\n\ndoc\"\"\"\n    task_local_storage(symbol, value)\n\nAssign a value to a symbol in the current task's task-local storage.\n\"\"\"\ntask_local_storage(symbol, value)\n\ndoc\"\"\"\n    task_local_storage(body, symbol, value)\n\nCall the function `body` with a modified task-local storage, in which `value` is assigned to `symbol`; the previous value of `symbol`, or lack thereof, is restored afterwards. Useful for emulating dynamic scoping.\n\"\"\"\ntask_local_storage(body, symbol, value)\n\ndoc\"\"\"\n    diff(A, [dim])\n\nFinite difference operator of matrix or vector.\n\"\"\"\ndiff\n\ndoc\"\"\"\n    precision(num::AbstractFloat)\n\nGet the precision of a floating point number, as defined by the effective number of bits in the mantissa.\n\"\"\"\nprecision\n\ndoc\"\"\"\n    cor(v1[, v2][, vardim=1, mean=nothing])\n\nCompute the Pearson correlation between the vector(s) in `v1` and `v2`.\n\nUsers can use the keyword argument `vardim` to specify the variable dimension, and `mean` to supply pre-computed mean values.\n\"\"\"\ncor\n\ndoc\"\"\"\n    partitions(n)\n\nGenerate all integer arrays that sum to `n`. Because the number of partitions can be very large, this function returns an iterator object. Use `collect(partitions(n))` to get an array of all partitions. The number of partitions to generate can be efficiently computed using `length(partitions(n))`.\n\"\"\"\npartitions(n::Integer)\n\ndoc\"\"\"\n    partitions(n, m)\n\nGenerate all arrays of `m` integers that sum to `n`. Because the number of partitions can be very large, this function returns an iterator object. Use `collect(partitions(n,m))` to get an array of all partitions. The number of partitions to generate can be efficiently computed using `length(partitions(n,m))`.\n\"\"\"\npartitions(n::Integer, m::Integer)\n\ndoc\"\"\"\n    partitions(array)\n\nGenerate all set partitions of the elements of an array, represented as arrays of arrays. Because the number of partitions can be very large, this function returns an iterator object. Use `collect(partitions(array))` to get an array of all partitions. The number of partitions to generate can be efficiently computed using `length(partitions(array))`.\n\"\"\"\npartitions(array)\n\ndoc\"\"\"\n    partitions(array, m)\n\nGenerate all set partitions of the elements of an array into exactly m subsets, represented as arrays of arrays. Because the number of partitions can be very large, this function returns an iterator object. Use `collect(partitions(array,m))` to get an array of all partitions. The number of partitions into m subsets is equal to the Stirling number of the second kind and can be efficiently computed using `length(partitions(array,m))`.\n\"\"\"\npartitions(array, m::Integer)\n\ndoc\"\"\"\n    readlines(stream)\n\nRead all lines as an array.\n\"\"\"\nreadlines\n\ndoc\"\"\"\n    findnz(A)\n\nReturn a tuple `(I, J, V)` where `I` and `J` are the row and column indexes of the non-zero values in matrix `A`, and `V` is a vector of the non-zero values.\n\"\"\"\nfindnz\n\ndoc\"\"\"\n    RemoteRef()\n\nMake an uninitialized remote reference on the local machine.\n\"\"\"\nRemoteRef()\n\ndoc\"\"\"\n    RemoteRef(n)\n\nMake an uninitialized remote reference on process `n`.\n\"\"\"\nRemoteRef(::Integer)\n\ndoc\"\"\"\n```rst\n..  foldl(op, v0, itr)\n\nLike :func:`reduce`, but with guaranteed left associativity. ``v0``\nwill be used exactly once.\n```\n\"\"\"\nfoldl(op, v0, itr)\n\ndoc\"\"\"\n```rst\n..  foldl(op, itr)\n\nLike ``foldl(op, v0, itr)``, but using the first element of ``itr``\nas ``v0``. In general, this cannot be used with empty collections\n(see ``reduce(op, itr)``).\n```\n\"\"\"\nfoldl(op, itr)\n\ndoc\"\"\"\n    airybiprime(x)\n\nAiry function derivative $\\operatorname{Bi}'(x)$.\n\"\"\"\nairybiprime\n\ndoc\"\"\"\n    Ac_rdiv_B(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d34 / B$\n\"\"\"\nAc_rdiv_B\n\ndoc\"\"\"\n```rst\n..  set_rounding(T, mode)\n\nSet the rounding mode of floating point type ``T``, controlling the\nrounding of basic arithmetic functions (:func:`+`, :func:`-`, :func:`*`,\n:func:`/` and :func:`sqrt`) and type conversion.\n\nNote that this may affect other types, for instance changing the rounding\nmode of ``Float64`` will change the rounding mode of ``Float32``. See\n``get_rounding`` for available modes\n```\n\"\"\"\nset_rounding\n\ndoc\"\"\"\n    linspace(start, stop, n=100)\n\nConstruct a range of `n` linearly spaced elements from `start` to `stop`.\n\"\"\"\nlinspace\n\ndoc\"\"\"\n    promote_type(type1, type2)\n\nDetermine a type big enough to hold values of each argument type without loss, whenever possible. In some cases, where no type exists to which both types can be promoted losslessly, some loss is tolerated; for example, `promote_type(Int64,Float64)` returns `Float64` even though strictly, not all `Int64` values can be represented exactly as `Float64` values.\n\"\"\"\npromote_type\n\ndoc\"\"\"\n    ind2sub(dims, index) -> subscripts\n\nReturns a tuple of subscripts into an array with dimensions `dims`,\ncorresponding to the linear index `index`.\n\n**Example**: `i, j, ... = ind2sub(size(A), indmax(A))` provides the\nindices of the maximum element\n\"\"\"\nind2sub(dims::Tuple, index::Int)\n\ndoc\"\"\"\n    ind2sub(a, index) -> subscripts\n\nReturns a tuple of subscripts into array `a` corresponding to the linear index `index`\n\"\"\"\nind2sub(a, index)\n\ndoc\"\"\"\n    .*(x, y)\n\nElement-wise multiplication operator.\n\"\"\"\nBase.(:(.*))\n\ndoc\"\"\"\n    ror!(dest::BitArray{1}, src::BitArray{1}, i::Integer) -> BitArray{1}\n\nPerforms a right rotation operation on `src` and put the result into `dest`.\n\"\"\"\nror!(dest::BitArray{1}, src::BitArray{1}, i::Integer)\n\ndoc\"\"\"\n    ror!(B::BitArray{1}, i::Integer) -> BitArray{1}\n\nPerforms a right rotation operation on `B`.\n\"\"\"\nror!(B::BitArray{1}, i::Integer)\n\ndoc\"\"\"\n    range(start, [step], length)\n\nConstruct a range by length, given a starting value and optional step (defaults to 1).\n\"\"\"\nrange\n\ndoc\"\"\"\n    eltype(type)\n\nDetermine the type of the elements generated by iterating a collection of the given `type`. For associative collection types, this will be a `Pair{KeyType,ValType}`. The definition `eltype(x) = eltype(typeof(x))` is provided for convenience so that instances can be passed instead of types. However the form that accepts a type argument should be defined for new types.\n\"\"\"\neltype\n\ndoc\"\"\"\n    keytype(collection)\n\nFor associative collection types, this will be the type of the Key, This is not defined for non-associative collections\n\"\"\"\nkeytype\n\ndoc\"\"\"\n    valtype(collection)\n\nFor associative collection types, this will be the type of the Value, This is not defined for non-associative collections\n\"\"\"\nvaltype\n\ndoc\"\"\"\n    edit(file::AbstractString, [line])\n\nEdit a file optionally providing a line number to edit at. Returns to the julia prompt when you quit the editor.\n\"\"\"\nedit(file::AbstractString, line=?)\n\ndoc\"\"\"\n    edit(function, [types])\n\nEdit the definition of a function, optionally specifying a tuple of types to indicate which method to edit.\n\"\"\"\nedit(::Function, types=?)\n\ndoc\"\"\"\n    backtrace()\n\nGet a backtrace object for the current program point.\n\"\"\"\nbacktrace\n\ndoc\"\"\"\n    ignorestatus(command)\n\nMark a command object so that running it will not throw an error if the result code is non-zero.\n\"\"\"\nignorestatus\n\ndoc\"\"\"\n    reducedim(f, A, dims[, initial])\n\nReduce 2-argument function `f` along dimensions of `A`. `dims` is a vector specifying the dimensions to reduce, and `initial` is the initial value to use in the reductions. For `+`, `*`, `max` and `min` the `initial` argument is optional.\n\nThe associativity of the reduction is implementation-dependent; if you need a particular associativity, e.g. left-to-right, you should write your own loop. See documentation for `reduce`.\n\"\"\"\nreducedim\n\ndoc\"\"\"\n    -(x)\n\nUnary minus operator.\n\"\"\"\n-(x)\n\ndoc\"\"\"\n    -(x, y)\n\nSubtraction operator.\n\"\"\"\n-(x, y)\n\ndoc\"\"\"\n```rst\n..  mapfoldr(f, op, v0, itr)\n\nLike :func:`mapreduce`, but with guaranteed right associativity. ``v0``\nwill be used exactly once.\n```\n\"\"\"\nmapfoldr(f, op, v0, itr)\n\ndoc\"\"\"\n```rst\n..  mapfoldr(f, op, itr)\n\nLike ``mapfoldr(f, op, v0, itr)``, but using the first element of\n``itr`` as ``v0``. In general, this cannot be used with empty\ncollections (see ``reduce(op, itr)``).\n```\n\"\"\"\nmapfoldr(f, op, itr)\n\ndoc\"\"\"\n    broadcast_setindex!(A, X, inds...)\n\nBroadcasts the `X` and `inds` arrays to a common size and stores the value from each position in `X` at the indices given by the same positions in `inds`.\n\"\"\"\nbroadcast_setindex!\n\ndoc\"\"\"\n    Nullable(x)\n\nWrap value `x` in an object of type `Nullable`, which indicates whether a value is present. `Nullable(x)` yields a non-empty wrapper, and `Nullable{T}()` yields an empty instance of a wrapper that might contain a value of type `T`.\n\"\"\"\nNullable\n\ndoc\"\"\"\n    bits(n)\n\nA string giving the literal bit representation of a number.\n\"\"\"\nbits\n\ndoc\"\"\"\n    launch(manager::FooManager, params::Dict, launched::Vector{WorkerConfig}, launch_ntfy::Condition)\n\nImplemented by cluster managers. For every Julia worker launched by this function, it should append a `WorkerConfig` entry to `launched` and notify `launch_ntfy`. The function MUST exit once all workers, requested by `manager` have been launched. `params` is a dictionary of all keyword arguments `addprocs` was called with.\n\"\"\"\nlaunch\n\ndoc\"\"\"\n```rst\n..  @code_typed\n\nEvaluates the arguments to the function call, determines their types, and calls :func:`code_typed` on the resulting expression.\n```\n\"\"\"\n:@code_typed\n\ndoc\"\"\"\n    invdigamma(x)\n\nCompute the inverse digamma function of `x`.\n\"\"\"\ninvdigamma\n\ndoc\"\"\"\n```rst\n..  getindex(type[, elements...])\n\nConstruct a 1-d array of the specified type. This is usually called with the syntax ``Type[]``. Element values can be specified using ``Type[a,b,c,...]``.\n```\n\"\"\"\ngetindex(::Type, elements...)\n\ndoc\"\"\"\n```rst\n..  getindex(A, inds...)\n\nReturns a subset of array ``A`` as specified by ``inds``, where each ``ind`` may be an ``Int``, a ``Range``, or a ``Vector``. See the manual section on :ref:`array indexing <man-array-indexing>` for details.\n```\n\"\"\"\ngetindex(::AbstractArray, inds...)\n\ndoc\"\"\"\n```rst\n..  getindex(collection, key...)\n\nRetrieve the value(s) stored at the given key or index within a collection.\nThe syntax ``a[i,j,...]`` is converted by the compiler to\n``getindex(a, i, j, ...)``.\n```\n\"\"\"\ngetindex(collection, key...)\n\ndoc\"\"\"\n    cconvert(T,x)\n\nConvert `x` to a value of type `T`, typically by calling `convert(T,x)`\n\nIn cases where `x` cannot be safely converted to `T`, unlike `convert`, `cconvert` may return an object of a type different from `T`, which however is suitable for `unsafe_convert` to handle.\n\nNeither `convert` nor `cconvert` should take a Julia object and turn it into a `Ptr`.\n\"\"\"\ncconvert\n\ndoc\"\"\"\n    |>(x, f)\n\nApplies a function to the preceding argument. This allows for easy function chaining.\n\n```jldoctest\njulia> [1:5;] |> x->x.^2 |> sum |> inv\n0.01818181818181818\n```\n\"\"\"\nBase.(:(|>))\n\ndoc\"\"\"\n    assert(cond)\n\nThrow an `AssertionError` if `cond` is `false`. Also available as the macro `@assert expr`.\n\"\"\"\nassert\n\ndoc\"\"\"\n    sech(x)\n\nCompute the hyperbolic secant of `x`\n\"\"\"\nsech\n\ndoc\"\"\"\n    nworkers()\n\nGet the number of available worker processes. This is one less than `nprocs()`. Equal to `nprocs()` if `nprocs() == 1`.\n\"\"\"\nnworkers\n\ndoc\"\"\"\n    filemode(file)\n\nEquivalent to `stat(file).mode`\n\"\"\"\nfilemode\n\ndoc\"\"\"\n    print_joined(io, items, delim, [last])\n\nPrint elements of `items` to `io` with `delim` between them. If `last` is specified, it is used as the final delimiter instead of `delim`.\n\"\"\"\nprint_joined\n\ndoc\"\"\"\n    lfact(x)\n\nCompute the logarithmic factorial of `x`\n\"\"\"\nlfact\n\ndoc\"\"\"\n    deconv(b,a)\n\nConstruct vector `c` such that `b = conv(a,c) + r`. Equivalent to polynomial division.\n\"\"\"\ndeconv\n\ndoc\"\"\"\n    insert!(collection, index, item)\n\nInsert an `item` into `collection` at the given `index`.\n`index` is the index of `item` in the resulting `collection`.\n\n```jldoctest\njulia> insert!([6, 5, 4, 2, 1], 4, 3)\n6-element Array{Int64,1}:\n 6\n 5\n 4\n 3\n 2\n 1\n```\n\"\"\"\ninsert!\n\ndoc\"\"\"\n    repmat(A, n, m)\n\nConstruct a matrix by repeating the given matrix `n` times in dimension 1 and `m` times in dimension 2.\n\"\"\"\nrepmat\n\ndoc\"\"\"\n    acos(x)\n\nCompute the inverse cosine of `x`, where the output is in radians\n\"\"\"\nacos\n\ndoc\"\"\"\n    ispath(path) -> Bool\n\nReturns `true` if `path` is a valid filesystem path, `false` otherwise.\n\"\"\"\nispath\n\ndoc\"\"\"\n    fdio([name::AbstractString, ]fd::Integer[, own::Bool]) -> IOStream\n\nCreate an `IOStream` object from an integer file descriptor. If `own` is `true`, closing this object will close the underlying descriptor. By default, an `IOStream` is closed when it is garbage collected. `name` allows you to associate the descriptor with a named file.\n\"\"\"\nfdio\n\ndoc\"\"\"\n    unsafe_copy!(dest::Ptr{T}, src::Ptr{T}, N)\n\nCopy `N` elements from a source pointer to a destination, with no checking. The size of an element is determined by the type of the pointers.\n\nThe `unsafe` prefix on this function indicates that no validation is performed on the pointers `dest` and `src` to ensure that they are valid. Incorrect usage may corrupt or segfault your program, in the same manner as C.\n\"\"\"\nunsafe_copy!{T}(dest::Ptr{T}, src::Ptr{T}, N)\n\ndoc\"\"\"\n    unsafe_copy!(dest::Array, do, src::Array, so, N)\n\nCopy `N` elements from a source array to a destination, starting at offset `so` in the source and `do` in the destination (1-indexed).\n\nThe `unsafe` prefix on this function indicates that no validation is performed to ensure that N is inbounds on either array. Incorrect usage may corrupt or segfault your program, in the same manner as C.\n\"\"\"\nunsafe_copy!(dest::Array, d, src::Array, so, N)\n\ndoc\"\"\"\n    diag(M[, k])\n\nThe `k`th diagonal of a matrix, as a vector. Use `diagm` to construct a diagonal matrix.\n\"\"\"\ndiag\n\ndoc\"\"\"\n    .^(x, y)\n\nElement-wise exponentiation operator.\n\"\"\"\nBase.(:(.^))\n\ndoc\"\"\"\n    isspace(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is any whitespace character. Includes ASCII characters '\\\\t', '\\\\n', '\\\\v', '\\\\f', '\\\\r', and ' ', Latin-1 character U+0085, and characters in Unicode category Zs. For strings, tests whether this is true for all elements of the string.\n\"\"\"\nisspace\n\ndoc\"\"\"\n    splitext(path::AbstractString) -> (AbstractString,AbstractString)\n\nIf the last component of a path contains a dot, split the path into everything before the dot and everything including and after the dot. Otherwise, return a tuple of the argument unmodified and the empty string.\n\"\"\"\nsplitext\n\ndoc\"\"\"\n    gethostname() -> AbstractString\n\nGet the local machine's host name.\n\"\"\"\ngethostname\n\ndoc\"\"\"\n    code_typed(f, types; optimize=true)\n\nReturns an array of lowered and type-inferred ASTs for the methods matching the given generic function and type signature. The keyword argument `optimize` controls whether additional optimizations, such as inlining, are also applied.\n\"\"\"\ncode_typed\n\ndoc\"\"\"\n    hankelh1x(nu, x)\n\nScaled Bessel function of the third kind of order `nu`, $H^{(1)}_\\nu(x) e^{-x i}$.\n\"\"\"\nhankelh1x\n\ndoc\"\"\"\n    replace(string, pat, r[, n])\n\nSearch for the given pattern `pat`, and replace each occurrence with `r`. If `n` is provided, replace at most `n` occurrences. As with search, the second argument may be a single character, a vector or a set of characters, a string, or a regular expression. If `r` is a function, each occurrence is replaced with `r(s)` where `s` is the matched substring. If `pat` is a regular expression and `r` is a `SubstitutionString`, then capture group references in `r` are replaced with the corresponding matched text.\n\"\"\"\nreplace\n\ndoc\"\"\"\n    randexp([rng], [dims...])\n\nGenerate a random number according to the exponential distribution with scale 1. Optionally generate an array of such random numbers.\n\"\"\"\nrandexp\n\ndoc\"\"\"\n    chop(string)\n\nRemove the last character from a string.\n\"\"\"\nchop\n\ndoc\"\"\"\n    Float32(x [, mode::RoundingMode])\n\nCreate a Float32 from `x`. If `x` is not exactly representable then\n`mode` determines how `x` is rounded.\n\n```jldoctest\njulia> Float32(1/3, RoundDown)\n0.3333333f0\n\njulia> Float32(1/3, RoundUp)\n0.33333334f0\n```\n\nSee `get_rounding` for available rounding modes.\n\"\"\"\nFloat32\n\ndoc\"\"\"\n    readuntil(stream, delim)\n\nRead a string, up to and including the given delimiter byte.\n\"\"\"\nreaduntil\n\ndoc\"\"\"\n```rst\n..  isimmutable(v)\n\nReturn ``true`` iff value ``v`` is immutable.  See :ref:`man-immutable-composite-types` for a discussion of immutability.\nNote that this function works on values, so if you give it a type, it will tell you that a value of ``DataType`` is mutable.\n```\n\"\"\"\nisimmutable\n\ndoc\"\"\"\n    macroexpand(x)\n\nTakes the expression `x` and returns an equivalent expression with all macros removed (expanded).\n\"\"\"\nmacroexpand\n\ndoc\"\"\"\n    issticky(path) -> Bool\n\nReturns `true` if `path` has the sticky bit set, `false` otherwise.\n\"\"\"\nissticky\n\ndoc\"\"\"\n    rol(B::BitArray{1}, i::Integer) -> BitArray{1}\n\nPerforms a left rotation operation.\n\"\"\"\nrol\n\ndoc\"\"\"\n```rst\n..  Mmap.mmap(io::Union{IOStream,AbstractString,Mmap.AnonymousMmap}[, type::Type{Array{T,N}}, dims, offset]; grow::Bool=true, shared::Bool=true)\n           Mmap.mmap(type::Type{Array{T,N}}, dims)\n\nCreate an ``Array`` whose values are linked to a file, using memory-mapping. This provides a convenient way of working with data too large to fit in the computer's memory.\n\nThe type is an ``Array{T,N}`` with a bits-type element of ``T`` and dimension ``N`` that determines how the bytes of the array are interpreted. Note that the file must be stored in binary format, and no format conversions are possible (this is a limitation of operating systems, not Julia).\n\n``dims`` is a tuple or single ``Integer`` specifying the size or length of the array.\n\nThe file is passed via the stream argument, either as an open ``IOStream`` or filename string.  When you initialize the stream, use ``\"r\"`` for a \"read-only\" array, and ``\"w+\"`` to create a new array used to write values to disk.\n\nIf no ``type`` argument is specified, the default is ``Vector{UInt8}``.\n\nOptionally, you can specify an offset (in bytes) if, for example, you want to skip over a header in the file. The default value for the offset is the current stream position for an ``IOStream``.\n\nThe ``grow`` keyword argument specifies whether the disk file should be grown to accommodate the requested size of array (if the total file size is < requested array size). Write privileges are required to grow the file.\n\nThe ``shared`` keyword argument specifies whether the resulting ``Array`` and changes made to it will be visible to other processes mapping the same file.\n\nFor example, the following code::\n\n   # Create a file for mmapping\n   # (you could alternatively use mmap to do this step, too)\n   A = rand(1:20, 5, 30)\n   s = open(\"/tmp/mmap.bin\", \"w+\")\n   # We'll write the dimensions of the array as the first two Ints in the file\n   write(s, size(A,1))\n   write(s, size(A,2))\n   # Now write the data\n   write(s, A)\n   close(s)\n\n   # Test by reading it back in\n   s = open(\"/tmp/mmap.bin\")   # default is read-only\n   m = read(s, Int)\n   n = read(s, Int)\n   A2 = Mmap.mmap(s, Matrix{Int}, (m,n))\n\ncreates a ``m``-by-``n`` ``Matrix{Int}``, linked to the file associated with stream ``s``.\n\nA more portable file would need to encode the word size---32 bit or 64 bit---and endianness information in the header. In practice, consider encoding binary data using standard formats like HDF5 (which can be used with memory-mapping).\n```\n\"\"\"\nMmap.mmap(io, ::Type, dims, offset)\n\ndoc\"\"\"\n```rst\n..  Mmap.mmap(io, BitArray, [dims, offset])\n\nCreate a ``BitArray`` whose values are linked to a file, using memory-mapping; it has the same purpose, works in the same way, and has the same arguments, as :func:`mmap`, but the byte representation is different.\n\n**Example**:  ``B = Mmap.mmap(s, BitArray, (25,30000))``\n\nThis would create a 25-by-30000 ``BitArray``, linked to the file associated with stream ``s``.\n```\n\"\"\"\nMmap.mmap(io, ::BitArray, dims = ?, offset = ?)\n\ndoc\"\"\"\n    airyprime(x)\n\nAiry function derivative $\\operatorname{Ai}'(x)$.\n\"\"\"\nairyprime\n\ndoc\"\"\"\n    bessely0(x)\n\nBessel function of the second kind of order 0, $Y_0(x)$.\n\"\"\"\nbessely0\n\ndoc\"\"\"\n    any!(r, A)\n\nTest whether any values in `A` along the singleton dimensions of `r` are `true`, and write results to `r`.\n\"\"\"\nany!\n\ndoc\"\"\"\n    falses(dims)\n\nCreate a `BitArray` with all values set to `false`\n\"\"\"\nfalses\n\ndoc\"\"\"\n    filter!(function, collection)\n\nUpdate `collection`, removing elements for which `function` is `false`. For associative collections, the function is passed two arguments (key and value).\n\"\"\"\nfilter!\n\ndoc\"\"\"\n    schurfact(A) -> Schur\n\nComputes the Schur factorization of the matrix `A`. The (quasi) triangular Schur factor can be obtained from the `Schur` object `F` with either `F[:Schur]` or `F[:T]` and the unitary/orthogonal Schur vectors can be obtained with `F[:vectors]` or `F[:Z]` such that `A=F[:vectors]*F[:Schur]*F[:vectors]'`. The eigenvalues of `A` can be obtained with `F[:values]`.\n\"\"\"\nschurfact(A)\n\ndoc\"\"\"\n    schurfact(A, B) -> GeneralizedSchur\n\nComputes the Generalized Schur (or QZ) factorization of the matrices `A` and `B`. The (quasi) triangular Schur factors can be obtained from the `Schur` object `F` with `F[:S]` and `F[:T]`, the left unitary/orthogonal Schur vectors can be obtained with `F[:left]` or `F[:Q]` and the right unitary/orthogonal Schur vectors can be obtained with `F[:right]` or `F[:Z]` such that `A=F[:left]*F[:S]*F[:right]'` and `B=F[:left]*F[:T]*F[:right]'`. The generalized eigenvalues of `A` and `B` can be obtained with `F[:alpha]./F[:beta]`.\n\"\"\"\nschurfact(A, B)\n\ndoc\"\"\"\n    base64decode(string)\n\nDecodes the base64-encoded `string` and returns a `Vector{UInt8}` of the decoded bytes.\n\"\"\"\nbase64decode\n\ndoc\"\"\"\n    besselkx(nu, x)\n\nScaled modified Bessel function of the second kind of order `nu`, $K_\\nu(x) e^x$.\n\"\"\"\nbesselkx\n\ndoc\"\"\"\n    myid()\n\nGet the id of the current process.\n\"\"\"\nmyid\n\ndoc\"\"\"\n    oct(n, [pad])\n\nConvert an integer to an octal string, optionally specifying a number of digits to pad to.\n\"\"\"\noct\n\ndoc\"\"\"\n    timedwait(testcb::Function, secs::Float64; pollint::Float64=0.1)\n\nWaits till `testcb` returns `true` or for `secs` seconds, whichever is earlier. `testcb` is polled every `pollint` seconds.\n\"\"\"\ntimedwait\n\ndoc\"\"\"\n    sizeof(T)\n\nSize, in bytes, of the canonical binary representation of the given DataType `T`, if any.\n\"\"\"\nsizeof(::Type)\n\ndoc\"\"\"\n    sizeof(s::AbstractString)\n\nThe number of bytes in string `s`.\n\"\"\"\nsizeof(::AbstractString)\n\ndoc\"\"\"\n```rst\n..  ===(x, y)\n           \u2261(x,y)\n\nSee the :func:`is` operator\n```\n\"\"\"\nBase.(:(===))\n\ndoc\"\"\"\n    ReadOnlyMemoryError()\n\nAn operation tried to write to memory that is read-only.\n\"\"\"\nReadOnlyMemoryError\n\ndoc\"\"\"\n    startswith(string, prefix | chars)\n\nReturns `true` if `string` starts with `prefix`. If the second argument is a vector or set of characters, tests whether the first character of `string` belongs to that set.\n\"\"\"\nstartswith\n\ndoc\"\"\"\n    permutedims!(dest, src, perm)\n\nPermute the dimensions of array `src` and store the result in the array `dest`. `perm` is a vector specifying a permutation of length `ndims(src)`. The preallocated array `dest` should have `size(dest) == size(src)[perm]` and is completely overwritten. No in-place permutation is supported and unexpected results will happen if `src` and `dest` have overlapping memory regions.\n\"\"\"\npermutedims!\n\ndoc\"\"\"\n    functionloc(f::Function, types)\n\nReturns a tuple `(filename,line)` giving the location of a generic `Function` definition.\n\"\"\"\nfunctionloc(f, types)\n\ndoc\"\"\"\n    functionloc(m::Method)\n\nReturns a tuple `(filename,line)` giving the location of a `Method` definition.\n\"\"\"\nfunctionloc(m)\n\ndoc\"\"\"\n    stride(A, k)\n\nReturns the distance in memory (in number of elements) between adjacent elements in dimension `k`.\n\"\"\"\nstride\n\ndoc\"\"\"\n```rst\n..  last(coll)\n\nGet the last element of an ordered collection, if it can be computed in O(1) time.\nThis is accomplished by calling :func:`endof` to get the last index.\nReturns the end point of a :obj:`Range` even if it is empty.\n```\n\"\"\"\nlast\n\ndoc\"\"\"\n    islink(path) -> Bool\n\nReturns `true` if `path` is a symbolic link, `false` otherwise.\n\"\"\"\nislink\n\ndoc\"\"\"\n    istril(A) -> Bool\n\nTest whether a matrix is lower triangular.\n\"\"\"\nistril\n\ndoc\"\"\"\n```rst\n..  lgamma(x)\n\nCompute the logarithm of the absolute value of :func:`gamma` for\n:obj:`Real` ``x``, while for :obj:`Complex` ``x`` it computes the\nlogarithm of ``gamma(x)``.\n```\n\"\"\"\nlgamma\n\ndoc\"\"\"\n    bin(n, [pad])\n\nConvert an integer to a binary string, optionally specifying a number of digits to pad to.\n\"\"\"\nbin\n\ndoc\"\"\"\n    cis(z)\n\nReturn $\\exp(iz)$.\n\"\"\"\ncis\n\ndoc\"\"\"\n    isapprox(x, y; rtol::Real=sqrt(eps), atol::Real=0)\n\nInexact equality comparison: `true` if `norm(x-y) <= atol + rtol*max(norm(x), norm(y))`. The default `atol` is zero and the default `rtol` depends on the types of `x` and `y`.\n\nFor real or complex floating-point values, `rtol` defaults to `sqrt(eps(typeof(real(x-y))))`. This corresponds to requiring equality of about half of the significand digits. For other types, `rtol` defaults to zero.\n\n`x` and `y` may also be arrays of numbers, in which case `norm` defaults to `vecnorm` but may be changed by passing a `norm::Function` keyword argument. (For numbers, `norm` is the same thing as `abs`.)\n\nThe binary operator `\u2248` is equivalent to `isapprox` with the default arguments, and `x \u2249 y` is equivalent to `!isapprox(x,y)`.\n\"\"\"\nisapprox\n\ndoc\"\"\"\n    primes([lo,] hi)\n\nReturns a collection of the prime numbers (from `lo`, if specified) up to `hi`.\n\"\"\"\nprimes\n\ndoc\"\"\"\n    primesmask([lo,] hi)\n\nReturns a prime sieve, as a `BitArray`, of the positive integers (from `lo`, if specified) up to `hi`. Useful when working with either primes or composite numbers.\n\"\"\"\nprimesmask\n\ndoc\"\"\"\n    sinh(x)\n\nCompute hyperbolic sine of `x`\n\"\"\"\nsinh\n\ndoc\"\"\"\n    permutations(array)\n\nGenerate all permutations of an indexable object. Because the number of permutations can be very large, this function returns an iterator object. Use `collect(permutations(array))` to get an array of all permutations.\n\"\"\"\npermutations\n\ndoc\"\"\"\n```rst\n..  ceil([T,] x, [digits, [base]])\n\n``ceil(x)`` returns the nearest integral value of the same type as ``x``\nthat is greater than or equal to ``x``.\n\n``ceil(T, x)`` converts the result to type ``T``, throwing an\n``InexactError`` if the value is not representable.\n\n``digits`` and ``base`` work as for :func:`round`.\n```\n\"\"\"\nceil\n\ndoc\"\"\"\n    mapslices(f, A, dims)\n\nTransform the given dimensions of array `A` using function `f`. `f` is called on each slice of `A` of the form `A[...,:,...,:,...]`. `dims` is an integer vector specifying where the colons go in this expression. The results are concatenated along the remaining dimensions. For example, if `dims` is `[1,2]` and `A` is 4-dimensional, `f` is called on `A[:,:,i,j]` for all `i` and `j`.\n\"\"\"\nmapslices\n\ndoc\"\"\"\n    svdvals(A)\n\nReturns the singular values of `A`.\n\"\"\"\nsvdvals(A)\n\ndoc\"\"\"\n    svdvals(A, B)\n\nReturn only the singular values from the generalized singular value decomposition of `A` and `B`.\n\"\"\"\nsvdvals(A, B)\n\ndoc\"\"\"\n    issocket(path) -> Bool\n\nReturns `true` if `path` is a socket, `false` otherwise.\n\"\"\"\nissocket\n\ndoc\"\"\"\n    srand([rng], [seed])\n\nReseed the random number generator. If a `seed` is provided, the RNG will give a reproducible sequence of numbers, otherwise Julia will get entropy from the system. For `MersenneTwister`, the `seed` may be a non-negative integer, a vector of `UInt32` integers or a filename, in which case the seed is read from a file. `RandomDevice` does not support seeding.\n\"\"\"\nsrand\n\ndoc\"\"\"\n```rst\n..  schur(A) -> Schur[:T], Schur[:Z], Schur[:values]\n\nSee :func:`schurfact`\n```\n\"\"\"\nschur(A)\n\ndoc\"\"\"\n```rst\n..  schur(A,B) -> GeneralizedSchur[:S], GeneralizedSchur[:T], GeneralizedSchur[:Q], GeneralizedSchur[:Z]\n\nSee :func:`schurfact`\n```\n\"\"\"\nschur(A,B)\n\ndoc\"\"\"\n    isexecutable(path) -> Bool\n\nReturns `true` if the current user has permission to execute `path`, `false` otherwise.\n\"\"\"\nisexecutable\n\ndoc\"\"\"\n    acot(x)\n\nCompute the inverse cotangent of `x`, where the output is in radians\n\"\"\"\nacot\n\ndoc\"\"\"\n    oftype(x, y)\n\nConvert `y` to the type of `x` (`convert(typeof(x), y)`).\n\"\"\"\noftype\n\ndoc\"\"\"\n    maxabs!(r, A)\n\nCompute the maximum absolute values over the singleton dimensions of `r`, and write values to `r`.\n\"\"\"\nmaxabs!\n\ndoc\"\"\"\n    nullspace(M)\n\nBasis for nullspace of `M`.\n\"\"\"\nnullspace\n\ndoc\"\"\"\n    isfinite(f) -> Bool\n\nTest whether a number is finite\n\"\"\"\nisfinite\n\ndoc\"\"\"\n```rst\n..  push!(collection, items...) -> collection\n\nInsert one or more ``items`` at the end of ``collection``.\n\n.. doctest::\n\n  julia> push!([1, 2, 3], 4, 5, 6)\n  6-element Array{Int64,1}:\n   1\n   2\n   3\n   4\n   5\n   6\n\nUse :func:`append!` to add all the elements of another collection to\n``collection``.\nThe result of the preceding example is equivalent to\n``append!([1, 2, 3], [4, 5, 6])``.\n```\n\"\"\"\npush!\n\ndoc\"\"\"\n    prevpow(a, x)\n\nThe largest `a^n` not greater than `x`, where `n` is a non-negative integer. `a` must be greater than 1, and `x` must not be less than 1.\n\"\"\"\nprevpow\n\ndoc\"\"\"\n    indexin(a, b)\n\nReturns a vector containing the highest index in `b` for each value in `a` that is a member of `b` . The output vector contains 0 wherever `a` is not a member of `b`.\n\"\"\"\nindexin\n\ndoc\"\"\"\n    permutedims(A, perm)\n\nPermute the dimensions of array `A`. `perm` is a vector specifying a permutation of length `ndims(A)`. This is a generalization of transpose for multi-dimensional arrays. Transpose is equivalent to `permutedims(A, [2,1])`.\n\"\"\"\npermutedims\n\ndoc\"\"\"\n```rst\n..  shuffle!([rng,] v)\n\nIn-place version of :func:`shuffle`.\n```\n\"\"\"\nshuffle!\n\ndoc\"\"\"\n    fldmod(x, y)\n\nThe floored quotient and modulus after division. Equivalent to `(fld(x,y), mod(x,y))`.\n\"\"\"\nfldmod\n\ndoc\"\"\"\n    promote(xs...)\n\nConvert all arguments to their common promotion type (if any), and return them all (as a tuple).\n\"\"\"\npromote\n\ndoc\"\"\"\n    @schedule\n\nWrap an expression in a `Task` and add it to the local machine's scheduler queue.\n\"\"\"\n:@schedule\n\ndoc\"\"\"\n    bessely(nu, x)\n\nBessel function of the second kind of order `nu`, $Y_\\nu(x)$.\n\"\"\"\nbessely\n\ndoc\"\"\"\n    gradient(F, [h])\n\nCompute differences along vector `F`, using `h` as the spacing between points. The default spacing is one.\n\"\"\"\ngradient\n\ndoc\"\"\"\n    tan(x)\n\nCompute tangent of `x`, where `x` is in radians\n\"\"\"\ntan\n\ndoc\"\"\"\n    sprint(f::Function, args...)\n\nCall the given function with an I/O stream and the supplied extra arguments. Everything written to this I/O stream is returned as a string.\n\"\"\"\nsprint\n\ndoc\"\"\"\n    fd(stream)\n\nReturns the file descriptor backing the stream or file. Note that this function only applies to synchronous `File`'s and `IOStream`'s not to any of the asynchronous streams.\n\"\"\"\nfd\n\ndoc\"\"\"\n    require(module::Symbol)\n\nThis function is part of the implementation of `using` / `import`, if a module is not already defined in `Main`. It can also be called directly to force reloading a module, regardless of whether it has been loaded before (for example, when interactively developing libraries).\n\nLoads a source files, in the context of the `Main` module, on every active node, searching standard locations for files. `require` is considered a top-level operation, so it sets the current `include` path but does not use it to search for files (see help for `include`). This function is typically used to load library code, and is implicitly called by `using` to load packages.\n\nWhen searching for files, `require` first looks in the current working directory, then looks for package code under `Pkg.dir()`, then tries paths in the global array `LOAD_PATH`.\n\"\"\"\nrequire\n\ndoc\"\"\"\n    expand(x)\n\nTakes the expression `x` and returns an equivalent expression in lowered form.\n\"\"\"\nexpand\n\ndoc\"\"\"\n```rst\n..  peakflops(n; parallel=false)\n\n``peakflops`` computes the peak flop rate of the computer by using double precision :func:`Base.LinAlg.BLAS.gemm!`. By default, if no arguments are specified, it multiplies a matrix of size ``n x n``, where ``n = 2000``. If the underlying BLAS is using multiple threads, higher flop rates are realized. The number of BLAS threads can be set with ``blas_set_num_threads(n)``.\n\nIf the keyword argument ``parallel`` is set to ``true``, ``peakflops`` is run in parallel on all the worker processors. The flop rate of the entire parallel computer is returned. When running in parallel, only 1 BLAS thread is used. The argument ``n`` still refers to the size of the problem that is solved on each processor.\n```\n\"\"\"\npeakflops\n\ndoc\"\"\"\n    svd(A, [thin=true]) -> U, S, V\n\nWrapper around `svdfact` extracting all parts the factorization to a tuple. Direct use of `svdfact` is therefore generally more efficient. Computes the SVD of `A`, returning `U`, vector `S`, and `V` such that `A == U*diagm(S)*V'`. If `thin` is `true`, an economy mode decomposition is returned. The default is to produce a thin decomposition.\n\"\"\"\nsvd\n\ndoc\"\"\"\n    svd(A, B) -> U, V, Q, D1, D2, R0\n\nWrapper around `svdfact` extracting all parts the factorization to a tuple. Direct use of `svdfact` is therefore generally more efficient. The function returns the generalized SVD of `A` and `B`, returning `U`, `V`, `Q`, `D1`, `D2`, and `R0` such that `A = U*D1*R0*Q'` and `B = V*D2*R0*Q'`.\n\"\"\"\nsvd(A::AbstractMatrix, B::AbstractMatrix)\n\ndoc\"\"\"\n    ones(type, dims)\n\nCreate an array of all ones of specified type. The type defaults to `Float64` if not specified.\n\"\"\"\nones(t,dims)\n\ndoc\"\"\"\n    ones(A)\n\nCreate an array of all ones with the same element type and shape as `A`.\n\"\"\"\nones(A)\n\ndoc\"\"\"\n    ind2chr(string, i)\n\nConvert a byte index to a character index.\n\"\"\"\nind2chr\n\ndoc\"\"\"\n    reshape(A, dims)\n\nCreate an array with the same data as the given array, but with different dimensions. An implementation for a particular type of array may choose whether the data is copied or shared.\n\"\"\"\nreshape\n\ndoc\"\"\"\n    randsubseq!(S, A, p)\n\nLike `randsubseq`, but the results are stored in `S` (which is resized as needed).\n\"\"\"\nrandsubseq!\n\ndoc\"\"\"\n    maximum(itr)\n\nReturns the largest element in a collection.\n\"\"\"\nmaximum(itr)\n\ndoc\"\"\"\n    maximum(A, dims)\n\nCompute the maximum value of an array over the given dimensions.\n\"\"\"\nmaximum(A,dims)\n\ndoc\"\"\"\n    redisplay(x)\n    redisplay(d::Display, x)\n    redisplay(mime, x)\n    redisplay(d::Display, mime, x)\n\nBy default, the `redisplay` functions simply call `display`. However, some display backends may override `redisplay` to modify an existing display of `x` (if any). Using `redisplay` is also a hint to the backend that `x` may be redisplayed several times, and the backend may choose to defer the display until (for example) the next interactive prompt.\n\"\"\"\nredisplay\n\ndoc\"\"\"\n    A_mul_Bc(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u22c5B\u1d34$\n\"\"\"\nA_mul_Bc\n\ndoc\"\"\"\n    searchsorted(a, x, [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nReturns the range of indices of `a` which compare as equal to `x` according to the order specified by the `by`, `lt` and `rev` keywords, assuming that `a` is already sorted in that order. Returns an empty range located at the insertion point if `a` does not contain values equal to `x`.\n\"\"\"\nsearchsorted\n\ndoc\"\"\"\n    /(x, y)\n\nRight division operator: multiplication of `x` by the inverse of `y` on the right. Gives floating-point results for integer arguments.\n\"\"\"\nBase.(:(/))\n\ndoc\"\"\"\n    ldltfact(::Union{SparseMatrixCSC,Symmetric{Float64,SparseMatrixCSC{Flaot64,SuiteSparse_long}},Hermitian{Complex{Float64},SparseMatrixCSC{Complex{Float64},SuiteSparse_long}}}; shift=0, perm=Int[]) -> CHOLMOD.Factor\n\nCompute the `LDLt` factorization of a sparse symmetric or Hermitian matrix. A fill-reducing permutation is used. `F = ldltfact(A)` is most frequently used to solve systems of equations `A*x = b` with `F\\b`, but also the methods `diag`, `det`, `logdet` are defined for `F`. You can also extract individual factors from `F`, using `F[:L]`. However, since pivoting is on by default, the factorization is internally represented as `A == P'*L*D*L'*P` with a permutation matrix `P`; using just `L` without accounting for `P` will give incorrect answers. To include the effects of permutation, it's typically preferable to extact \"combined\" factors like `PtL = F[:PtL]` (the equivalent of `P'*L`) and `LtP = F[:UP]` (the equivalent of `L'*P`). The complete list of supported factors is `:L, :PtL, :D, :UP, :U, :LD, :DU, :PtLD, :DUP`.\n\nSetting optional `shift` keyword argument computes the factorization of `A+shift*I` instead of `A`. If the `perm` argument is nonempty, it should be a permutation of `1:size(A,1)` giving the ordering to use (instead of CHOLMOD's default AMD ordering).\n\nThe function calls the C library CHOLMOD and many other functions from the library are wrapped but not exported.\n\"\"\"\nldltfact(A::SparseMatrixCSC; shift=0, perm=Int[])\n\ndoc\"\"\"\n    connect([host],port) -> TCPSocket\n\nConnect to the host `host` on port `port`\n\"\"\"\nconnect(host=?, port)\n\ndoc\"\"\"\n    connect(path) -> PipeEndpoint\n\nConnect to the Named Pipe / Domain Socket at ``path``\n\"\"\"\nconnect(path)\n\ndoc\"\"\"\n    connect(manager::FooManager, pid::Int, config::WorkerConfig) -> (instrm::AsyncStream, outstrm::AsyncStream)\n\nImplemented by cluster managers using custom transports. It should establish a logical connection to worker with id `pid`, specified by `config` and return a pair of `AsyncStream` objects. Messages from `pid` to current process will be read off `instrm`, while messages to be sent to `pid` will be written to `outstrm`. The custom transport implementation must ensure that messages are delivered and received completely and in order. `Base.connect(manager::ClusterManager.....)` sets up TCP/IP socket connections in-between workers.\n\"\"\"\nconnect(manager, pid::Int, config::WorkerConfig)\n\ndoc\"\"\"\n    mean(v[, region])\n\nCompute the mean of whole array `v`, or optionally along the dimensions in `region`. Note: Julia does not ignore `NaN` values in the computation. For applications requiring the handling of missing data, the `DataArray` package is recommended.\n\"\"\"\nmean\n\ndoc\"\"\"\n    split(string, [chars]; limit=0, keep=true)\n\nReturn an array of substrings by splitting the given string on occurrences of the given character delimiters, which may be specified in any of the formats allowed by `search`'s second argument (i.e. a single character, collection of characters, string, or regular expression). If `chars` is omitted, it defaults to the set of all space characters, and `keep` is taken to be `false`. The two keyword arguments are optional: they are are a maximum size for the result and a flag determining whether empty fields should be kept in the result.\n\"\"\"\nsplit\n\ndoc\"\"\"\n    dump(x)\n\nShow all user-visible structure of a value.\n\"\"\"\ndump\n\ndoc\"\"\"\n    sumabs(itr)\n\nSum absolute values of all elements in a collection. This is equivalent to `sum(abs(itr))` but faster.\n\"\"\"\nsumabs(itr)\n\ndoc\"\"\"\n    sumabs(A, dims)\n\nSum absolute values of elements of an array over the given dimensions.\n\"\"\"\nsumabs(A, dims)\n\ndoc\"\"\"\n    svdvals!(A)\n\nReturns the singular values of `A`, while saving space by overwriting the input.\n\"\"\"\nsvdvals!\n\ndoc\"\"\"\n    consume(task, values...)\n\nReceive the next value passed to `produce` by the specified task. Additional arguments may be passed, to be returned from the last `produce` call in the producer.\n\"\"\"\nconsume\n\ndoc\"\"\"\n    hankelh2x(nu, x)\n\nScaled Bessel function of the third kind of order `nu`, $H^{(2)}_\\nu(x) e^{x i}$.\n\"\"\"\nhankelh2x\n\ndoc\"\"\"\n    ndigits(n, b)\n\nCompute the number of digits in number `n` written in base `b`.\n\"\"\"\nndigits\n\ndoc\"\"\"\n    cummax(A, [dim])\n\nCumulative maximum along a dimension. The dimension defaults to 1.\n\"\"\"\ncummax\n\ndoc\"\"\"\n    watch_file(path, timeout_s::Real)\n\nWatch file or directory `path` for changes until a change occurs or `timeout_s` seconds have elapsed.\n\nThe returned value is an object with boolean fields `changed`, `renamed`, and `timedout`, giving the result of watching the file.\n\nThis behavior of this function varies slightly across platforms. See <https://nodejs.org/api/fs.html#fs_caveats> for more detailed information.\n\"\"\"\nwatch_file\n\ndoc\"\"\"\n    At_rdiv_Bt(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d40 / B\u1d40$\n\"\"\"\nAt_rdiv_Bt\n\ndoc\"\"\"\n    isinteractive() -> Bool\n\nDetermine whether Julia is running an interactive session.\n\"\"\"\nisinteractive\n\ndoc\"\"\"\n    At_mul_Bt(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d40\u22c5B\u1d40$\n\"\"\"\nAt_mul_Bt\n\ndoc\"\"\"\n    sum!(r, A)\n\nSum elements of `A` over the singleton dimensions of `r`, and write results to `r`.\n\"\"\"\nsum!\n\ndoc\"\"\"\n    close(stream)\n\nClose an I/O stream. Performs a `flush` first.\n\"\"\"\nclose(stream::IO)\n\ndoc\"\"\"\n    close(Channel)\n\nCloses a channel. An exception is thrown by:\n\n* `put!` on a closed channel.\n* `take!` and `fetch` on an empty, closed channel.\n\"\"\"\nclose(::Channel)\n\ndoc\"\"\"\n    cospi(x)\n\nCompute $\\cos(\\pi x)$ more accurately than `cos(pi*x)`, especially for large `x`.\n\"\"\"\ncospi\n\ndoc\"\"\"\n    parentindexes(A)\n\nFrom an array view `A`, returns the corresponding indexes in the parent\n\"\"\"\nparentindexes\n\ndoc\"\"\"\n    display(x)\n    display(d::Display, x)\n    display(mime, x)\n    display(d::Display, mime, x)\n\nDisplay `x` using the topmost applicable display in the display stack, typically using the richest supported multimedia output for `x`, with plain-text `STDOUT` output as a fallback. The `display(d, x)` variant attempts to display `x` on the given display `d` only, throwing a `MethodError` if `d` cannot display objects of this type.\n\nThere are also two variants with a `mime` argument (a MIME type string, such as `\"image/png\"`), which attempt to display `x` using the requested MIME type *only*, throwing a `MethodError` if this type is not supported by either the display(s) or by `x`. With these variants, one can also supply the \"raw\" data in the requested MIME type by passing `x::AbstractString` (for MIME types with text-based storage, such as text/html or application/postscript) or `x::Vector{UInt8}` (for binary MIME types).\n\"\"\"\ndisplay\n\ndoc\"\"\"\n    @spawnat\n\nAccepts two arguments, `p` and an expression. A closure is created around the expression and run asynchronously on process `p`. Returns a `RemoteRef` to the result.\n\"\"\"\n:@spawnat\n\ndoc\"\"\"\n    print_shortest(io, x)\n\nPrint the shortest possible representation, with the minimum number of consecutive non-zero digits, of number `x`, ensuring that it would parse to the exact same number.\n\"\"\"\nprint_shortest\n\ndoc\"\"\"\n    merge(collection, others...)\n\nConstruct a merged collection from the given collections. If necessary, the\ntypes of the resulting collection will be promoted to accommodate the types of\nthe merged collections. If the same key is present in another collection, the\nvalue for that key will be the value it has in the last collection listed.\n\n```jldoctest\njulia> a = Dict(\"foo\" => 0.0, \"bar\" => 42.0)\nDict{ASCIIString,Float64} with 2 entries:\n  \"bar\" => 42.0\n  \"foo\" => 0.0\n\njulia> b = Dict(utf8(\"baz\") => 17, utf8(\"bar\") => 4711)\nDict{UTF8String,Int64} with 2 entries:\n  \"bar\" => 4711\n  \"baz\" => 17\n\njulia> merge(a, b)\nDict{UTF8String,Float64} with 3 entries:\n  \"bar\" => 4711.0\n  \"baz\" => 17.0\n  \"foo\" => 0.0\n\njulia> merge(b, a)\nDict{UTF8String,Float64} with 3 entries:\n  \"bar\" => 42.0\n  \"baz\" => 17.0\n  \"foo\" => 0.0\n```\n\"\"\"\nmerge\n\ndoc\"\"\"\n    circshift(A,shifts)\n\nCircularly shift the data in an array. The second argument is a vector giving the amount to shift in each dimension.\n\"\"\"\ncircshift\n\ndoc\"\"\"\n    fieldnames(x::DataType)\n\nGet an array of the fields of a `DataType`.\n\"\"\"\nfieldnames\n\ndoc\"\"\"\n    yield()\n\nSwitch to the scheduler to allow another scheduled task to run. A task that calls this function is still runnable, and will be restarted immediately if there are no other runnable tasks.\n\"\"\"\nyield\n\ndoc\"\"\"\n    transpose!(dest,src)\n\nTranspose array `src` and store the result in the preallocated array `dest`, which should have a size corresponding to `(size(src,2),size(src,1))`. No in-place transposition is supported and unexpected results will happen if `src` and `dest` have overlapping memory regions.\n\"\"\"\ntranspose!\n\ndoc\"\"\"\n    isconst([m::Module], s::Symbol) -> Bool\n\nDetermine whether a global is declared `const` in a given `Module`. The default `Module` argument is `current_module()`.\n\"\"\"\nisconst\n\ndoc\"\"\"\n```rst\n..  open(command, mode::AbstractString=\"r\", stdio=DevNull)\n\nStart running ``command`` asynchronously, and return a tuple\n``(stream,process)``.  If ``mode`` is ``\"r\"``, then ``stream``\nreads from the process's standard output and ``stdio`` optionally\nspecifies the process's standard input stream.  If ``mode`` is\n``\"w\"``, then ``stream`` writes to the process's standard input\nand ``stdio`` optionally specifies the process's standard output\nstream.\n```\n\"\"\"\nopen(command::Cmd, mod::AbstractString=\"r\", stdio=DevNull)\n\ndoc\"\"\"\n```rst\n..  open(f::Function, command, mode::AbstractString=\"r\", stdio=DevNull)\n\nSimilar to ``open(command, mode, stdio)``, but calls ``f(stream)``\non the resulting read or write stream, then closes the stream\nand waits for the process to complete.  Returns the value returned\nby ``f``.\n```\n\"\"\"\nopen(f::Function, command::Cmd, mod::AbstractString=\"r\", stdio=DevNull)\n\ndoc\"\"\"\n```rst\n..  open(file_name, [read, write, create, truncate, append]) -> IOStream\n\nOpen a file in a mode specified by five boolean arguments. The default is to open files for reading only. Returns a stream for accessing the file.\n```\n\"\"\"\nopen(file_name, ::Bool, ::Bool, ::Bool, ::Bool, ::Bool)\n\ndoc\"\"\"\n```rst\n..  open(file_name, [mode]) -> IOStream\n\nAlternate syntax for open, where a string-based mode specifier is used instead of the five booleans. The values of ``mode`` correspond to those from ``fopen(3)`` or Perl ``open``, and are equivalent to setting the following boolean groups:\n\n==== =================================\n r    read\n r+   read, write\n w    write, create, truncate\n w+   read, write, create, truncate\n a    write, create, append\n a+   read, write, create, append\n==== =================================\n\n```\n\"\"\"\nopen(file_name, mode=\"r\")\n\ndoc\"\"\"\n    open(f::Function, args...)\n\nApply the function `f` to the result of `open(args...)`\nand close the resulting file descriptor upon completion.\n\n**Example**: `open(readall, \"file.txt\")`\n\"\"\"\nopen(f::Function, args...)\n\ndoc\"\"\"\n    sort(v, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nVariant of `sort!` that returns a sorted copy of `v` leaving `v` itself unmodified.\n\"\"\"\nsort(v,?,?,?,?)\n\n\"\"\"\n    sort(A, dim, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nSort a multidimensional array `A` along the given dimension.\n\"\"\"\nsort(A,dim,?,?,?,?)\n\ndoc\"\"\"\n    kron(A, B)\n\nKronecker tensor product of two vectors or two matrices.\n\"\"\"\nkron\n\ndoc\"\"\"\n    >>(x, n)\n\nRight bit shift operator, preserving the sign of `x`.\n\"\"\"\nBase.(:(>>))\n\ndoc\"\"\"\n    fieldoffsets(type)\n\nThe byte offset of each field of a type relative to the data start. For example, we could use it\nin the following manner to summarize information about a struct type:\n\n```jldoctest\njulia> structinfo(T) = [zip(fieldoffsets(T),fieldnames(T),T.types)...];\n\njulia> structinfo(StatStruct)\n12-element Array{Tuple{Int64,Symbol,DataType},1}:\n (0,:device,UInt64)\n (8,:inode,UInt64)\n (16,:mode,UInt64)\n (24,:nlink,Int64)\n (32,:uid,UInt64)\n (40,:gid,UInt64)\n (48,:rdev,UInt64)\n (56,:size,Int64)\n (64,:blksize,Int64)\n (72,:blocks,Int64)\n (80,:mtime,Float64)\n (88,:ctime,Float64)\n```\n\"\"\"\nfieldoffsets\n\ndoc\"\"\"\n    randn([rng], [dims...])\n\nGenerate a normally-distributed random number with mean 0 and standard deviation 1. Optionally generate an array of normally-distributed random numbers.\n\"\"\"\nrandn\n\ndoc\"\"\"\n    process_exited(p::Process)\n\nDetermine whether a process has exited.\n\"\"\"\nprocess_exited\n\ndoc\"\"\"\n    tuple(xs...)\n\nConstruct a tuple of the given objects.\n\"\"\"\ntuple\n\ndoc\"\"\"\n    besseli(nu, x)\n\nModified Bessel function of the first kind of order `nu`, $I_\\nu(x)$.\n\"\"\"\nbesseli\n\ndoc\"\"\"\n    eachmatch(r::Regex, s::AbstractString[, overlap::Bool=false])\n\nSearch for all matches of a the regular expression `r` in `s` and return a iterator over the matches. If overlap is `true`, the matching sequences are allowed to overlap indices in the original string, otherwise they must be from distinct character ranges.\n\"\"\"\neachmatch\n\ndoc\"\"\"\n    log10(x)\n\nCompute the logarithm of `x` to base 10. Throws `DomainError` for negative `Real` arguments.\n\"\"\"\nlog10\n\ndoc\"\"\"\n    @profile\n\n`@profile <expression>` runs your expression while taking periodic backtraces. These are appended to an internal buffer of backtraces.\n\"\"\"\n:@profile\n\ndoc\"\"\"\n    extrema(itr)\n\nCompute both the minimum and maximum element in a single pass, and return them as a 2-tuple.\n\"\"\"\nextrema\n\ndoc\"\"\"\n    isdigit(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is a numeric digit (0-9), or whether this is true for all elements of a string.\n\"\"\"\nisdigit\n\ndoc\"\"\"\n    @windows\n\nGiven `@windows? a : b`, do `a` on Windows and `b` elsewhere. See documentation for Handling Platform Variations in the Calling C and Fortran Code section of the manual.\n\"\"\"\n:@windows\n\ndoc\"\"\"\n    @unix\n\nGiven `@unix? a : b`, do `a` on Unix systems (including Linux and OS X) and `b` elsewhere. See documentation for Handling Platform Variations in the Calling C and Fortran Code section of the manual.\n\"\"\"\n:@unix\n\ndoc\"\"\"\n    num2hex(f)\n\nGet a hexadecimal string of the binary representation of a floating point number\n\"\"\"\nnum2hex\n\ndoc\"\"\"\n    count_ones(x::Integer) -> Integer\n\nNumber of ones in the binary representation of `x`.\n\n```jldoctest\njulia> count_ones(7)\n3\n```\n\"\"\"\ncount_ones\n\ndoc\"\"\"\n    reim(z)\n\nReturn both the real and imaginary parts of the complex number `z`\n\"\"\"\nreim\n\ndoc\"\"\"\n    displayable(mime) -> Bool\n    displayable(d::Display, mime) -> Bool\n\nReturns a boolean value indicating whether the given `mime` type (string) is displayable by any of the displays in the current display stack, or specifically by the display `d` in the second variant.\n\"\"\"\ndisplayable\n\ndoc\"\"\"\n    sdata(S::SharedArray)\n\nReturns the actual `Array` object backing `S`\n\"\"\"\nsdata\n\ndoc\"\"\"\n    truncate(file,n)\n\nResize the file or buffer given by the first argument to exactly `n` bytes, filling previously unallocated space with '\\\\0' if the file or buffer is grown\n\"\"\"\ntruncate\n\ndoc\"\"\"\n```rst\n..  stat(file)\n\nReturns a structure whose fields contain information about the file. The fields of the structure are:\n\n========= ======================================================================\n size      The size (in bytes) of the file\n device    ID of the device that contains the file\n inode     The inode number of the file\n mode      The protection mode of the file\n nlink     The number of hard links to the file\n uid       The user id of the owner of the file\n gid       The group id of the file owner\n rdev      If this file refers to a device, the ID of the device it refers to\n blksize   The file-system preferred block size for the file\n blocks    The number of such blocks allocated\n mtime     Unix timestamp of when the file was last modified\n ctime     Unix timestamp of when the file was created\n========= ======================================================================\n```\n\"\"\"\nstat\n\ndoc\"\"\"\n    exp10(x)\n\nCompute $10^x$.\n\"\"\"\nexp10\n\ndoc\"\"\"\n    &(x, y)\n\nBitwise and\n\"\"\"\n&\n\ndoc\"\"\"\n    besselyx(nu, x)\n\nScaled Bessel function of the second kind of order `nu`, $Y_\\nu(x) e^{- | \\operatorname{Im}(x) |}$.\n\"\"\"\nbesselyx\n\ndoc\"\"\"\n    eigmax(A)\n\nReturns the largest eigenvalue of `A`.\n\"\"\"\neigmax\n\ndoc\"\"\"\n    PipeBuffer()\n\nAn IOBuffer that allows reading and performs writes by appending. Seeking and truncating are not supported. See IOBuffer for the available constructors.\n\"\"\"\nPipeBuffer()\n\ndoc\"\"\"\n    PipeBuffer(data::Vector{UInt8},[maxsize])\n\nCreate a PipeBuffer to operate on a data vector, optionally specifying a size beyond which the underlying Array may not be grown.\n\"\"\"\nPipeBuffer(data)\n\ndoc\"\"\"\n```rst\n..  sortperm(v, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nReturn a permutation vector of indices of ``v`` that puts it in sorted order.\nSpecify ``alg`` to choose a particular sorting algorithm (see Sorting Algorithms).\n``MergeSort`` is used by default, and since it is stable, the resulting permutation\nwill be the lexicographically first one that puts the input array into sorted order \u2013\ni.e. indices of equal elements appear in ascending order. If you choose a non-stable\nsorting algorithm such as ``QuickSort``, a different permutation that puts the array\ninto order may be returned. The order is specified using the same keywords as ``sort!``.\n\nSee also :func:`sortperm!`\n```\n\"\"\"\nsortperm\n\ndoc\"\"\"\n    mod2pi(x)\n\nModulus after division by 2pi, returning in the range \\[0,2pi).\n\nThis function computes a floating point representation of the modulus after division by numerically exact 2pi, and is therefore not exactly the same as mod(x,2pi), which would compute the modulus of `x` relative to division by the floating-point number 2pi.\n\"\"\"\nmod2pi\n\ndoc\"\"\"\n    cumsum!(B, A, [dim])\n\nCumulative sum of `A` along a dimension, storing the result in `B`. The dimension defaults to 1.\n\"\"\"\ncumsum!\n\ndoc\"\"\"\n    logdet(M)\n\nLog of matrix determinant. Equivalent to `log(det(M))`, but may provide increased accuracy and/or speed.\n\"\"\"\nlogdet\n\ndoc\"\"\"\n    hcat(A...)\n\nConcatenate along dimension 2\n\"\"\"\nhcat\n\ndoc\"\"\"\n    select(v, k, [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nVariant of `select!` which copies `v` before partially sorting it, thereby returning the same thing as `select!` but leaving `v` unmodified.\n\"\"\"\nselect\n\ndoc\"\"\"\n    lpad(string, n, p)\n\nMake a string at least `n` columns wide when printed, by padding on the left with copies of `p`.\n\"\"\"\nlpad\n\ndoc\"\"\"\n```rst\n..  mapreduce(f, op, v0, itr)\n\nApply function ``f`` to each element in ``itr``, and then reduce\nthe result using the binary function ``op``. ``v0`` must be a\nneutral element for ``op`` that will be returned for empty\ncollections. It is unspecified whether ``v0`` is used for non-empty\ncollections.\n\n:func:`mapreduce` is functionally equivalent to calling ``reduce(op,\nv0, map(f, itr))``, but will in general execute faster since no\nintermediate collection needs to be created. See documentation for\n:func:`reduce` and :func:`map`.\n\n.. doctest::\n\n   julia> mapreduce(x->x^2, +, [1:3;]) # == 1 + 4 + 9\n   14\n\nThe associativity of the reduction is implementation-dependent.\nAdditionally, some implementations may reuse the return value of\n``f`` for elements that appear multiple times in ``itr``.\nUse :func:`mapfoldl` or :func:`mapfoldr` instead for guaranteed\nleft or right associativity and invocation of ``f`` for every value.\n```\n\"\"\"\nmapreduce(f, op, v0, itr)\n\ndoc\"\"\"\n```rst\n..  mapreduce(f, op, itr)\n\nLike ``mapreduce(f, op, v0, itr)``. In general, this cannot be used\nwith empty collections (see ``reduce(op, itr)``).\n```\n\"\"\"\nmapreduce(f, op, itr)\n\ndoc\"\"\"\n    accept(server[,client])\n\nAccepts a connection on the given server and returns a connection to the client. An uninitialized client stream may be provided, in which case it will be used instead of creating a new stream.\n\"\"\"\naccept\n\ndoc\"\"\"\n```rst\n..  ordschur(Q, T, select) -> Schur\n\nReorders the Schur factorization of a real matrix ``A=Q*T*Q'`` according to the logical array ``select`` returning a Schur object ``F``. The selected eigenvalues appear in the leading diagonal of ``F[:Schur]`` and the the corresponding leading columns of ``F[:vectors]`` form an orthonormal basis of the corresponding right invariant subspace. A complex conjugate pair of eigenvalues must be either both included or excluded via ``select``.\n```\n\"\"\"\nordschur(Q, T, select)\n\ndoc\"\"\"\n```rst\n..  ordschur(S, select) -> Schur\n\nReorders the Schur factorization ``S`` of type ``Schur``.\n```\n\"\"\"\nordschur(S::Schur, select)\n\ndoc\"\"\"\n```rst\n..  ordschur(S, T, Q, Z, select) -> GeneralizedSchur\n\nReorders the Generalized Schur factorization of a matrix ``(A, B) = (Q*S*Z^{H}, Q*T*Z^{H})`` according to the logical array ``select`` and returns a GeneralizedSchur object ``GS``.  The selected eigenvalues appear in the leading diagonal of both ``(GS[:S], GS[:T])`` and the left and right unitary/orthogonal Schur vectors are also reordered such that ``(A, B) = GS[:Q]*(GS[:S], GS[:T])*GS[:Z]^{H}`` still holds and the generalized eigenvalues of ``A`` and ``B`` can still be obtained with ``GS[:alpha]./GS[:beta]``.\n```\n\"\"\"\nordschur(S, T, Q, Z)\n\ndoc\"\"\"\n```rst\n..  ordschur(GS, select) -> GeneralizedSchur\n\nReorders the Generalized Schur factorization of a Generalized Schur object.  See :func:`ordschur`.\n```\n\"\"\"\nordschur(GS::GeneralizedSchur, select)\n\ndoc\"\"\"\n    triu!(M)\n\nUpper triangle of a matrix, overwriting `M` in the process.\n\"\"\"\ntriu!(M)\n\ndoc\"\"\"\n    triu!(M, k)\n\nReturns the upper triangle of `M` starting from the `k`th superdiagonal, overwriting `M` in the process.\n\"\"\"\ntriu!(M, k)\n\ndoc\"\"\"\n    readall(stream::IO)\n\nRead the entire contents of an I/O stream as a string.\n\"\"\"\nreadall(stream::IO)\n\ndoc\"\"\"\n    readall(filename::AbstractString)\n\nOpen `filename`, read the entire contents as a string, then close the file. Equivalent to `open(readall, filename)`.\n\"\"\"\nreadall(filename::AbstractString)\n\ndoc\"\"\"\n    poll_file(path, interval_s::Real, timeout_s::Real) -> (previous::StatStruct, current::StatStruct)\n\nMonitor a file for changes by polling every `interval_s` seconds until a change occurs or `timeout_s` seconds have elapsed. The `interval_s` should be a long period; the default is 5.007 seconds.\n\nReturns a pair of `StatStruct` objects `(previous, current)` when a change is detected.\n\nTo determine when a file was modified, compare `mtime(prev) != mtime(current)` to detect notification of changes. However, using `watch_file` for this operation is preferred, since it is more reliable and efficient, although in some situations it may not be available.\n\"\"\"\npoll_file\n\ndoc\"\"\"\n    eachline(stream)\n\nCreate an iterable object that will yield each line from a stream.\n\"\"\"\neachline\n\ndoc\"\"\"\n    isposdef!(A) -> Bool\n\nTest whether a matrix is positive definite, overwriting `A` in the processes.\n\"\"\"\nisposdef!\n\ndoc\"\"\"\n    complex(r, [i])\n\nConvert real numbers or arrays to complex. `i` defaults to zero.\n\"\"\"\ncomplex\n\ndoc\"\"\"\n    setopt(sock::UDPSocket; multicast_loop = nothing, multicast_ttl=nothing, enable_broadcast=nothing, ttl=nothing)\n\nSet UDP socket options. `multicast_loop`: loopback for multicast packets (default: `true`). `multicast_ttl`: TTL for multicast packets. `enable_broadcast`: flag must be set to `true` if socket will be used for broadcast messages, or else the UDP system will return an access error (default: `false`). `ttl`: Time-to-live of packets sent on the socket.\n\"\"\"\nsetopt\n\ndoc\"\"\"\n    Mmap.Anonymous(name, readonly, create)\n\nCreate an `IO`-like object for creating zeroed-out mmapped-memory that is not tied to a file for use in `Mmap.mmap`. Used by `SharedArray` for creating shared memory arrays.\n\"\"\"\nMmap.Anonymous\n\ndoc\"\"\"\n    A_rdiv_Bc(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A / B\u1d34$\n\"\"\"\nA_rdiv_Bc\n\ndoc\"\"\"\n```rst\n..  round([T,] x, [digits, [base]], [r::RoundingMode])\n\n``round(x)`` rounds ``x`` to an integer value according to the default\nrounding mode (see :func:`get_rounding`), returning a value of the same type as\n``x``. By default (:obj:`RoundNearest`), this will round to the nearest\ninteger, with ties (fractional values of 0.5) being rounded to the even\ninteger.\n\n.. doctest::\n\n   julia> round(1.7)\n   2.0\n\n   julia> round(1.5)\n   2.0\n\n   julia> round(2.5)\n   2.0\n\nThe optional :obj:`RoundingMode` argument will change how the number gets rounded.\n\n``round(T, x, [r::RoundingMode])`` converts the result to type ``T``, throwing an\n:exc:`InexactError` if the value is not representable.\n\n``round(x, digits)`` rounds to the specified number of digits after the\ndecimal place (or before if negative). ``round(x, digits, base)`` rounds\nusing a base other than 10.\n\n.. doctest::\n\n   julia> round(pi, 2)\n   3.14\n\n   julia> round(pi, 3, 2)\n   3.125\n\n.. note::\n\n   Rounding to specified digits in bases other than 2 can be inexact when\n   operating on binary floating point numbers. For example, the ``Float64``\n   value represented by ``1.15`` is actually *less* than 1.15, yet will be\n   rounded to 1.2.\n\n   .. doctest::\n\n      julia> x = 1.15\n      1.15\n\n      julia> @sprintf \"%.20f\" x\n      \"1.14999999999999991118\"\n\n      julia> x < 115//100\n      true\n\n      julia> round(x, 1)\n      1.2\n```\n\"\"\"\nround(T::Type, x)\n\ndoc\"\"\"\n```rst\n.. round(z, RoundingModeReal, RoundingModeImaginary)\n\nReturns the nearest integral value of the same type as the complex-valued\n``z`` to ``z``, breaking ties using the specified :obj:`RoundingMode`\\ s.\nThe first :obj:`RoundingMode` is used for rounding the real components while\nthe second is used for rounding the imaginary components.\n```\n\"\"\"\nround(z::Real, ::Type{RoundingMode}, ::Type{RoundingMode})\n\ndoc\"\"\"\n    strwidth(s)\n\nGives the number of columns needed to print a string.\n\"\"\"\nstrwidth\n\ndoc\"\"\"\n    function_module(f::Function, types) -> Module\n\nDetermine the module containing a given definition of a generic function.\n\"\"\"\nfunction_module\n\ndoc\"\"\"\n    hex(n, [pad])\n\nConvert an integer to a hexadecimal string, optionally specifying a number of digits to pad to.\n\"\"\"\nhex\n\ndoc\"\"\"\n    workspace()\n\nReplace the top-level module (`Main`) with a new one, providing a clean workspace. The previous `Main` module is made available as `LastMain`. A previously-loaded package can be accessed using a statement such as `using LastMain.Package`.\n\nThis function should only be used interactively.\n\"\"\"\nworkspace\n\ndoc\"\"\"\n    tempdir()\n\nObtain the path of a temporary directory (possibly shared with other processes).\n\"\"\"\ntempdir\n\ndoc\"\"\"\n    reduce(op, v0, itr)\n\nReduce the given collection `\u00ectr` with the given binary operator `op`. `v0` must be a neutral element for `op` that will be returned for empty collections. It is unspecified whether `v0` is used for non-empty collections.\n\nReductions for certain commonly-used operators have special implementations which should be used instead: `maximum(itr)`, `minimum(itr)`, `sum(itr)`, `prod(itr)`, `any(itr)`, `all(itr)`.\n\nThe associativity of the reduction is implementation dependent. This means that you can't use non-associative operations like `-` because it is undefined whether `reduce(-,[1,2,3])` should be evaluated as `(1-2)-3` or `1-(2-3)`. Use `foldl` or `foldr` instead for guaranteed left or right associativity.\n\nSome operations accumulate error, and parallelism will also be easier if the reduction can be executed in groups. Future versions of Julia might change the algorithm. Note that the elements are not reordered if you use an ordered collection.\n\"\"\"\nreduce(op, v0, itr)\n\ndoc\"\"\"\n    reduce(op, itr)\n\nLike `reduce(op, v0, itr)`. This cannot be used with empty collections, except for some special cases (e.g. when `op` is one of `+`, `*`, `max`, `min`, `&`, `|`) when Julia can determine the neutral element of `op`.\n\"\"\"\nreduce(op, itr)\n\ndoc\"\"\"\n    .>=(x, y)\n    .\u2265(x,y)\n\nElement-wise greater-than-or-equals comparison operator.\n\"\"\"\nBase.(:(.>=))\n\ndoc\"\"\"\n    stdm(v, m)\n\nCompute the sample standard deviation of a vector `v` with known mean `m`. Note: Julia does not ignore `NaN` values in the computation.\n\"\"\"\nstdm\n\ndoc\"\"\"\n    mv(src::AbstractString,dst::AbstractString; remove_destination::Bool=false)\n\nMove the file, link, or directory from `src` to `dst`. `remove_destination=true` will first remove an existing `dst`.\n\"\"\"\nmv\n\ndoc\"\"\"\n    erfi(x)\n\nCompute the imaginary error function of `x`,\ndefined by $-i \\operatorname{erf}(ix)$.\n\"\"\"\nerfi\n\ndoc\"\"\"\n```rst\n..  floor([T,] x, [digits, [base]])\n\n``floor(x)`` returns the nearest integral value of the same type as ``x``\nthat is less than or equal to ``x``.\n\n``floor(T, x)`` converts the result to type ``T``, throwing an\n``InexactError`` if the value is not representable.\n\n``digits`` and ``base`` work as for :func:`round`.\n```\n\"\"\"\nfloor\n\ndoc\"\"\"\n    tril!(M)\n\nLower triangle of a matrix, overwriting `M` in the process.\n\"\"\"\ntril!(M)\n\ndoc\"\"\"\n    tril!(M, k)\n\nReturns the lower triangle of `M` starting from the `k`th superdiagonal, overwriting `M` in the process.\n\"\"\"\ntril!(M, k)\n\ndoc\"\"\"\n    divrem(x, y)\n\nThe quotient and remainder from Euclidean division. Equivalent to `(x\u00f7y, x%y)`.\n\"\"\"\ndivrem\n\ndoc\"\"\"\n    ErrorException(msg)\n\nGeneric error type. The error message, in the `.msg` field, may provide more specific details.\n\"\"\"\nErrorException\n\ndoc\"\"\"\n    reverse(v [, start=1 [, stop=length(v) ]] )\n\nReturn a copy of `v` reversed from start to stop.\n\"\"\"\nreverse\n\ndoc\"\"\"\n    reverse(s::AbstractString) -> AbstractString\n\nReverses a string\n\"\"\"\nreverse(s::AbstractString)\n\ndoc\"\"\"\n```rst\n..  reverse!(v [, start=1 [, stop=length(v) ]]) -> v\n\nIn-place version of :func:`reverse`.\n```\n\"\"\"\nreverse!\n\ndoc\"\"\"\n    flipdim(A, d)\n\nReverse `A` in dimension `d`.\n\"\"\"\nflipdim\n\ndoc\"\"\"\n    num(x)\n\nNumerator of the rational representation of `x`\n\"\"\"\nnum\n\ndoc\"\"\"\n    eachindex(A...)\n\nCreates an iterable object for visiting each index of an AbstractArray `A` in an efficient manner. For array types that have opted into fast linear indexing (like `Array`), this is simply the range `1:length(A)`. For other array types, this returns a specialized Cartesian range to efficiently index into the array with indices specified for every dimension. For other iterables, including strings and dictionaries, this returns an iterator object supporting arbitrary index types (e.g. unevenly spaced or non-integer indices).\n\nExample for a sparse 2-d array:\n\n```jldoctest\njulia> A = sparse([1, 1, 2], [1, 3, 1], [1, 2, -5])\n2x3 sparse matrix with 3 Int64 entries:\n        [1, 1]  =  1\n        [2, 1]  =  -5\n        [1, 3]  =  2\n\njulia> for iter in eachindex(A)\n           @show iter.I[1], iter.I[2]\n           @show A[iter]\n       end\n(iter.I[1],iter.I[2]) = (1,1)\nA[iter] = 1\n(iter.I[1],iter.I[2]) = (2,1)\nA[iter] = -5\n(iter.I[1],iter.I[2]) = (1,2)\nA[iter] = 0\n(iter.I[1],iter.I[2]) = (2,2)\nA[iter] = 0\n(iter.I[1],iter.I[2]) = (1,3)\nA[iter] = 2\n(iter.I[1],iter.I[2]) = (2,3)\nA[iter] = 0\n```\n\nIf you supply more than one ``AbstractArray`` argument, ``eachindex``\nwill create an iterable object that is fast for all arguments (a\n``UnitRange`` if all inputs have fast linear indexing, a\nCartesianRange otherwise).  If the arrays have different sizes and/or\ndimensionalities, ``eachindex`` returns an iterable that spans the\nlargest range along each dimension.\n\"\"\"\neachindex\n\ndoc\"\"\"\n    .<(x, y)\n\nElement-wise less-than comparison operator.\n\"\"\"\nBase.(:(.<))\n\ndoc\"\"\"\n    UndefRefError()\n\nThe item or field is not defined for the given object.\n\"\"\"\nUndefRefError\n\ndoc\"\"\"\n    bessely1(x)\n\nBessel function of the second kind of order 1, $Y_1(x)$.\n\"\"\"\nbessely1\n\ndoc\"\"\"\n```rst\n..  cumprod(A, [dim])\n\nCumulative product along a dimension ``dim`` (defaults to 1).\nSee also :func:`cumprod!` to use a preallocated output array,\nboth for performance and to control the precision of the\noutput (e.g. to avoid overflow).\n```\n\"\"\"\ncumprod\n\ndoc\"\"\"\n    besseljx(nu, x)\n\nScaled Bessel function of the first kind of order `nu`, $J_\\nu(x) e^{- | \\operatorname{Im}(x) |}$.\n\"\"\"\nbesseljx\n\ndoc\"\"\"\n    print(x)\n\nWrite (to the default output stream) a canonical (un-decorated) text representation of a value if there is one, otherwise call `show`. The representation used by `print` includes minimal formatting and tries to avoid Julia-specific details.\n\"\"\"\nprint\n\ndoc\"\"\"\n    filt(b, a, x, [si])\n\nApply filter described by vectors `a` and `b` to vector `x`, with an optional initial filter state vector `si` (defaults to zeros).\n\"\"\"\nfilt\n\ndoc\"\"\"\n    indexpids(S::SharedArray)\n\nReturns the index of the current worker into the `pids` vector, i.e., the list of workers mapping the SharedArray\n\"\"\"\nindexpids\n\ndoc\"\"\"\n    remotecall_wait(id, func, args...)\n\nPerform `wait(remotecall(...))` in one message.\n\"\"\"\nremotecall_wait\n\ndoc\"\"\"\n```rst\n..  append!(collection, collection2) -> collection.\n\nAdd the elements of ``collection2`` to the end of ``collection``.\n\n.. doctest::\n\n   julia> append!([1],[2,3])\n   3-element Array{Int64,1}:\n    1\n    2\n    3\n\n.. doctest::\n\n   julia> append!([1, 2, 3], [4, 5, 6])\n   6-element Array{Int64,1}:\n    1\n    2\n    3\n    4\n    5\n    6\n\nUse :func:`push!` to add individual items to ``collection`` which are not\nalready themselves in another collection.\nThe result is of the preceding example is equivalent to\n``push!([1, 2, 3], 4, 5, 6)``.\n```\n\"\"\"\nappend!\n\ndoc\"\"\"\n    find(A)\n\nReturn a vector of the linear indexes of the non-zeros in `A` (determined by `A[i]!=0`). A common use of this is to convert a boolean array to an array of indexes of the `true` elements.\n\"\"\"\nfind(A)\n\ndoc\"\"\"\n    find(f,A)\n\nReturn a vector of the linear indexes of `A` where `f` returns `true`.\n\"\"\"\nfind(f, A)\n\ndoc\"\"\"\n    ctranspose(A)\n\nThe conjugate transposition operator (`'`).\n\"\"\"\nctranspose\n\ndoc\"\"\"\n    skip(s, offset)\n\nSeek a stream relative to the current position.\n\"\"\"\nskip\n\ndoc\"\"\"\n    lu(A) -> L, U, p\n\nCompute the LU factorization of `A`, such that `A[p,:] = L*U`.\n\"\"\"\nlu\n\ndoc\"\"\"\n    @task\n\nWrap an expression in a `Task` without executing it, and return the `Task`. This only creates a task, and does not run it.\n\"\"\"\n:@task\n\ndoc\"\"\"\n    fld(x, y)\n\nLargest integer less than or equal to `x/y`.\n\"\"\"\nfld\n\ndoc\"\"\"\n    indmax(itr) -> Integer\n\nReturns the index of the maximum element in a collection.\n\"\"\"\nindmax\n\ndoc\"\"\"\n    writecsv(filename, A)\n\nEquivalent to `writedlm` with `delim` set to comma.\n\"\"\"\nwritecsv\n\ndoc\"\"\"\n    wstring(s)\n\nThis is a synonym for either `utf32(s)` or `utf16(s)`, depending on whether `Cwchar_t` is 32 or 16 bits, respectively. The synonym `WString` for `UTF32String` or `UTF16String` is also provided.\n\"\"\"\nwstring\n\ndoc\"\"\"\n    withenv(f::Function, kv::Pair...)\n\nExecute `f()` in an environment that is temporarily modified (not replaced as in `setenv`) by zero or more `\"var\"=>val` arguments `kv`. `withenv` is generally used via the `withenv(kv...) do ... end` syntax. A value of `nothing` can be used to temporarily unset an environment variable (if it is set). When `withenv` returns, the original environment has been restored.\n\"\"\"\nwithenv\n\ndoc\"\"\"\n    setdiff!(s, iterable)\n\nRemove each element of `iterable` from set `s` in-place.\n\"\"\"\nsetdiff!\n\ndoc\"\"\"\n    EOFError()\n\nNo more data was available to read from a file or stream.\n\"\"\"\nEOFError\n\ndoc\"\"\"\n    isascii(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character belongs to the ASCII character set, or whether this is true for all elements of a string.\n\"\"\"\nisascii\n\ndoc\"\"\"\n    ucfirst(string)\n\nReturns `string` with the first character converted to uppercase.\n\"\"\"\nucfirst\n\ndoc\"\"\"\n    copysign(x, y)\n\nReturn `x` such that it has the same sign as `y`\n\"\"\"\ncopysign\n\ndoc\"\"\"\n    getaddrinfo(host)\n\nGets the IP address of the `host` (may have to do a DNS lookup)\n\"\"\"\ngetaddrinfo\n\ndoc\"\"\"\n    @show\n\nShow an expression and result, returning the result.\n\"\"\"\n:@show\n\ndoc\"\"\"\n    showcompact(x)\n\nShow a more compact representation of a value. This is used for printing array elements. If a new type has a different compact representation, it should overload `showcompact(io, x)` where the first argument is a stream.\n\"\"\"\nshowcompact\n\ndoc\"\"\"\n    isleaftype(T)\n\nDetermine whether `T` is a concrete type that can have instances, meaning its only subtypes are itself and `None` (but `T` itself is not `None`).\n\"\"\"\nisleaftype\n\ndoc\"\"\"\n    svdfact(A, [thin=true]) -> SVD\n\nCompute the Singular Value Decomposition (SVD) of `A` and return an `SVD` object. `U`, `S`, `V` and `Vt` can be obtained from the factorization `F` with `F[:U]`, `F[:S]`, `F[:V]` and `F[:Vt]`, such that `A = U*diagm(S)*Vt`. If `thin` is `true`, an economy mode decomposition is returned. The algorithm produces `Vt` and hence `Vt` is more efficient to extract than `V`. The default is to produce a thin decomposition.\n\"\"\"\nsvdfact(A)\n\ndoc\"\"\"\n    svdfact(A, B) -> GeneralizedSVD\n\nCompute the generalized SVD of `A` and `B`, returning a `GeneralizedSVD` Factorization object `F`, such that `A = F[:U]*F[:D1]*F[:R0]*F[:Q]'` and `B = F[:V]*F[:D2]*F[:R0]*F[:Q]'`.\n\"\"\"\nsvdfact(A, B)\n\ndoc\"\"\"\n    string(xs...)\n\nCreate a string from any values using the `print` function.\n\"\"\"\nstring\n\ndoc\"\"\"\n    erfc(x)\n\nCompute the complementary error function of ``x``,\ndefined by $1 - \\operatorname{erf}(x)$.\n\"\"\"\nerfc\n\ndoc\"\"\"\n    prevfloat(f) -> AbstractFloat\n\nGet the previous floating point number in lexicographic order\n\"\"\"\nprevfloat\n\ndoc\"\"\"\n    rest(iter, state)\n\nAn iterator that yields the same elements as `iter`, but starting at the given `state`.\n\"\"\"\nrest\n\ndoc\"\"\"\n    getfield(value, name::Symbol)\n\nExtract a named field from a `value` of composite type. The syntax `a.b` calls `getfield(a, :b)`, and the syntax `a.(b)` calls `getfield(a, b)`.\n\"\"\"\ngetfield\n\ndoc\"\"\"\n    utf8(::Array{UInt8,1})\n\nCreate a UTF-8 string from a byte array.\n\"\"\"\nutf8(::Vector{UInt8})\n\ndoc\"\"\"\n    utf8(::Ptr{UInt8}, [length])\n\nCreate a UTF-8 string from the address of a C (0-terminated) string encoded in UTF-8. A copy is made; the ptr can be safely freed. If `length` is specified, the string does not have to be 0-terminated.\n\"\"\"\nutf8(::Ptr{UInt8}, length::Int = 1)\n\ndoc\"\"\"\n    utf8(s)\n\nConvert a string to a contiguous UTF-8 string (all characters must be valid UTF-8 characters).\n\"\"\"\nutf8(s)\n\ndoc\"\"\"\n    hvcat(rows::Tuple{Vararg{Int}}, values...)\n\nHorizontal and vertical concatenation in one call. This function is called for block matrix syntax. The first argument specifies the number of arguments to concatenate in each block row.\n\n```jldoctest\njulia> a, b, c, d, e, f = 1, 2, 3, 4, 5, 6\n(1,2,3,4,5,6)\n\njulia> [a b c; d e f]\n2x3 Array{Int64,2}:\n 1  2  3\n 4  5  6\n\njulia> hvcat((3,3), a,b,c,d,e,f)\n2x3 Array{Int64,2}:\n 1  2  3\n 4  5  6\n\njulia> [a b;c d; e f]\n3x2 Array{Int64,2}:\n 1  2\n 3  4\n 5  6\n\njulia> hvcat((2,2,2), a,b,c,d,e,f)\n3x2 Array{Int64,2}:\n 1  2\n 3  4\n 5  6\n```\n\nIf the first argument is a single integer `n`, then all block rows are assumed to have `n` block columns.\n\"\"\"\nhvcat\n\ndoc\"\"\"\n    besselj1(x)\n\nBessel function of the first kind of order 1, $J_1(x)$.\n\"\"\"\nbesselj1\n\ndoc\"\"\"\n    sinpi(x)\n\nCompute $\\sin(\\pi x)$ more accurately than `sin(pi*x)`, especially for large `x`.\n\"\"\"\nsinpi\n\ndoc\"\"\"\n    select!(v, k, [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nPartially sort the vector `v` in place, according to the order specified by `by`, `lt` and `rev` so that the value at index `k` (or range of adjacent values if `k` is a range) occurs at the position where it would appear if the array were fully sorted via a non-stable algorithm. If `k` is a single index, that value is returned; if `k` is a range, an array of values at those indices is returned. Note that `select!` does not fully sort the input array.\n\"\"\"\nselect!\n\ndoc\"\"\"\n    maximum!(r, A)\n\nCompute the maximum value of `A` over the singleton dimensions of `r`, and write results to `r`.\n\"\"\"\nmaximum!\n\ndoc\"\"\"\n    prod(itr)\n\nReturns the product of all elements of a collection.\n\"\"\"\nprod(itr)\n\n\"\"\"\n    prod(A, dims)\n\nMultiply elements of an array over the given dimensions.\n\"\"\"\nprod(A, dims)\n\ndoc\"\"\"\n    Base.linearindexing(A)\n\n`linearindexing` defines how an AbstractArray most efficiently accesses its elements. If `Base.linearindexing(A)` returns `Base.LinearFast()`, this means that linear indexing with only one index is an efficient operation. If it instead returns `Base.LinearSlow()` (by default), this means that the array intrinsically accesses its elements with indices specified for every dimension. Since converting a linear index to multiple indexing subscripts is typically very expensive, this provides a traits-based mechanism to enable efficient generic code for all array types.\n\nAn abstract array subtype `MyArray` that wishes to opt into fast linear indexing behaviors should define `linearindexing` in the type-domain:\n\n    Base.linearindexing{T<:MyArray}(::Type{T}) = Base.LinearFast()\n\"\"\"\nBase.linearindexing\n\ndoc\"\"\"\n    isqrt(n)\n\nInteger square root: the largest integer `m` such that `m*m <= n`.\n\"\"\"\nisqrt\n\ndoc\"\"\"\n    log1p(x)\n\nAccurate natural logarithm of `1+x`. Throws `DomainError` for `Real` arguments less than -1.\n\nThere is an experimental variant in the `Base.Math.JuliaLibm` module, which is typically faster and more accurate.\n\"\"\"\nlog1p\n\ndoc\"\"\"\n    flipsign(x, y)\n\nReturn `x` with its sign flipped if `y` is negative. For example `abs(x) = flipsign(x,x)`.\n\"\"\"\nflipsign\n\ndoc\"\"\"\n    lbeta(x, y)\n\nNatural logarithm of the absolute value of the beta function $\\log(|\\operatorname{B}(x,y)|)$.\n\"\"\"\nlbeta\n\ndoc\"\"\"\n```rst\n..  randstring([rng,] len=8)\n\nCreate a random ASCII string of length ``len``, consisting of upper- and\nlower-case letters and the digits 0-9. The optional ``rng`` argument\nspecifies a random number generator, see :ref:`Random Numbers <random-numbers>`.\n```\n\"\"\"\nrandstring\n\ndoc\"\"\"\n    Float64(x [, mode::RoundingMode])\n\nCreate a Float64 from `x`. If `x` is not exactly representable then\n`mode` determines how `x` is rounded.\n\n```jldoctest\njulia> Float64(pi, RoundDown)\n3.141592653589793\n\njulia> Float64(pi, RoundUp)\n3.1415926535897936\n```\n\nSee `get_rounding` for available rounding modes.\n\"\"\"\nFloat64\n\ndoc\"\"\"\n    function_name(f::Function) -> Symbol\n\nGet the name of a generic `Function` as a symbol, or `:anonymous`.\n\"\"\"\nfunction_name\n\ndoc\"\"\"\n```rst\n..  addprocs(n::Integer; exeflags=``) -> List of process identifiers\n\nLaunches workers using the in-built ``LocalManager`` which only launches workers on the local host.\nThis can be used to take advantage of multiple cores. ``addprocs(4)`` will add 4 processes on the local machine.\n```\n\"\"\"\naddprocs(n::Integer)\n\ndoc\"\"\"\n```rst\n..  addprocs() -> List of process identifiers\n\nEquivalent to ``addprocs(CPU_CORES)``\n\nNote that workers do not run a ``.juliarc.jl`` startup script, nor do they synchronize their global state\n(such as global variables, new method definitions, and loaded modules) with any of the other running processes.\n```\n\"\"\"\naddprocs()\n\n\"\"\"\n```\naddprocs(machines; keyword_args...) -> List of process identifiers\n```\n\nAdd processes on remote machines via SSH. Requires julia to be installed in the same\nlocation on each node, or to be available via a shared file system.\n\n`machines` is a vector of machine specifications.  Worker are started for each specification.\n\nA machine specification is either a string `machine_spec` or a tuple - `(machine_spec, count)`.\n\n`machine_spec` is a string of the form `[user@]host[:port] [bind_addr[:port]]`. `user` defaults\nto current user, `port` to the standard ssh port. If `[bind_addr[:port]]` is specified, other\nworkers will connect to this worker at the specified `bind_addr` and `port`.\n\n`count` is the number of workers to be launched on the specified host. If specified as `:auto`\nit will launch as many workers as the number of cores on the specific host.\n\n\nKeyword arguments:\n\n* `tunnel`: if `true` then SSH tunneling will be used to connect to the worker from the\n            master process. Default is `false`.\n\n* `sshflags`: specifies additional ssh options, e.g.\n\n    sshflags=`-i /home/foo/bar.pem`\n\n* `max_parallel`: specifies the maximum number of workers connected to in parallel at a host.\n                  Defaults to 10.\n\n* `dir`: specifies the working directory on the workers. Defaults to the host's current\n         directory (as found by `pwd()`)\n\n* `exename`: name of the julia executable. Defaults to `\"\\$JULIA_HOME/julia\"` or\n             `\"\\$JULIA_HOME/julia-debug\"` as the case may be.\n\n* `exeflags`: additional flags passed to the worker processes.\n\n* `topology`: Specifies how the workers connect to each other. Sending a message\n            between unconnected workers results in an error.\n\n  + `topology=:all_to_all`  :  All processes are connected to each other.\n                      This is the default.\n\n  + `topology=:master_slave`  :  Only the driver process, i.e. pid 1 connects to the\n                        workers. The workers do not connect to each other.\n\n  + `topology=:custom`  :  The `launch` method of the cluster manager specifes the\n                  connection topology via fields `ident` and `connect_idents` in\n                  `WorkerConfig`. A worker with a cluster manager identity `ident`\n                  will connect to all workers specified in `connect_idents`.\n\n\nEnvironment variables :\n\nIf the master process fails to establish a connection with a newly launched worker within 60.0 seconds,\nthe worker treats it a fatal situation and terminates. This timeout can be controlled via environment\nvariable `JULIA_WORKER_TIMEOUT`. The value of `JULIA_WORKER_TIMEOUT` on the master process, specifies\nthe number of seconds a newly launched worker waits for connection establishment.\n\"\"\"\naddprocs(machines)\n\ndoc\"\"\"\n```rst\n..  addprocs(manager::ClusterManager; kwargs...) -> List of process identifiers\n\nLaunches worker processes via the specified cluster manager.\n\nFor example Beowulf clusters are  supported via a custom cluster manager implemented in package ``ClusterManagers``.\n\nThe number of seconds a newly launched worker waits for connection establishment from the master can be\nspecified via variable ``JULIA_WORKER_TIMEOUT`` in the worker process's environment. Relevant only when using TCP/IP as transport.\n```\n\"\"\"\naddprocs(manager::ClusterManager)\n\ndoc\"\"\"\n    mkpath(path, [mode])\n\nCreate all directories in the given `path`, with permissions `mode`. `mode` defaults to 0o777, modified by the current file creation mask.\n\"\"\"\nmkpath\n\ndoc\"\"\"\n```rst\n..  lufact(A [,pivot=Val{true}]) -> F\n\nCompute the LU factorization of ``A``. The return type of ``F`` depends on the type of ``A``. In most cases, if ``A`` is a subtype ``S`` of AbstractMatrix with an element type ``T`` supporting ``+``, ``-``, ``*`` and ``/`` the return type is ``LU{T,S{T}}``. If pivoting is chosen (default) the element type should also support ``abs`` and ``<``. When ``A`` is sparse and have element of type ``Float32``, ``Float64``, ``Complex{Float32}``, or ``Complex{Float64}`` the return type is ``UmfpackLU``. Some examples are shown in the table below.\n\n======================= ========================= ========================================\nType of input ``A``     Type of output ``F``      Relationship between ``F`` and ``A``\n======================= ========================= ========================================\n:func:`Matrix`           ``LU``                   ``F[:L]*F[:U] == A[F[:p], :]``\n:func:`Tridiagonal`      ``LU{T,Tridiagonal{T}}`` ``F[:L]*F[:U] == A[F[:p], :]``\n:func:`SparseMatrixCSC`  ``UmfpackLU``            ``F[:L]*F[:U] == (F[:Rs] .* A)[F[:p], F[:q]]``\n======================= ========================= ========================================\n\nThe individual components of the factorization ``F`` can be accessed by indexing:\n\n=========== ======================================= ====== ======================== =============\nComponent   Description                             ``LU`` ``LU{T,Tridiagonal{T}}`` ``UmfpackLU``\n=========== ======================================= ====== ======================== =============\n``F[:L]``   ``L`` (lower triangular) part of ``LU``    \u2713            \u2713                        \u2713\n``F[:U]``   ``U`` (upper triangular) part of ``LU``    \u2713            \u2713                        \u2713\n``F[:p]``   (right) permutation ``Vector``             \u2713            \u2713                        \u2713\n``F[:P]``   (right) permutation ``Matrix``             \u2713            \u2713\n``F[:q]``   left permutation ``Vector``                                                      \u2713\n``F[:Rs]``  ``Vector`` of scaling factors                                                    \u2713\n``F[:(:)]`` ``(L,U,p,q,Rs)`` components                                                      \u2713\n=========== ======================================= ====== ======================== =============\n\n================== ====== ======================== =============\nSupported function ``LU`` ``LU{T,Tridiagonal{T}}`` ``UmfpackLU``\n================== ====== ======================== =============\n     ``/``            \u2713\n     ``\\``            \u2713                       \u2713             \u2713\n     ``cond``         \u2713                                     \u2713\n     ``det``          \u2713                       \u2713             \u2713\n     ``logdet``       \u2713                       \u2713\n     ``logabsdet``    \u2713                       \u2713\n     ``size``         \u2713                       \u2713\n================== ====== ======================== =============\n```\n\"\"\"\nlufact\n\ndoc\"\"\"\n    besselix(nu, x)\n\nScaled modified Bessel function of the first kind of order `nu`, $I_\\nu(x) e^{- | \\operatorname{Re}(x) |}$.\n\"\"\"\nbesselix\n\ndoc\"\"\"\n    union(s1,s2...)\n    \u222a(s1,s2...)\n\nConstruct the union of two or more sets. Maintains order with arrays.\n\"\"\"\nunion\n\ndoc\"\"\"\n    lstat(file)\n\nLike stat, but for symbolic links gets the info for the link itself rather than the file it refers to. This function must be called on a file path rather than a file object or a file descriptor.\n\"\"\"\nlstat\n\ndoc\"\"\"\n```rst\n..  mapfoldl(f, op, v0, itr)\n\nLike :func:`mapreduce`, but with guaranteed left associativity. ``v0``\nwill be used exactly once.\n```\n\"\"\"\nmapfoldl(f, op, v0, itr)\n\ndoc\"\"\"\n```rst\n..  mapfoldl(f, op, itr)\n\nLike ``mapfoldl(f, op, v0, itr)``, but using the first element of\n``itr`` as ``v0``. In general, this cannot be used with empty\ncollections (see ``reduce(op, itr)``).\n```\n\"\"\"\nmapfoldl(f, op, itr)\n\ndoc\"\"\"\n    realmax(T)\n\nThe highest finite value representable by the given floating-point DataType `T`.\n\"\"\"\nrealmax\n\ndoc\"\"\"\n    takebuf_string(b::IOBuffer)\n\nObtain the contents of an `IOBuffer` as a string, without copying. Afterwards, the IOBuffer is reset to its initial state.\n\"\"\"\ntakebuf_string\n\ndoc\"\"\"\n    pipeline(from, to, ...)\n\nCreate a pipeline from a data source to a destination. The source and destination can\nbe commands, I/O streams, strings, or results of other `pipeline` calls. At least one\nargument must be a command. Strings refer to filenames.\nWhen called with more than two arguments, they are chained together from left to right.\nFor example `pipeline(a,b,c)` is equivalent to `pipeline(pipeline(a,b),c)`. This provides a more\nconcise way to specify multi-stage pipelines.\n\n**Examples**:\n\n* ``run(pipeline(`ls`, `grep xyz`))``\n* ``run(pipeline(`ls`, \"out.txt\"))``\n* ``run(pipeline(\"out.txt\", `grep xyz`))``\n\n\"\"\"\npipeline(from, to, rest...)\n\ndoc\"\"\"\n    pipeline(command; stdin, stdout, stderr, append=false)\n\nRedirect I/O to or from the given `command`. Keyword arguments specify which of\nthe command's streams should be redirected. `append` controls whether file output\nappends to the file.\nThis is a more general version of the 2-argument `pipeline` function.\n`pipeline(from, to)` is equivalent to `pipeline(from, stdout=to)` when `from` is a\ncommand, and to `pipe(to, stdin=from)` when `from` is another kind of\ndata source.\n\n**Examples**:\n\n* ``run(pipeline(`dothings`, stdout=\"out.txt\", stderr=\"errs.txt\"))``\n* ``run(pipeline(`update`, stdout=\"log.txt\", append=true))``\n\n\"\"\"\npipeline(command)\n\ndoc\"\"\"\n    serialize(stream, value)\n\nWrite an arbitrary value to a stream in an opaque format, such that it can be read back by `deserialize`.\nThe read-back value will be as identical as possible to the original.\nIn general, this process will not work if the reading and writing are done by different versions of Julia,\nor an instance of Julia with a different system image.\n`Ptr` values are serialized as all-zero bit patterns (`NULL`).\n\"\"\"\nserialize\n\ndoc\"\"\"\n    sum(itr)\n\nReturns the sum of all elements in a collection.\n\"\"\"\nsum(itr)\n\ndoc\"\"\"\n    sum(A, dims)\n\nSum elements of an array over the given dimensions.\n\"\"\"\nsum(A, dims)\n\ndoc\"\"\"\n    sum(f, itr)\n\nSum the results of calling function `f` on each element of `itr`.\n\"\"\"\nsum(f::Function, itr)\n\ndoc\"\"\"\n    typemin(T)\n\nThe lowest value representable by the given (real) numeric DataType `T`.\n\"\"\"\ntypemin\n\ndoc\"\"\"\n    call(x, args...)\n\nIf `x` is not a `Function`, then `x(args...)` is equivalent to `call(x, args...)`. This means that function-like behavior can be added to any type by defining new `call` methods.\n\"\"\"\ncall\n\ndoc\"\"\"\n    countfrom(start=1, step=1)\n\nAn iterator that counts forever, starting at `start` and incrementing by `step`.\n\"\"\"\ncountfrom\n\ndoc\"\"\"\n    eof(stream) -> Bool\n\nTests whether an I/O stream is at end-of-file. If the stream is not yet exhausted, this function will block to wait for more data if necessary, and then return `false`. Therefore it is always safe to read one byte after seeing `eof` return `false`. `eof` will return `false` as long as buffered data is still available, even if the remote end of a connection is closed.\n\"\"\"\neof\n\ndoc\"\"\"\n    mktempdir([parent=tempdir()])\n\nCreate a temporary directory in the `parent` directory and return its path.\n\"\"\"\nmktempdir()\n\ndoc\"\"\"\n    mktempdir(f::Function, [parent=tempdir()])\n\nApply the function `f` to the result of `mktempdir(parent)` and remove the temporary directory upon completion.\n\"\"\"\nmktempdir(f::Function)\n\ndoc\"\"\"\n    tril(M)\n\nLower triangle of a matrix.\n\"\"\"\ntril(M)\n\ndoc\"\"\"\n    tril(M, k)\n\nReturns the lower triangle of `M` starting from the `k`th superdiagonal.\n\"\"\"\ntril(M,k)\n\ndoc\"\"\"\n    @edit\n\nEvaluates the arguments to the function call, determines their types, and calls the `edit` function on the resulting expression.\n\"\"\"\n:@edit\n\ndoc\"\"\"\n    subtypes(T::DataType)\n\nReturn a list of immediate subtypes of DataType `T`. Note that all currently loaded subtypes are included, including those not visible in the current module.\n\"\"\"\nsubtypes\n\ndoc\"\"\"\n    digits(n, [base], [pad])\n\nReturns an array of the digits of `n` in the given base, optionally padded with zeros to a specified size. More significant digits are at higher indexes, such that `n == sum([digits[k]*base^(k-1) for k=1:length(digits)])`.\n\"\"\"\ndigits\n\ndoc\"\"\"\n    bytes2hex(bin_arr::Array{UInt8, 1})\n\nConvert an array of bytes to its hexadecimal representation. All characters are in lower-case. Returns an `ASCIIString`.\n\"\"\"\nbytes2hex\n\ndoc\"\"\"\n    unlock(l::ReentrantLock)\n\nReleases ownership of the lock by the current task. If the lock had been acquired before, it just decrements an internal counter and returns immediately.\n\"\"\"\nunlock\n\ndoc\"\"\"\n```rst\n..  BigFloat(x)\n\nCreate an arbitrary precision floating point number. ``x`` may be\nan ``Integer``, a ``Float64`` or a ``BigInt``. The\nusual mathematical operators are defined for this type, and results\nare promoted to a ``BigFloat``.\n\nNote that because decimal literals are converted to floating point numbers\nwhen parsed, ``BigFloat(2.1)`` may not yield what you expect. You may instead\nprefer to initialize constants from strings via :func:`parse`, or using the\n``big`` string literal.\n\n.. doctest::\n\n   julia> BigFloat(2.1)\n   2.100000000000000088817841970012523233890533447265625000000000000000000000000000\n\n   julia> big\"2.1\"\n   2.099999999999999999999999999999999999999999999999999999999999999999999999999986\n```\n\"\"\"\nBigFloat\n\ndoc\"\"\"\n    xcorr(u,v)\n\nCompute the cross-correlation of two vectors.\n\"\"\"\nxcorr\n\ndoc\"\"\"\n    typeof(x)\n\nGet the concrete type of `x`.\n\"\"\"\ntypeof\n\ndoc\"\"\"\n    drop(iter, n)\n\nAn iterator that generates all but the first `n` elements of `iter`.\n\"\"\"\ndrop\n\ndoc\"\"\"\n    acsc(x)\n\nCompute the inverse cosecant of `x`, where the output is in radians\n\"\"\"\nacsc\n\ndoc\"\"\"\n    log(x)\n\nCompute the natural logarithm of `x`. Throws `DomainError` for negative `Real` arguments. Use complex negative arguments to obtain complex results.\n\nThere is an experimental variant in the `Base.Math.JuliaLibm` module, which is typically faster and more accurate.\n\"\"\"\nlog(x)\n\ndoc\"\"\"\n    log(b,x)\n\nCompute the base `b` logarithm of `x`. Throws `DomainError` for negative `Real` arguments.\n\"\"\"\nlog(b, x)\n\ndoc\"\"\"\n```rst\n..  trunc([T,] x, [digits, [base]])\n\n``trunc(x)`` returns the nearest integral value of the same type as ``x`` whose absolute\nvalue is less than or equal to ``x``.\n\n``trunc(T, x)`` converts the result to type ``T``, throwing an\n``InexactError`` if the value is not representable.\n\n``digits`` and ``base`` work as for :func:`round`.\n```\n\"\"\"\ntrunc\n\ndoc\"\"\"\n    @less\n\nEvaluates the arguments to the function call, determines their types, and calls the `less` function on the resulting expression.\n\"\"\"\n:@less\n\ndoc\"\"\"\n    broadcast_function(f)\n\nReturns a function `broadcast_f` such that `broadcast_function(f)(As...) === broadcast(f, As...)`. Most useful in the form `const broadcast_f = broadcast_function(f)`.\n\"\"\"\nbroadcast_function\n\ndoc\"\"\"\n    unsafe_convert(T,x)\n\nConvert `x` to a value of type `T`\n\nIn cases where `convert` would need to take a Julia object and turn it into a `Ptr`, this function should be used to define and perform that conversion.\n\nBe careful to ensure that a julia reference to `x` exists as long as the result of this function will be used. Accordingly, the argument `x` to this function should never be an expression, only a variable name or field reference. For example, `x=a.b.c` is acceptable, but `x=[a,b,c]` is not.\n\nThe `unsafe` prefix on this function indicates that using the result of this function after the `x` argument to this function is no longer accessible to the program may cause undefined behavior, including program corruption or segfaults, at any later time.\n\"\"\"\nunsafe_convert\n\ndoc\"\"\"\n    warn(msg)\n\nDisplay a warning. Argument `msg` is a string describing the warning to be displayed.\n\"\"\"\nwarn\n\ndoc\"\"\"\n    erfinv(x)\n\nCompute the inverse error function of a real `x`,\ndefined by $\\operatorname{erf}(\\operatorname{erfinv}(x)) = x$.\n\"\"\"\nerfinv\n\ndoc\"\"\"\n    @async\n\nLike `@schedule`, `@async` wraps an expression in a `Task` and adds it to the local machine's scheduler queue. Additionally it adds the task to the set of items that the nearest enclosing `@sync` waits for. `@async` also wraps the expression in a `let x=x, y=y, ...` block to create a new scope with copies of all variables referenced in the expression.\n\"\"\"\n:@async\n\ndoc\"\"\"\n    rotr90(A)\n\nRotate matrix `A` right 90 degrees.\n\"\"\"\nrotr90(A)\n\ndoc\"\"\"\n    rotr90(A, k)\n\nRotate matrix `A` right 90 degrees an integer `k` number of times. If `k` is zero or a multiple of four, this is equivalent to a `copy`.\n\"\"\"\nrotr90(A, k)\n\ndoc\"\"\"\n    readdir([dir]) -> Vector{ByteString}\n\nReturns the files and directories in the directory `dir` (or the current working directory if not given).\n\"\"\"\nreaddir\n\ndoc\"\"\"\n    seek(s, pos)\n\nSeek a stream to the given position.\n\"\"\"\nseek\n\ndoc\"\"\"\n    acosd(x)\n\nCompute the inverse cosine of `x`, where the output is in degrees\n\"\"\"\nacosd\n\ndoc\"\"\"\n    triu(M)\n\nUpper triangle of a matrix.\n\"\"\"\ntriu(M)\n\ndoc\"\"\"\n    triu(M, k)\n\nReturns the upper triangle of `M` starting from the `k`th superdiagonal.\n\"\"\"\ntriu(M, k)\n\ndoc\"\"\"\n    instances(T::Type)\n\nReturn a collection of all instances of the given type, if applicable. Mostly used for enumerated types (see `@enum`).\n\"\"\"\ninstances\n\ndoc\"\"\"\n    besselj0(x)\n\nBessel function of the first kind of order 0, $J_0(x)$.\n\"\"\"\nbesselj0\n\ndoc\"\"\"\n    erfcinv(x)\n\nCompute the inverse error complementary function of a real `x`,\ndefined by $\\operatorname{erfc}(\\operatorname{erfcinv}(x)) = x$.\n\"\"\"\nerfcinv\n\ndoc\"\"\"\n    minabs(itr)\n\nCompute the minimum absolute value of a collection of values.\n\"\"\"\nminabs(itr)\n\ndoc\"\"\"\n    minabs(A, dims)\n\nCompute the minimum absolute values over given dimensions.\n\"\"\"\nminabs(A, dims)\n\ndoc\"\"\"\n    popdisplay()\n    popdisplay(d::Display)\n\nPop the topmost backend off of the display-backend stack, or the topmost copy of `d` in the second variant.\n\"\"\"\npopdisplay\n\ndoc\"\"\"\n    readdlm(source, delim::Char, T::Type, eol::Char; header=false, skipstart=0, skipblanks=true, use_mmap, ignore_invalid_chars=false, quotes=true, dims, comments=true, comment_char='#')\n\nRead a matrix from the source where each line (separated by `eol`) gives one row, with elements separated by the given delimeter. The source can be a text file, stream or byte array. Memory mapped files can be used by passing the byte array representation of the mapped segment as source.\n\nIf `T` is a numeric type, the result is an array of that type, with any non-numeric elements as `NaN` for floating-point types, or zero. Other useful values of `T` include `ASCIIString`, `AbstractString`, and `Any`.\n\nIf `header` is `true`, the first row of data will be read as header and the tuple `(data_cells, header_cells)` is returned instead of only `data_cells`.\n\nSpecifying `skipstart` will ignore the corresponding number of initial lines from the input.\n\nIf `skipblanks` is `true`, blank lines in the input will be ignored.\n\nIf `use_mmap` is `true`, the file specified by `source` is memory mapped for potential speedups. Default is `true` except on Windows. On Windows, you may want to specify `true` if the file is large, and is only read once and not written to.\n\nIf `ignore_invalid_chars` is `true`, bytes in `source` with invalid character encoding will be ignored. Otherwise an error is thrown indicating the offending character position.\n\nIf `quotes` is `true`, column enclosed within double-quote (\") characters are allowed to contain new lines and column delimiters. Double-quote characters within a quoted field must be escaped with another double-quote.  Specifying `dims` as a tuple of the expected rows and columns (including header, if any) may speed up reading of large files.  If `comments` is `true`, lines beginning with `comment_char` and text following `comment_char` in any line are ignored.\n\"\"\"\nreaddlm(source, delim, T, eol)\n\ndoc\"\"\"\n    readdlm(source, delim::Char, eol::Char; options...)\n\nIf all data is numeric, the result will be a numeric array. If some elements cannot be parsed as numbers, a cell array of numbers and strings is returned.\n\"\"\"\nreaddlm(source, delim::Char, eol::Char)\n\ndoc\"\"\"\n    readdlm(source, delim::Char, T::Type; options...)\n\nThe end of line delimiter is taken as `n`.\n\"\"\"\nreaddlm(source, delim::Char, T::Type)\n\ndoc\"\"\"\n    readdlm(source, delim::Char; options...)\n\nThe end of line delimiter is taken as `n`. If all data is numeric, the result will be a numeric array. If some elements cannot be parsed as numbers, a cell array of numbers and strings is returned.\n\"\"\"\nreaddlm(source, delim::Char)\n\ndoc\"\"\"\n    readdlm(source, T::Type; options...)\n\nThe columns are assumed to be separated by one or more whitespaces. The end of line delimiter is taken as `n`.\n\"\"\"\nreaddlm(source, T::Type)\n\ndoc\"\"\"\n    readdlm(source; options...)\n\nThe columns are assumed to be separated by one or more whitespaces. The end of line delimiter is taken as `n`. If all data is numeric, the result will be a numeric array. If some elements cannot be parsed as numbers, a cell array of numbers and strings is returned.\n\"\"\"\nreaddlm(source)\n\ndoc\"\"\"\n    filesize(path...)\n\nEquivalent to `stat(file).size`\n\"\"\"\nfilesize\n\ndoc\"\"\"\n    sinc(x)\n\nCompute $\\sin(\\pi x) / (\\pi x)$ if $x \\neq 0$, and $1$ if $x = 0$.\n\"\"\"\nsinc\n\ndoc\"\"\"\n    utf16(s)\n\nCreate a UTF-16 string from a byte array, array of `UInt16`, or any other string type. (Data must be valid UTF-16. Conversions of byte arrays check for a byte-order marker in the first two bytes, and do not include it in the resulting string.)\n\nNote that the resulting `UTF16String` data is terminated by the NUL codepoint (16-bit zero), which is not treated as a character in the string (so that it is mostly invisible in Julia); this allows the string to be passed directly to external functions requiring NUL-terminated data. This NUL is appended automatically by the `utf16(s)` conversion function. If you have a `UInt16` array `A` that is already NUL-terminated valid UTF-16 data, then you can instead use `UTF16String(A)` to construct the string without making a copy of the data and treating the NUL as a terminator rather than as part of the string.\n\"\"\"\nutf16(s)\n\ndoc\"\"\"\n    utf16(::Union{Ptr{UInt16},Ptr{Int16}} [, length])\n\nCreate a string from the address of a NUL-terminated UTF-16 string. A copy is made; the pointer can be safely freed. If `length` is specified, the string does not have to be NUL-terminated.\n\"\"\"\nutf16(::Union{Ptr{UInt16},Ptr{Int16}}, length=?)\n\ndoc\"\"\"\n    median(v[, region])\n\nCompute the median of whole array `v`, or optionally along the dimensions in `region`. For even number of elements no exact median element exists, so the result is equivalent to calculating mean of two median elements. `NaN` is returned if the data contains any `NaN` values. For applications requiring the handling of missing data, the `DataArrays` package is recommended.\n\"\"\"\nmedian\n\ndoc\"\"\"\n    cglobal((symbol, library) [, type=Void])\n\nObtain a pointer to a global variable in a C-exported shared library, specified exactly as in `ccall`. Returns a `Ptr{Type}`, defaulting to `Ptr{Void}` if no Type argument is supplied. The values can be read or written by `unsafe_load` or `unsafe_store!`, respectively.\n\"\"\"\ncglobal\n\ndoc\"\"\"\n    one(x)\n\nGet the multiplicative identity element for the type of `x` (`x` can also specify the type itself). For matrices, returns an identity matrix of the appropriate size and type.\n\"\"\"\none\n\ndoc\"\"\"\n    parseip(addr)\n\nParse a string specifying an IPv4 or IPv6 ip address.\n\"\"\"\nparseip\n\ndoc\"\"\"\n    rationalize([Type=Int,] x; tol=eps(x))\n\nApproximate floating point number `x` as a Rational number with components of the given integer type. The result will differ from `x` by no more than `tol`.\n\"\"\"\nrationalize\n\ndoc\"\"\"\n    splice!(collection, index, [replacement]) -> item\n\nRemove the item at the given index, and return the removed item. Subsequent items\nare shifted down to fill the resulting gap. If specified, replacement values from\nan ordered collection will be spliced in place of the removed item.\n\n```jldoctest\njulia> A = [6, 5, 4, 3, 2, 1]; splice!(A, 5)\n2\n\njulia> A\n5-element Array{Int64,1}:\n 6\n 5\n 4\n 3\n 1\n\njulia> splice!(A, 5, -1)\n1\n\njulia> A\n5-element Array{Int64,1}:\n  6\n  5\n  4\n  3\n -1\n\njulia> splice!(A, 1, [-1, -2, -3])\n6\n\njulia> A\n7-element Array{Int64,1}:\n -1\n -2\n -3\n  5\n  4\n  3\n -1\n```\n\nTo insert `replacement` before an index `n` without removing any items, use\n`splice!(collection, n:n-1, replacement)`.\n\"\"\"\nsplice!(collection, index, replacement = ?)\n\ndoc\"\"\"\n    splice!(collection, range, [replacement]) -> items\n\nRemove items in the specified index range, and return a collection containing the\nremoved items. Subsequent items are shifted down to fill the resulting gap.\nIf specified, replacement values from an ordered collection will be spliced in place\nof the removed items.\n\nTo insert `replacement` before an index `n` without removing any items, use\n`splice!(collection, n:n-1, replacement)`.\n\n```jldoctest\njulia> splice!(A, 4:3, 2)\n0-element Array{Int64,1}\n\njulia> A\n8-element Array{Int64,1}:\n -1\n -2\n -3\n  2\n  5\n  4\n  3\n -1\n```\n\"\"\"\nsplice!(collection, range::Range, replacement)\n\ndoc\"\"\"\n    endof(collection) -> Integer\n\nReturns the last index of the collection.\n\n```jldoctest\njulia> endof([1,2,4])\n3\n```\n\"\"\"\nendof\n\ndoc\"\"\"\n    isfifo(path) -> Bool\n\nReturns `true` if `path` is a FIFO, `false` otherwise.\n\"\"\"\nisfifo\n\ndoc\"\"\"\n    Channel{T}(sz::Int)\n\nConstructs a `Channel` that can hold a maximum of `sz` objects of type `T`. `put!` calls on a full channel block till an object is removed with `take!`.\n\nOther constructors:\n\n- `Channel()` - equivalent to `Channel{Any}(32)`\n- `Channel(sz::Int)` equivalent to `Channel{Any}(sz)`\n\"\"\"\nChannel\n\ndoc\"\"\"\n    next(iter, state) -> item, state\n\nFor a given iterable object and iteration state, return the current item and the next iteration state\n\"\"\"\nnext\n\ndoc\"\"\"\n    unshift!(collection, items...) -> collection\n\nInsert one or more `items` at the beginning of `collection`.\n\n```jldoctest\n  julia> unshift!([1, 2, 3, 4], 5, 6)\n  6-element Array{Int64,1}:\n   5\n   6\n   1\n   2\n   3\n   4\n```\n\"\"\"\nunshift!\n\ndoc\"\"\"\n    log2(x)\n\nCompute the logarithm of `x` to base 2. Throws `DomainError` for negative `Real` arguments.\n\"\"\"\nlog2\n\ndoc\"\"\"\n```rst\n..  SymTridiagonal(d, du)\n\nConstruct a real symmetric tridiagonal matrix from the diagonal and upper diagonal, respectively. The result is of type ``SymTridiagonal`` and provides efficient specialized eigensolvers, but may be converted into a regular matrix with :func:`full`.\n```\n\"\"\"\nSymTridiagonal\n\ndoc\"\"\"\n    colon(start, [step], stop)\n\nCalled by `:` syntax for constructing ranges.\n\"\"\"\ncolon\n\ndoc\"\"\"\n    Base64EncodePipe(ostream)\n\nReturns a new write-only I/O stream, which converts any bytes written to it into base64-encoded ASCII bytes written to `ostream`. Calling `close` on the `Base64Pipe` stream is necessary to complete the encoding (but does not close `ostream`).\n\"\"\"\nBase64EncodePipe\n\ndoc\"\"\"\n    issetgid(path) -> Bool\n\nReturns `true` if `path` has the setgid flag set, `false` otherwise.\n\"\"\"\nissetgid\n\ndoc\"\"\"\n    isnull(x)\n\nIs the `Nullable` object `x` null, i.e. missing a value?\n\"\"\"\nisnull\n\ndoc\"\"\"\n    abs2(x)\n\nSquared absolute value of `x`\n\"\"\"\nabs2\n\ndoc\"\"\"\n    write(stream, x)\n\nWrite the canonical binary representation of a value to the given stream.\nReturns the number of bytes written into the stream.\n\nYou can write multiple values with the same :func:`write` call.\ni.e. the following are equivalent:\n\n    write(stream, x, y...)\n    write(stream, x) + write(stream, y...)\n\"\"\"\nwrite\n\ndoc\"\"\"\n    sizehint!(s, n)\n\nSuggest that collection `s` reserve capacity for at least `n` elements. This can improve performance.\n\"\"\"\nsizehint!\n\ndoc\"\"\"\n    permute!(v, p)\n\nPermute vector `v` in-place, according to permutation `p`. No checking is done to verify that `p` is a permutation.\n\nTo return a new permutation, use `v[p]`. Note that this is generally faster than `permute!(v,p)` for large vectors.\n\"\"\"\npermute!\n\ndoc\"\"\"\n    ifelse(condition::Bool, x, y)\n\nReturn `x` if `condition` is `true`, otherwise return `y`. This differs from `?` or `if` in that it is an ordinary function, so all the arguments are evaluated first. In some cases, using `ifelse` instead of an `if` statement can eliminate the branch in generated code and provide higher performance in tight loops.\n\"\"\"\nifelse\n\ndoc\"\"\"\n    ispow2(n) -> Bool\n\nTest whether `n` is a power of two\n\"\"\"\nispow2\n\ndoc\"\"\"\n    vcat(A...)\n\nConcatenate along dimension 1\n\"\"\"\nvcat\n\ndoc\"\"\"\n    isgraph(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is printable, and not a space, or whether this is true for all elements of a string. Any character that would cause a printer to use ink should be classified with `isgraph(c)==true`.\n\"\"\"\nisgraph\n\ndoc\"\"\"\n    OutOfMemoryError()\n\nAn operation allocated too much memory for either the system or the garbage collector to handle properly.\n\"\"\"\nOutOfMemoryError\n\ndoc\"\"\"\n```rst\n..  zip(iters...)\n\nFor a set of iterable objects, returns an iterable of tuples, where the ``i``\\ th tuple contains the ``i``\\ th component of each input iterable.\n\nNote that :func:`zip` is its own inverse: ``collect(zip(zip(a...)...)) == collect(a)``.\n```\n\"\"\"\nzip\n\ndoc\"\"\"\n    SystemError(prefix::AbstractString, [errno::Int32])\n\nA system call failed with an error code (in the `errno` global variable).\n\"\"\"\nSystemError\n\ndoc\"\"\"\n    binomial(n,k)\n\nNumber of ways to choose `k` out of `n` items\n\"\"\"\nbinomial\n\ndoc\"\"\"\n    rot180(A)\n\nRotate matrix `A` 180 degrees.\n\"\"\"\nrot180(A)\n\ndoc\"\"\"\n    rot180(A, k)\n\nRotate matrix `A` 180 degrees an integer `k` number of times. If `k` is even, this is equivalent to a `copy`.\n\"\"\"\nrot180(A, k)\n\ndoc\"\"\"\n    .<=(x, y)\n    .\u2264(x,y)\n\nElement-wise less-than-or-equals comparison operator.\n\"\"\"\nBase.(:(.<=))\n\ndoc\"\"\"\n    checkbounds(array, indexes...)\n\nThrow an error if the specified indexes are not in bounds for the given array.\nSubtypes of `AbstractArray` should specialize this method if they need to\nprovide custom bounds checking behaviors.\n\"\"\"\ncheckbounds(array, indexes...)\n\ndoc\"\"\"\n    checkbounds(::Type{Bool}, dimlength::Integer, index)\n\nReturn a `Bool` describing if the given index is within the bounds of the given\ndimension length. Custom types that would like to behave as indices for all\narrays can extend this method in order to provide a specialized bounds checking\nimplementation.\n\"\"\"\ncheckbounds(::Type{Bool}, ::Integer, index)\n\ndoc\"\"\"\n    asec(x)\n\nCompute the inverse secant of `x`, where the output is in radians\n\"\"\"\nasec\n\ndoc\"\"\"\n    rank(M)\n\nCompute the rank of a matrix.\n\"\"\"\nrank\n\ndoc\"\"\"\n    max(x, y, ...)\n\nReturn the maximum of the arguments. Operates elementwise over arrays.\n\"\"\"\nmax\n\ndoc\"\"\"\n    versioninfo([verbose::Bool])\n\nPrint information about the version of Julia in use. If the `verbose` argument is `true`, detailed system information is shown as well.\n\"\"\"\nversioninfo\n\ndoc\"\"\"\n    DimensionMismatch([msg])\n\nThe objects called do not have matching dimensionality.\nOptional argument `msg` is a descriptive error string.\n\"\"\"\nDimensionMismatch\n\ndoc\"\"\"\n    take!(RemoteRef)\n\nFetch the value of a remote reference, removing it so that the reference is empty again.\n\"\"\"\ntake!(::RemoteRef)\n\ndoc\"\"\"\n    take!(Channel)\n\nRemoves and returns a value from a `Channel`. Blocks till data is available.\n\"\"\"\ntake!(::Channel)\n\ndoc\"\"\"\n    sort!(v, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nSort the vector `v` in place. `QuickSort` is used by default for numeric arrays while `MergeSort` is used for other arrays. You can specify an algorithm to use via the `alg` keyword (see Sorting Algorithms for available algorithms). The `by` keyword lets you provide a function that will be applied to each element before comparison; the `lt` keyword allows providing a custom \"less than\" function; use `rev=true` to reverse the sorting order. These options are independent and can be used together in all possible combinations: if both `by` and `lt` are specified, the `lt` function is applied to the result of the `by` function; `rev=true` reverses whatever ordering specified via the `by` and `lt` keywords.\n\"\"\"\nsort!\n\ndoc\"\"\"\n    kill(p::Process, signum=SIGTERM)\n\nSend a signal to a process. The default is to terminate the process.\n\"\"\"\nkill(p::Process, signum=SIGTERM)\n\ndoc\"\"\"\n    kill(manager::FooManager, pid::Int, config::WorkerConfig)\n\nImplemented by cluster managers. It is called on the master process, by `rmprocs`. It should cause the remote worker specified by `pid` to exit. `Base.kill(manager::ClusterManager.....)` executes a remote `exit()` on `pid`\n\"\"\"\nkill(manager, pid::Int, config::WorkerConfig)\n\ndoc\"\"\"\n```rst\n..  logm(A)\n\nIf ``A`` has no negative real eigenvalue, compute the principal matrix logarithm of ``A``, i.e. the unique matrix :math:`X` such that :math:`e^X = A` and :math:`-\\pi < Im(\\lambda) < \\pi` for all the eigenvalues :math:`\\lambda` of :math:`X`. If ``A`` has nonpositive eigenvalues, a warning is printed and whenever possible a nonprincipal matrix function is returned.\n\nIf ``A`` is symmetric or Hermitian, its eigendecomposition (:func:`eigfact`) is used, if ``A`` is triangular an improved version of the inverse scaling and squaring method is employed (see [AH12]_ and [AHR13]_). For general matrices, the complex Schur form (:func:`schur`) is computed and the triangular algorithm is used on the triangular factor.\n\n.. [AH12] Awad H. Al-Mohy and Nicholas J. Higham, \"Improved inverse  scaling\n   and squaring algorithms for the matrix logarithm\", SIAM Journal on\n   Scientific Computing, 34(4), 2012, C153-C169.\n   `doi:10.1137/110852553 <http://dx.doi.org/10.1137/110852553>`_\n.. [AHR13] Awad H. Al-Mohy, Nicholas J. Higham and Samuel D. Relton,\n   \"Computing the Fr\u00e9chet derivative of the matrix logarithm and estimating\n   the condition number\", SIAM Journal on Scientific Computing, 35(4), 2013,\n   C394-C410.\n   `doi:10.1137/120885991 <http://dx.doi.org/10.1137/120885991>`_\n```\n\"\"\"\nlogm\n\ndoc\"\"\"\n    sylvester(A, B, C)\n\nComputes the solution `X` to the Sylvester equation `AX + XB + C = 0`, where `A`, `B` and `C` have compatible dimensions and `A` and `-B` have no eigenvalues with equal real part.\n\"\"\"\nsylvester\n\ndoc\"\"\"\n    broadcast!(f, dest, As...)\n\nLike `broadcast`, but store the result of `broadcast(f, As...)` in the `dest` array. Note that `dest` is only used to store the result, and does not supply arguments to `f` unless it is also listed in the `As`, as in `broadcast!(f, A, A, B)` to perform `A[:] = broadcast(f, A, B)`.\n\"\"\"\nbroadcast!\n\ndoc\"\"\"\n    cross(x, y)\n    \u00d7(x,y)\n\nCompute the cross product of two 3-vectors.\n\"\"\"\ncross\n\ndoc\"\"\"\n    strides(A)\n\nReturns a tuple of the memory strides in each dimension\n\"\"\"\nstrides\n\ndoc\"\"\"\n    keys(collection)\n\nReturn an iterator over all keys in a collection. `collect(keys(d))` returns an array of keys.\n\"\"\"\nkeys\n\ndoc\"\"\"\n    repeat(A, inner = Int[], outer = Int[])\n\nConstruct an array by repeating the entries of `A`. The i-th element of `inner` specifies the number of times that the individual entries of the i-th dimension of `A` should be repeated. The i-th element of `outer` specifies the number of times that a slice along the i-th dimension of `A` should be repeated.\n\"\"\"\nrepeat\n\ndoc\"\"\"\n    scale(A, b)\n    scale(b, A)\n\nScale an array `A` by a scalar `b`, returning a new array.\n\nIf `A` is a matrix and `b` is a vector, then `scale(A,b)` scales each column `i` of `A` by `b[i]` (similar to `A*diagm(b)`), while `scale(b,A)` scales each row `i` of `A` by `b[i]` (similar to `diagm(b)*A`), returning a new array.\n\nNote: for large `A`, `scale` can be much faster than `A .* b` or `b .* A`, due to the use of BLAS.\n\"\"\"\nscale\n\ndoc\"\"\"\n    ReentrantLock()\n\nCreates a reentrant lock. The same task can acquire the lock as many times as required. Each lock must be matched with an unlock.\n\"\"\"\nReentrantLock\n\ndoc\"\"\"\n    real(z)\n\nReturn the real part of the complex number `z`\n\"\"\"\nreal\n\ndoc\"\"\"\n    gperm(file)\n\nLike uperm but gets the permissions of the group owning the file\n\"\"\"\ngperm\n\ndoc\"\"\"\n    nb_available(stream)\n\nReturns the number of bytes available for reading before a read from this stream or buffer will block.\n\"\"\"\nnb_available\n\ndoc\"\"\"\n    finalize(x)\n\nImmediately run finalizers registered for object `x`.\n\"\"\"\nfinalize\n\ndoc\"\"\"\n    rand([rng], [S], [dims...])\n\nPick a random element or array of random elements from the set of values specified by `S`; `S` can be\n\n* an indexable collection (for example `1:n` or `['x','y','z']`), or\n* a type: the set of values to pick from is then equivalent to\n`typemin(S):typemax(S)` for integers (this is not applicable to `BigInt`),\nand to $[0, 1)$ for floating point numbers;\n\n`S` defaults to `Float64`.\n\"\"\"\nrand\n\ndoc\"\"\"\n    bitpack(A::AbstractArray{T,N}) -> BitArray\n\nConverts a numeric array to a packed boolean array\n\"\"\"\nbitpack\n\ndoc\"\"\"\n    base(base, n, [pad])\n\nConvert an integer to a string in the given base, optionally specifying a number of digits to pad to. The base can be specified as either an integer, or as a `UInt8` array of character values to use as digit symbols.\n\"\"\"\nbase\n\ndoc\"\"\"\n    Timer(callback::Function, delay, repeat=0)\n\nCreate a timer to call the given `callback` function. The `callback` is passed one argument, the timer object itself. The callback will be invoked after the specified initial `delay`, and then repeating with the given `repeat` interval. If `repeat` is `0`, the timer is only triggered once. Times are in seconds. A timer is stopped and has its resources freed by calling `close` on it.\n\"\"\"\nTimer(::Function,delay,repeat=0)\n\ndoc\"\"\"\n    Timer(delay, repeat=0)\n\nCreate a timer that wakes up tasks waiting for it (by calling `wait` on the timer object) at a specified interval.  Times are in seconds.  Waiting tasks are woken with an error when the timer is closed (by `close`). Use `isopen` to check whether a timer is still active.\n\"\"\"\nTimer(delay, repeat=0)\n\ndoc\"\"\"\n    BoundsError([a],[i])\n\nAn indexing operation into an array, `a`, tried to access an out-of-bounds element, `i`.\n\"\"\"\nBoundsError\n\ndoc\"\"\"\n    disable_sigint(f::Function)\n\nDisable Ctrl-C handler during execution of a function, for calling external code that is not interrupt safe. Intended to be called using `do` block syntax as follows:\n\n    disable_sigint() do\n        # interrupt-unsafe code\n        ...\n    end\n\"\"\"\ndisable_sigint\n\ndoc\"\"\"\n```rst\n..  svdfact!(A, [thin=true]) -> SVD\n\n``svdfact!`` is the same as :func:`svdfact`, but saves space by overwriting the input ``A``, instead of creating a copy. If ``thin`` is ``true``, an economy mode decomposition is returned. The default is to produce a thin decomposition.\n```\n\"\"\"\nsvdfact!\n\ndoc\"\"\"\n    hist2d(M, e1, e2) -> (edge1, edge2, counts)\n\nCompute a \"2d histogram\" of a set of N points specified by N-by-2 matrix `M`. Arguments `e1` and `e2` are bins for each dimension, specified either as integer bin counts or vectors of bin edges. The result is a tuple of `edge1` (the bin edges used in the first dimension), `edge2` (the bin edges used in the second dimension), and `counts`, a histogram matrix of size `(length(edge1)-1, length(edge2)-1)`. Note: Julia does not ignore `NaN` values in the computation.\n\"\"\"\nhist2d\n\ndoc\"\"\"\n    which(f, types)\n\nReturns the method of `f` (a `Method` object) that would be called for arguments of the given `types`.\n\nIf `types` is an abstract type, then the method that would be called by `invoke` is returned.\n\"\"\"\nwhich(f, types)\n\ndoc\"\"\"\n    which(symbol)\n\nReturn the module in which the binding for the variable referenced by `symbol` was created.\n\"\"\"\nwhich(symbol)\n\ndoc\"\"\"\n    conv2(u,v,A)\n\n2-D convolution of the matrix `A` with the 2-D separable kernel generated by the vectors `u` and `v`. Uses 2-D FFT algorithm\n\"\"\"\nconv2(u, v, A)\n\ndoc\"\"\"\n    conv2(B,A)\n\n2-D convolution of the matrix `B` with the matrix `A`. Uses 2-D FFT algorithm\n\"\"\"\nconv2(B, A)\n\ndoc\"\"\"\n    broadcast_getindex(A, inds...)\n\nBroadcasts the `inds` arrays to a common size like `broadcast`, and returns an array of the results `A[ks...]`, where `ks` goes over the positions in the broadcast.\n\"\"\"\nbroadcast_getindex\n\ndoc\"\"\"\n    findn(A)\n\nReturn a vector of indexes for each dimension giving the locations of the non-zeros in `A` (determined by `A[i]!=0`).\n\"\"\"\nfindn\n\ndoc\"\"\"\n    invoke(f, (types...), args...)\n\nInvoke a method for the given generic function matching the specified types (as a tuple), on the specified arguments. The arguments must be compatible with the specified types. This allows invoking a method other than the most specific matching method, which is useful when the behavior of a more general definition is explicitly needed (often as part of the implementation of a more specific method of the same function).\n\"\"\"\ninvoke\n\ndoc\"\"\"\n    parse(str, start; greedy=true, raise=true)\n\nParse the expression string and return an expression (which could later be passed to eval for execution). `start` is the index of the first character to start parsing. If `greedy` is `true` (default), `parse` will try to consume as much input as it can; otherwise, it will stop as soon as it has parsed a valid expression. Incomplete but otherwise syntactically valid expressions will return `Expr(:incomplete, \"(error message)\")`. If `raise` is `true` (default), syntax errors other than incomplete expressions will raise an error. If `raise` is `false`, `parse` will return an expression that will raise an error upon evaluation.\n\"\"\"\nparse(str, start)\n\ndoc\"\"\"\n    parse(str; raise=true)\n\nParse the expression string greedily, returning a single expression. An error is thrown if there are additional characters after the first expression. If `raise` is `true` (default), syntax errors will raise an error; otherwise, `parse` will return an expression that will raise an error upon evaluation.\n\"\"\"\nparse(str)\n\ndoc\"\"\"\n    parse(type, str, [base])\n\nParse a string as a number. If the type is an integer type, then a base can be specified (the default is 10). If the type is a floating point type, the string is parsed as a decimal floating point number. If the string does not contain a valid number, an error is raised.\n\"\"\"\nparse(T::Type, str, base=Int)\n\ndoc\"\"\"\n    touch(path::AbstractString)\n\nUpdate the last-modified timestamp on a file to the current time.\n\"\"\"\ntouch\n\ndoc\"\"\"\n```rst\n..  bkfact!(A) -> BunchKaufman\n\n``bkfact!`` is the same as :func:`bkfact`, but saves space by overwriting the input ``A``, instead of creating a copy.\n```\n\"\"\"\nbkfact!\n\ndoc\"\"\"\n    ^(x, y)\n\nExponentiation operator.\n\"\"\"\nBase.(:(^))(x, y)\n\ndoc\"\"\"\n    ^(s, n)\n\nRepeat `n` times the string `s`. The `repeat` function is an alias to this operator.\n\n```jldoctest\njulia> \"Test \"^3\n\"Test Test Test \"\n```\n\"\"\"\nBase.(:(^))(s::AbstractString, n::Int)\n\ndoc\"\"\"\n    position(s)\n\nGet the current position of a stream.\n\"\"\"\nposition\n\ndoc\"\"\"\n    selectperm(v, k, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nReturn a partial permutation of the the vector `v`, according to the order specified by `by`, `lt` and `rev`, so that `v[output]` returns the first `k` (or range of adjacent values if `k` is a range) values of a fully sorted version of `v`. If `k` is a single index (Integer), an array of the first `k` indices is returned; if `k` is a range, an array of those indices is returned. Note that the handling of integer values for `k` is different from `select` in that it returns a vector of `k` elements instead of just the `k` th element. Also note that this is equivalent to, but more efficient than, calling `sortperm(...)[k]`\n\"\"\"\nselectperm\n\ndoc\"\"\"\n    isabspath(path::AbstractString) -> Bool\n\nDetermines whether a path is absolute (begins at the root directory).\n\"\"\"\nisabspath\n\ndoc\"\"\"\n    hex2bytes(s::ASCIIString)\n\nConvert an arbitrarily long hexadecimal string to its binary representation. Returns an `Array{UInt8,1}`, i.e. an array of bytes.\n\"\"\"\nhex2bytes\n\ndoc\"\"\"\n    isdir(path) -> Bool\n\nReturns `true` if `path` is a directory, `false` otherwise.\n\"\"\"\nisdir\n\ndoc\"\"\"\n    reinterpret(type, A)\n\nChange the type-interpretation of a block of memory. For example, `reinterpret(Float32, UInt32(7))` interprets the 4 bytes corresponding to `UInt32(7)` as a `Float32`. For arrays, this constructs an array with the same binary data as the given array, but with the specified element type.\n\"\"\"\nreinterpret\n\ndoc\"\"\"\n    squeeze(A, dims)\n\nRemove the dimensions specified by `dims` from array `A`. Elements of `dims` must be unique and within the range `1:ndims(A)`.\n\"\"\"\nsqueeze\n\ndoc\"\"\"\n    ~(x)\n\nBitwise not\n\"\"\"\n~\n\ndoc\"\"\"\n    hankelh1(nu, x)\n\nBessel function of the third kind of order `nu`, $H^{(1)}_\\nu(x)$.\n\"\"\"\nhankelh1\n\ndoc\"\"\"\n```rst\n..  hessfact(A)\n\nCompute the Hessenberg decomposition of ``A`` and return a ``Hessenberg`` object. If ``F`` is the factorization object, the unitary matrix can be accessed with ``F[:Q]`` and the Hessenberg matrix with ``F[:H]``. When ``Q`` is extracted, the resulting type is the ``HessenbergQ`` object, and may be converted to a regular matrix with :func:`full`.\n```\n\"\"\"\nhessfact\n\ndoc\"\"\"\n```rst\n..  gcdx(x,y)\n\nComputes the greatest common (positive) divisor of ``x`` and ``y`` and their B\u00e9zout coefficients, i.e. the integer coefficients ``u`` and ``v`` that satisfy :math:`ux+vy = d = gcd(x,y)`.\n\n.. doctest::\n\n   julia> gcdx(12, 42)\n   (6,-3,1)\n\n.. doctest::\n\n   julia> gcdx(240, 46)\n   (2,-9,47)\n\n.. note::\n\n   B\u00e9zout coefficients are *not* uniquely defined. ``gcdx`` returns the minimal B\u00e9zout coefficients that are computed by the extended Euclid algorithm. (Ref: D. Knuth, TAoCP, 2/e, p. 325, Algorithm X.) These coefficients ``u`` and ``v`` are minimal in the sense that :math:`|u| < |\\frac y d` and :math:`|v| < |\\frac x d`. Furthermore, the signs of ``u`` and ``v`` are chosen so that ``d`` is positive.\n```\n\"\"\"\ngcdx\n\ndoc\"\"\"\n    rem(x, y)\n    %(x, y)\n\nRemainder from Euclidean division, returning a value of the same sign as `x`, and smaller in magnitude than `y`. This value is always exact.\n\"\"\"\nrem\n\ndoc\"\"\"\n    rotl90(A)\n\nRotate matrix `A` left 90 degrees.\n\"\"\"\nrotl90(A)\n\ndoc\"\"\"\n    rotl90(A, k)\n\nRotate matrix `A` left 90 degrees an integer `k` number of times. If `k` is zero or a multiple of four, this is equivalent to a `copy`.\n\"\"\"\nrotl90(A, k)\n\ndoc\"\"\"\n    info(msg)\n\nDisplay an informational message.\nArgument `msg` is a string describing the information to be displayed.\n\"\"\"\ninfo\n\ndoc\"\"\"\n    eigmin(A)\n\nReturns the smallest eigenvalue of `A`.\n\"\"\"\neigmin\n\ndoc\"\"\"\n    acscd(x)\n\nCompute the inverse cosecant of `x`, where the output is in degrees\n\"\"\"\nacscd\n\ndoc\"\"\"\n    ltoh(x)\n\nConverts the endianness of a value from Little-endian to that used by the Host.\n\"\"\"\nltoh\n\ndoc\"\"\"\n    evalfile(path::AbstractString)\n\nLoad the file using `include`, evaluate all expressions, and return the value of the last one.\n\"\"\"\nevalfile\n\ndoc\"\"\"\n    success(command)\n\nRun a command object, constructed with backticks, and tell whether it was successful (exited with a code of 0). An exception is raised if the process cannot be started.\n\"\"\"\nsuccess\n\ndoc\"\"\"\n```rst\n..  sortperm!(ix, v, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false,] [initialized=false])\n\nLike ``sortperm``, but accepts a preallocated index vector ``ix``.  If ``initialized`` is ``false``\n(the default), ix is initialized to contain the values ``1:length(v)``.\n\nSee also :func:`sortperm`\n```\n\"\"\"\nsortperm!\n\ndoc\"\"\"\n    isodd(x::Integer) -> Bool\n\nReturns `true` if `x` is odd (that is, not divisible by 2), and `false` otherwise.\n\n```jldoctest\njulia> isodd(9)\ntrue\n\njulia> isodd(10)\nfalse\n```\n\"\"\"\nisodd\n\ndoc\"\"\"\n    normalize_string(s, normalform::Symbol)\n\nNormalize the string `s` according to one of the four \"normal\nforms\" of the Unicode standard: `normalform` can be `:NFC`,\n`:NFD`, `:NFKC`, or `:NFKD`.  Normal forms C (canonical\ncomposition) and D (canonical decomposition) convert different\nvisually identical representations of the same abstract string into\na single canonical form, with form C being more compact.  Normal\nforms KC and KD additionally canonicalize \"compatibility\nequivalents\": they convert characters that are abstractly similar\nbut visually distinct into a single canonical choice (e.g. they expand\nligatures into the individual characters), with form KC being more compact.\n\nAlternatively, finer control and additional transformations may be\nbe obtained by calling `normalize_string(s; keywords...)`, where\nany number of the following boolean keywords options (which all default\nto `false` except for `compose`) are specified:\n\n* `compose=false`: do not perform canonical composition\n* `decompose=true`: do canonical decomposition instead of canonical composition (`compose=true` is ignored if present)\n* `compat=true`: compatibility equivalents are canonicalized\n* `casefold=true`: perform Unicode case folding, e.g. for case-insensitive string comparison\n* `newline2lf=true`, `newline2ls=true`, or `newline2ps=true`: convert various newline sequences (LF, CRLF, CR, NEL) into a linefeed (LF), line-separation (LS), or paragraph-separation (PS) character, respectively\n* `stripmark=true`: strip diacritical marks (e.g. accents)\n* `stripignore=true`: strip Unicode's \"default ignorable\" characters (e.g. the soft hyphen or the left-to-right marker)\n* `stripcc=true`: strip control characters; horizontal tabs and form feeds are converted to spaces; newlines are also converted to spaces unless a newline-conversion flag was specified\n* `rejectna=true`: throw an error if unassigned code points are found\n* `stable=true`: enforce Unicode Versioning Stability\n\nFor example, NFKC corresponds to the options `compose=true, compat=true, stable=true`.\n\"\"\"\nnormalize_string\n\ndoc\"\"\"\n    cd([dir::AbstractString=homedir()])\n\nSet the current working directory.\n\"\"\"\ncd(dir::AbstractString)\n\ndoc\"\"\"\n    cd(f, [dir=homedir()])\n\nTemporarily changes the current working directory and applies function `f` before returning.\n\"\"\"\ncd(f, dir=?)\n\ndoc\"\"\"\n    hton(x)\n\nConverts the endianness of a value from that used by the Host to Network byte order (big-endian).\n\"\"\"\nhton\n\ndoc\"\"\"\n    is(x, y) -> Bool\n    ===(x,y) -> Bool\n    \u2261(x,y) -> Bool\n\nDetermine whether `x` and `y` are identical, in the sense that no program could distinguish them. Compares mutable objects by address in memory, and compares immutable objects (such as numbers) by contents at the bit level. This function is sometimes called `egal`.\n\"\"\"\nis(x,y)\n\ndoc\"\"\"\n```rst\n..  mark(s)\n\nAdd a mark at the current position of stream ``s``.  Returns the marked position.\n\nSee also :func:`unmark`, :func:`reset`, :func:`ismarked`\n```\n\"\"\"\nmark\n\ndoc\"\"\"\n    cp(src::AbstractString, dst::AbstractString; remove_destination::Bool=false, follow_symlinks::Bool=false)\n\nCopy the file, link, or directory from *src* to *dest*. `remove_destination=true` will first remove an existing `dst`.\n\nIf `follow_symlinks=false`, and `src` is a symbolic link, `dst` will be created as a symbolic link. If `follow_symlinks=true` and `src` is a symbolic link, `dst` will be a copy of the file or directory `src` refers to.\n\"\"\"\ncp\n\ndoc\"\"\"\n    bswap(n)\n\nByte-swap an integer\n\"\"\"\nbswap\n\ndoc\"\"\"\n```rst\n.. manage(manager::FooManager, pid::Int, config::WorkerConfig. op::Symbol)\n\nImplemented by cluster managers. It is called on the master process, during a worker's lifetime,\nwith appropriate ``op`` values:\n\n- with ``:register``/``:deregister`` when a worker is added / removed\n  from the Julia worker pool.\n- with ``:interrupt`` when ``interrupt(workers)`` is called. The\n  :class:`ClusterManager` should signal the appropriate worker with an\n  interrupt signal.\n- with ``:finalize`` for cleanup purposes.\n```\n\"\"\"\nmanage\n\ndoc\"\"\"\n    resize!(collection, n) -> collection\n\nResize `collection` to contain `n` elements.\nIf `n` is smaller than the current collection length, the first `n`\nelements will be retained. If `n` is larger, the new elements are not\nguaranteed to be initialized.\n\n```jldoctest\njulia> resize!([6, 5, 4, 3, 2, 1], 3)\n3-element Array{Int64,1}:\n 6\n 5\n 4\n```\n\n```jl\njulia> resize!([6, 5, 4, 3, 2, 1], 8)\n8-element Array{Int64,1}:\n 6\n 5\n 4\n 3\n 2\n 1\n 0\n 0\n```\n\"\"\"\nresize!\n\ndoc\"\"\"\n    sumabs2!(r, A)\n\nSum squared absolute values of elements of `A` over the singleton dimensions of `r`, and write results to `r`.\n\"\"\"\nsumabs2!\n\ndoc\"\"\"\n    IPv4(host::Integer) -> IPv4\n\nReturns IPv4 object from ip address formatted as Integer\n\"\"\"\nIPv4\n\ndoc\"\"\"\n    trailing_zeros(x::Integer) -> Integer\n\nNumber of zeros trailing the binary representation of `x`.\n\n```jldoctest\njulia> trailing_zeros(2)\n1\n```\n\"\"\"\ntrailing_zeros\n\ndoc\"\"\"\n    isalnum(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is alphanumeric, or whether this is true for all elements of a string. A character is classified as alphabetic if it belongs to the Unicode general category Letter or Number, i.e. a character whose category code begins with 'L' or 'N'.\n\"\"\"\nisalnum\n\ndoc\"\"\"\n    @sprintf(\"%Fmt\", args...)\n\nReturn `@printf` formatted output as string.\n\n    julia> s = @sprintf \"this is a %s %15.1f\" \"test\" 34.567;\n\n    julia> println(s)\n    this is a test            34.6\n\"\"\"\n:@sprintf\n\ndoc\"\"\"\n    tanh(x)\n\nCompute hyperbolic tangent of `x`\n\"\"\"\ntanh\n\ndoc\"\"\"\n    repr(x)\n\nCreate a string from any value using the `showall` function.\n\"\"\"\nrepr\n\ndoc\"\"\"\n    maxintfloat(T)\n\nThe largest integer losslessly representable by the given floating-point DataType `T`.\n\"\"\"\nmaxintfloat\n\ndoc\"\"\"\n    promote_shape(s1, s2)\n\nCheck two array shapes for compatibility, allowing trailing singleton dimensions, and return whichever shape has more dimensions.\n\"\"\"\npromote_shape\n\ndoc\"\"\"\n    methodswith(typ[, module or function][, showparents])\n\nReturn an array of methods with an argument of type `typ`. If optional `showparents` is `true`, also return arguments with a parent type of `typ`, excluding type `Any`.\n\nThe optional second argument restricts the search to a particular module or function.\n\"\"\"\nmethodswith\n\ndoc\"\"\"\n```rst\n..  foldr(op, v0, itr)\n\nLike :func:`reduce`, but with guaranteed right associativity. ``v0``\nwill be used exactly once.\n```\n\"\"\"\nfoldr(op, v0, itr)\n\ndoc\"\"\"\n```rst\n..  foldr(op, itr)\n\nLike ``foldr(op, v0, itr)``, but using the last element of ``itr``\nas ``v0``. In general, this cannot be used with empty collections\n(see ``reduce(op, itr)``).\n```\n\"\"\"\nfoldr(op, itr)\n\ndoc\"\"\"\n    chol(A, [LU]) -> F\n\nCompute the Cholesky factorization of a symmetric positive definite matrix `A` and return the matrix `F`. If `LU` is `Val{:U}` (Upper), `F` is of type `UpperTriangular` and `A = F'*F`. If `LU` is `Val{:L}` (Lower), `F` is of type `LowerTriangular` and `A = F*F'`. `LU` defaults to `Val{:U}`.\n\"\"\"\nchol\n\ndoc\"\"\"\n    ParseError(msg)\n\nThe expression passed to the `parse` function could not be interpreted as a valid Julia expression.\n\"\"\"\nParseError\n\ndoc\"\"\"\n    delete!(collection, key)\n\nDelete the mapping for the given key in a collection, and return the collection.\n\"\"\"\ndelete!\n\ndoc\"\"\"\n    interrupt([pids...])\n\nInterrupt the current executing task on the specified workers. This is equivalent to pressing Ctrl-C on the local machine. If no arguments are given, all workers are interrupted.\n\"\"\"\ninterrupt\n\ndoc\"\"\"\n    std(v[, region])\n\nCompute the sample standard deviation of a vector or array `v`, optionally along dimensions in `region`. The algorithm returns an estimator of the generative distribution's standard deviation under the assumption that each entry of `v` is an IID drawn from that generative distribution. This computation is equivalent to calculating `sqrt(sum((v - mean(v)).^2) / (length(v) - 1))`. Note: Julia does not ignore `NaN` values in the computation. For applications requiring the handling of missing data, the `DataArray` package is recommended.\n\"\"\"\nstd\n\ndoc\"\"\"\n    chr2ind(string, i)\n\nConvert a character index to a byte index.\n\"\"\"\nchr2ind\n\ndoc\"\"\"\n    fullname(m::Module)\n\nGet the fully-qualified name of a module as a tuple of symbols. For example, `fullname(Base.Pkg)` gives `(:Base,:Pkg)`, and `fullname(Main)` gives `()`.\n\"\"\"\nfullname\n\ndoc\"\"\"\n    isreadable(path) -> Bool\n\nReturns `true` if the current user has permission to read `path`, `false` otherwise.\n\"\"\"\nisreadable\n\ndoc\"\"\"\n    eps(T)\n\nThe distance between 1.0 and the next larger representable floating-point value of `DataType` `T`. Only floating-point types are sensible arguments.\n\"\"\"\neps(::Union{Type{BigFloat},Type{Float64},Type{Float32},Type{Float16}})\n\ndoc\"\"\"\n    eps()\n\nThe distance between 1.0 and the next larger representable floating-point value of `Float64`.\n\"\"\"\neps()\n\ndoc\"\"\"\n    eps(x)\n\nThe distance between `x` and the next larger representable floating-point value of the same `DataType` as `x`.\n\"\"\"\neps(::AbstractFloat)\n\ndoc\"\"\"\n    rem1(x,m)\n\nRemainder after division, returning in the range (0,m\\]\n\"\"\"\nrem1\n\ndoc\"\"\"\n    isalpha(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is alphabetic, or whether this is true for all elements of a string. A character is classified as alphabetic if it belongs to the Unicode general category Letter, i.e. a character whose category code begins with 'L'.\n\"\"\"\nisalpha\n\ndoc\"\"\"\n    lock(l::ReentrantLock)\n\nAssociates `l` with the current task. If `l` is already locked by a different task, waits for it to become available. The same task can acquire the lock multiple times. Each \"lock\" must be matched by an \"unlock\"\n\"\"\"\nlock\n\ndoc\"\"\"\n    transpose(A)\n\nThe transposition operator (`.'`).\n\"\"\"\ntranspose\n\ndoc\"\"\"\n    searchsortedfirst(a, x, [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nReturns the index of the first value in `a` greater than or equal to `x`, according to the specified order. Returns `length(a)+1` if `x` is greater than all values in `a`.\n\"\"\"\nsearchsortedfirst\n\ndoc\"\"\"\n    big(x)\n\nConvert a number to a maximum precision representation (typically `BigInt` or `BigFloat`). See `BigFloat` for information about some pitfalls with floating-point numbers.\n\"\"\"\nbig\n\ndoc\"\"\"\n    names(x::Module[, all=false[, imported=false]])\n\nGet an array of the names exported by a `Module`, with optionally more `Module` globals according to the additional parameters.\n\"\"\"\nnames\n\ndoc\"\"\"\n```rst\n..  quit()\n\nQuit the program indicating that the processes completed successfully. This function calls ``exit(0)`` (see :func:`exit`).\n```\n\"\"\"\nquit\n\ndoc\"\"\"\n    init_worker(manager::FooManager)\n\nCalled by cluster managers implementing custom transports. It initializes a newly launched process as a worker. Command line argument `--worker` has the effect of initializing a process as a worker using TCP/IP sockets for transport.\n\"\"\"\ninit_worker\n\ndoc\"\"\"\n    print_escaped(io, str::AbstractString, esc::AbstractString)\n\nGeneral escaping of traditional C and Unicode escape sequences, plus any characters in esc are also escaped (with a backslash).\n\"\"\"\nprint_escaped\n\ndoc\"\"\"\n    typejoin(T, S)\n\nCompute a type that contains both `T` and `S`.\n\"\"\"\ntypejoin\n\ndoc\"\"\"\n    summary(x)\n\nReturn a string giving a brief description of a value. By default returns `string(typeof(x))`. For arrays, returns strings like \"2x2 Float64 Array\".\n\"\"\"\nsummary\n\ndoc\"\"\"\n    Base64DecodePipe(istream)\n\nReturns a new read-only I/O stream, which decodes base64-encoded data read from `istream`.\n\"\"\"\nBase64DecodePipe\n\ndoc\"\"\"\n    module_parent(m::Module) -> Module\n\nGet a module's enclosing `Module`. `Main` is its own parent, as is `LastMain` after `workspace()`.\n\"\"\"\nmodule_parent\n\ndoc\"\"\"\n    airyaiprime(x)\n\nAiry function derivative $\\operatorname{Ai}'(x)$.\n\"\"\"\nairyaiprime\n\ndoc\"\"\"\n    besselh(nu, k, x)\n\nBessel function of the third kind of order `nu` (Hankel function). `k` is either 1 or 2, selecting `hankelh1` or `hankelh2`, respectively.\n\"\"\"\nbesselh\n\ndoc\"\"\"\n    prepend!(collection, items) -> collection\n\nInsert the elements of `items` to the beginning of `collection`.\n\n```jldoctest\njulia> prepend!([3],[1,2])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n```\n\"\"\"\nprepend!\n\ndoc\"\"\"\n    sum_kbn(A)\n\nReturns the sum of all array elements, using the Kahan-Babuska-Neumaier compensated summation algorithm for additional accuracy.\n\"\"\"\nsum_kbn\n\ndoc\"\"\"\n    beta(x, y)\n\nEuler integral of the first kind $\\operatorname{B}(x,y) = \\Gamma(x)\\Gamma(y)/\\Gamma(x+y)$.\n\"\"\"\nbeta\n\ndoc\"\"\"\n    eye(n)\n\n`n`-by-`n` identity matrix\n\"\"\"\neye(n::Int)\n\ndoc\"\"\"\n    eye(m, n)\n\n`m`-by-`n` identity matrix\n\"\"\"\neye(m, n)\n\ndoc\"\"\"\n    eye(A)\n\nConstructs an identity matrix of the same dimensions and type as `A`.\n\"\"\"\neye(A)\n\ndoc\"\"\"\n    diagind(M[, k])\n\nA `Range` giving the indices of the `k`th diagonal of the matrix `M`.\n\"\"\"\ndiagind\n\ndoc\"\"\"\n    include_string(code::AbstractString, [filename])\n\nLike `include`, except reads code from the given string rather than from a file. Since there is no file path involved, no path processing or fetching from node 1 is done.\n\"\"\"\ninclude_string\n\ndoc\"\"\"\n    chmod(path, mode)\n\nChange the permissions mode of `path` to `mode`. Only integer `mode`s (e.g. 0o777) are currently supported.\n\"\"\"\nchmod\n\ndoc\"\"\"\n    gamma(x)\n\nCompute the gamma function of `x`\n\"\"\"\ngamma\n\ndoc\"\"\"\n    sin(x)\n\nCompute sine of `x`, where `x` is in radians\n\"\"\"\nsin\n\ndoc\"\"\"\n```rst\n..  ordschur!(Q, T, select) -> Schur\n\nReorders the Schur factorization of a real matrix ``A=Q*T*Q'``, overwriting ``Q`` and ``T`` in the process. See :func:`ordschur`\n```\n\"\"\"\nordschur!(Q,T,select)\n\ndoc\"\"\"\n```rst\n..  ordschur!(S, select) -> Schur\n\nReorders the Schur factorization ``S`` of type ``Schur``, overwriting ``S`` in the process. See :func:`ordschur`\n```\n\"\"\"\nordschur!(S,select)\n\ndoc\"\"\"\n```rst\n..  ordschur!(S, T, Q, Z, select) -> GeneralizedSchur\n\nReorders the Generalized Schur factorization of a matrix by overwriting the matrices ``(S, T, Q, Z)`` in the process.  See :func:`ordschur`.\n```\n\"\"\"\nordschur!(S,T,Q,Z,select)\n\ndoc\"\"\"\n```rst\n..  ordschur!(GS, select) -> GeneralizedSchur\n\nReorders the Generalized Schur factorization of a Generalized Schur object by overwriting the object with the new factorization.  See :func:`ordschur`.\n```\n\"\"\"\nordschur!(::LinAlg.GeneralizedSchur,select)\n\ndoc\"\"\"\n```rst\n..  Base.compilecache(module::ByteString)\n\nCreates a precompiled cache file for module (see help for ``require``) and all of its dependencies. This can be used to reduce package load times. Cache files are stored in ``LOAD_CACHE_PATH[1]``, which defaults to ``~/.julia/lib/VERSION``. See :ref:`Module initialization and precompilation <man-modules-initialization-precompilation>` for important notes.\n```\n\"\"\"\ncompilecache\n\ndoc\"\"\"\n    clipboard() -> AbstractString\n\nReturn a string with the contents of the operating system clipboard (\"paste\").\n\"\"\"\nclipboard\n\ndoc\"\"\"\n    clipboard(x)\n\nSend a printed form of `x` to the operating system clipboard (\"copy\").\n\"\"\"\nclipboard(x)\n\ndoc\"\"\"\n    code_lowered(f, types)\n\nReturns an array of lowered ASTs for the methods matching the given generic function and type signature.\n\"\"\"\ncode_lowered\n\ndoc\"\"\"\n    nthperm(v, k)\n\nCompute the kth lexicographic permutation of a vector.\n\"\"\"\nnthperm(v,k)\n\ndoc\"\"\"\n    nthperm(p)\n\nReturn the `k` that generated permutation `p`. Note that `nthperm(nthperm([1:n], k)) == k` for `1 <= k <= factorial(n)`.\n\"\"\"\nnthperm(p)\n\ndoc\"\"\"\n    values(collection)\n\nReturn an iterator over all values in a collection. `collect(values(d))` returns an array of values.\n\"\"\"\nvalues\n\ndoc\"\"\"\n    A_mul_B!(Y, A, B) -> Y\n\nCalculates the matrix-matrix or matrix-vector product $A\u22c5B$ and stores the\nresult in `Y`, overwriting the existing value of `Y`. Note that `Y` must not\nbe aliased with either `A` or `B`.\n\n```jldoctest\njulia> A=[1.0 2.0; 3.0 4.0]; B=[1.0 1.0; 1.0 1.0]; Y = similar(B); A_mul_B!(Y, A, B);\n\njulia> Y\n2x2 Array{Float64,2}:\n 3.0  3.0\n 7.0  7.0\n```\n\"\"\"\nA_mul_B!\n\ndoc\"\"\"\n    ntuple(f::Function, n)\n\nCreate a tuple of length `n`, computing each element as `f(i)`, where `i` is the index of the element.\n\"\"\"\nntuple\n\ndoc\"\"\"\n    Ac_rdiv_Bc(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d34 / B\u1d34$\n\n\"\"\"\nAc_rdiv_Bc\n\ndoc\"\"\"\n    selectperm!(ix, v, k, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false,] [initialized=false])\n\nLike `selectperm`, but accepts a preallocated index vector `ix`. If `initialized` is `false` (the default), ix is initialized to contain the values `1:length(ix)`.\n\"\"\"\nselectperm!\n\ndoc\"\"\"\n    istaskdone(task) -> Bool\n\nTell whether a task has exited.\n\"\"\"\nistaskdone\n\ndoc\"\"\"\n    .>(x, y)\n\nElement-wise greater-than comparison operator.\n\"\"\"\nBase.(:(.>))\n\ndoc\"\"\"\n    search(string, chars, [start])\n\nSearch for the first occurrence of the given characters within the given string. The second argument may be a single character, a vector or a set of characters, a string, or a regular expression (though regular expressions are only allowed on contiguous strings, such as ASCII or UTF-8 strings). The third argument optionally specifies a starting index. The return value is a range of indexes where the matching sequence is found, such that `s[search(s,x)] == x`:\n\n`search(string, \"substring\")` = `start:end` such that `string[start:end] == \"substring\"`, or `0:-1` if unmatched.\n\n`search(string, 'c')` = `index` such that `string[index] == 'c'`, or `0` if unmatched.\n\"\"\"\nsearch\n\ndoc\"\"\"\n    remotecall_fetch(id, func, args...)\n\nPerform `fetch(remotecall(...))` in one message. Any remote exceptions are captured in a `RemoteException` and thrown.\n\"\"\"\nremotecall_fetch\n\ndoc\"\"\"\n    contains(haystack, needle)\n\nDetermine whether the second argument is a substring of the first.\n\"\"\"\ncontains\n\ndoc\"\"\"\n    flush(stream)\n\nCommit all currently buffered writes to the given stream.\n\"\"\"\nflush\n\ndoc\"\"\"\n    detach(command)\n\nMark a command object so that it will be run in a new process group, allowing it to outlive the julia process, and not have Ctrl-C interrupts passed to it.\n\"\"\"\ndetach\n\ndoc\"\"\"\n    precompile(f,args::Tuple{Vararg{Any}})\n\nCompile the given function `f` for the argument tuple (of types) `args`, but do not execute it.\n\"\"\"\nprecompile\n\ndoc\"\"\"\n```rst\n..  toc()\n\nPrint and return the time elapsed since the last :func:`tic`.\n```\n\"\"\"\ntoc\n\ndoc\"\"\"\n    asinh(x)\n\nCompute the inverse hyperbolic sine of `x`\n\"\"\"\nasinh\n\ndoc\"\"\"\n    count(p, itr) -> Integer\n\nCount the number of elements in `itr` for which predicate `p` returns `true`.\n\"\"\"\ncount\n\ndoc\"\"\"\n    atreplinit(f)\n\nRegister a one-argument function to be called before the REPL interface is initialized in interactive sessions; this is useful to customize the interface. The argument of `f` is the REPL object. This function should be called from within the `.juliarc.jl` initialization file.\n\"\"\"\natreplinit\n\ndoc\"\"\"\n    strip(string, [chars])\n\nReturn `string` with any leading and trailing whitespace removed. If `chars` (a character, or vector or set of characters) is provided, instead remove characters contained in it.\n\"\"\"\nstrip\n\ndoc\"\"\"\n    findin(a, b)\n\nReturns the indices of elements in collection `a` that appear in collection `b`\n\"\"\"\nfindin\n\ndoc\"\"\"\n    minimum(itr)\n\nReturns the smallest element in a collection.\n\"\"\"\nminimum(itr)\n\ndoc\"\"\"\n    minimum(A, dims)\n\nCompute the minimum value of an array over the given dimensions.\n\"\"\"\nminimum(A,dims)\n\ndoc\"\"\"\n    var(v[, region])\n\nCompute the sample variance of a vector or array `v`, optionally along dimensions in `region`. The algorithm will return an estimator of the generative distribution's variance under the assumption that each entry of `v` is an IID drawn from that generative distribution. This computation is equivalent to calculating `sumabs2(v - mean(v)) / (length(v) - 1)`. Note: Julia does not ignore `NaN` values in the computation. For applications requiring the handling of missing data, the `DataArray` package is recommended.\n\"\"\"\nvar\n\ndoc\"\"\"\n    lcfirst(string)\n\nReturns `string` with the first character converted to lowercase.\n\"\"\"\nlcfirst\n\ndoc\"\"\"\n```rst\n..  @code_native\n\nEvaluates the arguments to the function call, determines their types, and calls :func:`code_native` on the resulting expression.\n```\n\"\"\"\n:@code_native\n\ndoc\"\"\"\n```rst\n..  flipbits!(B::BitArray{N}) -> BitArray{N}\n\nPerforms a bitwise not operation on ``B``. See :ref:`~ operator <~>`.\n```\n\"\"\"\nflipbits!\n\ndoc\"\"\"\n    readlink(path) -> AbstractString\n\nReturns the value of a symbolic link `path`.\n\"\"\"\nreadlink\n\ndoc\"\"\"\n```rst\n..  @code_warntype\n\nEvaluates the arguments to the function call, determines their types, and calls :func:`code_warntype` on the resulting expression.\n```\n\"\"\"\n:@code_warntype\n\ndoc\"\"\"\n    deg2rad(x)\n\nConvert `x` from degrees to radians\n\"\"\"\ndeg2rad\n\ndoc\"\"\"\n    redirect_stdin([stream])\n\nLike redirect\\_stdout, but for STDIN. Note that the order of the return tuple is still (rd,wr), i.e. data to be read from STDIN, may be written to wr.\n\"\"\"\nredirect_stdin\n\ndoc\"\"\"\n```rst\n..  minmax(x, y)\n\nReturn ``(min(x,y), max(x,y))``.\nSee also: :func:`extrema` that returns ``(minimum(x), maximum(x))``\n```\n\"\"\"\nminmax\n\ndoc\"\"\"\n    mktemp([parent=tempdir()])\n\nReturns `(path, io)`, where `path` is the path of a new temporary file in `parent` and `io` is an open file object for this path.\n\"\"\"\nmktemp(?)\n\ndoc\"\"\"\n    mktemp(f::Function, [parent=tempdir()])\n\nApply the function `f` to the result of `mktemp(parent)` and remove the temporary file upon completion.\n\"\"\"\nmktemp(::Function, ?)\n\ndoc\"\"\"\n    isreadonly(stream) -> Bool\n\nDetermine whether a stream is read-only.\n\"\"\"\nisreadonly\n\ndoc\"\"\"\n```rst\n..  get_rounding(T)\n\nGet the current floating point rounding mode for type ``T``, controlling\nthe rounding of basic arithmetic functions (:func:`+`, :func:`-`,\n:func:`*`, :func:`/` and :func:`sqrt`) and type conversion.\n\nValid modes are ``RoundNearest``, ``RoundToZero``, ``RoundUp``,\n``RoundDown``, and ``RoundFromZero`` (``BigFloat`` only).\n```\n\"\"\"\nget_rounding\n\ndoc\"\"\"\n```rst\n..  code_llvm(f, types)\n\nPrints the LLVM bitcodes generated for running the method matching the given generic function and type signature to :const:`STDOUT`.\n\nAll metadata and dbg.* calls are removed from the printed bitcode. Use code_llvm_raw for the full IR.\n```\n\"\"\"\ncode_llvm\n\ndoc\"\"\"\n```rst\n..  Bidiagonal(dv, ev, isupper)\n\nConstructs an upper (``isupper=true``) or lower (``isupper=false``) bidiagonal matrix\nusing the given diagonal (``dv``) and off-diagonal (``ev``) vectors.  The result is of type ``Bidiagonal`` and provides efficient specialized linear solvers, but may be converted into a regular matrix with :func:`full`.\n```\n\"\"\"\nBidiagonal\n\ndoc\"\"\"\n    notify(condition, val=nothing; all=true, error=false)\n\nWake up tasks waiting for a condition, passing them `val`. If `all` is `true` (the default), all waiting tasks are woken, otherwise only one is. If `error` is `true`, the passed value is raised as an exception in the woken tasks.\n\"\"\"\nnotify\n\ndoc\"\"\"\n```rst\n..  sub(A, inds...)\n\nLike :func:`getindex`, but returns a view into the parent array ``A`` with the given indices instead of making a copy.  Calling :func:`getindex` or :func:`setindex!` on the returned :obj:`SubArray` computes the indices to the parent array on the fly without checking bounds.\n```\n\"\"\"\nsub\n\ndoc\"\"\"\n```rst\n..  cholfact!(A [,LU=:U [,pivot=Val{false}]][;tol=-1.0]) -> Cholesky\n\n``cholfact!`` is the same as :func:`cholfact`, but saves space by overwriting the input ``A``, instead of creating a copy. ``cholfact!`` can also reuse the symbolic factorization from a different matrix ``F`` with the same structure when used as: ``cholfact!(F::CholmodFactor, A)``.\n```\n\"\"\"\ncholfact!\n\ndoc\"\"\"\n    expanduser(path::AbstractString) -> AbstractString\n\nOn Unix systems, replace a tilde character at the start of a path with the current user's home directory.\n\"\"\"\nexpanduser\n\ndoc\"\"\"\n    haskey(collection, key) -> Bool\n\nDetermine whether a collection has a mapping for a given key.\n\"\"\"\nhaskey\n\ndoc\"\"\"\n    cot(x)\n\nCompute the cotangent of `x`, where `x` is in radians\n\"\"\"\ncot\n\ndoc\"\"\"\n```rst\n..  get(x)\n\nAttempt to access the value of the ``Nullable`` object, ``x``. Returns the\nvalue if it is present; otherwise, throws a ``NullException``.\n```\n\"\"\"\nget(x)\n\ndoc\"\"\"\n```rst\n..  get(x, y)\n\nAttempt to access the value of the ``Nullable{T}`` object, ``x``. Returns\nthe value if it is present; otherwise, returns ``convert(T, y)``.\n```\n\"\"\"\nget(x,y)\n\ndoc\"\"\"\n```rst\n..  get(collection, key, default)\n\nReturn the value stored for the given key, or the given default value if no mapping for the key is present.\n```\n\"\"\"\nget(collection,key,default)\n\ndoc\"\"\"\n```rst\n..  get(f::Function, collection, key)\n\nReturn the value stored for the given key, or if no mapping for the key is present, return ``f()``.  Use :func:`get!` to also store the default value in the dictionary.\n\nThis is intended to be called using ``do`` block syntax::\n\n  get(dict, key) do\n      # default value calculated here\n      time()\n  end\n```\n\"\"\"\nget\n\ndoc\"\"\"\n    .!=(x, y)\n    .\u2260(x,y)\n\nElement-wise not-equals comparison operator.\n\"\"\"\nBase.(:(.!=))\n\ndoc\"\"\"\n```rst\n..  lufact!(A) -> LU\n\n``lufact!`` is the same as :func:`lufact`, but saves space by overwriting the input ``A``, instead of creating a copy.  For sparse ``A`` the ``nzval`` field is not overwritten but the index fields, ``colptr`` and ``rowval`` are decremented in place, converting from 1-based indices to 0-based indices.\n```\n\"\"\"\nlufact!\n\ndoc\"\"\"\n    IOBuffer() -> IOBuffer\n\nCreate an in-memory I/O stream.\n\"\"\"\nIOBuffer()\n\ndoc\"\"\"\n    IOBuffer(size::Int)\n\nCreate a fixed size IOBuffer. The buffer will not grow dynamically.\n\"\"\"\nIOBuffer(size::Int)\n\ndoc\"\"\"\n    IOBuffer(string)\n\nCreate a read-only IOBuffer on the data underlying the given string\n\"\"\"\nIOBuffer(::AbstractString)\n\ndoc\"\"\"\n    IOBuffer([data,],[readable,writable,[maxsize]])\n\nCreate an IOBuffer, which may optionally operate on a pre-existing array. If the readable/writable arguments are given, they restrict whether or not the buffer may be read from or written to respectively. By default the buffer is readable but not writable. The last argument optionally specifies a size beyond which the buffer may not be grown.\n\"\"\"\nIOBuffer(data=?)\n\ndoc\"\"\"\n    findmax(itr) -> (x, index)\n\nReturns the maximum element and its index.\n\"\"\"\nfindmax(itr)\n\ndoc\"\"\"\n    findmax(A, dims) -> (maxval, index)\n\nFor an array input, returns the value and index of the maximum over the given dimensions.\n\"\"\"\nfindmax(A,dims)\n\ndoc\"\"\"\n    tempname()\n\nGenerate a unique temporary file path.\n\"\"\"\ntempname\n\ndoc\"\"\"\n    poll_fd(fd, timeout_s::Real; readable=false, writable=false)\n\nMonitor a file descriptor `fd` for changes in the read or write availability, and with a timeout given by `timeout_s` seconds.\n\nThe keyword arguments determine which of read and/or write status should be monitored; at least one of them must be set to `true`.\n\nThe returned value is an object with boolean fields `readable`, `writable`, and `timedout`, giving the result of the polling.\n\"\"\"\npoll_fd\n\ndoc\"\"\"\n    prevpow2(n)\n\nThe largest power of two not greater than `n`. Returns 0 for `n==0`, and returns `-prevpow2(-n)` for negative arguments.\n\"\"\"\nprevpow2\n\ndoc\"\"\"\n```rst\n..  code_warntype(f, types)\n\nDisplays lowered and type-inferred ASTs for the methods matching the given generic function and type signature. The ASTs are annotated in such a way as to cause \"non-leaf\" types to be emphasized (if color is available, displayed in red). This serves as a warning of potential type instability. Not all non-leaf types are particularly problematic for performance, so the results need to be used judiciously. See :ref:`man-code-warntype` for more information.\n```\n\"\"\"\ncode_warntype\n\ndoc\"\"\"\n    broadcast!_function(f)\n\nLike `broadcast_function`, but for `broadcast!`.\n\"\"\"\nbroadcast!_function\n\ndoc\"\"\"\n    with_rounding(f::Function, T, mode)\n\nChange the rounding mode of floating point type `T` for the duration of `f`. It is logically equivalent to:\n\n    old = get_rounding(T)\n    set_rounding(T, mode)\n    f()\n    set_rounding(T, old)\n\nSee `get_rounding` for available rounding modes.\n\"\"\"\nwith_rounding\n\ndoc\"\"\"\n    sleep(seconds)\n\nBlock the current task for a specified number of seconds. The minimum sleep time is 1 millisecond or input of `0.001`.\n\"\"\"\nsleep\n\ndoc\"\"\"\n    Mmap.sync!(array)\n\nForces synchronization between the in-memory version of a memory-mapped `Array` or `BitArray` and the on-disk version.\n\"\"\"\nMmap.sync!\n\ndoc\"\"\"\n    csc(x)\n\nCompute the cosecant of `x`, where `x` is in radians\n\"\"\"\ncsc\n\ndoc\"\"\"\n    hash(x[, h::UInt])\n\nCompute an integer hash code such that `isequal(x,y)` implies `hash(x)==hash(y)`. The optional second argument `h` is a hash code to be mixed with the result.\n\nNew types should implement the 2-argument form, typically by calling the 2-argument `hash` method recursively in order to mix hashes of the contents with each other (and with `h`). Typically, any type that implements `hash` should also implement its own `==` (hence `isequal`) to guarantee the property mentioned above.\n\"\"\"\nhash\n\ndoc\"\"\"\n    atan2(y, x)\n\nCompute the inverse tangent of `y/x`, using the signs of both `x` and `y` to determine the quadrant of the return value.\n\"\"\"\natan2\n\ndoc\"\"\"\n    send(socket::UDPSocket, host::IPv4, port::Integer, msg)\n\nSend `msg` over `socket` to `host:port`.\n\"\"\"\nsend\n\ndoc\"\"\"\n    atanh(x)\n\nCompute the inverse hyperbolic tangent of `x`\n\"\"\"\natanh\n\ndoc\"\"\"\n    deleteat!(collection, index)\n\nRemove the item at the given `index` and return the modified `collection`.\nSubsequent items are shifted to fill the resulting gap.\n\n```jldoctest\njulia> deleteat!([6, 5, 4, 3, 2, 1], 2)\n5-element Array{Int64,1}:\n 6\n 4\n 3\n 2\n 1\n```\n\"\"\"\ndeleteat!(collection, index::Integer)\n\ndoc\"\"\"\n    deleteat!(collection, itr)\n\nRemove the items at the indices given by `itr`, and return the modified `collection`.\nSubsequent items are shifted to fill the resulting gap. `itr` must be sorted and unique.\n\n```jldoctest\njulia> deleteat!([6, 5, 4, 3, 2, 1], 1:2:5)\n3-element Array{Int64,1}:\n 5\n 3\n 1\n\njulia> deleteat!([6, 5, 4, 3, 2, 1], (2, 2))\nERROR: ArgumentError: indices must be unique and sorted\n in deleteat! at array.jl:546\n```\n\"\"\"\ndeleteat!(collection, itr)\n\ndoc\"\"\"\n```rst\n..  schurfact!(A)\n\nComputes the Schur factorization of ``A``, overwriting ``A`` in the process. See :func:`schurfact`\n```\n\"\"\"\nschurfact!\n\ndoc\"\"\"\n    read(stream, type)\n\nRead a value of the given type from a stream, in canonical binary representation.\n\"\"\"\nread(stream, t)\n\ndoc\"\"\"\n    read(stream, type, dims)\n\nRead a series of values of the given type from a stream, in canonical binary representation. `dims` is either a tuple or a series of integer arguments specifying the size of `Array` to return.\n\"\"\"\nread(stream, t, dims)\n\ndoc\"\"\"\n    @timev\n\nThis is a verbose version of the `@time` macro. It first prints the same information as `@time`, then any non-zero memory allocation counters, and then returns the value of the expression.\n\"\"\"\n:@timev\n\ndoc\"\"\"\n    isopen(object) -> Bool\n\nDetermine whether an object - such as a stream, timer, or mmap -- is not yet closed. Once an object is closed, it will never produce a new event. However, a closed stream may still have data to read in its buffer, use `eof` to check for the ability to read data. Use `poll_fd` to be notified when a stream might be writable or readable.\n\"\"\"\nisopen\n\ndoc\"\"\"\n    shift!(collection) -> item\n\nRemove the first `item` from `collection`.\n\n```jldoctest\njulia> A = [1, 2, 3, 4, 5, 6]\n6-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n\njulia> shift!(A)\n1\n\njulia> A\n5-element Array{Int64,1}:\n 2\n 3\n 4\n 5\n 6\n```\n\"\"\"\nshift!\n\ndoc\"\"\"\n    @fetch\n\nEquivalent to `fetch(@spawn expr)`.\n\"\"\"\n:@fetch\n\ndoc\"\"\"\n    spawn(command)\n\nRun a command object asynchronously, returning the resulting `Process` object.\n\"\"\"\nspawn\n\ndoc\"\"\"\n    isposdef(A) -> Bool\n\nTest whether a matrix is positive definite.\n\"\"\"\nisposdef\n\ndoc\"\"\"\n    nextind(str, i)\n\nGet the next valid string index after `i`. Returns a value greater than `endof(str)` at or after the end of the string.\n\"\"\"\nnextind\n\ndoc\"\"\"\n    >>>(x, n)\n\nUnsigned right bit shift operator.\n\"\"\"\nBase.(:(>>>))\n\ndoc\"\"\"\n    @timed\n\nA macro to execute an expression, and return the value of the expression, elapsed time, total bytes allocated, garbage collection time, and an object with various memory allocation counters.\n\"\"\"\n:@timed\n\ndoc\"\"\"\n    code_native(f, types)\n\nPrints the native assembly instructions generated for running the method matching the given generic function and type signature to `STDOUT`.\n\"\"\"\ncode_native\n\ndoc\"\"\"\n    isgeneric(f::Function) -> Bool\n\nDetermine whether a `Function` is generic.\n\"\"\"\nisgeneric\n\ndoc\"\"\"\n    symdiff(s1,s2...)\n\nConstruct the symmetric difference of elements in the passed in sets or arrays. Maintains order with arrays.\n\"\"\"\nsymdiff\n\ndoc\"\"\"\n    histrange(v, n)\n\nCompute *nice* bin ranges for the edges of a histogram of `v`, using approximately `n` bins. The resulting step sizes will be 1, 2 or 5 multiplied by a power of 10. Note: Julia does not ignore `NaN` values in the computation.\n\"\"\"\nhistrange\n\ndoc\"\"\"\n    eta(x)\n\nDirichlet eta function $\\eta(s) = \\sum^\\infty_{n=1}(-)^{n-1}/n^{s}$.\n\"\"\"\neta\n\ndoc\"\"\"\n    isdefined([object,] index | symbol)\n\nTests whether an assignable location is defined. The arguments can be an array and index, a composite object and field name (as a symbol), or a module and a symbol. With a single symbol argument, tests whether a global variable with that name is defined in `current_module()`.\n\"\"\"\nisdefined\n\ndoc\"\"\"\n    cotd(x)\n\nCompute the cotangent of `x`, where `x` is in degrees\n\"\"\"\ncotd\n\ndoc\"\"\"\n    dec(n, [pad])\n\nConvert an integer to a decimal string, optionally specifying a number of digits to pad to.\n\"\"\"\ndec\n\ndoc\"\"\"\n    wait([x])\n\nBlock the current task until some event occurs, depending on the type\nof the argument:\n\n* `RemoteRef`: Wait for a value to become available for the specified remote reference.\n* `Channel`: Wait for a value to be appended to the channel.\n* `Condition`: Wait for `notify` on a condition.\n* `Process`: Wait for a process or process chain to exit. The `exitcode` field of a process can be used to determine success or failure.\n* `Task`: Wait for a `Task` to finish, returning its result value. If the task fails with an exception, the exception is propagated (re-thrown in the task that called `wait`).\n* `RawFD`: Wait for changes on a file descriptor (see `poll_fd` for keyword arguments and return code)\n\nIf no argument is passed, the task blocks for an undefined period. If the task's\nstate is set to `:waiting`, it can only be restarted by an explicit call to\n`schedule` or `yieldto`. If the task's state is `:runnable`, it might be\nrestarted unpredictably.\n\nOften `wait` is called within a `while` loop to ensure a waited-for condition\nis met before proceeding.\n\"\"\"\nwait\n\ndoc\"\"\"\n```rst\n..  shuffle([rng,] v)\n\nReturn a randomly permuted copy of ``v``. The optional ``rng`` argument\nspecifies a random number generator, see :ref:`Random Numbers\n<random-numbers>`.\n```\n\"\"\"\nshuffle\n\ndoc\"\"\"\n```rst\n..  Dict([itr])\n\n``Dict{K,V}()`` constructs a hash table with keys of type ``K`` and values of type ``V``.\n\nGiven a single iterable argument, constructs a :obj:`Dict` whose key-value pairs\nare taken from 2-tuples ``(key,value)`` generated by the argument.\n\n.. doctest::\n\n  julia> Dict([(\"A\", 1), (\"B\", 2)])\n  Dict{ASCIIString,Int64} with 2 entries:\n    \"B\" => 2\n    \"A\" => 1\n\nAlternatively, a sequence of pair arguments may be passed.\n\n.. doctest::\n\n  julia> Dict(\"A\"=>1, \"B\"=>2)\n  Dict{ASCIIString,Int64} with 2 entries:\n    \"B\" => 2\n    \"A\" => 1\n```\n\"\"\"\nDict\n\ndoc\"\"\"\n    sqrt(x)\n\nReturn $\\sqrt{x}$. Throws `DomainError` for negative `Real` arguments. Use complex negative arguments instead.  The prefix operator `\u221a` is equivalent to `sqrt`.\n\"\"\"\nsqrt\n\ndoc\"\"\"\n    atexit(f)\n\nRegister a zero-argument function `f()` to be called at process exit.\n`atexit()` hooks are called in last in first out (LIFO) order and run before object finalizers.\n\"\"\"\natexit\n\ndoc\"\"\"\n    besselk(nu, x)\n\nModified Bessel function of the second kind of order `nu`, $K_\\nu(x)$.\n\"\"\"\nbesselk\n\ndoc\"\"\"\n    readchomp(x)\n\nRead the entirety of `x` as a string but remove trailing newlines. Equivalent to `chomp(readall(x))`.\n\"\"\"\nreadchomp\n\ndoc\"\"\"\n```rst\n..  pinv(M[, tol])\n\nComputes the Moore-Penrose pseudoinverse.\n\nFor matrices ``M`` with floating point elements, it is convenient to compute\nthe pseudoinverse by inverting only singular values above a given threshold,\n``tol``.\n\nThe optimal choice of ``tol`` varies both with the value of ``M``\nand the intended application of the pseudoinverse. The default value of\n``tol`` is ``eps(real(float(one(eltype(M)))))*maximum(size(A))``,\nwhich is essentially machine epsilon for the real part of a matrix element\nmultiplied by the larger matrix dimension.\nFor inverting dense ill-conditioned matrices in a least-squares sense,\n``tol = sqrt(eps(real(float(one(eltype(M))))))`` is recommended.\n\nFor more information, see [issue8859]_, [B96]_, [S84]_, [KY88]_.\n\n.. [issue8859] Issue 8859, \"Fix least squares\", https://github.com/JuliaLang/julia/pull/8859\n.. [B96] \u00c5ke Bj\u00f6rck, \"Numerical Methods for Least Squares Problems\",\n   SIAM Press, Philadelphia, 1996, \"Other Titles in Applied Mathematics\", Vol. 51.\n   `doi:10.1137/1.9781611971484 <http://epubs.siam.org/doi/book/10.1137/1.9781611971484>`_\n.. [S84] G. W. Stewart, \"Rank Degeneracy\", SIAM Journal on\n   Scientific and Statistical Computing, 5(2), 1984, 403-413.\n   `doi:10.1137/0905030 <http://epubs.siam.org/doi/abs/10.1137/0905030>`_\n.. [KY88] Konstantinos Konstantinides and Kung Yao, \"Statistical analysis\n   of effective singular values in matrix rank determination\", IEEE\n   Transactions on Acoustics, Speech and Signal Processing, 36(5), 1988,\n   757-763.\n   `doi:10.1109/29.1585 <http://dx.doi.org/10.1109/29.1585>`_\n```\n\"\"\"\npinv\n\ndoc\"\"\"\n    asecd(x)\n\nCompute the inverse secant of `x`, where the output is in degrees\n\"\"\"\nasecd\n\ndoc\"\"\"\n    readbytes!(stream, b::Vector{UInt8}, nb=length(b); all=true)\n\nRead at most `nb` bytes from the stream into `b`, returning the number of bytes read (increasing the size of `b` as needed).\n\nSee `readbytes` for a description of the `all` option.\n\"\"\"\nreadbytes!\n\ndoc\"\"\"\n    basename(path::AbstractString) -> AbstractString\n\nGet the file name part of a path.\n\"\"\"\nbasename\n\ndoc\"\"\"\n    ArgumentError(msg)\n\nThe parameters to a function call do not match a valid signature.\nArgument `msg` is a descriptive error string.\n\"\"\"\nArgumentError\n\ndoc\"\"\"\n    atand(x)\n\nCompute the inverse tangent of `x`, where the output is in degrees\n\"\"\"\natand\n\ndoc\"\"\"\n    KeyError(key)\n\nAn indexing operation into an `Associative` (`Dict`) or `Set` like object tried to access or delete a non-existent element.\n\"\"\"\nKeyError\n\ndoc\"\"\"\n    isdiag(A) -> Bool\n\nTest whether a matrix is diagonal.\n\"\"\"\nisdiag\n\ndoc\"\"\"\n    !==(x, y)\n    \u2262(x,y)\n\nEquivalent to `!is(x, y)`\n\"\"\"\nBase.(:(!==))\n\ndoc\"\"\"\n    trailing_ones(x::Integer) -> Integer\n\nNumber of ones trailing the binary representation of `x`.\n\n```jldoctest\njulia> trailing_ones(3)\n2\n```\n\"\"\"\ntrailing_ones\n\ndoc\"\"\"\n    repeated(x[, n::Int])\n\nAn iterator that generates the value `x` forever. If `n` is specified, generates `x` that many times (equivalent to `take(repeated(x), n)`).\n\"\"\"\nrepeated\n\ndoc\"\"\"\n    isnumber(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is numeric, or whether this is true for all elements of a string. A character is classified as numeric if it belongs to the Unicode general category Number, i.e. a character whose category code begins with 'N'.\n\"\"\"\nisnumber\n\ndoc\"\"\"\n    similar(array, [element_type=eltype(array)], [dims=size(array)])\n\nCreate an uninitialized mutable array with the given element type and size,\nbased upon the given source array. The second and third arguments are both\noptional, defaulting to the given array's `eltype` and `size`. The dimensions\nmay be specified either as a single tuple argument or as a series of integer\narguments.\n\nCustom AbstractArray subtypes may choose which specific array type is\nbest-suited to return for the given element type and dimensionality. If they do\nnot specialize this method, the default is an `Array(element_type, dims...)`.\n\nFor example, `similar(1:10, 1, 4)` returns an uninitialized `Array{Int,2}` since\nranges are neither mutable nor support 2 dimensions:\n\n    julia> similar(1:10, 1, 4)\n    1x4 Array{Int64,2}:\n     4419743872  4374413872  4419743888  0\n\nConversely, `similar(trues(10,10), 2)` returns an uninitialized `BitVector`\nwith two elements since `BitArray`s are both mutable and can support\n1-dimensional arrays:\n\n    julia> similar(trues(10,10), 2)\n    2-element BitArray{1}:\n     false\n     false\n\nSince `BitArray`s can only store elements of type `Bool`, however, if you\nrequest a different element type it will create a regular `Array` instead:\n\n    julia> similar(falses(10), Float64, 2, 4)\n    2x4 Array{Float64,2}:\n     2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314\n     2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314\n\"\"\"\nsimilar\n\ndoc\"\"\"\n    copy(x)\n\nCreate a shallow copy of `x`: the outer structure is copied, but not all internal values. For example, copying an array produces a new array with identically-same elements as the original.\n\"\"\"\ncopy\n\ndoc\"\"\"\n    isempty(collection) -> Bool\n\nDetermine whether a collection is empty (has no elements).\n\n```jldoctest\njulia> isempty([])\ntrue\n\njulia> isempty([1 2 3])\nfalse\n```\n\"\"\"\nisempty\n\ndoc\"\"\"\n    sumabs!(r, A)\n\nSum absolute values of elements of `A` over the singleton dimensions of `r`, and write results to `r`.\n\"\"\"\nsumabs!\n\ndoc\"\"\"\n    abs(x)\n\nAbsolute value of `x`\n\"\"\"\nabs\n\ndoc\"\"\"\n    Sys.set_process_title(title::AbstractString)\n\nSet the process title. No-op on some operating systems. (not exported)\n\"\"\"\nSys.set_process_title\n\ndoc\"\"\"\n    htol(x)\n\nConverts the endianness of a value from that used by the Host to Little-endian.\n\"\"\"\nhtol\n\ndoc\"\"\"\n    ctime(file)\n\nEquivalent to `stat(file).ctime`\n\"\"\"\nctime\n\ndoc\"\"\"\n    normpath(path::AbstractString) -> AbstractString\n\nNormalize a path, removing \".\" and \"..\" entries.\n\"\"\"\nnormpath\n\ndoc\"\"\"\n```rst\n..  unmark(s)\n\nRemove a mark from stream ``s``.\nReturns ``true`` if the stream was marked, ``false`` otherwise.\n\nSee also :func:`mark`, :func:`reset`, :func:`ismarked`\n```\n\"\"\"\nunmark\n\ndoc\"\"\"\n    module_name(m::Module) -> Symbol\n\nGet the name of a `Module` as a `Symbol`.\n\"\"\"\nmodule_name\n\ndoc\"\"\"\n```rst\n..  reset(s)\n\nReset a stream ``s`` to a previously marked position, and remove the mark.\nReturns the previously marked position.\nThrows an error if the stream is not marked.\n\nSee also :func:`mark`, :func:`unmark`, :func:`ismarked`\n```\n\"\"\"\nreset\n\ndoc\"\"\"\n    modf(x)\n\nReturn a tuple (fpart,ipart) of the fractional and integral parts of a number. Both parts have the same sign as the argument.\n\"\"\"\nmodf\n\ndoc\"\"\"\n    hex2num(str)\n\nConvert a hexadecimal string to the floating point number it represents\n\"\"\"\nhex2num\n\ndoc\"\"\"\n    ndims(A) -> Integer\n\nReturns the number of dimensions of `A`\n\"\"\"\nndims\n\ndoc\"\"\"\n    @osx\n\nGiven `@osx? a : b`, do `a` on OS X and `b` elsewhere. See documentation for Handling Platform Variations in the Calling C and Fortran Code section of the manual.\n\"\"\"\n:@osx\n\ndoc\"\"\"\n    ishermitian(A) -> Bool\n\nTest whether a matrix is Hermitian.\n\"\"\"\nishermitian\n\ndoc\"\"\"\n    sind(x)\n\nCompute sine of `x`, where `x` is in degrees.\n\"\"\"\nsind\n\ndoc\"\"\"\n    iseltype(A,T)\n\nTests whether `A` or its elements are of type `T`.\n\"\"\"\niseltype\n\ndoc\"\"\"\n    symperm(A, p)\n\nReturn the symmetric permutation of `A`, which is `A[p,p]`. `A` should be symmetric and sparse, where only the upper triangular part of the matrix is stored. This algorithm ignores the lower triangular part of the matrix. Only the upper triangular part of the result is returned as well.\n\"\"\"\nsymperm\n\ndoc\"\"\"\n    min(x, y, ...)\n\nReturn the minimum of the arguments. Operates elementwise over arrays.\n\"\"\"\nmin\n\ndoc\"\"\"\n    isready(r::RemoteRef)\n\nDetermine whether a `RemoteRef` has a value stored to it. Note that this function can cause race conditions, since by the time you receive its result it may no longer be true. It is recommended that this function only be used on a `RemoteRef` that is assigned once.\n\nIf the argument `RemoteRef` is owned by a different node, this call will block to wait for the answer. It is recommended to wait for `r` in a separate task instead, or to use a local `RemoteRef` as a proxy:\n\n    rr = RemoteRef()\n    @async put!(rr, remotecall_fetch(p, long_computation))\n    isready(rr)  # will not block\n\"\"\"\nisready\n\ndoc\"\"\"\n    InexactError()\n\nType conversion cannot be done exactly.\n\"\"\"\nInexactError\n\ndoc\"\"\"\n    @sync\n\nWait until all dynamically-enclosed uses of `@async`, `@spawn`, `@spawnat` and `@parallel` are complete. All exceptions thrown by enclosed async operations are collected and thrown as a `CompositeException`.\n\"\"\"\n:@sync\n\ndoc\"\"\"\n    typemax(T)\n\nThe highest value representable by the given (real) numeric `DataType`.\n\"\"\"\ntypemax\n\ndoc\"\"\"\n    all(itr) -> Bool\n\nTest whether all elements of a boolean collection are `true`.\n\"\"\"\nall(itr)\n\ndoc\"\"\"\n    all(A, dims)\n\nTest whether all values along the given dimensions of an array are `true`.\n\"\"\"\nall(A::AbstractArray, dims)\n\ndoc\"\"\"\n    all(p, itr) -> Bool\n\nDetermine whether predicate `p` returns `true` for all elements of `itr`.\n\n```jldoctest\njulia> all(i->(4<=i<=6), [4,5,6])\ntrue\n```\n\"\"\"\nall(p, itr)\n\ndoc\"\"\"\n    bind(socket::Union{UDPSocket, TCPSocket}, host::IPv4, port::Integer)\n\nBind `socket` to the given `host:port`. Note that `0.0.0.0` will listen on all devices.\n\"\"\"\nbind\n\ndoc\"\"\"\n    cld(x, y)\n\nSmallest integer larger than or equal to `x/y`.\n\"\"\"\ncld\n\ndoc\"\"\"\n    issetuid(path) -> Bool\n\nReturns `true` if `path` has the setuid flag set, `false` otherwise.\n\"\"\"\nissetuid\n\ndoc\"\"\"\n```rst\n..  scale!(A, b)\n           scale!(b, A)\n\nScale an array ``A`` by a scalar ``b``, similar to :func:`scale` but\noverwriting ``A`` in-place.\n\nIf ``A`` is a matrix and ``b`` is a vector, then ``scale!(A,b)``\nscales each column ``i`` of ``A`` by ``b[i]`` (similar to\n``A*diagm(b)``), while ``scale!(b,A)`` scales each row ``i`` of\n``A`` by ``b[i]`` (similar to ``diagm(b)*A``), again operating in-place\non ``A``.\n```\n\"\"\"\nscale!\n\ndoc\"\"\"\n    DomainError()\n\nThe arguments to a function or constructor are outside the valid domain.\n\"\"\"\nDomainError\n\ndoc\"\"\"\n    issym(A) -> Bool\n\nTest whether a matrix is symmetric.\n\"\"\"\nissym\n\ndoc\"\"\"\n```rst\n..  svds(A; nsv=6, ritzvec=true, tol=0.0, maxiter=1000) -> (left_sv, s, right_sv, nconv, niter, nmult, resid)\n\n``svds`` computes largest singular values ``s`` of ``A`` using Lanczos or Arnoldi iterations.\nUses :func:`eigs` underneath.\n\nInputs are:\n\n* ``A``: Linear operator. It can either subtype of ``AbstractArray`` (e.g., sparse matrix) or duck typed. For duck typing ``A`` has to support ``size(A)``, ``eltype(A)``, ``A * vector`` and ``A' * vector``.\n* ``nsv``: Number of singular values.\n* ``ritzvec``: Whether to return the left and right singular vectors ``left_sv`` and ``right_sv``, default is ``true``. If ``false`` the singular vectors are omitted from the output.\n* ``tol``: tolerance, see :func:`eigs`.\n* ``maxiter``: Maximum number of iterations, see :func:`eigs`.\n\n**Example**::\n\n   X = sprand(10, 5, 0.2)\n   svds(X, nsv = 2)\n```\n\"\"\"\nsvds\n\ndoc\"\"\"\n    acosh(x)\n\nCompute the inverse hyperbolic cosine of `x`\n\"\"\"\nacosh\n\ndoc\"\"\"\n```rst\n..  IntSet([itr])\n\nConstruct a sorted set of positive ``Int``\\ s generated by the given iterable\nobject, or an empty set. Implemented as a bit string, and therefore designed\nfor dense integer sets. Only ``Int``\\ s greater than 0 can be stored. If the\nset will be sparse (for example holding a few very large integers), use\n:obj:`Set` instead.\n```\n\"\"\"\nIntSet\n\ndoc\"\"\"\n    Task(func)\n\nCreate a `Task` (i.e. thread, or coroutine) to execute the given function (which must be callable with no arguments). The task exits when this function returns.\n\"\"\"\nTask\n\ndoc\"\"\"\n    pushdisplay(d::Display)\n\nPushes a new display `d` on top of the global display-backend stack. Calling `display(x)` or `display(mime, x)` will display `x` on the topmost compatible backend in the stack (i.e., the topmost backend that does not throw a `MethodError`).\n\"\"\"\npushdisplay\n\ndoc\"\"\"\n    randexp!([rng], A::Array{Float64,N})\n\nFill the array `A` with random numbers following the exponential distribution (with scale 1).\n\"\"\"\nrandexp!\n\ndoc\"\"\"\n    prevind(str, i)\n\nGet the previous valid string index before `i`. Returns a value less than `1` at the beginning of the string.\n\"\"\"\nprevind\n\ndoc\"\"\"\n    setenv(command, env; dir=working_dir)\n\nSet environment variables to use when running the given `command`. `env` is either a dictionary mapping strings to strings, an array of strings of the form `\"var=val\"`, or zero or more `\"var\"=>val` pair arguments. In order to modify (rather than replace) the existing environment, create `env` by `copy(ENV)` and then setting `env[\"var\"]=val` as desired, or use `withenv`.\n\nThe `dir` keyword argument can be used to specify a working directory for the command.\n\"\"\"\nsetenv\n\ndoc\"\"\"\n    invperm(v)\n\nReturn the inverse permutation of v.\n\"\"\"\ninvperm\n\ndoc\"\"\"\n    lowercase(string)\n\nReturns `string` with all characters converted to lowercase.\n\"\"\"\nlowercase\n\ndoc\"\"\"\n    produce(value)\n\nSend the given value to the last `consume` call, switching to the consumer task. If the next `consume` call passes any values, they are returned by `produce`.\n\"\"\"\nproduce\n\ndoc\"\"\"\n    StackOverflowError()\n\nThe function call grew beyond the size of the call stack. This usually happens when a call recurses infinitely.\n\"\"\"\nStackOverflowError\n\ndoc\"\"\"\n    acsch(x)\n\nCompute the inverse hyperbolic cosecant of `x`\n\"\"\"\nacsch\n\ndoc\"\"\"\n    process_running(p::Process)\n\nDetermine whether a process is currently running.\n\"\"\"\nprocess_running\n\ndoc\"\"\"\n```rst\n..  BigInt(x)\n\nCreate an arbitrary precision integer. ``x`` may be an ``Int`` (or anything\nthat can be converted to an ``Int``).  The usual mathematical operators are\ndefined for this type, and results are promoted to a ``BigInt``.\n\nInstances can be constructed from strings via :func:`parse`, or using the\n``big`` string literal.\n```\n\"\"\"\nBigInt\n\ndoc\"\"\"\n    rsearch(string, chars, [start])\n\nSimilar to `search`, but returning the last occurrence of the given characters within the given string, searching in reverse from `start`.\n\"\"\"\nrsearch\n\ndoc\"\"\"\n    isdirpath(path::AbstractString) -> Bool\n\nDetermines whether a path refers to a directory (for example, ends with a path separator).\n\"\"\"\nisdirpath\n\ndoc\"\"\"\n```rst\n..  in(item, collection) -> Bool\n           \u2208(item,collection) -> Bool\n           \u220b(collection,item) -> Bool\n           \u2209(item,collection) -> Bool\n           \u220c(collection,item) -> Bool\n\nDetermine whether an item is in the given collection, in the sense that it is\n``==`` to one of the values generated by iterating over the collection.\nSome collections need a slightly different definition; for example :obj:`Set`\\ s\ncheck whether the item :func:`isequal` to one of the elements. :obj:`Dict`\\ s look for\n``(key,value)`` pairs, and the key is compared using :func:`isequal`. To test\nfor the presence of a key in a dictionary, use :func:`haskey` or\n``k in keys(dict)``.\n```\n\"\"\"\nBase.in\n\ndoc\"\"\"\n    isblockdev(path) -> Bool\n\nReturns `true` if `path` is a block device, `false` otherwise.\n\"\"\"\nisblockdev\n\ndoc\"\"\"\n    ==(x, y)\n\nGeneric equality operator, giving a single `Bool` result. Falls back to `===`. Should be implemented for all types with a notion of equality, based on the abstract value that an instance represents. For example, all numeric types are compared by numeric value, ignoring type. Strings are compared as sequences of characters, ignoring encoding.\n\nFollows IEEE semantics for floating-point numbers.\n\nCollections should generally implement `==` by calling `==` recursively on all contents.\n\nNew numeric types should implement this function for two arguments of the new type, and handle comparison to other types via promotion rules where possible.\n\"\"\"\nBase.(:(==))\n\ndoc\"\"\"\n    mapreducedim(f, op, A, dims[, initial])\n\nEvaluates to the same as `reducedim(op, map(f, A), dims, f(initial))`, but is generally faster because the intermediate array is avoided.\n\"\"\"\nmapreducedim\n\ndoc\"\"\"\n    seekstart(s)\n\nSeek a stream to its beginning.\n\"\"\"\nseekstart\n\ndoc\"\"\"\n    nfields(x::DataType) -> Int\n\nGet the number of fields of a `DataType`.\n\"\"\"\nnfields\n\ndoc\"\"\"\n```rst\n..  toq()\n\nReturn, but do not print, the time elapsed since the last :func:`tic`.\n```\n\"\"\"\ntoq\n\ndoc\"\"\"\n    writemime(stream, mime, x)\n\nThe `display` functions ultimately call `writemime` in order to write an object `x` as a given `mime` type to a given I/O `stream` (usually a memory buffer), if possible. In order to provide a rich multimedia representation of a user-defined type `T`, it is only necessary to define a new `writemime` method for `T`, via: `writemime(stream, ::MIME\"mime\", x::T) = ...`, where `mime` is a MIME-type string and the function body calls `write` (or similar) to write that representation of `x` to `stream`. (Note that the `MIME\"\"` notation only supports literal strings; to construct `MIME` types in a more flexible manner use `MIME{symbol(\"\")}`.)\n\nFor example, if you define a `MyImage` type and know how to write it to a PNG file, you could define a function `writemime(stream, ::MIME\"image/png\", x::MyImage) = ...` to allow your images to be displayed on any PNG-capable `Display` (such as IJulia). As usual, be sure to `import Base.writemime` in order to add new methods to the built-in Julia function `writemime`.\n\nTechnically, the `MIME\"mime\"` macro defines a singleton type for the given `mime` string, which allows us to exploit Julia's dispatch mechanisms in determining how to display objects of any given type.\n\"\"\"\nwritemime\n\ndoc\"\"\"\n    mean!(r, v)\n\nCompute the mean of `v` over the singleton dimensions of `r`, and write results to `r`.\n\"\"\"\nmean!\n\ndoc\"\"\"\n    join(strings, delim, [last])\n\nJoin an array of `strings` into a single string, inserting the given delimiter between adjacent strings. If `last` is given, it will be used instead of `delim` between the last two strings. For example, `join([\"apples\", \"bananas\", \"pineapples\"], \", \", \" and \") == \"apples, bananas and pineapples\"`.\n\n`strings` can be any iterable over elements `x` which are convertible to strings via `print(io::IOBuffer, x)`.\n\"\"\"\njoin\n\ndoc\"\"\"\n    linreg(x, y) -> a, b\n\nPerform linear regression. Returns `a` and `b` such that `a + b*x` is the closest\nstraight line to the given points `(x, y)`, i.e., such that the squared error\nbetween `y` and `a + b*x` is minimized.\n\n**Example**:\n\n    using PyPlot\n    x = [1.0:12.0;]\n    y = [5.5, 6.3, 7.6, 8.8, 10.9, 11.79, 13.48, 15.02, 17.77, 20.81, 22.0, 22.99]\n    a, b = linreg(x, y)          # Linear regression\n    plot(x, y, \"o\")              # Plot (x, y) points\n    plot(x, [a+b*i for i in x])  # Plot line determined by linear regression\n\"\"\"\nlinreg(x,y)\n\ndoc\"\"\"\n    linreg(x, y, w)\n\nWeighted least-squares linear regression.\n\"\"\"\nlinreg(x,y,w)\n\ndoc\"\"\"\n    polygamma(m, x)\n\nCompute the polygamma function of order `m` of argument `x` (the `(m+1)th` derivative of the logarithm of `gamma(x)`)\n\"\"\"\npolygamma\n\ndoc\"\"\"\n    isless(x, y)\n\nTest whether `x` is less than `y`, according to a canonical total order. Values that are normally unordered, such as `NaN`, are ordered in an arbitrary but consistent fashion. This is the default comparison used by `sort`. Non-numeric types with a canonical total order should implement this function. Numeric types only need to implement it if they have special values such as `NaN`.\n\"\"\"\nisless\n\ndoc\"\"\"\n    expm1(x)\n\nAccurately compute $e^x-1$.\n\"\"\"\nexpm1\n\ndoc\"\"\"\n    showerror(io, e)\n\nShow a descriptive representation of an exception object.\n\"\"\"\nshowerror\n\ndoc\"\"\"\n    setdiff(s1,s2)\n\nConstruct the set of elements in `s1` but not `s2`. Maintains order with arrays. Note that both arguments must be collections, and both will be iterated over. In particular, `setdiff(set,element)` where `element` is a potential member of `set`, will not work in general.\n\"\"\"\nsetdiff\n\ndoc\"\"\"\n    airyai(x)\n\nAiry function $\\operatorname{Ai}(x)$.\n\"\"\"\nairyai\n\ndoc\"\"\"\n    error(message::AbstractString)\n\nRaise an `ErrorException` with the given message\n\"\"\"\nerror\n\ndoc\"\"\"\n    less(file::AbstractString, [line])\n\nShow a file using the default pager, optionally providing a starting line number. Returns to the julia prompt when you quit the pager.\n\"\"\"\nless(f::AbstractString, ?)\n\ndoc\"\"\"\n    less(function, [types])\n\nShow the definition of a function using the default pager, optionally specifying a tuple of types to indicate which method to see.\n\"\"\"\nless(m::Method, ?)\n\ndoc\"\"\"\n```rst\n..  sqrtm(A)\n\nIf ``A`` has no negative real eigenvalues, compute the principal matrix square root of ``A``, that is the unique matrix :math:`X` with eigenvalues having positive real part such that :math:`X^2 = A`. Otherwise, a nonprincipal square root is returned.\n\nIf ``A`` is symmetric or Hermitian, its eigendecomposition (:func:`eigfact`) is used to compute the square root. Otherwise, the square root is determined by means of the Bj\u00f6rck-Hammarling method, which computes the complex Schur form (:func:`schur`) and then the complex square root of the triangular factor.\n\n.. [BH83] \u00c5ke Bj\u00f6rck and Sven Hammarling, \"A Schur method for the square root\n   of a matrix\", Linear Algebra and its Applications, 52-53, 1983, 127-140.\n   `doi:10.1016/0024-3795(83)80010-X <http://dx.doi.org/10.1016/0024-3795(83)80010-X>`_\n```\n\"\"\"\nsqrtm\n\ndoc\"\"\"\n    conv(u,v)\n\nConvolution of two vectors. Uses FFT algorithm.\n\"\"\"\nconv\n\ndoc\"\"\"\n    unsafe_store!(p::Ptr{T},x,i::Integer)\n\nStore a value of type `T` to the address of the ith element (1-indexed) starting at `p`. This is equivalent to the C expression `p[i-1] = x`.\n\nThe `unsafe` prefix on this function indicates that no validation is performed on the pointer `p` to ensure that it is valid. Incorrect usage may corrupt or segfault your program, in the same manner as C.\n\"\"\"\nunsafe_store!\n\ndoc\"\"\"\n```rst\n..  expm(A)\n\nCompute the matrix exponential of ``A``, defined by\n\n.. math::\n\n   e^A = \\sum_{n=0}^{\\infty} \\frac{A^n}{n!}.\n\nFor symmetric or Hermitian ``A``, an eigendecomposition (:func:`eigfact`) is used, otherwise the scaling and squaring algorithm (see [H05]_) is chosen.\n\n.. [H05] Nicholas J. Higham, \"The squaring and scaling method for the matrix\n   exponential revisited\", SIAM Journal on Matrix Analysis and Applications,\n   26(4), 2005, 1179-1193.\n   `doi:10.1137/090768539 <http://dx.doi.org/10.1137/090768539>`_\n```\n\"\"\"\nexpm\n\ndoc\"\"\"\n```rst\n..  hessfact!(A)\n\n``hessfact!`` is the same as :func:`hessfact`, but saves space by overwriting the input ``A``, instead of creating a copy.\n```\n\"\"\"\nhessfact!\n\ndoc\"\"\"\n    Sys.get_process_title()\n\nGet the process title. On some systems, will always return empty string. (not exported)\n\"\"\"\nSys.get_process_title\n\ndoc\"\"\"\n    readcsv(source, [T::Type]; options...)\n\nEquivalent to `readdlm` with `delim` set to comma.\n\"\"\"\nreadcsv\n\ndoc\"\"\"\n    current_module() -> Module\n\nGet the *dynamically* current `Module`, which is the `Module` code is currently being read from. In general, this is not the same as the module containing the call to this function.\n\"\"\"\ncurrent_module\n\ndoc\"\"\"\n    erfcx(x)\n\nCompute the scaled complementary error function of `x`,\ndefined by $e^{x^2} \\operatorname{erfc}(x)$.  Note\nalso that $\\operatorname{erfcx}(-ix)$ computes the\nFaddeeva function $w(x)$.\n\"\"\"\nerfcx\n\ndoc\"\"\"\n    UndefVarError(var::Symbol)\n\nA symbol in the current scope is not defined.\n\"\"\"\nUndefVarError\n\ndoc\"\"\"\n    gc()\n\nPerform garbage collection. This should not generally be used.\n\"\"\"\ngc\n\ndoc\"\"\"\n    iscntrl(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is a control character, or whether this is true for all elements of a string. Control characters are the non-printing characters of the Latin-1 subset of Unicode.\n\"\"\"\niscntrl\n\ndoc\"\"\"\n    hist!(counts, v, e) -> e, counts\n\nCompute the histogram of `v`, using a vector/range `e` as the edges for the bins. This function writes the resultant counts to a pre-allocated array `counts`.\n\"\"\"\nhist!\n\ndoc\"\"\"\n    minimum!(r, A)\n\nCompute the minimum value of `A` over the singleton dimensions of `r`, and write results to `r`.\n\"\"\"\nminimum!\n\ndoc\"\"\"\n    diagm(v[, k])\n\nConstruct a diagonal matrix and place `v` on the `k`th diagonal.\n\"\"\"\ndiagm\n\ndoc\"\"\"\n    .-(x, y)\n\nElement-wise subtraction operator.\n\"\"\"\nBase.(:(.-))\n\ndoc\"\"\"\n    imag(z)\n\nReturn the imaginary part of the complex number `z`\n\"\"\"\nimag\n\ndoc\"\"\"\n    unsafe_trunc(T, x)\n\n`unsafe_trunc(T, x)` returns the nearest integral value of type `T` whose absolute value is less than or equal to `x`. If the value is not representable by `T`, an arbitrary value will be returned.\n\"\"\"\nunsafe_trunc\n\ndoc\"\"\"\n    parent(A)\n\nReturns the \"parent array\" of an array view type (e.g., `SubArray`), or the array itself if it is not a view\n\"\"\"\nparent\n\ndoc\"\"\"\n    <(x, y)\n\nLess-than comparison operator. New numeric types should implement this function for two arguments of the new type. Because of the behavior of floating-point NaN values, `<` implements a partial order. Types with a canonical partial order should implement `<`, and types with a canonical total order should implement `isless`.\n\"\"\"\nBase.(:(<))\n\ndoc\"\"\"\n    EnvHash() -> EnvHash\n\nA singleton of this type provides a hash table interface to environment variables.\n\"\"\"\nEnvHash\n\ndoc\"\"\"\n```rst\n..  method_exists(f, Tuple type) -> Bool\n\nDetermine whether the given generic function has a method matching the given :obj:`Tuple` of argument types.\n\n.. doctest::\n\n   julia> method_exists(length, Tuple{Array})\n   true\n```\n\"\"\"\nmethod_exists\n\ndoc\"\"\"\n    nextpow(a, x)\n\nThe smallest `a^n` not less than `x`, where `n` is a non-negative integer. `a` must be greater than 1, and `x` must be greater than 0.\n\"\"\"\nnextpow\n\ndoc\"\"\"\n    rad2deg(x)\n\nConvert `x` from radians to degrees\n\"\"\"\nrad2deg\n\ndoc\"\"\"\n    gc_enable(on::Bool)\n\nControl whether garbage collection is enabled using a boolean argument (`true` for enabled, `false` for disabled). Returns previous GC state. Disabling garbage collection should be used only with extreme caution, as it can cause memory use to grow without bound.\n\"\"\"\ngc_enable\n\ndoc\"\"\"\n    sub2ind(dims, i, j, k...) -> index\n\nThe inverse of `ind2sub`, returns the linear index corresponding to the provided subscripts\n\"\"\"\nsub2ind\n\ndoc\"\"\"\n    isperm(v) -> Bool\n\nReturns `true` if `v` is a valid permutation.\n\"\"\"\nisperm\n\ndoc\"\"\"\n    super(T::DataType)\n\nReturn the supertype of DataType `T`.\n\"\"\"\nsuper\n\ndoc\"\"\"\n    readline(stream=STDIN)\n\nRead a single line of text, including a trailing newline character (if one is reached before the end of the input), from the given `stream` (defaults to `STDIN`),\n\"\"\"\nreadline\n\ndoc\"\"\"\n    atan(x)\n\nCompute the inverse tangent of `x`, where the output is in radians\n\"\"\"\natan\n\ndoc\"\"\"\n    logabsdet(M)\n\nLog of absolute value of determinant of real matrix. Equivalent to `(log(abs(det(M))), sign(det(M)))`, but may provide increased accuracy and/or speed.\n\"\"\"\nlogabsdet\n\ndoc\"\"\"\n    joinpath(parts...) -> AbstractString\n\nJoin path components into a full path. If some argument is an absolute path, then prior components are dropped.\n\"\"\"\njoinpath\n\ndoc\"\"\"\n    get_bigfloat_precision()\n\nGet the precision (in bits) currently used for `BigFloat` arithmetic.\n\"\"\"\nget_bigfloat_precision\n\ndoc\"\"\"\n    homedir() -> AbstractString\n\nReturn the current user's home directory.\n\"\"\"\nhomedir\n\ndoc\"\"\"\n    count_zeros(x::Integer) -> Integer\n\nNumber of zeros in the binary representation of `x`.\n\n```jldoctest\njulia> count_zeros(Int32(2 ^ 16 - 1))\n16\n```\n\"\"\"\ncount_zeros\n\ndoc\"\"\"\n    isinf(f) -> Bool\n\nTest whether a number is infinite\n\"\"\"\nisinf\n\ndoc\"\"\"\n    @fetchfrom\n\nEquivalent to `fetch(@spawnat p expr)`.\n\"\"\"\n:@fetchfrom\n\ndoc\"\"\"\n    secd(x)\n\nCompute the secant of `x`, where `x` is in degrees\n\"\"\"\nsecd\n\ndoc\"\"\"\n    varm(v, m)\n\nCompute the sample variance of a vector `v` with known mean `m`. Note: Julia does not ignore `NaN` values in the computation.\n\"\"\"\nvarm\n\ndoc\"\"\"\n    OverflowError()\n\nThe result of an expression is too large for the specified type and will cause a wraparound.\n\"\"\"\nOverflowError\n\ndoc\"\"\"\n    redirect_stderr([stream])\n\nLike redirect\\_stdout, but for STDERR\n\"\"\"\nredirect_stderr\n\ndoc\"\"\"\n    ctranspose!(dest,src)\n\nConjugate transpose array `src` and store the result in the preallocated array `dest`, which should have a size corresponding to `(size(src,2),size(src,1))`. No in-place transposition is supported and unexpected results will happen if `src` and `dest` have overlapping memory regions.\n\"\"\"\nctranspose!\n\ndoc\"\"\"\n    object_id(x)\n\nGet a unique integer id for `x`. `object_id(x)==object_id(y)` if and only if `is(x,y)`.\n\"\"\"\nobject_id\n\ndoc\"\"\"\n```rst\n..  norm(A, [p])\n\nCompute the ``p``-norm of a vector or the operator norm of a matrix ``A``, defaulting to the ``p=2``-norm.\n\nFor vectors, ``p`` can assume any numeric value (even though not all values produce a mathematically valid vector norm). In particular, ``norm(A, Inf)`` returns the largest value in ``abs(A)``, whereas ``norm(A, -Inf)`` returns the smallest.\n\nFor matrices, the matrix norm induced by the vector ``p``-norm is used, where valid values of ``p`` are ``1``, ``2``, or ``Inf``. (Note that for sparse matrices, ``p=2`` is currently not implemented.) Use :func:`vecnorm` to compute the Frobenius norm.\n```\n\"\"\"\nnorm\n\ndoc\"\"\"\n```rst\n..  print_unescaped(io, s::AbstractString)\n\nGeneral unescaping of traditional C and Unicode escape sequences. Reverse of :func:`print_escaped`.\n```\n\"\"\"\nprint_unescaped\n\ndoc\"\"\"\n    digits!(array, n, [base])\n\nFills an array of the digits of `n` in the given base. More significant digits are at higher indexes. If the array length is insufficient, the least significant digits are filled up to the array length. If the array length is excessive, the excess portion is filled with zeros.\n\"\"\"\ndigits!\n\ndoc\"\"\"\n    MethodError(f, args)\n\nA method with the required type signature does not exist in the given generic function.\n\"\"\"\nMethodError\n\ndoc\"\"\"\n    cat(dims, A...)\n\nConcatenate the input arrays along the specified dimensions in the iterable `dims`. For dimensions not in `dims`, all input arrays should have the same size, which will also be the size of the output array along that dimension. For dimensions in `dims`, the size of the output array is the sum of the sizes of the input arrays along that dimension. If `dims` is a single number, the different arrays are tightly stacked along that dimension. If `dims` is an iterable containing several dimensions, this allows one to construct block diagonal matrices and their higher-dimensional analogues by simultaneously increasing several dimensions for every new input array and putting zero blocks elsewhere. For example, `cat([1,2], matrices...)` builds a block diagonal matrix, i.e. a block matrix with `matrices[1]`, `matrices[2]`, ... as diagonal blocks and matching zero blocks away from the diagonal.\n\"\"\"\ncat\n\ndoc\"\"\"\n```rst\n..  factorial(n)\n\nFactorial of ``n``.  If ``n`` is an :obj:`Integer`, the factorial\nis computed as an integer (promoted to at least 64 bits).  Note\nthat this may overflow if ``n`` is not small, but you can use\n``factorial(big(n))`` to compute the result exactly in arbitrary\nprecision.  If ``n`` is not an ``Integer``, ``factorial(n)`` is\nequivalent to :func:`gamma(n+1) <gamma>`.\n```\n\"\"\"\nfactorial(n)\n\ndoc\"\"\"\n```rst\n..  factorial(n,k)\n\nCompute ``factorial(n)/factorial(k)``\n```\n\"\"\"\nfactorial(n,k)\n\ndoc\"\"\"\n    bitrand([rng], [dims...])\n\nGenerate a `BitArray` of random boolean values.\n\"\"\"\nbitrand\n\ndoc\"\"\"\n```rst\n..  randcycle([rng,] n)\n\nConstruct a random cyclic permutation of length ``n``. The optional ``rng``\nargument specifies a random number generator, see :ref:`Random Numbers\n<random-numbers>`.\n```\n\"\"\"\nrandcycle\n\ndoc\"\"\"\n    leading_zeros(x::Integer) -> Integer\n\nNumber of zeros leading the binary representation of `x`.\n\n```jldoctest\njulia> leading_zeros(Int32(1))\n31\n```\n\"\"\"\nleading_zeros\n\ndoc\"\"\"\n    hankelh2(nu, x)\n\nBessel function of the third kind of order `nu`, $H^{(2)}_\\nu(x)$.\n\"\"\"\nhankelh2\n\ndoc\"\"\"\n    lexcmp(x, y)\n\nCompare `x` and `y` lexicographically and return -1, 0, or 1 depending on whether `x` is less than, equal to, or greater than `y`, respectively. This function should be defined for lexicographically comparable types, and `lexless` will call `lexcmp` by default.\n\"\"\"\nlexcmp\n\ndoc\"\"\"\n    inf(f)\n\nReturns positive infinity of the floating point type `f` or of the same floating point type as `f`\n\"\"\"\ninf\n\ndoc\"\"\"\n    isupper(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is an uppercase letter, or whether this is true for all elements of a string. A character is classified as uppercase if it belongs to Unicode category Lu, Letter: Uppercase, or Lt, Letter: Titlecase.\n\"\"\"\nisupper\n\ndoc\"\"\"\n    pointer_to_array(pointer, dims[, take_ownership::Bool])\n\nWrap a native pointer as a Julia Array object. The pointer element type determines the array element type. `own` optionally specifies whether Julia should take ownership of the memory, calling `free` on the pointer when the array is no longer referenced.\n\"\"\"\npointer_to_array\n\ndoc\"\"\"\n    show(x)\n\nWrite an informative text representation of a value to the current output stream. New types should overload `show(io, x)` where the first argument is a stream. The representation used by `show` generally includes Julia-specific formatting and type information.\n\"\"\"\nshow\n\ndoc\"\"\"\n    @allocated\n\nA macro to evaluate an expression, discarding the resulting value, instead returning the total number of bytes allocated during evaluation of the expression. Note: the expression is evaluated inside a local function, instead of the current context, in order to eliminate the effects of compilation, however, there still may be some allocations due to JIT compilation. This also makes the results inconsistent with the `@time` macros, which do not try to adjust for the effects of compilation.\n\"\"\"\n:@allocated\n\ndoc\"\"\"\n    Array(dims)\n\n`Array{T}(dims)` constructs an uninitialized dense array with element type `T`. `dims` may be a tuple or a series of integer arguments. The syntax `Array(T, dims)` is also available, but deprecated.\n\"\"\"\nArray\n\ndoc\"\"\"\n    isreal(x) -> Bool\n\nTest whether `x` or all its elements are numerically equal to some real number\n\"\"\"\nisreal\n\ndoc\"\"\"\n    randsubseq(A, p) -> Vector\n\nReturn a vector consisting of a random subsequence of the given array `A`, where each element of `A` is included (in order) with independent probability `p`. (Complexity is linear in `p*length(A)`, so this function is efficient even if `p` is small and `A` is large.) Technically, this process is known as \"Bernoulli sampling\" of `A`.\n\"\"\"\nrandsubseq\n\ndoc\"\"\"\n    issubtype(type1, type2)\n\nReturn `true` if and only if all values of `type1` are also of `type2`. Can also be written using the `<:` infix operator as `type1 <: type2`.\n\"\"\"\nissubtype(type1, type2)\n\ndoc\"\"\"\n    finalizer(x, function)\n\nRegister a function `f(x)` to be called when there are no program-accessible references to `x`. The behavior of this function is unpredictable if `x` is of a bits type.\n\"\"\"\nfinalizer\n\ndoc\"\"\"\n    nextprod([k_1,k_2,...], n)\n\nNext integer not less than `n` that can be written as $\\prod k_i^{p_i}$ for integers $p_1$, $p_2$, etc.\n\"\"\"\nnextprod\n\ndoc\"\"\"\n    <<(x, n)\n\nLeft bit shift operator.\n\"\"\"\nBase.(:(<<))\n\ndoc\"\"\"\n    csch(x)\n\nCompute the hyperbolic cosecant of `x`\n\"\"\"\ncsch\n\ndoc\"\"\"\n    isequal(x, y)\n\nSimilar to `==`, except treats all floating-point `NaN` values as equal to each other, and treats `-0.0` as unequal to `0.0`. The default implementation of `isequal` calls `==`, so if you have a type that doesn't have these floating-point subtleties then you probably only need to define `==`.\n\n`isequal` is the comparison function used by hash tables (`Dict`). `isequal(x,y)` must imply that `hash(x) == hash(y)`.\n\nThis typically means that if you define your own `==` function then you must define a corresponding `hash` (and vice versa). Collections typically implement `isequal` by calling `isequal` recursively on all contents.\n\nScalar types generally do not need to implement `isequal` separate from `==`, unless they represent floating-point numbers amenable to a more efficient implementation than that provided as a generic fallback (based on `isnan`, `signbit`, and `==`).\n\"\"\"\nisequal\n\ndoc\"\"\"\n    lyap(A, C)\n\nComputes the solution `X` to the continuous Lyapunov equation `AX + XA' + C = 0`, where no eigenvalue of `A` has a zero real part and no two eigenvalues are negative complex conjugates of each other.\n\"\"\"\nlyap\n\ndoc\"\"\"\n    condskeel(M, [x, p])\n\n$$\\kappa_S(M, p) & = \\left\\Vert \\left\\vert M \\right\\vert \\left\\vert M^{-1} \\right\\vert  \\right\\Vert_p \\\\\n\\kappa_S(M, x, p) & = \\left\\Vert \\left\\vert M \\right\\vert \\left\\vert M^{-1} \\right\\vert \\left\\vert x \\right\\vert \\right\\Vert_p$$\n\nSkeel condition number $\\kappa_S$ of the matrix `M`, optionally with respect to\nthe vector `x`, as computed using the operator `p`-norm. `p` is `Inf` by\ndefault, if not provided. Valid values for `p` are `1`, `2`, or `Inf`.\n\nThis quantity is also known in the literature as the Bauer condition number,\nrelative condition number, or componentwise relative condition number.\n\"\"\"\ncondskeel\n\ndoc\"\"\"\n    sec(x)\n\nCompute the secant of `x`, where `x` is in radians\n\"\"\"\nsec\n\ndoc\"\"\"\n    recv(socket::UDPSocket)\n\nRead a UDP packet from the specified socket, and return the bytes received. This call blocks.\n\"\"\"\nrecv\n\ndoc\"\"\"\n    acoth(x)\n\nCompute the inverse hyperbolic cotangent of `x`\n\"\"\"\nacoth\n\ndoc\"\"\"\n    det(M)\n\nMatrix determinant\n\"\"\"\ndet\n\ndoc\"\"\"\n    TypeError(func::Symbol, context::AbstractString, expected::Type, got)\n\nA type assertion failure, or calling an intrinsic function with an incorrect argument type.\n\"\"\"\nTypeError\n\ndoc\"\"\"\n    A_rdiv_Bt(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A / B\u1d40$\n\"\"\"\nA_rdiv_Bt\n\ndoc\"\"\"\n    pwd() -> AbstractString\n\nGet the current working directory.\n\"\"\"\npwd\n\ndoc\"\"\"\n    getipaddr() -> AbstractString\n\nGet the IP address of the local machine, as a string of the form \"x.x.x.x\".\n\"\"\"\ngetipaddr\n\ndoc\"\"\"\n    uppercase(string)\n\nReturns `string` with all characters converted to uppercase.\n\"\"\"\nuppercase\n\ndoc\"\"\"\n    cosd(x)\n\nCompute cosine of `x`, where `x` is in degrees\n\"\"\"\ncosd\n\ndoc\"\"\"\n    cycle(iter)\n\nAn iterator that cycles through `iter` forever.\n\"\"\"\ncycle\n\ndoc\"\"\"\n    put!(RemoteRef, value)\n\nStore a value to a remote reference. Implements \"shared queue of length 1\" semantics: if a value is already present, blocks until the value is removed with `take!`. Returns its first argument.\n\"\"\"\nput!(::RemoteRef, value)\n\ndoc\"\"\"\n    put!(Channel, value)\n\nAppends an item to the channel. Blocks if the channel is full.\n\"\"\"\nput!(::Channel, value)\n\ndoc\"\"\"\n    operm(file)\n\nLike uperm but gets the permissions for people who neither own the file nor are a member of the group owning the file\n\"\"\"\noperm\n\ndoc\"\"\"\n```rst\n..  cumsum(A, [dim])\n\nCumulative sum along a dimension ``dim`` (defaults to 1).\nSee also :func:`cumsum!` to use a preallocated output array,\nboth for performance and to control the precision of the\noutput (e.g. to avoid overflow).\n```\n\"\"\"\ncumsum\n\ndoc\"\"\"\n    rmprocs(pids...)\n\nRemoves the specified workers.\n\"\"\"\nrmprocs\n\ndoc\"\"\"\n    rpad(string, n, p)\n\nMake a string at least `n` columns wide when printed, by padding on the right with copies of `p`.\n\"\"\"\nrpad\n\ndoc\"\"\"\n    setfield!(value, name::Symbol, x)\n\nAssign `x` to a named field in `value` of composite type. The syntax `a.b = c` calls `setfield!(a, :b, c)`, and the syntax `a.(b) = c` calls `setfield!(a, b, c)`.\n\"\"\"\nsetfield!\n\ndoc\"\"\"\n    @printf([io::IOStream], \"%Fmt\", args...)\n\nPrint `args` using C `printf()` style format specification string. Optionally, an `IOStream` may be passed as the first argument to redirect output.\n\"\"\"\n:@printf\n\ndoc\"\"\"\n    rstrip(string, [chars])\n\nReturn `string` with any trailing whitespace removed. If `chars` (a character, or vector or set of characters) is provided, instead remove characters contained in it.\n\"\"\"\nrstrip\n\ndoc\"\"\"\n    countlines(io,[eol::Char])\n\nRead `io` until the end of the stream/file and count the number of lines. To specify a file pass the filename as the first argument. EOL markers other than '\\\\n' are supported by passing them as the second argument.\n\"\"\"\ncountlines\n\ndoc\"\"\"\n    *(A, B)\n\nMatrix multiplication\n\"\"\"\nBase.(:(*))(::AbstractMatrix, ::AbstractMatrix)\n\ndoc\"\"\"\n```rst\n..  \\\\(A, B)\n\nMatrix division using a polyalgorithm. For input matrices ``A`` and ``B``, the result ``X`` is such that ``A*X == B`` when ``A`` is square.  The solver that is used depends upon the structure of ``A``.  A direct solver is used for upper or lower triangular ``A``.  For Hermitian ``A`` (equivalent to symmetric ``A`` for non-complex ``A``) the ``BunchKaufman`` factorization is used.  Otherwise an LU factorization is used. For rectangular ``A`` the result is the minimum-norm least squares solution computed by a pivoted QR factorization of ``A`` and a rank estimate of ``A`` based on the R factor.\n\nWhen ``A`` is sparse, a similar polyalgorithm is used. For indefinite matrices, the ``LDLt`` factorization does not use pivoting during the numerical factorization and therefore the procedure can fail even for invertible matrices.\n```\n\"\"\"\nBase.(:(\\))(A,B)\n\ndoc\"\"\"\n```rst\n..  .\\\\(x, y)\n\nElement-wise left division operator.\n```\n\"\"\"\nBase.(:(.\\))(x,y)\n\ndoc\"\"\"\n```rst\n..  \\\\(x, y)\n\nLeft division operator: multiplication of ``y`` by the inverse of ``x`` on the left.\nGives floating-point results for integer arguments.\n```\n\"\"\"\nBase.(:(\\))(x::Number,y::Number)\n\n\ndoc\"\"\"\n    *(x, y...)\n\nMultiplication operator. `x*y*z*...` calls this function with all arguments, i.e.\n`*(x, y, z, ...)`.\n\"\"\"\nBase.(:(*))(x, y...)\n\ndoc\"\"\"\n    *(s, t)\n\nConcatenate strings. The `*` operator is an alias to this function.\n\n```jldoctest\njulia> \"Hello \" * \"world\"\n\"Hello world\"\n```\n\"\"\"\nBase.(:(*))(s::AbstractString, t::AbstractString)\n\ndoc\"\"\"\n```rst\n..  complement!(s)\n\nMutates :obj:`IntSet` ``s`` into its set-complement.\n```\n\"\"\"\ncomplement!\n\ndoc\"\"\"\n```rst\n..  slice(A, inds...)\n\nReturns a view of array ``A`` with the given indices like :func:`sub`, but drops all dimensions indexed with scalars.\n```\n\"\"\"\nslice\n\ndoc\"\"\"\n    time()\n\nGet the system time in seconds since the epoch, with fairly high (typically, microsecond) resolution.\n\"\"\"\ntime()\n\ndoc\"\"\"\n    procs()\n\nReturns a list of all process identifiers.\n\"\"\"\nprocs\n\ndoc\"\"\"\n    procs(S::SharedArray)\n\nGet the vector of processes that have mapped the shared array\n\"\"\"\nprocs(::SharedArray)\n\ndoc\"\"\"\n    mod(x, y)\n\nModulus after division, returning in the range \\[0,`y`), if `y` is positive, or (`y`,0\\] if `y` is negative.\n\"\"\"\nmod\n\ndoc\"\"\"\n    trues(dims)\n\nCreate a `BitArray` with all values set to `true`\n\"\"\"\ntrues\n\ndoc\"\"\"\n    qr(A [,pivot=Val{false}][;thin=true]) -> Q, R, [p]\n\nCompute the (pivoted) QR factorization of `A` such that either `A = Q*R` or `A[:,p] = Q*R`. Also see `qrfact`. The default is to compute a thin factorization. Note that `R` is not extended with zeros when the full `Q` is requested.\n\"\"\"\nqr\n\ndoc\"\"\"\n    invmod(x,m)\n\nTake the inverse of `x` modulo `m`: `y` such that $xy = 1 \\pmod m$.\n\"\"\"\ninvmod\n\ndoc\"\"\"\n    TextDisplay(stream)\n\nReturns a `TextDisplay <: Display`, which can display any object as the text/plain MIME type (only), writing the text representation to the given I/O stream. (The text representation is the same as the way an object is printed in the Julia REPL.)\n\"\"\"\nTextDisplay\n\ndoc\"\"\"\n    factor(n) -> Dict\n\nCompute the prime factorization of an integer `n`. Returns a dictionary. The\nkeys of the dictionary correspond to the factors, and hence are of the same type\nas `n`. The value associated with each key indicates the number of times the\nfactor appears in the factorization.\n\n```jldoctest\njulia> factor(100) # == 2*2*5*5\nDict{Int64,Int64} with 2 entries:\n  2 => 2\n  5 => 2\n```\n\"\"\"\nfactor\n\ndoc\"\"\"\n    ismatch(r::Regex, s::AbstractString) -> Bool\n\nTest whether a string contains a match of the given regular expression.\n\"\"\"\nismatch\n\ndoc\"\"\"\n    exp(x)\n\nCompute $e^x$.\n\"\"\"\nexp\n\ndoc\"\"\"\n    with_bigfloat_precision(f::Function,precision::Integer)\n\nChange the `BigFloat` arithmetic precision (in bits) for the duration of `f`. It is logically equivalent to:\n\n    old = get_bigfloat_precision()\n    set_bigfloat_precision(precision)\n    f()\n    set_bigfloat_precision(old)\n\"\"\"\nwith_bigfloat_precision\n\ndoc\"\"\"\n    searchindex(string, substring, [start])\n\nSimilar to `search`, but return only the start index at which the substring is found, or `0` if it is not.\n\"\"\"\nsearchindex\n\ndoc\"\"\"\n    listenany(port_hint) -> (UInt16,TCPServer)\n\nCreate a `TCPServer` on any port, using hint as a starting point. Returns a tuple of the actual port that the server was created on and the server itself.\n\"\"\"\nlistenany\n\ndoc\"\"\"\n    getpid() -> Int32\n\nGet julia's process ID.\n\"\"\"\ngetpid\n\ndoc\"\"\"\n    cbrt(x)\n\nReturn $x^{1/3}$.  The prefix operator `\u221b` is equivalent to `cbrt`.\n\"\"\"\ncbrt\n\ndoc\"\"\"\n```rst\n..  Tridiagonal(dl, d, du)\n\nConstruct a tridiagonal matrix from the lower diagonal, diagonal, and upper diagonal, respectively.  The result is of type ``Tridiagonal`` and provides efficient specialized linear solvers, but may be converted into a regular matrix with :func:`full`.\n```\n\"\"\"\nTridiagonal\n\ndoc\"\"\"\n    findprev(A, i)\n\nFind the previous index <= `i` of a non-zero element of `A`, or `0` if not found.\n\"\"\"\nfindprev(A,i)\n\ndoc\"\"\"\n    findprev(predicate, A, i)\n\nFind the previous index <= `i` of an element of `A` for which `predicate` returns `true`, or `0` if not found.\n\"\"\"\nfindprev(predicate::Function,A,i)\n\ndoc\"\"\"\n    findprev(A, v, i)\n\nFind the previous index <= `i` of an element of `A` equal to `v` (using `==`), or `0` if not found.\n\"\"\"\nfindprev(A,v,i)\n\ndoc\"\"\"\n    matchall(r::Regex, s::AbstractString[, overlap::Bool=false]) -> Vector{AbstractString}\n\nReturn a vector of the matching substrings from eachmatch.\n\"\"\"\nmatchall\n\ndoc\"\"\"\n    get!(collection, key, default)\n\nReturn the value stored for the given key, or if no mapping for the key is present, store `key => default`, and return `default`.\n\"\"\"\nget!(collection,key,default)\n\ndoc\"\"\"\n    get!(f::Function, collection, key)\n\nReturn the value stored for the given key, or if no mapping for the key is present, store `key => f()`, and return `f()`.\n\nThis is intended to be called using `do` block syntax:\n\n    get!(dict, key) do\n        # default value calculated here\n        time()\n    end\n\"\"\"\nget!(f::Function,collection,key)\n\ndoc\"\"\"\n    inv(M)\n\nMatrix inverse\n\"\"\"\ninv\n\ndoc\"\"\"\n    mod1(x,m)\n\nModulus after division, returning in the range (0,m\\]\n\"\"\"\nmod1\n\ndoc\"\"\"\n    @assert cond [text]\n\nThrow an `AssertionError` if `cond` is `false`. Preferred syntax for writing assertions.\nMessage `text` is optionally displayed upon assertion failure.\n\"\"\"\n:@assert\n\ndoc\"\"\"\n    intersect!(s1, s2)\n\nIntersects sets `s1` and `s2` and overwrites the set `s1` with the result. If needed, `s1` will be expanded to the size of `s2`.\n\"\"\"\nintersect!\n\ndoc\"\"\"\n    listen([addr,]port) -> TCPServer\n\nListen on port on the address specified by `addr`. By default this listens on localhost only. To listen on all interfaces pass `IPv4(0)` or `IPv6(0)` as appropriate.\n\"\"\"\nlisten(addr,port)\n\ndoc\"\"\"\n    listen(path) -> PipeServer\n\nCreate and listen on a Named Pipe / Domain Socket\n\"\"\"\nlisten(path)\n\ndoc\"\"\"\n    leading_ones(x::Integer) -> Integer\n\nNumber of ones leading the binary representation of `x`.\n\n```jldoctest\njulia> leading_ones(UInt32(2 ^ 32 - 2))\n31\n```\n\"\"\"\nleading_ones\n\ndoc\"\"\"\n    deserialize(stream)\n\nRead a value written by `serialize`.\n\"\"\"\ndeserialize\n\ndoc\"\"\"\n    asech(x)\n\nCompute the inverse hyperbolic secant of `x`\n\"\"\"\nasech\n\ndoc\"\"\"\n```rst\n..  ismarked(s)\n\nReturns ``true`` if stream ``s`` is marked.\n\nSee also :func:`mark`, :func:`unmark`, :func:`reset`\n```\n\"\"\"\nismarked\n\ndoc\"\"\"\n```rst\n..  first(coll)\n\nGet the first element of an iterable collection. Returns the start point of a :obj:`Range`\neven if it is empty.\n```\n\"\"\"\nfirst\n\ndoc\"\"\"\n    median!(v)\n\nLike `median`, but may overwrite the input vector.\n\"\"\"\nmedian!\n\ndoc\"\"\"\n    cumprod!(B, A, [dim])\n\nCumulative product of `A` along a dimension, storing the result in `B`. The dimension defaults to 1.\n\"\"\"\ncumprod!\n\ndoc\"\"\"\n    @linux\n\nGiven `@linux? a : b`, do `a` on Linux and `b` elsewhere. See documentation for Handling Platform Variations in the Calling C and Fortran Code section of the manual.\n\"\"\"\n:@linux\n\ndoc\"\"\"\n```rst\n..  complement(s)\n\nReturns the set-complement of :obj:`IntSet` ``s``.\n```\n\"\"\"\ncomplement\n\ndoc\"\"\"\n    rethrow([e])\n\nThrow an object without changing the current exception backtrace. The default argument is the current exception (if called within a `catch` block).\n\"\"\"\nrethrow\n\ndoc\"\"\"\n    reprmime(mime, x)\n\nReturns an `AbstractString` or `Vector{UInt8}` containing the representation of `x` in the requested `mime` type, as written by `writemime` (throwing a `MethodError` if no appropriate `writemime` is available). An `AbstractString` is returned for MIME types with textual representations (such as `\"text/html\"` or `\"application/postscript\"`), whereas binary data is returned as `Vector{UInt8}`. (The function `istext(mime)` returns whether or not Julia treats a given `mime` type as text.)\n\nAs a special case, if `x` is an `AbstractString` (for textual MIME types) or a `Vector{UInt8}` (for binary MIME types), the `reprmime` function assumes that `x` is already in the requested `mime` format and simply returns `x`.\n\"\"\"\nreprmime\n\ndoc\"\"\"\n    rm(path::AbstractString; recursive=false)\n\nDelete the file, link, or empty directory at the given path. If `recursive=true` is passed and the path is a directory, then all contents are removed recursively.\n\"\"\"\nrm\n\ndoc\"\"\"\n    MersenneTwister([seed])\n\nCreate a `MersenneTwister` RNG object. Different RNG objects can have their own seeds, which may be useful for generating different streams of random numbers.\n\"\"\"\nMersenneTwister\n\ndoc\"\"\"\n    graphemes(s) -> iterator over substrings of s\n\nReturns an iterator over substrings of `s` that correspond to the extended graphemes in the string, as defined by Unicode UAX \\#29. (Roughly, these are what users would perceive as single characters, even though they may contain more than one codepoint; for example a letter combined with an accent mark is a single grapheme.)\n\"\"\"\ngraphemes\n\ndoc\"\"\"\n    @__FILE__ -> AbstractString\n\n`@__FILE__` expands to a string with the absolute path and file name of the script being run. Returns `nothing` if run from a REPL or an empty string if evaluated by `julia -e <expr>`.\n\"\"\"\n:@__FILE__\n\nkeywords[symbol(\"@__LINE__\")] = doc\"\"\"\n    @__LINE__ -> Int\n\n`@__LINE__` expands to the line number of the call-site.\n\"\"\"\n\ndoc\"\"\"\n    charwidth(c)\n\nGives the number of columns needed to print a character.\n\"\"\"\ncharwidth\n\ndoc\"\"\"\n    abspath(path::AbstractString) -> AbstractString\n\nConvert a path to an absolute path by adding the current directory if necessary.\n\"\"\"\nabspath\n\ndoc\"\"\"\n    ispunct(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character belongs to the Unicode general category Punctuation, i.e. a character whose category code begins with 'P'. For strings, tests whether this is true for all elements of the string.\n\"\"\"\nispunct\n\ndoc\"\"\"\n    bitunpack(B::BitArray{N}) -> Array{Bool,N}\n\nConverts a packed boolean array to an array of booleans\n\"\"\"\nbitunpack\n\ndoc\"\"\"\n    @which\n\nApplied to a function call, it evaluates the arguments to the specified function call, and returns the `Method` object for the method that would be called for those arguments. Applied to a variable, it returns the module in which the variable was bound. It calls out to the `which` function.\n\"\"\"\n:@which\n\ndoc\"\"\"\n    size(A, [dim...])\n\nReturns a tuple containing the dimensions of `A`. Optionally you can specify the dimension(s) you want the length of, and get the length of that dimension, or a tuple of the lengths of dimensions you asked for.:\n\n    julia> A = rand(2,3,4);\n\n    julia> size(A, 2)\n    3\n\n    julia> size(A,3,2)\n    (4,3)\n\"\"\"\nsize\n\ndoc\"\"\"\n    trigamma(x)\n\nCompute the trigamma function of `x` (the logarithmic second derivative of `gamma(x)`)\n\"\"\"\ntrigamma\n\ndoc\"\"\"\n    findmin(itr) -> (x, index)\n\nReturns the minimum element and its index.\n\"\"\"\nfindmin(itr)\n\ndoc\"\"\"\n    findmin(A, dims) -> (minval, index)\n\nFor an array input, returns the value and index of the minimum over the given dimensions.\n\"\"\"\nfindmin(A,dims)\n\ndoc\"\"\"\n    ismount(path) -> Bool\n\nReturns `true` if `path` is a mount point, `false` otherwise.\n\"\"\"\nismount\n\ndoc\"\"\"\n    endswith(string, suffix | chars)\n\nReturns `true` if `string` ends with `suffix`. If the second argument is a vector or set of characters, tests whether the last character of `string` belongs to that set.\n\"\"\"\nendswith\n\ndoc\"\"\"\n    airy(k,x)\n\nThe `k`th derivative of the Airy function $\\operatorname{Ai}(x)$.\n\"\"\"\nairy\n\ndoc\"\"\"\n    !(x)\n\nBoolean not\n\"\"\"\nBase.(:(!))\n\ndoc\"\"\"\n    length(A) -> Integer\n\nReturns the number of elements in `A`.\n\"\"\"\nlength(::AbstractArray)\n\ndoc\"\"\"\n    length(collection) -> Integer\n\nFor ordered, indexable collections, the maximum index `i` for which `getindex(collection, i)` is valid. For unordered collections, the number of elements.\n\"\"\"\nlength(collection)\n\ndoc\"\"\"\n    length(s)\n\nThe number of characters in string `s`.\n\"\"\"\nlength(::AbstractString)\n\ndoc\"\"\"\n    rand!([rng], A, [coll])\n\nPopulate the array `A` with random values. If the indexable collection `coll` is specified, the values are picked randomly from `coll`. This is equivalent to `copy!(A, rand(rng, coll, size(A)))` or `copy!(A, rand(rng, eltype(A), size(A)))` but without allocating a new array.\n\"\"\"\nrand!\n\ndoc\"\"\"\n```rst\n..  bkfact(A) -> BunchKaufman\n\nCompute the Bunch-Kaufman [Bunch1977]_ factorization of a real symmetric or complex Hermitian matrix ``A`` and return a ``BunchKaufman`` object. The following functions are available for ``BunchKaufman`` objects: ``size``, ``\\``, ``inv``, ``issym``, ``ishermitian``.\n\n.. [Bunch1977] J R Bunch and L Kaufman, Some stable methods for calculating inertia and solving symmetric linear systems, Mathematics of Computation 31:137 (1977), 163-179. `url <http://www.ams.org/journals/mcom/1977-31-137/S0025-5718-1977-0428694-0>`_.\n```\n\"\"\"\nbkfact\n\ndoc\"\"\"\n    searchsortedlast(a, x, [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nReturns the index of the last value in `a` less than or equal to `x`, according to the specified order. Returns `0` if `x` is less than all values in `a`.\n\"\"\"\nsearchsortedlast\n\ndoc\"\"\"\n    InterruptException()\n\nThe process was stopped by a terminal interrupt (CTRL+C).\n\"\"\"\nInterruptException\n\ndoc\"\"\"\n    cov(v1[, v2][, vardim=1, corrected=true, mean=nothing])\n\nCompute the Pearson covariance between the vector(s) in `v1` and `v2`. Here, `v1` and `v2` can be either vectors or matrices.\n\nThis function accepts three keyword arguments:\n\n- `vardim`: the dimension of variables. When `vardim = 1`, variables are considered in columns while observations in rows; when `vardim = 2`, variables are in rows while observations in columns. By default, it is set to `1`.\n- `corrected`: whether to apply Bessel's correction (divide by `n-1` instead of `n`). By default, it is set to `true`.\n- `mean`: allow users to supply mean values that are known. By default, it is set to `nothing`, which indicates that the mean(s) are unknown, and the function will compute the mean. Users can use `mean=0` to indicate that the input data are centered, and hence there's no need to subtract the mean.\n\nThe size of the result depends on the size of `v1` and `v2`. When both `v1` and `v2` are vectors, it returns the covariance between them as a scalar. When either one is a matrix, it returns a covariance matrix of size `(n1, n2)`, where `n1` and `n2` are the numbers of slices in `v1` and `v2`, which depend on the setting of `vardim`.\n\nNote: `v2` can be omitted, which indicates `v2 = v1`.\n\"\"\"\ncov\n\ndoc\"\"\"\n    den(x)\n\nDenominator of the rational representation of `x`\n\"\"\"\nden\n\ndoc\"\"\"\n    issubnormal(f) -> Bool\n\nTest whether a floating point number is subnormal\n\"\"\"\nissubnormal\n\ndoc\"\"\"\n    Ac_ldiv_B(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d34$ \\ $B$\n\"\"\"\nAc_ldiv_B\n\ndoc\"\"\"\n    NullException()\n\nAn attempted access to a `Nullable` with no defined value.\n\"\"\"\nNullException\n\ndoc\"\"\"\n    .==(x, y)\n\nElement-wise equality comparison operator.\n\"\"\"\nBase.(:(.==))\n\ndoc\"\"\"\n    cfunction(function::Function, ReturnType::Type, (ArgumentTypes...))\n\nGenerate C-callable function pointer from Julia function. Type annotation of the return value in the callback function is a must for situations where Julia cannot infer the return type automatically.\n\nFor example:\n\n    function foo()\n        # body\n\n        retval::Float64\n    end\n\n    bar = cfunction(foo, Float64, ())\n\"\"\"\ncfunction\n\ndoc\"\"\"\n    recvfrom(socket::UDPSocket) -> (address, data)\n\nRead a UDP packet from the specified socket, returning a tuple of (address, data), where address will be either IPv4 or IPv6 as appropriate.\n\"\"\"\nrecvfrom\n\ndoc\"\"\"\n```rst\n..  @code_llvm\n\nEvaluates the arguments to the function call, determines their types, and calls :func:`code_llvm` on the resulting expression.\n```\n\"\"\"\n:@code_llvm\n\ndoc\"\"\"\n    nextfloat(f)\n\nGet the next floating point number in lexicographic order\n\"\"\"\nnextfloat\n\ndoc\"\"\"\n    intersect(s1,s2...)\n    \u2229(s1,s2)\n\nConstruct the intersection of two or more sets. Maintains order and multiplicity of the first argument for arrays and ranges.\n\"\"\"\nintersect\n\ndoc\"\"\"\n    !=(x, y)\n    \u2260(x,y)\n\nNot-equals comparison operator. Always gives the opposite answer as `==`. New types should generally not implement this, and rely on the fallback definition `!=(x,y) = !(x==y)` instead.\n\"\"\"\nBase.(:(!=))\n\ndoc\"\"\"\n    @spawn\n\nCreates a closure around an expression and runs it on an automatically-chosen process, returning a `RemoteRef` to the result.\n\"\"\"\n:@spawn\n\ndoc\"\"\"\n    findfirst(A)\n\nReturn the index of the first non-zero value in `A` (determined by `A[i]!=0`).\n\"\"\"\nfindfirst(A)\n\ndoc\"\"\"\n    findfirst(A,v)\n\nReturn the index of the first element equal to `v` in `A`.\n\"\"\"\nfindfirst(A,v)\n\ndoc\"\"\"\n    findfirst(predicate, A)\n\nReturn the index of the first element of `A` for which `predicate` returns `true`.\n\"\"\"\nfindfirst\n\ndoc\"\"\"\n    factorize(A)\n\nCompute a convenient factorization (including LU, Cholesky, Bunch-Kaufman, LowerTriangular, UpperTriangular) of `A`, based upon the type of the input matrix. The return value can then be reused for efficient solving of multiple systems. For example: `A=factorize(A); x=A\\b; y=A\\C`.\n\"\"\"\nfactorize\n\ndoc\"\"\"\n    promote_rule(type1, type2)\n\nSpecifies what type should be used by `promote` when given values of types `type1` and `type2`. This function should not be called directly, but should have definitions added to it for new types as appropriate.\n\"\"\"\npromote_rule\n\ndoc\"\"\"\n    mtime(file)\n\nEquivalent to `stat(file).mtime`\n\"\"\"\nmtime\n\ndoc\"\"\"\n    logspace(start, stop, n=50)\n\nConstruct a vector of `n` logarithmically spaced numbers from `10^start` to `10^stop`.\n\"\"\"\nlogspace\n\ndoc\"\"\"\n    @gensym\n\nGenerates a gensym symbol for a variable. For example, `@gensym x y` is transformed into `x = gensym(\"x\"); y = gensym(\"y\")`.\n\"\"\"\n:@gensym\n\ndoc\"\"\"\n    sumabs2(itr)\n\nSum squared absolute values of all elements in a collection. This is equivalent to `sum(abs2(itr))` but faster.\n\"\"\"\nsumabs2(itr)\n\ndoc\"\"\"\n    sumabs2(A, dims)\n\nSum squared absolute values of elements of an array over the given dimensions.\n\"\"\"\nsumabs2(A,dims)\n\ndoc\"\"\"\n```rst\n..  uperm(file)\n\nGets the permissions of the owner of the file as a bitfield of\n\n==== =====================\n 01   Execute Permission\n 02   Write Permission\n 04   Read Permission\n==== =====================\n\nFor allowed arguments, see ``stat``.\n```\n\"\"\"\nuperm\n\ndoc\"\"\"\n    run(command)\n\nRun a command object, constructed with backticks. Throws an error if anything goes wrong, including the process exiting with a non-zero status.\n\"\"\"\nrun\n\ndoc\"\"\"\n    showall(x)\n\nSimilar to `show`, except shows all elements of arrays.\n\"\"\"\nshowall\n\ndoc\"\"\"\n    mimewritable(mime, x)\n\nReturns a boolean value indicating whether or not the object `x` can be written as the given `mime` type. (By default, this is determined automatically by the existence of the corresponding `writemime` function for `typeof(x)`.)\n\"\"\"\nmimewritable\n\ndoc\"\"\"\n    vecdot(x, y)\n\nFor any iterable containers `x` and `y` (including arrays of any dimension) of numbers (or any element type for which `dot` is defined), compute the Euclidean dot product (the sum of `dot(x[i],y[i])`) as if they were vectors.\n\"\"\"\nvecdot\n\ndoc\"\"\"\n    isprime(x::Integer) -> Bool\n\nReturns `true` if `x` is prime, and `false` otherwise.\n\n```jldoctest\njulia> isprime(3)\ntrue\n```\n\"\"\"\nisprime(::Integer)\n\ndoc\"\"\"\n    isprime(x::BigInt, [reps = 25]) -> Bool\n\nProbabilistic primality test. Returns `true` if `x` is prime; and\n`false` if `x` is not prime with high probability. The false positive\nrate is about `0.25^reps`. `reps = 25` is considered safe for\ncryptographic applications (Knuth, Seminumerical Algorithms).\n\n```jldoctest\njulia> isprime(big(3))\ntrue\n```\n\"\"\"\nisprime(::BigInt, ?)\n\ndoc\"\"\"\n    >(x, y)\n\nGreater-than comparison operator. Generally, new types should implement `<` instead of this function, and rely on the fallback definition `>(x,y) = y<x`.\n\"\"\"\nBase.(:(>))\n\ndoc\"\"\"\n    match(r::Regex, s::AbstractString[, idx::Integer[, addopts]])\n\nSearch for the first match of the regular expression `r` in `s` and return a `RegexMatch` object containing the match, or nothing if the match failed. The matching substring can be retrieved by accessing `m.match` and the captured sequences can be retrieved by accessing `m.captures` The optional `idx` argument specifies an index at which to start the search.\n\"\"\"\nmatch\n\ndoc\"\"\"\n    nprocs()\n\nGet the number of available processes.\n\"\"\"\nnprocs\n\ndoc\"\"\"\n    Ac_mul_B(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d34\u22c5B$\n\"\"\"\nAc_mul_B\n\ndoc\"\"\"\n```rst\n..  qrfact!(A [,pivot=Val{false}])\n\n``qrfact!`` is the same as :func:`qrfact` when ``A`` is a subtype of ``StridedMatrix``, but saves space by overwriting the input ``A``, instead of creating a copy.\n```\n\"\"\"\nqrfact!\n\ndoc\"\"\"\n    At_rdiv_B(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d40 / B$\n\"\"\"\nAt_rdiv_B\n\ndoc\"\"\"\n    coth(x)\n\nCompute the hyperbolic cotangent of `x`\n\"\"\"\ncoth\n\ndoc\"\"\"\n    conj(z)\n\nCompute the complex conjugate of a complex number `z`\n\"\"\"\nconj\n\ndoc\"\"\"\n    conj!(A)\n\nConvert an array to its complex conjugate in-place\n\"\"\"\nconj!\n\ndoc\"\"\"\n    start(iter) -> state\n\nGet initial iteration state for an iterable object\n\"\"\"\nstart\n\ndoc\"\"\"\n    div(x, y)\n    \u00f7(x, y)\n\nThe quotient from Euclidean division. Computes `x/y`, truncated to an integer.\n\"\"\"\ndiv\n\ndoc\"\"\"\n    relpath(path::AbstractString, startpath::AbstractString = \".\") -> AbstractString\n\nReturn a relative filepath to path either from the current directory or from an optional start directory. This is a path computation: the filesystem is not accessed to confirm the existence or nature of path or startpath.\n\"\"\"\nrelpath\n\ndoc\"\"\"\n    readavailable(stream)\n\nRead all available data on the stream, blocking the task only if no data is available. The result is a `Vector{UInt8,1}`.\n\"\"\"\nreadavailable\n\ndoc\"\"\"\n    remotecall(id, func, args...)\n\nCall a function asynchronously on the given arguments on the specified process. Returns a `RemoteRef`.\n\"\"\"\nremotecall\n\ndoc\"\"\"\n    slicedim(A, d, i)\n\nReturn all the data of `A` where the index for dimension `d` equals `i`. Equivalent to `A[:,:,...,i,:,:,...]` where `i` is in position `d`.\n\"\"\"\nslicedim\n\ndoc\"\"\"\n    isa(x, type) -> Bool\n\nDetermine whether `x` is of the given `type`.\n\"\"\"\nisa\n\ndoc\"\"\"\n    <=(x, y)\n    \u2264(x,y)\n\nLess-than-or-equals comparison operator.\n\"\"\"\nBase.(:(<=))\n\ndoc\"\"\"\n    ProcessExitedException()\n\nAfter a client Julia process has exited, further attempts to reference the dead child will throw this exception.\n\"\"\"\nProcessExitedException\n\ndoc\"\"\"\n    unsafe_load(p::Ptr{T},i::Integer)\n\nLoad a value of type `T` from the address of the ith element (1-indexed) starting at `p`. This is equivalent to the C expression `p[i-1]`.\n\nThe `unsafe` prefix on this function indicates that no validation is performed on the pointer `p` to ensure that it is valid. Incorrect usage may segfault your program or return garbage answers, in the same manner as C.\n\"\"\"\nunsafe_load\n\ndoc\"\"\"\n    catch_backtrace()\n\nGet the backtrace of the current exception, for use within `catch` blocks.\n\"\"\"\ncatch_backtrace\n\ndoc\"\"\"\n    airyx(k,x)\n\nscaled `k`th derivative of the Airy function, return $\\operatorname{Ai}(x) e^{\\frac{2}{3} x \\sqrt{x}}$\nfor `k == 0 || k == 1`, and $\\operatorname{Ai}(x) e^{- \\left| \\operatorname{Re} \\left( \\frac{2}{3} x \\sqrt{x} \\right) \\right|}$\nfor `k == 2 || k == 3`.\n\"\"\"\nairyx\n\ndoc\"\"\"\n    get_zero_subnormals() -> Bool\n\nReturns `false` if operations on subnormal floating-point values (\"denormals\") obey rules for IEEE arithmetic, and ``true`` if they might be converted to zeros.\n\"\"\"\nget_zero_subnormals\n\ndoc\"\"\"\n    cos(x)\n\nCompute cosine of `x`, where `x` is in radians\n\"\"\"\ncos\n\ndoc\"\"\"\n    base64encode(writefunc, args...)\n    base64encode(args...)\n\nGiven a `write`-like function `writefunc`, which takes an I/O stream as its first argument, `base64(writefunc, args...)` calls `writefunc` to write `args...` to a base64-encoded string, and returns the string. `base64(args...)` is equivalent to `base64(write, args...)`: it converts its arguments into bytes using the standard `write` functions and returns the base64-encoded string.\n\"\"\"\nbase64encode\n\ndoc\"\"\"\n    Condition()\n\nCreate an edge-triggered event source that tasks can wait for. Tasks that call `wait` on a `Condition` are suspended and queued. Tasks are woken up when `notify` is later called on the `Condition`. Edge triggering means that only tasks waiting at the time `notify` is called can be woken up. For level-triggered notifications, you must keep extra state to keep track of whether a notification has happened. The `Channel` type does this, and so can be used for level-triggered events.\n\"\"\"\nCondition\n\ndoc\"\"\"\n```rst\n..  filt!(out, b, a, x, [si])\n\nSame as :func:`filt` but writes the result into the ``out`` argument,\nwhich may alias the input ``x`` to modify it in-place.\n```\n\"\"\"\nfilt!\n\ndoc\"\"\"\n    ascii(::Array{UInt8,1})\n\nCreate an ASCII string from a byte array.\n\"\"\"\nascii(::Vector{UInt8})\n\ndoc\"\"\"\n    ascii(s)\n\nConvert a string to a contiguous ASCII string (all characters must be valid ASCII characters).\n\"\"\"\nascii(s)\n\ndoc\"\"\"\n    ascii(::Ptr{UInt8}, [length])\n\nCreate an ASCII string from the address of a C (0-terminated) string encoded in ASCII. A copy is made; the ptr can be safely freed. If `length` is specified, the string does not have to be 0-terminated.\n\"\"\"\nascii(::Ptr{UInt8},?)\n\ndoc\"\"\"\n    maxabs(itr)\n\nCompute the maximum absolute value of a collection of values.\n\"\"\"\nmaxabs(itr)\n\ndoc\"\"\"\n    maxabs(A, dims)\n\nCompute the maximum absolute values over given dimensions.\n\"\"\"\nmaxabs(A,dims)\n\ndoc\"\"\"\n    done(iter, state) -> Bool\n\nTest whether we are done iterating\n\"\"\"\ndone\n\ndoc\"\"\"\n```rst\n..  convert(T, x)\n\nConvert ``x`` to a value of type ``T``.\n\nIf ``T`` is an ``Integer`` type, an :exc:`InexactError` will be raised if\n``x`` is not representable by ``T``, for example if ``x`` is not\ninteger-valued, or is outside the range supported by ``T``.\n\n.. doctest::\n\n   julia> convert(Int, 3.0)\n   3\n\n   julia> convert(Int, 3.5)\n   ERROR: InexactError()\n    in convert at int.jl:209\n\nIf ``T`` is a :obj:`AbstractFloat` or :obj:`Rational` type, then it will return\nthe closest value to ``x`` representable by ``T``.\n\n.. doctest::\n\n   julia> x = 1/3\n   0.3333333333333333\n\n   julia> convert(Float32, x)\n   0.33333334f0\n\n   julia> convert(Rational{Int32}, x)\n   1//3\n\n   julia> convert(Rational{Int64}, x)\n   6004799503160661//18014398509481984\n```\n\"\"\"\nconvert\n\ndoc\"\"\"\n    A_ldiv_Bt(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A$ \\ $B\u1d40$\n\"\"\"\nA_ldiv_Bt\n\ndoc\"\"\"\n    applicable(f, args...) -> Bool\n\nDetermine whether the given generic function has a method applicable to the given arguments.\n\n```jldoctest\njulia> function f(x, y)\n           x + y\n       end;\n\njulia> applicable(f, 1)\nfalse\n\njulia> applicable(f, 1, 2)\ntrue\n```\n\"\"\"\napplicable\n\ndoc\"\"\"\n    xdump(x)\n\nShow all structure of a value, including all fields of objects.\n\"\"\"\nxdump\n\ndoc\"\"\"\n    Base.process_messages(instrm::AsyncStream, outstrm::AsyncStream)\n\nCalled by cluster managers using custom transports. It should be called when the custom transport implementation receives the first message from a remote worker. The custom transport must manage a logical connection to the remote worker and provide two `AsyncStream` objects, one for incoming messages and the other for messages addressed to the remote worker.\n\"\"\"\nBase.process_messages\n\ndoc\"\"\"\n    RandomDevice()\n\nCreate a `RandomDevice` RNG object. Two such objects will always generate different streams of random numbers.\n\"\"\"\nRandomDevice\n\ndoc\"\"\"\n    fma(x, y, z)\n\nComputes `x*y+z` without rounding the intermediate result `x*y`. On some systems this is significantly more expensive than `x*y+z`. `fma` is used to improve accuracy in certain algorithms. See `muladd`.\n\"\"\"\nfma\n\ndoc\"\"\"\n\n    eigvals(A,[irange,][vl,][vu]) -> values\n\nReturns the eigenvalues of `A`. If `A` is `Symmetric`, `Hermitian` or `SymTridiagonal`,\nit is possible to calculate only a subset of the eigenvalues by specifying either a\n`UnitRange` `irange` covering indices of the sorted eigenvalues, or a pair `vl` and `vu`\nfor the lower and upper boundaries of the eigenvalues.\n\nFor general non-symmetric matrices it is possible to specify how the matrix is balanced\nbefore the eigenvector calculation. The option `permute=true` permutes the matrix to\nbecome closer to upper triangular, and `scale=true` scales the matrix by its diagonal\nelements to make rows and columns moreequal in norm. The default is `true` for both\noptions.\n\"\"\"\neigvals\n\ndoc\"\"\"\n    A_ldiv_Bc(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A$ \\ $B\u1d34$\n\"\"\"\nA_ldiv_Bc\n\ndoc\"\"\"\n```rst\n..  escape_string(str::AbstractString) -> AbstractString\n\nGeneral escaping of traditional C and Unicode escape sequences. See :func:`print_escaped` for more general escaping.\n```\n\"\"\"\nescape_string\n\ndoc\"\"\"\n    significand(x)\n\nExtract the `significand(s)` (a.k.a. mantissa), in binary representation, of\na floating-point number or array. If `x` is a non-zero finite number,\nthan the result will be a number of the same type on the interval\n$[1,2)$. Otherwise `x` is returned.\n\n```jldoctest\njulia> significand(15.2)/15.2\n0.125\n\njulia> significand(15.2)*8\n15.2\n```\n\"\"\"\nsignificand\n\ndoc\"\"\"\n    pointer_from_objref(object_instance)\n\nGet the memory address of a Julia object as a `Ptr`. The existence of the resulting `Ptr` will not protect the object from garbage collection, so you must ensure that the object remains referenced for the whole time that the `Ptr` will be used.\n\"\"\"\npointer_from_objref\n\ndoc\"\"\"\n    cumsum_kbn(A, [dim])\n\nCumulative sum along a dimension, using the Kahan-Babuska-Neumaier compensated summation algorithm for additional accuracy. The dimension defaults to 1.\n\"\"\"\ncumsum_kbn\n\ndoc\"\"\"\n    cmp(x,y)\n\nReturn -1, 0, or 1 depending on whether `x` is less than, equal to, or greater than `y`, respectively. Uses the total order implemented by `isless`. For floating-point numbers, uses `<` but throws an error for unordered arguments.\n\"\"\"\ncmp\n\ndoc\"\"\"\n    tand(x)\n\nCompute tangent of `x`, where `x` is in degrees\n\"\"\"\ntand\n\ndoc\"\"\"\n    issorted(v, [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nTest whether a vector is in sorted order. The `by`, `lt` and `rev` keywords modify what order is considered to be sorted just as they do for `sort`.\n\"\"\"\nissorted\n\ndoc\"\"\"\n    set_bigfloat_precision(x::Int64)\n\nSet the precision (in bits) to be used to `BigFloat` arithmetic.\n\"\"\"\nset_bigfloat_precision\n\ndoc\"\"\"\n    isbits(T)\n\nReturn `true` if `T` is a \"plain data\" type, meaning it is immutable and\ncontains no references to other values. Typical examples are numeric types such\nas `UInt8`, `Float64`, and `Complex{Float64}`.\n\n```jldoctest\njulia> isbits(Complex{Float64})\ntrue\n\njulia> isbits(Complex)\nfalse\n```\n\"\"\"\nisbits\n\ndoc\"\"\"\n    findlast(A)\n\nReturn the index of the last non-zero value in `A` (determined by `A[i]!=0`).\n\"\"\"\nfindlast(A)\n\ndoc\"\"\"\n    findlast(A, v)\n\nReturn the index of the last element equal to `v` in `A`.\n\"\"\"\nfindlast(A,v)\n\ndoc\"\"\"\n    findlast(predicate, A)\n\nReturn the index of the last element of `A` for which `predicate` returns `true`.\n\"\"\"\nfindlast(::Function, A)\n\ndoc\"\"\"\n    @elapsed\n\nA macro to evaluate an expression, discarding the resulting value, instead returning the number of seconds it took to execute as a floating-point number.\n\"\"\"\n:@elapsed\n\ndoc\"\"\"\n    findnext(A, i)\n\nFind the next index >= `i` of a non-zero element of `A`, or `0` if not found.\n\"\"\"\nfindnext\n\ndoc\"\"\"\n    findnext(predicate, A, i)\n\nFind the next index >= `i` of an element of `A` for which `predicate` returns `true`, or `0` if not found.\n\"\"\"\nfindnext(::Function,A,i)\n\ndoc\"\"\"\n    findnext(A, v, i)\n\nFind the next index >= `i` of an element of `A` equal to `v` (using `==`), or `0` if not found.\n\"\"\"\nfindnext(A,v,i)\n\ndoc\"\"\"\n    fetch(x)\n\nWaits and fetches a value from `x` depending on the type of `x`. Does not remove the item fetched:\n\n* `RemoteRef`: Wait for and get the value of a remote reference. If the remote value is an exception, throws a `RemoteException` which captures the remote exception and backtrace.\n* `Channel` : Wait for and get the first available item from the channel.\n\"\"\"\nfetch\n\ndoc\"\"\"\n    angle(z)\n\nCompute the phase angle in radians of a complex number `z`\n\"\"\"\nangle\n\ndoc\"\"\"\n```rst\n..  tic()\n\nSet a timer to be read by the next call to :func:`toc` or :func:`toq`. The macro call ``@time expr`` can also be used to time evaluation.\n```\n\"\"\"\ntic\n\ndoc\"\"\"\n    LoadError(file::AbstractString, line::Int, error)\n\nAn error occurred while `include`ing, `require`ing, or `using` a file. The error specifics should be available in the `.error` field.\n\"\"\"\nLoadError\n\ndoc\"\"\"\n    InitError(mod::Symbol, error)\n\nAn error occurred when running a module's `__init__` function. The actual error thrown is available in the `.error` field.\n\"\"\"\nInitError\n\ndoc\"\"\"\n    vec(Array) -> Vector\n\nVectorize an array using column-major convention.\n\"\"\"\nvec\n\ndoc\"\"\"\n    copy!(dest, src)\n\nCopy all elements from collection `src` to array `dest`. Returns `dest`.\n\"\"\"\ncopy!(dest,src)\n\ndoc\"\"\"\n    copy!(dest, do, src, so, N)\n\nCopy `N` elements from collection `src` starting at offset `so`, to array `dest` starting at offset `do`. Returns `dest`.\n\"\"\"\ncopy!(dest,d,src,so,N)\n\ndoc\"\"\"\n    broadcast(f, As...)\n\nBroadcasts the arrays `As` to a common size by expanding singleton dimensions, and returns an array of the results `f(as...)` for each position.\n\"\"\"\nbroadcast\n\ndoc\"\"\"\n```rst\n..  eigvecs(A, [eigvals,][permute=true,][scale=true]) -> Matrix\n\nReturns a matrix ``M`` whose columns are the eigenvectors of ``A``.\n(The ``k``\\ th eigenvector can be obtained from the slice ``M[:, k]``.)\nThe ``permute`` and ``scale`` keywords are the same as for :func:`eigfact`.\n\nFor :class:`SymTridiagonal` matrices, if the optional vector of eigenvalues\n``eigvals`` is specified, returns the specific corresponding eigenvectors.\n```\n\"\"\"\neigvecs\n\ndoc\"\"\"\n    ntoh(x)\n\nConverts the endianness of a value from Network byte order (big-endian) to that used by the Host.\n\"\"\"\nntoh\n\ndoc\"\"\"\n```rst\n..  qrfact(A [,pivot=Val{false}]) -> F\n\nComputes the QR factorization of ``A``. The return type of ``F`` depends on the element type of ``A`` and whether pivoting is specified (with ``pivot==Val{true}``).\n\n================ ================= ============== =====================================\nReturn type      ``eltype(A)``     ``pivot``      Relationship between ``F`` and ``A``\n================ ================= ============== =====================================\n``QR``           not ``BlasFloat`` either          ``A==F[:Q]*F[:R]``\n``QRCompactWY``  ``BlasFloat``     ``Val{false}``  ``A==F[:Q]*F[:R]``\n``QRPivoted``    ``BlasFloat``     ``Val{true}``   ``A[:,F[:p]]==F[:Q]*F[:R]``\n================ ================= ============== =====================================\n\n``BlasFloat`` refers to any of: ``Float32``, ``Float64``, ``Complex64`` or ``Complex128``.\n\nThe individual components of the factorization ``F`` can be accessed by indexing:\n\n=========== ============================================= ================== ===================== ==================\nComponent   Description                                   ``QR``             ``QRCompactWY``       ``QRPivoted``\n=========== ============================================= ================== ===================== ==================\n``F[:Q]``   ``Q`` (orthogonal/unitary) part of ``QR``      \u2713 (``QRPackedQ``)  \u2713 (``QRCompactWYQ``)  \u2713 (``QRPackedQ``)\n``F[:R]``   ``R`` (upper right triangular) part of ``QR``  \u2713                  \u2713                     \u2713\n``F[:p]``   pivot ``Vector``                                                                        \u2713\n``F[:P]``   (pivot) permutation ``Matrix``                                                          \u2713\n=========== ============================================= ================== ===================== ==================\n\nThe following functions are available for the ``QR`` objects: ``size``, ``\\``. When ``A`` is rectangular, ``\\`` will return a least squares solution and if the solution is not unique, the one with smallest norm is returned.\n\nMultiplication with respect to either thin or full ``Q`` is allowed, i.e. both ``F[:Q]*F[:R]`` and ``F[:Q]*A`` are supported. A ``Q`` matrix can be converted into a regular matrix with :func:`full` which has a named argument ``thin``.\n\n.. note::\n\n   ``qrfact`` returns multiple types because LAPACK uses several representations that minimize the memory storage requirements of products of Householder elementary reflectors, so that the ``Q`` and ``R`` matrices can be stored compactly rather as two separate dense matrices.\n\n   The data contained in ``QR`` or ``QRPivoted`` can be used to construct the ``QRPackedQ`` type, which is a compact representation of the rotation matrix:\n\n   .. math::\n\n      Q = \\prod_{i=1}^{\\min(m,n)} (I - \\tau_i v_i v_i^T)\n\n   where :math:`\\tau_i` is the scale factor and :math:`v_i` is the projection vector associated with the :math:`i^{th}` Householder elementary reflector.\n\n   The data contained in ``QRCompactWY`` can be used to construct the ``QRCompactWYQ`` type, which is a compact representation of the rotation matrix\n\n   .. math::\n\n      Q = I + Y T Y^T\n\n   where ``Y`` is :math:`m \\times r` lower trapezoidal and ``T`` is :math:`r \\times r` upper triangular. The *compact WY* representation [Schreiber1989]_ is not to be confused with the older, *WY* representation [Bischof1987]_. (The LAPACK documentation uses ``V`` in lieu of ``Y``.)\n\n.. [Bischof1987] C Bischof and C Van Loan, \"The WY representation for products\n   of Householder matrices\", SIAM J Sci Stat Comput 8 (1987), s2-s13.\n   `doi:10.1137/0908009 <http://dx.doi.org/10.1137/0908009>`_\n.. [Schreiber1989] R Schreiber and C Van Loan, \"A storage-efficient WY\n   representation for products of Householder transformations\",\n   SIAM J Sci Stat Comput 10 (1989), 53-57.\n   `doi:10.1137/0910005 <http://dx.doi.org/10.1137/0910005>`_\n```\n\"\"\"\nqrfact(A,?)\n\n\ndoc\"\"\"\n```rst\n..  qrfact(A) -> SPQR.Factorization\n\nCompute the QR factorization of a sparse matrix ``A``. A fill-reducing permutation is used. The main application of this type is to solve least squares problems with ``\\``. The function calls the C library SPQR and a few additional functions from the library are wrapped but not exported.\n```\n\"\"\"\nqrfact(A)\n\ndoc\"\"\"\n    +(x, y...)\n\nAddition operator. `x+y+z+...` calls this function with all arguments, i.e. `+(x, y, z, ...)`.\n\"\"\"\n+\n\ndoc\"\"\"\n    identity(x)\n\nThe identity function. Returns its argument.\n\"\"\"\nidentity\n\ndoc\"\"\"\n    iseven(x::Integer) -> Bool\n\nReturns `true` is `x` is even (that is, divisible by 2), and `false` otherwise.\n\n```jldoctest\njulia> iseven(9)\nfalse\n\njulia> iseven(10)\ntrue\n```\n\"\"\"\niseven\n\ndoc\"\"\"\n    setindex!(A, X, inds...)\n\nStore values from array `X` within some subset of `A` as specified by `inds`.\n\"\"\"\nsetindex!(A::AbstractArray,X,inds...)\n\ndoc\"\"\"\n    setindex!(collection, value, key...)\n\nStore the given value at the given key or index within a collection. The syntax `a[i,j,...] = x` is converted by the compiler to `(setindex!(a, x, i, j, ...); x)`.\n\"\"\"\nsetindex!(collection,value,key...)\n\ndoc\"\"\"\n    signif(x, digits, [base])\n\nRounds (in the sense of `round`) `x` so that there are `digits` significant digits, under a base `base` representation, default 10. E.g., `signif(123.456, 2)` is `120.0`, and `signif(357.913, 4, 2)` is `352.0`.\n\"\"\"\nsignif\n\ndoc\"\"\"\n    nextpow2(n)\n\nThe smallest power of two not less than `n`. Returns 0 for `n==0`, and returns `-nextpow2(-n)` for negative arguments.\n\"\"\"\nnextpow2\n\ndoc\"\"\"\n    ipermute!(v, p)\n\nLike permute!, but the inverse of the given permutation is applied.\n\"\"\"\nipermute!\n\ndoc\"\"\"\n```rst\n..  full(S)\n\nConvert a sparse matrix ``S`` into a dense matrix.\n```\n\"\"\"\nfull(::AbstractSparseMatrix)\n\ndoc\"\"\"\n```rst\n..  full(F)\n\nReconstruct the matrix ``A`` from the factorization ``F=factorize(A)``.\n```\n\"\"\"\nfull(F)\n\ndoc\"\"\"\n```rst\n..  full(QRCompactWYQ[, thin=true]) -> Matrix\n\nConverts an orthogonal or unitary matrix stored as a ``QRCompactWYQ``\nobject, i.e. in the compact WY format [Bischof1987]_, to a dense matrix.\n\nOptionally takes a ``thin`` Boolean argument, which if ``true`` omits the\ncolumns that span the rows of ``R`` in the QR factorization that are zero.\nThe resulting matrix is the ``Q`` in a thin QR factorization (sometimes\ncalled the reduced QR factorization).  If ``false``, returns a ``Q`` that\nspans all rows of ``R`` in its corresponding QR factorization.\n```\n\"\"\"\nfull(::LinAlg.QRCompactWYQ, ?)\n\ndoc\"\"\"\n    map(f, c...) -> collection\n\nTransform collection `c` by applying `f` to each element.\nFor multiple collection arguments, apply `f` elementwise.\n\n```jldoctest\njulia> map((x) -> x * 2, [1, 2, 3])\n3-element Array{Int64,1}:\n 2\n 4\n 6\n\njulia> map(+, [1, 2, 3], [10, 20, 30])\n3-element Array{Int64,1}:\n 11\n 22\n 33\n```\n\"\"\"\nmap\n\ndoc\"\"\"\n    @parallel\n\nA parallel for loop of the form :\n\n    @parallel [reducer] for var = range\n        body\n    end\n\nThe specified range is partitioned and locally executed across all workers. In case an optional reducer function is specified, `@parallel` performs local reductions on each worker with a final reduction on the calling process.\n\nNote that without a reducer function, `@parallel` executes asynchronously, i.e. it spawns independent tasks on all available workers and returns immediately without waiting for completion. To wait for completion, prefix the call with `@sync`, like :\n\n    @sync @parallel for var = range\n        body\n    end\n\"\"\"\n:@parallel\n\ndoc\"\"\"\n    throw(e)\n\nThrow an object as an exception\n\"\"\"\nthrow\n\ndoc\"\"\"\n    isxdigit(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is a valid hexadecimal digit, or whether this is true for all elements of a string.\n\"\"\"\nisxdigit\n\ndoc\"\"\"\n    fill(x, dims)\n\nCreate an array filled with the value `x`. For example, `fill(1.0, (10,10))` returns a 10x10 array of floats, with each element initialized to `1.0`.\n\nIf `x` is an object reference, all elements will refer to the same object. `fill(Foo(), dims)` will return an array filled with the result of evaluating `Foo()` once.\n\"\"\"\nfill\n\ndoc\"\"\"\n    rol!(dest::BitArray{1}, src::BitArray{1}, i::Integer) -> BitArray{1}\n\nPerforms a left rotation operation on `src` and put the result into `dest`.\n\"\"\"\nrol!(::BitArray,::BitArray,::Integer)\n\ndoc\"\"\"\n    rol!(B::BitArray{1}, i::Integer) -> BitArray{1}\n\nPerforms a left rotation operation on `B`.\n\"\"\"\nrol!(::BitArray,::Integer)\n\ndoc\"\"\"\n```rst\n..  issubset(a, b)\n           \u2286(a,b) -> Bool\n           \u2288(a,b) -> Bool\n           \u228a(a,b) -> Bool\n\nDetermine whether every element of ``a`` is also in ``b``, using :func:`in`.\n```\n\"\"\"\nissubset(a,b)\n\ndoc\"\"\"\n```rst\n..  issubset(A, S) -> Bool\n             \u2286(A,S) -> Bool\n\nReturn ``true`` if ``A`` is a subset of or equal to ``S``.\n```\n\"\"\"\nissubset\n\ndoc\"\"\"\n    istriu(A) -> Bool\n\nTest whether a matrix is upper triangular.\n\"\"\"\nistriu\n\ndoc\"\"\"\n```rst\n..  map!(function, collection)\n\nIn-place version of :func:`map`.\n```\n\"\"\"\nmap!(f,collection)\n\ndoc\"\"\"\n```rst\n..  map!(function, destination, collection...)\n\nLike :func:`map`, but stores the result in ``destination`` rather than a\nnew collection. ``destination`` must be at least as large as the first\ncollection.\n```\n\"\"\"\nmap!(f,destination,collection...)\n\ndoc\"\"\"\n```rst\n..  unescape_string(s::AbstractString) -> AbstractString\n\nGeneral unescaping of traditional C and Unicode escape sequences. Reverse of :func:`escape_string`. See also :func:`print_unescaped`.\n```\n\"\"\"\nunescape_string\n\ndoc\"\"\"\n    redirect_stdout()\n\nCreate a pipe to which all C and Julia level `STDOUT` output will be redirected. Returns a tuple `(rd,wr)` representing the pipe ends. Data written to `STDOUT` may now be read from the rd end of the pipe. The wr end is given for convenience in case the old `STDOUT` object was cached by the user and needs to be replaced elsewhere.\n\"\"\"\nredirect_stdout\n\ndoc\"\"\"\n    redirect_stdout(stream)\n\nReplace `STDOUT` by stream for all C and julia level output to `STDOUT`. Note that `stream` must be a TTY, a `Pipe` or a `TCPSocket`.\n\"\"\"\nredirect_stdout(stream)\n\ndoc\"\"\"\n    print_with_color(color::Symbol, [io], strings...)\n\nPrint strings in a color specified as a symbol, for example `:red` or `:blue`.\n\"\"\"\nprint_with_color\n\ndoc\"\"\"\n    stringmime(mime, x)\n\nReturns an `AbstractString` containing the representation of `x` in the requested `mime` type. This is similar to `reprmime` except that binary data is base64-encoded as an ASCII string.\n\"\"\"\nstringmime\n\ndoc\"\"\"\n    ischardev(path) -> Bool\n\nReturns `true` if `path` is a character device, `false` otherwise.\n\"\"\"\nischardev\n\ndoc\"\"\"\n    zero(x)\n\nGet the additive identity element for the type of `x` (`x` can also specify the type itself).\n\"\"\"\nzero\n\ndoc\"\"\"\n    any(itr) -> Bool\n\nTest whether any elements of a boolean collection are `true`.\n\"\"\"\nany(itr)\n\ndoc\"\"\"\n    any(A, dims)\n\nTest whether any values along the given dimensions of an array are `true`.\n\"\"\"\nany(::AbstractArray,dims)\n\ndoc\"\"\"\n    any(p, itr) -> Bool\n\nDetermine whether predicate `p` returns `true` for any elements of `itr`.\n\"\"\"\nany(p,itr)\n\ndoc\"\"\"\n    cosc(x)\n\nCompute $\\cos(\\pi x) / x - \\sin(\\pi x) / (\\pi x^2)$ if $x \\neq 0$, and $0$\nif $x = 0$. This is the derivative of `sinc(x)`.\n\"\"\"\ncosc\n\ndoc\"\"\"\n    getkey(collection, key, default)\n\nReturn the key matching argument `key` if one exists in `collection`, otherwise return `default`.\n\"\"\"\ngetkey\n\ndoc\"\"\"\n    At_ldiv_Bt(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d40$ \\ $B\u1d40$\n\"\"\"\nAt_ldiv_Bt\n\ndoc\"\"\"\n    Ac_mul_Bc(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d34 B\u1d34$\n\"\"\"\nAc_mul_Bc\n\ndoc\"\"\"\n    acotd(x)\n\nCompute the inverse cotangent of `x`, where the output is in degrees\n\"\"\"\nacotd\n\ndoc\"\"\"\n    zeros(type, dims)\n\nCreate an array of all zeros of specified type. The type defaults to Float64 if not specified.\n\"\"\"\nzeros(t,dims)\n\ndoc\"\"\"\n    zeros(A)\n\nCreate an array of all zeros with the same element type and shape as `A`.\n\"\"\"\nzeros(A)\n\ndoc\"\"\"\n    symbol(x...) -> Symbol\n\nCreate a `Symbol` by concatenating the string representations of the arguments together.\n\"\"\"\nsymbol\n\ndoc\"\"\"\n    zeta(s)\n\nRiemann zeta function $\\zeta(s)$.\n\"\"\"\nzeta(s)\n\ndoc\"\"\"\n    zeta(s, z)\n\nHurwitz zeta function $\\zeta(s, z)$.  (This is equivalent to\nthe Riemann zeta function $\\zeta(s)$ for the case of `z=1`.)\n\"\"\"\nzeta(s,z)\n\ndoc\"\"\"\n    A_mul_Bt(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u22c5B\u1d40$\n\"\"\"\nA_mul_Bt\n\ndoc\"\"\"\n    vecnorm(A, [p])\n\nFor any iterable container `A` (including arrays of any dimension) of numbers (or any element type for which `norm` is defined), compute the `p`-norm (defaulting to `p=2`) as if `A` were a vector of the corresponding length.\n\nFor example, if `A` is a matrix and `p=2`, then this is equivalent to the Frobenius norm.\n\"\"\"\nvecnorm\n\ndoc\"\"\"\n    isvalid(value) -> Bool\n\nReturns `true` if the given value is valid for its type, which currently can be one of `Char`, `ASCIIString`, `UTF8String`, `UTF16String`, or `UTF32String`.\n\"\"\"\nisvalid(value)\n\ndoc\"\"\"\n    isvalid(T, value) -> Bool\n\nReturns `true` if the given value is valid for that type. Types currently can be `Char`, `ASCIIString`, `UTF8String`, `UTF16String`, or `UTF32String` Values for `Char` can be of type `Char` or `UInt32` Values for `ASCIIString` and `UTF8String` can be of that type, or `Vector{UInt8}` Values for `UTF16String` can be `UTF16String` or `Vector{UInt16}` Values for `UTF32String` can be `UTF32String`, `Vector{Char}` or `Vector{UInt32}`\n\"\"\"\nisvalid(T,value)\n\ndoc\"\"\"\n    isvalid(str, i)\n\nTells whether index `i` is valid for the given string\n\"\"\"\nisvalid(::AbstractString,i)\n\ndoc\"\"\"\n```rst\n..  esc(e::ANY)\n\nOnly valid in the context of an ``Expr`` returned from a macro. Prevents the macro hygiene pass from turning embedded variables into gensym variables. See the :ref:`man-macros`\nsection of the Metaprogramming chapter of the manual for more details and examples.\n```\n\"\"\"\nesc\n\ndoc\"\"\"\n    bitbroadcast(f, As...)\n\nLike `broadcast`, but allocates a `BitArray` to store the result, rather then an `Array`.\n\"\"\"\nbitbroadcast\n\ndoc\"\"\"\n    set_zero_subnormals(yes::Bool) -> Bool\n\nIf `yes` is `false`, subsequent floating-point operations follow rules for IEEE arithmetic on subnormal values (\"denormals\"). Otherwise, floating-point operations are permitted (but not required) to convert subnormal inputs or outputs to zero. Returns `true` unless `yes==true` but the hardware does not support zeroing of subnormal numbers.\n\n`set_zero_subnormals(true)` can speed up some computations on some hardware. However, it can break identities such as `(x-y==0) == (x==y)`.\n\"\"\"\nset_zero_subnormals\n\ndoc\"\"\"\n    take(iter, n)\n\nAn iterator that generates at most the first `n` elements of `iter`.\n\"\"\"\ntake\n\ndoc\"\"\"\n    combinations(array, n)\n\nGenerate all combinations of `n` elements from an indexable object. Because the number of combinations can be very large, this function returns an iterator object. Use `collect(combinations(array,n))` to get an array of all combinations.\n\"\"\"\ncombinations\n\ndoc\"\"\"\n    frexp(val)\n\nReturn `(x,exp)` such that `x` has a magnitude in the interval $[1/2, 1)$ or 0,\nand val = $x \\times 2^{exp}$.\n\"\"\"\nfrexp\n\ndoc\"\"\"\n    sortcols(A, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])\n\nSort the columns of matrix `A` lexicographically.\n\"\"\"\nsortcols\n\ndoc\"\"\"\n    rsplit(string, [chars]; limit=0, keep=true)\n\nSimilar to `split`, but starting from the end of the string.\n\"\"\"\nrsplit\n\ndoc\"\"\"\n    trace(M)\n\nMatrix trace\n\"\"\"\ntrace\n\ndoc\"\"\"\n    runtests([tests=[\"all\"] [, numcores=iceil(CPU_CORES/2) ]])\n\nRun the Julia unit tests listed in `tests`, which can be either a string or an array of strings, using `numcores` processors. (not exported)\n\"\"\"\nruntests\n\ndoc\"\"\"\n    time_ns()\n\nGet the time in nanoseconds. The time corresponding to 0 is undefined, and wraps every 5.8 years.\n\"\"\"\ntime_ns\n\ndoc\"\"\"\n    exponent(x) -> Int\n\nGet the exponent of a normalized floating-point number.\n\"\"\"\nexponent\n\ndoc\"\"\"\n    rsearchindex(string, substring, [start])\n\nSimilar to `rsearch`, but return only the start index at which the substring is found, or `0` if it is not.\n\"\"\"\nrsearchindex\n\ndoc\"\"\"\n    muladd(x, y, z)\n\nCombined multiply-add, computes `x*y+z` in an efficient manner. This may on some systems be equivalent to `x*y+z`, or to `fma(x,y,z)`. `muladd` is used to improve performance. See `fma`.\n\"\"\"\nmuladd\n\ndoc\"\"\"\n    unsigned(x) -> Unsigned\n\nConvert a number to an unsigned integer. If the argument is signed, it is reinterpreted as unsigned without checking for negative values.\n\"\"\"\nunsigned\n\ndoc\"\"\"\n```rst\n..  eigfact(A,[irange,][vl,][vu,][permute=true,][scale=true]) -> Eigen\n\nComputes the eigenvalue decomposition of ``A``, returning an ``Eigen``\nfactorization object ``F`` which contains the eigenvalues in ``F[:values]``\nand the eigenvectors in the columns of the matrix ``F[:vectors]``.\n(The ``k``\\ th eigenvector can be obtained from the slice ``F[:vectors][:, k]``.)\n\nThe following functions are available for ``Eigen`` objects: ``inv``,\n``det``.\n\nIf ``A`` is :class:`Symmetric`, :class:`Hermitian` or :class:`SymTridiagonal`,\nit is possible to calculate only a subset of the eigenvalues by specifying\neither a :class:`UnitRange` ``irange`` covering indices of the sorted\neigenvalues or a pair ``vl`` and ``vu`` for the lower and upper boundaries\nof the eigenvalues.\n\nFor general nonsymmetric matrices it is possible to specify how the matrix\nis balanced before the eigenvector calculation. The option ``permute=true``\npermutes the matrix to become closer to upper triangular, and ``scale=true``\nscales the matrix by its diagonal elements to make rows and columns more\nequal in norm. The default is ``true`` for both options.\n```\n\"\"\"\neigfact(A,?,?,?,?)\n\ndoc\"\"\"\n```rst\n..  eigfact(A, B) -> GeneralizedEigen\n\nComputes the generalized eigenvalue decomposition of ``A`` and ``B``,\nreturning a ``GeneralizedEigen`` factorization object ``F`` which contains\nthe generalized eigenvalues in ``F[:values]`` and the generalized\neigenvectors in the columns of the matrix ``F[:vectors]``. (The ``k``\\ th\ngeneralized eigenvector can be obtained from the slice ``F[:vectors][:,\nk]``.)\n```\n\"\"\"\neigfact(A,B)\n\ndoc\"\"\"\n    rowvals(A)\n\nReturn a vector of the row indices of `A`, and any modifications to the returned vector will mutate `A` as well. Given the internal storage format of sparse matrices, providing access to how the row indices are stored internally can be useful in conjunction with iterating over structural nonzero values. See `nonzeros(A)` and `nzrange(A, col)`.\n\"\"\"\nrowvals\n\ndoc\"\"\"\n    mkdir(path, [mode])\n\nMake a new directory with name `path` and permissions `mode`. `mode` defaults to 0o777, modified by the current file creation mask.\n\"\"\"\nmkdir\n\ndoc\"\"\"\n    bytestring(::Ptr{UInt8}, [length])\n\nCreate a string from the address of a C (0-terminated) string encoded in ASCII or UTF-8. A copy is made; the ptr can be safely freed. If `length` is specified, the string does not have to be 0-terminated.\n\"\"\"\nbytestring(::Ptr{UInt8},?)\n\ndoc\"\"\"\n    bytestring(s)\n\nConvert a string to a contiguous byte array representation appropriate for passing it to C functions. The string will be encoded as either ASCII or UTF-8.\n\"\"\"\nbytestring(s)\n\ndoc\"\"\"\n    midpoints(e)\n\nCompute the midpoints of the bins with edges `e`. The result is a vector/range of length `length(e) - 1`. Note: Julia does not ignore `NaN` values in the computation.\n\"\"\"\nmidpoints\n\ndoc\"\"\"\n    .+(x, y)\n\nElement-wise addition operator.\n\"\"\"\nBase.(:(.+))\n\ndoc\"\"\"\n    reverseind(v, i)\n\nGiven an index `i` in `reverse(v)`, return the corresponding index in `v` so that `v[reverseind(v,i)] == reverse(v)[i]`. (This can be nontrivial in the case where `v` is a Unicode string.)\n\"\"\"\nreverseind\n\ndoc\"\"\"\n    nan(f)\n\nReturns NaN (not-a-number) of the floating point type `f` or of the same floating point type as `f`\n\"\"\"\nnan\n\ndoc\"\"\"\n    float(x)\n\nConvert a number, array, or string to a `AbstractFloat` data type. For numeric data, the smallest suitable `AbstractFloat` type is used. Converts strings to `Float64`.\n\"\"\"\nfloat\n\ndoc\"\"\"\n    include_dependency(path::AbstractString)\n\nIn a module, declare that the file specified by `path` (relative or absolute) is a dependency for precompilation; that is, the module will need to be recompiled if this file changes.\n\nThis is only needed if your module depends on a file that is not used via `include`. It has no effect outside of compilation.\n\"\"\"\ninclude_dependency\n\ndoc\"\"\"\n    randn!([rng], A::Array{Float64,N})\n\nFill the array `A` with normally-distributed (mean 0, standard deviation 1) random numbers. Also see the rand function.\n\"\"\"\nrandn!\n\ndoc\"\"\"\n    ldexp(x, n)\n\nCompute $x \\times 2^n$.\n\"\"\"\nldexp\n\ndoc\"\"\"\n    quadgk(f, a,b,c...; reltol=sqrt(eps), abstol=0, maxevals=10^7, order=7, norm=vecnorm)\n\nNumerically integrate the function `f(x)` from `a` to `b`, and optionally over additional intervals `b` to `c` and so on. Keyword options include a relative error tolerance `reltol` (defaults to `sqrt(eps)` in the precision of the endpoints), an absolute error tolerance `abstol` (defaults to 0), a maximum number of function evaluations `maxevals` (defaults to `10^7`), and the `order` of the integration rule (defaults to 7).\n\nReturns a pair `(I,E)` of the estimated integral `I` and an estimated upper bound on the absolute error `E`. If `maxevals` is not exceeded then `E <= max(abstol, reltol*norm(I))` will hold. (Note that it is useful to specify a positive `abstol` in cases where `norm(I)` may be zero.)\n\nThe endpoints `a` etcetera can also be complex (in which case the integral is performed over straight-line segments in the complex plane). If the endpoints are `BigFloat`, then the integration will be performed in `BigFloat` precision as well (note: it is advisable to increase the integration `order` in rough proportion to the precision, for smooth integrands). More generally, the precision is set by the precision of the integration endpoints (promoted to floating-point types).\n\nThe integrand `f(x)` can return any numeric scalar, vector, or matrix type, or in fact any type supporting `+`, `-`, multiplication by real values, and a `norm` (i.e., any normed vector space). Alternatively, a different norm can be specified by passing a `norm`-like function as the `norm` keyword argument (which defaults to `vecnorm`).\n\n\\[Only one-dimensional integrals are provided by this function. For multi-dimensional integration (cubature), there are many different algorithms (often much better than simple nested 1d integrals) and the optimal choice tends to be very problem-dependent. See the Julia external-package listing for available algorithms for multidimensional integration or other specialized tasks (such as integrals of highly oscillatory or singular functions).\\]\n\nThe algorithm is an adaptive Gauss-Kronrod integration technique: the integral in each interval is estimated using a Kronrod rule (`2*order+1` points) and the error is estimated using an embedded Gauss rule (`order` points). The interval with the largest error is then subdivided into two intervals and the process is repeated until the desired error tolerance is achieved.\n\nThese quadrature rules work best for smooth functions within each interval, so if your function has a known discontinuity or other singularity, it is best to subdivide your interval to put the singularity at an endpoint. For example, if `f` has a discontinuity at `x=0.7` and you want to integrate from 0 to 1, you should use `quadgk(f, 0,0.7,1)` to subdivide the interval at the point of discontinuity. The integrand is never evaluated exactly at the endpoints of the intervals, so it is possible to integrate functions that diverge at the endpoints as long as the singularity is integrable (for example, a `log(x)` or `1/sqrt(x)` singularity).\n\nFor real-valued endpoints, the starting and/or ending points may be infinite. (A coordinate transformation is performed internally to map the infinite interval to a finite one.)\n\"\"\"\nquadgk\n\ndoc\"\"\"\n    hist(v[, n]) -> e, counts\n\nCompute the histogram of `v`, optionally using approximately `n` bins. The return values are a range `e`, which correspond to the edges of the bins, and `counts` containing the number of elements of `v` in each bin. Note: Julia does not ignore `NaN` values in the computation.\n\"\"\"\nhist(v,n::Int=?)\n\ndoc\"\"\"\n    hist(v, e) -> e, counts\n\nCompute the histogram of `v` using a vector/range `e` as the edges for the bins. The result will be a vector of length `length(e) - 1`, such that the element at location `i` satisfies `sum(e[i] .< v .<= e[i+1])`. Note: Julia does not ignore `NaN` values in the computation.\n\"\"\"\nhist(v,e)\n\ndoc\"\"\"\n    islower(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is a lowercase letter, or whether this is true for all elements of a string. A character is classified as lowercase if it belongs to Unicode category Ll, Letter: Lowercase.\n\"\"\"\nislower\n\ndoc\"\"\"\n```rst\n..  nthperm!(v, k)\n\nIn-place version of :func:`nthperm`.\n```\n\"\"\"\nnthperm!\n\ndoc\"\"\"\n    cell(dims)\n\nConstruct an uninitialized cell array (heterogeneous array). `dims` can be either a tuple or a series of integer arguments.\n\"\"\"\ncell\n\ndoc\"\"\"\n    readbytes(stream, nb=typemax(Int); all=true)\n\nRead at most `nb` bytes from the stream, returning a `Vector{UInt8}` of the bytes read.\n\nIf `all` is `true` (the default), this function will block repeatedly trying to read all requested bytes, until an error or end-of-file occurs. If `all` is `false`, at most one `read` call is performed, and the amount of data returned is device-dependent. Note that not all stream types support the `all` option.\n\"\"\"\nreadbytes\n\ndoc\"\"\"\n```rst\n..  eig(A,[irange,][vl,][vu,][permute=true,][scale=true]) -> D, V\n\nComputes eigenvalues and eigenvectors of ``A``. See :func:`eigfact` for\ndetails on the ``balance`` keyword argument.\n\n.. doctest::\n\n   julia> eig([1.0 0.0 0.0; 0.0 3.0 0.0; 0.0 0.0 18.0])\n   ([1.0,3.0,18.0],\n   3x3 Array{Float64,2}:\n    1.0  0.0  0.0\n    0.0  1.0  0.0\n    0.0  0.0  1.0)\n\n``eig`` is a wrapper around :func:`eigfact`, extracting all parts of the\nfactorization to a tuple; where possible, using :func:`eigfact` is\nrecommended.\n```\n\"\"\"\neig(A,?,?,?)\n\ndoc\"\"\"\n```rst\n..  eig(A, B) -> D, V\n\nComputes generalized eigenvalues and vectors of ``A`` with respect to ``B``.\n\n``eig`` is a wrapper around :func:`eigfact`, extracting all parts of the\nfactorization to a tuple; where possible, using :func:`eigfact` is\nrecommended.\n```\n\"\"\"\neig(A,B)\n\ndoc\"\"\"\n    exp2(x)\n\nCompute $2^x$.\n\"\"\"\nexp2\n\ndoc\"\"\"\n    gcd(x,y)\n\nGreatest common (positive) divisor (or zero if `x` and `y` are both zero).\n\"\"\"\ngcd\n\ndoc\"\"\"\n    signbit(x)\n\nReturns `true` if the value of the sign of `x` is negative, otherwise `false`.\n\"\"\"\nsignbit\n\ndoc\"\"\"\n    istaskstarted(task) -> Bool\n\nTell whether a task has started executing.\n\"\"\"\nistaskstarted\n\ndoc\"\"\"\n    clamp(x, lo, hi)\n\nReturn `x` if `lo <= x <= hi`. If `x < lo`, return `lo`. If `x > hi`, return `hi`. Arguments are promoted to a common type. Operates elementwise over `x` if it is an array.\n\"\"\"\nclamp\n\ndoc\"\"\"\n    cscd(x)\n\nCompute the cosecant of `x`, where `x` is in degrees\n\"\"\"\ncscd\n\ndoc\"\"\"\n    tryparse(type, str, [base])\n\nLike `parse`, but returns a `Nullable` of the requested type. The result will be null if the string does not contain a valid number.\n\"\"\"\ntryparse\n\ndoc\"\"\"\n    lexless(x, y)\n\nDetermine whether `x` is lexicographically less than `y`.\n\"\"\"\nlexless\n\ndoc\"\"\"\n    all!(r, A)\n\nTest whether all values in `A` along the singleton dimensions of `r` are `true`, and write results to `r`.\n\"\"\"\nall!\n\ndoc\"\"\"\n    is_assigned_char(c) -> Bool\n\nReturns `true` if the given char or integer is an assigned Unicode code point.\n\"\"\"\nis_assigned_char\n\ndoc\"\"\"\n    exit([code])\n\nQuit (or control-D at the prompt). The default exit code is zero, indicating that the processes completed successfully.\n\"\"\"\nexit\n\ndoc\"\"\"\n    istext(m::MIME)\n\nDetermine whether a MIME type is text data.\n\"\"\"\nistext\n\ndoc\"\"\"\n    merge!(collection, others...)\n\nUpdate collection with pairs from the other collections\n\"\"\"\nmerge!\n\ndoc\"\"\"\n    realpath(path::AbstractString) -> AbstractString\n\nCanonicalize a path by expanding symbolic links and removing \".\" and \"..\" entries.\n\"\"\"\nrealpath\n\ndoc\"\"\"\n    skipchars(stream, predicate; linecomment::Char)\n\nAdvance the stream until before the first character for which `predicate` returns `false`. For example `skipchars(stream, isspace)` will skip all whitespace. If keyword argument `linecomment` is specified, characters from that character through the end of a line will also be skipped.\n\"\"\"\nskipchars\n\ndoc\"\"\"\n    realmin(T)\n\nThe smallest in absolute value non-subnormal value representable by the given floating-point DataType `T`.\n\"\"\"\nrealmin\n\ndoc\"\"\"\n    union!(s, iterable)\n\nUnion each element of `iterable` into set `s` in-place.\n\"\"\"\nunion!\n\ndoc\"\"\"\n    At_ldiv_B(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d40$ \\ $B$\n\"\"\"\nAt_ldiv_B\n\ndoc\"\"\"\n    dot(x, y)\n    \u22c5(x,y)\n\nCompute the dot product. For complex vectors, the first vector is conjugated.\n\"\"\"\ndot\n\ndoc\"\"\"\n    cond(M, [p])\n\nCondition number of the matrix `M`, computed using the operator `p`-norm. Valid values for `p` are `1`, `2` (default), or `Inf`.\n\"\"\"\ncond\n\ndoc\"\"\"\n    deepcopy(x)\n\nCreate a deep copy of `x`: everything is copied recursively, resulting in a fully independent object. For example, deep-copying an array produces a new array whose elements are deep copies of the original elements. Calling `deepcopy` on an object should generally have the same effect as serializing and then deserializing it.\n\nAs a special case, functions can only be actually deep-copied if they are anonymous, otherwise they are just copied. The difference is only relevant in the case of closures, i.e. functions which may contain hidden internal references.\n\nWhile it isn't normally necessary, user-defined types can override the default `deepcopy` behavior by defining a specialized version of the function `deepcopy_internal(x::T, dict::ObjectIdDict)` (which shouldn't otherwise be used), where `T` is the type to be specialized for, and `dict` keeps track of objects copied so far within the recursion. Within the definition, `deepcopy_internal` should be used in place of `deepcopy`, and the `dict` variable should be updated as appropriate before returning.\n\"\"\"\ndeepcopy\n\ndoc\"\"\"\n    widen(type | x)\n\nIf the argument is a type, return a \"larger\" type (for numeric types, this will be\na type with at least as much range and precision as the argument, and usually more).\nOtherwise the argument `x` is converted to `widen(typeof(x))`.\n\n```jldoctest\njulia> widen(Int32)\nInt64\n\njulia> widen(1.5f0)\n1.5\n```\n\"\"\"\nwiden\n\ndoc\"\"\"\n    @eval\n\nEvaluate an expression and return the value.\n\"\"\"\n:@eval\n\ndoc\"\"\"\n    eval([m::Module], expr::Expr)\n\nEvaluate an expression in the given module and return the result. Every `Module` (except those defined with `baremodule`) has its own 1-argument definition of `eval`, which evaluates expressions in that module.\n\"\"\"\neval\n\ndoc\"\"\"\n```rst\n..  Set([itr])\n\nConstruct a :obj:`Set` of the values generated by the given iterable object, or an empty set.\nShould be used instead of :obj:`IntSet` for sparse integer sets, or for sets of arbitrary objects.\n```\n\"\"\"\nSet\n\ndoc\"\"\"\n    erf(x)\n\nCompute the error function of `x`, defined by\n$\\frac{2}{\\sqrt{\\pi}} \\int_0^x e^{-t^2} dt$\nfor arbitrary complex `x`.\n\"\"\"\nerf\n\ndoc\"\"\"\n    lcm(x,y)\n\nLeast common (non-negative) multiple.\n\"\"\"\nlcm\n\ndoc\"\"\"\n    isprint(c::Union{Char,AbstractString}) -> Bool\n\nTests whether a character is printable, including spaces, but not a control character. For strings, tests whether this is true for all elements of the string.\n\"\"\"\nisprint\n\ndoc\"\"\"\n    splitdir(path::AbstractString) -> (AbstractString,AbstractString)\n\nSplit a path into a tuple of the directory name and file name.\n\"\"\"\nsplitdir\n\ndoc\"\"\"\n    sign(x)\n\nReturn zero if `x==0` and $x/|x|$ otherwise (i.e., \u00b11 for real `x`).\n\"\"\"\nsign\n\ndoc\"\"\"\n    signed(x)\n\nConvert a number to a signed integer. If the argument is unsigned, it is reinterpreted as signed without checking for overflow.\n\"\"\"\nsigned\n\ndoc\"\"\"\n    Val{c}\n\nCreate a \"value type\" out of `c`, which must be an `isbits` value. The intent of this construct is to be able to dispatch on constants, e.g., `f(Val{false})` allows you to dispatch directly (at compile-time) to an implementation `f(::Type{Val{false}})`, without having to test the boolean value at runtime.\n\"\"\"\nVal\n\ndoc\"\"\"\n    iswritable(path) -> Bool\n\nReturns `true` if the current user has permission to write to `path`, `false` otherwise.\n\"\"\"\niswritable\n\ndoc\"\"\"\n    |(x, y)\n\nBitwise or\n\"\"\"\nBase.(:(|))\n\ndoc\"\"\"\n    yieldto(task, arg = nothing)\n\nSwitch to the given task. The first time a task is switched to, the task's function is called with no arguments. On subsequent switches, `arg` is returned from the task's last call to `yieldto`. This is a low-level call that only switches tasks, not considering states or scheduling in any way. Its use is discouraged.\n\"\"\"\nyieldto\n\ndoc\"\"\"\n    readandwrite(command)\n\nStarts running a command asynchronously, and returns a tuple (stdout,stdin,process) of the output stream and input stream of the process, and the process object itself.\n\"\"\"\nreadandwrite\n\ndoc\"\"\"\n    splitdrive(path::AbstractString) -> (AbstractString,AbstractString)\n\nOn Windows, split a path into the drive letter part and the path part. On Unix systems, the first component is always the empty string.\n\"\"\"\nsplitdrive\n\ndoc\"\"\"\n    pop!(collection, key[, default])\n\nDelete and return the mapping for `key` if it exists in `collection`,\notherwise return `default`, or throw an error if default is not specified.\n\"\"\"\npop!(collection,key,?)\n\ndoc\"\"\"\n    pop!(collection) -> item\n\nRemove the last item in `collection` and return it.\n\n```jldoctest\njulia> A=[1, 2, 3, 4, 5, 6]\n6-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n\njulia> pop!(A)\n6\n\njulia> A\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n```\n\"\"\"\npop!(collection)\n\ndoc\"\"\"\n    filter(function, collection)\n\nReturn a copy of `collection`, removing elements for which `function` is `false`. For associative collections, the function is passed two arguments (key and value).\n\"\"\"\nfilter\n\ndoc\"\"\"\n```rst\n..  randperm([rng,] n)\n\nConstruct a random permutation of length ``n``. The optional ``rng`` argument\nspecifies a random number generator, see :ref:`Random Numbers <random-numbers>`.\n```\n\"\"\"\nrandperm\n\ndoc\"\"\"\n    seekend(s)\n\nSeek a stream to its end.\n\"\"\"\nseekend\n\ndoc\"\"\"\n    DivideError()\n\nInteger division was attempted with a denominator value of 0.\n\"\"\"\nDivideError\n\ndoc\"\"\"\n    AssertionError([msg])\n\nThe asserted condition did not evaluate to `true`.\nOptional argument `msg` is a descriptive error string.\n\"\"\"\nAssertionError\n\ndoc\"\"\"\n    ror(B::BitArray{1}, i::Integer) -> BitArray{1}\n\nPerforms a right rotation operation.\n\"\"\"\nror\n\ndoc\"\"\"\n    Ac_ldiv_Bc(A, B)\n\nFor matrices or vectors $A$ and $B$, calculates $A\u1d34$ \\ $B\u1d34$\n\"\"\"\nAc_ldiv_Bc\n\ndoc\"\"\"\n```rst\n..  @enum EnumName EnumValue1[=x] EnumValue2[=y]\n\nCreate an :obj:`Enum` type with name ``EnumName`` and enum member values of ``EnumValue1`` and ``EnumValue2`` with optional assigned values of ``x`` and ``y``, respectively. ``EnumName`` can be used just like other types and enum member values as regular values, such as\n\n.. doctest::\n\n   julia> @enum FRUIT apple=1 orange=2 kiwi=3\n\n   julia> f(x::FRUIT) = \"I'm a FRUIT with value: $(Int(x))\"\n   f (generic function with 1 method)\n\n   julia> f(apple)\n   \"I'm a FRUIT with value: 1\"\n```\n\"\"\"\n:@enum\n\ndoc\"\"\"\n    asind(x)\n\nCompute the inverse sine of `x`, where the output is in degrees\n\"\"\"\nasind\n\ndoc\"\"\"\n    widemul(x, y)\n\nMultiply `x` and `y`, giving the result as a larger type.\n\"\"\"\nwidemul\n\ndoc\"\"\"\n    unsafe_pointer_to_objref(p::Ptr)\n\nConvert a `Ptr` to an object reference. Assumes the pointer refers to a valid heap-allocated Julia object. If this is not the case, undefined behavior results, hence this function is considered \"unsafe\" and should be used with care.\n\"\"\"\nunsafe_pointer_to_objref\n\ndoc\"\"\"\n    chomp(string)\n\nRemove a trailing newline from a string.\n\"\"\"\nchomp\n\ndoc\"\"\"\n    enumerate(iter)\n\nAn iterator that yields `(i, x)` where `i` is an index starting at 1, and\n`x` is the `i`th value from the given iterator. It's useful when you need\nnot only the values `x` over which you are iterating, but also the index `i`\nof the iterations.\n\n```jldoctest\njulia> a = [\"a\", \"b\", \"c\"];\n\njulia> for (index, value) in enumerate(a)\n           println(\"$index $value\")\n       end\n1 a\n2 b\n3 c\n```\n\"\"\"\nenumerate\n\ndoc\"\"\"\n    >=(x, y)\n    \u2265(x,y)\n\nGreater-than-or-equals comparison operator.\n\"\"\"\nBase.(:(>=))\n\ndoc\"\"\"\n    dawson(x)\n\nCompute the Dawson function (scaled imaginary error function) of `x`,\ndefined by $\\frac{\\sqrt{\\pi}}{2} e^{-x^2} \\operatorname{erfi}(x)$.\n\"\"\"\ndawson\n\ndoc\"\"\"\n    current_task()\n\nGet the currently running `Task`.\n\"\"\"\ncurrent_task\n\n# Dates\n\ndoc\"\"\"\n    firstdayofweek(dt::TimeType) -> TimeType\n\nAdjusts `dt` to the Monday of its week.\n\"\"\"\nDates.firstdayofweek\n\ndoc\"\"\"\n    datetime2unix(dt::DateTime) -> Float64\n\nTakes the given `DateTime` and returns the number of seconds since the unix epoch as a `Float64`.\n\"\"\"\nDates.datetime2unix\n\ndoc\"\"\"\n    dayofweekofmonth(dt::TimeType) -> Int\n\nFor the day of week of `dt`, returns which number it is in `dt`'s month. So if the day of the week of `dt` is Monday, then `1 = First Monday of the month, 2 = Second Monday of the month, etc.` In the range 1:5.\n\"\"\"\nDates.dayofweekofmonth\n\ndoc\"\"\"\n    monthabbr(dt::TimeType; locale=\"english\") -> AbstractString\n\nReturn the abbreviated month name of the `Date` or `DateTime` in the given `locale`.\n\"\"\"\nDates.monthabbr\n\ndoc\"\"\"\n    datetime2julian(dt::DateTime) -> Float64\n\nTakes the given `DateTime` and returns the number of Julian calendar days since the julian epoch as a `Float64`.\n\"\"\"\nDates.datetime2julian\n\ndoc\"\"\"\n    dayabbr(dt::TimeType; locale=\"english\") -> AbstractString\n\nReturn the abbreviated name corresponding to the day of the week of the `Date` or `DateTime` in the given `locale`.\n\"\"\"\nDates.dayabbr\n\ndoc\"\"\"\n```rst\n..  DateTime(y, [m, d, h, mi, s, ms]) -> DateTime\n\nConstruct a ``DateTime`` type by parts. Arguments must be convertible to ``Int64``.\n```\n\"\"\"\nDates.DateTime(y)\n\ndoc\"\"\"\n```rst\n..  DateTime(periods::Period...) -> DateTime\n\nConstuct a ``DateTime`` type by ``Period`` type parts. Arguments may be in any order.\nDateTime parts not provided will default to the value of ``Dates.default(period)``.\n```\n\"\"\"\nDates.DateTime(periods::Dates.Period...)\n\ndoc\"\"\"\n```rst\n..  DateTime(f::Function, y[, m, d, h, mi, s]; step=Day(1), negate=false, limit=10000) -> DateTime\n\nCreate a ``DateTime`` through the adjuster API. The starting point will be constructed from the\nprovided ``y, m, d...`` arguments, and will be adjusted until ``f::Function`` returns ``true``. The step size in\nadjusting can be provided manually through the ``step`` keyword. If ``negate=true``, then the adjusting\nwill stop when ``f::Function`` returns ``false`` instead of ``true``. ``limit`` provides a limit to\nthe max number of iterations the adjustment API will pursue before throwing an error (in the case that ``f::Function`` is never satisfied).\n```\n\"\"\"\nDates.DateTime(f::Function, y)\n\ndoc\"\"\"\n```rst\n..  DateTime(dt::Date) -> DateTime\n\nConverts a ``Date`` type to a ``DateTime``.\nThe hour, minute, second, and millisecond parts of the new ``DateTime`` are assumed to be zero.\n```\n\"\"\"\nDates.DateTime(dt::Date)\n\ndoc\"\"\"\n```rst\n..  DateTime(dt::AbstractString, format::AbstractString; locale=\"english\") -> DateTime\n\nConstruct a ``DateTime`` type by parsing the ``dt`` date string following the pattern given in\nthe ``format`` string. The following codes can be used for constructing format strings:\n\n=============== ========= ===============================================================\nCode            Matches    Comment\n=============== ========= ===============================================================\n``y``           1996, 96  Returns year of 1996, 0096\n``m``           1, 01     Matches 1 or 2-digit months\n``u``           Jan       Matches abbreviated months according to the ``locale`` keyword\n``U``           January   Matches full month names according to the ``locale`` keyword\n``d``           1, 01     Matches 1 or 2-digit days\n``H``           00        Matches hours\n``M``           00        Matches minutes\n``S``           00        Matches seconds\n``s``           .500      Matches milliseconds\n``e``           Mon, Tues Matches abbreviated days of the week\n``E``           Monday    Matches full name days of the week\n``yyyymmdd``    19960101  Matches fixed-width year, month, and day\n=============== ========= ===============================================================\n\nAll characters not listed above are treated as delimiters between date and time slots.\nSo a ``dt`` string of \"1996-01-15T00:00:00.0\" would have a ``format`` string like \"y-m-dTH:M:S.s\".\n```\n\"\"\"\nDates.DateTime(dt::AbstractString, format::AbstractString)\n\ndoc\"\"\"\n```rst\n..  DateTime(dt::AbstractString, df::DateFormat) -> DateTime\n\nSimilar form as above for parsing a ``DateTime``, but passes a ``DateFormat`` object instead of a raw formatting string. It is more efficient if similarly formatted date strings will be parsed repeatedly to first create a ``DateFormat`` object then use this method for parsing.\n```\n\"\"\"\nDates.DateTime(dt::AbstractString, df::Dates.DateFormat)\n\ndoc\"\"\"\n    datetime2rata(dt::TimeType) -> Int64\n\nReturns the number of Rata Die days since epoch from the given `Date` or `DateTime`.\n\"\"\"\nDates.datetime2rata\n\ndoc\"\"\"\n    monthname(dt::TimeType; locale=\"english\") -> AbstractString\n\nReturn the full name of the month of the `Date` or `DateTime` in the given `locale`.\n\"\"\"\nDates.monthname\n\ndoc\"\"\"\n    dayname(dt::TimeType; locale=\"english\") -> AbstractString\n\nReturn the full day name corresponding to the day of the week of the `Date` or `DateTime` in the given `locale`.\n\"\"\"\nDates.dayname\n\ndoc\"\"\"\n    Date(y, [m, d]) -> Date\n\nConstruct a `Date` type by parts. Arguments must be convertible to `Int64`.\n\"\"\"\nDates.Date(y)\n\ndoc\"\"\"\n    Date(period::Period...) -> Date\n\nConstuct a `Date` type by `Period` type parts. Arguments may be in any order. `Date` parts not provided will default to the value of `Dates.default(period)`.\n\"\"\"\nDates.Date(period::Dates.Period...)\n\ndoc\"\"\"\n    Date(f::Function, y[, m]; step=Day(1), negate=false, limit=10000) -> Date\n\nCreate a `Date` through the adjuster API. The starting point will be constructed from the provided `y, m` arguments, and will be adjusted until `f::Function` returns `true`. The step size in adjusting can be provided manually through the `step` keyword. If `negate=true`, then the adjusting will stop when `f::Function` returns `false` instead of `true`. `limit` provides a limit to the max number of iterations the adjustment API will pursue before throwing an error (given that `f::Function` is never satisfied).\n\"\"\"\nDates.Date(f::Function, y)\n\ndoc\"\"\"\n    Date(dt::DateTime) -> Date\n\nConverts a `DateTime` type to a `Date`. The hour, minute, second, and millisecond parts of the `DateTime` are truncated, so only the year, month and day parts are used in construction.\n\"\"\"\nDates.Date(dt::DateTime)\n\ndoc\"\"\"\n    Date(dt::AbstractString, format::AbstractString; locale=\"english\") -> Date\n\nConstruct a `Date` type by parsing a `dt` date string following the pattern given in the `format` string. Follows the same conventions as `DateTime` above.\n\"\"\"\nDates.Date(dt::AbstractString, format::AbstractString)\n\ndoc\"\"\"\n    Date(dt::AbstractString, df::DateFormat) -> Date\n\nParse a date from a date string `dt` using a `DateFormat` object `df`.\n\"\"\"\nDates.Date(dt::AbstractString, df::Dates.DateFormat)\n\ndoc\"\"\"\n    firstdayofmonth(dt::TimeType) -> TimeType\n\nAdjusts `dt` to the first day of its month.\n\"\"\"\nDates.firstdayofmonth\n\ndoc\"\"\"\n    tonext(dt::TimeType,dow::Int;same::Bool=false) -> TimeType\n\nAdjusts `dt` to the next day of week corresponding to `dow` with `1 = Monday, 2 = Tuesday, etc`. Setting `same=true` allows the current `dt` to be considered as the next `dow`, allowing for no adjustment to occur.\n\"\"\"\nDates.tonext(::Dates.TimeType,::Int,?)\n\ndoc\"\"\"\n    tonext(func::Function,dt::TimeType;step=Day(1),negate=false,limit=10000,same=false) -> TimeType\n\nAdjusts `dt` by iterating at most `limit` iterations by `step` increments until `func` returns `true`. `func` must take a single `TimeType` argument and return a `Bool`. `same` allows `dt` to be considered in satisfying `func`. `negate` will make the adjustment process terminate when `func` returns `false` instead of `true`.\n\"\"\"\nDates.tonext(::Function,::Dates.TimeType)\n\ndoc\"\"\"\n    dayofyear(dt::TimeType) -> Int\n\nReturns the day of the year for `dt` with January 1st being day 1.\n\"\"\"\nDates.dayofyear\n\ndoc\"\"\"\n    tolast(dt::TimeType,dow::Int;of=Month) -> TimeType\n\nAdjusts `dt` to the last `dow` of its month. Alternatively, `of=Year` will adjust to the last `dow` of the year.\n\"\"\"\nDates.tolast\n\ndoc\"\"\"\n    firstdayofquarter(dt::TimeType) -> TimeType\n\nAdjusts `dt` to the first day of its quarter.\n\"\"\"\nDates.firstdayofquarter\n\ndoc\"\"\"\n```rst\n..  julian2datetime(julian_days) -> DateTime\n\nTakes the number of Julian calendar days since epoch\n``-4713-11-24T12:00:00`` and returns the corresponding ``DateTime``.\n```\n\"\"\"\nDates.julian2datetime\n\ndoc\"\"\"\n    year(dt::TimeType) -> Int64\n    month(dt::TimeType) -> Int64\n    week(dt::TimeType) -> Int64\n    day(dt::TimeType) -> Int64\n    hour(dt::TimeType) -> Int64\n    minute(dt::TimeType) -> Int64\n    second(dt::TimeType) -> Int64\n    millisecond(dt::TimeType) -> Int64\n\nReturn the field part of a `Date` or `DateTime` as an `Int64`.\n\"\"\"\nDates.year\n\ndoc\"\"\"\n    toprev(dt::TimeType,dow::Int;same::Bool=false) -> TimeType\n\nAdjusts `dt` to the previous day of week corresponding to `dow` with `1 = Monday, 2 = Tuesday, etc`. Setting `same=true` allows the current `dt` to be considered as the previous `dow`, allowing for no adjustment to occur.\n\"\"\"\nDates.toprev(::Dates.TimeType,::Int,?)\n\ndoc\"\"\"\n    toprev(func::Function,dt::TimeType;step=Day(-1),negate=false,limit=10000,same=false) -> TimeType\n\nAdjusts `dt` by iterating at most `limit` iterations by `step` increments until `func` returns `true`. `func` must take a single `TimeType` argument and return a `Bool`. `same` allows `dt` to be considered in satisfying `func`. `negate` will make the adjustment process terminate when `func` returns `false` instead of `true`.\n\"\"\"\nDates.toprev(::Function,::Dates.TimeType)\n\ndoc\"\"\"\n    daysinyear(dt::TimeType) -> Int\n\nReturns 366 if the year of `dt` is a leap year, otherwise returns 365.\n\"\"\"\nDates.daysinyear\n\ndoc\"\"\"\n```rst\n..  trunc(dt::TimeType, ::Type{Period}) -> TimeType\n\nTruncates the value of ``dt`` according to the provided ``Period`` type.\nE.g. if ``dt`` is ``1996-01-01T12:30:00``, then ``trunc(dt,Day) == 1996-01-01T00:00:00``.\n```\n\"\"\"\nDates.trunc(::Dates.TimeType, ::Type{Dates.Period})\n\ndoc\"\"\"\n    daysinmonth(dt::TimeType) -> Int\n\nReturns the number of days in the month of `dt`. Value will be 28, 29, 30, or 31.\n\"\"\"\nDates.daysinmonth\n\ndoc\"\"\"\n    yearmonth(dt::TimeType) -> (Int64, Int64)\n\nSimultaneously return the year and month parts of a `Date` or `DateTime`.\n\"\"\"\nDates.yearmonth\n\ndoc\"\"\"\n    daysofweekinmonth(dt::TimeType) -> Int\n\nFor the day of week of `dt`, returns the total number of that day of the week in `dt`'s month. Returns 4 or 5. Useful in temporal expressions for specifying the last day of a week in a month by including `dayofweekofmonth(dt) == daysofweekinmonth(dt)` in the adjuster function.\n\"\"\"\nDates.daysofweekinmonth\n\ndoc\"\"\"\n    yearmonthday(dt::TimeType) -> (Int64, Int64, Int64)\n\nSimultaneously return the year, month, and day parts of a `Date` or `DateTime`.\n\"\"\"\nDates.yearmonthday\n\ndoc\"\"\"\n    Dates.DateFormat(format::AbstractString) -> DateFormat\n\nConstruct a date formatting object that can be passed repeatedly for parsing similarly formatted date strings. `format` is a format string in the form described above (e.g. `\"yyyy-mm-dd\"`).\n\"\"\"\nDates.Dates.DateFormat\n\ndoc\"\"\"\n    lastdayofweek(dt::TimeType) -> TimeType\n\nAdjusts `dt` to the Sunday of its week.\n\"\"\"\nDates.lastdayofweek\n\ndoc\"\"\"\n    recur{T<:TimeType}(func::Function,dr::StepRange{T};negate=false,limit=10000) -> Vector{T}\n\n`func` takes a single TimeType argument and returns a `Bool` indicating whether the input should be \"included\" in the final set. `recur` applies `func` over each element in the range of `dr`, including those elements for which `func` returns `true` in the resulting Array, unless `negate=true`, then only elements where `func` returns `false` are included.\n\"\"\"\nDates.recur\n\ndoc\"\"\"\n    monthday(dt::TimeType) -> (Int64, Int64)\n\nSimultaneously return the month and day parts of a `Date` or `DateTime`.\n\"\"\"\nDates.monthday\n\ndoc\"\"\"\n    default(p::Period) -> Period\n\nReturns a sensible \"default\" value for the input Period by returning `one(p)` for Year, Month, and Day, and `zero(p)` for Hour, Minute, Second, and Millisecond.\n\"\"\"\nDates.default\n\ndoc\"\"\"\n```rst\n..  unix2datetime(x) -> DateTime\n\nTakes the number of seconds since unix epoch ``1970-01-01T00:00:00``\nand converts to the corresponding ``DateTime``.\n```\n\"\"\"\nDates.unix2datetime\n\ndoc\"\"\"\n    eps(::DateTime) -> Millisecond\n    eps(::Date) -> Day\n\nReturns `Millisecond(1)` for `DateTime` values and `Day(1)` for `Date` values.\n\"\"\"\nDates.eps(::Union{Date,DateTime})\n\ndoc\"\"\"\n    firstdayofyear(dt::TimeType) -> TimeType\n\nAdjusts `dt` to the first day of its year.\n\"\"\"\nDates.firstdayofyear\n\ndoc\"\"\"\n```rst\n..  rata2datetime(days) -> DateTime\n\nTakes the number of Rata Die days since epoch ``0000-12-31T00:00:00``\nand returns the corresponding ``DateTime``.\n```\n\"\"\"\nDates.rata2datetime\n\ndoc\"\"\"\n    now() -> DateTime\n\nReturns a `DateTime` corresponding to the user's system time including the system timezone locale.\n\"\"\"\nnow\n\ndoc\"\"\"\n    now(::Type{UTC}) -> DateTime\n\nReturns a `DateTime` corresponding to the user's system time as UTC/GMT.\n\"\"\"\nDates.now(::Type{Dates.UTC})\n\ndoc\"\"\"\n    isleapyear(dt::TimeType) -> Bool\n\nReturns `true` if the year of `dt` is a leap year.\n\"\"\"\nDates.isleapyear\n\ndoc\"\"\"\n    today() -> Date\n\nReturns the date portion of `now()`.\n\"\"\"\nDates.today\n\ndoc\"\"\"\n    lastdayofyear(dt::TimeType) -> TimeType\n\nAdjusts `dt` to the last day of its year.\n\"\"\"\nDates.lastdayofyear\n\ndoc\"\"\"\n    tofirst(dt::TimeType,dow::Int;of=Month) -> TimeType\n\nAdjusts `dt` to the first `dow` of its month. Alternatively, `of=Year` will adjust to the first `dow` of the year.\n\"\"\"\nDates.tofirst\n\ndoc\"\"\"\n    lastdayofmonth(dt::TimeType) -> TimeType\n\nAdjusts `dt` to the last day of its month.\n\"\"\"\nDates.lastdayofmonth\n\ndoc\"\"\"\n    dayofweek(dt::TimeType) -> Int64\n\nReturns the day of the week as an `Int64` with `1 = Monday, 2 = Tuesday, etc.`.\n\"\"\"\nDates.dayofweek\n\ndoc\"\"\"\n    Year(dt::TimeType) -> Year\n    Month(dt::TimeType) -> Month\n    Week(dt::TimeType) -> Week\n    Day(dt::TimeType) -> Day\n    Hour(dt::TimeType) -> Hour\n    Minute(dt::TimeType) -> Minute\n    Second(dt::TimeType) -> Second\n    Millisecond(dt::TimeType) -> Millisecond\n\nReturn the field part of a `Date` or `DateTime` as a `Period` type.\n\"\"\"\nDates.Year(dt::Dates.TimeType)\n\ndoc\"\"\"\n    Year(v)\n    Month(v)\n    Week(v)\n    Day(v)\n    Hour(v)\n    Minute(v)\n    Second(v)\n    Millisecond(v)\n\nConstruct a `Period` type with the given `v` value. Input must be losslessly\nconvertible to an `Int64`.\n\"\"\"\nDates.Year(v)\n\ndoc\"\"\"\n    quarterofyear(dt::TimeType) -> Int\n\nReturns the quarter that `dt` resides in. Range of value is 1:4.\n\"\"\"\nDates.quarterofyear\n\ndoc\"\"\"\n    dayofquarter(dt::TimeType) -> Int\n\nReturns the day of the current quarter of `dt`. Range of value is 1:92.\n\"\"\"\nDates.dayofquarter\n\ndoc\"\"\"\n    lastdayofquarter(dt::TimeType) -> TimeType\n\nAdjusts `dt` to the last day of its quarter.\n\"\"\"\nDates.lastdayofquarter\n\n# Base.Pkg\n\ndoc\"\"\"\n    build()\n\nRun the build scripts for all installed packages in depth-first recursive order.\n\"\"\"\nPkg.build()\n\ndoc\"\"\"\n    build(pkgs...)\n\nRun the build script in `deps/build.jl` for each package in `pkgs` and all of their dependencies in depth-first recursive order. This is called automatically by `Pkg.resolve()` on all installed or updated packages.\n\"\"\"\nPkg.build(pkgs...)\n\ndoc\"\"\"\n    init(meta::AbstractString=DEFAULT_META, branch::AbstractString=META_BRANCH)\n\nInitialize `Pkg.dir()` as a package directory. This will be done automatically when the `JULIA_PKGDIR` is not set and `Pkg.dir()` uses its default value. As part of this process, clones a local METADATA git repository from the site and branch specified by its arguments, which are typically not provided. Explicit (non-default) arguments can be used to support a custom METADATA setup.\n\"\"\"\nPkg.init()\n\ndoc\"\"\"\n    publish()\n\nFor each new package version tagged in `METADATA` not already published, make sure that the tagged package commits have been pushed to the repo at the registered URL for the package and if they all have, open a pull request to `METADATA`.\n\"\"\"\nPkg.publish()\n\ndoc\"\"\"\n    pin(pkg)\n\nPin `pkg` at the current version. To go back to using the newest compatible released version, use `Pkg.free(pkg)`\n\"\"\"\nPkg.pin(pkg)\n\ndoc\"\"\"\n    pin(pkg, version)\n\nPin `pkg` at registered version `version`.\n\"\"\"\nPkg.pin(pkg, version)\n\ndoc\"\"\"\n    resolve()\n\nDetermines an optimal, consistent set of package versions to install or upgrade to. The optimal set of package versions is based on the contents of `Pkg.dir(\"REQUIRE\")` and the state of installed packages in `Pkg.dir()`, Packages that are no longer required are moved into `Pkg.dir(\".trash\")`.\n\"\"\"\nPkg.resolve()\n\ndoc\"\"\"\n    available() -> Vector{ASCIIString}\n\nReturns the names of available packages.\n\"\"\"\nPkg.available()\n\ndoc\"\"\"\n    available(pkg) -> Vector{VersionNumber}\n\nReturns the version numbers available for package `pkg`.\n\"\"\"\nPkg.available(pkg)\n\ndoc\"\"\"\n    register(pkg, [url])\n\nRegister `pkg` at the git URL `url`, defaulting to the configured origin URL of the git repo `Pkg.dir(pkg)`.\n\"\"\"\nPkg.register(pkg, url=?)\n\ndoc\"\"\"\n    rm(pkg)\n\nRemove all requirement entries for `pkg` from `Pkg.dir(\"REQUIRE\")` and call `Pkg.resolve()`.\n\"\"\"\nPkg.rm(pkg)\n\ndoc\"\"\"\n    free(pkg)\n\nFree the package `pkg` to be managed by the package manager again. It calls `Pkg.resolve()` to determine optimal package versions after. This is an inverse for both `Pkg.checkout` and `Pkg.pin`.\n\nYou can also supply an iterable collection of package names, e.g., `Pkg.free((\"Pkg1\", \"Pkg2\"))` to free multiple packages at once.\n\"\"\"\nPkg.free()\n\ndoc\"\"\"\n    status()\n\nPrints out a summary of what packages are installed and what version and state they're in.\n\"\"\"\nPkg.status\n\ndoc\"\"\"\n    edit()\n\nOpens `Pkg.dir(\"REQUIRE\")` in the editor specified by the `VISUAL` or `EDITOR` environment variables; when the editor command returns, it runs `Pkg.resolve()` to determine and install a new optimal set of installed package versions.\n\"\"\"\nPkg.edit()\n\ndoc\"\"\"\n    clone(url, [pkg])\n\nClone a package directly from the git URL `url`. The package does not need to be a registered in `Pkg.dir(\"METADATA\")`. The package repo is cloned by the name `pkg` if provided; if not provided, `pkg` is determined automatically from `url`.\n\"\"\"\nPkg.clone(url,?)\n\ndoc\"\"\"\n    clone(pkg)\n\nIf `pkg` has a URL registered in `Pkg.dir(\"METADATA\")`, clone it from that URL on the default branch. The package does not need to have any registered versions.\n\"\"\"\nPkg.clone(pkg)\n\ndoc\"\"\"\n    checkout(pkg, [branch=\"master\"])\n\nCheckout the `Pkg.dir(pkg)` repo to the branch `branch`. Defaults to checking out the \"master\" branch. To go back to using the newest compatible released version, use `Pkg.free(pkg)`\n\"\"\"\nPkg.checkout(pkg)\n\ndoc\"\"\"\n    update()\n\nUpdate package the metadata repo \u2013 kept in `Pkg.dir(\"METADATA\")` \u2013 then update any fixed packages that can safely be pulled from their origin; then call `Pkg.resolve()` to determine a new optimal set of packages versions.\n\"\"\"\nPkg.update\n\ndoc\"\"\"\n    add(pkg, vers...)\n\nAdd a requirement entry for `pkg` to `Pkg.dir(\"REQUIRE\")` and call `Pkg.resolve()`. If `vers` are given, they must be `VersionNumber` objects and they specify acceptable version intervals for `pkg`.\n\"\"\"\nPkg.add(pkg, vers...)\n\ndoc\"\"\"\n    tag(pkg, [ver, [commit]])\n\nTag `commit` as version `ver` of package `pkg` and create a version entry in `METADATA`. If not provided, `commit` defaults to the current commit of the `pkg` repo. If `ver` is one of the symbols `:patch`, `:minor`, `:major` the next patch, minor or major version is used. If `ver` is not provided, it defaults to `:patch`.\n\"\"\"\nPkg.tag(pkg)\n\ndoc\"\"\"\n    test()\n\nRun the tests for all installed packages ensuring that each package's test dependencies are installed for the duration of the test. A package is tested by running its `test/runtests.jl` file and test dependencies are specified in `test/REQUIRE`.\n\"\"\"\nPkg.test()\n\ndoc\"\"\"\n    test(pkgs...)\n\nRun the tests for each package in `pkgs` ensuring that each package's test dependencies are installed for the duration of the test. A package is tested by running its `test/runtests.jl` file and test dependencies are specified in `test/REQUIRE`.\n\"\"\"\nPkg.test(pkgs...)\n\ndoc\"\"\"\n    generate(pkg,license)\n\nGenerate a new package named `pkg` with one of these license keys: `\"MIT\"`, `\"BSD\"` or `\"ASL\"`. If you want to make a package with a different license, you can edit it afterwards. Generate creates a git repo at `Pkg.dir(pkg)` for the package and inside it `LICENSE.md`, `README.md`, `REQUIRE`, the julia entrypoint `$pkg/src/$pkg.jl`, and Travis and AppVeyor CI configuration files `.travis.yml` and `appveyor.yml`.\n\"\"\"\nPkg.generate(pkg,license)\n\ndoc\"\"\"\n    dir() -> AbstractString\n\nReturns the absolute path of the package directory. This defaults to `joinpath(homedir(),\".julia\",\"v$(VERSION.major).$(VERSION.minor)\")` on all platforms (i.e. `~/.julia/v0.4` in UNIX shell syntax). If the `JULIA_PKGDIR` environment variable is set, then that path is used in the returned value as `joinpath(ENV[\"JULIA_PKGDIR\"],\"v$(VERSION.major).$(VERSION.minor)\")`. If `JULIA_PKGDIR` is a relative path, it is interpreted relative to whatever the current working directory is.\n\"\"\"\nPkg.dir()\n\ndoc\"\"\"\n    dir(names...) -> AbstractString\n\nEquivalent to `normpath(Pkg.dir(),names...)` \u2013 i.e. it appends path components to the package directory and normalizes the resulting path. In particular, `Pkg.dir(pkg)` returns the path to the package `pkg`.\n\"\"\"\nPkg.dir(names...)\n\ndoc\"\"\"\n    installed() -> Dict{ASCIIString,VersionNumber}\n\nReturns a dictionary mapping installed package names to the installed version number of each package.\n\"\"\"\nPkg.installed()\n\ndoc\"\"\"\n    installed(pkg) -> Void | VersionNumber\n\nIf `pkg` is installed, return the installed version number, otherwise return `nothing`.\n\"\"\"\nPkg.installed(pkg)\n\ndoc\"\"\"\n    randjump(r::MersenneTwister, jumps, [jumppoly]) -> Vector{MersenneTwister}\n\nCreate an array of the size `jumps` of initialized `MersenneTwister` RNG objects where the first RNG object given as a parameter and following `MersenneTwister` RNGs in the array initialized such that a state of the RNG object in the array would be moved forward (without generating numbers) from a previous RNG object array element on a particular number of steps encoded by the jump polynomial `jumppoly`.\n\nDefault jump polynomial moves forward `MersenneTwister` RNG state by 10^20 steps.\n\"\"\"\nrandjump\n\ndoc\"\"\"\n```rst\n..  \\:(start, [step], stop)\n\nRange operator. ``a:b`` constructs a range from ``a`` to ``b`` with a step size of 1, and ``a:s:b`` is similar but uses a step size of ``s``. These syntaxes call the function ``colon``.\nThe colon is also used in indexing to select whole dimensions.\n```\n\"\"\"\ncolon(start, step, stop)\n\ndoc\"\"\"\n```rst\n..  $(x, y)\n\nBitwise exclusive or\n```\n\"\"\"\nBase.(:$)(x, y)\n"
    },
    "skipped": [
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/objects.inv",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/up.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/minus.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/down.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/comment-close.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/up-pressed.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/plus.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/ajax-loader.gif",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/comment-bright.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/comment.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/down-pressed.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/file.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/fonts/fontawesome-webfont.woff",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/fonts/fontawesome-webfont.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/fonts/fontawesome-webfont.eot",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/_build/html/_static/fonts/FontAwesome.otf",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/images/travis-icon.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/images/jltypes.ai",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/images/github_metadata_pullrequest.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/images/github_metadata_fork.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/doc/images/github_metadata_develbranch.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/virtualenv-1.11.6.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/utf8proc-85789180158ac7fff85b9f008828d6ac44f072ea.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/SuiteSparse-4.4.2.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/Rmath-julia-0.1.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/pcre2-10.20.tar.bz2",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/patchelf-0.8.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/openspecfun-381db9bc865e51de67be9dcaa1610a6f90029c72.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/openlibm-3ee2a6e6a9fc68cbf2ab00f830b9059215e40b06.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/openblas-53e849f4fcae4363a64576de00e982722c7304f9.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/objconv.zip",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/mpfr-3.1.2.tar.bz2",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/llvm-3.3.src.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/libuv-efb40768b7c7bd9f173a7868f74b92b1c5a61a0e.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/libunwind-1.1.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/libosxunwind-0.0.1.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/libgit2-f6dedf2c2eb806e2a6fdd4cf31f68386efc2ee0b.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/lapack-3.5.0.tgz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/gmp-6.0.0.tar.bz2",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/fftw-3.3.4.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/dsfmt-2.2.3.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/deps/arpack-ng-3.2.0.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/contrib/windows/julia.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/contrib/windows/7zS.sfx",
        "/var/tmp/sochat1/spack-stage/spack-stage-julia-0.4.5-u5dqg6lrftpmfstkotl6cxgwifzjmoxz/spack-src/contrib/mac/app/julia.icns"
    ],
    "total_files": 1023
}