{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/HISTORY.md": "Julia v0.5.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * Generator expressions: `f(i) for i in 1:n` ([#4470]). This returns an iterator\n    that computes the specified values on demand. This is useful for computing, e.g.\n    `sum(f(i) for i in 1:n)` without creating an intermediate array of values.\n\n  * Generators and comprehensions support filtering using `if` ([#550]) and nested\n    iteration using multiple `for` keywords ([#4867]).\n\n  * Fused broadcasting syntax: ``f.(args...)`` is equivalent to ``broadcast(f, args...)`` ([#15032]),\n    and nested `f.(g.(args...))` calls are fused into a single `broadcast` loop ([#17300]).\n    Similarly, the syntax `x .= ...` is equivalent to a `broadcast!(identity, x, ...)`\n    call and fuses with nested \"dot\" calls; also, `x .+= y` and similar is now\n    equivalent to `x .= x .+ y`, rather than `x = x .+ y` ([#17510]).\n\n  * Macro expander functions are now generic, so macros can have multiple definitions\n    (e.g. for different numbers of arguments, or optional arguments) ([#8846], [#9627]).\n    However note that the argument types refer to the syntax tree representation, and not\n    to the types of run time values.\n\n  * Varargs functions like `foo{T}(x::T...)` may now restrict the number\n    of such arguments using `foo{T,N}(x::Vararg{T,N})` ([#11242]).\n\n  * `x \u2208 X` is now a synonym for `x in X` in `for` loops and comprehensions,\n    as it already was in comparisons ([#13824]).\n\n  * The `PROGRAM_FILE` global is now available for determining the name of the running script ([#14114]).\n\n  * The syntax `x.:sym` (e.g. `Base.:+`) is now supported, while using `x.(:sym)`\n    or `x.(i)` for field access are deprecated in favor of `getfield` ([#15032]).\n\n  * Function return type syntax `function f()::T` has been added ([#1090]). Values returned\n    from a function with such a declaration will be converted to the specified type `T`.\n\n  * Many more operators now support `.` prefixes (e.g. `.\u2264`) ([#17393]).  However,\n    users are discouraged from overloading these, since they are mainly parsed\n    in order to implement backwards compatibility with planned automatic\n    broadcasting of dot operators in Julia 0.6 ([#16285]).  Explicitly qualified\n    operator names like `Base.\u2264` should now use `Base.:\u2264` (prefixed by `@compat`\n    if you need 0.4 compatibility via the `Compat` package).\n\n  * User-extensible bounds check elimination is now possible with the new\n    `@boundscheck` macro ([#14474]). This macro marks bounds checking code blocks,\n    which the compiler may remove when encountered inside an `@inbounds` call.\n\nExperimental language features\n------------------------------\n\n  * Support for\n    [multi-threading](https://docs.julialang.org/en/latest/manual/parallel-computing/#multi-threading-experimental).\n    Loops with independent iterations can be easily parallelized with the\n    `Threads.@threads` macro.\n\n  * Support for arrays with indexing starting at values different from 1.\n    The array types are expected to be defined in packages, but now\n    Julia provides an API for writing generic algorithms for arbitrary\n    indexing schemes ([#16260]).\n\nLanguage changes\n----------------\n\n  * Each function and closure now has its own type. The captured variables of a closure\n    are fields of its type. `Function` is now an abstract type, and is the default\n    supertype of functions and closures. All functions, including anonymous functions,\n    are generic and support all features (e.g. keyword arguments). Instead of adding\n    methods to `call`, methods are added by type using the syntax\n    `(::ftype)(...) = ...`. `call` is deprecated ([#13412]). A significant result of\n    this language change is that higher order functions can be specialized on their\n    function arguments, leading to much faster functional programming, typically as\n    fast as if function arguments were manually inlined. See below for details.\n\n  * Square brackets and commas (e.g. `[x, y]`) no longer concatenate arrays, and always\n    simply construct a vector of the provided values. If `x` and `y` are arrays,\n    `[x, y]` will be an array of arrays ([#3737], [#2488], [#8599]).\n\n  * `using` and `import` are now case-sensitive even on case-insensitive filesystems\n    (common on Mac and Windows) ([#13542]).\n\n  * Relational algebra symbols are now allowed as infix operators ([#8036]):\n    `\u2a1d`, `\u27d5`, `\u27d6`, `\u27d7` for joins and `\u25b7` for anti-join.\n\n  * A warning is always given when a method is overwritten; previously, this was done\n    only when the new and old definitions were in separate modules ([#14759]).\n\n  * The `if` keyword cannot be followed immediately by a line break ([#15763]).\n\n  * Juxtaposition of numeric literals ending in `.` (e.g. `1.x`) is no longer\n    allowed ([#15731]).\n\n  * The built-in `NTuple` type has been removed; `NTuple{N,T}` is now\n    implemented internally as `Tuple{Vararg{T,N}}` ([#11242]).\n\n  * Use of the syntax `x::T` to declare the type of a local variable is deprecated.\n    In the future this will always mean type assertion, and declarations should use\n    `local x::T` instead ([#16071]).\n    When `x` is global, `x::T = ...` and `global x::T` used to mean type assertion,\n    but this syntax is now reserved for type declaration ([#964]).\n\n  * Dictionary comprehension syntax `[ a=>b for x in y ]` is deprecated.\n    Use `Dict(a=>b for x in y)` instead ([#16510]).\n\n  * Parentheses are no longer allowed around iteration specifications, e.g.\n    `for (i = 1:n)` ([#17668]).\n\nBreaking changes\n----------------\n\nThis section lists changes that do not have deprecation warnings.\n\n  * All dimensions indexed by scalars are now dropped, whereas previously only\n    trailing scalar dimensions would be omitted from the result ([#13612]). This\n    is a very major behavioral change, but should cause obvious failures. To retain\n    a dimension sliced with a scalar `i` slice with `i:i` instead.\n\n  * The assignment operations `.+=`, `.*=` and so on now generate calls\n    to `broadcast!` on the left-hand side (or call to `view(a, ...)` on the left-hand side\n    if the latter is an indexing expression, e.g. `a[...]`). This means that they will fail\n    if the left-hand side is immutable (or does not support `view`), and will otherwise\n    change the left-hand side in-place ([#17510], [#17546]).\n\n  * Method ambiguities no longer generate warnings when files are loaded,\n    nor do they dispatch to an arbitrarily-chosen method; instead, a call that\n    cannot be resolved to a single method results in a `MethodError` at run time,\n    rather than the previous definition-time warning ([#6190]).\n\n  * Array comprehensions preserve the dimensions of the input ranges. For example,\n    `[2x for x in A]` will have the same dimensions as `A` ([#16622]).\n\n  * The result type of an array comprehension depends only on the types of elements\n    computed, instead of using type inference ([#7258]). If the result is empty, then\n    type inference is still used to determine the element type.\n\n  * `reshape` is now defined to always share data with the original array.\n    If a reshaped copy is needed, use `copy(reshape(a))` or `copy!` to a new array of\n    the desired shape ([#4211]).\n\n  * `mapslices` now re-uses temporary storage. Recipient functions that expect\n    input slices to be persistent should copy data to other storage ([#17266]).\n    All usages of `mapslices` should be carefully audited since this change can cause\n    silent, incorrect behavior, rather than failing noisily.\n\n  * Local variables and arguments are represented in lowered code as numbered `Slot`\n    objects instead of as symbols ([#15609]).\n\n  * The information that used to be in the `ast` field of the `LambdaStaticData` type\n    is now divided among the fields `code`, `slotnames`, `slottypes`, `slotflags`,\n    `gensymtypes`, `rettype`, `nargs`, and `isva` in the `LambdaInfo` type ([#15609]).\n\n  * `A <: B` is parsed as `Expr(:(<:), :A, :B)` in all cases ([#9503]).\n    This also applies to the `>:` operator.\n\n  * Simple 2-argument comparisons like `A < B` are parsed as calls instead of using the\n    `:comparison` expression type ([#15524]). The `:comparison` expression type is still\n    produced in ASTs when comparisons are chained (e.g. `A < B \u2264 C`).\n\n  * `map` on a dictionary now expects a function that expects and returns a `Pair`.\n    The result is now another dictionary instead of an array ([#16622]).\n\n  * Bit shift operations (i.e. `<<`, `>>`, and `>>>`) now handle\n    negative shift counts differently: Negative counts are interpreted\n    as shifts in the opposite direction. For example, `4 >> -1 == 4 <<\n    +1 == 8`. Previously, negative counts would implicitly overflow to\n    large positive counts, always yielding either `0` or `-1`.\n\nLibrary improvements\n--------------------\n\n  * Strings ([#16107]):\n\n    * The `UTF8String` and `ASCIIString` types have been merged into a single\n      `String` type ([#16058]).  Use `isascii(s)` to check whether\n      a string contains only ASCII characters. The `ascii(s)` function now\n      converts `s` to `String`, raising an `ArgumentError` exception if `s` is\n      not pure ASCII.\n\n    * The `UTF16String` and `UTF32String` types and corresponding `utf16` and\n      `utf32` converter functions have been removed from the standard library.\n      If you need these types, they have been moved to the\n      [LegacyStrings.jl package](https://github.com/JuliaArchive/LegacyStrings.jl).\n      In the future, more robust Unicode string support will be provided by the\n      [StringEncodings.jl package](https://github.com/nalimilan/StringEncodings.jl).\n      If you only need these types to call wide string APIs (UTF-16 on Windows,\n      UTF-32 on UNIX), consider using the new `transcode` function (see below)\n      or the `Cwstring` type as a `ccall` argument type, which also ensures\n      correct NUL termination of string data.\n\n    * A `transcode(T, src)` function is now exported for converting data\n      between UTF-xx Unicode encodings ([#17323]).\n\n    * The basic string construction routines are now `string(args...)`,\n      `String(s)`, `unsafe_string(ptr)` (formerly `bytestring(ptr)`), and\n      `unsafe_wrap(String, ptr)` (formerly `pointer_to_string`) ([#16731]).\n\n    * Comparisons between `Char`s and `Integer`s are now deprecated ([#16024]):\n      `'x' == 120` now produces a warning but still evaluates to `true`. In the\n      future it may evaluate to `false` or the comparison may be an error. To\n      compare characters with integers you should either convert the integer to\n      a character value or convert the character to the corresponding code point\n      first: e.g. `'x' == Char(120)` or `Int('x') == 120`. The former is usually\n      preferable.\n\n    * Support for Unicode 9 ([#17402]).\n\n  * Arrays and linear algebra:\n\n    * Dimensions indexed by multidimensional arrays add dimensions. More generally, the\n      dimensionality of the result is the sum of the dimensionalities of the indices ([#15431]).\n\n    * New `normalize` and `normalize!` convenience functions for normalizing\n      vectors ([#13681]).\n\n    * QR matrix factorization:\n\n      * New method for generic QR with column pivoting ([#13480]).\n\n      * New method for polar decompositions of `AbstractVector`s ([#13681]).\n\n    * A new `SparseVector` type allows for one-dimensional sparse arrays.\n      Slicing and reshaping sparse matrices now return vectors when\n      appropriate. The `sparsevec` function returns a one-dimensional sparse\n      vector instead of a one-column sparse matrix. The `SparseMatrix` module\n      has been renamed to `SparseArrays` ([#13440]).\n\n    * Rank one update and downdate functions, `lowrankupdate`, `lowrankupdate!`, `lowrankdowndate`,\n      and `lowrankdowndate!`, have been introduced for dense Cholesky factorizations ([#14243], [#14424]).\n\n    * All `sparse` methods now retain provided numerical zeros as structural nonzeros; to\n      drop numerical zeros, use `dropzeros!` ([#14798], [#15242]).\n\n    * `setindex!` methods for sparse matrices and vectors no longer purge allocated entries\n      on zero assignment. To drop stored entries from sparse matrices and vectors, use\n      `Base.SparseArrays.dropstored!` ([#17404]).\n\n    * Concatenating dense and sparse matrices now returns a sparse matrix ([#15172]).\n\n  * Files and I/O:\n\n    * The `open` function now respects `umask` on UNIX when creating files ([#16466], [#16502]).\n\n    * A new function `walkdir()` returns an iterator that walks the tree of a directory ([#8814], [#13707]).\n\n       ```\n       for (root, dirs, files) in walkdir(expanduser(\"~/.julia/v0.5/Plots/src\"))\n           println(\"$(length(files)) \\t files in $root\")\n       end\n       19    files in /Users/me/.julia/v0.5/Plots/src\n       15    files in /Users/me/.julia/v0.5/Plots/src/backends\n       4     files in /Users/me/.julia/v0.5/Plots/src/deprecated\n      ```\n\n    * A new function `chown()` changes the ownership of files ([#15007]).\n\n    * Display properties can now be passed among output functions (e.g. `show`)\n      using an `IOContext` object ([#13825]).\n\n    * `Cmd(cmd; ...)` now accepts new Windows-specific options `windows_verbatim`\n      (to alter Windows command-line generation) and `windows_hide` (to\n      suppress creation of new console windows) ([#13780]).\n\n    * There is now a default no-op `flush(io)` function for all `IO` types ([#16403]).\n\n  * Parallel computing:\n\n    * `pmap` keyword arguments `err_retry=true` and `err_stop=false` are deprecated.\n      Action to be taken on errors can be specified via the `on_error` keyword argument.\n      Retry is specified via `retry_n`, `retry_on` and `retry_max_delay` ([#15409], [#15975], [#16663]).\n\n    * The functions `remotecall`, `remotecall_fetch`, and `remotecall_wait` now have the\n      function argument as the first argument to allow for do-block syntax ([#13338]).\n\n  * Statistics:\n\n    * Improve performance of `quantile` ([#14413]).\n\n    * `extrema` can now operate over a region ([#15550]).\n\n    * `cov` and `cor` don't use keyword arguments anymore and are therefore now type stable ([#13465]).\n\n    * Histogram functionality has been deprecated in `Base`. Use the\n      [StatsBase.jl package](https://github.com/JuliaStats/StatsBase.jl)\n      instead ([#6842], [#16450]).\n\n  * Testing:\n\n    * The `Base.Test` module now has a `@testset` feature to bundle\n      tests together and delay throwing an error until the end ([#13062]).\n\n    * The new features are mirrored in the\n      [BaseTestNext.jl package](https://github.com/IainNZ/BaseTestNext.jl)\n      for users who would like to use the new functionality on Julia v0.4.\n\n    * The [BaseTestDeprecated.jl package](https://github.com/IainNZ/BaseTestDeprecated.jl)\n      provides the old-style `handler` functionality, for compatibility\n      with code that needs to support both Julia v0.4 and v0.5.\n\n  * Package management:\n\n    * The package system (`Pkg`) is now based on the `libgit2` library, rather\n      than running the `git` program, increasing performance (especially on\n      Windows) ([#11196]).\n\n    * Package-development functions like `Pkg.tag` and `Pkg.publish`\n      have been moved to an external [PkgDev] package ([#13387]).\n\n    * Updating only a subset of the packages is now supported,\n      e.g. `Pkg.update(\"Example\")` ([#17132]).\n\n  * Miscellanous:\n\n    * Prime number related functions have been moved from `Base` to the\n      [Primes.jl package](https://github.com/JuliaMath/Primes.jl) ([#16481]).\n\n    * Most of the combinatorics functions have been moved from `Base`\n      to the [Combinatorics.jl package](https://github.com/JuliaLang/Combinatorics.jl) ([#13897]).\n\n    * New `foreach` function for calling a function on every element of a collection when\n      the results are not needed ([#13774]). Compared to `map(f, v)`, which allocates and\n      returns a result array, `foreach(f, v)` calls `f` on each element of `v`, returning\n      nothing.\n\n    * The new `Base.StackTraces` module makes stack traces easier to use programmatically ([#14469]).\n\n    * The `libjulia` library is now properly versioned and installed to the public `<prefix>/lib`\n      directory, instead of the private `<prefix>/lib/julia` directory ([#16362]).\n\n    * System reflection is now more consistently exposed from `Sys` and not `Base`\n      (e.g. constants such as `WORD_SIZE` and `CPU_CORES`). `OS_NAME` has been\n      replaced by `Sys.KERNEL` and always reports the name of the kernel (as\n      reported by `uname`). The `@windows_only` and `@osx` family of macros\n      have been replaced with functions such as `is_windows()` and `is_apple()`.\n      There is now also a `@static` macro that will evaluate the condition of an\n      if-statement at compile time, for when a static branch is required ([#16219]).\n\n    * `Date` and `DateTime` values can now be rounded to a specified resolution (e.g., 1 month or\n      15 minutes) with `floor`, `ceil`, and `round` ([#17037]).\n\n[PkgDev]: https://github.com/JuliaLang/PkgDev.jl\n\nCompiler/Runtime improvements\n-----------------------------\n\n  * Machine SIMD types can be represented in Julia as a homogeneous tuple of `VecElement` ([#15244]).\n\n  * The performance of higher-order and anonymous functions has been greatly improved.\n    For example, `map(x->2x, A)` performs as well as `2.*A`([#13412]).\n\n  * On windows, a DLL of standard library code is now precompiled and used by default,\n    improving startup time ([#16953]).\n\n  * LLVM has been upgraded to version 3.7.1, improving the quality of generated\n    code and debug info. However compile times may be slightly longer ([#14623]).\n\nNew architectures\n-----------------\n\n  This release greatly improves support for ARM, and introduces support for Power.\n\n  * [ARM](https://github.com/JuliaLang/julia/issues?utf8=%E2%9C%93&q=label%3Aarm):\n    [#14194], [#14519], [#16645], [#16621]\n\n  * [Power](https://github.com/JuliaLang/julia/issues?utf8=%E2%9C%93&q=label%3Apower):\n    [#16455], [#16404]\n\nDeprecated or removed\n---------------------\n\n  * The following function names have been simplified and unified ([#13232]):\n\n    * `get_bigfloat_precision`  -> `precision(BigFloat)`\n    * `set_bigfloat_precision`  -> `setprecision`\n    * `with_bigfloat_precision` -> `setprecision`\n\n    * `get_rounding`            -> `rounding`\n    * `set_rounding`            -> `setrounding`\n    * `with_rounding`           -> `setrounding`\n\n  * The method `A_ldiv_B!(SparseMatrixCSC, StridedVecOrMat)` has been deprecated\n    in favor of versions that require the matrix to be in factored form\n    ([#13496]).\n\n  * `chol(A,Val{:U/:L})` has been deprecated in favor of `chol(A)` ([#13680]).\n\n  * `rem1(x,y)` is discontinued due to inconsistency for `x==0`. Use `mod1` instead ([#14140]).\n\n  * The `FS` module has been renamed to `Filesystem`. Calling the functions `isreadable`,\n   `iswritable`, and `isexecutable` on filesystem paths has been deprecated ([#12819]).\n\n  * `RemoteRef` has been deprecated in favor of `RemoteChannel` ([#14458]).\n\n  * `super` has been renamed to `supertype` ([#14335]).\n\n  * `parseip(str)` has been deprecated in favor of `parse(IPAddr, str)` ([#14676]).\n\n  * `readall` has been renamed to `readstring`, and `readbytes` has been renamed to `read` ([#14608], [#14660]).\n\n  * `fieldoffsets(x)` has been deprecated in favor of calling `fieldoffset(x, i)` on each field ([#14777]).\n\n  * `issym` is deprecated in favor of `issymmetric` to match similar functions\n    (`ishermitian`, ...) ([#15192]).\n\n  * `scale` is deprecated in favor of either `\u03b1*A`, `Diagonal(x)*A`, or `A*Diagonal(x)` ([#15258]).\n\n  * `istext` has been renamed to `istextmime` ([#12872], [#15708]).\n\n  * \"Functor\" types are no longer necessary and have been deprecated ([#15804]). To maintain\n    performance on older versions of Julia the [Compat.jl package](https://github.com/JuliaLang/Compat.jl/pull/184)\n    provides a `@functorize` macro.\n\n  * `bitunpack(B)` and `bitpack(A)` have been deprecated in favor of\n    `Array(B)` and `BitArray(A)`, respectively ([#16010]).\n\n  * `xdump` is removed, and `dump` now simply shows the full representation of a value.\n    `dump` should not be overloaded, since it is for examining concrete structure ([#4163]).\n\n  * `sprandbool` has been deprecated in favor of `sprand(Bool, ...)` or\n    `sprand(rng, Bool, ...)` ([#11688], [#16098]).\n\n  * The lowercase `symbol` function has been deprecated in favor of the `Symbol`\n    constructor ([#16154]).\n\n  * `writemime` is deprecated, and output methods specifying a MIME type are now\n    methods of `show` ([#14052]).\n\n  * BLAS utility functions `blas_set_num_threads`, `blas_vendor`, and `check_blas`\n    have been moved to the BLAS module as `BLAS.set_num_threads`, `BLAS.vendor`,\n    and `BLAS.check` ([#10548], [#16600]).\n\n  * `print_escaped` has been renamed to `escape_string`, `print_unescaped` has been\n    renamed to `unescape_string`, and `print_joined` has been renamed to `join` ([#16603]).\n\n  * `pointer_to_string` has been renamed to `unsafe_wrap(String, ...)`, and\n    `pointer_to_array` has been renamed to `unsafe_wrap(Array, ...)` ([#16731]).\n\n  * `sub` and `slice` have been deprecated in favor of `view` ([#16972]).\n\n  * Sparse matrix functions `etree`, `ereach`, `csc_permute`, and `symperm` have been moved\n    to the [SuiteSparse.jl package](https://github.com/JuliaSparse/SuiteSparse.jl) ([#12231], [#17033]).\n\n  * The no-op `transpose` fallback for non-numeric arrays has been deprecated. Consider introducing suitable\n    `transpose` methods or calling `permutedims(x, (2, 1))` for matrices and `reshape(x, 1, length(x))` for\n    vectors.  ([#13171], [#17075], [#17374]).\n\n  * The following macros have been deprecated ([#16219]):\n    * `@windows` is deprecated in favor of `is_windows()`\n    * `@unix` is deprecated in favor of `is_unix()`\n    * `@osx` is deprecated in favor of `is_apple()`\n    * `@linux` is deprecated in favor of `is_linux()`\n    * `@windows_only` is deprecated in favor of `if is_windows()`\n    * `@unix_only` is deprecated in favor of `if is_unix()`\n    * `@osx_only` is deprecated in favor of `if is_apple()`\n    * `@linux_only` is deprecated in favor of `if is_linux()`\n    * NOTE: Using `@static` could be useful/necessary when used in a function's local scope. See details at the section entitled [Handling Operating System Variation](https://docs.julialang.org/en/latest/manual/handling-operating-system-variation/#man-handling-operating-system-variation) in the manual.\n\nCommand-line option changes\n---------------------------\n\n  * The `-F` flag to load `~/.juliarc` has been deprecated in favor of\n    `--startup-file=yes` ([#9482]).\n\n  * The `-f` and `--no-startup` flags to disable loading of `~/.juliarc` have\n    been deprecated in favor of `--startup-file=no` ([#9482]).\n\n  * The `-P` and `--post-boot` flags for evaluating an expression in \"interactive mode\"\n    have been deprecated in favor of `-i -e` ([#16854]).\n\n  * The `--no-history-file` flag to disable loading of `~/.julia_history` has been\n    deprecated in favor of `--history-file=no` ([#9482]).\n\nLanguage tooling improvements\n-----------------------------\n\n   * The [Julia debugger](https://github.com/Keno/Gallium.jl) makes its debut\n     with this release. Install it with `Pkg.add(\"Gallium\")`, and the\n     [documentation](https://github.com/Keno/Gallium.jl#gallium) should\n     get you going. The [JuliaCon\n     talk](https://www.youtube.com/watch?v=e6-hcOHO0tc&list=PLP8iPy9hna6SQPwZUDtAM59-wPzCPyD_S&index=5)\n     on Gallium shows off various features of the debugger.\n\n   * The [Juno IDE](http://junolab.org) has matured significantly, and now\n     also includes support for plotting and debugging.\n\n   * [Cxx.jl](https://github.com/Keno/Cxx.jl) provides a convenient FFI for\n     calling C++ code from Julia.\n\nJulia v0.4.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * Function call overloading: for arbitrary objects `x` (not of type\n    `Function`), `x(...)` is transformed into `call(x, ...)`, and `call`\n    can be overloaded as desired.  Constructors are now a special case of\n    this mechanism, which allows e.g. constructors for abstract types.\n    `T(...)` falls back to `convert(T, x)`, so all `convert` methods implicitly\n    define a constructor ([#8712], [#2403]).\n\n  * Unicode version 8 is now supported for identifiers etcetera ([#7917], [#12031]).\n\n  * Type parameters now permit any `isbits` type, not just `Int` and `Bool` ([#6081]).\n\n  * Keyword argument names can be computed, using syntax such as `f(; symbol => val)` ([#7704]).\n\n  * The syntax `@generated function` enables generation of specialized methods based on\n    argument types. At compile time, the function is called with its arguments bound to their\n    types instead of to their values. The function then returns an expression forming the\n    body of the function to be called at run time ([#7311]).\n\n  * [Documentation system](https://docs.julialang.org/en/latest/manual/documentation/)\n    for functions, methods, types and macros in packages and user code ([#8791]).\n\n  * The syntax `function foo end` can be used to introduce a generic function without\n    yet adding any methods ([#8283]).\n\n  * Incremental precompilation of modules: call `VERSION >= v\"0.4.0-dev+6521\" && __precompile__()` at the top of a\n    module file to automatically precompile it when it is imported ([#12491]), or manually\n    run `Base.compilecache(modulename)`. The resulting precompiled `.ji` file is saved in\n    `~/.julia/lib/v0.4` ([#8745]).\n\n      * See manual section on `Module initialization and precompilation` (under `Modules`) for\n        details and errata.  In particular, to be safely precompilable a module may need an\n        `__init__` function to separate code that must be executed at runtime rather than precompile\n        time.  Modules that are *not* precompilable should call `__precompile__(false)`.\n\n      * The precompiled `.ji` file includes a list of dependencies (modules and files that\n        were imported/included at precompile-time), and the module is automatically recompiled\n        upon `import` when any of its dependencies have changed.  Explicit dependencies\n        on other files can be declared with `include_dependency(path)` ([#12458]).\n\n      * New option `--output-incremental={yes|no}` added to invoke the equivalent of `Base.compilecache`\n        from the command line.\n\n  * The syntax `new{parameters...}(...)` can be used in constructors to specify parameters for\n    the type to be constructed ([#8135]).\n\n  * `++` is now parsed as an infix operator, but does not yet have a default definition ([#11030], [#11686]).\n\n  * Support for inter-task communication using `Channels` ([#12264]).\n    See https://docs.julialang.org/en/latest/manual/parallel-computing/#channels for details.\n\n  * `RemoteRef`s now point to remote channels. The remote channels can be of length greater than 1.\n    Default continues to be of length 1 ([#12385]).\n    See https://docs.julialang.org/en/latest/manual/parallel-computing/#remoterefs-and-abstractchannels for details.\n\n  * `@__LINE__` special macro now available to reflect invocation source line number ([#12727]).\n\nLanguage changes\n----------------\n\n  * Tuple types are now written as `Tuple{A, B}` instead of as `(A, B)`.\n    Tuples of bits types are inlined into structs and arrays, like other\n    immutable types.\n    `...` now does splatting inside parentheses, instead of constructing a\n    variadic tuple type ([#10380]).\n    Variadic tuple types are written as `Tuple{Vararg{T}}`.\n\n  * Using `[x,y]` to concatenate arrays is deprecated, and in the future will\n    construct a vector of `x` and `y` instead ([#3737], [#2488], [#8599]).\n\n  * Significant improvements to `ccall` and `cfunction`\n\n    * As a safer alternative to creating pointers (`Ptr`), the managed reference type\n      `Ref` has been added. A `Ref` points to the data contained by a value in an\n      abstract sense, and in a way that is GC-safe. For example, `Ref(2)` points to\n      a storage location that contains the integer `2`, and `Ref(array,3)` points\n      to the third element of an array. A `Ref` can be automatically converted to a\n      native pointer when passed to a `ccall`.\n\n    * When passing a by-reference argument to `ccall`, you can declare\n      the argument type to be `Ref{T}` instead of `Ptr{T}`, and just\n      pass `x` instead of `&x`.\n\n    * `ccall` is now lowered to call `unsafe_convert(T, cconvert(T, x))` on each\n      argument. `cconvert` falls back to `convert`, but can be used to convert an\n      argument to an arbitrarily-different representation more suitable for passing\n      to C. `unsafe_convert` then handles conversions to `Ptr`.\n\n    * `ccall` and `cfunction` now support correctly passing and returning structs,\n      following the platform ABI (assuming the C types are mirrored accurately in Julia).\n\n    * `cfunction` arguments of struct-like Julia types are now passed by value.\n      If `Ref{T}` is used as a `cfunction` argument type, it will look up the\n      method applicable to `T`, but pass the argument by reference (as Julia functions\n      usually do). However, this should only be used for objects allocated by Julia\n      and for `isbits` types.\n\n  * `convert(Ptr,x)` is deprecated for most types, replaced by\n    `unsafe_convert`. You can still `convert` between pointer types,\n    and between pointers and `Int` or `UInt`.\n\n  * Module `__init__` methods no longer swallow thrown exceptions; they now\n    throw an `InitError` wrapping the thrown exception ([#12576]).\n\n  * Unsigned `BigInt` literal syntax has been removed ([#11105]).\n    Unsigned literals larger than `UInt128` now throw a syntax error.\n\n  * `error(::Exception)` and `error(::Type{Exception})` have been deprecated\n     in favor of using an explicit `throw` ([#9690]).\n\n  * `Uint` etcetera are renamed to `UInt` ([#8905]).\n\n  * `String` is renamed to `AbstractString` ([#8872]).\n\n  * `FloatingPoint` is renamed to `AbstractFloat` ([#12162]).\n\n  * `None` is deprecated; use `Union{}` instead ([#8423]).\n\n  * `Nothing` (the type of `nothing`) is renamed to `Void` ([#8423]).\n\n  * Arrays can be constructed with the syntax `Array{T}(m,n)` ([#3214], [#10075]).\n\n  * `Dict` literal syntax `[a=>b,c=>d]` is replaced by `Dict(a=>b,c=>d)`,\n    `{a=>b}` is replaced by `Dict{Any,Any}(a=>b)`, and\n    `(K=>V)[...]` is replaced by `Dict{K,V}(...)`.\n    The new syntax has many advantages: all of its components are first-class,\n    it generalizes to other types of containers, it is easier to guess how to\n    specify key and value types, and the syntaxes for empty and pre-populated\n    dicts are synchronized. As part of this change, `=>` is parsed as a normal\n    operator, and `Base` defines it to construct `Pair` objects ([#6739]).\n\n  * `Char` is no longer a subtype of `Integer` ([#8816]).\n    Char now supports a more limited set of operations with `Integer` types:\n\n      * comparison / equality\n      * `Char` + `Int` = `Char`\n      * `Char` - `Char` = `Int`\n\n  * `round` rounds to the nearest integer using the default rounding mode,\n    which is ties-to-even by default ([#8750]).\n\n  * A custom triple-quoted string like `x\"\"\"...\"\"\"` no longer invokes an `x_mstr`\n    macro. Instead, the string is first unindented and then `x_str` is invoked,\n    as if the string had been single-quoted ([#10228]).\n\n  * Colons (`:`) within indexing expressions are no longer lowered to the range\n    `1:end`. Instead, the `:` identifier is passed directly. Custom array types\n    that implement `getindex` or `setindex!` methods must also extend those\n    methods to support arguments of type `Colon` ([#10331]).\n\n  * Unions of types should now be written with curly braces instead of parentheses, i.e.\n    `Union{Type1, Type2}` instead of `Union(Type1, Type2)` ([#11432]).\n\n  * The keyword `local` is no longer allowed in global scope. Use `let` instead of\n    `begin` to create a new scope from the top level ([#7234], [#10472]).\n\n  * Triple-quoted strings no longer treat tabs as 8 spaces. Instead, the\n    longest common prefix of spaces and tabs is removed.\n\n  * `global x` in a nested scope is now a syntax error if `x` is local\n    to the enclosing scope ([#7264]/[#11985]).\n\n  * The default `importall Base.Operators` is deprecated, and relying on it\n    will give a warning ([#8113]).\n\n  * `remotecall_fetch` and `fetch` now rethrow any uncaught remote exception locally as a\n    `RemoteException`. Previously they would return the remote exception object.\n    The worker pid, remote exception and remote backtrace are available in the\n    thrown `RemoteException`.\n\n  * If any of the enclosed async operations in a `@sync` block throw exceptions, they\n    are now collected in a `CompositeException` and the `CompositeException` thrown.\n\n\nCommand line option changes\n---------------------------\n\n  * The `-i` option now forces the REPL to run after loading the specified script (if any) ([#11347]).\n\n  * New option `--handle-signals={yes|no}` to disable Julia's signal handlers.\n\n  * The `--depwarn={yes|no|error}` option enables/disables syntax and method deprecation warnings,\n    or turns them into errors ([#9294]).\n\n  * Some command line options are slated for deprecation / removal\n    - `-f, --no-startup` Don't load ~/.juliarc (deprecated, use --startup-file=no)\n    - `-F` Load ~/.juliarc (deprecated, use --startup-file=yes)`\n    - `-P, --post-boot <expr>`  Evaluate <expr>, but don't disable interactive mode (deprecated, use -i -e instead)\n    - `--no-history-file`  Don't load history file (deprecated, use --history-file=no)\n\nCompiler/Runtime improvements\n-----------------------------\n\n  * Functions may be annotated with metadata (`:meta` expressions) to be used by the compiler ([#8297]).\n\n  * `@inline` before a function definition forces the compiler to inline the function ([#8297]).\n\n  * Loads from heap-allocated immutables are hoisted out of loops in more cases ([#8867]).\n\n  * Accessing fields that are always initialized no longer produces undefined checks ([#8827]).\n\n  * New generational garbage collector which greatly reduces GC overhead for many commmon workloads ([#5227]).\n\nLibrary improvements\n--------------------\n\n  * Build with USE_GPL_LIBS=0 to exclude all GPL libraries and code ([#10870]).\n\n  * Linear algebra\n\n    * The `LinAlg` module is now exported.\n\n    * `sparse(A)` now takes any `AbstractMatrix` A as an argument ([#10031]).\n\n    * Factorization API is now type-stable; functions dispatch on `Val{false}` or `Val{true}` instead of a boolean value ([#9575]).\n\n    * Added generic Cholesky factorization, and the Cholesky factorization is now parametrized by the matrix type ([#7236]).\n\n    * Sparse `cholfact` and `ldltfact` functions now accept a `perm` keyword\n      for user-provided permutations and a `shift` keyword to factorize\n      a shifted matrix ([#10844]).\n\n    * New `svds` function for the sparse truncated SVD ([#9425]).\n\n    * `Symmetric` and `Hermitian` immutables are now parametrized by the matrix type ([#7992]).\n\n    * New `ordschur` and `ordschur!` functions for sorting a Schur factorization by the eigenvalues ([#8467],[#9701]).\n\n    * `Givens` type doesn't have a size anymore and is no longer a subtype of `AbstractMatrix` ([#8660]).\n\n    * Large speedup in sparse `\\` and splitting of Cholesky and LDL\u1d40 factorizations into `cholfact` and `ldltfact` ([#10117]).\n\n    * Add sparse least squares to `\\` by adding `qrfact` for sparse matrices based on the SPQR library ([#10180]).\n\n    * Split `Triangular` type into `UpperTriangular`, `LowerTriangular`, `UnitUpperTriagular` and `UnitLowerTriangular` ([#9779])\n\n    * OpenBLAS 64-bit (ILP64) interface is now compiled with a `64_` suffix ([#8734]) to avoid conflicts with external libraries using a 32-bit BLAS ([#4923]).\n\n    * New `vecdot` function, analogous to `vecnorm`, for Euclidean inner products over any iterable container ([#11067]).\n\n    * `p = plan_fft(x)` and similar functions now return a `Base.DFT.Plan` object, rather\n    than an anonymous function.  Calling it via `p(x)` is deprecated in favor of\n    `p * x` or `p \\ x` (for the inverse), and it can also be used with `A_mul_B!`\n    to employ pre-allocated output arrays ([#12087]).\n\n    * `LU{T,Tridiagonal{T}}` now supports extraction of `L`, `U`, `p`, and `P` factors ([#12137]).\n\n    * Allocations in sparse matrix factorizations are now tracked by Julia's garbage collector ([#12034]).\n\n  * Strings\n\n    * NUL-terminated strings should now be passed to C via the new `Cstring` type, not `Ptr{UInt8}` or `Ptr{Cchar}`,\n      in order to check whether the string is free of NUL characters (which would cause silent truncation in C).\n      The analogous type `Cwstring` should be used for NUL-terminated `wchar_t*` strings ([#10994]).\n\n    * `graphemes(s)` returns an iterator over grapheme substrings of `s` ([#9261]).\n\n    * Character predicates such as `islower()`, `isspace()`, etc. use\n      utf8proc to provide uniform cross-platform behavior and\n      up-to-date, locale-independent support for Unicode standards\n      ([#5939]).\n\n    * `reverseind` function to convert indices in reversed strings (e.g. from\n      reversed regex searches) to indices in the original string ([#9249]).\n\n    * `charwidth(c)` and `strwidth(s)` now return up-to-date cross-platform\n      results (via utf8proc) ([#10659]): Julia now likes pizza ([#3721]), but some terminals still don't.\n\n    * `is_valid_char(c)`, (now `isvalid(Char,c)` ([#11241])), now correctly handles Unicode \"non-characters\", which are valid Unicode codepoints ([#11171]).\n\n    * Backreferences in replacement strings in calls to `replace` with a `Regex` pattern are now supported ([#11849]).\n      Use the `s` string prefix to indicate a replacement string contains a backreference. For example, `replace(\"ab\", r\"(.)(.)\", s\"\\2\\1\")` yields \"ba\".\n\n    * Capture groups in regular expressions can now be named using PCRE syntax, `(?P<group_name>...)`. Capture group matches can be accessed by name by indexing a `Match` object with the name of the group ([#11566]).\n\n    * `countlines()` now counts all lines, not just non-empty ([#11947]).\n\n  * Array and AbstractArray improvements\n\n    * New multidimensional iterators and index types for efficient iteration over `AbstractArray`s. Array iteration should generally be written as `for i in eachindex(A) ... end` rather than `for i = 1:length(A) ... end` ([#8432]).\n\n    * New implementation of SubArrays with substantial performance and functionality improvements ([#8501]).\n\n    * AbstractArray subtypes only need to implement `size` and `getindex`\n      for scalar indices to support indexing; all other indexing behaviors\n      (including logical indexing, ranges of indices, vectors, colons, etc.) are\n      implemented in default fallbacks. Similarly, they only need to implement\n      scalar `setindex!` to support all forms of indexed assingment ([#10525]).\n\n    * AbstractArrays that do not extend `similar` now return an `Array` by\n      default ([#10525]).\n\n  * Data structures\n\n    * New `sortperm!` function for pre-allocated index arrays ([#8792]).\n\n    * Switch from `O(N)` to `O(log N)` algorithm for `dequeue!(pq, key)`\n    with `PriorityQueue`. This provides major speedups for large\n    queues ([#8011]).\n\n    * `PriorityQueue` now includes the order type among its\n      parameters, `PriorityQueue{KeyType,ValueType,OrderType}`. An\n      empty queue can be constructed as `pq =\n      PriorityQueue(KeyType,ValueType)`, if you intend to use the\n      default `Forward` order, or `pq = PriorityQueue(KeyType,\n      ValueType, OrderType)` otherwise ([#8011]).\n\n    * Efficient `mean` and `median` for ranges ([#8089]).\n\n    * `deepcopy` recurses through immutable types and makes copies of their mutable fields ([#8560]).\n\n    * `copy(a::DArray)` will now make a copy of a `DArray` ([#9745]).\n\n  * New types\n\n    * Enums are now supported through the `@enum EnumName EnumValue1\n      EnumValue2` syntax. Enum member values also support abitrary\n      value assignment by the `@enum EnumName EnumValue1=1\n      EnumValue2=10 EnumValue3=20` syntax ([#10168]).\n\n    * New `Dates` module for calendar dates and other time-interval calculations ([#7654]).\n\n    * New `Nullable` type for missing data ([#8152]).\n\n    * A new `Val{T}` type allows one to dispatch on bits-type values ([#9452]).\n\n    * `linspace` now returns a `LinSpace` object which lazily computes linear interpolation of values between the start and stop values. It \"lifts\" endpoints which are approximately rational in the same manner as the `colon` operator.\n\n  * Arithmetic\n\n    * `convert` now checks for overflow when truncating integers or converting between\n    signed and unsigned ([#5413]).\n\n    * Arithmetic is type-preserving for more types; e.g. `(x::Int8) + (y::Int8)` now\n    yields an `Int8` ([#3759]).\n\n    * Reductions (e.g. `reduce`, `sum`) widen small types (integers smaller than `Int`, and `Float16`).\n\n    * Added optional rounding argument to floating-point constructors ([#8845]).\n\n    * Equality (`==`) and inequality (`<`/`<=`) comparisons are now correct\n      across all numeric types ([#9133], [#9198]).\n\n    * Rational arithmetic throws errors on overflow ([#8672]).\n\n    * Optional `log` and `log1p` functions implemented in pure Julia (experimental) ([#10008]).\n\n    * The `MathConst` type has been renamed `Irrational` ([#11922]).\n\n    * `isapprox` now has simpler and more sensible default tolerances ([#12393]), supports arrays, and has synonyms `\u2248` ([U+2248](http://www.fileformat.info/info/unicode/char/2248/index.htm), LaTeX `\\approx`) and `\u2249` ([U+2249](http://www.fileformat.info/info/unicode/char/2249/index.htm), LaTeX `\\napprox`) for `isapprox` and `!isapprox`, respectively ([#12472]).\n\n  * Numbers\n\n    * `primes` is now faster and has been extended to generate the primes in a user defined closed interval ([#12025]).\n\n    * The function `primesmask` which generates a prime sieve for a user defined closed interval is now exported ([#12025]).\n\n  * Random numbers\n\n    * Streamlined random number generation APIs [#8246].\n    The default `rand` no longer uses global state in the underlying C library,\n    dSFMT, making it closer to being thread-safe ([#8399], [#8832]).\n    All APIs can now take an `AbstractRNG` argument ([#8854], [#9065]). The seed argument to `srand` is now optional ([#8320], [#8854]).\n    The APIs accepting a range argument are extended to accept an arbitrary\n    `AbstractArray` ([#9049]).\n    Passing a range of `BigInt` to `rand` or `rand!` is now supported ([#9122]).\n    There are speed improvements across the board ([#8808], [#8941], [#8958], [#9083]).\n\n    * Significantly faster `randn` ([#9126], [#9132]).\n\n    * The `randexp` and `randexp!` functions are exported ([#9144]).\n\n  * File\n\n    * Added function `readlink` which returns the value of a symbolic link \"path\" ([#10714]).\n\n    * Added function `ismount` which checks if a directory is a mount point ([#11279]).\n\n    * The `cp` function now accepts keyword arguments `remove_destination` and `follow_symlinks` ([#10888]).\n\n    * The `mv` function now accepts keyword argument `remove_destination` ([#11145]).\n\n  * `Pipe()` creates a bidirectional I/O object that can be passed to `spawn` or `pipeline`\n    for redirecting process streams ([#12739]).\n\n  * Other improvements\n\n    * You can now tab-complete emoji via their [short names](http://www.emoji-cheat-sheet.com/), using `\\:name:<tab>` ([#10709]).\n\n    * `gc_enable` subsumes `gc_disable`, and also returns the previous GC state.\n\n    * `assert`, `@assert` now throws an `AssertionError` exception type ([#9734]).\n\n    * `@simd` now rejects invalid control flow (`@goto` / break / continue) in the inner loop body at compile time ([#8624]).\n\n    * The `machinefile` now supports a host count ([#7616]).\n\n    * `code_native` now outputs branch labels ([#8897]).\n\n    * Added `recvfrom` to get source address of UDP packets ([#9418]).\n\n    * `ClusterManager` performance improvements ([#9309]) and support for changing transports([#9434]).\n\n    * Added `Base.get_process_title` / `Base.set_process_title` ([#9957]).\n\n    * `readavailable` now returns a byte vector instead of a string.\n\n    * New `lock` and `unlock` functions, operating on `ReentrantLock`, to lock a stream during\n      concurrent writes from multiple tasks ([#10679]).\n\n    * `code_llvm` now outputs stripped IR without debug info or other attached metadata.\n      Use `code_llvm_raw` for the unstripped output ([#10747]).\n\n    * New `withenv(var=>val, ...) do ... end` function to temporarily\n      modify environment variables ([#10914]).\n\n    * New function `relpath` returns a relative filepath to path either from the current\n      directory or from an optional start directory ([#10893]).\n\n    * `mktemp` and `mktempdir` now take an optional argument to set which\n      directory the temporary file or directory is created in.\n\n    * New garbage collector tracked memory allocator functions: `jl_malloc`, `jl_calloc`,\n    `jl_realloc`, and `jl_free` with libc API ([[#12034]]).\n\n    * `mktempdir` and `mktemp` now have variants that take a function as its\n      first argument for automated clean-up ([[#9017]]).\n\nDeprecated or removed\n---------------------\n\n  * several syntax whitespace insensitivities have been deprecated ([#11891]).\n    ```julia\n     # function call\n     f (x)\n\n     # getindex\n     x [17]\n     rand(2) [1]\n\n     # function definition\n     f (x) = x^2\n     function foo (x)\n\tx^2\n     end\n    ```\n\n  * indexing with `Real`s that are not subtypes of `Integer` (`Rational`, `AbstractFloat`, etc.) has been deprecated ([#10458]).\n\n  * `push!(A)` has been deprecated, use `append!` instead of splatting arguments to `push!` ([#10400]).\n\n  * `names` for composite datatypes has been deprecated and\n    renamed to `fieldnames` ([#10332]).\n\n  * `DArray` functionality has been removed from `Base` and is now a\n    standalone package under the JuliaParallel umbrella organization ([#10333]).\n\n  * The `Graphics` module has been removed from `Base` and is now a\n    standalone package ([#10150], [#9862]).\n\n  * The `Woodbury` special matrix type has been removed from `LinAlg` ([#10024]).\n\n  * `median` and `median!` no longer accept a `checknan` keyword argument ([#8605]).\n\n  * `inf` and `nan` are now deprecated in favor of `T(Inf)` and `T(NaN)`, respectively ([#8776]).\n\n  * `oftype(T::Type, x)` is deprecated in favor of `convert(T,x)` (or `T(x)`).\n\n  * `{...}` syntax is deprecated in favor of `Any[...]` ([#8578]).\n\n  * `itrunc`, `ifloor`, `iceil` and `iround` are deprecated in favour of\n    `trunc{T<:Integer}(T,x)`, `floor{T<:Integer}(T,x)`, etc.. `trunc` is now\n    always bound-checked;`Base.unsafe_trunc` provides the old unchecked `itrunc`\n    behaviour ([#9133]).\n\n  * `squeeze` now requires that passed dimension(s) are an `Int` or tuple of `Int`s;\n    calling `squeeze` with an arbitrary iterator is deprecated ([#9271]).\n    Additionally, passed dimensions must be unique and correspond to extant\n    dimensions of the input array.\n\n  * `randbool` is deprecated. Use `rand(Bool)` to produce a random boolean value, and\n    `bitrand` to produce a random BitArray ([#9105], [#9569]).\n\n  * `beginswith` is renamed to `startswith` ([#9578]).\n\n  * `null` is renamed to `nullspace` ([#9714]).\n\n  * The operators `|>`, `.>`, `>>`, and `.>>` as used for process I/O redirection\n    are replaced with the `pipeline` function ([#5349], [#12739]).\n\n  * `flipud(A)` and `fliplr(A)` have been deprecated in favor of `flipdim(A, 1)` and\n    `flipdim(A, 2)`, respectively ([#10446]).\n\n  * Numeric conversion functions whose names are lower-case versions of type\n    names have been removed. To convert a scalar, use the type name, e.g.\n    `Int32(x)`. To convert an array to a different element type, use\n    `Array{T}(x)`, `map(T,x)`, or `round(T,x)`. To parse a string as an integer\n    or floating-point number, use `parse` ([#1470], [#6211]).\n\n  * Low-level functions from the C library and dynamic linker have been moved to\n    modules `Libc` and `Libdl`, respectively ([#10328]).\n\n  * The functions `parseint`, `parsefloat`, `float32_isvalid`,\n  `float64_isvalid`, and the string-argument `BigInt` and `BigFloat` have\n  been replaced by `parse` and `tryparse` with a type argument. The string\n  macro `big\"xx\"` can be used to construct `BigInt` and `BigFloat` literals\n  ([#3631], [#5704], [#9487], [#10543], [#10955]).\n\n  * the `--int-literals` compiler option is no longer accepted ([#9597]).\n\n  * Instead of `linrange`, use `linspace` ([#9666]).\n\n  * The functions `is_valid_char`, `is_valid_ascii`, `is_valid_utf8`, `is_valid_utf16`, and\n    `is_valid_utf32` have been replaced by generic `isvalid` methods.\n    The single argument form `isvalid(value)` can now be used for values of type `Char`, `ASCIIString`,\n    `UTF8String`, `UTF16String` and `UTF32String`.\n    The two argument form `isvalid(type, value)` can be used with the above types, with values\n    of type `Vector{UInt8}`, `Vector{UInt16}`, `Vector{UInt32}`, and `Vector{Char}` ([#11241]).\n\n  * Instead of `utf32(64,123,...)` use `utf32(UInt32[64,123,...])` ([#11379]).\n\n  * `start_timer` and `stop_timer` are replaced by `Timer` and `close`.\n\n  * The following internal julia C functions have been renamed, in order to prevent\n    potential naming conflicts with C libraries: ([#11741])\n\n    * `gc_wb*` -> `jl_gc_wb*`\n\n    * `gc_queue_root` -> `jl_gc_queue_root`\n\n    * `allocobj` -> `jl_gc_allocobj`\n\n    * `alloc_[0-3]w` -> `jl_gc_alloc_*w`\n\n    * `diff_gc_total_bytes` -> `jl_gc_diff_total_bytes`\n\n    * `sync_gc_total_bytes` -> `jl_gc_sync_total_bytes`\n\n  * `require(::AbstractString)` and `reload` (see news about addition of `compile`).\n\n  * `cartesianmap` is deprecated in favor of iterating over a `CartesianRange`\n\nJulia v0.3.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * Greatly enhanced performance for passing and returning `Tuple`s ([#4042]).\n\n  * `Tuple`s (of `Integer`s, `Symbol`s, or `Bool`s) can now be used as type\n    parameters ([#5164]).\n\n  * An additional default \"inner\" constructor accepting any arguments is now\n    generated. Constructors that look like `MyType(a, b) = new(a, b)` do not\n    need to be added manually ([#4026], [#7071]).\n\n  * Expanded array type hierarchy to include an abstract `DenseArray` for\n    in-memory arrays with standard strided storage ([#987], [#2345],\n    [#6212]).\n\n  * When reloading code, types whose definitions have not changed can be\n    ignored in some cases.\n\n  * Binary `~` now parses as a vararg macro call to `@~`.\n    For example `x~y~z` => `@~ x y z` ([#4882]).\n\n  * Structure fields can now be accessed by index ([#4806]).\n\n  * If a module contains a function `__init__()`, it will be called when\n    the module is first loaded, and on process startup if a pre-compiled\n    version of the module is present ([#1268]).\n\n  * Multi-line comments ([#69], [#6128]): `#= .... =#`\n\n  * `--check-bounds=yes|no` compiler option\n\n  * Unicode identifiers are normalized (NFC) so that different encodings\n    of equivalent strings are treated as the same identifier ([#5462]).\n\n  * The set of characters permitted in identifiers has been restricted based\n    on Unicode categories. Generally, punctuation, formatting and control\n    characters, and operator symbols are not allowed in identifiers.\n    Number-like characters cannot begin identifiers ([#5936]).\n\n  * Define a limited number of infix Unicode operators ([#552], [#6582]):\n\n    | Precedence class | Operators (with synonyms, if any)\n    | ---------------- | ---------------------------------\n    |   ==             |  \u2265 (>=) \u2264 (<=) \u2261 (===) \u2260 (!=) \u2262 (!==) .\u2265 (.>=) .\u2264 (.<=) .!= (.\u2260) \u2208 (`in`) \u2209 (`(x,y)->!in(x, y)`) \u220b (`(x,y)->in(y, x)`) \u220c (`(x,y)->!in(y, x)`) \u2286 (`issubset`) \u2288 (`(x,y)->!issubset(x, y)`) \u228a (`(x,y)->x\u2286y && x!=y`) |\n    |   +              | \u222a (`union`) |\n    |   *              | \u00f7 (`div`) \u22c5 (`dot`) \u00d7 (`cross`) \u2229 (`intersect`) |\n    |   unary          | \u221a \u221b |\n\n    In addition to these, many of the Unicode operator symbols are parsed\n    as infix operators and are available for user-defined methods ([#6929]).\n\n  * Improved reporting of syntax errors ([#6179])\n\n  * `break` inside a `for` loop with multiple ranges now exits the entire loop nest ([#5154])\n\n  * Local goto statements using the `@goto` and `@label` macros ([#101]).\n\nREPL improvements\n-----------------\n\n  * New native-Julia REPL implementation, eliminating many problems\n    stemming from the old GNU Readline-based REPL ([#6270]).\n\n  * Tab-substitution of LaTeX math symbols (e.g. `\\alpha` by `\u03b1`) ([#6911]).\n    This also works in IJulia and in Emacs ([#6920]).\n\n  * `workspace()` function for obtaining a fresh workspace ([#1195]).\n\nLibrary improvements\n--------------------\n\n  * `isequal` now compares all numbers by value, ignoring type ([#6624]).\n\n  * Implement limited shared-memory parallelism with `SharedArray`s ([#5380]).\n\n  * Well-behaved floating-point ranges ([#2333], [#5636]).\n    Introduced the `FloatRange` type for floating-point ranges with a step,\n    which will give intuitive/correct results for classically problematic\n    ranges like `0.1:0.1:0.3`, `0.0:0.7:2.1` or `1.0:1/49:27.0`.\n\n  * `mod2pi` function ([#4799], [#4862]).\n\n  * New functions `minmax` and `extrema` ([#5275]).\n\n  * New macros `@edit`, `@less`, `@code_typed`, `@code_lowered`, `@code_llvm` and `@code_native` that all function like `@which` ([#5832]).\n\n  * `consume(p)` extended to `consume(p, args...)`, allowing it\n    to optionally pass `args...` back to the producer ([#4775]).\n\n  * `.juliarc.jl` is now loaded for both script and REPL execution ([#5076]).\n\n  * The `Sys` module now includes convenient functions for working with\n    dynamic library handles; `Sys.dllist` will list out all paths currently\n    loaded via `dlopen`, and `Sys.dlpath` will lookup a path from a handle\n\n  * `readdlm` treats multiple whitespace characters as a single delimiter\n    by default (when no delimiter is specified). This is useful for reading\n    fixed-width or messy whitespace-delimited data ([#5403]).\n\n  * The Airy, Bessel, Hankel, and related functions (`airy*`,\n    `bessel*`, `hankel*`) now detect errors returned by the underlying\n    AMOS library, throwing an `AmosException` in that case ([#4967]).\n\n  * `methodswith` now returns an array of `Method`s ([#5464]) rather\n    than just printing its results.\n\n  * `errno([code])` function to get or set the C library's `errno`.\n\n  * `GitHub` module for interacting with the GitHub API.\n\n  * Package improvements\n\n    * Packages are now installed into `.julia/v0.3` by default (or\n      whatever the current Julia version is), so that different\n      versions of Julia can co-exist with incompatible packages.\n      Existing `.julia` installations are unaffected unless `Pkg.init()`\n      is run to re-create the package directories ([#3344], [#5737]).\n\n    * `Pkg.submit(pkg[,commit])` function to automatically submit\n      a GitHub pull request to the package author.\n\n  * Collections improvements\n\n    * `Array` assignment (e.g. `x[:] = y`) ignores singleton dimensions\n      and allows the last dimension of one side to match all trailing dimensions\n      of the other ([#4048], [#4383]).\n\n    * `Dict(kv)` constructor for any iterator on `(key,value)` pairs.\n\n    * Multi-key `Dict`s: `D[x,y...]` is now a synonym for `D[(x,y...)]`\n      for associations `D` ([#4870]).\n\n    * `push!` and `unshift!` can push multiple arguments ([#4782]).\n\n    * `writedlm` and `writecsv` now accept any iterable collection of\n      iterable rows, in addition to `AbstractArray` arguments, and the\n      `writedlm` delimiter can be any printable object (e.g. a\n      `String`) instead of just a `Char`.\n\n    * `isempty` now works for any iterable collection ([#5827]).\n\n    * `unique` now accepts an optional `dim` argument for finding\n      unique rows or columns of a matrix or regions of a\n      multidimensional array ([#5811]).\n\n  * `Number` improvements\n\n    * The `ImaginaryUnit` type no longer exists. Instead, `im` is of type\n      `Complex{Bool}`. Making this work required changing the semantics of\n      boolean multiplication to approximately, `true * x = x` and\n      `false * x = zero(x)`, which can itself be considered useful ([#5468]).\n\n    * `big` is now vectorized ([#4766])\n\n    * `nextpow` and `prevpow` now return the `a^n` values instead of the\n      exponent `n` ([#4819])\n\n    * Overflow detection in `parseint` ([#4874]).\n\n    * `rand` now supports arbitrary `Ranges` arguments ([#5059]).\n\n    * `expm1` and `log1p` now support complex arguments ([#3141]).\n\n    * Broadcasting `.//` is now included ([#7094]).\n\n    * `prevfloat` and `nextfloat` now saturate at -Inf and Inf,\n      respectively, and have otherwise been fixed to follow the IEEE-754\n      standard functions `nextDown` and `nextUp` ([#5025]).\n\n    * New function `widen` for widening numeric types and values, and `widemul`\n      for multiplying to a larger type ([#6169]).\n\n    * `polygamma`, `digamma`, and `trigamma` now accept complex\n      arguments, and `zeta(s, z)` now provides the Hurwitz zeta ([#7125]).\n\n    * Narrow integer types (< 32 bits) are promoted to `Float64` rather\n      than to `Float32` by `float(x)` ([#7390]).\n\n  * `String` improvements\n\n    * Triple-quoted regex strings, `r\"\"\"...\"\"\"` ([#4934]).\n\n    * New string type, `UTF16String` ([#4930]), constructed by\n      `utf16(s)` from another string, a `Uint16` array or pointer, or\n      a byte array (possibly prefixed by a byte-order marker to\n      indicate endian-ness).  Its data is internally `NULL`-terminated\n      for passing to C ([#7016]).\n\n    * `CharString` is renamed to `UTF32String` ([#4943]), and its data\n      is now internally `NULL`-terminated for passing to C ([#7016]).\n      `CharString(c::Char...)` is deprecated in favor of `utf32(c...)`,\n      and `utf32(s)` otherwise has functionality similar to `utf16(s)`.\n\n    * New `WString` and `wstring` synonyms for either `UTF16String`\n      and `utf16` or `UTF32String` and `utf32`, respectively, depending\n      on the width of `Cwchar_t` ([#7016]).\n\n    * `normalize_string` function to perform Unicode normalization,\n      case-folding, and other transformations ([#5576]).\n\n    * `pointer(s, i=1)` for `ByteString`, `UTF16String`, `UTF32String`,\n      and `SubString`s thereof ([#5703]).\n\n    * `bytestring` is automatically called on `String` arguments for\n      conversion to `Ptr{Uint8}` in `ccall` ([#5677]).\n\n  * Linear algebra improvements\n\n      * Balancing options for eigenvector calculations for general matrices ([#5428]).\n\n      * Mutating linear algebra functions no longer promote ([#5526]).\n\n      * `condskeel` for Skeel condition numbers ([#5726]).\n\n      * `norm(::Matrix)` no longer calculates a vector norm when the first\n        dimension is one ([#5545]); it always uses the operator (induced)\n        matrix norm.\n\n      * New `vecnorm(itr, p=2)` function that computes the norm of\n        any iterable collection of numbers as if it were a vector of\n        the same length.  This generalizes and replaces `normfro` ([#6057]),\n        and `norm` is now type-stable ([#6056]).\n\n      * New `UniformScaling` matrix type and identity `I` constant ([#5810]).\n\n      * None of the concrete matrix factorization types are exported from `Base`\n        by default anymore.\n\n    * Sparse linear algebra\n\n      * 1-d sparse `getindex` has been implemented ([#7047])\n\n      * Faster sparse `getindex` ([#7131]).\n\n      * Faster sparse `kron` ([#4958]).\n\n      * `sparse(A) \\ B` now supports a matrix `B` of right-hand sides ([#5196]).\n\n      * `eigs(A, sigma)` now uses shift-and-invert for nonzero shifts `sigma` and inverse iteration for `which=\"SM\"`. If `sigma==nothing` (the new default), computes ordinary (forward) iterations ([#5776]).\n\n      * `sprand` is faster, and whether any entry is nonzero is now determined independently with the specified probability ([#6726]).\n\n    * Dense linear algebra for special matrix types\n\n      * Interconversions between the special matrix types `Diagonal`, `Bidiagonal`,\n        `SymTridiagonal`, `Triangular`, and `Triangular`, and `Matrix` are now allowed\n        for matrices which are representable in both source and destination types ([5e3f074b]).\n\n      * Allow for addition and subtraction over mixed matrix types, automatically promoting\n        the result to the denser matrix type ([a448e080], [#5927])\n\n      * new algorithms for linear solvers and eigensystems of `Bidiagonal`\n        matrices of generic element types ([#5277])\n\n      * new algorithms for linear solvers, eigensystems and singular systems of `Diagonal`\n        matrices of generic element types ([#5263])\n\n      * new algorithms for linear solvers and eigensystems of `Triangular`\n        matrices of generic element types ([#5255])\n\n      * specialized `inv` and `det` methods for `Tridiagonal` and `SymTridiagonal`\n        based on recurrence relations between principal minors ([#5358])\n\n      * specialized `transpose`, `ctranspose`, `istril`, `istriu` methods for\n        `Triangular` ([#5255]) and `Bidiagonal` ([#5277])\n\n      * new LAPACK wrappers\n        - condition number estimate `cond(A::Triangular)` ([#5255])\n\n      * parametrize `Triangular` on matrix type ([#7064])\n\n      * Lyapunov / Sylvester solver ([#7435])\n\n      * `eigvals` for `Symmetric`, `Tridiagonal` and `Hermitian` matrices now\n        support additional method signatures: ([#3688], [#6652], [#6678], [#7647])\n        - `eigvals(M, el, eu)` finds all eigenvalues in the interval `(el, eu]`\n        - `eigvals(M, il:iu)` finds the `il`th through the `iu`th eigenvalues (in ascending order)\n\n    * Dense linear algebra for generic matrix element types\n\n      * LU factorization ([#5381] and [#5430])\n\n      * QR factorization ([#5526])\n\n  * New function `deleteat!` deletes a specified index or indices and\n    returns the updated collection\n\n  * The `setenv` function for external processes now accepts a `dir` keyword\n    argument for specifying the directory to start the child process in ([#4888]).\n\n  * Constructors for collections (`Set`, `Dict`, etc.) now generally accept a\n    single iterable argument giving the elements of the collection ([#4996], [#4871])\n\n  * Ranges and arrays with the same elements are now unequal. This allows hashing\n    and comparing ranges to be faster ([#5778]).\n\n  * Broadcasting now works on arbitrary `AbstractArrays` ([#5387])\n\n  * Reduction functions that accept a pre-allocated output array, including\n    `sum!`, `prod!`, `maximum!`, `minimum!`, `all!`, `any!` ([#6197], [#5387])\n\n  * Faster performance on `fill!` and `copy!` for array types not supporting\n    efficient linear indexing ([#5671], [#5387])\n\n  * Changes to range types ([#5585])\n\n    * `Range` is now the abstract range type, instead of `Ranges`\n\n    * New function `range` for constructing ranges by length\n\n    * `Range` is now `StepRange`, and `Range1` is now `UnitRange`. Their\n      constructors accept end points instead of lengths. Both are subtypes of a\n      new abstract type `OrdinalRange`.\n\n    * Ranges now support `BigInt` and general ordinal types.\n\n    * Very large ranges (e.g. `0:typemax(Int)`) can now be constructed, but some\n      operations (e.g. `length`) will raise an `OverflowError`.\n\n  * Extended API for `cov` and `cor`, which accept keyword arguments `vardim`,\n    `corrected`, and `mean` ([#6273])\n\n  * New functions `randsubseq` and `randsubseq!` to create a random subsequence of an array ([#6726])\n\n  * New macro `@evalpoly` for efficient inline evaluation of polynomials ([#7146]).\n\n  * The signal filtering function `filt` now accepts an optional initial filter state vector. A new in-place function `filt!` is also exported ([#7513]).\n\n  * Significantly faster `cumsum` and `cumprod` ([#7359]).\n\n  * Implement `findmin` and `findmax` over specified array dimensions ([#6716]).\n\n  * Support memory-mapping of files with offsets on Windows ([#7242]).\n\n  * Catch writes to protect memory, such as when trying to modify a mmapped file opened in read-only mode ([#3434]).\n\nEnvironment improvements\n------------------------\n\n  * New `--code-coverage` and `--track-allocation` startup features allow one to measure the number of executions or the amount of memory allocated, respectively, at each line of code ([#5423],[#7464]).\n\n  * `Profile.init` now accepts keyword arguments, and returns the current settings when no arguments are supplied ([#7365]).\n\nBuild improvements\n------------------\n\n  * Dependencies are now verified against stored MD5/SHA512 hashes, to ensure\n    that the correct file has been downloaded and was not modified ([#6773]).\n\n\nDeprecated or removed\n---------------------\n\n  * `convert(Ptr{T1}, x::Array{T2})` is now deprecated unless `T1 == T2`\n    or `T1 == Void` ([#6073]).  (You can still explicitly `convert`\n    one pointer type into another if needed.)\n\n  * `Sys.shlib_ext` has been renamed to `Sys.dlext`\n\n  * `dense` is deprecated in favor of `full` ([#4759]).\n\n  * The `Stat` type is renamed `StatStruct` ([#4670]).\n\n  * `setrounding`, `rounding` and `setrounding` now take an additional\n    argument specifying the floating point type to which they apply. The old\n    behaviour and `[get/set/with]_bigfloat_rounding` functions are deprecated ([#5007]).\n\n  * `cholpfact` and `qrpfact` are deprecated in favor of keyword arguments in\n    `cholfact(..., pivot=true)` and `qrfact(..., pivot=true)` ([#5330]).\n\n  * `symmetrize!` is deprecated in favor of `Base.LinAlg.copytri!` ([#5427]).\n\n  * `myindexes` has been renamed to `localindexes` ([#5475]).\n\n  * `factorize!` is deprecated in favor of `factorize` ([#5526]).\n\n  * `nnz` counts the number of structural nonzeros in a sparse\n    matrix. Use `countnz` for the actual number of nonzeros ([#6769]).\n\n  * `setfield` is renamed `setfield!` ([#5748]).\n\n  * `put` and `take` are renamed `put!` and `take!` ([#5511]).\n\n  * `put!` now returns its first argument, the remote reference ([#5819]).\n\n  * `read` methods that modify a passed array are now called `read!` ([#5970])\n\n  * `infs` and `nans` are deprecated in favor of the more general `fill`.\n\n  * `*` and `div` are no longer supported for `Char`.\n\n  * `Range` is renamed `StepRange` and `Range1` is renamed `UnitRange`.\n    `Ranges` is renamed `Range`.\n\n  * `bitmix` is replaced by a 2-argument form of `hash`.\n\n  * `readsfrom` and `writesto` are replaced by `open` ([#6948]).\n\n  * `insert!` now throws a `BoundsError` if\n    `index > length(collection)+1` ([#7373]).\n\n  * No longer exported from `Base`:\n    * `start_reading`, `stop_reading`, `start_watching` ([#10885]).\n\nJulia v0.2.0 Release Notes\n==========================\n\nThe 0.2 release brings improvements to many areas of Julia. Among the\nmost visible changes are support for 64-bit Windows, keyword arguments\nto functions, immutable types, a redesigned and polished package\nmanager, a multimedia interface supporting usage of Julia in IPython,\na built-in profiler, and major improvements to Julia's linear algebra,\nI/O, and parallel capabilities. These are accompanied by many other\nchanges adding new features, enhancing the library's consistency,\nimproving performance, increasing test coverage, easing installation,\nand expanding the documentation. While not part of Julia proper, the\npackage ecosystem has also grown and matured considerably since the\n0.1 release. See below for more information about the long list of\nchanges that improve Julia's usability and performance.\n\nNew language features\n---------------------\n\n  * Keyword & optional function arguments ([#485], [#1817]).\n\n  * Immutable types ([#13]).\n\n  * Triple-quoted string literals ([#70]).\n\n  * New infix operator `in` (e.g. `x in S`), and corresponding function\n    `in(x,S)`, replacing `contains(S,x)` function ([#2703]).\n\n  * New variable bindings on each for loop and comprehension iteration ([#1571]).\n    For example, before this change:\n\n        julia> map(f->f(), { ()->i for i=1:3 })\n        3-element Any Array:\n         3\n         3\n         3\n\n    and after:\n\n        julia> map(f->f(), { ()->i for i=1:3 })\n        3-element Any Array:\n         1\n         2\n         3\n\n  * Explicit relative importing ([#2375]).\n\n  * Methods can be added to functions in other modules using dot syntax,\n    as in `Foo.bar(x) = 0`.\n\n  * `import module: name1, name2, ...` ([#5214]).\n\n  * A semicolon is now allowed after an `import` or `using` statement ([#4130]).\n\n  * In an interactive session (REPL), you can use `;cmd` to run `cmd` via an interactive\n    shell. For example:\n\n        julia> ;ls\n        CONTRIBUTING.md  Makefile           VERSION      deps/      julia@  ui/\n        DISTRIBUTING.md  NEWS.md            Windows.inc  doc/       src/    usr/\n        LICENSE.md       README.md          base/        etc/       test/\n        Make.inc         README.windows.md  contrib/     examples/  tmp/\n\nNew library functions\n---------------------\n\n  * Sampling profiler ([#2597]).\n\n  * Functions for examining stages of the compiler's output:\n    `code_lowered`, `code_typed`, `code_llvm`, and `code_native`.\n\n  * Multimedia I/O API (display, writemime, etcetera) ([#3932]).\n\n  * MPFR-based `BigFloat` ([#2814]), and many new `BigFloat` operations.\n\n  * New half-precision IEEE floating-point type, `Float16` ([#3467]).\n\n  * Support for setting floating-point rounding modes ([#3149]).\n\n  * `methodswith` shows all methods with an argument of specific type.\n\n  * `mapslices` provides a general way to perform operations on slices of arrays ([#2204]).\n\n  * `repeat` function for constructing Arrays with repeated elements ([#3605]).\n\n  * `Collections.PriorityQueue` type and `Collections.heap` functions ([#2920]).\n\n  * `quadgk` 1d-integration routine ([#3140]).\n\n  * `erfinv` and `erfcinv` functions ([#2987]).\n\n  * `varm`, `stdm` ([#2265]).\n\n  * `digamma`, `invdigamma`, `trigamma` and `polygamma` for calculating derivatives of `gamma` function ([#3233]).\n\n  * `logdet` ([#3070]).\n\n  * Names for C-compatible types: `Cchar`, `Clong`, etc. ([#2370]).\n\n  * `cglobal` to access global variables ([#1815]).\n\n  * `unsafe_pointer_to_objref` ([#2468]) and `pointer_from_objref` ([#2515]).\n\n  * `readandwrite` for external processes.\n\n  * I/O functions `readbytes` and `readbytes!` ([#3878]).\n\n  * `flush_cstdio` function ([#3949]).\n\n  * ClusterManager makes it possible to support different types of compute clusters\n    ([#3649], [#4014]).\n\n  * `rmprocs` for removing processors from a parallel computing session.\n    The system can also tolerate to some extent processors that die unexpectedly\n    ([#3050]).\n\n  * `interrupt` for interrupting worker processes ([#3819]).\n\n  * `timedwait` does a polled wait for an event till a specified timeout.\n\n  * `Condition` type with `wait` and `notify` functions for `Task` synchronization.\n\n  * `versioninfo` provides detailed version information, especially useful when\n    reporting and diagnosing bugs.\n\n  * `detach` for running child processes in a separate process group.\n\n  * `setenv` for passing environment variables to child processes.\n\n  * `ifelse` eagerly-evaluated conditional function, especially useful for\n    vectorized conditionals.\n\nLibrary improvements\n--------------------\n\n  * `isequal` now returns `false` for numbers of different types.\n    This makes it much easier to define hashing for new numeric types.\n    Uses of `Dict` with numeric keys might need to change\n    to account for this increased strictness.\n\n  * A redesigned and rewritten `Pkg` system is much more robust in case of problems.\n    The basic interface to adding and removing package requirements remains the\n    same, but great deal of additional functionality for developing packages in-place\n    was added. See the new [packages chapter] in the manual for further details.\n\n  * Sorting API updates ([#3665]) \u2013 see [sorting functions].\n\n  * The `delete!(d::Dict, key)` function has been split into separate `pop!`\n    and `delete!` functions ([#3439]).\n    `pop!(d,key)` removes `key` from `d` and returns the value that was associated with it;\n    it throws an exception if `d` does not contain `key`.\n    `delete!(d,key)` removes `key` from `d` and succeeds regardless of whether `d`\n    contained `key` or not, returning `d` itself in either case.\n\n  * Linear-algebra factorization routines (`lu`, `chol`, etc.) now return\n    `Factorization` objects (and `lud`, `chold`, etc. are deprecated; [#2212]).\n\n  * A number of improvements to sparse matrix capabilities and sparse linear algebra.\n\n  * More linear algebra fixes and eigensolver hooks\n    for `SymTridiagonal`, `Tridiagonal` and `Bidiagonal` matrix types\n    ([#2606], [#2608], [#2609], [#2611], [#2678], [#2713], [#2720], [#2725]).\n\n  * Change `integer_valued`, `real_valued`, and so on to `isinteger`, `isreal`,\n    and so on, and semantics of the later are now value-based rather than type-based,\n    unlike MATLAB/Octave ([#3071]). `isbool` and `iscomplex` are eliminated in favor\n    of a general `iseltype` function.\n\n  * Transitive comparison of floats with rationals ([#3102]).\n\n  * Fast prime generation with `primes` and fast primality testing with `isprime`.\n\n  * `sum` and `cumsum` now use [pairwise summation] for better accuracy ([#4039]).\n\n  * Dot operators (`.+`, `.*` etc.) now broadcast singleton dimensions of array arguments.\n    This behavior can be applied to any function using `broadcast(f, ...)`.\n\n  * `combinations`, `permutations`, and `partitions` now return iterators instead of a task,\n    and `integer_partitions` has been renamed to `partitions` ([#3989], [#4055]).\n\n  * `isreadable`/`iswritable` methods added for more IO types ([#3872]).\n\n  * Much faster and improved `readdlm` and `writedlm` ([#3350], [#3468], [#3483]).\n\n  * Faster `matchall` ([#3719]), and various string and regex improvements.\n\n  * Documentation of advanced linear algebra features ([#2807]).\n\n  * Support optional RTLD flags in `dlopen` ([#2380]).\n\n  * `pmap` now works with any iterable collection.\n\n  * Options in `pmap` for retrying or ignoring failed tasks.\n\n  * New `sinpi(x)` and `cospi(x)` functions to compute sine and cosine of `pi*x`\n    more accurately ([#4112]).\n\n  * New implementations of elementary complex functions\n    `sqrt`, `log`, `asin`, `acos`, `atan`, `tanh`, `asinh`, `acosh`, `atanh`\n    with correct branch cuts ([#2891]).\n\n  * Improved behavior of `SubArray` ([#4412], [#4284], [#4044], [#3697], [#3790],\n    [#3148], [#2844], [#2644] and various other fixes).\n\n  * New convenience functions in graphics API.\n\n  * Improved backtraces on Windows and OS X.\n\n  * Implementation of reduction functions (including `reduce`, `mapreduce`, `sum`, `prod`,\n    `maximum`, `minimum`, `all`, and `any`) are refactored, with improved type stability,\n    efficiency, and consistency ([#6116], [#7035], [#7061], [#7106]).\n\nDeprecated or removed\n---------------------\n\n  * Methods of `min` and `max` that do reductions were renamed to\n    `minimum` and `maximum`. `min(x)` is now `minimum(x)`, and\n    `min(x,(),dim)` is now `minimum(x,dim)` ([#4235]).\n\n  * `ComplexPair` was renamed to `Complex` and made `immutable`,\n    and `Complex128` and so on are now aliases to the new `Complex` type.\n\n  * `!` was added to the name of many mutating functions,\n    e.g., `push` was renamed `push!` ([#907]).\n\n  * `ref` renamed to `getindex`, and `assign` to `setindex!` ([#1484]).\n\n  * `writeable` renamed to `writable` ([#3874]).\n\n  * `logb` and `ilogb` renamed to `exponent` ([#2516]).\n\n  * `quote_string` became a method of `repr`.\n\n  * `safe_char`, `check_ascii`, and `check_utf8` replaced by\n    `is_valid_char`, `is_valid_ascii`, and `is_valid_utf8`, respectively.\n\n  * `each_line`, `each_match`, `begins_with`, `ends_with`, `parse_float`,\n    `parse_int`, and `seek_end` replaced by: `eachline`, `eachmatch`, and so on\n    (`_` was removed) ([#1539]).\n\n  * `parse_bin(s)` replaced by `parseint(s,2)`;\n    `parse_oct(s)` replaced by `parseint(s,8)`;\n    `parse_hex(s)` replaced by `parseint(s,16)`.\n\n  * `findn_nzs` replaced by `findnz` ([#1539]).\n\n  * `DivideByZeroError` replaced by `DivideError`.\n\n  * `addprocs_ssh`, `addprocs_ssh_tunnel`, and `addprocs_local`\n    replaced by `addprocs` (with keyword options).\n\n  * `remote_call`, `remote_call_fetch`, and `remote_call_wait`\n    replaced by `remotecall`, `remotecall_fetch`, and `remotecall_wait`.\n\n  * `has` replaced by `in` for sets and by `haskey` for dictionaries.\n\n  * `diagmm` and `diagmm!` replaced by `scale` and `scale!` ([#2916]).\n\n  * `unsafe_ref` and `unsafe_assign` replaced by `unsafe_load` and `unsafe_store!`.\n\n  * `add_each!` and `del_each!` replaced by `union!` and `setdiff!`.\n\n  * `isdenormal` renamed to `issubnormal` ([#3105]).\n\n  * `expr` replaced by direct call to `Expr` constructor.\n\n  * `|`, `&`, `$`, `-`, and `~` for sets replaced by\n    `union`, `intersect`, `symdiff`, `setdiff`, and `complement` ([#3272]).\n\n  * `square` function removed.\n\n  * `pascal` function removed.\n\n  * `add` and `add!` for `Set` replaced by `push!`.\n\n  * `ls` function deprecated in favor of `readdir` or `;ls` in the REPL.\n\n  * `start_timer` now expects arguments in units of seconds, not milliseconds.\n\n  * Shell redirection operators `|`, `>`, and `<` eliminated in favor of a new\n    operator `|>` ([#3523]).\n\n  * `amap` is deprecated in favor of new `mapslices` functionality.\n\n  * The `Reverse` iterator was removed since it did not work in many cases.\n\n  * The `gcd` function now returns a non-negative value regardless of\n    the argument signs, and various other sign problems with `invmod`,\n    `lcm`, `gcdx`, and `powermod` were fixed ([#4811]).\n\nMiscellaneous changes\n---------------------\n\n  * `julia-release-*` executables renamed to `julia-*`,\n    and `libjulia-release` renamed to `libjulia` ([#4177]).\n\n  * Packages will now be installed in `.julia/vX.Y`, where\n    X.Y is the current Julia version.\n\nBugfixes and performance updates\n--------------------------------\n\nToo numerous to mention.\n\n[packages chapter]: https://docs.julialang.org/en/latest/manual/packages/\n[sorting functions]: https://docs.julialang.org/en/latest/stdlib/sort/\n[pairwise summation]: https://en.wikipedia.org/wiki/Pairwise_summation\n[a448e080]: https://github.com/JuliaLang/julia/commit/a448e080dc736c7fb326426dfcb2528be36973d3\n[5e3f074b]: https://github.com/JuliaLang/julia/commit/5e3f074b9173044a0a4219f9b285879ff7cec041\n<!--- generated by NEWS-update.jl: -->\n[#13]: https://github.com/JuliaLang/julia/issues/13\n[#69]: https://github.com/JuliaLang/julia/issues/69\n[#70]: https://github.com/JuliaLang/julia/issues/70\n[#101]: https://github.com/JuliaLang/julia/issues/101\n[#485]: https://github.com/JuliaLang/julia/issues/485\n[#550]: https://github.com/JuliaLang/julia/issues/550\n[#552]: https://github.com/JuliaLang/julia/issues/552\n[#907]: https://github.com/JuliaLang/julia/issues/907\n[#964]: https://github.com/JuliaLang/julia/issues/964\n[#987]: https://github.com/JuliaLang/julia/issues/987\n[#1090]: https://github.com/JuliaLang/julia/issues/1090\n[#1195]: https://github.com/JuliaLang/julia/issues/1195\n[#1268]: https://github.com/JuliaLang/julia/issues/1268\n[#1470]: https://github.com/JuliaLang/julia/issues/1470\n[#1484]: https://github.com/JuliaLang/julia/issues/1484\n[#1539]: https://github.com/JuliaLang/julia/issues/1539\n[#1571]: https://github.com/JuliaLang/julia/issues/1571\n[#1815]: https://github.com/JuliaLang/julia/issues/1815\n[#1817]: https://github.com/JuliaLang/julia/issues/1817\n[#2204]: https://github.com/JuliaLang/julia/issues/2204\n[#2212]: https://github.com/JuliaLang/julia/issues/2212\n[#2265]: https://github.com/JuliaLang/julia/issues/2265\n[#2333]: https://github.com/JuliaLang/julia/issues/2333\n[#2345]: https://github.com/JuliaLang/julia/issues/2345\n[#2370]: https://github.com/JuliaLang/julia/issues/2370\n[#2375]: https://github.com/JuliaLang/julia/issues/2375\n[#2380]: https://github.com/JuliaLang/julia/issues/2380\n[#2403]: https://github.com/JuliaLang/julia/issues/2403\n[#2468]: https://github.com/JuliaLang/julia/issues/2468\n[#2488]: https://github.com/JuliaLang/julia/issues/2488\n[#2515]: https://github.com/JuliaLang/julia/issues/2515\n[#2516]: https://github.com/JuliaLang/julia/issues/2516\n[#2597]: https://github.com/JuliaLang/julia/issues/2597\n[#2606]: https://github.com/JuliaLang/julia/issues/2606\n[#2608]: https://github.com/JuliaLang/julia/issues/2608\n[#2609]: https://github.com/JuliaLang/julia/issues/2609\n[#2611]: https://github.com/JuliaLang/julia/issues/2611\n[#2644]: https://github.com/JuliaLang/julia/issues/2644\n[#2678]: https://github.com/JuliaLang/julia/issues/2678\n[#2703]: https://github.com/JuliaLang/julia/issues/2703\n[#2713]: https://github.com/JuliaLang/julia/issues/2713\n[#2720]: https://github.com/JuliaLang/julia/issues/2720\n[#2725]: https://github.com/JuliaLang/julia/issues/2725\n[#2807]: https://github.com/JuliaLang/julia/issues/2807\n[#2814]: https://github.com/JuliaLang/julia/issues/2814\n[#2844]: https://github.com/JuliaLang/julia/issues/2844\n[#2891]: https://github.com/JuliaLang/julia/issues/2891\n[#2916]: https://github.com/JuliaLang/julia/issues/2916\n[#2920]: https://github.com/JuliaLang/julia/issues/2920\n[#2987]: https://github.com/JuliaLang/julia/issues/2987\n[#3050]: https://github.com/JuliaLang/julia/issues/3050\n[#3070]: https://github.com/JuliaLang/julia/issues/3070\n[#3071]: https://github.com/JuliaLang/julia/issues/3071\n[#3102]: https://github.com/JuliaLang/julia/issues/3102\n[#3105]: https://github.com/JuliaLang/julia/issues/3105\n[#3140]: https://github.com/JuliaLang/julia/issues/3140\n[#3141]: https://github.com/JuliaLang/julia/issues/3141\n[#3148]: https://github.com/JuliaLang/julia/issues/3148\n[#3149]: https://github.com/JuliaLang/julia/issues/3149\n[#3214]: https://github.com/JuliaLang/julia/issues/3214\n[#3233]: https://github.com/JuliaLang/julia/issues/3233\n[#3272]: https://github.com/JuliaLang/julia/issues/3272\n[#3344]: https://github.com/JuliaLang/julia/issues/3344\n[#3350]: https://github.com/JuliaLang/julia/issues/3350\n[#3434]: https://github.com/JuliaLang/julia/issues/3434\n[#3439]: https://github.com/JuliaLang/julia/issues/3439\n[#3467]: https://github.com/JuliaLang/julia/issues/3467\n[#3468]: https://github.com/JuliaLang/julia/issues/3468\n[#3483]: https://github.com/JuliaLang/julia/issues/3483\n[#3523]: https://github.com/JuliaLang/julia/issues/3523\n[#3605]: https://github.com/JuliaLang/julia/issues/3605\n[#3631]: https://github.com/JuliaLang/julia/issues/3631\n[#3649]: https://github.com/JuliaLang/julia/issues/3649\n[#3665]: https://github.com/JuliaLang/julia/issues/3665\n[#3688]: https://github.com/JuliaLang/julia/issues/3688\n[#3697]: https://github.com/JuliaLang/julia/issues/3697\n[#3719]: https://github.com/JuliaLang/julia/issues/3719\n[#3721]: https://github.com/JuliaLang/julia/issues/3721\n[#3737]: https://github.com/JuliaLang/julia/issues/3737\n[#3759]: https://github.com/JuliaLang/julia/issues/3759\n[#3790]: https://github.com/JuliaLang/julia/issues/3790\n[#3819]: https://github.com/JuliaLang/julia/issues/3819\n[#3872]: https://github.com/JuliaLang/julia/issues/3872\n[#3874]: https://github.com/JuliaLang/julia/issues/3874\n[#3878]: https://github.com/JuliaLang/julia/issues/3878\n[#3932]: https://github.com/JuliaLang/julia/issues/3932\n[#3949]: https://github.com/JuliaLang/julia/issues/3949\n[#3989]: https://github.com/JuliaLang/julia/issues/3989\n[#4014]: https://github.com/JuliaLang/julia/issues/4014\n[#4026]: https://github.com/JuliaLang/julia/issues/4026\n[#4039]: https://github.com/JuliaLang/julia/issues/4039\n[#4042]: https://github.com/JuliaLang/julia/issues/4042\n[#4044]: https://github.com/JuliaLang/julia/issues/4044\n[#4048]: https://github.com/JuliaLang/julia/issues/4048\n[#4055]: https://github.com/JuliaLang/julia/issues/4055\n[#4112]: https://github.com/JuliaLang/julia/issues/4112\n[#4130]: https://github.com/JuliaLang/julia/issues/4130\n[#4163]: https://github.com/JuliaLang/julia/issues/4163\n[#4177]: https://github.com/JuliaLang/julia/issues/4177\n[#4211]: https://github.com/JuliaLang/julia/issues/4211\n[#4235]: https://github.com/JuliaLang/julia/issues/4235\n[#4284]: https://github.com/JuliaLang/julia/issues/4284\n[#4383]: https://github.com/JuliaLang/julia/issues/4383\n[#4412]: https://github.com/JuliaLang/julia/issues/4412\n[#4470]: https://github.com/JuliaLang/julia/issues/4470\n[#4670]: https://github.com/JuliaLang/julia/issues/4670\n[#4759]: https://github.com/JuliaLang/julia/issues/4759\n[#4766]: https://github.com/JuliaLang/julia/issues/4766\n[#4775]: https://github.com/JuliaLang/julia/issues/4775\n[#4782]: https://github.com/JuliaLang/julia/issues/4782\n[#4799]: https://github.com/JuliaLang/julia/issues/4799\n[#4806]: https://github.com/JuliaLang/julia/issues/4806\n[#4811]: https://github.com/JuliaLang/julia/issues/4811\n[#4819]: https://github.com/JuliaLang/julia/issues/4819\n[#4862]: https://github.com/JuliaLang/julia/issues/4862\n[#4867]: https://github.com/JuliaLang/julia/issues/4867\n[#4870]: https://github.com/JuliaLang/julia/issues/4870\n[#4871]: https://github.com/JuliaLang/julia/issues/4871\n[#4874]: https://github.com/JuliaLang/julia/issues/4874\n[#4882]: https://github.com/JuliaLang/julia/issues/4882\n[#4888]: https://github.com/JuliaLang/julia/issues/4888\n[#4923]: https://github.com/JuliaLang/julia/issues/4923\n[#4930]: https://github.com/JuliaLang/julia/issues/4930\n[#4934]: https://github.com/JuliaLang/julia/issues/4934\n[#4943]: https://github.com/JuliaLang/julia/issues/4943\n[#4958]: https://github.com/JuliaLang/julia/issues/4958\n[#4967]: https://github.com/JuliaLang/julia/issues/4967\n[#4996]: https://github.com/JuliaLang/julia/issues/4996\n[#5007]: https://github.com/JuliaLang/julia/issues/5007\n[#5025]: https://github.com/JuliaLang/julia/issues/5025\n[#5059]: https://github.com/JuliaLang/julia/issues/5059\n[#5076]: https://github.com/JuliaLang/julia/issues/5076\n[#5154]: https://github.com/JuliaLang/julia/issues/5154\n[#5164]: https://github.com/JuliaLang/julia/issues/5164\n[#5196]: https://github.com/JuliaLang/julia/issues/5196\n[#5214]: https://github.com/JuliaLang/julia/issues/5214\n[#5227]: https://github.com/JuliaLang/julia/issues/5227\n[#5255]: https://github.com/JuliaLang/julia/issues/5255\n[#5263]: https://github.com/JuliaLang/julia/issues/5263\n[#5275]: https://github.com/JuliaLang/julia/issues/5275\n[#5277]: https://github.com/JuliaLang/julia/issues/5277\n[#5330]: https://github.com/JuliaLang/julia/issues/5330\n[#5349]: https://github.com/JuliaLang/julia/issues/5349\n[#5358]: https://github.com/JuliaLang/julia/issues/5358\n[#5380]: https://github.com/JuliaLang/julia/issues/5380\n[#5381]: https://github.com/JuliaLang/julia/issues/5381\n[#5387]: https://github.com/JuliaLang/julia/issues/5387\n[#5403]: https://github.com/JuliaLang/julia/issues/5403\n[#5413]: https://github.com/JuliaLang/julia/issues/5413\n[#5423]: https://github.com/JuliaLang/julia/issues/5423\n[#5427]: https://github.com/JuliaLang/julia/issues/5427\n[#5428]: https://github.com/JuliaLang/julia/issues/5428\n[#5430]: https://github.com/JuliaLang/julia/issues/5430\n[#5462]: https://github.com/JuliaLang/julia/issues/5462\n[#5464]: https://github.com/JuliaLang/julia/issues/5464\n[#5468]: https://github.com/JuliaLang/julia/issues/5468\n[#5475]: https://github.com/JuliaLang/julia/issues/5475\n[#5511]: https://github.com/JuliaLang/julia/issues/5511\n[#5526]: https://github.com/JuliaLang/julia/issues/5526\n[#5545]: https://github.com/JuliaLang/julia/issues/5545\n[#5576]: https://github.com/JuliaLang/julia/issues/5576\n[#5585]: https://github.com/JuliaLang/julia/issues/5585\n[#5636]: https://github.com/JuliaLang/julia/issues/5636\n[#5671]: https://github.com/JuliaLang/julia/issues/5671\n[#5677]: https://github.com/JuliaLang/julia/issues/5677\n[#5703]: https://github.com/JuliaLang/julia/issues/5703\n[#5704]: https://github.com/JuliaLang/julia/issues/5704\n[#5726]: https://github.com/JuliaLang/julia/issues/5726\n[#5737]: https://github.com/JuliaLang/julia/issues/5737\n[#5748]: https://github.com/JuliaLang/julia/issues/5748\n[#5776]: https://github.com/JuliaLang/julia/issues/5776\n[#5778]: https://github.com/JuliaLang/julia/issues/5778\n[#5810]: https://github.com/JuliaLang/julia/issues/5810\n[#5811]: https://github.com/JuliaLang/julia/issues/5811\n[#5819]: https://github.com/JuliaLang/julia/issues/5819\n[#5827]: https://github.com/JuliaLang/julia/issues/5827\n[#5832]: https://github.com/JuliaLang/julia/issues/5832\n[#5927]: https://github.com/JuliaLang/julia/issues/5927\n[#5936]: https://github.com/JuliaLang/julia/issues/5936\n[#5939]: https://github.com/JuliaLang/julia/issues/5939\n[#5970]: https://github.com/JuliaLang/julia/issues/5970\n[#6056]: https://github.com/JuliaLang/julia/issues/6056\n[#6057]: https://github.com/JuliaLang/julia/issues/6057\n[#6073]: https://github.com/JuliaLang/julia/issues/6073\n[#6081]: https://github.com/JuliaLang/julia/issues/6081\n[#6116]: https://github.com/JuliaLang/julia/issues/6116\n[#6128]: https://github.com/JuliaLang/julia/issues/6128\n[#6169]: https://github.com/JuliaLang/julia/issues/6169\n[#6179]: https://github.com/JuliaLang/julia/issues/6179\n[#6190]: https://github.com/JuliaLang/julia/issues/6190\n[#6197]: https://github.com/JuliaLang/julia/issues/6197\n[#6211]: https://github.com/JuliaLang/julia/issues/6211\n[#6212]: https://github.com/JuliaLang/julia/issues/6212\n[#6270]: https://github.com/JuliaLang/julia/issues/6270\n[#6273]: https://github.com/JuliaLang/julia/issues/6273\n[#6582]: https://github.com/JuliaLang/julia/issues/6582\n[#6624]: https://github.com/JuliaLang/julia/issues/6624\n[#6652]: https://github.com/JuliaLang/julia/issues/6652\n[#6678]: https://github.com/JuliaLang/julia/issues/6678\n[#6716]: https://github.com/JuliaLang/julia/issues/6716\n[#6726]: https://github.com/JuliaLang/julia/issues/6726\n[#6739]: https://github.com/JuliaLang/julia/issues/6739\n[#6769]: https://github.com/JuliaLang/julia/issues/6769\n[#6773]: https://github.com/JuliaLang/julia/issues/6773\n[#6842]: https://github.com/JuliaLang/julia/issues/6842\n[#6911]: https://github.com/JuliaLang/julia/issues/6911\n[#6920]: https://github.com/JuliaLang/julia/issues/6920\n[#6929]: https://github.com/JuliaLang/julia/issues/6929\n[#6948]: https://github.com/JuliaLang/julia/issues/6948\n[#7016]: https://github.com/JuliaLang/julia/issues/7016\n[#7035]: https://github.com/JuliaLang/julia/issues/7035\n[#7047]: https://github.com/JuliaLang/julia/issues/7047\n[#7061]: https://github.com/JuliaLang/julia/issues/7061\n[#7064]: https://github.com/JuliaLang/julia/issues/7064\n[#7071]: https://github.com/JuliaLang/julia/issues/7071\n[#7094]: https://github.com/JuliaLang/julia/issues/7094\n[#7106]: https://github.com/JuliaLang/julia/issues/7106\n[#7125]: https://github.com/JuliaLang/julia/issues/7125\n[#7131]: https://github.com/JuliaLang/julia/issues/7131\n[#7146]: https://github.com/JuliaLang/julia/issues/7146\n[#7234]: https://github.com/JuliaLang/julia/issues/7234\n[#7236]: https://github.com/JuliaLang/julia/issues/7236\n[#7242]: https://github.com/JuliaLang/julia/issues/7242\n[#7258]: https://github.com/JuliaLang/julia/issues/7258\n[#7264]: https://github.com/JuliaLang/julia/issues/7264\n[#7311]: https://github.com/JuliaLang/julia/issues/7311\n[#7359]: https://github.com/JuliaLang/julia/issues/7359\n[#7365]: https://github.com/JuliaLang/julia/issues/7365\n[#7373]: https://github.com/JuliaLang/julia/issues/7373\n[#7390]: https://github.com/JuliaLang/julia/issues/7390\n[#7435]: https://github.com/JuliaLang/julia/issues/7435\n[#7464]: https://github.com/JuliaLang/julia/issues/7464\n[#7513]: https://github.com/JuliaLang/julia/issues/7513\n[#7616]: https://github.com/JuliaLang/julia/issues/7616\n[#7647]: https://github.com/JuliaLang/julia/issues/7647\n[#7654]: https://github.com/JuliaLang/julia/issues/7654\n[#7704]: https://github.com/JuliaLang/julia/issues/7704\n[#7917]: https://github.com/JuliaLang/julia/issues/7917\n[#7992]: https://github.com/JuliaLang/julia/issues/7992\n[#8011]: https://github.com/JuliaLang/julia/issues/8011\n[#8036]: https://github.com/JuliaLang/julia/issues/8036\n[#8089]: https://github.com/JuliaLang/julia/issues/8089\n[#8113]: https://github.com/JuliaLang/julia/issues/8113\n[#8135]: https://github.com/JuliaLang/julia/issues/8135\n[#8152]: https://github.com/JuliaLang/julia/issues/8152\n[#8246]: https://github.com/JuliaLang/julia/issues/8246\n[#8283]: https://github.com/JuliaLang/julia/issues/8283\n[#8297]: https://github.com/JuliaLang/julia/issues/8297\n[#8320]: https://github.com/JuliaLang/julia/issues/8320\n[#8399]: https://github.com/JuliaLang/julia/issues/8399\n[#8423]: https://github.com/JuliaLang/julia/issues/8423\n[#8432]: https://github.com/JuliaLang/julia/issues/8432\n[#8467]: https://github.com/JuliaLang/julia/issues/8467\n[#8501]: https://github.com/JuliaLang/julia/issues/8501\n[#8560]: https://github.com/JuliaLang/julia/issues/8560\n[#8578]: https://github.com/JuliaLang/julia/issues/8578\n[#8599]: https://github.com/JuliaLang/julia/issues/8599\n[#8605]: https://github.com/JuliaLang/julia/issues/8605\n[#8624]: https://github.com/JuliaLang/julia/issues/8624\n[#8660]: https://github.com/JuliaLang/julia/issues/8660\n[#8672]: https://github.com/JuliaLang/julia/issues/8672\n[#8712]: https://github.com/JuliaLang/julia/issues/8712\n[#8734]: https://github.com/JuliaLang/julia/issues/8734\n[#8745]: https://github.com/JuliaLang/julia/issues/8745\n[#8750]: https://github.com/JuliaLang/julia/issues/8750\n[#8776]: https://github.com/JuliaLang/julia/issues/8776\n[#8791]: https://github.com/JuliaLang/julia/issues/8791\n[#8792]: https://github.com/JuliaLang/julia/issues/8792\n[#8808]: https://github.com/JuliaLang/julia/issues/8808\n[#8814]: https://github.com/JuliaLang/julia/issues/8814\n[#8816]: https://github.com/JuliaLang/julia/issues/8816\n[#8827]: https://github.com/JuliaLang/julia/issues/8827\n[#8832]: https://github.com/JuliaLang/julia/issues/8832\n[#8845]: https://github.com/JuliaLang/julia/issues/8845\n[#8846]: https://github.com/JuliaLang/julia/issues/8846\n[#8854]: https://github.com/JuliaLang/julia/issues/8854\n[#8867]: https://github.com/JuliaLang/julia/issues/8867\n[#8872]: https://github.com/JuliaLang/julia/issues/8872\n[#8897]: https://github.com/JuliaLang/julia/issues/8897\n[#8905]: https://github.com/JuliaLang/julia/issues/8905\n[#8941]: https://github.com/JuliaLang/julia/issues/8941\n[#8958]: https://github.com/JuliaLang/julia/issues/8958\n[#9017]: https://github.com/JuliaLang/julia/issues/9017\n[#9049]: https://github.com/JuliaLang/julia/issues/9049\n[#9065]: https://github.com/JuliaLang/julia/issues/9065\n[#9083]: https://github.com/JuliaLang/julia/issues/9083\n[#9105]: https://github.com/JuliaLang/julia/issues/9105\n[#9122]: https://github.com/JuliaLang/julia/issues/9122\n[#9126]: https://github.com/JuliaLang/julia/issues/9126\n[#9132]: https://github.com/JuliaLang/julia/issues/9132\n[#9133]: https://github.com/JuliaLang/julia/issues/9133\n[#9144]: https://github.com/JuliaLang/julia/issues/9144\n[#9198]: https://github.com/JuliaLang/julia/issues/9198\n[#9249]: https://github.com/JuliaLang/julia/issues/9249\n[#9261]: https://github.com/JuliaLang/julia/issues/9261\n[#9271]: https://github.com/JuliaLang/julia/issues/9271\n[#9294]: https://github.com/JuliaLang/julia/issues/9294\n[#9309]: https://github.com/JuliaLang/julia/issues/9309\n[#9418]: https://github.com/JuliaLang/julia/issues/9418\n[#9425]: https://github.com/JuliaLang/julia/issues/9425\n[#9434]: https://github.com/JuliaLang/julia/issues/9434\n[#9452]: https://github.com/JuliaLang/julia/issues/9452\n[#9482]: https://github.com/JuliaLang/julia/issues/9482\n[#9487]: https://github.com/JuliaLang/julia/issues/9487\n[#9503]: https://github.com/JuliaLang/julia/issues/9503\n[#9569]: https://github.com/JuliaLang/julia/issues/9569\n[#9575]: https://github.com/JuliaLang/julia/issues/9575\n[#9578]: https://github.com/JuliaLang/julia/issues/9578\n[#9597]: https://github.com/JuliaLang/julia/issues/9597\n[#9627]: https://github.com/JuliaLang/julia/issues/9627\n[#9666]: https://github.com/JuliaLang/julia/issues/9666\n[#9690]: https://github.com/JuliaLang/julia/issues/9690\n[#9701]: https://github.com/JuliaLang/julia/issues/9701\n[#9714]: https://github.com/JuliaLang/julia/issues/9714\n[#9734]: https://github.com/JuliaLang/julia/issues/9734\n[#9745]: https://github.com/JuliaLang/julia/issues/9745\n[#9779]: https://github.com/JuliaLang/julia/issues/9779\n[#9862]: https://github.com/JuliaLang/julia/issues/9862\n[#9957]: https://github.com/JuliaLang/julia/issues/9957\n[#10008]: https://github.com/JuliaLang/julia/issues/10008\n[#10024]: https://github.com/JuliaLang/julia/issues/10024\n[#10031]: https://github.com/JuliaLang/julia/issues/10031\n[#10075]: https://github.com/JuliaLang/julia/issues/10075\n[#10117]: https://github.com/JuliaLang/julia/issues/10117\n[#10150]: https://github.com/JuliaLang/julia/issues/10150\n[#10168]: https://github.com/JuliaLang/julia/issues/10168\n[#10180]: https://github.com/JuliaLang/julia/issues/10180\n[#10228]: https://github.com/JuliaLang/julia/issues/10228\n[#10328]: https://github.com/JuliaLang/julia/issues/10328\n[#10331]: https://github.com/JuliaLang/julia/issues/10331\n[#10332]: https://github.com/JuliaLang/julia/issues/10332\n[#10333]: https://github.com/JuliaLang/julia/issues/10333\n[#10380]: https://github.com/JuliaLang/julia/issues/10380\n[#10400]: https://github.com/JuliaLang/julia/issues/10400\n[#10446]: https://github.com/JuliaLang/julia/issues/10446\n[#10458]: https://github.com/JuliaLang/julia/issues/10458\n[#10472]: https://github.com/JuliaLang/julia/issues/10472\n[#10525]: https://github.com/JuliaLang/julia/issues/10525\n[#10543]: https://github.com/JuliaLang/julia/issues/10543\n[#10548]: https://github.com/JuliaLang/julia/issues/10548\n[#10659]: https://github.com/JuliaLang/julia/issues/10659\n[#10679]: https://github.com/JuliaLang/julia/issues/10679\n[#10709]: https://github.com/JuliaLang/julia/issues/10709\n[#10714]: https://github.com/JuliaLang/julia/issues/10714\n[#10747]: https://github.com/JuliaLang/julia/issues/10747\n[#10844]: https://github.com/JuliaLang/julia/issues/10844\n[#10870]: https://github.com/JuliaLang/julia/issues/10870\n[#10885]: https://github.com/JuliaLang/julia/issues/10885\n[#10888]: https://github.com/JuliaLang/julia/issues/10888\n[#10893]: https://github.com/JuliaLang/julia/issues/10893\n[#10914]: https://github.com/JuliaLang/julia/issues/10914\n[#10955]: https://github.com/JuliaLang/julia/issues/10955\n[#10994]: https://github.com/JuliaLang/julia/issues/10994\n[#11030]: https://github.com/JuliaLang/julia/issues/11030\n[#11067]: https://github.com/JuliaLang/julia/issues/11067\n[#11105]: https://github.com/JuliaLang/julia/issues/11105\n[#11145]: https://github.com/JuliaLang/julia/issues/11145\n[#11171]: https://github.com/JuliaLang/julia/issues/11171\n[#11196]: https://github.com/JuliaLang/julia/issues/11196\n[#11241]: https://github.com/JuliaLang/julia/issues/11241\n[#11242]: https://github.com/JuliaLang/julia/issues/11242\n[#11279]: https://github.com/JuliaLang/julia/issues/11279\n[#11347]: https://github.com/JuliaLang/julia/issues/11347\n[#11379]: https://github.com/JuliaLang/julia/issues/11379\n[#11432]: https://github.com/JuliaLang/julia/issues/11432\n[#11566]: https://github.com/JuliaLang/julia/issues/11566\n[#11686]: https://github.com/JuliaLang/julia/issues/11686\n[#11688]: https://github.com/JuliaLang/julia/issues/11688\n[#11741]: https://github.com/JuliaLang/julia/issues/11741\n[#11849]: https://github.com/JuliaLang/julia/issues/11849\n[#11891]: https://github.com/JuliaLang/julia/issues/11891\n[#11922]: https://github.com/JuliaLang/julia/issues/11922\n[#11947]: https://github.com/JuliaLang/julia/issues/11947\n[#11985]: https://github.com/JuliaLang/julia/issues/11985\n[#12025]: https://github.com/JuliaLang/julia/issues/12025\n[#12031]: https://github.com/JuliaLang/julia/issues/12031\n[#12034]: https://github.com/JuliaLang/julia/issues/12034\n[#12087]: https://github.com/JuliaLang/julia/issues/12087\n[#12137]: https://github.com/JuliaLang/julia/issues/12137\n[#12162]: https://github.com/JuliaLang/julia/issues/12162\n[#12231]: https://github.com/JuliaLang/julia/issues/12231\n[#12264]: https://github.com/JuliaLang/julia/issues/12264\n[#12385]: https://github.com/JuliaLang/julia/issues/12385\n[#12393]: https://github.com/JuliaLang/julia/issues/12393\n[#12458]: https://github.com/JuliaLang/julia/issues/12458\n[#12472]: https://github.com/JuliaLang/julia/issues/12472\n[#12491]: https://github.com/JuliaLang/julia/issues/12491\n[#12576]: https://github.com/JuliaLang/julia/issues/12576\n[#12727]: https://github.com/JuliaLang/julia/issues/12727\n[#12739]: https://github.com/JuliaLang/julia/issues/12739\n[#12819]: https://github.com/JuliaLang/julia/issues/12819\n[#12872]: https://github.com/JuliaLang/julia/issues/12872\n[#13062]: https://github.com/JuliaLang/julia/issues/13062\n[#13171]: https://github.com/JuliaLang/julia/issues/13171\n[#13232]: https://github.com/JuliaLang/julia/issues/13232\n[#13338]: https://github.com/JuliaLang/julia/issues/13338\n[#13387]: https://github.com/JuliaLang/julia/issues/13387\n[#13412]: https://github.com/JuliaLang/julia/issues/13412\n[#13440]: https://github.com/JuliaLang/julia/issues/13440\n[#13465]: https://github.com/JuliaLang/julia/issues/13465\n[#13480]: https://github.com/JuliaLang/julia/issues/13480\n[#13496]: https://github.com/JuliaLang/julia/issues/13496\n[#13542]: https://github.com/JuliaLang/julia/issues/13542\n[#13612]: https://github.com/JuliaLang/julia/issues/13612\n[#13680]: https://github.com/JuliaLang/julia/issues/13680\n[#13681]: https://github.com/JuliaLang/julia/issues/13681\n[#13707]: https://github.com/JuliaLang/julia/issues/13707\n[#13774]: https://github.com/JuliaLang/julia/issues/13774\n[#13780]: https://github.com/JuliaLang/julia/issues/13780\n[#13824]: https://github.com/JuliaLang/julia/issues/13824\n[#13825]: https://github.com/JuliaLang/julia/issues/13825\n[#13897]: https://github.com/JuliaLang/julia/issues/13897\n[#14052]: https://github.com/JuliaLang/julia/issues/14052\n[#14114]: https://github.com/JuliaLang/julia/issues/14114\n[#14140]: https://github.com/JuliaLang/julia/issues/14140\n[#14194]: https://github.com/JuliaLang/julia/issues/14194\n[#14243]: https://github.com/JuliaLang/julia/issues/14243\n[#14335]: https://github.com/JuliaLang/julia/issues/14335\n[#14413]: https://github.com/JuliaLang/julia/issues/14413\n[#14424]: https://github.com/JuliaLang/julia/issues/14424\n[#14458]: https://github.com/JuliaLang/julia/issues/14458\n[#14469]: https://github.com/JuliaLang/julia/issues/14469\n[#14474]: https://github.com/JuliaLang/julia/issues/14474\n[#14519]: https://github.com/JuliaLang/julia/issues/14519\n[#14608]: https://github.com/JuliaLang/julia/issues/14608\n[#14623]: https://github.com/JuliaLang/julia/issues/14623\n[#14660]: https://github.com/JuliaLang/julia/issues/14660\n[#14676]: https://github.com/JuliaLang/julia/issues/14676\n[#14759]: https://github.com/JuliaLang/julia/issues/14759\n[#14777]: https://github.com/JuliaLang/julia/issues/14777\n[#14798]: https://github.com/JuliaLang/julia/issues/14798\n[#15007]: https://github.com/JuliaLang/julia/issues/15007\n[#15032]: https://github.com/JuliaLang/julia/issues/15032\n[#15172]: https://github.com/JuliaLang/julia/issues/15172\n[#15192]: https://github.com/JuliaLang/julia/issues/15192\n[#15242]: https://github.com/JuliaLang/julia/issues/15242\n[#15244]: https://github.com/JuliaLang/julia/issues/15244\n[#15258]: https://github.com/JuliaLang/julia/issues/15258\n[#15409]: https://github.com/JuliaLang/julia/issues/15409\n[#15431]: https://github.com/JuliaLang/julia/issues/15431\n[#15524]: https://github.com/JuliaLang/julia/issues/15524\n[#15550]: https://github.com/JuliaLang/julia/issues/15550\n[#15609]: https://github.com/JuliaLang/julia/issues/15609\n[#15708]: https://github.com/JuliaLang/julia/issues/15708\n[#15731]: https://github.com/JuliaLang/julia/issues/15731\n[#15763]: https://github.com/JuliaLang/julia/issues/15763\n[#15804]: https://github.com/JuliaLang/julia/issues/15804\n[#15975]: https://github.com/JuliaLang/julia/issues/15975\n[#16010]: https://github.com/JuliaLang/julia/issues/16010\n[#16024]: https://github.com/JuliaLang/julia/issues/16024\n[#16058]: https://github.com/JuliaLang/julia/issues/16058\n[#16071]: https://github.com/JuliaLang/julia/issues/16071\n[#16098]: https://github.com/JuliaLang/julia/issues/16098\n[#16107]: https://github.com/JuliaLang/julia/issues/16107\n[#16154]: https://github.com/JuliaLang/julia/issues/16154\n[#16219]: https://github.com/JuliaLang/julia/issues/16219\n[#16260]: https://github.com/JuliaLang/julia/issues/16260\n[#16285]: https://github.com/JuliaLang/julia/issues/16285\n[#16362]: https://github.com/JuliaLang/julia/issues/16362\n[#16403]: https://github.com/JuliaLang/julia/issues/16403\n[#16404]: https://github.com/JuliaLang/julia/issues/16404\n[#16450]: https://github.com/JuliaLang/julia/issues/16450\n[#16455]: https://github.com/JuliaLang/julia/issues/16455\n[#16466]: https://github.com/JuliaLang/julia/issues/16466\n[#16481]: https://github.com/JuliaLang/julia/issues/16481\n[#16502]: https://github.com/JuliaLang/julia/issues/16502\n[#16510]: https://github.com/JuliaLang/julia/issues/16510\n[#16600]: https://github.com/JuliaLang/julia/issues/16600\n[#16603]: https://github.com/JuliaLang/julia/issues/16603\n[#16621]: https://github.com/JuliaLang/julia/issues/16621\n[#16622]: https://github.com/JuliaLang/julia/issues/16622\n[#16645]: https://github.com/JuliaLang/julia/issues/16645\n[#16663]: https://github.com/JuliaLang/julia/issues/16663\n[#16731]: https://github.com/JuliaLang/julia/issues/16731\n[#16854]: https://github.com/JuliaLang/julia/issues/16854\n[#16953]: https://github.com/JuliaLang/julia/issues/16953\n[#16972]: https://github.com/JuliaLang/julia/issues/16972\n[#17033]: https://github.com/JuliaLang/julia/issues/17033\n[#17037]: https://github.com/JuliaLang/julia/issues/17037\n[#17075]: https://github.com/JuliaLang/julia/issues/17075\n[#17132]: https://github.com/JuliaLang/julia/issues/17132\n[#17266]: https://github.com/JuliaLang/julia/issues/17266\n[#17300]: https://github.com/JuliaLang/julia/issues/17300\n[#17323]: https://github.com/JuliaLang/julia/issues/17323\n[#17374]: https://github.com/JuliaLang/julia/issues/17374\n[#17393]: https://github.com/JuliaLang/julia/issues/17393\n[#17402]: https://github.com/JuliaLang/julia/issues/17402\n[#17404]: https://github.com/JuliaLang/julia/issues/17404\n[#17510]: https://github.com/JuliaLang/julia/issues/17510\n[#17546]: https://github.com/JuliaLang/julia/issues/17546\n[#17668]: https://github.com/JuliaLang/julia/issues/17668\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/src/sys.c": "// This file is a part of Julia. License is MIT: https://julialang.org/license\n\n/*\n  sys.c\n  I/O and operating system utility functions\n*/\n#include \"julia.h\"\n#include \"julia_internal.h\"\n#include <sys/stat.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <errno.h>\n#include <signal.h>\n#include <fcntl.h>\n\n#ifdef _OS_WINDOWS_\n#include <psapi.h>\n#else\n#include <unistd.h>\n#if !defined(_SC_NPROCESSORS_ONLN) || defined(_OS_FREEBSD_) || defined(_OS_DARWIN_)\n// try secondary location for _SC_NPROCESSORS_ONLN, or for HW_AVAILCPU on BSDs\n#include <sys/sysctl.h>\n#endif\n#include <sys/wait.h>\n#include <sys/ptrace.h>\n#include <sys/mman.h>\n#include <dlfcn.h>\n#endif\n\n#ifndef _OS_WINDOWS_\n// for getrusage\n#include <sys/types.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#endif\n\n#ifdef __APPLE__\n#include <mach-o/dyld.h>\n#include <mach-o/nlist.h>\n#include <sys/types.h> // for jl_raise_debugger\n#elif !defined(_OS_WINDOWS_)\n#include <link.h>\n#endif\n\n#ifdef __SSE__\n#include <xmmintrin.h>\n#endif\n\n#if defined _MSC_VER\n#include <io.h>\n#include <intrin.h>\n#endif\n\n#ifdef JL_MSAN_ENABLED\n#include <sanitizer/msan_interface.h>\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#if defined(_OS_WINDOWS_) && !defined(_COMPILER_MINGW_)\nJL_DLLEXPORT char *dirname(char *);\n#else\n#include <libgen.h>\n#endif\n\nJL_DLLEXPORT uint32_t jl_getutf8(ios_t *s)\n{\n    uint32_t wc=0;\n    ios_getutf8(s, &wc);\n    return wc;\n}\n\nJL_DLLEXPORT int jl_sizeof_uv_mutex(void) { return sizeof(uv_mutex_t); }\nJL_DLLEXPORT int jl_sizeof_off_t(void) { return sizeof(off_t); }\n#ifndef _OS_WINDOWS_\nJL_DLLEXPORT int jl_sizeof_mode_t(void) { return sizeof(mode_t); }\nJL_DLLEXPORT int jl_ftruncate(int fd, int64_t length)\n{\n    return ftruncate(fd, (off_t)length);\n}\nJL_DLLEXPORT int64_t jl_lseek(int fd, int64_t offset, int whence)\n{\n    return lseek(fd, (off_t)offset, whence);\n}\nJL_DLLEXPORT ssize_t jl_pwrite(int fd, const void *buf, size_t count, int64_t offset)\n{\n    return pwrite(fd, buf, count, (off_t)offset);\n}\nJL_DLLEXPORT void *jl_mmap(void *addr, size_t length, int prot, int flags,\n                           int fd, int64_t offset)\n{\n    return mmap(addr, length, prot, flags, fd, (off_t)offset);\n}\n#else\nJL_DLLEXPORT int64_t jl_lseek(int fd, int64_t offset, int whence)\n{\n    return _lseeki64(fd, offset, whence);\n}\n#endif\nJL_DLLEXPORT int jl_sizeof_ios_t(void) { return sizeof(ios_t); }\n\nJL_DLLEXPORT long jl_ios_fd(ios_t *s) { return s->fd; }\n\nJL_DLLEXPORT int32_t jl_nb_available(ios_t *s)\n{\n    return (int32_t)(s->size - s->bpos);\n}\n\n// --- dir/file stuff ---\n\nJL_DLLEXPORT int jl_sizeof_uv_fs_t(void) { return sizeof(uv_fs_t); }\nJL_DLLEXPORT void jl_uv_fs_req_cleanup(uv_fs_t *req) { uv_fs_req_cleanup(req); }\nJL_DLLEXPORT char *jl_uv_fs_t_ptr(uv_fs_t *req) { return (char*)req->ptr; }\nJL_DLLEXPORT int jl_uv_fs_result(uv_fs_t *f) { return f->result; }\n\n// --- stat ---\nJL_DLLEXPORT int jl_sizeof_stat(void) { return sizeof(uv_stat_t); }\n\nJL_DLLEXPORT int32_t jl_stat(const char *path, char *statbuf)\n{\n    uv_fs_t req;\n    int ret;\n\n    // Ideally one would use the statbuf for the storage in req, but\n    // it's not clear that this is possible using libuv\n    ret = uv_fs_stat(uv_default_loop(), &req, path, NULL);\n    if (ret == 0)\n        memcpy(statbuf, req.ptr, sizeof(uv_stat_t));\n    uv_fs_req_cleanup(&req);\n    return ret;\n}\n\nJL_DLLEXPORT int32_t jl_lstat(const char *path, char *statbuf)\n{\n    uv_fs_t req;\n    int ret;\n\n    ret = uv_fs_lstat(uv_default_loop(), &req, path, NULL);\n    if (ret == 0)\n        memcpy(statbuf, req.ptr, sizeof(uv_stat_t));\n    uv_fs_req_cleanup(&req);\n    return ret;\n}\n\nJL_DLLEXPORT int32_t jl_fstat(int fd, char *statbuf)\n{\n    uv_fs_t req;\n    int ret;\n\n    ret = uv_fs_fstat(uv_default_loop(), &req, fd, NULL);\n    if (ret == 0)\n        memcpy(statbuf, req.ptr, sizeof(uv_stat_t));\n    uv_fs_req_cleanup(&req);\n    return ret;\n}\n\nJL_DLLEXPORT unsigned int jl_stat_dev(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_dev;\n}\n\nJL_DLLEXPORT unsigned int jl_stat_ino(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_ino;\n}\n\nJL_DLLEXPORT unsigned int jl_stat_mode(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_mode;\n}\n\nJL_DLLEXPORT unsigned int jl_stat_nlink(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_nlink;\n}\n\nJL_DLLEXPORT unsigned int jl_stat_uid(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_uid;\n}\n\nJL_DLLEXPORT unsigned int jl_stat_gid(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_gid;\n}\n\nJL_DLLEXPORT unsigned int jl_stat_rdev(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_rdev;\n}\n\nJL_DLLEXPORT uint64_t jl_stat_size(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_size;\n}\n\nJL_DLLEXPORT uint64_t jl_stat_blksize(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_blksize;\n}\n\nJL_DLLEXPORT uint64_t jl_stat_blocks(char *statbuf)\n{\n    return ((uv_stat_t*)statbuf)->st_blocks;\n}\n\n/*\n// atime is stupid, let's not support it\nJL_DLLEXPORT double jl_stat_atime(char *statbuf)\n{\n  uv_stat_t *s;\n  s = (uv_stat_t*)statbuf;\n  return (double)s->st_atim.tv_sec + (double)s->st_atim.tv_nsec * 1e-9;\n}\n*/\n\nJL_DLLEXPORT double jl_stat_mtime(char *statbuf)\n{\n    uv_stat_t *s;\n    s = (uv_stat_t*)statbuf;\n    return (double)s->st_mtim.tv_sec + (double)s->st_mtim.tv_nsec * 1e-9;\n}\n\nJL_DLLEXPORT double jl_stat_ctime(char *statbuf)\n{\n    uv_stat_t *s;\n    s = (uv_stat_t*)statbuf;\n    return (double)s->st_ctim.tv_sec + (double)s->st_ctim.tv_nsec * 1e-9;\n}\n\n// --- buffer manipulation ---\n\nJL_DLLEXPORT jl_array_t *jl_take_buffer(ios_t *s)\n{\n    size_t n;\n    jl_array_t *a;\n    if (s->buf == &s->local[0]) {\n        // small data case. copies, but this can be avoided using the\n        // technique of jl_readuntil below.\n        a = jl_pchar_to_array(s->buf, s->size);\n        ios_trunc(s, 0);\n    }\n    else {\n        char *b = ios_take_buffer(s, &n);\n        a = jl_ptr_to_array_1d(jl_array_uint8_type, b, n-1, 1);\n    }\n    return a;\n}\n\nJL_DLLEXPORT jl_value_t *jl_readuntil(ios_t *s, uint8_t delim, uint8_t str, uint8_t chomp)\n{\n    jl_array_t *a;\n    // manually inlined common case\n    char *pd = (char*)memchr(s->buf + s->bpos, delim, (size_t)(s->size - s->bpos));\n    if (pd) {\n        size_t n = pd - (s->buf + s->bpos) + 1;\n        if (str) {\n            size_t nchomp = 0;\n            if (chomp) {\n                nchomp = ios_nchomp(s, n);\n            }\n            jl_value_t *str = jl_pchar_to_string(s->buf + s->bpos, n - nchomp);\n            s->bpos += n;\n            return str;\n        }\n        a = jl_alloc_array_1d(jl_array_uint8_type, n);\n        memcpy(jl_array_data(a), s->buf + s->bpos, n);\n        s->bpos += n;\n    }\n    else {\n        a = jl_alloc_array_1d(jl_array_uint8_type, 80);\n        ios_t dest;\n        ios_mem(&dest, 0);\n        ios_setbuf(&dest, (char*)a->data, 80, 0);\n        size_t n = ios_copyuntil(&dest, s, delim);\n        if (chomp && n > 0 && dest.buf[n - 1] == '\\n') {\n            n--;\n            if (n > 0 && dest.buf[n - 1] == '\\r') {\n                n--;\n            }\n            int truncret = ios_trunc(&dest, n); // it should always be possible to truncate dest\n            assert(truncret == 0);\n        }\n        if (dest.buf != a->data) {\n            a = jl_take_buffer(&dest);\n        }\n        else {\n#ifdef STORE_ARRAY_LEN\n            a->length = n;\n#endif\n            a->nrows = n;\n            ((char*)a->data)[n] = '\\0';\n        }\n        if (str) {\n            JL_GC_PUSH1(&a);\n            jl_value_t *st = jl_array_to_string(a);\n            JL_GC_POP();\n            return st;\n        }\n    }\n    return (jl_value_t*)a;\n}\n\nJL_DLLEXPORT uint64_t jl_ios_get_nbyte_int(ios_t *s, const size_t n)\n{\n    assert(n <= 8);\n    size_t space, ret;\n    do {\n        space = (size_t)(s->size - s->bpos);\n        ret = ios_readprep(s, n);\n        if (space == ret && ret < n)\n            jl_eof_error();\n    } while(ret < n);\n    uint64_t x = 0;\n    uint8_t *buf = (uint8_t*)&s->buf[s->bpos];\n    if (n == 8) {\n        // expecting loop unrolling optimization\n        for (size_t i = 0; i < 8; i++)\n            x |= (uint64_t)buf[i] << (i << 3);\n    }\n    else if (n >= 4) {\n        // expecting loop unrolling optimization\n        for (size_t i = 0; i < 4; i++)\n            x |= (uint64_t)buf[i] << (i << 3);\n        for (size_t i = 4; i < n; i++)\n            x |= (uint64_t)buf[i] << (i << 3);\n    }\n    else {\n        for (size_t i = 0; i < n; i++)\n            x |= (uint64_t)buf[i] << (i << 3);\n    }\n    s->bpos += n;\n    return x;\n}\n\n// -- syscall utilities --\n\nJL_DLLEXPORT int jl_errno(void) { return errno; }\nJL_DLLEXPORT void jl_set_errno(int e) { errno = e; }\n\n// -- get the number of CPU cores --\n\n#ifdef _OS_WINDOWS_\ntypedef DWORD (WINAPI *GAPC)(WORD);\n#ifndef ALL_PROCESSOR_GROUPS\n#define ALL_PROCESSOR_GROUPS 0xffff\n#endif\n#endif\n\nJL_DLLEXPORT int jl_cpu_cores(void)\n{\n#if defined(HW_AVAILCPU) && defined(HW_NCPU)\n    size_t len = 4;\n    int32_t count;\n    int nm[2] = {CTL_HW, HW_AVAILCPU};\n    sysctl(nm, 2, &count, &len, NULL, 0);\n    if (count < 1) {\n        nm[1] = HW_NCPU;\n        sysctl(nm, 2, &count, &len, NULL, 0);\n        if (count < 1) { count = 1; }\n    }\n    return count;\n#elif defined(_SC_NPROCESSORS_ONLN)\n    long count = sysconf(_SC_NPROCESSORS_ONLN);\n    if (count < 1)\n        return 1;\n    return count;\n#elif defined(_OS_WINDOWS_)\n    //Try to get WIN7 API method\n    GAPC gapc = (GAPC) jl_dlsym_e(\n        jl_kernel32_handle,\n        \"GetActiveProcessorCount\"\n    );\n\n    if (gapc) {\n        return gapc(ALL_PROCESSOR_GROUPS);\n    }\n    else { //fall back on GetSystemInfo\n        SYSTEM_INFO info;\n        GetSystemInfo(&info);\n        return info.dwNumberOfProcessors;\n    }\n#else\n#warning \"cpu core detection not defined for this platform\"\n    return 1;\n#endif\n}\n\n\n// -- high resolution timers --\n// Returns time in nanosec\nJL_DLLEXPORT uint64_t jl_hrtime(void)\n{\n    return uv_hrtime();\n}\n\n// -- iterating the environment --\n\n#ifdef __APPLE__\n#include <crt_externs.h>\n#else\n#if !defined(_OS_WINDOWS_) || defined(_COMPILER_MINGW_)\nextern char **environ;\n#endif\n#endif\n\nJL_DLLEXPORT jl_value_t *jl_environ(int i)\n{\n#ifdef __APPLE__\n    char **environ = *_NSGetEnviron();\n#endif\n    char *env = environ[i];\n    return env ? jl_pchar_to_string(env, strlen(env)) : jl_nothing;\n}\n\n// -- child process status --\n\n#if defined _MSC_VER || defined _OS_WINDOWS_\n/* Native Woe32 API.  */\n#include <process.h>\n#define waitpid(pid,statusp,options) _cwait (statusp, pid, WAIT_CHILD)\n#define WAIT_T int\n#define WTERMSIG(x) ((x) & 0xff) /* or: SIGABRT ?? */\n#define WCOREDUMP(x) 0\n#define WEXITSTATUS(x) (((x) >> 8) & 0xff) /* or: (x) ?? */\n#define WIFSIGNALED(x) (WTERMSIG (x) != 0) /* or: ((x) == 3) ?? */\n#define WIFEXITED(x) (WTERMSIG (x) == 0) /* or: ((x) != 3) ?? */\n#define WIFSTOPPED(x) 0\n#define WSTOPSIG(x) 0 //Is this correct?\n#endif\n\nint jl_process_exited(int status)      { return WIFEXITED(status); }\nint jl_process_signaled(int status)    { return WIFSIGNALED(status); }\nint jl_process_stopped(int status)     { return WIFSTOPPED(status); }\n\nint jl_process_exit_status(int status) { return WEXITSTATUS(status); }\nint jl_process_term_signal(int status) { return WTERMSIG(status); }\nint jl_process_stop_signal(int status) { return WSTOPSIG(status); }\n\n// -- access to std filehandles --\n\nJL_STREAM *JL_STDIN  = (JL_STREAM*)STDIN_FILENO;\nJL_STREAM *JL_STDOUT = (JL_STREAM*)STDOUT_FILENO;\nJL_STREAM *JL_STDERR = (JL_STREAM*)STDERR_FILENO;\n\nJL_DLLEXPORT JL_STREAM *jl_stdin_stream(void)  { return JL_STDIN; }\nJL_DLLEXPORT JL_STREAM *jl_stdout_stream(void) { return JL_STDOUT; }\nJL_DLLEXPORT JL_STREAM *jl_stderr_stream(void) { return JL_STDERR; }\n\n// CPUID\n\n#ifdef HAVE_CPUID\nJL_DLLEXPORT void jl_cpuid(int32_t CPUInfo[4], int32_t InfoType)\n{\n#if defined _MSC_VER\n    __cpuid(CPUInfo, InfoType);\n#else\n    __asm__ __volatile__ (\n        #if defined(__i386__) && defined(__PIC__)\n        \"xchg %%ebx, %%esi;\"\n        \"cpuid;\"\n        \"xchg %%esi, %%ebx;\":\n        \"=S\" (CPUInfo[1]) ,\n        #else\n        \"cpuid\":\n        \"=b\" (CPUInfo[1]),\n        #endif\n        \"=a\" (CPUInfo[0]),\n        \"=c\" (CPUInfo[2]),\n        \"=d\" (CPUInfo[3]) :\n        \"a\" (InfoType)\n    );\n#endif\n}\nJL_DLLEXPORT uint64_t jl_cpuid_tag(void)\n{\n    uint32_t info[4];\n    jl_cpuid((int32_t *)info, 1);\n    return (((uint64_t)info[2]) | (((uint64_t)info[3]) << 32));\n}\n#elif defined(CPUID_SPECIFIC_BINARIES)\n#error \"CPUID not available on this CPU. Turn off CPUID_SPECIFIC_BINARIES\"\n#else\n// For architectures that don't have CPUID\nJL_DLLEXPORT uint64_t jl_cpuid_tag(void)\n{\n    return 0;\n}\n#endif\n\nJL_DLLEXPORT int jl_uses_cpuid_tag(void)\n{\n#ifdef CPUID_SPECIFIC_BINARIES\n    return 1;\n#else\n    return 0;\n#endif\n}\n\n// -- set/clear the FZ/DAZ flags on x86 & x86-64 --\n#ifdef __SSE__\n\n// Cache of information recovered from jl_cpuid.\n// In a multithreaded environment, there will be races on subnormal_flags,\n// but they are harmless idempotent races.  If we ever embrace C11, then\n// subnormal_flags should be declared atomic.\nstatic volatile int32_t subnormal_flags = 1;\n\nstatic int32_t get_subnormal_flags(void)\n{\n    uint32_t f = subnormal_flags;\n    if (f & 1) {\n        // CPU capabilities not yet inspected.\n        f = 0;\n        int32_t info[4];\n        jl_cpuid(info, 0);\n        if (info[0] >= 1) {\n            jl_cpuid(info, 0x00000001);\n            if (info[3] & (1 << 26)) {\n                // SSE2 supports both FZ and DAZ\n                f = 0x00008040;\n            }\n            else if (info[3] & (1 << 25)) {\n                // SSE supports only the FZ flag\n                f = 0x00008000;\n            }\n        }\n        subnormal_flags = f;\n    }\n    return f;\n}\n\n// Returns non-zero if subnormals go to 0; zero otherwise.\nJL_DLLEXPORT int32_t jl_get_zero_subnormals(void)\n{\n    uint32_t flags = get_subnormal_flags();\n    return _mm_getcsr() & flags;\n}\n\n// Return zero on success, non-zero on failure.\nJL_DLLEXPORT int32_t jl_set_zero_subnormals(int8_t isZero)\n{\n    uint32_t flags = get_subnormal_flags();\n    if (flags) {\n        uint32_t state = _mm_getcsr();\n        if (isZero)\n            state |= flags;\n        else\n            state &= ~flags;\n        _mm_setcsr(state);\n        return 0;\n    }\n    else {\n        // Report a failure only if user is trying to enable FTZ/DAZ.\n        return isZero;\n    }\n}\n\n#elif defined(_CPU_AARCH64_)\n\n// FZ, bit [24]\nstatic const uint32_t fpcr_fz_mask = 1 << 24;\n\nstatic inline uint32_t get_fpcr_aarch64(void)\n{\n    uint32_t fpcr;\n    asm volatile(\"mrs %0, fpcr\" : \"=r\"(fpcr));\n    return fpcr;\n}\n\nstatic inline void set_fpcr_aarch64(uint32_t fpcr)\n{\n    asm volatile(\"msr fpcr, %0\" :: \"r\"(fpcr));\n}\n\nJL_DLLEXPORT int32_t jl_get_zero_subnormals(void)\n{\n    return (get_fpcr_aarch64() & fpcr_fz_mask) != 0;\n}\n\nJL_DLLEXPORT int32_t jl_set_zero_subnormals(int8_t isZero)\n{\n    uint32_t fpcr = get_fpcr_aarch64();\n    fpcr = isZero ? (fpcr | fpcr_fz_mask) : (fpcr & ~fpcr_fz_mask);\n    set_fpcr_aarch64(fpcr);\n    return 0;\n}\n\n#else\n\nJL_DLLEXPORT int32_t jl_get_zero_subnormals(void)\n{\n    return 0;\n}\n\nJL_DLLEXPORT int32_t jl_set_zero_subnormals(int8_t isZero)\n{\n    return isZero;\n}\n\n#endif\n\n// -- processor native alignment information --\n\nJL_DLLEXPORT void jl_native_alignment(uint_t *int8align, uint_t *int16align, uint_t *int32align,\n                                      uint_t *int64align, uint_t *float32align, uint_t *float64align)\n{\n    *int8align = __alignof(uint8_t);\n    *int16align = __alignof(uint16_t);\n    *int32align = __alignof(uint32_t);\n    *int64align = __alignof(uint64_t);\n    *float32align = __alignof(float);\n    *float64align = __alignof(double);\n}\n\nJL_DLLEXPORT jl_value_t *jl_is_char_signed(void)\n{\n    return ((char)255) < 0 ? jl_true : jl_false;\n}\n\n// -- misc sysconf info --\n\n#ifdef _OS_WINDOWS_\nstatic long cachedPagesize = 0;\nJL_DLLEXPORT long jl_getpagesize(void)\n{\n    if (!cachedPagesize) {\n        SYSTEM_INFO systemInfo;\n        GetSystemInfo (&systemInfo);\n        cachedPagesize = systemInfo.dwPageSize;\n    }\n    return cachedPagesize;\n}\n#else\nJL_DLLEXPORT long jl_getpagesize(void)\n{\n    return sysconf(_SC_PAGESIZE);\n}\n#endif\n\n#ifdef _OS_WINDOWS_\nstatic long cachedAllocationGranularity = 0;\nJL_DLLEXPORT long jl_getallocationgranularity(void)\n{\n    if (!cachedAllocationGranularity) {\n        SYSTEM_INFO systemInfo;\n        GetSystemInfo (&systemInfo);\n        cachedAllocationGranularity = systemInfo.dwAllocationGranularity;\n    }\n    return cachedAllocationGranularity;\n}\n#else\nJL_DLLEXPORT long jl_getallocationgranularity(void)\n{\n    return jl_getpagesize();\n}\n#endif\n\nJL_DLLEXPORT long jl_SC_CLK_TCK(void)\n{\n#ifndef _OS_WINDOWS_\n    return sysconf(_SC_CLK_TCK);\n#else\n    return 0;\n#endif\n}\n\n// Takes a handle (as returned from dlopen()) and returns the absolute path to the image loaded\nJL_DLLEXPORT const char *jl_pathname_for_handle(void *handle)\n{\n    if (!handle)\n        return NULL;\n\n#ifdef __APPLE__\n    // Iterate through all images currently in memory\n    for (int32_t i = _dyld_image_count() - 1; i >= 0 ; i--) {\n        // dlopen() each image, check handle\n        const char *image_name = _dyld_get_image_name(i);\n        void *probe_lib = jl_load_dynamic_library(image_name, JL_RTLD_DEFAULT);\n        jl_dlclose(probe_lib);\n\n        // If the handle is the same as what was passed in (modulo mode bits), return this image name\n        if (((intptr_t)handle & (-4)) == ((intptr_t)probe_lib & (-4)))\n            return image_name;\n    }\n\n#elif defined(_OS_WINDOWS_)\n\n    wchar_t *pth16 = (wchar_t*)malloc(32768); // max long path length\n    DWORD n16 = GetModuleFileNameW((HMODULE)handle,pth16,32768);\n    if (n16 <= 0) {\n        free(pth16);\n        return NULL;\n    }\n    pth16[n16] = L'\\0';\n    DWORD n8 = WideCharToMultiByte(CP_UTF8, 0, pth16, -1, NULL, 0, NULL, NULL);\n    if (n8 == 0) {\n        free(pth16);\n        return NULL;\n    }\n    char *filepath = (char*)malloc(++n8);\n    if (!WideCharToMultiByte(CP_UTF8, 0, pth16, -1, filepath, n8, NULL, NULL)) {\n        free(pth16);\n        free(filepath);\n        return NULL;\n    }\n    free(pth16);\n    return filepath;\n\n#else // Linux, FreeBSD, ...\n\n    struct link_map *map;\n    dlinfo(handle, RTLD_DI_LINKMAP, &map);\n#ifdef JL_MSAN_ENABLED\n    __msan_unpoison(&map,sizeof(struct link_map*));\n    if (map) {\n        __msan_unpoison(map, sizeof(struct link_map));\n        __msan_unpoison_string(map->l_name);\n    }\n#endif\n    if (map)\n        return map->l_name;\n\n#endif\n    return NULL;\n}\n\n#ifdef _OS_WINDOWS_\nstatic BOOL CALLBACK jl_EnumerateLoadedModulesProc64(\n  _In_      PCTSTR ModuleName,\n  _In_      DWORD64 ModuleBase,\n  _In_      ULONG ModuleSize,\n  _In_opt_  PVOID a\n)\n{\n    jl_array_grow_end((jl_array_t*)a, 1);\n    //XXX: change to jl_arrayset if array storage allocation for Array{String,1} changes:\n    jl_value_t *v = jl_cstr_to_string(ModuleName);\n    jl_array_ptr_set(a, jl_array_dim0(a)-1, v);\n    return TRUE;\n}\n// Takes a handle (as returned from dlopen()) and returns the absolute path to the image loaded\nJL_DLLEXPORT int jl_dllist(jl_array_t *list)\n{\n    return EnumerateLoadedModules64(GetCurrentProcess(), jl_EnumerateLoadedModulesProc64, list);\n}\n#endif\n\nJL_DLLEXPORT void jl_raise_debugger(void)\n{\n#if defined(_OS_WINDOWS_)\n    if (IsDebuggerPresent() == 1)\n        DebugBreak();\n#else\n    raise(SIGTRAP);\n#endif // _OS_WINDOWS_\n}\n\nJL_DLLEXPORT jl_sym_t *jl_get_UNAME(void)\n{\n    return jl_symbol(JL_BUILD_UNAME);\n}\n\nJL_DLLEXPORT jl_sym_t *jl_get_ARCH(void)\n{\n    return jl_symbol(JL_BUILD_ARCH);\n}\n\nJL_DLLEXPORT size_t jl_maxrss(void)\n{\n#if defined(_OS_WINDOWS_)\n    PROCESS_MEMORY_COUNTERS counter;\n    GetProcessMemoryInfo( GetCurrentProcess( ), &counter, sizeof(counter) );\n    return (size_t)counter.PeakWorkingSetSize;\n\n#elif defined(_OS_LINUX_) || defined(_OS_DARWIN_) || defined (_OS_FREEBSD_)\n    struct rusage rusage;\n    getrusage( RUSAGE_SELF, &rusage );\n\n#if defined(_OS_LINUX_)\n    return (size_t)(rusage.ru_maxrss * 1024);\n#else\n    return (size_t)rusage.ru_maxrss;\n#endif\n\n#else\n    return (size_t)0;\n#endif\n}\n\nJL_DLLEXPORT int jl_threading_enabled(void)\n{\n#ifdef JULIA_ENABLE_THREADING\n    return 1;\n#else\n    return 0;\n#endif\n}\n\n#ifdef __cplusplus\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/src/dlload.c": "// This file is a part of Julia. License is MIT: https://julialang.org/license\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <sys/stat.h>\n\n#include \"platform.h\"\n#include \"julia.h\"\n#include \"julia_internal.h\"\n#ifdef _OS_WINDOWS_\n#include <windows.h>\n#include <direct.h>\n#else\n#include <unistd.h>\n#include <dlfcn.h>\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#if defined(__APPLE__)\nstatic char const *const extensions[] = { \"\", \".dylib\" };\n#elif defined(_OS_WINDOWS_)\nstatic char const *const extensions[] = { \"\", \".dll\" };\nextern int needsSymRefreshModuleList;\n#else\nstatic char const *const extensions[] = { \"\", \".so\" };\n#endif\n#define N_EXTENSIONS (sizeof(extensions) / sizeof(char*))\n\nstatic int endswith_extension(const char *path)\n{\n    if (!path)\n        return 0;\n    size_t len = strlen(path);\n    // Skip the first one since it is empty\n    for (size_t i = 1;i < N_EXTENSIONS;i++) {\n        const char *ext = extensions[i];\n        size_t extlen = strlen(ext);\n        if (len < extlen) return 0;\n        // Skip version extensions if present\n        size_t j = len-1;\n        while (j > 0) {\n            if (path[j] == '.' || (path[j] >= '0' && path[j] <= '9')) j--;\n            else break;\n        }\n        if ((j == len-1 || path[j+1] == '.') && memcmp(ext, path + j - extlen + 1, extlen) == 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\n#define PATHBUF 512\n\nextern char *julia_home;\n\n#define JL_RTLD(flags, FLAG) (flags & JL_RTLD_ ## FLAG ? RTLD_ ## FLAG : 0)\n\nstatic void JL_NORETURN jl_dlerror(const char *fmt, const char *sym)\n{\n#ifdef _OS_WINDOWS_\n    CHAR reason[256];\n    FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,\n            NULL, GetLastError(),\n            MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US),\n            reason, sizeof(reason) / sizeof(reason[0]), NULL);\n#else\n    const char *reason = dlerror();\n#endif\n    jl_errorf(fmt, sym, reason);\n}\n\nJL_DLLEXPORT void *jl_dlopen(const char *filename, unsigned flags)\n{\n#if defined(_OS_WINDOWS_)\n    needsSymRefreshModuleList = 1;\n    size_t len = MultiByteToWideChar(CP_UTF8, 0, filename, -1, NULL, 0);\n    if (!len) return NULL;\n    WCHAR *wfilename = (WCHAR*)alloca(len * sizeof(WCHAR));\n    if (!MultiByteToWideChar(CP_UTF8, 0, filename, -1, wfilename, len)) return NULL;\n    return LoadLibraryExW(wfilename, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);\n#else\n    dlerror(); /* Reset error status. */\n    return dlopen(filename,\n                  (flags & JL_RTLD_NOW ? RTLD_NOW : RTLD_LAZY)\n                  | JL_RTLD(flags, LOCAL)\n                  | JL_RTLD(flags, GLOBAL)\n#ifdef RTLD_NODELETE\n                  | JL_RTLD(flags, NODELETE)\n#endif\n#ifdef RTLD_NOLOAD\n                  | JL_RTLD(flags, NOLOAD)\n#endif\n#if defined(RTLD_DEEPBIND) && !defined(JL_ASAN_ENABLED)\n                  | JL_RTLD(flags, DEEPBIND)\n#endif\n#ifdef RTLD_FIRST\n                  | JL_RTLD(flags, FIRST)\n#endif\n                  );\n#endif\n}\n\nJL_DLLEXPORT int jl_dlclose(void *handle)\n{\n#ifdef _OS_WINDOWS_\n    if (!handle) return -1;\n    return FreeLibrary((HMODULE) handle);\n#else\n    dlerror(); /* Reset error status. */\n    if (!handle) return -1;\n    return dlclose(handle);\n#endif\n}\n\nstatic void *jl_load_dynamic_library_(const char *modname, unsigned flags, int throw_err)\n{\n    char path[PATHBUF];\n    int i;\n    uv_stat_t stbuf;\n    void *handle;\n    int abspath;\n    // number of extensions to try \u2014\u00a0if modname already ends with the\n    // standard extension, then we don't try adding additional extensions\n    int n_extensions = endswith_extension(modname) ? 1 : N_EXTENSIONS;\n\n    /*\n      this branch returns handle of libjulia\n    */\n    if (modname == NULL) {\n#ifdef _OS_WINDOWS_\n        if (!GetModuleHandleExW(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,\n                                (LPCWSTR)(&jl_load_dynamic_library),\n                                (HMODULE*)&handle)) {\n            jl_error(\"could not load base module\");\n        }\n#else\n        Dl_info info;\n        if (!dladdr(&jl_load_dynamic_library, &info) || !info.dli_fname)\n            jl_error(\"could not load base module\");\n        handle = dlopen(info.dli_fname, RTLD_NOW);\n#endif\n        goto done;\n    }\n\n    abspath = isabspath(modname);\n\n    /*\n      this branch permutes all base paths in DL_LOAD_PATH with all extensions\n      note: skip when !jl_base_module to avoid UndefVarError(:DL_LOAD_PATH),\n            and also skip for absolute paths\n    */\n    if (!abspath && jl_base_module != NULL) {\n        jl_array_t *DL_LOAD_PATH = (jl_array_t*)jl_get_global(jl_base_module, jl_symbol(\"DL_LOAD_PATH\"));\n        if (DL_LOAD_PATH != NULL) {\n            size_t j;\n            for (j = 0; j < jl_array_len(DL_LOAD_PATH); j++) {\n                char *dl_path = jl_string_data(jl_array_ptr_data(DL_LOAD_PATH)[j]);\n                size_t len = strlen(dl_path);\n                if (len == 0)\n                    continue;\n                for (i=0; i < n_extensions; i++) {\n                    const char *ext = extensions[i];\n                    path[0] = '\\0';\n                    if (dl_path[len-1] == PATHSEPSTRING[0])\n                        snprintf(path, PATHBUF, \"%s%s%s\", dl_path, modname, ext);\n                    else\n                        snprintf(path, PATHBUF, \"%s\" PATHSEPSTRING \"%s%s\", dl_path, modname, ext);\n                    handle = jl_dlopen(path, flags);\n                    if (handle)\n                        goto done;\n                    // bail out and show the error if file actually exists\n                    if (jl_stat(path, (char*)&stbuf) == 0)\n                        goto notfound;\n                }\n            }\n        }\n    }\n\n    // now fall back and look in default library paths, for all extensions\n    for(i=0; i < n_extensions; i++) {\n        const char *ext = extensions[i];\n        path[0] = '\\0';\n        snprintf(path, PATHBUF, \"%s%s\", modname, ext);\n        handle = jl_dlopen(path, flags);\n        if (handle)\n            goto done;\n    }\n\n#if defined(__linux__) || defined(__FreeBSD__)\n    // check map of versioned libs from \"libX\" to full soname \"libX.so.ver\"\n    if (!abspath && n_extensions > 1) { // soname map only works for libX\n        handle = jl_dlopen_soname(modname, strlen(modname), flags);\n        if (handle)\n            goto done;\n    }\n#endif\n\nnotfound:\n    if (throw_err)\n        jl_dlerror(\"could not load library \\\"%s\\\"\\n%s\", modname);\n    return NULL;\n\ndone:\n    return handle;\n}\n\nJL_DLLEXPORT void *jl_load_dynamic_library_e(const char *modname, unsigned flags)\n{\n    return jl_load_dynamic_library_(modname, flags, 0);\n}\n\nJL_DLLEXPORT void *jl_load_dynamic_library(const char *modname, unsigned flags)\n{\n    return jl_load_dynamic_library_(modname, flags, 1);\n}\n\nJL_DLLEXPORT void *jl_dlsym_e(void *handle, const char *symbol)\n{\n#ifdef _OS_WINDOWS_\n    void *ptr = GetProcAddress((HMODULE) handle, symbol);\n#else\n    dlerror(); /* Reset error status. */\n    void *ptr = dlsym(handle, symbol);\n#endif\n    return ptr;\n}\n\nJL_DLLEXPORT void *jl_dlsym(void *handle, const char *symbol)\n{\n    void *ptr = jl_dlsym_e(handle, symbol);\n    if (!ptr)\n        jl_dlerror(\"could not load symbol \\\"%s\\\":\\n%s\", symbol);\n    return ptr;\n}\n\n#ifdef _OS_WINDOWS_\n//Look for symbols in win32 libraries\nconst char *jl_dlfind_win32(const char *f_name)\n{\n    if (jl_dlsym_e(jl_exe_handle, f_name))\n        return JL_EXE_LIBNAME;\n    if (jl_dlsym_e(jl_dl_handle, f_name))\n        return JL_DL_LIBNAME;\n    if (jl_dlsym_e(jl_kernel32_handle, f_name))\n        return \"kernel32\";\n    if (jl_dlsym_e(jl_ntdll_handle, f_name))\n        return \"ntdll\";\n    if (jl_dlsym_e(jl_crtdll_handle, f_name))\n#if defined(_MSC_VER)\n#if _MSC_VER == 1800\n        return \"msvcr120\";\n#else\n#error This version of MSVC has not been tested.\n#endif\n#else\n        return \"msvcrt\";\n#endif\n    if (jl_dlsym_e(jl_winsock_handle, f_name))\n        return \"ws2_32\";\n    // additional common libraries (libc?) could be added here, but in general,\n    // it is better to specify the library explicitly in the code. This exists\n    // mainly to ease compatibility with linux, and for libraries that don't\n    // have a name (julia.exe and libjulia.dll)\n    // We could also loop over all libraries that have been used so far, but, again,\n    // explicit is preferred over implicit\n    return NULL;\n    // oops, we didn't find it. NULL defaults to searching jl_RTLD_DEFAULT_handle,\n    // which defaults to jl_dl_handle, where we won't find it, and will throw the\n    // appropriate error.\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/src/init.c": "// This file is a part of Julia. License is MIT: https://julialang.org/license\n\n/*\n  init.c\n  system initialization and global state\n*/\n#include \"platform.h\"\n\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include <fcntl.h>\n\n#include <errno.h>\n\n#if !defined(_OS_WINDOWS_) || defined(_COMPILER_MINGW_)\n#include <getopt.h>\n#endif\n\n#include \"julia.h\"\n#include \"julia_internal.h\"\n#define DEFINE_BUILTIN_GLOBALS\n#include \"builtin_proto.h\"\n#undef DEFINE_BUILTIN_GLOBALS\n#include \"threading.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifdef _MSC_VER\nJL_DLLEXPORT char *dirname(char *);\n#else\n#include <libgen.h>\n#endif\n\n#ifdef _OS_WINDOWS_\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#include <io.h>\nextern int needsSymRefreshModuleList;\nextern BOOL (WINAPI *hSymRefreshModuleList)(HANDLE);\n#else\n#include <sys/resource.h>\n#include <unistd.h>\n#endif\n\n#ifdef JL_ASAN_ENABLED\nJL_DLLEXPORT const char* __asan_default_options() {\n    return \"allow_user_segv_handler=1:detect_leaks=0\";\n    // FIXME: enable LSAN after fixing leaks & defining __lsan_default_suppressions(),\n    //        or defining __lsan_default_options = exitcode=0 once publicly available\n    //        (here and in flisp/flmain.c)\n}\n#endif\n\nint jl_boot_file_loaded = 0;\nsize_t jl_page_size;\n\nvoid jl_init_stack_limits(int ismaster)\n{\n    jl_ptls_t ptls = jl_get_ptls_states();\n#ifdef _OS_WINDOWS_\n    (void)ismaster;\n#  ifdef _COMPILER_MICROSOFT_\n#    ifdef _P64\n    void **tib = (void**)__readgsqword(0x30);\n#    else\n    void **tib = (void**)__readfsdword(0x18);\n#    endif\n#  else\n    void **tib;\n#    ifdef _P64\n    __asm__(\"movq %%gs:0x30, %0\" : \"=r\" (tib) : : );\n#    else\n    __asm__(\"movl %%fs:0x18, %0\" : \"=r\" (tib) : : );\n#    endif\n#  endif\n    // https://en.wikipedia.org/wiki/Win32_Thread_Information_Block\n    ptls->stack_hi = (char*)tib[1]; // Stack Base / Bottom of stack (high address)\n    ptls->stack_lo = (char*)tib[2]; // Stack Limit / Ceiling of stack (low address)\n#else\n#  ifdef JULIA_ENABLE_THREADING\n    // Only use pthread_*_np functions to get stack address for non-master\n    // threads since it seems to return bogus values for master thread on Linux\n    // and possibly OSX.\n    if (!ismaster) {\n#    if defined(_OS_LINUX_)\n        pthread_attr_t attr;\n        pthread_getattr_np(pthread_self(), &attr);\n        void *stackaddr;\n        size_t stacksize;\n        pthread_attr_getstack(&attr, &stackaddr, &stacksize);\n        pthread_attr_destroy(&attr);\n        ptls->stack_lo = (char*)stackaddr;\n        ptls->stack_hi = (char*)stackaddr + stacksize;\n        return;\n#    elif defined(_OS_DARWIN_)\n        extern void *pthread_get_stackaddr_np(pthread_t thread);\n        extern size_t pthread_get_stacksize_np(pthread_t thread);\n        pthread_t thread = pthread_self();\n        void *stackaddr = pthread_get_stackaddr_np(thread);\n        size_t stacksize = pthread_get_stacksize_np(thread);\n        ptls->stack_lo = (char*)stackaddr;\n        ptls->stack_hi = (char*)stackaddr + stacksize;\n        return;\n#    elif defined(_OS_FREEBSD_)\n        pthread_attr_t attr;\n        pthread_attr_init(&attr);\n        pthread_attr_get_np(pthread_self(), &attr);\n        void *stackaddr;\n        size_t stacksize;\n        pthread_attr_getstack(&attr, &stackaddr, &stacksize);\n        pthread_attr_destroy(&attr);\n        ptls->stack_lo = (char*)stackaddr;\n        ptls->stack_hi = (char*)stackaddr + stacksize;\n        return;\n#    else\n#      warning \"Getting stack size for thread is not supported.\"\n#    endif\n    }\n#  else\n    (void)ismaster;\n#  endif\n    struct rlimit rl;\n    getrlimit(RLIMIT_STACK, &rl);\n    size_t stack_size = rl.rlim_cur;\n    ptls->stack_hi = (char*)&stack_size;\n    ptls->stack_lo = ptls->stack_hi - stack_size;\n#endif\n}\n\nstatic void jl_find_stack_bottom(void)\n{\n#if !defined(_OS_WINDOWS_)\n#if defined(JL_ASAN_ENABLED) || defined(JL_MSAN_ENABLED)\n    struct rlimit rl;\n\n    // When using the sanitizers, increase stack size because they bloat\n    // stack usage\n    const rlim_t kStackSize = 64 * 1024 * 1024;   // 64MiB stack\n    int result;\n\n    result = getrlimit(RLIMIT_STACK, &rl);\n    if (result == 0) {\n        if (rl.rlim_cur < kStackSize) {\n            rl.rlim_cur = kStackSize;\n            result = setrlimit(RLIMIT_STACK, &rl);\n            if (result != 0) {\n                fprintf(stderr, \"setrlimit returned result = %d\\n\", result);\n            }\n        }\n    }\n#endif\n#endif\n    jl_init_stack_limits(1);\n}\n\nstruct uv_shutdown_queue_item { uv_handle_t *h; struct uv_shutdown_queue_item *next; };\nstruct uv_shutdown_queue { struct uv_shutdown_queue_item *first; struct uv_shutdown_queue_item *last; };\n\nstatic void jl_uv_exitcleanup_add(uv_handle_t *handle, struct uv_shutdown_queue *queue)\n{\n    struct uv_shutdown_queue_item *item = (struct uv_shutdown_queue_item*)malloc(sizeof(struct uv_shutdown_queue_item));\n    item->h = handle;\n    item->next = NULL;\n    if (queue->last) queue->last->next = item;\n    if (!queue->first) queue->first = item;\n    queue->last = item;\n}\n\nstatic void jl_uv_exitcleanup_walk(uv_handle_t *handle, void *arg)\n{\n    jl_uv_exitcleanup_add(handle, (struct uv_shutdown_queue*)arg);\n}\n\nvoid jl_write_coverage_data(void);\nvoid jl_write_malloc_log(void);\nvoid jl_write_compiler_output(void);\n\nstatic struct uv_shutdown_queue_item *next_shutdown_queue_item(struct uv_shutdown_queue_item *item)\n{\n    struct uv_shutdown_queue_item *rv = item->next;\n    free(item);\n    return rv;\n}\n\nvoid jl_init_timing(void);\nvoid jl_destroy_timing(void);\nvoid jl_uv_call_close_callback(jl_value_t *val);\n\nstatic void jl_close_item_atexit(uv_handle_t *handle)\n{\n    if (handle->type != UV_FILE && uv_is_closing(handle))\n        return;\n    switch(handle->type) {\n    case UV_PROCESS:\n        // cause Julia to forget about the Process object\n        if (handle->data)\n            jl_uv_call_close_callback((jl_value_t*)handle->data);\n        // and make libuv think it is already dead\n        ((uv_process_t*)handle)->pid = 0;\n        // fall-through\n    case UV_TTY:\n    case UV_UDP:\n    case UV_TCP:\n    case UV_NAMED_PIPE:\n    case UV_POLL:\n    case UV_TIMER:\n    case UV_ASYNC:\n    case UV_FS_EVENT:\n    case UV_FS_POLL:\n    case UV_IDLE:\n    case UV_PREPARE:\n    case UV_CHECK:\n    case UV_SIGNAL:\n    case UV_FILE:\n        // These will be shutdown as appropriate by jl_close_uv\n        jl_close_uv(handle);\n        break;\n    case UV_HANDLE:\n    case UV_STREAM:\n    case UV_UNKNOWN_HANDLE:\n    case UV_HANDLE_TYPE_MAX:\n    case UV_RAW_FD:\n    case UV_RAW_HANDLE:\n    default:\n        assert(0);\n    }\n}\n\nJL_DLLEXPORT void jl_atexit_hook(int exitcode)\n{\n    jl_ptls_t ptls = jl_get_ptls_states();\n\n    if (exitcode == 0)\n        jl_write_compiler_output();\n    jl_print_gc_stats(JL_STDERR);\n    if (jl_options.code_coverage)\n        jl_write_coverage_data();\n    if (jl_options.malloc_log)\n        jl_write_malloc_log();\n    if (jl_base_module) {\n        jl_value_t *f = jl_get_global(jl_base_module, jl_symbol(\"_atexit\"));\n        if (f != NULL) {\n            JL_TRY {\n                size_t last_age = ptls->world_age;\n                ptls->world_age = jl_get_world_counter();\n                jl_apply(&f, 1);\n                ptls->world_age = last_age;\n            }\n            JL_CATCH {\n                jl_printf(JL_STDERR, \"\\natexit hook threw an error: \");\n                jl_static_show(JL_STDERR, ptls->exception_in_transit);\n            }\n        }\n    }\n\n    // replace standard output streams with something that we can still print to\n    // after the finalizers from base/stream.jl close the TTY\n    JL_STDOUT = (uv_stream_t*) STDOUT_FILENO;\n    JL_STDERR = (uv_stream_t*) STDERR_FILENO;\n\n    jl_gc_run_all_finalizers(ptls);\n\n    uv_loop_t *loop = jl_global_event_loop();\n\n    if (loop == NULL) {\n        return;\n    }\n\n    struct uv_shutdown_queue queue = {NULL, NULL};\n    uv_walk(loop, jl_uv_exitcleanup_walk, &queue);\n    struct uv_shutdown_queue_item *item = queue.first;\n    if (ptls->current_task != NULL) {\n        while (item) {\n            JL_TRY {\n                while (item) {\n                    jl_close_item_atexit(item->h);\n                    item = next_shutdown_queue_item(item);\n                }\n            }\n            JL_CATCH {\n                //error handling -- continue cleanup, as much as possible\n                uv_unref(item->h);\n                jl_printf(JL_STDERR, \"error during exit cleanup: close: \");\n                jl_static_show(JL_STDERR, ptls->exception_in_transit);\n                item = next_shutdown_queue_item(item);\n            }\n        }\n    }\n    else {\n        while (item) {\n            jl_close_item_atexit(item->h);\n            item = next_shutdown_queue_item(item);\n        }\n    }\n\n    // force libuv to spin until everything has finished closing\n    loop->stop_flag = 0;\n    while (uv_run(loop, UV_RUN_DEFAULT)) { }\n\n    jl_destroy_timing();\n#ifdef ENABLE_TIMINGS\n    jl_print_timings();\n#endif\n}\n\nvoid jl_get_builtin_hooks(void);\nvoid jl_get_builtins(void);\n\nJL_DLLEXPORT void *jl_dl_handle;\nvoid *jl_RTLD_DEFAULT_handle;\nJL_DLLEXPORT void *jl_exe_handle;\n#ifdef _OS_WINDOWS_\nvoid *jl_ntdll_handle;\nvoid *jl_kernel32_handle;\nvoid *jl_crtdll_handle;\nvoid *jl_winsock_handle;\n#endif\n\nuv_loop_t *jl_io_loop;\n\nstatic void *init_stdio_handle(uv_file fd,int readable)\n{\n    void *handle;\n    uv_handle_type type = uv_guess_handle(fd);\n    jl_uv_file_t *file;\n#ifndef _OS_WINDOWS_\n    // Duplicate the file descriptor so we can later dup it over if we want to redirect\n    // STDIO without having to worry about closing the associated libuv object.\n    // This also helps limit the impact other libraries can cause on our file handle.\n    // On windows however, libuv objects remember streams by their HANDLE, so this is\n    // unnecessary.\n    fd = dup(fd);\n#else\n    if (type == UV_FILE) {\n        fd = _dup(fd);\n        _setmode(fd, _O_BINARY);\n    }\n#endif\n    //jl_printf(JL_STDOUT, \"%d: %d -- %d\\n\", fd, type, 0);\n    switch(type) {\n        case UV_TTY:\n            handle = malloc(sizeof(uv_tty_t));\n            if (uv_tty_init(jl_io_loop,(uv_tty_t*)handle,fd,readable)) {\n                jl_errorf(\"error initializing stdio in uv_tty_init (%d, %d)\", fd, type);\n            }\n            ((uv_tty_t*)handle)->data=0;\n            uv_tty_set_mode((uv_tty_t*)handle, UV_TTY_MODE_NORMAL); //cooked stdio\n            break;\n        case UV_UNKNOWN_HANDLE:\n            // dup the descriptor with a new one pointing at the bit bucket ...\n#if defined(_OS_WINDOWS_)\n            fd = _open(\"NUL\", O_RDWR | O_BINARY, _S_IREAD | _S_IWRITE);\n#else\n            {\n                int nullfd;\n                nullfd = open(\"/dev/null\", O_RDWR, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH /* 0666 */);\n                dup2(nullfd, fd);\n                close(nullfd);\n            }\n#endif\n            // ...and continue on as in the UV_FILE case\n            JL_FALLTHROUGH;\n        case UV_FILE:\n            file = (jl_uv_file_t*)malloc(sizeof(jl_uv_file_t));\n            file->loop = jl_io_loop;\n            file->type = UV_FILE;\n            file->file = fd;\n            file->data = 0;\n            handle = file;\n            break;\n        case UV_NAMED_PIPE:\n            handle = malloc(sizeof(uv_pipe_t));\n            if (uv_pipe_init(jl_io_loop, (uv_pipe_t*)handle, (readable?UV_PIPE_READABLE:UV_PIPE_WRITABLE))) {\n                jl_errorf(\"error initializing stdio in uv_pipe_init (%d, %d)\", fd, type);\n            }\n            if (uv_pipe_open((uv_pipe_t*)handle,fd)) {\n                jl_errorf(\"error initializing stdio in uv_pipe_open (%d, %d)\", fd, type);\n            }\n            ((uv_pipe_t*)handle)->data=0;\n            break;\n        case UV_TCP:\n            handle = malloc(sizeof(uv_tcp_t));\n            if (uv_tcp_init(jl_io_loop, (uv_tcp_t*)handle)) {\n                jl_errorf(\"error initializing stdio in uv_tcp_init (%d, %d)\", fd, type);\n            }\n            if (uv_tcp_open((uv_tcp_t*)handle,fd)) {\n                jl_errorf(\"error initializing stdio in uv_tcp_open (%d, %d)\", fd, type);\n            }\n            ((uv_tcp_t*)handle)->data=0;\n            break;\n        case UV_UDP:\n        default:\n            jl_errorf(\"this type of handle for stdio is not yet supported (%d, %d)\", fd, type);\n            break;\n    }\n    return handle;\n}\n\nvoid init_stdio(void)\n{   //order must be 2,1,0\n    JL_STDERR = (uv_stream_t*)init_stdio_handle(STDERR_FILENO,0);\n    JL_STDOUT = (uv_stream_t*)init_stdio_handle(STDOUT_FILENO,0);\n    JL_STDIN  = (uv_stream_t*)init_stdio_handle(STDIN_FILENO,1);\n\n    jl_flush_cstdio();\n}\n\n#ifdef JL_USE_INTEL_JITEVENTS\nchar jl_using_intel_jitevents; // Non-zero if running under Intel VTune Amplifier\n#endif\n\n#ifdef JL_USE_OPROFILE_JITEVENTS\nchar jl_using_oprofile_jitevents = 0; // Non-zero if running under OProfile\n#endif\n\nint isabspath(const char *in)\n{\n#ifdef _OS_WINDOWS_\n    char c0 = in[0];\n    if (c0 == '/' || c0 == '\\\\') {\n        return 1; // absolute path relative to %CD% (current drive), or UNC\n    }\n    else if (c0 && in[1] == ':') {\n        char c2 = in[2];\n        return c2 == '/' || c2 == '\\\\'; // absolute path with drive name\n    }\n#else\n    if (in[0] == '/') return 1; // absolute path\n#endif\n    return 0; // relative path\n}\n\nstatic char *abspath(const char *in)\n{ // compute an absolute path location, so that chdir doesn't change the file reference\n#ifndef _OS_WINDOWS_\n    char *out = realpath(in, NULL);\n    if (!out) {\n        if (in[0] == PATHSEPSTRING[0]) {\n            out = strdup(in);\n        }\n        else {\n            size_t path_size = PATH_MAX;\n            size_t len = strlen(in);\n            char *path = (char*)malloc(PATH_MAX);\n            if (uv_cwd(path, &path_size)) {\n                jl_error(\"fatal error: unexpected error while retrieving current working directory\");\n            }\n            if (path_size + len + 2 >= PATH_MAX) {\n                jl_error(\"fatal error: current working directory path too long\");\n            }\n            path[path_size] = PATHSEPSTRING[0];\n            memcpy(path + path_size + 1, in, len+1);\n            out = strdup(path);\n            free(path);\n        }\n    }\n#else\n    DWORD n = GetFullPathName(in, 0, NULL, NULL);\n    if (n <= 0) {\n        jl_error(\"fatal error: jl_options.image_file path too long or GetFullPathName failed\");\n    }\n    char *out = (char*)malloc(n);\n    DWORD m = GetFullPathName(in, n, out, NULL);\n    if (n != m + 1) {\n        jl_error(\"fatal error: jl_options.image_file path too long or GetFullPathName failed\");\n    }\n#endif\n    return out;\n}\n\nstatic void jl_resolve_sysimg_location(JL_IMAGE_SEARCH rel)\n{   // this function resolves the paths in jl_options to absolute file locations as needed\n    // and it replaces the pointers to `julia_home`, `julia_bin`, `image_file`, and output file paths\n    // it may fail, print an error, and exit(1) if any of these paths are longer than PATH_MAX\n    //\n    // note: if you care about lost memory, you should call the appropriate `free()` function\n    // on the original pointer for each `char*` you've inserted into `jl_options`, after\n    // calling `julia_init()`\n    char *free_path = (char*)malloc(PATH_MAX);\n    size_t path_size = PATH_MAX;\n    if (uv_exepath(free_path, &path_size)) {\n        jl_error(\"fatal error: unexpected error while retrieving exepath\");\n    }\n    if (path_size >= PATH_MAX) {\n        jl_error(\"fatal error: jl_options.julia_bin path too long\");\n    }\n    jl_options.julia_bin = (char*)malloc(path_size+1);\n    memcpy((char*)jl_options.julia_bin, free_path, path_size);\n    ((char*)jl_options.julia_bin)[path_size] = '\\0';\n    if (!jl_options.julia_home) {\n        jl_options.julia_home = getenv(\"JULIA_HOME\");\n        if (!jl_options.julia_home) {\n            jl_options.julia_home = dirname(free_path);\n        }\n    }\n    if (jl_options.julia_home)\n        jl_options.julia_home = abspath(jl_options.julia_home);\n    free(free_path);\n    free_path = NULL;\n    if (jl_options.image_file) {\n        if (rel == JL_IMAGE_JULIA_HOME && !isabspath(jl_options.image_file)) {\n            // build time path, relative to JULIA_HOME\n            free_path = (char*)malloc(PATH_MAX);\n            int n = snprintf(free_path, PATH_MAX, \"%s\" PATHSEPSTRING \"%s\",\n                             jl_options.julia_home, jl_options.image_file);\n            if (n >= PATH_MAX || n < 0) {\n                jl_error(\"fatal error: jl_options.image_file path too long\");\n            }\n            jl_options.image_file = free_path;\n        }\n        if (jl_options.image_file)\n            jl_options.image_file = abspath(jl_options.image_file);\n        if (free_path) {\n            free(free_path);\n            free_path = NULL;\n        }\n    }\n    if (jl_options.outputo)\n        jl_options.outputo = abspath(jl_options.outputo);\n    if (jl_options.outputji)\n        jl_options.outputji = abspath(jl_options.outputji);\n    if (jl_options.outputbc)\n        jl_options.outputbc = abspath(jl_options.outputbc);\n    if (jl_options.machinefile)\n        jl_options.machinefile = abspath(jl_options.machinefile);\n    if (jl_options.load)\n        jl_options.load = abspath(jl_options.load);\n}\n\nstatic void jl_set_io_wait(int v)\n{\n    jl_ptls_t ptls = jl_get_ptls_states();\n    ptls->io_wait = v;\n}\n\nvoid _julia_init(JL_IMAGE_SEARCH rel)\n{\n    jl_init_timing();\n#ifdef JULIA_ENABLE_THREADING\n    // Make sure we finalize the tls callback before starting any threads.\n    jl_get_ptls_states_getter();\n#endif\n    jl_ptls_t ptls = jl_get_ptls_states();\n    jl_safepoint_init();\n    libsupport_init();\n    ios_set_io_wait_func = jl_set_io_wait;\n    jl_io_loop = uv_default_loop(); // this loop will internal events (spawning process etc.),\n                                    // best to call this first, since it also initializes libuv\n    jl_init_signal_async();\n    restore_signals();\n\n    jl_resolve_sysimg_location(rel);\n    // loads sysimg if available, and conditionally sets jl_options.cpu_target\n    if (jl_options.image_file)\n        jl_preload_sysimg_so(jl_options.image_file);\n    if (jl_options.cpu_target == NULL)\n        jl_options.cpu_target = \"native\";\n\n    jl_page_size = jl_getpagesize();\n    uint64_t total_mem = uv_get_total_memory();\n    if (total_mem >= (size_t)-1) {\n        total_mem = (size_t)-1;\n    }\n    jl_arr_xtralloc_limit = total_mem / 100;  // Extra allocation limited to 1% of total RAM\n    jl_find_stack_bottom();\n    jl_dl_handle = jl_load_dynamic_library(NULL, JL_RTLD_DEFAULT);\n#ifdef _OS_WINDOWS_\n    jl_ntdll_handle = jl_dlopen(\"ntdll.dll\", 0); // bypass julia's pathchecking for system dlls\n    jl_kernel32_handle = jl_dlopen(\"kernel32.dll\", 0);\n#if defined(_MSC_VER) && _MSC_VER == 1800\n    jl_crtdll_handle = jl_dlopen(\"msvcr120.dll\", 0);\n#else\n    jl_crtdll_handle = jl_dlopen(\"msvcrt.dll\", 0);\n#endif\n    jl_winsock_handle = jl_dlopen(\"ws2_32.dll\", 0);\n    jl_exe_handle = GetModuleHandleA(NULL);\n    SymSetOptions(SYMOPT_UNDNAME | SYMOPT_DEFERRED_LOADS | SYMOPT_LOAD_LINES);\n    if (!SymInitialize(GetCurrentProcess(), NULL, 1)) {\n        jl_printf(JL_STDERR, \"WARNING: failed to initialize stack walk info\\n\");\n    }\n    needsSymRefreshModuleList = 0;\n    HMODULE jl_dbghelp = (HMODULE) jl_dlopen(\"dbghelp.dll\", 0);\n    if (jl_dbghelp)\n        hSymRefreshModuleList = (BOOL (WINAPI*)(HANDLE)) jl_dlsym(jl_dbghelp, \"SymRefreshModuleList\");\n#else\n    jl_exe_handle = jl_dlopen(NULL, JL_RTLD_NOW);\n#ifdef RTLD_DEFAULT\n    jl_RTLD_DEFAULT_handle = RTLD_DEFAULT;\n#else\n    jl_RTLD_DEFAULT_handle = jl_exe_handle;\n#endif\n#endif\n\n#if defined(JL_USE_INTEL_JITEVENTS)\n    const char *jit_profiling = getenv(\"ENABLE_JITPROFILING\");\n    if (jit_profiling && atoi(jit_profiling)) {\n        jl_using_intel_jitevents = 1;\n    }\n#endif\n\n#if defined(JL_USE_OPROFILE_JITEVENTS)\n    const char *jit_profiling = getenv(\"ENABLE_JITPROFILING\");\n    if (jit_profiling && atoi(jit_profiling)) {\n        jl_using_oprofile_jitevents = 1;\n    }\n#endif\n\n\n#if defined(__linux__)\n    int ncores = jl_cpu_cores();\n    if (ncores > 1) {\n        cpu_set_t cpumask;\n        CPU_ZERO(&cpumask);\n        for(int i=0; i < ncores; i++) {\n            CPU_SET(i, &cpumask);\n        }\n        sched_setaffinity(0, sizeof(cpu_set_t), &cpumask);\n    }\n#endif\n\n    jl_init_threading();\n\n    jl_gc_init();\n    jl_gc_enable(0);\n    jl_init_types();\n    jl_init_frontend();\n    jl_init_tasks();\n    jl_init_root_task(ptls->stack_lo, ptls->stack_hi-ptls->stack_lo);\n\n#ifdef ENABLE_TIMINGS\n    jl_root_task->timing_stack = jl_root_timing;\n#endif\n\n    init_stdio();\n    // libuv stdio cleanup depends on jl_init_tasks() because JL_TRY is used in jl_atexit_hook()\n\n    if ((jl_options.outputo || jl_options.outputbc) &&\n        (jl_options.code_coverage || jl_options.malloc_log)) {\n        jl_error(\"cannot generate code-coverage or track allocation information while generating a .o or .bc output file\");\n    }\n\n    jl_init_codegen();\n\n    jl_start_threads();\n\n    jl_an_empty_vec_any = (jl_value_t*)jl_alloc_vec_any(0);\n    jl_init_serializer();\n    jl_init_intrinsic_properties();\n\n    if (!jl_options.image_file) {\n        jl_core_module = jl_new_module(jl_symbol(\"Core\"));\n        jl_type_typename->mt->module = jl_core_module;\n        jl_top_module = jl_core_module;\n        ptls->current_module = jl_core_module;\n        jl_init_intrinsic_functions();\n        jl_init_primitives();\n        jl_get_builtins();\n\n        jl_new_main_module();\n        jl_internal_main_module = jl_main_module;\n\n        ptls->current_module = jl_core_module;\n        for (int t = 0;t < jl_n_threads;t++) {\n            jl_all_tls_states[t]->root_task->current_module = ptls->current_module;\n        }\n\n        jl_load(\"boot.jl\");\n        jl_get_builtin_hooks();\n        jl_boot_file_loaded = 1;\n        jl_init_box_caches();\n    }\n\n    if (jl_options.image_file) {\n        JL_TRY {\n            jl_restore_system_image(jl_options.image_file);\n        }\n        JL_CATCH {\n            jl_printf(JL_STDERR, \"error during init:\\n\");\n            jl_static_show(JL_STDERR, ptls->exception_in_transit);\n            jl_printf(JL_STDERR, \"\\n\");\n            jl_exit(1);\n        }\n    }\n\n    // set module field of primitive types\n    int i;\n    void **table = jl_core_module->bindings.table;\n    for(i=1; i < jl_core_module->bindings.size; i+=2) {\n        if (table[i] != HT_NOTFOUND) {\n            jl_binding_t *b = (jl_binding_t*)table[i];\n            jl_value_t *v = b->value;\n            if (v) {\n                if (jl_is_unionall(v))\n                    v = jl_unwrap_unionall(v);\n                if (jl_is_datatype(v)) {\n                    jl_datatype_t *tt = (jl_datatype_t*)v;\n                    tt->name->module = jl_core_module;\n                    if (tt->name->mt)\n                        tt->name->mt->module = jl_core_module;\n                }\n            }\n        }\n    }\n\n    // the Main module is the one which is always open, and set as the\n    // current module for bare (non-module-wrapped) toplevel expressions.\n    // it does \"using Base\" if Base is available.\n    if (jl_base_module != NULL) {\n        jl_add_standard_imports(jl_main_module);\n    }\n    ptls->current_module = jl_main_module;\n    for (int t = 0;t < jl_n_threads;t++) {\n        jl_all_tls_states[t]->root_task->current_module = ptls->current_module;\n    }\n\n    // This needs to be after jl_start_threads\n    if (jl_options.handle_signals == JL_OPTIONS_HANDLE_SIGNALS_ON)\n        jl_install_default_signal_handlers();\n\n    jl_gc_enable(1);\n\n    if (jl_options.image_file && (!jl_generating_output() || jl_options.incremental) && jl_module_init_order) {\n        jl_array_t *init_order = jl_module_init_order;\n        JL_GC_PUSH1(&init_order);\n        jl_module_init_order = NULL;\n        int i, l = jl_array_len(init_order);\n        for (i = 0; i < l; i++) {\n            jl_value_t *mod = jl_array_ptr_ref(init_order, i);\n            jl_module_run_initializer((jl_module_t*)mod);\n        }\n        JL_GC_POP();\n    }\n\n    if (jl_options.handle_signals == JL_OPTIONS_HANDLE_SIGNALS_ON)\n        jl_install_sigint_handler();\n}\n\nstatic jl_value_t *core(const char *name)\n{\n    return jl_get_global(jl_core_module, jl_symbol(name));\n}\n\nstatic jl_value_t *basemod(const char *name)\n{\n    return jl_get_global(jl_base_module, jl_symbol(name));\n}\n\n// fetch references to things defined in boot.jl\nvoid jl_get_builtin_hooks(void)\n{\n    int t;\n    for (t = 0; t < jl_n_threads; t++) {\n        jl_ptls_t ptls2 = jl_all_tls_states[t];\n        ptls2->root_task->tls = jl_nothing;\n        ptls2->root_task->consumers = jl_nothing;\n        ptls2->root_task->donenotify = jl_nothing;\n        ptls2->root_task->exception = jl_nothing;\n        ptls2->root_task->result = jl_nothing;\n    }\n\n    jl_char_type    = (jl_datatype_t*)core(\"Char\");\n    jl_int8_type    = (jl_datatype_t*)core(\"Int8\");\n    jl_int16_type   = (jl_datatype_t*)core(\"Int16\");\n    jl_uint16_type  = (jl_datatype_t*)core(\"UInt16\");\n    jl_uint32_type  = (jl_datatype_t*)core(\"UInt32\");\n    jl_uint64_type  = (jl_datatype_t*)core(\"UInt64\");\n\n    jl_float16_type = (jl_datatype_t*)core(\"Float16\");\n    jl_float32_type = (jl_datatype_t*)core(\"Float32\");\n    jl_float64_type = (jl_datatype_t*)core(\"Float64\");\n    jl_floatingpoint_type = (jl_datatype_t*)core(\"AbstractFloat\");\n    jl_number_type = (jl_datatype_t*)core(\"Number\");\n    jl_signed_type = (jl_datatype_t*)core(\"Signed\");\n\n    jl_errorexception_type = (jl_datatype_t*)core(\"ErrorException\");\n    jl_stackovf_exception  = jl_new_struct_uninit((jl_datatype_t*)core(\"StackOverflowError\"));\n    jl_diverror_exception  = jl_new_struct_uninit((jl_datatype_t*)core(\"DivideError\"));\n    jl_domain_exception    = jl_new_struct_uninit((jl_datatype_t*)core(\"DomainError\"));\n    jl_overflow_exception  = jl_new_struct_uninit((jl_datatype_t*)core(\"OverflowError\"));\n    jl_inexact_exception   = jl_new_struct_uninit((jl_datatype_t*)core(\"InexactError\"));\n    jl_undefref_exception  = jl_new_struct_uninit((jl_datatype_t*)core(\"UndefRefError\"));\n    jl_undefvarerror_type  = (jl_datatype_t*)core(\"UndefVarError\");\n    jl_interrupt_exception = jl_new_struct_uninit((jl_datatype_t*)core(\"InterruptException\"));\n    jl_boundserror_type    = (jl_datatype_t*)core(\"BoundsError\");\n    jl_memory_exception    = jl_new_struct_uninit((jl_datatype_t*)core(\"OutOfMemoryError\"));\n    jl_readonlymemory_exception = jl_new_struct_uninit((jl_datatype_t*)core(\"ReadOnlyMemoryError\"));\n    jl_typeerror_type = (jl_datatype_t*)core(\"TypeError\");\n\n#ifdef SEGV_EXCEPTION\n    jl_segv_exception      = jl_new_struct_uninit((jl_datatype_t*)core(\"SegmentationFault\"));\n#endif\n\n    jl_weakref_type = (jl_datatype_t*)core(\"WeakRef\");\n    jl_vecelement_typename = ((jl_datatype_t*)jl_unwrap_unionall(core(\"VecElement\")))->name;\n}\n\nJL_DLLEXPORT void jl_get_system_hooks(void)\n{\n    if (jl_argumenterror_type) return; // only do this once\n\n    jl_argumenterror_type = (jl_datatype_t*)basemod(\"ArgumentError\");\n    jl_methoderror_type = (jl_datatype_t*)basemod(\"MethodError\");\n    jl_loaderror_type = (jl_datatype_t*)basemod(\"LoadError\");\n    jl_initerror_type = (jl_datatype_t*)basemod(\"InitError\");\n    jl_complex_type = (jl_unionall_t*)basemod(\"Complex\");\n}\n\nvoid jl_get_builtins(void)\n{\n    jl_builtin_throw = core(\"throw\");           jl_builtin_is = core(\"===\");\n    jl_builtin_typeof = core(\"typeof\");         jl_builtin_sizeof = core(\"sizeof\");\n    jl_builtin_issubtype = core(\"issubtype\");   jl_builtin_isa = core(\"isa\");\n    jl_builtin_typeassert = core(\"typeassert\"); jl_builtin__apply = core(\"_apply\");\n    jl_builtin_isdefined = core(\"isdefined\");   jl_builtin_nfields = core(\"nfields\");\n    jl_builtin_tuple = core(\"tuple\");           jl_builtin_svec = core(\"svec\");\n    jl_builtin_getfield = core(\"getfield\");     jl_builtin_setfield = core(\"setfield!\");\n    jl_builtin_fieldtype = core(\"fieldtype\");   jl_builtin_arrayref = core(\"arrayref\");\n    jl_builtin_arrayset = core(\"arrayset\");     jl_builtin_arraysize = core(\"arraysize\");\n    jl_builtin_apply_type = core(\"apply_type\"); jl_builtin_applicable = core(\"applicable\");\n    jl_builtin_invoke = core(\"invoke\");         jl_builtin__expr = core(\"_expr\");\n}\n\n#ifdef __cplusplus\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/src/julia.h": "// This file is a part of Julia. License is MIT: https://julialang.org/license\n\n#ifndef JULIA_H\n#define JULIA_H\n\n//** Configuration options that affect the Julia ABI **//\n// if this is not defined, only individual dimension sizes are\n// stored and not total length, to save space.\n#define STORE_ARRAY_LEN\n//** End Configuration options **//\n\n#include \"libsupport.h\"\n#include <stdint.h>\n#include <string.h>\n\n#include \"htable.h\"\n#include \"arraylist.h\"\n\n#include <setjmp.h>\n#ifndef _OS_WINDOWS_\n#  define jl_jmp_buf sigjmp_buf\n#  if defined(_CPU_ARM_) || defined(_CPU_PPC_)\n#    define MAX_ALIGN 8\n#  elif defined(_CPU_AARCH64_)\n// int128 is 16 bytes aligned on aarch64\n#    define MAX_ALIGN 16\n#  else\n#    define MAX_ALIGN sizeof(void*)\n#  endif\n#else\n#  define jl_jmp_buf jmp_buf\n#  include <malloc.h> //for _resetstkoflw\n#  define MAX_ALIGN 8\n#endif\n\n#ifdef _P64\n#define NWORDS(sz) (((sz)+7)>>3)\n#else\n#define NWORDS(sz) (((sz)+3)>>2)\n#endif\n\n#if defined(__GNUC__)\n#  define JL_NORETURN __attribute__ ((noreturn))\n#  define JL_CONST_FUNC __attribute__((const))\n#elif defined(_COMPILER_MICROSOFT_)\n#  define JL_NORETURN __declspec(noreturn)\n// This is the closest I can find for __attribute__((const))\n#  define JL_CONST_FUNC __declspec(noalias)\n#else\n#  define JL_NORETURN\n#  define JL_CONST_FUNC\n#endif\n\n#define container_of(ptr, type, member) \\\n    ((type *) ((char *)(ptr) - offsetof(type, member)))\n\ntypedef struct _jl_taggedvalue_t jl_taggedvalue_t;\n\n#include <julia_threads.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n// core data types ------------------------------------------------------------\n\n// the common fields are hidden before the pointer, but the following macro is\n// used to indicate which types below are subtypes of jl_value_t\n#define JL_DATA_TYPE\n\ntypedef struct _jl_value_t jl_value_t;\n\nstruct _jl_taggedvalue_bits {\n    uintptr_t gc:2;\n};\n\nstruct _jl_taggedvalue_t {\n    union {\n        uintptr_t header;\n        jl_taggedvalue_t *next;\n        jl_value_t *type; // 16-byte aligned\n        struct _jl_taggedvalue_bits bits;\n    };\n    // jl_value_t value;\n};\n\n#define jl_astaggedvalue(v)                                             \\\n    ((jl_taggedvalue_t*)((char*)(v) - sizeof(jl_taggedvalue_t)))\n#define jl_valueof(v)                                           \\\n    ((jl_value_t*)((char*)(v) + sizeof(jl_taggedvalue_t)))\n#define jl_typeof(v)                                                    \\\n    ((jl_value_t*)(jl_astaggedvalue(v)->header & ~(uintptr_t)15))\nstatic inline void jl_set_typeof(void *v, void *t)\n{\n    // Do not call this on a value that is already initialized.\n    jl_taggedvalue_t *tag = jl_astaggedvalue(v);\n    tag->type = (jl_value_t*)t;\n}\n#define jl_typeis(v,t) (jl_typeof(v)==(jl_value_t*)(t))\n\n// Symbols are interned strings (hash-consed) stored as an invasive binary tree.\n// The string data is nul-terminated and hangs off the end of the struct.\ntypedef struct _jl_sym_t {\n    JL_DATA_TYPE\n    struct _jl_sym_t *left;\n    struct _jl_sym_t *right;\n    uintptr_t hash;    // precomputed hash value\n    // JL_ATTRIBUTE_ALIGN_PTRSIZE(char name[]);\n} jl_sym_t;\n\n// A numbered SSA value, for optimized code analysis and generation\n// the `id` is a unique, small number\ntypedef struct _jl_ssavalue_t {\n    JL_DATA_TYPE\n    ssize_t id;\n} jl_ssavalue_t;\n\n// A SimpleVector is an immutable pointer array\n// Data is stored at the end of this variable-length struct.\ntypedef struct {\n    JL_DATA_TYPE\n    size_t length;\n    // pointer size aligned\n    // jl_value_t *data[];\n} jl_svec_t;\n\ntypedef struct {\n    /*\n      how - allocation style\n      0 = data is inlined, or a foreign pointer we don't manage\n      1 = julia-allocated buffer that needs to be marked\n      2 = malloc-allocated pointer this array object manages\n      3 = has a pointer to the object that owns the data\n    */\n    uint16_t how:2;\n    uint16_t ndims:10;\n    uint16_t pooled:1;\n    uint16_t ptrarray:1;  // representation is pointer array\n    uint16_t isshared:1;  // data is shared by multiple Arrays\n    uint16_t isaligned:1; // data allocated with memalign\n} jl_array_flags_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    void *data;\n#ifdef STORE_ARRAY_LEN\n    size_t length;\n#endif\n    jl_array_flags_t flags;\n    uint16_t elsize;\n    uint32_t offset;  // for 1-d only. does not need to get big.\n    size_t nrows;\n    union {\n        // 1d\n        size_t maxsize;\n        // Nd\n        size_t ncols;\n    };\n    // other dim sizes go here for ndims > 2\n\n    // followed by alignment padding and inline data, or owner pointer\n} jl_array_t;\n\n// compute # of extra words needed to store dimensions\nSTATIC_INLINE int jl_array_ndimwords(uint32_t ndims)\n{\n    return (ndims < 3 ? 0 : ndims-2);\n}\n\ntypedef struct _jl_datatype_t jl_tupletype_t;\nstruct _jl_method_instance_t;\n\n// TypeMap is an implicitly defined type\n// that can consist of any of the following nodes:\n//   typedef TypeMap Union{TypeMapLevel, TypeMapEntry, Void}\n// it forms a roughly tree-shaped structure, consisting of nodes of TypeMapLevels\n// which split the tree when possible, for example based on the key into the tuple type at `offs`\n// when key is a leaftype, (but only when the tree has enough entries for this to be\n// more efficient than storing them sorted linearly)\n// otherwise the leaf entries are stored sorted, linearly\nunion jl_typemap_t {\n    struct _jl_typemap_level_t *node;\n    struct _jl_typemap_entry_t *leaf;\n    struct _jl_value_t *unknown; // nothing\n};\n\n// \"jlcall\" calling convention signatures.\n// This defines the default ABI used by compiled julia functions.\ntypedef jl_value_t *(*jl_fptr_t)(jl_value_t*, jl_value_t**, uint32_t);\ntypedef jl_value_t *(*jl_fptr_sparam_t)(jl_svec_t*, jl_value_t*, jl_value_t**, uint32_t);\ntypedef jl_value_t *(*jl_fptr_linfo_t)(struct _jl_method_instance_t*, jl_value_t**, uint32_t, jl_svec_t*);\n\ntypedef struct {\n    union {\n        jl_fptr_t fptr;\n        jl_fptr_t fptr1;\n        // constant fptr2;\n        jl_fptr_sparam_t fptr3;\n        jl_fptr_linfo_t fptr4;\n    };\n    uint8_t jlcall_api;\n} jl_generic_fptr_t;\n\ntypedef struct _jl_llvm_functions_t {\n    void *functionObject;     // jlcall llvm Function\n    void *specFunctionObject; // specialized llvm Function\n} jl_llvm_functions_t;\n\n// This type describes a single function body\ntypedef struct _jl_code_info_t {\n    jl_array_t *code;  // Any array of statements\n    jl_value_t *slottypes; // types of variable slots (or `nothing`)\n    jl_value_t *ssavaluetypes;  // types of ssa values (or count of them)\n    jl_array_t *slotflags;  // local var bit flags\n    jl_array_t *slotnames; // names of local variables\n    uint8_t inferred;\n    uint8_t inlineable;\n    uint8_t propagate_inbounds;\n    uint8_t pure;\n} jl_code_info_t;\n\n// This type describes a single method definition, and stores data\n// shared by the specializations of a function.\ntypedef struct _jl_method_t {\n    JL_DATA_TYPE\n    jl_sym_t *name;  // for error reporting\n    struct _jl_module_t *module;\n    jl_sym_t *file;\n    int32_t line;\n\n    // method's type signature. redundant with TypeMapEntry->specTypes\n    jl_value_t *sig;\n    size_t min_world;\n\n    // list of potentially-ambiguous methods (nothing = none, Vector{Any} of Methods otherwise)\n    jl_value_t *ambig;\n\n    // table of all argument types for which we've inferred or compiled this code\n    union jl_typemap_t specializations;\n\n    jl_svec_t *sparam_syms;  // symbols giving static parameter names\n    jl_value_t *source;  // original code template (jl_code_info_t, but may be compressed), null for builtins\n    struct _jl_method_instance_t *unspecialized;  // unspecialized executable method instance, or null\n    struct _jl_method_instance_t *generator;  // executable code-generating function if isstaged\n    jl_array_t *roots;  // pointers in generated code (shared to reduce memory), or null\n\n    // cache of specializations of this method for invoke(), i.e.\n    // cases where this method was called even though it was not necessarily\n    // the most specific for the argument types.\n    union jl_typemap_t invokes;\n\n    int32_t nargs;\n    int32_t called;  // bit flags: whether each of the first 8 arguments is called\n    uint8_t isva;\n    uint8_t isstaged;\n    uint8_t pure;\n\n// hidden fields:\n    uint8_t traced;\n    // lock for modifications to the method\n    jl_mutex_t writelock;\n} jl_method_t;\n\n// This type caches the data for a specType signature specialization of a Method\ntypedef struct _jl_method_instance_t {\n    JL_DATA_TYPE\n    jl_value_t *specTypes;  // argument types this was specialized for\n    jl_value_t *rettype; // return type for fptr\n    jl_svec_t *sparam_vals; // static parameter values, indexed by def->sparam_syms\n    jl_array_t *backedges;\n    jl_value_t *inferred;  // inferred jl_code_info_t, or value of the function if jlcall_api == 2, or null\n    jl_value_t *inferred_const; // inferred constant return value, or null\n    jl_method_t *def; // method this is specialized from, null if this is a toplevel thunk\n    size_t min_world;\n    size_t max_world;\n    uint8_t inInference; // flags to tell if inference is running on this function\n    uint8_t jlcall_api; // the c-abi for fptr; 0 = jl_fptr_t, 1 = jl_fptr_sparam_t, 2 = constval\n    uint8_t compile_traced; // if set will notify callback if this linfo is compiled\n    jl_fptr_t fptr; // jlcall entry point with api specified by jlcall_api\n    jl_fptr_t unspecialized_ducttape; // if template can't be compiled due to intrinsics, an un-inferred fptr may get stored here, jlcall_api = 1\n\n    // On the old JIT, handles to all Functions generated for this linfo\n    // For the new JITs, handles to declarations in the shadow module\n    // with the same name as the generated functions for this linfo, suitable\n    // for referencing in LLVM IR\n    jl_llvm_functions_t functionObjectsDecls;\n} jl_method_instance_t;\n\n// all values are callable as Functions\ntypedef jl_value_t jl_function_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_sym_t *name;\n    jl_value_t *lb;   // lower bound\n    jl_value_t *ub;   // upper bound\n} jl_tvar_t;\n\n// UnionAll type (iterated union over all values of a variable in certain bounds)\n// written `body where lb<:var<:ub`\ntypedef struct {\n    JL_DATA_TYPE\n    jl_tvar_t *var;\n    jl_value_t *body;\n} jl_unionall_t;\n\n// represents the \"name\" part of a DataType, describing the syntactic structure\n// of a type and storing all data common to different instantiations of the type,\n// including a cache for hash-consed allocation of DataType objects.\ntypedef struct {\n    JL_DATA_TYPE\n    jl_sym_t *name;\n    struct _jl_module_t *module;\n    jl_svec_t *names;  // field names\n    // `wrapper` is either the only instantiation of the type (if no parameters)\n    // or a UnionAll accepting parameters to make an instantiation.\n    jl_value_t *wrapper;\n    jl_svec_t *cache;        // sorted array\n    jl_svec_t *linearcache;  // unsorted array\n    intptr_t hash;\n    struct _jl_methtable_t *mt;\n} jl_typename_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_value_t *a;\n    jl_value_t *b;\n} jl_uniontype_t;\n\n// in little-endian, isptr is always the first bit, avoiding the need for a branch in computing isptr\ntypedef struct {\n    uint8_t isptr:1;\n    uint8_t size:7;\n    uint8_t offset;   // offset relative to data start, excluding type tag\n} jl_fielddesc8_t;\n\ntypedef struct {\n    uint16_t isptr:1;\n    uint16_t size:15;\n    uint16_t offset;   // offset relative to data start, excluding type tag\n} jl_fielddesc16_t;\n\ntypedef struct {\n    uint32_t isptr:1;\n    uint32_t size:31;\n    uint32_t offset;   // offset relative to data start, excluding type tag\n} jl_fielddesc32_t;\n\ntypedef struct {\n    uint32_t nfields;\n    uint32_t alignment : 9; // strictest alignment over all fields\n    uint32_t haspadding : 1; // has internal undefined bytes\n    uint32_t npointers : 20; // number of pointer fields, top 4 bits are exponent (under-approximation)\n    uint32_t fielddesc_type : 2; // 0 -> 8, 1 -> 16, 2 -> 32\n    // union {\n    //     jl_fielddesc8_t field8[];\n    //     jl_fielddesc16_t field16[];\n    //     jl_fielddesc32_t field32[];\n    // };\n} jl_datatype_layout_t;\n\ntypedef struct _jl_datatype_t {\n    JL_DATA_TYPE\n    jl_typename_t *name;\n    struct _jl_datatype_t *super;\n    jl_svec_t *parameters;\n    jl_svec_t *types;\n    jl_value_t *instance;  // for singletons\n    const jl_datatype_layout_t *layout;\n    int32_t size; // TODO: move to _jl_datatype_layout_t\n    int32_t ninitialized;\n    uint32_t uid;\n    uint8_t abstract;\n    uint8_t mutabl;\n    // memoized properties\n    void *struct_decl;  //llvm::Type*\n    void *ditype; // llvm::MDNode* to be used as llvm::DIType(ditype)\n    int32_t depth;\n    int8_t hasfreetypevars;\n    int8_t isleaftype;\n} jl_datatype_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_value_t *value;\n} jl_weakref_t;\n\ntypedef struct {\n    // not first-class\n    jl_sym_t *name;\n    jl_value_t *value;\n    jl_value_t *globalref;  // cached GlobalRef for this binding\n    struct _jl_module_t *owner;  // for individual imported bindings\n    unsigned constp:1;\n    unsigned exportp:1;\n    unsigned imported:1;\n    unsigned deprecated:1;\n} jl_binding_t;\n\ntypedef struct _jl_module_t {\n    JL_DATA_TYPE\n    jl_sym_t *name;\n    struct _jl_module_t *parent;\n    htable_t bindings;\n    arraylist_t usings;  // modules with all bindings potentially imported\n    uint8_t istopmod;\n    uint64_t uuid;\n    size_t primary_world;\n    uint32_t counter;\n} jl_module_t;\n\n// one Type-to-Value entry\ntypedef struct _jl_typemap_entry_t {\n    JL_DATA_TYPE\n    struct _jl_typemap_entry_t *next; // invasive linked list\n    jl_tupletype_t *sig; // the type signature for this entry\n    jl_tupletype_t *simplesig; // a simple signature for fast rejection\n    jl_svec_t *guardsigs;\n    size_t min_world;\n    size_t max_world;\n    union {\n        jl_value_t *value;\n        jl_method_instance_t *linfo; // [nullable] for guard entries\n        jl_method_t *method;\n    } func;\n    // memoized properties of sig:\n    int8_t isleafsig; // isleaftype(sig) & !any(isType, sig) : unsorted and very fast\n    int8_t issimplesig; // all(isleaftype | isAny | isType | isVararg, sig) : sorted and fast\n    int8_t va; // isVararg(sig)\n} jl_typemap_entry_t;\n\n// one level in a TypeMap tree\n// indexed by key if it is a sublevel in an array\nstruct jl_ordereddict_t {\n    jl_array_t *indexes; // Array{Int{8,16,32}}\n    jl_array_t *values; // Array{union jl_typemap_t}\n};\ntypedef struct _jl_typemap_level_t {\n    JL_DATA_TYPE\n    struct jl_ordereddict_t arg1;\n    struct jl_ordereddict_t targ;\n    jl_typemap_entry_t *linear; // union jl_typemap_t (but no more levels)\n    union jl_typemap_t any; // type at offs is Any\n    jl_value_t *key; // [nullable]\n} jl_typemap_level_t;\n\n// contains the TypeMap for one Type\ntypedef struct _jl_methtable_t {\n    JL_DATA_TYPE\n    jl_sym_t *name;\n    union jl_typemap_t defs;\n    union jl_typemap_t cache;\n    intptr_t max_args;  // max # of non-vararg arguments in a signature\n    jl_value_t *kwsorter;  // keyword argument sorter function\n    jl_module_t *module; // used for incremental serialization to locate original binding\n    jl_array_t *backedges;\n    jl_mutex_t writelock;\n} jl_methtable_t;\n\ntypedef struct {\n    JL_DATA_TYPE\n    jl_sym_t *head;\n    jl_array_t *args;\n    jl_value_t *etype;\n} jl_expr_t;\n\n// constants and type objects -------------------------------------------------\n\n// kinds\nextern JL_DLLEXPORT jl_datatype_t *jl_typeofbottom_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_datatype_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_uniontype_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_unionall_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_tvar_type;\n\nextern JL_DLLEXPORT jl_datatype_t *jl_any_type;\nextern JL_DLLEXPORT jl_unionall_t *jl_type_type;\nextern JL_DLLEXPORT jl_unionall_t *jl_typetype_type;\nextern JL_DLLEXPORT jl_value_t    *jl_ANY_flag;\nextern JL_DLLEXPORT jl_datatype_t *jl_typename_type;\nextern JL_DLLEXPORT jl_typename_t *jl_type_typename;\nextern JL_DLLEXPORT jl_datatype_t *jl_sym_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_symbol_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_ssavalue_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_abstractslot_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_slotnumber_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_typedslot_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_simplevector_type;\nextern JL_DLLEXPORT jl_typename_t *jl_tuple_typename;\nextern JL_DLLEXPORT jl_typename_t *jl_vecelement_typename;\nextern JL_DLLEXPORT jl_datatype_t *jl_anytuple_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_emptytuple_type;\n#define jl_tuple_type jl_anytuple_type\nextern JL_DLLEXPORT jl_unionall_t *jl_anytuple_type_type;\nextern JL_DLLEXPORT jl_unionall_t *jl_vararg_type;\nextern JL_DLLEXPORT jl_typename_t *jl_vararg_typename;\nextern JL_DLLEXPORT jl_datatype_t *jl_task_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_function_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_builtin_type;\n\nextern JL_DLLEXPORT jl_value_t *jl_bottom_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_method_instance_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_code_info_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_method_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_module_type;\nextern JL_DLLEXPORT jl_unionall_t *jl_abstractarray_type;\nextern JL_DLLEXPORT jl_unionall_t *jl_densearray_type;\nextern JL_DLLEXPORT jl_unionall_t *jl_array_type;\nextern JL_DLLEXPORT jl_typename_t *jl_array_typename;\nextern JL_DLLEXPORT jl_datatype_t *jl_weakref_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_abstractstring_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_string_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_errorexception_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_argumenterror_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_loaderror_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_initerror_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_typeerror_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_methoderror_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_undefvarerror_type;\nextern JL_DLLEXPORT jl_value_t *jl_stackovf_exception;\nextern JL_DLLEXPORT jl_value_t *jl_memory_exception;\nextern JL_DLLEXPORT jl_value_t *jl_readonlymemory_exception;\nextern JL_DLLEXPORT jl_value_t *jl_diverror_exception;\nextern JL_DLLEXPORT jl_value_t *jl_domain_exception;\nextern JL_DLLEXPORT jl_value_t *jl_overflow_exception;\nextern JL_DLLEXPORT jl_value_t *jl_inexact_exception;\nextern JL_DLLEXPORT jl_value_t *jl_undefref_exception;\nextern JL_DLLEXPORT jl_value_t *jl_interrupt_exception;\nextern JL_DLLEXPORT jl_datatype_t *jl_boundserror_type;\nextern JL_DLLEXPORT jl_value_t *jl_an_empty_vec_any;\n\nextern JL_DLLEXPORT jl_datatype_t *jl_bool_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_char_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_int8_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_uint8_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_int16_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_uint16_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_int32_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_uint32_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_int64_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_uint64_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_float16_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_float32_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_float64_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_floatingpoint_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_number_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_void_type;\nextern JL_DLLEXPORT jl_unionall_t *jl_complex_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_signed_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_voidpointer_type;\nextern JL_DLLEXPORT jl_unionall_t *jl_pointer_type;\nextern JL_DLLEXPORT jl_unionall_t *jl_ref_type;\nextern JL_DLLEXPORT jl_typename_t *jl_pointer_typename;\n\nextern JL_DLLEXPORT jl_value_t *jl_array_uint8_type;\nextern JL_DLLEXPORT jl_value_t *jl_array_any_type;\nextern JL_DLLEXPORT jl_value_t *jl_array_symbol_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_expr_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_globalref_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_linenumbernode_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_labelnode_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_gotonode_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_quotenode_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_newvarnode_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_intrinsic_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_methtable_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_typemap_level_type;\nextern JL_DLLEXPORT jl_datatype_t *jl_typemap_entry_type;\n\nextern JL_DLLEXPORT jl_svec_t *jl_emptysvec;\nextern JL_DLLEXPORT jl_value_t *jl_emptytuple;\nextern JL_DLLEXPORT jl_value_t *jl_true;\nextern JL_DLLEXPORT jl_value_t *jl_false;\nextern JL_DLLEXPORT jl_value_t *jl_nothing;\n\n// some important symbols\nextern JL_DLLEXPORT jl_sym_t *jl_incomplete_sym;\n\n// gc -------------------------------------------------------------------------\n\ntypedef struct _jl_gcframe_t {\n    size_t nroots;\n    struct _jl_gcframe_t *prev;\n    // actual roots go here\n} jl_gcframe_t;\n\n// NOTE: it is the caller's responsibility to make sure arguments are\n// rooted such that the gc can see them on the stack.\n// `foo(f(), g())` is not safe,\n// since the result of `f()` is not rooted during the call to `g()`,\n// and the arguments to foo are not gc-protected during the call to foo.\n// foo can't do anything about it, so the caller must do:\n// jl_value_t *x=NULL, *y=NULL; JL_GC_PUSH2(&x, &y);\n// x = f(); y = g(); foo(x, y)\n\n#define jl_pgcstack (jl_get_ptls_states()->pgcstack)\n\n#define JL_GC_PUSH1(arg1)                                                 \\\n  void *__gc_stkf[] = {(void*)3, jl_pgcstack, arg1};                      \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH2(arg1, arg2)                                           \\\n  void *__gc_stkf[] = {(void*)5, jl_pgcstack, arg1, arg2};                \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH3(arg1, arg2, arg3)                                     \\\n  void *__gc_stkf[] = {(void*)7, jl_pgcstack, arg1, arg2, arg3};          \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH4(arg1, arg2, arg3, arg4)                               \\\n  void *__gc_stkf[] = {(void*)9, jl_pgcstack, arg1, arg2, arg3, arg4};    \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH5(arg1, arg2, arg3, arg4, arg5)                               \\\n  void *__gc_stkf[] = {(void*)11, jl_pgcstack, arg1, arg2, arg3, arg4, arg5};    \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSH6(arg1, arg2, arg3, arg4, arg5, arg6)                      \\\n  void *__gc_stkf[] = {(void*)13, jl_pgcstack, arg1, arg2, arg3, arg4, arg5, arg6}; \\\n  jl_pgcstack = (jl_gcframe_t*)__gc_stkf;\n\n#define JL_GC_PUSHARGS(rts_var,n)                               \\\n  rts_var = ((jl_value_t**)alloca(((n)+2)*sizeof(jl_value_t*)))+2;    \\\n  ((void**)rts_var)[-2] = (void*)(((size_t)(n))<<1);                  \\\n  ((void**)rts_var)[-1] = jl_pgcstack;                          \\\n  memset((void*)rts_var, 0, (n)*sizeof(jl_value_t*));           \\\n  jl_pgcstack = (jl_gcframe_t*)&(((void**)rts_var)[-2])\n\n#define JL_GC_POP() (jl_pgcstack = jl_pgcstack->prev)\n\nJL_DLLEXPORT int jl_gc_enable(int on);\nJL_DLLEXPORT int jl_gc_is_enabled(void);\nJL_DLLEXPORT int64_t jl_gc_total_bytes(void);\nJL_DLLEXPORT uint64_t jl_gc_total_hrtime(void);\nJL_DLLEXPORT int64_t jl_gc_diff_total_bytes(void);\n\nJL_DLLEXPORT void jl_gc_collect(int);\n\nJL_DLLEXPORT void jl_gc_add_finalizer(jl_value_t *v, jl_function_t *f);\nJL_DLLEXPORT void jl_finalize(jl_value_t *o);\nJL_DLLEXPORT jl_weakref_t *jl_gc_new_weakref(jl_value_t *value);\nJL_DLLEXPORT jl_value_t *jl_gc_alloc_0w(void);\nJL_DLLEXPORT jl_value_t *jl_gc_alloc_1w(void);\nJL_DLLEXPORT jl_value_t *jl_gc_alloc_2w(void);\nJL_DLLEXPORT jl_value_t *jl_gc_alloc_3w(void);\nJL_DLLEXPORT jl_value_t *jl_gc_allocobj(size_t sz);\n\nJL_DLLEXPORT void jl_clear_malloc_data(void);\n\n// GC write barriers\nJL_DLLEXPORT void jl_gc_queue_root(jl_value_t *root); // root isa jl_value_t*\n\n// Do NOT put a safepoint here\nSTATIC_INLINE void jl_gc_wb(void *parent, void *ptr)\n{\n    // parent and ptr isa jl_value_t*\n    if (__unlikely(jl_astaggedvalue(parent)->bits.gc == 3 &&\n                   (jl_astaggedvalue(ptr)->bits.gc & 1) == 0))\n        jl_gc_queue_root((jl_value_t*)parent);\n}\n\nSTATIC_INLINE void jl_gc_wb_back(void *ptr) // ptr isa jl_value_t*\n{\n    // if ptr is old\n    if (__unlikely(jl_astaggedvalue(ptr)->bits.gc == 3)) {\n        jl_gc_queue_root((jl_value_t*)ptr);\n    }\n}\n\nJL_DLLEXPORT void *jl_gc_managed_malloc(size_t sz);\nJL_DLLEXPORT void *jl_gc_managed_realloc(void *d, size_t sz, size_t oldsz,\n                                         int isaligned, jl_value_t *owner);\n\n// object accessors -----------------------------------------------------------\n\n#define jl_svec_len(t)              (((jl_svec_t*)(t))->length)\n#define jl_svec_set_len_unsafe(t,n) (((jl_svec_t*)(t))->length=(n))\n#define jl_svec_data(t) ((jl_value_t**)((char*)(t) + sizeof(jl_svec_t)))\n\nSTATIC_INLINE jl_value_t *jl_svecref(void *t, size_t i)\n{\n    assert(jl_typeis(t,jl_simplevector_type));\n    assert(i < jl_svec_len(t));\n    return jl_svec_data(t)[i];\n}\nSTATIC_INLINE jl_value_t *jl_svecset(void *t, size_t i, void *x)\n{\n    assert(jl_typeis(t,jl_simplevector_type));\n    assert(i < jl_svec_len(t));\n    jl_svec_data(t)[i] = (jl_value_t*)x;\n    if (x) jl_gc_wb(t, x);\n    return (jl_value_t*)x;\n}\n\n#ifdef STORE_ARRAY_LEN\n#define jl_array_len(a)   (((jl_array_t*)(a))->length)\n#else\nJL_DLLEXPORT size_t jl_array_len_(jl_array_t *a);\n#define jl_array_len(a)   jl_array_len_((jl_array_t*)(a))\n#endif\n#define jl_array_data(a)  ((void*)((jl_array_t*)(a))->data)\n#define jl_array_dim(a,i) ((&((jl_array_t*)(a))->nrows)[i])\n#define jl_array_dim0(a)  (((jl_array_t*)(a))->nrows)\n#define jl_array_nrows(a) (((jl_array_t*)(a))->nrows)\n#define jl_array_ndims(a) ((int32_t)(((jl_array_t*)a)->flags.ndims))\n#define jl_array_data_owner_offset(ndims) (offsetof(jl_array_t,ncols) + sizeof(size_t)*(1+jl_array_ndimwords(ndims))) // in bytes\n#define jl_array_data_owner(a) (*((jl_value_t**)((char*)a + jl_array_data_owner_offset(jl_array_ndims(a)))))\n\nSTATIC_INLINE jl_value_t *jl_array_ptr_ref(void *a, size_t i)\n{\n    assert(i < jl_array_len(a));\n    return ((jl_value_t**)(jl_array_data(a)))[i];\n}\nSTATIC_INLINE jl_value_t *jl_array_ptr_set(void *a, size_t i, void *x)\n{\n    assert(i < jl_array_len(a));\n    ((jl_value_t**)(jl_array_data(a)))[i] = (jl_value_t*)x;\n    if (x) {\n        if (((jl_array_t*)a)->flags.how == 3) {\n            a = jl_array_data_owner(a);\n        }\n        jl_gc_wb(a, x);\n    }\n    return (jl_value_t*)x;\n}\n\nSTATIC_INLINE uint8_t jl_array_uint8_ref(void *a, size_t i)\n{\n    assert(i < jl_array_len(a));\n    assert(jl_typeis(a, jl_array_uint8_type));\n    return ((uint8_t*)(jl_array_data(a)))[i];\n}\nSTATIC_INLINE void jl_array_uint8_set(void *a, size_t i, uint8_t x)\n{\n    assert(i < jl_array_len(a));\n    assert(jl_typeis(a, jl_array_uint8_type));\n    ((uint8_t*)(jl_array_data(a)))[i] = x;\n}\n\n#define jl_exprarg(e,n) (((jl_value_t**)jl_array_data(((jl_expr_t*)(e))->args))[n])\n#define jl_exprargset(e, n, v) jl_array_ptr_set(((jl_expr_t*)(e))->args, n, v)\n#define jl_expr_nargs(e) jl_array_len(((jl_expr_t*)(e))->args)\n\n#define jl_fieldref(s,i) jl_get_nth_field(((jl_value_t*)s),i)\n#define jl_nfields(v)    jl_datatype_nfields(jl_typeof(v))\n\n// Not using jl_fieldref to avoid allocations\n#define jl_linenode_line(x) (((intptr_t*)x)[0])\n#define jl_labelnode_label(x) (((intptr_t*)x)[0])\n#define jl_slot_number(x) (((intptr_t*)x)[0])\n#define jl_typedslot_get_type(x) (((jl_value_t**)x)[1])\n#define jl_gotonode_label(x) (((intptr_t*)x)[0])\n#define jl_globalref_mod(s) (*(jl_module_t**)s)\n#define jl_globalref_name(s) (((jl_sym_t**)s)[1])\n\n#define jl_nparams(t)  jl_svec_len(((jl_datatype_t*)(t))->parameters)\n#define jl_tparam0(t)  jl_svecref(((jl_datatype_t*)(t))->parameters, 0)\n#define jl_tparam1(t)  jl_svecref(((jl_datatype_t*)(t))->parameters, 1)\n#define jl_tparam(t,i) jl_svecref(((jl_datatype_t*)(t))->parameters, i)\n\n// get a pointer to the data in a datatype\n#define jl_data_ptr(v)  ((jl_value_t**)v)\n\n#define jl_array_ptr_data(a)   ((jl_value_t**)((jl_array_t*)a)->data)\n#define jl_string_data(s) ((char*)s + sizeof(void*))\n#define jl_string_len(s)  (*(size_t*)s)\n\n#define jl_gf_mtable(f) (((jl_datatype_t*)jl_typeof(f))->name->mt)\n#define jl_gf_name(f)   (jl_gf_mtable(f)->name)\n\n// struct type info\n#define jl_field_name(st,i)    (jl_sym_t*)jl_svecref(((jl_datatype_t*)st)->name->names, (i))\n#define jl_field_type(st,i)    jl_svecref(((jl_datatype_t*)st)->types, (i))\n#define jl_field_count(st)     jl_svec_len(((jl_datatype_t*)st)->types)\n#define jl_datatype_size(t)    (((jl_datatype_t*)t)->size)\n#define jl_datatype_align(t)   (((jl_datatype_t*)t)->layout->alignment)\n#define jl_datatype_nbits(t)   ((((jl_datatype_t*)t)->size)*8)\n#define jl_datatype_nfields(t) (((jl_datatype_t*)(t))->layout->nfields)\n\n// inline version with strong type check to detect typos in a `->name` chain\nSTATIC_INLINE char *jl_symbol_name_(jl_sym_t *s)\n{\n    return (char*)s + LLT_ALIGN(sizeof(jl_sym_t), sizeof(void*));\n}\n#define jl_symbol_name(s) jl_symbol_name_(s)\n\n#define jl_dt_layout_fields(d) ((const char*)(d) + sizeof(jl_datatype_layout_t))\n\n#define DEFINE_FIELD_ACCESSORS(f)                                             \\\n    static inline uint32_t jl_field_##f(jl_datatype_t *st, int i)             \\\n    {                                                                         \\\n        const jl_datatype_layout_t *ly = st->layout;                          \\\n        assert(i >= 0 && (size_t)i < ly->nfields);                            \\\n        if (ly->fielddesc_type == 0) {                                        \\\n            return ((const jl_fielddesc8_t*)jl_dt_layout_fields(ly))[i].f;    \\\n        }                                                                     \\\n        else if (ly->fielddesc_type == 1) {                                   \\\n            return ((const jl_fielddesc16_t*)jl_dt_layout_fields(ly))[i].f;   \\\n        }                                                                     \\\n        else {                                                                \\\n            return ((const jl_fielddesc32_t*)jl_dt_layout_fields(ly))[i].f;   \\\n        }                                                                     \\\n    }                                                                         \\\n\nDEFINE_FIELD_ACCESSORS(offset)\nDEFINE_FIELD_ACCESSORS(size)\nstatic inline int jl_field_isptr(jl_datatype_t *st, int i)\n{\n    const jl_datatype_layout_t *ly = st->layout;\n    assert(i >= 0 && (size_t)i < ly->nfields);\n    return ((const jl_fielddesc8_t*)(jl_dt_layout_fields(ly) + (i << (ly->fielddesc_type + 1))))->isptr;\n}\n\nstatic inline uint32_t jl_fielddesc_size(int8_t fielddesc_type)\n{\n    if (fielddesc_type == 0) {\n        return sizeof(jl_fielddesc8_t);\n    }\n    else if (fielddesc_type == 1) {\n        return sizeof(jl_fielddesc16_t);\n    }\n    else {\n        return sizeof(jl_fielddesc32_t);\n    }\n}\n\n#undef DEFINE_FIELD_ACCESSORS\n\n// basic predicates -----------------------------------------------------------\n#define jl_is_nothing(v)     (((jl_value_t*)(v)) == ((jl_value_t*)jl_nothing))\n#define jl_is_tuple(v)       (((jl_datatype_t*)jl_typeof(v))->name == jl_tuple_typename)\n#define jl_is_svec(v)        jl_typeis(v,jl_simplevector_type)\n#define jl_is_simplevector(v) jl_is_svec(v)\n#define jl_is_datatype(v)    jl_typeis(v,jl_datatype_type)\n#define jl_is_mutable(t)     (((jl_datatype_t*)t)->mutabl)\n#define jl_is_mutable_datatype(t) (jl_is_datatype(t) && (((jl_datatype_t*)t)->mutabl))\n#define jl_is_immutable(t)   (!((jl_datatype_t*)t)->mutabl)\n#define jl_is_immutable_datatype(t) (jl_is_datatype(t) && (!((jl_datatype_t*)t)->mutabl))\n#define jl_is_uniontype(v)   jl_typeis(v,jl_uniontype_type)\n#define jl_is_typevar(v)     jl_typeis(v,jl_tvar_type)\n#define jl_is_unionall(v)    jl_typeis(v,jl_unionall_type)\n#define jl_is_typename(v)    jl_typeis(v,jl_typename_type)\n#define jl_is_int8(v)        jl_typeis(v,jl_int8_type)\n#define jl_is_int16(v)       jl_typeis(v,jl_int16_type)\n#define jl_is_int32(v)       jl_typeis(v,jl_int32_type)\n#define jl_is_int64(v)       jl_typeis(v,jl_int64_type)\n#define jl_is_uint8(v)       jl_typeis(v,jl_uint8_type)\n#define jl_is_uint16(v)      jl_typeis(v,jl_uint16_type)\n#define jl_is_uint32(v)      jl_typeis(v,jl_uint32_type)\n#define jl_is_uint64(v)      jl_typeis(v,jl_uint64_type)\n#define jl_is_bool(v)        jl_typeis(v,jl_bool_type)\n#define jl_is_symbol(v)      jl_typeis(v,jl_sym_type)\n#define jl_is_ssavalue(v)    jl_typeis(v,jl_ssavalue_type)\n#define jl_is_slot(v)        (jl_typeis(v,jl_slotnumber_type) || jl_typeis(v,jl_typedslot_type))\n#define jl_is_expr(v)        jl_typeis(v,jl_expr_type)\n#define jl_is_globalref(v)   jl_typeis(v,jl_globalref_type)\n#define jl_is_labelnode(v)   jl_typeis(v,jl_labelnode_type)\n#define jl_is_gotonode(v)    jl_typeis(v,jl_gotonode_type)\n#define jl_is_quotenode(v)   jl_typeis(v,jl_quotenode_type)\n#define jl_is_newvarnode(v)  jl_typeis(v,jl_newvarnode_type)\n#define jl_is_linenode(v)    jl_typeis(v,jl_linenumbernode_type)\n#define jl_is_method_instance(v) jl_typeis(v,jl_method_instance_type)\n#define jl_is_code_info(v) jl_typeis(v,jl_code_info_type)\n#define jl_is_method(v)      jl_typeis(v,jl_method_type)\n#define jl_is_module(v)      jl_typeis(v,jl_module_type)\n#define jl_is_mtable(v)      jl_typeis(v,jl_methtable_type)\n#define jl_is_task(v)        jl_typeis(v,jl_task_type)\n#define jl_is_string(v)      jl_typeis(v,jl_string_type)\n#define jl_is_cpointer(v)    jl_is_cpointer_type(jl_typeof(v))\n#define jl_is_pointer(v)     jl_is_cpointer_type(jl_typeof(v))\n#define jl_is_intrinsic(v)   jl_typeis(v,jl_intrinsic_type)\n\nJL_DLLEXPORT int jl_subtype(jl_value_t *a, jl_value_t *b);\n\nSTATIC_INLINE int jl_is_kind(jl_value_t *v)\n{\n    return (v==(jl_value_t*)jl_uniontype_type || v==(jl_value_t*)jl_datatype_type ||\n            v==(jl_value_t*)jl_unionall_type || v==(jl_value_t*)jl_typeofbottom_type);\n}\n\nSTATIC_INLINE int jl_is_type(jl_value_t *v)\n{\n    return jl_is_kind(jl_typeof(v));\n}\n\nSTATIC_INLINE int jl_is_primitivetype(void *v)\n{\n    return (jl_is_datatype(v) && jl_is_immutable(v) &&\n            ((jl_datatype_t*)(v))->layout &&\n            jl_datatype_nfields(v) == 0 &&\n            jl_datatype_size(v) > 0);\n}\n\nSTATIC_INLINE int jl_is_structtype(void *v)\n{\n    return (jl_is_datatype(v) &&\n            (jl_field_count(v) > 0 ||\n             jl_datatype_size(v) == 0) &&\n            !((jl_datatype_t*)(v))->abstract);\n}\n\nSTATIC_INLINE int jl_isbits(void *t)   // corresponding to isbits() in julia\n{\n    return (jl_is_datatype(t) && ((jl_datatype_t*)t)->layout &&\n            !((jl_datatype_t*)t)->mutabl &&\n            ((jl_datatype_t*)t)->layout->npointers == 0);\n}\n\nSTATIC_INLINE int jl_is_datatype_singleton(jl_datatype_t *d)\n{\n    return (d->instance != NULL);\n}\n\nSTATIC_INLINE int jl_is_datatype_make_singleton(jl_datatype_t *d)\n{\n    return (!d->abstract && jl_datatype_size(d) == 0 && d != jl_sym_type && d->name != jl_array_typename &&\n            d->uid != 0 && (d->name->names == jl_emptysvec || !d->mutabl));\n}\n\nSTATIC_INLINE int jl_is_abstracttype(void *v)\n{\n    return (jl_is_datatype(v) && ((jl_datatype_t*)(v))->abstract);\n}\n\nSTATIC_INLINE int jl_is_array_type(void *t)\n{\n    return (jl_is_datatype(t) &&\n            ((jl_datatype_t*)(t))->name == jl_array_typename);\n}\n\nSTATIC_INLINE int jl_is_array(void *v)\n{\n    jl_value_t *t = jl_typeof(v);\n    return jl_is_array_type(t);\n}\n\nSTATIC_INLINE int jl_is_cpointer_type(jl_value_t *t)\n{\n    return (jl_is_datatype(t) &&\n            ((jl_datatype_t*)(t))->name == ((jl_datatype_t*)jl_pointer_type->body)->name);\n}\n\nSTATIC_INLINE int jl_is_abstract_ref_type(jl_value_t *t)\n{\n    return (jl_is_datatype(t) &&\n            ((jl_datatype_t*)(t))->name == ((jl_datatype_t*)jl_ref_type->body)->name);\n}\n\nSTATIC_INLINE int jl_is_tuple_type(void *t)\n{\n    return (jl_is_datatype(t) &&\n            ((jl_datatype_t*)(t))->name == jl_tuple_typename);\n}\n\nSTATIC_INLINE int jl_is_vecelement_type(jl_value_t* t)\n{\n    return (jl_is_datatype(t) &&\n            ((jl_datatype_t*)(t))->name == jl_vecelement_typename);\n}\n\nSTATIC_INLINE int jl_is_type_type(jl_value_t *v)\n{\n    return (jl_is_datatype(v) &&\n            ((jl_datatype_t*)(v))->name == ((jl_datatype_t*)jl_type_type->body)->name);\n}\n\n// object identity\nJL_DLLEXPORT int jl_egal(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT uintptr_t jl_object_id(jl_value_t *v);\n\n// type predicates and basic operations\nJL_DLLEXPORT int jl_is_leaf_type(jl_value_t *v);\nJL_DLLEXPORT int jl_has_free_typevars(jl_value_t *v);\nJL_DLLEXPORT int jl_has_typevar(jl_value_t *t, jl_tvar_t *v);\nJL_DLLEXPORT int jl_has_typevar_from_unionall(jl_value_t *t, jl_unionall_t *ua);\nJL_DLLEXPORT int jl_subtype_env_size(jl_value_t *t);\nJL_DLLEXPORT int jl_subtype_env(jl_value_t *x, jl_value_t *y, jl_value_t **env, int envsz);\nJL_DLLEXPORT int jl_isa(jl_value_t *a, jl_value_t *t);\nJL_DLLEXPORT int jl_types_equal(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_type_union(jl_value_t **ts, size_t n);\nJL_DLLEXPORT jl_value_t *jl_type_intersection(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT int jl_has_empty_intersection(jl_value_t *x, jl_value_t *y);\nJL_DLLEXPORT jl_value_t *jl_type_unionall(jl_tvar_t *v, jl_value_t *body);\nJL_DLLEXPORT const char *jl_typename_str(jl_value_t *v);\nJL_DLLEXPORT const char *jl_typeof_str(jl_value_t *v);\nJL_DLLEXPORT int jl_type_morespecific(jl_value_t *a, jl_value_t *b);\njl_value_t *jl_unwrap_unionall(jl_value_t *v);\njl_value_t *jl_rewrap_unionall(jl_value_t *t, jl_value_t *u);\n\n#if defined(NDEBUG) && defined(JL_NDEBUG)\nSTATIC_INLINE int jl_is_leaf_type_(jl_value_t *v)\n{\n    return jl_is_datatype(v) && ((jl_datatype_t*)v)->isleaftype;\n}\n#define jl_is_leaf_type(v) jl_is_leaf_type_(v)\n#endif\n\n// type constructors\nJL_DLLEXPORT jl_typename_t *jl_new_typename(jl_sym_t *name);\nJL_DLLEXPORT jl_tvar_t *jl_new_typevar(jl_sym_t *name, jl_value_t *lb, jl_value_t *ub);\nJL_DLLEXPORT jl_value_t *jl_instantiate_unionall(jl_unionall_t *u, jl_value_t *p);\nJL_DLLEXPORT jl_value_t *jl_apply_type(jl_value_t *tc, jl_value_t **params, size_t n);\nJL_DLLEXPORT jl_value_t *jl_apply_type1(jl_value_t *tc, jl_value_t *p1);\nJL_DLLEXPORT jl_value_t *jl_apply_type2(jl_value_t *tc, jl_value_t *p1, jl_value_t *p2);\nJL_DLLEXPORT jl_tupletype_t *jl_apply_tuple_type(jl_svec_t *params);\nJL_DLLEXPORT jl_tupletype_t *jl_apply_tuple_type_v(jl_value_t **p, size_t np);\nJL_DLLEXPORT jl_datatype_t *jl_new_datatype(jl_sym_t *name, jl_datatype_t *super,\n                                            jl_svec_t *parameters,\n                                            jl_svec_t *fnames, jl_svec_t *ftypes,\n                                            int abstract, int mutabl,\n                                            int ninitialized);\nJL_DLLEXPORT jl_datatype_t *jl_new_primitivetype(jl_value_t *name,\n                                                 jl_datatype_t *super,\n                                                 jl_svec_t *parameters, size_t nbits);\n\n// constructors\nJL_DLLEXPORT jl_value_t *jl_new_bits(jl_value_t *bt, void *data);\nJL_DLLEXPORT jl_value_t *jl_new_struct(jl_datatype_t *type, ...);\nJL_DLLEXPORT jl_value_t *jl_new_structv(jl_datatype_t *type, jl_value_t **args,\n                                        uint32_t na);\nJL_DLLEXPORT jl_value_t *jl_new_struct_uninit(jl_datatype_t *type);\nJL_DLLEXPORT jl_method_instance_t *jl_new_method_instance_uninit(void);\nJL_DLLEXPORT jl_svec_t *jl_svec(size_t n, ...);\nJL_DLLEXPORT jl_svec_t *jl_svec1(void *a);\nJL_DLLEXPORT jl_svec_t *jl_svec2(void *a, void *b);\nJL_DLLEXPORT jl_svec_t *jl_alloc_svec(size_t n);\nJL_DLLEXPORT jl_svec_t *jl_alloc_svec_uninit(size_t n);\nJL_DLLEXPORT jl_svec_t *jl_svec_copy(jl_svec_t *a);\nJL_DLLEXPORT jl_svec_t *jl_svec_fill(size_t n, jl_value_t *x);\nJL_DLLEXPORT jl_value_t *jl_tupletype_fill(size_t n, jl_value_t *v);\nJL_DLLEXPORT jl_sym_t *jl_symbol(const char *str);\nJL_DLLEXPORT jl_sym_t *jl_symbol_lookup(const char *str);\nJL_DLLEXPORT jl_sym_t *jl_symbol_n(const char *str, size_t len);\nJL_DLLEXPORT jl_sym_t *jl_gensym(void);\nJL_DLLEXPORT jl_sym_t *jl_tagged_gensym(const char *str, int32_t len);\nJL_DLLEXPORT jl_sym_t *jl_get_root_symbol(void);\nJL_DLLEXPORT jl_value_t *jl_generic_function_def(jl_sym_t *name, jl_value_t **bp,\n                                                 jl_value_t *bp_owner,\n                                                 jl_binding_t *bnd);\nJL_DLLEXPORT void jl_method_def(jl_svec_t *argdata, jl_code_info_t *f, jl_value_t *isstaged);\nJL_DLLEXPORT jl_code_info_t *jl_code_for_staged(jl_method_instance_t *linfo);\nJL_DLLEXPORT jl_code_info_t *jl_copy_code_info(jl_code_info_t *src);\nJL_DLLEXPORT size_t jl_get_world_counter(void);\nJL_DLLEXPORT jl_function_t *jl_get_kwsorter(jl_value_t *ty);\nJL_DLLEXPORT jl_value_t *jl_box_bool(int8_t x);\nJL_DLLEXPORT jl_value_t *jl_box_int8(int8_t x);\nJL_DLLEXPORT jl_value_t *jl_box_uint8(uint8_t x);\nJL_DLLEXPORT jl_value_t *jl_box_int16(int16_t x);\nJL_DLLEXPORT jl_value_t *jl_box_uint16(uint16_t x);\nJL_DLLEXPORT jl_value_t *jl_box_int32(int32_t x);\nJL_DLLEXPORT jl_value_t *jl_box_uint32(uint32_t x);\nJL_DLLEXPORT jl_value_t *jl_box_char(uint32_t x);\nJL_DLLEXPORT jl_value_t *jl_box_int64(int64_t x);\nJL_DLLEXPORT jl_value_t *jl_box_uint64(uint64_t x);\nJL_DLLEXPORT jl_value_t *jl_box_float32(float x);\nJL_DLLEXPORT jl_value_t *jl_box_float64(double x);\nJL_DLLEXPORT jl_value_t *jl_box_voidpointer(void *x);\nJL_DLLEXPORT jl_value_t *jl_box_ssavalue(size_t x);\nJL_DLLEXPORT jl_value_t *jl_box_slotnumber(size_t x);\nJL_DLLEXPORT jl_value_t *jl_box8 (jl_datatype_t *t, int8_t  x);\nJL_DLLEXPORT jl_value_t *jl_box16(jl_datatype_t *t, int16_t x);\nJL_DLLEXPORT jl_value_t *jl_box32(jl_datatype_t *t, int32_t x);\nJL_DLLEXPORT jl_value_t *jl_box64(jl_datatype_t *t, int64_t x);\nJL_DLLEXPORT int8_t jl_unbox_bool(jl_value_t *v);\nJL_DLLEXPORT int8_t jl_unbox_int8(jl_value_t *v);\nJL_DLLEXPORT uint8_t jl_unbox_uint8(jl_value_t *v);\nJL_DLLEXPORT int16_t jl_unbox_int16(jl_value_t *v);\nJL_DLLEXPORT uint16_t jl_unbox_uint16(jl_value_t *v);\nJL_DLLEXPORT int32_t jl_unbox_int32(jl_value_t *v);\nJL_DLLEXPORT uint32_t jl_unbox_uint32(jl_value_t *v);\nJL_DLLEXPORT int64_t jl_unbox_int64(jl_value_t *v);\nJL_DLLEXPORT uint64_t jl_unbox_uint64(jl_value_t *v);\nJL_DLLEXPORT float jl_unbox_float32(jl_value_t *v);\nJL_DLLEXPORT double jl_unbox_float64(jl_value_t *v);\nJL_DLLEXPORT void *jl_unbox_voidpointer(jl_value_t *v);\n\nJL_DLLEXPORT int jl_get_size(jl_value_t *val, size_t *pnt);\n\n#ifdef _P64\n#define jl_box_long(x)   jl_box_int64(x)\n#define jl_box_ulong(x)  jl_box_uint64(x)\n#define jl_unbox_long(x) jl_unbox_int64(x)\n#define jl_is_long(x)    jl_is_int64(x)\n#define jl_long_type     jl_int64_type\n#define jl_ulong_type    jl_uint64_type\n#else\n#define jl_box_long(x)   jl_box_int32(x)\n#define jl_box_ulong(x)  jl_box_uint32(x)\n#define jl_unbox_long(x) jl_unbox_int32(x)\n#define jl_is_long(x)    jl_is_int32(x)\n#define jl_long_type     jl_int32_type\n#define jl_ulong_type    jl_uint32_type\n#endif\n\n// Each tuple can exist in one of 4 Vararg states:\n//   NONE: no vararg                            Tuple{Int,Float32}\n//   INT: vararg with integer length            Tuple{Int,Vararg{Float32,2}}\n//   BOUND: vararg with bound TypeVar length    Tuple{Int,Vararg{Float32,N}}\n//   UNBOUND: vararg with unbound length        Tuple{Int,Vararg{Float32}}\ntypedef enum {\n    JL_VARARG_NONE    = 0,\n    JL_VARARG_INT     = 1,\n    JL_VARARG_BOUND   = 2,\n    JL_VARARG_UNBOUND = 3\n} jl_vararg_kind_t;\n\nSTATIC_INLINE int jl_is_vararg_type(jl_value_t *v)\n{\n    v = jl_unwrap_unionall(v);\n    return (jl_is_datatype(v) &&\n            ((jl_datatype_t*)(v))->name == jl_vararg_typename);\n}\n\nSTATIC_INLINE jl_value_t *jl_unwrap_vararg(jl_value_t *v)\n{\n    return jl_tparam0(jl_unwrap_unionall(v));\n}\n\nSTATIC_INLINE jl_vararg_kind_t jl_vararg_kind(jl_value_t *v)\n{\n    if (!jl_is_vararg_type(v))\n        return JL_VARARG_NONE;\n    jl_tvar_t *v1=NULL, *v2=NULL;\n    if (jl_is_unionall(v)) {\n        v1 = ((jl_unionall_t*)v)->var;\n        v = ((jl_unionall_t*)v)->body;\n        if (jl_is_unionall(v)) {\n            v2 = ((jl_unionall_t*)v)->var;\n            v = ((jl_unionall_t*)v)->body;\n        }\n    }\n    assert(jl_is_datatype(v));\n    jl_value_t *lenv = jl_tparam1(v);\n    if (jl_is_long(lenv))\n        return JL_VARARG_INT;\n    if (jl_is_typevar(lenv) && lenv != (jl_value_t*)v1 && lenv != (jl_value_t*)v2)\n        return JL_VARARG_BOUND;\n    return JL_VARARG_UNBOUND;\n}\n\nSTATIC_INLINE int jl_is_va_tuple(jl_datatype_t *t)\n{\n    assert(jl_is_tuple_type(t));\n    size_t l = jl_svec_len(t->parameters);\n    return (l>0 && jl_is_vararg_type(jl_tparam(t,l-1)));\n}\n\nSTATIC_INLINE jl_vararg_kind_t jl_va_tuple_kind(jl_datatype_t *t)\n{\n    t = (jl_datatype_t*)jl_unwrap_unionall((jl_value_t*)t);\n    assert(jl_is_tuple_type(t));\n    size_t l = jl_svec_len(t->parameters);\n    if (l == 0)\n        return JL_VARARG_NONE;\n    return jl_vararg_kind(jl_tparam(t,l-1));\n}\n\n// structs\nJL_DLLEXPORT int         jl_field_index(jl_datatype_t *t, jl_sym_t *fld, int err);\nJL_DLLEXPORT jl_value_t *jl_get_nth_field(jl_value_t *v, size_t i);\nJL_DLLEXPORT jl_value_t *jl_get_nth_field_checked(jl_value_t *v, size_t i);\nJL_DLLEXPORT void        jl_set_nth_field(jl_value_t *v, size_t i,\n                                          jl_value_t *rhs);\nJL_DLLEXPORT int         jl_field_isdefined(jl_value_t *v, size_t i);\nJL_DLLEXPORT jl_value_t *jl_get_field(jl_value_t *o, const char *fld);\nJL_DLLEXPORT jl_value_t *jl_value_ptr(jl_value_t *a);\n\n// arrays\nJL_DLLEXPORT jl_array_t *jl_new_array(jl_value_t *atype, jl_value_t *dims);\nJL_DLLEXPORT jl_array_t *jl_reshape_array(jl_value_t *atype, jl_array_t *data,\n                                          jl_value_t *dims);\nJL_DLLEXPORT jl_array_t *jl_ptr_to_array_1d(jl_value_t *atype, void *data,\n                                            size_t nel, int own_buffer);\nJL_DLLEXPORT jl_array_t *jl_ptr_to_array(jl_value_t *atype, void *data,\n                                         jl_value_t *dims, int own_buffer);\n\nJL_DLLEXPORT jl_array_t *jl_alloc_array_1d(jl_value_t *atype, size_t nr);\nJL_DLLEXPORT jl_array_t *jl_alloc_array_2d(jl_value_t *atype, size_t nr,\n                                           size_t nc);\nJL_DLLEXPORT jl_array_t *jl_alloc_array_3d(jl_value_t *atype, size_t nr,\n                                           size_t nc, size_t z);\nJL_DLLEXPORT jl_array_t *jl_pchar_to_array(const char *str, size_t len);\nJL_DLLEXPORT jl_value_t *jl_pchar_to_string(const char *str, size_t len);\nJL_DLLEXPORT jl_value_t *jl_cstr_to_string(const char *str);\nJL_DLLEXPORT jl_value_t *jl_alloc_string(size_t len);\nJL_DLLEXPORT jl_value_t *jl_array_to_string(jl_array_t *a);\nJL_DLLEXPORT jl_array_t *jl_alloc_vec_any(size_t n);\nJL_DLLEXPORT jl_value_t *jl_arrayref(jl_array_t *a, size_t i);  // 0-indexed\nJL_DLLEXPORT void jl_arrayset(jl_array_t *a, jl_value_t *v, size_t i);  // 0-indexed\nJL_DLLEXPORT void jl_arrayunset(jl_array_t *a, size_t i);  // 0-indexed\nJL_DLLEXPORT void jl_array_grow_end(jl_array_t *a, size_t inc);\nJL_DLLEXPORT void jl_array_del_end(jl_array_t *a, size_t dec);\nJL_DLLEXPORT void jl_array_grow_beg(jl_array_t *a, size_t inc);\nJL_DLLEXPORT void jl_array_del_beg(jl_array_t *a, size_t dec);\nJL_DLLEXPORT void jl_array_sizehint(jl_array_t *a, size_t sz);\nJL_DLLEXPORT void jl_array_ptr_1d_push(jl_array_t *a, jl_value_t *item);\nJL_DLLEXPORT void jl_array_ptr_1d_push2(jl_array_t *a, jl_value_t *b, jl_value_t *c);\nJL_DLLEXPORT void jl_array_ptr_1d_append(jl_array_t *a, jl_array_t *a2);\nJL_DLLEXPORT jl_value_t *jl_apply_array_type(jl_value_t *type, size_t dim);\n// property access\nJL_DLLEXPORT void *jl_array_ptr(jl_array_t *a);\nJL_DLLEXPORT void *jl_array_eltype(jl_value_t *a);\nJL_DLLEXPORT int jl_array_rank(jl_value_t *a);\nJL_DLLEXPORT size_t jl_array_size(jl_value_t *a, int d);\n\n// strings\nJL_DLLEXPORT const char *jl_string_ptr(jl_value_t *s);\n\n// modules and global variables\nextern JL_DLLEXPORT jl_module_t *jl_main_module;\nextern JL_DLLEXPORT jl_module_t *jl_internal_main_module;\nextern JL_DLLEXPORT jl_module_t *jl_core_module;\nextern JL_DLLEXPORT jl_module_t *jl_base_module;\nextern JL_DLLEXPORT jl_module_t *jl_top_module;\nJL_DLLEXPORT jl_module_t *jl_new_module(jl_sym_t *name);\n// get binding for reading\nJL_DLLEXPORT jl_binding_t *jl_get_binding(jl_module_t *m, jl_sym_t *var);\nJL_DLLEXPORT jl_binding_t *jl_get_binding_or_error(jl_module_t *m, jl_sym_t *var);\nJL_DLLEXPORT jl_value_t *jl_module_globalref(jl_module_t *m, jl_sym_t *var);\n// get binding for assignment\nJL_DLLEXPORT jl_binding_t *jl_get_binding_wr(jl_module_t *m, jl_sym_t *var);\nJL_DLLEXPORT jl_binding_t *jl_get_binding_for_method_def(jl_module_t *m,\n                                                         jl_sym_t *var);\nJL_DLLEXPORT int jl_boundp(jl_module_t *m, jl_sym_t *var);\nJL_DLLEXPORT int jl_defines_or_exports_p(jl_module_t *m, jl_sym_t *var);\nJL_DLLEXPORT int jl_binding_resolved_p(jl_module_t *m, jl_sym_t *var);\nJL_DLLEXPORT int jl_is_const(jl_module_t *m, jl_sym_t *var);\nJL_DLLEXPORT jl_value_t *jl_get_global(jl_module_t *m, jl_sym_t *var);\nJL_DLLEXPORT void jl_set_global(jl_module_t *m, jl_sym_t *var, jl_value_t *val);\nJL_DLLEXPORT void jl_set_const(jl_module_t *m, jl_sym_t *var, jl_value_t *val);\nJL_DLLEXPORT void jl_checked_assignment(jl_binding_t *b, jl_value_t *rhs);\nJL_DLLEXPORT void jl_declare_constant(jl_binding_t *b);\nJL_DLLEXPORT void jl_module_using(jl_module_t *to, jl_module_t *from);\nJL_DLLEXPORT void jl_module_use(jl_module_t *to, jl_module_t *from, jl_sym_t *s);\nJL_DLLEXPORT void jl_module_import(jl_module_t *to, jl_module_t *from,\n                                   jl_sym_t *s);\nJL_DLLEXPORT void jl_module_importall(jl_module_t *to, jl_module_t *from);\nJL_DLLEXPORT void jl_module_export(jl_module_t *from, jl_sym_t *s);\nJL_DLLEXPORT int jl_is_imported(jl_module_t *m, jl_sym_t *s);\nJL_DLLEXPORT int jl_module_exports_p(jl_module_t *m, jl_sym_t *var);\nJL_DLLEXPORT jl_module_t *jl_new_main_module(void);\nJL_DLLEXPORT void jl_add_standard_imports(jl_module_t *m);\nSTATIC_INLINE jl_function_t *jl_get_function(jl_module_t *m, const char *name)\n{\n    return (jl_function_t*)jl_get_global(m, jl_symbol(name));\n}\nint jl_is_submodule(jl_module_t *child, jl_module_t *parent);\n\n// eq hash tables\nJL_DLLEXPORT jl_array_t *jl_eqtable_put(jl_array_t *h, void *key, void *val);\nJL_DLLEXPORT jl_value_t *jl_eqtable_get(jl_array_t *h, void *key,\n                                        jl_value_t *deflt);\n\n// system information\nJL_DLLEXPORT int jl_errno(void);\nJL_DLLEXPORT void jl_set_errno(int e);\nJL_DLLEXPORT int32_t jl_stat(const char *path, char *statbuf);\nJL_DLLEXPORT int jl_cpu_cores(void);\nJL_DLLEXPORT long jl_getpagesize(void);\nJL_DLLEXPORT long jl_getallocationgranularity(void);\nJL_DLLEXPORT int jl_is_debugbuild(void);\nJL_DLLEXPORT jl_sym_t *jl_get_UNAME(void);\nJL_DLLEXPORT jl_sym_t *jl_get_ARCH(void);\nJL_DLLEXPORT uint64_t jl_cpuid_tag(void);\nJL_DLLEXPORT int jl_uses_cpuid_tag(void);\n\n// environment entries\nJL_DLLEXPORT jl_value_t *jl_environ(int i);\n\n// throwing common exceptions\nJL_DLLEXPORT void JL_NORETURN jl_error(const char *str);\nJL_DLLEXPORT void JL_NORETURN jl_errorf(const char *fmt, ...);\nJL_DLLEXPORT void JL_NORETURN jl_exceptionf(jl_datatype_t *ty,\n                                            const char *fmt, ...);\nJL_DLLEXPORT void JL_NORETURN jl_too_few_args(const char *fname, int min);\nJL_DLLEXPORT void JL_NORETURN jl_too_many_args(const char *fname, int max);\nJL_DLLEXPORT void JL_NORETURN jl_type_error(const char *fname,\n                                            jl_value_t *expected,\n                                            jl_value_t *got);\nJL_DLLEXPORT void JL_NORETURN jl_type_error_rt(const char *fname,\n                                               const char *context,\n                                               jl_value_t *ty, jl_value_t *got);\nJL_DLLEXPORT void JL_NORETURN jl_undefined_var_error(jl_sym_t *var);\nJL_DLLEXPORT void JL_NORETURN jl_bounds_error(jl_value_t *v, jl_value_t *t);\nJL_DLLEXPORT void JL_NORETURN jl_bounds_error_v(jl_value_t *v,\n                                                jl_value_t **idxs, size_t nidxs);\nJL_DLLEXPORT void JL_NORETURN jl_bounds_error_int(jl_value_t *v, size_t i);\nJL_DLLEXPORT void JL_NORETURN jl_bounds_error_tuple_int(jl_value_t **v,\n                                                        size_t nv, size_t i);\nJL_DLLEXPORT void JL_NORETURN jl_bounds_error_unboxed_int(void *v, jl_value_t *vt, size_t i);\nJL_DLLEXPORT void JL_NORETURN jl_bounds_error_ints(jl_value_t *v, size_t *idxs, size_t nidxs);\nJL_DLLEXPORT void JL_NORETURN jl_eof_error(void);\nJL_DLLEXPORT jl_value_t *jl_exception_occurred(void);\nJL_DLLEXPORT void jl_exception_clear(void);\n\n#define JL_NARGS(fname, min, max)                               \\\n    if (nargs < min) jl_too_few_args(#fname, min);              \\\n    else if (nargs > max) jl_too_many_args(#fname, max);\n\n#define JL_NARGSV(fname, min)                           \\\n    if (nargs < min) jl_too_few_args(#fname, min);\n\n#define JL_TYPECHK(fname, type, v)                                      \\\n    if (!jl_is_##type(v)) {                                             \\\n        jl_type_error(#fname, (jl_value_t*)jl_##type##_type, (v));      \\\n    }\n#define JL_TYPECHKS(fname, type, v)                                     \\\n    if (!jl_is_##type(v)) {                                             \\\n        jl_type_error(fname, (jl_value_t*)jl_##type##_type, (v));       \\\n    }\n\n// initialization functions\ntypedef enum {\n    JL_IMAGE_CWD = 0,\n    JL_IMAGE_JULIA_HOME = 1,\n    //JL_IMAGE_LIBJULIA = 2,\n} JL_IMAGE_SEARCH;\nJL_DLLEXPORT void julia_init(JL_IMAGE_SEARCH rel);\nJL_DLLEXPORT void jl_init(void);\nJL_DLLEXPORT void jl_init_with_image(const char *julia_home_dir,\n                                     const char *image_relative_path);\nJL_DLLEXPORT const char *jl_get_default_sysimg_path(void);\nJL_DLLEXPORT int jl_is_initialized(void);\nJL_DLLEXPORT void jl_atexit_hook(int status);\nJL_DLLEXPORT void JL_NORETURN jl_exit(int status);\nJL_DLLEXPORT const char *jl_pathname_for_handle(void *handle);\n\nJL_DLLEXPORT int jl_deserialize_verify_header(ios_t *s);\nJL_DLLEXPORT void jl_preload_sysimg_so(const char *fname);\nJL_DLLEXPORT void jl_set_sysimg_so(void *handle);\nJL_DLLEXPORT ios_t *jl_create_system_image(void);\nJL_DLLEXPORT void jl_save_system_image(const char *fname);\nJL_DLLEXPORT void jl_restore_system_image(const char *fname);\nJL_DLLEXPORT void jl_restore_system_image_data(const char *buf, size_t len);\nJL_DLLEXPORT int jl_save_incremental(const char *fname, jl_array_t *worklist);\nJL_DLLEXPORT jl_value_t *jl_restore_incremental(const char *fname);\nJL_DLLEXPORT jl_value_t *jl_restore_incremental_from_buf(const char *buf, size_t sz);\n\n// front end interface\nJL_DLLEXPORT jl_value_t *jl_parse_input_line(const char *str, size_t len,\n                                             const char *filename, size_t filename_len);\nJL_DLLEXPORT jl_value_t *jl_parse_string(const char *str, size_t len,\n                                         int pos0, int greedy);\nJL_DLLEXPORT int jl_parse_depwarn(int warn);\nJL_DLLEXPORT jl_value_t *jl_load_file_string(const char *text, size_t len,\n                                             char *filename);\nJL_DLLEXPORT jl_value_t *jl_expand(jl_value_t *expr);\nJL_DLLEXPORT jl_value_t *jl_eval_string(const char *str);\n\n// external libraries\nenum JL_RTLD_CONSTANT {\n     JL_RTLD_LOCAL=1U,\n     JL_RTLD_GLOBAL=2U,\n     JL_RTLD_LAZY=4U,\n     JL_RTLD_NOW=8U,\n     /* Linux/glibc and MacOS X: */\n     JL_RTLD_NODELETE=16U,\n     JL_RTLD_NOLOAD=32U,\n     /* Linux/glibc: */\n     JL_RTLD_DEEPBIND=64U,\n     /* MacOS X 10.5+: */\n     JL_RTLD_FIRST=128U\n};\n#define JL_RTLD_DEFAULT (JL_RTLD_LAZY | JL_RTLD_DEEPBIND)\n\ntypedef void *jl_uv_libhandle; // compatible with dlopen (void*) / LoadLibrary (HMODULE)\nJL_DLLEXPORT jl_uv_libhandle jl_load_dynamic_library(const char *fname, unsigned flags);\nJL_DLLEXPORT jl_uv_libhandle jl_load_dynamic_library_e(const char *fname, unsigned flags);\nJL_DLLEXPORT jl_uv_libhandle jl_dlopen(const char *filename, unsigned flags);\nJL_DLLEXPORT int jl_dlclose(jl_uv_libhandle handle);\nJL_DLLEXPORT void *jl_dlsym_e(jl_uv_libhandle handle, const char *symbol);\nJL_DLLEXPORT void *jl_dlsym(jl_uv_libhandle handle, const char *symbol);\n\n#if defined(__linux__) || defined(__FreeBSD__)\nJL_DLLEXPORT const char *jl_lookup_soname(const char *pfx, size_t n);\n#endif\n\n// compiler\nJL_DLLEXPORT jl_value_t *jl_toplevel_eval(jl_value_t *v);\nJL_DLLEXPORT jl_value_t *jl_toplevel_eval_in(jl_module_t *m, jl_value_t *ex);\nJL_DLLEXPORT jl_value_t *jl_load(const char *fname);\nJL_DLLEXPORT jl_module_t *jl_base_relative_to(jl_module_t *m);\n\n// tracing\nJL_DLLEXPORT void jl_trace_method(jl_method_t *m);\nJL_DLLEXPORT void jl_untrace_method(jl_method_t *m);\nJL_DLLEXPORT void jl_trace_linfo(jl_method_instance_t *linfo);\nJL_DLLEXPORT void jl_untrace_linfo(jl_method_instance_t *linfo);\nJL_DLLEXPORT void jl_register_linfo_tracer(void (*callback)(jl_method_instance_t *tracee));\nJL_DLLEXPORT void jl_register_method_tracer(void (*callback)(jl_method_instance_t *tracee));\nJL_DLLEXPORT void jl_register_newmeth_tracer(void (*callback)(jl_method_t *tracee));\n\n// AST access\nJL_DLLEXPORT jl_value_t *jl_copy_ast(jl_value_t *expr);\n\nJL_DLLEXPORT jl_array_t *jl_compress_ast(jl_method_t *m, jl_code_info_t *code);\nJL_DLLEXPORT jl_code_info_t *jl_uncompress_ast(jl_method_t *m, jl_array_t *data);\nJL_DLLEXPORT uint8_t jl_ast_flag_inferred(jl_array_t *data);\nJL_DLLEXPORT uint8_t jl_ast_flag_inlineable(jl_array_t *data);\nJL_DLLEXPORT uint8_t jl_ast_flag_pure(jl_array_t *data);\nJL_DLLEXPORT void jl_fill_argnames(jl_array_t *data, jl_array_t *names);\n\nJL_DLLEXPORT int jl_is_operator(char *sym);\nJL_DLLEXPORT int jl_operator_precedence(char *sym);\n\nSTATIC_INLINE int jl_vinfo_sa(uint8_t vi)\n{\n    return (vi&16)!=0;\n}\n\nSTATIC_INLINE int jl_vinfo_usedundef(uint8_t vi)\n{\n    return (vi&32)!=0;\n}\n\n// calling into julia ---------------------------------------------------------\n\nJL_DLLEXPORT jl_value_t *jl_apply_generic(jl_value_t **args, uint32_t nargs);\nJL_DLLEXPORT jl_value_t *jl_invoke(jl_method_instance_t *meth, jl_value_t **args, uint32_t nargs);\n\nSTATIC_INLINE\njl_value_t *jl_apply(jl_value_t **args, uint32_t nargs)\n{\n    return jl_apply_generic(args, nargs);\n}\n\nJL_DLLEXPORT jl_value_t *jl_call(jl_function_t *f, jl_value_t **args, int32_t nargs);\nJL_DLLEXPORT jl_value_t *jl_call0(jl_function_t *f);\nJL_DLLEXPORT jl_value_t *jl_call1(jl_function_t *f, jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_call2(jl_function_t *f, jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_call3(jl_function_t *f, jl_value_t *a,\n                                  jl_value_t *b, jl_value_t *c);\n\n// interfacing with Task runtime\nJL_DLLEXPORT void jl_yield(void);\n\n// async signal handling ------------------------------------------------------\n\nJL_DLLEXPORT void jl_install_sigint_handler(void);\nJL_DLLEXPORT void jl_sigatomic_begin(void);\nJL_DLLEXPORT void jl_sigatomic_end(void);\n\n// tasks and exceptions -------------------------------------------------------\n\ntypedef struct _jl_timing_block_t jl_timing_block_t;\n// info describing an exception handler\ntypedef struct _jl_handler_t {\n    jl_jmp_buf eh_ctx;\n    jl_gcframe_t *gcstack;\n    struct _jl_handler_t *prev;\n    int8_t gc_state;\n#ifdef JULIA_ENABLE_THREADING\n    size_t locks_len;\n#endif\n    sig_atomic_t defer_signal;\n    int finalizers_inhibited;\n    jl_timing_block_t *timing_stack;\n    size_t world_age;\n} jl_handler_t;\n\ntypedef struct _jl_task_t {\n    JL_DATA_TYPE\n    struct _jl_task_t *parent;\n    jl_value_t *tls;\n    jl_sym_t *state;\n    jl_value_t *consumers;\n    jl_value_t *donenotify;\n    jl_value_t *result;\n    jl_value_t *exception;\n    jl_value_t *backtrace;\n    jl_function_t *start;\n    jl_jmp_buf ctx;\n    size_t bufsz;\n    void *stkbuf;\n\n// hidden fields:\n    size_t ssize;\n    size_t started:1;\n\n    // current exception handler\n    jl_handler_t *eh;\n    // saved gc stack top for context switches\n    jl_gcframe_t *gcstack;\n    // current module, or NULL if this task has not set one\n    jl_module_t *current_module;\n    // current world age\n    size_t world_age;\n\n    // id of owning thread\n    // does not need to be defined until the task runs\n    int16_t tid;\n#ifdef JULIA_ENABLE_THREADING\n    // This is statically initialized when the task is not holding any locks\n    arraylist_t locks;\n#endif\n    jl_timing_block_t *timing_stack;\n} jl_task_t;\n\nJL_DLLEXPORT jl_task_t *jl_new_task(jl_function_t *start, size_t ssize);\nJL_DLLEXPORT void jl_switchto(jl_task_t *t);\nJL_DLLEXPORT void JL_NORETURN jl_throw(jl_value_t *e);\nJL_DLLEXPORT void JL_NORETURN jl_rethrow(void);\nJL_DLLEXPORT void JL_NORETURN jl_rethrow_other(jl_value_t *e);\nJL_DLLEXPORT void JL_NORETURN jl_no_exc_handler(jl_value_t *e);\n\n#ifdef JULIA_ENABLE_THREADING\nstatic inline void jl_lock_frame_push(jl_mutex_t *lock)\n{\n    jl_ptls_t ptls = jl_get_ptls_states();\n    // For early bootstrap\n    if (__unlikely(!ptls->current_task))\n        return;\n    arraylist_t *locks = &ptls->current_task->locks;\n    size_t len = locks->len;\n    if (__unlikely(len >= locks->max)) {\n        arraylist_grow(locks, 1);\n    }\n    else {\n        locks->len = len + 1;\n    }\n    locks->items[len] = (void*)lock;\n}\nstatic inline void jl_lock_frame_pop(void)\n{\n    jl_ptls_t ptls = jl_get_ptls_states();\n    if (__likely(ptls->current_task)) {\n        ptls->current_task->locks.len--;\n    }\n}\n#else\nstatic inline void jl_lock_frame_push(jl_mutex_t *lock)\n{\n    (void)lock;\n}\nstatic inline void jl_lock_frame_pop(void)\n{\n}\n#endif // ifndef JULIA_ENABLE_THREADING\n\nSTATIC_INLINE void jl_eh_restore_state(jl_handler_t *eh)\n{\n    jl_ptls_t ptls = jl_get_ptls_states();\n    jl_task_t *current_task = ptls->current_task;\n    // `eh` may not be `ptls->current_task->eh`. See `jl_pop_handler`\n    // This function should **NOT** have any safepoint before the ones at the\n    // end.\n    sig_atomic_t old_defer_signal = ptls->defer_signal;\n    int8_t old_gc_state = ptls->gc_state;\n    current_task->eh = eh->prev;\n    ptls->pgcstack = eh->gcstack;\n#ifdef JULIA_ENABLE_THREADING\n    arraylist_t *locks = &current_task->locks;\n    if (locks->len > eh->locks_len) {\n        for (size_t i = locks->len;i > eh->locks_len;i--)\n            jl_mutex_unlock_nogc((jl_mutex_t*)locks->items[i - 1]);\n        locks->len = eh->locks_len;\n    }\n#endif\n    ptls->world_age = eh->world_age;\n    ptls->defer_signal = eh->defer_signal;\n    ptls->gc_state = eh->gc_state;\n    ptls->finalizers_inhibited = eh->finalizers_inhibited;\n    if (old_gc_state && !eh->gc_state) {\n        jl_gc_safepoint_(ptls);\n    }\n    if (old_defer_signal && !eh->defer_signal) {\n        jl_sigint_safepoint(ptls);\n    }\n}\n\nJL_DLLEXPORT void jl_enter_handler(jl_handler_t *eh);\nJL_DLLEXPORT void jl_pop_handler(int n);\n\n#if defined(_OS_WINDOWS_)\n#if defined(_COMPILER_MINGW_)\nint __attribute__ ((__nothrow__,__returns_twice__)) (jl_setjmp)(jmp_buf _Buf);\n__declspec(noreturn) __attribute__ ((__nothrow__)) void (jl_longjmp)(jmp_buf _Buf, int _Value);\n#else\nint (jl_setjmp)(jmp_buf _Buf);\nvoid (jl_longjmp)(jmp_buf _Buf, int _Value);\n#endif\n#define jl_setjmp_f jl_setjmp\n#define jl_setjmp_name \"jl_setjmp\"\n#define jl_setjmp(a,b) jl_setjmp(a)\n#define jl_longjmp(a,b) jl_longjmp(a,b)\n#else\n// determine actual entry point name\n#if defined(sigsetjmp)\n#define jl_setjmp_f    __sigsetjmp\n#define jl_setjmp_name \"__sigsetjmp\"\n#else\n#define jl_setjmp_f    sigsetjmp\n#define jl_setjmp_name \"sigsetjmp\"\n#endif\n#define jl_setjmp(a,b) sigsetjmp(a,b)\n#define jl_longjmp(a,b) siglongjmp(a,b)\n#endif\n\n#define JL_TRY                                                    \\\n    int i__tr, i__ca; jl_handler_t __eh;                          \\\n    jl_enter_handler(&__eh);                                      \\\n    if (!jl_setjmp(__eh.eh_ctx,0))                                \\\n        for (i__tr=1; i__tr; i__tr=0, jl_eh_restore_state(&__eh))\n\n#define JL_EH_POP() jl_eh_restore_state(&__eh)\n\n#ifdef _OS_WINDOWS_\n#define JL_CATCH                                                \\\n    else                                                        \\\n        for (i__ca=1, jl_eh_restore_state(&__eh); i__ca; i__ca=0) \\\n            if (((jl_get_ptls_states()->exception_in_transit==jl_stackovf_exception) && _resetstkoflw()) || 1)\n#else\n#define JL_CATCH                                                \\\n    else                                                        \\\n        for (i__ca=1, jl_eh_restore_state(&__eh); i__ca; i__ca=0)\n#endif\n\n// I/O system -----------------------------------------------------------------\n\n#define JL_STREAM uv_stream_t\n#define JL_STDOUT jl_uv_stdout\n#define JL_STDERR jl_uv_stderr\n#define JL_STDIN  jl_uv_stdin\n\nJL_DLLEXPORT void jl_run_event_loop(uv_loop_t *loop);\nJL_DLLEXPORT int jl_run_once(uv_loop_t *loop);\nJL_DLLEXPORT int jl_process_events(uv_loop_t *loop);\n\nJL_DLLEXPORT uv_loop_t *jl_global_event_loop(void);\n\nJL_DLLEXPORT void jl_close_uv(uv_handle_t *handle);\n\nJL_DLLEXPORT int jl_tcp_bind(uv_tcp_t *handle, uint16_t port, uint32_t host,\n                             unsigned int flags);\n\nJL_DLLEXPORT int jl_sizeof_ios_t(void);\n\nJL_DLLEXPORT jl_array_t *jl_take_buffer(ios_t *s);\n\ntypedef struct {\n    void *data;\n    uv_loop_t *loop;\n    uv_handle_type type;\n    uv_file file;\n} jl_uv_file_t;\n\n#ifdef __GNUC__\n#define _JL_FORMAT_ATTR(type, str, arg) \\\n    __attribute__((format(type, str, arg)))\n#else\n#define _JL_FORMAT_ATTR(type, str, arg)\n#endif\n\nJL_DLLEXPORT void jl_uv_puts(uv_stream_t *stream, const char *str, size_t n);\nJL_DLLEXPORT int jl_printf(uv_stream_t *s, const char *format, ...)\n    _JL_FORMAT_ATTR(printf, 2, 3);\nJL_DLLEXPORT int jl_vprintf(uv_stream_t *s, const char *format, va_list args)\n    _JL_FORMAT_ATTR(printf, 2, 0);\nJL_DLLEXPORT void jl_safe_printf(const char *str, ...)\n    _JL_FORMAT_ATTR(printf, 1, 2);\n\nextern JL_DLLEXPORT JL_STREAM *JL_STDIN;\nextern JL_DLLEXPORT JL_STREAM *JL_STDOUT;\nextern JL_DLLEXPORT JL_STREAM *JL_STDERR;\n\nJL_DLLEXPORT JL_STREAM *jl_stdout_stream(void);\nJL_DLLEXPORT JL_STREAM *jl_stdin_stream(void);\nJL_DLLEXPORT JL_STREAM *jl_stderr_stream(void);\n\n// showing and std streams\nJL_DLLEXPORT void jl_flush_cstdio(void);\nJL_DLLEXPORT jl_value_t *jl_stdout_obj(void);\nJL_DLLEXPORT jl_value_t *jl_stderr_obj(void);\nJL_DLLEXPORT size_t jl_static_show(JL_STREAM *out, jl_value_t *v);\nJL_DLLEXPORT size_t jl_static_show_func_sig(JL_STREAM *s, jl_value_t *type);\nJL_DLLEXPORT void jlbacktrace(void);\n// Mainly for debugging, use `void*` so that no type cast is needed in C++.\nJL_DLLEXPORT void jl_(void *jl_value);\n\n// julia options -----------------------------------------------------------\n// NOTE: This struct needs to be kept in sync with JLOptions type in base/options.jl\ntypedef struct {\n    int8_t quiet;\n    const char *julia_home;\n    const char *julia_bin;\n    const char *eval;\n    const char *print;\n    const char *load;\n    const char *image_file;\n    const char *cpu_target;\n    int32_t nprocs;\n    const char *machinefile;\n    int8_t isinteractive;\n    int8_t color;\n    int8_t historyfile;\n    int8_t startupfile;\n    int8_t compile_enabled;\n    int8_t code_coverage;\n    int8_t malloc_log;\n    int8_t opt_level;\n    int8_t debug_level;\n    int8_t check_bounds;\n    int8_t depwarn;\n    int8_t can_inline;\n    int8_t polly;\n    int8_t fast_math;\n    const char *worker;\n    int8_t handle_signals;\n    int8_t use_precompiled;\n    int8_t use_compilecache;\n    const char *bindto;\n    const char *outputbc;\n    const char *outputo;\n    const char *outputji;\n    int8_t incremental;\n    int8_t image_file_specified;\n} jl_options_t;\n\nextern JL_DLLEXPORT jl_options_t jl_options;\n\n// Parse an argc/argv pair to extract general julia options, passing back out\n// any arguments that should be passed on to the script.\nJL_DLLEXPORT void jl_parse_opts(int *argcp, char ***argvp);\n\n// Set julia-level ARGS array according to the arguments provided in\n// argc/argv\nJL_DLLEXPORT void jl_set_ARGS(int argc, char **argv);\n\nJL_DLLEXPORT int jl_generating_output(void);\n\n// Settings for code_coverage and malloc_log\n// NOTE: if these numbers change, test/cmdlineargs.jl will have to be updated\n#define JL_LOG_NONE 0\n#define JL_LOG_USER 1\n#define JL_LOG_ALL  2\n\n#define JL_OPTIONS_CHECK_BOUNDS_DEFAULT 0\n#define JL_OPTIONS_CHECK_BOUNDS_ON 1\n#define JL_OPTIONS_CHECK_BOUNDS_OFF 2\n\n#define JL_OPTIONS_COMPILE_DEFAULT 1\n#define JL_OPTIONS_COMPILE_OFF 0\n#define JL_OPTIONS_COMPILE_ON  1\n#define JL_OPTIONS_COMPILE_ALL 2\n#define JL_OPTIONS_COMPILE_MIN 3\n\n#define JL_OPTIONS_COLOR_ON 1\n#define JL_OPTIONS_COLOR_OFF 2\n\n#define JL_OPTIONS_HISTORYFILE_ON 1\n#define JL_OPTIONS_HISTORYFILE_OFF 0\n\n#define JL_OPTIONS_STARTUPFILE_ON 1\n#define JL_OPTIONS_STARTUPFILE_OFF 2\n\n#define JL_OPTIONS_DEPWARN_OFF 0\n#define JL_OPTIONS_DEPWARN_ON 1\n#define JL_OPTIONS_DEPWARN_ERROR 2\n\n#define JL_OPTIONS_POLLY_ON 1\n#define JL_OPTIONS_POLLY_OFF 0\n\n#define JL_OPTIONS_FAST_MATH_ON 1\n#define JL_OPTIONS_FAST_MATH_OFF 2\n#define JL_OPTIONS_FAST_MATH_DEFAULT 0\n\n#define JL_OPTIONS_HANDLE_SIGNALS_ON 1\n#define JL_OPTIONS_HANDLE_SIGNALS_OFF 0\n\n#define JL_OPTIONS_USE_PRECOMPILED_YES 1\n#define JL_OPTIONS_USE_PRECOMPILED_NO 0\n\n#define JL_OPTIONS_USE_COMPILECACHE_YES 1\n#define JL_OPTIONS_USE_COMPILECACHE_NO 0\n\n// Version information\n#include <julia_version.h>\n\nJL_DLLEXPORT extern int jl_ver_major(void);\nJL_DLLEXPORT extern int jl_ver_minor(void);\nJL_DLLEXPORT extern int jl_ver_patch(void);\nJL_DLLEXPORT extern int jl_ver_is_release(void);\nJL_DLLEXPORT extern const char *jl_ver_string(void);\nJL_DLLEXPORT const char *jl_git_branch(void);\nJL_DLLEXPORT const char *jl_git_commit(void);\n\n// nullable struct representations\ntypedef struct {\n    uint8_t hasvalue;\n    double value;\n} jl_nullable_float64_t;\n\ntypedef struct {\n    uint8_t hasvalue;\n    float value;\n} jl_nullable_float32_t;\n\n#define jl_current_module (jl_get_ptls_states()->current_module)\n#define jl_current_task (jl_get_ptls_states()->current_task)\n#define jl_root_task (jl_get_ptls_states()->root_task)\n#define jl_exception_in_transit (jl_get_ptls_states()->exception_in_transit)\n\n\n// codegen interface ----------------------------------------------------------\n\ntypedef struct {\n    // to disable a hook: set to NULL or nothing\n\n    // module setup: prepare a module for code emission (data layout, DWARF version, ...)\n    // parameters: LLVMModuleRef as Ptr{Void}\n    // return value: none\n    jl_value_t *module_setup;\n\n    // module activation: registers debug info, adds module to JIT\n    // parameters: LLVMModuleRef as Ptr{Void}\n    // return value: none\n    jl_value_t *module_activation;\n\n    // exception raising: emit LLVM instructions to raise an exception\n    // parameters: LLVMBasicBlockRef as Ptr{Void}, LLVMValueRef as Ptr{Void}\n    // return value: none\n    jl_value_t *raise_exception;\n} jl_cghooks_t;\n\ntypedef struct {\n    int cached;             // can the compiler use/populate the compilation cache?\n\n    // language features (C-style integer booleans)\n    int runtime;            // can we call into the runtime?\n    int exceptions;         // are exceptions supported (requires runtime)?\n    int track_allocations;  // can we track allocations (don't if disallowed)?\n    int code_coverage;      // can we measure coverage (don't if disallowed)?\n    int static_alloc;       // is the compiler allowed to allocate statically?\n    int dynamic_alloc;      // is the compiler allowed to allocate dynamically (requires runtime)?\n\n    jl_cghooks_t hooks;\n} jl_cgparams_t;\nextern JL_DLLEXPORT jl_cgparams_t jl_default_cgparams;\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/src/julia_internal.h": "// This file is a part of Julia. License is MIT: https://julialang.org/license\n\n#ifndef JULIA_INTERNAL_H\n#define JULIA_INTERNAL_H\n\n#include <options.h>\n#include <uv.h>\n#if !defined(_MSC_VER) && !defined(__MINGW32__)\n#include <unistd.h>\n#include <sched.h>\n#else\n#define sleep(x) Sleep(1000*x)\n#endif\n\n#ifdef __has_builtin\n#  define jl_has_builtin(x) __has_builtin(x)\n#else\n#  define jl_has_builtin(x) 0\n#endif\n\n#if defined(__has_feature)\n#if __has_feature(address_sanitizer)\n#define JL_ASAN_ENABLED     // Clang flavor\n#endif\n#elif defined(__SANITIZE_ADDRESS__)\n#define JL_ASAN_ENABLED     // GCC flavor\n#endif\n\n#if defined(__has_feature)\n#if __has_feature(memory_sanitizer)\n#define JL_MSAN_ENABLED\n#endif\n#endif\n\n// Remove when C11 is required for C code.\n#ifndef static_assert\n#  ifndef __cplusplus\n// C11 should already have `static_assert` from `<assert.h>` so there's no need\n// to check C version.\n#    ifdef __GNUC__\n#      define static_assert _Static_assert\n#    else\n#      define static_assert(...)\n#    endif\n#  endif\n// For C++, C++11 or MSVC is required. Both provide `static_assert`.\n#endif\n\n#if jl_has_builtin(__builtin_assume)\nstatic inline void jl_assume_(int cond)\n{\n    __builtin_assume(cond);\n}\n#define jl_assume(cond) (__extension__ ({               \\\n                __typeof__(cond) cond_ = (cond);        \\\n                jl_assume_(!!(cond_));                  \\\n                cond;                                   \\\n            }))\n#elif defined(_COMPILER_GCC_)\nstatic inline void jl_assume_(int cond)\n{\n    if (!cond) {\n        __builtin_unreachable();\n    }\n}\n#define jl_assume(cond) (__extension__ ({               \\\n                __typeof__(cond) cond_ = (cond);        \\\n                jl_assume_(!!(cond_));                  \\\n                cond_;                                  \\\n            }))\n#elif defined(_COMPILER_INTEL_)\n#define jl_assume(cond) (__extension__ ({       \\\n                __assume(!!(cond));             \\\n                cond;                           \\\n            }))\n#elif defined(_COMPILER_MICROSOFT_) && defined(__cplusplus)\ntemplate<typename T>\nstatic inline T\njl_assume(T v)\n{\n    __assume(!!v);\n    return v;\n}\n#else\n#define jl_assume(cond) (cond)\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include \"timing.h\"\n\n#ifdef _COMPILER_MICROSOFT_\n#  define jl_return_address() ((uintptr_t)_ReturnAddress())\n#else\n#  define jl_return_address() ((uintptr_t)__builtin_return_address(0))\n#endif\n\nSTATIC_INLINE uint32_t jl_int32hash_fast(uint32_t a)\n{\n//    a = (a+0x7ed55d16) + (a<<12);\n//    a = (a^0xc761c23c) ^ (a>>19);\n//    a = (a+0x165667b1) + (a<<5);\n//    a = (a+0xd3a2646c) ^ (a<<9);\n//    a = (a+0xfd7046c5) + (a<<3);\n//    a = (a^0xb55a4f09) ^ (a>>16);\n    return a;  // identity hashing seems to work well enough here\n}\n\n#define GC_CLEAN  0 // freshly allocated\n#define GC_MARKED 1 // reachable and young\n#define GC_OLD    2 // if it is reachable it will be marked as old\n#define GC_OLD_MARKED (GC_OLD | GC_MARKED) // reachable and old\n\n// useful constants\nextern jl_methtable_t *jl_type_type_mt;\nJL_DLLEXPORT extern size_t jl_world_counter;\n\ntypedef void (*tracer_cb)(jl_value_t *tracee);\nvoid jl_call_tracer(tracer_cb callback, jl_value_t *tracee);\n\nextern size_t jl_page_size;\nextern jl_function_t *jl_typeinf_func;\nextern size_t jl_typeinf_world;\n\nJL_DLLEXPORT extern int jl_lineno;\nJL_DLLEXPORT extern const char *jl_filename;\n\nJL_DLLEXPORT jl_value_t *jl_gc_pool_alloc(jl_ptls_t ptls, int pool_offset,\n                                          int osize);\nJL_DLLEXPORT jl_value_t *jl_gc_big_alloc(jl_ptls_t ptls, size_t allocsz);\nint jl_gc_classify_pools(size_t sz, int *osize);\nextern jl_mutex_t gc_perm_lock;\nvoid *jl_gc_perm_alloc_nolock(size_t sz, int zero);\nvoid *jl_gc_perm_alloc(size_t sz, int zero);\n\n// pools are 16376 bytes large (GC_POOL_SZ - GC_PAGE_OFFSET)\nstatic const int jl_gc_sizeclasses[JL_GC_N_POOLS] = {\n#ifdef _P64\n    8,\n#elif defined(_CPU_ARM_) || defined(_CPU_PPC_) || defined(_CPU_X86_)\n    // ARM and PowerPC have max alignment of 8,\n    // make sure allocation of size 8 has that alignment.\n    // for x86 alignment is important for atomic ops and\n    // the corresponding platform ABI. Once we can use\n    // libatomic on Windows this is no longer necessary.\n    4, 8,\n#else\n    4, 8, 12,\n#endif\n\n    // 16 pools at 16-byte spacing\n    16, 32, 48, 64, 80, 96, 112, 128,\n    144, 160, 176, 192, 208, 224, 240, 256,\n\n    // the following tables are computed for maximum packing efficiency via the formula:\n    // sz=(div(2^14-8,rng)\u00f716)*16; hcat(sz, (2^14-8)\u00f7sz, 2^14-(2^14-8)\u00f7sz.*sz)'\n\n    // rng = 60:-4:32 (8 pools)\n    272, 288, 304, 336, 368, 400, 448, 496,\n//   60,  56,  53,  48,  44,  40,  36,  33, /pool\n//   64, 256, 272, 256, 192, 384, 256,  16, bytes lost\n\n    // rng = 30:-2:16 (8 pools)\n    544, 576, 624, 672, 736, 816, 896, 1008,\n//   30,  28,  26,  24,  22,  20,  18,  16, /pool\n//   64, 256, 160, 256, 192,  64, 256, 256, bytes lost\n\n    // rng = 15:-1:8 (8 pools)\n    1088, 1168, 1248, 1360, 1488, 1632, 1808, 2032\n//    15,   14,   13,   12,   11,   10,    9,    8, /pool\n//    64,   32,  160,   64,   16,   64,  112,  128, bytes lost\n};\n\nSTATIC_INLINE int jl_gc_alignment(size_t sz)\n{\n    if (sz == 0)\n        return sizeof(void*);\n#ifdef _P64\n    (void)sz;\n    return 16;\n#elif defined(_CPU_ARM_) || defined(_CPU_PPC_) || defined(_CPU_X86_)\n    return sz <= 4 ? 8 : 16;\n#else\n    // szclass 8\n    if (sz <= 4)\n        return 8;\n    // szclass 12\n    if (sz <= 8)\n        return 4;\n    // szclass 16+\n    return 16;\n#endif\n}\nJL_DLLEXPORT int jl_alignment(size_t sz);\n\nSTATIC_INLINE int JL_CONST_FUNC jl_gc_szclass(size_t sz)\n{\n#ifdef _P64\n    if (sz <=    8)\n        return 0;\n    const int N = 0;\n#elif defined(_CPU_ARM_) || defined(_CPU_PPC_) || defined(_CPU_X86_)\n    if (sz <=    8)\n        return (sz + 3) / 4 - 1;\n    const int N = 1;\n#else\n    if (sz <=   12)\n        return (sz + 3) / 4 - 1;\n    const int N = 2;\n#endif\n    if (sz <=  256)\n        return (sz + 15) / 16 + N;\n    if (sz <=  496)\n        return 16 - 16376 / 4 / LLT_ALIGN(sz, 16 * 4) + 16 + N;\n    if (sz <= 1008)\n        return 16 - 16376 / 2 / LLT_ALIGN(sz, 16 * 2) + 24 + N;\n    return     16 - 16376 / 1 / LLT_ALIGN(sz, 16 * 1) + 32 + N;\n}\n\n#ifdef __GNUC__\n#  define jl_is_constexpr(e) __builtin_constant_p(e)\n#else\n#  define jl_is_constexpr(e) (0)\n#endif\n#define JL_SMALL_BYTE_ALIGNMENT 16\n#define JL_CACHE_BYTE_ALIGNMENT 64\n// JL_HEAP_ALIGNMENT is the maximum alignment that the GC can provide\n#define JL_HEAP_ALIGNMENT JL_SMALL_BYTE_ALIGNMENT\n#define GC_MAX_SZCLASS (2032-sizeof(void*))\n\nSTATIC_INLINE jl_value_t *jl_gc_alloc_(jl_ptls_t ptls, size_t sz, void *ty)\n{\n    const size_t allocsz = sz + sizeof(jl_taggedvalue_t);\n    if (allocsz < sz) // overflow in adding offs, size was \"negative\"\n        jl_throw(jl_memory_exception);\n    jl_value_t *v;\n    if (allocsz <= GC_MAX_SZCLASS + sizeof(jl_taggedvalue_t)) {\n        int pool_id = jl_gc_szclass(allocsz);\n        jl_gc_pool_t *p = &ptls->heap.norm_pools[pool_id];\n        int osize;\n        if (jl_is_constexpr(allocsz)) {\n            osize = jl_gc_sizeclasses[pool_id];\n        }\n        else {\n            osize = p->osize;\n        }\n        v = jl_gc_pool_alloc(ptls, (char*)p - (char*)ptls, osize);\n    }\n    else {\n        v = jl_gc_big_alloc(ptls, allocsz);\n    }\n    jl_set_typeof(v, ty);\n    return v;\n}\nJL_DLLEXPORT jl_value_t *jl_gc_alloc(jl_ptls_t ptls, size_t sz, void *ty);\n// On GCC, only inline when sz is constant\n#ifdef __GNUC__\n#  define jl_gc_alloc(ptls, sz, ty)                             \\\n    (__builtin_constant_p(sz) ? jl_gc_alloc_(ptls, sz, ty) :    \\\n     (jl_gc_alloc)(ptls, sz, ty))\n#else\n#  define jl_gc_alloc(ptls, sz, ty) jl_gc_alloc_(ptls, sz, ty)\n#endif\n\n#define jl_buff_tag ((uintptr_t)0x4eade800)\nSTATIC_INLINE void *jl_gc_alloc_buf(jl_ptls_t ptls, size_t sz)\n{\n    return jl_gc_alloc(ptls, sz, (void*)jl_buff_tag);\n}\n\n// Returns a int32 where the high 16 bits are a lower bound of the number of non-pointer fields\n// at the beginning of the type and the low 16 bits are a lower bound on the number of non-pointer\n// fields at the end of the type. This field only exists for a layout that has at least one\n// pointer fields.\n#define jl_datatype_layout_n_nonptr(layout) ((uint32_t*)(layout))[-1]\n\njl_value_t *jl_gc_realloc_string(jl_value_t *s, size_t sz);\n\njl_code_info_t *jl_type_infer(jl_method_instance_t **li, size_t world, int force);\njl_generic_fptr_t jl_generate_fptr(jl_method_instance_t *li, void *F, size_t world);\njl_llvm_functions_t jl_compile_linfo(jl_method_instance_t **pli, jl_code_info_t *src, size_t world, const jl_cgparams_t *params);\njl_llvm_functions_t jl_compile_for_dispatch(jl_method_instance_t **li, size_t world);\nJL_DLLEXPORT int jl_compile_hint(jl_tupletype_t *types);\njl_code_info_t *jl_new_code_info_from_ast(jl_expr_t *ast);\njl_method_t *jl_new_method(jl_code_info_t *definition,\n                           jl_sym_t *name,\n                           jl_tupletype_t *sig,\n                           size_t nargs,\n                           int isva,\n                           jl_svec_t *tvars,\n                           int isstaged);\n\nSTATIC_INLINE jl_value_t *jl_compile_method_internal(jl_generic_fptr_t *fptr,\n                                                     jl_method_instance_t *meth)\n{\n    if (meth->jlcall_api == 2)\n        return jl_assume(meth->inferred_const);\n    fptr->fptr = meth->fptr;\n    fptr->jlcall_api = meth->jlcall_api;\n    if (__unlikely(fptr->fptr == NULL || fptr->jlcall_api == 0)) {\n        size_t world = jl_get_ptls_states()->world_age;\n        // first see if it likely needs to be compiled\n        void *F = meth->functionObjectsDecls.functionObject;\n        if (!F) // ask codegen to try to turn it into llvm code\n            F = jl_compile_for_dispatch(&meth, world).functionObject;\n        if (meth->jlcall_api == 2)\n            return jl_assume(meth->inferred_const);\n        // if it hasn't been inferred, try using the unspecialized meth cache instead\n        if (!meth->inferred) {\n            fptr->fptr = meth->unspecialized_ducttape;\n            fptr->jlcall_api = 1;\n            if (!fptr->fptr) {\n                if (meth->def && !meth->def->isstaged && meth->def->unspecialized) {\n                    fptr->fptr = meth->def->unspecialized->fptr;\n                    fptr->jlcall_api = meth->def->unspecialized->jlcall_api;\n                    if (fptr->jlcall_api == 2) {\n                        return jl_assume(meth->def->unspecialized->inferred_const);\n                    }\n                }\n            }\n        }\n        if (!fptr->fptr || fptr->jlcall_api == 0) {\n            // ask codegen to make the fptr\n            *fptr = jl_generate_fptr(meth, F, world);\n            if (fptr->jlcall_api == 2)\n                return jl_assume(meth->inferred_const);\n        }\n    }\n    return NULL;\n}\n\nSTATIC_INLINE jl_value_t *jl_call_fptr_internal(const jl_generic_fptr_t *fptr,\n                                                jl_method_instance_t *meth,\n                                                jl_value_t **args, uint32_t nargs)\n{\n    if (fptr->jlcall_api == 1)\n        return fptr->fptr1(args[0], &args[1], nargs-1);\n    else if (fptr->jlcall_api == 2)\n        return meth->inferred;\n    else if (fptr->jlcall_api == 3)\n        return fptr->fptr3(meth->sparam_vals, args[0], &args[1], nargs-1);\n    else if (fptr->jlcall_api == 4)\n        return fptr->fptr4(meth, &args[0], nargs, meth->sparam_vals);\n    else\n        abort();\n}\n\n// invoke (compiling if necessary) the jlcall function pointer for a method\nSTATIC_INLINE jl_value_t *jl_call_method_internal(jl_method_instance_t *meth, jl_value_t **args, uint32_t nargs)\n{\n    jl_generic_fptr_t fptr;\n    jl_value_t *v = jl_compile_method_internal(&fptr, meth);\n    if (v)\n        return v;\n    jl_assume(fptr.jlcall_api != 2);\n    return jl_call_fptr_internal(&fptr, meth, args, nargs);\n}\n\njl_tupletype_t *jl_argtype_with_function(jl_function_t *f, jl_tupletype_t *types);\n\nJL_DLLEXPORT jl_value_t *jl_apply_2va(jl_value_t *f, jl_value_t **args, uint32_t nargs);\n\nvoid jl_gc_setmark(jl_ptls_t ptls, jl_value_t *v);\nvoid jl_gc_sync_total_bytes(void);\nvoid jl_gc_track_malloced_array(jl_ptls_t ptls, jl_array_t *a);\nvoid jl_gc_count_allocd(size_t sz);\nvoid jl_gc_run_all_finalizers(jl_ptls_t ptls);\n\nvoid gc_queue_binding(jl_binding_t *bnd);\nvoid gc_setmark_buf(jl_ptls_t ptls, void *buf, uint8_t, size_t);\n\nSTATIC_INLINE void jl_gc_wb_binding(jl_binding_t *bnd, void *val) // val isa jl_value_t*\n{\n    if (__unlikely(jl_astaggedvalue(bnd)->bits.gc == 3 &&\n                   (jl_astaggedvalue(val)->bits.gc & 1) == 0))\n        gc_queue_binding(bnd);\n}\n\nSTATIC_INLINE void jl_gc_wb_buf(void *parent, void *bufptr, size_t minsz) // parent isa jl_value_t*\n{\n    // if parent is marked and buf is not\n    if (__unlikely(jl_astaggedvalue(parent)->bits.gc & 1)) {\n        jl_ptls_t ptls = jl_get_ptls_states();\n        gc_setmark_buf(ptls, bufptr, 3, minsz);\n    }\n}\n\nvoid gc_debug_print_status(void);\nvoid gc_debug_critical_error(void);\nvoid jl_print_gc_stats(JL_STREAM *s);\nvoid jl_gc_reset_alloc_count(void);\nint jl_assign_type_uid(void);\njl_value_t *jl_cache_type_(jl_datatype_t *type);\nvoid jl_resort_type_cache(jl_svec_t *c);\nint  jl_get_t_uid_ctr(void);\nvoid jl_set_t_uid_ctr(int i);\nuint32_t jl_get_gs_ctr(void);\nvoid jl_set_gs_ctr(uint32_t ctr);\n\nvoid JL_NORETURN jl_method_error_bare(jl_function_t *f, jl_value_t *args, size_t world);\nvoid JL_NORETURN jl_method_error(jl_function_t *f, jl_value_t **args, size_t na, size_t world);\njl_value_t *jl_get_exceptionf(jl_datatype_t *exception_type, const char *fmt, ...);\n\nJL_DLLEXPORT void jl_typeassert(jl_value_t *x, jl_value_t *t);\n\n#define JL_CALLABLE(name)                                               \\\n    JL_DLLEXPORT jl_value_t *name(jl_value_t *F, jl_value_t **args, uint32_t nargs)\n\nJL_CALLABLE(jl_f_tuple);\nJL_CALLABLE(jl_f_intrinsic_call);\nextern jl_function_t *jl_unprotect_stack_func;\nvoid jl_install_default_signal_handlers(void);\nvoid restore_signals(void);\nvoid jl_install_thread_signal_handler(jl_ptls_t ptls);\n\njl_fptr_t jl_get_builtin_fptr(jl_value_t *b);\n\nextern uv_loop_t *jl_io_loop;\n\nJL_DLLEXPORT void jl_uv_associate_julia_struct(uv_handle_t *handle,\n                                               jl_value_t *data);\nJL_DLLEXPORT int jl_uv_fs_result(uv_fs_t *f);\n\ntypedef struct _typeenv {\n    jl_tvar_t *var;\n    jl_value_t *val;\n    struct _typeenv *prev;\n} jl_typeenv_t;\n\nint jl_tuple_isa(jl_value_t **child, size_t cl, jl_datatype_t *pdt);\n\nint jl_has_intersect_type_not_kind(jl_value_t *t);\nint jl_subtype_invariant(jl_value_t *a, jl_value_t *b, int ta);\njl_datatype_t *jl_inst_concrete_tupletype_v(jl_value_t **p, size_t np);\njl_datatype_t *jl_inst_concrete_tupletype(jl_svec_t *p);\nJL_DLLEXPORT void jl_method_table_insert(jl_methtable_t *mt, jl_method_t *method, jl_tupletype_t *simpletype);\nvoid jl_mk_builtin_func(jl_datatype_t *dt, const char *name, jl_fptr_t fptr);\njl_value_t *jl_type_intersection_env_s(jl_value_t *a, jl_value_t *b, jl_svec_t **penv, int *issubty);\njl_value_t *jl_type_intersection_env(jl_value_t *a, jl_value_t *b, jl_svec_t **penv);\n// specificity comparison assuming !(a <: b) and !(b <: a)\nJL_DLLEXPORT int jl_type_morespecific_no_subtype(jl_value_t *a, jl_value_t *b);\njl_value_t *jl_instantiate_type_with(jl_value_t *t, jl_value_t **env, size_t n);\nJL_DLLEXPORT jl_value_t *jl_instantiate_type_in_env(jl_value_t *ty, jl_unionall_t *env, jl_value_t **vals);\njl_value_t *jl_substitute_var(jl_value_t *t, jl_tvar_t *var, jl_value_t *val);\njl_svec_t *jl_outer_unionall_vars(jl_value_t *u);\nint jl_count_union_components(jl_value_t *v);\njl_value_t *jl_nth_union_component(jl_value_t *v, int i);\njl_datatype_t *jl_new_uninitialized_datatype(void);\njl_datatype_t *jl_new_abstracttype(jl_value_t *name, jl_datatype_t *super,\n                                   jl_svec_t *parameters);\nvoid jl_precompute_memoized_dt(jl_datatype_t *dt);\njl_datatype_t *jl_wrap_Type(jl_value_t *t);  // x -> Type{x}\njl_value_t *jl_wrap_vararg(jl_value_t *t, jl_value_t *n);\nvoid jl_assign_bits(void *dest, jl_value_t *bits);\njl_expr_t *jl_exprn(jl_sym_t *head, size_t n);\njl_function_t *jl_new_generic_function(jl_sym_t *name, jl_module_t *module);\njl_function_t *jl_new_generic_function_with_supertype(jl_sym_t *name, jl_module_t *module, jl_datatype_t *st, int iskw);\njl_function_t *jl_module_call_func(jl_module_t *m);\nint jl_is_submodule(jl_module_t *child, jl_module_t *parent);\n\njl_value_t *jl_toplevel_eval_flex(jl_value_t *e, int fast, int expanded);\n\njl_code_info_t *jl_wrap_expr(jl_value_t *expr);\njl_value_t *jl_eval_global_var(jl_module_t *m, jl_sym_t *e);\njl_value_t *jl_parse_eval_all(const char *fname,\n                              const char *content, size_t contentlen);\njl_value_t *jl_interpret_toplevel_thunk(jl_code_info_t *src);\njl_value_t *jl_interpret_toplevel_expr(jl_value_t *e);\njl_value_t *jl_interpret_toplevel_expr_in(jl_module_t *m, jl_value_t *e,\n                                          jl_code_info_t *src,\n                                          jl_svec_t *sparam_vals);\nint jl_is_toplevel_only_expr(jl_value_t *e);\njl_value_t *jl_call_scm_on_ast(const char *funcname, jl_value_t *expr);\n\njl_method_instance_t *jl_method_lookup_by_type(jl_methtable_t *mt, jl_tupletype_t *types,\n                                               int cache, int inexact, int allow_exec, size_t world);\njl_method_instance_t *jl_method_lookup(jl_methtable_t *mt, jl_value_t **args, size_t nargs, int cache, size_t world);\njl_value_t *jl_gf_invoke(jl_tupletype_t *types, jl_value_t **args, size_t nargs);\njl_method_instance_t *jl_lookup_generic(jl_value_t **args, uint32_t nargs, uint32_t callsite, size_t world);\nJL_DLLEXPORT jl_value_t *jl_matching_methods(jl_tupletype_t *types, int lim, int include_ambiguous,\n                                             size_t world, size_t *min_valid, size_t *max_valid);\n\nJL_DLLEXPORT jl_datatype_t *jl_first_argument_datatype(jl_value_t *argtypes);\njl_datatype_t *jl_argument_datatype(jl_value_t *argt);\n\njl_value_t *jl_nth_slot_type(jl_value_t *sig, size_t i);\nvoid jl_compute_field_offsets(jl_datatype_t *st);\njl_array_t *jl_new_array_for_deserialization(jl_value_t *atype, uint32_t ndims, size_t *dims,\n                                             int isunboxed, int elsz);\nvoid jl_module_run_initializer(jl_module_t *m);\nextern jl_array_t *jl_module_init_order;\nextern union jl_typemap_t jl_cfunction_list;\n\n#ifdef JL_USE_INTEL_JITEVENTS\nextern char jl_using_intel_jitevents;\n#endif\n#ifdef JL_USE_OPROFILE_JITEVENTS\nextern char jl_using_oprofile_jitevents;\n#endif\nextern size_t jl_arr_xtralloc_limit;\n\nvoid jl_init_types(void);\nvoid jl_init_box_caches(void);\nvoid jl_init_frontend(void);\nvoid jl_init_primitives(void);\nvoid jl_init_codegen(void);\nvoid jl_init_intrinsic_functions(void);\nvoid jl_init_intrinsic_properties(void);\nvoid jl_init_tasks(void);\nvoid jl_init_stack_limits(int ismaster);\nvoid jl_init_root_task(void *stack, size_t ssize);\nvoid jl_init_serializer(void);\nvoid jl_gc_init(void);\nvoid jl_init_signal_async(void);\nvoid jl_init_debuginfo(void);\nvoid jl_init_runtime_ccall(void);\nvoid jl_mk_thread_heap(jl_ptls_t ptls);\n\nvoid _julia_init(JL_IMAGE_SEARCH rel);\n\nvoid jl_set_base_ctx(char *__stk);\n\nextern ssize_t jl_tls_offset;\nvoid jl_init_threading(void);\nvoid jl_start_threads(void);\nvoid jl_shutdown_threading(void);\n\n// Whether the GC is running\nextern char *jl_safepoint_pages;\nSTATIC_INLINE int jl_addr_is_safepoint(uintptr_t addr)\n{\n    uintptr_t safepoint_addr = (uintptr_t)jl_safepoint_pages;\n    return addr >= safepoint_addr && addr < safepoint_addr + jl_page_size * 3;\n}\nextern volatile uint32_t jl_gc_running;\n// All the functions are safe to be called from within a signal handler\n// provided that the thread will not be interrupted by another asynchronous\n// signal.\n// Initialize the safepoint\nvoid jl_safepoint_init(void);\n// Start the GC, return `1` if the thread should be running the GC.\n// Otherwise, the thread will wait in this function until the GC finishes on\n// another thread and return `0`.\n// The caller should have saved the `gc_state` and set it to `WAITING`\n// before calling this function. If the calling thread is to run the GC,\n// it should also wait for the mutator threads to hit a safepoint **AFTER**\n// this function returns\nint jl_safepoint_start_gc(void);\n// Can only be called by the thread that have got a `1` return value from\n// `jl_safepoint_start_gc()`. This disables the safepoint (for GC,\n// the `mprotect` may not be removed if there's pending SIGINT) and wake\n// up waiting threads if there's any.\n// The caller should restore `gc_state` **AFTER** calling this function.\nvoid jl_safepoint_end_gc(void);\n// Wait for the GC to finish\n// This function does **NOT** modify the `gc_state` to inform the GC thread\n// The caller should set it **BEFORE** calling this function.\nvoid jl_safepoint_wait_gc(void);\n\n// Set pending sigint and enable the mechanisms to deliver the sigint.\nvoid jl_safepoint_enable_sigint(void);\n// If the safepoint is enabled to deliver sigint, disable it\n// so that the thread won't repeatedly trigger it in a sigatomic region\n// while not being able to actually throw the exception.\nvoid jl_safepoint_defer_sigint(void);\n// Clear the sigint pending flag and disable the mechanism to deliver sigint.\n// Return `1` if the sigint should be delivered and `0` if there's no sigint\n// to be delivered.\nint jl_safepoint_consume_sigint(void);\nvoid jl_wake_libuv(void);\n\n#ifdef JULIA_ENABLE_THREADING\njl_get_ptls_states_func jl_get_ptls_states_getter(void);\nstatic inline void jl_set_gc_and_wait(void)\n{\n    jl_ptls_t ptls = jl_get_ptls_states();\n    // reading own gc state doesn't need atomic ops since no one else\n    // should store to it.\n    int8_t state = jl_gc_state(ptls);\n    jl_atomic_store_release(&ptls->gc_state, JL_GC_STATE_WAITING);\n    jl_safepoint_wait_gc();\n    jl_atomic_store_release(&ptls->gc_state, state);\n}\n#endif\n\nvoid jl_dump_native(const char *bc_fname, const char *obj_fname, const char *sysimg_data, size_t sysimg_len);\nint32_t jl_get_llvm_gv(jl_value_t *p);\nint32_t jl_assign_functionID(/*llvm::Function*/void *function);\nint32_t jl_jlcall_api(/*llvm::Function*/const void *function);\n// the first argument to jl_idtable_rehash is used to return a value\n// make sure it is rooted if it is used after the function returns\nJL_DLLEXPORT jl_array_t *jl_idtable_rehash(jl_array_t *a, size_t newsz);\n\nJL_DLLEXPORT jl_methtable_t *jl_new_method_table(jl_sym_t *name, jl_module_t *module);\njl_method_instance_t *jl_get_specialization1(jl_tupletype_t *types, size_t world);\nJL_DLLEXPORT int jl_has_call_ambiguities(jl_tupletype_t *types, jl_method_t *m);\njl_method_instance_t *jl_get_specialized(jl_method_t *m, jl_value_t *types, jl_svec_t *sp);\nint jl_is_rettype_inferred(jl_method_instance_t *li);\nJL_DLLEXPORT jl_value_t *jl_methtable_lookup(jl_methtable_t *mt, jl_tupletype_t *type, size_t world);\nJL_DLLEXPORT jl_method_instance_t *jl_specializations_get_linfo(jl_method_t *m, jl_value_t *type, jl_svec_t *sparams, size_t world);\nJL_DLLEXPORT void jl_method_instance_add_backedge(jl_method_instance_t *callee, jl_method_instance_t *caller);\nJL_DLLEXPORT void jl_method_table_add_backedge(jl_methtable_t *mt, jl_value_t *typ, jl_value_t *caller);\n\nuint32_t jl_module_next_counter(jl_module_t *m);\nvoid jl_fptr_to_llvm(jl_fptr_t fptr, jl_method_instance_t *lam, int specsig);\njl_tupletype_t *arg_type_tuple(jl_value_t **args, size_t nargs);\n\nint jl_has_meta(jl_array_t *body, jl_sym_t *sym);\n\n// backtraces\ntypedef struct {\n    char *func_name;\n    char *file_name;\n    int line;\n    jl_method_instance_t *linfo;\n    int fromC;\n    int inlined;\n} jl_frame_t;\n\n// Might be called from unmanaged thread\nuint64_t jl_getUnwindInfo(uint64_t dwBase);\n#ifdef _OS_WINDOWS_\n#include <dbghelp.h>\nJL_DLLEXPORT EXCEPTION_DISPOSITION __julia_personality(\n        PEXCEPTION_RECORD ExceptionRecord, void *EstablisherFrame, PCONTEXT ContextRecord, void *DispatcherContext);\nextern HANDLE hMainThread;\ntypedef CONTEXT bt_context_t;\n#if defined(_CPU_X86_64_)\ntypedef CONTEXT bt_cursor_t;\n#else\ntypedef struct {\n    STACKFRAME64 stackframe;\n    CONTEXT context;\n} bt_cursor_t;\n#endif\nextern volatile int jl_in_stackwalk;\n#else\n// This gives unwind only local unwinding options ==> faster code\n#  define UNW_LOCAL_ONLY\n#  include <libunwind.h>\ntypedef unw_context_t bt_context_t;\ntypedef unw_cursor_t bt_cursor_t;\n#  if (!defined(SYSTEM_LIBUNWIND) || UNW_VERSION_MAJOR > 1 ||   \\\n       (UNW_VERSION_MAJOR == 1 && UNW_VERSION_MINOR > 1))\n// Enable our memory manager only for libunwind with our patch or\n// on a newer release\n#    define JL_UNW_HAS_FORMAT_IP 1\n#  endif\n#endif\nsize_t rec_backtrace(uintptr_t *data, size_t maxsize);\nsize_t rec_backtrace_ctx(uintptr_t *data, size_t maxsize, bt_context_t *ctx);\n#ifdef LIBOSXUNWIND\nsize_t rec_backtrace_ctx_dwarf(uintptr_t *data, size_t maxsize, bt_context_t *ctx);\n#endif\nJL_DLLEXPORT jl_value_t *jl_get_backtrace(void);\nJL_DLLEXPORT jl_value_t *jl_apply_with_saved_exception_state(jl_value_t **args, uint32_t nargs, int catch_exceptions);\nvoid jl_critical_error(int sig, bt_context_t *context, uintptr_t *bt_data, size_t *bt_size);\nJL_DLLEXPORT void jl_raise_debugger(void);\nint jl_getFunctionInfo(jl_frame_t **frames, uintptr_t pointer, int skipC, int noInline);\nJL_DLLEXPORT void jl_gdblookup(uintptr_t ip);\n// *to is NULL or malloc'd pointer, from is allowed to be NULL\nSTATIC_INLINE char *jl_copy_str(char **to, const char *from)\n{\n    if (!from) {\n        free(*to);\n        *to = NULL;\n        return NULL;\n    }\n    size_t len = strlen(from) + 1;\n    *to = (char*)realloc(*to, len);\n    memcpy(*to, from, len);\n    return *to;\n}\n\n// timers\n// Returns time in nanosec\nJL_DLLEXPORT uint64_t jl_hrtime(void);\n\n// libuv stuff:\nJL_DLLEXPORT extern void *jl_dl_handle;\nJL_DLLEXPORT extern void *jl_RTLD_DEFAULT_handle;\n#if defined(_OS_WINDOWS_)\nJL_DLLEXPORT extern void *jl_exe_handle;\nextern void *jl_ntdll_handle;\nextern void *jl_kernel32_handle;\nextern void *jl_crtdll_handle;\nextern void *jl_winsock_handle;\n#endif\n\nvoid *jl_get_library(const char *f_lib);\nJL_DLLEXPORT void *jl_load_and_lookup(const char *f_lib, const char *f_name,\n                                      void **hnd);\n// Windows only\n#define JL_EXE_LIBNAME ((const char*)1)\n#define JL_DL_LIBNAME ((const char*)2)\nconst char *jl_dlfind_win32(const char *name);\nvoid *jl_dlopen_soname(const char *pfx, size_t n, unsigned flags);\n\n// libuv wrappers:\nJL_DLLEXPORT int jl_fs_rename(const char *src_path, const char *dst_path);\n\n#if defined(_CPU_X86_) || defined(_CPU_X86_64_)\n#define HAVE_CPUID\n#endif\n\n#ifdef SEGV_EXCEPTION\nextern JL_DLLEXPORT jl_value_t *jl_segv_exception;\n#endif\n\n// -- Runtime intrinsics -- //\nJL_DLLEXPORT const char *jl_intrinsic_name(int f);\nunsigned jl_intrinsic_nargs(int f);\n\nJL_DLLEXPORT jl_value_t *jl_bitcast(jl_value_t *ty, jl_value_t *v);\nJL_DLLEXPORT jl_value_t *jl_pointerref(jl_value_t *p, jl_value_t *i, jl_value_t *align);\nJL_DLLEXPORT jl_value_t *jl_pointerset(jl_value_t *p, jl_value_t *x, jl_value_t *align, jl_value_t *i);\nJL_DLLEXPORT jl_value_t *jl_cglobal(jl_value_t *v, jl_value_t *ty);\nJL_DLLEXPORT jl_value_t *jl_cglobal_auto(jl_value_t *v);\n\nJL_DLLEXPORT jl_value_t *jl_neg_int(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_add_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_sub_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_mul_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_sdiv_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_udiv_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_srem_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_urem_int(jl_value_t *a, jl_value_t *b);\n\nJL_DLLEXPORT jl_value_t *jl_neg_float(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_add_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_sub_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_mul_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_div_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_rem_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_fma_float(jl_value_t *a, jl_value_t *b, jl_value_t *c);\nJL_DLLEXPORT jl_value_t *jl_muladd_float(jl_value_t *a, jl_value_t *b, jl_value_t *c);\n\nJL_DLLEXPORT jl_value_t *jl_eq_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_ne_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_slt_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_ult_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_sle_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_ule_int(jl_value_t *a, jl_value_t *b);\n\nJL_DLLEXPORT jl_value_t *jl_eq_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_ne_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_lt_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_le_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_fpiseq(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_fpislt(jl_value_t *a, jl_value_t *b);\n\nJL_DLLEXPORT jl_value_t *jl_not_int(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_and_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_or_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_xor_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_shl_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_lshr_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_ashr_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_bswap_int(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_ctpop_int(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_ctlz_int(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_cttz_int(jl_value_t *a);\n\nJL_DLLEXPORT jl_value_t *jl_sext_int(jl_value_t *ty, jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_zext_int(jl_value_t *ty, jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_trunc_int(jl_value_t *ty, jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_sitofp(jl_value_t *ty, jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_uitofp(jl_value_t *ty, jl_value_t *a);\n\nJL_DLLEXPORT jl_value_t *jl_fptoui(jl_value_t *ty, jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_fptosi(jl_value_t *ty, jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_fptrunc(jl_value_t *ty, jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_fpext(jl_value_t *ty, jl_value_t *a);\n\nJL_DLLEXPORT jl_value_t *jl_checked_trunc_sint(jl_value_t *ty, jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_checked_trunc_uint(jl_value_t *ty, jl_value_t *a);\n\nJL_DLLEXPORT jl_value_t *jl_check_top_bit(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_checked_sadd_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_checked_uadd_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_checked_ssub_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_checked_usub_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_checked_smul_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_checked_umul_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_checked_sdiv_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_checked_udiv_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_checked_srem_int(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_checked_urem_int(jl_value_t *a, jl_value_t *b);\n\nJL_DLLEXPORT jl_value_t *jl_ceil_llvm(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_floor_llvm(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_trunc_llvm(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_rint_llvm(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_sqrt_llvm(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_abs_float(jl_value_t *a);\nJL_DLLEXPORT jl_value_t *jl_copysign_float(jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_flipsign_int(jl_value_t *a, jl_value_t *b);\n\nJL_DLLEXPORT jl_value_t *jl_select_value(jl_value_t *isfalse, jl_value_t *a, jl_value_t *b);\nJL_DLLEXPORT jl_value_t *jl_arraylen(jl_value_t *a);\nint jl_array_store_unboxed(jl_value_t *el_type);\nint jl_array_isdefined(jl_value_t **args, int nargs);\nJL_DLLEXPORT jl_value_t *(jl_array_data_owner)(jl_array_t *a);\nJL_DLLEXPORT int jl_array_isassigned(jl_array_t *a, size_t i);\n\n// -- synchronization utilities -- //\n\nextern jl_mutex_t typecache_lock;\nextern jl_mutex_t codegen_lock;\nextern jl_mutex_t safepoint_lock;\n\n// -- gc.c -- //\n\n#if defined(__APPLE__) && defined(JULIA_ENABLE_THREADING)\nvoid jl_mach_gc_end(void);\n#endif\n\n#if defined(_OS_WINDOWS_)\nSTATIC_INLINE void *jl_malloc_aligned(size_t sz, size_t align)\n{\n    return _aligned_malloc(sz ? sz : 1, align);\n}\nSTATIC_INLINE void *jl_realloc_aligned(void *p, size_t sz, size_t oldsz,\n                                       size_t align)\n{\n    (void)oldsz;\n    return _aligned_realloc(p, sz ? sz : 1, align);\n}\nSTATIC_INLINE void jl_free_aligned(void *p)\n{\n    _aligned_free(p);\n}\n#else\nSTATIC_INLINE void *jl_malloc_aligned(size_t sz, size_t align)\n{\n#if defined(_P64) || defined(__APPLE__)\n    if (align <= 16)\n        return malloc(sz);\n#endif\n    void *ptr;\n    if (posix_memalign(&ptr, align, sz))\n        return NULL;\n    return ptr;\n}\nSTATIC_INLINE void *jl_realloc_aligned(void *d, size_t sz, size_t oldsz,\n                                       size_t align)\n{\n#if defined(_P64) || defined(__APPLE__)\n    if (align <= 16)\n        return realloc(d, sz);\n#endif\n    void *b = jl_malloc_aligned(sz, align);\n    if (b != NULL) {\n        memcpy(b, d, oldsz > sz ? sz : oldsz);\n        free(d);\n    }\n    return b;\n}\nSTATIC_INLINE void jl_free_aligned(void *p)\n{\n    free(p);\n}\n#endif\n\n// -- typemap.c -- //\n\n// a descriptor of a jl_typemap_t that gets\n// passed around as self-documentation of the parameters of the type\nstruct jl_typemap_info {\n    int8_t unsorted; // whether this should be unsorted\n    jl_datatype_t **jl_contains; // the type that is being put in this\n};\n\njl_typemap_entry_t *jl_typemap_insert(union jl_typemap_t *cache, jl_value_t *parent,\n                                      jl_tupletype_t *type,\n                                      jl_tupletype_t *simpletype, jl_svec_t *guardsigs,\n                                      jl_value_t *newvalue, int8_t offs,\n                                      const struct jl_typemap_info *tparams,\n                                      size_t min_world, size_t max_world,\n                                      jl_value_t **overwritten);\n\njl_typemap_entry_t *jl_typemap_assoc_by_type(union jl_typemap_t ml_or_cache, jl_tupletype_t *types, jl_svec_t **penv,\n        int8_t inexact, int8_t subtype, int8_t offs, size_t world);\nstatic jl_typemap_entry_t *const INEXACT_ENTRY = (jl_typemap_entry_t*)(uintptr_t)-1;\njl_typemap_entry_t *jl_typemap_level_assoc_exact(jl_typemap_level_t *cache, jl_value_t **args, size_t n, int8_t offs, size_t world);\njl_typemap_entry_t *jl_typemap_entry_assoc_exact(jl_typemap_entry_t *mn, jl_value_t **args, size_t n, size_t world);\nSTATIC_INLINE jl_typemap_entry_t *jl_typemap_assoc_exact(union jl_typemap_t ml_or_cache, jl_value_t **args, size_t n, int8_t offs, size_t world)\n{\n    // NOTE: This function is a huge performance hot spot!!\n    if (jl_typeof(ml_or_cache.unknown) == (jl_value_t*)jl_typemap_entry_type) {\n        return jl_typemap_entry_assoc_exact(ml_or_cache.leaf, args, n, world);\n    }\n    else if (jl_typeof(ml_or_cache.unknown) == (jl_value_t*)jl_typemap_level_type) {\n        return jl_typemap_level_assoc_exact(ml_or_cache.node, args, n, offs, world);\n    }\n    return NULL;\n}\n\ntypedef int (*jl_typemap_visitor_fptr)(jl_typemap_entry_t *l, void *closure);\nint jl_typemap_visitor(union jl_typemap_t a, jl_typemap_visitor_fptr fptr, void *closure);\n\nstruct typemap_intersection_env;\ntypedef int (*jl_typemap_intersection_visitor_fptr)(jl_typemap_entry_t *l, struct typemap_intersection_env *closure);\nstruct typemap_intersection_env {\n    // input values\n    jl_typemap_intersection_visitor_fptr fptr; // fptr to call on a match\n    jl_value_t *type; // type to match\n    jl_value_t *va; // the tparam0 for the vararg in type, if applicable (or NULL)\n    // output values\n    jl_value_t *ti; // intersection type\n    jl_svec_t *env; // intersection env (initialize to null to perform intersection without an environment)\n    int issubty;    // if `a <: b` is true in `intersect(a,b)`\n};\nint jl_typemap_intersection_visitor(union jl_typemap_t a, int offs, struct typemap_intersection_env *closure);\n\nunsigned jl_special_vector_alignment(size_t nfields, jl_value_t *field_type);\n\nvoid register_eh_frames(uint8_t *Addr, size_t Size);\nvoid deregister_eh_frames(uint8_t *Addr, size_t Size);\n\nSTATIC_INLINE void *jl_get_frame_addr(void)\n{\n#ifdef __GNUC__\n    return __builtin_frame_address(0);\n#else\n    void *dummy = NULL;\n    // The mask is to suppress the compiler warning about returning\n    // address of local variable\n    return (void*)((uintptr_t)&dummy & ~(uintptr_t)15);\n#endif\n}\n\nJL_DLLEXPORT jl_array_t *jl_array_cconvert_cstring(jl_array_t *a);\nvoid jl_depwarn(const char *msg, jl_value_t *sym);\nvoid jl_depwarn_partial_indexing(size_t n);\n\nint isabspath(const char *in);\n\nextern jl_sym_t *call_sym;    extern jl_sym_t *invoke_sym;\nextern jl_sym_t *empty_sym;   extern jl_sym_t *body_sym;\nextern jl_sym_t *dots_sym;    extern jl_sym_t *vararg_sym;\nextern jl_sym_t *quote_sym;   extern jl_sym_t *newvar_sym;\nextern jl_sym_t *top_sym;     extern jl_sym_t *dot_sym;\nextern jl_sym_t *line_sym;    extern jl_sym_t *toplevel_sym;\nextern jl_sym_t *core_sym;    extern jl_sym_t *globalref_sym;\nextern jl_sym_t *error_sym;   extern jl_sym_t *amp_sym;\nextern jl_sym_t *module_sym;  extern jl_sym_t *colons_sym;\nextern jl_sym_t *export_sym;  extern jl_sym_t *import_sym;\nextern jl_sym_t *importall_sym; extern jl_sym_t *using_sym;\nextern jl_sym_t *goto_sym;    extern jl_sym_t *goto_ifnot_sym;\nextern jl_sym_t *label_sym;   extern jl_sym_t *return_sym;\nextern jl_sym_t *lambda_sym;  extern jl_sym_t *assign_sym;\nextern jl_sym_t *method_sym;  extern jl_sym_t *slot_sym;\nextern jl_sym_t *enter_sym;   extern jl_sym_t *leave_sym;\nextern jl_sym_t *exc_sym;     extern jl_sym_t *new_sym;\nextern jl_sym_t *compiler_temp_sym; extern jl_sym_t *foreigncall_sym;\nextern jl_sym_t *const_sym;   extern jl_sym_t *thunk_sym;\nextern jl_sym_t *anonymous_sym;  extern jl_sym_t *underscore_sym;\nextern jl_sym_t *abstracttype_sym; extern jl_sym_t *bitstype_sym;\nextern jl_sym_t *compositetype_sym;\nextern jl_sym_t *global_sym; extern jl_sym_t *unused_sym;\nextern jl_sym_t *boundscheck_sym; extern jl_sym_t *inbounds_sym;\nextern jl_sym_t *copyast_sym; extern jl_sym_t *fastmath_sym;\nextern jl_sym_t *pure_sym; extern jl_sym_t *simdloop_sym;\nextern jl_sym_t *meta_sym; extern jl_sym_t *list_sym;\nextern jl_sym_t *inert_sym; extern jl_sym_t *static_parameter_sym;\nextern jl_sym_t *polly_sym; extern jl_sym_t *inline_sym;\nextern jl_sym_t *propagate_inbounds_sym;\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/src/ccall.cpp": "// This file is a part of Julia. License is MIT: https://julialang.org/license\n\n// --- the ccall, cglobal, and llvm intrinsics ---\n\n// Map from symbol name (in a certain library) to its GV in sysimg and the\n// DL handle address in the current session.\ntypedef StringMap<std::pair<GlobalVariable*,void*>> SymMapGV;\nstatic StringMap<std::pair<GlobalVariable*,SymMapGV>> libMapGV;\n#ifdef _OS_WINDOWS_\nstatic SymMapGV symMapExe;\nstatic SymMapGV symMapDl;\n#endif\nstatic SymMapGV symMapDefault;\n\ntemplate<typename Func>\nstruct LazyModule {\n    Func func;\n    Module *m;\n    template<typename Func2>\n    LazyModule(Func2 &&func)\n        : func(std::forward<Func2>(func)),\n          m(nullptr)\n    {}\n    Module *get()\n    {\n        if (!m)\n            m = func();\n        return m;\n    }\n    Module &operator*()\n    {\n        return *get();\n    }\n};\n\ntemplate<typename Func>\nstatic LazyModule<typename std::remove_reference<Func>::type>\nlazyModule(Func &&func)\n{\n    return LazyModule<typename std::remove_reference<Func>::type>(\n        std::forward<Func>(func));\n}\n\n// Find or create the GVs for the library and symbol lookup.\n// Return `runtime_lib` (whether the library name is a string)\n// Optionally return the symbol address in the current session\n// when `symaddr != nullptr`.\n// The `lib` and `sym` GV returned may not be in the current module.\ntemplate<typename MT>\nstatic bool runtime_sym_gvs(const char *f_lib, const char *f_name, MT &&M,\n                            GlobalVariable *&lib, GlobalVariable *&sym,\n                            void **symaddr=nullptr)\n{\n    void *libsym = NULL;\n    bool runtime_lib = false;\n    GlobalVariable *libptrgv;\n    SymMapGV *symMap;\n#ifdef _OS_WINDOWS_\n    if ((intptr_t)f_lib == 1) {\n        libptrgv = jlexe_var;\n        libsym = jl_exe_handle;\n        symMap = &symMapExe;\n    }\n    else if ((intptr_t)f_lib == 2) {\n        libptrgv = jldll_var;\n        libsym = jl_dl_handle;\n        symMap = &symMapDl;\n    }\n    else\n#endif\n    if (f_lib == NULL) {\n        libptrgv = jlRTLD_DEFAULT_var;\n        libsym = jl_RTLD_DEFAULT_handle;\n        symMap = &symMapDefault;\n    }\n    else {\n        std::string name = \"ccalllib_\";\n        name += f_lib;\n        runtime_lib = true;\n        auto iter = libMapGV.find(f_lib);\n        if (iter == libMapGV.end()) {\n            libptrgv = new GlobalVariable(*M, T_pint8, false,\n                                          GlobalVariable::ExternalLinkage,\n                                          NULL, name);\n            auto &libgv = libMapGV[f_lib];\n            libgv = std::make_pair(global_proto(libptrgv), SymMapGV());\n            symMap = &libgv.second;\n            libsym = jl_get_library(f_lib);\n            assert(libsym != NULL);\n            *(void**)jl_emit_and_add_to_shadow(libptrgv) = libsym;\n        }\n        else {\n            libptrgv = iter->second.first;\n            symMap = &iter->second.second;\n        }\n    }\n    if (libsym == NULL) {\n        libsym = *(void**)jl_get_global(libptrgv);\n    }\n    assert(libsym != NULL);\n\n    GlobalVariable *llvmgv;\n    auto sym_iter = symMap->find(f_name);\n    if (sym_iter == symMap->end()) {\n        // MCJIT forces this to have external linkage eventually, so we would clobber\n        // the symbol of the actual function.\n        std::string name = \"ccall_\";\n        name += f_name;\n        name += \"_\";\n        name += std::to_string(globalUnique++);\n        llvmgv = new GlobalVariable(*M, T_pvoidfunc, false,\n                                    GlobalVariable::ExternalLinkage, NULL, name);\n        llvmgv = global_proto(llvmgv);\n        void *addr = jl_dlsym_e(libsym, f_name);\n        (*symMap)[f_name] = std::make_pair(llvmgv, addr);\n        if (symaddr)\n            *symaddr = addr;\n        *(void**)jl_emit_and_add_to_shadow(llvmgv) = addr;\n    }\n    else {\n        if (symaddr)\n            *symaddr = sym_iter->second.second;\n        llvmgv = sym_iter->second.first;\n    }\n\n    lib = libptrgv;\n    sym = llvmgv;\n    return runtime_lib;\n}\n\nstatic Value *runtime_sym_lookup(PointerType *funcptype, const char *f_lib,\n                                 const char *f_name, Function *f,\n                                 GlobalVariable *libptrgv,\n                                 GlobalVariable *llvmgv, bool runtime_lib)\n{\n    // in pseudo-code, this function emits the following:\n    //   global HMODULE *libptrgv\n    //   global void **llvmgv\n    //   if (*llvmgv == NULL) {\n    //       *llvmgv = jl_load_and_lookup(f_lib, f_name, libptrgv);\n    //   }\n    //   return (*llvmgv)\n    BasicBlock *enter_bb = builder.GetInsertBlock();\n    BasicBlock *dlsym_lookup = BasicBlock::Create(jl_LLVMContext, \"dlsym\");\n    BasicBlock *ccall_bb = BasicBlock::Create(jl_LLVMContext, \"ccall\");\n    Constant *initnul = ConstantPointerNull::get((PointerType*)T_pvoidfunc);\n    LoadInst *llvmf_orig = builder.CreateAlignedLoad(llvmgv, sizeof(void*));\n    // This in principle needs a consume ordering so that load from\n    // this pointer sees a valid value. However, this is not supported by\n    // LLVM (or agreed on in the C/C++ standard FWIW) and should be\n    // almost impossible to happen on every platform we support since this\n    // ordering is enforced by the hardware and LLVM has to speculate an\n    // invalid load from the `cglobal` but doesn't depend on the `cglobal`\n    // value for this to happen.\n    // llvmf_orig->setAtomic(AtomicOrdering::Consume);\n    builder.CreateCondBr(builder.CreateICmpNE(llvmf_orig, initnul),\n                         ccall_bb, dlsym_lookup);\n\n    assert(f->getParent() != NULL);\n    f->getBasicBlockList().push_back(dlsym_lookup);\n    builder.SetInsertPoint(dlsym_lookup);\n    Value *libname;\n    if (runtime_lib) {\n        libname = stringConstPtr(builder, f_lib);\n    }\n    else {\n        libname = literal_static_pointer_val(f_lib, T_pint8);\n    }\n#if JL_LLVM_VERSION >= 30700\n    Value *llvmf = builder.CreateCall(prepare_call(builder, jldlsym_func), { libname, stringConstPtr(builder, f_name), libptrgv });\n#else\n    Value *llvmf = builder.CreateCall3(prepare_call(builder, jldlsym_func), libname, stringConstPtr(builder, f_name), libptrgv);\n#endif\n    auto store = builder.CreateAlignedStore(llvmf, llvmgv, sizeof(void*));\n#  if JL_LLVM_VERSION >= 30900\n    store->setAtomic(AtomicOrdering::Release);\n#  else\n    store->setAtomic(Release);\n#  endif\n    builder.CreateBr(ccall_bb);\n\n    f->getBasicBlockList().push_back(ccall_bb);\n    builder.SetInsertPoint(ccall_bb);\n    PHINode *p = builder.CreatePHI(T_pvoidfunc, 2);\n    p->addIncoming(llvmf_orig, enter_bb);\n    p->addIncoming(llvmf, dlsym_lookup);\n    return builder.CreatePointerCast(p, funcptype);\n}\n\nstatic Value *runtime_sym_lookup(PointerType *funcptype, const char *f_lib,\n                                 const char *f_name, Function *f)\n{\n    GlobalVariable *libptrgv;\n    GlobalVariable *llvmgv;\n    bool runtime_lib = runtime_sym_gvs(f_lib, f_name, f->getParent(),\n                                       libptrgv, llvmgv);\n    libptrgv = prepare_global(libptrgv);\n    llvmgv = prepare_global(llvmgv);\n    return runtime_sym_lookup(funcptype, f_lib, f_name, f, libptrgv, llvmgv,\n                              runtime_lib);\n}\n\n// Map from distinct callee's to its GOT entry.\n// In principle the attribute, function type and calling convention\n// don't need to be part of the key but it seems impossible to forward\n// all the arguments without writing assembly directly.\n// This doesn't matter too much in reality since a single function is usually\n// not called with multiple signatures.\n#if JL_LLVM_VERSION >= 50000\nstatic DenseMap<AttributeList,\n#else\nstatic DenseMap<AttributeSet,\n#endif\n                std::map<std::tuple<GlobalVariable*,FunctionType*,\n                                    CallingConv::ID>,GlobalVariable*>> allPltMap;\n\n// Emit a \"PLT\" entry that will be lazily initialized\n// when being called the first time.\nstatic GlobalVariable *emit_plt_thunk(Module *M, FunctionType *functype,\n#if JL_LLVM_VERSION >= 50000\n                                      const AttributeList &attrs,\n#else\n                                      const AttributeSet &attrs,\n#endif\n                                      CallingConv::ID cc, const char *f_lib, const char *f_name,\n                                      GlobalVariable *libptrgv, GlobalVariable *llvmgv,\n                                      void *symaddr, bool runtime_lib)\n{\n    PointerType *funcptype = PointerType::get(functype, 0);\n    libptrgv = prepare_global(libptrgv, M);\n    llvmgv = prepare_global(llvmgv, M);\n    BasicBlock *old = builder.GetInsertBlock();\n    DebugLoc olddl = builder.getCurrentDebugLocation();\n    DebugLoc noDbg;\n    builder.SetCurrentDebugLocation(noDbg);\n    std::stringstream funcName;\n    funcName << \"jlplt_\" << f_name << \"_\" << globalUnique++;\n    auto fname = funcName.str();\n    Function *plt = Function::Create(functype,\n                                     GlobalVariable::ExternalLinkage,\n                                     fname, M);\n    jl_init_function(plt);\n    plt->setAttributes(attrs);\n    if (cc != CallingConv::C)\n        plt->setCallingConv(cc);\n    funcName << \"_got\";\n    auto gname = funcName.str();\n    GlobalVariable *got = new GlobalVariable(*M, T_pvoidfunc, false,\n                                             GlobalVariable::ExternalLinkage,\n                                             nullptr, gname);\n    *(void**)jl_emit_and_add_to_shadow(got) = symaddr;\n    BasicBlock *b0 = BasicBlock::Create(jl_LLVMContext, \"top\", plt);\n    builder.SetInsertPoint(b0);\n    Value *ptr = runtime_sym_lookup(funcptype, f_lib, f_name, plt, libptrgv,\n                                    llvmgv, runtime_lib);\n    auto store = builder.CreateAlignedStore(builder.CreateBitCast(ptr, T_pvoidfunc), got, sizeof(void*));\n#if JL_LLVM_VERSION >= 30900\n    store->setAtomic(AtomicOrdering::Release);\n#else\n    store->setAtomic(Release);\n#endif\n    SmallVector<Value*, 16> args;\n    for (Function::arg_iterator arg = plt->arg_begin(), arg_e = plt->arg_end(); arg != arg_e; ++arg)\n        args.push_back(&*arg);\n    CallInst *ret = builder.CreateCall(ptr, ArrayRef<Value*>(args));\n    ret->setAttributes(attrs);\n    if (cc != CallingConv::C)\n        ret->setCallingConv(cc);\n    // NoReturn function can trigger LLVM verifier error when declared as\n    // MustTail since other passes might replace the `ret` with\n    // `unreachable` (LLVM should probably accept `unreachable`).\n#if JL_LLVM_VERSION >= 50000\n    if (attrs.hasAttribute(AttributeList::FunctionIndex,\n#else\n    if (attrs.hasAttribute(AttributeSet::FunctionIndex,\n#endif\n                           Attribute::NoReturn)) {\n        builder.CreateUnreachable();\n    }\n    else {\n        // musttail support is very bad on ARM, PPC, PPC64 (as of LLVM 3.9)\n        // Known failures includes vararg (not needed here) and sret.\n#if JL_LLVM_VERSION >= 30700 && (defined(_CPU_X86_) || defined(_CPU_X86_64_) || \\\n                        defined(_CPU_AARCH64_))\n        ret->setTailCallKind(CallInst::TCK_MustTail);\n#endif\n        if (functype->getReturnType() == T_void) {\n            builder.CreateRetVoid();\n        }\n        else {\n            builder.CreateRet(ret);\n        }\n    }\n    builder.SetInsertPoint(old);\n    builder.SetCurrentDebugLocation(olddl);\n    got = global_proto(got); // exchange got for the permanent global before jl_finalize_module destroys it\n    jl_finalize_module(M, true);\n\n    auto shadowgot =\n        cast<GlobalVariable>(shadow_output->getNamedValue(gname));\n    auto shadowplt = cast<Function>(shadow_output->getNamedValue(fname));\n    shadowgot->setInitializer(ConstantExpr::getBitCast(shadowplt,\n                                                       T_pvoidfunc));\n    return got;\n}\n\nstatic Value *emit_plt(FunctionType *functype,\n#if JL_LLVM_VERSION >= 50000\n                       const AttributeList &attrs,\n#else\n                       const AttributeSet &attrs,\n#endif\n                       CallingConv::ID cc, const char *f_lib, const char *f_name)\n{\n    assert(imaging_mode);\n    // Don't do this for vararg functions so that the `musttail` is only\n    // an optimization and is not required to function correctly.\n    assert(!functype->isVarArg());\n    GlobalVariable *libptrgv;\n    GlobalVariable *llvmgv;\n    void *symaddr;\n    auto LM = lazyModule([&] {\n            Module *m = new Module(f_name, jl_LLVMContext);\n            jl_setup_module(m);\n            return m;\n        });\n    bool runtime_lib = runtime_sym_gvs(f_lib, f_name, LM,\n                                       libptrgv, llvmgv, &symaddr);\n    PointerType *funcptype = PointerType::get(functype, 0);\n\n    auto &pltMap = allPltMap[attrs];\n    auto key = std::make_tuple(llvmgv, functype, cc);\n    GlobalVariable *&shadowgot = pltMap[key];\n    if (!shadowgot) {\n        shadowgot = emit_plt_thunk(LM.get(), functype, attrs, cc, f_lib, f_name, libptrgv, llvmgv, symaddr, runtime_lib);\n    }\n    else {\n        // `runtime_sym_gvs` shouldn't have created anything in a new module\n        // if it returns a GV that already exists.\n        assert(!LM.m);\n    }\n    GlobalVariable *got = prepare_global(shadowgot);\n    LoadInst *got_val = builder.CreateAlignedLoad(got, sizeof(void*));\n    // See comment in `runtime_sym_lookup` above. This in principle needs a\n    // consume ordering too. This is even less likely to cause issues though\n    // since the only thing we do to this loaded pointer is to call it\n    // immediately.\n    // got_val->setAtomic(AtomicOrdering::Consume);\n    return builder.CreateBitCast(got_val, funcptype);\n}\n\n// --- ABI Implementations ---\n// Partially based on the LDC ABI implementations licensed under the BSD 3-clause license\n\nclass AbiLayout {\npublic:\n    virtual ~AbiLayout() {}\n    virtual bool use_sret(jl_datatype_t *ty) = 0;\n    virtual bool needPassByRef(jl_datatype_t *ty, AttrBuilder&) = 0;\n    virtual Type *preferred_llvm_type(jl_datatype_t *ty, bool isret) const = 0;\n};\n\n// Determine if object of bitstype ty maps to a native x86 SIMD type (__m128, __m256, or __m512) in C\nstatic bool is_native_simd_type(jl_datatype_t *dt) {\n    size_t size = jl_datatype_size(dt);\n    if (size != 16 && size != 32 && size != 64)\n        // Wrong size for xmm, ymm, or zmm register.\n        return false;\n    uint32_t n = jl_datatype_nfields(dt);\n    if (n<2)\n        // Not mapped to SIMD register.\n        return false;\n    jl_value_t *ft0 = jl_field_type(dt, 0);\n    for (uint32_t i = 1; i < n; ++i)\n        if (jl_field_type(dt, i) != ft0)\n            // Not homogeneous\n            return false;\n    // Type is homogeneous.  Check if it maps to LLVM vector.\n    return jl_special_vector_alignment(n, ft0) != 0;\n}\n\n#include \"abi_llvm.cpp\"\n\n#include \"abi_arm.cpp\"\n#include \"abi_aarch64.cpp\"\n#include \"abi_ppc64le.cpp\"\n#include \"abi_win32.cpp\"\n#include \"abi_win64.cpp\"\n#include \"abi_x86_64.cpp\"\n#include \"abi_x86.cpp\"\n\n#if defined ABI_LLVM\n  typedef ABI_LLVMLayout DefaultAbiState;\n#elif defined _CPU_X86_64_\n#  if defined _OS_WINDOWS_\n     typedef ABI_Win64Layout DefaultAbiState;\n#  else\n     typedef ABI_x86_64Layout DefaultAbiState;\n#  endif\n#elif defined _CPU_X86_\n#  if defined _OS_WINDOWS_\n     typedef ABI_Win32Layout DefaultAbiState;\n#  else\n     typedef ABI_x86Layout DefaultAbiState;\n#  endif\n#elif defined _CPU_ARM_\n  typedef ABI_ARMLayout DefaultAbiState;\n#elif defined _CPU_AARCH64_\n  typedef ABI_AArch64Layout DefaultAbiState;\n#elif defined _CPU_PPC64_\n  typedef ABI_PPC64leLayout DefaultAbiState;\n#else\n#  warning \"ccall is defaulting to llvm ABI, since no platform ABI has been defined for this CPU/OS combination\"\n  typedef ABI_LLVMLayout DefaultAbiState;\n#endif\n\n// basic type widening and cast conversions\nstatic Value *llvm_type_rewrite(\n        Value *v, Type *target_type,\n        bool issigned, /* determines whether an integer value should be zero or sign extended */\n        jl_codectx_t *ctx)\n{\n    Type *from_type = v->getType();\n    if (target_type == from_type)\n        return v;\n\n    if (from_type == T_void || isa<UndefValue>(v))\n        return UndefValue::get(target_type); // convert undef (unreachable) -> undef (target_type)\n\n    assert(from_type->isPointerTy() == target_type->isPointerTy()); // expect that all ABIs consider all pointers to be equivalent\n    if (target_type->isPointerTy())\n        return emit_bitcast(v, target_type);\n\n    // simple integer and float widening & conversion cases\n    if (from_type->getPrimitiveSizeInBits() > 0 &&\n            target_type->getPrimitiveSizeInBits() == from_type->getPrimitiveSizeInBits())\n        return emit_bitcast(v, target_type);\n\n    if (target_type->isFloatingPointTy() && from_type->isFloatingPointTy()) {\n        if (target_type->getPrimitiveSizeInBits() > from_type->getPrimitiveSizeInBits())\n            return builder.CreateFPExt(v, target_type);\n        else if (target_type->getPrimitiveSizeInBits() < from_type->getPrimitiveSizeInBits())\n            return builder.CreateFPTrunc(v, target_type);\n        else\n            return v;\n    }\n\n    if (target_type->isIntegerTy() && from_type->isIntegerTy()) {\n        if (issigned)\n            return builder.CreateSExtOrTrunc(v, target_type);\n        else\n            return builder.CreateZExtOrTrunc(v, target_type);\n    }\n\n    // one or both of from_type and target_type is a VectorType or AggregateType\n    // LLVM doesn't allow us to cast these values directly, so\n    // we need to use this alloca copy trick instead\n    // On ARM and AArch64, the ABI requires casting through memory to different\n    // sizes.\n    Value *from;\n    Value *to;\n#if JL_LLVM_VERSION >= 30600\n    const DataLayout &DL = jl_ExecutionEngine->getDataLayout();\n#else\n    const DataLayout &DL = *jl_ExecutionEngine->getDataLayout();\n#endif\n    if (DL.getTypeAllocSize(target_type) >= DL.getTypeAllocSize(from_type)) {\n        to = emit_static_alloca(target_type, ctx);\n        from = emit_bitcast(to, from_type->getPointerTo());\n    }\n    else {\n        from = emit_static_alloca(from_type, ctx);\n        to = emit_bitcast(from, target_type->getPointerTo());\n    }\n    builder.CreateStore(v, from);\n    return builder.CreateLoad(to);\n}\n\n// --- argument passing and scratch space utilities ---\n\nstatic Value *runtime_apply_type(jl_value_t *ty, jl_unionall_t *unionall, jl_codectx_t *ctx)\n{\n    // box if concrete type was not statically known\n    Value *args[3];\n    args[0] = literal_pointer_val(ty);\n    args[1] = literal_pointer_val((jl_value_t*)ctx->linfo->def->sig);\n    args[2] = builder.CreateInBoundsGEP(\n            LLVM37_param(T_pjlvalue)\n            emit_bitcast(ctx->spvals_ptr, T_ppjlvalue),\n            ConstantInt::get(T_size, sizeof(jl_svec_t) / sizeof(jl_value_t*)));\n    return builder.CreateCall(prepare_call(jlapplytype_func), makeArrayRef(args));\n}\n\nstatic void typeassert_input(const jl_cgval_t &jvinfo, jl_value_t *jlto, jl_unionall_t *jlto_env, int argn, bool addressOf, jl_codectx_t *ctx)\n{\n    if (jlto != (jl_value_t*)jl_any_type && !jl_subtype(jvinfo.typ, jlto)) {\n        if (!addressOf && jlto == (jl_value_t*)jl_voidpointer_type) {\n            // allow a bit more flexibility for what can be passed to (void*) due to Ref{T} conversion behavior in input\n            if (!jl_is_cpointer_type(jvinfo.typ)) {\n                // emit a typecheck, if not statically known to be correct\n                std::stringstream msg;\n                msg << \"ccall argument \";\n                msg << argn;\n                emit_cpointercheck(jvinfo, msg.str(), ctx);\n            }\n        }\n        else {\n            // emit a typecheck, if not statically known to be correct\n            std::stringstream msg;\n            msg << \"ccall argument \";\n            msg << argn;\n            if (!jlto_env || !jl_has_typevar_from_unionall(jlto, jlto_env)) {\n                emit_typecheck(jvinfo, jlto, msg.str(), ctx);\n            }\n            else {\n                jl_cgval_t jlto_runtime = mark_julia_type(runtime_apply_type(jlto, jlto_env, ctx), true, jl_any_type, ctx);\n                Value *vx = boxed(jvinfo, ctx);\n                Value *istype = builder.\n                    CreateICmpNE(\n#if JL_LLVM_VERSION >= 30700\n                                 builder.CreateCall(prepare_call(jlisa_func), { vx, boxed(jlto_runtime, ctx) }),\n#else\n                                 builder.CreateCall2(prepare_call(jlisa_func), vx, boxed(jlto_runtime, ctx)),\n#endif\n                                 ConstantInt::get(T_int32, 0));\n                BasicBlock *failBB = BasicBlock::Create(jl_LLVMContext, \"fail\", ctx->f);\n                BasicBlock *passBB = BasicBlock::Create(jl_LLVMContext, \"pass\", ctx->f);\n                builder.CreateCondBr(istype, passBB, failBB);\n\n                builder.SetInsertPoint(failBB);\n                emit_type_error(mark_julia_type(vx, true, jl_any_type, ctx), boxed(jlto_runtime, ctx), msg.str(), ctx);\n                builder.CreateUnreachable();\n\n                builder.SetInsertPoint(passBB);\n            }\n        }\n    }\n}\n\nstatic Value *julia_to_address(Type *to, jl_value_t *jlto, jl_unionall_t *jlto_env, const jl_cgval_t &jvinfo,\n                               int argn, jl_codectx_t *ctx, bool *needStackRestore)\n{\n    assert(jl_is_datatype(jlto) && julia_struct_has_layout((jl_datatype_t*)jlto, jlto_env));\n\n    if (!jl_is_cpointer_type(jlto) || !to->isPointerTy()) {\n        emit_error(\"ccall: & on argument was not matched by Ptr{T} argument type\", ctx);\n        return UndefValue::get(to);\n    }\n\n    jl_value_t *ety;\n    if (jlto == (jl_value_t*)jl_voidpointer_type) {\n        ety = jvinfo.typ; // skip the type-check\n    }\n    else {\n        ety = jl_tparam0(jlto);\n        typeassert_input(jvinfo, ety, jlto_env, argn, true, ctx);\n    }\n    assert(to->isPointerTy());\n\n    if (jvinfo.isboxed) {\n        if (!jl_is_abstracttype(ety)) {\n            if (jl_is_mutable_datatype(ety)) {\n                // no copy, just reference the data field\n                return data_pointer(jvinfo, ctx, to);\n            }\n            else if (jl_is_immutable_datatype(ety) && jlto != (jl_value_t*)jl_voidpointer_type) {\n                // yes copy\n                Value *nbytes;\n                AllocaInst *ai;\n                if (jl_is_leaf_type(ety) || jl_is_primitivetype(ety)) {\n                    int nb = jl_datatype_size(ety);\n                    nbytes = ConstantInt::get(T_int32, nb);\n                    ai = emit_static_alloca(T_int8, nb, ctx);\n                }\n                else {\n                    nbytes = emit_datatype_size(emit_typeof_boxed(jvinfo,ctx));\n                    ai = builder.CreateAlloca(T_int8, nbytes);\n                    *needStackRestore = true;\n                }\n                ai->setAlignment(16);\n                builder.CreateMemCpy(ai, data_pointer(jvinfo, ctx, T_pint8), nbytes, sizeof(void*)); // minimum gc-alignment in julia is pointer size\n                return emit_bitcast(ai, to);\n            }\n        }\n        // emit maybe copy\n        *needStackRestore = true;\n        Value *jvt = emit_typeof_boxed(jvinfo, ctx);\n        BasicBlock *mutableBB = BasicBlock::Create(jl_LLVMContext, \"is-mutable\", ctx->f);\n        BasicBlock *immutableBB = BasicBlock::Create(jl_LLVMContext, \"is-immutable\", ctx->f);\n        BasicBlock *afterBB = BasicBlock::Create(jl_LLVMContext, \"after\", ctx->f);\n        Value *ismutable = emit_datatype_mutabl(jvt);\n        builder.CreateCondBr(ismutable, mutableBB, immutableBB);\n        builder.SetInsertPoint(mutableBB);\n        Value *p1 = data_pointer(jvinfo, ctx, to);\n        builder.CreateBr(afterBB);\n        builder.SetInsertPoint(immutableBB);\n        Value *nbytes = emit_datatype_size(jvt);\n        AllocaInst *ai = builder.CreateAlloca(T_int8, nbytes);\n        ai->setAlignment(16);\n        builder.CreateMemCpy(ai, data_pointer(jvinfo, ctx, T_pint8), nbytes, sizeof(void*)); // minimum gc-alignment in julia is pointer size\n        Value *p2 = emit_bitcast(ai, to);\n        builder.CreateBr(afterBB);\n        builder.SetInsertPoint(afterBB);\n        PHINode *p = builder.CreatePHI(to, 2);\n        p->addIncoming(p1, mutableBB);\n        p->addIncoming(p2, immutableBB);\n        return p;\n    }\n\n    Type *slottype = julia_struct_to_llvm(jvinfo.typ, NULL, NULL);\n    // pass the address of an alloca'd thing, not a box\n    // since those are immutable.\n    Value *slot = emit_static_alloca(slottype, ctx);\n    if (!jvinfo.ispointer()) {\n        builder.CreateStore(emit_unbox(slottype, jvinfo, ety), slot);\n    }\n    else {\n        builder.CreateMemCpy(slot,\n                             data_pointer(jvinfo, ctx, slot->getType()),\n                             (uint64_t)jl_datatype_size(ety),\n                             (uint64_t)jl_datatype_align(ety));\n        mark_gc_use(jvinfo);\n    }\n    if (slot->getType() != to)\n        slot = emit_bitcast(slot, to);\n    return slot;\n}\n\n\n// Emit code to convert argument to form expected by C ABI\n// to = desired LLVM type\n// jlto = Julia type of formal argument\n// jvinfo = value of actual argument\nstatic Value *julia_to_native(Type *to, bool toboxed, jl_value_t *jlto, jl_unionall_t *jlto_env,\n                              const jl_cgval_t &jvinfo,\n                              bool byRef, int argn, jl_codectx_t *ctx,\n                              bool *needStackRestore)\n{\n    // We're passing Any\n    if (toboxed) {\n        assert(!byRef); // don't expect any ABI to pass pointers by pointer\n        return boxed(jvinfo, ctx);\n    }\n    assert(jl_is_datatype(jlto) && julia_struct_has_layout((jl_datatype_t*)jlto, jlto_env));\n\n    typeassert_input(jvinfo, jlto, jlto_env, argn, false, ctx);\n    if (!byRef)\n        return emit_unbox(to, jvinfo, jlto);\n\n    // pass the address of an alloca'd thing, not a box\n    // since those are immutable.\n    Value *slot = emit_static_alloca(to, ctx);\n    if (!jvinfo.ispointer()) {\n        builder.CreateStore(emit_unbox(to, jvinfo, jlto), slot);\n    }\n    else {\n        builder.CreateMemCpy(slot,\n                             data_pointer(jvinfo, ctx, slot->getType()),\n                             (uint64_t)jl_datatype_size(jlto),\n                             (uint64_t)jl_datatype_align(jlto));\n        mark_gc_use(jvinfo);\n    }\n    return slot;\n}\n\ntypedef struct {\n    Value *jl_ptr;  // if the argument is a run-time computed pointer\n    void (*fptr)(void);     // if the argument is a constant pointer\n    const char *f_name;   // if the symbol name is known\n    const char *f_lib;    // if a library name is specified\n    jl_value_t *gcroot;\n} native_sym_arg_t;\n\n// --- parse :sym or (:sym, :lib) argument into address info ---\nstatic void interpret_symbol_arg(native_sym_arg_t &out, jl_value_t *arg, jl_codectx_t *ctx, const char *fname, bool llvmcall)\n{\n    Value *&jl_ptr = out.jl_ptr;\n    void (*&fptr)(void) = out.fptr;\n    const char *&f_name = out.f_name;\n    const char *&f_lib = out.f_lib;\n\n    jl_value_t *ptr = static_eval(arg, ctx, true);\n    if (ptr == NULL) {\n        jl_value_t *ptr_ty = expr_type(arg, ctx);\n        jl_cgval_t arg1 = emit_expr(arg, ctx);\n        if (!jl_is_cpointer_type(ptr_ty)) {\n            emit_cpointercheck(arg1,\n                               !strcmp(fname,\"ccall\") ?\n                               \"ccall: first argument not a pointer or valid constant expression\" :\n                               \"cglobal: first argument not a pointer or valid constant expression\",\n                               ctx);\n        }\n        arg1 = update_julia_type(arg1, (jl_value_t*)jl_voidpointer_type, ctx);\n        jl_ptr = emit_unbox(T_size, arg1, (jl_value_t*)jl_voidpointer_type);\n    }\n    else {\n        out.gcroot = ptr;\n        if (jl_is_tuple(ptr) && jl_nfields(ptr) == 1) {\n            ptr = jl_fieldref(ptr, 0);\n        }\n\n        if (jl_is_symbol(ptr))\n            f_name = jl_symbol_name((jl_sym_t*)ptr);\n        else if (jl_is_string(ptr))\n            f_name = jl_string_data(ptr);\n\n        if (f_name != NULL) {\n            // just symbol, default to JuliaDLHandle\n            // will look in process symbol table\n#ifdef _OS_WINDOWS_\n            if (!llvmcall)\n                f_lib = jl_dlfind_win32(f_name);\n#endif\n        }\n        else if (jl_is_cpointer_type(jl_typeof(ptr))) {\n            fptr = *(void(**)(void))jl_data_ptr(ptr);\n        }\n        else if (jl_is_tuple(ptr) && jl_nfields(ptr) > 1) {\n            jl_value_t *t0 = jl_fieldref(ptr, 0);\n            if (jl_is_symbol(t0))\n                f_name = jl_symbol_name((jl_sym_t*)t0);\n            else if (jl_is_string(t0))\n                f_name = jl_string_data(t0);\n            else\n                JL_TYPECHKS(fname, symbol, t0);\n\n            jl_value_t *t1 = jl_fieldref(ptr, 1);\n            if (jl_is_symbol(t1))\n                f_lib = jl_symbol_name((jl_sym_t*)t1);\n            else if (jl_is_string(t1))\n                f_lib = jl_string_data(t1);\n            else\n                JL_TYPECHKS(fname, symbol, t1);\n        }\n        else {\n            JL_TYPECHKS(fname, pointer, ptr);\n        }\n    }\n}\n\n\nstatic jl_value_t* try_eval(jl_value_t *ex, jl_codectx_t *ctx, const char *failure, bool compiletime=false)\n{\n    jl_value_t *constant = NULL;\n    constant = static_eval(ex, ctx, true, true);\n    if (constant || jl_is_ssavalue(ex))\n        return constant;\n    JL_TRY {\n        size_t last_age = jl_get_ptls_states()->world_age;\n        jl_get_ptls_states()->world_age = ctx->world;\n        constant = jl_interpret_toplevel_expr_in(ctx->module, ex, ctx->source, ctx->linfo->sparam_vals);\n        jl_get_ptls_states()->world_age = last_age;\n    }\n    JL_CATCH {\n        if (compiletime)\n            jl_rethrow_with_add(failure);\n        if (failure)\n            emit_error(failure, ctx);\n        constant = NULL;\n    }\n    return constant;\n}\n\n// --- code generator for cglobal ---\n\nstatic jl_cgval_t emit_runtime_call(JL_I::intrinsic f, const jl_cgval_t *argv, size_t nargs, jl_codectx_t *ctx);\n\nstatic jl_cgval_t emit_cglobal(jl_value_t **args, size_t nargs, jl_codectx_t *ctx)\n{\n    JL_NARGS(cglobal, 1, 2);\n    jl_value_t *rt = NULL;\n    Value *res;\n    native_sym_arg_t sym = {};\n    JL_GC_PUSH2(&rt, &sym.gcroot);\n\n    if (nargs == 2) {\n        rt = static_eval(args[2], ctx, true, true);\n        if (rt == NULL) {\n            JL_GC_POP();\n            jl_cgval_t argv[2];\n            argv[0] = emit_expr(args[0], ctx);\n            argv[1] = emit_expr(args[1], ctx);\n            return emit_runtime_call(JL_I::cglobal, argv, nargs, ctx);\n        }\n\n        JL_TYPECHK(cglobal, type, rt);\n        rt = (jl_value_t*)jl_apply_type1((jl_value_t*)jl_pointer_type, rt);\n    }\n    else {\n        rt = (jl_value_t*)jl_voidpointer_type;\n    }\n    Type *lrt = julia_type_to_llvm(rt);\n    if (lrt == NULL)\n        lrt = T_pint8;\n\n    interpret_symbol_arg(sym, args[1], ctx, \"cglobal\", false);\n\n    if (sym.jl_ptr != NULL) {\n        res = builder.CreateIntToPtr(sym.jl_ptr, lrt);\n    }\n    else if (sym.fptr != NULL) {\n        res = literal_static_pointer_val((void*)(uintptr_t)sym.fptr, lrt);\n        if (imaging_mode)\n            jl_printf(JL_STDERR,\"WARNING: literal address used in cglobal for %s; code cannot be statically compiled\\n\", sym.f_name);\n    }\n    else {\n        if (imaging_mode) {\n            res = runtime_sym_lookup((PointerType*)lrt, sym.f_lib, sym.f_name, ctx->f);\n        }\n        else {\n            void *symaddr = jl_dlsym_e(jl_get_library(sym.f_lib), sym.f_name);\n            if (symaddr == NULL) {\n                std::stringstream msg;\n                msg << \"cglobal: could not find symbol \";\n                msg << sym.f_name;\n                if (sym.f_lib != NULL) {\n#ifdef _OS_WINDOWS_\n                    assert(sym.f_lib != JL_EXE_LIBNAME && sym.f_lib != JL_DL_LIBNAME);\n#endif\n                    msg << \" in library \";\n                    msg << sym.f_lib;\n                }\n                emit_error(msg.str(), ctx);\n            }\n            // since we aren't saving this code, there's no sense in\n            // putting anything complicated here: just JIT the address of the cglobal\n            res = literal_static_pointer_val(symaddr, lrt);\n        }\n    }\n\n    JL_GC_POP();\n    return mark_julia_type(res, false, rt, ctx);\n}\n\n#ifdef USE_MCJIT\nclass FunctionMover final : public ValueMaterializer\n{\npublic:\n    FunctionMover(llvm::Module *dest,llvm::Module *src) :\n        ValueMaterializer(), VMap(), destModule(dest), srcModule(src),\n        LazyFunctions(0)\n    {\n    }\n    ValueToValueMapTy VMap;\n    llvm::Module *destModule;\n    llvm::Module *srcModule;\n    std::vector<Function *> LazyFunctions;\n\n    Function *CloneFunctionProto(Function *F)\n    {\n        assert(!F->isDeclaration());\n        Function *NewF = Function::Create(F->getFunctionType(),\n                                          Function::ExternalLinkage,\n                                          F->getName(),\n                                          destModule);\n        LazyFunctions.push_back(F);\n        VMap[F] = NewF;\n        return NewF;\n    }\n\n    void CloneFunctionBody(Function *F)\n    {\n        Function *NewF = (Function*)(Value*)VMap[F];\n        assert(NewF != NULL);\n\n        Function::arg_iterator DestI = NewF->arg_begin();\n        for (Function::const_arg_iterator I = F->arg_begin(), E = F->arg_end(); I != E; ++I) {\n            DestI->setName(I->getName());    // Copy the name over...\n            VMap[&*I] = &*(DestI++);        // Add mapping to VMap\n        }\n\n#if JL_LLVM_VERSION >= 30600\n        // Clone debug info - Not yet public API\n        // llvm::CloneDebugInfoMetadata(NewF,F,VMap);\n#endif\n\n        SmallVector<ReturnInst*, 8> Returns;\n        llvm::CloneFunctionInto(NewF,F,VMap,true,Returns,\"\",NULL,NULL,this);\n        NewF->setComdat(nullptr);\n        NewF->setSection(\"\");\n    }\n\n    Function *CloneFunction(Function *F)\n    {\n        Function *NewF = (llvm::Function*)MapValue(F,VMap,RF_None,NULL,this);\n        ResolveLazyFunctions();\n        return NewF;\n    }\n\n    void ResolveLazyFunctions()\n    {\n        while (!LazyFunctions.empty()) {\n            Function *F = LazyFunctions.back();\n            LazyFunctions.pop_back();\n\n            CloneFunctionBody(F);\n        }\n    }\n\n    Value *InjectFunctionProto(Function *F)\n    {\n        Function *NewF = destModule->getFunction(F->getName());\n        if (!NewF) {\n            NewF = function_proto(F);\n            NewF->setComdat(nullptr);\n            destModule->getFunctionList().push_back(NewF);\n        }\n        return NewF;\n    }\n\n#if JL_LLVM_VERSION >= 30900\n    Value *materialize(Value *V) override\n#elif JL_LLVM_VERSION >= 30800\n    Value *materializeDeclFor(Value *V) override\n#else\n    Value *materializeValueFor (Value *V) override\n#endif\n    {\n        Function *F = dyn_cast<Function>(V);\n        if (F) {\n            if (isIntrinsicFunction(F)) {\n                return destModule->getOrInsertFunction(F->getName(),F->getFunctionType());\n            }\n            if (F->isDeclaration() || F->getParent() != destModule) {\n                if (F->getName().empty())\n                    return CloneFunctionProto(F);\n                Function *shadow = srcModule->getFunction(F->getName());\n                if (shadow != NULL && !shadow->isDeclaration()) {\n                    Function *oldF = destModule->getFunction(F->getName());\n                    if (oldF)\n                        return oldF;\n\n#ifdef USE_ORCJIT\n                    if (jl_ExecutionEngine->findSymbol(F->getName(), false))\n                        return InjectFunctionProto(F);\n#endif\n\n                    return CloneFunctionProto(shadow);\n                }\n                else if (!F->isDeclaration()) {\n                    return CloneFunctionProto(F);\n                }\n            }\n            // Still a declaration and still in a different module\n            if (F->isDeclaration() && F->getParent() != destModule) {\n                // Create forward declaration in current module\n                return InjectFunctionProto(F);\n            }\n        }\n        else if (isa<GlobalVariable>(V)) {\n            GlobalVariable *GV = cast<GlobalVariable>(V);\n            assert(GV != NULL);\n            GlobalVariable *oldGV = destModule->getGlobalVariable(GV->getName());\n            if (oldGV != NULL)\n                return oldGV;\n            GlobalVariable *newGV = new GlobalVariable(*destModule,\n                GV->getType()->getElementType(),\n                GV->isConstant(),\n                GlobalVariable::ExternalLinkage,\n                NULL,\n                GV->getName(),\n                NULL,\n                GV->getThreadLocalMode(),\n                GV->getType()->getPointerAddressSpace());\n            newGV->copyAttributesFrom(GV);\n            newGV->setComdat(nullptr);\n            if (GV->isDeclaration())\n                return newGV;\n            if (!GV->getName().empty()) {\n                uint64_t addr = jl_ExecutionEngine->getGlobalValueAddress(GV->getName());\n                if (addr != 0) {\n                    newGV->setExternallyInitialized(true);\n                    return newGV;\n                }\n            }\n            if (GV->hasInitializer()) {\n                Value *C = MapValue(GV->getInitializer(),VMap,RF_None,NULL,this);\n                newGV->setInitializer(cast<Constant>(C));\n            }\n            return newGV;\n        }\n        return NULL;\n    };\n};\n#endif\n\n// llvmcall(ir, (rettypes...), (argtypes...), args...)\nstatic jl_cgval_t emit_llvmcall(jl_value_t **args, size_t nargs, jl_codectx_t *ctx)\n{\n    JL_NARGSV(llvmcall, 3);\n    jl_value_t *rt = NULL, *at = NULL, *ir = NULL, *decl = NULL;\n    jl_svec_t *stt = NULL;\n    JL_GC_PUSH5(&ir, &rt, &at, &stt, &decl);\n    at = try_eval(args[3], ctx, \"error statically evaluating llvmcall argument tuple\", true);\n    rt = try_eval(args[2], ctx, \"error statically evaluating llvmcall return type\", true);\n    ir = try_eval(args[1], ctx, \"error statically evaluating llvm IR argument\", true);\n    int i = 1;\n    if (jl_is_tuple(ir)) {\n        // if the IR is a tuple, we expect (declarations, ir)\n        if (jl_nfields(ir) != 2)\n            jl_error(\"Tuple as first argument to llvmcall must have exactly two children\");\n        decl = jl_fieldref(ir,0);\n        ir = jl_fieldref(ir,1);\n        if (!jl_is_string(decl))\n            jl_error(\"Declarations passed to llvmcall must be a string\");\n    }\n    bool isString = jl_is_string(ir);\n    bool isPtr = jl_is_cpointer(ir);\n    if (!isString && !isPtr) {\n        jl_error(\"IR passed to llvmcall must be a string or pointer to an LLVM Function\");\n    }\n\n    JL_TYPECHK(llvmcall, type, rt);\n    JL_TYPECHK(llvmcall, type, at);\n\n    std::stringstream ir_stream;\n\n    stt = jl_alloc_svec(nargs - 3);\n\n    for (size_t i = 0; i < nargs - 3; ++i) {\n        jl_svecset(stt, i, expr_type(args[4 + i], ctx));\n    }\n\n    // Generate arguments\n    std::string arguments;\n    llvm::raw_string_ostream argstream(arguments);\n    jl_svec_t *tt = ((jl_datatype_t*)at)->parameters;\n    jl_value_t *rtt = rt;\n\n    size_t nargt = jl_svec_len(tt);\n    Value **argvals = (Value**) alloca(nargt*sizeof(Value*));\n    std::vector<llvm::Type*> argtypes;\n    /*\n     * Semantics for arguments are as follows:\n     * If the argument type is immutable (including bitstype), we pass the loaded llvm value\n     * type. Otherwise we pass a pointer to a jl_value_t.\n     */\n    jl_cgval_t *argv = (jl_cgval_t*)alloca(sizeof(jl_cgval_t) * nargt);\n    for (size_t i = 0; i < nargt; ++i) {\n        jl_value_t *tti = jl_svecref(tt,i);\n        bool toboxed;\n        Type *t = julia_type_to_llvm(tti, &toboxed);\n        argtypes.push_back(t);\n        if (4+i > nargs) {\n            jl_error(\"Missing arguments to llvmcall!\");\n        }\n        jl_value_t *argi = args[4 + i];\n        jl_cgval_t &arg = argv[i];\n        arg = emit_expr(argi, ctx);\n\n        Value *v = julia_to_native(t, toboxed, tti, NULL, arg, false, i, ctx, NULL);\n        bool issigned = jl_signed_type && jl_subtype(tti, (jl_value_t*)jl_signed_type);\n        // make sure args are rooted\n        argvals[i] = llvm_type_rewrite(v, t, issigned, ctx);\n    }\n\n    Function *f;\n    bool retboxed;\n    Type *rettype = julia_type_to_llvm(rtt, &retboxed);\n    if (isString) {\n        // Make sure to find a unique name\n        std::string ir_name;\n        while(true) {\n            std::stringstream name;\n            name << (ctx->f->getName().str()) << \"u\" << i++;\n            ir_name = name.str();\n            if (jl_Module->getFunction(ir_name) == NULL)\n                break;\n        }\n\n        bool first = true;\n        for (std::vector<Type *>::iterator it = argtypes.begin(); it != argtypes.end(); ++it) {\n            if (!first)\n                argstream << \",\";\n            else\n                first = false;\n            (*it)->print(argstream);\n            argstream << \" \";\n        }\n\n        std::string rstring;\n        llvm::raw_string_ostream rtypename(rstring);\n        rettype->print(rtypename);\n        std::map<uint64_t,std::string> localDecls;\n\n        if (decl != NULL) {\n            std::stringstream declarations(jl_string_data(decl));\n\n            // parse string line by line\n            std::string declstr;\n            while (std::getline(declarations, declstr, '\\n')) {\n                // Find name of declaration by searching for '@'\n                std::string::size_type atpos = declstr.find('@') + 1;\n                // Find end of declaration by searching for '('\n                std::string::size_type bracepos = declstr.find('(', atpos);\n                // Declaration name is the string between @ and (\n                std::string declname = declstr.substr(atpos, bracepos - atpos);\n\n                // Check if declaration already present in module\n                if(jl_Module->getNamedValue(declname) == NULL) {\n                    ir_stream << \"; Declarations\\n\" << declstr << \"\\n\";\n                }\n            }\n        }\n        ir_stream << \"; Number of arguments: \" << nargt << \"\\n\"\n        << \"define \"<<rtypename.str()<<\" @\\\"\" << ir_name << \"\\\"(\"<<argstream.str()<<\") {\\n\"\n        << jl_string_data(ir) << \"\\n}\";\n        SMDiagnostic Err = SMDiagnostic();\n        std::string ir_string = ir_stream.str();\n#if JL_LLVM_VERSION >= 30600\n        Module *m = NULL;\n        bool failed = parseAssemblyInto(llvm::MemoryBufferRef(ir_string,\"llvmcall\"),*jl_Module,Err);\n        if (!failed)\n            m = jl_Module;\n#else\n        Module *m = ParseAssemblyString(ir_string.c_str(),jl_Module,Err,jl_LLVMContext);\n#endif\n        if (m == NULL) {\n            std::string message = \"Failed to parse LLVM Assembly: \\n\";\n            llvm::raw_string_ostream stream(message);\n            Err.print(\"julia\",stream,true);\n            jl_error(stream.str().c_str());\n        }\n        f = m->getFunction(ir_name);\n    }\n    else {\n        assert(isPtr);\n        // Create Function skeleton\n        f = (llvm::Function*)jl_unbox_voidpointer(ir);\n        assert(!f->isDeclaration());\n        assert(f->getReturnType() == rettype);\n        int i = 0;\n        for (std::vector<Type *>::iterator it = argtypes.begin();\n            it != argtypes.end(); ++it, ++i)\n            assert(*it == f->getFunctionType()->getParamType(i));\n\n#ifdef USE_MCJIT\n        if (f->getParent() != jl_Module) {\n            FunctionMover mover(jl_Module, f->getParent());\n            f = mover.CloneFunction(f);\n        }\n#endif\n\n        //f->dump();\n#if JL_LLVM_VERSION < 30500\n        if (verifyFunction(*f,PrintMessageAction)) {\n#else\n        llvm::raw_fd_ostream out(1,false);\n        if (verifyFunction(*f,&out)) {\n#endif\n#if JL_LLVM_VERSION >= 50000\n            f->print(llvm::dbgs(), nullptr, false, true);\n#else\n            f->dump();\n#endif\n            jl_error(\"Malformed LLVM Function\");\n        }\n    }\n\n    // Since we dumped all of f's dependencies into the active module,\n    // we cannot reasonably inline it, so leave it there and just emit\n    // a regular call\n    if (!isString) {\n        static int llvmcallnumbering = 0;\n        std::stringstream name;\n        name << \"jl_llvmcall\" << llvmcallnumbering++;\n        f->setName(name.str());\n        jl_init_function(f);\n        f = cast<Function>(prepare_call(function_proto(f)));\n    }\n    else {\n        jl_init_function(f);\n        f->setLinkage(GlobalValue::LinkOnceODRLinkage);\n    }\n\n    // the actual call\n    builder.CreateCall(prepare_call(gcroot_flush_func));\n    SmallVector<Value*, 16> gc_uses;\n    for (size_t i = 0; i < nargt; ++i) {\n        const jl_cgval_t &arg = argv[i];\n        push_gc_use(gc_uses, arg);\n    }\n    // Mark GC use before **and** after the llvmcall to make sure the arguments\n    // are alive during the llvmcall even if the llvmcall has `unreachable`.\n    // If the llvmcall generates GC safepoint, it might need to emit its own\n    // gckill.\n    mark_gc_uses(gc_uses);\n    CallInst *inst = builder.CreateCall(f, ArrayRef<Value*>(&argvals[0], nargt));\n    if (isString)\n        f->addFnAttr(Attribute::AlwaysInline);\n    mark_gc_uses(gc_uses);\n\n    JL_GC_POP();\n\n    if (inst->getType() != rettype) {\n        jl_error(\"Return type of llvmcall'ed function does not match declared return type\");\n    }\n\n    return mark_julia_type(inst, retboxed, rtt, ctx);\n}\n\n// --- code generator for ccall itself ---\n\nstatic jl_cgval_t mark_or_box_ccall_result(Value *result, bool isboxed, jl_value_t *rt, jl_unionall_t *unionall, bool static_rt, jl_codectx_t *ctx)\n{\n    if (!static_rt) {\n        assert(!isboxed && ctx->spvals_ptr && unionall && jl_is_datatype(rt));\n        Value *runtime_dt = runtime_apply_type(rt, unionall, ctx);\n        // TODO: is this leaf check actually necessary, or is it structurally guaranteed?\n        emit_leafcheck(runtime_dt, \"ccall: return type must be a leaf DataType\", ctx);\n#if JL_LLVM_VERSION >= 30600\n        const DataLayout &DL = jl_ExecutionEngine->getDataLayout();\n#else\n        const DataLayout &DL = *jl_ExecutionEngine->getDataLayout();\n#endif\n        unsigned nb = DL.getTypeStoreSize(result->getType());\n        MDNode *tbaa = jl_is_mutable(rt) ? tbaa_mutab : tbaa_immut;\n        Value *strct = emit_allocobj(ctx, nb, runtime_dt);\n        init_bits_value(strct, result, tbaa);\n        return mark_julia_type(strct, true, rt, ctx);\n    }\n    return mark_julia_type(result, isboxed, rt, ctx);\n}\n\nclass function_sig_t {\npublic:\n    std::vector<Type*> fargt; // vector of llvm output types (julia_struct_to_llvm) for arguments (vararg is the last item, if applicable)\n    std::vector<Type*> fargt_sig; // vector of ABI coercion types for call signature\n    std::vector<bool> fargt_isboxed; // vector of whether the llvm output type is a Julia-box for each argument (vararg is the last item, if applicable)\n    Type *fargt_vasig = NULL; // ABI coercion type for vararg list\n    std::vector<bool> byRefList; // vector of \"byref\" parameters (vararg is the last item, if applicable)\n#if JL_LLVM_VERSION >= 50000\n    AttributeList attributes; // vector of function call site attributes (vararg is the last item, if applicable)\n#else\n    AttributeSet attributes; // vector of function call site attributes (vararg is the last item, if applicable)\n#endif\n    Type *lrt; // input parameter of the llvm return type (from julia_struct_to_llvm)\n    bool retboxed; // input parameter indicating whether lrt is jl_value_t*\n    Type *prt; // out parameter of the llvm return type for the function signature\n    int sret; // out parameter for indicating whether return value has been moved to the first argument position\n    std::string err_msg;\n    CallingConv::ID cc; // calling convention ABI\n    bool llvmcall;\n    FunctionType *functype;\n    jl_svec_t *at; // svec of julia argument types\n    jl_value_t *rt; // julia return type\n    jl_unionall_t *unionall_env; // UnionAll environment for `at` and `rt`\n    size_t nargs; // number of actual arguments (can be different from the size of at when varargs)\n    size_t isVa;\n\n    function_sig_t(Type *lrt, jl_value_t *rt, bool retboxed, jl_svec_t *at, jl_unionall_t *unionall_env, size_t nargs, size_t isVa, CallingConv::ID cc, bool llvmcall)\n      : fargt_vasig(NULL), lrt(lrt), retboxed(retboxed),\n        prt(NULL), sret(0), cc(cc), llvmcall(llvmcall),\n        functype(NULL), at(at), rt(rt), unionall_env(unionall_env),\n        nargs(nargs), isVa(isVa)\n    {\n        err_msg = generate_func_sig();\n        if (err_msg.empty())\n            functype = FunctionType::get(sret ? T_void : prt, fargt_sig, isVa);\n    }\n\n    jl_cgval_t emit_a_ccall(\n            const native_sym_arg_t &symarg,\n            size_t nargt,\n            std::vector<bool> &addressOf,\n            jl_cgval_t *argv,\n            SmallVector<Value*, 16> &gc_uses,\n            bool static_rt,\n            jl_codectx_t *ctx);\n\nprivate:\nstd::string generate_func_sig()\n{\n    size_t nargt = jl_svec_len(at);\n    assert(rt && !jl_is_abstract_ref_type(rt));\n\n#if JL_LLVM_VERSION >= 50000\n    std::vector<AttributeList> paramattrs;\n#else\n    std::vector<AttributeSet> paramattrs;\n#endif\n    std::unique_ptr<AbiLayout> abi;\n    if (llvmcall)\n        abi.reset(new ABI_LLVMLayout());\n    else\n        abi.reset(new DefaultAbiState());\n    sret = 0;\n\n    if (type_is_ghost(lrt)) {\n        prt = lrt = T_void;\n        abi->use_sret(jl_void_type);\n    }\n    else {\n        if (!jl_is_datatype(rt) || ((jl_datatype_t*)rt)->layout == NULL || jl_is_cpointer_type(rt) || jl_is_array_type(rt) || retboxed) {\n            prt = lrt; // passed as pointer\n            abi->use_sret(jl_voidpointer_type);\n        }\n        else if (abi->use_sret((jl_datatype_t*)rt)) {\n            AttrBuilder retattrs = AttrBuilder();\n#if !defined(_OS_WINDOWS_) || JL_LLVM_VERSION >= 30500 // llvm used to use the old mingw ABI, skipping this marking works around that difference\n            retattrs.addAttribute(Attribute::StructRet);\n#endif\n            retattrs.addAttribute(Attribute::NoAlias);\n#if JL_LLVM_VERSION >= 50000\n            paramattrs.push_back(AttributeList::get(jl_LLVMContext, 1, retattrs));\n#else\n            paramattrs.push_back(AttributeSet::get(jl_LLVMContext, 1, retattrs));\n#endif\n            fargt_sig.push_back(PointerType::get(lrt, 0));\n            sret = 1;\n            prt = lrt;\n        }\n        else {\n            prt = abi->preferred_llvm_type((jl_datatype_t*)rt, true);\n            if (prt == NULL)\n                prt = lrt;\n        }\n    }\n\n    size_t i;\n    bool current_isVa = false;\n    for (i = 0; i < nargt; ) {\n        AttrBuilder ab;\n        jl_value_t *tti = jl_svecref(at, i);\n        if (jl_is_vararg_type(tti)) {\n            current_isVa = true;\n            tti = jl_unwrap_vararg(tti);\n        }\n        Type *t = NULL;\n        bool isboxed;\n        if (jl_is_abstract_ref_type(tti)) {\n            if (jl_is_typevar(jl_tparam0(tti)))\n                jl_error(\"ccall: argument type Ref should have an element type, not Ref{T}\");\n            tti = (jl_value_t*)jl_voidpointer_type;\n            t = T_pint8;\n            isboxed = false;\n        }\n        else {\n            if (jl_is_primitivetype(tti)) {\n                // see pull req #978. need to annotate signext/zeroext for\n                // small integer arguments.\n                jl_datatype_t *bt = (jl_datatype_t*)tti;\n                if (jl_datatype_size(bt) < 4) {\n                    if (jl_signed_type && jl_subtype(tti, (jl_value_t*)jl_signed_type))\n                        ab.addAttribute(Attribute::SExt);\n                    else\n                        ab.addAttribute(Attribute::ZExt);\n                }\n            }\n\n            t = julia_struct_to_llvm(tti, unionall_env, &isboxed);\n            if (t == NULL || t == T_void) {\n                std::stringstream msg;\n                msg << \"ccall: the type of argument \";\n                msg << (i + 1);\n                msg << \" doesn't correspond to a C type\";\n                return msg.str();\n            }\n        }\n\n        Type *pat;\n        if (!jl_is_datatype(tti) || ((jl_datatype_t*)tti)->layout == NULL || jl_is_array_type(tti))\n            tti = (jl_value_t*)jl_voidpointer_type; // passed as pointer\n\n        // Whether or not LLVM wants us to emit a pointer to the data\n        bool byRef = abi->needPassByRef((jl_datatype_t*)tti, ab);\n\n        if (jl_is_cpointer_type(tti)) {\n            pat = t;\n        }\n        else if (byRef) {\n            pat = PointerType::get(t, 0);\n        }\n        else {\n            pat = abi->preferred_llvm_type((jl_datatype_t*)tti, false);\n            if (pat == NULL)\n                pat = t;\n        }\n\n        byRefList.push_back(byRef);\n        fargt.push_back(t);\n        fargt_isboxed.push_back(isboxed);\n        if (!current_isVa)\n            fargt_sig.push_back(pat);\n        else\n            fargt_vasig = pat;\n\n        do { // for each arg for which this type applies, add the appropriate LLVM parameter attributes\n            if (i < nargs) { // if vararg, the last declared arg type may not have a corresponding arg value\n#if JL_LLVM_VERSION >= 50000\n                AttributeList params = AttributeList::get(jl_LLVMContext, i + sret + 1, ab);\n#else\n                AttributeSet params = AttributeSet::get(jl_LLVMContext, i + sret + 1, ab);\n#endif\n                paramattrs.push_back(params);\n            }\n            i++;\n        } while (current_isVa && i < nargs); // if is this is the vararg, loop to the end\n    }\n\n    for (i = 0; i < nargs + sret; ++i) {\n#if JL_LLVM_VERSION >= 50000\n        const AttributeList &as = paramattrs.at(i);\n#else\n        const AttributeSet &as = paramattrs.at(i);\n#endif\n        if (!as.isEmpty())\n            attributes = attributes.addAttributes(jl_LLVMContext, i + 1, as);\n    }\n    if (rt == jl_bottom_type) {\n        attributes = attributes.addAttribute(jl_LLVMContext,\n#if JL_LLVM_VERSION >= 50000\n                                             AttributeList::FunctionIndex,\n#else\n                                             AttributeSet::FunctionIndex,\n#endif\n                                             Attribute::NoReturn);\n    }\n    return \"\";\n}\n};\n\nstatic std::pair<CallingConv::ID, bool> convert_cconv(jl_sym_t *lhd)\n{\n    // check for calling convention specifier\n    if (lhd == jl_symbol(\"stdcall\")) {\n        return std::make_pair(CallingConv::X86_StdCall, false);\n    }\n    else if (lhd == jl_symbol(\"cdecl\")) {\n        return std::make_pair(CallingConv::C, false);\n    }\n    else if (lhd == jl_symbol(\"fastcall\")) {\n        return std::make_pair(CallingConv::X86_FastCall, false);\n    }\n    else if (lhd == jl_symbol(\"thiscall\")) {\n        return std::make_pair(CallingConv::X86_ThisCall, false);\n    }\n    else if (lhd == jl_symbol(\"llvmcall\")) {\n        return std::make_pair(CallingConv::C, true);\n    }\n    jl_errorf(\"ccall: invalid calling convention %s\", jl_symbol_name(lhd));\n}\n\nstatic const std::string verify_ccall_sig(size_t nargs, jl_value_t *&rt, jl_value_t *at,\n                                          jl_unionall_t *unionall_env, jl_svec_t *sparam_vals, const char *funcName,\n                                          size_t &nargt, bool &isVa, Type *&lrt, bool &retboxed, bool &static_rt)\n{\n    assert(rt && !jl_is_abstract_ref_type(rt));\n    JL_TYPECHK(ccall, type, rt);\n    JL_TYPECHK(ccall, simplevector, at);\n\n    if (jl_is_array_type(rt)) {\n        // `Array` used as return type just returns a julia object reference\n        rt = (jl_value_t*)jl_any_type;\n    }\n\n    lrt = julia_struct_to_llvm(rt, unionall_env, &retboxed);\n    if (lrt == NULL)\n        return \"ccall: return type doesn't correspond to a C type\";\n\n    // is return type fully statically known?\n    if (unionall_env == NULL) {\n        static_rt = true;\n    }\n    else {\n        static_rt = retboxed || !jl_has_typevar_from_unionall(rt, unionall_env);\n        if (!static_rt && sparam_vals != NULL && jl_svec_len(sparam_vals) > 0) {\n            rt = jl_instantiate_type_in_env(rt, unionall_env, jl_svec_data(sparam_vals));\n            // `rt` is gc-rooted by the caller\n            static_rt = true;\n        }\n    }\n\n    if (!retboxed && static_rt) {\n        if (!jl_is_leaf_type(rt)) {\n            if (jl_is_cpointer_type(rt))\n                return \"ccall: return type Ptr should have an element type (not Ptr{_<:T})\";\n            else if (rt != jl_bottom_type)\n                return \"ccall: return type must be a leaf DataType\";\n        }\n    }\n\n    nargt = jl_svec_len(at);\n    isVa = (nargt > 0 && jl_is_vararg_type(jl_svecref(at, nargt - 1)));\n    if ((!isVa && nargt    != (nargs - 2) / 2) ||\n        ( isVa && nargt - 1 > (nargs - 2) / 2))\n        return \"ccall: wrong number of arguments to C function\";\n\n    return \"\";\n}\n\n// Expr(:foreigncall, pointer, rettype, (argtypes...), args...)\nstatic jl_cgval_t emit_ccall(jl_value_t **args, size_t nargs, jl_codectx_t *ctx)\n{\n    JL_NARGSV(ccall, 3);\n    args -= 1;\n    jl_value_t *rt = args[2];\n    jl_value_t *at = args[3];\n    native_sym_arg_t symarg = {};\n    JL_GC_PUSH3(&rt, &at, &symarg.gcroot);\n\n    CallingConv::ID cc = CallingConv::C;\n    bool llvmcall = false;\n    if (nargs % 2 == 0) {\n        jl_value_t *last = args[nargs];\n        JL_TYPECHK(ccall, expr, last);\n        std::tie(cc, llvmcall) = convert_cconv(((jl_expr_t*)last)->head);\n        nargs -= 1;\n    }\n\n    interpret_symbol_arg(symarg, args[1], ctx, \"ccall\", llvmcall);\n    Value *&jl_ptr = symarg.jl_ptr;\n    void (*&fptr)(void) = symarg.fptr;\n    const char *&f_name = symarg.f_name;\n    const char *&f_lib = symarg.f_lib;\n\n    if (f_name == NULL && fptr == NULL && jl_ptr == NULL) {\n        emit_error(\"ccall: null function pointer\", ctx);\n        JL_GC_POP();\n        return jl_cgval_t();\n    }\n\n    jl_unionall_t *unionall = (ctx->linfo->def && jl_is_unionall(ctx->linfo->def->sig))\n        ? (jl_unionall_t*)ctx->linfo->def->sig\n        : NULL;\n\n    if (jl_is_abstract_ref_type(rt)) {\n        // emit verification that the tparam for Ref isn't Any or a TypeVar\n        jl_value_t *ref = jl_tparam0(rt);\n        bool always_error = false;\n        if (ref == (jl_value_t*)jl_any_type) {\n            always_error = true;\n        }\n        else if (jl_is_typevar(ref)) {\n            always_error = true;\n            if (unionall) {\n                int i;\n                jl_unionall_t *ua = unionall;\n                for (i = 0; jl_is_unionall(ua); i++) {\n                    if (ua->var == (jl_tvar_t*)ref) {\n                        jl_cgval_t runtime_sp = emit_sparam(i, ctx);\n                        if (runtime_sp.constant) {\n                            if (runtime_sp.constant != (jl_value_t*)jl_any_type)\n                                always_error = false;\n                        }\n                        else {\n                            Value *notany = builder.CreateICmpNE(\n                                    boxed(runtime_sp, ctx, false),\n                                    literal_pointer_val((jl_value_t*)jl_any_type));\n                            error_unless(notany, \"ccall: return type Ref{Any} is invalid. use Ptr{Any} instead.\", ctx);\n                            always_error = false;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        if (always_error) {\n            emit_error(\"ccall: return type Ref{Any} is invalid. use Ptr{Any} instead.\", ctx);\n            JL_GC_POP();\n            return jl_cgval_t();\n        }\n        rt = (jl_value_t*)jl_any_type; // convert return type to jl_value_t*\n    }\n\n    // check if we require the runtime\n    // TODO: could be more fine-grained,\n    //       respecting special functions below that don't require the runtime\n    if (!llvmcall && (!f_lib || f_lib == JL_DL_LIBNAME))\n        JL_FEAT_REQUIRE(ctx, runtime);\n\n    // some sanity checking and check whether there's a vararg\n    bool isVa;\n    size_t nargt;\n    Type *lrt;\n    bool retboxed;\n    bool static_rt;\n    std::string err = verify_ccall_sig(\n            /* inputs:  */\n            nargs, rt, at, unionall,\n            ctx->spvals_ptr == NULL ? ctx->linfo->sparam_vals : NULL,\n            ctx->funcName.c_str(),\n            /* outputs: */\n            nargt, isVa, lrt, retboxed, static_rt);\n    if (!err.empty()) {\n        emit_error(err, ctx);\n        JL_GC_POP();\n        return jl_cgval_t();\n    }\n    if (rt != args[2] && rt != (jl_value_t*)jl_any_type)\n        jl_add_method_root(ctx, rt);\n\n    auto _is_libjulia_func = [&] (uintptr_t ptr, const char *name) {\n        if ((uintptr_t)fptr == ptr)\n            return true;\n        return (!f_lib || f_lib == JL_DL_LIBNAME) && f_name && !strcmp(f_name, name);\n    };\n#define is_libjulia_func(name) _is_libjulia_func((uintptr_t)&(name), #name)\n\n#ifdef _OS_LINUX_\n    // directly accessing the address of an ifunc can cause linker issue on\n    // some configurations (e.g. AArch64 + -Bsymbolic-functions).\n    static const auto ptls_getter = jl_dlsym_e(jl_dlopen(nullptr, 0),\n                                               \"jl_get_ptls_states\");\n#else\n    static const auto ptls_getter = &jl_get_ptls_states;\n#endif\n\n    // some special functions\n    if (is_libjulia_func(jl_array_ptr)) {\n        assert(lrt->isPointerTy());\n        assert(!isVa && !llvmcall);\n        assert(nargt==1);\n        jl_value_t *argi = args[4];\n        assert(!(jl_is_expr(argi) && ((jl_expr_t*)argi)->head == amp_sym));\n        jl_cgval_t ary = emit_expr(argi, ctx);\n        JL_GC_POP();\n        return mark_or_box_ccall_result(emit_bitcast(emit_arrayptr(ary, ctx), lrt),\n                                        retboxed, rt, unionall, static_rt, ctx);\n    }\n    else if (is_libjulia_func(jl_value_ptr)) {\n        assert(lrt->isPointerTy());\n        assert(!isVa && !llvmcall);\n        assert(nargt==1);\n        jl_value_t *argi = args[4];\n        bool addressOf = false;\n        jl_value_t *tti = jl_svecref(at, 0);\n        if (jl_is_expr(argi) && ((jl_expr_t*)argi)->head == amp_sym) {\n            addressOf = true;\n            argi = jl_exprarg(argi,0);\n        }\n        else if (jl_is_abstract_ref_type(tti)) {\n            tti = (jl_value_t*)jl_voidpointer_type;\n        }\n        Value *ary;\n        Type *largty;\n        bool isboxed;\n        if (addressOf) {\n            largty = T_pjlvalue;\n            isboxed = true;\n        }\n        else {\n            largty = julia_struct_to_llvm(tti, unionall, &isboxed);\n        }\n        if (isboxed) {\n            ary = boxed(emit_expr(argi, ctx), ctx);\n        }\n        else {\n            assert(!addressOf);\n            ary = emit_unbox(largty, emit_expr(argi, ctx), tti);\n        }\n        JL_GC_POP();\n        return mark_or_box_ccall_result(emit_bitcast(ary, lrt),\n                                        retboxed, rt, unionall, static_rt, ctx);\n    }\n    else if (is_libjulia_func(jl_cpu_pause)) {\n        // Keep in sync with the julia_threads.h version\n        assert(lrt == T_void);\n        assert(!isVa && !llvmcall);\n        assert(nargt == 0);\n#ifdef __MIC__\n        // TODO\n#elif defined(_CPU_X86_64_) || defined(_CPU_X86_)  /* !__MIC__ */\n#if JL_LLVM_VERSION >= 30700\n        static auto pauseinst = InlineAsm::get(FunctionType::get(T_void, false), \"pause\",\n                                               \"~{memory}\", true);\n        builder.CreateCall(pauseinst);\n        JL_GC_POP();\n        return ghostValue(jl_void_type);\n#endif\n#elif defined(_CPU_AARCH64_) || (defined(_CPU_ARM_) && __ARM_ARCH >= 7)\n        static auto wfeinst = InlineAsm::get(FunctionType::get(T_void, false), \"wfe\",\n                                             \"~{memory}\", true);\n        builder.CreateCall(wfeinst);\n        JL_GC_POP();\n        return ghostValue(jl_void_type);\n#else\n        JL_GC_POP();\n        return ghostValue(jl_void_type);\n#endif\n    }\n    else if (is_libjulia_func(jl_cpu_wake)) {\n        // Keep in sync with the julia_threads.h version\n        assert(lrt == T_void);\n        assert(!isVa && !llvmcall);\n        assert(nargt == 0);\n#if JL_CPU_WAKE_NOOP == 1\n        JL_GC_POP();\n        return ghostValue(jl_void_type);\n#elif defined(_CPU_AARCH64_) || (defined(_CPU_ARM_) && __ARM_ARCH >= 7)\n        static auto sevinst = InlineAsm::get(FunctionType::get(T_void, false), \"sev\",\n                                             \"~{memory}\", true);\n        builder.CreateCall(sevinst);\n        JL_GC_POP();\n        return ghostValue(jl_void_type);\n#endif\n    }\n    else if (is_libjulia_func(jl_gc_safepoint)) {\n        assert(lrt == T_void);\n        assert(!isVa && !llvmcall);\n        assert(nargt == 0);\n        JL_GC_POP();\n        builder.CreateCall(prepare_call(gcroot_flush_func));\n        emit_signal_fence();\n        builder.CreateLoad(ctx->signalPage, true);\n        emit_signal_fence();\n        return ghostValue(jl_void_type);\n    }\n    else if (_is_libjulia_func((uintptr_t)ptls_getter, \"jl_get_ptls_states\")) {\n        assert(lrt == T_pint8);\n        assert(!isVa && !llvmcall);\n        assert(nargt == 0);\n        JL_GC_POP();\n        return mark_or_box_ccall_result(\n            emit_bitcast(ctx->ptlsStates, lrt),\n            retboxed, rt, unionall, static_rt, ctx);\n    }\n    else if (is_libjulia_func(jl_threadid)) {\n        assert(lrt == T_int16);\n        assert(!isVa && !llvmcall);\n        assert(nargt == 0);\n        JL_GC_POP();\n        Value *ptls_i16 = emit_bitcast(ctx->ptlsStates, T_pint16);\n        const int tid_offset = offsetof(jl_tls_states_t, tid);\n        Value *ptid = builder.CreateGEP(ptls_i16, ConstantInt::get(T_size, tid_offset / 2));\n        return mark_or_box_ccall_result(\n            tbaa_decorate(tbaa_const, builder.CreateLoad(ptid)),\n            retboxed, rt, unionall, static_rt, ctx);\n    }\n    else if (is_libjulia_func(jl_sigatomic_begin)) {\n        assert(lrt == T_void);\n        assert(!isVa && !llvmcall);\n        assert(nargt == 0);\n        JL_GC_POP();\n        builder.CreateCall(prepare_call(gcroot_flush_func));\n        Value *pdefer_sig = emit_defer_signal(ctx);\n        Value *defer_sig = builder.CreateLoad(pdefer_sig);\n        defer_sig = builder.CreateAdd(defer_sig,\n                                      ConstantInt::get(T_sigatomic, 1));\n        builder.CreateStore(defer_sig, pdefer_sig);\n        emit_signal_fence();\n        return ghostValue(jl_void_type);\n    }\n    else if (is_libjulia_func(jl_sigatomic_end)) {\n        assert(lrt == T_void);\n        assert(!isVa && !llvmcall);\n        assert(nargt == 0);\n        JL_GC_POP();\n        builder.CreateCall(prepare_call(gcroot_flush_func));\n        Value *pdefer_sig = emit_defer_signal(ctx);\n        Value *defer_sig = builder.CreateLoad(pdefer_sig);\n        emit_signal_fence();\n        error_unless(builder.CreateICmpNE(defer_sig,\n                                          ConstantInt::get(T_sigatomic, 0)),\n                     \"sigatomic_end called in non-sigatomic region\", ctx);\n        defer_sig = builder.CreateSub(defer_sig,\n                                      ConstantInt::get(T_sigatomic, 1));\n        builder.CreateStore(defer_sig, pdefer_sig);\n        BasicBlock *checkBB = BasicBlock::Create(jl_LLVMContext, \"check\",\n                                                 ctx->f);\n        BasicBlock *contBB = BasicBlock::Create(jl_LLVMContext, \"cont\");\n        builder.CreateCondBr(\n            builder.CreateICmpEQ(defer_sig, ConstantInt::get(T_sigatomic, 0)),\n            checkBB, contBB);\n        builder.SetInsertPoint(checkBB);\n        builder.CreateLoad(builder.CreateConstGEP1_32(ctx->signalPage, -1),\n                           true);\n        builder.CreateBr(contBB);\n        ctx->f->getBasicBlockList().push_back(contBB);\n        builder.SetInsertPoint(contBB);\n        return ghostValue(jl_void_type);\n    }\n    else if (is_libjulia_func(jl_is_leaf_type)) {\n        assert(nargt == 1);\n        assert(!isVa && !llvmcall);\n        jl_value_t *arg = args[4];\n        jl_value_t *ty = expr_type(arg, ctx);\n        if (jl_is_type_type(ty) && !jl_is_typevar(jl_tparam0(ty))) {\n            int isleaf = jl_is_leaf_type(jl_tparam0(ty));\n            JL_GC_POP();\n            return mark_or_box_ccall_result(ConstantInt::get(T_int32, isleaf),\n                    false, rt, unionall, static_rt, ctx);\n        }\n    }\n    else if (is_libjulia_func(jl_function_ptr)) {\n        assert(nargt == 3);\n        assert(!isVa && !llvmcall);\n        jl_value_t *f = static_eval(args[4], ctx, false, false);\n        jl_value_t *fargt = nullptr;\n        JL_GC_PUSH2(&f, &fargt);\n        jl_value_t *frt = expr_type(args[6], ctx);\n        if (f && (jl_is_type_type((jl_value_t*)frt) && !jl_has_free_typevars(jl_tparam0(frt)))) {\n            fargt = static_eval(args[8], ctx, true, true);\n            if (fargt) {\n                if (jl_is_tuple(fargt)) {\n                    // TODO: maybe deprecation warning, better checking\n                    fargt = (jl_value_t*)jl_apply_tuple_type_v((jl_value_t**)jl_data_ptr(fargt), jl_nfields(fargt));\n                }\n            }\n            else {\n                fargt = expr_type(args[8], ctx);\n                if (jl_is_type_type((jl_value_t*)fargt))\n                    fargt = jl_tparam0(fargt);\n            }\n            if (jl_is_tuple_type(fargt) && jl_is_leaf_type(fargt)) {\n                frt = jl_tparam0(frt);\n                Value *llvmf = NULL;\n                JL_TRY {\n                    llvmf = jl_cfunction_object((jl_function_t*)f, frt, (jl_tupletype_t*)fargt);\n                }\n                JL_CATCH {\n                    llvmf = NULL;\n                }\n                if (llvmf) {\n                    llvmf = prepare_call(llvmf);\n                    // make sure to emit any side-effects that may have been part of the original expression\n                    emit_expr(args[4], ctx);\n                    emit_expr(args[6], ctx);\n                    emit_expr(args[8], ctx);\n                    JL_GC_POP();\n                    JL_GC_POP();\n                    return mark_or_box_ccall_result(emit_bitcast(llvmf, lrt),\n                                                    retboxed, rt, unionall, static_rt, ctx);\n                }\n            }\n        }\n        JL_GC_POP();\n    }\n    else if (is_libjulia_func(jl_array_isassigned) &&\n             expr_type(args[6], ctx) == (jl_value_t*)jl_ulong_type) {\n        assert(nargt == 2);\n        jl_value_t *aryex = args[4];\n        jl_value_t *idxex = args[6];\n        jl_value_t *aryty = expr_type(aryex, ctx);\n        if (jl_is_array_type(aryty)) {\n            jl_value_t *ety = jl_tparam0(aryty);\n            if (jl_isbits(ety)) {\n                emit_expr(aryex, ctx);\n                emit_expr(idxex, ctx);\n                JL_GC_POP();\n                return mark_or_box_ccall_result(ConstantInt::get(T_int32, 1),\n                                                false, rt, unionall, static_rt, ctx);\n            }\n            else if (!jl_has_free_typevars(ety)) { // TODO: jn/foreigncall branch has a better predicate\n                jl_cgval_t aryv = emit_expr(aryex, ctx);\n                Value *idx = emit_unbox(T_size, emit_expr(idxex, ctx), (jl_value_t*)jl_ulong_type);\n                Value *arrayptr = emit_bitcast(emit_arrayptr(aryv, aryex, ctx), T_ppjlvalue);\n                Value *slot_addr = builder.CreateGEP(arrayptr, idx);\n                Value *load = tbaa_decorate(tbaa_arraybuf, builder.CreateLoad(slot_addr));\n                Value *res = builder.CreateZExt(builder.CreateICmpNE(load, V_null), T_int32);\n                JL_GC_POP();\n                return mark_or_box_ccall_result(res, retboxed, rt, unionall, static_rt, ctx);\n            }\n        }\n    }\n\n    // emit arguments\n    jl_cgval_t *argv = (jl_cgval_t*)alloca(sizeof(jl_cgval_t) * (nargs - 3) / 2);\n    SmallVector<Value*, 16> gc_uses;\n    std::vector<bool> addressOf(0);\n\n    size_t i;\n    for (i = 4; i < nargs + 1; i += 2) {\n        // Current C function parameter\n        size_t ai = (i - 4) / 2;\n\n        // Julia (expression) value of current parameter\n        jl_value_t *argi = args[i];\n\n        // pass the address of the argument rather than the argument itself\n        if (jl_is_expr(argi) && ((jl_expr_t*)argi)->head == amp_sym) {\n            addressOf.push_back(true);\n            argi = jl_exprarg(argi, 0);\n        }\n        else {\n            addressOf.push_back(false);\n        }\n\n        jl_cgval_t &arg = argv[ai];\n        arg = emit_expr((jl_value_t*)argi, ctx);\n        push_gc_use(gc_uses, arg);\n\n        // Julia (expression) value of current parameter gcroot\n        jl_value_t *argi_root = args[i + 1];\n        if (jl_is_long(argi_root))\n            continue;\n        jl_cgval_t arg_root = emit_expr(argi_root, ctx);\n        push_gc_use(gc_uses, arg_root);\n    }\n\n    function_sig_t sig(lrt, rt, retboxed, (jl_svec_t*)at, unionall, (nargs - 3) / 2, isVa, cc, llvmcall);\n    jl_cgval_t retval = sig.emit_a_ccall(\n            symarg,\n            nargt,\n            addressOf,\n            argv,\n            gc_uses,\n            static_rt,\n            ctx);\n    JL_GC_POP();\n    return retval;\n}\n\njl_cgval_t function_sig_t::emit_a_ccall(\n        const native_sym_arg_t &symarg,\n        size_t nargt,\n        std::vector<bool> &addressOf,\n        jl_cgval_t *argv,\n        SmallVector<Value*, 16> &gc_uses,\n        bool static_rt,\n        jl_codectx_t *ctx)\n{\n    if (!err_msg.empty()) {\n        emit_error(err_msg, ctx);\n        return jl_cgval_t();\n    }\n\n    // save place before arguments, for possible insertion of temp arg area saving code.\n    BasicBlock::InstListType &instList = builder.GetInsertBlock()->getInstList();\n    Instruction *savespot = instList.empty() ? NULL : &instList.back();\n\n    bool needStackRestore = false;\n    Value **argvals = (Value**) alloca((nargs + sret) * sizeof(Value*));\n    for (size_t ai = 0; ai < nargs; ai++) {\n        // Current C function parameter\n        Type *largty; // LLVM type of the current parameter\n        bool toboxed;\n        jl_value_t *jargty; // Julia type of the current parameter\n        bool byRef; // Argument attributes\n        if (isVa && ai >= nargt - 1) {\n            largty = fargt.at(nargt - 1);\n            toboxed = fargt_isboxed.at(nargt - 1);\n            jargty = jl_unwrap_vararg(jl_svecref(at, nargt - 1));\n            byRef = byRefList.at(nargt - 1);\n        }\n        else {\n            largty = fargt.at(ai);\n            toboxed = fargt_isboxed.at(ai);\n            jargty = jl_svecref(at, ai);\n            byRef = byRefList.at(ai);\n        }\n        Type *pargty = ai + sret < fargt_sig.size() ? fargt_sig.at(ai + sret) : fargt_vasig;\n        jl_cgval_t &arg = argv[ai];\n\n        // if we know the function sparams, try to fill those in now\n        // so that the julia_to_native type checks are more likely to be doable (e.g. leaf types) at compile-time\n        jl_value_t *jargty_in_env = jargty;\n        if (ctx->spvals_ptr == NULL && !toboxed && unionall_env && jl_has_typevar_from_unionall(jargty, unionall_env) &&\n            jl_svec_len(ctx->linfo->sparam_vals) > 0) {\n            jargty_in_env = jl_instantiate_type_in_env(jargty_in_env, unionall_env, jl_svec_data(ctx->linfo->sparam_vals));\n            if (jargty_in_env != jargty)\n                jl_add_method_root(ctx, jargty_in_env);\n        }\n\n        Value *v;\n        if (!addressOf.at(ai)) {\n            if (jl_is_abstract_ref_type(jargty)) {\n                if (!jl_is_cpointer_type(arg.typ)) {\n                    emit_cpointercheck(arg, \"ccall: argument to Ref{T} is not a pointer\", ctx);\n                    arg.typ = (jl_value_t*)jl_voidpointer_type;\n                    arg.isboxed = false;\n                }\n                jargty_in_env = (jl_value_t*)jl_voidpointer_type;\n            }\n\n            v = julia_to_native(largty, toboxed, jargty_in_env, unionall_env, arg, byRef,\n                                ai + 1, ctx, &needStackRestore);\n            bool issigned = jl_signed_type && jl_subtype(jargty, (jl_value_t*)jl_signed_type);\n            if (byRef) {\n                // julia_to_native should already have done the alloca and store\n                assert(v->getType() == pargty);\n            }\n            else {\n                v = llvm_type_rewrite(v, pargty, issigned, ctx);\n            }\n        }\n        else {\n            if (jl_is_abstract_ref_type(jargty)) {\n                emit_error(\"ccall: & on a Ref{T} argument is invalid\", ctx);\n                return jl_cgval_t();\n            }\n            v = julia_to_address(largty, jargty_in_env, unionall_env, arg,\n                                 ai + 1, ctx, &needStackRestore);\n            assert((!toboxed && !byRef) || isa<UndefValue>(v));\n        }\n\n        if (isa<UndefValue>(v)) {\n            return jl_cgval_t();\n        }\n        assert(v->getType() == pargty);\n        argvals[ai + sret] = v;\n    }\n\n    Value *result = NULL;\n    // First, if the ABI requires us to provide the space for the return\n    // argument, allocate the box and store that as the first argument type\n    bool sretboxed = false;\n    if (sret) {\n        assert(!retboxed && jl_is_datatype(rt) && \"sret return type invalid\");\n        if (jl_isbits(rt)) {\n            result = emit_static_alloca(lrt, ctx);\n        }\n        else {\n            // XXX: result needs to be zero'd and given a GC root here\n            assert(jl_datatype_size(rt) > 0 && \"sret shouldn't be a singleton instance\");\n            result = emit_allocobj(ctx, jl_datatype_size(rt),\n                                   literal_pointer_val((jl_value_t*)rt));\n            sretboxed = true;\n        }\n        argvals[0] = emit_bitcast(result, fargt_sig.at(0));\n    }\n\n    Instruction *stacksave = NULL;\n    if (needStackRestore) {\n        stacksave = CallInst::Create(Intrinsic::getDeclaration(jl_Module,\n                                                               Intrinsic::stacksave));\n        if (savespot) {\n#if JL_LLVM_VERSION >= 30800\n            instList.insertAfter(savespot->getIterator(), stacksave);\n#else\n            instList.insertAfter(savespot, stacksave);\n#endif\n        }\n        else {\n            instList.push_front(stacksave);\n        }\n    }\n\n    // make LLVM function object for the target\n    // keep this close to the function call, so that the compiler can\n    // optimize the global pointer load in the common case\n    Value *llvmf;\n    if (llvmcall) {\n        if (symarg.jl_ptr != NULL) {\n            jl_error(\"llvmcall doesn't support dynamic pointers\");\n        }\n        else if (symarg.fptr != NULL) {\n            jl_error(\"llvmcall doesn't support static pointers\");\n        }\n        else if (symarg.f_lib != NULL) {\n            jl_error(\"llvmcall doesn't support dynamic libraries\");\n        }\n        else {\n            assert(symarg.f_name != NULL);\n            llvmf = jl_Module->getOrInsertFunction(symarg.f_name, functype);\n            if (!isa<Function>(llvmf) || cast<Function>(llvmf)->getIntrinsicID() == Intrinsic::not_intrinsic)\n                jl_error(\"llvmcall only supports intrinsic calls\");\n        }\n    }\n    else if (symarg.jl_ptr != NULL) {\n        null_pointer_check(symarg.jl_ptr, ctx);\n        Type *funcptype = PointerType::get(functype, 0);\n        llvmf = builder.CreateIntToPtr(symarg.jl_ptr, funcptype);\n    }\n    else if (symarg.fptr != NULL) {\n        Type *funcptype = PointerType::get(functype, 0);\n        llvmf = literal_static_pointer_val((void*)(uintptr_t)symarg.fptr, funcptype);\n        if (imaging_mode)\n            jl_printf(JL_STDERR,\"WARNING: literal address used in ccall for %s; code cannot be statically compiled\\n\", symarg.f_name);\n    }\n    else {\n        assert(symarg.f_name != NULL);\n\n        PointerType *funcptype = PointerType::get(functype, 0);\n        if (imaging_mode) {\n            // vararg requires musttail,\n            // but musttail is incompatible with noreturn.\n            if (functype->isVarArg())\n                llvmf = runtime_sym_lookup(funcptype, symarg.f_lib, symarg.f_name, ctx->f);\n            else\n                llvmf = emit_plt(functype, attributes, cc, symarg.f_lib, symarg.f_name);\n        }\n        else {\n            void *symaddr = jl_dlsym_e(jl_get_library(symarg.f_lib), symarg.f_name);\n            if (symaddr == NULL) {\n                std::stringstream msg;\n                msg << \"ccall: could not find function \";\n                msg << symarg.f_name;\n                if (symarg.f_lib != NULL) {\n#ifdef _OS_WINDOWS_\n                    assert(symarg.f_lib != JL_EXE_LIBNAME && symarg.f_lib != JL_DL_LIBNAME);\n#endif\n                    msg << \" in library \";\n                    msg << symarg.f_lib;\n                }\n                emit_error(msg.str(), ctx);\n                return jl_cgval_t();\n            }\n            // since we aren't saving this code, there's no sense in\n            // putting anything complicated here: just JIT the function address\n            llvmf = literal_static_pointer_val(symaddr, funcptype);\n        }\n    }\n\n    // Mark GC use before **and** after the ccall to make sure the arguments\n    // are alive during the ccall even if the function called is `noreturn`.\n    mark_gc_uses(gc_uses);\n    // the actual call\n    Value *ret = builder.CreateCall(prepare_call(llvmf),\n                                    ArrayRef<Value*>(&argvals[0], nargs + sret));\n    ((CallInst*)ret)->setAttributes(attributes);\n\n    if (cc != CallingConv::C)\n        ((CallInst*)ret)->setCallingConv(cc);\n    if (!sret)\n        result = ret;\n    if (needStackRestore) {\n        assert(stacksave != NULL);\n        builder.CreateCall(Intrinsic::getDeclaration(jl_Module, Intrinsic::stackrestore), stacksave);\n    }\n    if (0) { // Enable this to turn on SSPREQ (-fstack-protector) on the function containing this ccall\n        ctx->f->addFnAttr(Attribute::StackProtectReq);\n    }\n\n    mark_gc_uses(gc_uses);\n    if (rt == jl_bottom_type) {\n        // Do this after we marked all the GC uses.\n        CreateTrap(builder);\n        return jl_cgval_t();\n    }\n\n    // Finally we need to box the result into julia type\n    // However, if we have already created a box for the return\n    // type because the ABI required us to pass a pointer (sret),\n    // then we do not need to do this.\n    bool jlretboxed;\n    if (retboxed) {\n        assert(!sret);\n        jlretboxed = true;\n    }\n    else if (sret) {\n        jlretboxed = sretboxed;\n        if (!jlretboxed) {\n            // something alloca'd above is SSA\n            if (static_rt)\n                return mark_julia_slot(result, rt, NULL, tbaa_stack);\n            result = builder.CreateLoad(result);\n        }\n    }\n    else {\n        Type *jlrt = julia_type_to_llvm(rt, &jlretboxed); // compute the real \"julian\" return type and compute whether it is boxed\n        if (type_is_ghost(jlrt)) {\n            return ghostValue(rt);\n        }\n        else if (jl_is_datatype(rt) && jl_is_datatype_singleton((jl_datatype_t*)rt)) {\n            return mark_julia_const(((jl_datatype_t*)rt)->instance);\n        }\n        else if (jlretboxed && !retboxed) {\n            assert(jl_is_datatype(rt));\n            if (static_rt) {\n                Value *runtime_bt = literal_pointer_val(rt);\n                size_t rtsz = jl_datatype_size(rt);\n                assert(rtsz > 0);\n                Value *strct = emit_allocobj(ctx, rtsz, runtime_bt);\n                int boxalign = jl_gc_alignment(rtsz);\n#ifndef JL_NDEBUG\n#if JL_LLVM_VERSION >= 30600\n                const DataLayout &DL = jl_ExecutionEngine->getDataLayout();\n#else\n                const DataLayout &DL = *jl_ExecutionEngine->getDataLayout();\n#endif\n                // ARM and AArch64 can use a LLVM type larger than the julia\n                // type. However, the LLVM type size should be no larger than\n                // the GC allocation size. (multiple of `sizeof(void*)`)\n                assert(DL.getTypeStoreSize(lrt) <= LLT_ALIGN(rtsz, boxalign));\n#endif\n                // copy the data from the return value to the new struct\n                MDNode *tbaa = jl_is_mutable(rt) ? tbaa_mutab : tbaa_immut;\n                init_bits_value(strct, result, tbaa, boxalign);\n                return mark_julia_type(strct, true, rt, ctx);\n            }\n            jlretboxed = false; // trigger mark_or_box_ccall_result to build the runtime box\n        }\n        else if (lrt != prt) {\n            assert(jlrt == lrt || !lrt->isStructTy()); // julia_type_to_llvm and julia_struct_to_llvm should be returning the same StructType\n            result = llvm_type_rewrite(result, lrt, false, ctx);\n        }\n    }\n\n    return mark_or_box_ccall_result(result, jlretboxed, rt, unionall_env, static_rt, ctx);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/src/jitlayers.cpp": "// This file is a part of Julia. License is MIT: https://julialang.org/license\n\n#include \"llvm-version.h\"\n#include \"platform.h\"\n#include \"options.h\"\n#include <iostream>\n#include <sstream>\n\n// analysis passes\n#include <llvm/Analysis/Passes.h>\n#if JL_LLVM_VERSION >= 30800\n#include <llvm/Analysis/BasicAliasAnalysis.h>\n#include <llvm/Analysis/TypeBasedAliasAnalysis.h>\n#endif\n#if JL_LLVM_VERSION >= 30700\n#include <llvm/Analysis/TargetTransformInfo.h>\n#include <llvm/Analysis/TargetLibraryInfo.h>\n#endif\n#if JL_LLVM_VERSION >= 30500\n#include <llvm/IR/Verifier.h>\n#else\n#include <llvm/Analysis/Verifier.h>\n#endif\n#if defined(USE_POLLY)\n#include <polly/RegisterPasses.h>\n#include <polly/LinkAllPasses.h>\n#include <polly/CodeGen/CodegenCleanup.h>\n#endif\n\n#include <llvm/Transforms/IPO.h>\n#include <llvm/Transforms/Scalar.h>\n#include <llvm/Transforms/Utils/BasicBlockUtils.h>\n#include <llvm/Transforms/Instrumentation.h>\n#include <llvm/Transforms/Vectorize.h>\n#if JL_LLVM_VERSION >= 30900\n#include <llvm/Transforms/Scalar/GVN.h>\n#endif\n#if JL_LLVM_VERSION >= 40000\n#include <llvm/Transforms/IPO/AlwaysInliner.h>\n#endif\n\nnamespace llvm {\n    extern Pass *createLowerSimdLoopPass();\n}\n\n#if JL_LLVM_VERSION >= 40000\n#  include <llvm/Bitcode/BitcodeWriter.h>\n#else\n#  include <llvm/Bitcode/ReaderWriter.h>\n#endif\n#if JL_LLVM_VERSION >= 30500\n#include <llvm/Bitcode/BitcodeWriterPass.h>\n#endif\n\n#include <llvm/Transforms/Utils/Cloning.h>\n#include <llvm/ExecutionEngine/JITEventListener.h>\n\n// target support\n#include <llvm/ADT/Triple.h>\n#include <llvm/Support/TargetRegistry.h>\n#if JL_LLVM_VERSION < 30700\n#include <llvm/Target/TargetLibraryInfo.h>\n#endif\n#include <llvm/IR/DataLayout.h>\n#include <llvm/Support/DynamicLibrary.h>\n\n\n#include <llvm/Support/raw_ostream.h>\n#include <llvm/Support/FormattedStream.h>\n#include <llvm/ADT/StringMap.h>\n#include <llvm/ADT/StringSet.h>\n#include <llvm/ADT/SmallSet.h>\n#include \"fix_llvm_assert.h\"\n\nusing namespace llvm;\n\n#include \"julia.h\"\n#include \"julia_internal.h\"\n#include \"jitlayers.h\"\n#ifdef USE_MCJIT\nRTDyldMemoryManager* createRTDyldMemoryManager(void);\n#endif\n\nstatic Type *T_void;\nstatic IntegerType *T_uint32;\nstatic IntegerType *T_uint64;\nstatic IntegerType *T_size;\nstatic Type *T_psize;\nstatic Type *T_pvoidfunc;\nstatic Type *T_pjlvalue;\nvoid jl_init_jit(Type *T_pjlvalue_)\n{\n    T_void = Type::getVoidTy(jl_LLVMContext);\n    T_uint32 = Type::getInt32Ty(jl_LLVMContext);\n    T_uint64 = Type::getInt64Ty(jl_LLVMContext);\n    if (sizeof(size_t) == 8)\n        T_size = T_uint64;\n    else\n        T_size = T_uint32;\n    T_psize = PointerType::get(T_size, 0);\n    T_pvoidfunc = FunctionType::get(T_void, /*isVarArg*/false)->getPointerTo();\n    T_pjlvalue = T_pjlvalue_;\n}\n\n// Except for parts of this file which were copied from LLVM, under the UIUC license (marked below).\n\n// this defines the set of optimization passes defined for Julia at various optimization levels\n#if JL_LLVM_VERSION >= 30700\nvoid addOptimizationPasses(legacy::PassManager *PM)\n#else\nvoid addOptimizationPasses(PassManager *PM)\n#endif\n{\n    PM->add(createLowerGCFramePass());\n#ifdef JL_DEBUG_BUILD\n    PM->add(createVerifierPass());\n#endif\n\n#if defined(JL_ASAN_ENABLED)\n#   if JL_LLVM_VERSION >= 30700 && JL_LLVM_VERSION < 30800\n    // LLVM 3.7 BUG: ASAN pass doesn't properly initialize its dependencies\n    initializeTargetLibraryInfoWrapperPassPass(*PassRegistry::getPassRegistry());\n#   endif\n    PM->add(createAddressSanitizerFunctionPass());\n#endif\n#if defined(JL_MSAN_ENABLED)\n    PM->add(llvm::createMemorySanitizerPass(true));\n#endif\n    if (jl_options.opt_level == 0) {\n        PM->add(createCFGSimplificationPass()); // Clean up disgusting code\n        PM->add(createMemCpyOptPass()); // Remove memcpy / form memset\n        PM->add(createLowerPTLSPass(imaging_mode));\n#if JL_LLVM_VERSION >= 40000\n        PM->add(createAlwaysInlinerLegacyPass()); // Respect always_inline\n#else\n        PM->add(createAlwaysInlinerPass()); // Respect always_inline\n#endif\n        return;\n    }\n#if JL_LLVM_VERSION >= 30700\n    PM->add(createTargetTransformInfoWrapperPass(jl_TargetMachine->getTargetIRAnalysis()));\n#else\n    jl_TargetMachine->addAnalysisPasses(*PM);\n#endif\n#if JL_LLVM_VERSION >= 30800\n    PM->add(createTypeBasedAAWrapperPass());\n#else\n    PM->add(createTypeBasedAliasAnalysisPass());\n#endif\n    if (jl_options.opt_level >= 3) {\n#if JL_LLVM_VERSION >= 30800\n        PM->add(createBasicAAWrapperPass());\n#else\n        PM->add(createBasicAliasAnalysisPass());\n#endif\n    }\n    // list of passes from vmkit\n    PM->add(createCFGSimplificationPass()); // Clean up disgusting code\n    PM->add(createPromoteMemoryToRegisterPass()); // Kill useless allocas\n\n    // hopefully these functions (from llvmcall) don't try to interact with the Julia runtime\n    // or have anything that might corrupt the createLowerPTLSPass pass\n#if JL_LLVM_VERSION >= 40000\n    PM->add(createAlwaysInlinerLegacyPass()); // Respect always_inline\n#else\n    PM->add(createAlwaysInlinerPass()); // Respect always_inline\n#endif\n\n#ifndef INSTCOMBINE_BUG\n    PM->add(createInstructionCombiningPass()); // Cleanup for scalarrepl.\n#endif\n    // Let the InstCombine pass remove the unnecessary load of\n    // safepoint address first\n    PM->add(createLowerPTLSPass(imaging_mode));\n    PM->add(createSROAPass());                 // Break up aggregate allocas\n#ifndef INSTCOMBINE_BUG\n    PM->add(createInstructionCombiningPass()); // Cleanup for scalarrepl.\n#endif\n    PM->add(createJumpThreadingPass());        // Thread jumps.\n    // NOTE: CFG simp passes after this point seem to hurt native codegen.\n    // See issue #6112. Should be re-evaluated when we switch to MCJIT.\n    //PM->add(createCFGSimplificationPass());    // Merge & remove BBs\n#ifndef INSTCOMBINE_BUG\n    PM->add(createInstructionCombiningPass()); // Combine silly seq's\n#endif\n\n    //PM->add(createCFGSimplificationPass());    // Merge & remove BBs\n    PM->add(createReassociatePass());          // Reassociate expressions\n\n    // this has the potential to make some things a bit slower\n    //PM->add(createBBVectorizePass());\n\n    PM->add(createEarlyCSEPass()); //// ****\n\n    PM->add(createLoopIdiomPass()); //// ****\n    PM->add(createLoopRotatePass());           // Rotate loops.\n#ifdef USE_POLLY\n    // LCSSA (which has already run at this point due to the dependencies of the\n    // above passes) introduces redundant phis that hinder Polly. Therefore we\n    // run InstCombine here to remove them.\n    PM->add(createInstructionCombiningPass());\n    PM->add(polly::createCodePreparationPass());\n    polly::registerPollyPasses(*PM);\n    PM->add(polly::createCodegenCleanupPass());\n#endif\n    // LoopRotate strips metadata from terminator, so run LowerSIMD afterwards\n    PM->add(createLowerSimdLoopPass());        // Annotate loop marked with \"simdloop\" as LLVM parallel loop\n    PM->add(createLICMPass());                 // Hoist loop invariants\n    PM->add(createLoopUnswitchPass());         // Unswitch loops.\n    // Subsequent passes not stripping metadata from terminator\n#ifndef INSTCOMBINE_BUG\n    PM->add(createInstructionCombiningPass());\n#endif\n    PM->add(createIndVarSimplifyPass());       // Canonicalize indvars\n    PM->add(createLoopDeletionPass());         // Delete dead loops\n#if JL_LLVM_VERSION >= 30500\n    PM->add(createSimpleLoopUnrollPass());     // Unroll small loops\n#else\n    PM->add(createLoopUnrollPass());           // Unroll small loops\n#endif\n#if JL_LLVM_VERSION < 30500 && !defined(INSTCOMBINE_BUG)\n    PM->add(createLoopVectorizePass());        // Vectorize loops\n#endif\n    //PM->add(createLoopStrengthReducePass());   // (jwb added)\n\n#ifndef INSTCOMBINE_BUG\n    PM->add(createInstructionCombiningPass()); // Clean up after the unroller\n#endif\n    PM->add(createGVNPass());                  // Remove redundancies\n    PM->add(createMemCpyOptPass());            // Remove memcpy / form memset\n    PM->add(createSCCPPass());                 // Constant prop with SCCP\n\n    // Run instcombine after redundancy elimination to exploit opportunities\n    // opened up by them.\n    PM->add(createSinkingPass()); ////////////// ****\n    PM->add(createInstructionSimplifierPass());///////// ****\n#ifndef INSTCOMBINE_BUG\n    PM->add(createInstructionCombiningPass());\n#endif\n    PM->add(createJumpThreadingPass());         // Thread jumps\n    PM->add(createDeadStoreEliminationPass());  // Delete dead stores\n\n    // see if all of the constant folding has exposed more loops\n    // to simplification and deletion\n    // this helps significantly with cleaning up iteration\n    PM->add(createCFGSimplificationPass());     // Merge & remove BBs\n    PM->add(createLoopIdiomPass());\n    PM->add(createLoopDeletionPass());          // Delete dead loops\n    PM->add(createJumpThreadingPass());         // Thread jumps\n\n#if JL_LLVM_VERSION >= 30500\n    if (jl_options.opt_level >= 3) {\n        PM->add(createSLPVectorizerPass());     // Vectorize straight-line code\n    }\n#endif\n\n    PM->add(createAggressiveDCEPass());         // Delete dead instructions\n#if JL_LLVM_VERSION >= 30500\n    if (jl_options.opt_level >= 3)\n        PM->add(createInstructionCombiningPass());   // Clean up after SLP loop vectorizer\n    PM->add(createLoopVectorizePass());         // Vectorize loops\n    PM->add(createInstructionCombiningPass());  // Clean up after loop vectorizer\n#endif\n}\n\n#ifdef USE_ORCJIT\n\n#if JL_LLVM_VERSION < 30800\nvoid notifyObjectLoaded(RTDyldMemoryManager *memmgr,\n                        llvm::orc::ObjectLinkingLayerBase::ObjSetHandleT H);\n#endif\n\n// ------------------------ TEMPORARILY COPIED FROM LLVM -----------------\n// This must be kept in sync with gdb/gdb/jit.h .\nextern \"C\" {\n\n  typedef enum {\n    JIT_NOACTION = 0,\n    JIT_REGISTER_FN,\n    JIT_UNREGISTER_FN\n  } jit_actions_t;\n\n  struct jit_code_entry {\n    struct jit_code_entry *next_entry;\n    struct jit_code_entry *prev_entry;\n    const char *symfile_addr;\n    uint64_t symfile_size;\n  };\n\n  struct jit_descriptor {\n    uint32_t version;\n    // This should be jit_actions_t, but we want to be specific about the\n    // bit-width.\n    uint32_t action_flag;\n    struct jit_code_entry *relevant_entry;\n    struct jit_code_entry *first_entry;\n  };\n\n  // We put information about the JITed function in this global, which the\n  // debugger reads.  Make sure to specify the version statically, because the\n  // debugger checks the version before we can set it during runtime.\n  extern struct jit_descriptor __jit_debug_descriptor;\n\n  LLVM_ATTRIBUTE_NOINLINE extern void __jit_debug_register_code();\n}\n\nnamespace {\n\n// Use a local variable to hold the addresses to avoid generating a PLT\n// on the function call.\n// It messes up the GDB lookup logic with dynamically linked LLVM.\n// (Ref https://sourceware.org/bugzilla/show_bug.cgi?id=20633)\n// Use `volatile` to make sure the call always loads this slot.\nvoid (*volatile jit_debug_register_code)() = __jit_debug_register_code;\n\nusing namespace llvm;\nusing namespace llvm::object;\nusing namespace llvm::orc;\n\n/// Do the registration.\nvoid NotifyDebugger(jit_code_entry *JITCodeEntry)\n{\n    __jit_debug_descriptor.action_flag = JIT_REGISTER_FN;\n\n    // Insert this entry at the head of the list.\n    JITCodeEntry->prev_entry = nullptr;\n    jit_code_entry *NextEntry = __jit_debug_descriptor.first_entry;\n    JITCodeEntry->next_entry = NextEntry;\n    if (NextEntry) {\n        NextEntry->prev_entry = JITCodeEntry;\n    }\n    __jit_debug_descriptor.first_entry = JITCodeEntry;\n    __jit_debug_descriptor.relevant_entry = JITCodeEntry;\n    jit_debug_register_code();\n}\n}\n// ------------------------ END OF TEMPORARY COPY FROM LLVM -----------------\n\n#if defined(_OS_LINUX_)\n// Resolve non-lock free atomic functions in the libatomic library.\n// This is the library that provides support for c11/c++11 atomic operations.\nstatic uint64_t resolve_atomic(const char *name)\n{\n    static void *atomic_hdl = jl_load_dynamic_library_e(\"libatomic\",\n                                                        JL_RTLD_LOCAL);\n    static const char *const atomic_prefix = \"__atomic_\";\n    if (!atomic_hdl)\n        return 0;\n    if (strncmp(name, atomic_prefix, strlen(atomic_prefix)) != 0)\n        return 0;\n    return (uintptr_t)jl_dlsym_e(atomic_hdl, name);\n}\n#endif\n\n// Custom object emission notification handler for the JuliaOJIT\nextern JITEventListener *CreateJuliaJITEventListener();\nJuliaOJIT::DebugObjectRegistrar::DebugObjectRegistrar(JuliaOJIT &JIT)\n    : JuliaListener(CreateJuliaJITEventListener()),\n      JIT(JIT) {}\n\nJL_DLLEXPORT void ORCNotifyObjectEmitted(JITEventListener *Listener,\n                                         const object::ObjectFile &obj,\n                                         const object::ObjectFile &debugObj,\n                                         const RuntimeDyld::LoadedObjectInfo &L,\n                                         RTDyldMemoryManager *memmgr);\n\n// TODO: hook up RegisterJITEventListener, instead of hard-coding the GDB and JuliaListener targets\ntemplate <typename ObjSetT, typename LoadResult>\nvoid JuliaOJIT::DebugObjectRegistrar::operator()(RTDyldObjectLinkingLayerBase::ObjSetHandleT H,\n                const ObjSetT &Objects, const LoadResult &LOS)\n{\n#if JL_LLVM_VERSION < 30800\n    notifyObjectLoaded(JIT.MemMgr, H);\n#endif\n    auto oit = Objects.begin();\n    auto lit = LOS.begin();\n    for (; oit != Objects.end(); ++oit, ++lit) {\n#if JL_LLVM_VERSION >= 30900\n        const auto &Object = (*oit)->getBinary();\n#else\n        auto &Object = *oit;\n#endif\n        auto &LO = *lit;\n\n        OwningBinary<object::ObjectFile> SavedObject = LO->getObjectForDebug(*Object);\n\n        // If the debug object is unavailable, save (a copy of) the original object\n        // for our backtraces\n        if (!SavedObject.getBinary()) {\n            // This is unfortunate, but there doesn't seem to be a way to take\n            // ownership of the original buffer\n            auto NewBuffer = MemoryBuffer::getMemBufferCopy(Object->getData(),\n                                                            Object->getFileName());\n            auto NewObj = ObjectFile::createObjectFile(NewBuffer->getMemBufferRef());\n            assert(NewObj);\n            SavedObject = OwningBinary<object::ObjectFile>(std::move(*NewObj),\n                                                           std::move(NewBuffer));\n        }\n        else {\n            NotifyGDB(SavedObject);\n        }\n\n        SavedObjects.push_back(std::move(SavedObject));\n\n        ORCNotifyObjectEmitted(JuliaListener.get(),\n                *Object,\n                *SavedObjects.back().getBinary(),\n                *LO, JIT.MemMgr);\n\n        // record all of the exported symbols defined in this object\n        // in the primary hash table for the enclosing JIT\n        for (auto &Symbol : Object->symbols()) {\n            auto Flags = Symbol.getFlags();\n            if (Flags & object::BasicSymbolRef::SF_Undefined)\n                continue;\n            if (!(Flags & object::BasicSymbolRef::SF_Exported))\n                continue;\n            auto NameOrError = Symbol.getName();\n            assert(NameOrError);\n            auto Name = NameOrError.get();\n            auto Sym = JIT.CompileLayer.findSymbolIn(H, Name, true);\n            assert(Sym);\n            // note: calling getAddress here eagerly finalizes H\n            // as an alternative, we could store the JITSymbol instead\n            // (which would present a lazy-initializer functor interface instead)\n            JIT.LocalSymbolTable[Name] = (void*)(uintptr_t)Sym.getAddress();\n        }\n    }\n}\n\nvoid JuliaOJIT::DebugObjectRegistrar::NotifyGDB(OwningBinary<object::ObjectFile> &DebugObj)\n{\n    const char *Buffer = DebugObj.getBinary()->getMemoryBufferRef().getBufferStart();\n    size_t      Size = DebugObj.getBinary()->getMemoryBufferRef().getBufferSize();\n\n    assert(Buffer && \"Attempt to register a null object with a debugger.\");\n    jit_code_entry *JITCodeEntry = new jit_code_entry();\n\n    if (!JITCodeEntry) {\n        jl_printf(JL_STDERR, \"WARNING: Allocation failed when registering a JIT entry!\\n\");\n    }\n    else {\n        JITCodeEntry->symfile_addr = Buffer;\n        JITCodeEntry->symfile_size = Size;\n\n        NotifyDebugger(JITCodeEntry);\n    }\n}\n\nJuliaOJIT::JuliaOJIT(TargetMachine &TM)\n  : TM(TM),\n    DL(TM.createDataLayout()),\n    ObjStream(ObjBufferSV),\n    MemMgr(createRTDyldMemoryManager()),\n    ObjectLayer(DebugObjectRegistrar(*this)),\n    CompileLayer(\n            ObjectLayer,\n            [this](Module &M) {\n                JL_TIMING(LLVM_OPT);\n                PM.run(M);\n                std::unique_ptr<MemoryBuffer> ObjBuffer(\n                    new ObjectMemoryBuffer(std::move(ObjBufferSV)));\n                auto Obj = object::ObjectFile::createObjectFile(ObjBuffer->getMemBufferRef());\n\n                if (!Obj) {\n#if JL_LLVM_VERSION >= 50000\n                    M.print(llvm::dbgs(), nullptr, false, true);\n#else\n                    M.dump();\n#endif\n#if JL_LLVM_VERSION >= 30900\n                    std::string Buf;\n                    raw_string_ostream OS(Buf);\n                    logAllUnhandledErrors(Obj.takeError(), OS, \"\");\n                    OS.flush();\n                    llvm::report_fatal_error(\"FATAL: Unable to compile LLVM Module: '\" + Buf + \"'\\n\"\n                        \"The module's content was printed above. Please file a bug report\");\n#else\n                    llvm::report_fatal_error(\"FATAL: Unable to compile LLVM Module.\\n\"\n                        \"The module's content was printed above. Please file a bug report\");\n#endif\n                }\n\n                return OwningObj(std::move(*Obj), std::move(ObjBuffer));\n            }\n        )\n{\n    if (!jl_generating_output()) {\n        addOptimizationPasses(&PM);\n    }\n    else {\n        PM.add(createLowerGCFramePass());\n        PM.add(createLowerPTLSPass(imaging_mode));\n    }\n    if (TM.addPassesToEmitMC(PM, Ctx, ObjStream))\n        llvm_unreachable(\"Target does not support MC emission.\");\n\n    // Make sure SectionMemoryManager::getSymbolAddressInProcess can resolve\n    // symbols in the program as well. The nullptr argument to the function\n    // tells DynamicLibrary to load the program, not a library.\n    std::string *ErrorStr = nullptr;\n    if (sys::DynamicLibrary::LoadLibraryPermanently(nullptr, ErrorStr))\n        report_fatal_error(\"FATAL: unable to dlopen self\\n\" + *ErrorStr);\n}\n\nvoid JuliaOJIT::addGlobalMapping(StringRef Name, uint64_t Addr)\n{\n    bool successful = GlobalSymbolTable.insert(std::make_pair(Name, (void*)Addr)).second;\n    (void)successful;\n    assert(successful);\n}\n\nvoid JuliaOJIT::addGlobalMapping(const GlobalValue *GV, void *Addr)\n{\n    addGlobalMapping(getMangledName(GV), (uintptr_t)Addr);\n}\n\nvoid *JuliaOJIT::getPointerToGlobalIfAvailable(StringRef S)\n{\n    SymbolTableT::const_iterator pos = GlobalSymbolTable.find(S);\n    if (pos != GlobalSymbolTable.end())\n        return pos->second;\n    return nullptr;\n}\n\nvoid *JuliaOJIT::getPointerToGlobalIfAvailable(const GlobalValue *GV)\n{\n    return getPointerToGlobalIfAvailable(getMangledName(GV));\n}\n\n\nvoid JuliaOJIT::addModule(std::unique_ptr<Module> M)\n{\n#ifndef JL_NDEBUG\n    // validate the relocations for M\n    for (Module::iterator I = M->begin(), E = M->end(); I != E; ) {\n        Function *F = &*I;\n        ++I;\n        if (F->isDeclaration()) {\n            if (F->use_empty())\n                F->eraseFromParent();\n            else if (!(isIntrinsicFunction(F) ||\n                       findUnmangledSymbol(F->getName()) ||\n                       SectionMemoryManager::getSymbolAddressInProcess(\n                           getMangledName(F->getName())))) {\n                std::cerr << \"FATAL ERROR: \"\n                          << \"Symbol \\\"\" << F->getName().str() << \"\\\"\"\n                          << \"not found\";\n                abort();\n            }\n        }\n    }\n#endif\n    JL_TIMING(LLVM_MODULE_FINISH);\n    // We need a memory manager to allocate memory and resolve symbols for this\n    // new module. Create one that resolves symbols by looking back into the JIT.\n    auto Resolver = orc::createLambdaResolver(\n                      [&](const std::string &Name) {\n                        // TODO: consider moving the FunctionMover resolver here\n                        // Step 0: ObjectLinkingLayer has checked whether it is in the current module\n                        // Step 1: See if it's something known to the ExecutionEngine\n                        if (auto Sym = findSymbol(Name, true)) {\n#if JL_LLVM_VERSION >= 40000\n                            // `findSymbol` already eagerly resolved the address\n                            // return it directly.\n                            return Sym;\n#else\n                            return RuntimeDyld::SymbolInfo(Sym.getAddress(),\n                                                           Sym.getFlags());\n#endif\n                        }\n                        // Step 2: Search the program symbols\n                        if (uint64_t addr = SectionMemoryManager::getSymbolAddressInProcess(Name))\n                            return JL_SymbolInfo(addr, JITSymbolFlags::Exported);\n#if defined(_OS_LINUX_)\n                        if (uint64_t addr = resolve_atomic(Name.c_str()))\n                            return JL_SymbolInfo(addr, JITSymbolFlags::Exported);\n#endif\n                        // Return failure code\n                        return JL_SymbolInfo(nullptr);\n                      },\n                      [](const std::string &S) { return nullptr; }\n                    );\n    SmallVector<std::unique_ptr<Module>,1> Ms;\n    Ms.push_back(std::move(M));\n    auto modset = CompileLayer.addModuleSet(std::move(Ms), MemMgr,\n                                            std::move(Resolver));\n    // Force LLVM to emit the module so that we can register the symbols\n    // in our lookup table.\n    CompileLayer.emitAndFinalize(modset);\n}\n\nvoid JuliaOJIT::removeModule(ModuleHandleT H)\n{\n    CompileLayer.removeModuleSet(H);\n}\n\nJL_JITSymbol JuliaOJIT::findSymbol(const std::string &Name, bool ExportedSymbolsOnly)\n{\n    void *Addr = nullptr;\n    if (ExportedSymbolsOnly) {\n        // Step 1: Check against list of known external globals\n        Addr = getPointerToGlobalIfAvailable(Name);\n    }\n    // Step 2: Search all previously emitted symbols\n    if (Addr == nullptr)\n        Addr = LocalSymbolTable[Name];\n    return JL_JITSymbol((uintptr_t)Addr, JITSymbolFlags::Exported);\n}\n\nJL_JITSymbol JuliaOJIT::findUnmangledSymbol(const std::string Name)\n{\n    return findSymbol(getMangledName(Name), true);\n}\n\nuint64_t JuliaOJIT::getGlobalValueAddress(const std::string &Name)\n{\n    return findSymbol(getMangledName(Name), false).getAddress();\n}\n\nuint64_t JuliaOJIT::getFunctionAddress(const std::string &Name)\n{\n    return findSymbol(getMangledName(Name), false).getAddress();\n}\n\nFunction *JuliaOJIT::FindFunctionNamed(const std::string &Name)\n{\n    return shadow_output->getFunction(Name);\n}\n\nvoid JuliaOJIT::RegisterJITEventListener(JITEventListener *L)\n{\n    // TODO\n}\n\nconst DataLayout& JuliaOJIT::getDataLayout() const\n{\n    return DL;\n}\n\nconst Triple& JuliaOJIT::getTargetTriple() const\n{\n    return TM.getTargetTriple();\n}\n\nstd::string JuliaOJIT::getMangledName(const std::string &Name)\n{\n    SmallString<128> FullName;\n    Mangler::getNameWithPrefix(FullName, Name, DL);\n    return FullName.str();\n}\n\nstd::string JuliaOJIT::getMangledName(const GlobalValue *GV)\n{\n    return getMangledName(GV->getName());\n}\n\nJuliaOJIT *jl_ExecutionEngine;\n#else\nExecutionEngine *jl_ExecutionEngine;\n#endif\n\n// MSVC's link.exe requires each function declaration to have a Comdat section\n// So rather than litter the code with conditionals,\n// all global values that get emitted call this function\n// and it decides whether the definition needs a Comdat section and adds the appropriate declaration\n// TODO: consider moving this into jl_add_to_shadow or jl_dump_shadow? the JIT doesn't care, so most calls are now no-ops\ntemplate<class T> // for GlobalObject's\nstatic T *addComdat(T *G)\n{\n#if defined(_OS_WINDOWS_) && JL_LLVM_VERSION >= 30500\n    if (imaging_mode && !G->isDeclaration()) {\n        // Add comdat information to make MSVC link.exe happy\n        // it's valid to emit this for ld.exe too,\n        // but makes it very slow to link for no benefit\n        if (G->getParent() == shadow_output) {\n#if defined(_COMPILER_MICROSOFT_)\n            Comdat *jl_Comdat = G->getParent()->getOrInsertComdat(G->getName());\n            // ELF only supports Comdat::Any\n            jl_Comdat->setSelectionKind(Comdat::NoDuplicates);\n            G->setComdat(jl_Comdat);\n#endif\n#if defined(_CPU_X86_64_)\n            // Add unwind exception personalities to functions to handle async exceptions\n            assert(!juliapersonality_func || juliapersonality_func->getParent() == shadow_output);\n            if (Function *F = dyn_cast<Function>(G))\n                F->setPersonalityFn(juliapersonality_func);\n#endif\n        }\n        // add __declspec(dllexport) to everything marked for export\n        if (G->getLinkage() == GlobalValue::ExternalLinkage)\n            G->setDLLStorageClass(GlobalValue::DLLExportStorageClass);\n        else\n            G->setDLLStorageClass(GlobalValue::DefaultStorageClass);\n    }\n#endif\n    return G;\n}\n\n// destructively move the contents of src into dest\n// this assumes that the targets of the two modules are the same\n// including the DataLayout and ModuleFlags (for example)\n// and that there is no module-level assembly\nstatic void jl_merge_module(Module *dest, std::unique_ptr<Module> src)\n{\n    assert(dest != src.get());\n    for (Module::global_iterator I = src->global_begin(), E = src->global_end(); I != E;) {\n        GlobalVariable *sG = &*I;\n        GlobalValue *dG = dest->getNamedValue(sG->getName());\n        ++I;\n        // Replace a declaration with the definition:\n        if (dG) {\n            if (sG->isDeclaration()) {\n                sG->replaceAllUsesWith(dG);\n                sG->eraseFromParent();\n                continue;\n            }\n            else {\n                dG->replaceAllUsesWith(sG);\n                dG->eraseFromParent();\n            }\n        }\n        // Reparent the global variable:\n        sG->removeFromParent();\n        dest->getGlobalList().push_back(sG);\n        // Comdat is owned by the Module, recreate it in the new parent:\n        addComdat(sG);\n    }\n\n    for (Module::iterator I = src->begin(), E = src->end(); I != E;) {\n        Function *sG = &*I;\n        GlobalValue *dG = dest->getNamedValue(sG->getName());\n        ++I;\n        // Replace a declaration with the definition:\n        if (dG) {\n            if (sG->isDeclaration()) {\n                sG->replaceAllUsesWith(dG);\n                sG->eraseFromParent();\n                continue;\n            }\n            else {\n                dG->replaceAllUsesWith(sG);\n                dG->eraseFromParent();\n            }\n        }\n        // Reparent the global variable:\n        sG->removeFromParent();\n        dest->getFunctionList().push_back(sG);\n        // Comdat is owned by the Module, recreate it in the new parent:\n        addComdat(sG);\n    }\n\n    for (Module::alias_iterator I = src->alias_begin(), E = src->alias_end(); I != E;) {\n        GlobalAlias *sG = &*I;\n        GlobalValue *dG = dest->getNamedValue(sG->getName());\n        ++I;\n        if (dG) {\n            if (!dG->isDeclaration()) { // aliases are always definitions, so this test is reversed from the above two\n                sG->replaceAllUsesWith(dG);\n                sG->eraseFromParent();\n                continue;\n            }\n            else {\n                dG->replaceAllUsesWith(sG);\n                dG->eraseFromParent();\n            }\n        }\n        sG->removeFromParent();\n        dest->getAliasList().push_back(sG);\n    }\n\n    // metadata nodes need to be explicitly merged not just copied\n    // so there are special passes here for each known type of metadata\n    NamedMDNode *sNMD = src->getNamedMetadata(\"llvm.dbg.cu\");\n    if (sNMD) {\n        NamedMDNode *dNMD = dest->getOrInsertNamedMetadata(\"llvm.dbg.cu\");\n#if JL_LLVM_VERSION >= 30500\n        for (NamedMDNode::op_iterator I = sNMD->op_begin(), E = sNMD->op_end(); I != E; ++I) {\n            dNMD->addOperand(*I);\n        }\n#else\n        for (unsigned i = 0, l = sNMD->getNumOperands(); i < l; i++) {\n            dNMD->addOperand(sNMD->getOperand(i));\n        }\n#endif\n    }\n}\n\n// to finalize a function, look up its name in the `module_for_fname` map of\n// unfinalized functions and merge it, plus any other modules it depends upon,\n// into `collector` then add `collector` to the execution engine\nstatic StringMap<Module*> module_for_fname;\nstatic void jl_merge_recursive(Module *m, Module *collector);\n\n#if defined(USE_MCJIT) || defined(USE_ORCJIT)\nstatic void jl_add_to_ee(std::unique_ptr<Module> m)\n{\n#if defined(_CPU_X86_64_) && defined(_OS_WINDOWS_) && JL_LLVM_VERSION >= 30500\n    // Add special values used by debuginfo to build the UnwindData table registration for Win64\n    ArrayType *atype = ArrayType::get(T_uint32, 3); // want 4-byte alignment of 12-bytes of data\n    (new GlobalVariable(*m, atype,\n        false, GlobalVariable::InternalLinkage,\n        ConstantAggregateZero::get(atype), \"__UnwindData\"))->setSection(\".text\");\n    (new GlobalVariable(*m, atype,\n        false, GlobalVariable::InternalLinkage,\n        ConstantAggregateZero::get(atype), \"__catchjmp\"))->setSection(\".text\");\n#endif\n    assert(jl_ExecutionEngine);\n#if JL_LLVM_VERSION >= 30600\n    jl_ExecutionEngine->addModule(std::move(m));\n#else\n    jl_ExecutionEngine->addModule(m.release());\n#endif\n}\n\nvoid jl_finalize_function(Function *F)\n{\n    std::unique_ptr<Module> m(module_for_fname.lookup(F->getName()));\n    if (m) {\n        jl_merge_recursive(m.get(), m.get());\n        jl_add_to_ee(std::move(m));\n    }\n}\n#else\nstatic bool jl_try_finalize(Module *m)\n{\n    for (Module::iterator I = m->begin(), E = m->end(); I != E; ++I) {\n        Function *F = &*I;\n        if (F->isDeclaration() && !isIntrinsicFunction(F)) {\n            if (!jl_can_finalize_function(F))\n                return false;\n        }\n    }\n    jl_merge_recursive(m, shadow_output);\n    jl_merge_module(shadow_output, std::unique_ptr<Module>(m));\n    return true;\n}\n#endif\n\nstatic void jl_finalize_function(const std::string &F, Module *collector)\n{\n    std::unique_ptr<Module> m(module_for_fname.lookup(F));\n    if (m) {\n        jl_merge_recursive(m.get(), collector);\n        jl_merge_module(collector, std::move(m));\n    }\n}\n\nstatic void jl_merge_recursive(Module *m, Module *collector)\n{\n    // probably not many unresolved declarations, but be sure to iterate over their Names,\n    // since the declarations may get destroyed by the jl_merge_module call.\n    // this is also why we copy the Name string, rather than save a StringRef\n    SmallVector<std::string, 8> to_finalize;\n    for (Module::iterator I = m->begin(), E = m->end(); I != E; ++I) {\n        Function *F = &*I;\n        if (!F->isDeclaration()) {\n            module_for_fname.erase(F->getName());\n        }\n        else if (!isIntrinsicFunction(F)) {\n            to_finalize.push_back(F->getName().str());\n        }\n    }\n\n    for (const auto F : to_finalize) {\n        jl_finalize_function(F, collector);\n    }\n}\n\n// see if any of the functions needed by F are still WIP\nstatic StringSet<> incomplete_fname;\nstatic bool jl_can_finalize_function(StringRef F, SmallSet<Module*, 16> &known)\n{\n    if (incomplete_fname.find(F) != incomplete_fname.end())\n        return false;\n    Module *M = module_for_fname.lookup(F);\n#if JL_LLVM_VERSION >= 30500\n    if (M && known.insert(M).second)\n#else\n    if (M && known.insert(M))\n#endif\n    {\n        for (Module::iterator I = M->begin(), E = M->end(); I != E; ++I) {\n            Function *F = &*I;\n            if (F->isDeclaration() && !isIntrinsicFunction(F)) {\n                if (!jl_can_finalize_function(F->getName(), known))\n                    return false;\n            }\n        }\n    }\n    return true;\n}\nbool jl_can_finalize_function(Function *F)\n{\n    SmallSet<Module*, 16> known;\n    return jl_can_finalize_function(F->getName(), known);\n}\n\n// let the JIT know this function is a WIP\nvoid jl_init_function(Function *F)\n{\n    incomplete_fname.insert(F->getName());\n}\n\n// this takes ownership of a module after code emission is complete\n// and will add it to the execution engine when required (by jl_finalize_function)\nvoid jl_finalize_module(Module *m, bool shadow)\n{\n#if !defined(USE_ORCJIT)\n    jl_globalPM->run(*m);\n#endif\n    // record the function names that are part of this Module\n    // so it can be added to the JIT when needed\n    for (Module::iterator I = m->begin(), E = m->end(); I != E; ++I) {\n        Function *F = &*I;\n        if (!F->isDeclaration()) {\n            bool known = incomplete_fname.erase(F->getName());\n            (void)known; // TODO: assert(known); // llvmcall gets this wrong\n            module_for_fname[F->getName()] = m;\n        }\n    }\n#if defined(USE_ORCJIT) || defined(USE_MCJIT)\n    // in the newer JITs, the shadow module is separate from the execution module\n    if (shadow)\n        jl_add_to_shadow(m);\n#else\n    bool changes = jl_try_finalize(m);\n    while (changes) {\n        // this definitely isn't the most efficient, but it's only for the old LLVM 3.3 JIT\n        changes = false;\n        for (StringMap<Module*>::iterator MI = module_for_fname.begin(), ME = module_for_fname.end(); MI != ME; ++MI) {\n            changes |= jl_try_finalize(MI->second);\n        }\n    }\n#endif\n}\n\n// helper function for adding a DLLImport (dlsym) address to the execution engine\n// (for values created locally or in the sysimage, jl_emit_and_add_to_shadow is generally preferable)\n#if JL_LLVM_VERSION >= 30500\nvoid add_named_global(GlobalObject *gv, void *addr, bool dllimport)\n#else\nvoid add_named_global(GlobalValue *gv, void *addr, bool dllimport)\n#endif\n{\n#ifdef _OS_WINDOWS_\n    // setting JL_DLLEXPORT correctly only matters when building a binary\n    // (global_proto will strip this from the JIT)\n    if (dllimport && imaging_mode) {\n        assert(gv->getLinkage() == GlobalValue::ExternalLinkage);\n#if JL_LLVM_VERSION >= 30500\n        // add the __declspec(dllimport) attribute\n        gv->setDLLStorageClass(GlobalValue::DLLImportStorageClass);\n#else\n        gv->setLinkage(GlobalValue::DLLImportLinkage);\n#if defined(_P64)\n        // __imp_ variables are indirection pointers, so use malloc to simulate that\n        void **imp_addr = (void**)malloc(sizeof(void*));\n        *imp_addr = addr;\n        addr = (void*)imp_addr;\n#endif\n#endif\n    }\n#endif // _OS_WINDOWS_\n\n    jl_ExecutionEngine->addGlobalMapping(gv, addr);\n}\n\nstatic std::vector<Constant*> jl_sysimg_gvars;\nstatic std::vector<Constant*> jl_sysimg_fvars;\nstatic std::map<void*, jl_value_llvm> jl_value_to_llvm;\n\n// global variables to pointers are pretty common,\n// so this method is available as a convenience for emitting them.\n// for other types, the formula for implementation is straightforward:\n// (see stringConstPtr, for an alternative example to the code below)\n//\n// if in imaging_mode, emit a GlobalVariable with the same name and an initializer to the shadow_module\n// making it valid for emission and reloading in the sysimage\n//\n// then add a global mapping to the current value (usually from calloc'd space)\n// to the execution engine to make it valid for the current session (with the current value)\nvoid* jl_emit_and_add_to_shadow(GlobalVariable *gv, void *gvarinit)\n{\n    PointerType *T = cast<PointerType>(gv->getType()->getElementType()); // pointer is the only supported type here\n\n    GlobalVariable *shadowvar = NULL;\n#if defined(USE_MCJIT) || defined(USE_ORCJIT)\n    if (imaging_mode)\n#endif\n        shadowvar = global_proto(gv, shadow_output);\n\n    if (shadowvar) {\n        shadowvar->setInitializer(ConstantPointerNull::get(T));\n        shadowvar->setLinkage(GlobalVariable::InternalLinkage);\n        addComdat(shadowvar);\n        if (imaging_mode && gvarinit) {\n            // make the pointer valid for future sessions\n            jl_sysimg_gvars.push_back(ConstantExpr::getBitCast(shadowvar, T_psize));\n            jl_value_llvm gv_struct;\n            gv_struct.gv = global_proto(gv);\n            gv_struct.index = jl_sysimg_gvars.size();\n            jl_value_to_llvm[gvarinit] = gv_struct;\n        }\n    }\n\n    // make the pointer valid for this session\n#if defined(USE_MCJIT) || defined(USE_ORCJIT)\n    void *slot = calloc(1, sizeof(void*));\n    jl_ExecutionEngine->addGlobalMapping(gv, slot);\n    return slot;\n#else\n    return jl_ExecutionEngine->getPointerToGlobal(shadowvar);\n#endif\n}\n\n// Emit a slot in the system image to be filled at sysimg init time.\n// Returns the global var. Fill `idx` with 1-base index in the sysimg gv.\n// Use as an optimization for runtime constant addresses to have one less\n// load. (Used only by threading).\nGlobalVariable *jl_emit_sysimg_slot(Module *m, Type *typ, const char *name,\n                                           uintptr_t init, size_t &idx)\n{\n    assert(imaging_mode);\n    // This is **NOT** a external variable or a normal global variable\n    // This is a special internal global slot with a special index\n    // in the global variable table.\n    GlobalVariable *gv = new GlobalVariable(*m, typ, false,\n                                            GlobalVariable::InternalLinkage,\n                                            ConstantPointerNull::get((PointerType*)typ), name);\n    addComdat(gv);\n    // make the pointer valid for this session\n#if defined(USE_MCJIT) || defined(USE_ORCJIT)\n    auto p = new uintptr_t(init);\n    jl_ExecutionEngine->addGlobalMapping(gv, (void*)p);\n#else\n    uintptr_t *p = (uintptr_t*)jl_ExecutionEngine->getPointerToGlobal(gv);\n    *p = init;\n#endif\n    jl_sysimg_gvars.push_back(ConstantExpr::getBitCast(gv, T_psize));\n    idx = jl_sysimg_gvars.size();\n    return gv;\n}\n\nvoid* jl_get_global(GlobalVariable *gv)\n{\n#if defined(USE_MCJIT) || defined(USE_ORCJIT)\n    void *p = (void*)(intptr_t)jl_ExecutionEngine->getPointerToGlobalIfAvailable(gv);\n#else\n    void *p = jl_ExecutionEngine->getPointerToGlobal(\n            shadow_output->getNamedValue(gv->getName()));\n#endif\n    assert(p);\n    return p;\n}\n\n// clones the contents of the module `m` to the shadow_output collector\n#if defined(USE_MCJIT) || defined(USE_ORCJIT)\nvoid jl_add_to_shadow(Module *m)\n{\n#ifndef KEEP_BODIES\n    if (!imaging_mode)\n        return;\n#endif\n    ValueToValueMapTy VMap;\n    std::unique_ptr<Module> clone(CloneModule(m, VMap));\n    for (Module::iterator I = clone->begin(), E = clone->end(); I != E; ++I) {\n        Function *F = &*I;\n        if (!F->isDeclaration()) {\n            F->setLinkage(Function::InternalLinkage);\n            addComdat(F);\n        }\n    }\n    jl_merge_module(shadow_output, std::move(clone));\n}\n#endif\n\n#ifdef HAVE_CPUID\nextern \"C\" {\n    extern void jl_cpuid(int32_t CPUInfo[4], int32_t InfoType);\n}\n#endif\n\nstatic void jl_gen_llvm_globaldata(llvm::Module *mod, ValueToValueMapTy &VMap,\n                                   const char *sysimg_data, size_t sysimg_len)\n{\n    ArrayType *gvars_type = ArrayType::get(T_psize, jl_sysimg_gvars.size());\n    addComdat(new GlobalVariable(*mod,\n                                 gvars_type,\n                                 true,\n                                 GlobalVariable::ExternalLinkage,\n                                 MapValue(ConstantArray::get(gvars_type, ArrayRef<Constant*>(jl_sysimg_gvars)), VMap),\n                                 \"jl_sysimg_gvars\"));\n    ArrayType *fvars_type = ArrayType::get(T_pvoidfunc, jl_sysimg_fvars.size());\n    addComdat(new GlobalVariable(*mod,\n                                 fvars_type,\n                                 true,\n                                 GlobalVariable::ExternalLinkage,\n                                 MapValue(ConstantArray::get(fvars_type, ArrayRef<Constant*>(jl_sysimg_fvars)), VMap),\n                                 \"jl_sysimg_fvars\"));\n    addComdat(new GlobalVariable(*mod,\n                                 T_size,\n                                 true,\n                                 GlobalVariable::ExternalLinkage,\n                                 ConstantInt::get(T_size, globalUnique+1),\n                                 \"jl_globalUnique\"));\n#ifdef JULIA_ENABLE_THREADING\n    addComdat(new GlobalVariable(*mod,\n                                 T_size,\n                                 true,\n                                 GlobalVariable::ExternalLinkage,\n                                 ConstantInt::get(T_size, jltls_states_func_idx),\n                                 \"jl_ptls_states_getter_idx\"));\n#endif\n\n    Constant *feature_string = ConstantDataArray::getString(jl_LLVMContext, jl_options.cpu_target);\n    addComdat(new GlobalVariable(*mod,\n                                 feature_string->getType(),\n                                 true,\n                                 GlobalVariable::ExternalLinkage,\n                                 feature_string,\n                                 \"jl_sysimg_cpu_target\"));\n\n    // reflect the address of the jl_RTLD_DEFAULT_handle variable\n    // back to the caller, so that we can check for consistency issues\n    GlobalValue *jlRTLD_DEFAULT_var = mod->getNamedValue(\"jl_RTLD_DEFAULT_handle\");\n    addComdat(new GlobalVariable(*mod,\n                                 jlRTLD_DEFAULT_var->getType(),\n                                 true,\n                                 GlobalVariable::ExternalLinkage,\n                                 jlRTLD_DEFAULT_var,\n                                 \"jl_RTLD_DEFAULT_handle_pointer\"));\n\n#ifdef HAVE_CPUID\n    // For native also store the cpuid\n    if (strcmp(jl_options.cpu_target,\"native\") == 0) {\n        uint32_t info[4];\n\n        jl_cpuid((int32_t*)info, 1);\n        addComdat(new GlobalVariable(*mod,\n                                     T_uint64,\n                                     true,\n                                     GlobalVariable::ExternalLinkage,\n                                     ConstantInt::get(T_uint64,((uint64_t)info[2])|(((uint64_t)info[3])<<32)),\n                                     \"jl_sysimg_cpu_cpuid\"));\n    }\n#endif\n\n    if (sysimg_data) {\n        Constant *data = ConstantDataArray::get(jl_LLVMContext,\n            ArrayRef<uint8_t>((const unsigned char*)sysimg_data, sysimg_len));\n        addComdat(new GlobalVariable(*mod, data->getType(), true,\n                                     GlobalVariable::ExternalLinkage,\n                                     data, \"jl_system_image_data\"));\n        Constant *len = ConstantInt::get(T_size, sysimg_len);\n        addComdat(new GlobalVariable(*mod, len->getType(), true,\n                                     GlobalVariable::ExternalLinkage,\n                                     len, \"jl_system_image_size\"));\n    }\n}\n\n// takes the running content that has collected in the shadow module and dump it to disk\n// this builds the object file portion of the sysimage files for fast startup\nextern \"C\"\nvoid jl_dump_native(const char *bc_fname, const char *obj_fname, const char *sysimg_data, size_t sysimg_len)\n{\n    JL_TIMING(NATIVE_DUMP);\n    assert(imaging_mode);\n    // We don't want to use MCJIT's target machine because\n    // it uses the large code model and we may potentially\n    // want less optimizations there.\n    Triple TheTriple = Triple(jl_TargetMachine->getTargetTriple());\n    // make sure to emit the native object format, even if FORCE_ELF was set in codegen\n#if defined(_OS_WINDOWS_)\n#if JL_LLVM_VERSION >= 30500\n    TheTriple.setObjectFormat(Triple::COFF);\n#else\n    TheTriple.setEnvironment(Triple::UnknownEnvironment);\n#endif\n#elif defined(_OS_DARWIN_)\n#if JL_LLVM_VERSION >= 30500\n    TheTriple.setObjectFormat(Triple::MachO);\n#else\n    TheTriple.setEnvironment(Triple::MachO);\n#endif\n#endif\n#if JL_LLVM_VERSION >= 30500\n    std::unique_ptr<TargetMachine>\n#else\n    OwningPtr<TargetMachine>\n#endif\n    TM(jl_TargetMachine->getTarget().createTargetMachine(\n        TheTriple.getTriple(),\n        jl_TargetMachine->getTargetCPU(),\n        jl_TargetMachine->getTargetFeatureString(),\n        jl_TargetMachine->Options,\n#if defined(_OS_LINUX_) || defined(_OS_FREEBSD_)\n        Reloc::PIC_,\n#elif JL_LLVM_VERSION >= 30900\n        Optional<Reloc::Model>(),\n#else\n        Reloc::Default,\n#endif\n        CodeModel::Default,\n        CodeGenOpt::Aggressive // -O3 TODO: respect command -O0 flag?\n        ));\n\n#if JL_LLVM_VERSION >= 30700\n    legacy::PassManager PM;\n#else\n    PassManager PM;\n#endif\n#if JL_LLVM_VERSION < 30700\n    PM.add(new TargetLibraryInfo(Triple(TM->getTargetTriple())));\n#else\n    PM.add(new TargetLibraryInfoWrapperPass(Triple(TM->getTargetTriple())));\n#endif\n\n\n    // set up optimization passes\n#if JL_LLVM_VERSION >= 30700\n    // No DataLayout pass needed anymore.\n#elif JL_LLVM_VERSION >= 30600\n    PM.add(new DataLayoutPass());\n#elif JL_LLVM_VERSION >= 30500\n    PM.add(new DataLayoutPass(*jl_ExecutionEngine->getDataLayout()));\n#else\n    PM.add(new DataLayout(*jl_ExecutionEngine->getDataLayout()));\n#endif\n\n    addOptimizationPasses(&PM);\n\n    std::unique_ptr<raw_fd_ostream> bc_OS;\n    std::unique_ptr<raw_fd_ostream> obj_OS;\n#if JL_LLVM_VERSION >= 30700 // 3.7 simplified formatted output; just use the raw stream alone\n    std::unique_ptr<raw_fd_ostream> &bc_FOS = bc_OS;\n    std::unique_ptr<raw_fd_ostream> &obj_FOS = obj_OS;\n#else\n    std::unique_ptr<formatted_raw_ostream> bc_FOS;\n    std::unique_ptr<formatted_raw_ostream> obj_FOS;\n#endif\n\n    if (bc_fname) {\n#if JL_LLVM_VERSION >= 30500\n        // call output handler directly to avoid special case handling of `-` filename\n        int FD;\n        std::error_code EC = sys::fs::openFileForWrite(bc_fname, FD, sys::fs::F_None);\n        bc_OS.reset(new raw_fd_ostream(FD, true));\n        std::string err;\n        if (EC)\n            err = \"ERROR: failed to open --output-bc file '\" + std::string(bc_fname) + \"': \" + EC.message();\n#else\n        std::string err;\n        bc_OS.reset(new raw_fd_ostream(bc_fname, err, raw_fd_ostream::F_Binary));\n#endif\n        if (!err.empty())\n            jl_safe_printf(\"%s\\n\", err.c_str());\n        else {\n#if JL_LLVM_VERSION < 30700\n            bc_FOS.reset(new formatted_raw_ostream(*bc_OS.get()));\n#endif\n            PM.add(createBitcodeWriterPass(*bc_FOS.get()));     // Unroll small loops\n        }\n    }\n\n    if (obj_fname) {\n#if JL_LLVM_VERSION >= 30500\n        // call output handler directly to avoid special case handling of `-` filename\n        int FD;\n        std::error_code EC = sys::fs::openFileForWrite(obj_fname, FD, sys::fs::F_None);\n        obj_OS.reset(new raw_fd_ostream(FD, true));\n        std::string err;\n        if (EC)\n            err = \"ERROR: failed to open --output-o file '\" + std::string(obj_fname) + \"': \" + EC.message();\n#else\n        std::string err;\n        obj_OS.reset(new raw_fd_ostream(obj_fname, err, raw_fd_ostream::F_Binary));\n#endif\n        if (!err.empty())\n            jl_safe_printf(\"%s\\n\", err.c_str());\n        else {\n#if JL_LLVM_VERSION < 30700\n            obj_FOS.reset(new formatted_raw_ostream(*obj_OS.get()));\n#endif\n            if (TM->addPassesToEmitFile(PM, *obj_FOS.get(), TargetMachine::CGFT_ObjectFile, false)) {\n                jl_safe_printf(\"ERROR: target does not support generation of object files\\n\");\n            }\n        }\n    }\n\n    ValueToValueMapTy VMap;\n#if defined(USE_MCJIT) || defined(USE_ORCJIT)\n    // now copy the module (if using the old JIT), since PM.run may modify it\n    Module *clone = shadow_output;\n#else\n    Module *clone = CloneModule(shadow_output, VMap);\n#endif\n\n#if JL_LLVM_VERSION >= 30700\n    // Reset the target triple to make sure it matches the new target machine\n    clone->setTargetTriple(TM->getTargetTriple().str());\n#if JL_LLVM_VERSION >= 30800\n    clone->setDataLayout(TM->createDataLayout());\n#else\n    clone->setDataLayout(TM->getDataLayout()->getStringRepresentation());\n#endif\n#endif\n\n    // add metadata information\n    jl_gen_llvm_globaldata(clone, VMap, sysimg_data, sysimg_len);\n\n    // do the actual work\n    PM.run(*clone);\n#if !defined(USE_MCJIT) && !defined(USE_ORCJIT)\n    delete clone;\n#endif\n    imaging_mode = false;\n}\n\nextern \"C\" int32_t jl_assign_functionID(void *function)\n{\n    // give the function an index in the constant lookup table\n    assert(imaging_mode);\n    if (function == NULL)\n        return 0;\n    jl_sysimg_fvars.push_back(ConstantExpr::getBitCast(\n                shadow_output->getNamedValue(((Function*)function)->getName()),\n                T_pvoidfunc));\n    return jl_sysimg_fvars.size();\n}\n\nextern \"C\" int32_t jl_get_llvm_gv(jl_value_t *p)\n{\n    // map a jl_value_t memory location to a GlobalVariable\n    std::map<void*, jl_value_llvm>::iterator it;\n    it = jl_value_to_llvm.find(p);\n    if (it == jl_value_to_llvm.end())\n        return 0;\n    return it->second.index;\n}\n\nGlobalVariable *jl_get_global_for(const char *cname, void *addr, Module *M)\n{\n    // emit a GlobalVariable for a jl_value_t named \"cname\"\n    std::map<void*, jl_value_llvm>::iterator it;\n    // first see if there already is a GlobalVariable for this address\n    it = jl_value_to_llvm.find(addr);\n    if (it != jl_value_to_llvm.end())\n        return prepare_global((llvm::GlobalVariable*)it->second.gv, M);\n\n    std::stringstream gvname;\n    gvname << cname << globalUnique++;\n    // no existing GlobalVariable, create one and store it\n    GlobalVariable *gv = new GlobalVariable(*M, T_pjlvalue,\n                           false, GlobalVariable::ExternalLinkage,\n                           NULL, gvname.str());\n    *(void**)jl_emit_and_add_to_shadow(gv, addr) = addr;\n    return gv;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/src/runtime_ccall.cpp": "// This file is a part of Julia. License is MIT: https://julialang.org/license\n\n#include \"llvm-version.h\"\n#include <map>\n#include <string>\n#include <cstdio>\n#include <llvm/Support/Host.h>\n#include \"fix_llvm_assert.h\"\n#include \"julia.h\"\n#include \"julia_internal.h\"\nusing namespace llvm;\n\n// --- library symbol lookup ---\n\n// map from \"libX\" to full soname \"libX.so.ver\"\n#if defined(__linux__) || defined(__FreeBSD__)\nstatic uv_rwlock_t soname_lock;\nstatic std::map<std::string, std::string> sonameMap;\nstatic bool got_sonames = false;\n\nextern \"C\" void jl_init_runtime_ccall(void)\n{\n    uv_rwlock_init(&soname_lock);\n}\n\n// This reloads the sonames, necessary after system upgrade.\n// Keep this DLLEXPORTed, this is used by `BinDeps.jl` to make sure\n// newly installed libraries can be found.\nextern \"C\" JL_DLLEXPORT void jl_read_sonames(void)\n{\n    char *line=NULL;\n    size_t sz=0;\n#if defined(__linux__)\n    FILE *ldc = popen(\"/sbin/ldconfig -p\", \"r\");\n#else\n    FILE *ldc = popen(\"/sbin/ldconfig -r\", \"r\");\n#endif\n    if (ldc == NULL) return; // ignore errors in running ldconfig (other than whatever might have been printed to stderr)\n\n    // This loop is not allowed to call julia GC while holding the lock\n    uv_rwlock_wrlock(&soname_lock);\n    sonameMap.clear();\n    while (!feof(ldc)) {\n        ssize_t n = getline(&line, &sz, ldc);\n        if (n == -1)\n            break;\n        if (n > 2 && isspace((unsigned char)line[0])) {\n#ifdef __linux__\n            int i = 0;\n            while (isspace((unsigned char)line[++i])) ;\n            char *name = &line[i];\n            char *dot = strstr(name, \".so\");\n            i = 0;\n#else\n            char *name = strstr(line, \":-l\");\n            if (name == NULL) continue;\n            strncpy(name, \"lib\", 3);\n            char *dot = strchr(name, '.');\n#endif\n\n            if (NULL == dot)\n                continue;\n\n#ifdef __linux__\n            // Detect if this entry is for the current architecture\n            while (!isspace((unsigned char)dot[++i])) ;\n            while (isspace((unsigned char)dot[++i])) ;\n            int j = i;\n            while (!isspace((unsigned char)dot[++j])) ;\n            char *arch = strstr(dot+i,\"x86-64\");\n            if (arch != NULL && arch < dot + j) {\n#ifdef _P32\n                continue;\n#endif\n            }\n            else {\n#ifdef _P64\n                continue;\n#endif\n            }\n#endif // __linux__\n\n            char *abslibpath = strrchr(line, ' ');\n            if (dot != NULL && abslibpath != NULL) {\n                std::string pfx(name, dot - name);\n                // Do not include ' ' in front and '\\n' at the end\n                std::string soname(abslibpath+1, line+n-(abslibpath+1)-1);\n                sonameMap[pfx] = soname;\n            }\n        }\n    }\n\n    free(line);\n    pclose(ldc);\n    uv_rwlock_wrunlock(&soname_lock);\n}\n\n// This API is not thread safe. The return value can be free'd if\n// `jl_read_sonames()` is called on another thread.\nextern \"C\" JL_DLLEXPORT const char *jl_lookup_soname(const char *pfx, size_t n)\n{\n    if (!got_sonames) {\n        jl_read_sonames();\n        got_sonames = true;\n    }\n    const char *res = nullptr;\n    uv_rwlock_rdlock(&soname_lock);\n    auto search = sonameMap.find(std::string(pfx, n));\n    if (search != sonameMap.end())\n        res = search->second.c_str();\n    uv_rwlock_rdunlock(&soname_lock);\n    return res;\n}\n\nextern \"C\" void *jl_dlopen_soname(const char *pfx, size_t n, unsigned flags)\n{\n    if (!got_sonames) {\n        jl_read_sonames();\n        got_sonames = true;\n    }\n    void *res = nullptr;\n    uv_rwlock_rdlock(&soname_lock);\n    auto search = sonameMap.find(std::string(pfx, n));\n    if (search != sonameMap.end())\n        res = jl_dlopen(search->second.c_str(), flags);\n    uv_rwlock_rdunlock(&soname_lock);\n    return res;\n}\n#else\nextern \"C\" void jl_init_runtime_ccall(void)\n{\n}\n#endif\n\n// map from user-specified lib names to handles\nstatic std::map<std::string, void*> libMap;\nstatic jl_mutex_t libmap_lock;\nextern \"C\"\nvoid *jl_get_library(const char *f_lib)\n{\n    void *hnd;\n#ifdef _OS_WINDOWS_\n    if (f_lib == JL_EXE_LIBNAME)\n        return jl_exe_handle;\n    if (f_lib == JL_DL_LIBNAME)\n        return jl_dl_handle;\n#endif\n    if (f_lib == NULL)\n        return jl_RTLD_DEFAULT_handle;\n    JL_LOCK_NOGC(&libmap_lock);\n    // This is the only operation we do on the map, which doesn't invalidate\n    // any references or iterators.\n    void **map_slot = &libMap[f_lib];\n    JL_UNLOCK_NOGC(&libmap_lock);\n    hnd = jl_atomic_load_acquire(map_slot);\n    if (hnd != NULL)\n        return hnd;\n    // We might run this concurrently on two threads but it doesn't matter.\n    hnd = jl_load_dynamic_library(f_lib, JL_RTLD_DEFAULT);\n    if (hnd != NULL)\n        jl_atomic_store_release(map_slot, hnd);\n    return hnd;\n}\n\nextern \"C\" JL_DLLEXPORT\nvoid *jl_load_and_lookup(const char *f_lib, const char *f_name, void **hnd)\n{\n    void *handle = jl_atomic_load_acquire(hnd);\n    if (!handle)\n        jl_atomic_store_release(hnd, (handle = jl_get_library(f_lib)));\n    return jl_dlsym(handle, f_name);\n}\n\n// miscellany\nextern \"C\" JL_DLLEXPORT\njl_value_t *jl_get_cpu_name(void)\n{\n#if JL_LLVM_VERSION >= 30500\n    StringRef HostCPUName = llvm::sys::getHostCPUName();\n#else\n    const std::string& HostCPUName = llvm::sys::getHostCPUName();\n#endif\n    return jl_pchar_to_string(HostCPUName.data(), HostCPUName.size());\n}\n\nextern \"C\" JL_DLLEXPORT\njl_value_t *jl_get_JIT(void)\n{\n#if defined(USE_ORCJIT)\n    const std::string& HostJITName = \"ORCJIT\";\n#elif defined(USE_MCJIT)\n    const std::string& HostJITName = \"MCJIT\";\n#else\n    const std::string& HostJITName = \"Unknown\";\n#endif\n    return jl_pchar_to_string(HostJITName.data(), HostJITName.size());\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/base/libdl.jl": "# This file is a part of Julia. License is MIT: https://julialang.org/license\n\nmodule Libdl\n\nexport DL_LOAD_PATH, RTLD_DEEPBIND, RTLD_FIRST, RTLD_GLOBAL, RTLD_LAZY, RTLD_LOCAL,\n    RTLD_NODELETE, RTLD_NOLOAD, RTLD_NOW, dlclose, dlopen, dlopen_e, dlsym, dlsym_e,\n    dlpath, find_library, dlext, dllist\n\n\"\"\"\n    DL_LOAD_PATH\n\nWhen calling [`dlopen`](@ref), the paths in this list will be searched first, in\norder, before searching the system locations for a valid library handle.\n\"\"\"\nconst DL_LOAD_PATH = String[]\nif is_apple()\n    push!(DL_LOAD_PATH, \"@loader_path/julia\")\n    push!(DL_LOAD_PATH, \"@loader_path\")\nend\n\n# note: constants to match JL_RTLD_* in src/julia.h, translated\n#       to system-specific values by JL_RTLD macro in src/dlload.c\nconst RTLD_LOCAL     = 0x00000001\nconst RTLD_GLOBAL    = 0x00000002\nconst RTLD_LAZY      = 0x00000004\nconst RTLD_NOW       = 0x00000008\nconst RTLD_NODELETE  = 0x00000010\nconst RTLD_NOLOAD    = 0x00000020\nconst RTLD_DEEPBIND  = 0x00000040\nconst RTLD_FIRST     = 0x00000080\n\n@doc \"\"\"\n    RTLD_DEEPBIND\n    RTLD_FIRST\n    RTLD_GLOBAL\n    RTLD_LAZY\n    RTLD_LOCAL\n    RTLD_NODELETE\n    RTLD_NOLOAD\n    RTLD_NOW\n\nEnum constant for [`dlopen`](@ref). See your platform man page for details, if\napplicable.\n\"\"\" ->\n(RTLD_DEEPBIND, RTLD_FIRST, RTLD_GLOBAL, RTLD_LAZY, RTLD_LOCAL, RTLD_NODELETE, RTLD_NOLOAD, RTLD_NOW)\n\n\n\"\"\"\n    dlsym(handle, sym)\n\nLook up a symbol from a shared library handle, return callable function pointer on success.\n\"\"\"\nfunction dlsym(hnd::Ptr, s::Union{Symbol,AbstractString})\n    hnd == C_NULL && throw(ArgumentError(\"NULL library handle\"))\n    ccall(:jl_dlsym, Ptr{Void}, (Ptr{Void}, Cstring), hnd, s)\nend\n\n\"\"\"\n    dlsym_e(handle, sym)\n\nLook up a symbol from a shared library handle, silently return `NULL` pointer on lookup failure.\n\"\"\"\nfunction dlsym_e(hnd::Ptr, s::Union{Symbol,AbstractString})\n    hnd == C_NULL && throw(ArgumentError(\"NULL library handle\"))\n    ccall(:jl_dlsym_e, Ptr{Void}, (Ptr{Void}, Cstring), hnd, s)\nend\n\n\"\"\"\n    dlopen(libfile::AbstractString [, flags::Integer])\n\nLoad a shared library, returning an opaque handle.\n\nThe extension given by the constant `dlext` (`.so`, `.dll`, or `.dylib`)\ncan be omitted from the `libfile` string, as it is automatically appended\nif needed.   If `libfile` is not an absolute path name, then the paths\nin the array `DL_LOAD_PATH` are searched for `libfile`, followed by the\nsystem load path.\n\nThe optional flags argument is a bitwise-or of zero or more of `RTLD_LOCAL`, `RTLD_GLOBAL`,\n`RTLD_LAZY`, `RTLD_NOW`, `RTLD_NODELETE`, `RTLD_NOLOAD`, `RTLD_DEEPBIND`, and `RTLD_FIRST`.\nThese are converted to the corresponding flags of the POSIX (and/or GNU libc and/or MacOS)\ndlopen command, if possible, or are ignored if the specified functionality is not available\non the current platform. The default flags are platform specific. On MacOS the default\n`dlopen` flags are `RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL` while on other platforms the\ndefaults are `RTLD_LAZY|RTLD_DEEPBIND|RTLD_LOCAL`. An important usage of these flags is to\nspecify non default behavior for when the dynamic library loader binds library references to\nexported symbols and if the bound references are put into process local or global scope. For\ninstance `RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL` allows the library's symbols to be available\nfor usage in other shared libraries, addressing situations where there are dependencies\nbetween shared libraries.\n\"\"\"\nfunction dlopen end\n\ndlopen(s::Symbol, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND) =\n    dlopen(string(s), flags)\n\ndlopen(s::AbstractString, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND) =\n    ccall(:jl_load_dynamic_library, Ptr{Void}, (Cstring,UInt32), s, flags)\n\n\"\"\"\n    dlopen_e(libfile::AbstractString [, flags::Integer])\n\nSimilar to [`dlopen`](@ref), except returns a `NULL` pointer instead of raising errors.\n\"\"\"\nfunction dlopen_e end\n\ndlopen_e(s::Symbol, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND) =\n    dlopen_e(string(s), flags)\n\ndlopen_e(s::AbstractString, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND) =\n    ccall(:jl_load_dynamic_library_e, Ptr{Void}, (Cstring,UInt32), s, flags)\n\n\"\"\"\n    dlclose(handle)\n\nClose shared library referenced by handle.\n\"\"\"\nfunction dlclose(p::Ptr)\n    0 == ccall(:jl_dlclose, Cint, (Ptr{Void},), p)\nend\n\n\"\"\"\n    find_library(names, locations)\n\nSearches for the first library in `names` in the paths in the `locations` list,\n`DL_LOAD_PATH`, or system library paths (in that order) which can successfully be dlopen'd.\nOn success, the return value will be one of the names (potentially prefixed by one of the\npaths in locations). This string can be assigned to a `global const` and used as the library\nname in future `ccall`'s. On failure, it returns the empty string.\n\"\"\"\nfunction find_library(libnames, extrapaths=String[])\n    for lib in libnames\n        for path in extrapaths\n            l = joinpath(path, lib)\n            p = dlopen_e(l, RTLD_LAZY)\n            if p != C_NULL\n                dlclose(p)\n                return l\n            end\n        end\n        p = dlopen_e(lib, RTLD_LAZY)\n        if p != C_NULL\n            dlclose(p)\n            return lib\n        end\n    end\n    return \"\"\nend\nfind_library(libname::Union{Symbol,AbstractString}, extrapaths=String[]) =\n    find_library([string(libname)], extrapaths)\n\nfunction dlpath(handle::Ptr{Void})\n    p = ccall(:jl_pathname_for_handle, Cstring, (Ptr{Void},), handle)\n    s = unsafe_string(p)\n    is_windows() && Libc.free(p)\n    return s\nend\n\nfunction dlpath(libname::Union{AbstractString, Symbol})\n    handle = dlopen(libname)\n    path = dlpath(handle)\n    dlclose(handle)\n    return path\nend\n\nif is_apple()\n    const dlext = \"dylib\"\nelseif is_windows()\n    const dlext = \"dll\"\nelse\n    #assume is_linux, or similar\n    const dlext = \"so\"\nend\n\n\"\"\"\n    dlext\n\nFile extension for dynamic libraries (e.g. dll, dylib, so) on the current platform.\n\"\"\"\ndlext\n\nif is_linux()\n    struct dl_phdr_info\n        # Base address of object\n        addr::Cuint\n\n        # Null-terminated name of object\n        name::Ptr{UInt8}\n\n        # Pointer to array of ELF program headers for this object\n        phdr::Ptr{Void}\n\n        # Number of program headers for this object\n        phnum::Cshort\n    end\n\n    # This callback function called by dl_iterate_phdr() on Linux\n    function dl_phdr_info_callback(di::dl_phdr_info, size::Csize_t, dynamic_libraries::Array{AbstractString,1})\n        # Skip over objects without a path (as they represent this own object)\n        name = unsafe_string(di.name)\n        if !isempty(name)\n            push!(dynamic_libraries, name)\n        end\n        return convert(Cint, 0)::Cint\n    end\nend # linux-only\n\nif is_bsd() && !is_apple()\n    # DL_ITERATE_PHDR(3) on freebsd\n    struct dl_phdr_info\n        # Base address of object\n        addr::Cuint\n\n        # Null-terminated name of object\n        name::Ptr{UInt8}\n\n        # Pointer to array of ELF program headers for this object\n        phdr::Ptr{Void}\n\n        # Number of program headers for this object\n        phnum::Cshort\n    end\n\n    function dl_phdr_info_callback(di::dl_phdr_info, size::Csize_t, dy_libs::Vector{AbstractString})\n        name = unsafe_string(di.name)\n        if !isempty(name)\n            push!(dy_libs, name)\n        end\n        return convert(Cint, 0)::Cint\n    end\nend # bsd family\n\nfunction dllist()\n    dynamic_libraries = Vector{AbstractString}(0)\n\n    @static if is_linux()\n        const callback = cfunction(dl_phdr_info_callback, Cint,\n                                   Tuple{Ref{dl_phdr_info}, Csize_t, Ref{Vector{AbstractString}}})\n        ccall(:dl_iterate_phdr, Cint, (Ptr{Void}, Ref{Vector{AbstractString}}), callback, dynamic_libraries)\n    end\n\n    @static if is_apple()\n        numImages = ccall(:_dyld_image_count, Cint, ())\n\n        # start at 1 instead of 0 to skip self\n        for i in 1:numImages-1\n            name = unsafe_string(ccall(:_dyld_get_image_name, Cstring, (UInt32,), i))\n            push!(dynamic_libraries, name)\n        end\n    end\n\n    @static if is_windows()\n        ccall(:jl_dllist, Cint, (Any,), dynamic_libraries)\n    end\n\n    @static if is_bsd() && !is_apple()\n        const callback = cfunction(dl_phdr_info_callback, Cint,\n                                   Tuple{Ref{dl_phdr_info}, Csize_t, Ref{Vector{AbstractString}}})\n        ccall(:dl_iterate_phdr, Cint, (Ptr{Void}, Ref{Vector{AbstractString}}), callback, dynamic_libraries)\n        shift!(dynamic_libraries)\n    end\n\n    return dynamic_libraries\nend\n\nend # module\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/base/linalg/blas.jl": "# This file is a part of Julia. License is MIT: https://julialang.org/license\n\nmodule BLAS\n\nimport Base: copy!\nimport Base.LinAlg: axpy!, dot\n\nexport\n# Level 1\n    asum,\n    blascopy!,\n    dotc,\n    dotu,\n    scal!,\n    scal,\n    nrm2,\n    iamax,\n# Level 2\n    gbmv!,\n    gbmv,\n    gemv!,\n    gemv,\n    hemv!,\n    hemv,\n    sbmv!,\n    sbmv,\n    symv!,\n    symv,\n    trsv!,\n    trsv,\n    trmv!,\n    trmv,\n    ger!,\n    syr!,\n    her!,\n# Level 3\n    herk!,\n    herk,\n    her2k!,\n    her2k,\n    gemm!,\n    gemm,\n    symm!,\n    symm,\n    hemm!,\n    hemm,\n    syrk!,\n    syrk,\n    syr2k!,\n    syr2k,\n    trmm!,\n    trmm,\n    trsm!,\n    trsm\n\n\nconst libblas = Base.libblas_name\nconst liblapack = Base.liblapack_name\n\nimport ..LinAlg: BlasReal, BlasComplex, BlasFloat, BlasInt, DimensionMismatch, checksquare, axpy!\n\n# utility routines\nfunction vendor()\n    lib = Libdl.dlopen_e(Base.libblas_name)\n    if lib != C_NULL\n        if Libdl.dlsym_e(lib, :openblas_set_num_threads) != C_NULL\n            return :openblas\n        elseif Libdl.dlsym_e(lib, :openblas_set_num_threads64_) != C_NULL\n            return :openblas64\n        elseif Libdl.dlsym_e(lib, :MKL_Set_Num_Threads) != C_NULL\n            return :mkl\n        end\n    end\n    return :unknown\nend\n\nif vendor() == :openblas64\n    macro blasfunc(x)\n        return Expr(:quote, Symbol(x, \"64_\"))\n    end\n    openblas_get_config() = strip(unsafe_string(ccall((:openblas_get_config64_, Base.libblas_name), Ptr{UInt8}, () )))\nelse\n    macro blasfunc(x)\n        return Expr(:quote, x)\n    end\n    openblas_get_config() = strip(unsafe_string(ccall((:openblas_get_config, Base.libblas_name), Ptr{UInt8}, () )))\nend\n\n\"\"\"\n    set_num_threads(n)\n\nSet the number of threads the BLAS library should use.\n\"\"\"\nfunction set_num_threads(n::Integer)\n    blas = vendor()\n    if blas == :openblas\n        return ccall((:openblas_set_num_threads, Base.libblas_name), Void, (Int32,), n)\n    elseif blas == :openblas64\n        return ccall((:openblas_set_num_threads64_, Base.libblas_name), Void, (Int32,), n)\n    elseif blas == :mkl\n        # MKL may let us set the number of threads in several ways\n        return ccall((:MKL_Set_Num_Threads, Base.libblas_name), Void, (Cint,), n)\n    end\n\n    # OSX BLAS looks at an environment variable\n    @static if is_apple()\n        ENV[\"VECLIB_MAXIMUM_THREADS\"] = n\n    end\n\n    return nothing\nend\n\nfunction check()\n    blas = vendor()\n    if blas == :openblas || blas == :openblas64\n        openblas_config = openblas_get_config()\n        openblas64 = ismatch(r\".*USE64BITINT.*\", openblas_config)\n        if Base.USE_BLAS64 != openblas64\n            if !openblas64\n                println(\"ERROR: OpenBLAS was not built with 64bit integer support.\")\n                println(\"You're seeing this error because Julia was built with USE_BLAS64=1\")\n                println(\"Please rebuild Julia with USE_BLAS64=0\")\n            else\n                println(\"ERROR: Julia was not built with support for OpenBLAS with 64bit integer support\")\n                println(\"You're seeing this error because Julia was built with USE_BLAS64=0\")\n                println(\"Please rebuild Julia with USE_BLAS64=1\")\n            end\n            println(\"Quitting.\")\n            quit()\n        end\n    elseif blas == :mkl\n        if Base.USE_BLAS64\n            ENV[\"MKL_INTERFACE_LAYER\"] = \"ILP64\"\n        end\n    end\n\n    #\n    # Check if BlasInt is the expected bitsize, by triggering an error\n    #\n    (_, info) = LinAlg.LAPACK.potrf!('U', [1.0 0.0; 0.0 -1.0])\n    if info != 2 # mangled info code\n        if info == 2^33\n            error(\"\"\"BLAS and LAPACK are compiled with 32-bit integer support, but Julia expects 64-bit integers. Please build Julia with USE_BLAS64=0.\"\"\")\n        elseif info == 0\n            error(\"\"\"BLAS and LAPACK are compiled with 64-bit integer support but Julia expects 32-bit integers. Please build Julia with USE_BLAS64=1.\"\"\")\n        else\n            error(\"\"\"The LAPACK library produced an undefined error code. Please verify the installation of BLAS and LAPACK.\"\"\")\n        end\n    end\n\nend\n\n\n# Level 1\n## copy\n\n\"\"\"\n    blascopy!(n, X, incx, Y, incy)\n\nCopy `n` elements of array `X` with stride `incx` to array `Y` with stride `incy`. Returns `Y`.\n\"\"\"\nfunction blascopy! end\n\nfor (fname, elty) in ((:dcopy_,:Float64),\n                      (:scopy_,:Float32),\n                      (:zcopy_,:Complex128),\n                      (:ccopy_,:Complex64))\n    @eval begin\n        # SUBROUTINE DCOPY(N,DX,INCX,DY,INCY)\n        function blascopy!(n::Integer, DX::Union{Ptr{$elty},StridedArray{$elty}}, incx::Integer, DY::Union{Ptr{$elty},StridedArray{$elty}}, incy::Integer)\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &n, DX, &incx, DY, &incy)\n            DY\n        end\n    end\nend\n\n## scal\n\n\"\"\"\n    scal!(n, a, X, incx)\n\nOverwrite `X` with `a*X` for the first `n` elements of array `X` with stride `incx`. Returns `X`.\n\"\"\"\nfunction scal! end\n\n\"\"\"\n    scal(n, a, X, incx)\n\nReturns `X` scaled by `a` for the first `n` elements of array `X` with stride `incx`.\n\"\"\"\nfunction scal end\n\nfor (fname, elty) in ((:dscal_,:Float64),\n                      (:sscal_,:Float32),\n                      (:zscal_,:Complex128),\n                      (:cscal_,:Complex64))\n    @eval begin\n        # SUBROUTINE DSCAL(N,DA,DX,INCX)\n        function scal!(n::Integer, DA::$elty, DX::Union{Ptr{$elty},DenseArray{$elty}}, incx::Integer)\n            ccall((@blasfunc($fname), libblas), Void,\n                  (Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}),\n                  &n, &DA, DX, &incx)\n            DX\n        end\n    end\nend\nscal(n, DA, DX, incx) = scal!(n, DA, copy(DX), incx)\n\n## dot\n\n\"\"\"\n    dot(n, X, incx, Y, incy)\n\nDot product of two vectors consisting of `n` elements of array `X` with stride `incx` and\n`n` elements of array `Y` with stride `incy`.\n\n# Example:\n```jldoctest\njulia> dot(10, ones(10), 1, ones(20), 2)\n10.0\n```\n\"\"\"\nfunction dot end\n\n\"\"\"\n    dotc(n, X, incx, U, incy)\n\nDot function for two complex vectors, consisting of `n` elements of array `X`\nwith stride `incx` and `n` elements of array `U` with stride `incy`,\nconjugating the first vector.\n\n# Example:\n```jldoctest\njulia> Base.BLAS.dotc(10, im*ones(10), 1, complex.(ones(20), ones(20)), 2)\n10.0 - 10.0im\n```\n\"\"\"\nfunction dotc end\n\n\"\"\"\n    dotu(n, X, incx, Y, incy)\n\nDot function for two complex vectors consisting of `n` elements of array `X`\nwith stride `incx` and `n` elements of array `Y` with stride `incy`.\n\n# Example:\n```jldoctest\njulia> Base.BLAS.dotu(10, im*ones(10), 1, complex.(ones(20), ones(20)), 2)\n-10.0 + 10.0im\n```\n\"\"\"\nfunction dotu end\n\nfor (fname, elty) in ((:ddot_,:Float64),\n                      (:sdot_,:Float32))\n    @eval begin\n                #       DOUBLE PRECISION FUNCTION DDOT(N,DX,INCX,DY,INCY)\n                # *     .. Scalar Arguments ..\n                #       INTEGER INCX,INCY,N\n                # *     ..\n                # *     .. Array Arguments ..\n                #       DOUBLE PRECISION DX(*),DY(*)\n        function dot(n::Integer, DX::Union{Ptr{$elty},DenseArray{$elty}}, incx::Integer, DY::Union{Ptr{$elty},DenseArray{$elty}}, incy::Integer)\n            ccall((@blasfunc($fname), libblas), $elty,\n                (Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &n, DX, &incx, DY, &incy)\n        end\n    end\nend\nfor (fname, elty) in ((:cblas_zdotc_sub,:Complex128),\n                      (:cblas_cdotc_sub,:Complex64))\n    @eval begin\n                #       DOUBLE PRECISION FUNCTION DDOT(N,DX,INCX,DY,INCY)\n                # *     .. Scalar Arguments ..\n                #       INTEGER INCX,INCY,N\n                # *     ..\n                # *     .. Array Arguments ..\n                #       DOUBLE PRECISION DX(*),DY(*)\n        function dotc(n::Integer, DX::Union{Ptr{$elty},DenseArray{$elty}}, incx::Integer, DY::Union{Ptr{$elty},DenseArray{$elty}}, incy::Integer)\n            result = Ref{$elty}()\n            ccall((@blasfunc($fname), libblas), Void,\n                (BlasInt, Ptr{$elty}, BlasInt, Ptr{$elty}, BlasInt, Ptr{$elty}),\n                 n, DX, incx, DY, incy, result)\n            result[]\n        end\n    end\nend\nfor (fname, elty) in ((:cblas_zdotu_sub,:Complex128),\n                      (:cblas_cdotu_sub,:Complex64))\n    @eval begin\n                #       DOUBLE PRECISION FUNCTION DDOT(N,DX,INCX,DY,INCY)\n                # *     .. Scalar Arguments ..\n                #       INTEGER INCX,INCY,N\n                # *     ..\n                # *     .. Array Arguments ..\n                #       DOUBLE PRECISION DX(*),DY(*)\n        function dotu(n::Integer, DX::Union{Ptr{$elty},DenseArray{$elty}}, incx::Integer, DY::Union{Ptr{$elty},DenseArray{$elty}}, incy::Integer)\n            result = Ref{$elty}()\n            ccall((@blasfunc($fname), libblas), Void,\n                (BlasInt, Ptr{$elty}, BlasInt, Ptr{$elty}, BlasInt, Ptr{$elty}),\n                 n, DX, incx, DY, incy, result)\n            result[]\n        end\n    end\nend\nfunction dot(DX::Union{DenseArray{T},StridedVector{T}}, DY::Union{DenseArray{T},StridedVector{T}}) where T<:BlasReal\n    n = length(DX)\n    if n != length(DY)\n        throw(DimensionMismatch(\"dot product arguments have lengths $(length(DX)) and $(length(DY))\"))\n    end\n    dot(n, pointer(DX), stride(DX, 1), pointer(DY), stride(DY, 1))\nend\nfunction dotc(DX::Union{DenseArray{T},StridedVector{T}}, DY::Union{DenseArray{T},StridedVector{T}}) where T<:BlasComplex\n    n = length(DX)\n    if n != length(DY)\n        throw(DimensionMismatch(\"dot product arguments have lengths $(length(DX)) and $(length(DY))\"))\n    end\n    dotc(n, pointer(DX), stride(DX, 1), pointer(DY), stride(DY, 1))\nend\nfunction dotu(DX::Union{DenseArray{T},StridedVector{T}}, DY::Union{DenseArray{T},StridedVector{T}}) where T<:BlasComplex\n    n = length(DX)\n    if n != length(DY)\n        throw(DimensionMismatch(\"dot product arguments have lengths $(length(DX)) and $(length(DY))\"))\n    end\n    dotu(n, pointer(DX), stride(DX, 1), pointer(DY), stride(DY, 1))\nend\n\n## nrm2\n\nstride1(x) = stride(x,1)\nstride1(x::Array) = 1\n\n\"\"\"\n    nrm2(n, X, incx)\n\n2-norm of a vector consisting of `n` elements of array `X` with stride `incx`.\n\n# Example:\n```jldoctest\njulia> Base.BLAS.nrm2(4, ones(8), 2)\n2.0\n\njulia> Base.BLAS.nrm2(1, ones(8), 2)\n1.0\n```\n\"\"\"\nfunction nrm2 end\n\nfor (fname, elty, ret_type) in ((:dnrm2_,:Float64,:Float64),\n                                (:snrm2_,:Float32,:Float32),\n                                (:dznrm2_,:Complex128,:Float64),\n                                (:scnrm2_,:Complex64,:Float32))\n    @eval begin\n        # SUBROUTINE DNRM2(N,X,INCX)\n        function nrm2(n::Integer, X::Union{Ptr{$elty},DenseArray{$elty}}, incx::Integer)\n            ccall((@blasfunc($fname), libblas), $ret_type,\n                (Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &n, X, &incx)\n        end\n    end\nend\nnrm2(x::Union{StridedVector,Array}) = nrm2(length(x), pointer(x), stride1(x))\n\n## asum\n\n\"\"\"\n    asum(n, X, incx)\n\nSum of the absolute values of the first `n` elements of array `X` with stride `incx`.\n\n# Example:\n```jldoctest\njulia> Base.BLAS.asum(5, im*ones(10), 2)\n5.0\n\njulia> Base.BLAS.asum(2, im*ones(10), 5)\n2.0\n```\n\"\"\"\nfunction asum end\n\nfor (fname, elty, ret_type) in ((:dasum_,:Float64,:Float64),\n                                (:sasum_,:Float32,:Float32),\n                                (:dzasum_,:Complex128,:Float64),\n                                (:scasum_,:Complex64,:Float32))\n    @eval begin\n        # SUBROUTINE ASUM(N, X, INCX)\n        function asum(n::Integer, X::Union{Ptr{$elty},DenseArray{$elty}}, incx::Integer)\n            ccall((@blasfunc($fname), libblas), $ret_type,\n                (Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &n, X, &incx)\n        end\n    end\nend\nasum(x::Union{StridedVector,Array}) = asum(length(x), pointer(x), stride1(x))\n\n## axpy\n\n\"\"\"\n    axpy!(a, X, Y)\n\nOverwrite `Y` with `a*X + Y`, where `a` is a scalar. Returns `Y`.\n\n# Example:\n```jldoctest\njulia> x = [1; 2; 3];\n\njulia> y = [4; 5; 6];\n\njulia> Base.BLAS.axpy!(2, x, y)\n3-element Array{Int64,1}:\n  6\n  9\n 12\n```\n\"\"\"\nfunction axpy! end\n\nfor (fname, elty) in ((:daxpy_,:Float64),\n                      (:saxpy_,:Float32),\n                      (:zaxpy_,:Complex128),\n                      (:caxpy_,:Complex64))\n    @eval begin\n                # SUBROUTINE DAXPY(N,DA,DX,INCX,DY,INCY)\n                # DY <- DA*DX + DY\n                #*     .. Scalar Arguments ..\n                #      DOUBLE PRECISION DA\n                #      INTEGER INCX,INCY,N\n                #*     .. Array Arguments ..\n                #      DOUBLE PRECISION DX(*),DY(*)\n        function axpy!(n::Integer, alpha::($elty), dx::Union{Ptr{$elty}, DenseArray{$elty}}, incx::Integer, dy::Union{Ptr{$elty}, DenseArray{$elty}}, incy::Integer)\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &n, &alpha, dx, &incx, dy, &incy)\n            dy\n        end\n    end\nend\nfunction axpy!(alpha::Number, x::Union{DenseArray{T},StridedVector{T}}, y::Union{DenseArray{T},StridedVector{T}}) where T<:BlasFloat\n    if length(x) != length(y)\n        throw(DimensionMismatch(\"x has length $(length(x)), but y has length $(length(y))\"))\n    end\n    axpy!(length(x), convert(T,alpha), pointer(x), stride(x, 1), pointer(y), stride(y, 1))\n    y\nend\n\nfunction axpy!(alpha::Number, x::Array{T}, rx::Union{UnitRange{Ti},Range{Ti}},\n               y::Array{T}, ry::Union{UnitRange{Ti},Range{Ti}}) where {T<:BlasFloat,Ti<:Integer}\n    if length(rx) != length(ry)\n        throw(DimensionMismatch(\"ranges of differing lengths\"))\n    end\n    if minimum(rx) < 1 || maximum(rx) > length(x)\n        throw(ArgumentError(\"range out of bounds for x, of length $(length(x))\"))\n    end\n    if minimum(ry) < 1 || maximum(ry) > length(y)\n        throw(ArgumentError(\"range out of bounds for y, of length $(length(y))\"))\n    end\n    axpy!(length(rx), convert(T, alpha), pointer(x)+(first(rx)-1)*sizeof(T), step(rx), pointer(y)+(first(ry)-1)*sizeof(T), step(ry))\n    y\nend\n\n## iamax\nfor (fname, elty) in ((:idamax_,:Float64),\n                      (:isamax_,:Float32),\n                      (:izamax_,:Complex128),\n                      (:icamax_,:Complex64))\n    @eval begin\n        function iamax(n::Integer, dx::Union{Ptr{$elty}, DenseArray{$elty}}, incx::Integer)\n            ccall((@blasfunc($fname), libblas),BlasInt,\n                (Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                &n, dx, &incx)\n        end\n    end\nend\niamax(dx::Union{StridedVector,Array}) = iamax(length(dx), pointer(dx), stride1(dx))\n\n# Level 2\n## mv\n### gemv\nfor (fname, elty) in ((:dgemv_,:Float64),\n                      (:sgemv_,:Float32),\n                      (:zgemv_,:Complex128),\n                      (:cgemv_,:Complex64))\n    @eval begin\n             #SUBROUTINE DGEMV(TRANS,M,N,ALPHA,A,LDA,X,INCX,BETA,Y,INCY)\n             #*     .. Scalar Arguments ..\n             #      DOUBLE PRECISION ALPHA,BETA\n             #      INTEGER INCX,INCY,LDA,M,N\n             #      CHARACTER TRANS\n             #*     .. Array Arguments ..\n             #      DOUBLE PRECISION A(LDA,*),X(*),Y(*)\n        function gemv!(trans::Char, alpha::($elty), A::StridedVecOrMat{$elty}, X::StridedVector{$elty}, beta::($elty), Y::StridedVector{$elty})\n            m,n = size(A,1),size(A,2)\n            if trans == 'N' && (length(X) != n || length(Y) != m)\n                throw(DimensionMismatch(\"A has dimensions $(size(A)), X has length $(length(X)) and Y has length $(length(Y))\"))\n            elseif trans == 'C' && (length(X) != m || length(Y) != n)\n                throw(DimensionMismatch(\"A' has dimensions $n, $m, X has length $(length(X)) and Y has length $(length(Y))\"))\n            elseif trans == 'T' && (length(X) != m || length(Y) != n)\n                throw(DimensionMismatch(\"A.' has dimensions $n, $m, X has length $(length(X)) and Y has length $(length(Y))\"))\n            end\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt}, Ptr{$elty},\n                 Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}),\n                 &trans, &size(A,1), &size(A,2), &alpha,\n                 A, &max(1,stride(A,2)), X, &stride(X,1),\n                 &beta, Y, &stride(Y,1))\n            Y\n        end\n        function gemv(trans::Char, alpha::($elty), A::StridedMatrix{$elty}, X::StridedVector{$elty})\n            gemv!(trans, alpha, A, X, zero($elty), similar(X, $elty, size(A, (trans == 'N' ? 1 : 2))))\n        end\n        function gemv(trans::Char, A::StridedMatrix{$elty}, X::StridedVector{$elty})\n            gemv!(trans, one($elty), A, X, zero($elty), similar(X, $elty, size(A, (trans == 'N' ? 1 : 2))))\n        end\n    end\nend\n\n\"\"\"\n    gemv!(tA, alpha, A, x, beta, y)\n\nUpdate the vector `y` as `alpha*A*x + beta*y` or `alpha*A'x + beta*y`\naccording to [`tA`](@ref stdlib-blas-trans).\n`alpha` and `beta` are scalars. Returns the updated `y`.\n\"\"\"\ngemv!\n\n\"\"\"\n    gemv(tA, alpha, A, x)\n\nReturns `alpha*A*x` or `alpha*A'x` according to [`tA`](@ref stdlib-blas-trans).\n`alpha` is a scalar.\n\"\"\"\ngemv(tA, alpha, A, x)\n\n\"\"\"\n    gemv(tA, A, x)\n\nReturns `A*x` or `A'x` according to [`tA`](@ref stdlib-blas-trans).\n\"\"\"\ngemv(tA, A, x)\n\n### (GB) general banded matrix-vector multiplication\n\n\"\"\"\n    gbmv!(trans, m, kl, ku, alpha, A, x, beta, y)\n\nUpdate vector `y` as `alpha*A*x + beta*y` or `alpha*A'*x + beta*y` according to [`trans`](@ref stdlib-blas-trans).\nThe matrix `A` is a general band matrix of dimension `m` by `size(A,2)` with `kl`\nsub-diagonals and `ku` super-diagonals. `alpha` and `beta` are scalars. Returns the updated `y`.\n\"\"\"\nfunction gbmv! end\n\n\"\"\"\n    gbmv(trans, m, kl, ku, alpha, A, x)\n\nReturns `alpha*A*x` or `alpha*A'*x` according to [`trans`](@ref stdlib-blas-trans).\nThe matrix `A` is a general band matrix of dimension `m` by `size(A,2)` with `kl` sub-diagonals and `ku`\nsuper-diagonals, and `alpha` is a scalar.\n\"\"\"\nfunction gbmv end\n\nfor (fname, elty) in ((:dgbmv_,:Float64),\n                      (:sgbmv_,:Float32),\n                      (:zgbmv_,:Complex128),\n                      (:cgbmv_,:Complex64))\n    @eval begin\n             # SUBROUTINE DGBMV(TRANS,M,N,KL,KU,ALPHA,A,LDA,X,INCX,BETA,Y,INCY)\n             # *     .. Scalar Arguments ..\n             #       DOUBLE PRECISION ALPHA,BETA\n             #       INTEGER INCX,INCY,KL,KU,LDA,M,N\n             #       CHARACTER TRANS\n             # *     .. Array Arguments ..\n             #       DOUBLE PRECISION A(LDA,*),X(*),Y(*)\n        function gbmv!(trans::Char, m::Integer, kl::Integer, ku::Integer, alpha::($elty), A::StridedMatrix{$elty}, x::StridedVector{$elty}, beta::($elty), y::StridedVector{$elty})\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt}, Ptr{BlasInt},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty},\n                 Ptr{BlasInt}),\n                 &trans, &m, &size(A,2), &kl,\n                 &ku, &alpha, A, &max(1,stride(A,2)),\n                 x, &stride(x,1), &beta, y, &stride(y,1))\n            y\n        end\n        function gbmv(trans::Char, m::Integer, kl::Integer, ku::Integer, alpha::($elty), A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            n = size(A,2)\n            leny = trans == 'N' ? m : n\n            gbmv!(trans, m, kl, ku, alpha, A, x, zero($elty), similar(x, $elty, leny))\n        end\n        function gbmv(trans::Char, m::Integer, kl::Integer, ku::Integer, A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            gbmv(trans, m, kl, ku, one($elty), A, x)\n        end\n    end\nend\n\n### symv\n\n\"\"\"\n    symv!(ul, alpha, A, x, beta, y)\n\nUpdate the vector `y` as `alpha*A*x + beta*y`. `A` is assumed to be symmetric.\nOnly the [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n`alpha` and `beta` are scalars. Returns the updated `y`.\n\"\"\"\nfunction symv! end\n\nfor (fname, elty, lib) in ((:dsymv_,:Float64,libblas),\n                           (:ssymv_,:Float32,libblas),\n                           (:zsymv_,:Complex128,liblapack),\n                           (:csymv_,:Complex64,liblapack))\n    # Note that the complex symv are not BLAS but auiliary functions in LAPACK\n    @eval begin\n             #      SUBROUTINE DSYMV(UPLO,N,ALPHA,A,LDA,X,INCX,BETA,Y,INCY)\n             #     .. Scalar Arguments ..\n             #      DOUBLE PRECISION ALPHA,BETA\n             #      INTEGER INCX,INCY,LDA,N\n             #      CHARACTER UPLO\n             #     .. Array Arguments ..\n             #      DOUBLE PRECISION A(LDA,*),X(*),Y(*)\n        function symv!(uplo::Char, alpha::($elty), A::StridedMatrix{$elty}, x::StridedVector{$elty},beta::($elty), y::StridedVector{$elty})\n            m, n = size(A)\n            if m != n\n                throw(DimensionMismatch(\"matrix A is $m by $n but must be square\"))\n            end\n            if n != length(x)\n                throw(DimensionMismatch(\"A has size $(size(A)), and x has length $(length(x))\"))\n            end\n            if m != length(y)\n                throw(DimensionMismatch(\"A has size $(size(A)), and y has length $(length(y))\"))\n            end\n            ccall((@blasfunc($fname), $lib), Void,\n                (Ptr{UInt8}, Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty},\n                 Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &n, &alpha, A,\n                 &max(1,stride(A,2)), x, &stride(x,1), &beta,\n                 y, &stride(y,1))\n            y\n        end\n        function symv(uplo::Char, alpha::($elty), A::StridedMatrix{$elty}, x::StridedVector{$elty})\n                symv!(uplo, alpha, A, x, zero($elty), similar(x))\n        end\n        function symv(uplo::Char, A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            symv(uplo, one($elty), A, x)\n        end\n    end\nend\n\n\"\"\"\n    symv(ul, alpha, A, x)\n\nReturns `alpha*A*x`. `A` is assumed to be symmetric.\nOnly the [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n`alpha` is a scalar.\n\"\"\"\nsymv(ul, alpha, A, x)\n\n\"\"\"\n    symv(ul, A, x)\n\nReturns `A*x`. `A` is assumed to be symmetric.\nOnly the [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n\"\"\"\nsymv(ul, A, x)\n\n### hemv\nfor (fname, elty) in ((:zhemv_,:Complex128),\n                      (:chemv_,:Complex64))\n    @eval begin\n        function hemv!(uplo::Char, \u03b1::$elty, A::StridedMatrix{$elty}, x::StridedVector{$elty}, \u03b2::$elty, y::StridedVector{$elty})\n            m, n = size(A)\n            if m != n\n                throw(DimensionMismatch(\"matrix A is $m by $n but must be square\"))\n            end\n            if n != length(x)\n                throw(DimensionMismatch(\"A has size $(size(A)), and x has length $(length(x))\"))\n            end\n            if m != length(y)\n                throw(DimensionMismatch(\"A has size $(size(A)), and y has length $(length(y))\"))\n            end\n            lda = max(1, stride(A, 2))\n            incx = stride(x, 1)\n            incy = stride(y, 1)\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{UInt8}, Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty},\n                 Ptr{$elty}, Ptr{BlasInt}),\n                &uplo, &n, &\u03b1, A,\n                &lda, x, &incx, &\u03b2,\n                y, &incy)\n            y\n        end\n        function hemv(uplo::Char, \u03b1::($elty), A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            hemv!(uplo, \u03b1, A, x, zero($elty), similar(x))\n        end\n        function hemv(uplo::Char, A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            hemv(uplo, one($elty), A, x)\n        end\n    end\nend\n\n### sbmv, (SB) symmetric banded matrix-vector multiplication\nfor (fname, elty) in ((:dsbmv_,:Float64),\n                      (:ssbmv_,:Float32))\n    @eval begin\n             #       SUBROUTINE DSBMV(UPLO,N,K,ALPHA,A,LDA,X,INCX,BETA,Y,INCY)\n             # *     .. Scalar Arguments ..\n             #       DOUBLE PRECISION ALPHA,BETA\n             #       INTEGER INCX,INCY,K,LDA,N\n             #       CHARACTER UPLO\n             # *     .. Array Arguments ..\n             #       DOUBLE PRECISION A(LDA,*),X(*),Y(*)\n        function sbmv!(uplo::Char, k::Integer, alpha::($elty), A::StridedMatrix{$elty}, x::StridedVector{$elty}, beta::($elty), y::StridedVector{$elty})\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt}, Ptr{$elty},\n                 Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &size(A,2), &k, &alpha,\n                 A, &max(1,stride(A,2)), x, &stride(x,1),\n                 &beta, y, &stride(y,1))\n            y\n        end\n        function sbmv(uplo::Char, k::Integer, alpha::($elty), A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            n = size(A,2)\n            sbmv!(uplo, k, alpha, A, x, zero($elty), similar(x, $elty, n))\n        end\n        function sbmv(uplo::Char, k::Integer, A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            sbmv(uplo, k, one($elty), A, x)\n        end\n    end\nend\n\n\"\"\"\n    sbmv(uplo, k, alpha, A, x)\n\nReturns `alpha*A*x` where `A` is a symmetric band matrix of order `size(A,2)` with `k`\nsuper-diagonals stored in the argument `A`.\nOnly the [`uplo`](@ref stdlib-blas-uplo) triangle of `A` is used.\n\"\"\"\nsbmv(uplo, k, alpha, A, x)\n\n\"\"\"\n    sbmv(uplo, k, A, x)\n\nReturns `A*x` where `A` is a symmetric band matrix of order `size(A,2)` with `k`\nsuper-diagonals stored in the argument `A`.\nOnly the [`uplo`](@ref stdlib-blas-uplo) triangle of `A` is used.\n\"\"\"\nsbmv(uplo, k, A, x)\n\n\"\"\"\n    sbmv!(uplo, k, alpha, A, x, beta, y)\n\nUpdate vector `y` as `alpha*A*x + beta*y` where `A` is a a symmetric band matrix of order\n`size(A,2)` with `k` super-diagonals stored in the argument `A`. The storage layout for `A`\nis described the reference BLAS module, level-2 BLAS at\n<http://www.netlib.org/lapack/explore-html/>.\nOnly the [`uplo`](@ref stdlib-blas-uplo) triangle of `A` is used.\n\nReturns the updated `y`.\n\"\"\"\nsbmv!\n\n### hbmv, (HB) Hermitian banded matrix-vector multiplication\nfor (fname, elty) in ((:zhbmv_,:Complex128),\n                      (:chbmv_,:Complex64))\n    @eval begin\n             #       SUBROUTINE ZHBMV(UPLO,N,K,ALPHA,A,LDA,X,INCX,BETA,Y,INCY)\n             # *     .. Scalar Arguments ..\n             #       DOUBLE PRECISION ALPHA,BETA\n             #       INTEGER INCX,INCY,K,LDA,N\n             #       CHARACTER UPLO\n             # *     .. Array Arguments ..\n             #       DOUBLE PRECISION A(LDA,*),X(*),Y(*)\n        function hbmv!(uplo::Char, k::Integer, alpha::($elty), A::StridedMatrix{$elty}, x::StridedVector{$elty}, beta::($elty), y::StridedVector{$elty})\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt}, Ptr{$elty},\n                 Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &size(A,2), &k, &alpha,\n                 A, &max(1,stride(A,2)), x, &stride(x,1),\n                 &beta, y, &stride(y,1))\n            y\n        end\n        function hbmv(uplo::Char, k::Integer, alpha::($elty), A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            n = size(A,2)\n            hbmv!(uplo, k, alpha, A, x, zero($elty), similar(x, $elty, n))\n        end\n        function hbmv(uplo::Char, k::Integer, A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            hbmv(uplo, k, one($elty), A, x)\n        end\n    end\nend\n\n### trmv, Triangular matrix-vector multiplication\n\n\"\"\"\n    trmv(ul, tA, dA, A, b)\n\nReturns `op(A)*b`, where `op` is determined by [`tA`](@ref stdlib-blas-trans).\nOnly the [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n[`dA`](@ref stdlib-blas-diag) determines if the diagonal values are read or\nare assumed to be all ones.\n\"\"\"\nfunction trmv end\n\n\"\"\"\n    trmv!(ul, tA, dA, A, b)\n\nReturns `op(A)*b`, where `op` is determined by [`tA`](@ref stdlib-blas-trans).\nOnly the [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n[`dA`](@ref stdlib-blas-diag) determines if the diagonal values are read or\nare assumed to be all ones.\nThe multiplication occurs in-place on `b`.\n\"\"\"\nfunction trmv! end\n\nfor (fname, elty) in ((:dtrmv_,:Float64),\n                        (:strmv_,:Float32),\n                        (:ztrmv_,:Complex128),\n                        (:ctrmv_,:Complex64))\n    @eval begin\n                #       SUBROUTINE DTRMV(UPLO,TRANS,DIAG,N,A,LDA,X,INCX)\n                # *     .. Scalar Arguments ..\n                #       INTEGER INCX,LDA,N\n                #       CHARACTER DIAG,TRANS,UPLO\n                # *     .. Array Arguments ..\n                #       DOUBLE PRECISION A(LDA,*),X(*)\n        function trmv!(uplo::Char, trans::Char, diag::Char, A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            n = checksquare(A)\n            if n != length(x)\n                throw(DimensionMismatch(\"A has size ($n,$n), x has length $(length(x))\"))\n            end\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &trans, &diag, &n,\n                 A, &max(1,stride(A,2)), x, &max(1,stride(x, 1)))\n            x\n        end\n        function trmv(uplo::Char, trans::Char, diag::Char, A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            trmv!(uplo, trans, diag, A, copy(x))\n        end\n    end\nend\n\n### trsv, Triangular matrix-vector solve\n\n\"\"\"\n    trsv!(ul, tA, dA, A, b)\n\nOverwrite `b` with the solution to `A*x = b` or one of the other two variants determined by\n[`tA`](@ref stdlib-blas-trans) and [`ul`](@ref stdlib-blas-uplo).\n[`dA`](@ref stdlib-blas-diag) determines if the diagonal values are read or\nare assumed to be all ones.\nReturns the updated `b`.\n\"\"\"\nfunction trsv! end\n\n\"\"\"\n    trsv(ul, tA, dA, A, b)\n\nReturns the solution to `A*x = b` or one of the other two variants determined by\n[`tA`](@ref stdlib-blas-trans) and [`ul`](@ref stdlib-blas-uplo).\n[`dA`](@ref stdlib-blas-diag) determines if the diagonal values are read or\nare assumed to be all ones.\n\"\"\"\nfunction trsv end\n\nfor (fname, elty) in ((:dtrsv_,:Float64),\n                        (:strsv_,:Float32),\n                        (:ztrsv_,:Complex128),\n                        (:ctrsv_,:Complex64))\n    @eval begin\n                #       SUBROUTINE DTRSV(UPLO,TRANS,DIAG,N,A,LDA,X,INCX)\n                #       .. Scalar Arguments ..\n                #       INTEGER INCX,LDA,N\n                #       CHARACTER DIAG,TRANS,UPLO\n                #       .. Array Arguments ..\n                #       DOUBLE PRECISION A(LDA,*),X(*)\n        function trsv!(uplo::Char, trans::Char, diag::Char, A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            n = checksquare(A)\n            if n != length(x)\n                throw(DimensionMismatch(\"size of A is $n != length(x) = $(length(x))\"))\n            end\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &trans, &diag, &n,\n                 A, &max(1,stride(A,2)), x, &stride(x, 1))\n            x\n        end\n        function trsv(uplo::Char, trans::Char, diag::Char, A::StridedMatrix{$elty}, x::StridedVector{$elty})\n            trsv!(uplo, trans, diag, A, copy(x))\n        end\n    end\nend\n\n### ger\n\n\"\"\"\n    ger!(alpha, x, y, A)\n\nRank-1 update of the matrix `A` with vectors `x` and `y` as `alpha*x*y' + A`.\n\"\"\"\nfunction ger! end\n\nfor (fname, elty) in ((:dger_,:Float64),\n                      (:sger_,:Float32),\n                      (:zgerc_,:Complex128),\n                      (:cgerc_,:Complex64))\n    @eval begin\n        function ger!(\u03b1::$elty, x::StridedVector{$elty}, y::StridedVector{$elty}, A::StridedMatrix{$elty})\n            m, n = size(A)\n            if m != length(x) || n != length(y)\n                throw(DimensionMismatch(\"A has size ($m,$n), x has length $(length(x)), y has length $(length(y))\"))\n            end\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{BlasInt}, Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty},\n                 Ptr{BlasInt}),\n                 &m, &n, &\u03b1, x,\n                 &stride(x, 1), y, &stride(y, 1), A,\n                 &max(1,stride(A,2)))\n            A\n        end\n    end\nend\n\n### syr\n\n\"\"\"\n    syr!(uplo, alpha, x, A)\n\nRank-1 update of the symmetric matrix `A` with vector `x` as `alpha*x*x.' + A`.\n[`uplo`](@ref stdlib-blas-uplo) controls which triangle of `A` is updated. Returns `A`.\n\"\"\"\nfunction syr! end\n\nfor (fname, elty, lib) in ((:dsyr_,:Float64,libblas),\n                           (:ssyr_,:Float32,libblas),\n                           (:zsyr_,:Complex128,liblapack),\n                           (:csyr_,:Complex64,liblapack))\n    @eval begin\n        function syr!(uplo::Char, \u03b1::$elty, x::StridedVector{$elty}, A::StridedMatrix{$elty})\n            n = checksquare(A)\n            if length(x) != n\n                throw(DimensionMismatch(\"A has size ($n,$n), x has length $(length(x))\"))\n            end\n            ccall((@blasfunc($fname), $lib), Void,\n                (Ptr{UInt8}, Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &n, &\u03b1, x,\n                 &stride(x, 1), A, &max(1,stride(A, 2)))\n            A\n        end\n    end\nend\n\n### her\n\n\"\"\"\n    her!(uplo, alpha, x, A)\n\nMethods for complex arrays only. Rank-1 update of the Hermitian matrix `A` with vector `x`\nas `alpha*x*x' + A`.\n[`uplo`](@ref stdlib-blas-uplo) controls which triangle of `A` is updated. Returns `A`.\n\"\"\"\nfunction her! end\n\nfor (fname, elty, relty) in ((:zher_,:Complex128, :Float64),\n                             (:cher_,:Complex64, :Float32))\n    @eval begin\n        function her!(uplo::Char, \u03b1::$relty, x::StridedVector{$elty}, A::StridedMatrix{$elty})\n            n = checksquare(A)\n            if length(x) != n\n                throw(DimensionMismatch(\"A has size ($n,$n), x has length $(length(x))\"))\n            end\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{UInt8}, Ptr{BlasInt}, Ptr{$relty}, Ptr{$elty},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &n, &\u03b1, x,\n                 &stride(x, 1), A, &max(1,stride(A,2)))\n            A\n        end\n    end\nend\n\n# Level 3\n## (GE) general matrix-matrix multiplication\n\n\"\"\"\n    gemm!(tA, tB, alpha, A, B, beta, C)\n\nUpdate `C` as `alpha*A*B + beta*C` or the other three variants according to\n[`tA`](@ref stdlib-blas-trans) and `tB`. Returns the updated `C`.\n\"\"\"\nfunction gemm! end\n\nfor (gemm, elty) in\n        ((:dgemm_,:Float64),\n         (:sgemm_,:Float32),\n         (:zgemm_,:Complex128),\n         (:cgemm_,:Complex64))\n    @eval begin\n             # SUBROUTINE DGEMM(TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)\n             # *     .. Scalar Arguments ..\n             #       DOUBLE PRECISION ALPHA,BETA\n             #       INTEGER K,LDA,LDB,LDC,M,N\n             #       CHARACTER TRANSA,TRANSB\n             # *     .. Array Arguments ..\n             #       DOUBLE PRECISION A(LDA,*),B(LDB,*),C(LDC,*)\n        function gemm!(transA::Char, transB::Char, alpha::($elty), A::StridedVecOrMat{$elty}, B::StridedVecOrMat{$elty}, beta::($elty), C::StridedVecOrMat{$elty})\n#           if any([stride(A,1), stride(B,1), stride(C,1)] .!= 1)\n#               error(\"gemm!: BLAS module requires contiguous matrix columns\")\n#           end  # should this be checked on every call?\n            m = size(A, transA == 'N' ? 1 : 2)\n            ka = size(A, transA == 'N' ? 2 : 1)\n            kb = size(B, transB == 'N' ? 1 : 2)\n            n = size(B, transB == 'N' ? 2 : 1)\n            if ka != kb || m != size(C,1) || n != size(C,2)\n                throw(DimensionMismatch(\"A has size ($m,$ka), B has size ($kb,$n), C has size $(size(C))\"))\n            end\n            ccall((@blasfunc($gemm), libblas), Void,\n                (Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty},\n                 Ptr{BlasInt}),\n                 &transA, &transB, &m, &n,\n                 &ka, &alpha, A, &max(1,stride(A,2)),\n                 B, &max(1,stride(B,2)), &beta, C,\n                 &max(1,stride(C,2)))\n            C\n        end\n        function gemm(transA::Char, transB::Char, alpha::($elty), A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            gemm!(transA, transB, alpha, A, B, zero($elty), similar(B, $elty, (size(A, transA == 'N' ? 1 : 2), size(B, transB == 'N' ? 2 : 1))))\n        end\n        function gemm(transA::Char, transB::Char, A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            gemm(transA, transB, one($elty), A, B)\n        end\n    end\nend\n\n\"\"\"\n    gemm(tA, tB, alpha, A, B)\n\nReturns `alpha*A*B` or the other three variants according to [`tA`](@ref stdlib-blas-trans) and `tB`.\n\"\"\"\ngemm(tA, tB, alpha, A, B)\n\n\"\"\"\n    gemm(tA, tB, A, B)\n\nReturns `A*B` or the other three variants according to [`tA`](@ref stdlib-blas-trans) and `tB`.\n\"\"\"\ngemm(tA, tB, A, B)\n\n\n## (SY) symmetric matrix-matrix and matrix-vector multiplication\nfor (mfname, elty) in ((:dsymm_,:Float64),\n                       (:ssymm_,:Float32),\n                       (:zsymm_,:Complex128),\n                       (:csymm_,:Complex64))\n    @eval begin\n             #     SUBROUTINE DSYMM(SIDE,UPLO,M,N,ALPHA,A,LDA,B,LDB,BETA,C,LDC)\n             #     .. Scalar Arguments ..\n             #     DOUBLE PRECISION ALPHA,BETA\n             #     INTEGER LDA,LDB,LDC,M,N\n             #     CHARACTER SIDE,UPLO\n             #     .. Array Arguments ..\n             #     DOUBLE PRECISION A(LDA,*),B(LDB,*),C(LDC,*)\n        function symm!(side::Char, uplo::Char, alpha::($elty), A::StridedMatrix{$elty}, B::StridedMatrix{$elty}, beta::($elty), C::StridedMatrix{$elty})\n            m, n = size(C)\n            j = checksquare(A)\n            if j != (side == 'L' ? m : n)\n                throw(DimensionMismatch(\"A has size $(size(A)), C has size ($m,$n)\"))\n            end\n            if size(B,2) != n\n                throw(DimensionMismatch(\"B has second dimension $(size(B,2)) but needs to match second dimension of C, $n\"))\n            end\n            ccall((@blasfunc($mfname), libblas), Void,\n                (Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}),\n                 &side, &uplo, &m, &n,\n                 &alpha, A, &max(1,stride(A,2)), B,\n                 &max(1,stride(B,2)), &beta, C, &max(1,stride(C,2)))\n            C\n        end\n        function symm(side::Char, uplo::Char, alpha::($elty), A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            symm!(side, uplo, alpha, A, B, zero($elty), similar(B))\n        end\n        function symm(side::Char, uplo::Char, A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            symm(side, uplo, one($elty), A, B)\n        end\n    end\nend\n\n\"\"\"\n    symm(side, ul, alpha, A, B)\n\nReturns `alpha*A*B` or `alpha*B*A` according to [`side`](@ref stdlib-blas-side).\n`A` is assumed to be symmetric. Only\nthe [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n\"\"\"\nsymm(side, ul, alpha, A, B)\n\n\"\"\"\n    symm(side, ul, A, B)\n\nReturns `A*B` or `B*A` according to [`side`](@ref stdlib-blas-side).\n`A` is assumed to be symmetric. Only the [`ul`](@ref stdlib-blas-uplo)\ntriangle of `A` is used.\n\"\"\"\nsymm(side, ul, A, B)\n\n\"\"\"\n    symm!(side, ul, alpha, A, B, beta, C)\n\nUpdate `C` as `alpha*A*B + beta*C` or `alpha*B*A + beta*C` according to [`side`](@ref stdlib-blas-side).\n`A` is assumed to be symmetric. Only the [`ul`](@ref stdlib-blas-uplo) triangle of\n`A` is used. Returns the updated `C`.\n\"\"\"\nsymm!\n\n## (HE) Hermitian matrix-matrix and matrix-vector multiplication\nfor (mfname, elty) in ((:zhemm_,:Complex128),\n                       (:chemm_,:Complex64))\n    @eval begin\n             #     SUBROUTINE DHEMM(SIDE,UPLO,M,N,ALPHA,A,LDA,B,LDB,BETA,C,LDC)\n             #     .. Scalar Arguments ..\n             #     DOUBLE PRECISION ALPHA,BETA\n             #     INTEGER LDA,LDB,LDC,M,N\n             #     CHARACTER SIDE,UPLO\n             #     .. Array Arguments ..\n             #     DOUBLE PRECISION A(LDA,*),B(LDB,*),C(LDC,*)\n        function hemm!(side::Char, uplo::Char, alpha::($elty), A::StridedMatrix{$elty}, B::StridedMatrix{$elty}, beta::($elty), C::StridedMatrix{$elty})\n            m, n = size(C)\n            j = checksquare(A)\n            if j != (side == 'L' ? m : n)\n                throw(DimensionMismatch(\"A has size $(size(A)), C has size ($m,$n)\"))\n            end\n            if size(B,2) != n\n                throw(DimensionMismatch(\"B has second dimension $(size(B,2)) but needs to match second dimension of C, $n\"))\n            end\n            ccall((@blasfunc($mfname), libblas), Void,\n                (Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}),\n                 &side, &uplo, &m, &n,\n                 &alpha, A, &max(1,stride(A,2)), B,\n                 &max(1,stride(B,2)), &beta, C, &max(1,stride(C,2)))\n            C\n        end\n        function hemm(side::Char, uplo::Char, alpha::($elty), A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            hemm!(side, uplo, alpha, A, B, zero($elty), similar(B))\n        end\n        function hemm(side::Char, uplo::Char, A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            hemm(side, uplo, one($elty), A, B)\n        end\n    end\nend\n\n## syrk\n\n\"\"\"\n    syrk!(uplo, trans, alpha, A, beta, C)\n\nRank-k update of the symmetric matrix `C` as `alpha*A*A.' + beta*C` or `alpha*A.'*A +\nbeta*C` according to [`trans`](@ref stdlib-blas-trans).\nOnly the [`uplo`](@ref stdlib-blas-uplo) triangle of `C` is used. Returns `C`.\n\"\"\"\nfunction syrk! end\n\n\"\"\"\n    syrk(uplo, trans, alpha, A)\n\nReturns either the upper triangle or the lower triangle of `A`,\naccording to [`uplo`](@ref stdlib-blas-uplo),\nof `alpha*A*A.'` or `alpha*A.'*A`,\naccording to [`trans`](@ref stdlib-blas-trans).\n\"\"\"\nfunction syrk end\n\nfor (fname, elty) in ((:dsyrk_,:Float64),\n                      (:ssyrk_,:Float32),\n                      (:zsyrk_,:Complex128),\n                      (:csyrk_,:Complex64))\n   @eval begin\n       # SUBROUTINE DSYRK(UPLO,TRANS,N,K,ALPHA,A,LDA,BETA,C,LDC)\n       # *     .. Scalar Arguments ..\n       #       REAL ALPHA,BETA\n       #       INTEGER K,LDA,LDC,N\n       #       CHARACTER TRANS,UPLO\n       # *     .. Array Arguments ..\n       #       REAL A(LDA,*),C(LDC,*)\n       function syrk!(uplo::Char, trans::Char,\n                      alpha::($elty), A::StridedVecOrMat{$elty},\n                      beta::($elty), C::StridedMatrix{$elty})\n           n = checksquare(C)\n           nn = size(A, trans == 'N' ? 1 : 2)\n           if nn != n throw(DimensionMismatch(\"C has size ($n,$n), corresponding dimension of A is $nn\")) end\n           k  = size(A, trans == 'N' ? 2 : 1)\n           ccall((@blasfunc($fname), libblas), Void,\n                 (Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt},\n                  Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty},\n                  Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &trans, &n, &k,\n                 &alpha, A, &max(1,stride(A,2)), &beta,\n                 C, &max(1,stride(C,2)))\n            C\n        end\n    end\nend\nfunction syrk(uplo::Char, trans::Char, alpha::Number, A::StridedVecOrMat)\n    T = eltype(A)\n    n = size(A, trans == 'N' ? 1 : 2)\n    syrk!(uplo, trans, convert(T,alpha), A, zero(T), similar(A, T, (n, n)))\nend\nsyrk(uplo::Char, trans::Char, A::StridedVecOrMat) = syrk(uplo, trans, one(eltype(A)), A)\n\n\"\"\"\n    herk!(uplo, trans, alpha, A, beta, C)\n\nMethods for complex arrays only. Rank-k update of the Hermitian matrix `C` as `alpha*A*A' +\nbeta*C` or `alpha*A'*A + beta*C` according to [`trans`](@ref stdlib-blas-trans).\nOnly the [`uplo`](@ref stdlib-blas-uplo) triangle of `C` is updated.\nReturns `C`.\n\"\"\"\nfunction herk! end\n\n\"\"\"\n    herk(uplo, trans, alpha, A)\n\nMethods for complex arrays only.\nReturns the [`uplo`](@ref stdlib-blas-uplo) triangle of `alpha*A*A'` or `alpha*A'*A`,\naccording to [`trans`](@ref stdlib-blas-trans).\n\"\"\"\nfunction herk end\n\nfor (fname, elty, relty) in ((:zherk_, :Complex128, :Float64),\n                             (:cherk_, :Complex64, :Float32))\n   @eval begin\n       # SUBROUTINE CHERK(UPLO,TRANS,N,K,ALPHA,A,LDA,BETA,C,LDC)\n       # *     .. Scalar Arguments ..\n       #       REAL ALPHA,BETA\n       #       INTEGER K,LDA,LDC,N\n       #       CHARACTER TRANS,UPLO\n       # *     ..\n       # *     .. Array Arguments ..\n       #       COMPLEX A(LDA,*),C(LDC,*)\n       function herk!(uplo::Char, trans::Char, \u03b1::$relty, A::StridedVecOrMat{$elty},\n                      \u03b2::$relty, C::StridedMatrix{$elty})\n           n = checksquare(C)\n           nn = size(A, trans == 'N' ? 1 : 2)\n           if nn != n\n               throw(DimensionMismatch(\"the matrix to update has dimension $n but the implied dimension of the update is $(size(A, trans == 'N' ? 1 : 2))\"))\n           end\n           k  = size(A, trans == 'N' ? 2 : 1)\n           ccall((@blasfunc($fname), libblas), Void,\n                 (Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt},\n                  Ptr{$relty}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$relty},\n                  Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &trans, &n, &k,\n                 &\u03b1, A, &max(1,stride(A,2)), &\u03b2,\n                 C, &max(1,stride(C,2)))\n           C\n       end\n       function herk(uplo::Char, trans::Char, \u03b1::$relty, A::StridedVecOrMat{$elty})\n           n = size(A, trans == 'N' ? 1 : 2)\n           herk!(uplo, trans, \u03b1, A, zero($relty), similar(A, (n,n)))\n       end\n       herk(uplo::Char, trans::Char, A::StridedVecOrMat{$elty}) = herk(uplo, trans, one($relty), A)\n   end\nend\n\n## syr2k\nfor (fname, elty) in ((:dsyr2k_,:Float64),\n                      (:ssyr2k_,:Float32),\n                      (:zsyr2k_,:Complex128),\n                      (:csyr2k_,:Complex64))\n    @eval begin\n             #       SUBROUTINE DSYR2K(UPLO,TRANS,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)\n             #\n             #       .. Scalar Arguments ..\n             #       REAL PRECISION ALPHA,BETA\n             #       INTEGER K,LDA,LDB,LDC,N\n             #       CHARACTER TRANS,UPLO\n             #       ..\n             #       .. Array Arguments ..\n             #       REAL PRECISION A(LDA,*),B(LDB,*),C(LDC,*)\n        function syr2k!(uplo::Char, trans::Char,\n                        alpha::($elty), A::StridedVecOrMat{$elty}, B::StridedVecOrMat{$elty},\n                        beta::($elty), C::StridedMatrix{$elty})\n            n = checksquare(C)\n            nn = size(A, trans == 'N' ? 1 : 2)\n            if nn != n throw(DimensionMismatch(\"C has size ($n,$n), corresponding dimension of A is $nn\")) end\n            k  = size(A, trans == 'N' ? 2 : 1)\n            ccall((@blasfunc($fname), libblas), Void,\n                (Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt},\n                 Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty},\n                 Ptr{$elty}, Ptr{BlasInt}),\n                 &uplo, &trans, &n, &k,\n                 &alpha, A, &max(1,stride(A,2)), B, &max(1,stride(B,2)), &beta,\n                 C, &max(1,stride(C,2)))\n            C\n        end\n    end\nend\nfunction syr2k(uplo::Char, trans::Char, alpha::Number, A::StridedVecOrMat, B::StridedVecOrMat)\n    T = eltype(A)\n    n = size(A, trans == 'N' ? 1 : 2)\n    syr2k!(uplo, trans, convert(T,alpha), A, B, zero(T), similar(A, T, (n, n)))\nend\nsyr2k(uplo::Char, trans::Char, A::StridedVecOrMat, B::StridedVecOrMat) = syr2k(uplo, trans, one(eltype(A)), A, B)\n\nfor (fname, elty1, elty2) in ((:zher2k_,:Complex128,:Float64), (:cher2k_,:Complex64,:Float32))\n   @eval begin\n       # SUBROUTINE CHER2K(UPLO,TRANS,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)\n       #\n       #       .. Scalar Arguments ..\n       #       COMPLEX ALPHA\n       #       REAL BETA\n       #       INTEGER K,LDA,LDB,LDC,N\n       #       CHARACTER TRANS,UPLO\n       #       ..\n       #       .. Array Arguments ..\n       #       COMPLEX A(LDA,*),B(LDB,*),C(LDC,*)\n       function her2k!(uplo::Char, trans::Char, alpha::($elty1),\n                       A::StridedVecOrMat{$elty1}, B::StridedVecOrMat{$elty1},\n                       beta::($elty2), C::StridedMatrix{$elty1})\n           n = checksquare(C)\n           nn = size(A, trans == 'N' ? 1 : 2)\n           if nn != n throw(DimensionMismatch(\"C has size ($n,$n), corresponding dimension of A is $nn\")) end\n           k  = size(A, trans == 'N' ? 2 : 1)\n           ccall((@blasfunc($fname), libblas), Void,\n                 (Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt},\n                  Ptr{$elty1}, Ptr{$elty1}, Ptr{BlasInt}, Ptr{$elty1}, Ptr{BlasInt},\n                  Ptr{$elty2},  Ptr{$elty1}, Ptr{BlasInt}),\n                 &uplo, &trans, &n, &k,\n                 &alpha, A, &max(1,stride(A,2)), B, &max(1,stride(B,2)),\n                 &beta, C, &max(1,stride(C,2)))\n           C\n       end\n       function her2k(uplo::Char, trans::Char, alpha::($elty1), A::StridedVecOrMat{$elty1}, B::StridedVecOrMat{$elty1})\n           n = size(A, trans == 'N' ? 1 : 2)\n           her2k!(uplo, trans, alpha, A, B, zero($elty2), similar(A, $elty1, (n,n)))\n       end\n       her2k(uplo::Char, trans::Char, A::StridedVecOrMat{$elty1}, B::StridedVecOrMat{$elty1}) = her2k(uplo, trans, one($elty1), A, B)\n   end\nend\n\n## (TR) Triangular matrix and vector multiplication and solution\n\n\"\"\"\n    trmm!(side, ul, tA, dA, alpha, A, B)\n\nUpdate `B` as `alpha*A*B` or one of the other three variants determined by\n[`side`](@ref stdlib-blas-side) and [`tA`](@ref stdlib-blas-trans).\nOnly the [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n[`dA`](@ref stdlib-blas-diag) determines if the diagonal values are read or\nare assumed to be all ones.\nReturns the updated `B`.\n\"\"\"\nfunction trmm! end\n\n\"\"\"\n    trmm(side, ul, tA, dA, alpha, A, B)\n\nReturns `alpha*A*B` or one of the other three variants determined by\n[`side`](@ref stdlib-blas-side) and [`tA`](@ref stdlib-blas-trans).\nOnly the [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n[`dA`](@ref stdlib-blas-diag) determines if the diagonal values are read or\nare assumed to be all ones.\n\"\"\"\nfunction trmm end\n\n\"\"\"\n    trsm!(side, ul, tA, dA, alpha, A, B)\n\nOverwrite `B` with the solution to `A*X = alpha*B` or one of the other three variants\ndetermined by [`side`](@ref stdlib-blas-side) and [`tA`](@ref stdlib-blas-trans).\nOnly the [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n[`dA`](@ref stdlib-blas-diag) determines if the diagonal values are read or\nare assumed to be all ones.\nReturns the updated `B`.\n\"\"\"\nfunction trsm! end\n\n\"\"\"\n    trsm(side, ul, tA, dA, alpha, A, B)\n\nReturns the solution to `A*X = alpha*B` or one of the other three variants determined by\ndetermined by [`side`](@ref stdlib-blas-side) and [`tA`](@ref stdlib-blas-trans).\nOnly the [`ul`](@ref stdlib-blas-uplo) triangle of `A` is used.\n[`dA`](@ref stdlib-blas-diag) determines if the diagonal values are read or\nare assumed to be all ones.\n\"\"\"\nfunction trsm end\n\nfor (mmname, smname, elty) in\n        ((:dtrmm_,:dtrsm_,:Float64),\n         (:strmm_,:strsm_,:Float32),\n         (:ztrmm_,:ztrsm_,:Complex128),\n         (:ctrmm_,:ctrsm_,:Complex64))\n    @eval begin\n        #       SUBROUTINE DTRMM(SIDE,UPLO,TRANSA,DIAG,M,N,ALPHA,A,LDA,B,LDB)\n        # *     .. Scalar Arguments ..\n        #       DOUBLE PRECISION ALPHA\n        #       INTEGER LDA,LDB,M,N\n        #       CHARACTER DIAG,SIDE,TRANSA,UPLO\n        # *     .. Array Arguments ..\n        #       DOUBLE PRECISION A(LDA,*),B(LDB,*)\n        function trmm!(side::Char, uplo::Char, transa::Char, diag::Char, alpha::Number,\n                       A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            m, n = size(B)\n            nA = checksquare(A)\n            if nA != (side == 'L' ? m : n)\n                throw(DimensionMismatch(\"size of A, $(size(A)), doesn't match $side size of B with dims, $(size(B))\"))\n            end\n            ccall((@blasfunc($mmname), libblas), Void,\n                  (Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{BlasInt}, Ptr{BlasInt},\n                   Ptr{$elty}, Ptr{$elty}, Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                  &side, &uplo, &transa, &diag, &m, &n,\n                  &alpha, A, &max(1,stride(A,2)), B, &max(1,stride(B,2)))\n            B\n        end\n        function trmm(side::Char, uplo::Char, transa::Char, diag::Char,\n                      alpha::$elty, A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            trmm!(side, uplo, transa, diag, alpha, A, copy(B))\n        end\n        #       SUBROUTINE DTRSM(SIDE,UPLO,TRANSA,DIAG,M,N,ALPHA,A,LDA,B,LDB)\n        # *     .. Scalar Arguments ..\n        #       DOUBLE PRECISION ALPHA\n        #       INTEGER LDA,LDB,M,N\n        #       CHARACTER DIAG,SIDE,TRANSA,UPLO\n        # *     .. Array Arguments ..\n        #       DOUBLE PRECISION A(LDA,*),B(LDB,*)\n        function trsm!(side::Char, uplo::Char, transa::Char, diag::Char,\n                       alpha::$elty, A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            m, n = size(B)\n            k = checksquare(A)\n            if k != (side == 'L' ? m : n)\n                throw(DimensionMismatch(\"size of A is ($k,$k), size of B is ($m,$n), side is $side, and transa='$transa'\"))\n            end\n            ccall((@blasfunc($smname), libblas), Void,\n                (Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8},\n                 Ptr{BlasInt}, Ptr{BlasInt}, Ptr{$elty}, Ptr{$elty},\n                 Ptr{BlasInt}, Ptr{$elty}, Ptr{BlasInt}),\n                 &side, &uplo, &transa, &diag,\n                 &m, &n, &alpha, A,\n                 &max(1,stride(A,2)), B, &max(1,stride(B,2)))\n            B\n        end\n        function trsm(side::Char, uplo::Char, transa::Char, diag::Char, alpha::$elty, A::StridedMatrix{$elty}, B::StridedMatrix{$elty})\n            trsm!(side, uplo, transa, diag, alpha, A, copy(B))\n        end\n    end\nend\n\nend # module\n\nfunction copy!(dest::Array{T}, rdest::Union{UnitRange{Ti},Range{Ti}},\n               src::Array{T}, rsrc::Union{UnitRange{Ti},Range{Ti}}) where {T<:BlasFloat,Ti<:Integer}\n    if minimum(rdest) < 1 || maximum(rdest) > length(dest)\n        throw(ArgumentError(\"range out of bounds for dest, of length $(length(dest))\"))\n    end\n    if minimum(rsrc) < 1 || maximum(rsrc) > length(src)\n        throw(ArgumentError(\"range out of bounds for src, of length $(length(src))\"))\n    end\n    if length(rdest) != length(rsrc)\n        throw(DimensionMismatch(\"ranges must be of the same length\"))\n    end\n    BLAS.blascopy!(length(rsrc), pointer(src)+(first(rsrc)-1)*sizeof(T), step(rsrc),\n                   pointer(dest)+(first(rdest)-1)*sizeof(T), step(rdest))\n    dest\nend\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/base/sparse/cholmod.jl": "# This file is a part of Julia. License is MIT: https://julialang.org/license\n\nmodule CHOLMOD\n\nimport Base: (*), convert, copy, eltype, get, getindex, show, size,\n             IndexStyle, IndexLinear, IndexCartesian, ctranspose\n\nimport Base.LinAlg: (\\), A_mul_Bc, A_mul_Bt, Ac_ldiv_B, Ac_mul_B, At_ldiv_B, At_mul_B,\n                 cholfact, cholfact!, det, diag, ishermitian, isposdef,\n                 issymmetric, ldltfact, ldltfact!, logdet\n\nimportall ..SparseArrays\n\nexport\n    Dense,\n    Factor,\n    Sparse\n\nimport ..SparseArrays: AbstractSparseMatrix, SparseMatrixCSC, increment, indtype\n\n#########\n# Setup #\n#########\n\ninclude(\"cholmod_h.jl\")\n\nconst CHOLMOD_MIN_VERSION = v\"2.1.1\"\n\n### These offsets are defined in SuiteSparse_wrapper.c\nconst common_size = ccall((:jl_cholmod_common_size,:libsuitesparse_wrapper),Int,())\n\nconst cholmod_com_offsets = Vector{Csize_t}(19)\nccall((:jl_cholmod_common_offsets, :libsuitesparse_wrapper),\n    Void, (Ptr{Csize_t},), cholmod_com_offsets)\n\n## macro to generate the name of the C function according to the integer type\nmacro cholmod_name(nm, typ)\n    string(\"cholmod_\", eval(typ) == SuiteSparse_long ? \"l_\" : \"\", nm)\nend\n\nfunction start(a::Vector{UInt8})\n    @isok ccall((@cholmod_name(\"start\", SuiteSparse_long), :libcholmod),\n        Cint, (Ptr{UInt8},), a)\n    return a\nend\n\nfunction finish(a::Vector{UInt8})\n    @isok ccall((@cholmod_name(\"finish\", SuiteSparse_long), :libcholmod),\n        Cint, (Ptr{UInt8},), a)\n    return a\nend\n\nfunction defaults(a::Vector{UInt8})\n    @isok ccall((@cholmod_name(\"defaults\", SuiteSparse_long), :libcholmod),\n        Cint, (Ptr{UInt8},), a)\n    return a\nend\n\ncommon() = commonStruct\n\nconst build_version_array = Vector{Cint}(3)\nccall((:jl_cholmod_version, :libsuitesparse_wrapper), Cint, (Ptr{Cint},), build_version_array)\nconst build_version = VersionNumber(build_version_array...)\n\nfunction __init__()\n    try\n        ### Check if the linked library is compatible with the Julia code\n        if Libdl.dlsym_e(Libdl.dlopen(\"libcholmod\"), :cholmod_version) != C_NULL\n            current_version_array = Vector{Cint}(3)\n            ccall((:cholmod_version, :libcholmod), Cint, (Ptr{Cint},), current_version_array)\n            current_version = VersionNumber(current_version_array...)\n        else # CHOLMOD < 2.1.1 does not include cholmod_version()\n            current_version = v\"0.0.0\"\n        end\n\n\n        if current_version < CHOLMOD_MIN_VERSION\n            warn(\"\"\"\n\n                CHOLMOD version incompatibility\n\n                Julia was compiled with CHOLMOD version $build_version. It is\n                currently linked with a version older than\n                $(CHOLMOD_MIN_VERSION). This might cause Julia to\n                terminate when working with sparse matrix factorizations,\n                e.g. solving systems of equations with \\\\.\n\n                It is recommended that you use Julia with a recent version\n                of CHOLMOD, or download the generic binaries\n                from www.julialang.org, which ship with the correct\n                versions of all dependencies.\n            \"\"\")\n        elseif build_version_array[1] != current_version_array[1]\n            warn(\"\"\"\n\n                CHOLMOD version incompatibility\n\n                Julia was compiled with CHOLMOD version $build_version. It is\n                currently linked with version $current_version.\n                This might cause Julia to terminate when working with\n                sparse matrix factorizations, e.g. solving systems of\n                equations with \\\\.\n\n                It is recommended that you use Julia with the same major\n                version of CHOLMOD as the one used during the build, or\n                download the generic binaries from www.julialang.org,\n                which ship with the correct versions of all dependencies.\n            \"\"\")\n        end\n\n        intsize = Int(ccall((:jl_cholmod_sizeof_long,:libsuitesparse_wrapper),Csize_t,()))\n        if intsize != 4length(IndexTypes)\n            warn(\"\"\"\n\n                 CHOLMOD integer size incompatibility\n\n                 Julia was compiled with a version of CHOLMOD that\n                 supported $(32length(IndexTypes)) bit integers. It is\n                 currently linked with version that supports $(8intsize)\n                 integers. This might cause Julia to terminate when\n                 working with sparse matrix factorizations, e.g. solving\n                 systems of equations with \\\\.\n\n                 This problem can be fixed by modifying the Julia build\n                 configuration or by downloading the OS X or generic\n                 Linux binary from www.julialang.org, which include\n                 the correct versions of all dependencies.\n             \"\"\")\n        end\n\n        ### Initiate CHOLMOD\n        ### The common struct. Controls the type of factorization and keeps pointers\n        ### to temporary memory.\n        global const commonStruct = fill(0xff, common_size)\n\n        global const common_supernodal =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[4] + 1))\n        global const common_final_ll =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[7] + 1))\n        global const common_print =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[13] + 1))\n        global const common_itype =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[18] + 1))\n        global const common_dtype =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[19] + 1))\n        global const common_nmethods =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[15] + 1))\n        global const common_postorder =\n            convert(Ptr{Cint}, pointer(commonStruct, cholmod_com_offsets[17] + 1))\n\n        start(commonStruct)              # initializes CHOLMOD\n        set_print_level(commonStruct, 0) # no printing from CHOLMOD by default\n\n        # Register gc tracked allocator if CHOLMOD is new enough\n        if current_version >= v\"3.0.0\"\n            cnfg = cglobal((:SuiteSparse_config, :libsuitesparseconfig), Ptr{Void})\n            unsafe_store!(cnfg, cglobal(:jl_malloc, Ptr{Void}), 1)\n            unsafe_store!(cnfg, cglobal(:jl_calloc, Ptr{Void}), 2)\n            unsafe_store!(cnfg, cglobal(:jl_realloc, Ptr{Void}), 3)\n            unsafe_store!(cnfg, cglobal(:jl_free, Ptr{Void}), 4)\n        end\n\n    catch ex\n        Base.showerror_nostdio(ex,\n            \"WARNING: Error during initialization of module CHOLMOD\")\n    end\nend\n\nfunction set_print_level(cm::Array{UInt8}, lev::Integer)\n    global common_print\n    unsafe_store!(common_print, lev)\nend\n\n####################\n# Type definitions #\n####################\n\nabstract type SuiteSparseStruct end\n\n# The three core data types for CHOLMOD: Dense, Sparse and Factor.\n# CHOLMOD manages the memory, so the Julia versions only wrap a\n# pointer to a struct.  Therefore finalizers should be registered each\n# time a pointer is returned from CHOLMOD.\n\n# Dense\nstruct C_Dense{T<:VTypes} <: SuiteSparseStruct\n    nrow::Csize_t\n    ncol::Csize_t\n    nzmax::Csize_t\n    d::Csize_t\n    x::Ptr{T}\n    z::Ptr{Void}\n    xtype::Cint\n    dtype::Cint\nend\n\nmutable struct Dense{T<:VTypes} <: DenseMatrix{T}\n    p::Ptr{C_Dense{T}}\nend\n\n# Sparse\nstruct C_Sparse{Tv<:VTypes} <: SuiteSparseStruct\n    nrow::Csize_t\n    ncol::Csize_t\n    nzmax::Csize_t\n    p::Ptr{SuiteSparse_long}\n    i::Ptr{SuiteSparse_long}\n    nz::Ptr{SuiteSparse_long}\n    x::Ptr{Tv}\n    z::Ptr{Void}\n    stype::Cint\n    itype::Cint\n    xtype::Cint\n    dtype::Cint\n    sorted::Cint\n    packed::Cint\nend\n\n# Corresponds to the exact definition of cholmod_sparse_struct in the library.\n# Useful when reading matrices of unknown type from files as in\n# cholmod_read_sparse\nstruct C_SparseVoid <: SuiteSparseStruct\n    nrow::Csize_t\n    ncol::Csize_t\n    nzmax::Csize_t\n    p::Ptr{Void}\n    i::Ptr{Void}\n    nz::Ptr{Void}\n    x::Ptr{Void}\n    z::Ptr{Void}\n    stype::Cint\n    itype::Cint\n    xtype::Cint\n    dtype::Cint\n    sorted::Cint\n    packed::Cint\nend\n\nmutable struct Sparse{Tv<:VTypes} <: AbstractSparseMatrix{Tv,SuiteSparse_long}\n    p::Ptr{C_Sparse{Tv}}\n    function Sparse{Tv}(p::Ptr{C_Sparse{Tv}}) where Tv<:VTypes\n        if p == C_NULL\n            throw(ArgumentError(\"sparse matrix construction failed for \" *\n                \"unknown reasons. Please submit a bug report.\"))\n        end\n        new(p)\n    end\nend\nSparse(p::Ptr{C_Sparse{Tv}}) where {Tv<:VTypes} = Sparse{Tv}(p)\n\n# Factor\n\nif build_version >= v\"2.1.0\" # CHOLMOD version 2.1.0 or later\n    struct C_Factor{Tv<:VTypes} <: SuiteSparseStruct\n        n::Csize_t\n        minor::Csize_t\n        Perm::Ptr{SuiteSparse_long}\n        ColCount::Ptr{SuiteSparse_long}\n        IPerm::Ptr{SuiteSparse_long}        # this pointer was added in verison 2.1.0\n        nzmax::Csize_t\n        p::Ptr{SuiteSparse_long}\n        i::Ptr{SuiteSparse_long}\n        x::Ptr{Tv}\n        z::Ptr{Void}\n        nz::Ptr{SuiteSparse_long}\n        next::Ptr{SuiteSparse_long}\n        prev::Ptr{SuiteSparse_long}\n        nsuper::Csize_t\n        ssize::Csize_t\n        xsize::Csize_t\n        maxcsize::Csize_t\n        maxesize::Csize_t\n        super::Ptr{SuiteSparse_long}\n        pi::Ptr{SuiteSparse_long}\n        px::Ptr{SuiteSparse_long}\n        s::Ptr{SuiteSparse_long}\n        ordering::Cint\n        is_ll::Cint\n        is_super::Cint\n        is_monotonic::Cint\n        itype::Cint\n        xtype::Cint\n        dtype::Cint\n    end\nelse\n    struct C_Factor{Tv<:VTypes} <: SuiteSparseStruct\n        n::Csize_t\n        minor::Csize_t\n        Perm::Ptr{SuiteSparse_long}\n        ColCount::Ptr{SuiteSparse_long}\n        nzmax::Csize_t\n        p::Ptr{SuiteSparse_long}\n        i::Ptr{SuiteSparse_long}\n        x::Ptr{Tv}\n        z::Ptr{Void}\n        nz::Ptr{SuiteSparse_long}\n        next::Ptr{SuiteSparse_long}\n        prev::Ptr{SuiteSparse_long}\n        nsuper::Csize_t\n        ssize::Csize_t\n        xsize::Csize_t\n        maxcsize::Csize_t\n        maxesize::Csize_t\n        super::Ptr{SuiteSparse_long}\n        pi::Ptr{SuiteSparse_long}\n        px::Ptr{SuiteSparse_long}\n        s::Ptr{SuiteSparse_long}\n        ordering::Cint\n        is_ll::Cint\n        is_super::Cint\n        is_monotonic::Cint\n        itype::Cint\n        xtype::Cint\n        dtype::Cint\n    end\nend\n\nmutable struct Factor{Tv} <: Factorization{Tv}\n    p::Ptr{C_Factor{Tv}}\n    function Factor{Tv}(p::Ptr{C_Factor{Tv}}) where Tv\n        if p == C_NULL\n            throw(ArgumentError(\"factorization construction failed for \" *\n                \"unknown reasons. Please submit a bug report.\"))\n        end\n        new(p)\n    end\nend\nFactor(p::Ptr{C_Factor{Tv}}) where {Tv<:VTypes} = Factor{Tv}(p)\n\n# Define get similar to get(Nullable) to check pointers. All pointer loads\n# should be wrapped in get to make sure that SuiteSparse is not called with\n# a C_NULL pointer which could cause a segfault. Pointers are set to null\n# when serialized so this can happen when mutiple processes are in use.\nfunction get(p::Ptr{T}) where T<:SuiteSparseStruct\n    if p == C_NULL\n        throw(ArgumentError(\"pointer to the $T object is null. This can \" *\n            \"happen if the object has been serialized.\"))\n    else\n        return p\n    end\nend\n\n# FactorComponent, for encoding particular factors from a factorization\nmutable struct FactorComponent{Tv,S} <: AbstractMatrix{Tv}\n    F::Factor{Tv}\n\n    function FactorComponent{Tv,S}(F::Factor{Tv}) where {Tv,S}\n        s = unsafe_load(get(F.p))\n        if s.is_ll != 0\n            if !(S == :L || S == :U || S == :PtL || S == :UP)\n                throw(CHOLMODException(string(S, \" not supported for sparse \",\n                    \"LLt matrices; try :L, :U, :PtL, or :UP\")))\n            end\n        elseif !(S == :L || S == :U || S == :PtL || S == :UP ||\n                S == :D || S == :LD || S == :DU || S == :PtLD || S == :DUP)\n            throw(CHOLMODException(string(S, \" not supported for sparse LDLt \",\n                \"matrices; try :L, :U, :PtL, :UP, :D, :LD, :DU, :PtLD, or :DUP\")))\n        end\n        new(F)\n    end\nend\nfunction FactorComponent(F::Factor{Tv}, sym::Symbol) where Tv\n    FactorComponent{Tv,sym}(F)\nend\n\nFactor(FC::FactorComponent) = Factor(FC.F)\n\n#################\n# Thin wrappers #\n#################\n\n# Dense wrappers\n## Note! Integer type defaults to Cint, but this is actually not necessary, but\n## making this a choice would require another type parameter in the Dense type\n\n### cholmod_core_h ###\nfunction allocate_dense(nrow::Integer, ncol::Integer, d::Integer, ::Type{Float64})\n    d = Dense(ccall((:cholmod_l_allocate_dense, :libcholmod), Ptr{C_Dense{Float64}},\n        (Csize_t, Csize_t, Csize_t, Cint, Ptr{Void}),\n        nrow, ncol, d, REAL, common()))\n    finalizer(d, free!)\n    d\nend\nfunction allocate_dense(nrow::Integer, ncol::Integer, d::Integer, ::Type{Complex{Float64}})\n    d = Dense(ccall((:cholmod_l_allocate_dense, :libcholmod), Ptr{C_Dense{Complex{Float64}}},\n        (Csize_t, Csize_t, Csize_t, Cint, Ptr{Void}),\n        nrow, ncol, d, COMPLEX, common()))\n    finalizer(d, free!)\n    d\nend\n\nfree_dense!(p::Ptr{C_Dense{T}}) where {T} = ccall((:cholmod_l_free_dense, :libcholmod),\n    Cint, (Ref{Ptr{C_Dense{T}}}, Ptr{Void}), p, common())\n\nfunction zeros(m::Integer, n::Integer, ::Type{T}) where T<:VTypes\n    d = Dense(ccall((:cholmod_l_zeros, :libcholmod), Ptr{C_Dense{T}},\n        (Csize_t, Csize_t, Cint, Ptr{UInt8}),\n         m, n, xtyp(T), common()))\n    finalizer(d, free!)\n    d\nend\nzeros(m::Integer, n::Integer) = zeros(m, n, Float64)\n\nfunction ones(m::Integer, n::Integer, ::Type{T}) where T<:VTypes\n    d = Dense(ccall((:cholmod_l_ones, :libcholmod), Ptr{C_Dense{T}},\n        (Csize_t, Csize_t, Cint, Ptr{UInt8}),\n         m, n, xtyp(T), common()))\n    finalizer(d, free!)\n    d\nend\nones(m::Integer, n::Integer) = ones(m, n, Float64)\n\nfunction eye(m::Integer, n::Integer, ::Type{T}) where T<:VTypes\n    d = Dense(ccall((:cholmod_l_eye, :libcholmod), Ptr{C_Dense{T}},\n        (Csize_t, Csize_t, Cint, Ptr{UInt8}),\n         m, n, xtyp(T), common()))\n    finalizer(d, free!)\n    d\nend\neye(m::Integer, n::Integer) = eye(m, n, Float64)\neye(n::Integer) = eye(n, n, Float64)\n\nfunction copy_dense(A::Dense{Tv}) where Tv<:VTypes\n    d = Dense(ccall((:cholmod_l_copy_dense, :libcholmod), Ptr{C_Dense{Tv}},\n        (Ptr{C_Dense{Tv}}, Ptr{UInt8}),\n         get(A.p), common()))\n    finalizer(d, free!)\n    d\nend\n\nfunction sort!(S::Sparse{Tv}) where Tv<:VTypes\n    @isok ccall((:cholmod_l_sort, :libcholmod), SuiteSparse_long,\n        (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n         get(S.p), common())\n    return S\nend\n\n### cholmod_matrixops.h ###\nfunction norm_dense(D::Dense{Tv}, p::Integer) where Tv<:VTypes\n    s = unsafe_load(get(D.p))\n    if p == 2\n        if s.ncol > 1\n            throw(ArgumentError(\"2 norm only supported when matrix has one column\"))\n        end\n    elseif p != 0 && p != 1\n        throw(ArgumentError(\"second argument must be either 0 (Inf norm), 1, or 2\"))\n    end\n    ccall((:cholmod_l_norm_dense, :libcholmod), Cdouble,\n        (Ptr{C_Dense{Tv}}, Cint, Ptr{UInt8}),\n          get(D.p), p, common())\nend\n\n### cholmod_check.h ###\nfunction check_dense(A::Dense{T}) where T<:VTypes\n    ccall((:cholmod_l_check_dense, :libcholmod), Cint,\n          (Ptr{C_Dense{T}}, Ptr{UInt8}),\n          A.p, common())!=0\nend\n\n# Non-Dense wrappers\n### cholmod_core.h ###\nfunction allocate_sparse(nrow::Integer, ncol::Integer, nzmax::Integer,\n        sorted::Bool, packed::Bool, stype::Integer, ::Type{Float64})\n    s = Sparse(ccall((@cholmod_name(\"allocate_sparse\", SuiteSparse_long), :libcholmod),\n            Ptr{C_Sparse{Float64}},\n                (Csize_t, Csize_t, Csize_t, Cint,\n                 Cint, Cint, Cint, Ptr{Void}),\n                nrow, ncol, nzmax, sorted,\n                packed, stype, REAL, common()))\n    finalizer(s, free!)\n    s\nend\nfunction allocate_sparse(nrow::Integer, ncol::Integer, nzmax::Integer,\n        sorted::Bool, packed::Bool, stype::Integer, ::Type{Complex{Float64}})\n    s = Sparse(ccall((@cholmod_name(\"allocate_sparse\", SuiteSparse_long), :libcholmod),\n            Ptr{C_Sparse{Complex{Float64}}},\n                (Csize_t, Csize_t, Csize_t, Cint,\n                 Cint, Cint, Cint, Ptr{Void}),\n                nrow, ncol, nzmax, sorted,\n                packed, stype, COMPLEX, common()))\n    finalizer(s, free!)\n    s\nend\nfunction free_sparse!(ptr::Ptr{C_Sparse{Tv}}) where Tv<:VTypes\n    @isok ccall((@cholmod_name(\"free_sparse\", SuiteSparse_long), :libcholmod), Cint,\n            (Ptr{Ptr{C_Sparse{Tv}}}, Ptr{UInt8}),\n                &ptr, common())\nend\n\nfunction free_sparse!(ptr::Ptr{C_SparseVoid})\n    @isok ccall((@cholmod_name(\"free_sparse\", SuiteSparse_long), :libcholmod), Cint,\n            (Ptr{Ptr{C_SparseVoid}}, Ptr{UInt8}),\n                &ptr, common())\nend\n\nfunction free_factor!(ptr::Ptr{C_Factor{Tv}}) where Tv<:VTypes\n    # Warning! Important that finalizer doesn't modify the global Common struct.\n    @isok ccall((@cholmod_name(\"free_factor\", SuiteSparse_long), :libcholmod), Cint,\n            (Ptr{Ptr{C_Factor{Tv}}}, Ptr{Void}),\n                &ptr, common())\nend\n\nfunction aat(A::Sparse{Tv}, fset::Vector{SuiteSparse_long}, mode::Integer) where Tv<:VRealTypes\n    s = Sparse(ccall((@cholmod_name(\"aat\", SuiteSparse_long), :libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{SuiteSparse_long}, Csize_t, Cint, Ptr{UInt8}),\n                get(A.p), fset, length(fset), mode, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction sparse_to_dense(A::Sparse{Tv}) where Tv<:VTypes\n    d = Dense(ccall((@cholmod_name(\"sparse_to_dense\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Dense{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(A.p), common()))\n    finalizer(d, free!)\n    d\nend\nfunction dense_to_sparse(D::Dense{Tv}, ::Type{SuiteSparse_long}) where Tv<:VTypes\n    s = Sparse(ccall((@cholmod_name(\"dense_to_sparse\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Dense{Tv}}, Cint, Ptr{UInt8}),\n                get(D.p), true, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction factor_to_sparse!(F::Factor{Tv}) where Tv<:VTypes\n    ss = unsafe_load(F.p)\n    ss.xtype > PATTERN || throw(CHOLMODException(\"only numeric factors are supported\"))\n    s = Sparse(ccall((@cholmod_name(\"factor_to_sparse\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n                get(F.p), common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction change_factor!(::Type{Float64}, to_ll::Bool,\n        to_super::Bool, to_packed::Bool, to_monotonic::Bool, F::Factor{Tv}) where Tv<:VTypes\n    @isok ccall((@cholmod_name(\"change_factor\", SuiteSparse_long),:libcholmod), Cint,\n            (Cint, Cint, Cint, Cint, Cint, Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n                REAL, to_ll, to_super, to_packed, to_monotonic, get(F.p), common())\n    Factor{Float64}(F.p)\nend\n\nfunction change_factor!(::Type{Complex{Float64}}, to_ll::Bool,\n        to_super::Bool, to_packed::Bool, to_monotonic::Bool, F::Factor{Tv}) where Tv<:VTypes\n    @isok ccall((@cholmod_name(\"change_factor\", SuiteSparse_long),:libcholmod), Cint,\n            (Cint, Cint, Cint, Cint, Cint, Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n                COMPLEX, to_ll, to_super, to_packed, to_monotonic, get(F.p), common())\n    Factor{Complex{Float64}}(F.p)\nend\n\nfunction check_sparse(A::Sparse{Tv}) where Tv<:VTypes\n    ccall((@cholmod_name(\"check_sparse\", SuiteSparse_long),:libcholmod), Cint,\n          (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n          get(A.p), common())!=0\nend\n\nfunction check_factor(F::Factor{Tv}) where Tv<:VTypes\n    ccall((@cholmod_name(\"check_factor\", SuiteSparse_long),:libcholmod), Cint,\n          (Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n          get(F.p), common())!=0\nend\n\nfunction nnz{Tv<:VTypes}(A::Sparse{Tv})\n    ccall((@cholmod_name(\"nnz\", SuiteSparse_long),:libcholmod), Int,\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(A.p), common())\nend\n\nfunction speye(m::Integer, n::Integer, ::Type{Tv}) where Tv<:VTypes\n    s = Sparse(ccall((@cholmod_name(\"speye\", SuiteSparse_long), :libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Csize_t, Csize_t, Cint, Ptr{UInt8}),\n                m, n, xtyp(Tv), common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction spzeros(m::Integer, n::Integer, nzmax::Integer, ::Type{Tv}) where Tv<:VTypes\n    s = Sparse(ccall((@cholmod_name(\"spzeros\", SuiteSparse_long), :libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Csize_t, Csize_t, Csize_t, Cint, Ptr{UInt8}),\n             m, n, nzmax, xtyp(Tv), common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction transpose_(A::Sparse{Tv}, values::Integer) where Tv<:VTypes\n    s = Sparse(ccall((@cholmod_name(\"transpose\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Cint, Ptr{UInt8}),\n                get(A.p), values, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction copy_factor(F::Factor{Tv}) where Tv<:VTypes\n    f = Factor(ccall((@cholmod_name(\"copy_factor\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Factor{Tv}},\n            (Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n                get(F.p), common()))\n    finalizer(f, free!)\n    f\nend\nfunction copy_sparse(A::Sparse{Tv}) where Tv<:VTypes\n    s = Sparse(ccall((@cholmod_name(\"copy_sparse\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(A.p), common()))\n    finalizer(s, free!)\n    s\nend\nfunction copy(A::Sparse{Tv}, stype::Integer, mode::Integer) where Tv<:VRealTypes\n    s = Sparse(ccall((@cholmod_name(\"copy\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Cint, Cint, Ptr{UInt8}),\n                get(A.p), stype, mode, common()))\n    finalizer(s, free!)\n    s\nend\n\n### cholmod_check.h ###\nfunction print_sparse(A::Sparse{Tv}, name::String) where Tv<:VTypes\n    isascii(name) || error(\"non-ASCII name: $name\")\n    cm = common()\n    set_print_level(cm, 3)\n    @isok ccall((@cholmod_name(\"print_sparse\", SuiteSparse_long),:libcholmod), Cint,\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}, Ptr{UInt8}),\n                 get(A.p), name, cm)\n    nothing\nend\nfunction print_factor(F::Factor{Tv}, name::String) where Tv<:VTypes\n    cm = common()\n    set_print_level(cm, 3)\n    @isok ccall((@cholmod_name(\"print_factor\", SuiteSparse_long),:libcholmod), Cint,\n            (Ptr{C_Factor{Tv}}, Ptr{UInt8}, Ptr{UInt8}),\n                get(F.p), name, cm)\n    nothing\nend\n\n### cholmod_matrixops.h ###\nfunction ssmult(A::Sparse{Tv}, B::Sparse{Tv}, stype::Integer,\n        values::Bool, sorted::Bool) where Tv<:VRealTypes\n    lA = unsafe_load(get(A.p))\n    lB = unsafe_load(get(B.p))\n    if lA.ncol != lB.nrow\n        throw(DimensionMismatch(\"inner matrix dimensions do not fit\"))\n    end\n    s = Sparse(ccall((@cholmod_name(\"ssmult\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{C_Sparse{Tv}}, Cint, Cint,\n                Cint, Ptr{UInt8}),\n             get(A.p), get(B.p), stype, values,\n                sorted, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction norm_sparse(A::Sparse{Tv}, norm::Integer) where Tv<:VTypes\n    if norm != 0 && norm != 1\n        throw(ArgumentError(\"norm argument must be either 0 or 1\"))\n    end\n    ccall((@cholmod_name(\"norm_sparse\", SuiteSparse_long), :libcholmod), Cdouble,\n            (Ptr{C_Sparse{Tv}}, Cint, Ptr{UInt8}),\n                get(A.p), norm, common())\nend\n\nfunction horzcat(A::Sparse{Tv}, B::Sparse{Tv}, values::Bool) where Tv<:VRealTypes\n    s = Sparse(ccall((@cholmod_name(\"horzcat\", SuiteSparse_long), :libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{C_Sparse{Tv}}, Cint, Ptr{UInt8}),\n             get(A.p), get(B.p), values, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction scale!(S::Dense{Tv}, scale::Integer, A::Sparse{Tv}) where Tv<:VRealTypes\n    sS = unsafe_load(get(S.p))\n    sA = unsafe_load(get(A.p))\n    if sS.ncol != 1 && sS.nrow != 1\n        throw(DimensionMismatch(\"first argument must be a vector\"))\n    end\n    if scale == SCALAR && sS.nrow != 1\n        throw(DimensionMismatch(\"scaling argument must have length one\"))\n    elseif scale == ROW && sS.nrow*sS.ncol != sA.nrow\n        throw(DimensionMismatch(\"scaling vector has length $(sS.nrow*sS.ncol), \" *\n            \"but matrix has $(sA.nrow) rows.\"))\n    elseif scale == COL && sS.nrow*sS.ncol != sA.ncol\n        throw(DimensionMismatch(\"scaling vector has length $(sS.nrow*sS.ncol), \" *\n            \"but matrix has $(sA.ncol) columns\"))\n    elseif scale == SYM\n        if sA.nrow != sA.ncol\n            throw(DimensionMismatch(\"matrix must be square\"))\n        elseif sS.nrow*sS.ncol != sA.nrow\n            throw(DimensionMismatch(\"scaling vector has length $(sS.nrow*sS.ncol), \" *\n                \"but matrix has $(sA.ncol) columns and rows\"))\n        end\n    end\n\n    sA = unsafe_load(get(A.p))\n    @isok ccall((@cholmod_name(\"scale\",SuiteSparse_long),:libcholmod), Cint,\n            (Ptr{C_Dense{Tv}}, Cint, Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(S.p), scale, get(A.p), common())\n    A\nend\n\nfunction sdmult!(A::Sparse{Tv}, transpose::Bool,\n        \u03b1::Number, \u03b2::Number, X::Dense{Tv}, Y::Dense{Tv}) where Tv<:VTypes\n    m, n = size(A)\n    nc = transpose ? m : n\n    nr = transpose ? n : m\n    if nc != size(X, 1)\n        throw(DimensionMismatch(\"incompatible dimensions, $nc and $(size(X,1))\"))\n    end\n    @isok ccall((@cholmod_name(\"sdmult\", SuiteSparse_long),:libcholmod), Cint,\n            (Ptr{C_Sparse{Tv}}, Cint,\n             Ref{Complex128}, Ref{Complex128},\n             Ptr{C_Dense{Tv}}, Ptr{C_Dense{Tv}}, Ptr{UInt8}),\n                get(A.p), transpose, \u03b1, \u03b2, get(X.p), get(Y.p), common())\n    Y\nend\n\nfunction vertcat(A::Sparse{Tv}, B::Sparse{Tv}, values::Bool) where Tv<:VRealTypes\n    s = Sparse(ccall((@cholmod_name(\"vertcat\", SuiteSparse_long), :libcholmod),\n            Ptr{C_Sparse{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{C_Sparse{Tv}}, Cint, Ptr{UInt8}),\n                get(A.p), get(B.p), values, common()))\n    finalizer(s, free!)\n    s\nend\n\nfunction symmetry(A::Sparse{Tv}, option::Integer) where Tv<:VTypes\n    xmatched = Ref{SuiteSparse_long}()\n    pmatched = Ref{SuiteSparse_long}()\n    nzoffdiag = Ref{SuiteSparse_long}()\n    nzdiag = Ref{SuiteSparse_long}()\n    rv = ccall((@cholmod_name(\"symmetry\", SuiteSparse_long), :libcholmod), Cint,\n            (Ptr{C_Sparse{Tv}}, Cint, Ptr{SuiteSparse_long}, Ptr{SuiteSparse_long},\n                Ptr{SuiteSparse_long}, Ptr{SuiteSparse_long}, Ptr{UInt8}),\n                    get(A.p), option, xmatched, pmatched,\n                        nzoffdiag, nzdiag, common())\n    rv, xmatched[], pmatched[], nzoffdiag[], nzdiag[]\nend\n\n# cholmod_cholesky.h\n# For analyze, analyze_p, and factorize_p!, the Common argument must be\n# supplied in order to control if the factorization is LLt or LDLt\nfunction analyze{Tv<:VTypes}(A::Sparse{Tv}, cmmn::Vector{UInt8})\n    f = Factor(ccall((@cholmod_name(\"analyze\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Factor{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                get(A.p), cmmn))\n    finalizer(f, free!)\n    f\nend\nfunction analyze_p{Tv<:VTypes}(A::Sparse{Tv}, perm::Vector{SuiteSparse_long},\n    cmmn::Vector{UInt8})\n    length(perm) != size(A,1) && throw(BoundsError())\n    f = Factor(ccall((@cholmod_name(\"analyze_p\", SuiteSparse_long),:libcholmod),\n            Ptr{C_Factor{Tv}},\n            (Ptr{C_Sparse{Tv}}, Ptr{SuiteSparse_long}, Ptr{SuiteSparse_long},\n                Csize_t, Ptr{UInt8}),\n                get(A.p), perm, C_NULL, 0, cmmn))\n    finalizer(f, free!)\n    f\nend\nfunction factorize!(A::Sparse{Tv}, F::Factor{Tv}, cmmn::Vector{UInt8}) where Tv<:VTypes\n    @isok ccall((@cholmod_name(\"factorize\", SuiteSparse_long),:libcholmod), Cint,\n        (Ptr{C_Sparse{Tv}}, Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n            get(A.p), get(F.p), cmmn)\n    F\nend\nfunction factorize_p!(A::Sparse{Tv}, \u03b2::Real, F::Factor{Tv}, cmmn::Vector{UInt8}) where Tv<:VTypes\n    # note that \u03b2 is passed as a complex number (double beta[2]),\n    # but the CHOLMOD manual says that only beta[0] (real part) is used\n    @isok ccall((@cholmod_name(\"factorize_p\", SuiteSparse_long),:libcholmod), Cint,\n        (Ptr{C_Sparse{Tv}}, Ref{Complex128}, Ptr{SuiteSparse_long}, Csize_t,\n         Ptr{C_Factor{Tv}}, Ptr{UInt8}),\n            get(A.p), \u03b2, C_NULL, 0, get(F.p), cmmn)\n    F\nend\n\nfunction solve(sys::Integer, F::Factor{Tv}, B::Dense{Tv}) where Tv<:VTypes\n    if size(F,1) != size(B,1)\n        throw(DimensionMismatch(\"LHS and RHS should have the same number of rows. \" *\n            \"LHS has $(size(F,1)) rows, but RHS has $(size(B,1)) rows.\"))\n    end\n    d = Dense(ccall((@cholmod_name(\"solve\", SuiteSparse_long),:libcholmod), Ptr{C_Dense{Tv}},\n            (Cint, Ptr{C_Factor{Tv}}, Ptr{C_Dense{Tv}}, Ptr{UInt8}),\n                sys, get(F.p), get(B.p), common()))\n    finalizer(d, free!)\n    d\nend\n\nfunction spsolve(sys::Integer, F::Factor{Tv}, B::Sparse{Tv}) where Tv<:VTypes\n    if size(F,1) != size(B,1)\n        throw(DimensionMismatch(\"LHS and RHS should have the same number of rows. \" *\n            \"LHS has $(size(F,1)) rows, but RHS has $(size(B,1)) rows.\"))\n    end\n    s = Sparse(ccall((@cholmod_name(\"spsolve\", SuiteSparse_long),:libcholmod),\n        Ptr{C_Sparse{Tv}},\n            (Cint, Ptr{C_Factor{Tv}}, Ptr{C_Sparse{Tv}}, Ptr{UInt8}),\n                sys, get(F.p), get(B.p), common()))\n    finalizer(s, free!)\n    s\nend\n\n# Autodetects the types\nfunction read_sparse(file::Libc.FILE, ::Type{SuiteSparse_long})\n    ptr = ccall((@cholmod_name(\"read_sparse\", SuiteSparse_long), :libcholmod),\n        Ptr{C_SparseVoid},\n            (Ptr{Void}, Ptr{UInt8}),\n                file.ptr, common())\n    if ptr == C_NULL\n        throw(ArgumentError(\"sparse matrix construction failed. Check that input file is valid.\"))\n    end\n    s = Sparse(ptr)\n    finalizer(s, free!)\n    s\nend\n\nfunction read_sparse(file::IO, T)\n    cfile = Libc.FILE(file)\n    try return read_sparse(cfile, T)\n    finally close(cfile)\n    end\nend\n\nfunction get_perm(F::Factor)\n    s = unsafe_load(get(F.p))\n    p = unsafe_wrap(Array, s.Perm, s.n, false)\n    p+1\nend\nget_perm(FC::FactorComponent) = get_perm(Factor(FC))\n\n#########################\n# High level interfaces #\n#########################\n\n# Convertion/construction\nfunction convert(::Type{Dense{T}}, A::StridedVecOrMat) where T<:VTypes\n    d = allocate_dense(size(A, 1), size(A, 2), stride(A, 2), T)\n    s = unsafe_load(d.p)\n    for i in eachindex(A)\n        unsafe_store!(s.x, A[i], i)\n    end\n    d\nend\nfunction convert(::Type{Dense}, A::StridedVecOrMat)\n    T = promote_type(eltype(A), Float64)\n    return convert(Dense{T}, A)\nend\nconvert(::Type{Dense}, A::Sparse) = sparse_to_dense(A)\n\n# This constructior assumes zero based colptr and rowval\nfunction Sparse(m::Integer, n::Integer,\n        colptr0::Vector{SuiteSparse_long}, rowval0::Vector{SuiteSparse_long},\n        nzval::Vector{Tv}, stype) where Tv<:VTypes\n    # checks\n    ## length of input\n    if length(colptr0) <= n\n        throw(ArgumentError(\"length of colptr0 must be at least n + 1 = $(n + 1) but was $(length(colptr0))\"))\n    end\n    if colptr0[n + 1] > length(rowval0)\n        throw(ArgumentError(\"length of rowval0 is $(length(rowval0)) but value of colptr0 requires length to be at least $(colptr0[n + 1])\"))\n    end\n    if colptr0[n + 1] > length(nzval)\n        throw(ArgumentError(\"length of nzval is $(length(nzval)) but value of colptr0 requires length to be at least $(colptr0[n + 1])\"))\n    end\n    ## columns are sorted\n    iss = true\n    for i = 2:length(colptr0)\n        if !issorted(view(rowval0, colptr0[i - 1] + 1:colptr0[i]))\n            iss = false\n            break\n        end\n    end\n\n    o = allocate_sparse(m, n, colptr0[n + 1], iss, true, stype, Tv)\n    s = unsafe_load(o.p)\n\n    unsafe_copy!(s.p, pointer(colptr0), n + 1)\n    unsafe_copy!(s.i, pointer(rowval0), colptr0[n + 1])\n    unsafe_copy!(s.x, pointer(nzval) , colptr0[n + 1])\n\n    @isok check_sparse(o)\n\n    return o\nend\n\nfunction Sparse(m::Integer, n::Integer,\n        colptr0::Vector{SuiteSparse_long},\n        rowval0::Vector{SuiteSparse_long},\n        nzval::Vector{<:VTypes})\n    o = Sparse(m, n, colptr0, rowval0, nzval, 0)\n\n    # sort indices\n    sort!(o)\n\n    # check if array is symmetric and change stype if it is\n    if ishermitian(o)\n        change_stype!(o, -1)\n    end\n    o\nend\n\nfunction Sparse(A::SparseMatrixCSC{Tv,SuiteSparse_long}, stype::Integer) where Tv<:VTypes\n    ## Check length of input. This should never fail but see #20024\n    if length(A.colptr) <= A.n\n        throw(ArgumentError(\"length of colptr must be at least size(A,2) + 1 = $(A.n + 1) but was $(length(A.colptr))\"))\n    end\n    if nnz(A) > length(A.rowval)\n        throw(ArgumentError(\"length of rowval is $(length(A.rowval)) but value of colptr requires length to be at least $(nnz(A))\"))\n    end\n    if nnz(A) > length(A.nzval)\n        throw(ArgumentError(\"length of nzval is $(length(A.nzval)) but value of colptr requires length to be at least $(nnz(A))\"))\n    end\n\n    o = allocate_sparse(A.m, A.n, nnz(A), true, true, stype, Tv)\n    s = unsafe_load(o.p)\n    for i = 1:(A.n + 1)\n        unsafe_store!(s.p, A.colptr[i] - 1, i)\n    end\n    for i = 1:nnz(A)\n        unsafe_store!(s.i, A.rowval[i] - 1, i)\n    end\n    unsafe_copy!(s.x, pointer(A.nzval), nnz(A))\n\n    @isok check_sparse(o)\n\n    return o\nend\n\n# convert SparseVectors into CHOLMOD Sparse types through a mx1 CSC matrix\nconvert(::Type{Sparse}, A::SparseVector{<:VTypes,SuiteSparse_long}) =\n    convert(Sparse, convert(SparseMatrixCSC, A))\nfunction convert(::Type{Sparse}, A::SparseMatrixCSC{<:VTypes,<:ITypes})\n    o = Sparse(A, 0)\n    # check if array is symmetric and change stype if it is\n    if ishermitian(o)\n        change_stype!(o, -1)\n    end\n    o\nend\nconvert(::Type{Sparse}, A::SparseMatrixCSC{Complex{Float32},<:ITypes}) =\n    convert(Sparse, convert(SparseMatrixCSC{Complex{Float64},SuiteSparse_long}, A))\nconvert(::Type{Sparse}, A::Symmetric{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}}) =\n    Sparse(A.data, A.uplo == 'L' ? -1 : 1)\nconvert(::Type{Sparse}, A::Hermitian{Tv,SparseMatrixCSC{Tv,SuiteSparse_long}}) where {Tv<:VTypes} =\n    Sparse(A.data, A.uplo == 'L' ? -1 : 1)\nfunction convert{Ti<:ITypes}(::Type{Sparse},\n    A::Union{SparseMatrixCSC{BigFloat,Ti},\n             Symmetric{BigFloat,SparseMatrixCSC{BigFloat,Ti}},\n             Hermitian{Complex{BigFloat},SparseMatrixCSC{Complex{BigFloat},Ti}}},\n    args...)\n    throw(MethodError(convert, (Sparse, A)))\nend\nfunction convert(::Type{Sparse},\n    A::Union{SparseMatrixCSC{T,Ti},\n             Symmetric{T,SparseMatrixCSC{T,Ti}},\n             Hermitian{T,SparseMatrixCSC{T,Ti}}},\n    args...) where T where Ti<:ITypes\n    return Sparse(convert(AbstractMatrix{promote_type(Float64, T)}, A), args...)\nend\n\n# Useful when reading in files, but not type stable\nfunction convert(::Type{Sparse}, p::Ptr{C_SparseVoid})\n    if p == C_NULL\n        throw(ArgumentError(\"sparse matrix construction failed for \" *\n            \"unknown reasons. Please submit a bug report.\"))\n    end\n\n    s = unsafe_load(p)\n\n    # Check integer type\n    if s.itype == INT\n        free_sparse!(p)\n        throw(CHOLMODException(\"the value of itype was $s.itype. \" *\n            \"Only integer type of $SuiteSparse_long is supported.\"))\n    elseif s.itype == INTLONG\n        free_sparse!(p)\n        throw(CHOLMODException(\"the value of itype was $s.itype. This combination \" *\n            \"of integer types shouldn't happen. Please submit a bug report.\"))\n    elseif s.itype != LONG # must be s.itype == LONG\n        free_sparse!(p)\n        throw(CHOLMODException(\"illegal value of itype: $s.itype\"))\n    end\n\n    # Check for double or single precision\n    if s.dtype == DOUBLE\n        Tv = Float64\n    elseif s.dtype == SINGLE\n        # Tv = Float32 # this should be supported at some point\n        free_sparse!(p)\n        throw(CHOLMODException(\"single precision not supported yet\"))\n    else\n        free_sparse!(p)\n        throw(CHOLMODException(\"illegal value of dtype: $s.dtype\"))\n    end\n\n    # Check for real or complex\n    if s.xtype == COMPLEX\n        Tv = Complex{Tv}\n    elseif s.xtype != REAL\n        free_sparse!(p)\n        throw(CHOLMODException(\"illegal value of xtype: $s.xtype\"))\n    end\n\n    return Sparse(convert(Ptr{C_Sparse{Tv}}, p))\nend\n\nconvert(::Type{Sparse}, A::Dense) = dense_to_sparse(A, SuiteSparse_long)\nconvert(::Type{Sparse}, L::Factor) = factor_to_sparse!(copy(L))\nfunction (::Type{Sparse})(filename::String)\n    open(filename) do f\n        return read_sparse(f, SuiteSparse_long)\n    end\nend\n\n## convertion back to base Julia types\nfunction convert(::Type{Matrix{T}}, D::Dense{T}) where T\n    s = unsafe_load(D.p)\n    a = Matrix{T}(s.nrow, s.ncol)\n    copy!(a, D)\nend\n\nBase.copy!(dest::Base.PermutedDimsArrays.PermutedDimsArray, src::Dense) = _copy!(dest, src) # ambig\nBase.copy!(dest::Dense{T}, D::Dense{T}) where {T<:VTypes} = _copy!(dest, D)\nBase.copy!(dest::AbstractArray{T}, D::Dense{T}) where {T<:VTypes} = _copy!(dest, D)\nBase.copy!(dest::AbstractArray{T,2}, D::Dense{T}) where {T<:VTypes} = _copy!(dest, D)\nBase.copy!(dest::AbstractArray, D::Dense) = _copy!(dest, D)\n\nfunction _copy!(dest::AbstractArray, D::Dense)\n    s = unsafe_load(D.p)\n    n = s.nrow*s.ncol\n    n <= length(dest) || throw(BoundsError(dest, n))\n    if s.d == s.nrow && isa(dest, Array)\n        unsafe_copy!(pointer(dest), s.x, s.d*s.ncol)\n    else\n        k = 0\n        for j = 1:s.ncol\n            for i = 1:s.nrow\n                dest[k+=1] = unsafe_load(s.x, i + (j - 1)*s.d)\n            end\n        end\n    end\n    dest\nend\nconvert(::Type{Matrix}, D::Dense{T}) where {T} = convert(Matrix{T}, D)\nfunction convert(::Type{Vector{T}}, D::Dense{T}) where T\n    if size(D, 2) > 1\n        throw(DimensionMismatch(\"input must be a vector but had $(size(D, 2)) columns\"))\n    end\n    copy!(Vector{T}(size(D, 1)), D)\nend\nconvert(::Type{Vector}, D::Dense{T}) where {T} = convert(Vector{T}, D)\n\nfunction convert(::Type{SparseMatrixCSC{Tv,SuiteSparse_long}}, A::Sparse{Tv}) where Tv\n    s = unsafe_load(A.p)\n    if s.stype != 0\n        throw(ArgumentError(\"matrix has stype != 0. Convert to matrix \" *\n            \"with stype == 0 before converting to SparseMatrixCSC\"))\n    end\n\n    B = SparseMatrixCSC(s.nrow, s.ncol,\n        increment(unsafe_wrap(Array, s.p, (s.ncol + 1,), false)),\n        increment(unsafe_wrap(Array, s.i, (s.nzmax,), false)),\n        copy(unsafe_wrap(Array, s.x, (s.nzmax,), false)))\n\n    if s.sorted == 0\n        return SparseArrays.sortSparseMatrixCSC!(B)\n    else\n        return B\n    end\nend\nfunction convert(::Type{Symmetric{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}}}, A::Sparse{Float64})\n    s = unsafe_load(A.p)\n    if !issymmetric(A)\n        throw(ArgumentError(\"matrix is not symmetric\"))\n    end\n\n    B = Symmetric(SparseMatrixCSC(s.nrow, s.ncol,\n        increment(unsafe_wrap(Array, s.p, (s.ncol + 1,), false)),\n        increment(unsafe_wrap(Array, s.i, (s.nzmax,), false)),\n        copy(unsafe_wrap(Array, s.x, (s.nzmax,), false))), s.stype > 0 ? :U : :L)\n\n    if s.sorted == 0\n        return SparseArrays.sortSparseMatrixCSC!(B.data)\n    else\n        return B\n    end\nend\nfunction convert(::Type{Hermitian{Tv,SparseMatrixCSC{Tv,SuiteSparse_long}}}, A::Sparse{Tv}) where Tv<:VTypes\n    s = unsafe_load(A.p)\n    if !ishermitian(A)\n        throw(ArgumentError(\"matrix is not Hermitian\"))\n    end\n\n    B = Hermitian(SparseMatrixCSC(s.nrow, s.ncol,\n        increment(unsafe_wrap(Array, s.p, (s.ncol + 1,), false)),\n        increment(unsafe_wrap(Array, s.i, (s.nzmax,), false)),\n        copy(unsafe_wrap(Array, s.x, (s.nzmax,), false))), s.stype > 0 ? :U : :L)\n\n    if s.sorted == 0\n        return SparseArrays.sortSparseMatrixCSC!(B.data)\n    else\n        return B\n    end\nend\nfunction sparse(A::Sparse{Float64}) # Notice! Cannot be type stable because of stype\n    s = unsafe_load(A.p)\n    if s.stype == 0\n        return convert(SparseMatrixCSC{Float64,SuiteSparse_long}, A)\n    end\n    return convert(Symmetric{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}}, A)\nend\nfunction sparse(A::Sparse{Complex{Float64}}) # Notice! Cannot be type stable because of stype\n    s = unsafe_load(A.p)\n    if s.stype == 0\n        return convert(SparseMatrixCSC{Complex{Float64},SuiteSparse_long}, A)\n    end\n    return convert(Hermitian{Complex{Float64},SparseMatrixCSC{Complex{Float64},SuiteSparse_long}}, A)\nend\nfunction sparse(F::Factor)\n    s = unsafe_load(F.p)\n    if s.is_ll != 0\n        L = Sparse(F)\n        A = sparse(L*L')\n    else\n        LD = sparse(F[:LD])\n        L, d = getLd!(LD)\n        A = (L * Diagonal(d)) * L'\n    end\n    SparseArrays.sortSparseMatrixCSC!(A)\n    p = get_perm(F)\n    if p != [1:s.n;]\n        pinv = Vector{Int}(length(p))\n        for k = 1:length(p)\n            pinv[p[k]] = k\n        end\n        A = A[pinv,pinv]\n    end\n    A\nend\n\nsparse(D::Dense) = sparse(Sparse(D))\n\nfunction sparse(FC::FactorComponent{Tv,:L}) where Tv\n    F = Factor(FC)\n    s = unsafe_load(F.p)\n    if s.is_ll == 0\n        throw(CHOLMODException(\"sparse: supported only for :LD on LDLt factorizations\"))\n    end\n    sparse(Sparse(F))\nend\nsparse(FC::FactorComponent{Tv,:LD}) where {Tv} = sparse(Sparse(Factor(FC)))\n\n# Calculate the offset into the stype field of the cholmod_sparse_struct and\n# change the value\nlet offset = fieldoffset(C_Sparse{Float64}, findfirst(name -> name === :stype, fieldnames(C_Sparse{Float64})))\n    global change_stype!\n    function change_stype!(A::Sparse, i::Integer)\n        unsafe_store!(convert(Ptr{Cint}, A.p), i, div(offset, 4) + 1)\n        return A\n    end\nend\n\nfree!(A::Dense) = free_dense!(A.p)\nfree!(A::Sparse) = free_sparse!(A.p)\nfree!(F::Factor) = free_factor!(F.p)\n\neltype(::Type{Dense{T}}) where {T<:VTypes} = T\neltype(::Type{Factor{T}}) where {T<:VTypes} = T\neltype(::Type{Sparse{T}}) where {T<:VTypes} = T\n\nnnz(F::Factor) = nnz(Sparse(F))\n\nfunction show(io::IO, F::Factor)\n    println(io, typeof(F))\n    showfactor(io, F)\nend\n\nfunction show(io::IO, FC::FactorComponent)\n    println(io, typeof(FC))\n    showfactor(io, Factor(FC))\nend\n\nfunction showfactor(io::IO, F::Factor)\n    s = unsafe_load(get(F.p))\n    @printf(io, \"type: %12s\\n\", s.is_ll!=0 ? \"LLt\" : \"LDLt\")\n    @printf(io, \"method: %10s\\n\", s.is_super!=0 ? \"supernodal\" : \"simplicial\")\n    @printf(io, \"maxnnz: %10d\\n\", Int(s.nzmax))\n    @printf(io, \"nnz: %13d\\n\", nnz(F))\nend\n\n# getindex not defined for these, so don't use the normal array printer\nshow(io::IO, ::MIME\"text/plain\", FC::FactorComponent) = show(io, FC)\nshow(io::IO, ::MIME\"text/plain\", F::Factor) = show(io, F)\n\nisvalid(A::Dense) = check_dense(A)\nisvalid(A::Sparse) = check_sparse(A)\nisvalid(A::Factor) = check_factor(A)\n\ncopy(A::Dense) = copy_dense(A)\ncopy(A::Sparse) = copy_sparse(A)\ncopy(A::Factor) = copy_factor(A)\n\nfunction size(A::Union{Dense,Sparse})\n    s = unsafe_load(get(A.p))\n    return (Int(s.nrow), Int(s.ncol))\nend\nfunction size(F::Factor, i::Integer)\n    if i < 1\n        throw(ArgumentError(\"dimension must be positive\"))\n    end\n    s = unsafe_load(get(F.p))\n    if i <= 2\n        return Int(s.n)\n    end\n    return 1\nend\nsize(F::Factor) = (size(F, 1), size(F, 2))\n\nIndexStyle(::Dense) = IndexLinear()\n\nsize(FC::FactorComponent, i::Integer) = size(FC.F, i)\nsize(FC::FactorComponent) = size(FC.F)\n\nctranspose(FC::FactorComponent{Tv,:L}) where {Tv} = FactorComponent{Tv,:U}(FC.F)\nctranspose(FC::FactorComponent{Tv,:U}) where {Tv} = FactorComponent{Tv,:L}(FC.F)\nctranspose(FC::FactorComponent{Tv,:PtL}) where {Tv} = FactorComponent{Tv,:UP}(FC.F)\nctranspose(FC::FactorComponent{Tv,:UP}) where {Tv} = FactorComponent{Tv,:PtL}(FC.F)\nctranspose(FC::FactorComponent{Tv,:D}) where {Tv} = FC\nctranspose(FC::FactorComponent{Tv,:LD}) where {Tv} = FactorComponent{Tv,:DU}(FC.F)\nctranspose(FC::FactorComponent{Tv,:DU}) where {Tv} = FactorComponent{Tv,:LD}(FC.F)\nctranspose(FC::FactorComponent{Tv,:PtLD}) where {Tv} = FactorComponent{Tv,:DUP}(FC.F)\nctranspose(FC::FactorComponent{Tv,:DUP}) where {Tv} = FactorComponent{Tv,:PtLD}(FC.F)\n\nfunction getindex(A::Dense, i::Integer)\n    s = unsafe_load(get(A.p))\n    0 < i <= s.nrow*s.ncol || throw(BoundsError())\n    unsafe_load(s.x, i)\nend\n\nIndexStyle(::Sparse) = IndexCartesian()\nfunction getindex(A::Sparse{T}, i0::Integer, i1::Integer) where T\n    s = unsafe_load(get(A.p))\n    !(1 <= i0 <= s.nrow && 1 <= i1 <= s.ncol) && throw(BoundsError())\n    s.stype < 0 && i0 < i1 && return conj(A[i1,i0])\n    s.stype > 0 && i0 > i1 && return conj(A[i1,i0])\n\n    r1 = Int(unsafe_load(s.p, i1) + 1)\n    r2 = Int(unsafe_load(s.p, i1 + 1))\n    (r1 > r2) && return zero(T)\n    r1 = Int(searchsortedfirst(unsafe_wrap(Array, s.i, (s.nzmax,), false),\n        i0 - 1, r1, r2, Base.Order.Forward))\n    ((r1 > r2) || (unsafe_load(s.i, r1) + 1 != i0)) ? zero(T) : unsafe_load(s.x, r1)\nend\n\nfunction getindex(F::Factor, sym::Symbol)\n    sym == :p && return get_perm(F)\n    FactorComponent(F, sym)\nend\n\nfunction getLd!(S::SparseMatrixCSC)\n    d = Vector{eltype(S)}(size(S, 1))\n    fill!(d, 0)\n    col = 1\n    for k = 1:nnz(S)\n        while k >= S.colptr[col+1]\n            col += 1\n        end\n        if S.rowval[k] == col\n            d[col] = S.nzval[k]\n            S.nzval[k] = 1\n        end\n    end\n    S, d\nend\n\n## Multiplication\n(*)(A::Sparse, B::Sparse) = ssmult(A, B, 0, true, true)\n(*)(A::Sparse, B::Dense) = sdmult!(A, false, 1., 0., B, zeros(size(A, 1), size(B, 2)))\n(*)(A::Sparse, B::VecOrMat) = (*)(A, Dense(B))\n\nfunction A_mul_Bc(A::Sparse{Tv}, B::Sparse{Tv}) where Tv<:VRealTypes\n    cm = common()\n\n    if A !== B\n        aa1 = transpose_(B, 2)\n        ## result of ssmult will have stype==0, contain numerical values and be sorted\n        return ssmult(A, aa1, 0, true, true)\n    end\n\n    ## The A*A' case is handled by cholmod_aat. This routine requires\n    ## A->stype == 0 (storage of upper and lower parts). If neccesary\n    ## the matrix A is first converted to stype == 0\n    s = unsafe_load(A.p)\n    if s.stype != 0\n        aa1 = copy(A, 0, 1)\n        return aat(aa1, SuiteSparse_long[0:s.ncol-1;], 1)\n    else\n        return aat(A, SuiteSparse_long[0:s.ncol-1;], 1)\n    end\nend\n\nfunction Ac_mul_B(A::Sparse, B::Sparse)\n    aa1 = transpose_(A, 2)\n    if A === B\n        return A_mul_Bc(aa1, aa1)\n    end\n    ## result of ssmult will have stype==0, contain numerical values and be sorted\n    return ssmult(aa1, B, 0, true, true)\nend\n\nAc_mul_B(A::Sparse, B::Dense) = sdmult!(A, true, 1., 0., B, zeros(size(A, 2), size(B, 2)))\nAc_mul_B(A::Sparse, B::VecOrMat) =  Ac_mul_B(A, Dense(B))\n\n\n## Factorization methods\n\n## Compute that symbolic factorization only\nfunction fact_(A::Sparse{<:VTypes}, cm::Array{UInt8};\n    perm::AbstractVector{SuiteSparse_long}=SuiteSparse_long[],\n    postorder::Bool=true, userperm_only::Bool=true)\n\n    sA = unsafe_load(get(A.p))\n    sA.stype == 0 && throw(ArgumentError(\"sparse matrix is not symmetric/Hermitian\"))\n\n    if !postorder\n        unsafe_store!(common_postorder, 0)\n    end\n\n    if isempty(perm)\n        F = analyze(A, cm)\n    else # user permutation provided\n        if userperm_only # use perm even if it is worse than AMD\n            unsafe_store!(common_nmethods, 1)\n        end\n        F = analyze_p(A, SuiteSparse_long[p-1 for p in perm], cm)\n    end\n\n    return F\nend\n\nfunction cholfact!(F::Factor{Tv}, A::Sparse{Tv}; shift::Real=0.0) where Tv\n    cm = common()\n\n    # Makes it an LLt\n    unsafe_store!(common_final_ll, 1)\n\n    # Compute the numerical factorization\n    factorize_p!(A, shift, F, cm)\n\n    s = unsafe_load(get(F.p))\n    s.minor < size(A, 1) && throw(Base.LinAlg.PosDefException(s.minor))\n    return F\nend\n\n\"\"\"\n    cholfact!(F::Factor, A; shift = 0.0) -> CHOLMOD.Factor\n\nCompute the Cholesky (``LL'``) factorization of `A`, reusing the symbolic\nfactorization `F`. `A` must be a [`SparseMatrixCSC`](@ref) or a [`Symmetric`](@ref)/\n[`Hermitian`](@ref) view of a `SparseMatrixCSC`. Note that even if `A` doesn't\nhave the type tag, it must still be symmetric or Hermitian.\n\nSee also [`cholfact`](@ref).\n\n!!! note\n    This method uses the CHOLMOD library from SuiteSparse, which only supports\n    doubles or complex doubles. Input matrices not of those element types will\n    be converted to `SparseMatrixCSC{Float64}` or `SparseMatrixCSC{Complex128}`\n    as appropriate.\n\"\"\"\ncholfact!(F::Factor, A::Union{SparseMatrixCSC{T},\n        SparseMatrixCSC{Complex{T}},\n        Symmetric{T,SparseMatrixCSC{T,SuiteSparse_long}},\n        Hermitian{Complex{T},SparseMatrixCSC{Complex{T},SuiteSparse_long}},\n        Hermitian{T,SparseMatrixCSC{T,SuiteSparse_long}}};\n    shift = 0.0) where {T<:Real} =\n    cholfact!(F, Sparse(A); shift = shift)\n\nfunction cholfact(A::Sparse; shift::Real=0.0,\n    perm::AbstractVector{SuiteSparse_long}=SuiteSparse_long[])\n\n    cm = defaults(common())\n    set_print_level(cm, 0)\n\n    # Compute the symbolic factorization\n    F = fact_(A, cm; perm = perm)\n\n    # Compute the numerical factorization\n    cholfact!(F, A; shift = shift)\n\n    s = unsafe_load(get(F.p))\n    s.minor < size(A, 1) && throw(Base.LinAlg.PosDefException(s.minor))\n    return F\nend\n\n\"\"\"\n    cholfact(A; shift = 0.0, perm = Int[]) -> CHOLMOD.Factor\n\nCompute the Cholesky factorization of a sparse positive definite matrix `A`.\n`A` must be a [`SparseMatrixCSC`](@ref) or a [`Symmetric`](@ref)/[`Hermitian`](@ref)\nview of a `SparseMatrixCSC`. Note that even if `A` doesn't\nhave the type tag, it must still be symmetric or Hermitian.\nA fill-reducing permutation is used.\n`F = cholfact(A)` is most frequently used to solve systems of equations with `F\\\\b`,\nbut also the methods [`diag`](@ref), [`det`](@ref), and\n[`logdet`](@ref) are defined for `F`.\nYou can also extract individual factors from `F`, using `F[:L]`.\nHowever, since pivoting is on by default, the factorization is internally\nrepresented as `A == P'*L*L'*P` with a permutation matrix `P`;\nusing just `L` without accounting for `P` will give incorrect answers.\nTo include the effects of permutation,\nit's typically preferable to extract \"combined\" factors like `PtL = F[:PtL]`\n(the equivalent of `P'*L`) and `LtP = F[:UP]` (the equivalent of `L'*P`).\n\nSetting the optional `shift` keyword argument computes the factorization of\n`A+shift*I` instead of `A`. If the `perm` argument is nonempty,\nit should be a permutation of `1:size(A,1)` giving the ordering to use\n(instead of CHOLMOD's default AMD ordering).\n\n!!! note\n    This method uses the CHOLMOD library from SuiteSparse, which only supports\n    doubles or complex doubles. Input matrices not of those element types will\n    be converted to `SparseMatrixCSC{Float64}` or `SparseMatrixCSC{Complex128}`\n    as appropriate.\n\n    Many other functions from CHOLMOD are wrapped but not exported from the\n    `Base.SparseArrays.CHOLMOD` module.\n\"\"\"\ncholfact(A::Union{SparseMatrixCSC{T}, SparseMatrixCSC{Complex{T}},\n    Symmetric{T,SparseMatrixCSC{T,SuiteSparse_long}},\n    Hermitian{Complex{T},SparseMatrixCSC{Complex{T},SuiteSparse_long}},\n    Hermitian{T,SparseMatrixCSC{T,SuiteSparse_long}}};\n    kws...) where {T<:Real} = cholfact(Sparse(A); kws...)\n\n\nfunction ldltfact!(F::Factor{Tv}, A::Sparse{Tv}; shift::Real=0.0) where Tv\n    cm = common()\n\n    # Compute the numerical factorization\n    factorize_p!(A, shift, F, cm)\n\n    s = unsafe_load(get(F.p))\n    s.minor < size(A, 1) && throw(Base.LinAlg.ArgumentError(\"matrix has one or more zero pivots\"))\n    return F\nend\n\n\"\"\"\n    ldltfact!(F::Factor, A; shift = 0.0) -> CHOLMOD.Factor\n\nCompute the ``LDL'`` factorization of `A`, reusing the symbolic factorization `F`.\n`A` must be a [`SparseMatrixCSC`](@ref) or a [`Symmetric`](@ref)/[`Hermitian`](@ref)\nview of a `SparseMatrixCSC`. Note that even if `A` doesn't\nhave the type tag, it must still be symmetric or Hermitian.\n\nSee also [`ldltfact`](@ref).\n\n!!! note\n    This method uses the CHOLMOD library from SuiteSparse, which only supports\n    doubles or complex doubles. Input matrices not of those element types will\n    be converted to `SparseMatrixCSC{Float64}` or `SparseMatrixCSC{Complex128}`\n    as appropriate.\n\"\"\"\nldltfact!(F::Factor, A::Union{SparseMatrixCSC{T},\n    SparseMatrixCSC{Complex{T}},\n    Symmetric{T,SparseMatrixCSC{T,SuiteSparse_long}},\n    Hermitian{Complex{T},SparseMatrixCSC{Complex{T},SuiteSparse_long}},\n    Hermitian{T,SparseMatrixCSC{T,SuiteSparse_long}}};\n    shift = 0.0) where {T<:Real} =\n    ldltfact!(F, Sparse(A), shift = shift)\n\nfunction ldltfact(A::Sparse; shift::Real=0.0,\n    perm::AbstractVector{SuiteSparse_long}=SuiteSparse_long[])\n\n    cm = defaults(common())\n    set_print_level(cm, 0)\n\n    # Makes it an LDLt\n    unsafe_store!(common_final_ll, 0)\n    # Really make sure it's an LDLt by avoiding supernodal factorization\n    unsafe_store!(common_supernodal, 0)\n\n    # Compute the symbolic factorization\n    F = fact_(A, cm; perm = perm)\n\n    # Compute the numerical factorization\n    ldltfact!(F, A; shift = shift)\n\n    s = unsafe_load(get(F.p))\n    if s.minor < size(A, 1)\n        throw(Base.LinAlg.ArgumentError(\"matrix has one or more zero pivots\"))\n    end\n    return F\nend\n\n\"\"\"\n    ldltfact(A; shift = 0.0, perm=Int[]) -> CHOLMOD.Factor\n\nCompute the ``LDL'`` factorization of a sparse matrix `A`.\n`A` must be a [`SparseMatrixCSC`](@ref) or a [`Symmetric`](@ref)/[`Hermitian`](@ref)\nview of a `SparseMatrixCSC`. Note that even if `A` doesn't\nhave the type tag, it must still be symmetric or Hermitian.\nA fill-reducing permutation is used. `F = ldltfact(A)` is most frequently\nused to solve systems of equations `A*x = b` with `F\\\\b`. The returned\nfactorization object `F` also supports the methods [`diag`](@ref),\n[`det`](@ref), [`logdet`](@ref), and [`inv`](@ref).\nYou can extract individual factors from `F` using `F[:L]`.\nHowever, since pivoting is on by default, the factorization is internally\nrepresented as `A == P'*L*D*L'*P` with a permutation matrix `P`;\nusing just `L` without accounting for `P` will give incorrect answers.\nTo include the effects of permutation, it is typically preferable to extract\n\"combined\" factors like `PtL = F[:PtL]` (the equivalent of\n`P'*L`) and `LtP = F[:UP]` (the equivalent of `L'*P`).\nThe complete list of supported factors is `:L, :PtL, :D, :UP, :U, :LD, :DU, :PtLD, :DUP`.\n\nSetting the optional `shift` keyword argument computes the factorization of\n`A+shift*I` instead of `A`. If the `perm` argument is nonempty,\nit should be a permutation of `1:size(A,1)` giving the ordering to use\n(instead of CHOLMOD's default AMD ordering).\n\n!!! note\n    This method uses the CHOLMOD library from SuiteSparse, which only supports\n    doubles or complex doubles. Input matrices not of those element types will\n    be converted to `SparseMatrixCSC{Float64}` or `SparseMatrixCSC{Complex128}`\n    as appropriate.\n\n    Many other functions from CHOLMOD are wrapped but not exported from the\n    `Base.SparseArrays.CHOLMOD` module.\n\"\"\"\nldltfact(A::Union{SparseMatrixCSC{T},SparseMatrixCSC{Complex{T}},\n    Symmetric{T,SparseMatrixCSC{T,SuiteSparse_long}},\n    Hermitian{Complex{T},SparseMatrixCSC{Complex{T},SuiteSparse_long}},\n    Hermitian{T,SparseMatrixCSC{T,SuiteSparse_long}}};\n    kws...) where {T<:Real} = ldltfact(Sparse(A); kws...)\n\n## Solvers\n\nfor (T, f) in ((:Dense, :solve), (:Sparse, :spsolve))\n    @eval begin\n        # Solve Lx = b and L'x=b where A = L*L'\n        function (\\)(L::FactorComponent{T,:L}, B::$T) where T\n            ($f)(CHOLMOD_L, Factor(L), B)\n        end\n        function (\\)(L::FactorComponent{T,:U}, B::$T) where T\n            ($f)(CHOLMOD_Lt, Factor(L), B)\n        end\n        # Solve PLx = b and L'P'x=b where A = P*L*L'*P'\n        function (\\)(L::FactorComponent{T,:PtL}, B::$T) where T\n            F = Factor(L)\n            ($f)(CHOLMOD_L, F, ($f)(CHOLMOD_P, F, B)) # Confusingly, CHOLMOD_P solves P'x = b\n        end\n        function (\\)(L::FactorComponent{T,:UP}, B::$T) where T\n            F = Factor(L)\n            ($f)(CHOLMOD_Pt, F, ($f)(CHOLMOD_Lt, F, B))\n        end\n        # Solve various equations for A = L*D*L' and A = P*L*D*L'*P'\n        function (\\)(L::FactorComponent{T,:D}, B::$T) where T\n            ($f)(CHOLMOD_D, Factor(L), B)\n        end\n        function (\\)(L::FactorComponent{T,:LD}, B::$T) where T\n            ($f)(CHOLMOD_LD, Factor(L), B)\n        end\n        function (\\)(L::FactorComponent{T,:DU}, B::$T) where T\n            ($f)(CHOLMOD_DLt, Factor(L), B)\n        end\n        function (\\)(L::FactorComponent{T,:PtLD}, B::$T) where T\n            F = Factor(L)\n            ($f)(CHOLMOD_LD, F, ($f)(CHOLMOD_P, F, B))\n        end\n        function (\\)(L::FactorComponent{T,:DUP}, B::$T) where T\n            F = Factor(L)\n            ($f)(CHOLMOD_Pt, F, ($f)(CHOLMOD_DLt, F, B))\n        end\n    end\nend\n\nSparseVecOrMat{Tv,Ti} = Union{SparseVector{Tv,Ti}, SparseMatrixCSC{Tv,Ti}}\n\nfunction (\\)(L::FactorComponent, b::Vector)\n    reshape(convert(Matrix, L\\Dense(b)), length(b))\nend\nfunction (\\)(L::FactorComponent, B::Matrix)\n    convert(Matrix, L\\Dense(B))\nend\nfunction (\\)(L::FactorComponent, B::SparseVecOrMat)\n    sparse(L\\Sparse(B,0))\nend\n\nAc_ldiv_B(L::FactorComponent, B) = ctranspose(L)\\B\nAc_ldiv_B(L::FactorComponent, B::RowVector) = ctranspose(L)\\B # ambiguity\n\n(\\)(L::Factor{T}, B::Dense{T}) where {T<:VTypes} = solve(CHOLMOD_A, L, B)\n# Explicit typevars are necessary to avoid ambiguities with defs in linalg/factorizations.jl\n# Likewise the two following explicit Vector and Matrix defs (rather than a single VecOrMat)\n(\\)(L::Factor{T}, B::Vector{Complex{T}}) where {T<:Float64} = complex.(L\\real(B), L\\imag(B))\n(\\)(L::Factor{T}, B::Matrix{Complex{T}}) where {T<:Float64} = complex.(L\\real(B), L\\imag(B))\n(\\)(L::Factor{T}, b::StridedVector) where {T<:VTypes} = Vector(L\\convert(Dense{T}, b))\n(\\)(L::Factor{T}, B::StridedMatrix) where {T<:VTypes} = Matrix(L\\convert(Dense{T}, B))\n(\\)(L::Factor, B::Sparse) = spsolve(CHOLMOD_A, L, B)\n# When right hand side is sparse, we have to ensure that the rhs is not marked as symmetric.\n(\\)(L::Factor, B::SparseVecOrMat) = sparse(spsolve(CHOLMOD_A, L, Sparse(B, 0)))\n\nAc_ldiv_B(L::Factor, B::Dense) = solve(CHOLMOD_A, L, B)\nAc_ldiv_B(L::Factor, B::VecOrMat) = convert(Matrix, solve(CHOLMOD_A, L, Dense(B)))\nAc_ldiv_B(L::Factor, B::Sparse) = spsolve(CHOLMOD_A, L, B)\nAc_ldiv_B(L::Factor, B::SparseVecOrMat) = Ac_ldiv_B(L, Sparse(B))\n\nfor f in (:\\, :Ac_ldiv_B)\n    @eval function ($f)(A::Union{Symmetric{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}},\n                          Hermitian{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}},\n                          Hermitian{Complex{Float64},SparseMatrixCSC{Complex{Float64},SuiteSparse_long}}}, B::StridedVecOrMat)\n        try\n            return ($f)(cholfact(A), B)\n        catch e\n            isa(e, LinAlg.PosDefException) || rethrow(e)\n            return ($f)(ldltfact(A) , B)\n        end\n    end\nend\n\n## Other convenience methods\nfunction diag(F::Factor{Tv}) where Tv\n    f = unsafe_load(get(F.p))\n    fsuper = f.super\n    fpi = f.pi\n    res = Base.zeros(Tv, Int(f.n))\n    xv  = f.x\n    if f.is_super!=0\n        px = f.px\n        pos = 1\n        for i in 1:f.nsuper\n            base = unsafe_load(px, i) + 1\n            res[pos] = unsafe_load(xv, base)\n            pos += 1\n            for j in 1:unsafe_load(fsuper, i + 1) - unsafe_load(fsuper, i) - 1\n                res[pos] = unsafe_load(xv, base + j*(unsafe_load(fpi, i + 1) -\n                    unsafe_load(fpi, i) + 1))\n                pos += 1\n            end\n        end\n    else\n        c0 = f.p\n        r0 = f.i\n        xv = f.x\n        for j in 1:f.n\n            jj = unsafe_load(c0, j) + 1\n            assert(unsafe_load(r0, jj) == j - 1)\n            res[j] = unsafe_load(xv, jj)\n        end\n    end\n    res\nend\n\nfunction logdet(F::Factor{Tv}) where Tv<:VTypes\n    f = unsafe_load(get(F.p))\n    res = zero(Tv)\n    for d in diag(F); res += log(abs(d)) end\n    f.is_ll!=0 ? 2res : res\nend\n\ndet(L::Factor) = exp(logdet(L))\n\nfunction isposdef(A::SparseMatrixCSC{<:VTypes,SuiteSparse_long})\n    if !ishermitian(A)\n        return false\n    end\n    try\n        f = cholfact(A)\n    catch e\n        isa(e, LinAlg.PosDefException) || rethrow(e)\n        return false\n    end\n    true\nend\n\nfunction ishermitian(A::Sparse{Float64})\n    s = unsafe_load(A.p)\n    if s.stype != 0\n        return true\n    else\n        i = symmetry(A, 1)[1]\n        if i < 0\n            throw(CHOLMODException(\"negative value returned from CHOLMOD's symmetry function. This\n                is either because the indices are not sorted or because of a memory error\"))\n        end\n        return i == MM_SYMMETRIC || i == MM_SYMMETRIC_POSDIAG\n    end\nend\nfunction ishermitian(A::Sparse{Complex{Float64}})\n    s = unsafe_load(A.p)\n    if s.stype != 0\n        return true\n    else\n        i = symmetry(A, 1)[1]\n        if i < 0\n            throw(CHOLMODException(\"negative value returned from CHOLMOD's symmetry function. This\n                is either because the indices are not sorted or because of a memory error\"))\n        end\n        return i == MM_HERMITIAN || i == MM_HERMITIAN_POSDIAG\n    end\nend\n\n(*)(A::Symmetric{Float64,SparseMatrixCSC{Float64,Ti}},\n    B::SparseVecOrMat{Float64,Ti}) where {Ti} = sparse(Sparse(A)*Sparse(B))\n(*)(A::Hermitian{Complex{Float64},SparseMatrixCSC{Complex{Float64},Ti}},\n    B::SparseVecOrMat{Complex{Float64},Ti}) where {Ti} = sparse(Sparse(A)*Sparse(B))\n(*)(A::Hermitian{Float64,SparseMatrixCSC{Float64,Ti}},\n    B::SparseVecOrMat{Float64,Ti}) where {Ti} = sparse(Sparse(A)*Sparse(B))\n\n(*)(A::SparseVecOrMat{Float64,Ti},\n    B::Symmetric{Float64,SparseMatrixCSC{Float64,Ti}}) where {Ti} = sparse(Sparse(A)*Sparse(B))\n(*)(A::SparseVecOrMat{Complex{Float64},Ti},\n    B::Hermitian{Complex{Float64},SparseMatrixCSC{Complex{Float64},Ti}}) where {Ti} = sparse(Sparse(A)*Sparse(B))\n(*)(A::SparseVecOrMat{Float64,Ti},\n    B::Hermitian{Float64,SparseMatrixCSC{Float64,Ti}}) where {Ti} = sparse(Sparse(A)*Sparse(B))\n\nend #module\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/test/libdl.jl": "# This file is a part of Julia. License is MIT: https://julialang.org/license\n\n# these could fail on an embedded installation\n# but for now, we don't handle that case\ndlls = Libdl.dllist()\n@test !isempty(dlls)\n@test length(dlls) > 3 # at a bare minimum, probably have some version of libstdc, libgcc, libjulia, ...\nif !is_windows() || Sys.windows_version() >= Sys.WINDOWS_VISTA_VER\n    for dl in dlls\n        if isfile(dl) && (Libdl.dlopen_e(dl) != C_NULL)\n            @test Base.samefile(Libdl.dlpath(dl), dl)\n        end\n    end\nend\n@test length(filter(dlls) do dl\n        return ismatch(Regex(\"^libjulia(?:.*)\\.$(Libdl.dlext)(?:\\..+)?\\$\"), basename(dl))\n    end) == 1 # look for something libjulia-like (but only one)\n\n# library handle pointer must not be NULL\n@test_throws ArgumentError Libdl.dlsym(C_NULL, :foo)\n@test_throws ArgumentError Libdl.dlsym_e(C_NULL, :foo)\n\ncd(dirname(@__FILE__)) do\n\n# Find the library directory by finding the path of libjulia (or libjulia-debug, as the case may be)\n# and then adding on /julia to that directory path to get the private library directory, if we need\n# to (where \"need to\" is defined as private_libdir/julia/libccalltest.dlext exists\nprivate_libdir = if ccall(:jl_is_debugbuild, Cint, ()) != 0\n    dirname(abspath(Libdl.dlpath(\"libjulia-debug\")))\nelse\n    dirname(abspath(Libdl.dlpath(\"libjulia\")))\nend\n\nif isfile(joinpath(private_libdir,\"julia\",\"libccalltest.\"*Libdl.dlext))\n    private_libdir = joinpath(private_libdir, \"julia\")\nend\n\n@test !isempty(Libdl.find_library([\"libccalltest\"], [private_libdir]))\n@test !isempty(Libdl.find_library(\"libccalltest\", [private_libdir]))\n@test !isempty(Libdl.find_library(:libccalltest, [private_libdir]))\n\n# dlopen should be able to handle absolute and relative paths, with and without dlext\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(abspath(joinpath(private_libdir, \"libccalltest\")))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(abspath(joinpath(private_libdir, \"libccalltest.$(Libdl.dlext)\")))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(relpath(joinpath(private_libdir, \"libccalltest\")))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(relpath(joinpath(private_libdir, \"libccalltest.$(Libdl.dlext)\")))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(\"./foo\")\n        @test dl == C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\n# unqualified names present in DL_LOAD_PATH\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(\"libccalltest\")\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen_e(string(\"libccalltest\",\".\",Libdl.dlext))\n        @test dl != C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\n# path with dlopen-able file first in load path\n#=\nlet dl = C_NULL,\n    tmpdir = mktempdir(),\n    fpath = joinpath(tmpdir,\"libccalltest\")\n    try\n        write(open(fpath,\"w\"))\n        push!(Libdl.DL_LOAD_PATH, dirname(@__FILE__))\n        push!(Libdl.DL_LOAD_PATH, dirname(fpath))\n        dl = Libdl.dlopen_e(\"libccalltest\")\n        @test dl != C_NULL\n    finally\n        pop!(Libdl.DL_LOAD_PATH)\n        pop!(Libdl.DL_LOAD_PATH)\n        rm(tmpdir, recursive=true)\n    end\nend\n=#\n\n# path with dlopen-able file second in load path\n#=\nlet dl = C_NULL,\n    tmpdir = mktempdir(),\n    fpath = joinpath(tmpdir,\"libccalltest\")\n    try\n        write(open(fpath,\"w\"))\n        push!(Libdl.DL_LOAD_PATH, dirname(fpath))\n        push!(Libdl.DL_LOAD_PATH, dirname(@__FILE__))\n        dl = Libdl.dlopen_e(\"libccalltest\")\n        @test dl != C_NULL\n    finally\n        pop!(Libdl.DL_LOAD_PATH)\n        pop!(Libdl.DL_LOAD_PATH)\n        rm(tmpdir, recursive=true)\n    end\nend\n=#\n\n# test dlpath\nlet dl = C_NULL\n    try\n        path = abspath(joinpath(private_libdir, \"libccalltest\"))\n        dl = Libdl.dlopen(path)\n        @test dl != C_NULL\n        @test Base.samefile(abspath(Libdl.dlpath(dl)),\n                            abspath(Libdl.dlpath(path)))\n        @test Base.samefile(abspath(Libdl.dlpath(dl)),\n                            string(path,\".\",Libdl.dlext))\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\n# opening a library that does not exist throws an ErrorException\n@test_throws ErrorException Libdl.dlopen(\"./foo\")\n\n# opening a versioned library that does not exist does not result in adding extension twice\nerr = @test_throws ErrorException Libdl.dlopen(\"./foo.$(Libdl.dlext).0\")\n@test !contains(err.value.msg, \"foo.$(Libdl.dlext).0.$(Libdl.dlext)\")\nerr = @test_throws ErrorException Libdl.dlopen(\"./foo.$(Libdl.dlext).0.22.1\")\n@test !contains(err.value.msg, \"foo.$(Libdl.dlext).0.22.1.$(Libdl.dlext)\")\n\n# test dlsym\nlet dl = C_NULL\n    try\n        dl = Libdl.dlopen(abspath(joinpath(private_libdir, \"libccalltest\")))\n        fptr = Libdl.dlsym(dl, :set_verbose)\n        @test fptr != C_NULL\n        @test_throws ErrorException Libdl.dlsym(dl, :foo)\n\n        fptr = Libdl.dlsym_e(dl, :set_verbose)\n        @test fptr != C_NULL\n        fptr = Libdl.dlsym_e(dl, :foo)\n        @test fptr == C_NULL\n    finally\n        Libdl.dlclose(dl)\n    end\nend\n\nif Sys.KERNEL in (:Linux, :FreeBSD)\n    ccall(:jl_read_sonames, Void, ())\nend\n\nend\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/test/cmdlineargs.jl": "# This file is a part of Julia. License is MIT: https://julialang.org/license\n\ncatcmd = `cat`\nif is_windows()\n    try # use busybox-w32 on windows\n        success(`busybox`)\n        catcmd = `busybox cat`\n    end\nend\n\nlet exename = `$(Base.julia_cmd()) --precompiled=yes --startup-file=no`\n    # --version\n    let v = split(readstring(`$exename -v`), \"julia version \")[end]\n        @test Base.VERSION_STRING == chomp(v)\n    end\n    @test readstring(`$exename -v`) == readstring(`$exename --version`)\n\n    # --help\n    let header = \"julia [switches] -- [programfile] [args...]\"\n        @test startswith(readstring(`$exename -h`), header)\n        @test startswith(readstring(`$exename --help`), header)\n    end\n\n    # --quiet\n    # This flag is indirectly tested in test/repl.jl\n\n    # --home\n    @test success(`$exename -H $JULIA_HOME`)\n    @test success(`$exename --home=$JULIA_HOME`)\n\n    # --eval\n    @test  success(`$exename -e \"exit(0)\"`)\n    @test !success(`$exename -e \"exit(1)\"`)\n    @test  success(`$exename --eval=\"exit(0)\"`)\n    @test !success(`$exename --eval=\"exit(1)\"`)\n    @test !success(`$exename -e`)\n    @test !success(`$exename --eval`)\n    # --eval --interactive (replaced --post-boot)\n    @test  success(`$exename -i -e \"exit(0)\"`)\n    @test !success(`$exename -i -e \"exit(1)\"`)\n\n    # --print\n    @test readstring(`$exename -E \"1+1\"`) == \"2\\n\"\n    @test readstring(`$exename --print=\"1+1\"`) == \"2\\n\"\n    @test !success(`$exename -E`)\n    @test !success(`$exename --print`)\n\n    # --load\n    let testfile = tempname()\n        try\n            write(testfile, \"testvar = :test\\n\")\n            @test split(readchomp(`$exename -i --load=$testfile -e \"println(testvar)\"`),\n                '\\n')[end] == \"test\"\n            @test split(readchomp(`$exename -i -e \"println(testvar)\" -L $testfile`),\n                '\\n')[end] == \"test\"\n        finally\n            rm(testfile)\n        end\n    end\n    # -L, --load requires an argument\n    @test !success(`$exename -L`)\n    @test !success(`$exename --load`)\n\n    # --cpu-target\n    # NOTE: this test only holds true if image_file is a shared library.\n    if Libdl.dlopen_e(unsafe_string(Base.JLOptions().image_file)) != C_NULL\n        @test !success(`$exename -C invalidtarget --precompiled=yes`)\n        @test !success(`$exename --cpu-target=invalidtarget --precompiled=yes`)\n    else\n        warn(\"--cpu-target test not runnable\")\n    end\n\n    # --procs\n    @test readchomp(`$exename -q -p 2 -e \"println(nworkers())\"`) == \"2\"\n    @test !success(`$exename -p 0`)\n    @test !success(`$exename --procs=1.0`)\n\n    # --machinefile\n    # this does not check that machinefile works,\n    # only that the filename gets correctly passed to the option struct\n    let fname = tempname()\n        touch(fname)\n        fname = realpath(fname)\n        try\n            @test readchomp(`$exename --machinefile $fname -e\n                \"println(unsafe_string(Base.JLOptions().machinefile))\"`) == fname\n        finally\n            rm(fname)\n        end\n    end\n\n    # -i, isinteractive\n    @test readchomp(`$exename -E \"isinteractive()\"`) == \"false\"\n    @test readchomp(`$exename -E \"isinteractive()\" -i`) == \"true\"\n\n    # --color\n    @test readchomp(`$exename --color=yes -E \"Base.have_color\"`) == \"true\"\n    @test readchomp(`$exename --color=no -E \"Base.have_color\"`) == \"false\"\n    @test !success(`$exename --color=false`)\n\n    # --history-file\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().historyfile)\"\n        --history-file=yes`) == \"true\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().historyfile)\"\n        --history-file=no`) == \"false\"\n    @test !success(`$exename --history-file=false`)\n\n    # --code-coverage\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().code_coverage)\"`) == \"false\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().code_coverage)\"\n        --code-coverage=none`) == \"false\"\n\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().code_coverage)\"\n        --code-coverage`) == \"true\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().code_coverage)\"\n        --code-coverage=user`) == \"true\"\n\n    # --track-allocation\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().malloc_log)\"`) == \"false\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().malloc_log)\"\n        --track-allocation=none`) == \"false\"\n\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().malloc_log)\"\n        --track-allocation`) == \"true\"\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().malloc_log)\"\n        --track-allocation=user`) == \"true\"\n\n    # --optimize\n    @test readchomp(`$exename -E \"Base.JLOptions().opt_level\"`) == \"2\"\n    @test readchomp(`$exename -E \"Base.JLOptions().opt_level\" -O`) == \"3\"\n    @test readchomp(`$exename -E \"Base.JLOptions().opt_level\" --optimize`) == \"3\"\n    @test readchomp(`$exename -E \"Base.JLOptions().opt_level\" -O0`) == \"0\"\n\n    # -g\n    @test readchomp(`$exename -E \"Base.JLOptions().debug_level\" -g`) == \"2\"\n    let code = readstring(`$exename -g0 -e \"code_llvm(STDOUT, +, (Int64, Int64), false, true)\"`)\n        @test contains(code, \"llvm.module.flags\")\n        @test !contains(code, \"llvm.dbg.cu\")\n        @test !contains(code, \"int.jl\")\n        @test !contains(code, \"Int64\")\n    end\n    let code = readstring(`$exename -g1 -e \"code_llvm(STDOUT, +, (Int64, Int64), false, true)\"`)\n        @test contains(code, \"llvm.module.flags\")\n        @test contains(code, \"llvm.dbg.cu\")\n        @test contains(code, \"int.jl\")\n        @test !contains(code, \"Int64\")\n    end\n    let code = readstring(`$exename -g2 -e \"code_llvm(STDOUT, +, (Int64, Int64), false, true)\"`)\n        @test contains(code, \"llvm.module.flags\")\n        @test contains(code, \"llvm.dbg.cu\")\n        @test contains(code, \"int.jl\")\n        @test contains(code, \"\\\"Int64\\\"\")\n    end\n\n    # --check-bounds\n    let JL_OPTIONS_CHECK_BOUNDS_DEFAULT = 0,\n        JL_OPTIONS_CHECK_BOUNDS_ON = 1,\n        JL_OPTIONS_CHECK_BOUNDS_OFF = 2\n        @test parse(Int,readchomp(`$exename -E \"Int(Base.JLOptions().check_bounds)\"`)) ==\n            JL_OPTIONS_CHECK_BOUNDS_DEFAULT\n        @test parse(Int,readchomp(`$exename -E \"Int(Base.JLOptions().check_bounds)\"\n            --check-bounds=yes`)) == JL_OPTIONS_CHECK_BOUNDS_ON\n        @test parse(Int,readchomp(`$exename -E \"Int(Base.JLOptions().check_bounds)\"\n            --check-bounds=no`)) == JL_OPTIONS_CHECK_BOUNDS_OFF\n    end\n    # check-bounds takes yes/no as argument\n    @test !success(`$exename -E \"exit(0)\" --check-bounds=false`)\n\n    # --depwarn\n    @test readchomp(`$exename --depwarn=no -E\n        \"Base.syntax_deprecation_warnings(true)\"`) == \"false\"\n    @test readchomp(`$exename --depwarn=yes -E\n        \"Base.syntax_deprecation_warnings(false)\"`) == \"true\"\n    @test !success(`$exename --depwarn=false`)\n    # test deprecated syntax\n    @test !success(`$exename -e \"foo (x::Int) = x * x\" --depwarn=error`)\n    # test deprecated method\n    @test !success(`$exename -e \"\n        foo() = :foo; bar() = :bar\n        @deprecate foo() bar()\n        foo()\n    \" --depwarn=error`)\n\n    # test deprecated bindings, #13269\n    let code = \"\"\"\n        module Foo\n            import Base: @deprecate_binding\n\n            const NotDeprecated = true\n            @deprecate_binding Deprecated NotDeprecated\n        end\n\n        Foo.Deprecated\n        \"\"\"\n\n        @test !success(`$exename -E \"$code\" --depwarn=error`)\n\n        let out  = Pipe(),\n            proc = spawn(pipeline(`$exename -E \"$code\" --depwarn=yes`, stderr=out)),\n            output = @async readchomp(out)\n\n            close(out.in)\n            wait(proc)\n            @test success(proc)\n            @test wait(output) == \"WARNING: Foo.Deprecated is deprecated.\\n  likely near no file:5\"\n        end\n\n        let out  = Pipe(),\n            proc = spawn(pipeline(`$exename -E \"$code\" --depwarn=no`, stderr=out))\n            output = @async readstring(out)\n\n            wait(proc)\n            close(out.in)\n            @test success(proc)\n            @test wait(output) == \"\"\n        end\n    end\n\n    # --inline\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().can_inline)\"`) == \"true\"\n    @test readchomp(`$exename --inline=yes -E \"Bool(Base.JLOptions().can_inline)\"`) == \"true\"\n    @test readchomp(`$exename --inline=no -E \"Bool(Base.JLOptions().can_inline)\"`) == \"false\"\n    # --inline takes yes/no as argument\n    @test !success(`$exename --inline=false`)\n\n    # --polly\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().polly)\"`) == \"true\"\n    @test readchomp(`$exename --polly=yes -E \"Bool(Base.JLOptions().polly)\"`) == \"true\"\n    @test readchomp(`$exename --polly=no -E \"Bool(Base.JLOptions().polly)\"`) == \"false\"\n    # --polly takes yes/no as argument\n    @test !success(`$exename --polly=false`)\n\n    # --fast-math\n    let JL_OPTIONS_FAST_MATH_DEFAULT = 0,\n        JL_OPTIONS_FAST_MATH_ON = 1,\n        JL_OPTIONS_FAST_MATH_OFF = 2\n        @test parse(Int,readchomp(`$exename -E\n            \"Int(Base.JLOptions().fast_math)\"`)) == JL_OPTIONS_FAST_MATH_DEFAULT\n        @test parse(Int,readchomp(`$exename --math-mode=user -E\n            \"Int(Base.JLOptions().fast_math)\"`)) == JL_OPTIONS_FAST_MATH_DEFAULT\n        @test parse(Int,readchomp(`$exename --math-mode=ieee -E\n            \"Int(Base.JLOptions().fast_math)\"`)) == JL_OPTIONS_FAST_MATH_OFF\n        @test parse(Int,readchomp(`$exename --math-mode=fast -E\n            \"Int(Base.JLOptions().fast_math)\"`)) == JL_OPTIONS_FAST_MATH_ON\n    end\n\n    # --worker takes default / custom as argument (default/custom arguments\n    # tested in test/parallel.jl, test/examples.jl)\n    @test !success(`$exename --worker=true`)\n\n    escape(str) = replace(str, \"\\\\\", \"\\\\\\\\\")\n\n    # test passing arguments\n    let testfile = tempname()\n        try\n            # write a julia source file that just prints ARGS to STDOUT\n            write(testfile, \"\"\"\n                println(ARGS)\n            \"\"\")\n            @test readchomp(`$exename $testfile foo -bar --baz`) ==\n                \"String[\\\"foo\\\", \\\"-bar\\\", \\\"--baz\\\"]\"\n            @test readchomp(`$exename $testfile -- foo -bar --baz`) ==\n                \"String[\\\"foo\\\", \\\"-bar\\\", \\\"--baz\\\"]\"\n            @test readchomp(`$exename -L $testfile -e 'exit(0)' -- foo -bar --baz`) ==\n                \"String[\\\"foo\\\", \\\"-bar\\\", \\\"--baz\\\"]\"\n            @test split(readchomp(`$exename -L $testfile $testfile`), '\\n') ==\n                [\"String[\\\"$(escape(testfile))\\\"]\", \"String[]\"]\n            @test !success(`$exename --foo $testfile`)\n            @test readchomp(`$exename -L $testfile -e 'exit(0)' -- foo -bar -- baz`) == \"String[\\\"foo\\\", \\\"-bar\\\", \\\"--\\\", \\\"baz\\\"]\"\n        finally\n            rm(testfile)\n        end\n    end\n\n    # test the script name\n    let a = tempname(), b = tempname()\n        try\n            write(a, \"\"\"\n                println(@__FILE__)\n                println(PROGRAM_FILE)\n                println(length(ARGS))\n                include(\\\"$(escape(b))\\\")\n            \"\"\")\n            write(b, \"\"\"\n                println(@__FILE__)\n                println(PROGRAM_FILE)\n                println(length(ARGS))\n            \"\"\")\n            @test split(readchomp(`$exename $a`), '\\n') ==\n                [\"$a\", \"$a\", \"0\", \"$b\", \"$a\", \"0\"]\n            @test split(readchomp(`$exename -L $b -e 'exit(0)'`), '\\n') ==\n                [\"$(realpath(b))\", \"\", \"0\"]\n            @test split(readchomp(`$exename -L $b $a`), '\\n') ==\n                [\"$(realpath(b))\", \"\", \"1\", \"$a\", \"$a\", \"0\", \"$b\", \"$a\", \"0\"]\n        finally\n            rm(a)\n            rm(b)\n        end\n    end\n\n    # issue #10562\n    @test readchomp(`$exename -e 'println(ARGS);' ''`) == \"String[\\\"\\\"]\"\n\n    # issue #12679\n    @test readchomp(pipeline(ignorestatus(`$exename --startup-file=no --compile=yes -ioo`),\n        stderr=catcmd)) == \"ERROR: unknown option `-o`\"\n    @test readchomp(pipeline(ignorestatus(`$exename --startup-file=no -p`),\n        stderr=catcmd)) == \"ERROR: option `-p/--procs` is missing an argument\"\n    @test readchomp(pipeline(ignorestatus(`$exename --startup-file=no --inline`),\n        stderr=catcmd)) == \"ERROR: option `--inline` is missing an argument\"\n    @test readchomp(pipeline(ignorestatus(`$exename --startup-file=no -e \"@show ARGS\" -now -- julia RUN.jl`),\n        stderr=catcmd)) == \"ERROR: unknown option `-n`\"\n\n    # --compilecache={yes|no}\n    @test readchomp(`$exename -E \"Bool(Base.JLOptions().use_compilecache)\"`) == \"true\"\n    @test readchomp(`$exename --compilecache=yes -E\n        \"Bool(Base.JLOptions().use_compilecache)\"`) == \"true\"\n    @test readchomp(`$exename --compilecache=no -E\n        \"Bool(Base.JLOptions().use_compilecache)\"`) == \"false\"\n    @test !success(`$exename --compilecache=foo -e \"exit(0)\"`)\n\n    # issue #12671, starting from a non-directory\n    # rm(dir) fails on windows with Permission denied\n    # and was an upstream bug in llvm <= v3.3\n    if !is_windows() && VersionNumber(Base.libllvm_version) > v\"3.3\"\n        testdir = mktempdir()\n        cd(testdir) do\n            rm(testdir)\n            @test success(`$exename -e \"exit(0)\"`)\n        end\n    end\nend\n\n\n# Find the path of libjulia (or libjulia-debug, as the case may be)\n# to use as a dummy shlib to open\nlibjulia = abspath(Libdl.dlpath((ccall(:jl_is_debugbuild, Cint, ()) != 0) ? \"libjulia-debug\" : \"libjulia\"))\n\n# test error handling code paths of running --sysimage\nlet exename = joinpath(JULIA_HOME, Base.julia_exename()),\n    sysname = unsafe_string(Base.JLOptions().image_file)\n    for nonexist_image in (\n            joinpath(@__DIR__, \"nonexistent\"),\n            \"$sysname.nonexistent\",\n            )\n        let stderr = Pipe(),\n            p = spawn(pipeline(`$exename --sysimage=$nonexist_image`, stderr=stderr))\n            close(stderr.in)\n            let s = readstring(stderr)\n                @test contains(s, \"ERROR: could not load library \\\"$nonexist_image\\\"\\n\")\n                @test !contains(s, \"Segmentation fault\")\n                @test !contains(s, \"EXCEPTION_ACCESS_VIOLATION\")\n            end\n            @test !success(p)\n            @test !Base.process_signaled(p)\n            @test p.exitcode == 1\n        end\n    end\n    let stderr = Pipe(),\n        p = spawn(pipeline(`$exename --sysimage=$libjulia`, stderr=stderr))\n        close(stderr.in)\n        let s = readstring(stderr)\n            @test s == \"ERROR: System image file failed consistency check: maybe opened the wrong version?\\n\"\n        end\n        @test !success(p)\n        @test !Base.process_signaled(p)\n        @test p.exitcode == 1\n    end\nend\n\nlet exename = `$(Base.julia_cmd()) --precompiled=yes`\n    # --startup-file\n    let JL_OPTIONS_STARTUPFILE_ON = 1,\n        JL_OPTIONS_STARTUPFILE_OFF = 2\n        # `HOME=$tmpdir` to avoid errors in the user .juliarc.jl, which hangs the tests.  Issue #17642\n        mktempdir() do tmpdir\n            withenv(\"HOME\"=>tmpdir) do\n                @test parse(Int,readchomp(`$exename -E \"Base.JLOptions().startupfile\" --startup-file=yes`)) == JL_OPTIONS_STARTUPFILE_ON\n            end\n        end\n        @test parse(Int,readchomp(`$exename -E \"Base.JLOptions().startupfile\"\n            --startup-file=no`)) == JL_OPTIONS_STARTUPFILE_OFF\n    end\n    @test !success(`$exename --startup-file=false`)\nend\n\n# Make sure `julia --lisp` doesn't break\nrun(pipeline(DevNull, `$(joinpath(JULIA_HOME, Base.julia_exename())) --lisp`, DevNull))\n\n# Test that `julia [some other option] --lisp` is disallowed\n@test_throws ErrorException run(pipeline(DevNull, pipeline(`$(joinpath(JULIA_HOME,\n    Base.julia_exename())) -Cnative --lisp`, stderr=DevNull), DevNull))\n\n# --precompiled={yes|no}\nlet exename = `$(Base.julia_cmd()) --startup-file=no`\n    @test readchomp(`$exename --precompiled=yes -E\n        \"Bool(Base.JLOptions().use_precompiled)\"`) == \"true\"\n    @test readchomp(`$exename --precompiled=no -E\n        \"Bool(Base.JLOptions().use_precompiled)\"`) == \"false\"\nend\n\n# backtrace contains type and line number info (esp. on windows #17179)\nfor precomp in (\"yes\", \"no\")\n    bt = readstring(pipeline(ignorestatus(`$(Base.julia_cmd()) --startup-file=no --precompiled=$precomp\n        -E 'include(\"____nonexistent_file\")'`), stderr=catcmd))\n    @test contains(bt, \"include_from_node1\")\n    if is_windows() && Sys.WORD_SIZE == 32 && precomp == \"yes\"\n        # fixme, issue #17251\n        @test_broken contains(bt, \"include_from_node1(::String) at $(joinpath(\".\",\"loading.jl\"))\")\n    else\n        @test contains(bt, \"include_from_node1(::String) at $(joinpath(\".\",\"loading.jl\"))\")\n    end\n    lno = match(r\"at \\.[\\/\\\\]loading\\.jl:(\\d+)\", bt)\n    @test length(lno.captures) == 1\n    @test parse(Int, lno.captures[1]) > 0\nend\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/test/ccall.jl": "# This file is a part of Julia. License is MIT: https://julialang.org/license\n\nimport Base.copy, Base.==\n\nconst libccalltest = \"libccalltest\"\n\nconst verbose = false\nccall((:set_verbose, libccalltest), Void, (Int32,), verbose)\n\n\n# Test for proper argument register truncation\nccall_test_func(x) = ccall((:testUcharX, libccalltest), Int32, (UInt8,), x % UInt8)\n@test ccall_test_func(3) == 1\n@test ccall_test_func(259) == 1\n\n\n# Test for proper round-trip of Ref{T} type\nfunction gen_ccall_echo(x, T, U, ret=nothing)\n    # Construct a noninline function to do all the work, this is necessary\n    # to make sure object x is still valid (rooted as argument)\n    # when loading the pointer.\n    # This works as long as we still keep the argument\n    # rooted but might fail if we are smarter about eliminating dead root.\n\n    # `eval` in global scope to make sure the function is not a closure\n    func_ex = :(ccall((:test_echo_p, libccalltest), $T, ($U,), x))\n    # It is not allowed to allocate after the ccall returns\n    # and before calling `ret`.\n    if ret !== nothing\n        func_ex = :($ret($func_ex))\n    end\n    @gensym func_name\n    @eval @noinline $func_name(x) = $func_ex\n    :($func_name($(esc(x))))\nend\n\nmacro ccall_echo_func(x, T, U)\n    gen_ccall_echo(x, T, U)\nend\nmacro ccall_echo_load(x, T, U)\n    gen_ccall_echo(x, T, U, :unsafe_load)\nend\nmacro ccall_echo_objref(x, T, U)\n    gen_ccall_echo(x, :(Ptr{$T}), U, :unsafe_pointer_to_objref)\nend\n\nmutable struct IntLike\n    x::Int\nend\n@test @ccall_echo_load(132, Ptr{Int}, Ref{Int}) === 132\n@test @ccall_echo_load(Ref(921), Ptr{Int}, Ref{Int}) === 921\n@test @ccall_echo_load(IntLike(993), Ptr{Int}, Ref{IntLike}) === 993\n@test @ccall_echo_load(IntLike(881), Ptr{IntLike}, Ref{IntLike}).x === 881\n@test @ccall_echo_func(532, Int, Int) === 532\nif Sys.WORD_SIZE == 64\n    # this test is valid only for x86_64 and win64\n    @test @ccall_echo_func(164, IntLike, Int).x === 164\nend\n@test @ccall_echo_func(IntLike(828), Int, IntLike) === 828\n@test @ccall_echo_func(913, Any, Any) === 913\n@test @ccall_echo_objref(553, Ptr{Any}, Any) === 553\n@test @ccall_echo_func(124, Ref{Int}, Any) === 124\n@test @ccall_echo_load(422, Ptr{Any}, Ref{Any}) === 422\n@test @ccall_echo_load([383], Ptr{Int}, Ref{Int}) === 383\n@test @ccall_echo_load(Ref([144,172],2), Ptr{Int}, Ref{Int}) === 172\n# @test @ccall_echo_load(Ref([8],1,1), Ptr{Int}, Ref{Int}) === 8\n\n\n## Tests for passing and returning structs\n\nlet a, ci_ary, x\n    a = 20 + 51im\n\n    x = ccall((:ctest, libccalltest), Complex{Int}, (Complex{Int},), a)\n\n    @test x == a + 1 - 2im\n\n    ci_ary = [a] # Make sure the array is alive during unsafe_load\n    x = unsafe_load(ccall((:cptest, libccalltest), Ptr{Complex{Int}},\n                          (Ptr{Complex{Int}},), ci_ary))\n\n    @test x == a + 1 - 2im\n    @test a == 20 + 51im\n\n    x = ccall((:cptest_static, libccalltest), Ptr{Complex{Int}}, (Ptr{Complex{Int}},), &a)\n    @test unsafe_load(x) == a\n    Libc.free(convert(Ptr{Void}, x))\nend\n\nlet a, b, x\n    a = 2.84 + 5.2im\n\n    x = ccall((:cgtest, libccalltest), Complex128, (Complex128,), a)\n\n    @test x == a + 1 - 2im\n\n    b = [a] # Make sure the array is alive during unsafe_load\n    x = unsafe_load(ccall((:cgptest, libccalltest), Ptr{Complex128}, (Ptr{Complex128},), b))\n\n    @test x == a + 1 - 2im\n    @test a == 2.84 + 5.2im\nend\n\nlet a, b, x\n    a = 3.34f0 + 53.2f0im\n\n    x = ccall((:cftest, libccalltest), Complex64, (Complex64,), a)\n\n    @test x == a + 1 - 2im\n\n    b = [a] # Make sure the array is alive during unsafe_load\n    x = unsafe_load(ccall((:cfptest, libccalltest), Ptr{Complex64}, (Ptr{Complex64},), b))\n\n    @test x == a + 1 - 2im\n    @test a == 3.34f0 + 53.2f0im\nend\n\n\n## Tests for native Julia data types\n\nlet a\n    a = 2.84 + 5.2im\n\n    @test_throws MethodError ccall((:cptest, libccalltest), Ptr{Complex{Int}}, (Ptr{Complex{Int}},), a)\n    @test_throws MethodError ccall((:cptest, libccalltest), Ptr{Complex{Int}}, (Complex{Int},), &a)\nend\n\n\n## Tests for various sized data types (ByVal)\n\nmutable struct Struct1\n    x::Float32\n    y::Float64\nend\nstruct Struct1I\n    x::Float32\n    y::Float64\nend\ncopy(a::Struct1) = Struct1(a.x, a.y)\ncopy(a::Struct1I) = a\n\nfunction test_struct1{Struct}(::Type{Struct})\n    a = Struct(352.39422f23, 19.287577)\n    b = Float32(123.456)\n\n    a2 = copy(a)\n    if Struct === Struct1\n        x = ccall((:test_1, libccalltest), Struct1, (Struct1, Float32), a2, b)\n    else\n        x = ccall((:test_1, libccalltest), Struct1I, (Struct1I, Float32), a2, b)\n    end\n\n    @test a2.x == a.x && a2.y == a.y\n    @test !(a2 === x)\n\n    @test x.x \u2248 a.x + 1*b\n    @test x.y \u2248 a.y - 2*b\nend\ntest_struct1(Struct1)\ntest_struct1(Struct1I)\n\nlet a, b, x\n    a = Struct1(352.39422f23, 19.287577)\n    b = Float32(123.456)\n    a2 = copy(a)\n\n    x = ccall((:test_1long_a, libccalltest), Struct1, (Int, Int, Int, Struct1, Float32), 2, 3, 4, a2, b)\n    @test a2.x == a.x && a2.y == a.y\n    @test !(a2 === x)\n    @test x.x \u2248 a.x + b + 9\n    @test x.y \u2248 a.y - 2*b\n\n    x = ccall((:test_1long_b, libccalltest), Struct1, (Int, Float64, Int, Struct1, Float32), 2, 3, 4, a2, b)\n    @test a2.x == a.x && a2.y == a.y\n    @test !(a2 === x)\n    @test x.x \u2248 a.x + b + 9\n    @test x.y \u2248 a.y - 2*b\n\n    x = ccall((:test_1long_c, libccalltest), Struct1, (Int, Float64, Int, Int, Struct1, Float32), 2, 3, 4, 5, a2, b)\n    @test a2.x == a.x && a2.y == a.y\n    @test !(a2 === x)\n    @test x.x \u2248 a.x + b + 14\n    @test x.y \u2248 a.y - 2*b\nend\n\nlet a, b, x, y\n    a = Complex{Int32}(Int32(10),Int32(31))\n    b = Int32(42)\n\n    x = ccall((:test_2a, libccalltest), Complex{Int32}, (Complex{Int32}, Int32), a, b)\n    y = ccall((:test_2b, libccalltest), Complex{Int32}, (Complex{Int32},Int32), a, b)\n\n    @test a == Complex{Int32}(Int32(10),Int32(31))\n\n    @test x == y\n    @test x == a + b*1 - b*2im\nend\n\nlet a, b, x, y, z\n    a = Complex{Int64}(Int64(20),Int64(51))\n    b = Int64(42)\n\n    x = ccall((:test_3a, libccalltest), Complex{Int64}, (Complex{Int64}, Int64), a, b)\n    y = ccall((:test_3b, libccalltest), Complex{Int64}, (Complex{Int64}, Int64), a, b)\n    z = ccall((:test_128, libccalltest), Complex{Int64}, (Complex{Int64}, Int64), a, b)\n\n    @test a == Complex{Int64}(Int64(20),Int64(51))\n\n    @test x == y\n    @test x == a + b*1 - b*2im\n\n    @test z == a + 1*b\nend\n\nmutable struct Struct4\n    x::Int32\n    y::Int32\n    z::Int32\nend\nstruct Struct4I\n    x::Int32\n    y::Int32\n    z::Int32\nend\n\nfunction test_struct4{Struct}(::Type{Struct})\n    a = Struct(-512275808,882558299,-2133022131)\n    b = Int32(42)\n\n    if Struct === Struct4\n        x = ccall((:test_4, libccalltest), Struct4, (Struct4, Int32), a, b)\n    else\n        x = ccall((:test_4, libccalltest), Struct4I, (Struct4I, Int32), a, b)\n    end\n\n    @test x.x == a.x+b*1\n    @test x.y == a.y-b*2\n    @test x.z == a.z+b*3\nend\ntest_struct4(Struct4)\ntest_struct4(Struct4I)\n\nmutable struct Struct5\n    x::Int32\n    y::Int32\n    z::Int32\n    a::Int32\nend\nstruct Struct5I\n    x::Int32\n    y::Int32\n    z::Int32\n    a::Int32\nend\n\nfunction test_struct5{Struct}(::Type{Struct})\n    a = Struct(1771319039, 406394736, -1269509787, -745020976)\n    b = Int32(42)\n\n    if Struct === Struct5\n        x = ccall((:test_5, libccalltest), Struct5, (Struct5, Int32), a, b)\n    else\n        x = ccall((:test_5, libccalltest), Struct5I, (Struct5I, Int32), a, b)\n    end\n\n    @test x.x == a.x+b*1\n    @test x.y == a.y-b*2\n    @test x.z == a.z+b*3\n    @test x.a == a.a-b*4\nend\ntest_struct5(Struct5)\ntest_struct5(Struct5I)\n\nmutable struct Struct6\n    x::Int64\n    y::Int64\n    z::Int64\nend\nstruct Struct6I\n    x::Int64\n    y::Int64\n    z::Int64\nend\n\nfunction test_struct6{Struct}(::Type{Struct})\n    a = Struct(-654017936452753226, -5573248801240918230, -983717165097205098)\n    b = Int64(42)\n\n    if Struct === Struct6\n        x = ccall((:test_6, libccalltest), Struct6, (Struct6, Int64), a, b)\n    else\n        x = ccall((:test_6, libccalltest), Struct6I, (Struct6I, Int64), a, b)\n    end\n\n    @test x.x == a.x+b*1\n    @test x.y == a.y-b*2\n    @test x.z == a.z+b*3\nend\ntest_struct6(Struct6)\ntest_struct6(Struct6I)\n\nmutable struct Struct7\n    x::Int64\n    y::Cchar\nend\nstruct Struct7I\n    x::Int64\n    y::Cchar\nend\n\nfunction test_struct7{Struct}(::Type{Struct})\n    a = Struct(-384082741977533896, 'h')\n    b = Int8(42)\n\n    if Struct === Struct7\n        x = ccall((:test_7, libccalltest), Struct7, (Struct7, Int8), a, b)\n    else\n        x = ccall((:test_7, libccalltest), Struct7I, (Struct7I, Int8), a, b)\n    end\n\n    @test x.x == a.x+Int(b)*1\n    @test x.y == a.y-Int(b)*2\nend\ntest_struct7(Struct7)\ntest_struct7(Struct7I)\n\nmutable struct Struct8\n    x::Int32\n    y::Cchar\nend\nstruct Struct8I\n    x::Int32\n    y::Cchar\nend\n\nfunction test_struct8{Struct}(::Type{Struct})\n    a = Struct(-384082896, 'h')\n    b = Int8(42)\n\n    if Struct === Struct8\n        r8 = ccall((:test_8, libccalltest), Struct8, (Struct8, Int8), a, b)\n    else\n        r8 = ccall((:test_8, libccalltest), Struct8I, (Struct8I, Int8), a, b)\n    end\n\n    @test r8.x == a.x+b*1\n    @test r8.y == a.y-b*2\nend\ntest_struct8(Struct8)\ntest_struct8(Struct8I)\n\nmutable struct Struct9\n    x::Int32\n    y::Int16\nend\nstruct Struct9I\n    x::Int32\n    y::Int16\nend\n\nfunction test_struct9{Struct}(::Type{Struct})\n    a = Struct(-394092996, -3840)\n    b = Int16(42)\n\n    if Struct === Struct9\n        x = ccall((:test_9, libccalltest), Struct9, (Struct9, Int16), a, b)\n    else\n        x = ccall((:test_9, libccalltest), Struct9I, (Struct9I, Int16), a, b)\n    end\n\n    @test x.x == a.x+b*1\n    @test x.y == a.y-b*2\nend\ntest_struct9(Struct9)\ntest_struct9(Struct9I)\n\nmutable struct Struct10\n    x::Cchar\n    y::Cchar\n    z::Cchar\n    a::Cchar\nend\nstruct Struct10I\n    x::Cchar\n    y::Cchar\n    z::Cchar\n    a::Cchar\nend\n\nfunction test_struct10{Struct}(::Type{Struct})\n    a = Struct('0', '1', '2', '3')\n    b = Int8(2)\n\n    if Struct === Struct10\n        x = ccall((:test_10, libccalltest), Struct10, (Struct10, Int8), a, b)\n    else\n        x = ccall((:test_10, libccalltest), Struct10I, (Struct10I, Int8), a, b)\n    end\n\n    @test x.x == a.x+b*1\n    @test x.y == a.y-b*2\n    @test x.z == a.z+b*3\n    @test x.a == a.a-b*4\nend\ntest_struct10(Struct10)\ntest_struct10(Struct10I)\n\nmutable struct Struct11\n    x::Complex64\nend\nstruct Struct11I\n    x::Complex64\nend\n\nfunction test_struct11{Struct}(::Type{Struct})\n    a = Struct(0.8877077f0 + 0.4591081f0im)\n    b = Float32(42)\n\n    if Struct === Struct11\n        x = ccall((:test_11, libccalltest), Struct11, (Struct11, Float32), a, b)\n    else\n        x = ccall((:test_11, libccalltest), Struct11I, (Struct11I, Float32), a, b)\n    end\n\n    @test x.x \u2248 a.x + b*1 - b*2im\nend\ntest_struct11(Struct11)\ntest_struct11(Struct11I)\n\nmutable struct Struct12\n    x::Complex64\n    y::Complex64\nend\nstruct Struct12I\n    x::Complex64\n    y::Complex64\nend\n\nfunction test_struct12{Struct}(::Type{Struct})\n    a = Struct(0.8877077f5 + 0.4591081f2im, 0.0004842868f0 - 6982.3265f3im)\n    b = Float32(42)\n\n    if Struct === Struct12\n        x = ccall((:test_12, libccalltest), Struct12, (Struct12, Float32), a, b)\n    else\n        x = ccall((:test_12, libccalltest), Struct12I, (Struct12I, Float32), a, b)\n    end\n\n    @test x.x \u2248 a.x + b*1 - b*2im\n    @test x.y \u2248 a.y + b*3 - b*4im\nend\ntest_struct12(Struct12)\ntest_struct12(Struct12I)\n\nmutable struct Struct13\n    x::Complex128\nend\nstruct Struct13I\n    x::Complex128\nend\n\nfunction test_struct13{Struct}(::Type{Struct})\n    a = Struct(42968.97560380495 - 803.0576845153616im)\n    b = Float64(42)\n\n    if Struct === Struct13\n        x = ccall((:test_13, libccalltest), Struct13, (Struct13, Float64), a, b)\n    else\n        x = ccall((:test_13, libccalltest), Struct13I, (Struct13I, Float64), a, b)\n    end\n\n    @test x.x \u2248 a.x + b*1 - b*2im\nend\ntest_struct13(Struct13)\ntest_struct13(Struct13I)\n\nmutable struct Struct14\n    x::Float32\n    y::Float32\nend\nstruct Struct14I\n    x::Float32\n    y::Float32\nend\n\nfunction test_struct14{Struct}(::Type{Struct})\n    a = Struct(0.024138331f0, 0.89759064f32)\n    b = Float32(42)\n\n    if Struct === Struct14\n        x = ccall((:test_14, libccalltest), Struct14, (Struct14, Float32), a, b)\n    else\n        x = ccall((:test_14, libccalltest), Struct14I, (Struct14I, Float32), a, b)\n    end\n\n    @test x.x \u2248 a.x + b*1\n    @test x.y \u2248 a.y - b*2\nend\ntest_struct14(Struct14)\ntest_struct14(Struct14I)\n\nmutable struct Struct15\n    x::Float64\n    y::Float64\nend\nstruct Struct15I\n    x::Float64\n    y::Float64\nend\n\nfunction test_struct15{Struct}(::Type{Struct})\n    a = Struct(4.180997967273657, -0.404218594294923)\n    b = Float64(42)\n\n    if Struct === Struct15\n        x = ccall((:test_15, libccalltest), Struct15, (Struct15, Float64), a, b)\n    else\n        x = ccall((:test_15, libccalltest), Struct15I, (Struct15I, Float64), a, b)\n    end\n\n    @test x.x \u2248 a.x + b*1\n    @test x.y \u2248 a.y - b*2\nend\ntest_struct15(Struct15)\ntest_struct15(Struct15I)\n\nmutable struct Struct16\n    x::Float32\n    y::Float32\n    z::Float32\n    a::Float64\n    b::Float64\n    c::Float64\nend\nstruct Struct16I\n    x::Float32\n    y::Float32\n    z::Float32\n    a::Float64\n    b::Float64\n    c::Float64\nend\n\nfunction test_struct16{Struct}(::Type{Struct})\n    a = Struct(0.1604656f0, 0.6297606f0, 0.83588994f0,\n               0.6460273620993535, 0.9472692581106656, 0.47328535437352093)\n    b = Float32(42)\n\n    if Struct === Struct16\n        x = ccall((:test_16, libccalltest), Struct16, (Struct16, Float32), a, b)\n    else\n        x = ccall((:test_16, libccalltest), Struct16I, (Struct16I, Float32), a, b)\n    end\n\n    @test x.x \u2248 a.x + b*1\n    @test x.y \u2248 a.y - b*2\n    @test x.z \u2248 a.z + b*3\n    @test x.a \u2248 a.a - b*4\n    @test x.b \u2248 a.b + b*5\n    @test x.c \u2248 a.c - b*6\nend\ntest_struct16(Struct16)\ntest_struct16(Struct16I)\n\nmutable struct Struct17\n    a::Int8\n    b::Int16\nend\nstruct Struct17I\n    a::Int8\n    b::Int16\nend\n\nfunction test_struct17{Struct}(::Type{Struct})\n    a = Struct(2, 10)\n    b = Int8(2)\n\n    if Struct === Struct17\n        x = ccall((:test_17, libccalltest), Struct17, (Struct17, Int8), a, b)\n    else\n        x = ccall((:test_17, libccalltest), Struct17I, (Struct17I, Int8), a, b)\n    end\n\n    @test x.a == a.a + b * 1\n    @test x.b == a.b - b * 2\nend\ntest_struct17(Struct17)\ntest_struct17(Struct17I)\n\nmutable struct Struct18\n    a::Int8\n    b::Int8\n    c::Int8\nend\nstruct Struct18I\n    a::Int8\n    b::Int8\n    c::Int8\nend\n\nfunction test_struct18{Struct}(::Type{Struct})\n    a = Struct(2, 10, -3)\n    b = Int8(2)\n\n    if Struct === Struct18\n        x = ccall((:test_18, libccalltest), Struct18, (Struct18, Int8), a, b)\n    else\n        x = ccall((:test_18, libccalltest), Struct18I, (Struct18I, Int8), a, b)\n    end\n\n    @test x.a == a.a + b * 1\n    @test x.b == a.b - b * 2\n    @test x.c == a.c + b * 3\nend\ntest_struct18(Struct18)\ntest_struct18(Struct18I)\n\nlet a, b, x\n    a = Int128(0x7f00123456789abc)<<64 + typemax(UInt64)\n    b = Int64(1)\n\n    x = ccall((:test_128, libccalltest), Int128, (Int128, Int64), a, b)\n\n    @test x == a + b*1\n    @test a == Int128(0x7f00123456789abc)<<64 + typemax(UInt64)\nend\n\nmutable struct Struct_Big\n    x::Int\n    y::Int\n    z::Int8\nend\nstruct Struct_BigI\n    x::Int\n    y::Int\n    z::Int8\nend\ncopy(a::Struct_Big) = Struct_Big(a.x, a.y, a.z)\ncopy(a::Struct_BigI) = a\n\nfunction test_struct_big{Struct}(::Type{Struct})\n    a = Struct(424,-5,Int8('Z'))\n    a2 = copy(a)\n\n    if Struct == Struct_Big\n        x = ccall((:test_big, libccalltest), Struct_Big, (Struct_Big,), a2)\n    else\n        x = ccall((:test_big, libccalltest), Struct_BigI, (Struct_BigI,), a2)\n    end\n\n    @test a2.x == a.x && a2.y == a.y && a2.z == a.z\n    @test x.x == a.x + 1\n    @test x.y == a.y - 2\n    @test x.z == a.z - Int('A')\nend\ntest_struct_big(Struct_Big)\ntest_struct_big(Struct_BigI)\n\nlet a, a2, x\n    a = Struct_Big(424,-5,Int8('Z'))\n    a2 = copy(a)\n    x = ccall((:test_big_long, libccalltest), Struct_Big, (Int, Int, Int, Struct_Big,), 2, 3, 4, a2)\n    @test a2.x == a.x && a2.y == a.y && a2.z == a.z\n    @test x.x == a.x + 10\n    @test x.y == a.y - 2\n    @test x.z == a.z - Int('A')\nend\n\nconst Struct_huge1a = NTuple{8, Int64}\nconst Struct_huge1b = NTuple{9, Int64}\nconst Struct_huge2a = NTuple{8, Cdouble}\nconst Struct_huge2b = NTuple{9, Cdouble}\nmutable struct Struct_huge3a\n    cf::NTuple{3, Complex{Cfloat}}\n    f7::Cfloat\n    f8::Cfloat\nend\nmutable struct Struct_huge3b\n    cf::NTuple{7, Complex{Cfloat}}\n    r8a::Cfloat\n    r8b::Cfloat\nend\nmutable struct Struct_huge3c\n    cf::NTuple{7, Complex{Cfloat}}\n    r8a::Cfloat\n    r8b::Cfloat\n    r9::Cfloat\nend\nmutable struct Struct_huge4a\n    r12::Complex{Cdouble}\n    r34::Complex{Cdouble}\n    r5::Complex{Cfloat}\n    r67::Complex{Cdouble}\n    r8::Cdouble\nend\nmutable struct Struct_huge4b\n    r12::Complex{Cdouble}\n    r34::Complex{Cdouble}\n    r5::Complex{Cfloat}\n    r67::Complex{Cdouble}\n    r89::Complex{Cdouble}\nend\nconst Struct_huge5a = NTuple{8, Complex{Cint}}\nconst Struct_huge5b = NTuple{9, Complex{Cint}}\n\nfunction verify_huge(init, a, b)\n    @test typeof(init) === typeof(a) === typeof(b)\n    verbose && @show (a, b)\n    # make sure a was unmodified\n    for i = 1:nfields(a)\n        @test getfield(init, i) === getfield(a, i)\n    end\n    # make sure b was modifed as expected\n    a1, b1 = getfield(a, 1), getfield(b, 1)\n    while isa(a1, Tuple)\n        @test a1[2:end] === b1[2:end]\n        a1 = a1[1]\n        b1 = b1[1]\n    end\n    if isa(a1, VecElement)\n        a1 = a1.value\n        b1 = b1.value\n    end\n    @test oftype(a1, a1 * 39) === b1\n    for i = 2:nfields(a)\n        @test getfield(a, i) === getfield(b, i)\n    end\nend\nmacro test_huge(i, b, init)\n    f = QuoteNode(Symbol(\"test_huge\", i, b))\n    ty = Symbol(\"Struct_huge\", i, b)\n    return quote\n        let a = $ty($(esc(init))...), f\n            f(b) = ccall(($f, libccalltest), $ty, (Cchar, $ty, Cchar), '0' + $i, a, $b[1])\n            #code_llvm(f, typeof((a,)))\n            verify_huge($ty($(esc(init))...), a, f(a))\n        end\n    end\nend\n@test_huge 1 'a' ((1, 2, 3, 4, 5, 6, 7, 8),)\n@test_huge 1 'b' ((1, 2, 3, 4, 5, 6, 7, 8, 9),)\n@test_huge 2 'a' ((1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0),)\n@test_huge 2 'b' ((1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0),)\n@test_huge 3 'a' ((1.0 + 2.0im, 3.0 + 4.0im, 5.0 + 6.0im), 7.0, 8.0)\n@test_huge 3 'b' ((1.0 + 2.0im, 3.0 + 4.0im, 5.0 + 6.0im, 7.0 + 8.0im, 9.0 + 10.0im, 11.0 + 12.0im, 13.0 + 14.0im), 7.0, 8.0)\n@test_huge 3 'c' ((1.0 + 2.0im, 3.0 + 4.0im, 5.0 + 6.0im, 7.0 + 8.0im, 9.0 + 10.0im, 11.0 + 12.0im, 13.0 + 14.0im), 7.0, 8.0, 9.0)\n@test_huge 4 'a' (1.0 + 2.0im, 3.0 + 4.0im, 5.0f0 + 6.0f0im, 7.0 + 8.0im, 9.0)\n@test_huge 4 'b' (1.0 + 2.0im, 3.0 + 4.0im, 5.0f0 + 6.0f0im, 7.0 + 8.0im, 9.0 + 10.0im)\n@test_huge 5 'a' ((1 + 2im, 3 + 4im, 5 + 6im, 7 + 8im, 9 + 10im, 11 + 12im, 13 + 14im, 15 + 16im),)\n@test_huge 5 'b' ((1 + 2im, 3 + 4im, 5 + 6im, 7 + 8im, 9 + 10im, 11 + 12im, 13 + 14im, 15 + 16im, 17 + 17im),)\n\n## cfunction roundtrip\n\nverbose && Libc.flush_cstdio()\nverbose && println(\"Testing cfunction roundtrip: \")\n\ncf64 = 2.84+5.2im\ncf32 = 3.34f0+53.2f0im\nci32 = Complex{Int32}(Int32(10),Int32(31))\nci64 = Complex{Int64}(Int64(20),Int64(51))\ns1 = Struct1(352.39422f23, 19.287577)\n==(a::Struct1,b::Struct1) = a.x == b.x && a.y == b.y\n\nfor (t,v) in ((Complex{Int32},:ci32),(Complex{Int64},:ci64),\n              (Complex64,:cf32),(Complex128,:cf64),(Struct1,:s1))\n    fname = Symbol(\"foo\",v)\n    fname1 = Symbol(\"foo1\",v)\n    @eval begin\n        verbose && println($t)\n        a = copy($v)\n        verbose && println(\"A: \",a)\n        function $fname1(s::$t)\n            verbose && println(\"B: \",s)\n            @test s == $v\n            @test s === a\n            global c = s\n            s\n        end\n        function $fname1(s)\n            @assert false\n        end\n        function $fname(s::$t)\n            verbose && println(\"B: \",s)\n            @test s == $v\n            if($(t).mutable)\n                @test !(s === a)\n            end\n            global c = s\n            s\n        end\n        function $fname(s)\n            @assert false\n        end\n        b = ccall(cfunction($fname1,Ref{$t},(Ref{$t},)),Ref{$t},(Ref{$t},),a)\n        verbose && println(\"C: \",b)\n        @test b == $v\n        @test b === a\n        @test b === c\n        b = ccall(cfunction($fname,$t,($t,)),$t,($t,),a)\n        verbose && println(\"C: \",b)\n        @test b == $v\n        if ($(t).mutable)\n            @test !(b === c)\n            @test !(b === a)\n        end\n        b = ccall(cfunction($fname1,$t,(Ref{$t},)),$t,(Ref{$t},),a)\n        verbose && println(\"C: \",b)\n        @test b == $v\n        if ($(t).mutable)\n            @test !(b === c)\n            @test !(b === a)\n        end\n        b = ccall(cfunction($fname,Ref{$t},($t,)),Ref{$t},($t,),a)\n        verbose && println(\"C: \",b)\n        @test b == $v\n        @test b === c\n        if ($(t).mutable)\n            @test !(b === a)\n        end\n        b = ccall(cfunction($fname,Any,(Ref{$t},)),Any,(Ref{$t},),$v)\n        verbose && println(\"C: \",b)\n        @test b == $v\n        @test b === c\n        if ($(t).mutable)\n            @test !(b === a)\n        end\n        b = ccall(cfunction($fname,Any,(Ref{Any},)),Any,(Ref{Any},),$v)\n        @test b == $v\n        @test b === c\n        if ($(t).mutable)\n            @test !(b === a)\n        end\n        @test_throws TypeError ccall(cfunction($fname,Ref{AbstractString},(Ref{Any},)),Any,(Ref{Any},),$v)\n        @test_throws TypeError ccall(cfunction($fname,AbstractString,(Ref{Any},)),Any,(Ref{Any},),$v)\n    end\nend\n\n# issue 13031\nfoo13031(x) = Cint(1)\nfoo13031p = cfunction(foo13031, Cint, (Ref{Tuple{}},))\nccall(foo13031p, Cint, (Ref{Tuple{}},), ())\n\nfoo13031(x,y,z) = z\nfoo13031p = cfunction(foo13031, Cint, (Ref{Tuple{}},Ref{Tuple{}},Cint))\nccall(foo13031p, Cint, (Ref{Tuple{}},Ref{Tuple{}},Cint), (), (), 8)\n\n# issue 17219\nfunction ccall_reassigned_ptr(ptr::Ptr{Void})\n    ptr = Libdl.dlsym(Libdl.dlopen(libccalltest), \"test_echo_p\")\n    ccall(ptr, Any, (Any,), \"foo\")\nend\n@test ccall_reassigned_ptr(C_NULL) == \"foo\"\n\n# @threadcall functionality\nthreadcall_test_func(x) =\n    @threadcall((:testUcharX, libccalltest), Int32, (UInt8,), x % UInt8)\n\n@test threadcall_test_func(3) == 1\n@test threadcall_test_func(259) == 1\n\n# issue 17819\n# NOTE: can't use cfunction or reuse ccalltest Struct methods, as those call into the runtime\n@test @threadcall((:threadcall_args, libccalltest), Cint, (Cint, Cint), 1, 2) == 3\n\nlet n=3\n    tids = Culong[]\n    @sync for i in 1:10^n\n        @async push!(tids, @threadcall(:uv_thread_self, Culong, ()))\n    end\n\n    # The work should not be done on the master thread\n    t0 = ccall(:uv_thread_self, Culong, ())\n    @test length(tids) == 10^n\n    for t in tids\n        @test t != t0\n    end\nend\n\n@test ccall(:jl_getpagesize, Clong, ()) == @threadcall(:jl_getpagesize, Clong, ())\n\n# Pointer finalizer (issue #15408)\nlet A = [1]\n    ccall((:set_c_int, libccalltest), Void, (Cint,), 1)\n    @test ccall((:get_c_int, libccalltest), Cint, ()) == 1\n    finalizer(A, cglobal((:finalizer_cptr, libccalltest), Void))\n    finalize(A)\n    @test ccall((:get_c_int, libccalltest), Cint, ()) == -1\nend\n\n# Pointer finalizer at exit (PR #19911)\nlet result = readstring(`$(Base.julia_cmd()) --startup-file=no -e \"A = Ref{Cint}(42); finalizer(A, cglobal((:c_exit_finalizer, \\\"$libccalltest\\\"), Void))\"`)\n    @test result == \"c_exit_finalizer: 42, 0\"\nend\n\n# SIMD Registers\n\nconst VecReg{N,T} = NTuple{N,VecElement{T}}\nconst V2xF32 = VecReg{2,Float32}\nconst V4xF32 = VecReg{4,Float32}\nconst V2xF64 = VecReg{2,Float64}\nconst V2xI32 = VecReg{2,Int32}\nconst V4xI32 = VecReg{4,Int32}\n\nstruct Struct_AA64_1\n    v1::Int32\n    v2::Int128\nend\nstruct Struct_AA64_2\n    v1::Float16\n    v2::Float64\nend\n\n# This is a homogenious short vector aggregate\nstruct Struct_AA64_3\n    v1::VecReg{8,Int8}\n    v2::VecReg{2,Float32}\nend\n# This is NOT a homogenious short vector aggregate\nstruct Struct_AA64_4\n    v2::VecReg{2,Float32}\n    v1::VecReg{8,Int16}\nend\n\nmutable struct Struct_huge1_ppc64\n    m::Int64\n    v::V4xF32\nend\n\nmutable struct Struct_huge2_ppc64\n    v1::V4xF32\n    v2::V2xI32\nend\n\nmutable struct Struct_huge3_ppc64\n    v1::V4xF32\n    f::NTuple{4,Float32}\nend\n\nmutable struct Struct_huge4_ppc64\n    v1::V2xF32\n    v2::V2xF64\nend\n\nmutable struct Struct_huge5_ppc64\n    v1::NTuple{9,V4xF32}\nend\n\nmutable struct Struct_huge6_ppc64\n    v1::NTuple{8,V4xF32}\n    v2::V4xF32\nend\n\nmutable struct Struct_huge7_ppc64\n    v1::VecReg{3,Int32}\n    v2::VecReg{3,Int32}\nend\n\nmutable struct Struct_huge1_ppc64_hva\n    v1::NTuple{8,V4xF32}\nend\n\nmutable struct Struct_huge2_ppc64_hva\n    v1::NTuple{2,NTuple{2,V4xF32}}\nend\n\nmutable struct Struct_huge3_ppc64_hva\n    vf1::V4xF32\n    vf2::Tuple{NTuple{2,V4xF32}}\nend\n\nmutable struct Struct_huge4_ppc64_hva\n    v1::V4xI32\n    v2::V4xF32\nend\n\nmutable struct Struct_huge5_ppc64_hva\n    v1::V4xI32\n    v2::V2xF64\nend\n\nif Sys.ARCH === :x86_64\n    function test_sse(a1::V4xF32, a2::V4xF32, a3::V4xF32, a4::V4xF32)\n        ccall((:test_m128, libccalltest), V4xF32, (V4xF32, V4xF32, V4xF32, V4xF32), a1, a2, a3, a4)\n    end\n\n    function test_sse(a1::V4xI32, a2::V4xI32, a3::V4xI32, a4::V4xI32)\n        ccall((:test_m128i, libccalltest), V4xI32, (V4xI32, V4xI32, V4xI32, V4xI32), a1, a2, a3, a4)\n    end\n\n    foo_ams(a1, a2, a3, a4) = VecReg(ntuple(i -> VecElement(a1[i].value + a2[i].value * (a3[i].value - a4[i].value)), 4))\n\n    for s in [Float32, Int32]\n        T = NTuple{4, VecElement{s}}\n        @eval function rt_sse(a1::$T, a2::$T, a3::$T, a4::$T)\n            return ccall(\n                cfunction(foo_ams, $T, ($T, $T, $T, $T)),\n                $T,\n                ($T, $T, $T, $T),\n                a1,  a2,  a3, a4)\n        end\n\n        a1 = VecReg(ntuple(i -> VecElement(s(1i)), 4))\n        a2 = VecReg(ntuple(i -> VecElement(s(2i)), 4))\n        a3 = VecReg(ntuple(i -> VecElement(s(3i)), 4))\n        a4 = VecReg(ntuple(i -> VecElement(s(4i)), 4))\n        r = VecReg(ntuple(i -> VecElement(s(1i + 2i * (3i - 4i))), 4))\n        @test test_sse(a1, a2, a3, a4) == r\n\n        # cfunction round-trip\n        @test rt_sse(a1, a2, a3, a4) == r\n    end\n\nelseif Sys.ARCH === :aarch64\n    for v1 in 1:99:1000, v2 in -100:-1999:-20000\n        @test ccall((:test_aa64_i128_1, libccalltest), Int128,\n                    (Int64, Int128), v1, v2) == v1 * 2 - v2\n    end\n    for v1 in 1:4, v2 in -4:-1, v3_1 in 3:5, v3_2 in 7:9\n        res = ccall((:test_aa64_i128_2, libccalltest), Struct_AA64_1,\n                    (Int64, Int128, Struct_AA64_1),\n                    v1, v2, Struct_AA64_1(v3_1, v3_2))\n        expected = Struct_AA64_1(v1 \u00f7 2 + 1 - v3_1, v2 * 2 - 1 - v3_2)\n        @test res === expected\n    end\n    for v1 in 1:4, v2 in -4:-1, v3 in 3:5, v4 in -(1:3)\n        res = ccall((:test_aa64_fp16_1, libccalltest), Float16,\n                    (Cint, Float32, Float64, Float16),\n                    v1, v2, v3, v4)\n        expected = Float16(v1 + v2 * 2 + v3 * 3 + v4 * 4)\n        @test res === expected\n\n        res = ccall((:test_aa64_fp16_2, libccalltest), Struct_AA64_2,\n                    (Cint, Float32, Float64, Float16),\n                    v1, v2, v3, v4)\n        expected = Struct_AA64_2(v4 / 2 + 1, v1 * 2 + v2 * 4 - v3)\n        @test res === expected\n    end\n    for v1_1 in 1:4, v1_2 in -2:2, v2 in -4:-1, v3_1 in 3:5, v3_2 in 6:8\n        res = ccall((:test_aa64_vec_1, libccalltest),\n                    VecReg{2,Int64},\n                    (VecReg{2,Int32}, Float32, VecReg{2,Int32}),\n                    (VecElement(Int32(v1_1)), VecElement(Int32(v1_2))),\n                    v2, (VecElement(Int32(v3_1)), VecElement(Int32(v3_2))))\n        expected = (VecElement(v1_1 * v2 + v3_1), VecElement(v1_2 * v2 + v3_2))\n        @test res === expected\n    end\n    for v1_11 in 1:4, v1_12 in -2:2, v1_21 in 1:4, v1_22 in -2:2,\n        v2_11 in 1:4, v2_12 in -2:2, v2_21 in 1:4, v2_22 in -2:2\n        v1 = Struct_AA64_3((VecElement(Int8(v1_11)), VecElement(Int8(v1_12)),\n                            VecElement(Int8(0)), VecElement(Int8(0)),\n                            VecElement(Int8(0)), VecElement(Int8(0)),\n                            VecElement(Int8(0)), VecElement(Int8(0))),\n                           (VecElement(Float32(v1_21)),\n                            VecElement(Float32(v1_22))))\n        v2 = Struct_AA64_4((VecElement(Float32(v2_21)),\n                            VecElement(Float32(v2_22))),\n                           (VecElement(Int16(v2_11)), VecElement(Int16(v2_12)),\n                            VecElement(Int16(0)), VecElement(Int16(0)),\n                            VecElement(Int16(0)), VecElement(Int16(0)),\n                            VecElement(Int16(0)), VecElement(Int16(0))))\n        res = ccall((:test_aa64_vec_2, libccalltest),\n                    Struct_AA64_3, (Struct_AA64_3, Struct_AA64_4), v1, v2)\n        expected = Struct_AA64_3((VecElement(Int8(v1_11 + v2_11)),\n                                  VecElement(Int8(v1_12 + v2_12)),\n                                  VecElement(Int8(0)), VecElement(Int8(0)),\n                                  VecElement(Int8(0)), VecElement(Int8(0)),\n                                  VecElement(Int8(0)), VecElement(Int8(0))),\n                                 (VecElement(Float32(v1_21 - v2_21)),\n                                  VecElement(Float32(v1_22 - v2_22))))\n        @test res === expected\n    end\n\nelseif Sys.ARCH === :powerpc64le || Sys.ARCH === :ppc64le\n@test_huge 1 \"_ppc64\" (1, (2.0, 3.0, 4.0, 5.0),)\n@test_huge 2 \"_ppc64\" ((1.0, 2.0, 3.0, 4.0), (11, 12))\n@test_huge 3 \"_ppc64\" ((1, 2, 3, 4), (11.0, 12.0, 13.0, 14.0))\n@test_huge 4 \"_ppc64\" ((1, 2), (11.0, 12.0))\n@test_huge 5 \"_ppc64\" ((((1.0, 2.0, 3.0, 4.0),\n                         (5.0, 6.0, 7.0, 8.0),\n                         (11.0, 12.0, 13.0, 14.0),\n                         (15.0, 16.0, 17.0, 18.0),\n                         (21.0, 22.0, 23.0, 24.0),\n                         (25.0, 26.0, 27.0, 28.0),\n                         (31.0, 32.0, 33.0, 34.0),\n                         (35.0, 36.0, 37.0, 38.0),\n                         (41.0, 42.0, 43.0, 44.0)),))\n@test_huge 6 \"_ppc64\" ((((1.0, 2.0, 3.0, 4.0),\n                         (5.0, 6.0, 7.0, 8.0),\n                         (11.0, 12.0, 13.0, 14.0),\n                         (15.0, 16.0, 17.0, 18.0),\n                         (21.0, 22.0, 23.0, 24.0),\n                         (25.0, 26.0, 27.0, 28.0),\n                         (31.0, 32.0, 33.0, 34.0),\n                         (35.0, 36.0, 37.0, 38.0)),\n                        (41.0, 42.0, 43.0, 44.0)))\n@test_huge 1 \"_ppc64_hva\" ((((1.0, 2.0, 3.0, 4.0),\n                             (5.0, 6.0, 7.0, 8.0),\n                             (11.0, 12.0, 13.0, 14.0),\n                             (15.0, 16.0, 17.0, 18.0),\n                             (21.0, 22.0, 23.0, 24.0),\n                             (25.0, 26.0, 27.0, 28.0),\n                             (31.0, 32.0, 33.0, 34.0),\n                             (35.0, 36.0, 37.0, 38.0)),))\n@test_huge 2 \"_ppc64_hva\" (((((1.0, 2.0, 3.0, 4.0),\n                              (5.0, 6.0, 7.0, 8.0)),\n                             ((11.0, 12.0, 13.0, 14.0),\n                              (15.0, 16.0, 17.0, 18.0))),))\n@test_huge 3 \"_ppc64_hva\" (((1.0, 2.0, 3.0, 4.0),\n                            (((11.0, 12.0, 13.0, 14.0),\n                              (15.0, 16.0, 17.0, 18.0)),)))\n@test_huge 4 \"_ppc64_hva\" (((1, 2, 3, 4),\n                            (11.0, 12.0, 13.0, 14.0)))\n@test_huge 5 \"_ppc64_hva\" (((1, 2, 3, 4),\n                            (11.0, 12.0)))\n\n@test 18451 == ccall((:test_ppc64_vec1long, libccalltest), Int64,\n    (Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Struct_huge1_ppc64),\n    1, 2, 3, 4, 5, 6, 7, 8, 9, Struct_huge1_ppc64(18000, (100, 101, 102, 103)))\n\n@test 941 == ccall((:test_ppc64_vec1long_vec, libccalltest), Int64,\n    (Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, V4xF32),\n    11, 12, 13, 14, 15, 16, 17, 18, 19, (200, 201, 202, 203))\n\n@test V4xF32((614232, 614218, 614204, 614190)) ==\n     ccall((:test_ppc64_vec2, libccalltest), V4xF32,\n    (Int64, V4xF32, V4xF32, V4xF32, V4xF32,\n     V4xF32, V4xF32, V4xF32, V4xF32, V4xF32,\n     V4xF32, V4xF32, V4xF32, V4xF32, V4xF32),\n    600000, (4, 3, 2, 1), (5, 4, 3, 2), (6, 5, 4, 3), (7, 6, 5, 4),\n    (14, 13, 12, 11), (15, 14, 13, 12), (16, 15, 14, 13), (17, 16, 15, 14), (18, 17, 16, 15),\n    (1024, 1023, 1022, 1021), (1025, 1024, 1023, 1022), (1026, 1025, 1024, 1023), (1027, 1026, 1025, 1024), (10028, 10027, 10026, 10025))\n\nelseif Sys.ARCH !== :i686 && Sys.ARCH !== :arm # TODO\nwarn(\"ccall: no VecReg tests run for this platform\")\n\nend\n\n# Special calling convention for `Array`\nfunction f17204(a)\n    b = similar(a)\n    for i in eachindex(a)\n        b[i] = a[i] + 10\n    end\n    return b\nend\n@test ccall(cfunction(f17204, Vector{Any}, Tuple{Vector{Any}}),\n            Vector{Any}, (Vector{Any},), Any[1:10;]) == Any[11:20;]\n\n# This used to trigger incorrect ccall callee inlining.\n# Not sure if there's a more reliable way to test this.\n# Do not put these in a function.\n@noinline g17413() = rand()\n@inline f17413() = (g17413(); g17413())\nccall((:test_echo_p, libccalltest), Ptr{Void}, (Any,), f17413())\nfor i in 1:3\n    ccall((:test_echo_p, libccalltest), Ptr{Void}, (Any,), f17413())\nend\n\nstruct SpillPint\n    a::Ptr{Cint}\n    b::Ptr{Cint}\nend\nBase.cconvert(::Type{SpillPint}, v::NTuple{2,Cint}) =\n    Base.cconvert(Ref{NTuple{2,Cint}}, v)\nfunction Base.unsafe_convert(::Type{SpillPint}, vr)\n    ptr = Base.unsafe_convert(Ref{NTuple{2,Cint}}, vr)\n    return SpillPint(ptr, ptr + 4)\nend\n\nmacro test_spill_n(n::Int, intargs, floatargs)\n    fname_int = Symbol(:test_spill_int, n)\n    fname_float = Symbol(:test_spill_float, n)\n    quote\n        local ints = $(esc(intargs))\n        local floats = $(esc(intargs))\n        @test ccall(($(QuoteNode(fname_int)), libccalltest), Cint,\n                    ($((:(Ref{Cint}) for j in 1:n)...), SpillPint),\n                    $((:(ints[$j]) for j in 1:n)...),\n                    (ints[$n + 1], ints[$n + 2])) == sum(ints[1:($n + 2)])\n        @test ccall(($(QuoteNode(fname_float)), libccalltest), Float32,\n                    ($((:Float32 for j in 1:n)...), NTuple{2,Float32}),\n                    $((:(floats[$j]) for j in 1:n)...),\n                    (floats[$n + 1], floats[$n + 2])) == sum(floats[1:($n + 2)])\n    end\nend\n\nfor i in 1:100\n    local intargs = rand(1:10000, 14)\n    local int32args = Int32.(intargs)\n    local intsum = sum(intargs)\n    local floatargs = rand(14)\n    local float32args = Float32.(floatargs)\n    local float32sum = sum(float32args)\n    local float64sum = sum(floatargs)\n    @test ccall((:test_long_args_intp, libccalltest), Cint,\n                (Ref{Cint}, Ref{Cint}, Ref{Cint}, Ref{Cint},\n                 Ref{Cint}, Ref{Cint}, Ref{Cint}, Ref{Cint},\n                 Ref{Cint}, Ref{Cint}, Ref{Cint}, Ref{Cint},\n                 Ref{Cint}, Ref{Cint}),\n                intargs[1], intargs[2], intargs[3], intargs[4],\n                intargs[5], intargs[6], intargs[7], intargs[8],\n                intargs[9], intargs[10], intargs[11], intargs[12],\n                intargs[13], intargs[14]) == intsum\n    @test ccall((:test_long_args_int, libccalltest), Cint,\n                (Cint, Cint, Cint, Cint, Cint, Cint, Cint, Cint,\n                 Cint, Cint, Cint, Cint, Cint, Cint),\n                intargs[1], intargs[2], intargs[3], intargs[4],\n                intargs[5], intargs[6], intargs[7], intargs[8],\n                intargs[9], intargs[10], intargs[11], intargs[12],\n                intargs[13], intargs[14]) == intsum\n    @test ccall((:test_long_args_float, libccalltest), Float32,\n                (Float32, Float32, Float32, Float32, Float32, Float32,\n                 Float32, Float32, Float32, Float32, Float32, Float32,\n                 Float32, Float32),\n                floatargs[1], floatargs[2], floatargs[3], floatargs[4],\n                floatargs[5], floatargs[6], floatargs[7], floatargs[8],\n                floatargs[9], floatargs[10], floatargs[11], floatargs[12],\n                floatargs[13], floatargs[14]) \u2248 float32sum\n    @test ccall((:test_long_args_double, libccalltest), Float64,\n                (Float64, Float64, Float64, Float64, Float64, Float64,\n                 Float64, Float64, Float64, Float64, Float64, Float64,\n                 Float64, Float64),\n                floatargs[1], floatargs[2], floatargs[3], floatargs[4],\n                floatargs[5], floatargs[6], floatargs[7], floatargs[8],\n                floatargs[9], floatargs[10], floatargs[11], floatargs[12],\n                floatargs[13], floatargs[14]) \u2248 float64sum\n\n    @test_spill_n 1 int32args float32args\n    @test_spill_n 2 int32args float32args\n    @test_spill_n 3 int32args float32args\n    @test_spill_n 4 int32args float32args\n    @test_spill_n 5 int32args float32args\n    @test_spill_n 6 int32args float32args\n    @test_spill_n 7 int32args float32args\n    @test_spill_n 8 int32args float32args\n    @test_spill_n 9 int32args float32args\n    @test_spill_n 10 int32args float32args\nend\n\n# issue #20835\n@test_throws ErrorException eval(:(f20835(x) = ccall(:fn, Void, (Ptr{typeof(x)},), x)))\n@test_throws UndefVarError  eval(:(f20835(x) = ccall(:fn, Something_not_defined_20835, (Ptr{typeof(x)},), x)))\n\n@noinline f21104at(::Type{T}) where {T} = ccall(:fn, Void, (Nullable{T},), 0)\n@noinline f21104rt(::Type{T}) where {T} = ccall(:fn, Nullable{T}, ())\n@test code_llvm(DevNull, f21104at, (Type{Float64},)) === nothing\n@test code_llvm(DevNull, f21104rt, (Type{Float64},)) === nothing\n@test try\n          f21104at(Float64)\n          \"unreachable\"\n      catch ex\n          (ex::ErrorException).msg\n      end == \"ccall: the type of argument 1 doesn't correspond to a C type\"\n@test try\n          f21104rt(Float64)\n          \"unreachable\"\n      catch ex\n          (ex::ErrorException).msg\n      end == \"ccall: return type doesn't correspond to a C type\"\n\n\n# cfunction on non-function singleton\nstruct CallableSingleton\nend\n(::CallableSingleton)(x, y) = x + y\n@test ccall(cfunction(CallableSingleton(), Int, Tuple{Int,Int}),\n            Int, (Int, Int), 1, 2) === 3\n\n# 19805\nmutable struct callinfos_19805{FUNC_FT<:Function}\n    f :: FUNC_FT\nend\n\nevalf_callback_19805{FUNC_FT}(ci::callinfos_19805{FUNC_FT}) = ci.f(0.5)::Float64\n\nevalf_callback_c_19805{FUNC_FT}(ci::callinfos_19805{FUNC_FT}) = cfunction(\n    evalf_callback_19805, Float64, (callinfos_19805{FUNC_FT},))\n\n@test_throws ErrorException evalf_callback_c_19805( callinfos_19805(sin) )\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/patches/compiler_rt-3.9-glibc_2.25.90.patch": "From 8a5e425a68de4d2c80ff00a97bbcb3722a4716da Mon Sep 17 00:00:00 2001\nFrom: Kostya Serebryany <kcc@google.com>\nDate: Thu, 13 Jul 2017 21:59:01 +0000\nSubject: [PATCH] Fix sanitizer build against latest glibc\n\nSummary:\nlibsanitizer doesn't build against latest glibc anymore, see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81066 for details.\nOne of the changes is that stack_t changed from typedef struct sigaltstack { ... } stack_t; to typedef struct { ... } stack_t; for conformance reasons.\nAnd the other change is that the glibc internal __need_res_state macro is now ignored, so when doing\n```\n#define __need_res_state\n#include <resolv.h>\n```\nthe effect is now the same as just\n```\n#include <resolv.h>\n```\nand thus one doesn't get just the\n```\nstruct __res_state { ... };\n```\ndefinition, but newly also the\n```\nextern struct __res_state *__res_state(void) __attribute__ ((__const__));\n```\nprototype.  So __res_state is no longer a type, but a function.\n\nReviewers: kcc, ygribov\n\nReviewed By: kcc\n\nSubscribers: kubamracek\n\nDifferential Revision: https://reviews.llvm.org/D35246\n\ngit-svn-id: https://llvm.org/svn/llvm-project/compiler-rt/trunk@307969 91177308-0d34-0410-b5e6-96231b3b80d8\n---\n lib/sanitizer_common/sanitizer_linux.cc                      | 3 +--\n lib/sanitizer_common/sanitizer_linux.h                       | 4 +---\n lib/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc | 2 +-\n lib/tsan/rtl/tsan_platform_linux.cc                          | 2 +-\n 4 files changed, 4 insertions(+), 7 deletions(-)\n\ndiff --git a/projects/compiler-rt/lib/sanitizer_common/sanitizer_linux.cc b/projects/compiler-rt/lib/sanitizer_common/sanitizer_linux.cc\nindex a79a2a155..8c3c1e5d6 100644\n--- a/projects/compiler-rt/lib/sanitizer_common/sanitizer_linux.cc\n+++ b/projects/compiler-rt/lib/sanitizer_common/sanitizer_linux.cc\n@@ -629,8 +629,7 @@ uptr internal_prctl(int option, uptr arg2, uptr arg3, uptr arg4, uptr arg5) {\n }\n #endif\n \n-uptr internal_sigaltstack(const struct sigaltstack *ss,\n-                         struct sigaltstack *oss) {\n+uptr internal_sigaltstack(const void *ss, void *oss) {\n   return internal_syscall(SYSCALL(sigaltstack), (uptr)ss, (uptr)oss);\n }\n \ndiff --git a/projects/compiler-rt/lib/sanitizer_common/sanitizer_linux.h b/projects/compiler-rt/lib/sanitizer_common/sanitizer_linux.h\nindex ee336f7dd..11cad6b80 100644\n--- a/projects/compiler-rt/lib/sanitizer_common/sanitizer_linux.h\n+++ b/projects/compiler-rt/lib/sanitizer_common/sanitizer_linux.h\n@@ -21,7 +21,6 @@\n #include \"sanitizer_platform_limits_posix.h\"\n \n struct link_map;  // Opaque type returned by dlopen().\n-struct sigaltstack;\n \n namespace __sanitizer {\n // Dirent structure for getdents(). Note that this structure is different from\n@@ -30,8 +29,7 @@ struct linux_dirent;\n \n // Syscall wrappers.\n uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count);\n-uptr internal_sigaltstack(const struct sigaltstack* ss,\n-                          struct sigaltstack* oss);\n+uptr internal_sigaltstack(const void* ss, void* oss);\n uptr internal_sigprocmask(int how, __sanitizer_sigset_t *set,\n     __sanitizer_sigset_t *oldset);\n \ndiff --git a/projects/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc b/projects/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc\nindex 03f73ae88..d7fa5f645 100644\n--- a/projects/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc\n+++ b/projects/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc\n@@ -287,7 +287,7 @@ static int TracerThread(void* argument) {\n \n   // Alternate stack for signal handling.\n   InternalScopedBuffer<char> handler_stack_memory(kHandlerStackSize);\n-  struct sigaltstack handler_stack;\n+  stack_t handler_stack;\n   internal_memset(&handler_stack, 0, sizeof(handler_stack));\n   handler_stack.ss_sp = handler_stack_memory.data();\n   handler_stack.ss_size = kHandlerStackSize;\ndiff --git a/projects/compiler-rt/lib/tsan/rtl/tsan_platform_linux.cc b/projects/compiler-rt/lib/tsan/rtl/tsan_platform_linux.cc\nindex 0ba01babe..ead1e5704 100644\n--- a/projects/compiler-rt/lib/tsan/rtl/tsan_platform_linux.cc\n+++ b/projects/compiler-rt/lib/tsan/rtl/tsan_platform_linux.cc\n@@ -286,7 +286,7 @@ void InitializePlatform() {\n int ExtractResolvFDs(void *state, int *fds, int nfd) {\n #if SANITIZER_LINUX && !SANITIZER_ANDROID\n   int cnt = 0;\n-  __res_state *statp = (__res_state*)state;\n+  struct __res_state *statp = (struct __res_state*)state;\n   for (int i = 0; i < MAXNS && cnt < nfd; i++) {\n     if (statp->_u._ext.nsaddrs[i] && statp->_u._ext.nssocks[i] != -1)\n       fds[cnt++] = statp->_u._ext.nssocks[i];\ndiff --git a/projects/compiler-rt/lib/esan/esan_sideline_linux.cpp b/projects/compiler-rt/lib/esan/esan_sideline_linux.cpp\nindex d04f5909d6a2..bc272dfe49f8 100644\n--- a/projects/compiler-rt/lib/esan/esan_sideline_linux.cpp\n+++ b/projects/compiler-rt/lib/esan/esan_sideline_linux.cpp\n@@ -70,7 +70,7 @@ int SidelineThread::runSideline(void *Arg) {\n \n   // Set up a signal handler on an alternate stack for safety.\n   InternalScopedBuffer<char> StackMap(SigAltStackSize);\n-  struct sigaltstack SigAltStack;\n+  stack_t SigAltStack;\n   SigAltStack.ss_sp = StackMap.data();\n   SigAltStack.ss_size = SigAltStackSize;\n   SigAltStack.ss_flags = 0;\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/contrib/build_sysimg.jl": "#!/usr/bin/env julia\n# This file is a part of Julia. License is MIT: https://julialang.org/license\n\n# Build a system image binary at sysimg_path.dlext. Allow insertion of a userimg via\n# userimg_path.  If sysimg_path.dlext is currently loaded into memory, don't continue\n# unless force is set to true.  Allow targeting of a CPU architecture via cpu_target.\nfunction default_sysimg_path(debug=false)\n    if is_unix()\n        splitext(Libdl.dlpath(debug ? \"sys-debug\" : \"sys\"))[1]\n    else\n        joinpath(dirname(JULIA_HOME), \"lib\", \"julia\", debug ? \"sys-debug\" : \"sys\")\n    end\nend\n\n\"\"\"\n    build_sysimg(sysimg_path=default_sysimg_path(), cpu_target=\"native\", userimg_path=nothing; force=false)\n\nRebuild the system image. Store it in `sysimg_path`, which defaults to a file named `sys.ji`\nthat sits in the same folder as `libjulia.{so,dylib}`, except on Windows where it defaults\nto `JULIA_HOME/../lib/julia/sys.ji`.  Use the cpu instruction set given by `cpu_target`.\nValid CPU targets are the same as for the `-C` option to `julia`, or the `-march` option to\n`gcc`.  Defaults to `native`, which means to use all CPU instructions available on the\ncurrent processor. Include the user image file given by `userimg_path`, which should contain\ndirectives such as `using MyPackage` to include that package in the new system image. New\nsystem image will not replace an older image unless `force` is set to true.\n\"\"\"\nfunction build_sysimg(sysimg_path=nothing, cpu_target=\"native\", userimg_path=nothing; force=false, debug=false)\n    if sysimg_path === nothing\n        sysimg_path = default_sysimg_path(debug)\n    end\n\n    # Quit out if a sysimg is already loaded and is in the same spot as sysimg_path, unless forcing\n    sysimg = Libdl.dlopen_e(\"sys\")\n    if sysimg != C_NULL\n        if !force && Base.samefile(Libdl.dlpath(sysimg), \"$(sysimg_path).$(Libdl.dlext)\")\n            info(\"System image already loaded at $(Libdl.dlpath(sysimg)), set force=true to override.\")\n            return nothing\n        end\n    end\n\n    # Canonicalize userimg_path before we enter the base_dir\n    if userimg_path !== nothing\n        userimg_path = abspath(userimg_path)\n    end\n\n    # Enter base and setup some useful paths\n    base_dir = dirname(Base.find_source_file(\"sysimg.jl\"))\n    cd(base_dir) do\n        julia = joinpath(JULIA_HOME, debug ? \"julia-debug\" : \"julia\")\n        cc = find_system_compiler()\n\n        # Ensure we have write-permissions to wherever we're trying to write to\n        try\n            touch(\"$sysimg_path.ji\")\n        catch\n            err_msg =  \"Unable to modify $sysimg_path.ji, ensure parent directory exists \"\n            err_msg *= \"and is writable; absolute paths work best.)\"\n            error(err_msg)\n        end\n\n        # Copy in userimg.jl if it exists\n        if userimg_path !== nothing\n            if !isfile(userimg_path)\n                error(\"$userimg_path is not found, ensure it is an absolute path.\")\n            end\n            if isfile(\"userimg.jl\")\n                error(\"$base_dir/userimg.jl already exists, delete manually to continue.\")\n            end\n            cp(userimg_path, \"userimg.jl\")\n        end\n        try\n            # Start by building inference.{ji,o}\n            inference_path = joinpath(dirname(sysimg_path), \"inference\")\n            info(\"Building inference.o\")\n            info(\"$julia -C $cpu_target --output-ji $inference_path.ji --output-o $inference_path.o coreimg.jl\")\n            run(`$julia -C $cpu_target --output-ji $inference_path.ji --output-o $inference_path.o coreimg.jl`)\n\n            # Bootstrap off of that to create sys.{ji,o}\n            info(\"Building sys.o\")\n            info(\"$julia -C $cpu_target --output-ji $sysimg_path.ji --output-o $sysimg_path.o -J $inference_path.ji --startup-file=no sysimg.jl\")\n            run(`$julia -C $cpu_target --output-ji $sysimg_path.ji --output-o $sysimg_path.o -J $inference_path.ji --startup-file=no sysimg.jl`)\n\n            if cc !== nothing\n                link_sysimg(sysimg_path, cc, debug)\n            else\n                info(\"System image successfully built at $sysimg_path.ji.\")\n            end\n\n            if !Base.samefile(\"$(default_sysimg_path(debug)).ji\", \"$sysimg_path.ji\")\n                if Base.isfile(\"$sysimg_path.$(Libdl.dlext)\")\n                    info(\"To run Julia with this image loaded, run: `julia -J $sysimg_path.$(Libdl.dlext)`.\")\n                else\n                    info(\"To run Julia with this image loaded, run: `julia -J $sysimg_path.ji`.\")\n                end\n            else\n                info(\"Julia will automatically load this system image at next startup.\")\n            end\n        finally\n            # Cleanup userimg.jl\n            if userimg_path !== nothing && isfile(\"userimg.jl\")\n                rm(\"userimg.jl\")\n            end\n        end\n    end\nend\n\n# Search for a compiler to link sys.o into sys.dl_ext.  Honor LD environment variable.\nfunction find_system_compiler()\n    if haskey(ENV, \"CC\")\n        if !success(`$(ENV[\"CC\"]) -v`)\n            warn(\"Using compiler override $(ENV[\"CC\"]), but unable to run `$(ENV[\"CC\"]) -v`.\")\n        end\n        return ENV[\"CC\"]\n    end\n\n    # On Windows, check to see if WinRPM is installed, and if so, see if gcc is installed\n    if is_windows()\n        try\n            eval(Main, :(using WinRPM))\n            winrpmgcc = joinpath(WinRPM.installdir, \"usr\", \"$(Sys.ARCH)-w64-mingw32\",\n                \"sys-root\", \"mingw\", \"bin\", \"gcc.exe\")\n            if success(`$winrpmgcc --version`)\n                return winrpmgcc\n            else\n                throw()\n            end\n        catch\n            warn(\"Install GCC via `Pkg.add(\\\"WinRPM\\\"); WinRPM.install(\\\"gcc\\\")` to generate sys.dll for faster startup times.\")\n        end\n    end\n\n\n    # See if `cc` exists\n    try\n        if success(`cc -v`)\n            return \"cc\"\n        end\n    end\n\n    warn(\"No supported compiler found; startup times will be longer.\")\nend\n\n# Link sys.o into sys.$(dlext)\nfunction link_sysimg(sysimg_path=nothing, cc=find_system_compiler(), debug=false)\n    if sysimg_path === nothing\n        sysimg_path = default_sysimg_path(debug)\n    end\n    julia_libdir = dirname(Libdl.dlpath(debug ? \"libjulia-debug\" : \"libjulia\"))\n\n    FLAGS = [\"-L$julia_libdir\"]\n\n    push!(FLAGS, \"-shared\")\n    push!(FLAGS, debug ? \"-ljulia-debug\" : \"-ljulia\")\n    if is_windows()\n        push!(FLAGS, \"-lssp\")\n    end\n\n    sysimg_file = \"$sysimg_path.$(Libdl.dlext)\"\n    info(\"Linking sys.$(Libdl.dlext)\")\n    info(\"$cc $(join(FLAGS, ' ')) -o $sysimg_file $sysimg_path.o\")\n    # Windows has difficulties overwriting a file in use so we first link to a temp file\n    if is_windows() && isfile(sysimg_file)\n        if success(pipeline(`$cc $FLAGS -o $sysimg_path.tmp $sysimg_path.o`; stdout=STDOUT, stderr=STDERR))\n            mv(sysimg_file, \"$sysimg_file.old\"; remove_destination=true)\n            mv(\"$sysimg_path.tmp\", sysimg_file; remove_destination=true)\n        end\n    else\n        run(`$cc $FLAGS -o $sysimg_file $sysimg_path.o`)\n    end\n    info(\"System image successfully built at $sysimg_path.$(Libdl.dlext)\")\nend\n\n# When running this file as a script, try to do so with default values.  If arguments are passed\n# in, use them as the arguments to build_sysimg above.\n#\n# Also check whether we are running `genstdlib.jl`, in which case we don't want to build a\n# system image and instead only need `build_sysimg`'s docstring to be available.\nif !isdefined(Main, :GenStdLib) && !isinteractive()\n    if length(ARGS) > 5 || (\"--help\" in ARGS || \"-h\" in ARGS)\n        println(\"Usage: build_sysimg.jl <sysimg_path> <cpu_target> <usrimg_path.jl> [--force] [--debug] [--help]\")\n        println(\"   <sysimg_path>    is an absolute, extensionless path to store the system image at\")\n        println(\"   <cpu_target>     is an LLVM cpu target to build the system image against\")\n        println(\"   <usrimg_path.jl> is the path to a user image to be baked into the system image\")\n        println(\"   --debug          Using julia-debug instead of julia to build the system image\")\n        println(\"   --force          Set if you wish to overwrite the default system image\")\n        println(\"   --help           Print out this help text and exit\")\n        println()\n        println(\" Example:\")\n        println(\"   build_sysimg.jl /usr/local/lib/julia/sys core2 ~/my_usrimg.jl --force\")\n        println()\n        println(\" Running this script with no arguments is equivalent to:\")\n        println(\"   build_sysimg.jl $(default_sysimg_path()) native\")\n        return 0\n    end\n\n    debug_flag = \"--debug\" in ARGS\n    filter!(x -> x != \"--debug\", ARGS)\n    force_flag = \"--force\" in ARGS\n    filter!(x -> x != \"--force\", ARGS)\n    build_sysimg(ARGS...; force=force_flag, debug=debug_flag)\nend\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/src/manual/calling-c-and-fortran-code.md": "# Calling C and Fortran Code\n\nThough most code can be written in Julia, there are many high-quality, mature libraries for numerical\ncomputing already written in C and Fortran. To allow easy use of this existing code, Julia makes\nit simple and efficient to call C and Fortran functions. Julia has a \"no boilerplate\" philosophy:\nfunctions can be called directly from Julia without any \"glue\" code, code generation, or compilation\n-- even from the interactive prompt. This is accomplished just by making an appropriate call with\n[`ccall`](@ref) syntax, which looks like an ordinary function call.\n\nThe code to be called must be available as a shared library. Most C and Fortran libraries ship\ncompiled as shared libraries already, but if you are compiling the code yourself using GCC (or\nClang), you will need to use the `-shared` and `-fPIC` options. The machine instructions generated\nby Julia's JIT are the same as a native C call would be, so the resulting overhead is the same\nas calling a library function from C code. (Non-library function calls in both C and Julia can\nbe inlined and thus may have even less overhead than calls to shared library functions. When both\nlibraries and executables are generated by LLVM, it is possible to perform whole-program optimizations\nthat can even optimize across this boundary, but Julia does not yet support that. In the future,\nhowever, it may do so, yielding even greater performance gains.)\n\nShared libraries and functions are referenced by a tuple of the form `(:function, \"library\")`\nor `(\"function\", \"library\")` where `function` is the C-exported function name. `library` refers\nto the shared library name: shared libraries available in the (platform-specific) load path will\nbe resolved by name, and if necessary a direct path may be specified.\n\nA function name may be used alone in place of the tuple (just `:function` or `\"function\"`). In\nthis case the name is resolved within the current process. This form can be used to call C library\nfunctions, functions in the Julia runtime, or functions in an application linked to Julia.\n\nBy default, Fortran compilers [generate mangled names](https://en.wikipedia.org/wiki/Name_mangling#Fortran)\n(for example, converting function names to lowercase or uppercase, often appending an underscore),\nand so to call a Fortran function via [`ccall`](@ref) you must pass the mangled identifier corresponding\nto the rule followed by your Fortran compiler.  Also, when calling a Fortran function, all inputs\nmust be passed by reference.\n\nFinally, you can use [`ccall`](@ref) to actually generate a call to the library function. Arguments\nto [`ccall`](@ref) are as follows:\n\n1. A `(:function, \"library\")` pair, which must be written as a literal constant,\n\n   OR\n\n   a function pointer (for example, from `dlsym`).\n\n2. Return type (see below for mapping the declared C type to Julia)\n\n     * This argument will be evaluated at compile-time, when the containing method is defined.\n\n3. A tuple of input types. The input types must be written as a literal tuple, not a tuple-valued\n   variable or expression.\n\n     * This argument will be evaluated at compile-time, when the containing method is defined.\n\n4. The following arguments, if any, are the actual argument values passed to the function.\n\nAs a complete but simple example, the following calls the `clock` function from the standard C\nlibrary:\n\n```julia-repl\njulia> t = ccall((:clock, \"libc\"), Int32, ())\n2292761\n\njulia> t\n2292761\n\njulia> typeof(ans)\nInt32\n```\n\n`clock` takes no arguments and returns an [`Int32`](@ref). One common gotcha is that a 1-tuple must be\nwritten with a trailing comma. For example, to call the `getenv` function to get a pointer to\nthe value of an environment variable, one makes a call like this:\n\n```julia-repl\njulia> path = ccall((:getenv, \"libc\"), Cstring, (Cstring,), \"SHELL\")\nCstring(@0x00007fff5fbffc45)\n\njulia> unsafe_string(path)\n\"/bin/bash\"\n```\n\nNote that the argument type tuple must be written as `(Cstring,)`, rather than `(Cstring)`. This\nis because `(Cstring)` is just the expression `Cstring` surrounded by parentheses, rather than\na 1-tuple containing `Cstring`:\n\n```jldoctest\njulia> (Cstring)\nCstring\n\njulia> (Cstring,)\n(Cstring,)\n```\n\nIn practice, especially when providing reusable functionality, one generally wraps [`ccall`](@ref)\nuses in Julia functions that set up arguments and then check for errors in whatever manner the\nC or Fortran function indicates them, propagating to the Julia caller as exceptions. This is especially\nimportant since C and Fortran APIs are notoriously inconsistent about how they indicate error\nconditions. For example, the `getenv` C library function is wrapped in the following Julia function,\nwhich is a simplified version of the actual definition from [`env.jl`](https://github.com/JuliaLang/julia/blob/master/base/env.jl):\n\n```julia\nfunction getenv(var::AbstractString)\n    val = ccall((:getenv, \"libc\"),\n                Cstring, (Cstring,), var)\n    if val == C_NULL\n        error(\"getenv: undefined variable: \", var)\n    end\n    unsafe_string(val)\nend\n```\n\nThe C `getenv` function indicates an error by returning `NULL`, but other standard C functions\nindicate errors in various different ways, including by returning -1, 0, 1 and other special values.\nThis wrapper throws an exception clearly indicating the problem if the caller tries to get a non-existent\nenvironment variable:\n\n```julia-repl\njulia> getenv(\"SHELL\")\n\"/bin/bash\"\n\njulia> getenv(\"FOOBAR\")\ngetenv: undefined variable: FOOBAR\n```\n\nHere is a slightly more complex example that discovers the local machine's hostname:\n\n```julia\nfunction gethostname()\n    hostname = Vector{UInt8}(128)\n    ccall((:gethostname, \"libc\"), Int32,\n          (Ptr{UInt8}, Csize_t),\n          hostname, sizeof(hostname))\n    hostname[end] = 0; # ensure null-termination\n    return unsafe_string(pointer(hostname))\nend\n```\n\nThis example first allocates an array of bytes, then calls the C library function `gethostname`\nto fill the array in with the hostname, takes a pointer to the hostname buffer, and converts the\npointer to a Julia string, assuming that it is a NUL-terminated C string. It is common for C libraries\nto use this pattern of requiring the caller to allocate memory to be passed to the callee and\nfilled in. Allocation of memory from Julia like this is generally accomplished by creating an\nuninitialized array and passing a pointer to its data to the C function. This is why we don't\nuse the `Cstring` type here: as the array is uninitialized, it could contain NUL bytes. Converting\nto a `Cstring` as part of the [`ccall`](@ref) checks for contained NUL bytes and could therefore\nthrow a conversion error.\n\n## Creating C-Compatible Julia Function Pointers\n\nIt is possible to pass Julia functions to native C functions that accept function pointer arguments.\nFor example, to match C prototypes of the form:\n\n```c\ntypedef returntype (*functiontype)(argumenttype,...)\n```\n\nThe function [`cfunction()`](@ref) generates the C-compatible function pointer for a call to a\nJulia library function. Arguments to [`cfunction()`](@ref) are as follows:\n\n1. A Julia Function\n2. Return type\n3. A tuple of input types\n\nA classic example is the standard C library `qsort` function, declared as:\n\n```c\nvoid qsort(void *base, size_t nmemb, size_t size,\n           int(*compare)(const void *a, const void *b));\n```\n\nThe `base` argument is a pointer to an array of length `nmemb`, with elements of `size` bytes\neach. `compare` is a callback function which takes pointers to two elements `a` and `b` and returns\nan integer less/greater than zero if `a` should appear before/after `b` (or zero if any order\nis permitted). Now, suppose that we have a 1d array `A` of values in Julia that we want to sort\nusing the `qsort` function (rather than Julia's built-in `sort` function). Before we worry about\ncalling `qsort` and passing arguments, we need to write a comparison function that works for some\narbitrary type T:\n\n```jldoctest mycompare\njulia> function mycompare(a::T, b::T) where T\n           return convert(Cint, a < b ? -1 : a > b ? +1 : 0)::Cint\n       end\nmycompare (generic function with 1 method)\n```\n\nNotice that we have to be careful about the return type: `qsort` expects a function returning\na C `int`, so we must be sure to return `Cint` via a call to `convert` and a `typeassert`.\n\nIn order to pass this function to C, we obtain its address using the function `cfunction`:\n\n```jldoctest mycompare\njulia> const mycompare_c = cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}));\n```\n\n[`cfunction()`](@ref) accepts three arguments: the Julia function (`mycompare`), the return type\n(`Cint`), and a tuple of the argument types, in this case to sort an array of `Cdouble`\n([`Float64`](@ref)) elements.\n\nThe final call to `qsort` looks like this:\n\n```jldoctest mycompare\njulia> A = [1.3, -2.7, 4.4, 3.1]\n4-element Array{Float64,1}:\n  1.3\n -2.7\n  4.4\n  3.1\n\njulia> ccall(:qsort, Void, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Void}),\n             A, length(A), sizeof(eltype(A)), mycompare_c)\n\njulia> A\n4-element Array{Float64,1}:\n -2.7\n  1.3\n  3.1\n  4.4\n```\n\nAs can be seen, `A` is changed to the sorted array `[-2.7, 1.3, 3.1, 4.4]`. Note that Julia\nknows how to convert an array into a `Ptr{Cdouble}`, how to compute the size of a type in bytes\n(identical to C's `sizeof` operator), and so on. For fun, try inserting a `println(\"mycompare($a,$b)\")`\nline into `mycompare`, which will allow you to see the comparisons that `qsort` is performing\n(and to verify that it is really calling the Julia function that you passed to it).\n\n## Mapping C Types to Julia\n\nIt is critical to exactly match the declared C type with its declaration in Julia. Inconsistencies\ncan cause code that works correctly on one system to fail or produce indeterminate results on\na different system.\n\nNote that no C header files are used anywhere in the process of calling C functions: you are responsible\nfor making sure that your Julia types and call signatures accurately reflect those in the C header\nfile. (The [Clang package](https://github.com/ihnorton/Clang.jl) can be used to auto-generate\nJulia code from a C header file.)\n\n### Auto-conversion:\n\nJulia automatically inserts calls to the [`Base.cconvert()`](@ref) function to convert each argument\nto the specified type. For example, the following call:\n\n```julia\nccall((:foo, \"libfoo\"), Void, (Int32, Float64), x, y)\n```\n\nwill behave as if the following were written:\n\n```julia\nccall((:foo, \"libfoo\"), Void, (Int32, Float64),\n      Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),\n      Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))\n```\n\n[`Base.cconvert()`](@ref) normally just calls [`convert()`](@ref), but can be defined to return an\narbitrary new object more appropriate for passing to C. For example, this is used to convert an\n`Array` of objects (e.g. strings) to an array of pointers.\n\n[`Base.unsafe_convert()`](@ref) handles conversion to `Ptr` types. It is considered unsafe because\nconverting an object to a native pointer can hide the object from the garbage collector, causing\nit to be freed prematurely.\n\n### Type Correspondences:\n\nFirst, a review of some relevant Julia type terminology:\n\n| Syntax / Keyword              | Example                                     | Description                                                                                                                                                                                                                                                                    |\n|:----------------------------- |:------------------------------------------- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `mutable struct`              | `String`                                    | \"Leaf Type\" :: A group of related data that includes a type-tag, is managed by the Julia GC, and is defined by object-identity. The type parameters of a leaf type must be fully defined (no `TypeVars` are allowed) in order for the instance to be constructed.              |\n| `abstract type`               | `Any`, `AbstractArray{T, N}`, `Complex{T}`  | \"Super Type\" :: A super-type (not a leaf-type) that cannot be instantiated, but can be used to describe a group of types.                                                                                                                                                      |\n| `T{A}`                        | `Vector{Int}`                               | \"Type Parameter\" :: A specialization of a type (typically used for dispatch or storage optimization).                                                                                                                                                                          |\n|                               |                                             | \"TypeVar\" :: The `T` in the type parameter declaration is referred to as a TypeVar (short for type variable).                                                                                                                                                                  |\n| `primitive type`              | `Int`, `Float64`                            | \"Primitive Type\" :: A type with no fields, but a size. It is stored and defined by-value.                                                                                                                                                                                           |\n| `struct`                      | `Pair{Int, Int}`                            | \"Struct\" :: A type with all fields defined to be constant. It is defined by-value, and may be stored with a type-tag.                                                                                                                                                       |\n|                               | `Complex128` (`isbits`)                     | \"Is-Bits\"   :: A `primitive type`, or a `struct` type where all fields are other `isbits` types. It is defined by-value, and is stored without a type-tag.                                                                                                                       |\n| `struct ...; end`             | `nothing`                                   | \"Singleton\" :: a Leaf Type or Struct with no fields.                                                                                                                                                                                                                        |\n| `(...)` or `tuple(...)`       | `(1, 2, 3)`                                 | \"Tuple\" :: an immutable data-structure similar to an anonymous struct type, or a constant array. Represented as either an array or a struct.                                                                                                                                |\n\n### Bits Types:\n\nThere are several special types to be aware of, as no other type can be defined to behave the\nsame:\n\n  * `Float32`\n\n    Exactly corresponds to the `float` type in C (or `REAL*4` in Fortran).\n\n  * `Float64`\n\n    Exactly corresponds to the `double` type in C (or `REAL*8` in Fortran).\n\n  * `Complex64`\n\n    Exactly corresponds to the `complex float` type in C (or `COMPLEX*8` in Fortran).\n\n  * `Complex128`\n\n    Exactly corresponds to the `complex double` type in C (or `COMPLEX*16` in Fortran).\n\n  * `Signed`\n\n    Exactly corresponds to the `signed` type annotation in C (or any `INTEGER` type in Fortran).\n    Any Julia type that is not a subtype of [`Signed`](@ref) is assumed to be unsigned.\n\n\n  * `Ref{T}`\n\n    Behaves like a `Ptr{T}` that can manage its memory via the Julia GC.\n\n\n  * `Array{T,N}`\n\n    When an array is passed to C as a `Ptr{T}` argument, it is not reinterpret-cast: Julia requires\n    that the element type of the array matches `T`, and the address of the first element is passed.\n\n    Therefore, if an `Array` contains data in the wrong format, it will have to be explicitly converted\n    using a call such as `trunc(Int32, a)`.\n\n    To pass an array `A` as a pointer of a different type *without* converting the data beforehand\n    (for example, to pass a `Float64` array to a function that operates on uninterpreted bytes), you\n    can declare the argument as `Ptr{Void}`.\n\n    If an array of eltype `Ptr{T}` is passed as a `Ptr{Ptr{T}}` argument, [`Base.cconvert()`](@ref)\n    will attempt to first make a null-terminated copy of the array with each element replaced by its\n    [`Base.cconvert()`](@ref) version. This allows, for example, passing an `argv` pointer array of type\n    `Vector{String}` to an argument of type `Ptr{Ptr{Cchar}}`.\n\nOn all systems we currently support, basic C/C++ value types may be translated to Julia types\nas follows. Every C type also has a corresponding Julia type with the same name, prefixed by C.\nThis can help for writing portable code (and remembering that an `int` in C is not the same as\nan `Int` in Julia).\n\n\n**System Independent:**\n\n| C name                                                  | Fortran name             | Standard Julia Alias | Julia Base Type                                                                                                |\n|:------------------------------------------------------- |:------------------------ |:-------------------- |:-------------------------------------------------------------------------------------------------------------- |\n| `unsigned char`                                         | `CHARACTER`              | `Cuchar`             | `UInt8`                                                                                                        |\n| `bool` (only in C++)                                    |                          | `Cuchar`             | `UInt8`                                                                                                        |\n| `short`                                                 | `INTEGER*2`, `LOGICAL*2` | `Cshort`             | `Int16`                                                                                                        |\n| `unsigned short`                                        | \u00a0                        | `Cushort`            | `UInt16`                                                                                                       |\n| `int`, `BOOL` (C, typical)                              | `INTEGER*4`, `LOGICAL*4` | `Cint`               | `Int32`                                                                                                        |\n| `unsigned int`                                          | \u00a0                        | `Cuint`              | `UInt32`                                                                                                       |\n| `long long`                                             | `INTEGER*8`, `LOGICAL*8` | `Clonglong`          | `Int64`                                                                                                        |\n| `unsigned long long`                                    | \u00a0                        | `Culonglong`         | `UInt64`                                                                                                       |\n| `intmax_t`                                              | \u00a0                        | `Cintmax_t`          | `Int64`                                                                                                        |\n| `uintmax_t`                                             | \u00a0                        | `Cuintmax_t`         | `UInt64`                                                                                                       |\n| `float`                                                 | `REAL*4i`                | `Cfloat`             | `Float32`                                                                                                      |\n| `double`                                                | `REAL*8`                 | `Cdouble`            | `Float64`                                                                                                      |\n| `complex float`                                         | `COMPLEX*8`              | `Complex64`          | `Complex{Float32}`                                                                                             |\n| `complex double`                                        | `COMPLEX*16`             | `Complex128`         | `Complex{Float64}`                                                                                             |\n| `ptrdiff_t`                                             | \u00a0                        | `Cptrdiff_t`         | `Int`                                                                                                          |\n| `ssize_t`                                               | \u00a0                        | `Cssize_t`           | `Int`                                                                                                          |\n| `size_t`                                                | \u00a0                        | `Csize_t`            | `UInt`                                                                                                         |\n| `void`                                                  | \u00a0                        | \u00a0                    | `Void`                                                                                                         |\n| `void` and `[[noreturn]]` or `_Noreturn`                | \u00a0                        | \u00a0                    | `Union{}`                                                                                                      |\n| `void*`                                                 | \u00a0                        | \u00a0                    | `Ptr{Void}`                                                                                                    |\n| `T*` (where T represents an appropriately defined type) | \u00a0                        | \u00a0                    | `Ref{T}`                                                                                                       |\n| `char*` (or `char[]`, e.g. a string)                    | `CHARACTER*N`            | \u00a0                    | `Cstring` if NUL-terminated, or `Ptr{UInt8}` if not                                                            |\n| `char**` (or `*char[]`)                                 | \u00a0                        | \u00a0                    | `Ptr{Ptr{UInt8}}`                                                                                              |\n| `jl_value_t*` (any Julia Type)                          | \u00a0                        | \u00a0                    | `Any`                                                                                                          |\n| `jl_value_t**` (a reference to a Julia Type)            | \u00a0                        | \u00a0                    | `Ref{Any}`                                                                                                     |\n| `va_arg`                                                | \u00a0                        | \u00a0                    | Not supported                                                                                                  |\n| `...` (variadic function specification)                 | \u00a0                        | \u00a0                    | `T...` (where `T` is one of the above types, variadic functions of different argument types are not supported) |\n\nThe `Cstring` type is essentially a synonym for `Ptr{UInt8}`, except the conversion to `Cstring`\nthrows an error if the Julia string contains any embedded NUL characters (which would cause the\nstring to be silently truncated if the C routine treats NUL as the terminator).  If you are passing\na `char*` to a C routine that does not assume NUL termination (e.g. because you pass an explicit\nstring length), or if you know for certain that your Julia string does not contain NUL and want\nto skip the check, you can use `Ptr{UInt8}` as the argument type. `Cstring` can also be used as\nthe [`ccall`](@ref) return type, but in that case it obviously does not introduce any extra\nchecks and is only meant to improve readability of the call.\n\n**System-dependent:**\n\n| C name          | Standard Julia Alias | Julia Base Type                              |\n|:--------------- |:-------------------- |:-------------------------------------------- |\n| `char`          | `Cchar`              | `Int8` (x86, x86_64), `UInt8` (powerpc, arm) |\n| `long`          | `Clong`              | `Int` (UNIX), `Int32` (Windows)              |\n| `unsigned long` | `Culong`             | `UInt` (UNIX), `UInt32` (Windows)            |\n| `wchar_t`       | `Cwchar_t`           | `Int32` (UNIX), `UInt16` (Windows)           |\n\n!!! note\n    When calling a Fortran function, all inputs must be passed by reference, so all type correspondences\n    above should contain an additional `Ptr{..}` or `Ref{..}` wrapper around their type specification.\n\n!!! warning\n    For string arguments (`char*`) the Julia type should be `Cstring` (if NUL- terminated data is\n    expected) or either `Ptr{Cchar}` or `Ptr{UInt8}` otherwise (these two pointer types have the same\n    effect), as described above, not `String`. Similarly, for array arguments (`T[]` or `T*`), the\n    Julia type should again be `Ptr{T}`, not `Vector{T}`.\n\n!!! warning\n    Julia's `Char` type is 32 bits, which is not the same as the wide character type (`wchar_t` or\n    `wint_t`) on all platforms.\n\n!!! warning\n    A return type of `Union{}` means the function will not return i.e. C++11 `[[noreturn]]` or C11\n    `_Noreturn` (e.g. `jl_throw` or `longjmp`). Do not use this for functions that return no value\n    (`void`) but do return, use `Void` instead.\n\n!!! note\n    For `wchar_t*` arguments, the Julia type should be `Cwstring` (if the C routine expects a NUL-terminated\n    string) or `Ptr{Cwchar_t}` otherwise. Note also that UTF-8 string data in Julia is internally\n    NUL-terminated, so it can be passed to C functions expecting NUL-terminated data without making\n    a copy (but using the `Cwstring` type will cause an error to be thrown if the string itself contains\n    NUL characters).\n\n!!! note\n    C functions that take an argument of the type `char**` can be called by using a `Ptr{Ptr{UInt8}}`\n    type within Julia. For example, C functions of the form:\n\n    ```c\n    int main(int argc, char **argv);\n    ```\n\n    can be called via the following Julia code:\n\n    ```julia\n    argv = [ \"a.out\", \"arg1\", \"arg2\" ]\n    ccall(:main, Int32, (Int32, Ptr{Ptr{UInt8}}), length(argv), argv)\n    ```\n\n!!! note\n    A C function declared to return `Void` will return the value `nothing` in Julia.\n\n### Struct Type correspondences\n\nComposite types, aka `struct` in C or `TYPE` in Fortran90 (or `STRUCTURE` / `RECORD` in some variants\nof F77), can be mirrored in Julia by creating a `struct` definition with the same\nfield layout.\n\nWhen used recursively, `isbits` types are stored inline. All other types are stored as a pointer\nto the data. When mirroring a struct used by-value inside another struct in C, it is imperative\nthat you do not attempt to manually copy the fields over, as this will not preserve the correct\nfield alignment. Instead, declare an `isbits` struct type and use that instead. Unnamed structs\nare not possible in the translation to Julia.\n\nPacked structs and union declarations are not supported by Julia.\n\nYou can get a near approximation of a `union` if you know, a priori, the field that will have\nthe greatest size (potentially including padding). When translating your fields to Julia, declare\nthe Julia field to be only of that type.\n\nArrays of parameters can be expressed with `NTuple`:\n\n```\nin C:\nstruct B {\n    int A[3];\n};\nb_a_2 = B.A[2];\n\nin Julia:\nstruct B\n    A::NTuple{3, CInt}\nend\nb_a_2 = B.A[3]  # note the difference in indexing (1-based in Julia, 0-based in C)\n```\n\nArrays of unknown size (C99-compliant variable length structs specified by `[]` or `[0]`) are not directly supported.\nOften the best way to deal with these is to deal with the byte offsets directly.\nFor example, if a C library declared a proper string type and returned a pointer to it:\n\n```c\nstruct String {\n    int strlen;\n    char data[];\n};\n```\n\nIn Julia, we can access the parts independently to make a copy of that string:\n\n```julia\nstr = from_c::Ptr{Void}\nlen = unsafe_load(Ptr{Cint}(str))\nunsafe_string(str + Core.sizeof(Cint), len)\n```\n\n### Type Parameters\n\nThe type arguments to `ccall` are evaluated statically, when the method containing the ccall is defined.\nThey therefore must take the form of a literal tuple, not a variable, and cannot reference local variables.\n\nThis may sound like a strange restriction,\nbut remember that since C is not a dynamic language like Julia,\nits functions can only accept argument types with a statically-known, fixed signature.\n\nHowever, while the type layout must be known statically to compute the `ccall` ABI,\nthe static parameters of the function are considered to be part of this static environment.\nThe static parameters of the function may be used as type parameters in the `ccall` signature,\nas long as they don't affect the layout of the type.\nFor example, `f(x::T) where {T} = ccall(:valid, Ptr{T}, (Ptr{T},), x)`\nis valid, since `Ptr` is always a word-size primitive type.\nBut, `g(x::T) where {T} = ccall(:notvalid, T, (T,), x)`\nis not valid, since the type layout of `T` is not known statically.\n\n### SIMD Values\n\nNote: This feature is currently implemented on 64-bit x86 and AArch64 platforms only.\n\nIf a C/C++ routine has an argument or return value that is a native SIMD type, the corresponding\nJulia type is a homogeneous tuple of `VecElement` that naturally maps to the SIMD type.  Specifically:\n\n>   * The tuple must be the same size as the SIMD type. For example, a tuple representing an `__m128`\n>     on x86 must have a size of 16 bytes.\n>   * The element type of the tuple must be an instance of `VecElement{T}` where `T` is a primitive type that\n>     is 1, 2, 4 or 8 bytes.\n\nFor instance, consider this C routine that uses AVX intrinsics:\n\n```c\n#include <immintrin.h>\n\n__m256 dist( __m256 a, __m256 b ) {\n    return _mm256_sqrt_ps(_mm256_add_ps(_mm256_mul_ps(a, a),\n                                        _mm256_mul_ps(b, b)));\n}\n```\n\nThe following Julia code calls `dist` using `ccall`:\n\n```julia\nconst m256 = NTuple{8, VecElement{Float32}}\n\na = m256(ntuple(i -> VecElement(sin(Float32(i))), 8))\nb = m256(ntuple(i -> VecElement(cos(Float32(i))), 8))\n\nfunction call_dist(a::m256, b::m256)\n    ccall((:dist, \"libdist\"), m256, (m256, m256), a, b)\nend\n\nprintln(call_dist(a,b))\n```\n\nThe host machine must have the requisite SIMD registers.  For example, the code above will not\nwork on hosts without AVX support.\n\n### Memory Ownership\n\n**malloc/free**\n\nMemory allocation and deallocation of such objects must be handled by calls to the appropriate\ncleanup routines in the libraries being used, just like in any C program. Do not try to free an\nobject received from a C library with `Libc.free` in Julia, as this may result in the `free` function\nbeing called via the wrong `libc` library and cause Julia to crash. The reverse (passing an object\nallocated in Julia to be freed by an external library) is equally invalid.\n\n### When to use T, Ptr{T} and Ref{T}\n\nIn Julia code wrapping calls to external C routines, ordinary (non-pointer) data should be declared\nto be of type `T` inside the [`ccall`](@ref), as they are passed by value.  For C code accepting\npointers, `Ref{T}` should generally be used for the types of input arguments, allowing the use\nof pointers to memory managed by either Julia or C through the implicit call to [`Base.cconvert()`](@ref).\n In contrast, pointers returned by the C function called should be declared to be of output type\n`Ptr{T}`, reflecting that the memory pointed to is managed by C only. Pointers contained in C\nstructs should be represented as fields of type `Ptr{T}` within the corresponding Julia struct\ntypes designed to mimic the internal structure of corresponding C structs.\n\nIn Julia code wrapping calls to external Fortran routines, all input arguments should be declared\nas of type `Ref{T}`, as Fortran passes all variables by reference. The return type should either\nbe `Void` for Fortran subroutines, or a `T` for Fortran functions returning the type `T`.\n\n## Mapping C Functions to Julia\n\n### `ccall`/`cfunction` argument translation guide\n\nFor translating a C argument list to Julia:\n\n  * `T`, where `T` is one of the primitive types: `char`, `int`, `long`, `short`, `float`, `double`,\n    `complex`, `enum` or any of their `typedef` equivalents\n\n      * `T`, where `T` is an equivalent Julia Bits Type (per the table above)\n      * if `T` is an `enum`, the argument type should be equivalent to `Cint` or `Cuint`\n      * argument value will be copied (passed by value)\n  * `struct T` (including typedef to a struct)\n\n      * `T`, where `T` is a Julia leaf type\n      * argument value will be copied (passed by value)\n  * `void*`\n\n      * depends on how this parameter is used, first translate this to the intended pointer type, then\n        determine the Julia equivalent using the remaining rules in this list\n      * this argument may be declared as `Ptr{Void}`, if it really is just an unknown pointer\n  * `jl_value_t*`\n\n      * `Any`\n      * argument value must be a valid Julia object\n      * currently unsupported by [`cfunction()`](@ref)\n  * `jl_value_t**`\n\n      * `Ref{Any}`\n      * argument value must be a valid Julia object (or `C_NULL`)\n      * currently unsupported by [`cfunction()`](@ref)\n  * `T*`\n\n      * `Ref{T}`, where `T` is the Julia type corresponding to `T`\n      * argument value will be copied if it is an `isbits` type otherwise, the value must be a valid Julia\n        object\n  * `(T*)(...)` (e.g. a pointer to a function)\n\n      * `Ptr{Void}` (you may need to use [`cfunction()`](@ref) explicitly to create this pointer)\n  * `...` (e.g. a vararg)\n\n      * `T...`, where `T` is the Julia type\n  * `va_arg`\n\n      * not supported\n\n### `ccall`/`cfunction` return type translation guide\n\nFor translating a C return type to Julia:\n\n  * `void`\n\n      * `Void` (this will return the singleton instance `nothing::Void`)\n  * `T`, where `T` is one of the primitive types: `char`, `int`, `long`, `short`, `float`, `double`,\n    `complex`, `enum` or any of their `typedef` equivalents\n\n      * `T`, where `T` is an equivalent Julia Bits Type (per the table above)\n      * if `T` is an `enum`, the argument type should be equivalent to `Cint` or `Cuint`\n      * argument value will be copied (returned by-value)\n  * `struct T` (including typedef to a struct)\n\n      * `T`, where `T` is a Julia Leaf Type\n      * argument value will be copied (returned by-value)\n  * `void*`\n\n      * depends on how this parameter is used, first translate this to the intended pointer type, then\n        determine the Julia equivalent using the remaining rules in this list\n      * this argument may be declared as `Ptr{Void}`, if it really is just an unknown pointer\n  * `jl_value_t*`\n\n      * `Any`\n      * argument value must be a valid Julia object\n  * `jl_value_t**`\n\n      * `Ref{Any}`\n      * argument value must be a valid Julia object (or `C_NULL`)\n  * `T*`\n\n      * If the memory is already owned by Julia, or is an `isbits` type, and is known to be non-null:\n\n          * `Ref{T}`, where `T` is the Julia type corresponding to `T`\n          * a return type of `Ref{Any}` is invalid, it should either be `Any` (corresponding to `jl_value_t*`)\n            or `Ptr{Any}` (corresponding to `Ptr{Any}`)\n          * C **MUST NOT** modify the memory returned via `Ref{T}` if `T` is an `isbits` type\n      * If the memory is owned by C:\n\n          * `Ptr{T}`, where `T` is the Julia type corresponding to `T`\n  * `(T*)(...)` (e.g. a pointer to a function)\n\n      * `Ptr{Void}` (you may need to use [`cfunction()`](@ref) explicitly to create this pointer)\n\n### Passing Pointers for Modifying Inputs\n\nBecause C doesn't support multiple return values, often C functions will take pointers to data\nthat the function will modify. To accomplish this within a [`ccall`](@ref), you need to first\nencapsulate the value inside an `Ref{T}` of the appropriate type. When you pass this `Ref` object\nas an argument, Julia will automatically pass a C pointer to the encapsulated data:\n\n```julia\nwidth = Ref{Cint}(0)\nrange = Ref{Cfloat}(0)\nccall(:foo, Void, (Ref{Cint}, Ref{Cfloat}), width, range)\n```\n\nUpon return, the contents of `width` and `range` can be retrieved (if they were changed by `foo`)\nby `width[]` and `range[]`; that is, they act like zero-dimensional arrays.\n\n### Special Reference Syntax for ccall (deprecated):\n\nThe `&` syntax is deprecated, use the `Ref{T}` argument type instead.\n\nA prefix `&` is used on an argument to [`ccall`](@ref) to indicate that a pointer to a scalar\nargument should be passed instead of the scalar value itself (required for all Fortran function\narguments, as noted above). The following example computes a dot product using a BLAS function.\n\n```julia\nfunction compute_dot(DX::Vector{Float64}, DY::Vector{Float64})\n    @assert length(DX) == length(DY)\n    n = length(DX)\n    incx = incy = 1\n    product = ccall((:ddot_, \"libLAPACK\"),\n                    Float64,\n                    (Ptr{Int32}, Ptr{Float64}, Ptr{Int32}, Ptr{Float64}, Ptr{Int32}),\n                    &n, DX, &incx, DY, &incy)\n    return product\nend\n```\n\nThe meaning of prefix `&` is not quite the same as in C. In particular, any changes to the referenced\nvariables will not be visible in Julia unless the type is mutable (declared via `type`). However,\neven for immutable structs it will not cause any harm for called functions to attempt such modifications\n(that is, writing through the passed pointers). Moreover, `&` may be used with any expression,\nsuch as `&0` or `&f(x)`.\n\nWhen a scalar value is passed with `&` as an argument of type `Ptr{T}`, the value will first be\nconverted to type `T`.\n\n## Some Examples of C Wrappers\n\nHere is a simple example of a C wrapper that returns a `Ptr` type:\n\n```julia\nmutable struct gsl_permutation\nend\n\n# The corresponding C signature is\n#     gsl_permutation * gsl_permutation_alloc (size_t n);\nfunction permutation_alloc(n::Integer)\n    output_ptr = ccall(\n        (:gsl_permutation_alloc, :libgsl), # name of C function and library\n        Ptr{gsl_permutation},              # output type\n        (Csize_t,),                        # tuple of input types\n        n                                  # name of Julia variable to pass in\n    )\n    if output_ptr == C_NULL # Could not allocate memory\n        throw(OutOfMemoryError())\n    end\n    return output_ptr\nend\n```\n\nThe [GNU Scientific Library](https://www.gnu.org/software/gsl/) (here assumed to be accessible\nthrough `:libgsl`) defines an opaque pointer, `gsl_permutation *`, as the return type of the C\nfunction `gsl_permutation_alloc()`. As user code never has to look inside the `gsl_permutation`\nstruct, the corresponding Julia wrapper simply needs a new type declaration, `gsl_permutation`,\nthat has no internal fields and whose sole purpose is to be placed in the type parameter of a\n`Ptr` type.  The return type of the [`ccall`](@ref) is declared as `Ptr{gsl_permutation}`, since\nthe memory allocated and pointed to by `output_ptr` is controlled by C (and not Julia).\n\nThe input `n` is passed by value, and so the function's input signature is simply declared as\n`(Csize_t,)` without any `Ref` or `Ptr` necessary. (If the wrapper was calling a Fortran function\ninstead, the corresponding function input signature should instead be `(Ref{Csize_t},)`, since\nFortran variables are passed by reference.) Furthermore, `n` can be any type that is convertable\nto a `Csize_t` integer; the [`ccall`](@ref) implicitly calls [`Base.cconvert(Csize_t, n)`](@ref).\n\nHere is a second example wrapping the corresponding destructor:\n\n```julia\n# The corresponding C signature is\n#     void gsl_permutation_free (gsl_permutation * p);\nfunction permutation_free(p::Ref{gsl_permutation})\n    ccall(\n        (:gsl_permutation_free, :libgsl), # name of C function and library\n        Void,                             # output type\n        (Ref{gsl_permutation},),          # tuple of input types\n        p                                 # name of Julia variable to pass in\n    )\nend\n```\n\nHere, the input `p` is declared to be of type `Ref{gsl_permutation}`, meaning that the memory\nthat `p` points to may be managed by Julia or by C. A pointer to memory allocated by C should\nbe of type `Ptr{gsl_permutation}`, but it is convertable using [`Base.cconvert()`](@ref) and therefore\ncan be used in the same (covariant) context of the input argument to a [`ccall`](@ref). A pointer\nto memory allocated by Julia must be of type `Ref{gsl_permutation}`, to ensure that the memory\naddress pointed to is valid and that Julia's garbage collector manages the chunk of memory pointed\nto correctly. Therefore, the `Ref{gsl_permutation}` declaration allows pointers managed by C or\nJulia to be used.\n\nIf the C wrapper never expects the user to pass pointers to memory managed by Julia, then using\n`p::Ptr{gsl_permutation}` for the method signature of the wrapper and similarly in the [`ccall`](@ref)\nis also acceptable.\n\nHere is a third example passing Julia arrays:\n\n```julia\n# The corresponding C signature is\n#    int gsl_sf_bessel_Jn_array (int nmin, int nmax, double x,\n#                                double result_array[])\nfunction sf_bessel_Jn_array(nmin::Integer, nmax::Integer, x::Real)\n    if nmax < nmin\n        throw(DomainError())\n    end\n    result_array = Vector{Cdouble}(nmax - nmin + 1)\n    errorcode = ccall(\n        (:gsl_sf_bessel_Jn_array, :libgsl), # name of C function and library\n        Cint,                               # output type\n        (Cint, Cint, Cdouble, Ref{Cdouble}),# tuple of input types\n        nmin, nmax, x, result_array         # names of Julia variables to pass in\n    )\n    if errorcode != 0\n        error(\"GSL error code $errorcode\")\n    end\n    return result_array\nend\n```\n\nThe C function wrapped returns an integer error code; the results of the actual evaluation of\nthe Bessel J function populate the Julia array `result_array`. This variable can only be used\nwith corresponding input type declaration `Ref{Cdouble}`, since its memory is allocated and managed\nby Julia, not C. The implicit call to [`Base.cconvert(Ref{Cdouble}, result_array)`](@ref) unpacks\nthe Julia pointer to a Julia array data structure into a form understandable by C.\n\nNote that for this code to work correctly, `result_array` must be declared to be of type `Ref{Cdouble}`\nand not `Ptr{Cdouble}`. The memory is managed by Julia and the `Ref` signature alerts Julia's\ngarbage collector to keep managing the memory for `result_array` while the [`ccall`](@ref) executes.\nIf `Ptr{Cdouble}` were used instead, the [`ccall`](@ref) may still work, but Julia's garbage\ncollector would not be aware that the memory declared for `result_array` is being used by the\nexternal C function. As a result, the code may produce a memory leak if `result_array` never gets\nfreed by the garbage collector, or if the garbage collector prematurely frees `result_array`,\nthe C function may end up throwing an invalid memory access exception.\n\n## Garbage Collection Safety\n\nWhen passing data to a [`ccall`](@ref), it is best to avoid using the [`pointer()`](@ref) function.\nInstead define a convert method and pass the variables directly to the [`ccall`](@ref). [`ccall`](@ref)\nautomatically arranges that all of its arguments will be preserved from garbage collection until\nthe call returns. If a C API will store a reference to memory allocated by Julia, after the [`ccall`](@ref)\nreturns, you must arrange that the object remains visible to the garbage collector. The suggested\nway to handle this is to make a global variable of type `Array{Ref,1}` to hold these values, until\nthe C library notifies you that it is finished with them.\n\nWhenever you have created a pointer to Julia data, you must ensure the original data exists until\nyou are done with using the pointer. Many methods in Julia such as [`unsafe_load()`](@ref) and\n[`String()`](@ref) make copies of data instead of taking ownership of the buffer, so that it is\nsafe to free (or alter) the original data without affecting Julia. A notable exception is [`unsafe_wrap()`](@ref)\nwhich, for performance reasons, shares (or can be told to take ownership of) the underlying buffer.\n\nThe garbage collector does not guarantee any order of finalization. That is, if `a` contained\na reference to `b` and both `a` and `b` are due for garbage collection, there is no guarantee\nthat `b` would be finalized after `a`. If proper finalization of `a` depends on `b` being valid,\nit must be handled in other ways.\n\n## Non-constant Function Specifications\n\nA `(name, library)` function specification must be a constant expression. However, it is possible\nto use computed values as function names by staging through `eval` as follows:\n\n```\n@eval ccall(($(string(\"a\", \"b\")), \"lib\"), ...\n```\n\nThis expression constructs a name using `string`, then substitutes this name into a new [`ccall`](@ref)\nexpression, which is then evaluated. Keep in mind that `eval` only operates at the top level,\nso within this expression local variables will not be available (unless their values are substituted\nwith `$`). For this reason, `eval` is typically only used to form top-level definitions, for example\nwhen wrapping libraries that contain many similar functions.\n\nIf your usage is more dynamic, use indirect calls as described in the next section.\n\n## Indirect Calls\n\nThe first argument to [`ccall`](@ref) can also be an expression evaluated at run time. In this\ncase, the expression must evaluate to a `Ptr`, which will be used as the address of the native\nfunction to call. This behavior occurs when the first [`ccall`](@ref) argument contains references\nto non-constants, such as local variables, function arguments, or non-constant globals.\n\nFor example, you might look up the function via `dlsym`, then cache it in a global\nvariable for that session. For example:\n\n```julia\nmacro dlsym(func, lib)\n    z, zlocal = gensym(string(func)), gensym()\n    eval(current_module(), :(global $z = C_NULL))\n    z = esc(z)\n    quote\n        let $zlocal::Ptr{Void} = $z::Ptr{Void}\n            if $zlocal == C_NULL\n                $zlocal = dlsym($(esc(lib))::Ptr{Void}, $(esc(func)))\n                global $z = $zlocal\n            end\n            $zlocal\n        end\n    end\nend\n\nmylibvar = Libdl.dlopen(\"mylib\")\nccall(@dlsym(\"myfunc\", mylibvar), Void, ())\n```\n\n## Calling Convention\n\nThe second argument to [`ccall`](@ref) can optionally be a calling convention specifier (immediately\npreceding return type). Without any specifier, the platform-default C calling convention is used.\nOther supported conventions are: `stdcall`, `cdecl`, `fastcall`, and `thiscall`. For example (from\n`base/libc.jl`) we see the same `gethostname`[`ccall`](@ref) as above, but with the correct\nsignature for Windows:\n\n```julia\nhn = Vector{UInt8}(256)\nerr = ccall(:gethostname, stdcall, Int32, (Ptr{UInt8}, UInt32), hn, length(hn))\n```\n\nFor more information, please see the [LLVM Language Reference](http://llvm.org/docs/LangRef.html#calling-conventions).\n\nThere is one additional special calling convention `llvmcall`,\nwhich allows inserting calls to LLVM intrinsics directly.\nThis can be especially useful when targeting unusual platforms such as GPGPUs.\nFor example, for [CUDA](http://llvm.org/docs/NVPTXUsage.html), we need to be able to read the thread index:\n\n```julia\nccall(\"llvm.nvvm.read.ptx.sreg.tid.x\", llvmcall, Int32, ())\n```\n\nAs with any `ccall`, it is essential to get the argument signature exactly correct.\nAlso, note that there is no compatibility layer that ensures the intrinsic makes\nsense and works on the current target,\nunlike the equivalent Julia functions exposed by `Core.Intrinsics`.\n\n## Accessing Global Variables\n\nGlobal variables exported by native libraries can be accessed by name using the [`cglobal()`](@ref)\nfunction. The arguments to [`cglobal()`](@ref) are a symbol specification identical to that used\nby [`ccall`](@ref), and a type describing the value stored in the variable:\n\n```julia-repl\njulia> cglobal((:errno, :libc), Int32)\nPtr{Int32} @0x00007f418d0816b8\n```\n\nThe result is a pointer giving the address of the value. The value can be manipulated through\nthis pointer using [`unsafe_load()`](@ref) and [`unsafe_store!()`](@ref).\n\n## Accessing Data through a Pointer\n\nThe following methods are described as \"unsafe\" because a bad pointer or type declaration can\ncause Julia to terminate abruptly.\n\nGiven a `Ptr{T}`, the contents of type `T` can generally be copied from the referenced memory\ninto a Julia object using `unsafe_load(ptr, [index])`. The index argument is optional (default\nis 1), and follows the Julia-convention of 1-based indexing. This function is intentionally similar\nto the behavior of [`getindex()`](@ref) and [`setindex!()`](@ref) (e.g. `[]` access syntax).\n\nThe return value will be a new object initialized to contain a copy of the contents of the referenced\nmemory. The referenced memory can safely be freed or released.\n\nIf `T` is `Any`, then the memory is assumed to contain a reference to a Julia object (a `jl_value_t*`),\nthe result will be a reference to this object, and the object will not be copied. You must be\ncareful in this case to ensure that the object was always visible to the garbage collector (pointers\ndo not count, but the new reference does) to ensure the memory is not prematurely freed. Note\nthat if the object was not originally allocated by Julia, the new object will never be finalized\nby Julia's garbage collector.  If the `Ptr` itself is actually a `jl_value_t*`, it can be converted\nback to a Julia object reference by [`unsafe_pointer_to_objref(ptr)`](@ref). (Julia values `v`\ncan be converted to `jl_value_t*` pointers, as `Ptr{Void}`, by calling [`pointer_from_objref(v)`](@ref).)\n\nThe reverse operation (writing data to a `Ptr{T}`), can be performed using [`unsafe_store!(ptr, value, [index])`](@ref).\nCurrently, this is only supported for primitive types or other pointer-free (`isbits`) immutable struct types.\n\nAny operation that throws an error is probably currently unimplemented and should be posted as\na bug so that it can be resolved.\n\nIf the pointer of interest is a plain-data array (primitive type or immutable struct), the function [`unsafe_wrap(Array, ptr,dims,[own])`](@ref)\nmay be more useful. The final parameter should be true if Julia should \"take ownership\" of the\nunderlying buffer and call `free(ptr)` when the returned `Array` object is finalized.  If the\n`own` parameter is omitted or false, the caller must ensure the buffer remains in existence until\nall access is complete.\n\nArithmetic on the `Ptr` type in Julia (e.g. using `+`) does not behave the same as C's pointer\narithmetic. Adding an integer to a `Ptr` in Julia always moves the pointer by some number of\n*bytes*, not elements. This way, the address values obtained from pointer arithmetic do not depend\non the element types of pointers.\n\n## Thread-safety\n\nSome C libraries execute their callbacks from a different thread, and since Julia isn't thread-safe\nyou'll need to take some extra precautions. In particular, you'll need to set up a two-layered\nsystem: the C callback should only *schedule* (via Julia's event loop) the execution of your \"real\"\ncallback. To do this, create a `AsyncCondition` object and wait on it:\n\n```julia\ncond = Base.AsyncCondition()\nwait(cond)\n```\n\nThe callback you pass to C should only execute a [`ccall`](@ref) to `:uv_async_send`, passing\n`cond.handle` as the argument, taking care to avoid any allocations or other interactions with the\nJulia runtime.\n\nNote that events may be coalesced, so multiple calls to `uv_async_send` may result in a single wakeup\nnotification to the condition.\n\n## More About Callbacks\n\nFor more details on how to pass callbacks to C libraries, see this [blog post](https://julialang.org/blog/2013/05/callback).\n\n## C++\n\nFor direct C++ interfacing, see the [Cxx](https://github.com/Keno/Cxx.jl) package. For tools to create C++\nbindings, see the [CxxWrap](https://github.com/JuliaInterop/CxxWrap.jl) package.\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/src/stdlib/libdl.md": "# Dynamic Linker\n\nThe names in `Base.Libdl` are not exported and need to be called e.g. as `Libdl.dlopen()`.\n\n```@docs\nBase.Libdl.dlopen\nBase.Libdl.dlopen_e\nBase.Libdl.RTLD_NOW\nBase.Libdl.dlsym\nBase.Libdl.dlsym_e\nBase.Libdl.dlclose\nBase.Libdl.dlext\nBase.Libdl.find_library\nBase.Libdl.DL_LOAD_PATH\n```\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/_build/html/en/search_index.js": "var documenterSearchIndex = {\"docs\": [\n\n{\n    \"location\": \"index.html#\",\n    \"page\": \"Home\",\n    \"title\": \"Home\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"index.html#Julia-Documentation-1\",\n    \"page\": \"Home\",\n    \"title\": \"Julia Documentation\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"index.html#Manual-1\",\n    \"page\": \"Home\",\n    \"title\": \"Manual\",\n    \"category\": \"section\",\n    \"text\": \"Introduction\\nGetting Started\\nVariables\\nIntegers and Floating-Point Numbers\\nMathematical Operations and Elementary Functions\\nComplex and Rational Numbers\\nStrings\\nFunctions\\nControl Flow\\nScope of Variables\\nTypes\\nMethods\\nConstructors\\nConversion and Promotion\\nInterfaces\\nModules\\nDocumentation\\nMetaprogramming\\nMulti-dimensional Arrays\\nLinear Algebra\\nNetworking and Streams\\nParallel Computing\\nDate and DateTime\\nRunning External Programs\\nCalling C and Fortran Code\\nHandling Operating System Variation\\nEnvironment Variables\\nInteracting With Julia\\nEmbedding Julia\\nPackages\\nProfiling\\nStack Traces\\nPerformance Tips\\nWorkflow Tips\\nStyle Guide\\nFrequently Asked Questions\\nNoteworthy Differences from other Languages\\nUnicode Input\"\n},\n\n{\n    \"location\": \"index.html#Standard-Library-1\",\n    \"page\": \"Home\",\n    \"title\": \"Standard Library\",\n    \"category\": \"section\",\n    \"text\": \"Essentials\\nCollections and Data Structures\\nMathematics\\nNumbers\\nStrings\\nArrays\\nTasks and Parallel Computing\\nLinear Algebra\\nConstants\\nFilesystem\\nI/O and Network\\nPunctuation\\nSorting and Related Functions\\nPackage Manager Functions\\nDates and Time\\nIteration utilities\\nUnit Testing\\nC Interface\\nC Standard Library\\nDynamic Linker\\nProfiling\\nStackTraces\\nSIMD Support\"\n},\n\n{\n    \"location\": \"index.html#Developer-Documentation-1\",\n    \"page\": \"Home\",\n    \"title\": \"Developer Documentation\",\n    \"category\": \"section\",\n    \"text\": \"Reflection and introspection\\nDocumentation of Julia's Internals\\nInitialization of the Julia runtime\\nJulia ASTs\\nMore about types\\nMemory layout of Julia Objects\\nEval of Julia code\\nCalling Conventions\\nHigh-level Overview of the Native-Code Generation Process\\nJulia Functions\\nBase.Cartesian\\nTalking to the compiler (the :meta mechanism)\\nSubArrays\\nSystem Image Building\\nWorking with LLVM\\nprintf() and stdio in the Julia runtime\\nBounds checking\\nProper maintenance and care of multi-threading locks\\nArrays with custom indices\\nBase.LibGit2\\nModule loading\\nDeveloping/debugging Julia's C code\\nReporting and analyzing crashes (segfaults)\\ngdb debugging tips\\nUsing Valgrind with Julia\\nSanitizer support\"\n},\n\n{\n    \"location\": \"manual/introduction.html#\",\n    \"page\": \"Introduction\",\n    \"title\": \"Introduction\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/introduction.html#man-introduction-1\",\n    \"page\": \"Introduction\",\n    \"title\": \"Introduction\",\n    \"category\": \"section\",\n    \"text\": \"Scientific computing has traditionally required the highest performance, yet domain experts have largely moved to slower dynamic languages for daily work. We believe there are many good reasons to prefer dynamic languages for these applications, and we do not expect their use to diminish. Fortunately, modern language design and compiler techniques make it possible to mostly eliminate the performance trade-off and provide a single environment productive enough for prototyping and efficient enough for deploying performance-intensive applications. The Julia programming language fills this role: it is a flexible dynamic language, appropriate for scientific and numerical computing, with performance comparable to traditional statically-typed languages.Because Julia's compiler is different from the interpreters used for languages like Python or R, you may find that Julia's performance is unintuitive at first. If you find that something is slow, we highly recommend reading through the Performance Tips section before trying anything else. Once you understand how Julia works, it's easy to write code that's nearly as fast as C.Julia features optional typing, multiple dispatch, and good performance, achieved using type inference and just-in-time (JIT) compilation, implemented using LLVM. It is multi-paradigm, combining features of imperative, functional, and object-oriented programming. Julia provides ease and expressiveness for high-level numerical computing, in the same way as languages such as R, MATLAB, and Python, but also supports general programming. To achieve this, Julia builds upon the lineage of mathematical programming languages, but also borrows much from popular dynamic languages, including Lisp, Perl, Python, Lua, and Ruby.The most significant departures of Julia from typical dynamic languages are:The core language imposes very little; the standard library is written in Julia itself, including primitive operations like integer arithmetic\\nA rich language of types for constructing and describing objects, that can also optionally be used to make type declarations\\nThe ability to define function behavior across many combinations of argument types via multiple dispatch\\nAutomatic generation of efficient, specialized code for different argument types\\nGood performance, approaching that of statically-compiled languages like CAlthough one sometimes speaks of dynamic languages as being \\\"typeless\\\", they are definitely not: every object, whether primitive or user-defined, has a type. The lack of type declarations in most dynamic languages, however, means that one cannot instruct the compiler about the types of values, and often cannot explicitly talk about types at all. In static languages, on the other hand, while one can \u2013 and usually must \u2013 annotate types for the compiler, types exist only at compile time and cannot be manipulated or expressed at run time. In Julia, types are themselves run-time objects, and can also be used to convey information to the compiler.While the casual programmer need not explicitly use types or multiple dispatch, they are the core unifying features of Julia: functions are defined on different combinations of argument types, and applied by dispatching to the most specific matching definition. This model is a good fit for mathematical programming, where it is unnatural for the first argument to \\\"own\\\" an operation as in traditional object-oriented dispatch. Operators are just functions with special notation \u2013 to extend addition to new user-defined data types, you define new methods for the + function. Existing code then seamlessly applies to the new data types.Partly because of run-time type inference (augmented by optional type annotations), and partly because of a strong focus on performance from the inception of the project, Julia's computational efficiency exceeds that of other dynamic languages, and even rivals that of statically-compiled languages. For large scale numerical problems, speed always has been, continues to be, and probably always will be crucial: the amount of data being processed has easily kept pace with Moore's Law over the past decades.Julia aims to create an unprecedented combination of ease-of-use, power, and efficiency in a single language. In addition to the above, some advantages of Julia over comparable systems include:Free and open source (MIT licensed)\\nUser-defined types are as fast and compact as built-ins\\nNo need to vectorize code for performance; devectorized code is fast\\nDesigned for parallelism and distributed computation\\nLightweight \\\"green\\\" threading (coroutines)\\nUnobtrusive yet powerful type system\\nElegant and extensible conversions and promotions for numeric and other types\\nEfficient support for Unicode, including but not limited to UTF-8\\nCall C functions directly (no wrappers or special APIs needed)\\nPowerful shell-like capabilities for managing other processes\\nLisp-like macros and other metaprogramming facilities\"\n},\n\n{\n    \"location\": \"manual/getting-started.html#\",\n    \"page\": \"Getting Started\",\n    \"title\": \"Getting Started\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/getting-started.html#Getting-Started-1\",\n    \"page\": \"Getting Started\",\n    \"title\": \"Getting Started\",\n    \"category\": \"section\",\n    \"text\": \"Julia installation is straightforward, whether using precompiled binaries or compiling from source. Download and install Julia by following the instructions at https://julialang.org/downloads/.The easiest way to learn and experiment with Julia is by starting an interactive session (also known as a read-eval-print loop or \\\"repl\\\") by double-clicking the Julia executable or running julia from the command line:$ julia\\n               _\\n   _       _ _(_)_     |  A fresh approach to technical computing\\n  (_)     | (_) (_)    |  Documentation: https://docs.julialang.org\\n   _ _   _| |_  __ _   |  Type \\\"?help\\\" for help.\\n  | | | | | | |/ _` |  |\\n  | | |_| | | | (_| |  |  Version 0.5.0-dev+2440 (2016-02-01 02:22 UTC)\\n _/ |\\\\__'_|_|_|\\\\__'_|  |  Commit 2bb94d6 (11 days old master)\\n|__/                   |  x86_64-apple-darwin13.1.0\\n\\njulia> 1 + 2\\n3\\n\\njulia> ans\\n3To exit the interactive session, type ^D \u2013 the control key together with the d key or type quit(). When run in interactive mode, julia displays a banner and prompts the user for input. Once the user has entered a complete expression, such as 1 + 2, and hits enter, the interactive session evaluates the expression and shows its value. If an expression is entered into an interactive session with a trailing semicolon, its value is not shown. The variable ans is bound to the value of the last evaluated expression whether it is shown or not. The ans variable is only bound in interactive sessions, not when Julia code is run in other ways.To evaluate expressions written in a source file file.jl, write include(\\\"file.jl\\\").To run code in a file non-interactively, you can give it as the first argument to the julia command:$ julia script.jl arg1 arg2...As the example implies, the following command-line arguments to julia are taken as command-line arguments to the program script.jl, passed in the global constant ARGS. The name of the script itself is passed in as the global PROGRAM_FILE. Note that ARGS is also set when script code is given using the -e option on the command line (see the julia help output below) but PROGRAM_FILE will be empty. For example, to just print the arguments given to a script, you could do this:$ julia -e 'println(PROGRAM_FILE); for x in ARGS; println(x); end' foo bar\\n\\nfoo\\nbarOr you could put that code into a script and run it:$ echo 'println(PROGRAM_FILE); for x in ARGS; println(x); end' > script.jl\\n$ julia script.jl foo bar\\nscript.jl\\nfoo\\nbarThe -- delimiter can be used to separate command-line args to the scriptfile from args to Julia:$ julia --color=yes -O -- foo.jl arg1 arg2..Julia can be started in parallel mode with either the -p or the --machinefile options. -p n will launch an additional n worker processes, while --machinefile file will launch a worker for each line in file file. The machines defined in file must be accessible via a passwordless ssh login, with Julia installed at the same location as the current host. Each machine definition takes the form [count*][user@]host[:port] [bind_addr[:port]] . user defaults to current user, port to the standard ssh port. count is the number of workers to spawn on the node, and defaults to 1. The optional bind-to bind_addr[:port] specifies the ip-address and port that other workers should use to connect to this worker.If you have code that you want executed whenever Julia is run, you can put it in ~/.juliarc.jl:$ echo 'println(\\\"Greetings! \u4f60\u597d! \uc548\ub155\ud558\uc138\uc694?\\\")' > ~/.juliarc.jl\\n$ julia\\nGreetings! \u4f60\u597d! \uc548\ub155\ud558\uc138\uc694?\\n\\n...There are various ways to run Julia code and provide options, similar to those available for the perl and ruby programs:julia [switches] -- [programfile] [args...]\\n -v, --version             Display version information\\n -h, --help                Print this message\\n\\n -J, --sysimage <file>     Start up with the given system image file\\n --precompiled={yes|no}    Use precompiled code from system image if available\\n --compilecache={yes|no}   Enable/disable incremental precompilation of modules\\n -H, --home <dir>          Set location of `julia` executable\\n --startup-file={yes|no}   Load ~/.juliarc.jl\\n --handle-signals={yes|no} Enable or disable Julia's default signal handlers\\n\\n -e, --eval <expr>         Evaluate <expr>\\n -E, --print <expr>        Evaluate and show <expr>\\n -L, --load <file>         Load <file> immediately on all processors\\n\\n -p, --procs {N|auto}      Integer value N launches N additional local worker processes\\n                           \\\"auto\\\" launches as many workers as the number of local cores\\n --machinefile <file>      Run processes on hosts listed in <file>\\n\\n -i                        Interactive mode; REPL runs and isinteractive() is true\\n -q, --quiet               Quiet startup (no banner)\\n --color={yes|no}          Enable or disable color text\\n --history-file={yes|no}   Load or save history\\n\\n --compile={yes|no|all|min}Enable or disable JIT compiler, or request exhaustive compilation\\n -C, --cpu-target <target> Limit usage of cpu features up to <target>\\n -O, --optimize={0,1,2,3}  Set the optimization level (default is 2 if unspecified or 3 if specified as -O)\\n -g, -g <level>            Enable / Set the level of debug info generation (default is 1 if unspecified or 2 if specified as -g)\\n --inline={yes|no}         Control whether inlining is permitted (overrides functions declared as @inline)\\n --check-bounds={yes|no}   Emit bounds checks always or never (ignoring declarations)\\n --math-mode={ieee,fast}   Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)\\n\\n --depwarn={yes|no|error}  Enable or disable syntax and method deprecation warnings (\\\"error\\\" turns warnings into errors)\\n\\n --output-o name           Generate an object file (including system image data)\\n --output-ji name          Generate a system image data file (.ji)\\n --output-bc name          Generate LLVM bitcode (.bc)\\n --output-incremental=no   Generate an incremental output file (rather than complete)\\n\\n --code-coverage={none|user|all}, --code-coverage\\n                           Count executions of source lines (omitting setting is equivalent to \\\"user\\\")\\n --track-allocation={none|user|all}, --track-allocation\\n                           Count bytes allocated by each source line\"\n},\n\n{\n    \"location\": \"manual/getting-started.html#Resources-1\",\n    \"page\": \"Getting Started\",\n    \"title\": \"Resources\",\n    \"category\": \"section\",\n    \"text\": \"In addition to this manual, there are various other resources that may help new users get started with Julia:Julia and IJulia cheatsheet\\nLearn Julia in a few minutes\\nLearn Julia the Hard Way\\nJulia by Example\\nHands-on Julia\\nTutorial for Homer Reid's numerical analysis class\\nAn introductory presentation\\nVideos from the Julia tutorial at MIT\\nYouTube videos from the JuliaCons\"\n},\n\n{\n    \"location\": \"manual/variables.html#\",\n    \"page\": \"Variables\",\n    \"title\": \"Variables\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/variables.html#Variables-1\",\n    \"page\": \"Variables\",\n    \"title\": \"Variables\",\n    \"category\": \"section\",\n    \"text\": \"A variable, in Julia, is a name associated (or bound) to a value. It's useful when you want to store a value (that you obtained after some math, for example) for later use. For example:# Assign the value 10 to the variable x\\njulia> x = 10\\n10\\n\\n# Doing math with x's value\\njulia> x + 1\\n11\\n\\n# Reassign x's value\\njulia> x = 1 + 1\\n2\\n\\n# You can assign values of other types, like strings of text\\njulia> x = \\\"Hello World!\\\"\\n\\\"Hello World!\\\"Julia provides an extremely flexible system for naming variables. Variable names are case-sensitive, and have no semantic meaning (that is, the language will not treat variables differently based on their names).julia> x = 1.0\\n1.0\\n\\njulia> y = -3\\n-3\\n\\njulia> Z = \\\"My string\\\"\\n\\\"My string\\\"\\n\\njulia> customary_phrase = \\\"Hello world!\\\"\\n\\\"Hello world!\\\"\\n\\njulia> UniversalDeclarationOfHumanRightsStart = \\\"\u4eba\u4eba\u751f\u800c\u81ea\u7531\uff0c\u5728\u5c0a\u4e25\u548c\u6743\u5229\u4e0a\u4e00\u5f8b\u5e73\u7b49\u3002\\\"\\n\\\"\u4eba\u4eba\u751f\u800c\u81ea\u7531\uff0c\u5728\u5c0a\u4e25\u548c\u6743\u5229\u4e0a\u4e00\u5f8b\u5e73\u7b49\u3002\\\"Unicode names (in UTF-8 encoding) are allowed:julia> \u03b4 = 0.00001\\n1.0e-5\\n\\njulia> \uc548\ub155\ud558\uc138\uc694 = \\\"Hello\\\"\\n\\\"Hello\\\"In the Julia REPL and several other Julia editing environments, you can type many Unicode math symbols by typing the backslashed LaTeX symbol name followed by tab. For example, the variable name \u03b4 can be entered by typing \\\\delta-tab, or even \u03b1\u0302\u2082 by \\\\alpha-tab-\\\\hat- tab-\\\\_2-tab. (If you find a symbol somewhere, e.g. in someone else's code, that you don't know how to type, the REPL help will tell you: just type ? and then paste the symbol.)Julia will even let you redefine built-in constants and functions if needed:julia> pi\\n\u03c0 = 3.1415926535897...\\n\\njulia> pi = 3\\nWARNING: imported binding for pi overwritten in module Main\\n3\\n\\njulia> pi\\n3\\n\\njulia> sqrt(100)\\n10.0\\n\\njulia> sqrt = 4\\nWARNING: imported binding for sqrt overwritten in module Main\\n4However, this is obviously not recommended to avoid potential confusion.\"\n},\n\n{\n    \"location\": \"manual/variables.html#Allowed-Variable-Names-1\",\n    \"page\": \"Variables\",\n    \"title\": \"Allowed Variable Names\",\n    \"category\": \"section\",\n    \"text\": \"Variable names must begin with a letter (A-Z or a-z), underscore, or a subset of Unicode code points greater than 00A0; in particular, Unicode character categories Lu/Ll/Lt/Lm/Lo/Nl (letters), Sc/So (currency and other symbols), and a few other letter-like characters (e.g. a subset of the Sm math symbols) are allowed. Subsequent characters may also include ! and digits (0-9 and other characters in categories Nd/No), as well as other Unicode code points: diacritics and other modifying marks (categories Mn/Mc/Me/Sk), some punctuation connectors (category Pc), primes, and a few other characters.Operators like + are also valid identifiers, but are parsed specially. In some contexts, operators can be used just like variables; for example (+) refers to the addition function, and (+) = f will reassign it. Most of the Unicode infix operators (in category Sm), such as \u2295, are parsed as infix operators and are available for user-defined methods (e.g. you can use const \u2297 = kron to define \u2297 as an infix Kronecker product).The only explicitly disallowed names for variables are the names of built-in statements:julia> else = false\\nERROR: syntax: unexpected \\\"else\\\"\\n\\njulia> try = \\\"No\\\"\\nERROR: syntax: unexpected \\\"=\\\"Some Unicode characters are considered to be equivalent in identifiers. Different ways of entering Unicode combining characters (e.g., accents) are treated as equivalent (specifically, Julia identifiers are NFC-normalized). The Unicode characters \u025b (U+025B: Latin small letter open e) and \u00b5 (U+00B5: micro sign) are treated as equivalent to the corresponding Greek letters, because the former are easily accessible via some input methods.\"\n},\n\n{\n    \"location\": \"manual/variables.html#Stylistic-Conventions-1\",\n    \"page\": \"Variables\",\n    \"title\": \"Stylistic Conventions\",\n    \"category\": \"section\",\n    \"text\": \"While Julia imposes few restrictions on valid names, it has become useful to adopt the following conventions:Names of variables are in lower case.\\nWord separation can be indicated by underscores ('_'), but use of underscores is discouraged unless the name would be hard to read otherwise.\\nNames of Types and Modules begin with a capital letter and word separation is shown with upper camel case instead of underscores.\\nNames of functions and macros are in lower case, without underscores.\\nFunctions that write to their arguments have names that end in !. These are sometimes called \\\"mutating\\\" or \\\"in-place\\\" functions because they are intended to produce changes in their arguments after the function is called, not just return a value.For more information about stylistic conventions, see the Style Guide.\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Integers and Floating-Point Numbers\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Integers-and-Floating-Point-Numbers-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Integers and Floating-Point Numbers\",\n    \"category\": \"section\",\n    \"text\": \"Integers and floating-point values are the basic building blocks of arithmetic and computation. Built-in representations of such values are called numeric primitives, while representations of integers and floating-point numbers as immediate values in code are known as numeric literals. For example, 1 is an integer literal, while 1.0 is a floating-point literal; their binary in-memory representations as objects are numeric primitives.Julia provides a broad range of primitive numeric types, and a full complement of arithmetic and bitwise operators as well as standard mathematical functions are defined over them. These map directly onto numeric types and operations that are natively supported on modern computers, thus allowing Julia to take full advantage of computational resources. Additionally, Julia provides software support for Arbitrary Precision Arithmetic, which can handle operations on numeric values that cannot be represented effectively in native hardware representations, but at the cost of relatively slower performance.The following are Julia's primitive numeric types:Integer types:Type Signed? Number of bits Smallest value Largest value\\nInt8 \u2713 8 -2^7 2^7 - 1\\nUInt8 \u00a0 8 0 2^8 - 1\\nInt16 \u2713 16 -2^15 2^15 - 1\\nUInt16 \u00a0 16 0 2^16 - 1\\nInt32 \u2713 32 -2^31 2^31 - 1\\nUInt32 \u00a0 32 0 2^32 - 1\\nInt64 \u2713 64 -2^63 2^63 - 1\\nUInt64 \u00a0 64 0 2^64 - 1\\nInt128 \u2713 128 -2^127 2^127 - 1\\nUInt128 \u00a0 128 0 2^128 - 1\\nBool N/A 8 false (0) true (1)Floating-point types:Type Precision Number of bits\\nFloat16 half 16\\nFloat32 single 32\\nFloat64 double 64Additionally, full support for Complex and Rational Numbers is built on top of these primitive numeric types. All numeric types interoperate naturally without explicit casting, thanks to a flexible, user-extensible type promotion system.\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Integers-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Integers\",\n    \"category\": \"section\",\n    \"text\": \"Literal integers are represented in the standard manner:julia> 1\\n1\\n\\njulia> 1234\\n1234The default type for an integer literal depends on whether the target system has a 32-bit architecture or a 64-bit architecture:# 32-bit system:\\njulia> typeof(1)\\nInt32\\n\\n# 64-bit system:\\njulia> typeof(1)\\nInt64The Julia internal variable Sys.WORD_SIZE indicates whether the target system is 32-bit or 64-bit:# 32-bit system:\\njulia> Sys.WORD_SIZE\\n32\\n\\n# 64-bit system:\\njulia> Sys.WORD_SIZE\\n64Julia also defines the types Int and UInt, which are aliases for the system's signed and unsigned native integer types respectively:# 32-bit system:\\njulia> Int\\nInt32\\njulia> UInt\\nUInt32\\n\\n# 64-bit system:\\njulia> Int\\nInt64\\njulia> UInt\\nUInt64Larger integer literals that cannot be represented using only 32 bits but can be represented in 64 bits always create 64-bit integers, regardless of the system type:# 32-bit or 64-bit system:\\njulia> typeof(3000000000)\\nInt64Unsigned integers are input and output using the 0x prefix and hexadecimal (base 16) digits 0-9a-f (the capitalized digits A-F also work for input). The size of the unsigned value is determined by the number of hex digits used:julia> 0x1\\n0x01\\n\\njulia> typeof(ans)\\nUInt8\\n\\njulia> 0x123\\n0x0123\\n\\njulia> typeof(ans)\\nUInt16\\n\\njulia> 0x1234567\\n0x01234567\\n\\njulia> typeof(ans)\\nUInt32\\n\\njulia> 0x123456789abcdef\\n0x0123456789abcdef\\n\\njulia> typeof(ans)\\nUInt64This behavior is based on the observation that when one uses unsigned hex literals for integer values, one typically is using them to represent a fixed numeric byte sequence, rather than just an integer value.Recall that the variable ans is set to the value of the last expression evaluated in an interactive session. This does not occur when Julia code is run in other ways.Binary and octal literals are also supported:julia> 0b10\\n0x02\\n\\njulia> typeof(ans)\\nUInt8\\n\\njulia> 0o10\\n0x08\\n\\njulia> typeof(ans)\\nUInt8The minimum and maximum representable values of primitive numeric types such as integers are given by the typemin() and typemax() functions:julia> (typemin(Int32), typemax(Int32))\\n(-2147483648, 2147483647)\\n\\njulia> for T in [Int8,Int16,Int32,Int64,Int128,UInt8,UInt16,UInt32,UInt64,UInt128]\\n           println(\\\"$(lpad(T,7)): [$(typemin(T)),$(typemax(T))]\\\")\\n       end\\n   Int8: [-128,127]\\n  Int16: [-32768,32767]\\n  Int32: [-2147483648,2147483647]\\n  Int64: [-9223372036854775808,9223372036854775807]\\n Int128: [-170141183460469231731687303715884105728,170141183460469231731687303715884105727]\\n  UInt8: [0,255]\\n UInt16: [0,65535]\\n UInt32: [0,4294967295]\\n UInt64: [0,18446744073709551615]\\nUInt128: [0,340282366920938463463374607431768211455]The values returned by typemin() and typemax() are always of the given argument type. (The above expression uses several features we have yet to introduce, including for loops, Strings, and Interpolation, but should be easy enough to understand for users with some existing programming experience.)\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Overflow-behavior-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Overflow behavior\",\n    \"category\": \"section\",\n    \"text\": \"In Julia, exceeding the maximum representable value of a given type results in a wraparound behavior:julia> x = typemax(Int64)\\n9223372036854775807\\n\\njulia> x + 1\\n-9223372036854775808\\n\\njulia> x + 1 == typemin(Int64)\\ntrueThus, arithmetic with Julia integers is actually a form of modular arithmetic. This reflects the characteristics of the underlying arithmetic of integers as implemented on modern computers. In applications where overflow is possible, explicit checking for wraparound produced by overflow is essential; otherwise, the BigInt type in Arbitrary Precision Arithmetic is recommended instead.\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Division-errors-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Division errors\",\n    \"category\": \"section\",\n    \"text\": \"Integer division (the div function) has two exceptional cases: dividing by zero, and dividing the lowest negative number (typemin()) by -1. Both of these cases throw a DivideError. The remainder and modulus functions (rem and mod) throw a DivideError when their second argument is zero.\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Floating-Point-Numbers-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Floating-Point Numbers\",\n    \"category\": \"section\",\n    \"text\": \"Literal floating-point numbers are represented in the standard formats:julia> 1.0\\n1.0\\n\\njulia> 1.\\n1.0\\n\\njulia> 0.5\\n0.5\\n\\njulia> .5\\n0.5\\n\\njulia> -1.23\\n-1.23\\n\\njulia> 1e10\\n1.0e10\\n\\njulia> 2.5e-4\\n0.00025The above results are all Float64 values. Literal Float32 values can be entered by writing an f in place of e:julia> 0.5f0\\n0.5f0\\n\\njulia> typeof(ans)\\nFloat32\\n\\njulia> 2.5f-4\\n0.00025f0Values can be converted to Float32 easily:julia> Float32(-1.5)\\n-1.5f0\\n\\njulia> typeof(ans)\\nFloat32Hexadecimal floating-point literals are also valid, but only as Float64 values:julia> 0x1p0\\n1.0\\n\\njulia> 0x1.8p3\\n12.0\\n\\njulia> 0x.4p-1\\n0.125\\n\\njulia> typeof(ans)\\nFloat64Half-precision floating-point numbers are also supported (Float16), but they are implemented in software and use Float32 for calculations.julia> sizeof(Float16(4.))\\n2\\n\\njulia> 2*Float16(4.)\\nFloat16(8.0)The underscore _ can be used as digit separator:julia> 10_000, 0.000_000_005, 0xdead_beef, 0b1011_0010\\n(10000, 5.0e-9, 0xdeadbeef, 0xb2)\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Floating-point-zero-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Floating-point zero\",\n    \"category\": \"section\",\n    \"text\": \"Floating-point numbers have two zeros, positive zero and negative zero. They are equal to each other but have different binary representations, as can be seen using the bits function: :julia> 0.0 == -0.0\\ntrue\\n\\njulia> bits(0.0)\\n\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n\\njulia> bits(-0.0)\\n\\\"1000000000000000000000000000000000000000000000000000000000000000\\\"\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Special-floating-point-values-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Special floating-point values\",\n    \"category\": \"section\",\n    \"text\": \"There are three specified standard floating-point values that do not correspond to any point on the real number line:Float16 Float32 Float64 Name Description\\nInf16 Inf32 Inf positive infinity a value greater than all finite floating-point values\\n-Inf16 -Inf32 -Inf negative infinity a value less than all finite floating-point values\\nNaN16 NaN32 NaN not a number a value not == to any floating-point value (including itself)For further discussion of how these non-finite floating-point values are ordered with respect to each other and other floats, see Numeric Comparisons. By the IEEE 754 standard, these floating-point values are the results of certain arithmetic operations:julia> 1/Inf\\n0.0\\n\\njulia> 1/0\\nInf\\n\\njulia> -5/0\\n-Inf\\n\\njulia> 0.000001/0\\nInf\\n\\njulia> 0/0\\nNaN\\n\\njulia> 500 + Inf\\nInf\\n\\njulia> 500 - Inf\\n-Inf\\n\\njulia> Inf + Inf\\nInf\\n\\njulia> Inf - Inf\\nNaN\\n\\njulia> Inf * Inf\\nInf\\n\\njulia> Inf / Inf\\nNaN\\n\\njulia> 0 * Inf\\nNaNThe typemin() and typemax() functions also apply to floating-point types:julia> (typemin(Float16),typemax(Float16))\\n(-Inf16, Inf16)\\n\\njulia> (typemin(Float32),typemax(Float32))\\n(-Inf32, Inf32)\\n\\njulia> (typemin(Float64),typemax(Float64))\\n(-Inf, Inf)\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Machine-epsilon-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Machine epsilon\",\n    \"category\": \"section\",\n    \"text\": \"Most real numbers cannot be represented exactly with floating-point numbers, and so for many purposes it is important to know the distance between two adjacent representable floating-point numbers, which is often known as machine epsilon.Julia provides eps(), which gives the distance between 1.0 and the next larger representable floating-point value:julia> eps(Float32)\\n1.1920929f-7\\n\\njulia> eps(Float64)\\n2.220446049250313e-16\\n\\njulia> eps() # same as eps(Float64)\\n2.220446049250313e-16These values are 2.0^-23 and 2.0^-52 as Float32 and Float64 values, respectively. The eps() function can also take a floating-point value as an argument, and gives the absolute difference between that value and the next representable floating point value. That is, eps(x) yields a value of the same type as x such that x + eps(x) is the next representable floating-point value larger than x:julia> eps(1.0)\\n2.220446049250313e-16\\n\\njulia> eps(1000.)\\n1.1368683772161603e-13\\n\\njulia> eps(1e-27)\\n1.793662034335766e-43\\n\\njulia> eps(0.0)\\n5.0e-324The distance between two adjacent representable floating-point numbers is not constant, but is smaller for smaller values and larger for larger values. In other words, the representable floating-point numbers are densest in the real number line near zero, and grow sparser exponentially as one moves farther away from zero. By definition, eps(1.0) is the same as eps(Float64) since 1.0 is a 64-bit floating-point value.Julia also provides the nextfloat() and prevfloat() functions which return the next largest or smallest representable floating-point number to the argument respectively:julia> x = 1.25f0\\n1.25f0\\n\\njulia> nextfloat(x)\\n1.2500001f0\\n\\njulia> prevfloat(x)\\n1.2499999f0\\n\\njulia> bits(prevfloat(x))\\n\\\"00111111100111111111111111111111\\\"\\n\\njulia> bits(x)\\n\\\"00111111101000000000000000000000\\\"\\n\\njulia> bits(nextfloat(x))\\n\\\"00111111101000000000000000000001\\\"This example highlights the general principle that the adjacent representable floating-point numbers also have adjacent binary integer representations.\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Rounding-modes-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Rounding modes\",\n    \"category\": \"section\",\n    \"text\": \"If a number doesn't have an exact floating-point representation, it must be rounded to an appropriate representable value, however, if wanted, the manner in which this rounding is done can be changed according to the rounding modes presented in the IEEE 754 standard.julia> x = 1.1; y = 0.1;\\n\\njulia> x + y\\n1.2000000000000002\\n\\njulia> setrounding(Float64,RoundDown) do\\n           x + y\\n       end\\n1.2The default mode used is always RoundNearest, which rounds to the nearest representable value, with ties rounded towards the nearest value with an even least significant bit.warning: Warning\\nRounding is generally only correct for basic arithmetic functions (+(), -(), *(), /() and sqrt()) and type conversion operations. Many other functions assume the default RoundNearest mode is set, and can give erroneous results when operating under other rounding modes.\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Background-and-References-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Background and References\",\n    \"category\": \"section\",\n    \"text\": \"Floating-point arithmetic entails many subtleties which can be surprising to users who are unfamiliar with the low-level implementation details. However, these subtleties are described in detail in most books on scientific computation, and also in the following references:The definitive guide to floating point arithmetic is the IEEE 754-2008 Standard; however, it is not available for free online.\\nFor a brief but lucid presentation of how floating-point numbers are represented, see John D. Cook's article on the subject as well as his introduction to some of the issues arising from how this representation differs in behavior from the idealized abstraction of real numbers.\\nAlso recommended is Bruce Dawson's series of blog posts on floating-point numbers.\\nFor an excellent, in-depth discussion of floating-point numbers and issues of numerical accuracy encountered when computing with them, see David Goldberg's paper What Every Computer Scientist Should Know About Floating-Point Arithmetic.\\nFor even more extensive documentation of the history of, rationale for, and issues with floating-point numbers, as well as discussion of many other topics in numerical computing, see the collected writings of William Kahan, commonly known as the \\\"Father of Floating-Point\\\". Of particular interest may be An Interview with the Old Man of Floating-Point.\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Arbitrary-Precision-Arithmetic-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Arbitrary Precision Arithmetic\",\n    \"category\": \"section\",\n    \"text\": \"To allow computations with arbitrary-precision integers and floating point numbers, Julia wraps the GNU Multiple Precision Arithmetic Library (GMP) and the GNU MPFR Library, respectively. The BigInt and BigFloat types are available in Julia for arbitrary precision integer and floating point numbers respectively.Constructors exist to create these types from primitive numerical types, and parse() can be used to construct them from AbstractStrings.  Once created, they participate in arithmetic with all other numeric types thanks to Julia's type promotion and conversion mechanism:julia> BigInt(typemax(Int64)) + 1\\n9223372036854775808\\n\\njulia> parse(BigInt, \\\"123456789012345678901234567890\\\") + 1\\n123456789012345678901234567891\\n\\njulia> parse(BigFloat, \\\"1.23456789012345678901\\\")\\n1.234567890123456789010000000000000000000000000000000000000000000000000000000004\\n\\njulia> BigFloat(2.0^66) / 3\\n2.459565876494606882133333333333333333333333333333333333333333333333333333333344e+19\\n\\njulia> factorial(BigInt(40))\\n815915283247897734345611269596115894272000000000However, type promotion between the primitive types above and BigInt/BigFloat is not automatic and must be explicitly stated.julia> x = typemin(Int64)\\n-9223372036854775808\\n\\njulia> x = x - 1\\n9223372036854775807\\n\\njulia> typeof(x)\\nInt64\\n\\njulia> y = BigInt(typemin(Int64))\\n-9223372036854775808\\n\\njulia> y = y - 1\\n-9223372036854775809\\n\\njulia> typeof(y)\\nBigIntThe default precision (in number of bits of the significand) and rounding mode of BigFloat operations can be changed globally by calling setprecision() and setrounding(), and all further calculations will take these changes in account.  Alternatively, the precision or the rounding can be changed only within the execution of a particular block of code by using the same functions with a do block:julia> setrounding(BigFloat, RoundUp) do\\n           BigFloat(1) + parse(BigFloat, \\\"0.1\\\")\\n       end\\n1.100000000000000000000000000000000000000000000000000000000000000000000000000003\\n\\njulia> setrounding(BigFloat, RoundDown) do\\n           BigFloat(1) + parse(BigFloat, \\\"0.1\\\")\\n       end\\n1.099999999999999999999999999999999999999999999999999999999999999999999999999986\\n\\njulia> setprecision(40) do\\n           BigFloat(1) + parse(BigFloat, \\\"0.1\\\")\\n       end\\n1.1000000000004\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#man-numeric-literal-coefficients-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Numeric Literal Coefficients\",\n    \"category\": \"section\",\n    \"text\": \"To make common numeric formulas and expressions clearer, Julia allows variables to be immediately preceded by a numeric literal, implying multiplication. This makes writing polynomial expressions much cleaner:julia> x = 3\\n3\\n\\njulia> 2x^2 - 3x + 1\\n10\\n\\njulia> 1.5x^2 - .5x + 1\\n13.0It also makes writing exponential functions more elegant:julia> 2^2x\\n64The precedence of numeric literal coefficients is the same as that of unary operators such as negation. So 2^3x is parsed as 2^(3x), and 2x^3 is parsed as 2*(x^3).Numeric literals also work as coefficients to parenthesized expressions:julia> 2(x-1)^2 - 3(x-1) + 1\\n3note: Note\\nThe precedence of numeric literal coefficients used for implicit multiplication is higher than other binary operators such as multiplication (*), and division (/, \\\\, and //).  This means, for example, that 1 / 2im equals -0.5im and 6 // 2(2 + 1) equals 1 // 1.Additionally, parenthesized expressions can be used as coefficients to variables, implying multiplication of the expression by the variable:julia> (x-1)x\\n6Neither juxtaposition of two parenthesized expressions, nor placing a variable before a parenthesized expression, however, can be used to imply multiplication:julia> (x-1)(x+1)\\nERROR: MethodError: objects of type Int64 are not callable\\n\\njulia> x(x+1)\\nERROR: MethodError: objects of type Int64 are not callableBoth expressions are interpreted as function application: any expression that is not a numeric literal, when immediately followed by a parenthetical, is interpreted as a function applied to the values in parentheses (see Functions for more about functions). Thus, in both of these cases, an error occurs since the left-hand value is not a function.The above syntactic enhancements significantly reduce the visual noise incurred when writing common mathematical formulae. Note that no whitespace may come between a numeric literal coefficient and the identifier or parenthesized expression which it multiplies.\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Syntax-Conflicts-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Syntax Conflicts\",\n    \"category\": \"section\",\n    \"text\": \"Juxtaposed literal coefficient syntax may conflict with two numeric literal syntaxes: hexadecimal integer literals and engineering notation for floating-point literals. Here are some situations where syntactic conflicts arise:The hexadecimal integer literal expression 0xff could be interpreted as the numeric literal 0 multiplied by the variable xff.\\nThe floating-point literal expression 1e10 could be interpreted as the numeric literal 1 multiplied by the variable e10, and similarly with the equivalent E form.In both cases, we resolve the ambiguity in favor of interpretation as a numeric literals:Expressions starting with 0x are always hexadecimal literals.\\nExpressions starting with a numeric literal followed by e or E are always floating-point literals.\"\n},\n\n{\n    \"location\": \"manual/integers-and-floating-point-numbers.html#Literal-zero-and-one-1\",\n    \"page\": \"Integers and Floating-Point Numbers\",\n    \"title\": \"Literal zero and one\",\n    \"category\": \"section\",\n    \"text\": \"Julia provides functions which return literal 0 and 1 corresponding to a specified type or the type of a given variable.Function Description\\nzero(x) Literal zero of type x or type of variable x\\none(x) Literal one of type x or type of variable xThese functions are useful in Numeric Comparisons to avoid overhead from unnecessary type conversion.Examples:julia> zero(Float32)\\n0.0f0\\n\\njulia> zero(1.0)\\n0.0\\n\\njulia> one(Int32)\\n1\\n\\njulia> one(BigFloat)\\n1.000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Mathematical Operations and Elementary Functions\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Mathematical-Operations-and-Elementary-Functions-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Mathematical Operations and Elementary Functions\",\n    \"category\": \"section\",\n    \"text\": \"Julia provides a complete collection of basic arithmetic and bitwise operators across all of its numeric primitive types, as well as providing portable, efficient implementations of a comprehensive collection of standard mathematical functions.\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Arithmetic-Operators-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Arithmetic Operators\",\n    \"category\": \"section\",\n    \"text\": \"The following arithmetic operators are supported on all primitive numeric types:Expression Name Description\\n+x unary plus the identity operation\\n-x unary minus maps values to their additive inverses\\nx + y binary plus performs addition\\nx - y binary minus performs subtraction\\nx * y times performs multiplication\\nx / y divide performs division\\nx \\\\ y inverse divide equivalent to y / x\\nx ^ y power raises x to the yth power\\nx % y remainder equivalent to rem(x,y)as well as the negation on Bool types:Expression Name Description\\n!x negation changes true to false and vice versaJulia's promotion system makes arithmetic operations on mixtures of argument types \\\"just work\\\" naturally and automatically. See Conversion and Promotion for details of the promotion system.Here are some simple examples using arithmetic operators:julia> 1 + 2 + 3\\n6\\n\\njulia> 1 - 2\\n-1\\n\\njulia> 3*2/12\\n0.5(By convention, we tend to space operators more tightly if they get applied before other nearby operators. For instance, we would generally write -x + 2 to reflect that first x gets negated, and then 2 is added to that result.)\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Bitwise-Operators-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Bitwise Operators\",\n    \"category\": \"section\",\n    \"text\": \"The following bitwise operators are supported on all primitive integer types:Expression Name\\n~x bitwise not\\nx & y bitwise and\\nx | y bitwise or\\nx \u22bb y bitwise xor (exclusive or)\\nx >>> y logical shift right\\nx >> y arithmetic shift right\\nx << y logical/arithmetic shift leftHere are some examples with bitwise operators:julia> ~123\\n-124\\n\\njulia> 123 & 234\\n106\\n\\njulia> 123 | 234\\n251\\n\\njulia> 123 \u22bb 234\\n145\\n\\njulia> xor(123, 234)\\n145\\n\\njulia> ~UInt32(123)\\n0xffffff84\\n\\njulia> ~UInt8(123)\\n0x84\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Updating-operators-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Updating operators\",\n    \"category\": \"section\",\n    \"text\": \"Every binary arithmetic and bitwise operator also has an updating version that assigns the result of the operation back into its left operand. The updating version of the binary operator is formed by placing a = immediately after the operator. For example, writing x += 3 is equivalent to writing x = x + 3:julia> x = 1\\n1\\n\\njulia> x += 3\\n4\\n\\njulia> x\\n4The updating versions of all the binary arithmetic and bitwise operators are:+=  -=  *=  /=  \\\\=  \u00f7=  %=  ^=  &=  |=  \u22bb=  >>>=  >>=  <<=note: Note\\nAn updating operator rebinds the variable on the left-hand side. As a result, the type of the variable may change.julia> x = 0x01; typeof(x)\\nUInt8\\n\\njulia> x *= 2 # Same as x = x * 2\\n2\\n\\njulia> typeof(x)\\nInt64\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#man-dot-operators-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Vectorized \\\"dot\\\" operators\",\n    \"category\": \"section\",\n    \"text\": \"For every binary operation like ^, there is a corresponding \\\"dot\\\" operation .^ that is automatically defined to perform ^ element-by-element on arrays. For example, [1,2,3] ^ 3 is not defined, since there is no standard mathematical meaning to \\\"cubing\\\" an array, but [1,2,3] .^ 3 is defined as computing the elementwise (or \\\"vectorized\\\") result [1^3, 2^3, 3^3].  Similarly for unary operators like ! or \u221a, there is a corresponding .\u221a that applies the operator elementwise.julia> [1,2,3] .^ 3\\n3-element Array{Int64,1}:\\n  1\\n  8\\n 27More specifically, a .^ b is parsed as the \\\"dot\\\" call (^).(a,b), which performs a broadcast operation: it can combine arrays and scalars, arrays of the same size (performing the operation elementwise), and even arrays of different shapes (e.g. combining row and column vectors to produce a matrix). Moreover, like all vectorized \\\"dot calls,\\\" these \\\"dot operators\\\" are fusing. For example, if you compute 2 .* A.^2 .+ sin.(A) (or equivalently @. 2A^2 + sin(A), using the @. macro) for an array A, it performs a single loop over A, computing 2a^2 + sin(a) for each element of A. In particular, nested dot calls like f.(g.(x)) are fused, and \\\"adjacent\\\" binary operators like x .+ 3 .* x.^2 are equivalent to nested dot calls (+).(x, (*).(3, (^).(x, 2))).Furthermore, \\\"dotted\\\" updating operators like a .+= b (or @. a += b) are parsed as a .= a .+ b, where .= is a fused in-place assignment operation (see the dot syntax documentation).Note the dot syntax is also applicable to user-defined operators. For example, if you define \u2297(A,B) = kron(A,B) to give a convenient infix syntax A \u2297 B for Kronecker products (kron), then [A,B] .\u2297 [C,D] will compute [A\u2297C, B\u2297D] with no additional coding.\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Numeric-Comparisons-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Numeric Comparisons\",\n    \"category\": \"section\",\n    \"text\": \"Standard comparison operations are defined for all the primitive numeric types:Operator Name\\n== equality\\n!=, \u2260 inequality\\n< less than\\n<=, \u2264 less than or equal to\\n> greater than\\n>=, \u2265 greater than or equal toHere are some simple examples:julia> 1 == 1\\ntrue\\n\\njulia> 1 == 2\\nfalse\\n\\njulia> 1 != 2\\ntrue\\n\\njulia> 1 == 1.0\\ntrue\\n\\njulia> 1 < 2\\ntrue\\n\\njulia> 1.0 > 3\\nfalse\\n\\njulia> 1 >= 1.0\\ntrue\\n\\njulia> -1 <= 1\\ntrue\\n\\njulia> -1 <= -1\\ntrue\\n\\njulia> -1 <= -2\\nfalse\\n\\njulia> 3 < -0.5\\nfalseIntegers are compared in the standard manner \u2013 by comparison of bits. Floating-point numbers are compared according to the IEEE 754 standard:Finite numbers are ordered in the usual manner.\\nPositive zero is equal but not greater than negative zero.\\nInf is equal to itself and greater than everything else except NaN.\\n-Inf is equal to itself and less then everything else except NaN.\\nNaN is not equal to, not less than, and not greater than anything, including itself.The last point is potentially surprising and thus worth noting:julia> NaN == NaN\\nfalse\\n\\njulia> NaN != NaN\\ntrue\\n\\njulia> NaN < NaN\\nfalse\\n\\njulia> NaN > NaN\\nfalseand can cause especial headaches with Arrays:julia> [1 NaN] == [1 NaN]\\nfalseJulia provides additional functions to test numbers for special values, which can be useful in situations like hash key comparisons:Function Tests if\\nisequal(x, y) x and y are identical\\nisfinite(x) x is a finite number\\nisinf(x) x is infinite\\nisnan(x) x is not a numberisequal() considers NaNs equal to each other:julia> isequal(NaN, NaN)\\ntrue\\n\\njulia> isequal([1 NaN], [1 NaN])\\ntrue\\n\\njulia> isequal(NaN, NaN32)\\ntrueisequal() can also be used to distinguish signed zeros:julia> -0.0 == 0.0\\ntrue\\n\\njulia> isequal(-0.0, 0.0)\\nfalseMixed-type comparisons between signed integers, unsigned integers, and floats can be tricky. A great deal of care has been taken to ensure that Julia does them correctly.For other types, isequal() defaults to calling ==(), so if you want to define equality for your own types then you only need to add a ==() method.  If you define your own equality function, you should probably define a corresponding hash() method to ensure that isequal(x,y) implies hash(x) == hash(y).\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Chaining-comparisons-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Chaining comparisons\",\n    \"category\": \"section\",\n    \"text\": \"Unlike most languages, with the notable exception of Python, comparisons can be arbitrarily chained:julia> 1 < 2 <= 2 < 3 == 3 > 2 >= 1 == 1 < 3 != 5\\ntrueChaining comparisons is often quite convenient in numerical code. Chained comparisons use the && operator for scalar comparisons, and the & operator for elementwise comparisons, which allows them to work on arrays. For example, 0 .< A .< 1 gives a boolean array whose entries are true where the corresponding elements of A are between 0 and 1.Note the evaluation behavior of chained comparisons:julia> v(x) = (println(x); x)\\nv (generic function with 1 method)\\n\\njulia> v(1) < v(2) <= v(3)\\n2\\n1\\n3\\ntrue\\n\\njulia> v(1) > v(2) <= v(3)\\n2\\n1\\nfalseThe middle expression is only evaluated once, rather than twice as it would be if the expression were written as v(1) < v(2) && v(2) <= v(3). However, the order of evaluations in a chained comparison is undefined. It is strongly recommended not to use expressions with side effects (such as printing) in chained comparisons. If side effects are required, the short-circuit && operator should be used explicitly (see Short-Circuit Evaluation).\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Elementary-Functions-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Elementary Functions\",\n    \"category\": \"section\",\n    \"text\": \"Julia provides a comprehensive collection of mathematical functions and operators. These mathematical operations are defined over as broad a class of numerical values as permit sensible definitions, including integers, floating-point numbers, rationals, and complex numbers, wherever such definitions make sense.Moreover, these functions (like any Julia function) can be applied in \\\"vectorized\\\" fashion to arrays and other collections with the dot syntax f.(A), e.g. sin.(A) will compute the sine of each element of an array A.\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Operator-Precedence-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Operator Precedence\",\n    \"category\": \"section\",\n    \"text\": \"Julia applies the following order of operations, from highest precedence to lowest:Category Operators\\nSyntax . followed by ::\\nExponentiation ^\\nFractions //\\nMultiplication * / % & \\\\\\nBitshifts << >> >>>\\nAddition + - | \u22bb\\nSyntax : .. followed by |>\\nComparisons > < >= <= == === != !== <:\\nControl flow && followed by || followed by ?\\nAssignments = += -= *= /= //= \\\\= ^= \u00f7= %= |= &= \u22bb= <<= >>= >>>=For a complete list of every Julia operator's precedence, see the top of this file: src/julia-parser.scmYou can also find the numerical precedence for any given operator via the built-in function Base.operator_precedence, where higher numbers take precedence:julia> Base.operator_precedence(:+), Base.operator_precedence(:*), Base.operator_precedence(:.)\\n(9, 11, 15)\\n\\njulia> Base.operator_precedence(:+=), Base.operator_precedence(:(=))  # (Note the necessary parens on `:(=)`)\\n(1, 1)\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Numerical-Conversions-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Numerical Conversions\",\n    \"category\": \"section\",\n    \"text\": \"Julia supports three forms of numerical conversion, which differ in their handling of inexact conversions.The notation T(x) or convert(T,x) converts x to a value of type T.\\nIf T is a floating-point type, the result is the nearest representable value, which could be positive or negative infinity.\\nIf T is an integer type, an InexactError is raised if x is not representable by T.\\nx % T converts an integer x to a value of integer type T congruent to x modulo 2^n, where n is the number of bits in T. In other words, the binary representation is truncated to fit.\\nThe Rounding functions take a type T as an optional argument. For example, round(Int,x) is a shorthand for Int(round(x)).The following examples show the different forms.julia> Int8(127)\\n127\\n\\njulia> Int8(128)\\nERROR: InexactError()\\nStacktrace:\\n [1] Int8(::Int64) at ./sysimg.jl:77\\n\\njulia> Int8(127.0)\\n127\\n\\njulia> Int8(3.14)\\nERROR: InexactError()\\nStacktrace:\\n [1] convert(::Type{Int8}, ::Float64) at ./float.jl:658\\n [2] Int8(::Float64) at ./sysimg.jl:77\\n\\njulia> Int8(128.0)\\nERROR: InexactError()\\nStacktrace:\\n [1] convert(::Type{Int8}, ::Float64) at ./float.jl:658\\n [2] Int8(::Float64) at ./sysimg.jl:77\\n\\njulia> 127 % Int8\\n127\\n\\njulia> 128 % Int8\\n-128\\n\\njulia> round(Int8,127.4)\\n127\\n\\njulia> round(Int8,127.6)\\nERROR: InexactError()\\nStacktrace:\\n [1] trunc(::Type{Int8}, ::Float64) at ./float.jl:651\\n [2] round(::Type{Int8}, ::Float64) at ./float.jl:337See Conversion and Promotion for how to define your own conversions and promotions.\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Rounding-functions-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Rounding functions\",\n    \"category\": \"section\",\n    \"text\": \"Function Description Return type\\nround(x) round x to the nearest integer typeof(x)\\nround(T, x) round x to the nearest integer T\\nfloor(x) round x towards -Inf typeof(x)\\nfloor(T, x) round x towards -Inf T\\nceil(x) round x towards +Inf typeof(x)\\nceil(T, x) round x towards +Inf T\\ntrunc(x) round x towards zero typeof(x)\\ntrunc(T, x) round x towards zero T\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Division-functions-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Division functions\",\n    \"category\": \"section\",\n    \"text\": \"Function Description\\ndiv(x,y) truncated division; quotient rounded towards zero\\nfld(x,y) floored division; quotient rounded towards -Inf\\ncld(x,y) ceiling division; quotient rounded towards +Inf\\nrem(x,y) remainder; satisfies x == div(x,y)*y + rem(x,y); sign matches x\\nmod(x,y) modulus; satisfies x == fld(x,y)*y + mod(x,y); sign matches y\\nmod1(x,y) mod() with offset 1; returns r\u2208(0,y] for y>0 or r\u2208[y,0) for y<0, where mod(r, y) == mod(x, y)\\nmod2pi(x) modulus with respect to 2pi;  0 <= mod2pi(x) \u00a0  < 2pi\\ndivrem(x,y) returns (div(x,y),rem(x,y))\\nfldmod(x,y) returns (fld(x,y),mod(x,y))\\ngcd(x,y...) greatest positive common divisor of x, y,...\\nlcm(x,y...) least positive common multiple of x, y,...\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Sign-and-absolute-value-functions-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Sign and absolute value functions\",\n    \"category\": \"section\",\n    \"text\": \"Function Description\\nabs(x) a positive value with the magnitude of x\\nabs2(x) the squared magnitude of x\\nsign(x) indicates the sign of x, returning -1, 0, or +1\\nsignbit(x) indicates whether the sign bit is on (true) or off (false)\\ncopysign(x,y) a value with the magnitude of x and the sign of y\\nflipsign(x,y) a value with the magnitude of x and the sign of x*y\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Powers,-logs-and-roots-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Powers, logs and roots\",\n    \"category\": \"section\",\n    \"text\": \"Function Description\\nsqrt(x), \u221ax square root of x\\ncbrt(x), \u221bx cube root of x\\nhypot(x,y) hypotenuse of right-angled triangle with other sides of length x and y\\nexp(x) natural exponential function at x\\nexpm1(x) accurate exp(x)-1 for x near zero\\nldexp(x,n) x*2^n computed efficiently for integer values of n\\nlog(x) natural logarithm of x\\nlog(b,x) base b logarithm of x\\nlog2(x) base 2 logarithm of x\\nlog10(x) base 10 logarithm of x\\nlog1p(x) accurate log(1+x) for x near zero\\nexponent(x) binary exponent of x\\nsignificand(x) binary significand (a.k.a. mantissa) of a floating-point number xFor an overview of why functions like hypot(), expm1(), and log1p() are necessary and useful, see John D. Cook's excellent pair of blog posts on the subject: expm1, log1p, erfc, and hypot.\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Trigonometric-and-hyperbolic-functions-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Trigonometric and hyperbolic functions\",\n    \"category\": \"section\",\n    \"text\": \"All the standard trigonometric and hyperbolic functions are also defined:sin    cos    tan    cot    sec    csc\\nsinh   cosh   tanh   coth   sech   csch\\nasin   acos   atan   acot   asec   acsc\\nasinh  acosh  atanh  acoth  asech  acsch\\nsinc   cosc   atan2These are all single-argument functions, with the exception of atan2, which gives the angle in radians between the x-axis and the point specified by its arguments, interpreted as x and y coordinates.Additionally, sinpi(x) and cospi(x) are provided for more accurate computations of sin(pi*x) and cos(pi*x) respectively.In order to compute trigonometric functions with degrees instead of radians, suffix the function with d. For example, sind(x) computes the sine of x where x is specified in degrees. The complete list of trigonometric functions with degree variants is:sind   cosd   tand   cotd   secd   cscd\\nasind  acosd  atand  acotd  asecd  acscd\"\n},\n\n{\n    \"location\": \"manual/mathematical-operations.html#Special-functions-1\",\n    \"page\": \"Mathematical Operations and Elementary Functions\",\n    \"title\": \"Special functions\",\n    \"category\": \"section\",\n    \"text\": \"Function Description\\ngamma(x) gamma function at x\\nlgamma(x) accurate log(gamma(x)) for large x\\nlfact(x) accurate log(factorial(x)) for large x; same as lgamma(x+1) for x > 1, zero otherwise\\nbeta(x,y) beta function at x,y\\nlbeta(x,y) accurate log(beta(x,y)) for large x or y\"\n},\n\n{\n    \"location\": \"manual/complex-and-rational-numbers.html#\",\n    \"page\": \"Complex and Rational Numbers\",\n    \"title\": \"Complex and Rational Numbers\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/complex-and-rational-numbers.html#Complex-and-Rational-Numbers-1\",\n    \"page\": \"Complex and Rational Numbers\",\n    \"title\": \"Complex and Rational Numbers\",\n    \"category\": \"section\",\n    \"text\": \"Julia ships with predefined types representing both complex and rational numbers, and supports all standard Mathematical Operations and Elementary Functions on them. Conversion and Promotion are defined so that operations on any combination of predefined numeric types, whether primitive or composite, behave as expected.\"\n},\n\n{\n    \"location\": \"manual/complex-and-rational-numbers.html#Complex-Numbers-1\",\n    \"page\": \"Complex and Rational Numbers\",\n    \"title\": \"Complex Numbers\",\n    \"category\": \"section\",\n    \"text\": \"The global constant im is bound to the complex number i, representing the principal square root of -1. It was deemed harmful to co-opt the name i for a global constant, since it is such a popular index variable name. Since Julia allows numeric literals to be juxtaposed with identifiers as coefficients, this binding suffices to provide convenient syntax for complex numbers, similar to the traditional mathematical notation:julia> 1 + 2im\\n1 + 2imYou can perform all the standard arithmetic operations with complex numbers:julia> (1 + 2im)*(2 - 3im)\\n8 + 1im\\n\\njulia> (1 + 2im)/(1 - 2im)\\n-0.6 + 0.8im\\n\\njulia> (1 + 2im) + (1 - 2im)\\n2 + 0im\\n\\njulia> (-3 + 2im) - (5 - 1im)\\n-8 + 3im\\n\\njulia> (-1 + 2im)^2\\n-3 - 4im\\n\\njulia> (-1 + 2im)^2.5\\n2.7296244647840084 - 6.960664459571898im\\n\\njulia> (-1 + 2im)^(1 + 1im)\\n-0.27910381075826657 + 0.08708053414102428im\\n\\njulia> 3(2 - 5im)\\n6 - 15im\\n\\njulia> 3(2 - 5im)^2\\n-63 - 60im\\n\\njulia> 3(2 - 5im)^-1.0\\n0.20689655172413796 + 0.5172413793103449imThe promotion mechanism ensures that combinations of operands of different types just work:julia> 2(1 - 1im)\\n2 - 2im\\n\\njulia> (2 + 3im) - 1\\n1 + 3im\\n\\njulia> (1 + 2im) + 0.5\\n1.5 + 2.0im\\n\\njulia> (2 + 3im) - 0.5im\\n2.0 + 2.5im\\n\\njulia> 0.75(1 + 2im)\\n0.75 + 1.5im\\n\\njulia> (2 + 3im) / 2\\n1.0 + 1.5im\\n\\njulia> (1 - 3im) / (2 + 2im)\\n-0.5 - 1.0im\\n\\njulia> 2im^2\\n-2 + 0im\\n\\njulia> 1 + 3/4im\\n1.0 - 0.75imNote that 3/4im == 3/(4*im) == -(3/4*im), since a literal coefficient binds more tightly than division.Standard functions to manipulate complex values are provided:julia> z = 1 + 2im\\n1 + 2im\\n\\njulia> real(1 + 2im) # real part of z\\n1\\n\\njulia> imag(1 + 2im) # imaginary part of z\\n2\\n\\njulia> conj(1 + 2im) # complex conjugate of z\\n1 - 2im\\n\\njulia> abs(1 + 2im) # absolute value of z\\n2.23606797749979\\n\\njulia> abs2(1 + 2im) # squared absolute value\\n5\\n\\njulia> angle(1 + 2im) # phase angle in radians\\n1.1071487177940904As usual, the absolute value (abs()) of a complex number is its distance from zero. abs2() gives the square of the absolute value, and is of particular use for complex numbers where it avoids taking a square root. angle() returns the phase angle in radians (also known as the argument or arg function). The full gamut of other Elementary Functions is also defined for complex numbers:julia> sqrt(1im)\\n0.7071067811865476 + 0.7071067811865475im\\n\\njulia> sqrt(1 + 2im)\\n1.272019649514069 + 0.7861513777574233im\\n\\njulia> cos(1 + 2im)\\n2.0327230070196656 - 3.0518977991518im\\n\\njulia> exp(1 + 2im)\\n-1.1312043837568135 + 2.4717266720048188im\\n\\njulia> sinh(1 + 2im)\\n-0.4890562590412937 + 1.4031192506220405imNote that mathematical functions typically return real values when applied to real numbers and complex values when applied to complex numbers. For example, sqrt() behaves differently when applied to -1 versus -1 + 0im even though -1 == -1 + 0im:julia> sqrt(-1)\\nERROR: DomainError:\\nsqrt will only return a complex result if called with a complex argument. Try sqrt(complex(x)).\\nStacktrace:\\n [1] sqrt(::Int64) at ./math.jl:434\\n\\njulia> sqrt(-1 + 0im)\\n0.0 + 1.0imThe literal numeric coefficient notation does not work when constructing a complex number from variables. Instead, the multiplication must be explicitly written out:julia> a = 1; b = 2; a + b*im\\n1 + 2imHowever, this is not recommended; Use the complex() function instead to construct a complex value directly from its real and imaginary parts:julia> a = 1; b = 2; complex(a, b)\\n1 + 2imThis construction avoids the multiplication and addition operations.Inf and NaN propagate through complex numbers in the real and imaginary parts of a complex number as described in the Special floating-point values section:julia> 1 + Inf*im\\n1.0 + Inf*im\\n\\njulia> 1 + NaN*im\\n1.0 + NaN*im\"\n},\n\n{\n    \"location\": \"manual/complex-and-rational-numbers.html#Rational-Numbers-1\",\n    \"page\": \"Complex and Rational Numbers\",\n    \"title\": \"Rational Numbers\",\n    \"category\": \"section\",\n    \"text\": \"Julia has a rational number type to represent exact ratios of integers. Rationals are constructed using the // operator:julia> 2//3\\n2//3If the numerator and denominator of a rational have common factors, they are reduced to lowest terms such that the denominator is non-negative:julia> 6//9\\n2//3\\n\\njulia> -4//8\\n-1//2\\n\\njulia> 5//-15\\n-1//3\\n\\njulia> -4//-12\\n1//3This normalized form for a ratio of integers is unique, so equality of rational values can be tested by checking for equality of the numerator and denominator. The standardized numerator and denominator of a rational value can be extracted using the numerator() and denominator() functions:julia> numerator(2//3)\\n2\\n\\njulia> denominator(2//3)\\n3Direct comparison of the numerator and denominator is generally not necessary, since the standard arithmetic and comparison operations are defined for rational values:julia> 2//3 == 6//9\\ntrue\\n\\njulia> 2//3 == 9//27\\nfalse\\n\\njulia> 3//7 < 1//2\\ntrue\\n\\njulia> 3//4 > 2//3\\ntrue\\n\\njulia> 2//4 + 1//6\\n2//3\\n\\njulia> 5//12 - 1//4\\n1//6\\n\\njulia> 5//8 * 3//12\\n5//32\\n\\njulia> 6//5 / 10//7\\n21//25Rationals can be easily converted to floating-point numbers:julia> float(3//4)\\n0.75Conversion from rational to floating-point respects the following identity for any integral values of a and b, with the exception of the case a == 0 and b == 0:julia> a = 1; b = 2;\\n\\njulia> isequal(float(a//b), a/b)\\ntrueConstructing infinite rational values is acceptable:julia> 5//0\\n1//0\\n\\njulia> -3//0\\n-1//0\\n\\njulia> typeof(ans)\\nRational{Int64}Trying to construct a NaN rational value, however, is not:julia> 0//0\\nERROR: ArgumentError: invalid rational: zero(Int64)//zero(Int64)\\nStacktrace:\\n [1] Rational{Int64}(::Int64, ::Int64) at ./rational.jl:13\\n [2] //(::Int64, ::Int64) at ./rational.jl:40As usual, the promotion system makes interactions with other numeric types effortless:julia> 3//5 + 1\\n8//5\\n\\njulia> 3//5 - 0.5\\n0.09999999999999998\\n\\njulia> 2//7 * (1 + 2im)\\n2//7 + 4//7*im\\n\\njulia> 2//7 * (1.5 + 2im)\\n0.42857142857142855 + 0.5714285714285714im\\n\\njulia> 3//2 / (1 + 2im)\\n3//10 - 3//5*im\\n\\njulia> 1//2 + 2im\\n1//2 + 2//1*im\\n\\njulia> 1 + 2//3im\\n1//1 - 2//3*im\\n\\njulia> 0.5 == 1//2\\ntrue\\n\\njulia> 0.33 == 1//3\\nfalse\\n\\njulia> 0.33 < 1//3\\ntrue\\n\\njulia> 1//3 - 0.33\\n0.0033333333333332993\"\n},\n\n{\n    \"location\": \"manual/strings.html#\",\n    \"page\": \"Strings\",\n    \"title\": \"Strings\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/strings.html#man-strings-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Strings\",\n    \"category\": \"section\",\n    \"text\": \"Strings are finite sequences of characters. Of course, the real trouble comes when one asks what a character is. The characters that English speakers are familiar with are the letters A, B, C, etc., together with numerals and common punctuation symbols. These characters are standardized together with a mapping to integer values between 0 and 127 by the ASCII standard. There are, of course, many other characters used in non-English languages, including variants of the ASCII characters with accents and other modifications, related scripts such as Cyrillic and Greek, and scripts completely unrelated to ASCII and English, including Arabic, Chinese, Hebrew, Hindi, Japanese, and Korean. The Unicode standard tackles the complexities of what exactly a character is, and is generally accepted as the definitive standard addressing this problem. Depending on your needs, you can either ignore these complexities entirely and just pretend that only ASCII characters exist, or you can write code that can handle any of the characters or encodings that one may encounter when handling non-ASCII text. Julia makes dealing with plain ASCII text simple and efficient, and handling Unicode is as simple and efficient as possible. In particular, you can write C-style string code to process ASCII strings, and they will work as expected, both in terms of performance and semantics. If such code encounters non-ASCII text, it will gracefully fail with a clear error message, rather than silently introducing corrupt results. When this happens, modifying the code to handle non-ASCII data is straightforward.There are a few noteworthy high-level features about Julia's strings:The built-in concrete type used for strings (and string literals) in Julia is String. This supports the full range of Unicode characters via the UTF-8 encoding. (A transcode() function is provided to convert to/from other Unicode encodings.)\\nAll string types are subtypes of the abstract type AbstractString, and external packages define additional AbstractString subtypes (e.g. for other encodings).  If you define a function expecting a string argument, you should declare the type as AbstractString in order to accept any string type.\\nLike C and Java, but unlike most dynamic languages, Julia has a first-class type representing a single character, called Char. This is just a special kind of 32-bit primitive type whose numeric value represents a Unicode code point.\\nAs in Java, strings are immutable: the value of an AbstractString object cannot be changed. To construct a different string value, you construct a new string from parts of other strings.\\nConceptually, a string is a partial function from indices to characters: for some index values, no character value is returned, and instead an exception is thrown. This allows for efficient indexing into strings by the byte index of an encoded representation rather than by a character index, which cannot be implemented both efficiently and simply for variable-width encodings of Unicode strings.\"\n},\n\n{\n    \"location\": \"manual/strings.html#man-characters-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Characters\",\n    \"category\": \"section\",\n    \"text\": \"A Char value represents a single character: it is just a 32-bit primitive type with a special literal representation and appropriate arithmetic behaviors, whose numeric value is interpreted as a Unicode code point. Here is how Char values are input and shown:julia> 'x'\\n'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)\\n\\njulia> typeof(ans)\\nCharYou can convert a Char to its integer value, i.e. code point, easily:julia> Int('x')\\n120\\n\\njulia> typeof(ans)\\nInt64On 32-bit architectures, typeof(ans) will be Int32. You can convert an integer value back to a Char just as easily:julia> Char(120)\\n'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)Not all integer values are valid Unicode code points, but for performance, the Char() conversion does not check that every character value is valid. If you want to check that each converted value is a valid code point, use the isvalid() function:julia> Char(0x110000)\\n'\\\\U110000': Unicode U+110000 (category Cn: Other, not assigned)\\n\\njulia> isvalid(Char, 0x110000)\\nfalseAs of this writing, the valid Unicode code points are U+00 through U+d7ff and U+e000 through U+10ffff. These have not all been assigned intelligible meanings yet, nor are they necessarily interpretable by applications, but all of these values are considered to be valid Unicode characters.You can input any Unicode character in single quotes using \\\\u followed by up to four hexadecimal digits or \\\\U followed by up to eight hexadecimal digits (the longest valid value only requires six):julia> '\\\\u0'\\n'\\\\0': ASCII/Unicode U+0000 (category Cc: Other, control)\\n\\njulia> '\\\\u78'\\n'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)\\n\\njulia> '\\\\u2200'\\n'\u2200': Unicode U+2200 (category Sm: Symbol, math)\\n\\njulia> '\\\\U10ffff'\\n'\\\\U10ffff': Unicode U+10ffff (category Cn: Other, not assigned)Julia uses your system's locale and language settings to determine which characters can be printed as-is and which must be output using the generic, escaped \\\\u or \\\\U input forms. In addition to these Unicode escape forms, all of C's traditional escaped input forms can also be used:julia> Int('\\\\0')\\n0\\n\\njulia> Int('\\\\t')\\n9\\n\\njulia> Int('\\\\n')\\n10\\n\\njulia> Int('\\\\e')\\n27\\n\\njulia> Int('\\\\x7f')\\n127\\n\\njulia> Int('\\\\177')\\n127\\n\\njulia> Int('\\\\xff')\\n255You can do comparisons and a limited amount of arithmetic with Char values:julia> 'A' < 'a'\\ntrue\\n\\njulia> 'A' <= 'a' <= 'Z'\\nfalse\\n\\njulia> 'A' <= 'X' <= 'Z'\\ntrue\\n\\njulia> 'x' - 'a'\\n23\\n\\njulia> 'A' + 1\\n'B': ASCII/Unicode U+0042 (category Lu: Letter, uppercase)\"\n},\n\n{\n    \"location\": \"manual/strings.html#String-Basics-1\",\n    \"page\": \"Strings\",\n    \"title\": \"String Basics\",\n    \"category\": \"section\",\n    \"text\": \"String literals are delimited by double quotes or triple double quotes:julia> str = \\\"Hello, world.\\\\n\\\"\\n\\\"Hello, world.\\\\n\\\"\\n\\njulia> \\\"\\\"\\\"Contains \\\"quote\\\" characters\\\"\\\"\\\"\\n\\\"Contains \\\\\\\"quote\\\\\\\" characters\\\"If you want to extract a character from a string, you index into it:julia> str[1]\\n'H': ASCII/Unicode U+0048 (category Lu: Letter, uppercase)\\n\\njulia> str[6]\\n',': ASCII/Unicode U+002c (category Po: Punctuation, other)\\n\\njulia> str[end]\\n'\\\\n': ASCII/Unicode U+000a (category Cc: Other, control)All indexing in Julia is 1-based: the first element of any integer-indexed object is found at index 1. (As we will see below, this does not necessarily mean that the last element is found at index n, where n is the length of the string.)In any indexing expression, the keyword end can be used as a shorthand for the last index (computed by endof(str)). You can perform arithmetic and other operations with end, just like a normal value:julia> str[end-1]\\n'.': ASCII/Unicode U+002e (category Po: Punctuation, other)\\n\\njulia> str[end\u00f72]\\n' ': ASCII/Unicode U+0020 (category Zs: Separator, space)Using an index less than 1 or greater than end raises an error:julia> str[0]\\nERROR: BoundsError: attempt to access \\\"Hello, world.\\\\n\\\"\\n  at index [0]\\n[...]\\n\\njulia> str[end+1]\\nERROR: BoundsError: attempt to access \\\"Hello, world.\\\\n\\\"\\n  at index [15]\\n[...]You can also extract a substring using range indexing:julia> str[4:9]\\n\\\"lo, wo\\\"Notice that the expressions str[k] and str[k:k] do not give the same result:julia> str[6]\\n',': ASCII/Unicode U+002c (category Po: Punctuation, other)\\n\\njulia> str[6:6]\\n\\\",\\\"The former is a single character value of type Char, while the latter is a string value that happens to contain only a single character. In Julia these are very different things.\"\n},\n\n{\n    \"location\": \"manual/strings.html#Unicode-and-UTF-8-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Unicode and UTF-8\",\n    \"category\": \"section\",\n    \"text\": \"Julia fully supports Unicode characters and strings. As discussed above, in character literals, Unicode code points can be represented using Unicode \\\\u and \\\\U escape sequences, as well as all the standard C escape sequences. These can likewise be used to write string literals:julia> s = \\\"\\\\u2200 x \\\\u2203 y\\\"\\n\\\"\u2200 x \u2203 y\\\"Whether these Unicode characters are displayed as escapes or shown as special characters depends on your terminal's locale settings and its support for Unicode. String literals are encoded using the UTF-8 encoding. UTF-8 is a variable-width encoding, meaning that not all characters are encoded in the same number of bytes. In UTF-8, ASCII characters \u2013 i.e. those with code points less than 0x80 (128) \u2013 are encoded as they are in ASCII, using a single byte, while code points 0x80 and above are encoded using multiple bytes \u2013 up to four per character. This means that not every byte index into a UTF-8 string is necessarily a valid index for a character. If you index into a string at such an invalid byte index, an error is thrown:julia> s[1]\\n'\u2200': Unicode U+2200 (category Sm: Symbol, math)\\n\\njulia> s[2]\\nERROR: UnicodeError: invalid character index\\n[...]\\n\\njulia> s[3]\\nERROR: UnicodeError: invalid character index\\n[...]\\n\\njulia> s[4]\\n' ': ASCII/Unicode U+0020 (category Zs: Separator, space)In this case, the character \u2200 is a three-byte character, so the indices 2 and 3 are invalid and the next character's index is 4; this next valid index can be computed by nextind(s,1), and the next index after that by nextind(s,4) and so on.Because of variable-length encodings, the number of characters in a string (given by length(s)) is not always the same as the last index. If you iterate through the indices 1 through endof(s) and index into s, the sequence of characters returned when errors aren't thrown is the sequence of characters comprising the string s. Thus we have the identity that length(s) <= endof(s), since each character in a string must have its own index. The following is an inefficient and verbose way to iterate through the characters of s:julia> for i = 1:endof(s)\\n           try\\n               println(s[i])\\n           catch\\n               # ignore the index error\\n           end\\n       end\\n\u2200\\n\\nx\\n\\n\u2203\\n\\nyThe blank lines actually have spaces on them. Fortunately, the above awkward idiom is unnecessary for iterating through the characters in a string, since you can just use the string as an iterable object, no exception handling required:julia> for c in s\\n           println(c)\\n       end\\n\u2200\\n\\nx\\n\\n\u2203\\n\\nyJulia uses the UTF-8 encoding by default, and support for new encodings can be added by packages. For example, the LegacyStrings.jl package implements UTF16String and UTF32String types. Additional discussion of other encodings and how to implement support for them is beyond the scope of this document for the time being. For further discussion of UTF-8 encoding issues, see the section below on byte array literals. The transcode() function is provided to convert data between the various UTF-xx encodings, primarily for working with external data and libraries.\"\n},\n\n{\n    \"location\": \"manual/strings.html#Concatenation-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Concatenation\",\n    \"category\": \"section\",\n    \"text\": \"One of the most common and useful string operations is concatenation:julia> greet = \\\"Hello\\\"\\n\\\"Hello\\\"\\n\\njulia> whom = \\\"world\\\"\\n\\\"world\\\"\\n\\njulia> string(greet, \\\", \\\", whom, \\\".\\\\n\\\")\\n\\\"Hello, world.\\\\n\\\"Julia also provides * for string concatenation:julia> greet * \\\", \\\" * whom * \\\".\\\\n\\\"\\n\\\"Hello, world.\\\\n\\\"While * may seem like a surprising choice to users of languages that provide + for string concatenation, this use of * has precedent in mathematics, particularly in abstract algebra.In mathematics, + usually denotes a commutative operation, where the order of the operands does not matter. An example of this is matrix addition, where A + B == B + A for any matrices A and B that have the same shape. In contrast, * typically denotes a noncommutative operation, where the order of the operands does matter. An example of this is matrix multiplication, where in general A * B != B * A. As with matrix multiplication, string concatenation is noncommutative: greet * whom != whom * greet. As such, * is a more natural choice for an infix string concatenation operator, consistent with common mathematical use.More precisely, the set of all finite-length strings S together with the string concatenation operator * forms a free monoid (S, *). The identity element of this set is the empty string, \\\"\\\". Whenever a free monoid is not commutative, the operation is typically represented as \\\\cdot, *, or a similar symbol, rather than +, which as stated usually implies commutativity.\"\n},\n\n{\n    \"location\": \"manual/strings.html#string-interpolation-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Interpolation\",\n    \"category\": \"section\",\n    \"text\": \"Constructing strings using concatenation can become a bit cumbersome, however. To reduce the need for these verbose calls to string() or repeated multiplications, Julia allows interpolation into string literals using $, as in Perl:julia> \\\"$greet, $whom.\\\\n\\\"\\n\\\"Hello, world.\\\\n\\\"This is more readable and convenient and equivalent to the above string concatenation \u2013 the system rewrites this apparent single string literal into a concatenation of string literals with variables.The shortest complete expression after the $ is taken as the expression whose value is to be interpolated into the string. Thus, you can interpolate any expression into a string using parentheses:julia> \\\"1 + 2 = $(1 + 2)\\\"\\n\\\"1 + 2 = 3\\\"Both concatenation and string interpolation call string() to convert objects into string form. Most non-AbstractString objects are converted to strings closely corresponding to how they are entered as literal expressions:julia> v = [1,2,3]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> \\\"v: $v\\\"\\n\\\"v: [1, 2, 3]\\\"string() is the identity for AbstractString and Char values, so these are interpolated into strings as themselves, unquoted and unescaped:julia> c = 'x'\\n'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)\\n\\njulia> \\\"hi, $c\\\"\\n\\\"hi, x\\\"To include a literal $ in a string literal, escape it with a backslash:julia> print(\\\"I have \\\\$100 in my account.\\\\n\\\")\\nI have $100 in my account.\"\n},\n\n{\n    \"location\": \"manual/strings.html#Triple-Quoted-String-Literals-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Triple-Quoted String Literals\",\n    \"category\": \"section\",\n    \"text\": \"When strings are created using triple-quotes (\\\"\\\"\\\"...\\\"\\\"\\\") they have some special behavior that can be useful for creating longer blocks of text. First, if the opening \\\"\\\"\\\" is followed by a newline, the newline is stripped from the resulting string.\\\"\\\"\\\"hello\\\"\\\"\\\"is equivalent to\\\"\\\"\\\"\\nhello\\\"\\\"\\\"but\\\"\\\"\\\"\\n\\nhello\\\"\\\"\\\"will contain a literal newline at the beginning. Trailing whitespace is left unaltered. They can contain \\\" symbols without escaping. Triple-quoted strings are also dedented to the level of the least-indented line. This is useful for defining strings within code that is indented. For example:julia> str = \\\"\\\"\\\"\\n           Hello,\\n           world.\\n         \\\"\\\"\\\"\\n\\\"  Hello,\\\\n  world.\\\\n\\\"In this case the final (empty) line before the closing \\\"\\\"\\\" sets the indentation level.Note that line breaks in literal strings, whether single- or triple-quoted, result in a newline (LF) character \\\\n in the string, even if your editor uses a carriage return \\\\r (CR) or CRLF combination to end lines. To include a CR in a string, use an explicit escape \\\\r; for example, you can enter the literal string \\\"a CRLF line ending\\\\r\\\\n\\\".\"\n},\n\n{\n    \"location\": \"manual/strings.html#Common-Operations-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Common Operations\",\n    \"category\": \"section\",\n    \"text\": \"You can lexicographically compare strings using the standard comparison operators:julia> \\\"abracadabra\\\" < \\\"xylophone\\\"\\ntrue\\n\\njulia> \\\"abracadabra\\\" == \\\"xylophone\\\"\\nfalse\\n\\njulia> \\\"Hello, world.\\\" != \\\"Goodbye, world.\\\"\\ntrue\\n\\njulia> \\\"1 + 2 = 3\\\" == \\\"1 + 2 = $(1 + 2)\\\"\\ntrueYou can search for the index of a particular character using the search() function:julia> search(\\\"xylophone\\\", 'x')\\n1\\n\\njulia> search(\\\"xylophone\\\", 'p')\\n5\\n\\njulia> search(\\\"xylophone\\\", 'z')\\n0You can start the search for a character at a given offset by providing a third argument:julia> search(\\\"xylophone\\\", 'o')\\n4\\n\\njulia> search(\\\"xylophone\\\", 'o', 5)\\n7\\n\\njulia> search(\\\"xylophone\\\", 'o', 8)\\n0You can use the contains() function to check if a substring is contained in a string:julia> contains(\\\"Hello, world.\\\", \\\"world\\\")\\ntrue\\n\\njulia> contains(\\\"Xylophon\\\", \\\"o\\\")\\ntrue\\n\\njulia> contains(\\\"Xylophon\\\", \\\"a\\\")\\nfalse\\n\\njulia> contains(\\\"Xylophon\\\", 'o')\\nERROR: MethodError: no method matching contains(::String, ::Char)\\nClosest candidates are:\\n  contains(!Matched::Function, ::Any, !Matched::Any) at reduce.jl:664\\n  contains(::AbstractString, !Matched::AbstractString) at strings/search.jl:378The last error is because 'o' is a character literal, and contains() is a generic function that looks for subsequences. To look for an element in a sequence, you must use in() instead.Two other handy string functions are repeat() and join():julia> repeat(\\\".:Z:.\\\", 10)\\n\\\".:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:..:Z:.\\\"\\n\\njulia> join([\\\"apples\\\", \\\"bananas\\\", \\\"pineapples\\\"], \\\", \\\", \\\" and \\\")\\n\\\"apples, bananas and pineapples\\\"Some other useful functions include:endof(str) gives the maximal (byte) index that can be used to index into str.\\nlength(str) the number of characters in str.\\ni = start(str) gives the first valid index at which a character can be found in str (typically 1).\\nc, j = next(str,i) returns next character at or after the index i and the next valid character index following that. With start() and endof(), can be used to iterate through the characters in str.\\nind2chr(str,i) gives the number of characters in str up to and including any at index i.\\nchr2ind(str,j) gives the index at which the jth character in str occurs.\"\n},\n\n{\n    \"location\": \"manual/strings.html#non-standard-string-literals-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Non-Standard String Literals\",\n    \"category\": \"section\",\n    \"text\": \"There are situations when you want to construct a string or use string semantics, but the behavior of the standard string construct is not quite what is needed. For these kinds of situations, Julia provides non-standard string literals. A non-standard string literal looks like a regular double-quoted string literal, but is immediately prefixed by an identifier, and doesn't behave quite like a normal string literal.  Regular expressions, byte array literals and version number literals, as described below, are some examples of non-standard string literals. Other examples are given in the Metaprogramming section.\"\n},\n\n{\n    \"location\": \"manual/strings.html#Regular-Expressions-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Regular Expressions\",\n    \"category\": \"section\",\n    \"text\": \"Julia has Perl-compatible regular expressions (regexes), as provided by the PCRE library. Regular expressions are related to strings in two ways: the obvious connection is that regular expressions are used to find regular patterns in strings; the other connection is that regular expressions are themselves input as strings, which are parsed into a state machine that can be used to efficiently search for patterns in strings. In Julia, regular expressions are input using non-standard string literals prefixed with various identifiers beginning with r. The most basic regular expression literal without any options turned on just uses r\\\"...\\\":julia> r\\\"^\\\\s*(?:#|$)\\\"\\nr\\\"^\\\\s*(?:#|$)\\\"\\n\\njulia> typeof(ans)\\nRegexTo check if a regex matches a string, use ismatch():julia> ismatch(r\\\"^\\\\s*(?:#|$)\\\", \\\"not a comment\\\")\\nfalse\\n\\njulia> ismatch(r\\\"^\\\\s*(?:#|$)\\\", \\\"# a comment\\\")\\ntrueAs one can see here, ismatch() simply returns true or false, indicating whether the given regex matches the string or not. Commonly, however, one wants to know not just whether a string matched, but also how it matched. To capture this information about a match, use the match() function instead:julia> match(r\\\"^\\\\s*(?:#|$)\\\", \\\"not a comment\\\")\\n\\njulia> match(r\\\"^\\\\s*(?:#|$)\\\", \\\"# a comment\\\")\\nRegexMatch(\\\"#\\\")If the regular expression does not match the given string, match() returns nothing \u2013 a special value that does not print anything at the interactive prompt. Other than not printing, it is a completely normal value and you can test for it programmatically:m = match(r\\\"^\\\\s*(?:#|$)\\\", line)\\nif m === nothing\\n    println(\\\"not a comment\\\")\\nelse\\n    println(\\\"blank or comment\\\")\\nendIf a regular expression does match, the value returned by match() is a RegexMatch object. These objects record how the expression matches, including the substring that the pattern matches and any captured substrings, if there are any. This example only captures the portion of the substring that matches, but perhaps we want to capture any non-blank text after the comment character. We could do the following:julia> m = match(r\\\"^\\\\s*(?:#\\\\s*(.*?)\\\\s*$|$)\\\", \\\"# a comment \\\")\\nRegexMatch(\\\"# a comment \\\", 1=\\\"a comment\\\")When calling match(), you have the option to specify an index at which to start the search. For example:julia> m = match(r\\\"[0-9]\\\",\\\"aaaa1aaaa2aaaa3\\\",1)\\nRegexMatch(\\\"1\\\")\\n\\njulia> m = match(r\\\"[0-9]\\\",\\\"aaaa1aaaa2aaaa3\\\",6)\\nRegexMatch(\\\"2\\\")\\n\\njulia> m = match(r\\\"[0-9]\\\",\\\"aaaa1aaaa2aaaa3\\\",11)\\nRegexMatch(\\\"3\\\")You can extract the following info from a RegexMatch object:the entire substring matched: m.match\\nthe captured substrings as an array of strings: m.captures\\nthe offset at which the whole match begins: m.offset\\nthe offsets of the captured substrings as a vector: m.offsetsFor when a capture doesn't match, instead of a substring, m.captures contains nothing in that position, and m.offsets has a zero offset (recall that indices in Julia are 1-based, so a zero offset into a string is invalid). Here is a pair of somewhat contrived examples:julia> m = match(r\\\"(a|b)(c)?(d)\\\", \\\"acd\\\")\\nRegexMatch(\\\"acd\\\", 1=\\\"a\\\", 2=\\\"c\\\", 3=\\\"d\\\")\\n\\njulia> m.match\\n\\\"acd\\\"\\n\\njulia> m.captures\\n3-element Array{Union{SubString{String}, Void},1}:\\n \\\"a\\\"\\n \\\"c\\\"\\n \\\"d\\\"\\n\\njulia> m.offset\\n1\\n\\njulia> m.offsets\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> m = match(r\\\"(a|b)(c)?(d)\\\", \\\"ad\\\")\\nRegexMatch(\\\"ad\\\", 1=\\\"a\\\", 2=nothing, 3=\\\"d\\\")\\n\\njulia> m.match\\n\\\"ad\\\"\\n\\njulia> m.captures\\n3-element Array{Union{SubString{String}, Void},1}:\\n \\\"a\\\"\\n nothing\\n \\\"d\\\"\\n\\njulia> m.offset\\n1\\n\\njulia> m.offsets\\n3-element Array{Int64,1}:\\n 1\\n 0\\n 2It is convenient to have captures returned as an array so that one can use destructuring syntax to bind them to local variables:julia> first, second, third = m.captures; first\\n\\\"a\\\"Captures can also be accessed by indexing the RegexMatch object with the number or name of the capture group:julia> m=match(r\\\"(?<hour>\\\\d+):(?<minute>\\\\d+)\\\",\\\"12:45\\\")\\nRegexMatch(\\\"12:45\\\", hour=\\\"12\\\", minute=\\\"45\\\")\\n\\njulia> m[:minute]\\n\\\"45\\\"\\n\\njulia> m[2]\\n\\\"45\\\"Captures can be referenced in a substitution string when using replace() by using \\\\n to refer to the nth capture group and prefixing the substitution string with s. Capture group 0 refers to the entire match object. Named capture groups can be referenced in the substitution with g<groupname>. For example:julia> replace(\\\"first second\\\", r\\\"(\\\\w+) (?<agroup>\\\\w+)\\\", s\\\"\\\\g<agroup> \\\\1\\\")\\n\\\"second first\\\"Numbered capture groups can also be referenced as \\\\g<n> for disambiguation, as in:julia> replace(\\\"a\\\", r\\\".\\\", s\\\"\\\\g<0>1\\\")\\n\\\"a1\\\"You can modify the behavior of regular expressions by some combination of the flags i, m, s, and x after the closing double quote mark. These flags have the same meaning as they do in Perl, as explained in this excerpt from the perlre manpage:i   Do case-insensitive pattern matching.\\n\\n    If locale matching rules are in effect, the case map is taken\\n    from the current locale for code points less than 255, and\\n    from Unicode rules for larger code points. However, matches\\n    that would cross the Unicode rules/non-Unicode rules boundary\\n    (ords 255/256) will not succeed.\\n\\nm   Treat string as multiple lines.  That is, change \\\"^\\\" and \\\"$\\\"\\n    from matching the start or end of the string to matching the\\n    start or end of any line anywhere within the string.\\n\\ns   Treat string as single line.  That is, change \\\".\\\" to match any\\n    character whatsoever, even a newline, which normally it would\\n    not match.\\n\\n    Used together, as r\\\"\\\"ms, they let the \\\".\\\" match any character\\n    whatsoever, while still allowing \\\"^\\\" and \\\"$\\\" to match,\\n    respectively, just after and just before newlines within the\\n    string.\\n\\nx   Tells the regular expression parser to ignore most whitespace\\n    that is neither backslashed nor within a character class. You\\n    can use this to break up your regular expression into\\n    (slightly) more readable parts. The '#' character is also\\n    treated as a metacharacter introducing a comment, just as in\\n    ordinary code.For example, the following regex has all three flags turned on:julia> r\\\"a+.*b+.*?d$\\\"ism\\nr\\\"a+.*b+.*?d$\\\"ims\\n\\njulia> match(r\\\"a+.*b+.*?d$\\\"ism, \\\"Goodbye,\\\\nOh, angry,\\\\nBad world\\\\n\\\")\\nRegexMatch(\\\"angry,\\\\nBad world\\\")Triple-quoted regex strings, of the form r\\\"\\\"\\\"...\\\"\\\"\\\", are also supported (and may be convenient for regular expressions containing quotation marks or newlines).\"\n},\n\n{\n    \"location\": \"manual/strings.html#man-byte-array-literals-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Byte Array Literals\",\n    \"category\": \"section\",\n    \"text\": \"Another useful non-standard string literal is the byte-array string literal: b\\\"...\\\". This form lets you use string notation to express literal byte arrays \u2013 i.e. arrays of UInt8 values. The rules for byte array literals are the following:ASCII characters and ASCII escapes produce a single byte.\\n\\\\x and octal escape sequences produce the byte corresponding to the escape value.\\nUnicode escape sequences produce a sequence of bytes encoding that code point in UTF-8.There is some overlap between these rules since the behavior of \\\\x and octal escapes less than 0x80 (128) are covered by both of the first two rules, but here these rules agree. Together, these rules allow one to easily use ASCII characters, arbitrary byte values, and UTF-8 sequences to produce arrays of bytes. Here is an example using all three:julia> b\\\"DATA\\\\xff\\\\u2200\\\"\\n8-element Array{UInt8,1}:\\n 0x44\\n 0x41\\n 0x54\\n 0x41\\n 0xff\\n 0xe2\\n 0x88\\n 0x80The ASCII string \\\"DATA\\\" corresponds to the bytes 68, 65, 84, 65. \\\\xff produces the single byte 255. The Unicode escape \\\\u2200 is encoded in UTF-8 as the three bytes 226, 136, 128. Note that the resulting byte array does not correspond to a valid UTF-8 string \u2013 if you try to use this as a regular string literal, you will get a syntax error:julia> \\\"DATA\\\\xff\\\\u2200\\\"\\nERROR: syntax: invalid UTF-8 sequenceAlso observe the significant distinction between \\\\xff and \\\\uff: the former escape sequence encodes the byte 255, whereas the latter escape sequence represents the code point 255, which is encoded as two bytes in UTF-8:julia> b\\\"\\\\xff\\\"\\n1-element Array{UInt8,1}:\\n 0xff\\n\\njulia> b\\\"\\\\uff\\\"\\n2-element Array{UInt8,1}:\\n 0xc3\\n 0xbfIn character literals, this distinction is glossed over and \\\\xff is allowed to represent the code point 255, because characters always represent code points. In strings, however, \\\\x escapes always represent bytes, not code points, whereas \\\\u and \\\\U escapes always represent code points, which are encoded in one or more bytes. For code points less than \\\\u80, it happens that the UTF-8 encoding of each code point is just the single byte produced by the corresponding \\\\x escape, so the distinction can safely be ignored. For the escapes \\\\x80 through \\\\xff as compared to \\\\u80 through \\\\uff, however, there is a major difference: the former escapes all encode single bytes, which \u2013 unless followed by very specific continuation bytes \u2013 do not form valid UTF-8 data, whereas the latter escapes all represent Unicode code points with two-byte encodings.If this is all extremely confusing, try reading \\\"The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets\\\". It's an excellent introduction to Unicode and UTF-8, and may help alleviate some confusion regarding the matter.\"\n},\n\n{\n    \"location\": \"manual/strings.html#man-version-number-literals-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Version Number Literals\",\n    \"category\": \"section\",\n    \"text\": \"Version numbers can easily be expressed with non-standard string literals of the form v\\\"...\\\". Version number literals create VersionNumber objects which follow the specifications of semantic versioning, and therefore are composed of major, minor and patch numeric values, followed by pre-release and build alpha-numeric annotations. For example, v\\\"0.2.1-rc1+win64\\\" is broken into major version 0, minor version 2, patch version 1, pre-release rc1 and build win64. When entering a version literal, everything except the major version number is optional, therefore e.g.  v\\\"0.2\\\" is equivalent to v\\\"0.2.0\\\" (with empty pre-release/build annotations), v\\\"2\\\" is equivalent to v\\\"2.0.0\\\", and so on.VersionNumber objects are mostly useful to easily and correctly compare two (or more) versions. For example, the constant VERSION holds Julia version number as a VersionNumber object, and therefore one can define some version-specific behavior using simple statements as:if v\\\"0.2\\\" <= VERSION < v\\\"0.3-\\\"\\n    # do something specific to 0.2 release series\\nendNote that in the above example the non-standard version number v\\\"0.3-\\\" is used, with a trailing -: this notation is a Julia extension of the standard, and it's used to indicate a version which is lower than any 0.3 release, including all of its pre-releases. So in the above example the code would only run with stable 0.2 versions, and exclude such versions as v\\\"0.3.0-rc1\\\". In order to also allow for unstable (i.e. pre-release) 0.2 versions, the lower bound check should be modified like this: v\\\"0.2-\\\" <= VERSION.Another non-standard version specification extension allows one to use a trailing + to express an upper limit on build versions, e.g.  VERSION > v\\\"0.2-rc1+\\\" can be used to mean any version above 0.2-rc1 and any of its builds: it will return false for version v\\\"0.2-rc1+win64\\\" and true for v\\\"0.2-rc2\\\".It is good practice to use such special versions in comparisons (particularly, the trailing - should always be used on upper bounds unless there's a good reason not to), but they must not be used as the actual version number of anything, as they are invalid in the semantic versioning scheme.Besides being used for the VERSION constant, VersionNumber objects are widely used in the Pkg module, to specify packages versions and their dependencies.\"\n},\n\n{\n    \"location\": \"manual/strings.html#man-raw-string-literals-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Raw String Literals\",\n    \"category\": \"section\",\n    \"text\": \"Raw strings without interpolation or unescaping can be expressed with non-standard string literals of the form raw\\\"...\\\". Raw string literals create ordinary String objects which contain the enclosed contents exactly as entered with no interpolation or unescaping. This is useful for strings which contain code or markup in other languages which use $ or \\\\ as special characters. The exception is quotation marks that still must be escaped, e.g. raw\\\"\\\\\\\"\\\" is equivalent to \\\"\\\\\\\"\\\".\"\n},\n\n{\n    \"location\": \"manual/functions.html#\",\n    \"page\": \"Functions\",\n    \"title\": \"Functions\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/functions.html#man-functions-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Functions\",\n    \"category\": \"section\",\n    \"text\": \"In Julia, a function is an object that maps a tuple of argument values to a return value. Julia functions are not pure mathematical functions, in the sense that functions can alter and be affected by the global state of the program. The basic syntax for defining functions in Julia is:julia> function f(x,y)\\n           x + y\\n       end\\nf (generic function with 1 method)There is a second, more terse syntax for defining a function in Julia. The traditional function declaration syntax demonstrated above is equivalent to the following compact \\\"assignment form\\\":julia> f(x,y) = x + y\\nf (generic function with 1 method)In the assignment form, the body of the function must be a single expression, although it can be a compound expression (see Compound Expressions). Short, simple function definitions are common in Julia. The short function syntax is accordingly quite idiomatic, considerably reducing both typing and visual noise.A function is called using the traditional parenthesis syntax:julia> f(2,3)\\n5Without parentheses, the expression f refers to the function object, and can be passed around like any value:julia> g = f;\\n\\njulia> g(2,3)\\n5As with variables, Unicode can also be used for function names:julia> \u2211(x,y) = x + y\\n\u2211 (generic function with 1 method)\\n\\njulia> \u2211(2, 3)\\n5\"\n},\n\n{\n    \"location\": \"manual/functions.html#Argument-Passing-Behavior-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Argument Passing Behavior\",\n    \"category\": \"section\",\n    \"text\": \"Julia function arguments follow a convention sometimes called \\\"pass-by-sharing\\\", which means that values are not copied when they are passed to functions. Function arguments themselves act as new variable bindings (new locations that can refer to values), but the values they refer to are identical to the passed values. Modifications to mutable values (such as Arrays) made within a function will be visible to the caller. This is the same behavior found in Scheme, most Lisps, Python, Ruby and Perl, among other dynamic languages.\"\n},\n\n{\n    \"location\": \"manual/functions.html#The-return-Keyword-1\",\n    \"page\": \"Functions\",\n    \"title\": \"The return Keyword\",\n    \"category\": \"section\",\n    \"text\": \"The value returned by a function is the value of the last expression evaluated, which, by default, is the last expression in the body of the function definition. In the example function, f, from the previous section this is the value of the expression x + y. As in C and most other imperative or functional languages, the return keyword causes a function to return immediately, providing an expression whose value is returned:function g(x,y)\\n    return x * y\\n    x + y\\nendSince function definitions can be entered into interactive sessions, it is easy to compare these definitions:julia> f(x,y) = x + y\\nf (generic function with 1 method)\\n\\njulia> function g(x,y)\\n           return x * y\\n           x + y\\n       end\\ng (generic function with 1 method)\\n\\njulia> f(2,3)\\n5\\n\\njulia> g(2,3)\\n6Of course, in a purely linear function body like g, the usage of return is pointless since the expression x + y is never evaluated and we could simply make x * y the last expression in the function and omit the return. In conjunction with other control flow, however, return is of real use. Here, for example, is a function that computes the hypotenuse length of a right triangle with sides of length x and y, avoiding overflow:julia> function hypot(x,y)\\n           x = abs(x)\\n           y = abs(y)\\n           if x > y\\n               r = y/x\\n               return x*sqrt(1+r*r)\\n           end\\n           if y == 0\\n               return zero(x)\\n           end\\n           r = x/y\\n           return y*sqrt(1+r*r)\\n       end\\nhypot (generic function with 1 method)\\n\\njulia> hypot(3, 4)\\n5.0There are three possible points of return from this function, returning the values of three different expressions, depending on the values of x and y. The return on the last line could be omitted since it is the last expression.\"\n},\n\n{\n    \"location\": \"manual/functions.html#Operators-Are-Functions-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Operators Are Functions\",\n    \"category\": \"section\",\n    \"text\": \"In Julia, most operators are just functions with support for special syntax. (The exceptions are operators with special evaluation semantics like && and ||. These operators cannot be functions since Short-Circuit Evaluation requires that their operands are not evaluated before evaluation of the operator.) Accordingly, you can also apply them using parenthesized argument lists, just as you would any other function:julia> 1 + 2 + 3\\n6\\n\\njulia> +(1,2,3)\\n6The infix form is exactly equivalent to the function application form \u2013 in fact the former is parsed to produce the function call internally. This also means that you can assign and pass around operators such as +() and *() just like you would with other function values:julia> f = +;\\n\\njulia> f(1,2,3)\\n6Under the name f, the function does not support infix notation, however.\"\n},\n\n{\n    \"location\": \"manual/functions.html#Operators-With-Special-Names-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Operators With Special Names\",\n    \"category\": \"section\",\n    \"text\": \"A few special expressions correspond to calls to functions with non-obvious names. These are:Expression Calls\\n[A B C ...] hcat()\\n[A; B; C; ...] vcat()\\n[A B; C D; ...] hvcat()\\nA' ctranspose()\\nA.' transpose()\\n1:n colon()\\nA[i] getindex()\\nA[i]=x setindex!()These functions are included in the Base.Operators module even though they do not have operator-like names.\"\n},\n\n{\n    \"location\": \"manual/functions.html#man-anonymous-functions-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Anonymous Functions\",\n    \"category\": \"section\",\n    \"text\": \"Functions in Julia are first-class objects: they can be assigned to variables, and called using the standard function call syntax from the variable they have been assigned to. They can be used as arguments, and they can be returned as values. They can also be created anonymously, without being given a name, using either of these syntaxes:julia> x -> x^2 + 2x - 1\\n(::#1) (generic function with 1 method)\\n\\njulia> function (x)\\n           x^2 + 2x - 1\\n       end\\n(::#3) (generic function with 1 method)This creates a function taking one argument x and returning the value of the polynomial x^2 + 2x - 1 at that value. Notice that the result is a generic function, but with a compiler-generated name based on consecutive numbering.The primary use for anonymous functions is passing them to functions which take other functions as arguments. A classic example is map(), which applies a function to each value of an array and returns a new array containing the resulting values:julia> map(round, [1.2,3.5,1.7])\\n3-element Array{Float64,1}:\\n 1.0\\n 4.0\\n 2.0This is fine if a named function effecting the transform one wants already exists to pass as the first argument to map(). Often, however, a ready-to-use, named function does not exist. In these situations, the anonymous function construct allows easy creation of a single-use function object without needing a name:julia> map(x -> x^2 + 2x - 1, [1,3,-1])\\n3-element Array{Int64,1}:\\n  2\\n 14\\n -2An anonymous function accepting multiple arguments can be written using the syntax (x,y,z)->2x+y-z. A zero-argument anonymous function is written as ()->3. The idea of a function with no arguments may seem strange, but is useful for \\\"delaying\\\" a computation. In this usage, a block of code is wrapped in a zero-argument function, which is later invoked by calling it as f().\"\n},\n\n{\n    \"location\": \"manual/functions.html#Multiple-Return-Values-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Multiple Return Values\",\n    \"category\": \"section\",\n    \"text\": \"In Julia, one returns a tuple of values to simulate returning multiple values. However, tuples can be created and destructured without needing parentheses, thereby providing an illusion that multiple values are being returned, rather than a single tuple value. For example, the following function returns a pair of values:julia> function foo(a,b)\\n           a+b, a*b\\n       end\\nfoo (generic function with 1 method)If you call it in an interactive session without assigning the return value anywhere, you will see the tuple returned:julia> foo(2,3)\\n(5, 6)A typical usage of such a pair of return values, however, extracts each value into a variable. Julia supports simple tuple \\\"destructuring\\\" that facilitates this:julia> x, y = foo(2,3)\\n(5, 6)\\n\\njulia> x\\n5\\n\\njulia> y\\n6You can also return multiple values via an explicit usage of the return keyword:function foo(a,b)\\n    return a+b, a*b\\nendThis has the exact same effect as the previous definition of foo.\"\n},\n\n{\n    \"location\": \"manual/functions.html#Varargs-Functions-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Varargs Functions\",\n    \"category\": \"section\",\n    \"text\": \"It is often convenient to be able to write functions taking an arbitrary number of arguments. Such functions are traditionally known as \\\"varargs\\\" functions, which is short for \\\"variable number of arguments\\\". You can define a varargs function by following the last argument with an ellipsis:julia> bar(a,b,x...) = (a,b,x)\\nbar (generic function with 1 method)The variables a and b are bound to the first two argument values as usual, and the variable x is bound to an iterable collection of the zero or more values passed to bar after its first two arguments:julia> bar(1,2)\\n(1, 2, ())\\n\\njulia> bar(1,2,3)\\n(1, 2, (3,))\\n\\njulia> bar(1, 2, 3, 4)\\n(1, 2, (3, 4))\\n\\njulia> bar(1,2,3,4,5,6)\\n(1, 2, (3, 4, 5, 6))In all these cases, x is bound to a tuple of the trailing values passed to bar.It is possible to constrain the number of values passed as a variable argument; this will be discussed later in Parametrically-constrained Varargs methods.On the flip side, it is often handy to \\\"splice\\\" the values contained in an iterable collection into a function call as individual arguments. To do this, one also uses ... but in the function call instead:julia> x = (3, 4)\\n(3, 4)\\n\\njulia> bar(1,2,x...)\\n(1, 2, (3, 4))In this case a tuple of values is spliced into a varargs call precisely where the variable number of arguments go. This need not be the case, however:julia> x = (2, 3, 4)\\n(2, 3, 4)\\n\\njulia> bar(1,x...)\\n(1, 2, (3, 4))\\n\\njulia> x = (1, 2, 3, 4)\\n(1, 2, 3, 4)\\n\\njulia> bar(x...)\\n(1, 2, (3, 4))Furthermore, the iterable object spliced into a function call need not be a tuple:julia> x = [3,4]\\n2-element Array{Int64,1}:\\n 3\\n 4\\n\\njulia> bar(1,2,x...)\\n(1, 2, (3, 4))\\n\\njulia> x = [1,2,3,4]\\n4-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n\\njulia> bar(x...)\\n(1, 2, (3, 4))Also, the function that arguments are spliced into need not be a varargs function (although it often is):julia> baz(a,b) = a + b;\\n\\njulia> args = [1,2]\\n2-element Array{Int64,1}:\\n 1\\n 2\\n\\njulia> baz(args...)\\n3\\n\\njulia> args = [1,2,3]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> baz(args...)\\nERROR: MethodError: no method matching baz(::Int64, ::Int64, ::Int64)\\nClosest candidates are:\\n  baz(::Any, ::Any) at none:1As you can see, if the wrong number of elements are in the spliced container, then the function call will fail, just as it would if too many arguments were given explicitly.\"\n},\n\n{\n    \"location\": \"manual/functions.html#Optional-Arguments-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Optional Arguments\",\n    \"category\": \"section\",\n    \"text\": \"In many cases, function arguments have sensible default values and therefore might not need to be passed explicitly in every call. For example, the library function parse(T, num, base) interprets a string as a number in some base. The base argument defaults to 10. This behavior can be expressed concisely as:function parse(T, num, base=10)\\n    ###\\nendWith this definition, the function can be called with either two or three arguments, and 10 is automatically passed when a third argument is not specified:julia> parse(Int,\\\"12\\\",10)\\n12\\n\\njulia> parse(Int,\\\"12\\\",3)\\n5\\n\\njulia> parse(Int,\\\"12\\\")\\n12Optional arguments are actually just a convenient syntax for writing multiple method definitions with different numbers of arguments (see Note on Optional and keyword Arguments).\"\n},\n\n{\n    \"location\": \"manual/functions.html#Keyword-Arguments-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Keyword Arguments\",\n    \"category\": \"section\",\n    \"text\": \"Some functions need a large number of arguments, or have a large number of behaviors. Remembering how to call such functions can be difficult. Keyword arguments can make these complex interfaces easier to use and extend by allowing arguments to be identified by name instead of only by position.For example, consider a function plot that plots a line. This function might have many options, for controlling line style, width, color, and so on. If it accepts keyword arguments, a possible call might look like plot(x, y, width=2), where we have chosen to specify only line width. Notice that this serves two purposes. The call is easier to read, since we can label an argument with its meaning. It also becomes possible to pass any subset of a large number of arguments, in any order.Functions with keyword arguments are defined using a semicolon in the signature:function plot(x, y; style=\\\"solid\\\", width=1, color=\\\"black\\\")\\n    ###\\nendWhen the function is called, the semicolon is optional: one can either call plot(x, y, width=2) or plot(x, y; width=2), but the former style is more common. An explicit semicolon is required only for passing varargs or computed keywords as described below.Keyword argument default values are evaluated only when necessary (when a corresponding keyword argument is not passed), and in left-to-right order. Therefore default expressions may refer to prior keyword arguments.The types of keyword arguments can be made explicit as follows:function f(;x::Int64=1)\\n    ###\\nendExtra keyword arguments can be collected using ..., as in varargs functions:function f(x; y=0, kwargs...)\\n    ###\\nendInside f, kwargs will be a collection of (key,value) tuples, where each key is a symbol. Such collections can be passed as keyword arguments using a semicolon in a call, e.g. f(x, z=1; kwargs...). Dictionaries can also be used for this purpose.One can also pass (key,value) tuples, or any iterable expression (such as a => pair) that can be assigned to such a tuple, explicitly after a semicolon. For example, plot(x, y; (:width,2)) and plot(x, y; :width => 2) are equivalent to plot(x, y, width=2). This is useful in situations where the keyword name is computed at runtime.The nature of keyword arguments makes it possible to specify the same argument more than once. For example, in the call plot(x, y; options..., width=2) it is possible that the options structure also contains a value for width. In such a case the rightmost occurrence takes precedence; in this example, width is certain to have the value 2.\"\n},\n\n{\n    \"location\": \"manual/functions.html#Evaluation-Scope-of-Default-Values-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Evaluation Scope of Default Values\",\n    \"category\": \"section\",\n    \"text\": \"Optional and keyword arguments differ slightly in how their default values are evaluated. When optional argument default expressions are evaluated, only previous arguments are in scope. In contrast, all the arguments are in scope when keyword arguments default expressions are evaluated. For example, given this definition:function f(x, a=b, b=1)\\n    ###\\nendthe b in a=b refers to a b in an outer scope, not the subsequent argument b. However, if a and b were keyword arguments instead, then both would be created in the same scope and the b in a=b would refer to the subsequent argument b (shadowing any b in an outer scope), which would result in an undefined variable error (since the default expressions are evaluated left-to-right, and b has not been assigned yet).\"\n},\n\n{\n    \"location\": \"manual/functions.html#Do-Block-Syntax-for-Function-Arguments-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Do-Block Syntax for Function Arguments\",\n    \"category\": \"section\",\n    \"text\": \"Passing functions as arguments to other functions is a powerful technique, but the syntax for it is not always convenient. Such calls are especially awkward to write when the function argument requires multiple lines. As an example, consider calling map() on a function with several cases:map(x->begin\\n           if x < 0 && iseven(x)\\n               return 0\\n           elseif x == 0\\n               return 1\\n           else\\n               return x\\n           end\\n       end,\\n    [A, B, C])Julia provides a reserved word do for rewriting this code more clearly:map([A, B, C]) do x\\n    if x < 0 && iseven(x)\\n        return 0\\n    elseif x == 0\\n        return 1\\n    else\\n        return x\\n    end\\nendThe do x syntax creates an anonymous function with argument x and passes it as the first argument to map(). Similarly, do a,b would create a two-argument anonymous function, and a plain do would declare that what follows is an anonymous function of the form () -> ....How these arguments are initialized depends on the \\\"outer\\\" function; here, map() will sequentially set x to A, B, C, calling the anonymous function on each, just as would happen in the syntax map(func, [A, B, C]).This syntax makes it easier to use functions to effectively extend the language, since calls look like normal code blocks. There are many possible uses quite different from map(), such as managing system state. For example, there is a version of open() that runs code ensuring that the opened file is eventually closed:open(\\\"outfile\\\", \\\"w\\\") do io\\n    write(io, data)\\nendThis is accomplished by the following definition:function open(f::Function, args...)\\n    io = open(args...)\\n    try\\n        f(io)\\n    finally\\n        close(io)\\n    end\\nendHere, open() first opens the file for writing and then passes the resulting output stream to the anonymous function you defined in the do ... end block. After your function exits, open() will make sure that the stream is properly closed, regardless of whether your function exited normally or threw an exception. (The try/finally construct will be described in Control Flow.)With the do block syntax, it helps to check the documentation or implementation to know how the arguments of the user function are initialized.\"\n},\n\n{\n    \"location\": \"manual/functions.html#man-vectorized-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Dot Syntax for Vectorizing Functions\",\n    \"category\": \"section\",\n    \"text\": \"In technical-computing languages, it is common to have \\\"vectorized\\\" versions of functions, which simply apply a given function f(x) to each element of an array A to yield a new array via f(A). This kind of syntax is convenient for data processing, but in other languages vectorization is also often required for performance: if loops are slow, the \\\"vectorized\\\" version of a function can call fast library code written in a low-level language. In Julia, vectorized functions are not required for performance, and indeed it is often beneficial to write your own loops (see Performance Tips), but they can still be convenient. Therefore, any Julia function f can be applied elementwise to any array (or other collection) with the syntax f.(A). For example sin can be applied to all elements in the vector A, like so:julia> A = [1.0, 2.0, 3.0]\\n3-element Array{Float64,1}:\\n 1.0\\n 2.0\\n 3.0\\n\\njulia> sin.(A)\\n3-element Array{Float64,1}:\\n 0.841471\\n 0.909297\\n 0.14112Of course, you can omit the dot if you write a specialized \\\"vector\\\" method of f, e.g. via f(A::AbstractArray) = map(f, A), and this is just as efficient as f.(A). But that approach requires you to decide in advance which functions you want to vectorize.More generally, f.(args...) is actually equivalent to broadcast(f, args...), which allows you to operate on multiple arrays (even of different shapes), or a mix of arrays and scalars (see Broadcasting). For example, if you have f(x,y) = 3x + 4y, then f.(pi,A) will return a new array consisting of f(pi,a) for each a in A, and f.(vector1,vector2) will return a new vector consisting of f(vector1[i],vector2[i]) for each index i (throwing an exception if the vectors have different length).julia> f(x,y) = 3x + 4y;\\n\\njulia> A = [1.0, 2.0, 3.0];\\n\\njulia> B = [4.0, 5.0, 6.0];\\n\\njulia> f.(pi, A)\\n3-element Array{Float64,1}:\\n 13.4248\\n 17.4248\\n 21.4248\\n\\njulia> f.(A, B)\\n3-element Array{Float64,1}:\\n 19.0\\n 26.0\\n 33.0Moreover, nested f.(args...) calls are fused into a single broadcast loop. For example, sin.(cos.(X)) is equivalent to broadcast(x -> sin(cos(x)), X), similar to [sin(cos(x)) for x in X]: there is only a single loop over X, and a single array is allocated for the result. [In contrast, sin(cos(X)) in a typical \\\"vectorized\\\" language would first allocate one temporary array for tmp=cos(X), and then compute sin(tmp) in a separate loop, allocating a second array.] This loop fusion is not a compiler optimization that may or may not occur, it is a syntactic guarantee whenever nested f.(args...) calls are encountered. Technically, the fusion stops as soon as a \\\"non-dot\\\" function call is encountered; for example, in sin.(sort(cos.(X))) the sin and cos loops cannot be merged because of the intervening sort function.Finally, the maximum efficiency is typically achieved when the output array of a vectorized operation is pre-allocated, so that repeated calls do not allocate new arrays over and over again for the results (Pre-allocating outputs:). A convenient syntax for this is X .= ..., which is equivalent to broadcast!(identity, X, ...) except that, as above, the broadcast! loop is fused with any nested \\\"dot\\\" calls. For example, X .= sin.(Y) is equivalent to broadcast!(sin, X, Y), overwriting X with sin.(Y) in-place. If the left-hand side is an array-indexing expression, e.g. X[2:end] .= sin.(Y), then it translates to broadcast! on a view, e.g. broadcast!(sin, view(X, 2:endof(X)), Y), so that the left-hand side is updated in-place.Since adding dots to many operations and function calls in an expression can be tedious and lead to code that is difficult to read, the macro @. is provided to convert every function call, operation, and assignment in an expression into the \\\"dotted\\\" version.julia> Y = [1.0, 2.0, 3.0, 4.0];\\n\\njulia> X = similar(Y); # pre-allocate output array\\n\\njulia> @. X = sin(cos(Y)) # equivalent to X .= sin.(cos.(Y))\\n4-element Array{Float64,1}:\\n  0.514395\\n -0.404239\\n -0.836022\\n -0.608083Binary (or unary) operators like .+ are handled with the same mechanism: they are equivalent to broadcast calls and are fused with other nested \\\"dot\\\" calls.  X .+= Y etcetera is equivalent to X .= X .+ Y and results in a fused in-place assignment;  see also dot operators.\"\n},\n\n{\n    \"location\": \"manual/functions.html#Further-Reading-1\",\n    \"page\": \"Functions\",\n    \"title\": \"Further Reading\",\n    \"category\": \"section\",\n    \"text\": \"We should mention here that this is far from a complete picture of defining functions. Julia has a sophisticated type system and allows multiple dispatch on argument types. None of the examples given here provide any type annotations on their arguments, meaning that they are applicable to all types of arguments. The type system is described in Types and defining a function in terms of methods chosen by multiple dispatch on run-time argument types is described in Methods.\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Control Flow\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#Control-Flow-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Control Flow\",\n    \"category\": \"section\",\n    \"text\": \"Julia provides a variety of control flow constructs:Compound Expressions: begin and (;).\\nConditional Evaluation: if-elseif-else and ?: (ternary operator).\\nShort-Circuit Evaluation: &&, || and chained comparisons.\\nRepeated Evaluation: Loops: while and for.\\nException Handling: try-catch, error() and throw().\\nTasks (aka Coroutines): yieldto().The first five control flow mechanisms are standard to high-level programming languages. Tasks are not so standard: they provide non-local control flow, making it possible to switch between temporarily-suspended computations. This is a powerful construct: both exception handling and cooperative multitasking are implemented in Julia using tasks. Everyday programming requires no direct usage of tasks, but certain problems can be solved much more easily by using tasks.\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#man-compound-expressions-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Compound Expressions\",\n    \"category\": \"section\",\n    \"text\": \"Sometimes it is convenient to have a single expression which evaluates several subexpressions in order, returning the value of the last subexpression as its value. There are two Julia constructs that accomplish this: begin blocks and (;) chains. The value of both compound expression constructs is that of the last subexpression. Here's an example of a begin block:julia> z = begin\\n           x = 1\\n           y = 2\\n           x + y\\n       end\\n3Since these are fairly small, simple expressions, they could easily be placed onto a single line, which is where the (;) chain syntax comes in handy:julia> z = (x = 1; y = 2; x + y)\\n3This syntax is particularly useful with the terse single-line function definition form introduced in Functions. Although it is typical, there is no requirement that begin blocks be multiline or that (;) chains be single-line:julia> begin x = 1; y = 2; x + y end\\n3\\n\\njulia> (x = 1;\\n        y = 2;\\n        x + y)\\n3\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#man-conditional-evaluation-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Conditional Evaluation\",\n    \"category\": \"section\",\n    \"text\": \"Conditional evaluation allows portions of code to be evaluated or not evaluated depending on the value of a boolean expression. Here is the anatomy of the if-elseif-else conditional syntax:if x < y\\n    println(\\\"x is less than y\\\")\\nelseif x > y\\n    println(\\\"x is greater than y\\\")\\nelse\\n    println(\\\"x is equal to y\\\")\\nendIf the condition expression x < y is true, then the corresponding block is evaluated; otherwise the condition expression x > y is evaluated, and if it is true, the corresponding block is evaluated; if neither expression is true, the else block is evaluated. Here it is in action:julia> function test(x, y)\\n           if x < y\\n               println(\\\"x is less than y\\\")\\n           elseif x > y\\n               println(\\\"x is greater than y\\\")\\n           else\\n               println(\\\"x is equal to y\\\")\\n           end\\n       end\\ntest (generic function with 1 method)\\n\\njulia> test(1, 2)\\nx is less than y\\n\\njulia> test(2, 1)\\nx is greater than y\\n\\njulia> test(1, 1)\\nx is equal to yThe elseif and else blocks are optional, and as many elseif blocks as desired can be used. The condition expressions in the if-elseif-else construct are evaluated until the first one evaluates to true, after which the associated block is evaluated, and no further condition expressions or blocks are evaluated.if blocks are \\\"leaky\\\", i.e. they do not introduce a local scope. This means that new variables defined inside the if clauses can be used after the if block, even if they weren't defined before. So, we could have defined the test function above asjulia> function test(x,y)\\n           if x < y\\n               relation = \\\"less than\\\"\\n           elseif x == y\\n               relation = \\\"equal to\\\"\\n           else\\n               relation = \\\"greater than\\\"\\n           end\\n           println(\\\"x is \\\", relation, \\\" y.\\\")\\n       end\\ntest (generic function with 1 method)\\n\\njulia> test(2, 1)\\nx is greater than y.The variable relation is declared inside the if block, but used outside. However, when depending on this behavior, make sure all possible code paths define a value for the variable. The following change to the above function results in a runtime errorjulia> function test(x,y)\\n           if x < y\\n               relation = \\\"less than\\\"\\n           elseif x == y\\n               relation = \\\"equal to\\\"\\n           end\\n           println(\\\"x is \\\", relation, \\\" y.\\\")\\n       end\\ntest (generic function with 1 method)\\n\\njulia> test(1,2)\\nx is less than y.\\n\\njulia> test(2,1)\\nERROR: UndefVarError: relation not defined\\nStacktrace:\\n [1] test(::Int64, ::Int64) at ./none:7if blocks also return a value, which may seem unintuitive to users coming from many other languages. This value is simply the return value of the last executed statement in the branch that was chosen, sojulia> x = 3\\n3\\n\\njulia> if x > 0\\n           \\\"positive!\\\"\\n       else\\n           \\\"negative...\\\"\\n       end\\n\\\"positive!\\\"Note that very short conditional statements (one-liners) are frequently expressed using Short-Circuit Evaluation in Julia, as outlined in the next section.Unlike C, MATLAB, Perl, Python, and Ruby \u2013 but like Java, and a few other stricter, typed languages \u2013 it is an error if the value of a conditional expression is anything but true or false:julia> if 1\\n           println(\\\"true\\\")\\n       end\\nERROR: TypeError: non-boolean (Int64) used in boolean contextThis error indicates that the conditional was of the wrong type: Int64 rather than the required Bool.The so-called \\\"ternary operator\\\", ?:, is closely related to the if-elseif-else syntax, but is used where a conditional choice between single expression values is required, as opposed to conditional execution of longer blocks of code. It gets its name from being the only operator in most languages taking three operands:a ? b : cThe expression a, before the ?, is a condition expression, and the ternary operation evaluates the expression b, before the :, if the condition a is true or the expression c, after the :, if it is false.The easiest way to understand this behavior is to see an example. In the previous example, the println call is shared by all three branches: the only real choice is which literal string to print. This could be written more concisely using the ternary operator. For the sake of clarity, let's try a two-way version first:julia> x = 1; y = 2;\\n\\njulia> println(x < y ? \\\"less than\\\" : \\\"not less than\\\")\\nless than\\n\\njulia> x = 1; y = 0;\\n\\njulia> println(x < y ? \\\"less than\\\" : \\\"not less than\\\")\\nnot less thanIf the expression x < y is true, the entire ternary operator expression evaluates to the string \\\"less than\\\" and otherwise it evaluates to the string \\\"not less than\\\". The original three-way example requires chaining multiple uses of the ternary operator together:julia> test(x, y) = println(x < y ? \\\"x is less than y\\\"    :\\n                            x > y ? \\\"x is greater than y\\\" : \\\"x is equal to y\\\")\\ntest (generic function with 1 method)\\n\\njulia> test(1, 2)\\nx is less than y\\n\\njulia> test(2, 1)\\nx is greater than y\\n\\njulia> test(1, 1)\\nx is equal to yTo facilitate chaining, the operator associates from right to left.It is significant that like if-elseif-else, the expressions before and after the : are only evaluated if the condition expression evaluates to true or false, respectively:julia> v(x) = (println(x); x)\\nv (generic function with 1 method)\\n\\njulia> 1 < 2 ? v(\\\"yes\\\") : v(\\\"no\\\")\\nyes\\n\\\"yes\\\"\\n\\njulia> 1 > 2 ? v(\\\"yes\\\") : v(\\\"no\\\")\\nno\\n\\\"no\\\"\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#Short-Circuit-Evaluation-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Short-Circuit Evaluation\",\n    \"category\": \"section\",\n    \"text\": \"Short-circuit evaluation is quite similar to conditional evaluation. The behavior is found in most imperative programming languages having the && and || boolean operators: in a series of boolean expressions connected by these operators, only the minimum number of expressions are evaluated as are necessary to determine the final boolean value of the entire chain. Explicitly, this means that:In the expression a && b, the subexpression b is only evaluated if a evaluates to true.\\nIn the expression a || b, the subexpression b is only evaluated if a evaluates to false.The reasoning is that a && b must be false if a is false, regardless of the value of b, and likewise, the value of a || b must be true if a is true, regardless of the value of b. Both && and || associate to the right, but && has higher precedence than || does. It's easy to experiment with this behavior:julia> t(x) = (println(x); true)\\nt (generic function with 1 method)\\n\\njulia> f(x) = (println(x); false)\\nf (generic function with 1 method)\\n\\njulia> t(1) && t(2)\\n1\\n2\\ntrue\\n\\njulia> t(1) && f(2)\\n1\\n2\\nfalse\\n\\njulia> f(1) && t(2)\\n1\\nfalse\\n\\njulia> f(1) && f(2)\\n1\\nfalse\\n\\njulia> t(1) || t(2)\\n1\\ntrue\\n\\njulia> t(1) || f(2)\\n1\\ntrue\\n\\njulia> f(1) || t(2)\\n1\\n2\\ntrue\\n\\njulia> f(1) || f(2)\\n1\\n2\\nfalseYou can easily experiment in the same way with the associativity and precedence of various combinations of && and || operators.This behavior is frequently used in Julia to form an alternative to very short if statements. Instead of if <cond> <statement> end, one can write <cond> && <statement> (which could be read as: <cond> and then <statement>). Similarly, instead of if ! <cond> <statement> end, one can write <cond> || <statement> (which could be read as: <cond> or else <statement>).For example, a recursive factorial routine could be defined like this:julia> function fact(n::Int)\\n           n >= 0 || error(\\\"n must be non-negative\\\")\\n           n == 0 && return 1\\n           n * fact(n-1)\\n       end\\nfact (generic function with 1 method)\\n\\njulia> fact(5)\\n120\\n\\njulia> fact(0)\\n1\\n\\njulia> fact(-1)\\nERROR: n must be non-negative\\nStacktrace:\\n [1] fact(::Int64) at ./none:2Boolean operations without short-circuit evaluation can be done with the bitwise boolean operators introduced in Mathematical Operations and Elementary Functions: & and |. These are normal functions, which happen to support infix operator syntax, but always evaluate their arguments:julia> f(1) & t(2)\\n1\\n2\\nfalse\\n\\njulia> t(1) | t(2)\\n1\\n2\\ntrueJust like condition expressions used in if, elseif or the ternary operator, the operands of && or || must be boolean values (true or false). Using a non-boolean value anywhere except for the last entry in a conditional chain is an error:julia> 1 && true\\nERROR: TypeError: non-boolean (Int64) used in boolean contextOn the other hand, any type of expression can be used at the end of a conditional chain. It will be evaluated and returned depending on the preceding conditionals:julia> true && (x = (1, 2, 3))\\n(1, 2, 3)\\n\\njulia> false && (x = (1, 2, 3))\\nfalse\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#man-loops-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Repeated Evaluation: Loops\",\n    \"category\": \"section\",\n    \"text\": \"There are two constructs for repeated evaluation of expressions: the while loop and the for loop. Here is an example of a while loop:julia> i = 1;\\n\\njulia> while i <= 5\\n           println(i)\\n           i += 1\\n       end\\n1\\n2\\n3\\n4\\n5The while loop evaluates the condition expression (i <= 5 in this case), and as long it remains true, keeps also evaluating the body of the while loop. If the condition expression is false when the while loop is first reached, the body is never evaluated.The for loop makes common repeated evaluation idioms easier to write. Since counting up and down like the above while loop does is so common, it can be expressed more concisely with a for loop:julia> for i = 1:5\\n           println(i)\\n       end\\n1\\n2\\n3\\n4\\n5Here the 1:5 is a Range object, representing the sequence of numbers 1, 2, 3, 4, 5. The for loop iterates through these values, assigning each one in turn to the variable i. One rather important distinction between the previous while loop form and the for loop form is the scope during which the variable is visible. If the variable i has not been introduced in an other scope, in the for loop form, it is visible only inside of the for loop, and not afterwards. You'll either need a new interactive session instance or a different variable name to test this:julia> for j = 1:5\\n           println(j)\\n       end\\n1\\n2\\n3\\n4\\n5\\n\\njulia> j\\nERROR: UndefVarError: j not definedSee Scope of Variables for a detailed explanation of variable scope and how it works in Julia.In general, the for loop construct can iterate over any container. In these cases, the alternative (but fully equivalent) keyword in or \u2208 is typically used instead of =, since it makes the code read more clearly:julia> for i in [1,4,0]\\n           println(i)\\n       end\\n1\\n4\\n0\\n\\njulia> for s \u2208 [\\\"foo\\\",\\\"bar\\\",\\\"baz\\\"]\\n           println(s)\\n       end\\nfoo\\nbar\\nbazVarious types of iterable containers will be introduced and discussed in later sections of the manual (see, e.g., Multi-dimensional Arrays).It is sometimes convenient to terminate the repetition of a while before the test condition is falsified or stop iterating in a for loop before the end of the iterable object is reached. This can be accomplished with the break keyword:julia> i = 1;\\n\\njulia> while true\\n           println(i)\\n           if i >= 5\\n               break\\n           end\\n           i += 1\\n       end\\n1\\n2\\n3\\n4\\n5\\n\\njulia> for i = 1:1000\\n           println(i)\\n           if i >= 5\\n               break\\n           end\\n       end\\n1\\n2\\n3\\n4\\n5Without the break keyword, the above while loop would never terminate on its own, and the for loop would iterate up to 1000. These loops are both exited early by using break.In other circumstances, it is handy to be able to stop an iteration and move on to the next one immediately. The continue keyword accomplishes this:julia> for i = 1:10\\n           if i % 3 != 0\\n               continue\\n           end\\n           println(i)\\n       end\\n3\\n6\\n9This is a somewhat contrived example since we could produce the same behavior more clearly by negating the condition and placing the println call inside the if block. In realistic usage there is more code to be evaluated after the continue, and often there are multiple points from which one calls continue.Multiple nested for loops can be combined into a single outer loop, forming the cartesian product of its iterables:julia> for i = 1:2, j = 3:4\\n           println((i, j))\\n       end\\n(1, 3)\\n(1, 4)\\n(2, 3)\\n(2, 4)A break statement inside such a loop exits the entire nest of loops, not just the inner one.\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#Exception-Handling-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Exception Handling\",\n    \"category\": \"section\",\n    \"text\": \"When an unexpected condition occurs, a function may be unable to return a reasonable value to its caller. In such cases, it may be best for the exceptional condition to either terminate the program, printing a diagnostic error message, or if the programmer has provided code to handle such exceptional circumstances, allow that code to take the appropriate action.\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#Built-in-Exceptions-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Built-in Exceptions\",\n    \"category\": \"section\",\n    \"text\": \"Exceptions are thrown when an unexpected condition has occurred. The built-in Exceptions listed below all interrupt the normal flow of control.Exception\\nArgumentError\\nBoundsError\\nCompositeException\\nDivideError\\nDomainError\\nEOFError\\nErrorException\\nInexactError\\nInitError\\nInterruptException\\nInvalidStateException\\nKeyError\\nLoadError\\nOutOfMemoryError\\nReadOnlyMemoryError\\nRemoteException\\nMethodError\\nOverflowError\\nParseError\\nSystemError\\nTypeError\\nUndefRefError\\nUndefVarError\\nUnicodeErrorFor example, the sqrt() function throws a DomainError if applied to a negative real value:julia> sqrt(-1)\\nERROR: DomainError:\\nsqrt will only return a complex result if called with a complex argument. Try sqrt(complex(x)).\\nStacktrace:\\n [1] sqrt(::Int64) at ./math.jl:434You may define your own exceptions in the following way:julia> struct MyCustomException <: Exception end\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#The-[throw()](@ref)-function-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"The throw() function\",\n    \"category\": \"section\",\n    \"text\": \"Exceptions can be created explicitly with throw(). For example, a function defined only for nonnegative numbers could be written to throw() a DomainError if the argument is negative:julia> f(x) = x>=0 ? exp(-x) : throw(DomainError())\\nf (generic function with 1 method)\\n\\njulia> f(1)\\n0.36787944117144233\\n\\njulia> f(-1)\\nERROR: DomainError:\\nStacktrace:\\n [1] f(::Int64) at ./none:1Note that DomainError without parentheses is not an exception, but a type of exception. It needs to be called to obtain an Exception object:julia> typeof(DomainError()) <: Exception\\ntrue\\n\\njulia> typeof(DomainError) <: Exception\\nfalseAdditionally, some exception types take one or more arguments that are used for error reporting:julia> throw(UndefVarError(:x))\\nERROR: UndefVarError: x not definedThis mechanism can be implemented easily by custom exception types following the way UndefVarError is written:julia> struct MyUndefVarError <: Exception\\n           var::Symbol\\n       end\\n\\njulia> Base.showerror(io::IO, e::MyUndefVarError) = print(io, e.var, \\\" not defined\\\")note: Note\\nWhen writing an error message, it is preferred to make the first word lowercase. For example, size(A) == size(B) || throw(DimensionMismatch(\\\"size of A not equal to size of B\\\"))is preferred oversize(A) == size(B) || throw(DimensionMismatch(\\\"Size of A not equal to size of B\\\")).However, sometimes it makes sense to keep the uppercase first letter, for instance if an argument to a function is a capital letter: size(A,1) == size(B,2) || throw(DimensionMismatch(\\\"A has first dimension...\\\")).\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#Errors-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Errors\",\n    \"category\": \"section\",\n    \"text\": \"The error() function is used to produce an ErrorException that interrupts the normal flow of control.Suppose we want to stop execution immediately if the square root of a negative number is taken. To do this, we can define a fussy version of the sqrt() function that raises an error if its argument is negative:julia> fussy_sqrt(x) = x >= 0 ? sqrt(x) : error(\\\"negative x not allowed\\\")\\nfussy_sqrt (generic function with 1 method)\\n\\njulia> fussy_sqrt(2)\\n1.4142135623730951\\n\\njulia> fussy_sqrt(-1)\\nERROR: negative x not allowed\\nStacktrace:\\n [1] fussy_sqrt(::Int64) at ./none:1If fussy_sqrt is called with a negative value from another function, instead of trying to continue execution of the calling function, it returns immediately, displaying the error message in the interactive session:julia> function verbose_fussy_sqrt(x)\\n           println(\\\"before fussy_sqrt\\\")\\n           r = fussy_sqrt(x)\\n           println(\\\"after fussy_sqrt\\\")\\n           return r\\n       end\\nverbose_fussy_sqrt (generic function with 1 method)\\n\\njulia> verbose_fussy_sqrt(2)\\nbefore fussy_sqrt\\nafter fussy_sqrt\\n1.4142135623730951\\n\\njulia> verbose_fussy_sqrt(-1)\\nbefore fussy_sqrt\\nERROR: negative x not allowed\\nStacktrace:\\n [1] fussy_sqrt at ./none:1 [inlined]\\n [2] verbose_fussy_sqrt(::Int64) at ./none:3\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#Warnings-and-informational-messages-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Warnings and informational messages\",\n    \"category\": \"section\",\n    \"text\": \"Julia also provides other functions that write messages to the standard error I/O, but do not throw any Exceptions and hence do not interrupt execution:julia> info(\\\"Hi\\\"); 1+1\\nINFO: Hi\\n2\\n\\njulia> warn(\\\"Hi\\\"); 1+1\\nWARNING: Hi\\n2\\n\\njulia> error(\\\"Hi\\\"); 1+1\\nERROR: Hi\\nStacktrace:\\n [1] error(::String) at ./error.jl:21\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#The-try/catch-statement-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"The try/catch statement\",\n    \"category\": \"section\",\n    \"text\": \"The try/catch statement allows for Exceptions to be tested for. For example, a customized square root function can be written to automatically call either the real or complex square root method on demand using Exceptions :julia> f(x) = try\\n           sqrt(x)\\n       catch\\n           sqrt(complex(x, 0))\\n       end\\nf (generic function with 1 method)\\n\\njulia> f(1)\\n1.0\\n\\njulia> f(-1)\\n0.0 + 1.0imIt is important to note that in real code computing this function, one would compare x to zero instead of catching an exception. The exception is much slower than simply comparing and branching.try/catch statements also allow the Exception to be saved in a variable. In this contrived example, the following example calculates the square root of the second element of x if x is indexable, otherwise assumes x is a real number and returns its square root:julia> sqrt_second(x) = try\\n           sqrt(x[2])\\n       catch y\\n           if isa(y, DomainError)\\n               sqrt(complex(x[2], 0))\\n           elseif isa(y, BoundsError)\\n               sqrt(x)\\n           end\\n       end\\nsqrt_second (generic function with 1 method)\\n\\njulia> sqrt_second([1 4])\\n2.0\\n\\njulia> sqrt_second([1 -4])\\n0.0 + 2.0im\\n\\njulia> sqrt_second(9)\\n3.0\\n\\njulia> sqrt_second(-9)\\nERROR: DomainError:\\nStacktrace:\\n [1] sqrt_second(::Int64) at ./none:7Note that the symbol following catch will always be interpreted as a name for the exception, so care is needed when writing try/catch expressions on a single line. The following code will not work to return the value of x in case of an error:try bad() catch x endInstead, use a semicolon or insert a line break after catch:try bad() catch; x end\\n\\ntry bad()\\ncatch\\n    x\\nendThe catch clause is not strictly necessary; when omitted, the default return value is nothing.julia> try error() end # Returns nothingThe power of the try/catch construct lies in the ability to unwind a deeply nested computation immediately to a much higher level in the stack of calling functions. There are situations where no error has occurred, but the ability to unwind the stack and pass a value to a higher level is desirable. Julia provides the rethrow(), backtrace() and catch_backtrace() functions for more advanced error handling.\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#finally-Clauses-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"finally Clauses\",\n    \"category\": \"section\",\n    \"text\": \"In code that performs state changes or uses resources like files, there is typically clean-up work (such as closing files) that needs to be done when the code is finished. Exceptions potentially complicate this task, since they can cause a block of code to exit before reaching its normal end. The finally keyword provides a way to run some code when a given block of code exits, regardless of how it exits.For example, here is how we can guarantee that an opened file is closed:f = open(\\\"file\\\")\\ntry\\n    # operate on file f\\nfinally\\n    close(f)\\nendWhen control leaves the try block (for example due to a return, or just finishing normally), close(f) will be executed. If the try block exits due to an exception, the exception will continue propagating. A catch block may be combined with try and finally as well. In this case the finally block will run after catch has handled the error.\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#man-tasks-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Tasks (aka Coroutines)\",\n    \"category\": \"section\",\n    \"text\": \"Tasks are a control flow feature that allows computations to be suspended and resumed in a flexible manner. This feature is sometimes called by other names, such as symmetric coroutines, lightweight threads, cooperative multitasking, or one-shot continuations.When a piece of computing work (in practice, executing a particular function) is designated as a Task, it becomes possible to interrupt it by switching to another Task. The original Task can later be resumed, at which point it will pick up right where it left off. At first, this may seem similar to a function call. However there are two key differences. First, switching tasks does not use any space, so any number of task switches can occur without consuming the call stack. Second, switching among tasks can occur in any order, unlike function calls, where the called function must finish executing before control returns to the calling function.This kind of control flow can make it much easier to solve certain problems. In some problems, the various pieces of required work are not naturally related by function calls; there is no obvious \\\"caller\\\" or \\\"callee\\\" among the jobs that need to be done. An example is the producer-consumer problem, where one complex procedure is generating values and another complex procedure is consuming them. The consumer cannot simply call a producer function to get a value, because the producer may have more values to generate and so might not yet be ready to return. With tasks, the producer and consumer can both run as long as they need to, passing values back and forth as necessary.Julia provides a Channel mechanism for solving this problem. A Channel is a waitable first-in first-out queue which can have multiple tasks reading from and writing to it.Let's define a producer task, which produces values via the put! call. To consume values, we need to schedule the producer to run in a new task. A special Channel constructor which accepts a 1-arg function as an argument can be used to run a task bound to a channel. We can then take!() values repeatedly from the channel object:julia> function producer(c::Channel)\\n           put!(c, \\\"start\\\")\\n           for n=1:4\\n               put!(c, 2n)\\n           end\\n           put!(c, \\\"stop\\\")\\n       end;\\n\\njulia> chnl = Channel(producer);\\n\\njulia> take!(chnl)\\n\\\"start\\\"\\n\\njulia> take!(chnl)\\n2\\n\\njulia> take!(chnl)\\n4\\n\\njulia> take!(chnl)\\n6\\n\\njulia> take!(chnl)\\n8\\n\\njulia> take!(chnl)\\n\\\"stop\\\"One way to think of this behavior is that producer was able to return multiple times. Between calls to put!(), the producer's execution is suspended and the consumer has control.The returned Channel can be used as an iterable object in a for loop, in which case the loop variable takes on all the produced values. The loop is terminated when the channel is closed.julia> for x in Channel(producer)\\n           println(x)\\n       end\\nstart\\n2\\n4\\n6\\n8\\nstopNote that we did not have to explicitly close the channel in the producer. This is because the act of binding a Channel to a Task() associates the open lifetime of a channel with that of the bound task. The channel object is closed automatically when the task terminates. Multiple channels can be bound to a task, and vice-versa.While the Task() constructor expects a 0-argument function, the Channel() method which creates a channel bound task expects a function that accepts a single argument of type Channel. A common pattern is for the producer to be parameterized, in which case a partial function application is needed to create a 0 or 1 argument anonymous function.For Task() objects this can be done either directly or by use of a convenience macro:function mytask(myarg)\\n    ...\\nend\\n\\ntaskHdl = Task(() -> mytask(7))\\n# or, equivalently\\ntaskHdl = @task mytask(7)To orchestrate more advanced work distribution patterns, bind() and schedule() can be used in conjunction with Task() and Channel() constructors to explicitly link a set of channels with a set of producer/consumer tasks.Note that currently Julia tasks are not scheduled to run on separate CPU cores. True kernel threads are discussed under the topic of Parallel Computing.\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#Core-task-operations-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Core task operations\",\n    \"category\": \"section\",\n    \"text\": \"Let us explore the low level construct yieldto() to underestand how task switching works. yieldto(task,value) suspends the current task, switches to the specified task, and causes that task's last yieldto() call to return the specified value. Notice that yieldto() is the only operation required to use task-style control flow; instead of calling and returning we are always just switching to a different task. This is why this feature is also called \\\"symmetric coroutines\\\"; each task is switched to and from using the same mechanism.yieldto() is powerful, but most uses of tasks do not invoke it directly. Consider why this might be. If you switch away from the current task, you will probably want to switch back to it at some point, but knowing when to switch back, and knowing which task has the responsibility of switching back, can require considerable coordination. For example, put!() and take!() are blocking operations, which, when used in the context of channels maintain state to remember who the consumers are. Not needing to manually keep track of the consuming task is what makes put!() easier to use than the low-level yieldto().In addition to yieldto(), a few other basic functions are needed to use tasks effectively.current_task() gets a reference to the currently-running task.\\nistaskdone() queries whether a task has exited.\\nistaskstarted() queries whether a task has run yet.\\ntask_local_storage() manipulates a key-value store specific to the current task.\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#Tasks-and-events-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Tasks and events\",\n    \"category\": \"section\",\n    \"text\": \"Most task switches occur as a result of waiting for events such as I/O requests, and are performed by a scheduler included in the standard library. The scheduler maintains a queue of runnable tasks, and executes an event loop that restarts tasks based on external events such as message arrival.The basic function for waiting for an event is wait(). Several objects implement wait(); for example, given a Process object, wait() will wait for it to exit. wait() is often implicit; for example, a wait() can happen inside a call to read() to wait for data to be available.In all of these cases, wait() ultimately operates on a Condition object, which is in charge of queueing and restarting tasks. When a task calls wait() on a Condition, the task is marked as non-runnable, added to the condition's queue, and switches to the scheduler. The scheduler will then pick another task to run, or block waiting for external events. If all goes well, eventually an event handler will call notify() on the condition, which causes tasks waiting for that condition to become runnable again.A task created explicitly by calling Task is initially not known to the scheduler. This allows you to manage tasks manually using yieldto() if you wish. However, when such a task waits for an event, it still gets restarted automatically when the event happens, as you would expect. It is also possible to make the scheduler run a task whenever it can, without necessarily waiting for any events. This is done by calling schedule(), or using the @schedule or @async macros (see Parallel Computing for more details).\"\n},\n\n{\n    \"location\": \"manual/control-flow.html#Task-states-1\",\n    \"page\": \"Control Flow\",\n    \"title\": \"Task states\",\n    \"category\": \"section\",\n    \"text\": \"Tasks have a state field that describes their execution status. A Task state is one of the following symbols:Symbol Meaning\\n:runnable Currently running, or available to be switched to\\n:waiting Blocked waiting for a specific event\\n:queued In the scheduler's run queue about to be restarted\\n:done Successfully finished executing\\n:failed Finished with an uncaught exception\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"Scope of Variables\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#scope-of-variables-1\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"Scope of Variables\",\n    \"category\": \"section\",\n    \"text\": \"The scope of a variable is the region of code within which a variable is visible. Variable scoping helps avoid variable naming conflicts. The concept is intuitive: two functions can both have arguments called x without the two x's referring to the same thing. Similarly there are many other cases where different blocks of code can use the same name without referring to the same thing. The rules for when the same variable name does or doesn't refer to the same thing are called scope rules; this section spells them out in detail.Certain constructs in the language introduce scope blocks, which are regions of code that are eligible to be the scope of some set of variables. The scope of a variable cannot be an arbitrary set of source lines; instead, it will always line up with one of these blocks. There are two main types of scopes in Julia, global scope and local scope, the latter can be nested. The constructs introducing scope blocks are:Scope name block/construct introducing this kind of scope\\nGlobal Scope module, baremodule, at interactive prompt (REPL)\\nLocal Scope Soft Local Scope: for, while, comprehensions, try-catch-finally, let\\nLocal Scope Hard Local Scope: functions (either syntax, anonymous & do-blocks), struct, macroNotably missing from this table are begin blocks and if blocks, which do not introduce new scope blocks. All three types of scopes follow somewhat different rules which will be explained below as well as some extra rules for certain blocks.Julia uses lexical scoping, meaning that a function's scope does not inherit from its caller's scope, but from the scope in which the function was defined. For example, in the following code the x inside foo refers to the x in the global scope of its module Bar:julia> module Bar\\n           x = 1\\n           foo() = x\\n       end;and not a x in the scope where foo is used:julia> import .Bar\\n\\njulia> x = -1;\\n\\njulia> Bar.foo()\\n1Thus lexical scope means that the scope of variables can be inferred from the source code alone.\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#Global-Scope-1\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"Global Scope\",\n    \"category\": \"section\",\n    \"text\": \"Each module introduces a new global scope, separate from the global scope of all other modules; there is no all-encompassing global scope. Modules can introduce variables of other modules into their scope through the using or import statements or through qualified access using the dot-notation, i.e. each module is a so-called namespace. Note that variable bindings can only be changed within their global scope and not from an outside module.julia> module A\\n           a = 1 # a global in A's scope\\n       end;\\n\\njulia> module B\\n           module C\\n               c = 2\\n           end\\n           b = C.c    # can access the namespace of a nested global scope\\n                      # through a qualified access\\n           import ..A # makes module A available\\n           d = A.a\\n       end;\\n\\njulia> module D\\n           b = a # errors as D's global scope is separate from A's\\n       end;\\nERROR: UndefVarError: a not defined\\n\\njulia> module E\\n           import ..A # make module A available\\n           A.a = 2    # throws below error\\n       end;\\nERROR: cannot assign variables in other modulesNote that the interactive prompt (aka REPL) is in the global scope of the module Main.\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#Local-Scope-1\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"Local Scope\",\n    \"category\": \"section\",\n    \"text\": \"A new local scope is introduced by most code-blocks, see above table for a complete list.  A local scope usually inherits all the variables from its parent scope, both for reading and writing. There are two subtypes of local scopes, hard and soft, with slightly different rules concerning what variables are inherited. Unlike global scopes, local scopes are not namespaces, thus variables in an inner scope cannot be retrieved from the parent scope through some sort of qualified access.The following rules and examples pertain to both hard and soft local scopes. A newly introduced variable in a local scope does not back-propagate to its parent scope. For example, here the z is not introduced into the top-level scope:julia> for i = 1:10\\n           z = i\\n       end\\n\\njulia> z\\nERROR: UndefVarError: z not defined(Note, in this and all following examples it is assumed that their top-level is a global scope with a clean workspace, for instance a newly started REPL.)Inside a local scope a variable can be forced to be a local variable using the local keyword:julia> x = 0;\\n\\njulia> for i = 1:10\\n           local x\\n           x = i + 1\\n       end\\n\\njulia> x\\n0Inside a local scope a new global variable can be defined using the keyword global:julia> for i = 1:10\\n           global z\\n           z = i\\n       end\\n\\njulia> z\\n10The location of both the local and global keywords within the scope block is irrelevant. The following is equivalent to the last example (although stylistically worse):julia> for i = 1:10\\n           z = i\\n           global z\\n       end\\n\\njulia> z\\n10\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#Soft-Local-Scope-1\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"Soft Local Scope\",\n    \"category\": \"section\",\n    \"text\": \"In a soft local scope, all variables are inherited from its parent scope unless a variable is specifically marked with the keyword local.Soft local scopes are introduced by for-loops, while-loops, comprehensions, try-catch-finally-blocks, and let-blocks. There are some extra rules for Let Blocks and for For Loops and Comprehensions.In the following example the x and y refer always to the same variables as the soft local scope inherits both read and write variables:julia> x, y = 0, 1;\\n\\njulia> for i = 1:10\\n           x = i + y + 1\\n       end\\n\\njulia> x\\n12Within soft scopes, the global keyword is never necessary, although allowed. The only case when it would change the semantics is (currently) a syntax error:julia> let\\n           local j = 2\\n           let\\n               global j = 3\\n           end\\n       end\\nERROR: syntax: `global j`: j is local variable in the enclosing scope\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#Hard-Local-Scope-1\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"Hard Local Scope\",\n    \"category\": \"section\",\n    \"text\": \"Hard local scopes are introduced by function definitions (in all their forms), struct type definition blocks, and macro-definitions.In a hard local scope, all variables are inherited from its parent scope unless:an assignment would result in a modified global variable, or\\na variable is specifically marked with the keyword local.Thus global variables are only inherited for reading but not for writing:julia> x, y = 1, 2;\\n\\njulia> function foo()\\n           x = 2        # assignment introduces a new local\\n           return x + y # y refers to the global\\n       end;\\n\\njulia> foo()\\n4\\n\\njulia> x\\n1An explicit global is needed to assign to a global variable:julia> x = 1;\\n\\njulia> function foobar()\\n           global x = 2\\n       end;\\n\\njulia> foobar();\\n\\njulia> x\\n2Note that nested functions can behave differently to functions defined in the global scope as they can modify their parent scope's local variables:julia> x, y = 1, 2;\\n\\njulia> function baz()\\n           x = 2 # introduces a new local\\n           function bar()\\n               x = 10       # modifies the parent's x\\n               return x + y # y is global\\n           end\\n           return bar() + x # 12 + 10 (x is modified in call of bar())\\n       end;\\n\\njulia> baz()\\n22\\n\\njulia> x, y\\n(1, 2)The distinction between inheriting global and local variables for assignment can lead to some slight differences between functions defined in local vs. global scopes. Consider the modification of the last example by moving bar to the global scope:julia> x, y = 1, 2;\\n\\njulia> function bar()\\n           x = 10 # local\\n           return x + y\\n       end;\\n\\njulia> function quz()\\n           x = 2 # local\\n           return bar() + x # 12 + 2 (x is not modified)\\n       end;\\n\\njulia> quz()\\n14\\n\\njulia> x, y\\n(1, 2)Note that above subtlety does not pertain to type and macro definitions as they can only appear at the global scope. There are special scoping rules concerning the evaluation of default and keyword function arguments which are described in the Function section.An assignment introducing a variable used inside a function, type or macro definition need not come before its inner usage:julia> f = y -> y + a\\n(::#1) (generic function with 1 method)\\n\\njulia> f(3)\\nERROR: UndefVarError: a not defined\\nStacktrace:\\n [1] (::##1#2)(::Int64) at ./none:1\\n\\njulia> a = 1\\n1\\n\\njulia> f(3)\\n4This behavior may seem slightly odd for a normal variable, but allows for named functions \u2013 which are just normal variables holding function objects \u2013 to be used before they are defined. This allows functions to be defined in whatever order is intuitive and convenient, rather than forcing bottom up ordering or requiring forward declarations, as long as they are defined by the time they are actually called. As an example, here is an inefficient, mutually recursive way to test if positive integers are even or odd:julia> even(n) = n == 0 ? true : odd(n-1);\\n\\njulia> odd(n) = n == 0 ? false : even(n-1);\\n\\njulia> even(3)\\nfalse\\n\\njulia> odd(3)\\ntrueJulia provides built-in, efficient functions to test for oddness and evenness called iseven() and isodd() so the above definitions should only be taken as examples.\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#Hard-vs.-Soft-Local-Scope-1\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"Hard vs. Soft Local Scope\",\n    \"category\": \"section\",\n    \"text\": \"Blocks which introduce a soft local scope, such as loops, are generally used to manipulate the variables in their parent scope. Thus their default is to fully access all variables in their parent scope.Conversely, the code inside blocks which introduce a hard local scope (function, type, and macro definitions) can be executed at any place in a program. Remotely changing the state of global variables in other modules should be done with care and thus this is an opt-in feature requiring the global keyword.The reason to allow modifying local variables of parent scopes in nested functions is to allow constructing closures which have a private state, for instance the state variable in the following example:julia> let\\n           state = 0\\n           global counter\\n           counter() = state += 1\\n       end;\\n\\njulia> counter()\\n1\\n\\njulia> counter()\\n2See also the closures in the examples in the next two sections.\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#Let-Blocks-1\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"Let Blocks\",\n    \"category\": \"section\",\n    \"text\": \"Unlike assignments to local variables, let statements allocate new variable bindings each time they run. An assignment modifies an existing value location, and let creates new locations. This difference is usually not important, and is only detectable in the case of variables that outlive their scope via closures. The let syntax accepts a comma-separated series of assignments and variable names:julia> x, y, z = -1, -1, -1;\\n\\njulia> let x = 1, z\\n           println(\\\"x: $x, y: $y\\\") # x is local variable, y the global\\n           println(\\\"z: $z\\\") # errors as z has not been assigned yet but is local\\n       end\\nx: 1, y: -1\\nERROR: UndefVarError: z not definedThe assignments are evaluated in order, with each right-hand side evaluated in the scope before the new variable on the left-hand side has been introduced. Therefore it makes sense to write something like let x = x since the two x variables are distinct and have separate storage. Here is an example where the behavior of let is needed:julia> Fs = Array{Any}(2); i = 1;\\n\\njulia> while i <= 2\\n           Fs[i] = ()->i\\n           i += 1\\n       end\\n\\njulia> Fs[1]()\\n3\\n\\njulia> Fs[2]()\\n3Here we create and store two closures that return variable i. However, it is always the same variable i, so the two closures behave identically. We can use let to create a new binding for i:julia> Fs = Array{Any}(2); i = 1;\\n\\njulia> while i <= 2\\n           let i = i\\n               Fs[i] = ()->i\\n           end\\n           i += 1\\n       end\\n\\njulia> Fs[1]()\\n1\\n\\njulia> Fs[2]()\\n2Since the begin construct does not introduce a new scope, it can be useful to use a zero-argument let to just introduce a new scope block without creating any new bindings:julia> let\\n           local x = 1\\n           let\\n               local x = 2\\n           end\\n           x\\n       end\\n1Since let introduces a new scope block, the inner local x is a different variable than the outer local x.\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#For-Loops-and-Comprehensions-1\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"For Loops and Comprehensions\",\n    \"category\": \"section\",\n    \"text\": \"for loops and Comprehensions have the following behavior: any new variables introduced in their body scopes are freshly allocated for each loop iteration. This is in contrast to while loops which reuse the variables for all iterations. Therefore these constructs are similar to while loops with let blocks inside:julia> Fs = Array{Any}(2);\\n\\njulia> for j = 1:2\\n           Fs[j] = ()->j\\n       end\\n\\njulia> Fs[1]()\\n1\\n\\njulia> Fs[2]()\\n2for loops will reuse existing variables for its iteration variable:julia> i = 0;\\n\\njulia> for i = 1:3\\n       end\\n\\njulia> i\\n3However, comprehensions do not do this, and always freshly allocate their iteration variables:julia> x = 0;\\n\\njulia> [ x for x = 1:3 ];\\n\\njulia> x\\n0\"\n},\n\n{\n    \"location\": \"manual/variables-and-scoping.html#Constants-1\",\n    \"page\": \"Scope of Variables\",\n    \"title\": \"Constants\",\n    \"category\": \"section\",\n    \"text\": \"A common use of variables is giving names to specific, unchanging values. Such variables are only assigned once. This intent can be conveyed to the compiler using the const keyword:julia> const e  = 2.71828182845904523536;\\n\\njulia> const pi = 3.14159265358979323846;The const declaration is allowed on both global and local variables, but is especially useful for globals. It is difficult for the compiler to optimize code involving global variables, since their values (or even their types) might change at almost any time. If a global variable will not change, adding a const declaration solves this performance problem.Local constants are quite different. The compiler is able to determine automatically when a local variable is constant, so local constant declarations are not necessary for performance purposes.Special top-level assignments, such as those performed by the function and struct keywords, are constant by default.Note that const only affects the variable binding; the variable may be bound to a mutable object (such as an array), and that object may still be modified.\"\n},\n\n{\n    \"location\": \"manual/types.html#\",\n    \"page\": \"Types\",\n    \"title\": \"Types\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/types.html#man-types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Types\",\n    \"category\": \"section\",\n    \"text\": \"Type systems have traditionally fallen into two quite different camps: static type systems, where every program expression must have a type computable before the execution of the program, and dynamic type systems, where nothing is known about types until run time, when the actual values manipulated by the program are available. Object orientation allows some flexibility in statically typed languages by letting code be written without the precise types of values being known at compile time. The ability to write code that can operate on different types is called polymorphism. All code in classic dynamically typed languages is polymorphic: only by explicitly checking types, or when objects fail to support operations at run-time, are the types of any values ever restricted.Julia's type system is dynamic, but gains some of the advantages of static type systems by making it possible to indicate that certain values are of specific types. This can be of great assistance in generating efficient code, but even more significantly, it allows method dispatch on the types of function arguments to be deeply integrated with the language. Method dispatch is explored in detail in Methods, but is rooted in the type system presented here.The default behavior in Julia when types are omitted is to allow values to be of any type. Thus, one can write many useful Julia programs without ever explicitly using types. When additional expressiveness is needed, however, it is easy to gradually introduce explicit type annotations into previously \\\"untyped\\\" code. Doing so will typically increase both the performance and robustness of these systems, and perhaps somewhat counterintuitively, often significantly simplify them.Describing Julia in the lingo of type systems, it is: dynamic, nominative and parametric. Generic types can be parameterized, and the hierarchical relationships between types are explicitly declared, rather than implied by compatible structure. One particularly distinctive feature of Julia's type system is that concrete types may not subtype each other: all concrete types are final and may only have abstract types as their supertypes. While this might at first seem unduly restrictive, it has many beneficial consequences with surprisingly few drawbacks. It turns out that being able to inherit behavior is much more important than being able to inherit structure, and inheriting both causes significant difficulties in traditional object-oriented languages. Other high-level aspects of Julia's type system that should be mentioned up front are:There is no division between object and non-object values: all values in Julia are true objects having a type that belongs to a single, fully connected type graph, all nodes of which are equally first-class as types.\\nThere is no meaningful concept of a \\\"compile-time type\\\": the only type a value has is its actual type when the program is running. This is called a \\\"run-time type\\\" in object-oriented languages where the combination of static compilation with polymorphism makes this distinction significant.\\nOnly values, not variables, have types \u2013 variables are simply names bound to values.\\nBoth abstract and concrete types can be parameterized by other types. They can also be parameterized by symbols, by values of any type for which isbits() returns true (essentially, things like numbers and bools that are stored like C types or structs with no pointers to other objects), and also by tuples thereof. Type parameters may be omitted when they do not need to be referenced or restricted.Julia's type system is designed to be powerful and expressive, yet clear, intuitive and unobtrusive. Many Julia programmers may never feel the need to write code that explicitly uses types. Some kinds of programming, however, become clearer, simpler, faster and more robust with declared types.\"\n},\n\n{\n    \"location\": \"manual/types.html#Type-Declarations-1\",\n    \"page\": \"Types\",\n    \"title\": \"Type Declarations\",\n    \"category\": \"section\",\n    \"text\": \"The :: operator can be used to attach type annotations to expressions and variables in programs. There are two primary reasons to do this:As an assertion to help confirm that your program works the way you expect,\\nTo provide extra type information to the compiler, which can then improve performance in some casesWhen appended to an expression computing a value, the :: operator is read as \\\"is an instance of\\\". It can be used anywhere to assert that the value of the expression on the left is an instance of the type on the right. When the type on the right is concrete, the value on the left must have that type as its implementation \u2013 recall that all concrete types are final, so no implementation is a subtype of any other. When the type is abstract, it suffices for the value to be implemented by a concrete type that is a subtype of the abstract type. If the type assertion is not true, an exception is thrown, otherwise, the left-hand value is returned:julia> (1+2)::AbstractFloat\\nERROR: TypeError: typeassert: expected AbstractFloat, got Int64\\n\\njulia> (1+2)::Int\\n3This allows a type assertion to be attached to any expression in-place.When appended to a variable on the left-hand side of an assignment, or as part of a local declaration, the :: operator means something a bit different: it declares the variable to always have the specified type, like a type declaration in a statically-typed language such as C. Every value assigned to the variable will be converted to the declared type using convert():julia> function foo()\\n           x::Int8 = 100\\n           x\\n       end\\nfoo (generic function with 1 method)\\n\\njulia> foo()\\n100\\n\\njulia> typeof(ans)\\nInt8This feature is useful for avoiding performance \\\"gotchas\\\" that could occur if one of the assignments to a variable changed its type unexpectedly.This \\\"declaration\\\" behavior only occurs in specific contexts:local x::Int8  # in a local declaration\\nx::Int8 = 10   # as the left-hand side of an assignmentand applies to the whole current scope, even before the declaration. Currently, type declarations cannot be used in global scope, e.g. in the REPL, since Julia does not yet have constant-type globals.Declarations can also be attached to function definitions:function sinc(x)::Float64\\n    if x == 0\\n        return 1\\n    end\\n    return sin(pi*x)/(pi*x)\\nendReturning from this function behaves just like an assignment to a variable with a declared type: the value is always converted to Float64.\"\n},\n\n{\n    \"location\": \"manual/types.html#Abstract-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Abstract Types\",\n    \"category\": \"section\",\n    \"text\": \"Abstract types cannot be instantiated, and serve only as nodes in the type graph, thereby describing sets of related concrete types: those concrete types which are their descendants. We begin with abstract types even though they have no instantiation because they are the backbone of the type system: they form the conceptual hierarchy which makes Julia's type system more than just a collection of object implementations.Recall that in Integers and Floating-Point Numbers, we introduced a variety of concrete types of numeric values: Int8, UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Int128, UInt128, Float16, Float32, and Float64. Although they have different representation sizes, Int8, Int16, Int32, Int64 and Int128 all have in common that they are signed integer types. Likewise UInt8, UInt16, UInt32, UInt64 and UInt128 are all unsigned integer types, while Float16, Float32 and Float64 are distinct in being floating-point types rather than integers. It is common for a piece of code to make sense, for example, only if its arguments are some kind of integer, but not really depend on what particular kind of integer. For example, the greatest common denominator algorithm works for all kinds of integers, but will not work for floating-point numbers. Abstract types allow the construction of a hierarchy of types, providing a context into which concrete types can fit. This allows you, for example, to easily program to any type that is an integer, without restricting an algorithm to a specific type of integer.Abstract types are declared using the abstract type keyword. The general syntaxes for declaring an abstract type are:abstract type \u00abname\u00bb end\\nabstract type \u00abname\u00bb <: \u00absupertype\u00bb endThe abstract type keyword introduces a new abstract type, whose name is given by \u00abname\u00bb. This name can be optionally followed by <: and an already-existing type, indicating that the newly declared abstract type is a subtype of this \\\"parent\\\" type.When no supertype is given, the default supertype is Any \u2013 a predefined abstract type that all objects are instances of and all types are subtypes of. In type theory, Any is commonly called \\\"top\\\" because it is at the apex of the type graph. Julia also has a predefined abstract \\\"bottom\\\" type, at the nadir of the type graph, which is written as Union{}. It is the exact opposite of Any: no object is an instance of Union{} and all types are supertypes of Union{}.Let's consider some of the abstract types that make up Julia's numerical hierarchy:abstract type Number end\\nabstract type Real     <: Number end\\nabstract type AbstractFloat <: Real end\\nabstract type Integer  <: Real end\\nabstract type Signed   <: Integer end\\nabstract type Unsigned <: Integer endThe Number type is a direct child type of Any, and Real is its child. In turn, Real has two children (it has more, but only two are shown here; we'll get to the others later): Integer and AbstractFloat, separating the world into representations of integers and representations of real numbers. Representations of real numbers include, of course, floating-point types, but also include other types, such as rationals. Hence, AbstractFloat is a proper subtype of Real, including only floating-point representations of real numbers. Integers are further subdivided into Signed and Unsigned varieties.The <: operator in general means \\\"is a subtype of\\\", and, used in declarations like this, declares the right-hand type to be an immediate supertype of the newly declared type. It can also be used in expressions as a subtype operator which returns true when its left operand is a subtype of its right operand:julia> Integer <: Number\\ntrue\\n\\njulia> Integer <: AbstractFloat\\nfalseAn important use of abstract types is to provide default implementations for concrete types. To give a simple example, consider:function myplus(x,y)\\n    x+y\\nendThe first thing to note is that the above argument declarations are equivalent to x::Any and y::Any. When this function is invoked, say as myplus(2,5), the dispatcher chooses the most specific method named myplus that matches the given arguments. (See Methods for more information on multiple dispatch.)Assuming no method more specific than the above is found, Julia next internally defines and compiles a method called myplus specifically for two Int arguments based on the generic function given above, i.e., it implicitly defines and compiles:function myplus(x::Int,y::Int)\\n    x+y\\nendand finally, it invokes this specific method.Thus, abstract types allow programmers to write generic functions that can later be used as the default method by many combinations of concrete types. Thanks to multiple dispatch, the programmer has full control over whether the default or more specific method is used.An important point to note is that there is no loss in performance if the programmer relies on a function whose arguments are abstract types, because it is recompiled for each tuple of argument concrete types with which it is invoked. (There may be a performance issue, however, in the case of function arguments that are containers of abstract types; see Performance Tips.)\"\n},\n\n{\n    \"location\": \"manual/types.html#Primitive-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Primitive Types\",\n    \"category\": \"section\",\n    \"text\": \"A primitive type is a concrete type whose data consists of plain old bits. Classic examples of primitive types are integers and floating-point values. Unlike most languages, Julia lets you declare your own primitive types, rather than providing only a fixed set of built-in ones. In fact, the standard primitive types are all defined in the language itself:primitive type Float16 <: AbstractFloat 16 end\\nprimitive type Float32 <: AbstractFloat 32 end\\nprimitive type Float64 <: AbstractFloat 64 end\\n\\nprimitive type Bool <: Integer 8 end\\nprimitive type Char 32 end\\n\\nprimitive type Int8    <: Signed   8 end\\nprimitive type UInt8   <: Unsigned 8 end\\nprimitive type Int16   <: Signed   16 end\\nprimitive type UInt16  <: Unsigned 16 end\\nprimitive type Int32   <: Signed   32 end\\nprimitive type UInt32  <: Unsigned 32 end\\nprimitive type Int64   <: Signed   64 end\\nprimitive type UInt64  <: Unsigned 64 end\\nprimitive type Int128  <: Signed   128 end\\nprimitive type UInt128 <: Unsigned 128 endThe general syntaxes for declaring a primitive type are:primitive type \u00abname\u00bb \u00abbits\u00bb end\\nprimitive type \u00abname\u00bb <: \u00absupertype\u00bb \u00abbits\u00bb endThe number of bits indicates how much storage the type requires and the name gives the new type a name. A primitive type can optionally be declared to be a subtype of some supertype. If a supertype is omitted, then the type defaults to having Any as its immediate supertype. The declaration of Bool above therefore means that a boolean value takes eight bits to store, and has Integer as its immediate supertype. Currently, only sizes that are multiples of 8 bits are supported. Therefore, boolean values, although they really need just a single bit, cannot be declared to be any smaller than eight bits.The types Bool, Int8 and UInt8 all have identical representations: they are eight-bit chunks of memory. Since Julia's type system is nominative, however, they are not interchangeable despite having identical structure. A fundamental difference between them is that they have different supertypes: Bool's direct supertype is Integer, Int8's is Signed, and UInt8's is Unsigned. All other differences between Bool, Int8, and UInt8 are matters of behavior \u2013 the way functions are defined to act when given objects of these types as arguments. This is why a nominative type system is necessary: if structure determined type, which in turn dictates behavior, then it would be impossible to make Bool behave any differently than Int8 or UInt8.\"\n},\n\n{\n    \"location\": \"manual/types.html#Composite-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Composite Types\",\n    \"category\": \"section\",\n    \"text\": \"Composite types are called records, structs, or objects in various languages. A composite type is a collection of named fields, an instance of which can be treated as a single value. In many languages, composite types are the only kind of user-definable type, and they are by far the most commonly used user-defined type in Julia as well.In mainstream object oriented languages, such as C++, Java, Python and Ruby, composite types also have named functions associated with them, and the combination is called an \\\"object\\\". In purer object-oriented languages, such as Ruby or Smalltalk, all values are objects whether they are composites or not. In less pure object oriented languages, including C++ and Java, some values, such as integers and floating-point values, are not objects, while instances of user-defined composite types are true objects with associated methods. In Julia, all values are objects, but functions are not bundled with the objects they operate on. This is necessary since Julia chooses which method of a function to use by multiple dispatch, meaning that the types of all of a function's arguments are considered when selecting a method, rather than just the first one (see Methods for more information on methods and dispatch). Thus, it would be inappropriate for functions to \\\"belong\\\" to only their first argument. Organizing methods into function objects rather than having named bags of methods \\\"inside\\\" each object ends up being a highly beneficial aspect of the language design.Composite types are introduced with the struct keyword followed by a block of field names, optionally annotated with types using the :: operator:julia> struct Foo\\n           bar\\n           baz::Int\\n           qux::Float64\\n       endFields with no type annotation default to Any, and can accordingly hold any type of value.New objects of type Foo are created by applying the Foo type object like a function to values for its fields:julia> foo = Foo(\\\"Hello, world.\\\", 23, 1.5)\\nFoo(\\\"Hello, world.\\\", 23, 1.5)\\n\\njulia> typeof(foo)\\nFooWhen a type is applied like a function it is called a constructor. Two constructors are generated automatically (these are called default constructors). One accepts any arguments and calls convert() to convert them to the types of the fields, and the other accepts arguments that match the field types exactly. The reason both of these are generated is that this makes it easier to add new definitions without inadvertently replacing a default constructor.Since the bar field is unconstrained in type, any value will do. However, the value for baz must be convertible to Int:julia> Foo((), 23.5, 1)\\nERROR: InexactError()\\nStacktrace:\\n [1] convert(::Type{Int64}, ::Float64) at ./float.jl:679\\n [2] Foo(::Tuple{}, ::Float64, ::Int64) at ./none:2You may find a list of field names using the fieldnames function.julia> fieldnames(foo)\\n3-element Array{Symbol,1}:\\n :bar\\n :baz\\n :quxYou can access the field values of a composite object using the traditional foo.bar notation:julia> foo.bar\\n\\\"Hello, world.\\\"\\n\\njulia> foo.baz\\n23\\n\\njulia> foo.qux\\n1.5Composite objects declared with struct are immutable; they cannot be modified after construction. This may seem odd at first, but it has several advantages:It can be more efficient. Some structs can be packed efficiently into arrays, and in some cases the compiler is able to avoid allocating immutable objects entirely.\\nIt is not possible to violate the invariants provided by the type's constructors.\\nCode using immutable objects can be easier to reason about.An immutable object might contain mutable objects, such as arrays, as fields. Those contained objects will remain mutable; only the fields of the immutable object itself cannot be changed to point to different objects.Where required, mutable composite objects can be declared with the keyword mutable struct, to be discussed in the next section.Composite types with no fields are singletons; there can be only one instance of such types:julia> struct NoFields\\n       end\\n\\njulia> NoFields() === NoFields()\\ntrueThe === function confirms that the \\\"two\\\" constructed instances of NoFields are actually one and the same. Singleton types are described in further detail below.There is much more to say about how instances of composite types are created, but that discussion depends on both Parametric Types and on Methods, and is sufficiently important to be addressed in its own section: Constructors.\"\n},\n\n{\n    \"location\": \"manual/types.html#Mutable-Composite-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Mutable Composite Types\",\n    \"category\": \"section\",\n    \"text\": \"If a composite type is declared with mutable struct instead of struct, then instances of it can be modified:julia> mutable struct Bar\\n           baz\\n           qux::Float64\\n       end\\n\\njulia> bar = Bar(\\\"Hello\\\", 1.5);\\n\\njulia> bar.qux = 2.0\\n2.0\\n\\njulia> bar.baz = 1//2\\n1//2In order to support mutation, such objects are generally allocated on the heap, and have stable memory addresses. A mutable object is like a little container that might hold different values over time, and so can only be reliably identified with its address. In contrast, an instance of an immutable type is associated with specific field values \u2013- the field values alone tell you everything about the object. In deciding whether to make a type mutable, ask whether two instances with the same field values would be considered identical, or if they might need to change independently over time. If they would be considered identical, the type should probably be immutable.To recap, two essential properties define immutability in Julia:An object with an immutable type is passed around (both in assignment statements and in function calls) by copying, whereas a mutable type is passed around by reference.\\nIt is not permitted to modify the fields of a composite immutable type.It is instructive, particularly for readers whose background is C/C++, to consider why these two properties go hand in hand.  If they were separated, i.e., if the fields of objects passed around by copying could be modified, then it would become more difficult to reason about certain instances of generic code.  For example, suppose x is a function argument of an abstract type, and suppose that the function changes a field: x.isprocessed = true.  Depending on whether x is passed by copying or by reference, this statement may or may not alter the actual argument in the calling routine.  Julia sidesteps the possibility of creating functions with unknown effects in this scenario by forbidding modification of fields of objects passed around by copying.\"\n},\n\n{\n    \"location\": \"manual/types.html#Declared-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Declared Types\",\n    \"category\": \"section\",\n    \"text\": \"The three kinds of types discussed in the previous three sections are actually all closely related. They share the same key properties:They are explicitly declared.\\nThey have names.\\nThey have explicitly declared supertypes.\\nThey may have parameters.Because of these shared properties, these types are internally represented as instances of the same concept, DataType, which is the type of any of these types:julia> typeof(Real)\\nDataType\\n\\njulia> typeof(Int)\\nDataTypeA DataType may be abstract or concrete. If it is concrete, it has a specified size, storage layout, and (optionally) field names. Thus a bits type is a DataType with nonzero size, but no field names. A composite type is a DataType that has field names or is empty (zero size).Every concrete value in the system is an instance of some DataType.\"\n},\n\n{\n    \"location\": \"manual/types.html#Type-Unions-1\",\n    \"page\": \"Types\",\n    \"title\": \"Type Unions\",\n    \"category\": \"section\",\n    \"text\": \"A type union is a special abstract type which includes as objects all instances of any of its argument types, constructed using the special Union function:julia> IntOrString = Union{Int,AbstractString}\\nUnion{AbstractString, Int64}\\n\\njulia> 1 :: IntOrString\\n1\\n\\njulia> \\\"Hello!\\\" :: IntOrString\\n\\\"Hello!\\\"\\n\\njulia> 1.0 :: IntOrString\\nERROR: TypeError: typeassert: expected Union{AbstractString, Int64}, got Float64The compilers for many languages have an internal union construct for reasoning about types; Julia simply exposes it to the programmer.\"\n},\n\n{\n    \"location\": \"manual/types.html#Parametric-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Parametric Types\",\n    \"category\": \"section\",\n    \"text\": \"An important and powerful feature of Julia's type system is that it is parametric: types can take parameters, so that type declarations actually introduce a whole family of new types \u2013 one for each possible combination of parameter values. There are many languages that support some version of generic programming, wherein data structures and algorithms to manipulate them may be specified without specifying the exact types involved. For example, some form of generic programming exists in ML, Haskell, Ada, Eiffel, C++, Java, C#, F#, and Scala, just to name a few. Some of these languages support true parametric polymorphism (e.g. ML, Haskell, Scala), while others support ad-hoc, template-based styles of generic programming (e.g. C++, Java). With so many different varieties of generic programming and parametric types in various languages, we won't even attempt to compare Julia's parametric types to other languages, but will instead focus on explaining Julia's system in its own right. We will note, however, that because Julia is a dynamically typed language and doesn't need to make all type decisions at compile time, many traditional difficulties encountered in static parametric type systems can be relatively easily handled.All declared types (the DataType variety) can be parameterized, with the same syntax in each case. We will discuss them in the following order: first, parametric composite types, then parametric abstract types, and finally parametric bits types.\"\n},\n\n{\n    \"location\": \"manual/types.html#Parametric-Composite-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Parametric Composite Types\",\n    \"category\": \"section\",\n    \"text\": \"Type parameters are introduced immediately after the type name, surrounded by curly braces:julia> struct Point{T}\\n           x::T\\n           y::T\\n       endThis declaration defines a new parametric type, Point{T}, holding two \\\"coordinates\\\" of type T. What, one may ask, is T? Well, that's precisely the point of parametric types: it can be any type at all (or a value of any bits type, actually, although here it's clearly used as a type). Point{Float64} is a concrete type equivalent to the type defined by replacing T in the definition of Point with Float64. Thus, this single declaration actually declares an unlimited number of types: Point{Float64}, Point{AbstractString}, Point{Int64}, etc. Each of these is now a usable concrete type:julia> Point{Float64}\\nPoint{Float64}\\n\\njulia> Point{AbstractString}\\nPoint{AbstractString}The type Point{Float64} is a point whose coordinates are 64-bit floating-point values, while the type Point{AbstractString} is a \\\"point\\\" whose \\\"coordinates\\\" are string objects (see Strings).Point itself is also a valid type object, containing all instances Point{Float64}, Point{AbstractString}, etc. as subtypes:julia> Point{Float64} <: Point\\ntrue\\n\\njulia> Point{AbstractString} <: Point\\ntrueOther types, of course, are not subtypes of it:julia> Float64 <: Point\\nfalse\\n\\njulia> AbstractString <: Point\\nfalseConcrete Point types with different values of T are never subtypes of each other:julia> Point{Float64} <: Point{Int64}\\nfalse\\n\\njulia> Point{Float64} <: Point{Real}\\nfalsewarning: Warning\\nThis last point is very important: even though Float64 <: Real we DO NOT have Point{Float64} <: Point{Real}.In other words, in the parlance of type theory, Julia's type parameters are invariant, rather than being covariant (or even contravariant). This is for practical reasons: while any instance of Point{Float64} may conceptually be like an instance of Point{Real} as well, the two types have different representations in memory:An instance of Point{Float64} can be represented compactly and efficiently as an immediate pair of 64-bit values;\\nAn instance of Point{Real} must be able to hold any pair of instances of Real. Since objects that are instances of Real can be of arbitrary size and structure, in practice an instance of Point{Real} must be represented as a pair of pointers to individually allocated Real objects.The efficiency gained by being able to store Point{Float64} objects with immediate values is magnified enormously in the case of arrays: an Array{Float64} can be stored as a contiguous memory block of 64-bit floating-point values, whereas an Array{Real} must be an array of pointers to individually allocated Real objects \u2013 which may well be boxed 64-bit floating-point values, but also might be arbitrarily large, complex objects, which are declared to be implementations of the Real abstract type.Since Point{Float64} is not a subtype of Point{Real}, the following method can't be applied to arguments of type Point{Float64}:function norm(p::Point{Real})\\n    sqrt(p.x^2 + p.y^2)\\nendA correct way to define a method that accepts all arguments of type Point{T} where T is a subtype of Real is:function norm(p::Point{<:Real})\\n    sqrt(p.x^2 + p.y^2)\\nend(Equivalently, one could define function norm{T<:Real}(p::Point{T}) or function norm(p::Point{T} where T<:Real); see UnionAll Types.)More examples will be discussed later in Methods.How does one construct a Point object? It is possible to define custom constructors for composite types, which will be discussed in detail in Constructors, but in the absence of any special constructor declarations, there are two default ways of creating new composite objects, one in which the type parameters are explicitly given and the other in which they are implied by the arguments to the object constructor.Since the type Point{Float64} is a concrete type equivalent to Point declared with Float64 in place of T, it can be applied as a constructor accordingly:julia> Point{Float64}(1.0, 2.0)\\nPoint{Float64}(1.0, 2.0)\\n\\njulia> typeof(ans)\\nPoint{Float64}For the default constructor, exactly one argument must be supplied for each field:julia> Point{Float64}(1.0)\\nERROR: MethodError: Cannot `convert` an object of type Float64 to an object of type Point{Float64}\\nThis may have arisen from a call to the constructor Point{Float64}(...),\\nsince type constructors fall back to convert methods.\\nStacktrace:\\n [1] Point{Float64}(::Float64) at ./sysimg.jl:77\\n\\njulia> Point{Float64}(1.0,2.0,3.0)\\nERROR: MethodError: no method matching Point{Float64}(::Float64, ::Float64, ::Float64)Only one default constructor is generated for parametric types, since overriding it is not possible. This constructor accepts any arguments and converts them to the field types.In many cases, it is redundant to provide the type of Point object one wants to construct, since the types of arguments to the constructor call already implicitly provide type information. For that reason, you can also apply Point itself as a constructor, provided that the implied value of the parameter type T is unambiguous:julia> Point(1.0,2.0)\\nPoint{Float64}(1.0, 2.0)\\n\\njulia> typeof(ans)\\nPoint{Float64}\\n\\njulia> Point(1,2)\\nPoint{Int64}(1, 2)\\n\\njulia> typeof(ans)\\nPoint{Int64}In the case of Point, the type of T is unambiguously implied if and only if the two arguments to Point have the same type. When this isn't the case, the constructor will fail with a MethodError:julia> Point(1,2.5)\\nERROR: MethodError: no method matching Point(::Int64, ::Float64)\\nClosest candidates are:\\n  Point(::T, !Matched::T) where T at none:2Constructor methods to appropriately handle such mixed cases can be defined, but that will not be discussed until later on in Constructors.\"\n},\n\n{\n    \"location\": \"manual/types.html#Parametric-Abstract-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Parametric Abstract Types\",\n    \"category\": \"section\",\n    \"text\": \"Parametric abstract type declarations declare a collection of abstract types, in much the same way:julia> abstract type Pointy{T} endWith this declaration, Pointy{T} is a distinct abstract type for each type or integer value of T. As with parametric composite types, each such instance is a subtype of Pointy:julia> Pointy{Int64} <: Pointy\\ntrue\\n\\njulia> Pointy{1} <: Pointy\\ntrueParametric abstract types are invariant, much as parametric composite types are:julia> Pointy{Float64} <: Pointy{Real}\\nfalse\\n\\njulia> Pointy{Real} <: Pointy{Float64}\\nfalseThe notation Pointy{<:Real} can be used to express the Julia analogue of a covariant type, while Pointy{>:Int} the analogue of a contravariant type, but technically these represent sets of types (see UnionAll Types).julia> Pointy{Float64} <: Pointy{<:Real}\\ntrue\\n\\njulia> Pointy{Real} <: Pointy{>:Int}\\ntrueMuch as plain old abstract types serve to create a useful hierarchy of types over concrete types, parametric abstract types serve the same purpose with respect to parametric composite types. We could, for example, have declared Point{T} to be a subtype of Pointy{T} as follows:julia> struct Point{T} <: Pointy{T}\\n           x::T\\n           y::T\\n       endGiven such a declaration, for each choice of T, we have Point{T} as a subtype of Pointy{T}:julia> Point{Float64} <: Pointy{Float64}\\ntrue\\n\\njulia> Point{Real} <: Pointy{Real}\\ntrue\\n\\njulia> Point{AbstractString} <: Pointy{AbstractString}\\ntrueThis relationship is also invariant:julia> Point{Float64} <: Pointy{Real}\\nfalse\\n\\njulia> Point{Float64} <: Pointy{<:Real}\\ntrueWhat purpose do parametric abstract types like Pointy serve? Consider if we create a point-like implementation that only requires a single coordinate because the point is on the diagonal line x = y:julia> struct DiagPoint{T} <: Pointy{T}\\n           x::T\\n       endNow both Point{Float64} and DiagPoint{Float64} are implementations of the Pointy{Float64} abstraction, and similarly for every other possible choice of type T. This allows programming to a common interface shared by all Pointy objects, implemented for both Point and DiagPoint. This cannot be fully demonstrated, however, until we have introduced methods and dispatch in the next section, Methods.There are situations where it may not make sense for type parameters to range freely over all possible types. In such situations, one can constrain the range of T like so:julia> abstract type Pointy{T<:Real} endWith such a declaration, it is acceptable to use any type that is a subtype of Real in place of T, but not types that are not subtypes of Real:julia> Pointy{Float64}\\nPointy{Float64}\\n\\njulia> Pointy{Real}\\nPointy{Real}\\n\\njulia> Pointy{AbstractString}\\nERROR: TypeError: Pointy: in T, expected T<:Real, got Type{AbstractString}\\n\\njulia> Pointy{1}\\nERROR: TypeError: Pointy: in T, expected T<:Real, got Int64Type parameters for parametric composite types can be restricted in the same manner:struct Point{T<:Real} <: Pointy{T}\\n    x::T\\n    y::T\\nendTo give a real-world example of how all this parametric type machinery can be useful, here is the actual definition of Julia's Rational immutable type (except that we omit the constructor here for simplicity), representing an exact ratio of integers:struct Rational{T<:Integer} <: Real\\n    num::T\\n    den::T\\nendIt only makes sense to take ratios of integer values, so the parameter type T is restricted to being a subtype of Integer, and a ratio of integers represents a value on the real number line, so any Rational is an instance of the Real abstraction.\"\n},\n\n{\n    \"location\": \"manual/types.html#Tuple-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Tuple Types\",\n    \"category\": \"section\",\n    \"text\": \"Tuples are an abstraction of the arguments of a function \u2013 without the function itself. The salient aspects of a function's arguments are their order and their types. Therefore a tuple type is similar to a parameterized immutable type where each parameter is the type of one field. For example, a 2-element tuple type resembles the following immutable type:struct Tuple2{A,B}\\n    a::A\\n    b::B\\nendHowever, there are three key differences:Tuple types may have any number of parameters.\\nTuple types are covariant in their parameters: Tuple{Int} is a subtype of Tuple{Any}. Therefore Tuple{Any} is considered an abstract type, and tuple types are only concrete if their parameters are.\\nTuples do not have field names; fields are only accessed by index.Tuple values are written with parentheses and commas. When a tuple is constructed, an appropriate tuple type is generated on demand:julia> typeof((1,\\\"foo\\\",2.5))\\nTuple{Int64,String,Float64}Note the implications of covariance:julia> Tuple{Int,AbstractString} <: Tuple{Real,Any}\\ntrue\\n\\njulia> Tuple{Int,AbstractString} <: Tuple{Real,Real}\\nfalse\\n\\njulia> Tuple{Int,AbstractString} <: Tuple{Real,}\\nfalseIntuitively, this corresponds to the type of a function's arguments being a subtype of the function's signature (when the signature matches).\"\n},\n\n{\n    \"location\": \"manual/types.html#Vararg-Tuple-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Vararg Tuple Types\",\n    \"category\": \"section\",\n    \"text\": \"The last parameter of a tuple type can be the special type Vararg, which denotes any number of trailing elements:julia> mytupletype = Tuple{AbstractString,Vararg{Int}}\\nTuple{AbstractString,Vararg{Int64,N} where N}\\n\\njulia> isa((\\\"1\\\",), mytupletype)\\ntrue\\n\\njulia> isa((\\\"1\\\",1), mytupletype)\\ntrue\\n\\njulia> isa((\\\"1\\\",1,2), mytupletype)\\ntrue\\n\\njulia> isa((\\\"1\\\",1,2,3.0), mytupletype)\\nfalseNotice that Vararg{T} corresponds to zero or more elements of type T. Vararg tuple types are used to represent the arguments accepted by varargs methods (see Varargs Functions).The type Vararg{T,N} corresponds to exactly N elements of type T.  NTuple{N,T} is a convenient alias for Tuple{Vararg{T,N}}, i.e. a tuple type containing exactly N elements of type T.\"\n},\n\n{\n    \"location\": \"manual/types.html#man-singleton-types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Singleton Types\",\n    \"category\": \"section\",\n    \"text\": \"There is a special kind of abstract parametric type that must be mentioned here: singleton types. For each type, T, the \\\"singleton type\\\" Type{T} is an abstract type whose only instance is the object T. Since the definition is a little difficult to parse, let's look at some examples:julia> isa(Float64, Type{Float64})\\ntrue\\n\\njulia> isa(Real, Type{Float64})\\nfalse\\n\\njulia> isa(Real, Type{Real})\\ntrue\\n\\njulia> isa(Float64, Type{Real})\\nfalseIn other words, isa(A,Type{B}) is true if and only if A and B are the same object and that object is a type. Without the parameter, Type is simply an abstract type which has all type objects as its instances, including, of course, singleton types:julia> isa(Type{Float64}, Type)\\ntrue\\n\\njulia> isa(Float64, Type)\\ntrue\\n\\njulia> isa(Real, Type)\\ntrueAny object that is not a type is not an instance of Type:julia> isa(1, Type)\\nfalse\\n\\njulia> isa(\\\"foo\\\", Type)\\nfalseUntil we discuss Parametric Methods and conversions, it is difficult to explain the utility of the singleton type construct, but in short, it allows one to specialize function behavior on specific type values. This is useful for writing methods (especially parametric ones) whose behavior depends on a type that is given as an explicit argument rather than implied by the type of one of its arguments.A few popular languages have singleton types, including Haskell, Scala and Ruby. In general usage, the term \\\"singleton type\\\" refers to a type whose only instance is a single value. This meaning applies to Julia's singleton types, but with that caveat that only type objects have singleton types.\"\n},\n\n{\n    \"location\": \"manual/types.html#Parametric-Primitive-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Parametric Primitive Types\",\n    \"category\": \"section\",\n    \"text\": \"Primitive types can also be declared parametrically. For example, pointers are represented as primitive types which would be declared in Julia like this:# 32-bit system:\\nprimitive type Ptr{T} 32 end\\n\\n# 64-bit system:\\nprimitive type Ptr{T} 64 endThe slightly odd feature of these declarations as compared to typical parametric composite types, is that the type parameter T is not used in the definition of the type itself \u2013 it is just an abstract tag, essentially defining an entire family of types with identical structure, differentiated only by their type parameter. Thus, Ptr{Float64} and Ptr{Int64} are distinct types, even though they have identical representations. And of course, all specific pointer types are subtypes of the umbrella Ptr type:julia> Ptr{Float64} <: Ptr\\ntrue\\n\\njulia> Ptr{Int64} <: Ptr\\ntrue\"\n},\n\n{\n    \"location\": \"manual/types.html#UnionAll-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"UnionAll Types\",\n    \"category\": \"section\",\n    \"text\": \"We have said that a parametric type like Ptr acts as a supertype of all its instances (Ptr{Int64} etc.). How does this work? Ptr itself cannot be a normal data type, since without knowing the type of the referenced data the type clearly cannot be used for memory operations. The answer is that Ptr (or other parametric types like Array) is a different kind of type called a UnionAll type. Such a type expresses the iterated union of types for all values of some parameter.UnionAll types are usually written using the keyword where. For example Ptr could be more accurately written as Ptr{T} where T, meaning all values whose type is Ptr{T} for some value of T. In this context, the parameter T is also often called a \\\"type variable\\\" since it is like a variable that ranges over types. Each where introduces a single type variable, so these expressions are nested for types with multiple parameters, for example Array{T,N} where N where T.The type application syntax A{B,C} requires A to be a UnionAll type, and first substitutes B for the outermost type variable in A. The result is expected to be another UnionAll type, into which C is then substituted. So A{B,C} is equivalent to A{B}{C}. This explains why it is possible to partially instantiate a type, as in Array{Float64}: the first parameter value has been fixed, but the second still ranges over all possible values. Using explicit where syntax, any subset of parameters can be fixed. For example, the type of all 1-dimensional arrays can be written as Array{T,1} where T.Type variables can be restricted with subtype relations. Array{T} where T<:Integer refers to all arrays whose element type is some kind of Integer. The syntax Array{<:Integer} is a convenient shorthand for Array{T} where T<:Integer. Type variables can have both lower and upper bounds. Array{T} where Int<:T<:Number refers to all arrays of Numbers that are able to contain Ints (since T must be at least as big as Int). The syntax where T>:Int also works to specify only the lower bound of a type variable, and Array{>:Int} is equivalent to Array{T} where T>:Int.Since where expressions nest, type variable bounds can refer to outer type variables. For example Tuple{T,Array{S}} where S<:AbstractArray{T} where T<:Real refers to 2-tuples whose first element is some Real, and whose second element is an Array of any kind of array whose element type contains the type of the first tuple element.The where keyword itself can be nested inside a more complex declaration. For example, consider the two types created by the following declarations:julia> const T1 = Array{Array{T,1} where T, 1}\\nArray{Array{T,1} where T,1}\\n\\njulia> const T2 = Array{Array{T,1}, 1} where T\\nArray{Array{T,1},1} where TType T1 defines a 1-dimensional array of 1-dimensional arrays; each of the inner arrays consists of objects of the same type, but this type may vary from one inner array to the next. On the other hand, type T2 defines a 1-dimensional array of 1-dimensional arrays all of whose inner arrays must have the same type.  Note that T2 is an abstract type, e.g., Array{Array{Int,1},1} <: T2, whereas T1 is a concrete type. As a consequence, T1 can be constructed with a zero-argument constructor a=T1() but T2 cannot.There is a convenient syntax for naming such types, similar to the short form of function definition syntax:Vector{T} = Array{T,1}This is equivalent to const Vector = Array{T,1} where T. Writing Vector{Float64} is equivalent to writing Array{Float64,1}, and the umbrella type Vector has as instances all Array objects where the second parameter \u2013 the number of array dimensions \u2013 is 1, regardless of what the element type is. In languages where parametric types must always be specified in full, this is not especially helpful, but in Julia, this allows one to write just Vector for the abstract type including all one-dimensional dense arrays of any element type.\"\n},\n\n{\n    \"location\": \"manual/types.html#Type-Aliases-1\",\n    \"page\": \"Types\",\n    \"title\": \"Type Aliases\",\n    \"category\": \"section\",\n    \"text\": \"Sometimes it is convenient to introduce a new name for an already expressible type. This can be done with a simple assignment statement. For example, UInt is aliased to either UInt32 or UInt64 as is appropriate for the size of pointers on the system:# 32-bit system:\\njulia> UInt\\nUInt32\\n\\n# 64-bit system:\\njulia> UInt\\nUInt64This is accomplished via the following code in base/boot.jl:if Int === Int64\\n    const UInt = UInt64\\nelse\\n    const UInt = UInt32\\nendOf course, this depends on what Int is aliased to \u2013 but that is predefined to be the correct type \u2013 either Int32 or Int64.(Note that unlike Int, Float does not exist as a type alias for a specific sized AbstractFloat. Unlike with integer registers, the floating point register sizes are specified by the IEEE-754 standard. Whereas the size of Int reflects the size of a native pointer on that machine.)\"\n},\n\n{\n    \"location\": \"manual/types.html#Operations-on-Types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Operations on Types\",\n    \"category\": \"section\",\n    \"text\": \"Since types in Julia are themselves objects, ordinary functions can operate on them. Some functions that are particularly useful for working with or exploring types have already been introduced, such as the <: operator, which indicates whether its left hand operand is a subtype of its right hand operand.The isa function tests if an object is of a given type and returns true or false:julia> isa(1, Int)\\ntrue\\n\\njulia> isa(1, AbstractFloat)\\nfalseThe typeof() function, already used throughout the manual in examples, returns the type of its argument. Since, as noted above, types are objects, they also have types, and we can ask what their types are:julia> typeof(Rational{Int})\\nDataType\\n\\njulia> typeof(Union{Real,Float64,Rational})\\nDataType\\n\\njulia> typeof(Union{Real,String})\\nUnionWhat if we repeat the process? What is the type of a type of a type? As it happens, types are all composite values and thus all have a type of DataType:julia> typeof(DataType)\\nDataType\\n\\njulia> typeof(Union)\\nDataTypeDataType is its own type.Another operation that applies to some types is supertype(), which reveals a type's supertype. Only declared types (DataType) have unambiguous supertypes:julia> supertype(Float64)\\nAbstractFloat\\n\\njulia> supertype(Number)\\nAny\\n\\njulia> supertype(AbstractString)\\nAny\\n\\njulia> supertype(Any)\\nAnyIf you apply supertype() to other type objects (or non-type objects), a MethodError is raised:julia> supertype(Union{Float64,Int64})\\nERROR: MethodError: no method matching supertype(::Type{Union{Float64, Int64}})\\nClosest candidates are:\\n  supertype(!Matched::DataType) at operators.jl:41\\n  supertype(!Matched::UnionAll) at operators.jl:46\"\n},\n\n{\n    \"location\": \"manual/types.html#Custom-pretty-printing-1\",\n    \"page\": \"Types\",\n    \"title\": \"Custom pretty-printing\",\n    \"category\": \"section\",\n    \"text\": \"Often, one wants to customize how instances of a type are displayed.  This is accomplished by overloading the show() function.  For example, suppose we define a type to represent complex numbers in polar form:julia> struct Polar{T<:Real} <: Number\\n           r::T\\n           \u0398::T\\n       end\\n\\njulia> Polar(r::Real,\u0398::Real) = Polar(promote(r,\u0398)...)\\nPolarHere, we've added a custom constructor function so that it can take arguments of different Real types and promote them to a common type (see Constructors and Conversion and Promotion). (Of course, we would have to define lots of other methods, too, to make it act like a Number, e.g. +, *, one, zero, promotion rules and so on.) By default, instances of this type display rather simply, with information about the type name and the field values, as e.g. Polar{Float64}(3.0,4.0).If we want it to display instead as 3.0 * exp(4.0im), we would define the following method to print the object to a given output object io (representing a file, terminal, buffer, etcetera; see Networking and Streams):julia> Base.show(io::IO, z::Polar) = print(io, z.r, \\\" * exp(\\\", z.\u0398, \\\"im)\\\")More fine-grained control over display of Polar objects is possible. In particular, sometimes one wants both a verbose multi-line printing format, used for displaying a single object in the REPL and other interactive environments, and also a more compact single-line format used for print() or for displaying the object as part of another object (e.g. in an array). Although by default the show(io, z) function is called in both cases, you can define a different multi-line format for displaying an object by overloading a three-argument form of show that takes the text/plain MIME type as its second argument (see Multimedia I/O), for example:julia> Base.show{T}(io::IO, ::MIME\\\"text/plain\\\", z::Polar{T}) =\\n           print(io, \\\"Polar{$T} complex number:\\\\n   \\\", z)(Note that print(..., z) here will call the 2-argument show(io, z) method.) This results in:julia> Polar(3, 4.0)\\nPolar{Float64} complex number:\\n   3.0 * exp(4.0im)\\n\\njulia> [Polar(3, 4.0), Polar(4.0,5.3)]\\n2-element Array{Polar{Float64},1}:\\n 3.0 * exp(4.0im)\\n 4.0 * exp(5.3im)where the single-line show(io, z) form is still used for an array of Polar values.   Technically, the REPL calls display(z) to display the result of executing a line, which defaults to show(STDOUT, MIME(\\\"text/plain\\\"), z), which in turn defaults to show(STDOUT, z), but you should not define new display() methods unless you are defining a new multimedia display handler (see Multimedia I/O).Moreover, you can also define show methods for other MIME types in order to enable richer display (HTML, images, etcetera) of objects in environments that support this (e.g. IJulia).   For example, we can define formatted HTML display of Polar objects, with superscripts and italics, via:julia> Base.show{T}(io::IO, ::MIME\\\"text/html\\\", z::Polar{T}) =\\n           println(io, \\\"<code>Polar{$T}</code> complex number: \\\",\\n                   z.r, \\\" <i>e</i><sup>\\\", z.\u0398, \\\" <i>i</i></sup>\\\")A Polar object will then display automatically using HTML in an environment that supports HTML display, but you can call show manually to get HTML output if you want:julia> show(STDOUT, \\\"text/html\\\", Polar(3.0,4.0))\\n<code>Polar{Float64}</code> complex number: 3.0 <i>e</i><sup>4.0 <i>i</i></sup><p>An HTML renderer would display this as: <code>Polar{Float64}</code> complex number: 3.0 <i>e</i><sup>4.0 <i>i</i></sup></p>\"\n},\n\n{\n    \"location\": \"manual/types.html#\\\"Value-types\\\"-1\",\n    \"page\": \"Types\",\n    \"title\": \"\\\"Value types\\\"\",\n    \"category\": \"section\",\n    \"text\": \"In Julia, you can't dispatch on a value such as true or false. However, you can dispatch on parametric types, and Julia allows you to include \\\"plain bits\\\" values (Types, Symbols, Integers, floating-point numbers, tuples, etc.) as type parameters.  A common example is the dimensionality parameter in Array{T,N}, where T is a type (e.g., Float64) but N is just an Int.You can create your own custom types that take values as parameters, and use them to control dispatch of custom types. By way of illustration of this idea, let's introduce a parametric type, Val{T}, which serves as a customary way to exploit this technique for cases where you don't need a more elaborate hierarchy.Val is defined as:julia> struct Val{T}\\n       endThere is no more to the implementation of Val than this.  Some functions in Julia's standard library accept Val types as arguments, and you can also use it to write your own functions.  For example:julia> firstlast(::Type{Val{true}}) = \\\"First\\\"\\nfirstlast (generic function with 1 method)\\n\\njulia> firstlast(::Type{Val{false}}) = \\\"Last\\\"\\nfirstlast (generic function with 2 methods)\\n\\njulia> firstlast(Val{true})\\n\\\"First\\\"\\n\\njulia> firstlast(Val{false})\\n\\\"Last\\\"For consistency across Julia, the call site should always pass a Valtype rather than creating an instance, i.e., use foo(Val{:bar}) rather than foo(Val{:bar}()).It's worth noting that it's extremely easy to mis-use parametric \\\"value\\\" types, including Val; in unfavorable cases, you can easily end up making the performance of your code much worse.  In particular, you would never want to write actual code as illustrated above.  For more information about the proper (and improper) uses of Val, please read the more extensive discussion in the performance tips.\"\n},\n\n{\n    \"location\": \"manual/types.html#man-nullable-types-1\",\n    \"page\": \"Types\",\n    \"title\": \"Nullable Types: Representing Missing Values\",\n    \"category\": \"section\",\n    \"text\": \"In many settings, you need to interact with a value of type T that may or may not exist. To handle these settings, Julia provides a parametric type called Nullable{T}, which can be thought of as a specialized container type that can contain either zero or one values. Nullable{T} provides a minimal interface designed to ensure that interactions with missing values are safe. At present, the interface consists of several possible interactions:Construct a Nullable object.\\nCheck if a Nullable object has a missing value.\\nAccess the value of a Nullable object with a guarantee that a NullException will be thrown if the object's value is missing.\\nAccess the value of a Nullable object with a guarantee that a default value of type T will be returned if the object's value is missing.\\nPerform an operation on the value (if it exists) of a Nullable object, getting a Nullable result. The result will be missing if the original value was missing.\\nPerforming a test on the value (if it exists) of a Nullable object, getting a result that is missing if either the Nullable itself was missing, or the test failed.\\nPerform general operations on single Nullable objects, propagating the missing data.\"\n},\n\n{\n    \"location\": \"manual/types.html#Constructing-[Nullable](@ref)-objects-1\",\n    \"page\": \"Types\",\n    \"title\": \"Constructing Nullable objects\",\n    \"category\": \"section\",\n    \"text\": \"To construct an object representing a missing value of type T, use the Nullable{T}() function:julia> x1 = Nullable{Int64}()\\nNullable{Int64}()\\n\\njulia> x2 = Nullable{Float64}()\\nNullable{Float64}()\\n\\njulia> x3 = Nullable{Vector{Int64}}()\\nNullable{Array{Int64,1}}()To construct an object representing a non-missing value of type T, use the Nullable(x::T) function:julia> x1 = Nullable(1)\\nNullable{Int64}(1)\\n\\njulia> x2 = Nullable(1.0)\\nNullable{Float64}(1.0)\\n\\njulia> x3 = Nullable([1, 2, 3])\\nNullable{Array{Int64,1}}([1, 2, 3])Note the core distinction between these two ways of constructing a Nullable object: in one style, you provide a type, T, as a function parameter; in the other style, you provide a single value of type T as an argument.\"\n},\n\n{\n    \"location\": \"manual/types.html#Checking-if-a-Nullable-object-has-a-value-1\",\n    \"page\": \"Types\",\n    \"title\": \"Checking if a Nullable object has a value\",\n    \"category\": \"section\",\n    \"text\": \"You can check if a Nullable object has any value using isnull():julia> isnull(Nullable{Float64}())\\ntrue\\n\\njulia> isnull(Nullable(0.0))\\nfalse\"\n},\n\n{\n    \"location\": \"manual/types.html#Safely-accessing-the-value-of-a-Nullable-object-1\",\n    \"page\": \"Types\",\n    \"title\": \"Safely accessing the value of a Nullable object\",\n    \"category\": \"section\",\n    \"text\": \"You can safely access the value of a Nullable object using get():julia> get(Nullable{Float64}())\\nERROR: NullException()\\nStacktrace:\\n [1] get(::Nullable{Float64}) at ./nullable.jl:92\\n\\njulia> get(Nullable(1.0))\\n1.0If the value is not present, as it would be for Nullable{Float64}, a NullException error will be thrown. The error-throwing nature of the get() function ensures that any attempt to access a missing value immediately fails.In cases for which a reasonable default value exists that could be used when a Nullable object's value turns out to be missing, you can provide this default value as a second argument to get():julia> get(Nullable{Float64}(), 0.0)\\n0.0\\n\\njulia> get(Nullable(1.0), 0.0)\\n1.0tip: Tip\\nMake sure the type of the default value passed to get() and that of the Nullable object match to avoid type instability, which could hurt performance. Use convert() manually if needed.\"\n},\n\n{\n    \"location\": \"manual/types.html#Performing-operations-on-Nullable-objects-1\",\n    \"page\": \"Types\",\n    \"title\": \"Performing operations on Nullable objects\",\n    \"category\": \"section\",\n    \"text\": \"Nullable objects represent values that are possibly missing, and it is possible to write all code using these objects by first testing to see if the value is missing with isnull(), and then doing an appropriate action. However, there are some common use cases where the code could be more concise or clear by using a higher-order function.The map function takes as arguments a function f and a Nullable value x. It produces a Nullable:If x is a missing value, then it produces a missing value;\\nIf x has a value, then it produces a Nullable containing f(get(x)) as value.This is useful for performing simple operations on values that might be missing if the desired behaviour is to simply propagate the missing values forward.The filter function takes as arguments a predicate function p (that is, a function returning a boolean) and a Nullable value x. It produces a Nullable value:If x is a missing value, then it produces a missing value;\\nIf p(get(x)) is true, then it produces the original value x;\\nIf p(get(x)) is false, then it produces a missing value.In this way, filter can be thought of as selecting only allowable values, and converting non-allowable values to missing values.While map and filter are useful in specific cases, by far the most useful higher-order function is broadcast, which can handle a wide variety of cases, including making existing operations work and propagate Nullables. An example will motivate the need for broadcast. Suppose we have a function that computes the greater of two real roots of a quadratic equation, using the quadratic formula:julia> root(a::Real, b::Real, c::Real) = (-b + \u221a(b^2 - 4a*c)) / 2a\\nroot (generic function with 1 method)We may verify that the result of root(1, -9, 20) is 5.0, as we expect, since 5.0 is the greater of two real roots of the quadratic equation.Suppose now that we want to find the greatest real root of a quadratic equations where the coefficients might be missing values. Having missing values in datasets is a common occurrence in real-world data, and so it is important to be able to deal with them. But we cannot find the roots of an equation if we do not know all the coefficients. The best solution to this will depend on the particular use case; perhaps we should throw an error. However, for this example, we will assume that the best solution is to propagate the missing values forward; that is, if any input is missing, we simply produce a missing output.The broadcast() function makes this task easy; we can simply pass the root function we wrote to broadcast:julia> broadcast(root, Nullable(1), Nullable(-9), Nullable(20))\\nNullable{Float64}(5.0)\\n\\njulia> broadcast(root, Nullable(1), Nullable{Int}(), Nullable{Int}())\\nNullable{Float64}()\\n\\njulia> broadcast(root, Nullable{Int}(), Nullable(-9), Nullable(20))\\nNullable{Float64}()If one or more of the inputs is missing, then the output of broadcast() will be missing.There exists special syntactic sugar for the broadcast() function using a dot notation:julia> root.(Nullable(1), Nullable(-9), Nullable(20))\\nNullable{Float64}(5.0)In particular, the regular arithmetic operators can be broadcast() conveniently using .-prefixed operators:julia> Nullable(2) ./ Nullable(3) .+ Nullable(1.0)\\nNullable{Float64}(1.66667)\"\n},\n\n{\n    \"location\": \"manual/methods.html#\",\n    \"page\": \"Methods\",\n    \"title\": \"Methods\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/methods.html#Methods-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Methods\",\n    \"category\": \"section\",\n    \"text\": \"Recall from Functions that a function is an object that maps a tuple of arguments to a return value, or throws an exception if no appropriate value can be returned. It is common for the same conceptual function or operation to be implemented quite differently for different types of arguments: adding two integers is very different from adding two floating-point numbers, both of which are distinct from adding an integer to a floating-point number. Despite their implementation differences, these operations all fall under the general concept of \\\"addition\\\". Accordingly, in Julia, these behaviors all belong to a single object: the + function.To facilitate using many different implementations of the same concept smoothly, functions need not be defined all at once, but can rather be defined piecewise by providing specific behaviors for certain combinations of argument types and counts. A definition of one possible behavior for a function is called a method. Thus far, we have presented only examples of functions defined with a single method, applicable to all types of arguments. However, the signatures of method definitions can be annotated to indicate the types of arguments in addition to their number, and more than a single method definition may be provided. When a function is applied to a particular tuple of arguments, the most specific method applicable to those arguments is applied. Thus, the overall behavior of a function is a patchwork of the behaviors of its various method definitions. If the patchwork is well designed, even though the implementations of the methods may be quite different, the outward behavior of the function will appear seamless and consistent.The choice of which method to execute when a function is applied is called dispatch. Julia allows the dispatch process to choose which of a function's methods to call based on the number of arguments given, and on the types of all of the function's arguments. This is different than traditional object-oriented languages, where dispatch occurs based only on the first argument, which often has a special argument syntax, and is sometimes implied rather than explicitly written as an argument. [1] Using all of a function's arguments to choose which method should be invoked, rather than just the first, is known as multiple dispatch. Multiple dispatch is particularly useful for mathematical code, where it makes little sense to artificially deem the operations to \\\"belong\\\" to one argument more than any of the others: does the addition operation in x + y belong to x any more than it does to y? The implementation of a mathematical operator generally depends on the types of all of its arguments. Even beyond mathematical operations, however, multiple dispatch ends up being a powerful and convenient paradigm for structuring and organizing programs.[1]: In C++ or Java, for example, in a method call like obj.meth(arg1,arg2), the object obj \\\"receives\\\" the method call and is implicitly passed to the method via the this keyword, rather than as an explicit method argument. When the current this object is the receiver of a method call, it can be omitted altogether, writing just meth(arg1,arg2), with this implied as the receiving object.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Defining-Methods-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Defining Methods\",\n    \"category\": \"section\",\n    \"text\": \"Until now, we have, in our examples, defined only functions with a single method having unconstrained argument types. Such functions behave just like they would in traditional dynamically typed languages. Nevertheless, we have used multiple dispatch and methods almost continually without being aware of it: all of Julia's standard functions and operators, like the aforementioned + function, have many methods defining their behavior over various possible combinations of argument type and count.When defining a function, one can optionally constrain the types of parameters it is applicable to, using the :: type-assertion operator, introduced in the section on Composite Types:julia> f(x::Float64, y::Float64) = 2x + y\\nf (generic function with 1 method)This function definition applies only to calls where x and y are both values of type Float64:julia> f(2.0, 3.0)\\n7.0Applying it to any other types of arguments will result in a MethodError:julia> f(2.0, 3)\\nERROR: MethodError: no method matching f(::Float64, ::Int64)\\nClosest candidates are:\\n  f(::Float64, !Matched::Float64) at none:1\\n\\njulia> f(Float32(2.0), 3.0)\\nERROR: MethodError: no method matching f(::Float32, ::Float64)\\nClosest candidates are:\\n  f(!Matched::Float64, ::Float64) at none:1\\n\\njulia> f(2.0, \\\"3.0\\\")\\nERROR: MethodError: no method matching f(::Float64, ::String)\\nClosest candidates are:\\n  f(::Float64, !Matched::Float64) at none:1\\n\\njulia> f(\\\"2.0\\\", \\\"3.0\\\")\\nERROR: MethodError: no method matching f(::String, ::String)As you can see, the arguments must be precisely of type Float64. Other numeric types, such as integers or 32-bit floating-point values, are not automatically converted to 64-bit floating-point, nor are strings parsed as numbers. Because Float64 is a concrete type and concrete types cannot be subclassed in Julia, such a definition can only be applied to arguments that are exactly of type Float64. It may often be useful, however, to write more general methods where the declared parameter types are abstract:julia> f(x::Number, y::Number) = 2x - y\\nf (generic function with 2 methods)\\n\\njulia> f(2.0, 3)\\n1.0This method definition applies to any pair of arguments that are instances of Number. They need not be of the same type, so long as they are each numeric values. The problem of handling disparate numeric types is delegated to the arithmetic operations in the expression 2x - y.To define a function with multiple methods, one simply defines the function multiple times, with different numbers and types of arguments. The first method definition for a function creates the function object, and subsequent method definitions add new methods to the existing function object. The most specific method definition matching the number and types of the arguments will be executed when the function is applied. Thus, the two method definitions above, taken together, define the behavior for f over all pairs of instances of the abstract type Number \u2013 but with a different behavior specific to pairs of Float64 values. If one of the arguments is a 64-bit float but the other one is not, then the f(Float64,Float64) method cannot be called and the more general f(Number,Number) method must be used:julia> f(2.0, 3.0)\\n7.0\\n\\njulia> f(2, 3.0)\\n1.0\\n\\njulia> f(2.0, 3)\\n1.0\\n\\njulia> f(2, 3)\\n1The 2x + y definition is only used in the first case, while the 2x - y definition is used in the others. No automatic casting or conversion of function arguments is ever performed: all conversion in Julia is non-magical and completely explicit. Conversion and Promotion, however, shows how clever application of sufficiently advanced technology can be indistinguishable from magic. [Clarke61]For non-numeric values, and for fewer or more than two arguments, the function f remains undefined, and applying it will still result in a MethodError:julia> f(\\\"foo\\\", 3)\\nERROR: MethodError: no method matching f(::String, ::Int64)\\nClosest candidates are:\\n  f(!Matched::Number, ::Number) at none:1\\n\\njulia> f()\\nERROR: MethodError: no method matching f()\\nClosest candidates are:\\n  f(!Matched::Float64, !Matched::Float64) at none:1\\n  f(!Matched::Number, !Matched::Number) at none:1You can easily see which methods exist for a function by entering the function object itself in an interactive session:julia> f\\nf (generic function with 2 methods)This output tells us that f is a function object with two methods. To find out what the signatures of those methods are, use the methods() function:julia> methods(f)\\n# 2 methods for generic function \\\"f\\\":\\nf(x::Float64, y::Float64) in Main at none:1\\nf(x::Number, y::Number) in Main at none:1which shows that f has two methods, one taking two Float64 arguments and one taking arguments of type Number. It also indicates the file and line number where the methods were defined: because these methods were defined at the REPL, we get the apparent line number none:1.In the absence of a type declaration with ::, the type of a method parameter is Any by default, meaning that it is unconstrained since all values in Julia are instances of the abstract type Any. Thus, we can define a catch-all method for f like so:julia> f(x,y) = println(\\\"Whoa there, Nelly.\\\")\\nf (generic function with 3 methods)\\n\\njulia> f(\\\"foo\\\", 1)\\nWhoa there, Nelly.This catch-all is less specific than any other possible method definition for a pair of parameter values, so it will only be called on pairs of arguments to which no other method definition applies.Although it seems a simple concept, multiple dispatch on the types of values is perhaps the single most powerful and central feature of the Julia language. Core operations typically have dozens of methods:julia> methods(+)\\n# 180 methods for generic function \\\"+\\\":\\n+(x::Bool, z::Complex{Bool}) in Base at complex.jl:224\\n+(x::Bool, y::Bool) in Base at bool.jl:89\\n+(x::Bool) in Base at bool.jl:86\\n+(x::Bool, y::T) where T<:AbstractFloat in Base at bool.jl:96\\n+(x::Bool, z::Complex) in Base at complex.jl:231\\n+(a::Float16, b::Float16) in Base at float.jl:372\\n+(x::Float32, y::Float32) in Base at float.jl:374\\n+(x::Float64, y::Float64) in Base at float.jl:375\\n+(z::Complex{Bool}, x::Bool) in Base at complex.jl:225\\n+(z::Complex{Bool}, x::Real) in Base at complex.jl:239\\n+(x::Char, y::Integer) in Base at char.jl:40\\n+(c::BigInt, x::BigFloat) in Base.MPFR at mpfr.jl:303\\n+(a::BigInt, b::BigInt, c::BigInt, d::BigInt, e::BigInt) in Base.GMP at gmp.jl:303\\n+(a::BigInt, b::BigInt, c::BigInt, d::BigInt) in Base.GMP at gmp.jl:296\\n+(a::BigInt, b::BigInt, c::BigInt) in Base.GMP at gmp.jl:290\\n+(x::BigInt, y::BigInt) in Base.GMP at gmp.jl:258\\n+(x::BigInt, c::Union{UInt16, UInt32, UInt64, UInt8}) in Base.GMP at gmp.jl:315\\n...\\n+(a, b, c, xs...) at operators.jl:119Multiple dispatch together with the flexible parametric type system give Julia its ability to abstractly express high-level algorithms decoupled from implementation details, yet generate efficient, specialized code to handle each case at run time.\"\n},\n\n{\n    \"location\": \"manual/methods.html#man-ambiguities-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Method Ambiguities\",\n    \"category\": \"section\",\n    \"text\": \"It is possible to define a set of function methods such that there is no unique most specific method applicable to some combinations of arguments:julia> g(x::Float64, y) = 2x + y\\ng (generic function with 1 method)\\n\\njulia> g(x, y::Float64) = x + 2y\\ng (generic function with 2 methods)\\n\\njulia> g(2.0, 3)\\n7.0\\n\\njulia> g(2, 3.0)\\n8.0\\n\\njulia> g(2.0, 3.0)\\nERROR: MethodError: g(::Float64, ::Float64) is ambiguous.\\n[...]Here the call g(2.0, 3.0) could be handled by either the g(Float64, Any) or the g(Any, Float64) method, and neither is more specific than the other. In such cases, Julia raises a MethodError rather than arbitrarily picking a method. You can avoid method ambiguities by specifying an appropriate method for the intersection case:julia> g(x::Float64, y::Float64) = 2x + 2y\\ng (generic function with 3 methods)\\n\\njulia> g(2.0, 3)\\n7.0\\n\\njulia> g(2, 3.0)\\n8.0\\n\\njulia> g(2.0, 3.0)\\n10.0It is recommended that the disambiguating method be defined first, since otherwise the ambiguity exists, if transiently, until the more specific method is defined.In more complex cases, resolving method ambiguities involves a certain element of design; this topic is explored further below.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Parametric-Methods-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Parametric Methods\",\n    \"category\": \"section\",\n    \"text\": \"Method definitions can optionally have type parameters qualifying the signature:julia> same_type(x::T, y::T) where {T} = true\\nsame_type (generic function with 1 method)\\n\\njulia> same_type(x,y) = false\\nsame_type (generic function with 2 methods)The first method applies whenever both arguments are of the same concrete type, regardless of what type that is, while the second method acts as a catch-all, covering all other cases. Thus, overall, this defines a boolean function that checks whether its two arguments are of the same type:julia> same_type(1, 2)\\ntrue\\n\\njulia> same_type(1, 2.0)\\nfalse\\n\\njulia> same_type(1.0, 2.0)\\ntrue\\n\\njulia> same_type(\\\"foo\\\", 2.0)\\nfalse\\n\\njulia> same_type(\\\"foo\\\", \\\"bar\\\")\\ntrue\\n\\njulia> same_type(Int32(1), Int64(2))\\nfalseSuch definitions correspond to methods whose type signatures are UnionAll types (see UnionAll Types).This kind of definition of function behavior by dispatch is quite common \u2013 idiomatic, even \u2013 in Julia. Method type parameters are not restricted to being used as the types of arguments: they can be used anywhere a value would be in the signature of the function or body of the function. Here's an example where the method type parameter T is used as the type parameter to the parametric type Vector{T} in the method signature:julia> myappend(v::Vector{T}, x::T) where {T} = [v..., x]\\nmyappend (generic function with 1 method)\\n\\njulia> myappend([1,2,3],4)\\n4-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n\\njulia> myappend([1,2,3],2.5)\\nERROR: MethodError: no method matching myappend(::Array{Int64,1}, ::Float64)\\nClosest candidates are:\\n  myappend(::Array{T,1}, !Matched::T) where T at none:1\\n\\njulia> myappend([1.0,2.0,3.0],4.0)\\n4-element Array{Float64,1}:\\n 1.0\\n 2.0\\n 3.0\\n 4.0\\n\\njulia> myappend([1.0,2.0,3.0],4)\\nERROR: MethodError: no method matching myappend(::Array{Float64,1}, ::Int64)\\nClosest candidates are:\\n  myappend(::Array{T,1}, !Matched::T) where T at none:1As you can see, the type of the appended element must match the element type of the vector it is appended to, or else a MethodError is raised. In the following example, the method type parameter T is used as the return value:julia> mytypeof(x::T) where {T} = T\\nmytypeof (generic function with 1 method)\\n\\njulia> mytypeof(1)\\nInt64\\n\\njulia> mytypeof(1.0)\\nFloat64Just as you can put subtype constraints on type parameters in type declarations (see Parametric Types), you can also constrain type parameters of methods:julia> same_type_numeric(x::T, y::T) where {T<:Number} = true\\nsame_type_numeric (generic function with 1 method)\\n\\njulia> same_type_numeric(x::Number, y::Number) = false\\nsame_type_numeric (generic function with 2 methods)\\n\\njulia> same_type_numeric(1, 2)\\ntrue\\n\\njulia> same_type_numeric(1, 2.0)\\nfalse\\n\\njulia> same_type_numeric(1.0, 2.0)\\ntrue\\n\\njulia> same_type_numeric(\\\"foo\\\", 2.0)\\nERROR: MethodError: no method matching same_type_numeric(::String, ::Float64)\\nClosest candidates are:\\n  same_type_numeric(!Matched::T<:Number, ::T<:Number) where T<:Number at none:1\\n  same_type_numeric(!Matched::Number, ::Number) at none:1\\n\\njulia> same_type_numeric(\\\"foo\\\", \\\"bar\\\")\\nERROR: MethodError: no method matching same_type_numeric(::String, ::String)\\n\\njulia> same_type_numeric(Int32(1), Int64(2))\\nfalseThe same_type_numeric function behaves much like the same_type function defined above, but is only defined for pairs of numbers.Parametric methods allow the same syntax as where expressions used to write types (see UnionAll Types). If there is only a single parameter, the enclosing curly braces (in where {T}) can be omitted, but are often preferred for clarity. Multiple parameters can be separated with commas, e.g. where {T, S<:Real}, or written using nested where, e.g. where S<:Real where T.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Redefining-Methods-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Redefining Methods\",\n    \"category\": \"section\",\n    \"text\": \"When redefining a method or adding new methods, it is important to realize that these changes don't take effect immediately. This is key to Julia's ability to statically infer and compile code to run fast, without the usual JIT tricks and overhead. Indeed, any new method definition won't be visible to the current runtime environment, including Tasks and Threads (and any previously defined @generated functions). Let's start with an example to see what this means:julia> function tryeval()\\n           @eval newfun() = 1\\n           newfun()\\n       end\\ntryeval (generic function with 1 method)\\n\\njulia> tryeval()\\nERROR: MethodError: no method matching newfun()\\nThe applicable method may be too new: running in world age xxxx1, while current world is xxxx2.\\nClosest candidates are:\\n  newfun() at none:1 (method too new to be called from this world context.)\\n in tryeval() at none:1\\n ...\\n\\njulia> newfun()\\n1In this example, observe that the new definition for newfun has been created, but can't be immediately called. The new global is immediately visible to the tryeval function, so you could write return newfun (without parentheses). But neither you, nor any of your callers, nor the functions they call, or etc. can call this new method definition!But there's an exception: future calls to newfun from the REPL work as expected, being able to both see and call the new definition of newfun.However, future calls to tryeval will continue to see the definition of newfun as it was at the previous statement at the REPL, and thus before that call to tryeval.You may want to try this for yourself to see how it works.The implementation of this behavior is a \\\"world age counter\\\". This monotonically increasing value tracks each method definition operation. This allows describing \\\"the set of method definitions visible to a given runtime environment\\\" as a single number, or \\\"world age\\\". It also allows comparing the methods available in two worlds just by comparing their ordinal value. In the example above, we see that the \\\"current world\\\" (in which the method newfun() exists), is one greater than the task-local \\\"runtime world\\\" that was fixed when the execution of tryeval started.Sometimes it is necessary to get around this (for example, if you are implementing the above REPL). Fortunately, there is an easy solution: call the function using Base.invokelatest:julia> function tryeval2()\\n           @eval newfun2() = 2\\n           Base.invokelatest(newfun2)\\n       end\\ntryeval2 (generic function with 1 method)\\n\\njulia> tryeval2()\\n2Finally, let's take a look at some more complex examples where this rule comes into play. Define a function f(x), which initially has one method:julia> f(x) = \\\"original definition\\\"\\nf (generic function with 1 method)Start some other operations that use f(x):julia> g(x) = f(x)\\ng (generic function with 1 method)\\n\\njulia> t = @async f(wait()); yield();Now we add some new methods to f(x):julia> f(x::Int) = \\\"definition for Int\\\"\\nf (generic function with 2 methods)\\n\\njulia> f(x::Type{Int}) = \\\"definition for Type{Int}\\\"\\nf (generic function with 3 methods)Compare how these results differ:julia> f(1)\\n\\\"definition for Int\\\"\\n\\njulia> g(1)\\n\\\"definition for Int\\\"\\n\\njulia> wait(schedule(t, 1))\\n\\\"original definition\\\"\\n\\njulia> t = @async f(wait()); yield();\\n\\njulia> wait(schedule(t, 1))\\n\\\"definition for Int\\\"\"\n},\n\n{\n    \"location\": \"manual/methods.html#Parametrically-constrained-Varargs-methods-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Parametrically-constrained Varargs methods\",\n    \"category\": \"section\",\n    \"text\": \"Function parameters can also be used to constrain the number of arguments that may be supplied to a \\\"varargs\\\" function (Varargs Functions).  The notation Vararg{T,N} is used to indicate such a constraint.  For example:julia> bar(a,b,x::Vararg{Any,2}) = (a,b,x)\\nbar (generic function with 1 method)\\n\\njulia> bar(1,2,3)\\nERROR: MethodError: no method matching bar(::Int64, ::Int64, ::Int64)\\nClosest candidates are:\\n  bar(::Any, ::Any, ::Any, !Matched::Any) at none:1\\n\\njulia> bar(1,2,3,4)\\n(1, 2, (3, 4))\\n\\njulia> bar(1,2,3,4,5)\\nERROR: MethodError: no method matching bar(::Int64, ::Int64, ::Int64, ::Int64, ::Int64)\\nClosest candidates are:\\n  bar(::Any, ::Any, ::Any, ::Any) at none:1More usefully, it is possible to constrain varargs methods by a parameter. For example:function getindex(A::AbstractArray{T,N}, indexes::Vararg{Number,N}) where {T,N}would be called only when the number of indexes matches the dimensionality of the array.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Note-on-Optional-and-keyword-Arguments-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Note on Optional and keyword Arguments\",\n    \"category\": \"section\",\n    \"text\": \"As mentioned briefly in Functions, optional arguments are implemented as syntax for multiple method definitions. For example, this definition:f(a=1,b=2) = a+2btranslates to the following three methods:f(a,b) = a+2b\\nf(a) = f(a,2)\\nf() = f(1,2)This means that calling f() is equivalent to calling f(1,2). In this case the result is 5, because f(1,2) invokes the first method of f above. However, this need not always be the case. If you define a fourth method that is more specialized for integers:f(a::Int,b::Int) = a-2bthen the result of both f() and f(1,2) is -3. In other words, optional arguments are tied to a function, not to any specific method of that function. It depends on the types of the optional arguments which method is invoked. When optional arguments are defined in terms of a global variable, the type of the optional argument may even change at run-time.Keyword arguments behave quite differently from ordinary positional arguments. In particular, they do not participate in method dispatch. Methods are dispatched based only on positional arguments, with keyword arguments processed after the matching method is identified.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Function-like-objects-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Function-like objects\",\n    \"category\": \"section\",\n    \"text\": \"Methods are associated with types, so it is possible to make any arbitrary Julia object \\\"callable\\\" by adding methods to its type. (Such \\\"callable\\\" objects are sometimes called \\\"functors.\\\")For example, you can define a type that stores the coefficients of a polynomial, but behaves like a function evaluating the polynomial:julia> struct Polynomial{R}\\n           coeffs::Vector{R}\\n       end\\n\\njulia> function (p::Polynomial)(x)\\n           v = p.coeffs[end]\\n           for i = (length(p.coeffs)-1):-1:1\\n               v = v*x + p.coeffs[i]\\n           end\\n           return v\\n       endNotice that the function is specified by type instead of by name. In the function body, p will refer to the object that was called. A Polynomial can be used as follows:julia> p = Polynomial([1,10,100])\\nPolynomial{Int64}([1, 10, 100])\\n\\njulia> p(3)\\n931This mechanism is also the key to how type constructors and closures (inner functions that refer to their surrounding environment) work in Julia, discussed later in the manual.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Empty-generic-functions-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Empty generic functions\",\n    \"category\": \"section\",\n    \"text\": \"Occasionally it is useful to introduce a generic function without yet adding methods. This can be used to separate interface definitions from implementations. It might also be done for the purpose of documentation or code readability. The syntax for this is an empty function block without a tuple of arguments:function emptyfunc\\nend\"\n},\n\n{\n    \"location\": \"manual/methods.html#man-method-design-ambiguities-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Method design and the avoidance of ambiguities\",\n    \"category\": \"section\",\n    \"text\": \"Julia's method polymorphism is one of its most powerful features, yet exploiting this power can pose design challenges.  In particular, in more complex method hierarchies it is not uncommon for ambiguities to arise.Above, it was pointed out that one can resolve ambiguities likef(x, y::Int) = 1\\nf(x::Int, y) = 2by defining a methodf(x::Int, y::Int) = 3This is often the right strategy; however, there are circumstances where following this advice blindly can be counterproductive. In particular, the more methods a generic function has, the more possibilities there are for ambiguities. When your method hierarchies get more complicated than this simple example, it can be worth your while to think carefully about alternative strategies.Below we discuss particular challenges and some alternative ways to resolve such issues.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Tuple-and-NTuple-arguments-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Tuple and NTuple arguments\",\n    \"category\": \"section\",\n    \"text\": \"Tuple (and NTuple) arguments present special challenges. For example,f(x::NTuple{N,Int}) where {N} = 1\\nf(x::NTuple{N,Float64}) where {N} = 2are ambiguous because of the possibility that N == 0: there are no elements to determine whether the Int or Float64 variant should be called. To resolve the ambiguity, one approach is define a method for the empty tuple:f(x::Tuple{}) = 3Alternatively, for all methods but one you can insist that there is at least one element in the tuple:f(x::NTuple{N,Int}) where {N} = 1           # this is the fallback\\nf(x::Tuple{Float64, Vararg{Float64}}) = 2   # this requires at least one Float64\"\n},\n\n{\n    \"location\": \"manual/methods.html#man-methods-orthogonalize-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Orthogonalize your design\",\n    \"category\": \"section\",\n    \"text\": \"When you might be tempted to dispatch on two or more arguments, consider whether a \\\"wrapper\\\" function might make for a simpler design. For example, instead of writing multiple variants:f(x::A, y::A) = ...\\nf(x::A, y::B) = ...\\nf(x::B, y::A) = ...\\nf(x::B, y::B) = ...you might consider definingf(x::A, y::A) = ...\\nf(x, y) = f(g(x), g(y))where g converts the argument to type A. This is a very specific example of the more general principle of orthogonal design, in which separate concepts are assigned to separate methods. Here, g will most likely need a fallback definitiong(x::A) = xA related strategy exploits promote to bring x and y to a common type:f(x::T, y::T) where {T} = ...\\nf(x, y) = f(promote(x, y)...)One risk with this design is the possibility that if there is no suitable promotion method converting x and y to the same type, the second method will recurse on itself infinitely and trigger a stack overflow. The non-exported function Base.promote_noncircular can be used as an alternative; when promotion fails it will still throw an error, but one that fails faster with a more specific error message.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Dispatch-on-one-argument-at-a-time-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Dispatch on one argument at a time\",\n    \"category\": \"section\",\n    \"text\": \"If you need to dispatch on multiple arguments, and there are many fallbacks with too many combinations to make it practical to define all possible variants, then consider introducing a \\\"name cascade\\\" where (for example) you dispatch on the first argument and then call an internal method:f(x::A, y) = _fA(x, y)\\nf(x::B, y) = _fB(x, y)Then the internal methods _fA and _fB can dispatch on y without concern about ambiguities with each other with respect to x.Be aware that this strategy has at least one major disadvantage: in many cases, it is not possible for users to further customize the behavior of f by defining further specializations of your exported function f. Instead, they have to define specializations for your internal methods _fA and _fB, and this blurs the lines between exported and internal methods.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Abstract-containers-and-element-types-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Abstract containers and element types\",\n    \"category\": \"section\",\n    \"text\": \"Where possible, try to avoid defining methods that dispatch on specific element types of abstract containers. For example,-(A::AbstractArray{T}, b::Date) where {T<:Date}generates ambiguities for anyone who defines a method-(A::MyArrayType{T}, b::T) where {T}The best approach is to avoid defining either of these methods: instead, rely on a generic method -(A::AbstractArray, b) and make sure this method is implemented with generic calls (like similar and -) that do the right thing for each container type and element type separately. This is just a more complex variant of the advice to orthogonalize your methods.When this approach is not possible, it may be worth starting a discussion with other developers about resolving the ambiguity; just because one method was defined first does not necessarily mean that it can't be modified or eliminated.  As a last resort, one developer can define the \\\"band-aid\\\" method-(A::MyArrayType{T}, b::Date) where {T<:Date} = ...that resolves the ambiguity by brute force.\"\n},\n\n{\n    \"location\": \"manual/methods.html#Complex-method-\\\"cascades\\\"-with-default-arguments-1\",\n    \"page\": \"Methods\",\n    \"title\": \"Complex method \\\"cascades\\\" with default arguments\",\n    \"category\": \"section\",\n    \"text\": \"If you are defining a method \\\"cascade\\\" that supplies defaults, be careful about dropping any arguments that correspond to potential defaults. For example, suppose you're writing a digital filtering algorithm and you have a method that handles the edges of the signal by applying padding:function myfilter(A, kernel, ::Replicate)\\n    Apadded = replicate_edges(A, size(kernel))\\n    myfilter(Apadded, kernel)  # now perform the \\\"real\\\" computation\\nendThis will run afoul of a method that supplies default padding:myfilter(A, kernel) = myfilter(A, kernel, Replicate()) # replicate the edge by defaultTogether, these two methods generate an infinite recursion with A constantly growing bigger.The better design would be to define your call hierarchy like this:struct NoPad end  # indicate that no padding is desired, or that it's already applied\\n\\nmyfilter(A, kernel) = myfilter(A, kernel, Replicate())  # default boundary conditions\\n\\nfunction myfilter(A, kernel, ::Replicate)\\n    Apadded = replicate_edges(A, size(kernel))\\n    myfilter(Apadded, kernel, NoPad())  # indicate the new boundary conditions\\nend\\n\\n# other padding methods go here\\n\\nfunction myfilter(A, kernel, ::NoPad)\\n    # Here's the \\\"real\\\" implementation of the core computation\\nendNoPad is supplied in the same argument position as any other kind of padding, so it keeps the dispatch hierarchy well organized and with reduced likelihood of ambiguities. Moreover, it extends the \\\"public\\\" myfilter interface: a user who wants to control the padding explicitly can call the NoPad variant directly.[Clarke61]: Arthur C. Clarke, Profiles of the Future (1961): Clarke's Third Law.\"\n},\n\n{\n    \"location\": \"manual/constructors.html#\",\n    \"page\": \"Constructors\",\n    \"title\": \"Constructors\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/constructors.html#man-constructors-1\",\n    \"page\": \"Constructors\",\n    \"title\": \"Constructors\",\n    \"category\": \"section\",\n    \"text\": \"Constructors [1] are functions that create new objects \u2013 specifically, instances of Composite Types. In Julia, type objects also serve as constructor functions: they create new instances of themselves when applied to an argument tuple as a function. This much was already mentioned briefly when composite types were introduced. For example:julia> struct Foo\\n           bar\\n           baz\\n       end\\n\\njulia> foo = Foo(1, 2)\\nFoo(1, 2)\\n\\njulia> foo.bar\\n1\\n\\njulia> foo.baz\\n2For many types, forming new objects by binding their field values together is all that is ever needed to create instances. There are, however, cases where more functionality is required when creating composite objects. Sometimes invariants must be enforced, either by checking arguments or by transforming them. Recursive data structures, especially those that may be self-referential, often cannot be constructed cleanly without first being created in an incomplete state and then altered programmatically to be made whole, as a separate step from object creation. Sometimes, it's just convenient to be able to construct objects with fewer or different types of parameters than they have fields. Julia's system for object construction addresses all of these cases and more.[1]: Nomenclature: while the term \\\"constructor\\\" generally refers to the entire function which constructs objects of a type, it is common to abuse terminology slightly and refer to specific constructor methods as \\\"constructors\\\". In such situations, it is generally clear from context that the term is used to mean \\\"constructor method\\\" rather than \\\"constructor function\\\", especially as it is often used in the sense of singling out a particular method of the constructor from all of the others.\"\n},\n\n{\n    \"location\": \"manual/constructors.html#Outer-Constructor-Methods-1\",\n    \"page\": \"Constructors\",\n    \"title\": \"Outer Constructor Methods\",\n    \"category\": \"section\",\n    \"text\": \"A constructor is just like any other function in Julia in that its overall behavior is defined by the combined behavior of its methods. Accordingly, you can add functionality to a constructor by simply defining new methods. For example, let's say you want to add a constructor method for Foo objects that takes only one argument and uses the given value for both the bar and baz fields. This is simple:julia> Foo(x) = Foo(x,x)\\nFoo\\n\\njulia> Foo(1)\\nFoo(1, 1)You could also add a zero-argument Foo constructor method that supplies default values for both of the bar and baz fields:julia> Foo() = Foo(0)\\nFoo\\n\\njulia> Foo()\\nFoo(0, 0)Here the zero-argument constructor method calls the single-argument constructor method, which in turn calls the automatically provided two-argument constructor method. For reasons that will become clear very shortly, additional constructor methods declared as normal methods like this are called outer constructor methods. Outer constructor methods can only ever create a new instance by calling another constructor method, such as the automatically provided default ones.\"\n},\n\n{\n    \"location\": \"manual/constructors.html#Inner-Constructor-Methods-1\",\n    \"page\": \"Constructors\",\n    \"title\": \"Inner Constructor Methods\",\n    \"category\": \"section\",\n    \"text\": \"While outer constructor methods succeed in addressing the problem of providing additional convenience methods for constructing objects, they fail to address the other two use cases mentioned in the introduction of this chapter: enforcing invariants, and allowing construction of self-referential objects. For these problems, one needs inner constructor methods. An inner constructor method is much like an outer constructor method, with two differences:It is declared inside the block of a type declaration, rather than outside of it like normal methods.\\nIt has access to a special locally existent function called new that creates objects of the block's type.For example, suppose one wants to declare a type that holds a pair of real numbers, subject to the constraint that the first number is not greater than the second one. One could declare it like this:julia> struct OrderedPair\\n           x::Real\\n           y::Real\\n           OrderedPair(x,y) = x > y ? error(\\\"out of order\\\") : new(x,y)\\n       end\\nNow OrderedPair objects can only be constructed such that x <= y:julia> OrderedPair(1, 2)\\nOrderedPair(1, 2)\\n\\njulia> OrderedPair(2,1)\\nERROR: out of order\\nStacktrace:\\n [1] OrderedPair(::Int64, ::Int64) at ./none:4If the type were declared mutable, you could reach in and directly change the field values to violate this invariant, but messing around with an object's internals uninvited is considered poor form. You (or someone else) can also provide additional outer constructor methods at any later point, but once a type is declared, there is no way to add more inner constructor methods. Since outer constructor methods can only create objects by calling other constructor methods, ultimately, some inner constructor must be called to create an object. This guarantees that all objects of the declared type must come into existence by a call to one of the inner constructor methods provided with the type, thereby giving some degree of enforcement of a type's invariants.If any inner constructor method is defined, no default constructor method is provided: it is presumed that you have supplied yourself with all the inner constructors you need. The default constructor is equivalent to writing your own inner constructor method that takes all of the object's fields as parameters (constrained to be of the correct type, if the corresponding field has a type), and passes them to new, returning the resulting object:julia> struct Foo\\n           bar\\n           baz\\n           Foo(bar,baz) = new(bar,baz)\\n       end\\nThis declaration has the same effect as the earlier definition of the Foo type without an explicit inner constructor method. The following two types are equivalent \u2013 one with a default constructor, the other with an explicit constructor:julia> struct T1\\n           x::Int64\\n       end\\n\\njulia> struct T2\\n           x::Int64\\n           T2(x) = new(x)\\n       end\\n\\njulia> T1(1)\\nT1(1)\\n\\njulia> T2(1)\\nT2(1)\\n\\njulia> T1(1.0)\\nT1(1)\\n\\njulia> T2(1.0)\\nT2(1)It is considered good form to provide as few inner constructor methods as possible: only those taking all arguments explicitly and enforcing essential error checking and transformation. Additional convenience constructor methods, supplying default values or auxiliary transformations, should be provided as outer constructors that call the inner constructors to do the heavy lifting. This separation is typically quite natural.\"\n},\n\n{\n    \"location\": \"manual/constructors.html#Incomplete-Initialization-1\",\n    \"page\": \"Constructors\",\n    \"title\": \"Incomplete Initialization\",\n    \"category\": \"section\",\n    \"text\": \"The final problem which has still not been addressed is construction of self-referential objects, or more generally, recursive data structures. Since the fundamental difficulty may not be immediately obvious, let us briefly explain it. Consider the following recursive type declaration:julia> mutable struct SelfReferential\\n           obj::SelfReferential\\n       end\\nThis type may appear innocuous enough, until one considers how to construct an instance of it. If a is an instance of SelfReferential, then a second instance can be created by the call:julia> b = SelfReferential(a)But how does one construct the first instance when no instance exists to provide as a valid value for its obj field? The only solution is to allow creating an incompletely initialized instance of SelfReferential with an unassigned obj field, and using that incomplete instance as a valid value for the obj field of another instance, such as, for example, itself.To allow for the creation of incompletely initialized objects, Julia allows the new function to be called with fewer than the number of fields that the type has, returning an object with the unspecified fields uninitialized. The inner constructor method can then use the incomplete object, finishing its initialization before returning it. Here, for example, we take another crack at defining the SelfReferential type, with a zero-argument inner constructor returning instances having obj fields pointing to themselves:julia> mutable struct SelfReferential\\n           obj::SelfReferential\\n           SelfReferential() = (x = new(); x.obj = x)\\n       end\\nWe can verify that this constructor works and constructs objects that are, in fact, self-referential:julia> x = SelfReferential();\\n\\njulia> x === x\\ntrue\\n\\njulia> x === x.obj\\ntrue\\n\\njulia> x === x.obj.obj\\ntrueAlthough it is generally a good idea to return a fully initialized object from an inner constructor, incompletely initialized objects can be returned:julia> mutable struct Incomplete\\n           xx\\n           Incomplete() = new()\\n       end\\n\\njulia> z = Incomplete();While you are allowed to create objects with uninitialized fields, any access to an uninitialized reference is an immediate error:julia> z.xx\\nERROR: UndefRefError: access to undefined referenceThis avoids the need to continually check for null values. However, not all object fields are references. Julia considers some types to be \\\"plain data\\\", meaning all of their data is self-contained and does not reference other objects. The plain data types consist of primitive types (e.g. Int) and immutable structs of other plain data types. The initial contents of a plain data type is undefined:julia> struct HasPlain\\n           n::Int\\n           HasPlain() = new()\\n       end\\n\\njulia> HasPlain()\\nHasPlain(438103441441)Arrays of plain data types exhibit the same behavior.You can pass incomplete objects to other functions from inner constructors to delegate their completion:julia> mutable struct Lazy\\n           xx\\n           Lazy(v) = complete_me(new(), v)\\n       endAs with incomplete objects returned from constructors, if complete_me or any of its callees try to access the xx field of the Lazy object before it has been initialized, an error will be thrown immediately.\"\n},\n\n{\n    \"location\": \"manual/constructors.html#Parametric-Constructors-1\",\n    \"page\": \"Constructors\",\n    \"title\": \"Parametric Constructors\",\n    \"category\": \"section\",\n    \"text\": \"Parametric types add a few wrinkles to the constructor story. Recall from Parametric Types that, by default, instances of parametric composite types can be constructed either with explicitly given type parameters or with type parameters implied by the types of the arguments given to the constructor. Here are some examples:julia> struct Point{T<:Real}\\n           x::T\\n           y::T\\n       end\\n\\njulia> Point(1,2) ## implicit T ##\\nPoint{Int64}(1, 2)\\n\\njulia> Point(1.0,2.5) ## implicit T ##\\nPoint{Float64}(1.0, 2.5)\\n\\njulia> Point(1,2.5) ## implicit T ##\\nERROR: MethodError: no method matching Point(::Int64, ::Float64)\\nClosest candidates are:\\n  Point(::T<:Real, !Matched::T<:Real) where T<:Real at none:2\\n\\njulia> Point{Int64}(1, 2) ## explicit T ##\\nPoint{Int64}(1, 2)\\n\\njulia> Point{Int64}(1.0,2.5) ## explicit T ##\\nERROR: InexactError()\\nStacktrace:\\n [1] convert(::Type{Int64}, ::Float64) at ./float.jl:679\\n [2] Point{Int64}(::Float64, ::Float64) at ./none:2\\n\\njulia> Point{Float64}(1.0, 2.5) ## explicit T ##\\nPoint{Float64}(1.0, 2.5)\\n\\njulia> Point{Float64}(1,2) ## explicit T ##\\nPoint{Float64}(1.0, 2.0)As you can see, for constructor calls with explicit type parameters, the arguments are converted to the implied field types: Point{Int64}(1,2) works, but Point{Int64}(1.0,2.5) raises an InexactError when converting 2.5 to Int64. When the type is implied by the arguments to the constructor call, as in Point(1,2), then the types of the arguments must agree \u2013 otherwise the T cannot be determined \u2013 but any pair of real arguments with matching type may be given to the generic Point constructor.What's really going on here is that Point, Point{Float64} and Point{Int64} are all different constructor functions. In fact, Point{T} is a distinct constructor function for each type T. Without any explicitly provided inner constructors, the declaration of the composite type Point{T<:Real} automatically provides an inner constructor, Point{T}, for each possible type T<:Real, that behaves just like non-parametric default inner constructors do. It also provides a single general outer Point constructor that takes pairs of real arguments, which must be of the same type. This automatic provision of constructors is equivalent to the following explicit declaration:julia> struct Point{T<:Real}\\n           x::T\\n           y::T\\n           Point{T}(x,y) where {T<:Real} = new(x,y)\\n       end\\n\\njulia> Point(x::T, y::T) where {T<:Real} = Point{T}(x,y);Notice that each definition looks like the form of constructor call that it handles. The call Point{Int64}(1,2) will invoke the definition Point{T}(x,y) inside the type block. The outer constructor declaration, on the other hand, defines a method for the general Point constructor which only applies to pairs of values of the same real type. This declaration makes constructor calls without explicit type parameters, like Point(1,2) and Point(1.0,2.5), work. Since the method declaration restricts the arguments to being of the same type, calls like Point(1,2.5), with arguments of different types, result in \\\"no method\\\" errors.Suppose we wanted to make the constructor call Point(1,2.5) work by \\\"promoting\\\" the integer value 1 to the floating-point value 1.0. The simplest way to achieve this is to define the following additional outer constructor method:julia> Point(x::Int64, y::Float64) = Point(convert(Float64,x),y);This method uses the convert() function to explicitly convert x to Float64 and then delegates construction to the general constructor for the case where both arguments are Float64. With this method definition what was previously a MethodError now successfully creates a point of type Point{Float64}:julia> Point(1,2.5)\\nPoint{Float64}(1.0, 2.5)\\n\\njulia> typeof(ans)\\nPoint{Float64}However, other similar calls still don't work:julia> Point(1.5,2)\\nERROR: MethodError: no method matching Point(::Float64, ::Int64)\\nClosest candidates are:\\n  Point(::T<:Real, !Matched::T<:Real) where T<:Real at none:1For a more general way to make all such calls work sensibly, see Conversion and Promotion. At the risk of spoiling the suspense, we can reveal here that all it takes is the following outer method definition to make all calls to the general Point constructor work as one would expect:julia> Point(x::Real, y::Real) = Point(promote(x,y)...);The promote function converts all its arguments to a common type \u2013 in this case Float64. With this method definition, the Point constructor promotes its arguments the same way that numeric operators like + do, and works for all kinds of real numbers:julia> Point(1.5,2)\\nPoint{Float64}(1.5, 2.0)\\n\\njulia> Point(1,1//2)\\nPoint{Rational{Int64}}(1//1, 1//2)\\n\\njulia> Point(1.0,1//2)\\nPoint{Float64}(1.0, 0.5)Thus, while the implicit type parameter constructors provided by default in Julia are fairly strict, it is possible to make them behave in a more relaxed but sensible manner quite easily. Moreover, since constructors can leverage all of the power of the type system, methods, and multiple dispatch, defining sophisticated behavior is typically quite simple.\"\n},\n\n{\n    \"location\": \"manual/constructors.html#Case-Study:-Rational-1\",\n    \"page\": \"Constructors\",\n    \"title\": \"Case Study: Rational\",\n    \"category\": \"section\",\n    \"text\": \"Perhaps the best way to tie all these pieces together is to present a real world example of a parametric composite type and its constructor methods. To that end, here is the (slightly modified) beginning of rational.jl, which implements Julia's Rational Numbers:julia> struct OurRational{T<:Integer} <: Real\\n           num::T\\n           den::T\\n           function OurRational{T}(num::T, den::T) where T<:Integer\\n               if num == 0 && den == 0\\n                    error(\\\"invalid rational: 0//0\\\")\\n               end\\n               g = gcd(den, num)\\n               num = div(num, g)\\n               den = div(den, g)\\n               new(num, den)\\n           end\\n       end\\n\\njulia> OurRational(n::T, d::T) where {T<:Integer} = OurRational{T}(n,d)\\nOurRational\\n\\njulia> OurRational(n::Integer, d::Integer) = OurRational(promote(n,d)...)\\nOurRational\\n\\njulia> OurRational(n::Integer) = OurRational(n,one(n))\\nOurRational\\n\\njulia> //(n::Integer, d::Integer) = OurRational(n,d)\\n// (generic function with 1 method)\\n\\njulia> //(x::OurRational, y::Integer) = x.num // (x.den*y)\\n// (generic function with 2 methods)\\n\\njulia> //(x::Integer, y::OurRational) = (x*y.den) // y.num\\n// (generic function with 3 methods)\\n\\njulia> //(x::Complex, y::Real) = complex(real(x)//y, imag(x)//y)\\n// (generic function with 4 methods)\\n\\njulia> //(x::Real, y::Complex) = x*y'//real(y*y')\\n// (generic function with 5 methods)\\n\\njulia> function //(x::Complex, y::Complex)\\n           xy = x*y'\\n           yy = real(y*y')\\n           complex(real(xy)//yy, imag(xy)//yy)\\n       end\\n// (generic function with 6 methods)The first line \u2013 struct OurRational{T<:Integer} <: Real \u2013 declares that OurRational takes one type parameter of an integer type, and is itself a real type. The field declarations num::T and den::T indicate that the data held in a OurRational{T} object are a pair of integers of type T, one representing the rational value's numerator and the other representing its denominator.Now things get interesting. OurRational has a single inner constructor method which checks that both of num and den aren't zero and ensures that every rational is constructed in \\\"lowest terms\\\" with a non-negative denominator. This is accomplished by dividing the given numerator and denominator values by their greatest common divisor, computed using the gcd function. Since gcd returns the greatest common divisor of its arguments with sign matching the first argument (den here), after this division the new value of den is guaranteed to be non-negative. Because this is the only inner constructor for OurRational, we can be certain that OurRational objects are always constructed in this normalized form.OurRational also provides several outer constructor methods for convenience. The first is the \\\"standard\\\" general constructor that infers the type parameter T from the type of the numerator and denominator when they have the same type. The second applies when the given numerator and denominator values have different types: it promotes them to a common type and then delegates construction to the outer constructor for arguments of matching type. The third outer constructor turns integer values into rationals by supplying a value of 1 as the denominator.Following the outer constructor definitions, we have a number of methods for the // operator, which provides a syntax for writing rationals. Before these definitions, // is a completely undefined operator with only syntax and no meaning. Afterwards, it behaves just as described in Rational Numbers \u2013 its entire behavior is defined in these few lines. The first and most basic definition just makes a//b construct a OurRational by applying the OurRational constructor to a and b when they are integers. When one of the operands of // is already a rational number, we construct a new rational for the resulting ratio slightly differently; this behavior is actually identical to division of a rational with an integer. Finally, applying // to complex integral values creates an instance of Complex{OurRational} \u2013 a complex number whose real and imaginary parts are rationals:julia> ans = (1 + 2im)//(1 - 2im);\\n\\njulia> typeof(ans)\\nComplex{OurRational{Int64}}\\n\\njulia> ans <: Complex{OurRational}\\nfalseThus, although the // operator usually returns an instance of OurRational, if either of its arguments are complex integers, it will return an instance of Complex{OurRational} instead. The interested reader should consider perusing the rest of rational.jl: it is short, self-contained, and implements an entire basic Julia type.\"\n},\n\n{\n    \"location\": \"manual/constructors.html#constructors-and-conversion-1\",\n    \"page\": \"Constructors\",\n    \"title\": \"Constructors and Conversion\",\n    \"category\": \"section\",\n    \"text\": \"Constructors T(args...) in Julia are implemented like other callable objects: methods are added to their types. The type of a type is Type, so all constructor methods are stored in the method table for the Type type. This means that you can declare more flexible constructors, e.g. constructors for abstract types, by explicitly defining methods for the appropriate types.However, in some cases you could consider adding methods to Base.convert instead of defining a constructor, because Julia falls back to calling convert() if no matching constructor is found. For example, if no constructor T(args...) = ... exists Base.convert(::Type{T}, args...) = ... is called.convert is used extensively throughout Julia whenever one type needs to be converted to another (e.g. in assignment, ccall, etcetera), and should generally only be defined (or successful) if the conversion is lossless.  For example, convert(Int, 3.0) produces 3, but convert(Int, 3.2) throws an InexactError.  If you want to define a constructor for a lossless conversion from one type to another, you should probably define a convert method instead.On the other hand, if your constructor does not represent a lossless conversion, or doesn't represent \\\"conversion\\\" at all, it is better to leave it as a constructor rather than a convert method. For example, the Array{Int}() constructor creates a zero-dimensional Array of the type Int, but is not really a \\\"conversion\\\" from Int to an Array.\"\n},\n\n{\n    \"location\": \"manual/constructors.html#Outer-only-constructors-1\",\n    \"page\": \"Constructors\",\n    \"title\": \"Outer-only constructors\",\n    \"category\": \"section\",\n    \"text\": \"As we have seen, a typical parametric type has inner constructors that are called when type parameters are known; e.g. they apply to Point{Int} but not to Point. Optionally, outer constructors that determine type parameters automatically can be added, for example constructing a Point{Int} from the call Point(1,2). Outer constructors call inner constructors to do the core work of making an instance. However, in some cases one would rather not provide inner constructors, so that specific type parameters cannot be requested manually.For example, say we define a type that stores a vector along with an accurate representation of its sum:julia> struct SummedArray{T<:Number,S<:Number}\\n           data::Vector{T}\\n           sum::S\\n       end\\n\\njulia> SummedArray(Int32[1; 2; 3], Int32(6))\\nSummedArray{Int32,Int32}(Int32[1, 2, 3], 6)The problem is that we want S to be a larger type than T, so that we can sum many elements with less information loss. For example, when T is Int32, we would like S to be Int64. Therefore we want to avoid an interface that allows the user to construct instances of the type SummedArray{Int32,Int32}. One way to do this is to provide a constructor only for SummedArray, but inside the type definition block to suppress generation of default constructors:julia> struct SummedArray{T<:Number,S<:Number}\\n           data::Vector{T}\\n           sum::S\\n           function SummedArray(a::Vector{T}) where T\\n               S = widen(T)\\n               new{T,S}(a, sum(S, a))\\n           end\\n       end\\n\\njulia> SummedArray(Int32[1; 2; 3], Int32(6))\\nERROR: MethodError: no method matching SummedArray(::Array{Int32,1}, ::Int32)\\nClosest candidates are:\\n  SummedArray(::Array{T,1}) where T at none:5This constructor will be invoked by the syntax SummedArray(a). The syntax new{T,S} allows specifying parameters for the type to be constructed, i.e. this call will return a SummedArray{T,S}. new{T,S} can be used in any constructor definition, but for convenience the parameters to new{} are automatically derived from the type being constructed when possible.\"\n},\n\n{\n    \"location\": \"manual/conversion-and-promotion.html#\",\n    \"page\": \"Conversion and Promotion\",\n    \"title\": \"Conversion and Promotion\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/conversion-and-promotion.html#conversion-and-promotion-1\",\n    \"page\": \"Conversion and Promotion\",\n    \"title\": \"Conversion and Promotion\",\n    \"category\": \"section\",\n    \"text\": \"Julia has a system for promoting arguments of mathematical operators to a common type, which has been mentioned in various other sections, including Integers and Floating-Point Numbers, Mathematical Operations and Elementary Functions, Types, and Methods. In this section, we explain how this promotion system works, as well as how to extend it to new types and apply it to functions besides built-in mathematical operators. Traditionally, programming languages fall into two camps with respect to promotion of arithmetic arguments:Automatic promotion for built-in arithmetic types and operators. In most languages, built-in numeric types, when used as operands to arithmetic operators with infix syntax, such as +, -, *, and /, are automatically promoted to a common type to produce the expected results. C, Java, Perl, and Python, to name a few, all correctly compute the sum 1 + 1.5 as the floating-point value 2.5, even though one of the operands to + is an integer. These systems are convenient and designed carefully enough that they are generally all-but-invisible to the programmer: hardly anyone consciously thinks of this promotion taking place when writing such an expression, but compilers and interpreters must perform conversion before addition since integers and floating-point values cannot be added as-is. Complex rules for such automatic conversions are thus inevitably part of specifications and implementations for such languages.\\nNo automatic promotion. This camp includes Ada and ML \u2013 very \\\"strict\\\" statically typed languages. In these languages, every conversion must be explicitly specified by the programmer. Thus, the example expression 1 + 1.5 would be a compilation error in both Ada and ML. Instead one must write real(1) + 1.5, explicitly converting the integer 1 to a floating-point value before performing addition. Explicit conversion everywhere is so inconvenient, however, that even Ada has some degree of automatic conversion: integer literals are promoted to the expected integer type automatically, and floating-point literals are similarly promoted to appropriate floating-point types.In a sense, Julia falls into the \\\"no automatic promotion\\\" category: mathematical operators are just functions with special syntax, and the arguments of functions are never automatically converted. However, one may observe that applying mathematical operations to a wide variety of mixed argument types is just an extreme case of polymorphic multiple dispatch \u2013 something which Julia's dispatch and type systems are particularly well-suited to handle. \\\"Automatic\\\" promotion of mathematical operands simply emerges as a special application: Julia comes with pre-defined catch-all dispatch rules for mathematical operators, invoked when no specific implementation exists for some combination of operand types. These catch-all rules first promote all operands to a common type using user-definable promotion rules, and then invoke a specialized implementation of the operator in question for the resulting values, now of the same type. User-defined types can easily participate in this promotion system by defining methods for conversion to and from other types, and providing a handful of promotion rules defining what types they should promote to when mixed with other types.\"\n},\n\n{\n    \"location\": \"manual/conversion-and-promotion.html#Conversion-1\",\n    \"page\": \"Conversion and Promotion\",\n    \"title\": \"Conversion\",\n    \"category\": \"section\",\n    \"text\": \"Conversion of values to various types is performed by the convert function. The convert function generally takes two arguments: the first is a type object while the second is a value to convert to that type; the returned value is the value converted to an instance of given type. The simplest way to understand this function is to see it in action:julia> x = 12\\n12\\n\\njulia> typeof(x)\\nInt64\\n\\njulia> convert(UInt8, x)\\n0x0c\\n\\njulia> typeof(ans)\\nUInt8\\n\\njulia> convert(AbstractFloat, x)\\n12.0\\n\\njulia> typeof(ans)\\nFloat64\\n\\njulia> a = Any[1 2 3; 4 5 6]\\n2\u00d73 Array{Any,2}:\\n 1  2  3\\n 4  5  6\\n\\njulia> convert(Array{Float64}, a)\\n2\u00d73 Array{Float64,2}:\\n 1.0  2.0  3.0\\n 4.0  5.0  6.0Conversion isn't always possible, in which case a no method error is thrown indicating that convert doesn't know how to perform the requested conversion:julia> convert(AbstractFloat, \\\"foo\\\")\\nERROR: MethodError: Cannot `convert` an object of type String to an object of type AbstractFloat\\nThis may have arisen from a call to the constructor AbstractFloat(...),\\nsince type constructors fall back to convert methods.Some languages consider parsing strings as numbers or formatting numbers as strings to be conversions (many dynamic languages will even perform conversion for you automatically), however Julia does not: even though some strings can be parsed as numbers, most strings are not valid representations of numbers, and only a very limited subset of them are. Therefore in Julia the dedicated parse() function must be used to perform this operation, making it more explicit.\"\n},\n\n{\n    \"location\": \"manual/conversion-and-promotion.html#Defining-New-Conversions-1\",\n    \"page\": \"Conversion and Promotion\",\n    \"title\": \"Defining New Conversions\",\n    \"category\": \"section\",\n    \"text\": \"To define a new conversion, simply provide a new method for convert(). That's really all there is to it. For example, the method to convert a real number to a boolean is this:convert(::Type{Bool}, x::Real) = x==0 ? false : x==1 ? true : throw(InexactError())The type of the first argument of this method is a singleton type, Type{Bool}, the only instance of which is Bool. Thus, this method is only invoked when the first argument is the type value Bool. Notice the syntax used for the first argument: the argument name is omitted prior to the :: symbol, and only the type is given. This is the syntax in Julia for a function argument whose type is specified but whose value is never used in the function body. In this example, since the type is a singleton, there would never be any reason to use its value within the body. When invoked, the method determines whether a numeric value is true or false as a boolean, by comparing it to one and zero:julia> convert(Bool, 1)\\ntrue\\n\\njulia> convert(Bool, 0)\\nfalse\\n\\njulia> convert(Bool, 1im)\\nERROR: InexactError()\\nStacktrace:\\n [1] convert(::Type{Bool}, ::Complex{Int64}) at ./complex.jl:31\\n\\njulia> convert(Bool, 0im)\\nfalseThe method signatures for conversion methods are often quite a bit more involved than this example, especially for parametric types. The example above is meant to be pedagogical, and is not the actual Julia behaviour. This is the actual implementation in Julia:convert(::Type{T}, z::Complex) where {T<:Real} =\\n    (imag(z) == 0 ? convert(T, real(z)) : throw(InexactError()))\"\n},\n\n{\n    \"location\": \"manual/conversion-and-promotion.html#man-rational-conversion-1\",\n    \"page\": \"Conversion and Promotion\",\n    \"title\": \"Case Study: Rational Conversions\",\n    \"category\": \"section\",\n    \"text\": \"To continue our case study of Julia's Rational type, here are the conversions declared in rational.jl, right after the declaration of the type and its constructors:convert(::Type{Rational{T}}, x::Rational) where {T<:Integer} = Rational(convert(T,x.num),convert(T,x.den))\\nconvert(::Type{Rational{T}}, x::Integer) where {T<:Integer} = Rational(convert(T,x), convert(T,1))\\n\\nfunction convert(::Type{Rational{T}}, x::AbstractFloat, tol::Real) where T<:Integer\\n    if isnan(x); return zero(T)//zero(T); end\\n    if isinf(x); return sign(x)//zero(T); end\\n    y = x\\n    a = d = one(T)\\n    b = c = zero(T)\\n    while true\\n        f = convert(T,round(y)); y -= f\\n        a, b, c, d = f*a+c, f*b+d, a, b\\n        if y == 0 || abs(a/b-x) <= tol\\n            return a//b\\n        end\\n        y = 1/y\\n    end\\nend\\nconvert(rt::Type{Rational{T}}, x::AbstractFloat) where {T<:Integer} = convert(rt,x,eps(x))\\n\\nconvert(::Type{T}, x::Rational) where {T<:AbstractFloat} = convert(T,x.num)/convert(T,x.den)\\nconvert(::Type{T}, x::Rational) where {T<:Integer} = div(convert(T,x.num),convert(T,x.den))The initial four convert methods provide conversions to rational types. The first method converts one type of rational to another type of rational by converting the numerator and denominator to the appropriate integer type. The second method does the same conversion for integers by taking the denominator to be 1. The third method implements a standard algorithm for approximating a floating-point number by a ratio of integers to within a given tolerance, and the fourth method applies it, using machine epsilon at the given value as the threshold. In general, one should have a//b == convert(Rational{Int64}, a/b).The last two convert methods provide conversions from rational types to floating-point and integer types. To convert to floating point, one simply converts both numerator and denominator to that floating point type and then divides. To convert to integer, one can use the div operator for truncated integer division (rounded towards zero).\"\n},\n\n{\n    \"location\": \"manual/conversion-and-promotion.html#Promotion-1\",\n    \"page\": \"Conversion and Promotion\",\n    \"title\": \"Promotion\",\n    \"category\": \"section\",\n    \"text\": \"Promotion refers to converting values of mixed types to a single common type. Although it is not strictly necessary, it is generally implied that the common type to which the values are converted can faithfully represent all of the original values. In this sense, the term \\\"promotion\\\" is appropriate since the values are converted to a \\\"greater\\\" type \u2013 i.e. one which can represent all of the input values in a single common type. It is important, however, not to confuse this with object-oriented (structural) super-typing, or Julia's notion of abstract super-types: promotion has nothing to do with the type hierarchy, and everything to do with converting between alternate representations. For instance, although every Int32 value can also be represented as a Float64 value, Int32 is not a subtype of Float64.Promotion to a common \\\"greater\\\" type is performed in Julia by the promote function, which takes any number of arguments, and returns a tuple of the same number of values, converted to a common type, or throws an exception if promotion is not possible. The most common use case for promotion is to convert numeric arguments to a common type:julia> promote(1, 2.5)\\n(1.0, 2.5)\\n\\njulia> promote(1, 2.5, 3)\\n(1.0, 2.5, 3.0)\\n\\njulia> promote(2, 3//4)\\n(2//1, 3//4)\\n\\njulia> promote(1, 2.5, 3, 3//4)\\n(1.0, 2.5, 3.0, 0.75)\\n\\njulia> promote(1.5, im)\\n(1.5 + 0.0im, 0.0 + 1.0im)\\n\\njulia> promote(1 + 2im, 3//4)\\n(1//1 + 2//1*im, 3//4 + 0//1*im)Floating-point values are promoted to the largest of the floating-point argument types. Integer values are promoted to the larger of either the native machine word size or the largest integer argument type. Mixtures of integers and floating-point values are promoted to a floating-point type big enough to hold all the values. Integers mixed with rationals are promoted to rationals. Rationals mixed with floats are promoted to floats. Complex values mixed with real values are promoted to the appropriate kind of complex value.That is really all there is to using promotions. The rest is just a matter of clever application, the most typical \\\"clever\\\" application being the definition of catch-all methods for numeric operations like the arithmetic operators +, -, * and /. Here are some of the catch-all method definitions given in promotion.jl:+(x::Number, y::Number) = +(promote(x,y)...)\\n-(x::Number, y::Number) = -(promote(x,y)...)\\n*(x::Number, y::Number) = *(promote(x,y)...)\\n/(x::Number, y::Number) = /(promote(x,y)...)These method definitions say that in the absence of more specific rules for adding, subtracting, multiplying and dividing pairs of numeric values, promote the values to a common type and then try again. That's all there is to it: nowhere else does one ever need to worry about promotion to a common numeric type for arithmetic operations \u2013 it just happens automatically. There are definitions of catch-all promotion methods for a number of other arithmetic and mathematical functions in promotion.jl, but beyond that, there are hardly any calls to promote required in the Julia standard library. The most common usages of promote occur in outer constructors methods, provided for convenience, to allow constructor calls with mixed types to delegate to an inner type with fields promoted to an appropriate common type. For example, recall that rational.jl provides the following outer constructor method:Rational(n::Integer, d::Integer) = Rational(promote(n,d)...)This allows calls like the following to work:julia> Rational(Int8(15),Int32(-5))\\n-3//1\\n\\njulia> typeof(ans)\\nRational{Int32}For most user-defined types, it is better practice to require programmers to supply the expected types to constructor functions explicitly, but sometimes, especially for numeric problems, it can be convenient to do promotion automatically.\"\n},\n\n{\n    \"location\": \"manual/conversion-and-promotion.html#Defining-Promotion-Rules-1\",\n    \"page\": \"Conversion and Promotion\",\n    \"title\": \"Defining Promotion Rules\",\n    \"category\": \"section\",\n    \"text\": \"Although one could, in principle, define methods for the promote function directly, this would require many redundant definitions for all possible permutations of argument types. Instead, the behavior of promote is defined in terms of an auxiliary function called promote_rule, which one can provide methods for. The promote_rule function takes a pair of type objects and returns another type object, such that instances of the argument types will be promoted to the returned type. Thus, by defining the rule:promote_rule(::Type{Float64}, ::Type{Float32}) = Float64one declares that when 64-bit and 32-bit floating-point values are promoted together, they should be promoted to 64-bit floating-point. The promotion type does not need to be one of the argument types, however; the following promotion rules both occur in Julia's standard library:promote_rule(::Type{UInt8}, ::Type{Int8}) = Int\\npromote_rule(::Type{BigInt}, ::Type{Int8}) = BigIntIn the latter case, the result type is BigInt since BigInt is the only type large enough to hold integers for arbitrary-precision integer arithmetic. Also note that one does not need to define both promote_rule(::Type{A}, ::Type{B}) and promote_rule(::Type{B}, ::Type{A}) \u2013 the symmetry is implied by the way promote_rule is used in the promotion process.The promote_rule function is used as a building block to define a second function called promote_type, which, given any number of type objects, returns the common type to which those values, as arguments to promote should be promoted. Thus, if one wants to know, in absence of actual values, what type a collection of values of certain types would promote to, one can use promote_type:julia> promote_type(Int8, UInt16)\\nInt64Internally, promote_type is used inside of promote to determine what type argument values should be converted to for promotion. It can, however, be useful in its own right. The curious reader can read the code in promotion.jl, which defines the complete promotion mechanism in about 35 lines.\"\n},\n\n{\n    \"location\": \"manual/conversion-and-promotion.html#Case-Study:-Rational-Promotions-1\",\n    \"page\": \"Conversion and Promotion\",\n    \"title\": \"Case Study: Rational Promotions\",\n    \"category\": \"section\",\n    \"text\": \"Finally, we finish off our ongoing case study of Julia's rational number type, which makes relatively sophisticated use of the promotion mechanism with the following promotion rules:promote_rule(::Type{Rational{T}}, ::Type{S}) where {T<:Integer,S<:Integer} = Rational{promote_type(T,S)}\\npromote_rule(::Type{Rational{T}}, ::Type{Rational{S}}) where {T<:Integer,S<:Integer} = Rational{promote_type(T,S)}\\npromote_rule(::Type{Rational{T}}, ::Type{S}) where {T<:Integer,S<:AbstractFloat} = promote_type(T,S)The first rule says that promoting a rational number with any other integer type promotes to a rational type whose numerator/denominator type is the result of promotion of its numerator/denominator type with the other integer type. The second rule applies the same logic to two different types of rational numbers, resulting in a rational of the promotion of their respective numerator/denominator types. The third and final rule dictates that promoting a rational with a float results in the same type as promoting the numerator/denominator type with the float.This small handful of promotion rules, together with the conversion methods discussed above, are sufficient to make rational numbers interoperate completely naturally with all of Julia's other numeric types \u2013 integers, floating-point numbers, and complex numbers. By providing appropriate conversion methods and promotion rules in the same manner, any user-defined numeric type can interoperate just as naturally with Julia's predefined numerics.\"\n},\n\n{\n    \"location\": \"manual/interfaces.html#\",\n    \"page\": \"Interfaces\",\n    \"title\": \"Interfaces\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/interfaces.html#Interfaces-1\",\n    \"page\": \"Interfaces\",\n    \"title\": \"Interfaces\",\n    \"category\": \"section\",\n    \"text\": \"A lot of the power and extensibility in Julia comes from a collection of informal interfaces.  By extending a few specific methods to work for a custom type, objects of that type not only receive those functionalities, but they are also able to be used in other methods that are written to generically build upon those behaviors.\"\n},\n\n{\n    \"location\": \"manual/interfaces.html#man-interface-iteration-1\",\n    \"page\": \"Interfaces\",\n    \"title\": \"Iteration\",\n    \"category\": \"section\",\n    \"text\": \"Required methods \u00a0 Brief description\\nstart(iter) \u00a0 Returns the initial iteration state\\nnext(iter, state) \u00a0 Returns the current item and the next state\\ndone(iter, state) \u00a0 Tests if there are any items remaining\\nImportant optional methods Default definition Brief description\\niteratorsize(IterType) HasLength() One of HasLength(), HasShape(), IsInfinite(), or SizeUnknown() as appropriate\\niteratoreltype(IterType) HasEltype() Either EltypeUnknown() or HasEltype() as appropriate\\neltype(IterType) Any The type the items returned by next()\\nlength(iter) (undefined) The number of items, if known\\nsize(iter, [dim...]) (undefined) The number of items in each dimension, if knownValue returned by iteratorsize(IterType) Required Methods\\nHasLength() length(iter)\\nHasShape() length(iter)  and size(iter, [dim...])\\nIsInfinite() (none)\\nSizeUnknown() (none)Value returned by iteratoreltype(IterType) Required Methods\\nHasEltype() eltype(IterType)\\nEltypeUnknown() (none)Sequential iteration is implemented by the methods start(), done(), and next(). Instead of mutating objects as they are iterated over, Julia provides these three methods to keep track of the iteration state externally from the object. The start(iter) method returns the initial state for the iterable object iter. That state gets passed along to done(iter, state), which tests if there are any elements remaining, and next(iter, state), which returns a tuple containing the current element and an updated state. The state object can be anything, and is generally considered to be an implementation detail private to the iterable object.Any object defines these three methods is iterable and can be used in the many functions that rely upon iteration. It can also be used directly in a for loop since the syntax:for i in iter   # or  \\\"for i = iter\\\"\\n    # body\\nendis translated into:state = start(iter)\\nwhile !done(iter, state)\\n    (i, state) = next(iter, state)\\n    # body\\nendA simple example is an iterable sequence of square numbers with a defined length:julia> struct Squares\\n           count::Int\\n       end\\n\\njulia> Base.start(::Squares) = 1\\n\\njulia> Base.next(S::Squares, state) = (state*state, state+1)\\n\\njulia> Base.done(S::Squares, state) = state > S.count\\n\\njulia> Base.eltype(::Type{Squares}) = Int # Note that this is defined for the type\\n\\njulia> Base.length(S::Squares) = S.countWith only start, next, and done definitions, the Squares type is already pretty powerful. We can iterate over all the elements:julia> for i in Squares(7)\\n           println(i)\\n       end\\n1\\n4\\n9\\n16\\n25\\n36\\n49We can use many of the builtin methods that work with iterables, like in(), mean() and std():julia> 25 in Squares(10)\\ntrue\\n\\njulia> mean(Squares(100))\\n3383.5\\n\\njulia> std(Squares(100))\\n3024.355854282583There are a few more methods we can extend to give Julia more information about this iterable collection.  We know that the elements in a Squares sequence will always be Int. By extending the eltype() method, we can give that information to Julia and help it make more specialized code in the more complicated methods. We also know the number of elements in our sequence, so we can extend length(), too.Now, when we ask Julia to collect() all the elements into an array it can preallocate a Vector{Int} of the right size instead of blindly push!ing each element into a Vector{Any}:julia> collect(Squares(10))' # transposed to save space\\n1\u00d710 RowVector{Int64,Array{Int64,1}}:\\n 1  4  9  16  25  36  49  64  81  100While we can rely upon generic implementations, we can also extend specific methods where we know there is a simpler algorithm. For example, there's a formula to compute the sum of squares, so we can override the generic iterative version with a more performant solution:julia> Base.sum(S::Squares) = (n = S.count; return n*(n+1)*(2n+1)\u00f76)\\n\\njulia> sum(Squares(1803))\\n1955361914This is a very common pattern throughout the Julia standard library: a small set of required methods define an informal interface that enable many fancier behaviors. In some cases, types will want to additionally specialize those extra behaviors when they know a more efficient algorithm can be used in their specific case.\"\n},\n\n{\n    \"location\": \"manual/interfaces.html#Indexing-1\",\n    \"page\": \"Interfaces\",\n    \"title\": \"Indexing\",\n    \"category\": \"section\",\n    \"text\": \"Methods to implement Brief description\\ngetindex(X, i) X[i], indexed element access\\nsetindex!(X, v, i) X[i] = v, indexed assignment\\nendof(X) The last index, used in X[end]For the Squares iterable above, we can easily compute the ith element of the sequence by squaring it.  We can expose this as an indexing expression S[i]. To opt into this behavior, Squares simply needs to define getindex():julia> function Base.getindex(S::Squares, i::Int)\\n           1 <= i <= S.count || throw(BoundsError(S, i))\\n           return i*i\\n       end\\n\\njulia> Squares(100)[23]\\n529Additionally, to support the syntax S[end], we must define endof() to specify the last valid index:julia> Base.endof(S::Squares) = length(S)\\n\\njulia> Squares(23)[end]\\n529Note, though, that the above only defines getindex() with one integer index. Indexing with anything other than an Int will throw a MethodError saying that there was no matching method. In order to support indexing with ranges or vectors of Ints, separate methods must be written:julia> Base.getindex(S::Squares, i::Number) = S[convert(Int, i)]\\n\\njulia> Base.getindex(S::Squares, I) = [S[i] for i in I]\\n\\njulia> Squares(10)[[3,4.,5]]\\n3-element Array{Int64,1}:\\n  9\\n 16\\n 25While this is starting to support more of the indexing operations supported by some of the builtin types, there's still quite a number of behaviors missing. This Squares sequence is starting to look more and more like a vector as we've added behaviors to it. Instead of defining all these behaviors ourselves, we can officially define it as a subtype of an AbstractArray.\"\n},\n\n{\n    \"location\": \"manual/interfaces.html#man-interface-array-1\",\n    \"page\": \"Interfaces\",\n    \"title\": \"Abstract Arrays\",\n    \"category\": \"section\",\n    \"text\": \"Methods to implement \u00a0 Brief description\\nsize(A) \u00a0 Returns a tuple containing the dimensions of A\\ngetindex(A, i::Int) \u00a0 (if IndexLinear) Linear scalar indexing\\ngetindex(A, I::Vararg{Int, N}) \u00a0 (if IndexCartesian, where N = ndims(A)) N-dimensional scalar indexing\\nsetindex!(A, v, i::Int) \u00a0 (if IndexLinear) Scalar indexed assignment\\nsetindex!(A, v, I::Vararg{Int, N}) \u00a0 (if IndexCartesian, where N = ndims(A)) N-dimensional scalar indexed assignment\\nOptional methods Default definition Brief description\\nIndexStyle(::Type) IndexCartesian() Returns either IndexLinear() or IndexCartesian(). See the description below.\\ngetindex(A, I...) defined in terms of scalar getindex() Multidimensional and nonscalar indexing\\nsetindex!(A, I...) defined in terms of scalar setindex!() Multidimensional and nonscalar indexed assignment\\nstart()/next()/done() defined in terms of scalar getindex() Iteration\\nlength(A) prod(size(A)) Number of elements\\nsimilar(A) similar(A, eltype(A), size(A)) Return a mutable array with the same shape and element type\\nsimilar(A, ::Type{S}) similar(A, S, size(A)) Return a mutable array with the same shape and the specified element type\\nsimilar(A, dims::NTuple{Int}) similar(A, eltype(A), dims) Return a mutable array with the same element type and size dims\\nsimilar(A, ::Type{S}, dims::NTuple{Int}) Array{S}(dims) Return a mutable array with the specified element type and size\\nNon-traditional indices Default definition Brief description\\nindices(A) map(OneTo, size(A)) Return the AbstractUnitRange of valid indices\\nBase.similar(A, ::Type{S}, inds::NTuple{Ind}) similar(A, S, Base.to_shape(inds)) Return a mutable array with the specified indices inds (see below)\\nBase.similar(T::Union{Type,Function}, inds) T(Base.to_shape(inds)) Return an array similar to T with the specified indices inds (see below)If a type is defined as a subtype of AbstractArray, it inherits a very large set of rich behaviors including iteration and multidimensional indexing built on top of single-element access.  See the arrays manual page and standard library section for more supported methods.A key part in defining an AbstractArray subtype is IndexStyle. Since indexing is such an important part of an array and often occurs in hot loops, it's important to make both indexing and indexed assignment as efficient as possible.  Array data structures are typically defined in one of two ways: either it most efficiently accesses its elements using just one index (linear indexing) or it intrinsically accesses the elements with indices specified for every dimension.  These two modalities are identified by Julia as IndexLinear() and IndexCartesian().  Converting a linear index to multiple indexing subscripts is typically very expensive, so this provides a traits-based mechanism to enable efficient generic code for all array types.This distinction determines which scalar indexing methods the type must define. IndexLinear() arrays are simple: just define getindex(A::ArrayType, i::Int).  When the array is subsequently indexed with a multidimensional set of indices, the fallback getindex(A::AbstractArray, I...)() efficiently converts the indices into one linear index and then calls the above method. IndexCartesian() arrays, on the other hand, require methods to be defined for each supported dimensionality with ndims(A) Int indices. For example, the built-in SparseMatrixCSC type only supports two dimensions, so it just defines getindex(A::SparseMatrixCSC, i::Int, j::Int). The same holds for setindex!().Returning to the sequence of squares from above, we could instead define it as a subtype of an AbstractArray{Int, 1}:julia> struct SquaresVector <: AbstractArray{Int, 1}\\n           count::Int\\n       end\\n\\njulia> Base.size(S::SquaresVector) = (S.count,)\\n\\njulia> Base.IndexStyle(::Type{<:SquaresVector}) = IndexLinear()\\n\\njulia> Base.getindex(S::SquaresVector, i::Int) = i*iNote that it's very important to specify the two parameters of the AbstractArray; the first defines the eltype(), and the second defines the ndims(). That supertype and those three methods are all it takes for SquaresVector to be an iterable, indexable, and completely functional array:julia> s = SquaresVector(7)\\n7-element SquaresVector:\\n  1\\n  4\\n  9\\n 16\\n 25\\n 36\\n 49\\n\\njulia> s[s .> 20]\\n3-element Array{Int64,1}:\\n 25\\n 36\\n 49\\n\\njulia> s \\\\ [1 2; 3 4; 5 6; 7 8; 9 10; 11 12; 13 14]\\n1\u00d72 Array{Float64,2}:\\n 0.305389  0.335329\\n\\njulia> s \u22c5 s # dot(s, s)\\n4676As a more complicated example, let's define our own toy N-dimensional sparse-like array type built on top of Dict:julia> struct SparseArray{T,N} <: AbstractArray{T,N}\\n           data::Dict{NTuple{N,Int}, T}\\n           dims::NTuple{N,Int}\\n       end\\n\\njulia> SparseArray{T}(::Type{T}, dims::Int...) = SparseArray(T, dims);\\n\\njulia> SparseArray{T,N}(::Type{T}, dims::NTuple{N,Int}) = SparseArray{T,N}(Dict{NTuple{N,Int}, T}(), dims);\\n\\njulia> Base.size(A::SparseArray) = A.dims\\n\\njulia> Base.similar(A::SparseArray, ::Type{T}, dims::Dims) where {T} = SparseArray(T, dims)\\n\\njulia> Base.getindex(A::SparseArray{T,N}, I::Vararg{Int,N}) where {T,N} = get(A.data, I, zero(T))\\n\\njulia> Base.setindex!(A::SparseArray{T,N}, v, I::Vararg{Int,N}) where {T,N} = (A.data[I] = v)Notice that this is an IndexCartesian array, so we must manually define getindex() and setindex!() at the dimensionality of the array. Unlike the SquaresVector, we are able to define setindex!(), and so we can mutate the array:julia> A = SparseArray(Float64, 3, 3)\\n3\u00d73 SparseArray{Float64,2}:\\n 0.0  0.0  0.0\\n 0.0  0.0  0.0\\n 0.0  0.0  0.0\\n\\njulia> fill!(A, 2)\\n3\u00d73 SparseArray{Float64,2}:\\n 2.0  2.0  2.0\\n 2.0  2.0  2.0\\n 2.0  2.0  2.0\\n\\njulia> A[:] = 1:length(A); A\\n3\u00d73 SparseArray{Float64,2}:\\n 1.0  4.0  7.0\\n 2.0  5.0  8.0\\n 3.0  6.0  9.0The result of indexing an AbstractArray can itself be an array (for instance when indexing by a Range). The AbstractArray fallback methods use similar() to allocate an Array of the appropriate size and element type, which is filled in using the basic indexing method described above. However, when implementing an array wrapper you often want the result to be wrapped as well:julia> A[1:2,:]\\n2\u00d73 SparseArray{Float64,2}:\\n 1.0  4.0  7.0\\n 2.0  5.0  8.0In this example it is accomplished by defining Base.similar{T}(A::SparseArray, ::Type{T}, dims::Dims) to create the appropriate wrapped array. (Note that while similar supports 1- and 2-argument forms, in most case you only need to specialize the 3-argument form.) For this to work it's important that SparseArray is mutable (supports setindex!). Defining similar(), getindex() and setindex!() for SparseArray also makes it possible to copy() the array:julia> copy(A)\\n3\u00d73 SparseArray{Float64,2}:\\n 1.0  4.0  7.0\\n 2.0  5.0  8.0\\n 3.0  6.0  9.0In addition to all the iterable and indexable methods from above, these types can also interact with each other and use most of the methods defined in the standard library for AbstractArrays:julia> A[SquaresVector(3)]\\n3-element SparseArray{Float64,1}:\\n 1.0\\n 4.0\\n 9.0\\n\\njulia> dot(A[:,1],A[:,2])\\n32.0If you are defining an array type that allows non-traditional indexing (indices that start at something other than 1), you should specialize indices. You should also specialize similar so that the dims argument (ordinarily a Dims size-tuple) can accept AbstractUnitRange objects, perhaps range-types Ind of your own design. For more information, see Arrays with custom indices.\"\n},\n\n{\n    \"location\": \"manual/modules.html#\",\n    \"page\": \"Modules\",\n    \"title\": \"Modules\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/modules.html#modules-1\",\n    \"page\": \"Modules\",\n    \"title\": \"Modules\",\n    \"category\": \"section\",\n    \"text\": \"Modules in Julia are separate variable workspaces, i.e. they introduce a new global scope. They are delimited syntactically, inside module Name ... end. Modules allow you to create top-level definitions (aka global variables) without worrying about name conflicts when your code is used together with somebody else's. Within a module, you can control which names from other modules are visible (via importing), and specify which of your names are intended to be public (via exporting).The following example demonstrates the major features of modules. It is not meant to be run, but is shown for illustrative purposes:module MyModule\\nusing Lib\\n\\nusing BigLib: thing1, thing2\\n\\nimport Base.show\\n\\nimportall OtherLib\\n\\nexport MyType, foo\\n\\nstruct MyType\\n    x\\nend\\n\\nbar(x) = 2x\\nfoo(a::MyType) = bar(a.x) + 1\\n\\nshow(io::IO, a::MyType) = print(io, \\\"MyType $(a.x)\\\")\\nendNote that the style is not to indent the body of the module, since that would typically lead to whole files being indented.This module defines a type MyType, and two functions. Function foo and type MyType are exported, and so will be available for importing into other modules.  Function bar is private to MyModule.The statement using Lib means that a module called Lib will be available for resolving names as needed. When a global variable is encountered that has no definition in the current module, the system will search for it among variables exported by Lib and import it if it is found there. This means that all uses of that global within the current module will resolve to the definition of that variable in Lib.The statement using BigLib: thing1, thing2 is a syntactic shortcut for using BigLib.thing1, BigLib.thing2.The import keyword supports all the same syntax as using, but only operates on a single name at a time. It does not add modules to be searched the way using does. import also differs from using in that functions must be imported using import to be extended with new methods.In MyModule above we wanted to add a method to the standard show function, so we had to write import Base.show. Functions whose names are only visible via using cannot be extended.The keyword importall explicitly imports all names exported by the specified module, as if import were individually used on all of them.Once a variable is made visible via using or import, a module may not create its own variable with the same name. Imported variables are read-only; assigning to a global variable always affects a variable owned by the current module, or else raises an error.\"\n},\n\n{\n    \"location\": \"manual/modules.html#Summary-of-module-usage-1\",\n    \"page\": \"Modules\",\n    \"title\": \"Summary of module usage\",\n    \"category\": \"section\",\n    \"text\": \"To load a module, two main keywords can be used: using and import. To understand their differences, consider the following example:module MyModule\\n\\nexport x, y\\n\\nx() = \\\"x\\\"\\ny() = \\\"y\\\"\\np() = \\\"p\\\"\\n\\nendIn this module we export the x and y functions (with the keyword export), and also have the non-exported function p. There are several different ways to load the Module and its inner functions into the current workspace:Import Command What is brought into scope Available for method extension\\nusing MyModule All exported names (x and y), MyModule.x, MyModule.y and MyModule.p MyModule.x, MyModule.y and MyModule.p\\nusing MyModule.x, MyModule.p x and p \u00a0\\nusing MyModule: x, p x and p \u00a0\\nimport MyModule MyModule.x, MyModule.y and MyModule.p MyModule.x, MyModule.y and MyModule.p\\nimport MyModule.x, MyModule.p x and p x and p\\nimport MyModule: x, p x and p x and p\\nimportall MyModule All exported names (x and y) x and y\"\n},\n\n{\n    \"location\": \"manual/modules.html#Modules-and-files-1\",\n    \"page\": \"Modules\",\n    \"title\": \"Modules and files\",\n    \"category\": \"section\",\n    \"text\": \"Files and file names are mostly unrelated to modules; modules are associated only with module expressions. One can have multiple files per module, and multiple modules per file:module Foo\\n\\ninclude(\\\"file1.jl\\\")\\ninclude(\\\"file2.jl\\\")\\n\\nendIncluding the same code in different modules provides mixin-like behavior. One could use this to run the same code with different base definitions, for example testing code by running it with \\\"safe\\\" versions of some operators:module Normal\\ninclude(\\\"mycode.jl\\\")\\nend\\n\\nmodule Testing\\ninclude(\\\"safe_operators.jl\\\")\\ninclude(\\\"mycode.jl\\\")\\nend\"\n},\n\n{\n    \"location\": \"manual/modules.html#Standard-modules-1\",\n    \"page\": \"Modules\",\n    \"title\": \"Standard modules\",\n    \"category\": \"section\",\n    \"text\": \"There are three important standard modules: Main, Core, and Base.Main is the top-level module, and Julia starts with Main set as the current module.  Variables defined at the prompt go in Main, and whos() lists variables in Main.Core contains all identifiers considered \\\"built in\\\" to the language, i.e. part of the core language and not libraries. Every module implicitly specifies using Core, since you can't do anything without those definitions.Base is the standard library (the contents of base/). All modules implicitly contain using Base, since this is needed in the vast majority of cases.\"\n},\n\n{\n    \"location\": \"manual/modules.html#Default-top-level-definitions-and-bare-modules-1\",\n    \"page\": \"Modules\",\n    \"title\": \"Default top-level definitions and bare modules\",\n    \"category\": \"section\",\n    \"text\": \"In addition to using Base, modules also automatically contain a definition of the eval function, which evaluates expressions within the context of that module.If these default definitions are not wanted, modules can be defined using the keyword baremodule instead (note: Core is still imported, as per above). In terms of baremodule, a standard module looks like this:baremodule Mod\\n\\nusing Base\\n\\neval(x) = Core.eval(Mod, x)\\neval(m,x) = Core.eval(m, x)\\n\\n...\\n\\nend\"\n},\n\n{\n    \"location\": \"manual/modules.html#Relative-and-absolute-module-paths-1\",\n    \"page\": \"Modules\",\n    \"title\": \"Relative and absolute module paths\",\n    \"category\": \"section\",\n    \"text\": \"Given the statement using Foo, the system looks for Foo within Main. If the module does not exist, the system attempts to require(\\\"Foo\\\"), which typically results in loading code from an installed package.However, some modules contain submodules, which means you sometimes need to access a module that is not directly available in Main. There are two ways to do this. The first is to use an absolute path, for example using Base.Sort. The second is to use a relative path, which makes it easier to import submodules of the current module or any of its enclosing modules:module Parent\\n\\nmodule Utils\\n...\\nend\\n\\nusing .Utils\\n\\n...\\nendHere module Parent contains a submodule Utils, and code in Parent wants the contents of Utils to be visible. This is done by starting the using path with a period. Adding more leading periods moves up additional levels in the module hierarchy. For example using ..Utils would look for Utils in Parent's enclosing module rather than in Parent itself.Note that relative-import qualifiers are only valid in using and import statements.\"\n},\n\n{\n    \"location\": \"manual/modules.html#Module-file-paths-1\",\n    \"page\": \"Modules\",\n    \"title\": \"Module file paths\",\n    \"category\": \"section\",\n    \"text\": \"The global variable LOAD_PATH contains the directories Julia searches for modules when calling require. It can be extended using push!:push!(LOAD_PATH, \\\"/Path/To/My/Module/\\\")Putting this statement in the file ~/.juliarc.jl will extend LOAD_PATH on every Julia startup. Alternatively, the module load path can be extended by defining the environment variable JULIA_LOAD_PATH.\"\n},\n\n{\n    \"location\": \"manual/modules.html#Namespace-miscellanea-1\",\n    \"page\": \"Modules\",\n    \"title\": \"Namespace miscellanea\",\n    \"category\": \"section\",\n    \"text\": \"If a name is qualified (e.g. Base.sin), then it can be accessed even if it is not exported. This is often useful when debugging. It can also have methods added to it by using the qualified name as the function name. However, due to syntactic ambiguities that arise, if you wish to add methods to a function in a different module whose name contains only symbols, such as an operator, Base.+ for example, you must use Base.:+ to refer to it. If the operator is more than one character in length you must surround it in brackets, such as: Base.:(==).Macro names are written with @ in import and export statements, e.g. import Mod.@mac. Macros in other modules can be invoked as Mod.@mac or @Mod.mac.The syntax M.x = y does not work to assign a global in another module; global assignment is always module-local.A variable can be \\\"reserved\\\" for the current module without assigning to it by declaring it as global x at the top level. This can be used to prevent name conflicts for globals initialized after load time.\"\n},\n\n{\n    \"location\": \"manual/modules.html#Module-initialization-and-precompilation-1\",\n    \"page\": \"Modules\",\n    \"title\": \"Module initialization and precompilation\",\n    \"category\": \"section\",\n    \"text\": \"Large modules can take several seconds to load because executing all of the statements in a module often involves compiling a large amount of code. Julia provides the ability to create precompiled versions of modules to reduce this time.To create an incremental precompiled module file, add __precompile__() at the top of your module file (before the module starts). This will cause it to be automatically compiled the first time it is imported. Alternatively, you can manually call Base.compilecache(modulename). The resulting cache files will be stored in Base.LOAD_CACHE_PATH[1]. Subsequently, the module is automatically recompiled upon import whenever any of its dependencies change; dependencies are modules it imports, the Julia build, files it includes, or explicit dependencies declared by include_dependency(path) in the module file(s).For file dependencies, a change is determined by examining whether the modification time (mtime) of each file loaded by include or added explicitly by include_dependency is unchanged, or equal to the modification time truncated to the nearest second (to accommodate systems that can't copy mtime with sub-second accuracy). It also takes into account whether the path to the file chosen by the search logic in require matches the path that had created the precompile file.It also takes into account the set of dependencies already loaded into the current process and won't recompile those modules, even if their files change or disappear, in order to avoid creating incompatibilities between the running system and the precompile cache. If you want to have changes to the source reflected in the running system, you should call reload(\\\"Module\\\") on the module you changed, and any module that depended on it in which you want to see the change reflected.Precompiling a module also recursively precompiles any modules that are imported therein. If you know that it is not safe to precompile your module (for the reasons described below), you should put __precompile__(false) in the module file to cause Base.compilecache to throw an error (and thereby prevent the module from being imported by any other precompiled module).__precompile__() should not be used in a module unless all of its dependencies are also using __precompile__(). Failure to do so can result in a runtime error when loading the module.In order to make your module work with precompilation, however, you may need to change your module to explicitly separate any initialization steps that must occur at runtime from steps that can occur at compile time.  For this purpose, Julia allows you to define an __init__() function in your module that executes any initialization steps that must occur at runtime. This function will not be called during compilation (--output-* or __precompile__()). You may, of course, call it manually if necessary, but the default is to assume this function deals with computing state for the local machine, which does not need to be \u2013 or even should not be \u2013 captured in the compiled image. It will be called after the module is loaded into a process, including if it is being loaded into an incremental compile (--output-incremental=yes), but not if it is being loaded into a full-compilation process.In particular, if you define a function __init__() in a module, then Julia will call __init__() immediately after the module is loaded (e.g., by import, using, or require) at runtime for the first time (i.e., __init__ is only called once, and only after all statements in the module have been executed). Because it is called after the module is fully imported, any submodules or other imported modules have their __init__ functions called before the __init__ of the enclosing module.Two typical uses of __init__ are calling runtime initialization functions of external C libraries and initializing global constants that involve pointers returned by external libraries.  For example, suppose that we are calling a C library libfoo that requires us to call a foo_init() initialization function at runtime. Suppose that we also want to define a global constant foo_data_ptr that holds the return value of a void *foo_data() function defined by libfoo \u2013 this constant must be initialized at runtime (not at compile time) because the pointer address will change from run to run.  You could accomplish this by defining the following __init__ function in your module:const foo_data_ptr = Ref{Ptr{Void}}(0)\\nfunction __init__()\\n    ccall((:foo_init, :libfoo), Void, ())\\n    foo_data_ptr[] = ccall((:foo_data, :libfoo), Ptr{Void}, ())\\nendNotice that it is perfectly possible to define a global inside a function like __init__; this is one of the advantages of using a dynamic language. But by making it a constant at global scope, we can ensure that the type is known to the compiler and allow it to generate better optimized code. Obviously, any other globals in your module that depends on foo_data_ptr would also have to be initialized in __init__.Constants involving most Julia objects that are not produced by ccall do not need to be placed in __init__: their definitions can be precompiled and loaded from the cached module image. This includes complicated heap-allocated objects like arrays. However, any routine that returns a raw pointer value must be called at runtime for precompilation to work (Ptr objects will turn into null pointers unless they are hidden inside an isbits object). This includes the return values of the Julia functions cfunction and pointer.Dictionary and set types, or in general anything that depends on the output of a hash(key) method, are a trickier case.  In the common case where the keys are numbers, strings, symbols, ranges, Expr, or compositions of these types (via arrays, tuples, sets, pairs, etc.) they are safe to precompile.  However, for a few other key types, such as Function or DataType and generic user-defined types where you haven't defined a hash method, the fallback hash method depends on the memory address of the object (via its object_id) and hence may change from run to run. If you have one of these key types, or if you aren't sure, to be safe you can initialize this dictionary from within your __init__ function. Alternatively, you can use the ObjectIdDict dictionary type, which is specially handled by precompilation so that it is safe to initialize at compile-time.When using precompilation, it is important to keep a clear sense of the distinction between the compilation phase and the execution phase. In this mode, it will often be much more clearly apparent that Julia is a compiler which allows execution of arbitrary Julia code, not a standalone interpreter that also generates compiled code.Other known potential failure scenarios include:Global counters (for example, for attempting to uniquely identify objects) Consider the following code snippet:\\nmutable struct UniquedById\\n    myid::Int\\n    let counter = 0\\n        UniquedById() = new(counter += 1)\\n    end\\nend\\nwhile the intent of this code was to give every instance a unique id, the counter value is recorded at the end of compilation. All subsequent usages of this incrementally compiled module will start from that same counter value.\\nNote that object_id (which works by hashing the memory pointer) has similar issues (see notes on Dict usage below).\\nOne alternative is to store both current_module() and the current counter value, however, it may be better to redesign the code to not depend on this global state.\\nAssociative collections (such as Dict and Set) need to be re-hashed in __init__. (In the future, a mechanism may be provided to register an initializer function.)\\nDepending on compile-time side-effects persisting through load-time. Example include: modifying arrays or other variables in other Julia modules; maintaining handles to open files or devices; storing pointers to other system resources (including memory);\\nCreating accidental \\\"copies\\\" of global state from another module, by referencing it directly instead of via its lookup path. For example, (in global scope):\\n#mystdout = Base.STDOUT #= will not work correctly, since this will copy Base.STDOUT into this module =#\\n# instead use accessor functions:\\ngetstdout() = Base.STDOUT #= best option =#\\n# or move the assignment into the runtime:\\n__init__() = global mystdout = Base.STDOUT #= also works =#Several additional restrictions are placed on the operations that can be done while precompiling code to help the user avoid other wrong-behavior situations:Calling eval to cause a side-effect in another module. This will also cause a warning to be emitted when the incremental precompile flag is set.\\nglobal const statements from local scope after __init__() has been started (see issue #12010 for plans to add an error for this)\\nReplacing a module (or calling workspace()) is a runtime error while doing an incremental precompile.A few other points to be aware of:No code reload / cache invalidation is performed after changes are made to the source files themselves, (including by Pkg.update), and no cleanup is done after Pkg.rm\\nThe memory sharing behavior of a reshaped array is disregarded by precompilation (each view gets its own copy)\\nExpecting the filesystem to be unchanged between compile-time and runtime e.g. @__FILE__/source_path() to find resources at runtime, or the BinDeps @checked_lib macro. Sometimes this is unavoidable. However, when possible, it can be good practice to copy resources into the module at compile-time so they won't need to be found at runtime.\\nWeakRef objects and finalizers are not currently handled properly by the serializer (this will be fixed in an upcoming release).\\nIt is usually best to avoid capturing references to instances of internal metadata objects such as Method, MethodInstance, MethodTable, TypeMapLevel, TypeMapEntry and fields of those objects, as this can confuse the serializer and may not lead to the outcome you desire. It is not necessarily an error to do this, but you simply need to be prepared that the system will try to copy some of these and to create a single unique instance of others.It is sometimes helpful during module development to turn off incremental precompilation. The command line flag --compilecache={yes|no} enables you to toggle module precompilation on and off. When Julia is started with --compilecache=no the serialized modules in the compile cache are ignored when loading modules and module dependencies. Base.compilecache() can still be called manually and it will respect __precompile__() directives for the module. The state of this command line flag is passed to Pkg.build() to disable automatic precompilation triggering when installing, updating, and explicitly building packages.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#\",\n    \"page\": \"Documentation\",\n    \"title\": \"Documentation\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Documentation-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Documentation\",\n    \"category\": \"section\",\n    \"text\": \"Julia enables package developers and users to document functions, types and other objects easily via a built-in documentation system since Julia 0.4.The basic syntax is very simple: any string appearing at the top-level right before an object (function, macro, type or instance) will be interpreted as documenting it (these are called docstrings). Here is a very simple example:\\\"Tell whether there are too foo items in the array.\\\"\\nfoo(xs::Array) = ...Documentation is interpreted as Markdown, so you can use indentation and code fences to delimit code examples from text. Technically, any object can be associated with any other as metadata; Markdown happens to be the default, but one can construct other string macros and pass them to the @doc macro just as well.Here is a more complex example, still using Markdown:\\\"\\\"\\\"\\n    bar(x[, y])\\n\\nCompute the Bar index between `x` and `y`. If `y` is missing, compute\\nthe Bar index between all pairs of columns of `x`.\\n\\n# Examples\\n```julia-repl\\njulia> bar([1, 2], [1, 2])\\n1\\n```\\n\\\"\\\"\\\"\\nfunction bar(x, y) ...As in the example above, we recommend following some simple conventions when writing documentation:Always show the signature of a function at the top of the documentation, with a four-space indent so that it is printed as Julia code.\\nThis can be identical to the signature present in the Julia code (like mean(x::AbstractArray)), or a simplified form. Optional arguments should be represented with their default values (i.e. f(x, y=1)) when possible, following the actual Julia syntax. Optional arguments which do not have a default value should be put in brackets (i.e. f(x[, y]) and f(x[, y[, z]])). An alternative solution is to use several lines: one without optional arguments, the other(s) with them. This solution can also be used to document several related methods of a given function. When a function accepts many keyword arguments, only include a <keyword arguments> placeholder in the signature (i.e. f(x; <keyword arguments>)), and give the complete list under an # Arguments section (see point 4 below).\\nInclude a single one-line sentence describing what the function does or what the object represents after the simplified signature block. If needed, provide more details in a second paragraph, after a blank line.\\nThe one-line sentence should use the imperative form (\\\"Do this\\\", \\\"Return that\\\") instead of the third person (do not write \\\"Returns the length...\\\") when documenting functions. It should end with a period. If the meaning of a function cannot be summarized easily, splitting it into separate composable parts could be beneficial (this should not be taken as an absolute requirement for every single case though).\\nDo not repeat yourself.\\nSince the function name is given by the signature, there is no need to start the documentation with \\\"The function bar...\\\": go straight to the point. Similarly, if the signature specifies the types of the arguments, mentioning them in the description is redundant.\\nOnly provide an argument list when really necessary.\\nFor simple functions, it is often clearer to mention the role of the arguments directly in the description of the function's purpose. An argument list would only repeat information already provided elsewhere. However, providing an argument list can be a good idea for complex functions with many arguments (in particular keyword arguments). In that case, insert it after the general description of the function, under an # Arguments header, with one - bullet for each argument. The list should mention the types and default values (if any) of the arguments:\\n\\\"\\\"\\\"\\n...\\n# Arguments\\n- `n::Integer`: the number of elements to compute.\\n- `dim::Integer=1`: the dimensions along which to perform the computation.\\n...\\n\\\"\\\"\\\"\\nInclude any code examples in an # Examples section.\\nExamples should, whenever possible, be written as doctests. A doctest is a fenced code block (see Code blocks) starting with ```jldoctest and contains any number of julia> prompts together with inputs and expected outputs that mimic the Julia REPL.\\nFor example in the following docstring a variable a is defined and the expected result, as printed in a Julia REPL, appears afterwards:\\n\\\"\\\"\\\"\\nSome nice documentation here.\\n\\n# Examples\\n\\n```jldoctest\\njulia> a = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n```\\n\\\"\\\"\\\"\\nwarning: Warning\\nCalling rand and other RNG-related functions should be avoided in doctests since they will not produce consistent outputs during different Julia sessions.Operating system word size (Int32 or Int64) as well as path separator differences (/ or \\\\) will also affect the reproducibility of some doctests.Note that whitespace in your doctest is significant! The doctest will fail if you misalign the output of pretty-printing an array, for example.\\nYou can then run make -C doc doctest to run all the doctests in the Julia Manual, which will ensure that your example works.\\nExamples that are untestable should be written within fenced code blocks starting with ```julia so that they are highlighted correctly in the generated documentation.\\ntip: Tip\\nWherever possible examples should be self-contained and runnable so that readers are able to try them out without having to include any dependencies.\\nUse backticks to identify code and equations.\\nJulia identifiers and code excerpts should always appear between backticks ` to enable highlighting. Equations in the LaTeX syntax can be inserted between double backticks ``. Use Unicode characters rather than their LaTeX escape sequence, i.e. ``\u03b1 = 1`` rather than ``\\\\\\\\alpha = 1``.\\nPlace the starting and ending \\\"\\\"\\\" characters on lines by themselves.\\nThat is, write:\\n\\\"\\\"\\\"\\n...\\n\\n...\\n\\\"\\\"\\\"\\nf(x, y) = ...\\nrather than:\\n\\\"\\\"\\\"...\\n\\n...\\\"\\\"\\\"\\nf(x, y) = ...\\nThis makes it more clear where docstrings start and end.\\nRespect the line length limit used in the surrounding code.\\nDocstrings are edited using the same tools as code. Therefore, the same conventions should apply. It it advised to add line breaks after 92 characters.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Accessing-Documentation-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Accessing Documentation\",\n    \"category\": \"section\",\n    \"text\": \"Documentation can be accessed at the REPL or in IJulia by typing ? followed by the name of a function or macro, and pressing Enter. For example,?fft\\n?@time\\n?r\\\"\\\"will bring up docs for the relevant function, macro or string macro respectively. In Juno using Ctrl-J, Ctrl-D will bring up documentation for the object under the cursor.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Functions-and-Methods-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Functions & Methods\",\n    \"category\": \"section\",\n    \"text\": \"Functions in Julia may have multiple implementations, known as methods. While it's good practice for generic functions to have a single purpose, Julia allows methods to be documented individually if necessary. In general, only the most generic method should be documented, or even the function itself (i.e. the object created without any methods by function bar end). Specific methods should only be documented if their behaviour differs from the more generic ones. In any case, they should not repeat the information provided elsewhere. For example:\\\"\\\"\\\"\\n    *(x, y, z...)\\n\\nMultiplication operator. `x * y * z *...` calls this function with multiple\\narguments, i.e. `*(x, y, z...)`.\\n\\\"\\\"\\\"\\nfunction *(x, y, z...)\\n    # ... [implementation sold separately] ...\\nend\\n\\n\\\"\\\"\\\"\\n    *(x::AbstractString, y::AbstractString, z::AbstractString...)\\n\\nWhen applied to strings, concatenates them.\\n\\\"\\\"\\\"\\nfunction *(x::AbstractString, y::AbstractString, z::AbstractString...)\\n    # ... [insert secret sauce here] ...\\nend\\n\\nhelp?> *\\nsearch: * .*\\n\\n  *(x, y, z...)\\n\\n  Multiplication operator. x * y * z *... calls this function with multiple\\n  arguments, i.e. *(x,y,z...).\\n\\n  *(x::AbstractString, y::AbstractString, z::AbstractString...)\\n\\n  When applied to strings, concatenates them.When retrieving documentation for a generic function, the metadata for each method is concatenated with the catdoc function, which can of course be overridden for custom types.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Advanced-Usage-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Advanced Usage\",\n    \"category\": \"section\",\n    \"text\": \"The @doc macro associates its first argument with its second in a per-module dictionary called META. By default, documentation is expected to be written in Markdown, and the doc\\\"\\\" string macro simply creates an object representing the Markdown content. In the future it is likely to do more advanced things such as allowing for relative image or link paths.When used for retrieving documentation, the @doc macro (or equally, the doc function) will search all META dictionaries for metadata relevant to the given object and return it. The returned object (some Markdown content, for example) will by default display itself intelligently. This design also makes it easy to use the doc system in a programmatic way; for example, to re-use documentation between different versions of a function:@doc \\\"...\\\" foo!\\n@doc (@doc foo!) fooOr for use with Julia's metaprogramming functionality:for (f, op) in ((:add, :+), (:subtract, :-), (:multiply, :*), (:divide, :/))\\n    @eval begin\\n        $f(a,b) = $op(a,b)\\n    end\\nend\\n@doc \\\"`add(a,b)` adds `a` and `b` together\\\" add\\n@doc \\\"`subtract(a,b)` subtracts `b` from `a`\\\" subtractDocumentation written in non-toplevel blocks, such as begin, if, for, and let, is added to the documentation system as blocks are evaluated. For example:if VERSION > v\\\"0.5\\\"\\n    \\\"...\\\"\\n    f(x) = x\\nendwill add documentation to f(x) when the condition is true. Note that even if f(x) goes out of scope at the end of the block, its documentation will remain.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Dynamic-documentation-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Dynamic documentation\",\n    \"category\": \"section\",\n    \"text\": \"Sometimes the appropriate documentation for an instance of a type depends on the field values of that instance, rather than just on the type itself. In these cases, you can add a method to Docs.getdoc for your custom type that returns the documentation on a per-instance basis. For instance,struct MyType\\n    value::String\\nend\\n\\nDocs.getdoc(t::MyType) = \\\"Documentation for MyType with value $(t.value)\\\"\\n\\nx = MyType(\\\"x\\\")\\ny = MyType(\\\"y\\\")?x will display \\\"Documentation for MyType with value x\\\" while ?y will display \\\"Documentation for MyType with value y\\\".\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Syntax-Guide-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Syntax Guide\",\n    \"category\": \"section\",\n    \"text\": \"A comprehensive overview of all documentable Julia syntax.In the following examples \\\"...\\\" is used to illustrate an arbitrary docstring which may be one of the follow four variants and contain arbitrary text:\\\"...\\\"\\n\\ndoc\\\"...\\\"\\n\\n\\\"\\\"\\\"\\n...\\n\\\"\\\"\\\"\\n\\ndoc\\\"\\\"\\\"\\n...\\n\\\"\\\"\\\"@doc_str should only be used when the docstring contains $ or \\\\ characters that should not be parsed by Julia such as LaTeX syntax or Julia source code examples containing interpolation.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Functions-and-Methods-2\",\n    \"page\": \"Documentation\",\n    \"title\": \"Functions and Methods\",\n    \"category\": \"section\",\n    \"text\": \"\\\"...\\\"\\nfunction f end\\n\\n\\\"...\\\"\\nfAdds docstring \\\"...\\\" to Functionf. The first version is the preferred syntax, however both are equivalent.\\\"...\\\"\\nf(x) = x\\n\\n\\\"...\\\"\\nfunction f(x)\\n    x\\nend\\n\\n\\\"...\\\"\\nf(x)Adds docstring \\\"...\\\" to Methodf(::Any).\\\"...\\\"\\nf(x, y = 1) = x + yAdds docstring \\\"...\\\" to two Methods, namely f(::Any) and f(::Any, ::Any).\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Macros-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Macros\",\n    \"category\": \"section\",\n    \"text\": \"\\\"...\\\"\\nmacro m(x) endAdds docstring \\\"...\\\" to the @m(::Any) macro definition.\\\"...\\\"\\n:(@m)Adds docstring \\\"...\\\" to the macro named @m.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Types-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Types\",\n    \"category\": \"section\",\n    \"text\": \"\\\"...\\\"\\nabstract type T1 end\\n\\n\\\"...\\\"\\nmutable struct T2\\n    ...\\nend\\n\\n\\\"...\\\"\\nstruct T3\\n    ...\\nendAdds the docstring \\\"...\\\" to types T1, T2, and T3.\\\"...\\\"\\nstruct T\\n    \\\"x\\\"\\n    x\\n    \\\"y\\\"\\n    y\\nendAdds docstring \\\"...\\\" to type T, \\\"x\\\" to field T.x and \\\"y\\\" to field T.y. Also applicable to mutable struct types.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Modules-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Modules\",\n    \"category\": \"section\",\n    \"text\": \"\\\"...\\\"\\nmodule M end\\n\\nmodule M\\n\\n\\\"...\\\"\\nM\\n\\nendAdds docstring \\\"...\\\" to the ModuleM. Adding the docstring above the Module is the preferred syntax, however both are equivalent.\\\"...\\\"\\nbaremodule M\\n# ...\\nend\\n\\nbaremodule M\\n\\nimport Base: @doc\\n\\n\\\"...\\\"\\nf(x) = x\\n\\nendDocumenting a baremodule by placing a docstring above the expression automatically imports @doc into the module. These imports must be done manually when the module expression is not documented. Empty baremodules cannot be documented.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Global-Variables-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Global Variables\",\n    \"category\": \"section\",\n    \"text\": \"\\\"...\\\"\\nconst a = 1\\n\\n\\\"...\\\"\\nb = 2\\n\\n\\\"...\\\"\\nglobal c = 3Adds docstring \\\"...\\\" to the Bindings a, b, and c.Bindings are used to store a reference to a particular Symbol in a Module without storing the referenced value itself.note: Note\\nWhen a const definition is only used to define an alias of another definition, such as is the case with the function div and its alias \u00f7 in Base, do not document the alias and instead document the actual function.If the alias is documented and not the real definition then the docsystem (? mode) will not return the docstring attached to the alias when the real definition is searched for.For example you should write\\\"...\\\"\\nf(x) = x + 1\\nconst alias = frather thanf(x) = x + 1\\n\\\"...\\\"\\nconst alias = f\\\"...\\\"\\nsymAdds docstring \\\"...\\\" to the value associated with sym. Users should prefer documenting sym at it's definition.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Multiple-Objects-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Multiple Objects\",\n    \"category\": \"section\",\n    \"text\": \"\\\"...\\\"\\na, bAdds docstring \\\"...\\\" to a and b each of which should be a documentable expression. This syntax is equivalent to\\\"...\\\"\\na\\n\\n\\\"...\\\"\\nbAny number of expressions many be documented together in this way. This syntax can be useful when two functions are related, such as non-mutating and mutating versions f and f!.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Core.@__doc__\",\n    \"page\": \"Documentation\",\n    \"title\": \"Core.@__doc__\",\n    \"category\": \"Macro\",\n    \"text\": \"@__doc__(ex)\\n\\nLow-level macro used to mark expressions returned by a macro that should be documented. If more than one expression is marked then the same docstring is applied to each expression.\\n\\nmacro example(f)\\n    quote\\n        $(f)() = 0\\n        @__doc__ $(f)(x) = 1\\n        $(f)(x, y) = 2\\n    end |> esc\\nend\\n\\n@__doc__ has no effect when a macro that uses it is not documented.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Macro-generated-code-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Macro-generated code\",\n    \"category\": \"section\",\n    \"text\": \"\\\"...\\\"\\n@m expressionAdds docstring \\\"...\\\" to expression generated by expanding @m expression. This allows for expressions decorated with @inline, @noinline, @generated, or any other macro to be documented in the same way as undecorated expressions.Macro authors should take note that only macros that generate a single expression will automatically support docstrings. If a macro returns a block containing multiple subexpressions then the subexpression that should be documented must be marked using the @__doc__ macro.The @enum macro makes use of @__doc__ to allow for documenting Enums. Examining it's definition should serve as an example of how to use @__doc__ correctly.Core.@__doc__\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Markdown-syntax-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Markdown syntax\",\n    \"category\": \"section\",\n    \"text\": \"The following markdown syntax is supported in Julia.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Inline-elements-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Inline elements\",\n    \"category\": \"section\",\n    \"text\": \"Here \\\"inline\\\" refers to elements that can be found within blocks of text, i.e. paragraphs. These include the following elements.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Bold-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Bold\",\n    \"category\": \"section\",\n    \"text\": \"Surround words with two asterisks, **, to display the enclosed text in boldface.A paragraph containing a **bold** word.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Italics-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Italics\",\n    \"category\": \"section\",\n    \"text\": \"Surround words with one asterisk, *, to display the enclosed text in italics.A paragraph containing an *emphasised* word.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Literals-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Literals\",\n    \"category\": \"section\",\n    \"text\": \"Surround text that should be displayed exactly as written with single backticks, ` .A paragraph containing a `literal` word.Literals should be used when writing text that refers to names of variables, functions, or other parts of a Julia program.tip: Tip\\nTo include a backtick character within literal text use three backticks rather than one to enclose the text.A paragraph containing a ``` `backtick` character ```.By extension any odd number of backticks may be used to enclose a lesser number of backticks.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#\\\\LaTeX-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"LaTeX\",\n    \"category\": \"section\",\n    \"text\": \"Surround text that should be displayed as mathematics using LaTeX syntax with double backticks, `` .A paragraph containing some ``\\\\LaTeX`` markup.tip: Tip\\nAs with literals in the previous section, if literal backticks need to be written within double backticks use an even number greater than two. Note that if a single literal backtick needs to be included within LaTeX markup then two enclosing backticks is sufficient.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Links-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Links\",\n    \"category\": \"section\",\n    \"text\": \"Links to either external or internal addresses can be written using the following syntax, where the text enclosed in square brackets, [ ], is the name of the link and the text enclosed in parentheses, ( ), is the URL.A paragraph containing a link to [Julia](http://www.julialang.org).It's also possible to add cross-references to other documented functions/methods/variables within the Julia documentation itself. For example:\\\"\\\"\\\"\\n    eigvals!(A,[irange,][vl,][vu]) -> values\\n\\nSame as [`eigvals`](@ref), but saves space by overwriting the input `A`, instead of creating a copy.\\n\\\"\\\"\\\"This will create a link in the generated docs to the eigvals documentation (which has more information about what this function actually does). It's good to include cross references to mutating/non-mutating versions of a function, or to highlight a difference between two similar-seeming functions.note: Note\\nThe above cross referencing is not a Markdown feature, and relies on Documenter.jl, which is used to build base Julia's documentation.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Footnote-references-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Footnote references\",\n    \"category\": \"section\",\n    \"text\": \"Named and numbered footnote references can be written using the following syntax. A footnote name must be a single alphanumeric word containing no punctuation.A paragraph containing a numbered footnote [^1] and a named one [^named].note: Note\\nThe text associated with a footnote can be written anywhere within the same page as the footnote reference. The syntax used to define the footnote text is discussed in the Footnotes section below.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Toplevel-elements-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Toplevel elements\",\n    \"category\": \"section\",\n    \"text\": \"The following elements can be written either at the \\\"toplevel\\\" of a document or within another \\\"toplevel\\\" element.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Paragraphs-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Paragraphs\",\n    \"category\": \"section\",\n    \"text\": \"A paragraph is a block of plain text, possibly containing any number of inline elements defined in the Inline elements section above, with one or more blank lines above and below it.This is a paragraph.\\n\\nAnd this is *another* one containing some emphasised text.\\nA new line, but still part of the same paragraph.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Headers-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Headers\",\n    \"category\": \"section\",\n    \"text\": \"A document can be split up into different sections using headers. Headers use the following syntax:# Level One\\n## Level Two\\n### Level Three\\n#### Level Four\\n##### Level Five\\n###### Level SixA header line can contain any inline syntax in the same way as a paragraph can.tip: Tip\\nTry to avoid using too many levels of header within a single document. A heavily nested document may be indicative of a need to restructure it or split it into several pages covering separate topics.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Code-blocks-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Code blocks\",\n    \"category\": \"section\",\n    \"text\": \"Source code can be displayed as a literal block using an indent of four spaces as shown in the following example.This is a paragraph.\\n\\n    function func(x)\\n        # ...\\n    end\\n\\nAnother paragraph.Additionally, code blocks can be enclosed using triple backticks with an optional \\\"language\\\" to specify how a block of code should be highlighted.A code block without a \\\"language\\\":\\n\\n```\\nfunction func(x)\\n    # ...\\nend\\n```\\n\\nand another one with the \\\"language\\\" specified as `julia`:\\n\\n```julia\\nfunction func(x)\\n    # ...\\nend\\n```note: Note\\n\\\"Fenced\\\" code blocks, as shown in the last example, should be prefered over indented code blocks since there is no way to specify what language an indented code block is written in.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Block-quotes-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Block quotes\",\n    \"category\": \"section\",\n    \"text\": \"Text from external sources, such as quotations from books or websites, can be quoted using > characters prepended to each line of the quote as follows.Here's a quote:\\n\\n> Julia is a high-level, high-performance dynamic programming language for\\n> technical computing, with syntax that is familiar to users of other\\n> technical computing environments.Note that a single space must appear after the > character on each line. Quoted blocks may themselves contain other toplevel or inline elements.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Images-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Images\",\n    \"category\": \"section\",\n    \"text\": \"The syntax for images is similar to the link syntax mentioned above. Prepending a ! character to a link will display an image from the specified URL rather than a link to it.![alternative text](link/to/image.png)\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Lists-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Lists\",\n    \"category\": \"section\",\n    \"text\": \"Unordered lists can be written by prepending each item in a list with either *, +, or -.A list of items:\\n\\n  * item one\\n  * item two\\n  * item threeNote the two spaces before each * and the single space after each one.Lists can contain other nested toplevel elements such as lists, code blocks, or quoteblocks. A blank line should be left between each list item when including any toplevel elements within a list.Another list:\\n\\n  * item one\\n\\n  * item two\\n\\n    ```\\n    f(x) = x\\n    ```\\n\\n  * And a sublist:\\n\\n      + sub-item one\\n      + sub-item twonote: Note\\nThe contents of each item in the list must line up with the first line of the item. In the above example the fenced code block must be indented by four spaces to align with the i in item two.Ordered lists are written by replacing the \\\"bullet\\\" character, either *, +, or -, with a positive integer followed by either . or ).Two ordered lists:\\n\\n 1. item one\\n 2. item two\\n 3. item three\\n\\n 5) item five\\n 6) item six\\n 7) item sevenAn ordered list may start from a number other than one, as in the second list of the above example, where it is numbered from five. As with unordered lists, ordered lists can contain nested toplevel elements.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Display-equations-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Display equations\",\n    \"category\": \"section\",\n    \"text\": \"Large LaTeX equations that do not fit inline within a paragraph may be written as display equations using a fenced code block with the \\\"language\\\" math as in the example below.```math\\nf(a) = \\\\frac{1}{2\\\\pi}\\\\int_{0}^{2\\\\pi} (\\\\alpha+R\\\\cos(\\\\theta))d\\\\theta\\n```\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Footnotes-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Footnotes\",\n    \"category\": \"section\",\n    \"text\": \"This syntax is paired with the inline syntax for Footnote references. Make sure to read that section as well.Footnote text is defined using the following syntax, which is similar to footnote reference syntax, aside from the : character that is appended to the footnote label.[^1]: Numbered footnote text.\\n\\n[^note]:\\n\\n    Named footnote text containing several toplevel elements.\\n\\n      * item one\\n      * item two\\n      * item three\\n\\n    ```julia\\n    function func(x)\\n        # ...\\n    end\\n    ```note: Note\\nNo checks are done during parsing to make sure that all footnote references have matching footnotes.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Horizontal-rules-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Horizontal rules\",\n    \"category\": \"section\",\n    \"text\": \"The equivalent of an <hr> HTML tag can be written using the following syntax:Text above the line.\\n\\n---\\n\\nAnd text below the line.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Tables-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Tables\",\n    \"category\": \"section\",\n    \"text\": \"Basic tables can be written using the syntax described below. Note that markdown tables have limited features and cannot contain nested toplevel elements unlike other elements discussed above \u2013 only inline elements are allowed. Tables must always contain a header row with column names. Cells cannot span multiple rows or columns of the table.| Column One | Column Two | Column Three |\\n|:---------- | ---------- |:------------:|\\n| Row `1`    | Column `2` |              |\\n| *Row* 2    | **Row** 2  | Column ``3`` |note: Note\\nAs illustrated in the above example each column of | characters must be aligned vertically.A : character on either end of a column's header separator (the row containing - characters) specifies whether the row is left-aligned, right-aligned, or (when : appears on both ends) center-aligned. Providing no : characters will default to right-aligning the column.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Admonitions-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Admonitions\",\n    \"category\": \"section\",\n    \"text\": \"Specially formatted blocks with titles such as \\\"Notes\\\", \\\"Warning\\\", or \\\"Tips\\\" are known as admonitions and are used when some part of a document needs special attention. They can be defined using the following !!! syntax:!!! note\\n\\n    This is the content of the note.\\n\\n!!! warning \\\"Beware!\\\"\\n\\n    And this is another one.\\n\\n    This warning admonition has a custom title: `\\\"Beware!\\\"`.Admonitions, like most other toplevel elements, can contain other toplevel elements. When no title text, specified after the admonition type in double quotes, is included then the title used will be the type of the block, i.e. \\\"Note\\\" in the case of the note admonition.\"\n},\n\n{\n    \"location\": \"manual/documentation.html#Markdown-Syntax-Extensions-1\",\n    \"page\": \"Documentation\",\n    \"title\": \"Markdown Syntax Extensions\",\n    \"category\": \"section\",\n    \"text\": \"Julia's markdown supports interpolation in a very similar way to basic string literals, with the difference that it will store the object itself in the Markdown tree (as opposed to converting it to a string). When the Markdown content is rendered the usual show methods will be called, and these can be overridden as usual. This design allows the Markdown to be extended with arbitrarily complex features (such as references) without cluttering the basic syntax.In principle, the Markdown parser itself can also be arbitrarily extended by packages, or an entirely custom flavour of Markdown can be used, but this should generally be unnecessary.\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Metaprogramming\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Metaprogramming-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Metaprogramming\",\n    \"category\": \"section\",\n    \"text\": \"The strongest legacy of Lisp in the Julia language is its metaprogramming support. Like Lisp, Julia represents its own code as a data structure of the language itself. Since code is represented by objects that can be created and manipulated from within the language, it is possible for a program to transform and generate its own code. This allows sophisticated code generation without extra build steps, and also allows true Lisp-style macros operating at the level of abstract syntax trees. In contrast, preprocessor \\\"macro\\\" systems, like that of C and C++, perform textual manipulation and substitution before any actual parsing or interpretation occurs. Because all data types and code in Julia are represented by Julia data structures, powerful reflection capabilities are available to explore the internals of a program and its types just like any other data.\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Program-representation-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Program representation\",\n    \"category\": \"section\",\n    \"text\": \"Every Julia program starts life as a string:julia> prog = \\\"1 + 1\\\"\\n\\\"1 + 1\\\"What happens next?The next step is to parse each string into an object called an expression, represented by the Julia type Expr:julia> ex1 = parse(prog)\\n:(1 + 1)\\n\\njulia> typeof(ex1)\\nExprExpr objects contain two parts:a Symbol identifying the kind of expression. A symbol is an interned string identifier (more discussion below).julia> ex1.head\\n:callthe expression arguments, which may be symbols, other expressions, or literal values:julia> ex1.args\\n3-element Array{Any,1}:\\n  :+\\n 1\\n 1Expressions may also be constructed directly in prefix notation:julia> ex2 = Expr(:call, :+, 1, 1)\\n:(1 + 1)The two expressions constructed above \u2013 by parsing and by direct construction \u2013 are equivalent:julia> ex1 == ex2\\ntrueThe key point here is that Julia code is internally represented as a data structure that is accessible from the language itself.The dump() function provides indented and annotated display of Expr objects:julia> dump(ex2)\\nExpr\\n  head: Symbol call\\n  args: Array{Any}((3,))\\n    1: Symbol +\\n    2: Int64 1\\n    3: Int64 1\\n  typ: AnyExpr objects may also be nested:julia> ex3 = parse(\\\"(4 + 4) / 2\\\")\\n:((4 + 4) / 2)Another way to view expressions is with Meta.show_sexpr, which displays the S-expression form of a given Expr, which may look very familiar to users of Lisp. Here's an example illustrating the display on a nested Expr:julia> Meta.show_sexpr(ex3)\\n(:call, :/, (:call, :+, 4, 4), 2)\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Symbols-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Symbols\",\n    \"category\": \"section\",\n    \"text\": \"The : character has two syntactic purposes in Julia. The first form creates a Symbol, an interned string used as one building-block of expressions:julia> :foo\\n:foo\\n\\njulia> typeof(ans)\\nSymbolThe Symbol constructor takes any number of arguments and creates a new symbol by concatenating their string representations together:julia> :foo == Symbol(\\\"foo\\\")\\ntrue\\n\\njulia> Symbol(\\\"func\\\",10)\\n:func10\\n\\njulia> Symbol(:var,'_',\\\"sym\\\")\\n:var_symIn the context of an expression, symbols are used to indicate access to variables; when an expression is evaluated, a symbol is replaced with the value bound to that symbol in the appropriate scope.Sometimes extra parentheses around the argument to : are needed to avoid ambiguity in parsing.:julia> :(:)\\n:(:)\\n\\njulia> :(::)\\n:(::)\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Expressions-and-evaluation-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Expressions and evaluation\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Quoting-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Quoting\",\n    \"category\": \"section\",\n    \"text\": \"The second syntactic purpose of the : character is to create expression objects without using the explicit Expr constructor. This is referred to as quoting. The : character, followed by paired parentheses around a single statement of Julia code, produces an Expr object based on the enclosed code. Here is example of the short form used to quote an arithmetic expression:julia> ex = :(a+b*c+1)\\n:(a + b * c + 1)\\n\\njulia> typeof(ex)\\nExpr(to view the structure of this expression, try ex.head and ex.args, or use dump() as above)Note that equivalent expressions may be constructed using parse() or the direct Expr form:julia>      :(a + b*c + 1)  ==\\n       parse(\\\"a + b*c + 1\\\") ==\\n       Expr(:call, :+, :a, Expr(:call, :*, :b, :c), 1)\\ntrueExpressions provided by the parser generally only have symbols, other expressions, and literal values as their args, whereas expressions constructed by Julia code can have arbitrary run-time values without literal forms as args. In this specific example, + and a are symbols, *(b,c) is a subexpression, and 1 is a literal 64-bit signed integer.There is a second syntactic form of quoting for multiple expressions: blocks of code enclosed in quote ... end. Note that this form introduces QuoteNode elements to the expression tree, which must be considered when directly manipulating an expression tree generated from quote blocks. For other purposes, :( ... ) and quote .. end blocks are treated identically.julia> ex = quote\\n           x = 1\\n           y = 2\\n           x + y\\n       end\\nquote  # none, line 2:\\n    x = 1 # none, line 3:\\n    y = 2 # none, line 4:\\n    x + y\\nend\\n\\njulia> typeof(ex)\\nExpr\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Interpolation-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Interpolation\",\n    \"category\": \"section\",\n    \"text\": \"Direct construction of Expr objects with value arguments is powerful, but Expr constructors can be tedious compared to \\\"normal\\\" Julia syntax. As an alternative, Julia allows \\\"splicing\\\" or interpolation of literals or expressions into quoted expressions. Interpolation is indicated by the $ prefix.In this example, the literal value of a is interpolated:julia> a = 1;\\n\\njulia> ex = :($a + b)\\n:(1 + b)Interpolating into an unquoted expression is not supported and will cause a compile-time error:julia> $a + b\\nERROR: unsupported or misplaced expression $\\n ...In this example, the tuple (1,2,3) is interpolated as an expression into a conditional test:julia> ex = :(a in $:((1,2,3)) )\\n:(a in (1, 2, 3))Interpolating symbols into a nested expression requires enclosing each symbol in an enclosing quote block:julia> :( :a in $( :(:a + :b) ) )\\n                   ^^^^^^^^^^\\n                   quoted inner expressionThe use of $ for expression interpolation is intentionally reminiscent of string interpolation and command interpolation. Expression interpolation allows convenient, readable programmatic construction of complex Julia expressions.\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#[eval()](@ref)-and-effects-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"eval() and effects\",\n    \"category\": \"section\",\n    \"text\": \"Given an expression object, one can cause Julia to evaluate (execute) it at global scope using eval():julia> :(1 + 2)\\n:(1 + 2)\\n\\njulia> eval(ans)\\n3\\n\\njulia> ex = :(a + b)\\n:(a + b)\\n\\njulia> eval(ex)\\nERROR: UndefVarError: b not defined\\n[...]\\n\\njulia> a = 1; b = 2;\\n\\njulia> eval(ex)\\n3Every module has its own eval() function that evaluates expressions in its global scope. Expressions passed to eval() are not limited to returning values \u2013 they can also have side-effects that alter the state of the enclosing module's environment:julia> ex = :(x = 1)\\n:(x = 1)\\n\\njulia> x\\nERROR: UndefVarError: x not defined\\n\\njulia> eval(ex)\\n1\\n\\njulia> x\\n1Here, the evaluation of an expression object causes a value to be assigned to the global variable x.Since expressions are just Expr objects which can be constructed programmatically and then evaluated, it is possible to dynamically generate arbitrary code which can then be run using eval(). Here is a simple example:julia> a = 1;\\n\\njulia> ex = Expr(:call, :+, a, :b)\\n:(1 + b)\\n\\njulia> a = 0; b = 2;\\n\\njulia> eval(ex)\\n3The value of a is used to construct the expression ex which applies the + function to the value 1 and the variable b. Note the important distinction between the way a and b are used:The value of the variablea at expression construction time is used as an immediate value in the expression. Thus, the value of a when the expression is evaluated no longer matters: the value in the expression is already 1, independent of whatever the value of a might be.\\nOn the other hand, the symbol:b is used in the expression construction, so the value of the variable b at that time is irrelevant \u2013 :b is just a symbol and the variable b need not even be defined. At expression evaluation time, however, the value of the symbol :b is resolved by looking up the value of the variable b.\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Functions-on-Expressions-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Functions on Expressions\",\n    \"category\": \"section\",\n    \"text\": \"As hinted above, one extremely useful feature of Julia is the capability to generate and manipulate Julia code within Julia itself. We have already seen one example of a function returning Expr objects: the parse() function, which takes a string of Julia code and returns the corresponding Expr. A function can also take one or more Expr objects as arguments, and return another Expr. Here is a simple, motivating example:julia> function math_expr(op, op1, op2)\\n           expr = Expr(:call, op, op1, op2)\\n           return expr\\n       end\\nmath_expr (generic function with 1 method)\\n\\njulia>  ex = math_expr(:+, 1, Expr(:call, :*, 4, 5))\\n:(1 + 4 * 5)\\n\\njulia> eval(ex)\\n21As another example, here is a function that doubles any numeric argument, but leaves expressions alone:julia> function make_expr2(op, opr1, opr2)\\n           opr1f, opr2f = map(x -> isa(x, Number) ? 2*x : x, (opr1, opr2))\\n           retexpr = Expr(:call, op, opr1f, opr2f)\\n           return retexpr\\n       end\\nmake_expr2 (generic function with 1 method)\\n\\njulia> make_expr2(:+, 1, 2)\\n:(2 + 4)\\n\\njulia> ex = make_expr2(:+, 1, Expr(:call, :*, 5, 8))\\n:(2 + 5 * 8)\\n\\njulia> eval(ex)\\n42\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#man-macros-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Macros\",\n    \"category\": \"section\",\n    \"text\": \"Macros provide a method to include generated code in the final body of a program. A macro maps a tuple of arguments to a returned expression, and the resulting expression is compiled directly rather than requiring a runtime eval() call. Macro arguments may include expressions, literal values, and symbols.\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Basics-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Basics\",\n    \"category\": \"section\",\n    \"text\": \"Here is an extraordinarily simple macro:julia> macro sayhello()\\n           return :( println(\\\"Hello, world!\\\") )\\n       end\\n@sayhello (macro with 1 method)Macros have a dedicated character in Julia's syntax: the @ (at-sign), followed by the unique name declared in a macro NAME ... end block. In this example, the compiler will replace all instances of @sayhello with::( println(\\\"Hello, world!\\\") )When @sayhello is entered in the REPL, the expression executes immediately, thus we only see the evaluation result:julia> @sayhello()\\nHello, world!Now, consider a slightly more complex macro:julia> macro sayhello(name)\\n           return :( println(\\\"Hello, \\\", $name) )\\n       end\\n@sayhello (macro with 1 method)This macro takes one argument: name. When @sayhello is encountered, the quoted expression is expanded to interpolate the value of the argument into the final expression:julia> @sayhello(\\\"human\\\")\\nHello, humanWe can view the quoted return expression using the function macroexpand() (important note: this is an extremely useful tool for debugging macros):julia> ex = macroexpand( :(@sayhello(\\\"human\\\")) )\\n:((println)(\\\"Hello, \\\", \\\"human\\\"))\\n\\njulia> typeof(ex)\\nExprWe can see that the \\\"human\\\" literal has been interpolated into the expression.There also exists a macro @macroexpand that is perhaps a bit more convenient than the macroexpand function:julia> @macroexpand @sayhello \\\"human\\\"\\n:((println)(\\\"Hello, \\\", \\\"human\\\"))\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Hold-up:-why-macros?-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Hold up: why macros?\",\n    \"category\": \"section\",\n    \"text\": \"We have already seen a function f(::Expr...) -> Expr in a previous section. In fact, macroexpand() is also such a function. So, why do macros exist?Macros are necessary because they execute when code is parsed, therefore, macros allow the programmer to generate and include fragments of customized code before the full program is run. To illustrate the difference, consider the following example:julia> macro twostep(arg)\\n           println(\\\"I execute at parse time. The argument is: \\\", arg)\\n           return :(println(\\\"I execute at runtime. The argument is: \\\", $arg))\\n       end\\n@twostep (macro with 1 method)\\n\\njulia> ex = macroexpand( :(@twostep :(1, 2, 3)) );\\nI execute at parse time. The argument is: $(Expr(:quote, :((1, 2, 3))))The first call to println() is executed when macroexpand() is called. The resulting expression contains only the second println:julia> typeof(ex)\\nExpr\\n\\njulia> ex\\n:((println)(\\\"I execute at runtime. The argument is: \\\", $(Expr(:copyast, :($(QuoteNode(:((1, 2, 3)))))))))\\n\\njulia> eval(ex)\\nI execute at runtime. The argument is: (1, 2, 3)\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Macro-invocation-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Macro invocation\",\n    \"category\": \"section\",\n    \"text\": \"Macros are invoked with the following general syntax:@name expr1 expr2 ...\\n@name(expr1, expr2, ...)Note the distinguishing @ before the macro name and the lack of commas between the argument expressions in the first form, and the lack of whitespace after @name in the second form. The two styles should not be mixed. For example, the following syntax is different from the examples above; it passes the tuple (expr1, expr2, ...) as one argument to the macro:@name (expr1, expr2, ...)It is important to emphasize that macros receive their arguments as expressions, literals, or symbols. One way to explore macro arguments is to call the show() function within the macro body:julia> macro showarg(x)\\n           show(x)\\n           # ... remainder of macro, returning an expression\\n       end\\n@showarg (macro with 1 method)\\n\\njulia> @showarg(a)\\n:a\\n\\njulia> @showarg(1+1)\\n:(1 + 1)\\n\\njulia> @showarg(println(\\\"Yo!\\\"))\\n:(println(\\\"Yo!\\\"))\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Building-an-advanced-macro-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Building an advanced macro\",\n    \"category\": \"section\",\n    \"text\": \"Here is a simplified definition of Julia's @assert macro:julia> macro assert(ex)\\n           return :( $ex ? nothing : throw(AssertionError($(string(ex)))) )\\n       end\\n@assert (macro with 1 method)This macro can be used like this:julia> @assert 1 == 1.0\\n\\njulia> @assert 1 == 0\\nERROR: AssertionError: 1 == 0In place of the written syntax, the macro call is expanded at parse time to its returned result. This is equivalent to writing:1 == 1.0 ? nothing : throw(AssertionError(\\\"1 == 1.0\\\"))\\n1 == 0 ? nothing : throw(AssertionError(\\\"1 == 0\\\"))That is, in the first call, the expression :(1 == 1.0) is spliced into the test condition slot, while the value of string(:(1 == 1.0)) is spliced into the assertion message slot. The entire expression, thus constructed, is placed into the syntax tree where the @assert macro call occurs. Then at execution time, if the test expression evaluates to true, then nothing is returned, whereas if the test is false, an error is raised indicating the asserted expression that was false. Notice that it would not be possible to write this as a function, since only the value of the condition is available and it would be impossible to display the expression that computed it in the error message.The actual definition of @assert in the standard library is more complicated. It allows the user to optionally specify their own error message, instead of just printing the failed expression. Just like in functions with a variable number of arguments, this is specified with an ellipses following the last argument:julia> macro assert(ex, msgs...)\\n           msg_body = isempty(msgs) ? ex : msgs[1]\\n           msg = string(msg_body)\\n           return :($ex ? nothing : throw(AssertionError($msg)))\\n       end\\n@assert (macro with 1 method)Now @assert has two modes of operation, depending upon the number of arguments it receives! If there's only one argument, the tuple of expressions captured by msgs will be empty and it will behave the same as the simpler definition above. But now if the user specifies a second argument, it is printed in the message body instead of the failing expression. You can inspect the result of a macro expansion with the aptly named macroexpand() function:julia> macroexpand(:(@assert a == b))\\n:(if a == b\\n        nothing\\n    else\\n        (throw)((AssertionError)(\\\"a == b\\\"))\\n    end)\\n\\njulia> macroexpand(:(@assert a==b \\\"a should equal b!\\\"))\\n:(if a == b\\n        nothing\\n    else\\n        (throw)((AssertionError)(\\\"a should equal b!\\\"))\\n    end)There is yet another case that the actual @assert macro handles: what if, in addition to printing \\\"a should equal b,\\\" we wanted to print their values? One might naively try to use string interpolation in the custom message, e.g., @assert a==b \\\"a ($a) should equal b ($b)!\\\", but this won't work as expected with the above macro. Can you see why? Recall from string interpolation that an interpolated string is rewritten to a call to string(). Compare:julia> typeof(:(\\\"a should equal b\\\"))\\nString\\n\\njulia> typeof(:(\\\"a ($a) should equal b ($b)!\\\"))\\nExpr\\n\\njulia> dump(:(\\\"a ($a) should equal b ($b)!\\\"))\\nExpr\\n  head: Symbol string\\n  args: Array{Any}((5,))\\n    1: String \\\"a (\\\"\\n    2: Symbol a\\n    3: String \\\") should equal b (\\\"\\n    4: Symbol b\\n    5: String \\\")!\\\"\\n  typ: AnySo now instead of getting a plain string in msg_body, the macro is receiving a full expression that will need to be evaluated in order to display as expected. This can be spliced directly into the returned expression as an argument to the string() call; see error.jl for the complete implementation.The @assert macro makes great use of splicing into quoted expressions to simplify the manipulation of expressions inside the macro body.\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Hygiene-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Hygiene\",\n    \"category\": \"section\",\n    \"text\": \"An issue that arises in more complex macros is that of hygiene. In short, macros must ensure that the variables they introduce in their returned expressions do not accidentally clash with existing variables in the surrounding code they expand into. Conversely, the expressions that are passed into a macro as arguments are often expected to evaluate in the context of the surrounding code, interacting with and modifying the existing variables. Another concern arises from the fact that a macro may be called in a different module from where it was defined. In this case we need to ensure that all global variables are resolved to the correct module. Julia already has a major advantage over languages with textual macro expansion (like C) in that it only needs to consider the returned expression. All the other variables (such as msg in @assert above) follow the normal scoping block behavior.To demonstrate these issues, let us consider writing a @time macro that takes an expression as its argument, records the time, evaluates the expression, records the time again, prints the difference between the before and after times, and then has the value of the expression as its final value. The macro might look like this:macro time(ex)\\n    return quote\\n        local t0 = time()\\n        local val = $ex\\n        local t1 = time()\\n        println(\\\"elapsed time: \\\", t1-t0, \\\" seconds\\\")\\n        val\\n    end\\nendHere, we want t0, t1, and val to be private temporary variables, and we want time to refer to the time() function in the standard library, not to any time variable the user might have (the same applies to println). Imagine the problems that could occur if the user expression ex also contained assignments to a variable called t0, or defined its own time variable. We might get errors, or mysteriously incorrect behavior.Julia's macro expander solves these problems in the following way. First, variables within a macro result are classified as either local or global. A variable is considered local if it is assigned to (and not declared global), declared local, or used as a function argument name. Otherwise, it is considered global. Local variables are then renamed to be unique (using the gensym() function, which generates new symbols), and global variables are resolved within the macro definition environment. Therefore both of the above concerns are handled; the macro's locals will not conflict with any user variables, and time and println will refer to the standard library definitions.One problem remains however. Consider the following use of this macro:module MyModule\\nimport Base.@time\\n\\ntime() = ... # compute something\\n\\n@time time()\\nendHere the user expression ex is a call to time, but not the same time function that the macro uses. It clearly refers to MyModule.time. Therefore we must arrange for the code in ex to be resolved in the macro call environment. This is done by \\\"escaping\\\" the expression with esc():macro time(ex)\\n    ...\\n    local val = $(esc(ex))\\n    ...\\nendAn expression wrapped in this manner is left alone by the macro expander and simply pasted into the output verbatim. Therefore it will be resolved in the macro call environment.This escaping mechanism can be used to \\\"violate\\\" hygiene when necessary, in order to introduce or manipulate user variables. For example, the following macro sets x to zero in the call environment:julia> macro zerox()\\n           return esc(:(x = 0))\\n       end\\n@zerox (macro with 1 method)\\n\\njulia> function foo()\\n           x = 1\\n           @zerox\\n           return x # is zero\\n       end\\nfoo (generic function with 1 method)\\n\\njulia> foo()\\n0This kind of manipulation of variables should be used judiciously, but is occasionally quite handy.\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Code-Generation-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Code Generation\",\n    \"category\": \"section\",\n    \"text\": \"When a significant amount of repetitive boilerplate code is required, it is common to generate it programmatically to avoid redundancy. In most languages, this requires an extra build step, and a separate program to generate the repetitive code. In Julia, expression interpolation and eval() allow such code generation to take place in the normal course of program execution. For example, the following code defines a series of operators on three arguments in terms of their 2-argument forms:for op = (:+, :*, :&, :|, :$)\\n    eval(quote\\n        ($op)(a,b,c) = ($op)(($op)(a,b),c)\\n    end)\\nendIn this manner, Julia acts as its own preprocessor, and allows code generation from inside the language. The above code could be written slightly more tersely using the : prefix quoting form:for op = (:+, :*, :&, :|, :$)\\n    eval(:(($op)(a,b,c) = ($op)(($op)(a,b),c)))\\nendThis sort of in-language code generation, however, using the eval(quote(...)) pattern, is common enough that Julia comes with a macro to abbreviate this pattern:for op = (:+, :*, :&, :|, :$)\\n    @eval ($op)(a,b,c) = ($op)(($op)(a,b),c)\\nendThe @eval macro rewrites this call to be precisely equivalent to the above longer versions. For longer blocks of generated code, the expression argument given to @eval can be a block:@eval begin\\n    # multiple lines\\nend\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Non-Standard-String-Literals-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Non-Standard String Literals\",\n    \"category\": \"section\",\n    \"text\": \"Recall from Strings that string literals prefixed by an identifier are called non-standard string literals, and can have different semantics than un-prefixed string literals. For example:r\\\"^\\\\s*(?:#|$)\\\" produces a regular expression object rather than a string\\nb\\\"DATA\\\\xff\\\\u2200\\\" is a byte array literal for [68,65,84,65,255,226,136,128].Perhaps surprisingly, these behaviors are not hard-coded into the Julia parser or compiler. Instead, they are custom behaviors provided by a general mechanism that anyone can use: prefixed string literals are parsed as calls to specially-named macros. For example, the regular expression macro is just the following:macro r_str(p)\\n    Regex(p)\\nendThat's all. This macro says that the literal contents of the string literal r\\\"^\\\\s*(?:#|$)\\\" should be passed to the @r_str macro and the result of that expansion should be placed in the syntax tree where the string literal occurs. In other words, the expression r\\\"^\\\\s*(?:#|$)\\\" is equivalent to placing the following object directly into the syntax tree:Regex(\\\"^\\\\\\\\s*(?:#|\\\\$)\\\")Not only is the string literal form shorter and far more convenient, but it is also more efficient: since the regular expression is compiled and the Regex object is actually created when the code is compiled, the compilation occurs only once, rather than every time the code is executed. Consider if the regular expression occurs in a loop:for line = lines\\n    m = match(r\\\"^\\\\s*(?:#|$)\\\", line)\\n    if m === nothing\\n        # non-comment\\n    else\\n        # comment\\n    end\\nendSince the regular expression r\\\"^\\\\s*(?:#|$)\\\" is compiled and inserted into the syntax tree when this code is parsed, the expression is only compiled once instead of each time the loop is executed. In order to accomplish this without macros, one would have to write this loop like this:re = Regex(\\\"^\\\\\\\\s*(?:#|\\\\$)\\\")\\nfor line = lines\\n    m = match(re, line)\\n    if m === nothing\\n        # non-comment\\n    else\\n        # comment\\n    end\\nendMoreover, if the compiler could not determine that the regex object was constant over all loops, certain optimizations might not be possible, making this version still less efficient than the more convenient literal form above. Of course, there are still situations where the non-literal form is more convenient: if one needs to interpolate a variable into the regular expression, one must take this more verbose approach; in cases where the regular expression pattern itself is dynamic, potentially changing upon each loop iteration, a new regular expression object must be constructed on each iteration. In the vast majority of use cases, however, regular expressions are not constructed based on run-time data. In this majority of cases, the ability to write regular expressions as compile-time values is invaluable.Like non-standard string literals, non-standard command literals exist using a prefixed variant of the command literal syntax. The command literal custom`literal` is parsed as @custom_cmd \\\"literal\\\". Julia itself does not contain any non-standard command literals, but packages can make use of this syntax. Aside from the different syntax and the _cmd suffix instead of the _str suffix, non-standard command literals behave exactly like non-standard string literals.In the event that two modules provide non-standard string or command literals with the same name, it is possible to qualify the string or command literal with a module name. For instance, if both Foo and Bar provide non-standard string literal @x_str, then one can write Foo.x\\\"literal\\\" or Bar.x\\\"literal\\\" to disambiguate between the two.The mechanism for user-defined string literals is deeply, profoundly powerful. Not only are Julia's non-standard literals implemented using it, but also the command literal syntax (`echo \\\"Hello, $person\\\"`) is implemented with the following innocuous-looking macro:macro cmd(str)\\n    :(cmd_gen($(shell_parse(str)[1])))\\nendOf course, a large amount of complexity is hidden in the functions used in this macro definition, but they are just functions, written entirely in Julia. You can read their source and see precisely what they do \u2013 and all they do is construct expression objects to be inserted into your program's syntax tree.\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#Generated-functions-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"Generated functions\",\n    \"category\": \"section\",\n    \"text\": \"A very special macro is @generated, which allows you to define so-called generated functions. These have the capability to generate specialized code depending on the types of their arguments with more flexibility and/or less code than what can be achieved with multiple dispatch. While macros work with expressions at parsing-time and cannot access the types of their inputs, a generated function gets expanded at a time when the types of the arguments are known, but the function is not yet compiled.Instead of performing some calculation or action, a generated function declaration returns a quoted expression which then forms the body for the method corresponding to the types of the arguments. When called, the body expression is first evaluated and compiled, then the returned expression is compiled and run. To make this efficient, the result is often cached. And to make this inferable, only a limited subset of the language is usable. Thus, generated functions provide a flexible framework to move work from run-time to compile-time, at the expense of greater restrictions on the allowable constructs.When defining generated functions, there are four main differences to ordinary functions:You annotate the function declaration with the @generated macro. This adds some information to the AST that lets the compiler know that this is a generated function.\\nIn the body of the generated function you only have access to the types of the arguments \u2013 not their values \u2013 and any function that was defined before the definition of the generated function.\\nInstead of calculating something or performing some action, you return a quoted expression which, when evaluated, does what you want.\\nGenerated functions must not mutate or observe any non-constant global state (including, for example, IO, locks, non-local dictionaries, or using method_exists). This means they can only read global constants, and cannot have any side effects. In other words, they must be completely pure. Due to an implementation limitation, this also means that they currently cannot define a closure or untyped generator.It's easiest to illustrate this with an example. We can declare a generated function foo asjulia> @generated function foo(x)\\n           Core.println(x)\\n           return :(x * x)\\n       end\\nfoo (generic function with 1 method)Note that the body returns a quoted expression, namely :(x * x), rather than just the value of x * x.From the caller's perspective, they are very similar to regular functions; in fact, you don't have to know if you're calling a regular or generated function - the syntax and result of the call is just the same. Let's see how foo behaves:julia> x = foo(2); # note: output is from println() statement in the body\\nInt64\\n\\njulia> x           # now we print x\\n4\\n\\njulia> y = foo(\\\"bar\\\");\\nString\\n\\njulia> y\\n\\\"barbar\\\"So, we see that in the body of the generated function, x is the type of the passed argument, and the value returned by the generated function, is the result of evaluating the quoted expression we returned from the definition, now with the value of x.What happens if we evaluate foo again with a type that we have already used?julia> foo(4)\\n16Note that there is no printout of Int64. We can see that the body of the generated function was only executed once here, for the specific set of argument types, and the result was cached. After that, for this example, the expression returned from the generated function on the first invocation was re-used as the method body. However, the actual caching behavior is an implementation-defined performance optimization, so it is invalid to depend too closely on this behavior.The number of times a generated function is generated might be only once, but it might also be more often, or appear to not happen at all. As a consequence, you should never write a generated function with side effects - when, and how often, the side effects occur is undefined. (This is true for macros too - and just like for macros, the use of eval() in a generated function is a sign that you're doing something the wrong way.) However, unlike macros, the runtime system cannot correctly handle a call to eval(), so it is disallowed.It is also important to see how @generated functions interact with method redefinition. Following the principle that a correct @generated function must not observe any mutable state or cause any mutation of global state, we see the following behavior. Observe that the generated function cannot call any method that was not defined prior to the definition of the generated function itself.Initially f(x) has one definitionjulia> f(x) = \\\"original definition\\\";Define other operations that use f(x):julia> g(x) = f(x);\\n\\njulia> @generated gen1(x) = f(x);\\n\\njulia> @generated gen2(x) = :(f(x));We now add some new definitions for f(x):julia> f(x::Int) = \\\"definition for Int\\\";\\n\\njulia> f(x::Type{Int}) = \\\"definition for Type{Int}\\\";and compare how these results differ:julia> f(1)\\n\\\"definition for Int\\\"\\n\\njulia> g(1)\\n\\\"definition for Int\\\"\\n\\njulia> gen1(1)\\n\\\"original definition\\\"\\n\\njulia> gen2(1)\\n\\\"definition for Int\\\"Each method of a generated function has its own view of defined functions:julia> @generated gen1(x::Real) = f(x);\\n\\njulia> gen1(1)\\n\\\"definition for Type{Int}\\\"The example generated function foo above did not do anything a normal function foo(x) = x * x could not do (except printing the type on the first invocation, and incurring higher overhead). However, the power of a generated function lies in its ability to compute different quoted expressions depending on the types passed to it:julia> @generated function bar(x)\\n           if x <: Integer\\n               return :(x ^ 2)\\n           else\\n               return :(x)\\n           end\\n       end\\nbar (generic function with 1 method)\\n\\njulia> bar(4)\\n16\\n\\njulia> bar(\\\"baz\\\")\\n\\\"baz\\\"(although of course this contrived example would be more easily implemented using multiple dispatch...)Abusing this will corrupt the runtime system and cause undefined behavior:julia> @generated function baz(x)\\n           if rand() < .9\\n               return :(x^2)\\n           else\\n               return :(\\\"boo!\\\")\\n           end\\n       end\\nbaz (generic function with 1 method)Since the body of the generated function is non-deterministic, its behavior, and the behavior of all subsequent code is undefined.Don't copy these examples!These examples are hopefully helpful to illustrate how generated functions work, both in the definition end and at the call site; however, don't copy them, for the following reasons:the foo function has side-effects (the call to Core.println), and it is undefined exactly when, how often or how many times these side-effects will occur\\nthe bar function solves a problem that is better solved with multiple dispatch - defining bar(x) = x and bar(x::Integer) = x ^ 2 will do the same thing, but it is both simpler and faster.\\nthe baz function is pathologically insaneNote that the set of operations that should not be attempted in a generated function is unbounded, and the runtime system can currently only detect a subset of the invalid operations. There are many other operations that will simply corrupt the runtime system without notification, usually in subtle ways not obviously connected to the bad definition. Because the function generator is run during inference, it must respect all of the limitations of that code.Some operations that should not be attempted include:Caching of native pointers.\\nInteracting with the contents or methods of Core.Inference in any way.\\nObserving any mutable state.\\nInference on the generated function may be run at any time, including while your code is attempting to observe or mutate this state.\\nTaking any locks: C code you call out to may use locks internally, (for example, it is not problematic to call malloc, even though most implementations require locks internally) but don't attempt to hold or acquire any while executing Julia code.\\nCalling any function that is defined after the body of the generated function. This condition is relaxed for incrementally-loaded precompiled modules to allow calling any function in the module.Alright, now that we have a better understanding of how generated functions work, let's use them to build some more advanced (and valid) functionality...\"\n},\n\n{\n    \"location\": \"manual/metaprogramming.html#An-advanced-example-1\",\n    \"page\": \"Metaprogramming\",\n    \"title\": \"An advanced example\",\n    \"category\": \"section\",\n    \"text\": \"Julia's base library has a sub2ind() function to calculate a linear index into an n-dimensional array, based on a set of n multilinear indices - in other words, to calculate the index i that can be used to index into an array A using A[i], instead of A[x,y,z,...]. One possible implementation is the following:julia> function sub2ind_loop(dims::NTuple{N}, I::Integer...) where N\\n           ind = I[N] - 1\\n           for i = N-1:-1:1\\n               ind = I[i]-1 + dims[i]*ind\\n           end\\n           return ind + 1\\n       end\\nsub2ind_loop (generic function with 1 method)\\n\\njulia> sub2ind_loop((3, 5), 1, 2)\\n4The same thing can be done using recursion:julia> sub2ind_rec(dims::Tuple{}) = 1;\\n\\njulia> sub2ind_rec(dims::Tuple{}, i1::Integer, I::Integer...) =\\n           i1 == 1 ? sub2ind_rec(dims, I...) : throw(BoundsError());\\n\\njulia> sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer) = i1;\\n\\njulia> sub2ind_rec(dims::Tuple{Integer, Vararg{Integer}}, i1::Integer, I::Integer...) =\\n           i1 + dims[1] * (sub2ind_rec(Base.tail(dims), I...) - 1);\\n\\njulia> sub2ind_rec((3, 5), 1, 2)\\n4Both these implementations, although different, do essentially the same thing: a runtime loop over the dimensions of the array, collecting the offset in each dimension into the final index.However, all the information we need for the loop is embedded in the type information of the arguments. Thus, we can utilize generated functions to move the iteration to compile-time; in compiler parlance, we use generated functions to manually unroll the loop. The body becomes almost identical, but instead of calculating the linear index, we build up an expression that calculates the index:julia> @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N\\n           ex = :(I[$N] - 1)\\n           for i = (N - 1):-1:1\\n               ex = :(I[$i] - 1 + dims[$i] * $ex)\\n           end\\n           return :($ex + 1)\\n       end\\nsub2ind_gen (generic function with 1 method)\\n\\njulia> sub2ind_gen((3, 5), 1, 2)\\n4What code will this generate?An easy way to find out is to extract the body into another (regular) function:julia> @generated function sub2ind_gen(dims::NTuple{N}, I::Integer...) where N\\n           return sub2ind_gen_impl(dims, I...)\\n       end\\nsub2ind_gen (generic function with 1 method)\\n\\njulia> function sub2ind_gen_impl(dims::Type{T}, I...) where T <: NTuple{N,Any} where N\\n           length(I) == N || return :(error(\\\"partial indexing is unsupported\\\"))\\n           ex = :(I[$N] - 1)\\n           for i = (N - 1):-1:1\\n               ex = :(I[$i] - 1 + dims[$i] * $ex)\\n           end\\n           return :($ex + 1)\\n       end\\nsub2ind_gen_impl (generic function with 1 method)We can now execute sub2ind_gen_impl and examine the expression it returns:julia> sub2ind_gen_impl(Tuple{Int,Int}, Int, Int)\\n:(((I[1] - 1) + dims[1] * (I[2] - 1)) + 1)So, the method body that will be used here doesn't include a loop at all - just indexing into the two tuples, multiplication and addition/subtraction. All the looping is performed compile-time, and we avoid looping during execution entirely. Thus, we only loop once per type, in this case once per N (except in edge cases where the function is generated more than once - see disclaimer above).\"\n},\n\n{\n    \"location\": \"manual/arrays.html#\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Multi-dimensional Arrays\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/arrays.html#man-multi-dim-arrays-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Multi-dimensional Arrays\",\n    \"category\": \"section\",\n    \"text\": \"Julia, like most technical computing languages, provides a first-class array implementation. Most technical computing languages pay a lot of attention to their array implementation at the expense of other containers. Julia does not treat arrays in any special way. The array library is implemented almost completely in Julia itself, and derives its performance from the compiler, just like any other code written in Julia. As such, it's also possible to define custom array types by inheriting from AbstractArray. See the manual section on the AbstractArray interface for more details on implementing a custom array type.An array is a collection of objects stored in a multi-dimensional grid. In the most general case, an array may contain objects of type Any. For most computational purposes, arrays should contain objects of a more specific type, such as Float64 or Int32.In general, unlike many other technical computing languages, Julia does not expect programs to be written in a vectorized style for performance. Julia's compiler uses type inference and generates optimized code for scalar array indexing, allowing programs to be written in a style that is convenient and readable, without sacrificing performance, and using less memory at times.In Julia, all arguments to functions are passed by reference. Some technical computing languages pass arrays by value, and this is convenient in many cases. In Julia, modifications made to input arrays within a function will be visible in the parent function. The entire Julia array library ensures that inputs are not modified by library functions. User code, if it needs to exhibit similar behavior, should take care to create a copy of inputs that it may modify.\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Arrays-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Arrays\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Basic-Functions-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Basic Functions\",\n    \"category\": \"section\",\n    \"text\": \"Function Description\\neltype(A) the type of the elements contained in A\\nlength(A) the number of elements in A\\nndims(A) the number of dimensions of A\\nsize(A) a tuple containing the dimensions of A\\nsize(A,n) the size of A along dimension n\\nindices(A) a tuple containing the valid indices of A\\nindices(A,n) a range expressing the valid indices along dimension n\\neachindex(A) an efficient iterator for visiting each position in A\\nstride(A,k) the stride (linear index distance between adjacent elements) along dimension k\\nstrides(A) a tuple of the strides in each dimension\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Construction-and-Initialization-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Construction and Initialization\",\n    \"category\": \"section\",\n    \"text\": \"Many functions for constructing and initializing arrays are provided. In the following list of such functions, calls with a dims... argument can either take a single tuple of dimension sizes or a series of dimension sizes passed as a variable number of arguments. Most of these functions also accept a first input T, which is the element type of the array. If the type T is omitted it will default to Float64.Function Description\\nArray{T}(dims...) an uninitialized dense Array\\nzeros(T, dims...) an Array of all zeros\\nzeros(A) an array of all zeros with the same type, element type and shape as A\\nones(T, dims...) an Array of all ones\\nones(A) an array of all ones with the same type, element type and shape as A\\ntrues(dims...) a BitArray with all values true\\ntrues(A) a BitArray with all values true and the same shape as A\\nfalses(dims...) a BitArray with all values false\\nfalses(A) a BitArray with all values false and the same shape as A\\nreshape(A, dims...) an array containing the same data as A, but with different dimensions\\ncopy(A) copy A\\ndeepcopy(A) copy A, recursively copying its elements\\nsimilar(A, T, dims...) an uninitialized array of the same type as A (dense, sparse, etc.), but with the specified element type and dimensions. The second and third arguments are both optional, defaulting to the element type and dimensions of A if omitted.\\nreinterpret(T, A) an array with the same binary data as A, but with element type T\\nrand(T, dims...) an Array with random, iid [1] and uniformly distributed values in the half-open interval 0 1)\\nrandn(T, dims...) an Array with random, iid and standard normally distributed values\\neye(T, n) n-by-n identity matrix\\neye(T, m, n) m-by-n identity matrix\\nlinspace(start, stop, n) range of n linearly spaced elements from start to stop\\nfill!(A, x) fill the array A with the value x\\nfill(x, dims...) an Array filled with the value x[1]: iid, independently and identically distributed.The syntax [A, B, C, ...] constructs a 1-d array (vector) of its arguments. If all arguments have a common promotion type then they get converted to that type using convert().\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Concatenation-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Concatenation\",\n    \"category\": \"section\",\n    \"text\": \"Arrays can be constructed and also concatenated using the following functions:Function Description\\ncat(k, A...) concatenate input n-d arrays along the dimension k\\nvcat(A...) shorthand for cat(1, A...)\\nhcat(A...) shorthand for cat(2, A...)Scalar values passed to these functions are treated as 1-element arrays.The concatenation functions are used so often that they have special syntax:Expression Calls\\n[A; B; C; ...] vcat()\\n[A B C ...] hcat()\\n[A B; C D; ...] hvcat()hvcat() concatenates in both dimension 1 (with semicolons) and dimension 2 (with spaces).\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Typed-array-initializers-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Typed array initializers\",\n    \"category\": \"section\",\n    \"text\": \"An array with a specific element type can be constructed using the syntax T[A, B, C, ...]. This will construct a 1-d array with element type T, initialized to contain elements A, B, C, etc. For example Any[x, y, z] constructs a heterogeneous array that can contain any values.Concatenation syntax can similarly be prefixed with a type to specify the element type of the result.julia> [[1 2] [3 4]]\\n1\u00d74 Array{Int64,2}:\\n 1  2  3  4\\n\\njulia> Int8[[1 2] [3 4]]\\n1\u00d74 Array{Int8,2}:\\n 1  2  3  4\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Comprehensions-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Comprehensions\",\n    \"category\": \"section\",\n    \"text\": \"Comprehensions provide a general and powerful way to construct arrays. Comprehension syntax is similar to set construction notation in mathematics:A = [ F(x,y,...) for x=rx, y=ry, ... ]The meaning of this form is that F(x,y,...) is evaluated with the variables x, y, etc. taking on each value in their given list of values. Values can be specified as any iterable object, but will commonly be ranges like 1:n or 2:(n-1), or explicit arrays of values like [1.2, 3.4, 5.7]. The result is an N-d dense array with dimensions that are the concatenation of the dimensions of the variable ranges rx, ry, etc. and each F(x,y,...) evaluation returns a scalar.The following example computes a weighted average of the current element and its left and right neighbor along a 1-d grid. :julia> x = rand(8)\\n8-element Array{Float64,1}:\\n 0.843025\\n 0.869052\\n 0.365105\\n 0.699456\\n 0.977653\\n 0.994953\\n 0.41084\\n 0.809411\\n\\njulia> [ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]\\n6-element Array{Float64,1}:\\n 0.736559\\n 0.57468\\n 0.685417\\n 0.912429\\n 0.8446\\n 0.656511The resulting array type depends on the types of the computed elements. In order to control the type explicitly, a type can be prepended to the comprehension. For example, we could have requested the result in single precision by writing:Float32[ 0.25*x[i-1] + 0.5*x[i] + 0.25*x[i+1] for i=2:length(x)-1 ]\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Generator-Expressions-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Generator Expressions\",\n    \"category\": \"section\",\n    \"text\": \"Comprehensions can also be written without the enclosing square brackets, producing an object known as a generator. This object can be iterated to produce values on demand, instead of allocating an array and storing them in advance (see Iteration). For example, the following expression sums a series without allocating memory:julia> sum(1/n^2 for n=1:1000)\\n1.6439345666815615When writing a generator expression with multiple dimensions inside an argument list, parentheses are needed to separate the generator from subsequent arguments:julia> map(tuple, 1/(i+j) for i=1:2, j=1:2, [1:4;])\\nERROR: syntax: invalid iteration specificationAll comma-separated expressions after for are interpreted as ranges. Adding parentheses lets us add a third argument to map:julia> map(tuple, (1/(i+j) for i=1:2, j=1:2), [1 3; 2 4])\\n2\u00d72 Array{Tuple{Float64,Int64},2}:\\n (0.5, 1)       (0.333333, 3)\\n (0.333333, 2)  (0.25, 4)Ranges in generators and comprehensions can depend on previous ranges by writing multiple for keywords:julia> [(i,j) for i=1:3 for j=1:i]\\n6-element Array{Tuple{Int64,Int64},1}:\\n (1, 1)\\n (2, 1)\\n (2, 2)\\n (3, 1)\\n (3, 2)\\n (3, 3)In such cases, the result is always 1-d.Generated values can be filtered using the if keyword:julia> [(i,j) for i=1:3 for j=1:i if i+j == 4]\\n2-element Array{Tuple{Int64,Int64},1}:\\n (2, 2)\\n (3, 1)\"\n},\n\n{\n    \"location\": \"manual/arrays.html#man-array-indexing-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Indexing\",\n    \"category\": \"section\",\n    \"text\": \"The general syntax for indexing into an n-dimensional array A is:X = A[I_1, I_2, ..., I_n]where each I_k may be a scalar integer, an array of integers, or any other supported index. This includes Colon (:) to select all indices within the entire dimension, ranges of the form a:c or a:b:c to select contiguous or strided subsections, and arrays of booleans to select elements at their true indices.If all the indices are scalars, then the result X is a single element from the array A. Otherwise, X is an array with the same number of dimensions as the sum of the dimensionalities of all the indices.If all indices are vectors, for example, then the shape of X would be (length(I_1), length(I_2), ..., length(I_n)), with location (i_1, i_2, ..., i_n) of X containing the value A[I_1[i_1], I_2[i_2], ..., I_n[i_n]]. If I_1 is changed to a two-dimensional matrix, then X becomes an n+1-dimensional array of shape (size(I_1, 1), size(I_1, 2), length(I_2), ..., length(I_n)). The matrix adds a dimension. The location (i_1, i_2, i_3, ..., i_{n+1}) contains the value at A[I_1[i_1, i_2], I_2[i_3], ..., I_n[i_{n+1}]]. All dimensions indexed with scalars are dropped. For example, the result of A[2, I, 3] is an array with size size(I). Its ith element is populated by A[2, I[i], 3].As a special part of this syntax, the end keyword may be used to represent the last index of each dimension within the indexing brackets, as determined by the size of the innermost array being indexed. Indexing syntax without the end keyword is equivalent to a call to getindex:X = getindex(A, I_1, I_2, ..., I_n)Example:julia> x = reshape(1:16, 4, 4)\\n4\u00d74 Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}:\\n 1  5   9  13\\n 2  6  10  14\\n 3  7  11  15\\n 4  8  12  16\\n\\njulia> x[2:3, 2:end-1]\\n2\u00d72 Array{Int64,2}:\\n 6  10\\n 7  11\\n\\njulia> x[1, [2 3; 4 1]]\\n2\u00d72 Array{Int64,2}:\\n  5  9\\n 13  1Empty ranges of the form n:n-1 are sometimes used to indicate the inter-index location between n-1 and n. For example, the searchsorted() function uses this convention to indicate the insertion point of a value not found in a sorted array:julia> a = [1,2,5,6,7];\\n\\njulia> searchsorted(a, 3)\\n3:2\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Assignment-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Assignment\",\n    \"category\": \"section\",\n    \"text\": \"The general syntax for assigning values in an n-dimensional array A is:A[I_1, I_2, ..., I_n] = Xwhere each I_k may be a scalar integer, an array of integers, or any other supported index. This includes Colon (:) to select all indices within the entire dimension, ranges of the form a:c or a:b:c to select contiguous or strided subsections, and arrays of booleans to select elements at their true indices.If X is an array, it must have the same number of elements as the product of the lengths of the indices: prod(length(I_1), length(I_2), ..., length(I_n)). The value in location I_1[i_1], I_2[i_2], ..., I_n[i_n] of A is overwritten with the value X[i_1, i_2, ..., i_n]. If X is not an array, its value is written to all referenced locations of A.Just as in Indexing, the end keyword may be used to represent the last index of each dimension within the indexing brackets, as determined by the size of the array being assigned into. Indexed assignment syntax without the end keyword is equivalent to a call to setindex!():setindex!(A, X, I_1, I_2, ..., I_n)Example:julia> x = collect(reshape(1:9, 3, 3))\\n3\u00d73 Array{Int64,2}:\\n 1  4  7\\n 2  5  8\\n 3  6  9\\n\\njulia> x[1:2, 2:3] = -1\\n-1\\n\\njulia> x\\n3\u00d73 Array{Int64,2}:\\n 1  -1  -1\\n 2  -1  -1\\n 3   6   9\"\n},\n\n{\n    \"location\": \"manual/arrays.html#man-supported-index-types-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Supported index types\",\n    \"category\": \"section\",\n    \"text\": \"In the expression A[I_1, I_2, ..., I_n], each I_k may be a scalar index, an array of scalar indices, or an object that represents an array of scalar indices and can be converted to such by to_indices:A scalar index. By default this includes:\\nNon-boolean integers\\nCartesianIndex{N}s, which behave like an N-tuple of integers spanning multiple dimensions (see below for more details)\\nAn array of scalar indices. This includes:\\nVectors and multidimensional arrays of integers\\nEmpty arrays like [], which select no elements\\nRanges of the form a:c or a:b:c, which select contiguous or strided subsections from a to c (inclusive)\\nAny custom array of scalar indices that is a subtype of AbstractArray\\nArrays of CartesianIndex{N} (see below for more details)\\nAn object that represents an array of scalar indices and can be converted to such by to_indices. By default this includes:\\nColon() (:), which represents all indices within an entire dimension or across the entire array\\nArrays of booleans, which select elements at their true indices (see below for more details)\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Cartesian-indices-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Cartesian indices\",\n    \"category\": \"section\",\n    \"text\": \"The special CartesianIndex{N} object represents a scalar index that behaves like an N-tuple of integers spanning multiple dimensions.  For example:julia> A = reshape(1:32, 4, 4, 2);\\n\\njulia> A[3, 2, 1]\\n7\\n\\njulia> A[CartesianIndex(3, 2, 1)] == A[3, 2, 1] == 7\\ntrueConsidered alone, this may seem relatively trivial; CartesianIndex simply gathers multiple integers together into one object that represents a single multidimensional index. When combined with other indexing forms and iterators that yield CartesianIndexes, however, this can lead directly to very elegant and efficient code. See Iteration below, and for some more advanced examples, see this blog post on multidimensional algorithms and iteration.Arrays of CartesianIndex{N} are also supported. They represent a collection of scalar indices that each span N dimensions, enabling a form of indexing that is sometimes referred to as pointwise indexing. For example, it enables accessing the diagonal elements from the first \\\"page\\\" of A from above:julia> page = A[:,:,1]\\n4\u00d74 Array{Int64,2}:\\n 1  5   9  13\\n 2  6  10  14\\n 3  7  11  15\\n 4  8  12  16\\n\\njulia> page[[CartesianIndex(1,1),\\n             CartesianIndex(2,2),\\n             CartesianIndex(3,3),\\n             CartesianIndex(4,4)]]\\n4-element Array{Int64,1}:\\n  1\\n  6\\n 11\\n 16This can be expressed much more simply with dot broadcasting and by combining it with a normal integer index (instead of extracting the first page from A as a separate step). It can even be combined with a : to extract both diagonals from the two pages at the same time:julia> A[CartesianIndex.(indices(A, 1), indices(A, 2)), 1]\\n4-element Array{Int64,1}:\\n  1\\n  6\\n 11\\n 16\\n\\njulia> A[CartesianIndex.(indices(A, 1), indices(A, 2)), :]\\n4\u00d72 Array{Int64,2}:\\n  1  17\\n  6  22\\n 11  27\\n 16  32warning: Warning\\nCartesianIndex and arrays of CartesianIndex are not compatible with the end keyword to represent the last index of a dimension. Do not use end in indexing expressions that may contain either CartesianIndex or arrays thereof.\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Logical-indexing-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Logical indexing\",\n    \"category\": \"section\",\n    \"text\": \"Often referred to as logical indexing or indexing with a logical mask, indexing by a boolean array selects elements at the indices where its values are true. Indexing by a boolean vector B is effectively the same as indexing by the vector of integers that is returned by find(B). Similarly, indexing by a N-dimensional boolean array is effectively the same as indexing by the vector of CartesianIndex{N}s where its values are true. A logical index must be a vector of the same length as the dimension it indexes into, or it must be the only index provided and match the size and dimensionality of the array it indexes into. It is generally more efficient to use boolean arrays as indices directly instead of first calling find().julia> x = reshape(1:16, 4, 4)\\n4\u00d74 Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}:\\n 1  5   9  13\\n 2  6  10  14\\n 3  7  11  15\\n 4  8  12  16\\n\\njulia> x[[false, true, true, false], :]\\n2\u00d74 Array{Int64,2}:\\n 2  6  10  14\\n 3  7  11  15\\n\\njulia> mask = map(ispow2, x)\\n4\u00d74 Array{Bool,2}:\\n  true  false  false  false\\n  true  false  false  false\\n false  false  false  false\\n  true   true  false   true\\n\\njulia> x[mask]\\n5-element Array{Int64,1}:\\n  1\\n  2\\n  4\\n  8\\n 16\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Iteration-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Iteration\",\n    \"category\": \"section\",\n    \"text\": \"The recommended ways to iterate over a whole array arefor a in A\\n    # Do something with the element a\\nend\\n\\nfor i in eachindex(A)\\n    # Do something with i and/or A[i]\\nendThe first construct is used when you need the value, but not index, of each element. In the second construct, i will be an Int if A is an array type with fast linear indexing; otherwise, it will be a CartesianIndex:julia> A = rand(4,3);\\n\\njulia> B = view(A, 1:3, 2:3);\\n\\njulia> for i in eachindex(B)\\n           @show i\\n       end\\ni = CartesianIndex{2}((1, 1))\\ni = CartesianIndex{2}((2, 1))\\ni = CartesianIndex{2}((3, 1))\\ni = CartesianIndex{2}((1, 2))\\ni = CartesianIndex{2}((2, 2))\\ni = CartesianIndex{2}((3, 2))In contrast with for i = 1:length(A), iterating with eachindex provides an efficient way to iterate over any array type.\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Array-traits-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Array traits\",\n    \"category\": \"section\",\n    \"text\": \"If you write a custom AbstractArray type, you can specify that it has fast linear indexing usingBase.IndexStyle(::Type{<:MyArray}) = IndexLinear()This setting will cause eachindex iteration over a MyArray to use integers. If you don't specify this trait, the default value IndexCartesian() is used.\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Array-and-Vectorized-Operators-and-Functions-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Array and Vectorized Operators and Functions\",\n    \"category\": \"section\",\n    \"text\": \"The following operators are supported for arrays:Unary arithmetic \u2013 -, +\\nBinary arithmetic \u2013 -, +, *, /, \\\\, ^\\nComparison \u2013 ==, !=, \u2248 (isapprox), \u2249Most of the binary arithmetic operators listed above also operate elementwise when one argument is scalar: -, +, and * when either argument is scalar, and / and \\\\ when the denominator is scalar. For example, [1, 2] + 3 == [4, 5] and [6, 4] / 2 == [3, 2].Additionally, to enable convenient vectorization of mathematical and other operations, Julia provides the dot syntax f.(args...), e.g. sin.(x) or min.(x,y), for elementwise operations over arrays or mixtures of arrays and scalars (a Broadcasting operation); these have the additional advantage of \\\"fusing\\\" into a single loop when combined with other dot calls, e.g. sin.(cos.(x)).Also, every binary operator supports a dot version that can be applied to arrays (and combinations of arrays and scalars) in such fused broadcasting operations, e.g. z .== sin.(x .* y).Note that comparisons such as == operate on whole arrays, giving a single boolean answer. Use dot operators like .== for elementwise comparisons. (For comparison operations like <, only the elementwise .< version is applicable to arrays.)Also notice the difference between max.(a,b), which broadcasts max() elementwise over a and b, and maximum(a), which finds the largest value within a. The same relationship holds for min.(a,b) and minimum(a).\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Broadcasting-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Broadcasting\",\n    \"category\": \"section\",\n    \"text\": \"It is sometimes useful to perform element-by-element binary operations on arrays of different sizes, such as adding a vector to each column of a matrix. An inefficient way to do this would be to replicate the vector to the size of the matrix:julia> a = rand(2,1); A = rand(2,3);\\n\\njulia> repmat(a,1,3)+A\\n2\u00d73 Array{Float64,2}:\\n 1.20813  1.82068  1.25387\\n 1.56851  1.86401  1.67846This is wasteful when dimensions get large, so Julia offers broadcast(), which expands singleton dimensions in array arguments to match the corresponding dimension in the other array without using extra memory, and applies the given function elementwise:julia> broadcast(+, a, A)\\n2\u00d73 Array{Float64,2}:\\n 1.20813  1.82068  1.25387\\n 1.56851  1.86401  1.67846\\n\\njulia> b = rand(1,2)\\n1\u00d72 Array{Float64,2}:\\n 0.867535  0.00457906\\n\\njulia> broadcast(+, a, b)\\n2\u00d72 Array{Float64,2}:\\n 1.71056  0.847604\\n 1.73659  0.873631Dotted operators such as .+ and .* are equivalent to broadcast calls (except that they fuse, as described below). There is also a broadcast!() function to specify an explicit destination (which can also be accessed in a fusing fashion by .= assignment), and functions broadcast_getindex() and broadcast_setindex!() that broadcast the indices before indexing. Moreover, f.(args...) is equivalent to broadcast(f, args...), providing a convenient syntax to broadcast any function (dot syntax). Nested \\\"dot calls\\\" f.(...) (including calls to .+ etcetera) automatically fuse into a single broadcast call.Additionally, broadcast() is not limited to arrays (see the function documentation), it also handles tuples and treats any argument that is not an array, tuple or Ref (except for Ptr) as a \\\"scalar\\\".julia> convert.(Float32, [1, 2])\\n2-element Array{Float32,1}:\\n 1.0\\n 2.0\\n\\njulia> ceil.((UInt8,), [1.2 3.4; 5.6 6.7])\\n2\u00d72 Array{UInt8,2}:\\n 0x02  0x04\\n 0x06  0x07\\n\\njulia> string.(1:3, \\\". \\\", [\\\"First\\\", \\\"Second\\\", \\\"Third\\\"])\\n3-element Array{String,1}:\\n \\\"1. First\\\"\\n \\\"2. Second\\\"\\n \\\"3. Third\\\"\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Implementation-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Implementation\",\n    \"category\": \"section\",\n    \"text\": \"The base array type in Julia is the abstract type AbstractArray{T,N}. It is parametrized by the number of dimensions N and the element type T. AbstractVector and AbstractMatrix are aliases for the 1-d and 2-d cases. Operations on AbstractArray objects are defined using higher level operators and functions, in a way that is independent of the underlying storage. These operations generally work correctly as a fallback for any specific array implementation.The AbstractArray type includes anything vaguely array-like, and implementations of it might be quite different from conventional arrays. For example, elements might be computed on request rather than stored. However, any concrete AbstractArray{T,N} type should generally implement at least size(A) (returning an Int tuple), getindex(A,i) and getindex(A,i1,...,iN); mutable arrays should also implement setindex!(). It is recommended that these operations have nearly constant time complexity, or technically \u00d5(1) complexity, as otherwise some array functions may be unexpectedly slow. Concrete types should also typically provide a similar(A,T=eltype(A),dims=size(A)) method, which is used to allocate a similar array for copy() and other out-of-place operations. No matter how an AbstractArray{T,N} is represented internally, T is the type of object returned by integer indexing (A[1, ..., 1], when A is not empty) and N should be the length of the tuple returned by size().DenseArray is an abstract subtype of AbstractArray intended to include all arrays that are laid out at regular offsets in memory, and which can therefore be passed to external C and Fortran functions expecting this memory layout. Subtypes should provide a method stride(A,k) that returns the \\\"stride\\\" of dimension k: increasing the index of dimension k by 1 should increase the index i of getindex(A,i) by stride(A,k). If a pointer conversion method Base.unsafe_convert(Ptr{T}, A) is provided, the memory layout should correspond in the same way to these strides.The Array type is a specific instance of DenseArray where elements are stored in column-major order (see additional notes in Performance Tips). Vector and Matrix are aliases for the 1-d and 2-d cases. Specific operations such as scalar indexing, assignment, and a few other basic storage-specific operations are all that have to be implemented for Array, so that the rest of the array library can be implemented in a generic manner.SubArray is a specialization of AbstractArray that performs indexing by reference rather than by copying. A SubArray is created with the view() function, which is called the same way as getindex() (with an array and a series of index arguments). The result of view() looks the same as the result of getindex(), except the data is left in place. view() stores the input index vectors in a SubArray object, which can later be used to index the original array indirectly.  By putting the @views macro in front of an expression or block of code, any array[...] slice in that expression will be converted to create a SubArray view instead.StridedVector and StridedMatrix are convenient aliases defined to make it possible for Julia to call a wider range of BLAS and LAPACK functions by passing them either Array or SubArray objects, and thus saving inefficiencies from memory allocation and copying.The following example computes the QR decomposition of a small section of a larger array, without creating any temporaries, and by calling the appropriate LAPACK function with the right leading dimension size and stride parameters.julia> a = rand(10,10)\\n10\u00d710 Array{Float64,2}:\\n 0.561255   0.226678   0.203391  0.308912   \u2026  0.750307  0.235023   0.217964\\n 0.718915   0.537192   0.556946  0.996234      0.666232  0.509423   0.660788\\n 0.493501   0.0565622  0.118392  0.493498      0.262048  0.940693   0.252965\\n 0.0470779  0.736979   0.264822  0.228787      0.161441  0.897023   0.567641\\n 0.343935   0.32327    0.795673  0.452242      0.468819  0.628507   0.511528\\n 0.935597   0.991511   0.571297  0.74485    \u2026  0.84589   0.178834   0.284413\\n 0.160706   0.672252   0.133158  0.65554       0.371826  0.770628   0.0531208\\n 0.306617   0.836126   0.301198  0.0224702     0.39344   0.0370205  0.536062\\n 0.890947   0.168877   0.32002   0.486136      0.096078  0.172048   0.77672\\n 0.507762   0.573567   0.220124  0.165816      0.211049  0.433277   0.539476\\n\\njulia> b = view(a, 2:2:8,2:2:4)\\n4\u00d72 SubArray{Float64,2,Array{Float64,2},Tuple{StepRange{Int64,Int64},StepRange{Int64,Int64}},false}:\\n 0.537192  0.996234\\n 0.736979  0.228787\\n 0.991511  0.74485\\n 0.836126  0.0224702\\n\\njulia> (q,r) = qr(b);\\n\\njulia> q\\n4\u00d72 Array{Float64,2}:\\n -0.338809   0.78934\\n -0.464815  -0.230274\\n -0.625349   0.194538\\n -0.527347  -0.534856\\n\\njulia> r\\n2\u00d72 Array{Float64,2}:\\n -1.58553  -0.921517\\n  0.0       0.866567\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Sparse-Vectors-and-Matrices-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Sparse Vectors and Matrices\",\n    \"category\": \"section\",\n    \"text\": \"Julia has built-in support for sparse vectors and sparse matrices. Sparse arrays are arrays that contain enough zeros that storing them in a special data structure leads to savings in space and execution time, compared to dense arrays.\"\n},\n\n{\n    \"location\": \"manual/arrays.html#man-csc-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Compressed Sparse Column (CSC) Sparse Matrix Storage\",\n    \"category\": \"section\",\n    \"text\": \"In Julia, sparse matrices are stored in the Compressed Sparse Column (CSC) format. Julia sparse matrices have the type SparseMatrixCSC{Tv,Ti}, where Tv is the type of the stored values, and Ti is the integer type for storing column pointers and row indices. The internal representation of SparseMatrixCSC is as follows:struct SparseMatrixCSC{Tv,Ti<:Integer} <: AbstractSparseMatrix{Tv,Ti}\\n    m::Int                  # Number of rows\\n    n::Int                  # Number of columns\\n    colptr::Vector{Ti}      # Column i is in colptr[i]:(colptr[i+1]-1)\\n    rowval::Vector{Ti}      # Row indices of stored values\\n    nzval::Vector{Tv}       # Stored values, typically nonzeros\\nendThe compressed sparse column storage makes it easy and quick to access the elements in the column of a sparse matrix, whereas accessing the sparse matrix by rows is considerably slower. Operations such as insertion of previously unstored entries one at a time in the CSC structure tend to be slow. This is because all elements of the sparse matrix that are beyond the point of insertion have to be moved one place over.All operations on sparse matrices are carefully implemented to exploit the CSC data structure for performance, and to avoid expensive operations.If you have data in CSC format from a different application or library, and wish to import it in Julia, make sure that you use 1-based indexing. The row indices in every column need to be sorted. If your SparseMatrixCSC object contains unsorted row indices, one quick way to sort them is by doing a double transpose.In some applications, it is convenient to store explicit zero values in a SparseMatrixCSC. These are accepted by functions in Base (but there is no guarantee that they will be preserved in mutating operations). Such explicitly stored zeros are treated as structural nonzeros by many routines. The nnz() function returns the number of elements explicitly stored in the sparse data structure, including structural nonzeros. In order to count the exact number of numerical nonzeros, use countnz(), which inspects every stored element of a sparse matrix. dropzeros(), and the in-place dropzeros!(), can be used to remove stored zeros from the sparse matrix.julia> A = sparse([1, 2, 3], [1, 2, 3], [0, 2, 0])\\n3\u00d73 SparseMatrixCSC{Int64,Int64} with 3 stored entries:\\n  [1, 1]  =  0\\n  [2, 2]  =  2\\n  [3, 3]  =  0\\n\\njulia> dropzeros(A)\\n3\u00d73 SparseMatrixCSC{Int64,Int64} with 1 stored entry:\\n  [2, 2]  =  2\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Sparse-Vector-Storage-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Sparse Vector Storage\",\n    \"category\": \"section\",\n    \"text\": \"Sparse vectors are stored in a close analog to compressed sparse column format for sparse matrices. In Julia, sparse vectors have the type SparseVector{Tv,Ti} where Tv is the type of the stored values and Ti the integer type for the indices. The internal representation is as follows:struct SparseVector{Tv,Ti<:Integer} <: AbstractSparseVector{Tv,Ti}\\n    n::Int              # Length of the sparse vector\\n    nzind::Vector{Ti}   # Indices of stored values\\n    nzval::Vector{Tv}   # Stored values, typically nonzeros\\nendAs for SparseMatrixCSC, the SparseVector type can also contain explicitly stored zeros. (See Sparse Matrix Storage.).\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Sparse-Vector-and-Matrix-Constructors-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Sparse Vector and Matrix Constructors\",\n    \"category\": \"section\",\n    \"text\": \"The simplest way to create sparse arrays is to use functions equivalent to the zeros() and eye() functions that Julia provides for working with dense arrays. To produce sparse arrays instead, you can use the same names with an sp prefix:julia> spzeros(3)\\n3-element SparseVector{Float64,Int64} with 0 stored entries\\n\\njulia> speye(3,5)\\n3\u00d75 SparseMatrixCSC{Float64,Int64} with 3 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  1.0\\n  [3, 3]  =  1.0The sparse() function is often a handy way to construct sparse arrays. For example, to construct a sparse matrix we can input a vector I of row indices, a vector J of column indices, and a vector V of stored values (this is also known as the COO (coordinate) format). sparse(I,J,V) then constructs a sparse matrix such that S[I[k], J[k]] = V[k]. The equivalent sparse vector constructor is sparsevec, which takes the (row) index vector I and the vector V with the stored values and constructs a sparse vector R such that R[I[k]] = V[k].julia> I = [1, 4, 3, 5]; J = [4, 7, 18, 9]; V = [1, 2, -5, 3];\\n\\njulia> S = sparse(I,J,V)\\n5\u00d718 SparseMatrixCSC{Int64,Int64} with 4 stored entries:\\n  [1 ,  4]  =  1\\n  [4 ,  7]  =  2\\n  [5 ,  9]  =  3\\n  [3 , 18]  =  -5\\n\\njulia> R = sparsevec(I,V)\\n5-element SparseVector{Int64,Int64} with 4 stored entries:\\n  [1]  =  1\\n  [3]  =  -5\\n  [4]  =  2\\n  [5]  =  3The inverse of the sparse() and sparsevec functions is findnz(), which retrieves the inputs used to create the sparse array. There is also a findn function which only returns the index vectors.julia> findnz(S)\\n([1, 4, 5, 3], [4, 7, 9, 18], [1, 2, 3, -5])\\n\\njulia> findn(S)\\n([1, 4, 5, 3], [4, 7, 9, 18])\\n\\njulia> findnz(R)\\n([1, 3, 4, 5], [1, -5, 2, 3])\\n\\njulia> findn(R)\\n4-element Array{Int64,1}:\\n 1\\n 3\\n 4\\n 5Another way to create a sparse array is to convert a dense array into a sparse array using the sparse() function:julia> sparse(eye(5))\\n5\u00d75 SparseMatrixCSC{Float64,Int64} with 5 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  1.0\\n  [3, 3]  =  1.0\\n  [4, 4]  =  1.0\\n  [5, 5]  =  1.0\\n\\njulia> sparse([1.0, 0.0, 1.0])\\n3-element SparseVector{Float64,Int64} with 2 stored entries:\\n  [1]  =  1.0\\n  [3]  =  1.0You can go in the other direction using the Array constructor. The issparse() function can be used to query if a matrix is sparse.julia> issparse(speye(5))\\ntrue\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Sparse-matrix-operations-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Sparse matrix operations\",\n    \"category\": \"section\",\n    \"text\": \"Arithmetic operations on sparse matrices also work as they do on dense matrices. Indexing of, assignment into, and concatenation of sparse matrices work in the same way as dense matrices. Indexing operations, especially assignment, are expensive, when carried out one element at a time. In many cases it may be better to convert the sparse matrix into (I,J,V) format using findnz(), manipulate the values or the structure in the dense vectors (I,J,V), and then reconstruct the sparse matrix.\"\n},\n\n{\n    \"location\": \"manual/arrays.html#Correspondence-of-dense-and-sparse-methods-1\",\n    \"page\": \"Multi-dimensional Arrays\",\n    \"title\": \"Correspondence of dense and sparse methods\",\n    \"category\": \"section\",\n    \"text\": \"The following table gives a correspondence between built-in methods on sparse matrices and their corresponding methods on dense matrix types. In general, methods that generate sparse matrices differ from their dense counterparts in that the resulting matrix follows the same sparsity pattern as a given sparse matrix S, or that the resulting sparse matrix has density d, i.e. each matrix element has a probability d of being non-zero.Details can be found in the Sparse Vectors and Matrices section of the standard library reference.Sparse Dense Description\\nspzeros(m,n) zeros(m,n) Creates a m-by-n matrix of zeros. (spzeros(m,n) is empty.)\\nspones(S) ones(m,n) Creates a matrix filled with ones. Unlike the dense version, spones() has the same sparsity pattern as S.\\nspeye(n) eye(n) Creates a n-by-n identity matrix.\\nfull(S) sparse(A) Interconverts between dense and sparse formats.\\nsprand(m,n,d) rand(m,n) Creates a m-by-n random matrix (of density d) with iid non-zero elements distributed uniformly on the half-open interval 0 1).\\nsprandn(m,n,d) randn(m,n) Creates a m-by-n random matrix (of density d) with iid non-zero elements distributed according to the standard normal (Gaussian) distribution.\\nsprandn(m,n,d,X) randn(m,n,X) Creates a m-by-n random matrix (of density d) with iid non-zero elements distributed according to the X distribution. (Requires the Distributions package.)\"\n},\n\n{\n    \"location\": \"manual/linear-algebra.html#\",\n    \"page\": \"Linear algebra\",\n    \"title\": \"Linear algebra\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/linear-algebra.html#Linear-algebra-1\",\n    \"page\": \"Linear algebra\",\n    \"title\": \"Linear algebra\",\n    \"category\": \"section\",\n    \"text\": \"In addition to (and as part of) its support for multi-dimensional arrays, Julia provides native implementations of many common and useful linear algebra operations. Basic operations, such as trace, det, and inv are all supported:julia> A = [1 2 3; 4 1 6; 7 8 1]\\n3\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  1  6\\n 7  8  1\\n\\njulia> trace(A)\\n3\\n\\njulia> det(A)\\n104.0\\n\\njulia> inv(A)\\n3\u00d73 Array{Float64,2}:\\n -0.451923   0.211538    0.0865385\\n  0.365385  -0.192308    0.0576923\\n  0.240385   0.0576923  -0.0673077As well as other useful operations, such as finding eigenvalues or eigenvectors:julia> A = [1.5 2 -4; 3 -1 -6; -10 2.3 4]\\n3\u00d73 Array{Float64,2}:\\n   1.5   2.0  -4.0\\n   3.0  -1.0  -6.0\\n -10.0   2.3   4.0\\n\\njulia> eigvals(A)\\n3-element Array{Complex{Float64},1}:\\n  9.31908+0.0im\\n -2.40954+2.72095im\\n -2.40954-2.72095im\\n\\njulia> eigvecs(A)\\n3\u00d73 Array{Complex{Float64},2}:\\n -0.488645+0.0im  0.182546-0.39813im   0.182546+0.39813im\\n -0.540358+0.0im  0.692926+0.0im       0.692926-0.0im\\n   0.68501+0.0im  0.254058-0.513301im  0.254058+0.513301imIn addition, Julia provides many factorizations which can be used to speed up problems such as linear solve or matrix exponentiation by pre-factorizing a matrix into a form more amenable (for performance or memory reasons) to the problem. See the documentation on factorize for more information. As an example:julia> A = [1.5 2 -4; 3 -1 -6; -10 2.3 4]\\n3\u00d73 Array{Float64,2}:\\n   1.5   2.0  -4.0\\n   3.0  -1.0  -6.0\\n -10.0   2.3   4.0\\n\\njulia> factorize(A)\\nBase.LinAlg.LU{Float64,Array{Float64,2}} with factors L and U:\\n[1.0 0.0 0.0; -0.15 1.0 0.0; -0.3 -0.132196 1.0]\\n[-10.0 2.3 4.0; 0.0 2.345 -3.4; 0.0 0.0 -5.24947]Since A is not Hermitian, symmetric, triangular, tridiagonal, or bidiagonal, an LU factorization may be the best we can do. Compare with:julia> B = [1.5 2 -4; 2 -1 -3; -4 -3 5]\\n3\u00d73 Array{Float64,2}:\\n  1.5   2.0  -4.0\\n  2.0  -1.0  -3.0\\n -4.0  -3.0   5.0\\n\\njulia> factorize(B)\\nBase.LinAlg.BunchKaufman{Float64,Array{Float64,2}}([-1.64286 0.142857 -0.8; 2.0 -2.8 -0.6; -4.0 -3.0 5.0], [1, 2, 3], 'U', true, false, 0)Here, Julia was able to detect that B is in fact symmetric, and used a more appropriate factorization. Often it's possible to write more efficient code for a matrix that is known to have certain properties e.g. it is symmetric, or tridiagonal. Julia provides some special types so that you can \\\"tag\\\" matrices as having these properties. For instance:julia> B = [1.5 2 -4; 2 -1 -3; -4 -3 5]\\n3\u00d73 Array{Float64,2}:\\n  1.5   2.0  -4.0\\n  2.0  -1.0  -3.0\\n -4.0  -3.0   5.0\\n\\njulia> sB = Symmetric(B)\\n3\u00d73 Symmetric{Float64,Array{Float64,2}}:\\n  1.5   2.0  -4.0\\n  2.0  -1.0  -3.0\\n -4.0  -3.0   5.0sB has been tagged as a matrix that's (real) symmetric, so for later operations we might perform on it, such as eigenfactorization or computing matrix-vector products, efficiencies can be found by only referencing half of it. For example:julia> B = [1.5 2 -4; 2 -1 -3; -4 -3 5]\\n3\u00d73 Array{Float64,2}:\\n  1.5   2.0  -4.0\\n  2.0  -1.0  -3.0\\n -4.0  -3.0   5.0\\n\\njulia> sB = Symmetric(B)\\n3\u00d73 Symmetric{Float64,Array{Float64,2}}:\\n  1.5   2.0  -4.0\\n  2.0  -1.0  -3.0\\n -4.0  -3.0   5.0\\n\\njulia> x = [1; 2; 3]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> sB\\\\x\\n3-element Array{Float64,1}:\\n -1.73913\\n -1.1087\\n -1.45652The \\\\ operation here performs the linear solution. Julia's parser provides convenient dispatch to specialized methods for the transpose of a matrix left-divided by a vector, or for the various combinations of transpose operations in matrix-matrix solutions. Many of these are further specialized for certain special matrix types. For example, A\\\\B will end up calling Base.LinAlg.A_ldiv_B! while A'\\\\B will end up calling Base.LinAlg.Ac_ldiv_B, even though we used the same left-division operator. This works for matrices too: A.'\\\\B.' would call Base.LinAlg.At_ldiv_Bt. The left-division operator is pretty powerful and it's easy to write compact, readable code that is flexible enough to solve all sorts of systems of linear equations.\"\n},\n\n{\n    \"location\": \"manual/linear-algebra.html#Special-matrices-1\",\n    \"page\": \"Linear algebra\",\n    \"title\": \"Special matrices\",\n    \"category\": \"section\",\n    \"text\": \"Matrices with special symmetries and structures arise often in linear algebra and are frequently associated with various matrix factorizations. Julia features a rich collection of special matrix types, which allow for fast computation with specialized routines that are specially developed for particular matrix types.The following tables summarize the types of special matrices that have been implemented in Julia, as well as whether hooks to various optimized methods for them in LAPACK are available.Type Description\\nHermitian Hermitian matrix\\nUpperTriangular Upper triangular matrix\\nLowerTriangular Lower triangular matrix\\nTridiagonal Tridiagonal matrix\\nSymTridiagonal Symmetric tridiagonal matrix\\nBidiagonal Upper/lower bidiagonal matrix\\nDiagonal Diagonal matrix\\nUniformScaling Uniform scaling operator\"\n},\n\n{\n    \"location\": \"manual/linear-algebra.html#Elementary-operations-1\",\n    \"page\": \"Linear algebra\",\n    \"title\": \"Elementary operations\",\n    \"category\": \"section\",\n    \"text\": \"Matrix type + - * \\\\ Other functions with optimized methods\\nHermitian \u00a0 \u00a0 \u00a0 MV inv(), sqrtm(), expm()\\nUpperTriangular \u00a0 \u00a0 MV MV inv(), det()\\nLowerTriangular \u00a0 \u00a0 MV MV inv(), det()\\nSymTridiagonal M M MS MV eigmax(), eigmin()\\nTridiagonal M M MS MV \u00a0\\nBidiagonal M M MS MV \u00a0\\nDiagonal M M MV MV inv(), det(), logdet(), /()\\nUniformScaling M M MVS MVS /()Legend:Key Description\\nM (matrix) An optimized method for matrix-matrix operations is available\\nV (vector) An optimized method for matrix-vector operations is available\\nS (scalar) An optimized method for matrix-scalar operations is available\"\n},\n\n{\n    \"location\": \"manual/linear-algebra.html#Matrix-factorizations-1\",\n    \"page\": \"Linear algebra\",\n    \"title\": \"Matrix factorizations\",\n    \"category\": \"section\",\n    \"text\": \"Matrix type LAPACK eig() eigvals() eigvecs() svd() svdvals()\\nHermitian HE \u00a0 ARI \u00a0 \u00a0 \u00a0\\nUpperTriangular TR A A A \u00a0 \u00a0\\nLowerTriangular TR A A A \u00a0 \u00a0\\nSymTridiagonal ST A ARI AV \u00a0 \u00a0\\nTridiagonal GT \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\nBidiagonal BD \u00a0 \u00a0 \u00a0 A A\\nDiagonal DI \u00a0 A \u00a0 \u00a0 \u00a0Legend:Key Description Example\\nA (all) An optimized method to find all the characteristic values and/or vectors is available e.g. eigvals(M)\\nR (range) An optimized method to find the ilth through the ihth characteristic values are available eigvals(M, il, ih)\\nI (interval) An optimized method to find the characteristic values in the interval [vl, vh] is available eigvals(M, vl, vh)\\nV (vectors) An optimized method to find the characteristic vectors corresponding to the characteristic values x=[x1, x2,...] is available eigvecs(M, x)\"\n},\n\n{\n    \"location\": \"manual/linear-algebra.html#The-uniform-scaling-operator-1\",\n    \"page\": \"Linear algebra\",\n    \"title\": \"The uniform scaling operator\",\n    \"category\": \"section\",\n    \"text\": \"A UniformScaling operator represents a scalar times the identity operator, \u03bb*I. The identity operator  I is defined as a constant and is an instance of UniformScaling. The size of these operators are generic and match the other matrix in the binary operations +, -, * and \\\\. For A+I and A-I this means that A must be square. Multiplication with the identity operator I is a noop (except for checking that the scaling factor is one) and therefore almost without overhead.\"\n},\n\n{\n    \"location\": \"manual/linear-algebra.html#man-linalg-factorizations-1\",\n    \"page\": \"Linear algebra\",\n    \"title\": \"Matrix factorizations\",\n    \"category\": \"section\",\n    \"text\": \"Matrix factorizations (a.k.a. matrix decompositions) compute the factorization of a matrix into a product of matrices, and are one of the central concepts in linear algebra.The following table summarizes the types of matrix factorizations that have been implemented in Julia. Details of their associated methods can be found in the Linear Algebra section of the standard library documentation.Type Description\\nCholesky Cholesky factorization\\nCholeskyPivoted Pivoted Cholesky factorization\\nLU LU factorization\\nLUTridiagonal LU factorization for Tridiagonal matrices\\nUmfpackLU LU factorization for sparse matrices (computed by UMFPack)\\nQR QR factorization\\nQRCompactWY Compact WY form of the QR factorization\\nQRPivoted Pivoted QR factorization\\nHessenberg Hessenberg decomposition\\nEigen Spectral decomposition\\nSVD Singular value decomposition\\nGeneralizedSVD Generalized SVD\"\n},\n\n{\n    \"location\": \"manual/networking-and-streams.html#\",\n    \"page\": \"Networking and Streams\",\n    \"title\": \"Networking and Streams\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/networking-and-streams.html#Networking-and-Streams-1\",\n    \"page\": \"Networking and Streams\",\n    \"title\": \"Networking and Streams\",\n    \"category\": \"section\",\n    \"text\": \"Julia provides a rich interface to deal with streaming I/O objects such as terminals, pipes and TCP sockets. This interface, though asynchronous at the system level, is presented in a synchronous manner to the programmer and it is usually unnecessary to think about the underlying asynchronous operation. This is achieved by making heavy use of Julia cooperative threading (coroutine) functionality.\"\n},\n\n{\n    \"location\": \"manual/networking-and-streams.html#Basic-Stream-I/O-1\",\n    \"page\": \"Networking and Streams\",\n    \"title\": \"Basic Stream I/O\",\n    \"category\": \"section\",\n    \"text\": \"All Julia streams expose at least a read() and a write() method, taking the stream as their first argument, e.g.:julia> write(STDOUT,\\\"Hello World\\\");  # suppress return value 11 with ;\\nHello World\\njulia> read(STDIN,Char)\\n\\n'\\\\n': ASCII/Unicode U+000a (category Cc: Other, control)Note that write() returns 11, the number of bytes (in \\\"Hello World\\\") written to STDOUT, but this return value is suppressed with the ;.Here Enter was pressed again so that Julia would read the newline. Now, as you can see from this example, write() takes the data to write as its second argument, while read() takes the type of the data to be read as the second argument.For example, to read a simple byte array, we could do:julia> x = zeros(UInt8, 4)\\n4-element Array{UInt8,1}:\\n 0x00\\n 0x00\\n 0x00\\n 0x00\\n\\njulia> read!(STDIN, x)\\nabcd\\n4-element Array{UInt8,1}:\\n 0x61\\n 0x62\\n 0x63\\n 0x64However, since this is slightly cumbersome, there are several convenience methods provided. For example, we could have written the above as:julia> read(STDIN,4)\\nabcd\\n4-element Array{UInt8,1}:\\n 0x61\\n 0x62\\n 0x63\\n 0x64or if we had wanted to read the entire line instead:julia> readline(STDIN)\\nabcd\\n\\\"abcd\\\"Note that depending on your terminal settings, your TTY may be line buffered and might thus require an additional enter before the data is sent to Julia.To read every line from STDIN you can use eachline():for line in eachline(STDIN)\\n    print(\\\"Found $line\\\")\\nendor read() if you wanted to read by character instead:while !eof(STDIN)\\n    x = read(STDIN, Char)\\n    println(\\\"Found: $x\\\")\\nend\"\n},\n\n{\n    \"location\": \"manual/networking-and-streams.html#Text-I/O-1\",\n    \"page\": \"Networking and Streams\",\n    \"title\": \"Text I/O\",\n    \"category\": \"section\",\n    \"text\": \"Note that the write() method mentioned above operates on binary streams. In particular, values do not get converted to any canonical text representation but are written out as is:julia> write(STDOUT,0x61);  # suppress return value 1 with ;\\naNote that a is written to STDOUT by the write() function and that the returned value is 1 (since 0x61 is one byte).For text I/O, use the print() or show() methods, depending on your needs (see the standard library reference for a detailed discussion of the difference between the two):julia> print(STDOUT, 0x61)\\n97\"\n},\n\n{\n    \"location\": \"manual/networking-and-streams.html#IO-Output-Contextual-Properties-1\",\n    \"page\": \"Networking and Streams\",\n    \"title\": \"IO Output Contextual Properties\",\n    \"category\": \"section\",\n    \"text\": \"Sometimes IO output can benefit from the ability to pass contextual information into show methods. The IOContext object provides this framework for associating arbitrary metadata with an IO object. For example, showcompact adds a hinting parameter to the IO object that the invoked show method should print a shorter output (if applicable).\"\n},\n\n{\n    \"location\": \"manual/networking-and-streams.html#Working-with-Files-1\",\n    \"page\": \"Networking and Streams\",\n    \"title\": \"Working with Files\",\n    \"category\": \"section\",\n    \"text\": \"Like many other environments, Julia has an open() function, which takes a filename and returns an IOStream object that you can use to read and write things from the file. For example if we have a file, hello.txt, whose contents are Hello, World!:julia> f = open(\\\"hello.txt\\\")\\nIOStream(<file hello.txt>)\\n\\njulia> readlines(f)\\n1-element Array{String,1}:\\n \\\"Hello, World!\\\"If you want to write to a file, you can open it with the write (\\\"w\\\") flag:julia> f = open(\\\"hello.txt\\\",\\\"w\\\")\\nIOStream(<file hello.txt>)\\n\\njulia> write(f,\\\"Hello again.\\\")\\n12If you examine the contents of hello.txt at this point, you will notice that it is empty; nothing has actually been written to disk yet. This is because the IOStream must be closed before the write is actually flushed to disk:julia> close(f)Examining hello.txt again will show its contents have been changed.Opening a file, doing something to its contents, and closing it again is a very common pattern. To make this easier, there exists another invocation of open() which takes a function as its first argument and filename as its second, opens the file, calls the function with the file as an argument, and then closes it again. For example, given a function:function read_and_capitalize(f::IOStream)\\n    return uppercase(readstring(f))\\nendYou can call:julia> open(read_and_capitalize, \\\"hello.txt\\\")\\n\\\"HELLO AGAIN.\\\"to open hello.txt, call read_and_capitalize on it, close hello.txt and return the capitalized contents.To avoid even having to define a named function, you can use the do syntax, which creates an anonymous function on the fly:julia> open(\\\"hello.txt\\\") do f\\n           uppercase(readstring(f))\\n       end\\n\\\"HELLO AGAIN.\\\"\"\n},\n\n{\n    \"location\": \"manual/networking-and-streams.html#A-simple-TCP-example-1\",\n    \"page\": \"Networking and Streams\",\n    \"title\": \"A simple TCP example\",\n    \"category\": \"section\",\n    \"text\": \"Let's jump right in with a simple example involving TCP sockets. Let's first create a simple server:julia> @async begin\\n           server = listen(2000)\\n           while true\\n               sock = accept(server)\\n               println(\\\"Hello World\\\\n\\\")\\n           end\\n       end\\nTask (runnable) @0x00007fd31dc11ae0To those familiar with the Unix socket API, the method names will feel familiar, though their usage is somewhat simpler than the raw Unix socket API. The first call to listen() will create a server waiting for incoming connections on the specified port (2000) in this case. The same function may also be used to create various other kinds of servers:julia> listen(2000) # Listens on localhost:2000 (IPv4)\\nTCPServer(active)\\n\\njulia> listen(ip\\\"127.0.0.1\\\",2000) # Equivalent to the first\\nTCPServer(active)\\n\\njulia> listen(ip\\\"::1\\\",2000) # Listens on localhost:2000 (IPv6)\\nTCPServer(active)\\n\\njulia> listen(IPv4(0),2001) # Listens on port 2001 on all IPv4 interfaces\\nTCPServer(active)\\n\\njulia> listen(IPv6(0),2001) # Listens on port 2001 on all IPv6 interfaces\\nTCPServer(active)\\n\\njulia> listen(\\\"testsocket\\\") # Listens on a UNIX domain socket/named pipe\\nPipeServer(active)Note that the return type of the last invocation is different. This is because this server does not listen on TCP, but rather on a named pipe (Windows) or UNIX domain socket. The difference is subtle and has to do with the accept() and connect() methods. The accept() method retrieves a connection to the client that is connecting on the server we just created, while the connect() function connects to a server using the specified method. The connect() function takes the same arguments as listen(), so, assuming the environment (i.e. host, cwd, etc.) is the same you should be able to pass the same arguments to connect() as you did to listen to establish the connection. So let's try that out (after having created the server above):julia> connect(2000)\\nTCPSocket(open, 0 bytes waiting)\\n\\njulia> Hello WorldAs expected we saw \\\"Hello World\\\" printed. So, let's actually analyze what happened behind the scenes. When we called connect(), we connect to the server we had just created. Meanwhile, the accept function returns a server-side connection to the newly created socket and prints \\\"Hello World\\\" to indicate that the connection was successful.A great strength of Julia is that since the API is exposed synchronously even though the I/O is actually happening asynchronously, we didn't have to worry callbacks or even making sure that the server gets to run. When we called connect() the current task waited for the connection to be established and only continued executing after that was done. In this pause, the server task resumed execution (because a connection request was now available), accepted the connection, printed the message and waited for the next client. Reading and writing works in the same way. To see this, consider the following simple echo server:julia> @async begin\\n           server = listen(2001)\\n           while true\\n               sock = accept(server)\\n               @async while isopen(sock)\\n                   write(sock,readline(sock))\\n               end\\n           end\\n       end\\nTask (runnable) @0x00007fd31dc12e60\\n\\njulia> clientside = connect(2001)\\nTCPSocket(RawFD(28) open, 0 bytes waiting)\\n\\njulia> @async while true\\n           write(STDOUT,readline(clientside))\\n       end\\nTask (runnable) @0x00007fd31dc11870\\n\\njulia> println(clientside,\\\"Hello World from the Echo Server\\\")\\nHello World from the Echo ServerAs with other streams, use close() to disconnect the socket:julia> close(clientside)\"\n},\n\n{\n    \"location\": \"manual/networking-and-streams.html#Resolving-IP-Addresses-1\",\n    \"page\": \"Networking and Streams\",\n    \"title\": \"Resolving IP Addresses\",\n    \"category\": \"section\",\n    \"text\": \"One of the connect() methods that does not follow the listen() methods is connect(host::String,port), which will attempt to connect to the host given by the host parameter on the port given by the port parameter. It allows you to do things like:julia> connect(\\\"google.com\\\",80)\\nTCPSocket(RawFD(30) open, 0 bytes waiting)At the base of this functionality is getaddrinfo(), which will do the appropriate address resolution:julia> getaddrinfo(\\\"google.com\\\")\\nip\\\"74.125.226.225\\\"\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Parallel Computing\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Parallel-Computing-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Parallel Computing\",\n    \"category\": \"section\",\n    \"text\": \"Most modern computers possess more than one CPU, and several computers can be combined together in a cluster. Harnessing the power of these multiple CPUs allows many computations to be completed more quickly. There are two major factors that influence performance: the speed of the CPUs themselves, and the speed of their access to memory. In a cluster, it's fairly obvious that a given CPU will have fastest access to the RAM within the same computer (node). Perhaps more surprisingly, similar issues are relevant on a typical multicore laptop, due to differences in the speed of main memory and the cache. Consequently, a good multiprocessing environment should allow control over the \\\"ownership\\\" of a chunk of memory by a particular CPU. Julia provides a multiprocessing environment based on message passing to allow programs to run on multiple processes in separate memory domains at once.Julia's implementation of message passing is different from other environments such as MPI [1]. Communication in Julia is generally \\\"one-sided\\\", meaning that the programmer needs to explicitly manage only one process in a two-process operation. Furthermore, these operations typically do not look like \\\"message send\\\" and \\\"message receive\\\" but rather resemble higher-level operations like calls to user functions.Parallel programming in Julia is built on two primitives: remote references and remote calls. A remote reference is an object that can be used from any process to refer to an object stored on a particular process. A remote call is a request by one process to call a certain function on certain arguments on another (possibly the same) process.Remote references come in two flavors: Future and RemoteChannel.A remote call returns a Future to its result. Remote calls return immediately; the process that made the call proceeds to its next operation while the remote call happens somewhere else. You can wait for a remote call to finish by calling wait() on the returned Future, and you can obtain the full value of the result using fetch().On the other hand, RemoteChannel s are rewritable. For example, multiple processes can co-ordinate their processing by referencing the same remote Channel.Each process has an associated identifier. The process providing the interactive Julia prompt always has an id equal to 1. The processes used by default for parallel operations are referred to as \\\"workers\\\". When there is only one process, process 1 is considered a worker. Otherwise, workers are considered to be all processes other than process 1.Let's try this out. Starting with julia -p n provides n worker processes on the local machine. Generally it makes sense for n to equal the number of CPU cores on the machine.$ ./julia -p 2\\n\\njulia> r = remotecall(rand, 2, 2, 2)\\nFuture(2, 1, 4, Nullable{Any}())\\n\\njulia> s = @spawnat 2 1 .+ fetch(r)\\nFuture(2, 1, 5, Nullable{Any}())\\n\\njulia> fetch(s)\\n2\u00d72 Array{Float64,2}:\\n 1.18526  1.50912\\n 1.16296  1.60607The first argument to remotecall() is the function to call. Most parallel programming in Julia does not reference specific processes or the number of processes available, but remotecall() is considered a low-level interface providing finer control. The second argument to remotecall() is the id of the process that will do the work, and the remaining arguments will be passed to the function being called.As you can see, in the first line we asked process 2 to construct a 2-by-2 random matrix, and in the second line we asked it to add 1 to it. The result of both calculations is available in the two futures, r and s. The @spawnat macro evaluates the expression in the second argument on the process specified by the first argument.Occasionally you might want a remotely-computed value immediately. This typically happens when you read from a remote object to obtain data needed by the next local operation. The function remotecall_fetch() exists for this purpose. It is equivalent to fetch(remotecall(...)) but is more efficient.julia> remotecall_fetch(getindex, 2, r, 1, 1)\\n0.18526337335308085Remember that getindex(r,1,1) is equivalent to r[1,1], so this call fetches the first element of the future r.The syntax of remotecall() is not especially convenient. The macro @spawn makes things easier. It operates on an expression rather than a function, and picks where to do the operation for you:julia> r = @spawn rand(2,2)\\nFuture(2, 1, 4, Nullable{Any}())\\n\\njulia> s = @spawn 1 .+ fetch(r)\\nFuture(3, 1, 5, Nullable{Any}())\\n\\njulia> fetch(s)\\n2\u00d72 Array{Float64,2}:\\n 1.38854  1.9098\\n 1.20939  1.57158Note that we used 1 .+ fetch(r) instead of 1 .+ r. This is because we do not know where the code will run, so in general a fetch() might be required to move r to the process doing the addition. In this case, @spawn is smart enough to perform the computation on the process that owns r, so the fetch() will be a no-op (no work is done).(It is worth noting that @spawn is not built-in but defined in Julia as a macro. It is possible to define your own such constructs.)An important thing to remember is that, once fetched, a Future will cache its value locally. Further fetch() calls do not entail a network hop. Once all referencing Futures have fetched, the remote stored value is deleted.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Code-Availability-and-Loading-Packages-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Code Availability and Loading Packages\",\n    \"category\": \"section\",\n    \"text\": \"Your code must be available on any process that runs it. For example, type the following into the Julia prompt:julia> function rand2(dims...)\\n           return 2*rand(dims...)\\n       end\\n\\njulia> rand2(2,2)\\n2\u00d72 Array{Float64,2}:\\n 0.153756  0.368514\\n 1.15119   0.918912\\n\\njulia> fetch(@spawn rand2(2,2))\\nERROR: RemoteException(2, CapturedException(UndefVarError(Symbol(\\\"#rand2\\\"))\\n[...]Process 1 knew about the function rand2, but process 2 did not.Most commonly you'll be loading code from files or packages, and you have a considerable amount of flexibility in controlling which processes load code. Consider a file, DummyModule.jl, containing the following code:module DummyModule\\n\\nexport MyType, f\\n\\nmutable struct MyType\\n    a::Int\\nend\\n\\nf(x) = x^2+1\\n\\nprintln(\\\"loaded\\\")\\n\\nendStarting Julia with julia -p 2, you can use this to verify the following:include(\\\"DummyModule.jl\\\") loads the file on just a single process (whichever one executes the statement).\\nusing DummyModule causes the module to be loaded on all processes; however, the module is brought into scope only on the one executing the statement.\\nAs long as DummyModule is loaded on process 2, commands like\\nrr = RemoteChannel(2)\\nput!(rr, MyType(7))\\nallow you to store an object of type MyType on process 2 even if DummyModule is not in scope on process 2.You can force a command to run on all processes using the @everywhere macro. For example, @everywhere can also be used to directly define a function on all processes:julia> @everywhere id = myid()\\n\\njulia> remotecall_fetch(()->id, 2)\\n2A file can also be preloaded on multiple processes at startup, and a driver script can be used to drive the computation:julia -p <n> -L file1.jl -L file2.jl driver.jlThe Julia process running the driver script in the example above has an id equal to 1, just like a process providing an interactive prompt.The base Julia installation has in-built support for two types of clusters:A local cluster specified with the -p option as shown above.\\nA cluster spanning machines using the --machinefile option. This uses a passwordless ssh login to start Julia worker processes (from the same path as the current host) on the specified machines.Functions addprocs(), rmprocs(), workers(), and others are available as a programmatic means of adding, removing and querying the processes in a cluster.Note that workers do not run a .juliarc.jl startup script, nor do they synchronize their global state (such as global variables, new method definitions, and loaded modules) with any of the other running processes.Other types of clusters can be supported by writing your own custom ClusterManager, as described below in the ClusterManagers section.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Data-Movement-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Data Movement\",\n    \"category\": \"section\",\n    \"text\": \"Sending messages and moving data constitute most of the overhead in a parallel program. Reducing the number of messages and the amount of data sent is critical to achieving performance and scalability. To this end, it is important to understand the data movement performed by Julia's various parallel programming constructs.fetch() can be considered an explicit data movement operation, since it directly asks that an object be moved to the local machine. @spawn (and a few related constructs) also moves data, but this is not as obvious, hence it can be called an implicit data movement operation. Consider these two approaches to constructing and squaring a random matrix:Method 1:julia> A = rand(1000,1000);\\n\\njulia> Bref = @spawn A^2;\\n\\n[...]\\n\\njulia> fetch(Bref);Method 2:julia> Bref = @spawn rand(1000,1000)^2;\\n\\n[...]\\n\\njulia> fetch(Bref);The difference seems trivial, but in fact is quite significant due to the behavior of @spawn. In the first method, a random matrix is constructed locally, then sent to another process where it is squared. In the second method, a random matrix is both constructed and squared on another process. Therefore the second method sends much less data than the first.In this toy example, the two methods are easy to distinguish and choose from. However, in a real program designing data movement might require more thought and likely some measurement. For example, if the first process needs matrix A then the first method might be better. Or, if computing A is expensive and only the current process has it, then moving it to another process might be unavoidable. Or, if the current process has very little to do between the @spawn and fetch(Bref), it might be better to eliminate the parallelism altogether. Or imagine rand(1000,1000) is replaced with a more expensive operation. Then it might make sense to add another @spawn statement just for this step.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Global-variables-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Global variables\",\n    \"category\": \"section\",\n    \"text\": \"Expressions executed remotely via @spawn, or closures specified for remote execution using remotecall may refer to global variables. Global bindings under module Main are treated a little differently compared to global bindings in other modules. Consider the following code snippet:A = rand(10,10)\\nremotecall_fetch(()->foo(A), 2)Note that A is a global variable defined in the local workspace. Worker 2 does not have a variable called A under Main. The act of shipping the closure ()->foo(A) to worker 2 results in Main.A being defined on 2. Main.A continues to exist on worker 2 even after the call remotecall_fetch returns. Remote calls with embedded global references (under Main module only) manage globals as follows:New global bindings are created on destination workers if they are referenced as part of a remote call.\\nGlobal constants are declared as constants on remote nodes too.\\nGlobals are re-sent to a destination worker only in the context of a remote call, and then only if its value has changed. Also, the cluster does not synchronize global bindings across nodes. For example:\\nA = rand(10,10)\\nremotecall_fetch(()->foo(A), 2) # worker 2\\nA = rand(10,10)\\nremotecall_fetch(()->foo(A), 3) # worker 3\\nA = nothing\\nExecuting the above snippet results in Main.A on worker 2 having a different value from Main.A on worker 3, while the value of Main.A on node 1 is set to nothing.As you may have realized, while memory associated with globals may be collected when they are reassigned on the master, no such action is taken on the workers as the bindings continue to be valid. clear! can be used to manually reassign specific globals on remote nodes to nothing once they are no longer required. This will release any memory associated with them as part of a regular garbage collection cycle.Thus programs should be careful referencing globals in remote calls. In fact, it is preferable to avoid them altogether if possible. If you must reference globals, consider using let blocks to localize global variables.For example:julia> A = rand(10,10);\\n\\njulia> remotecall_fetch(()->A, 2);\\n\\njulia> B = rand(10,10);\\n\\njulia> let B = B\\n           remotecall_fetch(()->B, 2)\\n       end;\\n\\njulia> @spawnat 2 whos();\\n\\njulia>  From worker 2:                               A    800 bytes  10\u00d710 Array{Float64,2}\\n        From worker 2:                            Base               Module\\n        From worker 2:                            Core               Module\\n        From worker 2:                            Main               ModuleAs can be seen, global variable A is defined on worker 2, but B is captured as a local variable and hence a binding for B does not exist on worker 2.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Parallel-Map-and-Loops-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Parallel Map and Loops\",\n    \"category\": \"section\",\n    \"text\": \"Fortunately, many useful parallel computations do not require data movement. A common example is a Monte Carlo simulation, where multiple processes can handle independent simulation trials simultaneously. We can use @spawn to flip coins on two processes. First, write the following function in count_heads.jl:function count_heads(n)\\n    c::Int = 0\\n    for i = 1:n\\n        c += rand(Bool)\\n    end\\n    c\\nendThe function count_heads simply adds together n random bits. Here is how we can perform some trials on two machines, and add together the results:julia> @everywhere include(\\\"count_heads.jl\\\")\\n\\njulia> a = @spawn count_heads(100000000)\\nFuture(2, 1, 6, Nullable{Any}())\\n\\njulia> b = @spawn count_heads(100000000)\\nFuture(3, 1, 7, Nullable{Any}())\\n\\njulia> fetch(a)+fetch(b)\\n100001564This example demonstrates a powerful and often-used parallel programming pattern. Many iterations run independently over several processes, and then their results are combined using some function. The combination process is called a reduction, since it is generally tensor-rank-reducing: a vector of numbers is reduced to a single number, or a matrix is reduced to a single row or column, etc. In code, this typically looks like the pattern x = f(x,v[i]), where x is the accumulator, f is the reduction function, and the v[i] are the elements being reduced. It is desirable for f to be associative, so that it does not matter what order the operations are performed in.Notice that our use of this pattern with count_heads can be generalized. We used two explicit @spawn statements, which limits the parallelism to two processes. To run on any number of processes, we can use a parallel for loop, which can be written in Julia using @parallel like this:nheads = @parallel (+) for i = 1:200000000\\n    Int(rand(Bool))\\nendThis construct implements the pattern of assigning iterations to multiple processes, and combining them with a specified reduction (in this case (+)). The result of each iteration is taken as the value of the last expression inside the loop. The whole parallel loop expression itself evaluates to the final answer.Note that although parallel for loops look like serial for loops, their behavior is dramatically different. In particular, the iterations do not happen in a specified order, and writes to variables or arrays will not be globally visible since iterations run on different processes. Any variables used inside the parallel loop will be copied and broadcast to each process.For example, the following code will not work as intended:a = zeros(100000)\\n@parallel for i = 1:100000\\n    a[i] = i\\nendThis code will not initialize all of a, since each process will have a separate copy of it. Parallel for loops like these must be avoided. Fortunately, Shared Arrays can be used to get around this limitation:a = SharedArray{Float64}(10)\\n@parallel for i = 1:10\\n    a[i] = i\\nendUsing \\\"outside\\\" variables in parallel loops is perfectly reasonable if the variables are read-only:a = randn(1000)\\n@parallel (+) for i = 1:100000\\n    f(a[rand(1:end)])\\nendHere each iteration applies f to a randomly-chosen sample from a vector a shared by all processes.As you could see, the reduction operator can be omitted if it is not needed. In that case, the loop executes asynchronously, i.e. it spawns independent tasks on all available workers and returns an array of Future immediately without waiting for completion. The caller can wait for the Future completions at a later point by calling fetch() on them, or wait for completion at the end of the loop by prefixing it with @sync, like @sync @parallel for.In some cases no reduction operator is needed, and we merely wish to apply a function to all integers in some range (or, more generally, to all elements in some collection). This is another useful operation called parallel map, implemented in Julia as the pmap() function. For example, we could compute the singular values of several large random matrices in parallel as follows:julia> M = Matrix{Float64}[rand(1000,1000) for i = 1:10];\\n\\njulia> pmap(svd, M);Julia's pmap() is designed for the case where each function call does a large amount of work. In contrast, @parallel for can handle situations where each iteration is tiny, perhaps merely summing two numbers. Only worker processes are used by both pmap() and @parallel for for the parallel computation. In case of @parallel for, the final reduction is done on the calling process.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Synchronization-With-Remote-References-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Synchronization With Remote References\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Scheduling-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Scheduling\",\n    \"category\": \"section\",\n    \"text\": \"Julia's parallel programming platform uses Tasks (aka Coroutines) to switch among multiple computations. Whenever code performs a communication operation like fetch() or wait(), the current task is suspended and a scheduler picks another task to run. A task is restarted when the event it is waiting for completes.For many problems, it is not necessary to think about tasks directly. However, they can be used to wait for multiple events at the same time, which provides for dynamic scheduling. In dynamic scheduling, a program decides what to compute or where to compute it based on when other jobs finish. This is needed for unpredictable or unbalanced workloads, where we want to assign more work to processes only when they finish their current tasks.As an example, consider computing the singular values of matrices of different sizes:julia> M = Matrix{Float64}[rand(800,800), rand(600,600), rand(800,800), rand(600,600)];\\n\\njulia> pmap(svd, M);If one process handles both 800\u00d7800 matrices and another handles both 600\u00d7600 matrices, we will not get as much scalability as we could. The solution is to make a local task to \\\"feed\\\" work to each process when it completes its current task. For example, consider a simple pmap() implementation:function pmap(f, lst)\\n    np = nprocs()  # determine the number of processes available\\n    n = length(lst)\\n    results = Vector{Any}(n)\\n    i = 1\\n    # function to produce the next work item from the queue.\\n    # in this case it's just an index.\\n    nextidx() = (idx=i; i+=1; idx)\\n    @sync begin\\n        for p=1:np\\n            if p != myid() || np == 1\\n                @async begin\\n                    while true\\n                        idx = nextidx()\\n                        if idx > n\\n                            break\\n                        end\\n                        results[idx] = remotecall_fetch(f, p, lst[idx])\\n                    end\\n                end\\n            end\\n        end\\n    end\\n    results\\nend@async is similar to @spawn, but only runs tasks on the local process. We use it to create a \\\"feeder\\\" task for each process. Each task picks the next index that needs to be computed, then waits for its process to finish, then repeats until we run out of indexes. Note that the feeder tasks do not begin to execute until the main task reaches the end of the @sync block, at which point it surrenders control and waits for all the local tasks to complete before returning from the function. The feeder tasks are able to share state via nextidx() because they all run on the same process. No locking is required, since the threads are scheduled cooperatively and not preemptively. This means context switches only occur at well-defined points: in this case, when remotecall_fetch() is called.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Channels-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Channels\",\n    \"category\": \"section\",\n    \"text\": \"The section on Tasks in Control Flow discussed the execution of multiple functions in a co-operative manner. Channels can be quite useful to pass data between running tasks, particularly those involving I/O operations.Examples of operations involving I/O include reading/writing to files, accessing web services, executing external programs, etc. In all these cases, overall execution time can be improved if other tasks can be run while a file is being read, or while waiting for an external service/program to complete.A channel can be visualized as a pipe, i.e., it has a write end and read end.Multiple writers in different tasks can write to the same channel concurrently via put!() calls.\\nMultiple readers in different tasks can read data concurrently via take!() calls.\\nAs an example:\\n# Given Channels c1 and c2,\\nc1 = Channel(32)\\nc2 = Channel(32)\\n\\n# and a function `foo()` which reads items from from c1, processes the item read\\n# and writes a result to c2,\\nfunction foo()\\n    while true\\n        data = take!(c1)\\n        [...]               # process data\\n        put!(c2, result)    # write out result\\n    end\\nend\\n\\n# we can schedule `n` instances of `foo()` to be active concurrently.\\nfor _ in 1:n\\n    @schedule foo()\\nend\\nChannels are created via the Channel{T}(sz) constructor. The channel will only hold objects of type T. If the type is not specified, the channel can hold objects of any type. sz refers to the maximum number of elements that can be held in the channel at any time. For example, Channel(32) creates a channel that can hold a maximum of 32 objects of any type. A Channel{MyType}(64) can hold up to 64 objects of MyType at any time.\\nIf a Channel is empty, readers (on a take!() call) will block until data is available.\\nIf a Channel is full, writers (on a put!() call) will block until space becomes available.\\nisready() tests for the presence of any object in the channel, while wait() waits for an object to become available.\\nA Channel is in an open state initially. This means that it can be read from and written to freely via take!() and put!() calls. close() closes a Channel. On a closed Channel, put!() will fail. For example:julia> c = Channel(2);\\n\\njulia> put!(c, 1) # `put!` on an open channel succeeds\\n1\\n\\njulia> close(c);\\n\\njulia> put!(c, 2) # `put!` on a closed channel throws an exception.\\nERROR: InvalidStateException(\\\"Channel is closed.\\\",:closed)\\n[...]take!() and fetch() (which retrieves but does not remove the value) on a closed channel successfully return any existing values until it is emptied. Continuing the above example:julia> fetch(c) # Any number of `fetch` calls succeed.\\n1\\n\\njulia> fetch(c)\\n1\\n\\njulia> take!(c) # The first `take!` removes the value.\\n1\\n\\njulia> take!(c) # No more data available on a closed channel.\\nERROR: InvalidStateException(\\\"Channel is closed.\\\",:closed)\\n[...]A Channel can be used as an iterable object in a for loop, in which case the loop runs as long as the Channel has data or is open. The loop variable takes on all values added to the Channel. The for loop is terminated once the Channel is closed and emptied.For example, the following would cause the for loop to wait for more data:julia> c = Channel{Int}(10);\\n\\njulia> foreach(i->put!(c, i), 1:3) # add a few entries\\n\\njulia> data = [i for i in c]while this will return after reading all data:julia> c = Channel{Int}(10);\\n\\njulia> foreach(i->put!(c, i), 1:3); # add a few entries\\n\\njulia> close(c);                    # `for` loops can exit\\n\\njulia> data = [i for i in c]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3Consider a simple example using channels for inter-task communication. We start 4 tasks to process data from a single jobs channel. Jobs, identified by an id (job_id), are written to the channel. Each task in this simulation reads a job_id, waits for a random amout of time and writes back a tuple of job_id and the simulated time to the results channel. Finally all the results are printed out.julia> const jobs = Channel{Int}(32);\\n\\njulia> const results = Channel{Tuple}(32);\\n\\njulia> function do_work()\\n           for job_id in jobs\\n               exec_time = rand()\\n               sleep(exec_time)                # simulates elapsed time doing actual work\\n                                               # typically performed externally.\\n               put!(results, (job_id, exec_time))\\n           end\\n       end;\\n\\njulia> function make_jobs(n)\\n           for i in 1:n\\n               put!(jobs, i)\\n           end\\n       end;\\n\\njulia> n = 12;\\n\\njulia> @schedule make_jobs(n); # feed the jobs channel with \\\"n\\\" jobs\\n\\njulia> for i in 1:4 # start 4 tasks to process requests in parallel\\n           @schedule do_work()\\n       end\\n\\njulia> @elapsed while n > 0 # print out results\\n           job_id, exec_time = take!(results)\\n           println(\\\"$job_id finished in $(round(exec_time,2)) seconds\\\")\\n           n = n - 1\\n       end\\n4 finished in 0.22 seconds\\n3 finished in 0.45 seconds\\n1 finished in 0.5 seconds\\n7 finished in 0.14 seconds\\n2 finished in 0.78 seconds\\n5 finished in 0.9 seconds\\n9 finished in 0.36 seconds\\n6 finished in 0.87 seconds\\n8 finished in 0.79 seconds\\n10 finished in 0.64 seconds\\n12 finished in 0.5 seconds\\n11 finished in 0.97 seconds\\n0.029772311The current version of Julia multiplexes all tasks onto a single OS thread. Thus, while tasks involving I/O operations benefit from parallel execution, compute bound tasks are effectively executed sequentially on a single OS thread. Future versions of Julia may support scheduling of tasks on multiple threads, in which case compute bound tasks will see benefits of parallel execution too.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Remote-References-and-AbstractChannels-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Remote References and AbstractChannels\",\n    \"category\": \"section\",\n    \"text\": \"Remote references always refer to an implementation of an AbstractChannel.A concrete implementation of an AbstractChannel (like Channel), is required to implement put!(), take!(), fetch(), isready() and wait(). The remote object referred to by a Future is stored in a Channel{Any}(1), i.e., a Channel of size 1 capable of holding objects of Any type.RemoteChannel, which is rewritable, can point to any type and size of channels, or any other implementation of an AbstractChannel.The constructor RemoteChannel(f::Function, pid)() allows us to construct references to channels holding more than one value of a specific type. f() is a function executed on pid and it must return an AbstractChannel.For example, RemoteChannel(()->Channel{Int}(10), pid), will return a reference to a channel of type Int and size 10. The channel exists on worker pid.Methods put!(), take!(), fetch(), isready() and wait() on a RemoteChannel are proxied onto the backing store on the remote process.RemoteChannel can thus be used to refer to user implemented AbstractChannel objects. A simple example of this is provided in examples/dictchannel.jl which uses a dictionary as its remote store.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Channels-and-RemoteChannels-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Channels and RemoteChannels\",\n    \"category\": \"section\",\n    \"text\": \"A Channel is local to a process. Worker 2 cannot directly refer to a Channel on worker 3 and vice-versa. A RemoteChannel, however, can put and take values across workers.\\nA RemoteChannel can be thought of as a handle to a Channel.\\nThe process id, pid, associated with a RemoteChannel identifies the process where the backing store, i.e., the backing Channel exists.\\nAny process with a reference to a RemoteChannel can put and take items from the channel. Data is automatically sent to (or retrieved from) the process a RemoteChannel is associated with.\\nSerializing  a Channel also serializes any data present in the channel. Deserializing it therefore effectively makes a copy of the original object.\\nOn the other hand, serializing a RemoteChannel only involves the serialization of an identifier that identifies the location and instance of Channel referred to by the handle. A deserialized RemoteChannel object (on any worker), therefore also points to the same backing store as the original.The channels example from above can be modified for interprocess communication, as shown below.We start 4 workers to process a single jobs remote channel. Jobs, identified by an id (job_id), are written to the channel. Each remotely executing task in this simulation reads a job_id, waits for a random amount of time and writes back a tuple of job_id, time taken and its own pid to the results channel. Finally all the results are printed out on the master process.julia> addprocs(4); # add worker processes\\n\\njulia> const jobs = RemoteChannel(()->Channel{Int}(32));\\n\\njulia> const results = RemoteChannel(()->Channel{Tuple}(32));\\n\\njulia> @everywhere function do_work(jobs, results) # define work function everywhere\\n           while true\\n               job_id = take!(jobs)\\n               exec_time = rand()\\n               sleep(exec_time) # simulates elapsed time doing actual work\\n               put!(results, (job_id, exec_time, myid()))\\n           end\\n       end\\n\\njulia> function make_jobs(n)\\n           for i in 1:n\\n               put!(jobs, i)\\n           end\\n       end;\\n\\njulia> n = 12;\\n\\njulia> @schedule make_jobs(n); # feed the jobs channel with \\\"n\\\" jobs\\n\\njulia> for p in workers() # start tasks on the workers to process requests in parallel\\n           @async remote_do(do_work, p, jobs, results)\\n       end\\n\\njulia> @elapsed while n > 0 # print out results\\n           job_id, exec_time, where = take!(results)\\n           println(\\\"$job_id finished in $(round(exec_time,2)) seconds on worker $where\\\")\\n           n = n - 1\\n       end\\n1 finished in 0.18 seconds on worker 4\\n2 finished in 0.26 seconds on worker 5\\n6 finished in 0.12 seconds on worker 4\\n7 finished in 0.18 seconds on worker 4\\n5 finished in 0.35 seconds on worker 5\\n4 finished in 0.68 seconds on worker 2\\n3 finished in 0.73 seconds on worker 3\\n11 finished in 0.01 seconds on worker 3\\n12 finished in 0.02 seconds on worker 3\\n9 finished in 0.26 seconds on worker 5\\n8 finished in 0.57 seconds on worker 4\\n10 finished in 0.58 seconds on worker 2\\n0.055971741\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Remote-References-and-Distributed-Garbage-Collection-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Remote References and Distributed Garbage Collection\",\n    \"category\": \"section\",\n    \"text\": \"Objects referred to by remote references can be freed only when all held references in the cluster are deleted.The node where the value is stored keeps track of which of the workers have a reference to it. Every time a RemoteChannel or a (unfetched) Future is serialized to a worker, the node pointed to by the reference is notified. And every time a RemoteChannel or a (unfetched) Future is garbage collected locally, the node owning the value is again notified.The notifications are done via sending of \\\"tracking\\\" messages\u2013an \\\"add reference\\\" message when a reference is serialized to a different process and a \\\"delete reference\\\" message when a reference is locally garbage collected.Since Futures are write-once and cached locally, the act of fetch()ing a Future also updates reference tracking information on the node owning the value.The node which owns the value frees it once all references to it are cleared.With Futures, serializing an already fetched Future to a different node also sends the value since the original remote store may have collected the value by this time.It is important to note that when an object is locally garbage collected depends on the size of the object and the current memory pressure in the system.In case of remote references, the size of the local reference object is quite small, while the value stored on the remote node may be quite large. Since the local object may not be collected immediately, it is a good practice to explicitly call finalize() on local instances of a RemoteChannel, or on unfetched Futures. Since calling fetch() on a Future also removes its reference from the remote store, this is not required on fetched Futures. Explicitly calling finalize() results in an immediate message sent to the remote node to go ahead and remove its reference to the value.Once finalized, a reference becomes invalid and cannot be used in any further calls.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#man-shared-arrays-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Shared Arrays\",\n    \"category\": \"section\",\n    \"text\": \"Shared Arrays use system shared memory to map the same array across many processes. While there are some similarities to a DArray, the behavior of a SharedArray is quite different. In a DArray, each process has local access to just a chunk of the data, and no two processes share the same chunk; in contrast, in a SharedArray each \\\"participating\\\" process has access to the entire array.  A SharedArray is a good choice when you want to have a large amount of data jointly accessible to two or more processes on the same machine.SharedArray indexing (assignment and accessing values) works just as with regular arrays, and is efficient because the underlying memory is available to the local process. Therefore, most algorithms work naturally on SharedArrays, albeit in single-process mode. In cases where an algorithm insists on an Array input, the underlying array can be retrieved from a SharedArray by calling sdata(). For other AbstractArray types, sdata() just returns the object itself, so it's safe to use sdata() on any Array-type object.The constructor for a shared array is of the form:SharedArray{T,N}(dims::NTuple; init=false, pids=Int[])which creates an N-dimensional shared array of a bits type T and size dims across the processes specified by pids. Unlike distributed arrays, a shared array is accessible only from those participating workers specified by the pids named argument (and the creating process too, if it is on the same host).If an init function, of signature initfn(S::SharedArray), is specified, it is called on all the participating workers. You can specify that each worker runs the init function on a distinct portion of the array, thereby parallelizing initialization.Here's a brief example:julia> addprocs(3)\\n3-element Array{Int64,1}:\\n 2\\n 3\\n 4\\n\\njulia> S = SharedArray{Int,2}((3,4), init = S -> S[Base.localindexes(S)] = myid())\\n3\u00d74 SharedArray{Int64,2}:\\n 2  2  3  4\\n 2  3  3  4\\n 2  3  4  4\\n\\njulia> S[3,2] = 7\\n7\\n\\njulia> S\\n3\u00d74 SharedArray{Int64,2}:\\n 2  2  3  4\\n 2  3  3  4\\n 2  7  4  4Base.localindexes() provides disjoint one-dimensional ranges of indexes, and is sometimes convenient for splitting up tasks among processes. You can, of course, divide the work any way you wish:julia> S = SharedArray{Int,2}((3,4), init = S -> S[indexpids(S):length(procs(S)):length(S)] = myid())\\n3\u00d74 SharedArray{Int64,2}:\\n 2  2  2  2\\n 3  3  3  3\\n 4  4  4  4Since all processes have access to the underlying data, you do have to be careful not to set up conflicts. For example:@sync begin\\n    for p in procs(S)\\n        @async begin\\n            remotecall_wait(fill!, p, S, p)\\n        end\\n    end\\nendwould result in undefined behavior. Because each process fills the entire array with its own pid, whichever process is the last to execute (for any particular element of S) will have its pid retained.As a more extended and complex example, consider running the following \\\"kernel\\\" in parallel:q[i,j,t+1] = q[i,j,t] + u[i,j,t]In this case, if we try to split up the work using a one-dimensional index, we are likely to run into trouble: if q[i,j,t] is near the end of the block assigned to one worker and q[i,j,t+1] is near the beginning of the block assigned to another, it's very likely that q[i,j,t] will not be ready at the time it's needed for computing q[i,j,t+1]. In such cases, one is better off chunking the array manually. Let's split along the second dimension. Define a function that returns the (irange, jrange) indexes assigned to this worker:julia> @everywhere function myrange(q::SharedArray)\\n           idx = indexpids(q)\\n           if idx == 0 # This worker is not assigned a piece\\n               return 1:0, 1:0\\n           end\\n           nchunks = length(procs(q))\\n           splits = [round(Int, s) for s in linspace(0,size(q,2),nchunks+1)]\\n           1:size(q,1), splits[idx]+1:splits[idx+1]\\n       endNext, define the kernel:julia> @everywhere function advection_chunk!(q, u, irange, jrange, trange)\\n           @show (irange, jrange, trange)  # display so we can see what's happening\\n           for t in trange, j in jrange, i in irange\\n               q[i,j,t+1] = q[i,j,t] + u[i,j,t]\\n           end\\n           q\\n       endWe also define a convenience wrapper for a SharedArray implementationjulia> @everywhere advection_shared_chunk!(q, u) =\\n           advection_chunk!(q, u, myrange(q)..., 1:size(q,3)-1)Now let's compare three different versions, one that runs in a single process:julia> advection_serial!(q, u) = advection_chunk!(q, u, 1:size(q,1), 1:size(q,2), 1:size(q,3)-1);one that uses @parallel:julia> function advection_parallel!(q, u)\\n           for t = 1:size(q,3)-1\\n               @sync @parallel for j = 1:size(q,2)\\n                   for i = 1:size(q,1)\\n                       q[i,j,t+1]= q[i,j,t] + u[i,j,t]\\n                   end\\n               end\\n           end\\n           q\\n       end;and one that delegates in chunks:julia> function advection_shared!(q, u)\\n           @sync begin\\n               for p in procs(q)\\n                   @async remotecall_wait(advection_shared_chunk!, p, q, u)\\n               end\\n           end\\n           q\\n       end;If we create SharedArrays and time these functions, we get the following results (with julia -p 4):julia> q = SharedArray{Float64,3}((500,500,500));\\n\\njulia> u = SharedArray{Float64,3}((500,500,500));Run the functions once to JIT-compile and @time them on the second run:julia> @time advection_serial!(q, u);\\n(irange,jrange,trange) = (1:500,1:500,1:499)\\n 830.220 milliseconds (216 allocations: 13820 bytes)\\n\\njulia> @time advection_parallel!(q, u);\\n   2.495 seconds      (3999 k allocations: 289 MB, 2.09% gc time)\\n\\njulia> @time advection_shared!(q,u);\\n        From worker 2:       (irange,jrange,trange) = (1:500,1:125,1:499)\\n        From worker 4:       (irange,jrange,trange) = (1:500,251:375,1:499)\\n        From worker 3:       (irange,jrange,trange) = (1:500,126:250,1:499)\\n        From worker 5:       (irange,jrange,trange) = (1:500,376:500,1:499)\\n 238.119 milliseconds (2264 allocations: 169 KB)The biggest advantage of advection_shared! is that it minimizes traffic among the workers, allowing each to compute for an extended time on the assigned piece.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Shared-Arrays-and-Distributed-Garbage-Collection-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Shared Arrays and Distributed Garbage Collection\",\n    \"category\": \"section\",\n    \"text\": \"Like remote references, shared arrays are also dependent on garbage collection on the creating node to release references from all participating workers. Code which creates many short lived shared array objects would benefit from explicitly finalizing these objects as soon as possible. This results in both memory and file handles mapping the shared segment being released sooner.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#ClusterManagers-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"ClusterManagers\",\n    \"category\": \"section\",\n    \"text\": \"The launching, management and networking of Julia processes into a logical cluster is done via cluster managers. A ClusterManager is responsible forlaunching worker processes in a cluster environment\\nmanaging events during the lifetime of each worker\\noptionally, providing data transportA Julia cluster has the following characteristics:The initial Julia process, also called the master, is special and has an id of 1.\\nOnly the master process can add or remove worker processes.\\nAll processes can directly communicate with each other.Connections between workers (using the in-built TCP/IP transport) is established in the following manner:addprocs() is called on the master process with a ClusterManager object.\\naddprocs() calls the appropriate launch() method which spawns required number of worker processes on appropriate machines.\\nEach worker starts listening on a free port and writes out its host and port information to STDOUT.\\nThe cluster manager captures the STDOUT of each worker and makes it available to the master process.\\nThe master process parses this information and sets up TCP/IP connections to each worker.\\nEvery worker is also notified of other workers in the cluster.\\nEach worker connects to all workers whose id is less than the worker's own id.\\nIn this way a mesh network is established, wherein every worker is directly connected with every other worker.While the default transport layer uses plain TCPSocket, it is possible for a Julia cluster to provide its own transport.Julia provides two in-built cluster managers:LocalManager, used when addprocs() or addprocs(np::Integer) are called\\nSSHManager, used when addprocs(hostnames::Array) is called with a list of hostnamesLocalManager is used to launch additional workers on the same host, thereby leveraging multi-core and multi-processor hardware.Thus, a minimal cluster manager would need to:be a subtype of the abstract ClusterManager\\nimplement launch(), a method responsible for launching new workers\\nimplement manage(), which is called at various events during a worker's lifetime (for example, sending an interrupt signal)addprocs(manager::FooManager) requires FooManager to implement:function launch(manager::FooManager, params::Dict, launched::Array, c::Condition)\\n    [...]\\nend\\n\\nfunction manage(manager::FooManager, id::Integer, config::WorkerConfig, op::Symbol)\\n    [...]\\nendAs an example let us see how the LocalManager, the manager responsible for starting workers on the same host, is implemented:struct LocalManager <: ClusterManager\\n    np::Integer\\nend\\n\\nfunction launch(manager::LocalManager, params::Dict, launched::Array, c::Condition)\\n    [...]\\nend\\n\\nfunction manage(manager::LocalManager, id::Integer, config::WorkerConfig, op::Symbol)\\n    [...]\\nendThe launch() method takes the following arguments:manager::ClusterManager: the cluster manager that addprocs() is called with\\nparams::Dict: all the keyword arguments passed to addprocs()\\nlaunched::Array: the array to append one or more WorkerConfig objects to\\nc::Condition: the condition variable to be notified as and when workers are launchedThe launch() method is called asynchronously in a separate task. The termination of this task signals that all requested workers have been launched. Hence the launch() function MUST exit as soon as all the requested workers have been launched.Newly launched workers are connected to each other, and the master process, in an all-to-all manner. Specifying the command argument --worker <cookie> results in the launched processes initializing themselves as workers and connections being set up via TCP/IP sockets. Optionally, --bind-to bind_addr[:port] may also be specified to enable other workers to connect to it at the specified bind_addr and port. This is useful for multi-homed hosts.As an example of a non-TCP/IP transport, an implementation may choose to use MPI, in which case --worker must NOT be specified. Instead, newly launched workers should call init_worker(cookie) before using any of the parallel constructs.For every worker launched, the launch() method must add a WorkerConfig object (with appropriate fields initialized) to launchedmutable struct WorkerConfig\\n    # Common fields relevant to all cluster managers\\n    io::Nullable{IO}\\n    host::Nullable{AbstractString}\\n    port::Nullable{Integer}\\n\\n    # Used when launching additional workers at a host\\n    count::Nullable{Union{Int, Symbol}}\\n    exename::Nullable{AbstractString}\\n    exeflags::Nullable{Cmd}\\n\\n    # External cluster managers can use this to store information at a per-worker level\\n    # Can be a dict if multiple fields need to be stored.\\n    userdata::Nullable{Any}\\n\\n    # SSHManager / SSH tunnel connections to workers\\n    tunnel::Nullable{Bool}\\n    bind_addr::Nullable{AbstractString}\\n    sshflags::Nullable{Cmd}\\n    max_parallel::Nullable{Integer}\\n\\n    connect_at::Nullable{Any}\\n\\n    [...]\\nendMost of the fields in WorkerConfig are used by the inbuilt managers. Custom cluster managers would typically specify only io or host / port:If io is specified, it is used to read host/port information. A Julia worker prints out its bind address and port at startup. This allows Julia workers to listen on any free port available instead of requiring worker ports to be configured manually.\\nIf io is not specified, host and port are used to connect.\\ncount, exename and exeflags are relevant for launching additional workers from a worker. For example, a cluster manager may launch a single worker per node, and use that to launch additional workers.\\ncount with an integer value n will launch a total of n workers.\\ncount with a value of :auto will launch as many workers as the number of cores on that machine.\\nexename is the name of the julia executable including the full path.\\nexeflags should be set to the required command line arguments for new workers.\\ntunnel, bind_addr, sshflags and max_parallel are used when a ssh tunnel is required to connect to the workers from the master process.\\nuserdata is provided for custom cluster managers to store their own worker-specific information.manage(manager::FooManager, id::Integer, config::WorkerConfig, op::Symbol) is called at different times during the worker's lifetime with appropriate op values:with :register/:deregister when a worker is added / removed from the Julia worker pool.\\nwith :interrupt when interrupt(workers) is called. The ClusterManager should signal the appropriate worker with an interrupt signal.\\nwith :finalize for cleanup purposes.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Cluster-Managers-with-Custom-Transports-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Cluster Managers with Custom Transports\",\n    \"category\": \"section\",\n    \"text\": \"Replacing the default TCP/IP all-to-all socket connections with a custom transport layer is a little more involved. Each Julia process has as many communication tasks as the workers it is connected to. For example, consider a Julia cluster of 32 processes in an all-to-all mesh network:Each Julia process thus has 31 communication tasks.\\nEach task handles all incoming messages from a single remote worker in a message-processing loop.\\nThe message-processing loop waits on an IO object (for example, a TCPSocket in the default implementation), reads an entire message, processes it and waits for the next one.\\nSending messages to a process is done directly from any Julia task\u2013not just communication tasks\u2013again, via the appropriate IO object.Replacing the default transport requires the new implementation to set up connections to remote workers and to provide appropriate IO objects that the message-processing loops can wait on. The manager-specific callbacks to be implemented are:connect(manager::FooManager, pid::Integer, config::WorkerConfig)\\nkill(manager::FooManager, pid::Int, config::WorkerConfig)The default implementation (which uses TCP/IP sockets) is implemented as connect(manager::ClusterManager, pid::Integer, config::WorkerConfig).connect should return a pair of IO objects, one for reading data sent from worker pid, and the other to write data that needs to be sent to worker pid. Custom cluster managers can use an in-memory BufferStream as the plumbing to proxy data between the custom, possibly non-IO transport and Julia's in-built parallel infrastructure.A BufferStream is an in-memory IOBuffer which behaves like an IO\u2013it is a stream which can be handled asynchronously.Folder examples/clustermanager/0mq contains an example of using ZeroMQ to connect Julia workers in a star topology with a 0MQ broker in the middle. Note: The Julia processes are still all logically connected to each other\u2013any worker can message any other worker directly without any awareness of 0MQ being used as the transport layer.When using custom transports:Julia workers must NOT be started with --worker. Starting with --worker will result in the newly launched workers defaulting to the TCP/IP socket transport implementation.\\nFor every incoming logical connection with a worker, Base.process_messages(rd::IO, wr::IO)() must be called. This launches a new task that handles reading and writing of messages from/to the worker represented by the IO objects.\\ninit_worker(cookie, manager::FooManager) MUST be called as part of worker process initialization.\\nField connect_at::Any in WorkerConfig can be set by the cluster manager when launch() is called. The value of this field is passed in in all connect() callbacks. Typically, it carries information on how to connect to a worker. For example, the TCP/IP socket transport uses this field to specify the (host, port) tuple at which to connect to a worker.kill(manager, pid, config) is called to remove a worker from the cluster. On the master process, the corresponding IO objects must be closed by the implementation to ensure proper cleanup. The default implementation simply executes an exit() call on the specified remote worker.examples/clustermanager/simple is an example that shows a simple implementation using UNIX domain sockets for cluster setup.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Network-Requirements-for-LocalManager-and-SSHManager-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Network Requirements for LocalManager and SSHManager\",\n    \"category\": \"section\",\n    \"text\": \"Julia clusters are designed to be executed on already secured environments on infrastructure such as local laptops, departmental clusters, or even the cloud. This section covers network security requirements for the inbuilt LocalManager and SSHManager:The master process does not listen on any port. It only connects out to the workers.\\nEach worker binds to only one of the local interfaces and listens on the first free port starting from 9009.\\nLocalManager, used by addprocs(N), by default binds only to the loopback interface. This means that workers started later on remote hosts (or by anyone with malicious intentions) are unable to connect to the cluster. An addprocs(4) followed by an addprocs([\\\"remote_host\\\"]) will fail. Some users may need to create a cluster comprising their local system and a few remote systems. This can be done by explicitly requesting LocalManager to bind to an external network interface via the restrict keyword argument: addprocs(4; restrict=false).\\nSSHManager, used by addprocs(list_of_remote_hosts), launches workers on remote hosts via SSH. By default SSH is only used to launch Julia workers. Subsequent master-worker and worker-worker connections use plain, unencrypted TCP/IP sockets. The remote hosts must have passwordless login enabled. Additional SSH flags or credentials may be specified via keyword argument sshflags.\\naddprocs(list_of_remote_hosts; tunnel=true, sshflags=<ssh keys and other flags>) is useful when we wish to use SSH connections for master-worker too. A typical scenario for this is a local laptop running the Julia REPL (i.e., the master) with the rest of the cluster on the cloud, say on Amazon EC2. In this case only port 22 needs to be opened at the remote cluster coupled with SSH client authenticated via public key infrastructure (PKI). Authentication credentials can be supplied via sshflags, for example sshflags=`-e <keyfile>`.\\nNote that worker-worker connections are still plain TCP and the local security policy on the remote cluster must allow for free connections between worker nodes, at least for ports 9009 and above.\\nSecuring and encrypting all worker-worker traffic (via SSH) or encrypting individual messages can be done via a custom ClusterManager.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Cluster-Cookie-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Cluster Cookie\",\n    \"category\": \"section\",\n    \"text\": \"All processes in a cluster share the same cookie which, by default, is a randomly generated string on the master process:Base.cluster_cookie() returns the cookie, while Base.cluster_cookie(cookie)() sets it and returns the new cookie.\\nAll connections are authenticated on both sides to ensure that only workers started by the master are allowed to connect to each other.\\nThe cookie must be passed to the workers at startup via argument --worker <cookie>. Custom ClusterManagers can retrieve the cookie on the master by calling Base.cluster_cookie(). Cluster managers not using the default TCP/IP transport (and hence not specifying --worker) must call init_worker(cookie, manager) with the same cookie as on the master.Note that environments requiring higher levels of security can implement this via a custom ClusterManager. For example, cookies can be pre-shared and hence not specified as a startup argument.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Specifying-Network-Topology-(Experimental)-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Specifying Network Topology (Experimental)\",\n    \"category\": \"section\",\n    \"text\": \"The keyword argument topology passed to addprocs is used to specify how the workers must be connected to each other::all_to_all, the default: all workers are connected to each other.\\n:master_slave: only the driver process, i.e. pid 1, has connections to the workers.\\n:custom: the launch method of the cluster manager specifies the connection topology via the fields ident and connect_idents in WorkerConfig. A worker with a cluster-manager-provided identity ident will connect to all workers specified in connect_idents.Currently, sending a message between unconnected workers results in an error. This behaviour, as with the functionality and interface, should be considered experimental in nature and may change in future releases.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Multi-Threading-(Experimental)-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Multi-Threading (Experimental)\",\n    \"category\": \"section\",\n    \"text\": \"In addition to tasks, remote calls, and remote references, Julia from v0.5 forwards will natively support multi-threading. Note that this section is experimental and the interfaces may change in the future.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#Setup-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"Setup\",\n    \"category\": \"section\",\n    \"text\": \"By default, Julia starts up with a single thread of execution. This can be verified by using the command Threads.nthreads():julia> Threads.nthreads()\\n1The number of threads Julia starts up with is controlled by an environment variable called JULIA_NUM_THREADS. Now, let's start up Julia with 4 threads:export JULIA_NUM_THREADS=4(The above command works on bourne shells on Linux and OSX. Note that if you're using a C shell on these platforms, you should use the keyword set instead of export. If you're on Windows, start up the command line in the location of julia.exe and use set instead of export.)Let's verify there are 4 threads at our disposal.julia> Threads.nthreads()\\n4But we are currently on the master thread. To check, we use the command Threads.threadid()julia> Threads.threadid()\\n1\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#The-@threads-Macro-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"The @threads Macro\",\n    \"category\": \"section\",\n    \"text\": \"Let's work a simple example using our native threads. Let us create an array of zeros:julia> a = zeros(10)\\n10-element Array{Float64,1}:\\n 0.0\\n 0.0\\n 0.0\\n 0.0\\n 0.0\\n 0.0\\n 0.0\\n 0.0\\n 0.0\\n 0.0Let us operate on this array simultaneously using 4 threads. We'll have each thread write its thread ID into each location.Julia supports parallel loops using the Threads.@threads macro. This macro is affixed in front of a for loop to indicate to Julia that the loop is a multi-threaded region:julia> Threads.@threads for i = 1:10\\n           a[i] = Threads.threadid()\\n       endThe iteration space is split amongst the threads, after which each thread writes its thread ID to its assigned locations:julia> a\\n10-element Array{Float64,1}:\\n 1.0\\n 1.0\\n 1.0\\n 2.0\\n 2.0\\n 2.0\\n 3.0\\n 3.0\\n 4.0\\n 4.0Note that Threads.@threads does not have an optional reduction parameter like @parallel.\"\n},\n\n{\n    \"location\": \"manual/parallel-computing.html#@threadcall-(Experimental)-1\",\n    \"page\": \"Parallel Computing\",\n    \"title\": \"@threadcall (Experimental)\",\n    \"category\": \"section\",\n    \"text\": \"All I/O tasks, timers, REPL commands, etc are multiplexed onto a single OS thread via an event loop. A patched version of libuv (http://docs.libuv.org/en/v1.x/) provides this functionality. Yield points provide for co-operatively scheduling multiple tasks onto the same OS thread. I/O tasks and timers yield implicitly while waiting for the event to occur. Calling yield() explicitly allows for other tasks to be scheduled.Thus, a task executing a ccall effectively prevents the Julia scheduler from executing any other tasks till the call returns. This is true for all calls into external libraries. Exceptions are calls into custom C code that call back into Julia (which may then yield) or C code that calls jl_yield() (C equivalent of yield()).Note that while Julia code runs on a single thread (by default), libraries used by Julia may launch their own internal threads. For example, the BLAS library may start as many threads as there are cores on a machine.The @threadcall macro addresses scenarios where we do not want a ccall to block the main Julia event loop. It schedules a C function for execution in a separate thread. A threadpool with a default size of 4 is used for this. The size of the threadpool is controlled via environment variable UV_THREADPOOL_SIZE. While waiting for a free thread, and during function execution once a thread is available, the requesting task (on the main Julia event loop) yields to other tasks. Note that @threadcall does not return till the execution is complete. From a user point of view, it is therefore a blocking call like other Julia APIs.It is very important that the called function does not call back into Julia.@threadcall may be removed/changed in future versions of Julia.[1]: In this context, MPI refers to the MPI-1 standard. Beginning with MPI-2, the MPI standards committee introduced a new set of communication mechanisms, collectively referred to as Remote Memory Access (RMA). The motivation for adding RMA to the MPI standard was to facilitate one-sided communication patterns. For additional information on the latest MPI standard, see http://mpi-forum.org/docs.\"\n},\n\n{\n    \"location\": \"manual/dates.html#\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Date and DateTime\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/dates.html#Date-and-DateTime-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Date and DateTime\",\n    \"category\": \"section\",\n    \"text\": \"CurrentModule = Base.DatesThe Dates module provides two types for working with dates: Date and DateTime, representing day and millisecond precision, respectively; both are subtypes of the abstract TimeType. The motivation for distinct types is simple: some operations are much simpler, both in terms of code and mental reasoning, when the complexities of greater precision don't have to be dealt with. For example, since the Date type only resolves to the precision of a single date (i.e. no hours, minutes, or seconds), normal considerations for time zones, daylight savings/summer time, and leap seconds are unnecessary and avoided.Both Date and DateTime are basically immutable Int64 wrappers. The single instant field of either type is actually a UTInstant{P} type, which represents a continuously increasing machine timeline based on the UT second [1]. The DateTime type is not aware of time zones (naive, in Python parlance), analogous to a LocalDateTime in Java 8. Additional time zone functionality can be added through the TimeZones.jl package, which compiles the IANA time zone database. Both Date and DateTime are based on the ISO 8601 standard, which follows the proleptic Gregorian calendar. One note is that the ISO 8601 standard is particular about BC/BCE dates. In general, the last day of the BC/BCE era, 1-12-31 BC/BCE, was followed by 1-1-1 AD/CE, thus no year zero exists. The ISO standard, however, states that 1 BC/BCE is year zero, so 0000-12-31 is the day before 0001-01-01, and year -0001 (yes, negative one for the year) is 2 BC/BCE, year -0002 is 3 BC/BCE, etc.[1]: The notion of the UT second is actually quite fundamental. There are basically two different notions of time generally accepted, one based on the physical rotation of the earth (one full rotation = 1 day), the other based on the SI second (a fixed, constant value). These are radically different! Think about it, a \\\"UT second\\\", as defined relative to the rotation of the earth, may have a different absolute length depending on the day! Anyway, the fact that Date and DateTime are based on UT seconds is a simplifying, yet honest assumption so that things like leap seconds and all their complexity can be avoided. This basis of time is formally called UT or UT1. Basing types on the UT second basically means that every minute has 60 seconds and every day has 24 hours and leads to more natural calculations when working with calendar dates.\"\n},\n\n{\n    \"location\": \"manual/dates.html#Constructors-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Constructors\",\n    \"category\": \"section\",\n    \"text\": \"Date and DateTime types can be constructed by integer or Period types, by parsing, or through adjusters (more on those later):julia> DateTime(2013)\\n2013-01-01T00:00:00\\n\\njulia> DateTime(2013,7)\\n2013-07-01T00:00:00\\n\\njulia> DateTime(2013,7,1)\\n2013-07-01T00:00:00\\n\\njulia> DateTime(2013,7,1,12)\\n2013-07-01T12:00:00\\n\\njulia> DateTime(2013,7,1,12,30)\\n2013-07-01T12:30:00\\n\\njulia> DateTime(2013,7,1,12,30,59)\\n2013-07-01T12:30:59\\n\\njulia> DateTime(2013,7,1,12,30,59,1)\\n2013-07-01T12:30:59.001\\n\\njulia> Date(2013)\\n2013-01-01\\n\\njulia> Date(2013,7)\\n2013-07-01\\n\\njulia> Date(2013,7,1)\\n2013-07-01\\n\\njulia> Date(Dates.Year(2013),Dates.Month(7),Dates.Day(1))\\n2013-07-01\\n\\njulia> Date(Dates.Month(7),Dates.Year(2013))\\n2013-07-01Date or DateTime parsing is accomplished by the use of format strings. Format strings work by the notion of defining delimited or fixed-width \\\"slots\\\" that contain a period to parse and passing the text to parse and format string to a Date or DateTime constructor, of the form Date(\\\"2015-01-01\\\",\\\"y-m-d\\\") or DateTime(\\\"20150101\\\",\\\"yyyymmdd\\\").Delimited slots are marked by specifying the delimiter the parser should expect between two subsequent periods; so \\\"y-m-d\\\" lets the parser know that between the first and second slots in a date string like \\\"2014-07-16\\\", it should find the - character. The y, m, and d characters let the parser know which periods to parse in each slot.Fixed-width slots are specified by repeating the period character the number of times corresponding to the width with no delimiter between characters. So \\\"yyyymmdd\\\" would correspond to a date string like \\\"20140716\\\". The parser distinguishes a fixed-width slot by the absence of a delimiter, noting the transition \\\"yyyymm\\\" from one period character to the next.Support for text-form month parsing is also supported through the u and U characters, for abbreviated and full-length month names, respectively. By default, only English month names are supported, so u corresponds to \\\"Jan\\\", \\\"Feb\\\", \\\"Mar\\\", etc. And U corresponds to \\\"January\\\", \\\"February\\\", \\\"March\\\", etc. Similar to other name=>value mapping functions dayname() and monthname(), custom locales can be loaded by passing in the locale=>Dict{String,Int} mapping to the MONTHTOVALUEABBR and MONTHTOVALUE dicts for abbreviated and full-name month names, respectively.One note on parsing performance: using the Date(date_string,format_string) function is fine if only called a few times. If there are many similarly formatted date strings to parse however, it is much more efficient to first create a Dates.DateFormat, and pass it instead of a raw format string.julia> df = DateFormat(\\\"y-m-d\\\");\\n\\njulia> dt = Date(\\\"2015-01-01\\\",df)\\n2015-01-01\\n\\njulia> dt2 = Date(\\\"2015-01-02\\\",df)\\n2015-01-02You can also use the dateformat\\\"\\\" string macro. This macro creates the DateFormat object once when the macro is expanded and uses the same DateFormat object even if a code snippet is run multiple times.julia> for i = 1:10^5\\n           Date(\\\"2015-01-01\\\", dateformat\\\"y-m-d\\\")\\n       endA full suite of parsing and formatting tests and examples is available in tests/dates/io.jl.\"\n},\n\n{\n    \"location\": \"manual/dates.html#Durations/Comparisons-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Durations/Comparisons\",\n    \"category\": \"section\",\n    \"text\": \"Finding the length of time between two Date or DateTime is straightforward given their underlying representation as UTInstant{Day} and UTInstant{Millisecond}, respectively. The difference between Date is returned in the number of Day, and DateTime in the number of Millisecond. Similarly, comparing TimeType is a simple matter of comparing the underlying machine instants (which in turn compares the internal Int64 values).julia> dt = Date(2012,2,29)\\n2012-02-29\\n\\njulia> dt2 = Date(2000,2,1)\\n2000-02-01\\n\\njulia> dump(dt)\\nDate\\n  instant: Base.Dates.UTInstant{Base.Dates.Day}\\n    periods: Base.Dates.Day\\n      value: Int64 734562\\n\\njulia> dump(dt2)\\nDate\\n  instant: Base.Dates.UTInstant{Base.Dates.Day}\\n    periods: Base.Dates.Day\\n      value: Int64 730151\\n\\njulia> dt > dt2\\ntrue\\n\\njulia> dt != dt2\\ntrue\\n\\njulia> dt + dt2\\nERROR: MethodError: no method matching +(::Date, ::Date)\\n[...]\\n\\njulia> dt * dt2\\nERROR: MethodError: no method matching *(::Date, ::Date)\\n[...]\\n\\njulia> dt / dt2\\nERROR: MethodError: no method matching /(::Date, ::Date)\\n[...]\\n\\njulia> dt - dt2\\n4411 days\\n\\njulia> dt2 - dt\\n-4411 days\\n\\njulia> dt = DateTime(2012,2,29)\\n2012-02-29T00:00:00\\n\\njulia> dt2 = DateTime(2000,2,1)\\n2000-02-01T00:00:00\\n\\njulia> dt - dt2\\n381110400000 milliseconds\"\n},\n\n{\n    \"location\": \"manual/dates.html#Accessor-Functions-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Accessor Functions\",\n    \"category\": \"section\",\n    \"text\": \"Because the Date and DateTime types are stored as single Int64 values, date parts or fields can be retrieved through accessor functions. The lowercase accessors return the field as an integer:julia> t = Date(2014, 1, 31)\\n2014-01-31\\n\\njulia> Dates.year(t)\\n2014\\n\\njulia> Dates.month(t)\\n1\\n\\njulia> Dates.week(t)\\n5\\n\\njulia> Dates.day(t)\\n31While propercase return the same value in the corresponding Period type:julia> Dates.Year(t)\\n2014 years\\n\\njulia> Dates.Day(t)\\n31 daysCompound methods are provided, as they provide a measure of efficiency if multiple fields are needed at the same time:julia> Dates.yearmonth(t)\\n(2014, 1)\\n\\njulia> Dates.monthday(t)\\n(1, 31)\\n\\njulia> Dates.yearmonthday(t)\\n(2014, 1, 31)One may also access the underlying UTInstant or integer value:julia> dump(t)\\nDate\\n  instant: Base.Dates.UTInstant{Base.Dates.Day}\\n    periods: Base.Dates.Day\\n      value: Int64 735264\\n\\njulia> t.instant\\nBase.Dates.UTInstant{Base.Dates.Day}(735264 days)\\n\\njulia> Dates.value(t)\\n735264\"\n},\n\n{\n    \"location\": \"manual/dates.html#Query-Functions-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Query Functions\",\n    \"category\": \"section\",\n    \"text\": \"Query functions provide calendrical information about a TimeType. They include information about the day of the week:julia> t = Date(2014, 1, 31)\\n2014-01-31\\n\\njulia> Dates.dayofweek(t)\\n5\\n\\njulia> Dates.dayname(t)\\n\\\"Friday\\\"\\n\\njulia> Dates.dayofweekofmonth(t) # 5th Friday of January\\n5Month of the year:julia> Dates.monthname(t)\\n\\\"January\\\"\\n\\njulia> Dates.daysinmonth(t)\\n31As well as information about the TimeType's year and quarter:julia> Dates.isleapyear(t)\\nfalse\\n\\njulia> Dates.dayofyear(t)\\n31\\n\\njulia> Dates.quarterofyear(t)\\n1\\n\\njulia> Dates.dayofquarter(t)\\n31The dayname() and monthname() methods can also take an optional locale keyword that can be used to return the name of the day or month of the year for other languages/locales. There are also versions of these functions returning the abbreviated names, namely dayabbr() and monthabbr(). First the mapping is loaded into the LOCALES variable:julia> french_months = [\\\"janvier\\\", \\\"f\u00e9vrier\\\", \\\"mars\\\", \\\"avril\\\", \\\"mai\\\", \\\"juin\\\",\\n                        \\\"juillet\\\", \\\"ao\u00fbt\\\", \\\"septembre\\\", \\\"octobre\\\", \\\"novembre\\\", \\\"d\u00e9cembre\\\"];\\n\\njulia> french_monts_abbrev = [\\\"janv\\\",\\\"f\u00e9vr\\\",\\\"mars\\\",\\\"avril\\\",\\\"mai\\\",\\\"juin\\\",\\n                              \\\"juil\\\",\\\"ao\u00fbt\\\",\\\"sept\\\",\\\"oct\\\",\\\"nov\\\",\\\"d\u00e9c\\\"];\\n\\njulia> french_days = [\\\"lundi\\\",\\\"mardi\\\",\\\"mercredi\\\",\\\"jeudi\\\",\\\"vendredi\\\",\\\"samedi\\\",\\\"dimanche\\\"];\\n\\njulia> Dates.LOCALES[\\\"french\\\"] = Dates.DateLocale(french_months, french_monts_abbrev, french_days, [\\\"\\\"]);The above mentioned functions can then be used to perform the queries:julia> Dates.dayname(t;locale=\\\"french\\\")\\n\\\"vendredi\\\"\\n\\njulia> Dates.monthname(t;locale=\\\"french\\\")\\n\\\"janvier\\\"\\n\\njulia> Dates.monthabbr(t;locale=\\\"french\\\")\\n\\\"janv\\\"Since the abbreviated versions of the days are not loaded, trying to use the function dayabbr() will error.julia> Dates.dayabbr(t;locale=\\\"french\\\")\\nERROR: BoundsError: attempt to access 1-element Array{String,1} at index [5]\\nStacktrace:\\n [1] #dayabbr#6(::String, ::Function, ::Int64) at ./dates/query.jl:114\\n [2] (::Base.Dates.#kw##dayabbr)(::Array{Any,1}, ::Base.Dates.#dayabbr, ::Int64) at ./<missing>:0 (repeats 2 times)\"\n},\n\n{\n    \"location\": \"manual/dates.html#TimeType-Period-Arithmetic-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"TimeType-Period Arithmetic\",\n    \"category\": \"section\",\n    \"text\": \"It's good practice when using any language/date framework to be familiar with how date-period arithmetic is handled as there are some tricky issues to deal with (though much less so for day-precision types).The Dates module approach tries to follow the simple principle of trying to change as little as possible when doing Period arithmetic. This approach is also often known as calendrical arithmetic or what you would probably guess if someone were to ask you the same calculation in a conversation. Why all the fuss about this? Let's take a classic example: add 1 month to January 31st, 2014. What's the answer? Javascript will say March 3 (assumes 31 days). PHP says March 2 (assumes 30 days). The fact is, there is no right answer. In the Dates module, it gives the result of February 28th. How does it figure that out? I like to think of the classic 7-7-7 gambling game in casinos.Now just imagine that instead of 7-7-7, the slots are Year-Month-Day, or in our example, 2014-01-31. When you ask to add 1 month to this date, the month slot is incremented, so now we have 2014-02-31. Then the day number is checked if it is greater than the last valid day of the new month; if it is (as in the case above), the day number is adjusted down to the last valid day (28). What are the ramifications with this approach? Go ahead and add another month to our date, 2014-02-28 + Month(1) == 2014-03-28. What? Were you expecting the last day of March? Nope, sorry, remember the 7-7-7 slots. As few slots as possible are going to change, so we first increment the month slot by 1, 2014-03-28, and boom, we're done because that's a valid date. On the other hand, if we were to add 2 months to our original date, 2014-01-31, then we end up with 2014-03-31, as expected. The other ramification of this approach is a loss in associativity when a specific ordering is forced (i.e. adding things in different orders results in different outcomes). For example:julia> (Date(2014,1,29)+Dates.Day(1)) + Dates.Month(1)\\n2014-02-28\\n\\njulia> (Date(2014,1,29)+Dates.Month(1)) + Dates.Day(1)\\n2014-03-01What's going on there? In the first line, we're adding 1 day to January 29th, which results in 2014-01-30; then we add 1 month, so we get 2014-02-30, which then adjusts down to 2014-02-28. In the second example, we add 1 month first, where we get 2014-02-29, which adjusts down to 2014-02-28, and then add 1 day, which results in 2014-03-01. One design principle that helps in this case is that, in the presence of multiple Periods, the operations will be ordered by the Periods' types, not their value or positional order; this means Year will always be added first, then Month, then Week, etc. Hence the following does result in associativity and Just Works:julia> Date(2014,1,29) + Dates.Day(1) + Dates.Month(1)\\n2014-03-01\\n\\njulia> Date(2014,1,29) + Dates.Month(1) + Dates.Day(1)\\n2014-03-01Tricky? Perhaps. What is an innocent Dates user to do? The bottom line is to be aware that explicitly forcing a certain associativity, when dealing with months, may lead to some unexpected results, but otherwise, everything should work as expected. Thankfully, that's pretty much the extent of the odd cases in date-period arithmetic when dealing with time in UT (avoiding the \\\"joys\\\" of dealing with daylight savings, leap seconds, etc.).As a bonus, all period arithmetic objects work directly with ranges:julia> dr = Date(2014,1,29):Date(2014,2,3)\\n2014-01-29:1 day:2014-02-03\\n\\njulia> collect(dr)\\n6-element Array{Date,1}:\\n 2014-01-29\\n 2014-01-30\\n 2014-01-31\\n 2014-02-01\\n 2014-02-02\\n 2014-02-03\\n\\njulia> dr = Date(2014,1,29):Dates.Month(1):Date(2014,07,29)\\n2014-01-29:1 month:2014-07-29\\n\\njulia> collect(dr)\\n7-element Array{Date,1}:\\n 2014-01-29\\n 2014-02-28\\n 2014-03-29\\n 2014-04-29\\n 2014-05-29\\n 2014-06-29\\n 2014-07-29\"\n},\n\n{\n    \"location\": \"manual/dates.html#Adjuster-Functions-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Adjuster Functions\",\n    \"category\": \"section\",\n    \"text\": \"As convenient as date-period arithmetics are, often the kinds of calculations needed on dates take on a calendrical or temporal nature rather than a fixed number of periods. Holidays are a perfect example; most follow rules such as \\\"Memorial Day = Last Monday of May\\\", or \\\"Thanksgiving = 4th Thursday of November\\\". These kinds of temporal expressions deal with rules relative to the calendar, like first or last of the month, next Tuesday, or the first and third Wednesdays, etc.The Dates module provides the adjuster API through several convenient methods that aid in simply and succinctly expressing temporal rules. The first group of adjuster methods deal with the first and last of weeks, months, quarters, and years. They each take a single TimeType as input and return or adjust to the first or last of the desired period relative to the input.julia> Dates.firstdayofweek(Date(2014,7,16)) # Adjusts the input to the Monday of the input's week\\n2014-07-14\\n\\njulia> Dates.lastdayofmonth(Date(2014,7,16)) # Adjusts to the last day of the input's month\\n2014-07-31\\n\\njulia> Dates.lastdayofquarter(Date(2014,7,16)) # Adjusts to the last day of the input's quarter\\n2014-09-30The next two higher-order methods, tonext(), and toprev(), generalize working with temporal expressions by taking a DateFunction as first argument, along with a starting TimeType. A DateFunction is just a function, usually anonymous, that takes a single TimeType as input and returns a Bool, true indicating a satisfied adjustment criterion. For example:julia> istuesday = x->Dates.dayofweek(x) == Dates.Tuesday # Returns true if the day of the week of x is Tuesday\\n(::#1) (generic function with 1 method)\\n\\njulia> Dates.tonext(istuesday, Date(2014,7,13)) # 2014-07-13 is a Sunday\\n2014-07-15\\n\\njulia> Dates.tonext(Date(2014,7,13), Dates.Tuesday) # Convenience method provided for day of the week adjustments\\n2014-07-15This is useful with the do-block syntax for more complex temporal expressions:julia> Dates.tonext(Date(2014,7,13)) do x\\n           # Return true on the 4th Thursday of November (Thanksgiving)\\n           Dates.dayofweek(x) == Dates.Thursday &&\\n           Dates.dayofweekofmonth(x) == 4 &&\\n           Dates.month(x) == Dates.November\\n       end\\n2014-11-27The Base.filter() method can be used to obtain all valid dates/moments in a specified range:# Pittsburgh street cleaning; Every 2nd Tuesday from April to November\\n# Date range from January 1st, 2014 to January 1st, 2015\\njulia> dr = Dates.Date(2014):Dates.Date(2015);\\n\\njulia> filter(dr) do x\\n           Dates.dayofweek(x) == Dates.Tue &&\\n           Dates.April <= Dates.month(x) <= Dates.Nov &&\\n           Dates.dayofweekofmonth(x) == 2\\n       end\\n8-element Array{Date,1}:\\n 2014-04-08\\n 2014-05-13\\n 2014-06-10\\n 2014-07-08\\n 2014-08-12\\n 2014-09-09\\n 2014-10-14\\n 2014-11-11Additional examples and tests are available in test/dates/adjusters.jl.\"\n},\n\n{\n    \"location\": \"manual/dates.html#Period-Types-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Period Types\",\n    \"category\": \"section\",\n    \"text\": \"Periods are a human view of discrete, sometimes irregular durations of time. Consider 1 month; it could represent, in days, a value of 28, 29, 30, or 31 depending on the year and month context. Or a year could represent 365 or 366 days in the case of a leap year. Period types are simple Int64 wrappers and are constructed by wrapping any Int64 convertible type, i.e. Year(1) or Month(3.0). Arithmetic between Period of the same type behave like integers, and limited Period-Real arithmetic is available.julia> y1 = Dates.Year(1)\\n1 year\\n\\njulia> y2 = Dates.Year(2)\\n2 years\\n\\njulia> y3 = Dates.Year(10)\\n10 years\\n\\njulia> y1 + y2\\n3 years\\n\\njulia> div(y3,y2)\\n5\\n\\njulia> y3 - y2\\n8 years\\n\\njulia> y3 % y2\\n0 years\\n\\njulia> div(y3,3) # mirrors integer division\\n3 years\"\n},\n\n{\n    \"location\": \"manual/dates.html#Rounding-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Rounding\",\n    \"category\": \"section\",\n    \"text\": \"Date and DateTime values can be rounded to a specified resolution (e.g., 1 month or 15 minutes) with floor(), ceil(), or round():julia> floor(Date(1985, 8, 16), Dates.Month)\\n1985-08-01\\n\\njulia> ceil(DateTime(2013, 2, 13, 0, 31, 20), Dates.Minute(15))\\n2013-02-13T00:45:00\\n\\njulia> round(DateTime(2016, 8, 6, 20, 15), Dates.Day)\\n2016-08-07T00:00:00Unlike the numeric round() method, which breaks ties toward the even number by default, the TimeTyperound() method uses the RoundNearestTiesUp rounding mode. (It's difficult to guess what breaking ties to nearest \\\"even\\\" TimeType would entail.) Further details on the available RoundingMode s can be found in the API reference.Rounding should generally behave as expected, but there are a few cases in which the expected behaviour is not obvious.\"\n},\n\n{\n    \"location\": \"manual/dates.html#Rounding-Epoch-1\",\n    \"page\": \"Date and DateTime\",\n    \"title\": \"Rounding Epoch\",\n    \"category\": \"section\",\n    \"text\": \"In many cases, the resolution specified for rounding (e.g., Dates.Second(30)) divides evenly into the next largest period (in this case, Dates.Minute(1)). But rounding behaviour in cases in which this is not true may lead to confusion. What is the expected result of rounding a DateTime to the nearest 10 hours?julia> round(DateTime(2016, 7, 17, 11, 55), Dates.Hour(10))\\n2016-07-17T12:00:00That may seem confusing, given that the hour (12) is not divisible by 10. The reason that 2016-07-17T12:00:00 was chosen is that it is 17,676,660 hours after 0000-01-01T00:00:00, and 17,676,660 is divisible by 10.As Julia Date and DateTime values are represented according to the ISO 8601 standard, 0000-01-01T00:00:00 was chosen as base (or \\\"rounding epoch\\\") from which to begin the count of days (and milliseconds) used in rounding calculations. (Note that this differs slightly from Julia's internal representation of Date s using Rata Die notation; but since the ISO 8601 standard is most visible to the end user, 0000-01-01T00:00:00 was chosen as the rounding epoch instead of the 0000-12-31T00:00:00 used internally to minimize confusion.)The only exception to the use of 0000-01-01T00:00:00 as the rounding epoch is when rounding to weeks. Rounding to the nearest week will always return a Monday (the first day of the week as specified by ISO 8601). For this reason, we use 0000-01-03T00:00:00 (the first day of the first week of year 0000, as defined by ISO 8601) as the base when rounding to a number of weeks.Here is a related case in which the expected behaviour is not necessarily obvious: What happens when we round to the nearest P(2), where P is a Period type? In some cases (specifically, when P <: Dates.TimePeriod) the answer is clear:julia> round(DateTime(2016, 7, 17, 8, 55, 30), Dates.Hour(2))\\n2016-07-17T08:00:00\\n\\njulia> round(DateTime(2016, 7, 17, 8, 55, 30), Dates.Minute(2))\\n2016-07-17T08:56:00This seems obvious, because two of each of these periods still divides evenly into the next larger order period. But in the case of two months (which still divides evenly into one year), the answer may be surprising:julia> round(DateTime(2016, 7, 17, 8, 55, 30), Dates.Month(2))\\n2016-07-01T00:00:00Why round to the first day in July, even though it is month 7 (an odd number)? The key is that months are 1-indexed (the first month is assigned 1), unlike hours, minutes, seconds, and milliseconds (the first of which are assigned 0).This means that rounding a DateTime to an even multiple of seconds, minutes, hours, or years (because the ISO 8601 specification includes a year zero) will result in a DateTime with an even value in that field, while rounding a DateTime to an even multiple of months will result in the months field having an odd value. Because both months and years may contain an irregular number of days, whether rounding to an even number of days will result in an even value in the days field is uncertain.See the API reference for additional information on methods exported from the Dates module.\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"Interacting With Julia\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#Interacting-With-Julia-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"Interacting With Julia\",\n    \"category\": \"section\",\n    \"text\": \"Julia comes with a full-featured interactive command-line REPL (read-eval-print loop) built into the julia executable. In addition to allowing quick and easy evaluation of Julia statements, it has a searchable history, tab-completion, many helpful keybindings, and dedicated help and shell modes. The REPL can be started by simply calling julia with no arguments or double-clicking on the executable:$ julia\\n               _\\n   _       _ _(_)_     |  A fresh approach to technical computing\\n  (_)     | (_) (_)    |  Documentation: https://docs.julialang.org\\n   _ _   _| |_  __ _   |  Type \\\"?help\\\" for help.\\n  | | | | | | |/ _` |  |\\n  | | |_| | | | (_| |  |  Version 0.6.0-dev.2493 (2017-01-31 18:53 UTC)\\n _/ |\\\\__'_|_|_|\\\\__'_|  |  Commit c99e12c* (0 days old master)\\n|__/                   |  x86_64-linux-gnu\\n\\njulia>To exit the interactive session, type ^D \u2013 the control key together with the d key on a blank line \u2013 or type quit() followed by the return or enter key. The REPL greets you with a banner and a julia> prompt.\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#The-different-prompt-modes-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"The different prompt modes\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#The-Julian-mode-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"The Julian mode\",\n    \"category\": \"section\",\n    \"text\": \"The REPL has four main modes of operation. The first and most common is the Julian prompt. It is the default mode of operation; each new line initially starts with julia>. It is here that you can enter Julia expressions. Hitting return or enter after a complete expression has been entered will evaluate the entry and show the result of the last expression.julia> string(1 + 2)\\n\\\"3\\\"There are a number useful features unique to interactive work. In addition to showing the result, the REPL also binds the result to the variable ans. A trailing semicolon on the line can be used as a flag to suppress showing the result.julia> string(3 * 4);\\n\\njulia> ans\\n\\\"12\\\"In Julia mode, the REPL supports something called prompt pasting. This activates when pasting text that starts with julia>\u2007 into the REPL. In that case, only expressions starting with julia>\u2007 are parsed, others are removed. This makes it is possible to paste a chunk of code that has been copied from a REPL session without having to scrub away prompts and outputs. This feature is enabled by default but can be disabled or enabled at will with Base.REPL.enable_promptpaste(::Bool). If it is enabled, you can try it out by pasting the code block above this paragraph straight into the REPL. This feature does not work on the standard Windows command prompt due to its limitation at detecting when a paste occurs.\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#Help-mode-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"Help mode\",\n    \"category\": \"section\",\n    \"text\": \"When the cursor is at the beginning of the line, the prompt can be changed to a help mode by typing ?. Julia will attempt to print help or documentation for anything entered in help mode:julia> ? # upon typing ?, the prompt changes (in place) to: help?>\\n\\nhelp?> string\\nsearch: string String stringmime Cstring Cwstring RevString readstring randstring bytestring SubString\\n\\n  string(xs...)\\n\\n  Create a string from any values using the print function.Macros, types and variables can also be queried:help?> @time\\n  @time\\n\\n  A macro to execute an expression, printing the time it took to execute, the number of allocations,\\n  and the total number of bytes its execution caused to be allocated, before returning the value of the\\n  expression.\\n\\n  See also @timev, @timed, @elapsed, and @allocated.\\n\\nhelp?> AbstractString\\nsearch: AbstractString AbstractSparseMatrix AbstractSparseVector AbstractSet\\n\\n  No documentation found.\\n\\n  Summary:\\n\\n  abstract AbstractString <: Any\\n\\n  Subtypes:\\n\\n  Base.Test.GenericString\\n  DirectIndexString\\n  StringHelp mode can be exited by pressing backspace at the beginning of the line.\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#man-shell-mode-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"Shell mode\",\n    \"category\": \"section\",\n    \"text\": \"Just as help mode is useful for quick access to documentation, another common task is to use the system shell to execute system commands. Just as ? entered help mode when at the beginning of the line, a semicolon (;) will enter the shell mode. And it can be exited by pressing backspace at the beginning of the line.julia> ; # upon typing ;, the prompt changes (in place) to: shell>\\n\\nshell> echo hello\\nhello\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#Search-modes-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"Search modes\",\n    \"category\": \"section\",\n    \"text\": \"In all of the above modes, the executed lines get saved to a history file, which can be searched.  To initiate an incremental search through the previous history, type ^R \u2013 the control key together with the r key. The prompt will change to (reverse-i-search)`':, and as you type the search query will appear in the quotes. The most recent result that matches the query will dynamically update to the right of the colon as more is typed. To find an older result using the same query, simply type ^R again.Just as ^R is a reverse search, ^S is a forward search, with the prompt (i-search)`':.  The two may be used in conjunction with each other to move through the previous or next matching results, respectively.\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#Key-bindings-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"Key bindings\",\n    \"category\": \"section\",\n    \"text\": \"The Julia REPL makes great use of key bindings. Several control-key bindings were already introduced above (^D to exit, ^R and ^S for searching), but there are many more. In addition to the control-key, there are also meta-key bindings. These vary more by platform, but most terminals default to using alt- or option- held down with a key to send the meta-key (or can be configured to do so).Keybinding Description\\nProgram control \u00a0\\n^D Exit (when buffer is empty)\\n^C Interrupt or cancel\\n^L Clear console screen\\nReturn/Enter, ^J New line, executing if it is complete\\nmeta-Return/Enter Insert new line without executing it\\n? or ; Enter help or shell mode (when at start of a line)\\n^R, ^S Incremental history search, described above\\nCursor movement \u00a0\\nRight arrow, ^F Move right one character\\nLeft arrow, ^B Move left one character\\nHome, ^A Move to beginning of line\\nEnd, ^E Move to end of line\\n^P Change to the previous or next history entry\\n^N Change to the next history entry\\nUp arrow Move up one line (or to the previous history entry)\\nDown arrow Move down one line (or to the next history entry)\\nPage-up Change to the previous history entry that matches the text before the cursor\\nPage-down Change to the next history entry that matches the text before the cursor\\nmeta-F Move right one word\\nmeta-B Move left one word\\nEditing \u00a0\\nBackspace, ^H Delete the previous character\\nDelete, ^D Forward delete one character (when buffer has text)\\nmeta-Backspace Delete the previous word\\nmeta-D Forward delete the next word\\n^W Delete previous text up to the nearest whitespace\\n^K \\\"Kill\\\" to end of line, placing the text in a buffer\\n^Y \\\"Yank\\\" insert the text from the kill buffer\\n^T Transpose the characters about the cursor\\n^Q Write a number in REPL and press ^Q to open editor at corresponding stackframe\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#Customizing-keybindings-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"Customizing keybindings\",\n    \"category\": \"section\",\n    \"text\": \"Julia's REPL keybindings may be fully customized to a user's preferences by passing a dictionary to REPL.setup_interface(). The keys of this dictionary may be characters or strings. The key '*' refers to the default action. Control plus character x bindings are indicated with \\\"^x\\\". Meta plus x can be written \\\"\\\\\\\\Mx\\\". The values of the custom keymap must be nothing (indicating that the input should be ignored) or functions that accept the signature (PromptState, AbstractREPL, Char). The REPL.setup_interface() function must be called before the REPL is initialized, by registering the operation with atreplinit(). For example, to bind the up and down arrow keys to move through history without prefix search, one could put the following code in .juliarc.jl:import Base: LineEdit, REPL\\n\\nconst mykeys = Dict{Any,Any}(\\n    # Up Arrow\\n    \\\"\\\\e[A\\\" => (s,o...)->(LineEdit.edit_move_up(s) || LineEdit.history_prev(s, LineEdit.mode(s).hist)),\\n    # Down Arrow\\n    \\\"\\\\e[B\\\" => (s,o...)->(LineEdit.edit_move_up(s) || LineEdit.history_next(s, LineEdit.mode(s).hist))\\n)\\n\\nfunction customize_keys(repl)\\n    repl.interface = REPL.setup_interface(repl; extra_repl_keymap = mykeys)\\nend\\n\\natreplinit(customize_keys)Users should refer to base/LineEdit.jl to discover the available actions on key input.\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#Tab-completion-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"Tab completion\",\n    \"category\": \"section\",\n    \"text\": \"In both the Julian and help modes of the REPL, one can enter the first few characters of a function or type and then press the tab key to get a list all matches:julia> stri[TAB]\\nstride     strides     string      stringmime  strip\\n\\njulia> Stri[TAB]\\nStridedArray    StridedMatrix    StridedVecOrMat  StridedVector    StringThe tab key can also be used to substitute LaTeX math symbols with their Unicode equivalents, and get a list of LaTeX matches as well:julia> \\\\pi[TAB]\\njulia> \u03c0\\n\u03c0 = 3.1415926535897...\\n\\njulia> e\\\\_1[TAB] = [1,0]\\njulia> e\u2081 = [1,0]\\n2-element Array{Int64,1}:\\n 1\\n 0\\n\\njulia> e\\\\^1[TAB] = [1 0]\\njulia> e\u00b9 = [1 0]\\n1\u00d72 Array{Int64,2}:\\n 1  0\\n\\njulia> \\\\sqrt[TAB]2     # \u221a is equivalent to the sqrt() function\\njulia> \u221a2\\n1.4142135623730951\\n\\njulia> \\\\hbar[TAB](h) = h / 2\\\\pi[TAB]\\njulia> \u0127(h) = h / 2\u03c0\\n\u0127 (generic function with 1 method)\\n\\njulia> \\\\h[TAB]\\n\\\\hat              \\\\hermitconjmatrix  \\\\hkswarow          \\\\hrectangle\\n\\\\hatapprox        \\\\hexagon           \\\\hookleftarrow     \\\\hrectangleblack\\n\\\\hbar             \\\\hexagonblack      \\\\hookrightarrow    \\\\hslash\\n\\\\heartsuit        \\\\hksearow          \\\\house             \\\\hspace\\n\\njulia> \u03b1=\\\"\\\\alpha[TAB]\\\"   # LaTeX completion also works in strings\\njulia> \u03b1=\\\"\u03b1\\\"A full list of tab-completions can be found in the Unicode Input section of the manual.Completion of paths works for strings and julia's shell mode:julia> path=\\\"/[TAB]\\\"\\n.dockerenv  .juliabox/   boot/        etc/         lib/         media/       opt/         root/        sbin/        sys/         usr/\\n.dockerinit bin/         dev/         home/        lib64/       mnt/         proc/        run/         srv/         tmp/         var/\\nshell> /[TAB]\\n.dockerenv  .juliabox/   boot/        etc/         lib/         media/       opt/         root/        sbin/        sys/         usr/\\n.dockerinit bin/         dev/         home/        lib64/       mnt/         proc/        run/         srv/         tmp/         var/Tab completion can help with investigation of the available methods matching the input arguments:julia> max([TAB] # All methods are displayed, not shown here due to size of the list\\n\\njulia> max([1, 2], [TAB] # All methods where `Vector{Int}` matches as first argument\\nmax(x, y) in Base at operators.jl:215\\nmax(a, b, c, xs...) in Base at operators.jl:281\\n\\njulia> max([1, 2], max(1, 2), [TAB] # All methods matching the arguments.\\nmax(x, y) in Base at operators.jl:215\\nmax(a, b, c, xs...) in Base at operators.jl:281Keywords are also displayed in the suggested methods, see second line after ; where limit and keep are keyword arguments:julia> split(\\\"1 1 1\\\", [TAB]\\nsplit(str::AbstractString) in Base at strings/util.jl:278\\nsplit{T<:AbstractString}(str::T, splitter; limit, keep) in Base at strings/util.jl:254The completion of the methods uses type inference and can therefore see if the arguments match even if the arguments are output from functions. The function needs to be type stable for the completion to be able to remove non-matching methods.Tab completion can also help completing fields:julia> Pkg.a[TAB]\\nadd       availableFields for output from functions can also be completed:julia> split(\\\"\\\",\\\"\\\")[1].[TAB]\\nendof  offset  stringThe completion of fields for output from functions uses type inference, and it can only suggest fields if the function is type stable.\"\n},\n\n{\n    \"location\": \"manual/interacting-with-julia.html#Customizing-Colors-1\",\n    \"page\": \"Interacting With Julia\",\n    \"title\": \"Customizing Colors\",\n    \"category\": \"section\",\n    \"text\": \"The colors used by Julia and the REPL can be customized, as well. To change the color of the Julia prompt you can add something like the following to your .juliarc.jl file, which is to be placed inside your home directory:function customize_colors(repl)\\n    repl.prompt_color = Base.text_colors[:cyan]\\nend\\n\\natreplinit(customize_colors)The available color keys can be seen by typing Base.text_colors in the help mode of the REPL. In addition, the integers 0 to 255 can be used as color keys for terminals with 256 color support.You can also change the colors for the help and shell prompts and input and answer text by setting the appropriate field of repl in the customize_colors function above (respectively, help_color, shell_color, input_color, and answer_color). For the latter two, be sure that the envcolors field is also set to false.It is also possible to apply boldface formatting by using Base.text_colors[:bold] as a color. For instance, to print answers in boldface font, one can use the following as a .juliarc.jl:function customize_colors(repl)\\n    repl.envcolors = false\\n    repl.answer_color = Base.text_colors[:bold]\\nend\\n\\natreplinit(customize_colors)You can also customize the color used to render warning and informational messages by setting the appropriate environment variables. For instance, to render error, warning, and informational messages respectively in magenta, yellow, and cyan you can add the following to your .juliarc.jl file:ENV[\\\"JULIA_ERROR_COLOR\\\"] = :magenta\\nENV[\\\"JULIA_WARN_COLOR\\\"] = :yellow\\nENV[\\\"JULIA_INFO_COLOR\\\"] = :cyan\"\n},\n\n{\n    \"location\": \"manual/running-external-programs.html#\",\n    \"page\": \"Running External Programs\",\n    \"title\": \"Running External Programs\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/running-external-programs.html#Running-External-Programs-1\",\n    \"page\": \"Running External Programs\",\n    \"title\": \"Running External Programs\",\n    \"category\": \"section\",\n    \"text\": \"Julia borrows backtick notation for commands from the shell, Perl, and Ruby. However, in Julia, writingjulia> `echo hello`\\n`echo hello`differs in several aspects from the behavior in various shells, Perl, or Ruby:Instead of immediately running the command, backticks create a Cmd object to represent the command. You can use this object to connect the command to others via pipes, run it, and read or write to it.\\nWhen the command is run, Julia does not capture its output unless you specifically arrange for it to. Instead, the output of the command by default goes to STDOUT as it would using libc's system call.\\nThe command is never run with a shell. Instead, Julia parses the command syntax directly, appropriately interpolating variables and splitting on words as the shell would, respecting shell quoting syntax. The command is run as julia's immediate child process, using fork and exec calls.Here's a simple example of running an external program:julia> mycommand = `echo hello`\\n`echo hello`\\n\\njulia> typeof(mycommand)\\nCmd\\n\\njulia> run(mycommand)\\nhelloThe hello is the output of the echo command, sent to STDOUT. The run method itself returns nothing, and throws an ErrorException if the external command fails to run successfully.If you want to read the output of the external command, readstring() can be used instead:julia> a = readstring(`echo hello`)\\n\\\"hello\\\\n\\\"\\n\\njulia> chomp(a) == \\\"hello\\\"\\ntrueMore generally, you can use open() to read from or write to an external command.julia> open(`less`, \\\"w\\\", STDOUT) do io\\n           for i = 1:3\\n               println(io, i)\\n           end\\n       end\\n1\\n2\\n3\"\n},\n\n{\n    \"location\": \"manual/running-external-programs.html#command-interpolation-1\",\n    \"page\": \"Running External Programs\",\n    \"title\": \"Interpolation\",\n    \"category\": \"section\",\n    \"text\": \"Suppose you want to do something a bit more complicated and use the name of a file in the variable file as an argument to a command. You can use $ for interpolation much as you would in a string literal (see Strings):julia> file = \\\"/etc/passwd\\\"\\n\\\"/etc/passwd\\\"\\n\\njulia> `sort $file`\\n`sort /etc/passwd`A common pitfall when running external programs via a shell is that if a file name contains characters that are special to the shell, they may cause undesirable behavior. Suppose, for example, rather than /etc/passwd, we wanted to sort the contents of the file /Volumes/External HD/data.csv. Let's try it:julia> file = \\\"/Volumes/External HD/data.csv\\\"\\n\\\"/Volumes/External HD/data.csv\\\"\\n\\njulia> `sort $file`\\n`sort '/Volumes/External HD/data.csv'`How did the file name get quoted? Julia knows that file is meant to be interpolated as a single argument, so it quotes the word for you. Actually, that is not quite accurate: the value of file is never interpreted by a shell, so there's no need for actual quoting; the quotes are inserted only for presentation to the user. This will even work if you interpolate a value as part of a shell word:julia> path = \\\"/Volumes/External HD\\\"\\n\\\"/Volumes/External HD\\\"\\n\\njulia> name = \\\"data\\\"\\n\\\"data\\\"\\n\\njulia> ext = \\\"csv\\\"\\n\\\"csv\\\"\\n\\njulia> `sort $path/$name.$ext`\\n`sort '/Volumes/External HD/data.csv'`As you can see, the space in the path variable is appropriately escaped. But what if you want to interpolate multiple words? In that case, just use an array (or any other iterable container):julia> files = [\\\"/etc/passwd\\\",\\\"/Volumes/External HD/data.csv\\\"]\\n2-element Array{String,1}:\\n \\\"/etc/passwd\\\"\\n \\\"/Volumes/External HD/data.csv\\\"\\n\\njulia> `grep foo $files`\\n`grep foo /etc/passwd '/Volumes/External HD/data.csv'`If you interpolate an array as part of a shell word, Julia emulates the shell's {a,b,c} argument generation:julia> names = [\\\"foo\\\",\\\"bar\\\",\\\"baz\\\"]\\n3-element Array{String,1}:\\n \\\"foo\\\"\\n \\\"bar\\\"\\n \\\"baz\\\"\\n\\njulia> `grep xylophone $names.txt`\\n`grep xylophone foo.txt bar.txt baz.txt`Moreover, if you interpolate multiple arrays into the same word, the shell's Cartesian product generation behavior is emulated:julia> names = [\\\"foo\\\",\\\"bar\\\",\\\"baz\\\"]\\n3-element Array{String,1}:\\n \\\"foo\\\"\\n \\\"bar\\\"\\n \\\"baz\\\"\\n\\njulia> exts = [\\\"aux\\\",\\\"log\\\"]\\n2-element Array{String,1}:\\n \\\"aux\\\"\\n \\\"log\\\"\\n\\njulia> `rm -f $names.$exts`\\n`rm -f foo.aux foo.log bar.aux bar.log baz.aux baz.log`Since you can interpolate literal arrays, you can use this generative functionality without needing to create temporary array objects first:julia> `rm -rf $[\\\"foo\\\",\\\"bar\\\",\\\"baz\\\",\\\"qux\\\"].$[\\\"aux\\\",\\\"log\\\",\\\"pdf\\\"]`\\n`rm -rf foo.aux foo.log foo.pdf bar.aux bar.log bar.pdf baz.aux baz.log baz.pdf qux.aux qux.log qux.pdf`\"\n},\n\n{\n    \"location\": \"manual/running-external-programs.html#Quoting-1\",\n    \"page\": \"Running External Programs\",\n    \"title\": \"Quoting\",\n    \"category\": \"section\",\n    \"text\": \"Inevitably, one wants to write commands that aren't quite so simple, and it becomes necessary to use quotes. Here's a simple example of a Perl one-liner at a shell prompt:sh$ perl -le '$|=1; for (0..3) { print }'\\n0\\n1\\n2\\n3The Perl expression needs to be in single quotes for two reasons: so that spaces don't break the expression into multiple shell words, and so that uses of Perl variables like $| (yes, that's the name of a variable in Perl), don't cause interpolation. In other instances, you may want to use double quotes so that interpolation does occur:sh$ first=\\\"A\\\"\\nsh$ second=\\\"B\\\"\\nsh$ perl -le '$|=1; print for @ARGV' \\\"1: $first\\\" \\\"2: $second\\\"\\n1: A\\n2: BIn general, the Julia backtick syntax is carefully designed so that you can just cut-and-paste shell commands as is into backticks and they will work: the escaping, quoting, and interpolation behaviors are the same as the shell's. The only difference is that the interpolation is integrated and aware of Julia's notion of what is a single string value, and what is a container for multiple values. Let's try the above two examples in Julia:julia> A = `perl -le '$|=1; for (0..3) { print }'`\\n`perl -le '$|=1; for (0..3) { print }'`\\n\\njulia> run(A)\\n0\\n1\\n2\\n3\\n\\njulia> first = \\\"A\\\"; second = \\\"B\\\";\\n\\njulia> B = `perl -le 'print for @ARGV' \\\"1: $first\\\" \\\"2: $second\\\"`\\n`perl -le 'print for @ARGV' '1: A' '2: B'`\\n\\njulia> run(B)\\n1: A\\n2: BThe results are identical, and Julia's interpolation behavior mimics the shell's with some improvements due to the fact that Julia supports first-class iterable objects while most shells use strings split on spaces for this, which introduces ambiguities. When trying to port shell commands to Julia, try cut and pasting first. Since Julia shows commands to you before running them, you can easily and safely just examine its interpretation without doing any damage.\"\n},\n\n{\n    \"location\": \"manual/running-external-programs.html#Pipelines-1\",\n    \"page\": \"Running External Programs\",\n    \"title\": \"Pipelines\",\n    \"category\": \"section\",\n    \"text\": \"Shell metacharacters, such as |, &, and >, need to be quoted (or escaped) inside of Julia's backticks:julia> run(`echo hello '|' sort`)\\nhello | sort\\n\\njulia> run(`echo hello \\\\| sort`)\\nhello | sortThis expression invokes the echo command with three words as arguments: hello, |, and sort. The result is that a single line is printed: hello | sort. How, then, does one construct a pipeline? Instead of using '|' inside of backticks, one uses pipeline():julia> run(pipeline(`echo hello`, `sort`))\\nhelloThis pipes the output of the echo command to the sort command. Of course, this isn't terribly interesting since there's only one line to sort, but we can certainly do much more interesting things:julia> run(pipeline(`cut -d: -f3 /etc/passwd`, `sort -n`, `tail -n5`))\\n210\\n211\\n212\\n213\\n214This prints the highest five user IDs on a UNIX system. The cut, sort and tail commands are all spawned as immediate children of the current julia process, with no intervening shell process. Julia itself does the work to setup pipes and connect file descriptors that is normally done by the shell. Since Julia does this itself, it retains better control and can do some things that shells cannot.Julia can run multiple commands in parallel:julia> run(`echo hello` & `echo world`)\\nworld\\nhelloThe order of the output here is non-deterministic because the two echo processes are started nearly simultaneously, and race to make the first write to the STDOUT descriptor they share with each other and the julia parent process. Julia lets you pipe the output from both of these processes to another program:julia> run(pipeline(`echo world` & `echo hello`, `sort`))\\nhello\\nworldIn terms of UNIX plumbing, what's happening here is that a single UNIX pipe object is created and written to by both echo processes, and the other end of the pipe is read from by the sort command.IO redirection can be accomplished by passing keyword arguments stdin, stdout, and stderr to the pipeline function:pipeline(`do_work`, stdout=pipeline(`sort`, \\\"out.txt\\\"), stderr=\\\"errs.txt\\\")\"\n},\n\n{\n    \"location\": \"manual/running-external-programs.html#Avoiding-Deadlock-in-Pipelines-1\",\n    \"page\": \"Running External Programs\",\n    \"title\": \"Avoiding Deadlock in Pipelines\",\n    \"category\": \"section\",\n    \"text\": \"When reading and writing to both ends of a pipeline from a single process, it is important to avoid forcing the kernel to buffer all of the data.For example, when reading all of the output from a command, call readstring(out), not wait(process), since the former will actively consume all of the data written by the process, whereas the latter will attempt to store the data in the kernel's buffers while waiting for a reader to be connected.Another common solution is to separate the reader and writer of the pipeline into separate Tasks:writer = @async writeall(process, \\\"data\\\")\\nreader = @async do_compute(readstring(process))\\nwait(process)\\nfetch(reader)\"\n},\n\n{\n    \"location\": \"manual/running-external-programs.html#Complex-Example-1\",\n    \"page\": \"Running External Programs\",\n    \"title\": \"Complex Example\",\n    \"category\": \"section\",\n    \"text\": \"The combination of a high-level programming language, a first-class command abstraction, and automatic setup of pipes between processes is a powerful one. To give some sense of the complex pipelines that can be created easily, here are some more sophisticated examples, with apologies for the excessive use of Perl one-liners:julia> prefixer(prefix, sleep) = `perl -nle '$|=1; print \\\"'$prefix' \\\", $_; sleep '$sleep';'`;\\n\\njulia> run(pipeline(`perl -le '$|=1; for(0..9){ print; sleep 1 }'`, prefixer(\\\"A\\\",2) & prefixer(\\\"B\\\",2)))\\nA 0\\nB 1\\nA 2\\nB 3\\nA 4\\nB 5\\nA 6\\nB 7\\nA 8\\nB 9This is a classic example of a single producer feeding two concurrent consumers: one perl process generates lines with the numbers 0 through 9 on them, while two parallel processes consume that output, one prefixing lines with the letter \\\"A\\\", the other with the letter \\\"B\\\". Which consumer gets the first line is non-deterministic, but once that race has been won, the lines are consumed alternately by one process and then the other. (Setting $|=1 in Perl causes each print statement to flush the STDOUT handle, which is necessary for this example to work. Otherwise all the output is buffered and printed to the pipe at once, to be read by just one consumer process.)Here is an even more complex multi-stage producer-consumer example:julia> run(pipeline(`perl -le '$|=1; for(0..9){ print; sleep 1 }'`,\\n           prefixer(\\\"X\\\",3) & prefixer(\\\"Y\\\",3) & prefixer(\\\"Z\\\",3),\\n           prefixer(\\\"A\\\",2) & prefixer(\\\"B\\\",2)))\\nA X 0\\nB Y 1\\nA Z 2\\nB X 3\\nA Y 4\\nB Z 5\\nA X 6\\nB Y 7\\nA Z 8\\nB X 9This example is similar to the previous one, except there are two stages of consumers, and the stages have different latency so they use a different number of parallel workers, to maintain saturated throughput.We strongly encourage you to try all these examples to see how they work.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Calling C and Fortran Code\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Calling-C-and-Fortran-Code-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Calling C and Fortran Code\",\n    \"category\": \"section\",\n    \"text\": \"Though most code can be written in Julia, there are many high-quality, mature libraries for numerical computing already written in C and Fortran. To allow easy use of this existing code, Julia makes it simple and efficient to call C and Fortran functions. Julia has a \\\"no boilerplate\\\" philosophy: functions can be called directly from Julia without any \\\"glue\\\" code, code generation, or compilation \u2013 even from the interactive prompt. This is accomplished just by making an appropriate call with ccall syntax, which looks like an ordinary function call.The code to be called must be available as a shared library. Most C and Fortran libraries ship compiled as shared libraries already, but if you are compiling the code yourself using GCC (or Clang), you will need to use the -shared and -fPIC options. The machine instructions generated by Julia's JIT are the same as a native C call would be, so the resulting overhead is the same as calling a library function from C code. (Non-library function calls in both C and Julia can be inlined and thus may have even less overhead than calls to shared library functions. When both libraries and executables are generated by LLVM, it is possible to perform whole-program optimizations that can even optimize across this boundary, but Julia does not yet support that. In the future, however, it may do so, yielding even greater performance gains.)Shared libraries and functions are referenced by a tuple of the form (:function, \\\"library\\\") or (\\\"function\\\", \\\"library\\\") where function is the C-exported function name. library refers to the shared library name: shared libraries available in the (platform-specific) load path will be resolved by name, and if necessary a direct path may be specified.A function name may be used alone in place of the tuple (just :function or \\\"function\\\"). In this case the name is resolved within the current process. This form can be used to call C library functions, functions in the Julia runtime, or functions in an application linked to Julia.By default, Fortran compilers generate mangled names (for example, converting function names to lowercase or uppercase, often appending an underscore), and so to call a Fortran function via ccall you must pass the mangled identifier corresponding to the rule followed by your Fortran compiler.  Also, when calling a Fortran function, all inputs must be passed by reference.Finally, you can use ccall to actually generate a call to the library function. Arguments to ccall are as follows:A (:function, \\\"library\\\") pair, which must be written as a literal constant,\\nOR\\na function pointer (for example, from dlsym).\\nReturn type (see below for mapping the declared C type to Julia)\\nThis argument will be evaluated at compile-time, when the containing method is defined.\\nA tuple of input types. The input types must be written as a literal tuple, not a tuple-valued variable or expression.\\nThis argument will be evaluated at compile-time, when the containing method is defined.\\nThe following arguments, if any, are the actual argument values passed to the function.As a complete but simple example, the following calls the clock function from the standard C library:julia> t = ccall((:clock, \\\"libc\\\"), Int32, ())\\n2292761\\n\\njulia> t\\n2292761\\n\\njulia> typeof(ans)\\nInt32clock takes no arguments and returns an Int32. One common gotcha is that a 1-tuple must be written with a trailing comma. For example, to call the getenv function to get a pointer to the value of an environment variable, one makes a call like this:julia> path = ccall((:getenv, \\\"libc\\\"), Cstring, (Cstring,), \\\"SHELL\\\")\\nCstring(@0x00007fff5fbffc45)\\n\\njulia> unsafe_string(path)\\n\\\"/bin/bash\\\"Note that the argument type tuple must be written as (Cstring,), rather than (Cstring). This is because (Cstring) is just the expression Cstring surrounded by parentheses, rather than a 1-tuple containing Cstring:julia> (Cstring)\\nCstring\\n\\njulia> (Cstring,)\\n(Cstring,)In practice, especially when providing reusable functionality, one generally wraps ccall uses in Julia functions that set up arguments and then check for errors in whatever manner the C or Fortran function indicates them, propagating to the Julia caller as exceptions. This is especially important since C and Fortran APIs are notoriously inconsistent about how they indicate error conditions. For example, the getenv C library function is wrapped in the following Julia function, which is a simplified version of the actual definition from env.jl:function getenv(var::AbstractString)\\n    val = ccall((:getenv, \\\"libc\\\"),\\n                Cstring, (Cstring,), var)\\n    if val == C_NULL\\n        error(\\\"getenv: undefined variable: \\\", var)\\n    end\\n    unsafe_string(val)\\nendThe C getenv function indicates an error by returning NULL, but other standard C functions indicate errors in various different ways, including by returning -1, 0, 1 and other special values. This wrapper throws an exception clearly indicating the problem if the caller tries to get a non-existent environment variable:julia> getenv(\\\"SHELL\\\")\\n\\\"/bin/bash\\\"\\n\\njulia> getenv(\\\"FOOBAR\\\")\\ngetenv: undefined variable: FOOBARHere is a slightly more complex example that discovers the local machine's hostname:function gethostname()\\n    hostname = Vector{UInt8}(128)\\n    ccall((:gethostname, \\\"libc\\\"), Int32,\\n          (Ptr{UInt8}, Csize_t),\\n          hostname, sizeof(hostname))\\n    hostname[end] = 0; # ensure null-termination\\n    return unsafe_string(pointer(hostname))\\nendThis example first allocates an array of bytes, then calls the C library function gethostname to fill the array in with the hostname, takes a pointer to the hostname buffer, and converts the pointer to a Julia string, assuming that it is a NUL-terminated C string. It is common for C libraries to use this pattern of requiring the caller to allocate memory to be passed to the callee and filled in. Allocation of memory from Julia like this is generally accomplished by creating an uninitialized array and passing a pointer to its data to the C function. This is why we don't use the Cstring type here: as the array is uninitialized, it could contain NUL bytes. Converting to a Cstring as part of the ccall checks for contained NUL bytes and could therefore throw a conversion error.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Creating-C-Compatible-Julia-Function-Pointers-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Creating C-Compatible Julia Function Pointers\",\n    \"category\": \"section\",\n    \"text\": \"It is possible to pass Julia functions to native C functions that accept function pointer arguments. For example, to match C prototypes of the form:typedef returntype (*functiontype)(argumenttype,...)The function cfunction() generates the C-compatible function pointer for a call to a Julia library function. Arguments to cfunction() are as follows:A Julia Function\\nReturn type\\nA tuple of input typesA classic example is the standard C library qsort function, declared as:void qsort(void *base, size_t nmemb, size_t size,\\n           int(*compare)(const void *a, const void *b));The base argument is a pointer to an array of length nmemb, with elements of size bytes each. compare is a callback function which takes pointers to two elements a and b and returns an integer less/greater than zero if a should appear before/after b (or zero if any order is permitted). Now, suppose that we have a 1d array A of values in Julia that we want to sort using the qsort function (rather than Julia's built-in sort function). Before we worry about calling qsort and passing arguments, we need to write a comparison function that works for some arbitrary type T:julia> function mycompare(a::T, b::T) where T\\n           return convert(Cint, a < b ? -1 : a > b ? +1 : 0)::Cint\\n       end\\nmycompare (generic function with 1 method)Notice that we have to be careful about the return type: qsort expects a function returning a C int, so we must be sure to return Cint via a call to convert and a typeassert.In order to pass this function to C, we obtain its address using the function cfunction:julia> const mycompare_c = cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}));cfunction() accepts three arguments: the Julia function (mycompare), the return type (Cint), and a tuple of the argument types, in this case to sort an array of Cdouble (Float64) elements.The final call to qsort looks like this:julia> A = [1.3, -2.7, 4.4, 3.1]\\n4-element Array{Float64,1}:\\n  1.3\\n -2.7\\n  4.4\\n  3.1\\n\\njulia> ccall(:qsort, Void, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Void}),\\n             A, length(A), sizeof(eltype(A)), mycompare_c)\\n\\njulia> A\\n4-element Array{Float64,1}:\\n -2.7\\n  1.3\\n  3.1\\n  4.4As can be seen, A is changed to the sorted array [-2.7, 1.3, 3.1, 4.4]. Note that Julia knows how to convert an array into a Ptr{Cdouble}, how to compute the size of a type in bytes (identical to C's sizeof operator), and so on. For fun, try inserting a println(\\\"mycompare($a,$b)\\\") line into mycompare, which will allow you to see the comparisons that qsort is performing (and to verify that it is really calling the Julia function that you passed to it).\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Mapping-C-Types-to-Julia-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Mapping C Types to Julia\",\n    \"category\": \"section\",\n    \"text\": \"It is critical to exactly match the declared C type with its declaration in Julia. Inconsistencies can cause code that works correctly on one system to fail or produce indeterminate results on a different system.Note that no C header files are used anywhere in the process of calling C functions: you are responsible for making sure that your Julia types and call signatures accurately reflect those in the C header file. (The Clang package can be used to auto-generate Julia code from a C header file.)\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Auto-conversion:-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Auto-conversion:\",\n    \"category\": \"section\",\n    \"text\": \"Julia automatically inserts calls to the Base.cconvert() function to convert each argument to the specified type. For example, the following call:ccall((:foo, \\\"libfoo\\\"), Void, (Int32, Float64), x, y)will behave as if the following were written:ccall((:foo, \\\"libfoo\\\"), Void, (Int32, Float64),\\n      Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),\\n      Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))Base.cconvert() normally just calls convert(), but can be defined to return an arbitrary new object more appropriate for passing to C. For example, this is used to convert an Array of objects (e.g. strings) to an array of pointers.Base.unsafe_convert() handles conversion to Ptr types. It is considered unsafe because converting an object to a native pointer can hide the object from the garbage collector, causing it to be freed prematurely.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Type-Correspondences:-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Type Correspondences:\",\n    \"category\": \"section\",\n    \"text\": \"First, a review of some relevant Julia type terminology:Syntax / Keyword Example Description\\nmutable struct String \\\"Leaf Type\\\" :: A group of related data that includes a type-tag, is managed by the Julia GC, and is defined by object-identity. The type parameters of a leaf type must be fully defined (no TypeVars are allowed) in order for the instance to be constructed.\\nabstract type Any, AbstractArray{T, N}, Complex{T} \\\"Super Type\\\" :: A super-type (not a leaf-type) that cannot be instantiated, but can be used to describe a group of types.\\nT{A} Vector{Int} \\\"Type Parameter\\\" :: A specialization of a type (typically used for dispatch or storage optimization).\\n  \\\"TypeVar\\\" :: The T in the type parameter declaration is referred to as a TypeVar (short for type variable).\\nprimitive type Int, Float64 \\\"Primitive Type\\\" :: A type with no fields, but a size. It is stored and defined by-value.\\nstruct Pair{Int, Int} \\\"Struct\\\" :: A type with all fields defined to be constant. It is defined by-value, and may be stored with a type-tag.\\n Complex128 (isbits) \\\"Is-Bits\\\"   :: A primitive type, or a struct type where all fields are other isbits types. It is defined by-value, and is stored without a type-tag.\\nstruct ...; end nothing \\\"Singleton\\\" :: a Leaf Type or Struct with no fields.\\n(...) or tuple(...) (1, 2, 3) \\\"Tuple\\\" :: an immutable data-structure similar to an anonymous struct type, or a constant array. Represented as either an array or a struct.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Bits-Types:-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Bits Types:\",\n    \"category\": \"section\",\n    \"text\": \"There are several special types to be aware of, as no other type can be defined to behave the same:Float32\\nExactly corresponds to the float type in C (or REAL*4 in Fortran).\\nFloat64\\nExactly corresponds to the double type in C (or REAL*8 in Fortran).\\nComplex64\\nExactly corresponds to the complex float type in C (or COMPLEX*8 in Fortran).\\nComplex128\\nExactly corresponds to the complex double type in C (or COMPLEX*16 in Fortran).\\nSigned\\nExactly corresponds to the signed type annotation in C (or any INTEGER type in Fortran). Any Julia type that is not a subtype of Signed is assumed to be unsigned.Ref{T}\\nBehaves like a Ptr{T} that can manage its memory via the Julia GC.Array{T,N}\\nWhen an array is passed to C as a Ptr{T} argument, it is not reinterpret-cast: Julia requires that the element type of the array matches T, and the address of the first element is passed.\\nTherefore, if an Array contains data in the wrong format, it will have to be explicitly converted using a call such as trunc(Int32, a).\\nTo pass an array A as a pointer of a different type without converting the data beforehand (for example, to pass a Float64 array to a function that operates on uninterpreted bytes), you can declare the argument as Ptr{Void}.\\nIf an array of eltype Ptr{T} is passed as a Ptr{Ptr{T}} argument, Base.cconvert() will attempt to first make a null-terminated copy of the array with each element replaced by its Base.cconvert() version. This allows, for example, passing an argv pointer array of type Vector{String} to an argument of type Ptr{Ptr{Cchar}}.On all systems we currently support, basic C/C++ value types may be translated to Julia types as follows. Every C type also has a corresponding Julia type with the same name, prefixed by C. This can help for writing portable code (and remembering that an int in C is not the same as an Int in Julia).System Independent:C name Fortran name Standard Julia Alias Julia Base Type\\nunsigned char CHARACTER Cuchar UInt8\\nbool (only in C++)  Cuchar UInt8\\nshort INTEGER*2, LOGICAL*2 Cshort Int16\\nunsigned short \u00a0 Cushort UInt16\\nint, BOOL (C, typical) INTEGER*4, LOGICAL*4 Cint Int32\\nunsigned int \u00a0 Cuint UInt32\\nlong long INTEGER*8, LOGICAL*8 Clonglong Int64\\nunsigned long long \u00a0 Culonglong UInt64\\nintmax_t \u00a0 Cintmax_t Int64\\nuintmax_t \u00a0 Cuintmax_t UInt64\\nfloat REAL*4i Cfloat Float32\\ndouble REAL*8 Cdouble Float64\\ncomplex float COMPLEX*8 Complex64 Complex{Float32}\\ncomplex double COMPLEX*16 Complex128 Complex{Float64}\\nptrdiff_t \u00a0 Cptrdiff_t Int\\nssize_t \u00a0 Cssize_t Int\\nsize_t \u00a0 Csize_t UInt\\nvoid \u00a0 \u00a0 Void\\nvoid and [[noreturn]] or _Noreturn \u00a0 \u00a0 Union{}\\nvoid* \u00a0 \u00a0 Ptr{Void}\\nT* (where T represents an appropriately defined type) \u00a0 \u00a0 Ref{T}\\nchar* (or char[], e.g. a string) CHARACTER*N \u00a0 Cstring if NUL-terminated, or Ptr{UInt8} if not\\nchar** (or *char[]) \u00a0 \u00a0 Ptr{Ptr{UInt8}}\\njl_value_t* (any Julia Type) \u00a0 \u00a0 Any\\njl_value_t** (a reference to a Julia Type) \u00a0 \u00a0 Ref{Any}\\nva_arg \u00a0 \u00a0 Not supported\\n... (variadic function specification) \u00a0 \u00a0 T... (where T is one of the above types, variadic functions of different argument types are not supported)The Cstring type is essentially a synonym for Ptr{UInt8}, except the conversion to Cstring throws an error if the Julia string contains any embedded NUL characters (which would cause the string to be silently truncated if the C routine treats NUL as the terminator).  If you are passing a char* to a C routine that does not assume NUL termination (e.g. because you pass an explicit string length), or if you know for certain that your Julia string does not contain NUL and want to skip the check, you can use Ptr{UInt8} as the argument type. Cstring can also be used as the ccall return type, but in that case it obviously does not introduce any extra checks and is only meant to improve readability of the call.System-dependent:C name Standard Julia Alias Julia Base Type\\nchar Cchar Int8 (x86, x86_64), UInt8 (powerpc, arm)\\nlong Clong Int (UNIX), Int32 (Windows)\\nunsigned long Culong UInt (UNIX), UInt32 (Windows)\\nwchar_t Cwchar_t Int32 (UNIX), UInt16 (Windows)note: Note\\nWhen calling a Fortran function, all inputs must be passed by reference, so all type correspondences above should contain an additional Ptr{..} or Ref{..} wrapper around their type specification.warning: Warning\\nFor string arguments (char*) the Julia type should be Cstring (if NUL- terminated data is expected) or either Ptr{Cchar} or Ptr{UInt8} otherwise (these two pointer types have the same effect), as described above, not String. Similarly, for array arguments (T[] or T*), the Julia type should again be Ptr{T}, not Vector{T}.warning: Warning\\nJulia's Char type is 32 bits, which is not the same as the wide character type (wchar_t or wint_t) on all platforms.warning: Warning\\nA return type of Union{} means the function will not return i.e. C++11 [[noreturn]] or C11 _Noreturn (e.g. jl_throw or longjmp). Do not use this for functions that return no value (void) but do return, use Void instead.note: Note\\nFor wchar_t* arguments, the Julia type should be Cwstring (if the C routine expects a NUL-terminated string) or Ptr{Cwchar_t} otherwise. Note also that UTF-8 string data in Julia is internally NUL-terminated, so it can be passed to C functions expecting NUL-terminated data without making a copy (but using the Cwstring type will cause an error to be thrown if the string itself contains NUL characters).note: Note\\nC functions that take an argument of the type char** can be called by using a Ptr{Ptr{UInt8}} type within Julia. For example, C functions of the form:int main(int argc, char **argv);can be called via the following Julia code:argv = [ \\\"a.out\\\", \\\"arg1\\\", \\\"arg2\\\" ]\\nccall(:main, Int32, (Int32, Ptr{Ptr{UInt8}}), length(argv), argv)note: Note\\nA C function declared to return Void will return the value nothing in Julia.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Struct-Type-correspondences-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Struct Type correspondences\",\n    \"category\": \"section\",\n    \"text\": \"Composite types, aka struct in C or TYPE in Fortran90 (or STRUCTURE / RECORD in some variants of F77), can be mirrored in Julia by creating a struct definition with the same field layout.When used recursively, isbits types are stored inline. All other types are stored as a pointer to the data. When mirroring a struct used by-value inside another struct in C, it is imperative that you do not attempt to manually copy the fields over, as this will not preserve the correct field alignment. Instead, declare an isbits struct type and use that instead. Unnamed structs are not possible in the translation to Julia.Packed structs and union declarations are not supported by Julia.You can get a near approximation of a union if you know, a priori, the field that will have the greatest size (potentially including padding). When translating your fields to Julia, declare the Julia field to be only of that type.Arrays of parameters can be expressed with NTuple:in C:\\nstruct B {\\n    int A[3];\\n};\\nb_a_2 = B.A[2];\\n\\nin Julia:\\nstruct B\\n    A::NTuple{3, CInt}\\nend\\nb_a_2 = B.A[3]  # note the difference in indexing (1-based in Julia, 0-based in C)Arrays of unknown size (C99-compliant variable length structs specified by [] or [0]) are not directly supported. Often the best way to deal with these is to deal with the byte offsets directly. For example, if a C library declared a proper string type and returned a pointer to it:struct String {\\n    int strlen;\\n    char data[];\\n};In Julia, we can access the parts independently to make a copy of that string:str = from_c::Ptr{Void}\\nlen = unsafe_load(Ptr{Cint}(str))\\nunsafe_string(str + Core.sizeof(Cint), len)\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Type-Parameters-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Type Parameters\",\n    \"category\": \"section\",\n    \"text\": \"The type arguments to ccall are evaluated statically, when the method containing the ccall is defined. They therefore must take the form of a literal tuple, not a variable, and cannot reference local variables.This may sound like a strange restriction, but remember that since C is not a dynamic language like Julia, its functions can only accept argument types with a statically-known, fixed signature.However, while the type layout must be known statically to compute the ccall ABI, the static parameters of the function are considered to be part of this static environment. The static parameters of the function may be used as type parameters in the ccall signature, as long as they don't affect the layout of the type. For example, f(x::T) where {T} = ccall(:valid, Ptr{T}, (Ptr{T},), x) is valid, since Ptr is always a word-size primitive type. But, g(x::T) where {T} = ccall(:notvalid, T, (T,), x) is not valid, since the type layout of T is not known statically.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#SIMD-Values-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"SIMD Values\",\n    \"category\": \"section\",\n    \"text\": \"Note: This feature is currently implemented on 64-bit x86 and AArch64 platforms only.If a C/C++ routine has an argument or return value that is a native SIMD type, the corresponding Julia type is a homogeneous tuple of VecElement that naturally maps to the SIMD type.  Specifically:The tuple must be the same size as the SIMD type. For example, a tuple representing an __m128 on x86 must have a size of 16 bytes.\\nThe element type of the tuple must be an instance of VecElement{T} where T is a primitive type that is 1, 2, 4 or 8 bytes.For instance, consider this C routine that uses AVX intrinsics:#include <immintrin.h>\\n\\n__m256 dist( __m256 a, __m256 b ) {\\n    return _mm256_sqrt_ps(_mm256_add_ps(_mm256_mul_ps(a, a),\\n                                        _mm256_mul_ps(b, b)));\\n}The following Julia code calls dist using ccall:const m256 = NTuple{8, VecElement{Float32}}\\n\\na = m256(ntuple(i -> VecElement(sin(Float32(i))), 8))\\nb = m256(ntuple(i -> VecElement(cos(Float32(i))), 8))\\n\\nfunction call_dist(a::m256, b::m256)\\n    ccall((:dist, \\\"libdist\\\"), m256, (m256, m256), a, b)\\nend\\n\\nprintln(call_dist(a,b))The host machine must have the requisite SIMD registers.  For example, the code above will not work on hosts without AVX support.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Memory-Ownership-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Memory Ownership\",\n    \"category\": \"section\",\n    \"text\": \"malloc/freeMemory allocation and deallocation of such objects must be handled by calls to the appropriate cleanup routines in the libraries being used, just like in any C program. Do not try to free an object received from a C library with Libc.free in Julia, as this may result in the free function being called via the wrong libc library and cause Julia to crash. The reverse (passing an object allocated in Julia to be freed by an external library) is equally invalid.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#When-to-use-T,-Ptr{T}-and-Ref{T}-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"When to use T, Ptr{T} and Ref{T}\",\n    \"category\": \"section\",\n    \"text\": \"In Julia code wrapping calls to external C routines, ordinary (non-pointer) data should be declared to be of type T inside the ccall, as they are passed by value.  For C code accepting pointers, Ref{T} should generally be used for the types of input arguments, allowing the use of pointers to memory managed by either Julia or C through the implicit call to Base.cconvert().  In contrast, pointers returned by the C function called should be declared to be of output type Ptr{T}, reflecting that the memory pointed to is managed by C only. Pointers contained in C structs should be represented as fields of type Ptr{T} within the corresponding Julia struct types designed to mimic the internal structure of corresponding C structs.In Julia code wrapping calls to external Fortran routines, all input arguments should be declared as of type Ref{T}, as Fortran passes all variables by reference. The return type should either be Void for Fortran subroutines, or a T for Fortran functions returning the type T.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Mapping-C-Functions-to-Julia-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Mapping C Functions to Julia\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#ccall/cfunction-argument-translation-guide-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"ccall/cfunction argument translation guide\",\n    \"category\": \"section\",\n    \"text\": \"For translating a C argument list to Julia:T, where T is one of the primitive types: char, int, long, short, float, double, complex, enum or any of their typedef equivalents\\nT, where T is an equivalent Julia Bits Type (per the table above)\\nif T is an enum, the argument type should be equivalent to Cint or Cuint\\nargument value will be copied (passed by value)\\nstruct T (including typedef to a struct)\\nT, where T is a Julia leaf type\\nargument value will be copied (passed by value)\\nvoid*\\ndepends on how this parameter is used, first translate this to the intended pointer type, then determine the Julia equivalent using the remaining rules in this list\\nthis argument may be declared as Ptr{Void}, if it really is just an unknown pointer\\njl_value_t*\\nAny\\nargument value must be a valid Julia object\\ncurrently unsupported by cfunction()\\njl_value_t**\\nRef{Any}\\nargument value must be a valid Julia object (or C_NULL)\\ncurrently unsupported by cfunction()\\nT*\\nRef{T}, where T is the Julia type corresponding to T\\nargument value will be copied if it is an isbits type otherwise, the value must be a valid Julia object\\n(T*)(...) (e.g. a pointer to a function)\\nPtr{Void} (you may need to use cfunction() explicitly to create this pointer)\\n... (e.g. a vararg)\\nT..., where T is the Julia type\\nva_arg\\nnot supported\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#ccall/cfunction-return-type-translation-guide-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"ccall/cfunction return type translation guide\",\n    \"category\": \"section\",\n    \"text\": \"For translating a C return type to Julia:void\\nVoid (this will return the singleton instance nothing::Void)\\nT, where T is one of the primitive types: char, int, long, short, float, double, complex, enum or any of their typedef equivalents\\nT, where T is an equivalent Julia Bits Type (per the table above)\\nif T is an enum, the argument type should be equivalent to Cint or Cuint\\nargument value will be copied (returned by-value)\\nstruct T (including typedef to a struct)\\nT, where T is a Julia Leaf Type\\nargument value will be copied (returned by-value)\\nvoid*\\ndepends on how this parameter is used, first translate this to the intended pointer type, then determine the Julia equivalent using the remaining rules in this list\\nthis argument may be declared as Ptr{Void}, if it really is just an unknown pointer\\njl_value_t*\\nAny\\nargument value must be a valid Julia object\\njl_value_t**\\nRef{Any}\\nargument value must be a valid Julia object (or C_NULL)\\nT*\\nIf the memory is already owned by Julia, or is an isbits type, and is known to be non-null:\\nRef{T}, where T is the Julia type corresponding to T\\na return type of Ref{Any} is invalid, it should either be Any (corresponding to jl_value_t*) or Ptr{Any} (corresponding to Ptr{Any})\\nC MUST NOT modify the memory returned via Ref{T} if T is an isbits type\\nIf the memory is owned by C:\\nPtr{T}, where T is the Julia type corresponding to T\\n(T*)(...) (e.g. a pointer to a function)\\nPtr{Void} (you may need to use cfunction() explicitly to create this pointer)\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Passing-Pointers-for-Modifying-Inputs-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Passing Pointers for Modifying Inputs\",\n    \"category\": \"section\",\n    \"text\": \"Because C doesn't support multiple return values, often C functions will take pointers to data that the function will modify. To accomplish this within a ccall, you need to first encapsulate the value inside an Ref{T} of the appropriate type. When you pass this Ref object as an argument, Julia will automatically pass a C pointer to the encapsulated data:width = Ref{Cint}(0)\\nrange = Ref{Cfloat}(0)\\nccall(:foo, Void, (Ref{Cint}, Ref{Cfloat}), width, range)Upon return, the contents of width and range can be retrieved (if they were changed by foo) by width[] and range[]; that is, they act like zero-dimensional arrays.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Special-Reference-Syntax-for-ccall-(deprecated):-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Special Reference Syntax for ccall (deprecated):\",\n    \"category\": \"section\",\n    \"text\": \"The & syntax is deprecated, use the Ref{T} argument type instead.A prefix & is used on an argument to ccall to indicate that a pointer to a scalar argument should be passed instead of the scalar value itself (required for all Fortran function arguments, as noted above). The following example computes a dot product using a BLAS function.function compute_dot(DX::Vector{Float64}, DY::Vector{Float64})\\n    @assert length(DX) == length(DY)\\n    n = length(DX)\\n    incx = incy = 1\\n    product = ccall((:ddot_, \\\"libLAPACK\\\"),\\n                    Float64,\\n                    (Ptr{Int32}, Ptr{Float64}, Ptr{Int32}, Ptr{Float64}, Ptr{Int32}),\\n                    &n, DX, &incx, DY, &incy)\\n    return product\\nendThe meaning of prefix & is not quite the same as in C. In particular, any changes to the referenced variables will not be visible in Julia unless the type is mutable (declared via type). However, even for immutable structs it will not cause any harm for called functions to attempt such modifications (that is, writing through the passed pointers). Moreover, & may be used with any expression, such as &0 or &f(x).When a scalar value is passed with & as an argument of type Ptr{T}, the value will first be converted to type T.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Some-Examples-of-C-Wrappers-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Some Examples of C Wrappers\",\n    \"category\": \"section\",\n    \"text\": \"Here is a simple example of a C wrapper that returns a Ptr type:mutable struct gsl_permutation\\nend\\n\\n# The corresponding C signature is\\n#     gsl_permutation * gsl_permutation_alloc (size_t n);\\nfunction permutation_alloc(n::Integer)\\n    output_ptr = ccall(\\n        (:gsl_permutation_alloc, :libgsl), # name of C function and library\\n        Ptr{gsl_permutation},              # output type\\n        (Csize_t,),                        # tuple of input types\\n        n                                  # name of Julia variable to pass in\\n    )\\n    if output_ptr == C_NULL # Could not allocate memory\\n        throw(OutOfMemoryError())\\n    end\\n    return output_ptr\\nendThe GNU Scientific Library (here assumed to be accessible through :libgsl) defines an opaque pointer, gsl_permutation *, as the return type of the C function gsl_permutation_alloc(). As user code never has to look inside the gsl_permutation struct, the corresponding Julia wrapper simply needs a new type declaration, gsl_permutation, that has no internal fields and whose sole purpose is to be placed in the type parameter of a Ptr type.  The return type of the ccall is declared as Ptr{gsl_permutation}, since the memory allocated and pointed to by output_ptr is controlled by C (and not Julia).The input n is passed by value, and so the function's input signature is simply declared as (Csize_t,) without any Ref or Ptr necessary. (If the wrapper was calling a Fortran function instead, the corresponding function input signature should instead be (Ref{Csize_t},), since Fortran variables are passed by reference.) Furthermore, n can be any type that is convertable to a Csize_t integer; the ccall implicitly calls Base.cconvert(Csize_t, n).Here is a second example wrapping the corresponding destructor:# The corresponding C signature is\\n#     void gsl_permutation_free (gsl_permutation * p);\\nfunction permutation_free(p::Ref{gsl_permutation})\\n    ccall(\\n        (:gsl_permutation_free, :libgsl), # name of C function and library\\n        Void,                             # output type\\n        (Ref{gsl_permutation},),          # tuple of input types\\n        p                                 # name of Julia variable to pass in\\n    )\\nendHere, the input p is declared to be of type Ref{gsl_permutation}, meaning that the memory that p points to may be managed by Julia or by C. A pointer to memory allocated by C should be of type Ptr{gsl_permutation}, but it is convertable using Base.cconvert() and therefore can be used in the same (covariant) context of the input argument to a ccall. A pointer to memory allocated by Julia must be of type Ref{gsl_permutation}, to ensure that the memory address pointed to is valid and that Julia's garbage collector manages the chunk of memory pointed to correctly. Therefore, the Ref{gsl_permutation} declaration allows pointers managed by C or Julia to be used.If the C wrapper never expects the user to pass pointers to memory managed by Julia, then using p::Ptr{gsl_permutation} for the method signature of the wrapper and similarly in the ccall is also acceptable.Here is a third example passing Julia arrays:# The corresponding C signature is\\n#    int gsl_sf_bessel_Jn_array (int nmin, int nmax, double x,\\n#                                double result_array[])\\nfunction sf_bessel_Jn_array(nmin::Integer, nmax::Integer, x::Real)\\n    if nmax < nmin\\n        throw(DomainError())\\n    end\\n    result_array = Vector{Cdouble}(nmax - nmin + 1)\\n    errorcode = ccall(\\n        (:gsl_sf_bessel_Jn_array, :libgsl), # name of C function and library\\n        Cint,                               # output type\\n        (Cint, Cint, Cdouble, Ref{Cdouble}),# tuple of input types\\n        nmin, nmax, x, result_array         # names of Julia variables to pass in\\n    )\\n    if errorcode != 0\\n        error(\\\"GSL error code $errorcode\\\")\\n    end\\n    return result_array\\nendThe C function wrapped returns an integer error code; the results of the actual evaluation of the Bessel J function populate the Julia array result_array. This variable can only be used with corresponding input type declaration Ref{Cdouble}, since its memory is allocated and managed by Julia, not C. The implicit call to Base.cconvert(Ref{Cdouble}, result_array) unpacks the Julia pointer to a Julia array data structure into a form understandable by C.Note that for this code to work correctly, result_array must be declared to be of type Ref{Cdouble} and not Ptr{Cdouble}. The memory is managed by Julia and the Ref signature alerts Julia's garbage collector to keep managing the memory for result_array while the ccall executes. If Ptr{Cdouble} were used instead, the ccall may still work, but Julia's garbage collector would not be aware that the memory declared for result_array is being used by the external C function. As a result, the code may produce a memory leak if result_array never gets freed by the garbage collector, or if the garbage collector prematurely frees result_array, the C function may end up throwing an invalid memory access exception.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Garbage-Collection-Safety-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Garbage Collection Safety\",\n    \"category\": \"section\",\n    \"text\": \"When passing data to a ccall, it is best to avoid using the pointer() function. Instead define a convert method and pass the variables directly to the ccall. ccall automatically arranges that all of its arguments will be preserved from garbage collection until the call returns. If a C API will store a reference to memory allocated by Julia, after the ccall returns, you must arrange that the object remains visible to the garbage collector. The suggested way to handle this is to make a global variable of type Array{Ref,1} to hold these values, until the C library notifies you that it is finished with them.Whenever you have created a pointer to Julia data, you must ensure the original data exists until you are done with using the pointer. Many methods in Julia such as unsafe_load() and String() make copies of data instead of taking ownership of the buffer, so that it is safe to free (or alter) the original data without affecting Julia. A notable exception is unsafe_wrap() which, for performance reasons, shares (or can be told to take ownership of) the underlying buffer.The garbage collector does not guarantee any order of finalization. That is, if a contained a reference to b and both a and b are due for garbage collection, there is no guarantee that b would be finalized after a. If proper finalization of a depends on b being valid, it must be handled in other ways.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Non-constant-Function-Specifications-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Non-constant Function Specifications\",\n    \"category\": \"section\",\n    \"text\": \"A (name, library) function specification must be a constant expression. However, it is possible to use computed values as function names by staging through eval as follows:@eval ccall(($(string(\\\"a\\\", \\\"b\\\")), \\\"lib\\\"), ...This expression constructs a name using string, then substitutes this name into a new ccall expression, which is then evaluated. Keep in mind that eval only operates at the top level, so within this expression local variables will not be available (unless their values are substituted with $). For this reason, eval is typically only used to form top-level definitions, for example when wrapping libraries that contain many similar functions.If your usage is more dynamic, use indirect calls as described in the next section.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Indirect-Calls-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Indirect Calls\",\n    \"category\": \"section\",\n    \"text\": \"The first argument to ccall can also be an expression evaluated at run time. In this case, the expression must evaluate to a Ptr, which will be used as the address of the native function to call. This behavior occurs when the first ccall argument contains references to non-constants, such as local variables, function arguments, or non-constant globals.For example, you might look up the function via dlsym, then cache it in a global variable for that session. For example:macro dlsym(func, lib)\\n    z, zlocal = gensym(string(func)), gensym()\\n    eval(current_module(), :(global $z = C_NULL))\\n    z = esc(z)\\n    quote\\n        let $zlocal::Ptr{Void} = $z::Ptr{Void}\\n            if $zlocal == C_NULL\\n                $zlocal = dlsym($(esc(lib))::Ptr{Void}, $(esc(func)))\\n                global $z = $zlocal\\n            end\\n            $zlocal\\n        end\\n    end\\nend\\n\\nmylibvar = Libdl.dlopen(\\\"mylib\\\")\\nccall(@dlsym(\\\"myfunc\\\", mylibvar), Void, ())\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Calling-Convention-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Calling Convention\",\n    \"category\": \"section\",\n    \"text\": \"The second argument to ccall can optionally be a calling convention specifier (immediately preceding return type). Without any specifier, the platform-default C calling convention is used. Other supported conventions are: stdcall, cdecl, fastcall, and thiscall. For example (from base/libc.jl) we see the same gethostnameccall as above, but with the correct signature for Windows:hn = Vector{UInt8}(256)\\nerr = ccall(:gethostname, stdcall, Int32, (Ptr{UInt8}, UInt32), hn, length(hn))For more information, please see the LLVM Language Reference.There is one additional special calling convention llvmcall, which allows inserting calls to LLVM intrinsics directly. This can be especially useful when targeting unusual platforms such as GPGPUs. For example, for CUDA, we need to be able to read the thread index:ccall(\\\"llvm.nvvm.read.ptx.sreg.tid.x\\\", llvmcall, Int32, ())As with any ccall, it is essential to get the argument signature exactly correct. Also, note that there is no compatibility layer that ensures the intrinsic makes sense and works on the current target, unlike the equivalent Julia functions exposed by Core.Intrinsics.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Accessing-Global-Variables-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Accessing Global Variables\",\n    \"category\": \"section\",\n    \"text\": \"Global variables exported by native libraries can be accessed by name using the cglobal() function. The arguments to cglobal() are a symbol specification identical to that used by ccall, and a type describing the value stored in the variable:julia> cglobal((:errno, :libc), Int32)\\nPtr{Int32} @0x00007f418d0816b8The result is a pointer giving the address of the value. The value can be manipulated through this pointer using unsafe_load() and unsafe_store!().\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Accessing-Data-through-a-Pointer-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Accessing Data through a Pointer\",\n    \"category\": \"section\",\n    \"text\": \"The following methods are described as \\\"unsafe\\\" because a bad pointer or type declaration can cause Julia to terminate abruptly.Given a Ptr{T}, the contents of type T can generally be copied from the referenced memory into a Julia object using unsafe_load(ptr, [index]). The index argument is optional (default is 1), and follows the Julia-convention of 1-based indexing. This function is intentionally similar to the behavior of getindex() and setindex!() (e.g. [] access syntax).The return value will be a new object initialized to contain a copy of the contents of the referenced memory. The referenced memory can safely be freed or released.If T is Any, then the memory is assumed to contain a reference to a Julia object (a jl_value_t*), the result will be a reference to this object, and the object will not be copied. You must be careful in this case to ensure that the object was always visible to the garbage collector (pointers do not count, but the new reference does) to ensure the memory is not prematurely freed. Note that if the object was not originally allocated by Julia, the new object will never be finalized by Julia's garbage collector.  If the Ptr itself is actually a jl_value_t*, it can be converted back to a Julia object reference by unsafe_pointer_to_objref(ptr). (Julia values v can be converted to jl_value_t* pointers, as Ptr{Void}, by calling pointer_from_objref(v).)The reverse operation (writing data to a Ptr{T}), can be performed using unsafe_store!(ptr, value, [index]). Currently, this is only supported for primitive types or other pointer-free (isbits) immutable struct types.Any operation that throws an error is probably currently unimplemented and should be posted as a bug so that it can be resolved.If the pointer of interest is a plain-data array (primitive type or immutable struct), the function unsafe_wrap(Array, ptr,dims,[own]) may be more useful. The final parameter should be true if Julia should \\\"take ownership\\\" of the underlying buffer and call free(ptr) when the returned Array object is finalized.  If the own parameter is omitted or false, the caller must ensure the buffer remains in existence until all access is complete.Arithmetic on the Ptr type in Julia (e.g. using +) does not behave the same as C's pointer arithmetic. Adding an integer to a Ptr in Julia always moves the pointer by some number of bytes, not elements. This way, the address values obtained from pointer arithmetic do not depend on the element types of pointers.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#Thread-safety-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"Thread-safety\",\n    \"category\": \"section\",\n    \"text\": \"Some C libraries execute their callbacks from a different thread, and since Julia isn't thread-safe you'll need to take some extra precautions. In particular, you'll need to set up a two-layered system: the C callback should only schedule (via Julia's event loop) the execution of your \\\"real\\\" callback. To do this, create a AsyncCondition object and wait on it:cond = Base.AsyncCondition()\\nwait(cond)The callback you pass to C should only execute a ccall to :uv_async_send, passing cond.handle as the argument, taking care to avoid any allocations or other interactions with the Julia runtime.Note that events may be coalesced, so multiple calls to uv_async_send may result in a single wakeup notification to the condition.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#More-About-Callbacks-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"More About Callbacks\",\n    \"category\": \"section\",\n    \"text\": \"For more details on how to pass callbacks to C libraries, see this blog post.\"\n},\n\n{\n    \"location\": \"manual/calling-c-and-fortran-code.html#C-1\",\n    \"page\": \"Calling C and Fortran Code\",\n    \"title\": \"C++\",\n    \"category\": \"section\",\n    \"text\": \"For direct C++ interfacing, see the Cxx package. For tools to create C++ bindings, see the CxxWrap package.\"\n},\n\n{\n    \"location\": \"manual/handling-operating-system-variation.html#\",\n    \"page\": \"Handling Operating System Variation\",\n    \"title\": \"Handling Operating System Variation\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/handling-operating-system-variation.html#Handling-Operating-System-Variation-1\",\n    \"page\": \"Handling Operating System Variation\",\n    \"title\": \"Handling Operating System Variation\",\n    \"category\": \"section\",\n    \"text\": \"When dealing with platform libraries, it is often necessary to provide special cases for various platforms. The variable Sys.KERNEL can be used to write these special cases. There are several functions intended to make this easier: is_unix, is_linux, is_apple, is_bsd, and is_windows. These may be used as follows:if is_windows()\\n    some_complicated_thing(a)\\nendNote that is_linux and is_apple are mutually exclusive subsets of is_unix. Additionally, there is a macro @static which makes it possible to use these functions to conditionally hide invalid code, as demonstrated in the following examples.Simple blocks:ccall( (@static is_windows() ? :_fopen : :fopen), ...)Complex blocks:@static if is_linux()\\n    some_complicated_thing(a)\\nelse\\n    some_different_thing(a)\\nendWhen chaining conditionals (including if/elseif/end), the @static must be repeated for each level (parentheses optional, but recommended for readability):@static is_windows() ? :a : (@static is_apple() ? :b : :c)\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"Environment Variables\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#Environment-Variables-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"Environment Variables\",\n    \"category\": \"section\",\n    \"text\": \"Julia may be configured with a number of environment variables, either in the usual way of the operating system, or in a portable way from within Julia. Suppose you want to set the environment variable JULIA_EDITOR to vim, then either type ENV[\\\"JULIA_EDITOR\\\"] = \\\"vim\\\" for instance in the REPL to make this change on a case by case basis, or add the same to the user configuration file .juliarc.jl in the user's home directory to have a permanent effect. The current value of the same environment variable is determined by evaluating ENV[\\\"JULIA_EDITOR\\\"].The environment variables that Julia uses generally start with JULIA. If Base.versioninfo is called with verbose equal to true, then the output will list defined environment variables relevant for Julia, including those for which JULIA appears in the name.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#File-locations-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"File locations\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_HOME-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_HOME\",\n    \"category\": \"section\",\n    \"text\": \"The absolute path of the directory containing the Julia executable, which sets the global variable Base.JULIA_HOME. If $JULIA_HOME is not set, then Julia determines the value Base.JULIA_HOME at run-time.The executable itself is one of$JULIA_HOME/julia\\n$JULIA_HOME/julia-debugby default.The global variable Base.DATAROOTDIR determines a relative path from Base.JULIA_HOME to the data directory associated with Julia. Then the path$JULIA_HOME/$DATAROOTDIR/julia/basedetermines the directory in which Julia initially searches for source files (via Base.find_source_file()).Likewise, the global variable Base.SYSCONFDIR determines a relative path to the configuration file directory. Then Julia searches for a juliarc.jl file at$JULIA_HOME/$SYSCONFDIR/julia/juliarc.jl\\n$JULIA_HOME/../etc/julia/juliarc.jlby default (via Base.load_juliarc()).For example, a Linux installation with a Julia executable located at /bin/julia, a DATAROOTDIR of ../share, and a SYSCONFDIR of ../etc will have JULIA_HOME set to /bin, a source-file search path of/share/julia/baseand a global configuration search path of/etc/julia/juliarc.jl\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_LOAD_PATH-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_LOAD_PATH\",\n    \"category\": \"section\",\n    \"text\": \"A separated list of absolute paths that are to be appended to the variable LOAD_PATH. (In Unix-like systems, the path separator is :; in Windows systems, the path separator is ;.) The LOAD_PATH variable is where Base.require and Base.load_in_path() look for code; it defaults to the absolute paths$JULIA_HOME/../local/share/julia/site/v$(VERSION.major).$(VERSION.minor)\\n$JULIA_HOME/../share/julia/site/v$(VERSION.major).$(VERSION.minor)so that, e.g., version 0.6 of Julia on a Linux system with a Julia executable at /bin/julia will have a default LOAD_PATH of/local/share/julia/site/v0.6\\n/share/julia/site/v0.6\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_PKGDIR-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_PKGDIR\",\n    \"category\": \"section\",\n    \"text\": \"The path of the parent directory Pkg.Dir._pkgroot() for the version-specific Julia package repositories. If the path is relative, then it is taken with respect to the working directory. If $JULIA_PKGDIR is not set, then Pkg.Dir._pkgroot() defaults to$HOME/.juliaThen the repository location Pkg.dir for a given Julia version is$JULIA_PKGDIR/v$(VERSION.major).$(VERSION.minor)For example, for a Linux user whose home directory is /home/alice, the directory containing the package repositories would by default be/home/alice/.juliaand the package repository for version 0.6 of Julia would be/home/alice/.julia/v0.6\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_HISTORY-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_HISTORY\",\n    \"category\": \"section\",\n    \"text\": \"The absolute path Base.REPL.find_hist_file() of the REPL's history file. If $JULIA_HISTORY is not set, then Base.REPL.find_hist_file() defaults to$HOME/.julia_history\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_PKGRESOLVE_ACCURACY-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_PKGRESOLVE_ACCURACY\",\n    \"category\": \"section\",\n    \"text\": \"A positive Int that determines how much time the max-sum subroutine MaxSum.maxsum() of the package dependency resolver Base.Pkg.resolve will devote to attempting satisfying constraints before giving up: this value is by default 1, and larger values correspond to larger amounts of time.Suppose the value of $JULIA_PKGRESOLVE_ACCURACY is n. Thenthe number of pre-decimation iterations is 20*n,\\nthe number of iterations between decimation steps is 10*n, and\\nat decimation steps, at most one in every 20*n packages is decimated.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#External-applications-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"External applications\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_SHELL-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_SHELL\",\n    \"category\": \"section\",\n    \"text\": \"The absolute path of the shell with which Julia should execute external commands (via Base.repl_cmd()). Defaults to the environment variable $SHELL, and falls back to /bin/sh if $SHELL is unset.note: Note\\nOn Windows, this environment variable is ignored, and external commands are executed directly.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_EDITOR-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_EDITOR\",\n    \"category\": \"section\",\n    \"text\": \"The editor returned by Base.editor() and used in, e.g., Base.edit, referring to the command of the preferred editor, for instance vim.$JULIA_EDITOR takes precedence over $VISUAL, which in turn takes precedence over $EDITOR. If none of these environment variables is set, then the editor is taken to be open on Windows and OS X, or /etc/alternatives/editor if it exists, or emacs otherwise.note: Note\\n$JULIA_EDITOR is not used in the determination of the editor for Base.Pkg.edit: this function checks $VISUAL and $EDITOR alone.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#Parallelization-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"Parallelization\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_CPU_CORES-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_CPU_CORES\",\n    \"category\": \"section\",\n    \"text\": \"Overrides the global variable Base.Sys.CPU_CORES, the number of logical CPU cores available.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_WORKER_TIMEOUT-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_WORKER_TIMEOUT\",\n    \"category\": \"section\",\n    \"text\": \"A Float64 that sets the value of Base.worker_timeout() (default: 60.0). This function gives the number of seconds a worker process will wait for a master process to establish a connection before dying.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_NUM_THREADS-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_NUM_THREADS\",\n    \"category\": \"section\",\n    \"text\": \"An unsigned 64-bit integer (uint64_t) that sets the maximum number of threads available to Julia. If $JULIA_NUM_THREADS exceeds the number of available physical CPU cores, then the number of threads is set to the number of cores. If $JULIA_NUM_THREADS is not positive or is not set, or if the number of CPU cores cannot be determined through system calls, then the number of threads is set to 1.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_THREAD_SLEEP_THRESHOLD-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_THREAD_SLEEP_THRESHOLD\",\n    \"category\": \"section\",\n    \"text\": \"If set to a string that starts with the case-insensitive substring \\\"infinite\\\", then spinning threads never sleep. Otherwise, $JULIA_THREAD_SLEEP_THRESHOLD is interpreted as an unsigned 64-bit integer (uint64_t) and gives, in nanoseconds, the amount of time after which spinning threads should sleep.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_EXCLUSIVE-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_EXCLUSIVE\",\n    \"category\": \"section\",\n    \"text\": \"If set to anything besides 0, then Julia's thread policy is consistent with running on a dedicated machine: the master thread is on proc 0, and threads are affinitized. Otherwise, Julia lets the operating system handle thread policy.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#REPL-formatting-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"REPL formatting\",\n    \"category\": \"section\",\n    \"text\": \"Environment variables that determine how REPL output should be formatted at the terminal. Generally, these variables should be set to ANSI terminal escape sequences. Julia provides a high-level interface with much of the same functionality: see the section on Interacting With Julia.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_ERROR_COLOR-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_ERROR_COLOR\",\n    \"category\": \"section\",\n    \"text\": \"The formatting Base.error_color() (default: light red, \\\"\\\\033[91m\\\") that errors should have at the terminal.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_WARN_COLOR-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_WARN_COLOR\",\n    \"category\": \"section\",\n    \"text\": \"The formatting Base.warn_color() (default: yellow, \\\"\\\\033[93m\\\") that warnings should have at the terminal.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_INFO_COLOR-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_INFO_COLOR\",\n    \"category\": \"section\",\n    \"text\": \"The formatting Base.info_color() (default: cyan, \\\"\\\\033[36m\\\") that info should have at the terminal.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_INPUT_COLOR-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_INPUT_COLOR\",\n    \"category\": \"section\",\n    \"text\": \"The formatting Base.input_color() (default: normal, \\\"\\\\033[0m\\\") that input should have at the terminal.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_ANSWER_COLOR-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_ANSWER_COLOR\",\n    \"category\": \"section\",\n    \"text\": \"The formatting Base.answer_color() (default: normal, \\\"\\\\033[0m\\\") that output should have at the terminal.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_STACKFRAME_LINEINFO_COLOR-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_STACKFRAME_LINEINFO_COLOR\",\n    \"category\": \"section\",\n    \"text\": \"The formatting Base.stackframe_lineinfo_color() (default: bold, \\\"\\\\033[1m\\\") that line info should have during a stack trace at the terminal.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_STACKFRAME_FUNCTION_COLOR-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_STACKFRAME_FUNCTION_COLOR\",\n    \"category\": \"section\",\n    \"text\": \"The formatting Base.stackframe_function_color() (default: bold, \\\"\\\\033[1m\\\") that function calls should have during a stack trace at the terminal.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#Debugging-and-profiling-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"Debugging and profiling\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_GC_ALLOC_POOL,-JULIA_GC_ALLOC_OTHER,-JULIA_GC_ALLOC_PRINT-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_GC_ALLOC_POOL, JULIA_GC_ALLOC_OTHER, JULIA_GC_ALLOC_PRINT\",\n    \"category\": \"section\",\n    \"text\": \"If set, these environment variables take strings that optionally start with the character 'r', followed by a string interpolation of a colon-separated list of three signed 64-bit integers (int64_t). This triple of integers a:b:c represents the arithmetic sequence a, a + b, a + 2*b, ... c.If it's the nth time that jl_gc_pool_alloc() has been called, and n   belongs to the arithmetic sequence represented by $JULIA_GC_ALLOC_POOL,   then garbage collection is forced.\\nIf it's the nth time that maybe_collect() has been called, and n belongs   to the arithmetic sequence represented by $JULIA_GC_ALLOC_OTHER, then garbage   collection is forced.\\nIf it's the nth time that jl_gc_collect() has been called, and n belongs   to the arithmetic sequence represented by $JULIA_GC_ALLOC_PRINT, then counts   for the number of calls to jl_gc_pool_alloc() and maybe_collect() are   printed.If the value of the environment variable begins with the character 'r', then the interval between garbage collection events is randomized.note: Note\\nThese environment variables only have an effect if Julia was compiled with garbage-collection debugging (that is, if WITH_GC_DEBUG_ENV is set to 1 in the build configuration).\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_GC_NO_GENERATIONAL-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_GC_NO_GENERATIONAL\",\n    \"category\": \"section\",\n    \"text\": \"If set to anything besides 0, then the Julia garbage collector never performs \\\"quick sweeps\\\" of memory.note: Note\\nThis environment variable only has an effect if Julia was compiled with garbage-collection debugging (that is, if WITH_GC_DEBUG_ENV is set to 1 in the build configuration).\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_GC_WAIT_FOR_DEBUGGER-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_GC_WAIT_FOR_DEBUGGER\",\n    \"category\": \"section\",\n    \"text\": \"If set to anything besides 0, then the Julia garbage collector will wait for a debugger to attach instead of aborting whenever there's a critical error.note: Note\\nThis environment variable only has an effect if Julia was compiled with garbage-collection debugging (that is, if WITH_GC_DEBUG_ENV is set to 1 in the build configuration).\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#ENABLE_JITPROFILING-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"ENABLE_JITPROFILING\",\n    \"category\": \"section\",\n    \"text\": \"If set to anything besides 0, then the compiler will create and register an event listener for just-in-time (JIT) profiling.note: Note\\nThis environment variable only has an effect if Julia was compiled with JIT profiling support, using eitherIntel's VTune\u2122 Amplifier   (USE_INTEL_JITEVENTS set to 1 in the build configuration), or\\nOProfile (USE_OPROFILE_JITEVENTS set to 1   in the build configuration).\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_LLVM_ARGS-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_LLVM_ARGS\",\n    \"category\": \"section\",\n    \"text\": \"Arguments to be passed to the LLVM backend.note: Note\\nThis environment variable has an effect only if Julia was compiled with JL_DEBUG_BUILD set \u2014 in particular, the julia-debug executable is always compiled with this build variable.\"\n},\n\n{\n    \"location\": \"manual/environment-variables.html#JULIA_DEBUG_LOADING-1\",\n    \"page\": \"Environment Variables\",\n    \"title\": \"JULIA_DEBUG_LOADING\",\n    \"category\": \"section\",\n    \"text\": \"If set, then Julia prints detailed information about the cache in the loading process of Base.require.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Embedding Julia\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Embedding-Julia-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Embedding Julia\",\n    \"category\": \"section\",\n    \"text\": \"As we have seen in Calling C and Fortran Code, Julia has a simple and efficient way to call functions written in C. But there are situations where the opposite is needed: calling Julia function from C code. This can be used to integrate Julia code into a larger C/C++ project, without the need to rewrite everything in C/C++. Julia has a C API to make this possible. As almost all programming languages have some way to call C functions, the Julia C API can also be used to build further language bridges (e.g. calling Julia from Python or C#).\"\n},\n\n{\n    \"location\": \"manual/embedding.html#High-Level-Embedding-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"High-Level Embedding\",\n    \"category\": \"section\",\n    \"text\": \"We start with a simple C program that initializes Julia and calls some Julia code:#include <julia.h>\\n\\nint main(int argc, char *argv[])\\n{\\n    /* required: setup the Julia context */\\n    jl_init();\\n\\n    /* run Julia commands */\\n    jl_eval_string(\\\"print(sqrt(2.0))\\\");\\n\\n    /* strongly recommended: notify Julia that the\\n         program is about to terminate. this allows\\n         Julia time to cleanup pending write requests\\n         and run all finalizers\\n    */\\n    jl_atexit_hook(0);\\n    return 0;\\n}In order to build this program you have to put the path to the Julia header into the include path and link against libjulia. For instance, when Julia is installed to $JULIA_DIR, one can compile the above test program test.c with gcc using:gcc -o test -fPIC -I$JULIA_DIR/include/julia -L$JULIA_DIR/lib test.c -ljulia $JULIA_DIR/lib/julia/libstdc++.so.6Then if the environment variable JULIA_HOME is set to $JULIA_DIR/bin, the output test program can be executed.Alternatively, look at the embedding.c program in the Julia source tree in the examples/ folder. The file ui/repl.c program is another simple example of how to set jl_options options while linking against libjulia.The first thing that has to be done before calling any other Julia C function is to initialize Julia. This is done by calling jl_init, which tries to automatically determine Julia's install location. If you need to specify a custom location, or specify which system image to load, use jl_init_with_image instead.The second statement in the test program evaluates a Julia statement using a call to jl_eval_string.Before the program terminates, it is strongly recommended to call jl_atexit_hook.  The above example program calls this before returning from main.note: Note\\nCurrently, dynamically linking with the libjulia shared library requires passing the RTLD_GLOBAL option. In Python, this looks like:>>> julia=CDLL('./libjulia.dylib',RTLD_GLOBAL)\\n>>> julia.jl_init.argtypes = []\\n>>> julia.jl_init()\\n250593296note: Note\\nIf the julia program needs to access symbols from the main executable, it may be necessary to add -Wl,--export-dynamic linker flag at compile time on Linux in addition to the ones generated by julia-config.jl described below. This is not necessary when compiling a shared library.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Using-julia-config-to-automatically-determine-build-parameters-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Using julia-config to automatically determine build parameters\",\n    \"category\": \"section\",\n    \"text\": \"The script julia-config.jl was created to aid in determining what build parameters are required by a program that uses embedded Julia.  This script uses the build parameters and system configuration of the particular Julia distribution it is invoked by to export the necessary compiler flags for an embedding program to interact with that distribution.  This script is located in the Julia shared data directory.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Example-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Example\",\n    \"category\": \"section\",\n    \"text\": \"#include <julia.h>\\n\\nint main(int argc, char *argv[])\\n{\\n    jl_init();\\n    (void)jl_eval_string(\\\"println(sqrt(2.0))\\\");\\n    jl_atexit_hook(0);\\n    return 0;\\n}\"\n},\n\n{\n    \"location\": \"manual/embedding.html#On-the-command-line-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"On the command line\",\n    \"category\": \"section\",\n    \"text\": \"A simple use of this script is from the command line.  Assuming that julia-config.jl is located in /usr/local/julia/share/julia, it can be invoked on the command line directly and takes any combination of 3 flags:/usr/local/julia/share/julia/julia-config.jl\\nUsage: julia-config [--cflags|--ldflags|--ldlibs]If the above example source is saved in the file embed_example.c, then the following command will compile it into a running program on Linux and Windows (MSYS2 environment), or if on OS/X, then substitute clang for gcc.:/usr/local/julia/share/julia/julia-config.jl --cflags --ldflags --ldlibs | xargs gcc embed_example.c\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Use-in-Makefiles-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Use in Makefiles\",\n    \"category\": \"section\",\n    \"text\": \"But in general, embedding projects will be more complicated than the above, and so the following allows general makefile support as well \u2013 assuming GNU make because of the use of the shell macro expansions.  Additionally, though many times julia-config.jl may be found in the directory /usr/local, this is not necessarily the case, but Julia can be used to locate julia-config.jl too, and the makefile can be used to take advantage of that.  The above example is extended to use a Makefile:JL_SHARE = $(shell julia -e 'print(joinpath(JULIA_HOME,Base.DATAROOTDIR,\\\"julia\\\"))')\\nCFLAGS   += $(shell $(JL_SHARE)/julia-config.jl --cflags)\\nCXXFLAGS += $(shell $(JL_SHARE)/julia-config.jl --cflags)\\nLDFLAGS  += $(shell $(JL_SHARE)/julia-config.jl --ldflags)\\nLDLIBS   += $(shell $(JL_SHARE)/julia-config.jl --ldlibs)\\n\\nall: embed_exampleNow the build command is simply make.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Converting-Types-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Converting Types\",\n    \"category\": \"section\",\n    \"text\": \"Real applications will not just need to execute expressions, but also return their values to the host program. jl_eval_string returns a jl_value_t*, which is a pointer to a heap-allocated Julia object. Storing simple data types like Float64 in this way is called boxing, and extracting the stored primitive data is called unboxing. Our improved sample program that calculates the square root of 2 in Julia and reads back the result in C looks as follows:jl_value_t *ret = jl_eval_string(\\\"sqrt(2.0)\\\");\\n\\nif (jl_typeis(ret, jl_float64_type)) {\\n    double ret_unboxed = jl_unbox_float64(ret);\\n    printf(\\\"sqrt(2.0) in C: %e \\\\n\\\", ret_unboxed);\\n}\\nelse {\\n    printf(\\\"ERROR: unexpected return type from sqrt(::Float64)\\\\n\\\");\\n}In order to check whether ret is of a specific Julia type, we can use the jl_isa, jl_typeis, or jl_is_... functions. By typing typeof(sqrt(2.0)) into the Julia shell we can see that the return type is Float64 (double in C). To convert the boxed Julia value into a C double the jl_unbox_float64 function is used in the above code snippet.Corresponding jl_box_... functions are used to convert the other way:jl_value_t *a = jl_box_float64(3.0);\\njl_value_t *b = jl_box_float32(3.0f);\\njl_value_t *c = jl_box_int32(3);As we will see next, boxing is required to call Julia functions with specific arguments.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Calling-Julia-Functions-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Calling Julia Functions\",\n    \"category\": \"section\",\n    \"text\": \"While jl_eval_string allows C to obtain the result of a Julia expression, it does not allow passing arguments computed in C to Julia. For this you will need to invoke Julia functions directly, using jl_call:jl_function_t *func = jl_get_function(jl_base_module, \\\"sqrt\\\");\\njl_value_t *argument = jl_box_float64(2.0);\\njl_value_t *ret = jl_call1(func, argument);In the first step, a handle to the Julia function sqrt is retrieved by calling jl_get_function. The first argument passed to jl_get_function is a pointer to the Base module in which sqrt is defined. Then, the double value is boxed using jl_box_float64. Finally, in the last step, the function is called using jl_call1. jl_call0, jl_call2, and jl_call3 functions also exist, to conveniently handle different numbers of arguments. To pass more arguments, use jl_call:jl_value_t *jl_call(jl_function_t *f, jl_value_t **args, int32_t nargs)Its second argument args is an array of jl_value_t* arguments and nargs is the number of arguments.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Memory-Management-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Memory Management\",\n    \"category\": \"section\",\n    \"text\": \"As we have seen, Julia objects are represented in C as pointers. This raises the question of who is responsible for freeing these objects.Typically, Julia objects are freed by a garbage collector (GC), but the GC does not automatically know that we are holding a reference to a Julia value from C. This means the GC can free objects out from under you, rendering pointers invalid.The GC can only run when Julia objects are allocated. Calls like jl_box_float64 perform allocation, and allocation might also happen at any point in running Julia code. However, it is generally safe to use pointers in between jl_... calls. But in order to make sure that values can survive jl_... calls, we have to tell Julia that we hold a reference to a Julia value. This can be done using the JL_GC_PUSH macros:jl_value_t *ret = jl_eval_string(\\\"sqrt(2.0)\\\");\\nJL_GC_PUSH1(&ret);\\n// Do something with ret\\nJL_GC_POP();The JL_GC_POP call releases the references established by the previous JL_GC_PUSH. Note that JL_GC_PUSH  is working on the stack, so it must be exactly paired with a JL_GC_POP before the stack frame is destroyed.Several Julia values can be pushed at once using the JL_GC_PUSH2 , JL_GC_PUSH3 , and JL_GC_PUSH4 macros. To push an array of Julia values one can use the  JL_GC_PUSHARGS macro, which can be used as follows:jl_value_t **args;\\nJL_GC_PUSHARGS(args, 2); // args can now hold 2 `jl_value_t*` objects\\nargs[0] = some_value;\\nargs[1] = some_other_value;\\n// Do something with args (e.g. call jl_... functions)\\nJL_GC_POP();The garbage collector also operates under the assumption that it is aware of every old-generation object pointing to a young-generation one. Any time a pointer is updated breaking that assumption, it must be signaled to the collector with the jl_gc_wb (write barrier) function like so:jl_value_t *parent = some_old_value, *child = some_young_value;\\n((some_specific_type*)parent)->field = child;\\njl_gc_wb(parent, child);It is in general impossible to predict which values will be old at runtime, so the write barrier must be inserted after all explicit stores. One notable exception is if the parent object was just allocated and garbage collection was not run since then. Remember that most jl_... functions can sometimes invoke garbage collection.The write barrier is also necessary for arrays of pointers when updating their data directly. For example:jl_array_t *some_array = ...; // e.g. a Vector{Any}\\nvoid **data = (void**)jl_array_data(some_array);\\njl_value_t *some_value = ...;\\ndata[0] = some_value;\\njl_gc_wb(some_array, some_value);\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Manipulating-the-Garbage-Collector-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Manipulating the Garbage Collector\",\n    \"category\": \"section\",\n    \"text\": \"There are some functions to control the GC. In normal use cases, these should not be necessary.Function Description\\njl_gc_collect() Force a GC run\\njl_gc_enable(0) Disable the GC, return previous state as int\\njl_gc_enable(1) Enable the GC,  return previous state as int\\njl_gc_is_enabled() Return current state as int\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Working-with-Arrays-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Working with Arrays\",\n    \"category\": \"section\",\n    \"text\": \"Julia and C can share array data without copying. The next example will show how this works.Julia arrays are represented in C by the datatype jl_array_t*. Basically, jl_array_t is a struct that contains:Information about the datatype\\nA pointer to the data block\\nInformation about the sizes of the arrayTo keep things simple, we start with a 1D array. Creating an array containing Float64 elements of length 10 is done by:jl_value_t* array_type = jl_apply_array_type(jl_float64_type, 1);\\njl_array_t* x          = jl_alloc_array_1d(array_type, 10);Alternatively, if you have already allocated the array you can generate a thin wrapper around its data:double *existingArray = (double*)malloc(sizeof(double)*10);\\njl_array_t *x = jl_ptr_to_array_1d(array_type, existingArray, 10, 0);The last argument is a boolean indicating whether Julia should take ownership of the data. If this argument is non-zero, the GC will call free on the data pointer when the array is no longer referenced.In order to access the data of x, we can use jl_array_data:double *xData = (double*)jl_array_data(x);Now we can fill the array:for(size_t i=0; i<jl_array_len(x); i++)\\n    xData[i] = i;Now let us call a Julia function that performs an in-place operation on x:jl_function_t *func = jl_get_function(jl_base_module, \\\"reverse!\\\");\\njl_call1(func, (jl_value_t*)x);By printing the array, one can verify that the elements of x are now reversed.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Accessing-Returned-Arrays-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Accessing Returned Arrays\",\n    \"category\": \"section\",\n    \"text\": \"If a Julia function returns an array, the return value of jl_eval_string and jl_call can be cast to a jl_array_t*:jl_function_t *func  = jl_get_function(jl_base_module, \\\"reverse\\\");\\njl_array_t *y = (jl_array_t*)jl_call1(func, (jl_value_t*)x);Now the content of y can be accessed as before using jl_array_data. As always, be sure to keep a reference to the array while it is in use.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Multidimensional-Arrays-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Multidimensional Arrays\",\n    \"category\": \"section\",\n    \"text\": \"Julia's multidimensional arrays are stored in memory in column-major order. Here is some code that creates a 2D array and accesses its properties:// Create 2D array of float64 type\\njl_value_t *array_type = jl_apply_array_type(jl_float64_type, 2);\\njl_array_t *x  = jl_alloc_array_2d(array_type, 10, 5);\\n\\n// Get array pointer\\ndouble *p = (double*)jl_array_data(x);\\n// Get number of dimensions\\nint ndims = jl_array_ndims(x);\\n// Get the size of the i-th dim\\nsize_t size0 = jl_array_dim(x,0);\\nsize_t size1 = jl_array_dim(x,1);\\n\\n// Fill array with data\\nfor(size_t i=0; i<size1; i++)\\n    for(size_t j=0; j<size0; j++)\\n        p[j + size0*i] = i + j;Notice that while Julia arrays use 1-based indexing, the C API uses 0-based indexing (for example in calling jl_array_dim) in order to read as idiomatic C code.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Exceptions-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Exceptions\",\n    \"category\": \"section\",\n    \"text\": \"Julia code can throw exceptions. For example, consider:jl_eval_string(\\\"this_function_does_not_exist()\\\");This call will appear to do nothing. However, it is possible to check whether an exception was thrown:if (jl_exception_occurred())\\n    printf(\\\"%s \\\\n\\\", jl_typeof_str(jl_exception_occurred()));If you are using the Julia C API from a language that supports exceptions (e.g. Python, C#, C++), it makes sense to wrap each call into libjulia with a function that checks whether an exception was thrown, and then rethrows the exception in the host language.\"\n},\n\n{\n    \"location\": \"manual/embedding.html#Throwing-Julia-Exceptions-1\",\n    \"page\": \"Embedding Julia\",\n    \"title\": \"Throwing Julia Exceptions\",\n    \"category\": \"section\",\n    \"text\": \"When writing Julia callable functions, it might be necessary to validate arguments and throw exceptions to indicate errors. A typical type check looks like:if (!jl_typeis(val, jl_float64_type)) {\\n    jl_type_error(function_name, (jl_value_t*)jl_float64_type, val);\\n}General exceptions can be raised using the functions:void jl_error(const char *str);\\nvoid jl_errorf(const char *fmt, ...);jl_error takes a C string, and jl_errorf is called like printf:jl_errorf(\\\"argument x = %d is too large\\\", x);where in this example x is assumed to be an integer.\"\n},\n\n{\n    \"location\": \"manual/packages.html#\",\n    \"page\": \"Packages\",\n    \"title\": \"Packages\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/packages.html#Packages-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Packages\",\n    \"category\": \"section\",\n    \"text\": \"Julia has a built-in package manager for installing add-on functionality written in Julia. It can also install external libraries using your operating system's standard system for doing so, or by compiling from source. The list of registered Julia packages can be found at http://pkg.julialang.org. All package manager commands are found in the Pkg module, included in Julia's Base install.First we'll go over the mechanics of the Pkg family of commands and then we'll provide some guidance on how to get your package registered. Be sure to read the section below on package naming conventions, tagging versions and the importance of a REQUIRE file for when you're ready to add your code to the curated METADATA repository.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Package-Status-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Package Status\",\n    \"category\": \"section\",\n    \"text\": \"The Pkg.status() function prints out a summary of the state of packages you have installed. Initially, you'll have no packages installed:julia> Pkg.status()\\nINFO: Initializing package repository /Users/stefan/.julia/v0.6\\nINFO: Cloning METADATA from git://github.com/JuliaLang/METADATA.jl\\nNo packages installed.Your package directory is automatically initialized the first time you run a Pkg command that expects it to exist \u2013 which includes Pkg.status(). Here's an example non-trivial set of required and additional packages:julia> Pkg.status()\\nRequired packages:\\n - Distributions                 0.2.8\\n - SHA                           0.3.2\\nAdditional packages:\\n - NumericExtensions             0.2.17\\n - Stats                         0.2.6These packages are all on registered versions, managed by Pkg. Packages can be in more complicated states, indicated by annotations to the right of the installed package version; we will explain these states and annotations as we encounter them. For programmatic usage, Pkg.installed() returns a dictionary, mapping installed package names to the version of that package which is installed:julia> Pkg.installed()\\nDict{String,VersionNumber} with 4 entries:\\n\\\"Distributions\\\"     => v\\\"0.2.8\\\"\\n\\\"Stats\\\"             => v\\\"0.2.6\\\"\\n\\\"SHA\\\"               => v\\\"0.3.2\\\"\\n\\\"NumericExtensions\\\" => v\\\"0.2.17\\\"\"\n},\n\n{\n    \"location\": \"manual/packages.html#Adding-and-Removing-Packages-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Adding and Removing Packages\",\n    \"category\": \"section\",\n    \"text\": \"Julia's package manager is a little unusual in that it is declarative rather than imperative. This means that you tell it what you want and it figures out what versions to install (or remove) to satisfy those requirements optimally \u2013 and minimally. So rather than installing a package, you just add it to the list of requirements and then \\\"resolve\\\" what needs to be installed. In particular, this means that if some package had been installed because it was needed by a previous version of something you wanted, and a newer version doesn't have that requirement anymore, updating will actually remove that package.Your package requirements are in the file ~/.julia/v0.6/REQUIRE. You can edit this file by hand and then call Pkg.resolve() to install, upgrade or remove packages to optimally satisfy the requirements, or you can do Pkg.edit(), which will open REQUIRE in your editor (configured via the EDITOR or VISUAL environment variables), and then automatically call Pkg.resolve() afterwards if necessary. If you only want to add or remove the requirement for a single package, you can also use the non-interactive Pkg.add() and Pkg.rm() commands, which add or remove a single requirement to REQUIRE and then call Pkg.resolve().You can add a package to the list of requirements with the Pkg.add() function, and the package and all the packages that it depends on will be installed:julia> Pkg.status()\\nNo packages installed.\\n\\njulia> Pkg.add(\\\"Distributions\\\")\\nINFO: Cloning cache of Distributions from git://github.com/JuliaStats/Distributions.jl.git\\nINFO: Cloning cache of NumericExtensions from git://github.com/lindahua/NumericExtensions.jl.git\\nINFO: Cloning cache of Stats from git://github.com/JuliaStats/Stats.jl.git\\nINFO: Installing Distributions v0.2.7\\nINFO: Installing NumericExtensions v0.2.17\\nINFO: Installing Stats v0.2.6\\nINFO: REQUIRE updated.\\n\\njulia> Pkg.status()\\nRequired packages:\\n - Distributions                 0.2.7\\nAdditional packages:\\n - NumericExtensions             0.2.17\\n - Stats                         0.2.6What this is doing is first adding Distributions to your ~/.julia/v0.6/REQUIRE file:$ cat ~/.julia/v0.6/REQUIRE\\nDistributionsIt then runs Pkg.resolve() using these new requirements, which leads to the conclusion that the Distributions package should be installed since it is required but not installed. As stated before, you can accomplish the same thing by editing your ~/.julia/v0.6/REQUIRE file by hand and then running Pkg.resolve() yourself:$ echo SHA >> ~/.julia/v0.6/REQUIRE\\n\\njulia> Pkg.resolve()\\nINFO: Cloning cache of SHA from git://github.com/staticfloat/SHA.jl.git\\nINFO: Installing SHA v0.3.2\\n\\njulia> Pkg.status()\\nRequired packages:\\n - Distributions                 0.2.7\\n - SHA                           0.3.2\\nAdditional packages:\\n - NumericExtensions             0.2.17\\n - Stats                         0.2.6This is functionally equivalent to calling Pkg.add(\\\"SHA\\\"), except that Pkg.add() doesn't change REQUIRE until after installation has completed, so if there are problems, REQUIRE will be left as it was before calling Pkg.add(). The format of the REQUIRE file is described in Requirements Specification; it allows, among other things, requiring specific ranges of versions of packages.When you decide that you don't want to have a package around any more, you can use Pkg.rm() to remove the requirement for it from the REQUIRE file:julia> Pkg.rm(\\\"Distributions\\\")\\nINFO: Removing Distributions v0.2.7\\nINFO: Removing Stats v0.2.6\\nINFO: Removing NumericExtensions v0.2.17\\nINFO: REQUIRE updated.\\n\\njulia> Pkg.status()\\nRequired packages:\\n - SHA                           0.3.2\\n\\njulia> Pkg.rm(\\\"SHA\\\")\\nINFO: Removing SHA v0.3.2\\nINFO: REQUIRE updated.\\n\\njulia> Pkg.status()\\nNo packages installed.Once again, this is equivalent to editing the REQUIRE file to remove the line with each package name on it then running Pkg.resolve() to update the set of installed packages to match. While Pkg.add() and Pkg.rm() are convenient for adding and removing requirements for a single package, when you want to add or remove multiple packages, you can call Pkg.edit() to manually change the contents of REQUIRE and then update your packages accordingly. Pkg.edit() does not roll back the contents of REQUIRE if Pkg.resolve() fails \u2013 rather, you have to run Pkg.edit() again to fix the files contents yourself.Because the package manager uses libgit2 internally to manage the package git repositories, users may run into protocol issues (if behind a firewall, for example), when running Pkg.add(). By default, all GitHub-hosted packages wil be accessed via 'https'; this default can be modified by calling Pkg.setprotocol!(). The following command can be run from the command line in order to tell git to use 'https' instead of the 'git' protocol when cloning all repositories, wherever they are hosted:git config --global url.\\\"https://\\\".insteadOf git://However, this change will be system-wide and thus the use of Pkg.setprotocol!() is preferable.note: Note\\nThe package manager functions also accept the .jl suffix on package names, though the suffix is stripped internally. For example:Pkg.add(\\\"Distributions.jl\\\")\\nPkg.rm(\\\"Distributions.jl\\\")\"\n},\n\n{\n    \"location\": \"manual/packages.html#Offline-Installation-of-Packages-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Offline Installation of Packages\",\n    \"category\": \"section\",\n    \"text\": \"For machines with no Internet connection, packages may be installed by copying the package root directory (given by Pkg.dir()) from a machine with the same operating system and environment.Pkg.add() does the following within the package root directory:Adds the name of the package to REQUIRE.\\nDownloads the package to .cache, then copies the package to the package root directory.\\nRecursively performs step 2 against all the packages listed in the package's REQUIRE file.\\nRuns Pkg.build()warning: Warning\\nCopying installed packages from a different machine is brittle for packages requiring binary external dependencies. Such packages may break due to differences in operating system versions, build environments, and/or absolute path dependencies.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Installing-Unregistered-Packages-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Installing Unregistered Packages\",\n    \"category\": \"section\",\n    \"text\": \"Julia packages are simply git repositories, clonable via any of the protocols that git supports, and containing Julia code that follows certain layout conventions. Official Julia packages are registered in the METADATA.jl repository, available at a well-known location [1]. The Pkg.add() and Pkg.rm() commands in the previous section interact with registered packages, but the package manager can install and work with unregistered packages too. To install an unregistered package, use Pkg.clone(url), where url is a git URL from which the package can be cloned:julia> Pkg.clone(\\\"git://example.com/path/to/Package.jl.git\\\")\\nINFO: Cloning Package from git://example.com/path/to/Package.jl.git\\nCloning into 'Package'...\\nremote: Counting objects: 22, done.\\nremote: Compressing objects: 100% (10/10), done.\\nremote: Total 22 (delta 8), reused 22 (delta 8)\\nReceiving objects: 100% (22/22), 2.64 KiB, done.\\nResolving deltas: 100% (8/8), done.By convention, Julia repository names end with .jl (the additional .git indicates a \\\"bare\\\" git repository), which keeps them from colliding with repositories for other languages, and also makes Julia packages easy to find in search engines. When packages are installed in your .julia/v0.6 directory, however, the extension is redundant so we leave it off.If unregistered packages contain a REQUIRE file at the top of their source tree, that file will be used to determine which registered packages the unregistered package depends on, and they will automatically be installed. Unregistered packages participate in the same version resolution logic as registered packages, so installed package versions will be adjusted as necessary to satisfy the requirements of both registered and unregistered packages.[1]: The official set of packages is at https://github.com/JuliaLang/METADATA.jl, but individuals and organizations can easily use a different metadata repository. This allows control which packages are available for automatic installation. One can allow only audited and approved package versions, and make private packages or forks available. See Custom METADATA Repository for details.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Updating-Packages-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Updating Packages\",\n    \"category\": \"section\",\n    \"text\": \"When package developers publish new registered versions of packages that you're using, you will, of course, want the new shiny versions. To get the latest and greatest versions of all your packages, just do Pkg.update():julia> Pkg.update()\\nINFO: Updating METADATA...\\nINFO: Computing changes...\\nINFO: Upgrading Distributions: v0.2.8 => v0.2.10\\nINFO: Upgrading Stats: v0.2.7 => v0.2.8The first step of updating packages is to pull new changes to ~/.julia/v0.6/METADATA and see if any new registered package versions have been published. After this, Pkg.update() attempts to update packages that are checked out on a branch and not dirty (i.e. no changes have been made to files tracked by git) by pulling changes from the package's upstream repository. Upstream changes will only be applied if no merging or rebasing is necessary \u2013 i.e. if the branch can be \\\"fast-forwarded\\\". If the branch cannot be fast-forwarded, it is assumed that you're working on it and will update the repository yourself.Finally, the update process recomputes an optimal set of package versions to have installed to satisfy your top-level requirements and the requirements of \\\"fixed\\\" packages. A package is considered fixed if it is one of the following:Unregistered: the package is not in METADATA \u2013 you installed it with Pkg.clone().\\nChecked out: the package repo is on a development branch.\\nDirty: changes have been made to files in the repo.If any of these are the case, the package manager cannot freely change the installed version of the package, so its requirements must be satisfied by whatever other package versions it picks. The combination of top-level requirements in ~/.julia/v0.6/REQUIRE and the requirement of fixed packages are used to determine what should be installed.You can also update only a subset of the installed packages, by providing arguments to the Pkg.update function. In that case, only the packages provided as arguments and their dependencies will be updated:julia> Pkg.update(\\\"Example\\\")\\nINFO: Updating METADATA...\\nINFO: Computing changes...\\nINFO: Upgrading Example: v0.4.0 => 0.4.1This partial update process still computes the new set of package versions according to top-level requirements and \\\"fixed\\\" packages, but it additionally considers all other packages except those explicitly provided, and their dependencies, as fixed.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Checkout,-Pin-and-Free-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Checkout, Pin and Free\",\n    \"category\": \"section\",\n    \"text\": \"You may want to use the master version of a package rather than one of its registered versions. There might be fixes or functionality on master that you need that aren't yet published in any registered versions, or you may be a developer of the package and need to make changes on master or some other development branch. In such cases, you can do Pkg.checkout(pkg) to checkout the master branch of pkg or Pkg.checkout(pkg,branch) to checkout some other branch:julia> Pkg.add(\\\"Distributions\\\")\\nINFO: Installing Distributions v0.2.9\\nINFO: Installing NumericExtensions v0.2.17\\nINFO: Installing Stats v0.2.7\\nINFO: REQUIRE updated.\\n\\njulia> Pkg.status()\\nRequired packages:\\n - Distributions                 0.2.9\\nAdditional packages:\\n - NumericExtensions             0.2.17\\n - Stats                         0.2.7\\n\\njulia> Pkg.checkout(\\\"Distributions\\\")\\nINFO: Checking out Distributions master...\\nINFO: No packages to install, update or remove.\\n\\njulia> Pkg.status()\\nRequired packages:\\n - Distributions                 0.2.9+             master\\nAdditional packages:\\n - NumericExtensions             0.2.17\\n - Stats                         0.2.7Immediately after installing Distributions with Pkg.add() it is on the current most recent registered version \u2013 0.2.9 at the time of writing this. Then after running Pkg.checkout(\\\"Distributions\\\"), you can see from the output of Pkg.status() that Distributions is on an unregistered version greater than 0.2.9, indicated by the \\\"pseudo-version\\\" number 0.2.9+.When you checkout an unregistered version of a package, the copy of the REQUIRE file in the package repo takes precedence over any requirements registered in METADATA, so it is important that developers keep this file accurate and up-to-date, reflecting the actual requirements of the current version of the package. If the REQUIRE file in the package repo is incorrect or missing, dependencies may be removed when the package is checked out. This file is also used to populate newly published versions of the package if you use the API that Pkg provides for this (described below).When you decide that you no longer want to have a package checked out on a branch, you can \\\"free\\\" it back to the control of the package manager with Pkg.free(pkg):julia> Pkg.free(\\\"Distributions\\\")\\nINFO: Freeing Distributions...\\nINFO: No packages to install, update or remove.\\n\\njulia> Pkg.status()\\nRequired packages:\\n - Distributions                 0.2.9\\nAdditional packages:\\n - NumericExtensions             0.2.17\\n - Stats                         0.2.7After this, since the package is on a registered version and not on a branch, its version will be updated as new registered versions of the package are published.If you want to pin a package at a specific version so that calling Pkg.update() won't change the version the package is on, you can use the Pkg.pin() function:julia> Pkg.pin(\\\"Stats\\\")\\nINFO: Creating Stats branch pinned.47c198b1.tmp\\n\\njulia> Pkg.status()\\nRequired packages:\\n - Distributions                 0.2.9\\nAdditional packages:\\n - NumericExtensions             0.2.17\\n - Stats                         0.2.7              pinned.47c198b1.tmpAfter this, the Stats package will remain pinned at version 0.2.7 \u2013 or more specifically, at commit 47c198b1, but since versions are permanently associated a given git hash, this is the same thing. Pkg.pin() works by creating a throw-away branch for the commit you want to pin the package at and then checking that branch out. By default, it pins a package at the current commit, but you can choose a different version by passing a second argument:julia> Pkg.pin(\\\"Stats\\\",v\\\"0.2.5\\\")\\nINFO: Creating Stats branch pinned.1fd0983b.tmp\\nINFO: No packages to install, update or remove.\\n\\njulia> Pkg.status()\\nRequired packages:\\n - Distributions                 0.2.9\\nAdditional packages:\\n - NumericExtensions             0.2.17\\n - Stats                         0.2.5              pinned.1fd0983b.tmpNow the Stats package is pinned at commit 1fd0983b, which corresponds to version 0.2.5. When you decide to \\\"unpin\\\" a package and let the package manager update it again, you can use Pkg.free() like you would to move off of any branch:julia> Pkg.free(\\\"Stats\\\")\\nINFO: Freeing Stats...\\nINFO: No packages to install, update or remove.\\n\\njulia> Pkg.status()\\nRequired packages:\\n - Distributions                 0.2.9\\nAdditional packages:\\n - NumericExtensions             0.2.17\\n - Stats                         0.2.7After this, the Stats package is managed by the package manager again, and future calls to Pkg.update() will upgrade it to newer versions when they are published. The throw-away pinned.1fd0983b.tmp branch remains in your local Stats repo, but since git branches are extremely lightweight, this doesn't really matter; if you feel like cleaning them up, you can go into the repo and delete those branches [2].[2]: Packages that aren't on branches will also be marked as dirty if you make changes in the repo, but that's a less common thing to do.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Custom-METADATA-Repository-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Custom METADATA Repository\",\n    \"category\": \"section\",\n    \"text\": \"By default, Julia assumes you will be using the official METADATA.jl repository for downloading and installing packages. You can also provide a different metadata repository location. A common approach is to keep your metadata-v2 branch up to date with the Julia official branch and add another branch with your custom packages. You can initialize your local metadata repository using that custom location and branch and then periodically rebase your custom branch with the official metadata-v2 branch. In order to use a custom repository and branch, issue the following command:julia> Pkg.init(\\\"https://me.example.com/METADATA.jl.git\\\", \\\"branch\\\")The branch argument is optional and defaults to metadata-v2. Once initialized, a file named META_BRANCH in your ~/.julia/vX.Y/ path will track the branch that your METADATA repository was initialized with. If you want to change branches, you will need to either modify the META_BRANCH file directly (be careful!) or remove the vX.Y directory and re-initialize your METADATA repository using the Pkg.init command.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Package-Development-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Package Development\",\n    \"category\": \"section\",\n    \"text\": \"Julia's package manager is designed so that when you have a package installed, you are already in a position to look at its source code and full development history. You are also able to make changes to packages, commit them using git, and easily contribute fixes and enhancements upstream. Similarly, the system is designed so that if you want to create a new package, the simplest way to do so is within the infrastructure provided by the package manager.\"\n},\n\n{\n    \"location\": \"manual/packages.html#man-initial-setup-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Initial Setup\",\n    \"category\": \"section\",\n    \"text\": \"Since packages are git repositories, before doing any package development you should setup the following standard global git configuration settings:$ git config --global user.name \\\"FULL NAME\\\"\\n$ git config --global user.email \\\"EMAIL\\\"where FULL NAME is your actual full name (spaces are allowed between the double quotes) and EMAIL is your actual email address. Although it isn't necessary to use GitHub to create or publish Julia packages, most Julia packages as of writing this are hosted on GitHub and the package manager knows how to format origin URLs correctly and otherwise work with the service smoothly. We recommend that you create a free account on GitHub and then do:$ git config --global github.user \\\"USERNAME\\\"where USERNAME is your actual GitHub user name. Once you do this, the package manager knows your GitHub user name and can configure things accordingly. You should also upload your public SSH key to GitHub and set up an SSH agent on your development machine so that you can push changes with minimal hassle. In the future, we will make this system extensible and support other common git hosting options like BitBucket and allow developers to choose their favorite. Since the package development functions has been moved to the PkgDev package, you need to run Pkg.add(\\\"PkgDev\\\"); import PkgDev to access the functions starting with PkgDev. in the document below.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Making-changes-to-an-existing-package-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Making changes to an existing package\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/packages.html#Documentation-changes-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Documentation changes\",\n    \"category\": \"section\",\n    \"text\": \"If you want to improve the online documentation of a package, the easiest approach (at least for small changes) is to use GitHub's online editing functionality. First, navigate to the repository's GitHub \\\"home page,\\\" find the file (e.g., README.md) within the repository's folder structure, and click on it. You'll see the contents displayed, along with a small \\\"pencil\\\" icon in the upper right hand corner. Clicking that icon opens the file in edit mode. Make your changes, write a brief summary describing the changes you want to make (this is your commit message), and then hit \\\"Propose file change.\\\" Your changes will be submitted for consideration by the package owner(s) and collaborators.For larger documentation changes\u2013and especially ones that you expect to have to update in response to feedback\u2013you might find it easier to use the procedure for code changes described below.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Code-changes-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Code changes\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/packages.html#Executive-summary-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Executive summary\",\n    \"category\": \"section\",\n    \"text\": \"Here we assume you've already set up git on your local machine and have a GitHub account (see above). Let's imagine you're fixing a bug in the Images package:Pkg.checkout(\\\"Images\\\")           # check out the master branch\\n<here, make sure your bug is still a bug and hasn't been fixed already>\\ncd(Pkg.dir(\\\"Images\\\"))\\n;git checkout -b myfixes         # create a branch for your changes\\n<edit code>                      # be sure to add a test for your bug\\nPkg.test(\\\"Images\\\")               # make sure everything works now\\n;git commit -a -m \\\"Fix foo by calling bar\\\"   # write a descriptive message\\nusing PkgDev\\nPkgDev.submit(\\\"Images\\\")The last line will present you with a link to submit a pull request to incorporate your changes.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Detailed-description-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Detailed description\",\n    \"category\": \"section\",\n    \"text\": \"If you want to fix a bug or add new functionality, you want to be able to test your changes before you submit them for consideration. You also need to have an easy way to update your proposal in response to the package owner's feedback. Consequently, in this case the strategy is to work locally on your own machine; once you are satisfied with your changes, you submit them for consideration.  This process is called a pull request because you are asking to \\\"pull\\\" your changes into the project's main repository. Because the online repository can't see the code on your private machine, you first push your changes to a publicly-visible location, your own online fork of the package (hosted on your own personal GitHub account).Let's assume you already have the Foo package installed. In the description below, anything starting with Pkg. or PkgDev. is meant to be typed at the Julia prompt; anything starting with git is meant to be typed in julia's shell mode (or using the shell that comes with your operating system). Within Julia, you can combine these two modes:julia> cd(Pkg.dir(\\\"Foo\\\"))          # go to Foo's folder\\n\\nshell> git command arguments...    # command will apply to FooNow suppose you're ready to make some changes to Foo. While there are several possible approaches, here is one that is widely used:From the Julia prompt, type Pkg.checkout(\\\"Foo\\\"). This ensures you're running the latest code (the master branch), rather than just whatever \\\"official release\\\" version you have installed. (If you're planning to fix a bug, at this point it's a good idea to check again whether the bug has already been fixed by someone else. If it has, you can request that a new official release be tagged so that the fix gets distributed to the rest of the community.) If you receive an error Foo is dirty, bailing, see Dirty packages below.\\nCreate a branch for your changes: navigate to the package folder (the one that Julia reports from Pkg.dir(\\\"Foo\\\")) and (in shell mode) create a new branch using git checkout -b <newbranch>, where <newbranch> might be some descriptive name (e.g., fixbar). By creating a branch, you ensure that you can easily go back and forth between your new work and the current master branch (see https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell).\\nIf you forget to do this step until after you've already made some changes, don't worry: see more detail about branching below.\\nMake your changes. Whether it's fixing a bug or adding new functionality, in most cases your change should include updates to both the src/ and test/ folders. If you're fixing a bug, add your minimal example demonstrating the bug (on the current code) to the test suite; by contributing a test for the bug, you ensure that the bug won't accidentally reappear at some later time due to other changes. If you're adding new functionality, creating tests demonstrates to the package owner that you've made sure your code works as intended.\\nRun the package's tests and make sure they pass. There are several ways to run the tests:\\nFrom Julia, run Pkg.test(\\\"Foo\\\"): this will run your tests in a separate (new) julia process.\\nFrom Julia, include(\\\"runtests.jl\\\") from the package's test/ folder (it's possible the file has a different name, look for one that runs all the tests): this allows you to run the tests repeatedly in the same session without reloading all the package code; for packages that take a while to load, this can be much faster. With this approach, you do have to do some extra work to make changes in the package code.\\nFrom the shell, run julia ../test/runtests.jl from within the package's src/ folder.\\nCommit your changes: see https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository.\\nSubmit your changes: From the Julia prompt, type PkgDev.submit(\\\"Foo\\\"). This will push your changes to your GitHub fork, creating it if it doesn't already exist. (If you encounter an error, make sure you've set up your SSH keys.) Julia will then give you a hyperlink; open that link, edit the message, and then click \\\"submit.\\\" At that point, the package owner will be notified of your changes and may initiate discussion. (If you are comfortable with git, you can also do these steps manually from the shell.)\\nThe package owner may suggest additional improvements. To respond to those suggestions, you can easily update the pull request (this only works for changes that have not already been merged; for merged pull requests, make new changes by starting a new branch):\\nIf you've changed branches in the meantime, make sure you go back to the same branch with git checkout fixbar (from shell mode) or Pkg.checkout(\\\"Foo\\\", \\\"fixbar\\\") (from the Julia prompt).\\nAs above, make your changes, run the tests, and commit your changes.\\nFrom the shell, type git push.  This will add your new commit(s) to the same pull request; you should see them appear automatically on the page holding the discussion of your pull request.\\nOne potential type of change the owner may request is that you squash your commits. See Squashing below.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Dirty-packages-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Dirty packages\",\n    \"category\": \"section\",\n    \"text\": \"If you can't change branches because the package manager complains that your package is dirty, it means you have some changes that have not been committed. From the shell, use git diff to see what these changes are; you can either discard them (git checkout changedfile.jl) or commit them before switching branches.  If you can't easily resolve the problems manually, as a last resort you can delete the entire \\\"Foo\\\" folder and reinstall a fresh copy with Pkg.add(\\\"Foo\\\"). Naturally, this deletes any changes you've made.\"\n},\n\n{\n    \"location\": \"manual/packages.html#man-branch-post-hoc-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Making a branch post hoc\",\n    \"category\": \"section\",\n    \"text\": \"Especially for newcomers to git, one often forgets to create a new branch until after some changes have already been made. If you haven't yet staged or committed your changes, you can create a new branch with git checkout -b <newbranch> just as usual\u2013git will kindly show you that some files have been modified and create the new branch for you. Your changes have not yet been committed to this new branch, so the normal work rules still apply.However, if you've already made a commit to master but wish to go back to the official master (called origin/master), use the following procedure:Create a new branch. This branch will hold your changes.\\nMake sure everything is committed to this branch.\\ngit checkout master. If this fails, do not proceed further until you have resolved the problems, or you may lose your changes.\\nResetmaster (your current branch) back to an earlier state with git reset --hard origin/master (see https://git-scm.com/blog/2011/07/11/reset.html).This requires a bit more familiarity with git, so it's much better to get in the habit of creating a branch at the outset.\"\n},\n\n{\n    \"location\": \"manual/packages.html#man-squashing-and-rebasing-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Squashing and rebasing\",\n    \"category\": \"section\",\n    \"text\": \"Depending on the tastes of the package owner (s)he may ask you to \\\"squash\\\" your commits. This is especially likely if your change is quite simple but your commit history looks like this:WIP: add new 1-line whizbang function (currently breaks package)\\nFinish whizbang function\\nFix typo in variable name\\nOops, don't forget to supply default argument\\nSplit into two 1-line functions\\nRats, forgot to export the second function\\n...This gets into the territory of more advanced git usage, and you're encouraged to do some reading (https://git-scm.com/book/en/v2/Git-Branching-Rebasing).  However, a brief summary of the procedure is as follows:To protect yourself from error, start from your fixbar branch and create a new branch with git checkout -b fixbar_backup.  Since you started from fixbar, this will be a copy. Now go back to the one you intend to modify with git checkout fixbar.\\nFrom the shell, type git rebase -i origin/master.\\nTo combine commits, change pick to squash (for additional options, consult other sources). Save the file and close the editor window.\\nEdit the combined commit message.If the rebase goes badly, you can go back to the beginning to try again like this:git checkout fixbar\\ngit reset --hard fixbar_backupNow let's assume you've rebased successfully. Since your fixbar repository has now diverged from the one in your GitHub fork, you're going to have to do a force push:To make it easy to refer to your GitHub fork, create a \\\"handle\\\" for it with git remote add myfork https://github.com/myaccount/Foo.jl.git, where the URL comes from the \\\"clone URL\\\" on your GitHub fork's page.\\nForce-push to your fork with git push myfork +fixbar. The + indicates that this should replace the fixbar branch found at myfork.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Creating-a-new-Package-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Creating a new Package\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/packages.html#REQUIRE-speaks-for-itself-1\",\n    \"page\": \"Packages\",\n    \"title\": \"REQUIRE speaks for itself\",\n    \"category\": \"section\",\n    \"text\": \"You should have a REQUIRE file in your package repository, with a bare minimum directive of what Julia version you expect your users to be running for the package to work. Putting a floor on what Julia version your package supports is done by simply adding julia 0.x in this file. While this line is partly informational, it also has the consequence of whether Pkg.update() will update code found in .julia version directories. It will not update code found in version directories beneath the floor of what's specified in your REQUIRE.As the development version 0.y matures, you may find yourself using it more frequently, and wanting your package to support it. Be warned, the development branch of Julia is the land of breakage, and you can expect things to break. When you go about fixing whatever broke your package in the development 0.y branch, you will likely find that you just broke your package on the stable version.There is a mechanism found in the Compat package that will enable you to support both the stable version and breaking changes found in the development version. Should you decide to use this solution, you will need to add Compat to your REQUIRE file. In this case, you will still have julia 0.x in your REQUIRE. The x is the floor version of what your package supports.You might also have no interest in supporting the development version of Julia. Just as you can add a floor to the version you expect your users to be on, you can set an upper bound. In this case, you would put julia 0.x 0.y- in your REQUIRE file. The - at the end of the version number means pre-release versions of that specific version from the very first commit. By setting it as the ceiling, you mean the code supports everything up to but not including the ceiling version.Another scenario is that you are writing the bulk of the code for your package with Julia 0.y and do not want to support the current stable version of Julia. If you choose to do this, simply add julia 0.y- to your REQUIRE. Just remember to change the julia 0.y- to julia 0.y in your REQUIRE file once 0.y is officially released. If you don't edit the dash cruft you are suggesting that you support both the development and stable versions of the same version number! That would be madness. See the Requirements Specification for the full format of REQUIRE.Lastly, in many cases you may need extra packages for testing. Additional packages which are only required for tests should be specified in the test/REQUIRE file. This REQUIRE file has the same specification as the standard REQUIRE file.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Guidelines-for-naming-a-package-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Guidelines for naming a package\",\n    \"category\": \"section\",\n    \"text\": \"Package names should be sensible to most Julia users, even to those who are not domain experts. When you submit your package to METADATA, you can expect a little back and forth about the package name with collaborators, especially if it's ambiguous or can be confused with something other than what it is. During this bike-shedding, it's not uncommon to get a range of different name suggestions. These are only suggestions though, with the intent being to keep a tidy namespace in the curated METADATA repository. Since this repository belongs to the entire community, there will likely be a few collaborators who care about your package name. Here are some guidelines to follow in naming your package:Avoid jargon. In particular, avoid acronyms unless there is minimal possibility of confusion.\\nIt's ok to say USA if you're talking about the USA.\\nIt's not ok to say PMA, even if you're talking about positive mental attitude.\\nAvoid using Julia in your package name.\\nIt is usually clear from context and to your users that the package is a Julia package.\\nHaving Julia in the name can imply that the package is connected to, or endorsed by, contributors to the Julia language itself.\\nPackages that provide most of their functionality in association with a new type should have pluralized names.\\nDataFrames provides the DataFrame type.\\nBloomFilters provides the BloomFilter type.\\nIn contrast, JuliaParser provides no new type, but instead new functionality in the JuliaParser.parse() function.\\nErr on the side of clarity, even if clarity seems long-winded to you.\\nRandomMatrices is a less ambiguous name than RndMat or RMT, even though the latter are shorter.\\nA less systematic name may suit a package that implements one of several possible approaches to its domain.\\nJulia does not have a single comprehensive plotting package. Instead, Gadfly, PyPlot, Winston and other packages each implement a unique approach based on a particular design philosophy.\\nIn contrast, SortingAlgorithms provides a consistent interface to use many well-established sorting algorithms.\\nPackages that wrap external libraries or programs should be named after those libraries or programs.\\nCPLEX.jl wraps the CPLEX library, which can be identified easily in a web search.\\nMATLAB.jl provides an interface to call the MATLAB engine from within Julia.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Generating-the-package-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Generating the package\",\n    \"category\": \"section\",\n    \"text\": \"Suppose you want to create a new Julia package called FooBar. To get started, do PkgDev.generate(pkg,license) where pkg is the new package name and license is the name of a license that the package generator knows about:julia> PkgDev.generate(\\\"FooBar\\\",\\\"MIT\\\")\\nINFO: Initializing FooBar repo: /Users/stefan/.julia/v0.6/FooBar\\nINFO: Origin: git://github.com/StefanKarpinski/FooBar.jl.git\\nINFO: Generating LICENSE.md\\nINFO: Generating README.md\\nINFO: Generating src/FooBar.jl\\nINFO: Generating test/runtests.jl\\nINFO: Generating REQUIRE\\nINFO: Generating .travis.yml\\nINFO: Generating appveyor.yml\\nINFO: Generating .gitignore\\nINFO: Committing FooBar generated filesThis creates the directory ~/.julia/v0.6/FooBar, initializes it as a git repository, generates a bunch of files that all packages should have, and commits them to the repository:$ cd ~/.julia/v0.6/FooBar && git show --stat\\n\\ncommit 84b8e266dae6de30ab9703150b3bf771ec7b6285\\nAuthor: Stefan Karpinski <stefan@karpinski.org>\\nDate:   Wed Oct 16 17:57:58 2013 -0400\\n\\n    FooBar.jl generated files.\\n\\n        license: MIT\\n        authors: Stefan Karpinski\\n        years:   2013\\n        user:    StefanKarpinski\\n\\n    Julia Version 0.3.0-prerelease+3217 [5fcfb13*]\\n\\n .gitignore       |  2 ++\\n .travis.yml      | 13 +++++++++++++\\n LICENSE.md       | 22 +++++++++++++++++++++++\\n README.md        |  3 +++\\n REQUIRE          |  1 +\\n appveyor.yml     | 34 ++++++++++++++++++++++++++++++++++\\n src/FooBar.jl    |  5 +++++\\n test/runtests.jl |  5 +++++\\n 8 files changed, 85 insertions(+)At the moment, the package manager knows about the MIT \\\"Expat\\\" License, indicated by \\\"MIT\\\", the Simplified BSD License, indicated by \\\"BSD\\\", and version 2.0 of the Apache Software License, indicated by \\\"ASL\\\". If you want to use a different license, you can ask us to add it to the package generator, or just pick one of these three and then modify the ~/.julia/v0.6/PACKAGE/LICENSE.md file after it has been generated.If you created a GitHub account and configured git to know about it, PkgDev.generate() will set an appropriate origin URL for you. It will also automatically generate a .travis.yml file for using the Travis automated testing service, and an appveyor.yml file for using AppVeyor. You will have to enable testing on the Travis and AppVeyor websites for your package repository, but once you've done that, it will already have working tests. Of course, all the default testing does is verify that using FooBar in Julia works.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Loading-Static-Non-Julia-Files-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Loading Static Non-Julia Files\",\n    \"category\": \"section\",\n    \"text\": \"If your package code needs to load static files which are not Julia code, e.g. an external library or data files, and are located within the package directory, use the @__DIR__ macro to determine the directory of the current source file. For example if FooBar/src/FooBar.jl needs to load FooBar/data/foo.csv, use the following code:datapath = joinpath(@__DIR__, \\\"..\\\", \\\"data\\\")\\nfoo = readcsv(joinpath(datapath, \\\"foo.csv\\\"))\"\n},\n\n{\n    \"location\": \"manual/packages.html#Making-Your-Package-Available-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Making Your Package Available\",\n    \"category\": \"section\",\n    \"text\": \"Once you've made some commits and you're happy with how FooBar is working, you may want to get some other people to try it out. First you'll need to create the remote repository and push your code to it; we don't yet automatically do this for you, but we will in the future and it's not too hard to figure out [3]. Once you've done this, letting people try out your code is as simple as sending them the URL of the published repo \u2013 in this case:git://github.com/StefanKarpinski/FooBar.jl.gitFor your package, it will be your GitHub user name and the name of your package, but you get the idea. People you send this URL to can use Pkg.clone() to install the package and try it out:julia> Pkg.clone(\\\"git://github.com/StefanKarpinski/FooBar.jl.git\\\")\\nINFO: Cloning FooBar from git@github.com:StefanKarpinski/FooBar.jl.git[3]: Installing and using GitHub's \\\"hub\\\" tool is highly recommended. It allows you to do things like run hub create in the package repo and have it automatically created via GitHub's API.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Tagging-and-Publishing-Your-Package-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Tagging and Publishing Your Package\",\n    \"category\": \"section\",\n    \"text\": \"tip: Tip\\nIf you are hosting your package on GitHub, you can use the attobot integration to handle package registration, tagging and publishing.Once you've decided that FooBar is ready to be registered as an official package, you can add it to your local copy of METADATA using PkgDev.register():julia> PkgDev.register(\\\"FooBar\\\")\\nINFO: Registering FooBar at git://github.com/StefanKarpinski/FooBar.jl.git\\nINFO: Committing METADATA for FooBarThis creates a commit in the ~/.julia/v0.6/METADATA repo:$ cd ~/.julia/v0.6/METADATA && git show\\n\\ncommit 9f71f4becb05cadacb983c54a72eed744e5c019d\\nAuthor: Stefan Karpinski <stefan@karpinski.org>\\nDate:   Wed Oct 16 18:46:02 2013 -0400\\n\\n    Register FooBar\\n\\ndiff --git a/FooBar/url b/FooBar/url\\nnew file mode 100644\\nindex 0000000..30e525e\\n--- /dev/null\\n+++ b/FooBar/url\\n@@ -0,0 +1 @@\\n+git://github.com/StefanKarpinski/FooBar.jl.gitThis commit is only locally visible, however. To make it visible to the Julia community, you need to merge your local METADATA upstream into the official repo. The PkgDev.publish() command will fork the METADATA repository on GitHub, push your changes to your fork, and open a pull request:julia> PkgDev.publish()\\nINFO: Validating METADATA\\nINFO: No new package versions to publish\\nINFO: Submitting METADATA changes\\nINFO: Forking JuliaLang/METADATA.jl to StefanKarpinski\\nINFO: Pushing changes as branch pull-request/ef45f54b\\nINFO: To create a pull-request open:\\n\\n  https://github.com/StefanKarpinski/METADATA.jl/compare/pull-request/ef45f54btip: Tip\\nIf PkgDev.publish() fails with error:ERROR: key not found: \\\"token\\\"then you may have encountered an issue from using the GitHub API on multiple systems. The solution is to delete the \\\"Julia Package Manager\\\" personal access token from your Github account and try again.Other failures may require you to circumvent PkgDev.publish() by creating a pull request on GitHub. See: Publishing METADATA manually below.Once the package URL for FooBar is registered in the official METADATA repo, people know where to clone the package from, but there still aren't any registered versions available. You can tag and register it with the PkgDev.tag() command:julia> PkgDev.tag(\\\"FooBar\\\")\\nINFO: Tagging FooBar v0.0.1\\nINFO: Committing METADATA for FooBarThis tags v0.0.1 in the FooBar repo:$ cd ~/.julia/v0.6/FooBar && git tag\\nv0.0.1It also creates a new version entry in your local METADATA repo for FooBar:$ cd ~/.julia/v0.6/FooBar && git show\\ncommit de77ee4dc0689b12c5e8b574aef7f70e8b311b0e\\nAuthor: Stefan Karpinski <stefan@karpinski.org>\\nDate:   Wed Oct 16 23:06:18 2013 -0400\\n\\n    Tag FooBar v0.0.1\\n\\ndiff --git a/FooBar/versions/0.0.1/sha1 b/FooBar/versions/0.0.1/sha1\\nnew file mode 100644\\nindex 0000000..c1cb1c1\\n--- /dev/null\\n+++ b/FooBar/versions/0.0.1/sha1\\n@@ -0,0 +1 @@\\n+84b8e266dae6de30ab9703150b3bf771ec7b6285The PkgDev.tag() command takes an optional second argument that is either an explicit version number object like v\\\"0.0.1\\\" or one of the symbols :patch, :minor or :major. These increment the patch, minor or major version number of your package intelligently.Adding a tagged version of your package will expedite the official registration into METADATA.jl by collaborators. It is strongly recommended that you complete this process, regardless if your package is completely ready for an official release.As a general rule, packages should be tagged 0.0.1 first. Since Julia itself hasn't achieved 1.0 status, it's best to be conservative in your package's tagged versions.As with PkgDev.register(), these changes to METADATA aren't available to anyone else until they've been included upstream. Again, use the PkgDev.publish() command, which first makes sure that individual package repos have been tagged, pushes them if they haven't already been, and then opens a pull request to METADATA:julia> PkgDev.publish()\\nINFO: Validating METADATA\\nINFO: Pushing FooBar permanent tags: v0.0.1\\nINFO: Submitting METADATA changes\\nINFO: Forking JuliaLang/METADATA.jl to StefanKarpinski\\nINFO: Pushing changes as branch pull-request/3ef4f5c4\\nINFO: To create a pull-request open:\\n\\n  https://github.com/StefanKarpinski/METADATA.jl/compare/pull-request/3ef4f5c4\"\n},\n\n{\n    \"location\": \"manual/packages.html#Publishing-METADATA-manually-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Publishing METADATA manually\",\n    \"category\": \"section\",\n    \"text\": \"If PkgDev.publish() fails you can follow these instructions to manually publish your package.By \\\"forking\\\" the main METADATA repository, you can create a personal copy (of METADATA.jl) under your GitHub account. Once that copy exists, you can push your local changes to your copy (just like any other GitHub project).Create a fork of METADATA.jl.\\nAdd your fork as a remote repository for the METADATA repository on your local computer (in the terminal where USERNAME is your github username):\\ncd ~/.julia/v0.6/METADATA\\ngit remote add USERNAME https://github.com/USERNAME/METADATA.jl.git\\nPush your changes to your fork:\\ngit push USERNAME metadata-v2\\nIf all of that works, then go back to the GitHub page for your fork, and click the \\\"pull request\\\" link.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Fixing-Package-Requirements-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Fixing Package Requirements\",\n    \"category\": \"section\",\n    \"text\": \"If you need to fix the registered requirements of an already-published package version, you can do so just by editing the metadata for that version, which will still have the same commit hash \u2013 the hash associated with a version is permanent:$ cd ~/.julia/v0.6/METADATA/FooBar/versions/0.0.1 && cat requires\\njulia 0.3-\\n$ vi requiresSince the commit hash stays the same, the contents of the REQUIRE file that will be checked out in the repo will not match the requirements in METADATA after such a change; this is unavoidable. When you fix the requirements in METADATA for a previous version of a package, however, you should also fix the REQUIRE file in the current version of the package.\"\n},\n\n{\n    \"location\": \"manual/packages.html#Requirements-Specification-1\",\n    \"page\": \"Packages\",\n    \"title\": \"Requirements Specification\",\n    \"category\": \"section\",\n    \"text\": \"The ~/.julia/v0.6/REQUIRE file, the REQUIRE file inside packages, and the METADATA package requires files use a simple line-based format to express the ranges of package versions which need to be installed. Package REQUIRE and METADATA requires files should also include the range of versions of julia the package is expected to work with. Additionally, packages can include a test/REQUIRE file to specify additional packages which are only required for testing.Here's how these files are parsed and interpreted.Everything after a # mark is stripped from each line as a comment.\\nIf nothing but whitespace is left, the line is ignored.\\nIf there are non-whitespace characters remaining, the line is a requirement and the is split on whitespace into words.The simplest possible requirement is just the name of a package name on a line by itself:DistributionsThis requirement is satisfied by any version of the Distributions package. The package name can be followed by zero or more version numbers in ascending order, indicating acceptable intervals of versions of that package. One version opens an interval, while the next closes it, and the next opens a new interval, and so on; if an odd number of version numbers are given, then arbitrarily large versions will satisfy; if an even number of version numbers are given, the last one is an upper limit on acceptable version numbers. For example, the line:Distributions 0.1is satisfied by any version of Distributions greater than or equal to 0.1.0. Suffixing a version with - allows any pre-release versions as well. For example:Distributions 0.1-is satisfied by pre-release versions such as 0.1-dev or 0.1-rc1, or by any version greater than or equal to 0.1.0.This requirement entry:Distributions 0.1 0.2.5is satisfied by versions from 0.1.0 up to, but not including 0.2.5. If you want to indicate that any 0.1.x version will do, you will want to write:Distributions 0.1 0.2-If you want to start accepting versions after 0.2.7, you can write:Distributions 0.1 0.2- 0.2.7If a requirement line has leading words that begin with @, it is a system-dependent requirement. If your system matches these system conditionals, the requirement is included, if not, the requirement is ignored. For example:@osx Homebrewwill require the Homebrew package only on systems where the operating system is OS X. The system conditions that are currently supported are (hierarchically):@unix\\n@linux\\n@bsd\\n@osx\\n@windowsThe @unix condition is satisfied on all UNIX systems, including Linux and BSD. Negated system conditionals are also supported by adding a ! after the leading @. Examples:@!windows\\n@unix @!osxThe first condition applies to any system but Windows and the second condition applies to any UNIX system besides OS X.Runtime checks for the current version of Julia can be made using the built-in VERSION variable, which is of type VersionNumber. Such code is occasionally necessary to keep track of new or deprecated functionality between various releases of Julia. Examples of runtime checks:VERSION < v\\\"0.3-\\\" #exclude all pre-release versions of 0.3\\n\\nv\\\"0.2-\\\" <= VERSION < v\\\"0.3-\\\" #get all 0.2 versions, including pre-releases, up to the above\\n\\nv\\\"0.2\\\" <= VERSION < v\\\"0.3-\\\" #To get only stable 0.2 versions (Note v\\\"0.2\\\" == v\\\"0.2.0\\\")\\n\\nVERSION >= v\\\"0.2.1\\\" #get at least version 0.2.1See the section on version number literals for a more complete description.\"\n},\n\n{\n    \"location\": \"manual/profile.html#\",\n    \"page\": \"Profiling\",\n    \"title\": \"Profiling\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/profile.html#Profiling-1\",\n    \"page\": \"Profiling\",\n    \"title\": \"Profiling\",\n    \"category\": \"section\",\n    \"text\": \"The Profile module provides tools to help developers improve the performance of their code. When used, it takes measurements on running code, and produces output that helps you understand how much time is spent on individual line(s). The most common usage is to identify \\\"bottlenecks\\\" as targets for optimization.Profile implements what is known as a \\\"sampling\\\" or statistical profiler.  It works by periodically taking a backtrace during the execution of any task. Each backtrace captures the currently-running function and line number, plus the complete chain of function calls that led to this line, and hence is a \\\"snapshot\\\" of the current state of execution.If much of your run time is spent executing a particular line of code, this line will show up frequently in the set of all backtraces. In other words, the \\\"cost\\\" of a given line\u2013or really, the cost of the sequence of function calls up to and including this line\u2013is proportional to how often it appears in the set of all backtraces.A sampling profiler does not provide complete line-by-line coverage, because the backtraces occur at intervals (by default, 1 ms on Unix systems and 10 ms on Windows, although the actual scheduling is subject to operating system load). Moreover, as discussed further below, because samples are collected at a sparse subset of all execution points, the data collected by a sampling profiler is subject to statistical noise.Despite these limitations, sampling profilers have substantial strengths:You do not have to make any modifications to your code to take timing measurements (in contrast to the alternative instrumenting profiler).\\nIt can profile into Julia's core code and even (optionally) into C and Fortran libraries.\\nBy running \\\"infrequently\\\" there is very little performance overhead; while profiling, your code can run at nearly native speed.For these reasons, it's recommended that you try using the built-in sampling profiler before considering any alternatives.\"\n},\n\n{\n    \"location\": \"manual/profile.html#Basic-usage-1\",\n    \"page\": \"Profiling\",\n    \"title\": \"Basic usage\",\n    \"category\": \"section\",\n    \"text\": \"Let's work with a simple test case:julia> function myfunc()\\n           A = rand(200, 200, 400)\\n           maximum(A)\\n       endIt's a good idea to first run the code you intend to profile at least once (unless you want to profile Julia's JIT-compiler):julia> myfunc() # run once to force compilationNow we're ready to profile this function:julia> @profile myfunc()To see the profiling results, there is a graphical browser available, but here we'll use the text-based display that comes with the standard library:julia> Profile.print()\\n80 ./event.jl:73; (::Base.REPL.##1#2{Base.REPL.REPLBackend})()\\n 80 ./REPL.jl:97; macro expansion\\n  80 ./REPL.jl:66; eval_user_input(::Any, ::Base.REPL.REPLBackend)\\n   80 ./boot.jl:235; eval(::Module, ::Any)\\n    80 ./<missing>:?; anonymous\\n     80 ./profile.jl:23; macro expansion\\n      52 ./REPL[1]:2; myfunc()\\n       38 ./random.jl:431; rand!(::MersenneTwister, ::Array{Float64,3}, ::Int64, ::Type{B...\\n        38 ./dSFMT.jl:84; dsfmt_fill_array_close_open!(::Base.dSFMT.DSFMT_state, ::Ptr{F...\\n       14 ./random.jl:278; rand\\n        14 ./random.jl:277; rand\\n         14 ./random.jl:366; rand\\n          14 ./random.jl:369; rand\\n      28 ./REPL[1]:3; myfunc()\\n       28 ./reduce.jl:270; _mapreduce(::Base.#identity, ::Base.#scalarmax, ::IndexLinear,...\\n        3  ./reduce.jl:426; mapreduce_impl(::Base.#identity, ::Base.#scalarmax, ::Array{F...\\n        25 ./reduce.jl:428; mapreduce_impl(::Base.#identity, ::Base.#scalarmax, ::Array{F...Each line of this display represents a particular spot (line number) in the code. Indentation is used to indicate the nested sequence of function calls, with more-indented lines being deeper in the sequence of calls. In each line, the first \\\"field\\\" is the number of backtraces (samples) taken at this line or in any functions executed by this line. The second field is the file name and line number and the third field is the function name. Note that the specific line numbers may change as Julia's code changes; if you want to follow along, it's best to run this example yourself.In this example, we can see that the top level function called is in the file event.jl. This is the function that runs the REPL when you launch Julia. If you examine line 97 of REPL.jl, you'll see this is where the function eval_user_input() is called. This is the function that evaluates what you type at the REPL, and since we're working interactively these functions were invoked when we entered @profile myfunc(). The next line reflects actions taken in the @profile macro.The first line shows that 80 backtraces were taken at line 73 of event.jl, but it's not that this line was \\\"expensive\\\" on its own: the third line reveals that all 80 of these backtraces were actually triggered inside its call to eval_user_input, and so on. To find out which operations are actually taking the time, we need to look deeper in the call chain.The first \\\"important\\\" line in this output is this one:52 ./REPL[1]:2; myfunc()REPL refers to the fact that we defined myfunc in the REPL, rather than putting it in a file; if we had used a file, this would show the file name. The [1] shows that the function myfunc was the first expression evaluated in this REPL session. Line 2 of myfunc() contains the call to rand, and there were 52 (out of 80) backtraces that occurred at this line. Below that, you can see a call to dsfmt_fill_array_close_open! inside dSFMT.jl.A little further down, you see:28 ./REPL[1]:3; myfunc()Line 3 of myfunc contains the call to maximum, and there were 28 (out of 80) backtraces taken here. Below that, you can see the specific places in base/reduce.jl that carry out the time-consuming operations in the maximum function for this type of input data.Overall, we can tentatively conclude that generating the random numbers is approximately twice as expensive as finding the maximum element. We could increase our confidence in this result by collecting more samples:julia> @profile (for i = 1:100; myfunc(); end)\\n\\njulia> Profile.print()\\n[....]\\n 3821 ./REPL[1]:2; myfunc()\\n  3511 ./random.jl:431; rand!(::MersenneTwister, ::Array{Float64,3}, ::Int64, ::Type...\\n   3511 ./dSFMT.jl:84; dsfmt_fill_array_close_open!(::Base.dSFMT.DSFMT_state, ::Ptr...\\n  310  ./random.jl:278; rand\\n   [....]\\n 2893 ./REPL[1]:3; myfunc()\\n  2893 ./reduce.jl:270; _mapreduce(::Base.#identity, ::Base.#scalarmax, ::IndexLinea...\\n   [....]In general, if you have N samples collected at a line, you can expect an uncertainty on the order of sqrt(N) (barring other sources of noise, like how busy the computer is with other tasks). The major exception to this rule is garbage collection, which runs infrequently but tends to be quite expensive. (Since Julia's garbage collector is written in C, such events can be detected using the C=true output mode described below, or by using ProfileView.jl.)This illustrates the default \\\"tree\\\" dump; an alternative is the \\\"flat\\\" dump, which accumulates counts independent of their nesting:julia> Profile.print(format=:flat)\\n Count File          Line Function\\n  6714 ./<missing>     -1 anonymous\\n  6714 ./REPL.jl       66 eval_user_input(::Any, ::Base.REPL.REPLBackend)\\n  6714 ./REPL.jl       97 macro expansion\\n  3821 ./REPL[1]        2 myfunc()\\n  2893 ./REPL[1]        3 myfunc()\\n  6714 ./REPL[7]        1 macro expansion\\n  6714 ./boot.jl      235 eval(::Module, ::Any)\\n  3511 ./dSFMT.jl      84 dsfmt_fill_array_close_open!(::Base.dSFMT.DSFMT_s...\\n  6714 ./event.jl      73 (::Base.REPL.##1#2{Base.REPL.REPLBackend})()\\n  6714 ./profile.jl    23 macro expansion\\n  3511 ./random.jl    431 rand!(::MersenneTwister, ::Array{Float64,3}, ::In...\\n   310 ./random.jl    277 rand\\n   310 ./random.jl    278 rand\\n   310 ./random.jl    366 rand\\n   310 ./random.jl    369 rand\\n  2893 ./reduce.jl    270 _mapreduce(::Base.#identity, ::Base.#scalarmax, :...\\n     5 ./reduce.jl    420 mapreduce_impl(::Base.#identity, ::Base.#scalarma...\\n   253 ./reduce.jl    426 mapreduce_impl(::Base.#identity, ::Base.#scalarma...\\n  2592 ./reduce.jl    428 mapreduce_impl(::Base.#identity, ::Base.#scalarma...\\n    43 ./reduce.jl    429 mapreduce_impl(::Base.#identity, ::Base.#scalarma...If your code has recursion, one potentially-confusing point is that a line in a \\\"child\\\" function can accumulate more counts than there are total backtraces. Consider the following function definitions:dumbsum(n::Integer) = n == 1 ? 1 : 1 + dumbsum(n-1)\\ndumbsum3() = dumbsum(3)If you were to profile dumbsum3, and a backtrace was taken while it was executing dumbsum(1), the backtrace would look like this:dumbsum3\\n    dumbsum(3)\\n        dumbsum(2)\\n            dumbsum(1)Consequently, this child function gets 3 counts, even though the parent only gets one. The \\\"tree\\\" representation makes this much clearer, and for this reason (among others) is probably the most useful way to view the results.\"\n},\n\n{\n    \"location\": \"manual/profile.html#Accumulation-and-clearing-1\",\n    \"page\": \"Profiling\",\n    \"title\": \"Accumulation and clearing\",\n    \"category\": \"section\",\n    \"text\": \"Results from @profile accumulate in a buffer; if you run multiple pieces of code under @profile, then Profile.print() will show you the combined results. This can be very useful, but sometimes you want to start fresh; you can do so with Profile.clear().\"\n},\n\n{\n    \"location\": \"manual/profile.html#Options-for-controlling-the-display-of-profile-results-1\",\n    \"page\": \"Profiling\",\n    \"title\": \"Options for controlling the display of profile results\",\n    \"category\": \"section\",\n    \"text\": \"Profile.print() has more options than we've described so far. Let's see the full declaration:function print(io::IO = STDOUT, data = fetch(); kwargs...)Let's first discuss the two positional arguments, and later the keyword arguments:io \u2013 Allows you to save the results to a buffer, e.g. a file, but the default is to print to STDOUT (the console).\\ndata \u2013 Contains the data you want to analyze; by default that is obtained from Profile.fetch(), which pulls out the backtraces from a pre-allocated buffer. For example, if you want to profile the profiler, you could say:\\ndata = copy(Profile.fetch())\\nProfile.clear()\\n@profile Profile.print(STDOUT, data) # Prints the previous results\\nProfile.print()                      # Prints results from Profile.print()The keyword arguments can be any combination of:format \u2013 Introduced above, determines whether backtraces are printed  with (default, :tree) or without (:flat) indentation indicating tree  structure.\\nC \u2013 If true, backtraces from C and Fortran code are shown (normally they are excluded). Try running the introductory example with Profile.print(C = true). This can be extremely helpful in deciding whether it's Julia code or C code that is causing a bottleneck; setting C = true also improves the interpretability of the nesting, at the cost of longer profile dumps.\\ncombine \u2013 Some lines of code contain multiple operations; for example, s += A[i] contains both an array reference (A[i]) and a sum operation. These correspond to different lines in the generated machine code, and hence there may be two or more different addresses captured during backtraces on this line. combine = true lumps them together, and is probably what you typically want, but you can generate an output separately for each unique instruction pointer with combine = false.\\nmaxdepth \u2013 Limits frames at a depth higher than maxdepth in the :tree format.\\nsortedby \u2013 Controls the order in :flat format. :filefuncline (default) sorts by the source line, whereas :count sorts in order of number of collected samples.\\nnoisefloor \u2013 Limits frames that are below the heuristic noise floor of the sample (only applies to format :tree). A suggested value to try for this is 2.0 (the default is 0). This parameter hides samples for which n <= noisefloor * \u221aN, where n is the number of samples on this line, and N is the number of samples for the callee.\\nmincount \u2013 Limits frames with less than mincount occurrences.File/function names are sometimes truncated (with ...), and indentation is truncated with a +n at the beginning, where n is the number of extra spaces that would have been inserted, had there been room. If you want a complete profile of deeply-nested code, often a good idea is to save to a file using a wide displaysize in an IOContext:open(\\\"/tmp/prof.txt\\\", \\\"w\\\") do s\\n    Profile.print(IOContext(s, :displaysize => (24, 500)))\\nend\"\n},\n\n{\n    \"location\": \"manual/profile.html#Configuration-1\",\n    \"page\": \"Profiling\",\n    \"title\": \"Configuration\",\n    \"category\": \"section\",\n    \"text\": \"@profile just accumulates backtraces, and the analysis happens when you call Profile.print(). For a long-running computation, it's entirely possible that the pre-allocated buffer for storing backtraces will be filled. If that happens, the backtraces stop but your computation continues. As a consequence, you may miss some important profiling data (you will get a warning when that happens).You can obtain and configure the relevant parameters this way:Profile.init() # returns the current settings\\nProfile.init(n = 10^7, delay = 0.01)n is the total number of instruction pointers you can store, with a default value of 10^6. If your typical backtrace is 20 instruction pointers, then you can collect 50000 backtraces, which suggests a statistical uncertainty of less than 1%. This may be good enough for most applications.Consequently, you are more likely to need to modify delay, expressed in seconds, which sets the amount of time that Julia gets between snapshots to perform the requested computations. A very long-running job might not need frequent backtraces. The default setting is delay = 0.001. Of course, you can decrease the delay as well as increase it; however, the overhead of profiling grows once the delay becomes similar to the amount of time needed to take a backtrace (~30 microseconds on the author's laptop).\"\n},\n\n{\n    \"location\": \"manual/profile.html#Memory-allocation-analysis-1\",\n    \"page\": \"Profiling\",\n    \"title\": \"Memory allocation analysis\",\n    \"category\": \"section\",\n    \"text\": \"One of the most common techniques to improve performance is to reduce memory allocation. The total amount of allocation can be measured with @time and @allocated, and specific lines triggering allocation can often be inferred from profiling via the cost of garbage collection that these lines incur. However, sometimes it is more efficient to directly measure the amount of memory allocated by each line of code.To measure allocation line-by-line, start Julia with the --track-allocation=<setting> command-line option, for which you can choose none (the default, do not measure allocation), user (measure memory allocation everywhere except Julia's core code), or all (measure memory allocation at each line of Julia code). Allocation gets measured for each line of compiled code. When you quit Julia, the cumulative results are written to text files with .mem appended after the file name, residing in the same directory as the source file. Each line lists the total number of bytes allocated. The Coverage package contains some elementary analysis tools, for example to sort the lines in order of number of bytes allocated.In interpreting the results, there are a few important details. Under the user setting, the first line of any function directly called from the REPL will exhibit allocation due to events that happen in the REPL code itself. More significantly, JIT-compilation also adds to allocation counts, because much of Julia's compiler is written in Julia (and compilation usually requires memory allocation). The recommended procedure is to force compilation by executing all the commands you want to analyze, then call Profile.clear_malloc_data() to reset all allocation counters.  Finally, execute the desired commands and quit Julia to trigger the generation of the .mem files.\"\n},\n\n{\n    \"location\": \"manual/stacktraces.html#\",\n    \"page\": \"Stack Traces\",\n    \"title\": \"Stack Traces\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/stacktraces.html#Stack-Traces-1\",\n    \"page\": \"Stack Traces\",\n    \"title\": \"Stack Traces\",\n    \"category\": \"section\",\n    \"text\": \"The StackTraces module provides simple stack traces that are both human readable and easy to use programmatically.\"\n},\n\n{\n    \"location\": \"manual/stacktraces.html#Viewing-a-stack-trace-1\",\n    \"page\": \"Stack Traces\",\n    \"title\": \"Viewing a stack trace\",\n    \"category\": \"section\",\n    \"text\": \"The primary function used to obtain a stack trace is stacktrace():julia> stacktrace()\\n4-element Array{StackFrame,1}:\\n eval(::Module, ::Any) at boot.jl:236\\n eval_user_input(::Any, ::Base.REPL.REPLBackend) at REPL.jl:66\\n macro expansion at REPL.jl:97 [inlined]\\n (::Base.REPL.##1#2{Base.REPL.REPLBackend})() at event.jl:73Calling stacktrace() returns a vector of StackFrame s. For ease of use, the alias StackTrace can be used in place of Vector{StackFrame}. (Examples with [...] indicate that output may vary depending on how the code is run.)julia> example() = stacktrace()\\nexample (generic function with 1 method)\\n\\njulia> example()\\n5-element Array{StackFrame,1}:\\n example() at REPL[1]:1\\n eval(::Module, ::Any) at boot.jl:236\\n[...]\\n\\njulia> @noinline child() = stacktrace()\\nchild (generic function with 1 method)\\n\\njulia> @noinline parent() = child()\\nparent (generic function with 1 method)\\n\\njulia> grandparent() = parent()\\ngrandparent (generic function with 1 method)\\n\\njulia> grandparent()\\n7-element Array{StackFrame,1}:\\n child() at REPL[3]:1\\n parent() at REPL[4]:1\\n grandparent() at REPL[5]:1\\n[...]Note that when calling stacktrace() you'll typically see a frame with eval(...) at boot.jl. When calling stacktrace() from the REPL you'll also have a few extra frames in the stack from REPL.jl, usually looking something like this:julia> example() = stacktrace()\\nexample (generic function with 1 method)\\n\\njulia> example()\\n5-element Array{StackFrame,1}:\\n example() at REPL[1]:1\\n eval(::Module, ::Any) at boot.jl:236\\n eval_user_input(::Any, ::Base.REPL.REPLBackend) at REPL.jl:66\\n macro expansion at REPL.jl:97 [inlined]\\n (::Base.REPL.##1#2{Base.REPL.REPLBackend})() at event.jl:73\"\n},\n\n{\n    \"location\": \"manual/stacktraces.html#Extracting-useful-information-1\",\n    \"page\": \"Stack Traces\",\n    \"title\": \"Extracting useful information\",\n    \"category\": \"section\",\n    \"text\": \"Each StackFrame contains the function name, file name, line number, lambda info, a flag indicating whether the frame has been inlined, a flag indicating whether it is a C function (by default C functions do not appear in the stack trace), and an integer representation of the pointer returned by backtrace():julia> top_frame = stacktrace()[1]\\neval(::Module, ::Any) at boot.jl:236\\n\\njulia> top_frame.func\\n:eval\\n\\njulia> top_frame.file\\nSymbol(\\\"./boot.jl\\\")\\n\\njulia> top_frame.line\\n236\\n\\njulia> top_frame.linfo\\nNullable{Core.MethodInstance}(MethodInstance for eval(::Module, ::Any))\\n\\njulia> top_frame.inlined\\nfalse\\n\\njulia> top_frame.from_c\\nfalsejulia> top_frame.pointer\\n0x00007f390d152a59This makes stack trace information available programmatically for logging, error handling, and more.\"\n},\n\n{\n    \"location\": \"manual/stacktraces.html#Error-handling-1\",\n    \"page\": \"Stack Traces\",\n    \"title\": \"Error handling\",\n    \"category\": \"section\",\n    \"text\": \"While having easy access to information about the current state of the callstack can be helpful in many places, the most obvious application is in error handling and debugging.julia> @noinline bad_function() = undeclared_variable\\nbad_function (generic function with 1 method)\\n\\njulia> @noinline example() = try\\n           bad_function()\\n       catch\\n           stacktrace()\\n       end\\nexample (generic function with 1 method)\\n\\njulia> example()\\n5-element Array{StackFrame,1}:\\n example() at REPL[2]:4\\n eval(::Module, ::Any) at boot.jl:236\\n[...]You may notice that in the example above the first stack frame points points at line 4, where stacktrace() is called, rather than line 2, where bad_function is called, and bad_function's frame is missing entirely. This is understandable, given that stacktrace() is called from the context of the catch. While in this example it's fairly easy to find the actual source of the error, in complex cases tracking down the source of the error becomes nontrivial.This can be remedied by calling catch_stacktrace() instead of stacktrace(). Instead of returning callstack information for the current context, catch_stacktrace() returns stack information for the context of the most recent exception:julia> @noinline bad_function() = undeclared_variable\\nbad_function (generic function with 1 method)\\n\\njulia> @noinline example() = try\\n           bad_function()\\n       catch\\n           catch_stacktrace()\\n       end\\nexample (generic function with 1 method)\\n\\njulia> example()\\n6-element Array{StackFrame,1}:\\n bad_function() at REPL[1]:1\\n example() at REPL[2]:2\\n[...]Notice that the stack trace now indicates the appropriate line number and the missing frame.julia> @noinline child() = error(\\\"Whoops!\\\")\\nchild (generic function with 1 method)\\n\\njulia> @noinline parent() = child()\\nparent (generic function with 1 method)\\n\\njulia> @noinline function grandparent()\\n           try\\n               parent()\\n           catch err\\n               println(\\\"ERROR: \\\", err.msg)\\n               catch_stacktrace()\\n           end\\n       end\\ngrandparent (generic function with 1 method)\\n\\njulia> grandparent()\\nERROR: Whoops!\\n7-element Array{StackFrame,1}:\\n child() at REPL[1]:1\\n parent() at REPL[2]:1\\n grandparent() at REPL[3]:3\\n[...]\"\n},\n\n{\n    \"location\": \"manual/stacktraces.html#Comparison-with-[backtrace()](@ref)-1\",\n    \"page\": \"Stack Traces\",\n    \"title\": \"Comparison with backtrace()\",\n    \"category\": \"section\",\n    \"text\": \"A call to backtrace() returns a vector of Ptr{Void}, which may then be passed into stacktrace() for translation:julia> trace = backtrace()\\n21-element Array{Ptr{Void},1}:\\n Ptr{Void} @0x00007f10049d5b2f\\n Ptr{Void} @0x00007f0ffeb4d29c\\n Ptr{Void} @0x00007f0ffeb4d2a9\\n Ptr{Void} @0x00007f1004993fe7\\n Ptr{Void} @0x00007f10049a92be\\n Ptr{Void} @0x00007f10049a823a\\n Ptr{Void} @0x00007f10049a9fb0\\n Ptr{Void} @0x00007f10049aa718\\n Ptr{Void} @0x00007f10049c0d5e\\n Ptr{Void} @0x00007f10049a3286\\n Ptr{Void} @0x00007f0ffe9ba3ba\\n Ptr{Void} @0x00007f0ffe9ba3d0\\n Ptr{Void} @0x00007f1004993fe7\\n Ptr{Void} @0x00007f0ded34583d\\n Ptr{Void} @0x00007f0ded345a87\\n Ptr{Void} @0x00007f1004993fe7\\n Ptr{Void} @0x00007f0ded34308f\\n Ptr{Void} @0x00007f0ded343320\\n Ptr{Void} @0x00007f1004993fe7\\n Ptr{Void} @0x00007f10049aeb67\\n Ptr{Void} @0x0000000000000000\\n\\njulia> stacktrace(trace)\\n5-element Array{StackFrame,1}:\\n backtrace() at error.jl:46\\n eval(::Module, ::Any) at boot.jl:236\\n eval_user_input(::Any, ::Base.REPL.REPLBackend) at REPL.jl:66\\n macro expansion at REPL.jl:97 [inlined]\\n (::Base.REPL.##1#2{Base.REPL.REPLBackend})() at event.jl:73Notice that the vector returned by backtrace() had 21 pointers, while the vector returned by stacktrace() only has 5. This is because, by default, stacktrace() removes any lower-level C functions from the stack. If you want to include stack frames from C calls, you can do it like this:julia> stacktrace(trace, true)\\n27-element Array{StackFrame,1}:\\n jl_backtrace_from_here at stackwalk.c:103\\n backtrace() at error.jl:46\\n backtrace() at sys.so:?\\n jl_call_method_internal at julia_internal.h:248 [inlined]\\n jl_apply_generic at gf.c:2215\\n do_call at interpreter.c:75\\n eval at interpreter.c:215\\n eval_body at interpreter.c:519\\n jl_interpret_toplevel_thunk at interpreter.c:664\\n jl_toplevel_eval_flex at toplevel.c:592\\n jl_toplevel_eval_in at builtins.c:614\\n eval(::Module, ::Any) at boot.jl:236\\n eval(::Module, ::Any) at sys.so:?\\n jl_call_method_internal at julia_internal.h:248 [inlined]\\n jl_apply_generic at gf.c:2215\\n eval_user_input(::Any, ::Base.REPL.REPLBackend) at REPL.jl:66\\n ip:0x7f1c707f1846\\n jl_call_method_internal at julia_internal.h:248 [inlined]\\n jl_apply_generic at gf.c:2215\\n macro expansion at REPL.jl:97 [inlined]\\n (::Base.REPL.##1#2{Base.REPL.REPLBackend})() at event.jl:73\\n ip:0x7f1c707ea1ef\\n jl_call_method_internal at julia_internal.h:248 [inlined]\\n jl_apply_generic at gf.c:2215\\n jl_apply at julia.h:1411 [inlined]\\n start_task at task.c:261\\n ip:0xffffffffffffffffIndividual pointers returned by backtrace() can be translated into StackFrame s by passing them into StackTraces.lookup():julia> pointer = backtrace()[1];\\n\\njulia> frame = StackTraces.lookup(pointer)\\n1-element Array{StackFrame,1}:\\n jl_backtrace_from_here at stackwalk.c:103\\n\\njulia> println(\\\"The top frame is from $(frame[1].func)!\\\")\\nThe top frame is from jl_backtrace_from_here!\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Performance Tips\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#man-performance-tips-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Performance Tips\",\n    \"category\": \"section\",\n    \"text\": \"In the following sections, we briefly go through a few techniques that can help make your Julia code run as fast as possible.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Avoid-global-variables-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Avoid global variables\",\n    \"category\": \"section\",\n    \"text\": \"A global variable might have its value, and therefore its type, change at any point. This makes it difficult for the compiler to optimize code using global variables. Variables should be local, or passed as arguments to functions, whenever possible.Any code that is performance critical or being benchmarked should be inside a function.We find that global names are frequently constants, and declaring them as such greatly improves performance:const DEFAULT_VAL = 0Uses of non-constant globals can be optimized by annotating their types at the point of use:global x\\ny = f(x::Int + 1)Writing functions is better style. It leads to more reusable code and clarifies what steps are being done, and what their inputs and outputs are.note: Note\\nAll code in the REPL is evaluated in global scope, so a variable defined and assigned at toplevel will be a global variable.In the following REPL session:julia> x = 1.0is equivalent to:julia> global x = 1.0so all the performance issues discussed previously apply.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Measure-performance-with-[@time](@ref)-and-pay-attention-to-memory-allocation-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Measure performance with @time and pay attention to memory allocation\",\n    \"category\": \"section\",\n    \"text\": \"A useful tool for measuring performance is the @time macro. The following example illustrates good working style:julia> function f(n)\\n           s = 0\\n           for i = 1:n\\n               s += i/2\\n           end\\n           s\\n       end\\nf (generic function with 1 method)\\n\\njulia> @time f(1)\\n  0.012686 seconds (2.09 k allocations: 103.421 KiB)\\n0.5\\n\\njulia> @time f(10^6)\\n  0.021061 seconds (3.00 M allocations: 45.777 MiB, 11.69% gc time)\\n2.5000025e11On the first call (@time f(1)), f gets compiled.  (If you've not yet used @time in this session, it will also compile functions needed for timing.)  You should not take the results of this run seriously. For the second run, note that in addition to reporting the time, it also indicated that a large amount of memory was allocated. This is the single biggest advantage of @time vs. functions like tic() and toc(), which only report time.Unexpected memory allocation is almost always a sign of some problem with your code, usually a problem with type-stability. Consequently, in addition to the allocation itself, it's very likely that the code generated for your function is far from optimal. Take such indications seriously and follow the advice below.For more serious benchmarking, consider the BenchmarkTools.jl package which evaluates the function multiple times in order to reduce noise.As a teaser, an improved version of this function allocates no memory (the allocation reported below is due to running the @time macro in global scope) and has an order of magnitude faster execution after the first call:julia> @time f_improved(1)\\n  0.007008 seconds (1.32 k allocations: 63.640 KiB)\\n0.5\\n\\njulia> @time f_improved(10^6)\\n  0.002997 seconds (6 allocations: 192 bytes)\\n2.5000025e11Below you'll learn how to spot the problem with f and how to fix it.In some situations, your function may need to allocate memory as part of its operation, and this can complicate the simple picture above. In such cases, consider using one of the tools below to diagnose problems, or write a version of your function that separates allocation from its algorithmic aspects (see Pre-allocating outputs).\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#tools-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Tools\",\n    \"category\": \"section\",\n    \"text\": \"Julia and its package ecosystem includes tools that may help you diagnose problems and improve the performance of your code:Profiling allows you to measure the performance of your running code and identify lines that serve as bottlenecks.  For complex projects, the ProfileView package can help you visualize your profiling results.\\nUnexpectedly-large memory allocations\u2013as reported by @time, @allocated, or the profiler (through calls to the garbage-collection routines)\u2013hint that there might be issues with your code.  If you don't see another reason for the allocations, suspect a type problem.  You can also start Julia with the --track-allocation=user option and examine the resulting *.mem files to see information about where those allocations occur.  See Memory allocation analysis.\\n@code_warntype generates a representation of your code that can be helpful in finding expressions that result in type uncertainty. See @code_warntype below.\\nThe Lint package can also warn you of certain types of programming errors.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Avoid-containers-with-abstract-type-parameters-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Avoid containers with abstract type parameters\",\n    \"category\": \"section\",\n    \"text\": \"When working with parameterized types, including arrays, it is best to avoid parameterizing with abstract types where possible.Consider the following:a = Real[]    # typeof(a) = Array{Real,1}\\nif (f = rand()) < .8\\n    push!(a, f)\\nendBecause a is a an array of abstract type Real, it must be able to hold any Real value.  Since Real objects can be of arbitrary size and structure, a must be represented as an array of pointers to individually allocated Real objects. Because f will always be a Float64, we should instead, use:a = Float64[] # typeof(a) = Array{Float64,1}which will create a contiguous block of 64-bit floating-point values that can be manipulated efficiently.See also the discussion under Parametric Types.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Type-declarations-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Type declarations\",\n    \"category\": \"section\",\n    \"text\": \"In many languages with optional type declarations, adding declarations is the principal way to make code run faster. This is not the case in Julia. In Julia, the compiler generally knows the types of all function arguments, local variables, and expressions. However, there are a few specific instances where declarations are helpful.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Avoid-fields-with-abstract-type-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Avoid fields with abstract type\",\n    \"category\": \"section\",\n    \"text\": \"Types can be declared without specifying the types of their fields:julia> struct MyAmbiguousType\\n           a\\n       endThis allows a to be of any type. This can often be useful, but it does have a downside: for objects of type MyAmbiguousType, the compiler will not be able to generate high-performance code.  The reason is that the compiler uses the types of objects, not their values, to determine how to build code. Unfortunately, very little can be inferred about an object of type MyAmbiguousType:julia> b = MyAmbiguousType(\\\"Hello\\\")\\nMyAmbiguousType(\\\"Hello\\\")\\n\\njulia> c = MyAmbiguousType(17)\\nMyAmbiguousType(17)\\n\\njulia> typeof(b)\\nMyAmbiguousType\\n\\njulia> typeof(c)\\nMyAmbiguousTypeb and c have the same type, yet their underlying representation of data in memory is very different. Even if you stored just numeric values in field a, the fact that the memory representation of a UInt8 differs from a Float64 also means that the CPU needs to handle them using two different kinds of instructions. Since the required information is not available in the type, such decisions have to be made at run-time. This slows performance.You can do better by declaring the type of a. Here, we are focused on the case where a might be any one of several types, in which case the natural solution is to use parameters. For example:julia> mutable struct MyType{T<:AbstractFloat}\\n           a::T\\n       endThis is a better choice thanjulia> mutable struct MyStillAmbiguousType\\n           a::AbstractFloat\\n       endbecause the first version specifies the type of a from the type of the wrapper object.  For example:julia> m = MyType(3.2)\\nMyType{Float64}(3.2)\\n\\njulia> t = MyStillAmbiguousType(3.2)\\nMyStillAmbiguousType(3.2)\\n\\njulia> typeof(m)\\nMyType{Float64}\\n\\njulia> typeof(t)\\nMyStillAmbiguousTypeThe type of field a can be readily determined from the type of m, but not from the type of t.  Indeed, in t it's possible to change the type of field a:julia> typeof(t.a)\\nFloat64\\n\\njulia> t.a = 4.5f0\\n4.5f0\\n\\njulia> typeof(t.a)\\nFloat32In contrast, once m is constructed, the type of m.a cannot change:julia> m.a = 4.5f0\\n4.5f0\\n\\njulia> typeof(m.a)\\nFloat64The fact that the type of m.a is known from m's type\u2013coupled with the fact that its type cannot change mid-function\u2013allows the compiler to generate highly-optimized code for objects like m but not for objects like t.Of course, all of this is true only if we construct m with a concrete type.  We can break this by explicitly constructing it with an abstract type:julia> m = MyType{AbstractFloat}(3.2)\\nMyType{AbstractFloat}(3.2)\\n\\njulia> typeof(m.a)\\nFloat64\\n\\njulia> m.a = 4.5f0\\n4.5f0\\n\\njulia> typeof(m.a)\\nFloat32For all practical purposes, such objects behave identically to those of MyStillAmbiguousType.It's quite instructive to compare the sheer amount code generated for a simple functionfunc(m::MyType) = m.a+1usingcode_llvm(func,Tuple{MyType{Float64}})\\ncode_llvm(func,Tuple{MyType{AbstractFloat}})\\ncode_llvm(func,Tuple{MyType})For reasons of length the results are not shown here, but you may wish to try this yourself. Because the type is fully-specified in the first case, the compiler doesn't need to generate any code to resolve the type at run-time. This results in shorter and faster code.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Avoid-fields-with-abstract-containers-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Avoid fields with abstract containers\",\n    \"category\": \"section\",\n    \"text\": \"The same best practices also work for container types:julia> mutable struct MySimpleContainer{A<:AbstractVector}\\n           a::A\\n       end\\n\\njulia> mutable struct MyAmbiguousContainer{T}\\n           a::AbstractVector{T}\\n       endFor example:julia> c = MySimpleContainer(1:3);\\n\\njulia> typeof(c)\\nMySimpleContainer{UnitRange{Int64}}\\n\\njulia> c = MySimpleContainer([1:3;]);\\n\\njulia> typeof(c)\\nMySimpleContainer{Array{Int64,1}}\\n\\njulia> b = MyAmbiguousContainer(1:3);\\n\\njulia> typeof(b)\\nMyAmbiguousContainer{Int64}\\n\\njulia> b = MyAmbiguousContainer([1:3;]);\\n\\njulia> typeof(b)\\nMyAmbiguousContainer{Int64}For MySimpleContainer, the object is fully-specified by its type and parameters, so the compiler can generate optimized functions. In most instances, this will probably suffice.While the compiler can now do its job perfectly well, there are cases where you might wish that your code could do different things depending on the element type of a.  Usually the best way to achieve this is to wrap your specific operation (here, foo) in a separate function:julia> function sumfoo(c::MySimpleContainer)\\n           s = 0\\n           for x in c.a\\n               s += foo(x)\\n           end\\n           s\\n       end\\nsumfoo (generic function with 1 method)\\n\\njulia> foo(x::Integer) = x\\nfoo (generic function with 1 method)\\n\\njulia> foo(x::AbstractFloat) = round(x)\\nfoo (generic function with 2 methods)This keeps things simple, while allowing the compiler to generate optimized code in all cases.However, there are cases where you may need to declare different versions of the outer function for different element types of a. You could do it like this:function myfun(c::MySimpleContainer{Vector{T}}) where T<:AbstractFloat\\n    ...\\nend\\nfunction myfun(c::MySimpleContainer{Vector{T}}) where T<:Integer\\n    ...\\nendThis works fine for Vector{T}, but we'd also have to write explicit versions for UnitRange{T} or other abstract types. To prevent such tedium, you can use two parameters in the declaration of MyContainer:julia> mutable struct MyContainer{T, A<:AbstractVector}\\n           a::A\\n       end\\n\\njulia> MyContainer(v::AbstractVector) = MyContainer{eltype(v), typeof(v)}(v)\\nMyContainer\\n\\njulia> b = MyContainer(1:5);\\n\\njulia> typeof(b)\\nMyContainer{Int64,UnitRange{Int64}}Note the somewhat surprising fact that T doesn't appear in the declaration of field a, a point that we'll return to in a moment. With this approach, one can write functions such as:julia> function myfunc(c::MyContainer{<:Integer, <:AbstractArray})\\n           return c.a[1]+1\\n       end\\nmyfunc (generic function with 1 method)\\n\\njulia> function myfunc(c::MyContainer{<:AbstractFloat})\\n           return c.a[1]+2\\n       end\\nmyfunc (generic function with 2 methods)\\n\\njulia> function myfunc(c::MyContainer{T,Vector{T}}) where T<:Integer\\n           return c.a[1]+3\\n       end\\nmyfunc (generic function with 3 methods)note: Note\\nBecause we can only define MyContainer for A<:AbstractArray, and any unspecified parameters are arbitrary, the first function above could have been written more succinctly as function myfunc{T<:Integer}(c::MyContainer{T})julia> myfunc(MyContainer(1:3))\\n2\\n\\njulia> myfunc(MyContainer(1.0:3))\\n3.0\\n\\njulia> myfunc(MyContainer([1:3;]))\\n4As you can see, with this approach it's possible to specialize on both the element type T and the array type A.However, there's one remaining hole: we haven't enforced that A has element type T, so it's perfectly possible to construct an object like this:julia> b = MyContainer{Int64, UnitRange{Float64}}(UnitRange(1.3, 5.0));\\n\\njulia> typeof(b)\\nMyContainer{Int64,UnitRange{Float64}}To prevent this, we can add an inner constructor:julia> mutable struct MyBetterContainer{T<:Real, A<:AbstractVector}\\n           a::A\\n           MyBetterContainer{T,A}(v::AbstractVector{T}) where {T,A} = new(v)\\n       end\\n\\njulia> MyBetterContainer(v::AbstractVector) = MyBetterContainer{eltype(v),typeof(v)}(v)\\nMyBetterContainer\\n\\njulia> b = MyBetterContainer(UnitRange(1.3, 5.0));\\n\\njulia> typeof(b)\\nMyBetterContainer{Float64,UnitRange{Float64}}\\n\\njulia> b = MyBetterContainer{Int64, UnitRange{Float64}}(UnitRange(1.3, 5.0));\\nERROR: MethodError: Cannot `convert` an object of type UnitRange{Float64} to an object of type MyBetterContainer{Int64,UnitRange{Float64}}\\n[...]The inner constructor requires that the element type of A be T.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Annotate-values-taken-from-untyped-locations-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Annotate values taken from untyped locations\",\n    \"category\": \"section\",\n    \"text\": \"It is often convenient to work with data structures that may contain values of any type (arrays of type Array{Any}). But, if you're using one of these structures and happen to know the type of an element, it helps to share this knowledge with the compiler:function foo(a::Array{Any,1})\\n    x = a[1]::Int32\\n    b = x+1\\n    ...\\nendHere, we happened to know that the first element of a would be an Int32. Making an annotation like this has the added benefit that it will raise a run-time error if the value is not of the expected type, potentially catching certain bugs earlier.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Declare-types-of-keyword-arguments-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Declare types of keyword arguments\",\n    \"category\": \"section\",\n    \"text\": \"Keyword arguments can have declared types:function with_keyword(x; name::Int = 1)\\n    ...\\nendFunctions are specialized on the types of keyword arguments, so these declarations will not affect performance of code inside the function. However, they will reduce the overhead of calls to the function that include keyword arguments.Functions with keyword arguments have near-zero overhead for call sites that pass only positional arguments.Passing dynamic lists of keyword arguments, as in f(x; keywords...), can be slow and should be avoided in performance-sensitive code.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Break-functions-into-multiple-definitions-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Break functions into multiple definitions\",\n    \"category\": \"section\",\n    \"text\": \"Writing a function as many small definitions allows the compiler to directly call the most applicable code, or even inline it.Here is an example of a \\\"compound function\\\" that should really be written as multiple definitions:function norm(A)\\n    if isa(A, Vector)\\n        return sqrt(real(dot(A,A)))\\n    elseif isa(A, Matrix)\\n        return maximum(svd(A)[2])\\n    else\\n        error(\\\"norm: invalid argument\\\")\\n    end\\nendThis can be written more concisely and efficiently as:norm(x::Vector) = sqrt(real(dot(x,x)))\\nnorm(A::Matrix) = maximum(svd(A)[2])\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Write-\\\"type-stable\\\"-functions-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Write \\\"type-stable\\\" functions\",\n    \"category\": \"section\",\n    \"text\": \"When possible, it helps to ensure that a function always returns a value of the same type. Consider the following definition:pos(x) = x < 0 ? 0 : xAlthough this seems innocent enough, the problem is that 0 is an integer (of type Int) and x might be of any type. Thus, depending on the value of x, this function might return a value of either of two types. This behavior is allowed, and may be desirable in some cases. But it can easily be fixed as follows:pos(x) = x < 0 ? zero(x) : xThere is also a one() function, and a more general oftype(x, y) function, which returns y converted to the type of x.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Avoid-changing-the-type-of-a-variable-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Avoid changing the type of a variable\",\n    \"category\": \"section\",\n    \"text\": \"An analogous \\\"type-stability\\\" problem exists for variables used repeatedly within a function:function foo()\\n    x = 1\\n    for i = 1:10\\n        x = x/bar()\\n    end\\n    return x\\nendLocal variable x starts as an integer, and after one loop iteration becomes a floating-point number (the result of / operator). This makes it more difficult for the compiler to optimize the body of the loop. There are several possible fixes:Initialize x with x = 1.0\\nDeclare the type of x: x::Float64 = 1\\nUse an explicit conversion: x = oneunit(T)\\nInitialize with the first loop iteration, to x = 1/bar(), then loop for i = 2:10\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#kernal-functions-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Separate kernel functions (aka, function barriers)\",\n    \"category\": \"section\",\n    \"text\": \"Many functions follow a pattern of performing some set-up work, and then running many iterations to perform a core computation. Where possible, it is a good idea to put these core computations in separate functions. For example, the following contrived function returns an array of a randomly-chosen type:DocTestSetup = quote\\n    srand(1234)\\nendjulia> function strange_twos(n)\\n           a = Vector{rand(Bool) ? Int64 : Float64}(n)\\n           for i = 1:n\\n               a[i] = 2\\n           end\\n           return a\\n       end\\nstrange_twos (generic function with 1 method)\\n\\njulia> strange_twos(3)\\n3-element Array{Float64,1}:\\n 2.0\\n 2.0\\n 2.0This should be written as:julia> function fill_twos!(a)\\n           for i=1:length(a)\\n               a[i] = 2\\n           end\\n       end\\nfill_twos! (generic function with 1 method)\\n\\njulia> function strange_twos(n)\\n           a = Array{rand(Bool) ? Int64 : Float64}(n)\\n           fill_twos!(a)\\n           return a\\n       end\\nstrange_twos (generic function with 1 method)\\n\\njulia> strange_twos(3)\\n3-element Array{Float64,1}:\\n 2.0\\n 2.0\\n 2.0Julia's compiler specializes code for argument types at function boundaries, so in the original implementation it does not know the type of a during the loop (since it is chosen randomly). Therefore the second version is generally faster since the inner loop can be recompiled as part of fill_twos! for different types of a.The second form is also often better style and can lead to more code reuse.This pattern is used in several places in the standard library. For example, see hvcat_fill in abstractarray.jl, or the fill! function, which we could have used instead of writing our own fill_twos!.Functions like strange_twos occur when dealing with data of uncertain type, for example data loaded from an input file that might contain either integers, floats, strings, or something else.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Types-with-values-as-parameters-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Types with values-as-parameters\",\n    \"category\": \"section\",\n    \"text\": \"Let's say you want to create an N-dimensional array that has size 3 along each axis.  Such arrays can be created like this:julia> A = fill(5.0, (3, 3))\\n3\u00d73 Array{Float64,2}:\\n 5.0  5.0  5.0\\n 5.0  5.0  5.0\\n 5.0  5.0  5.0This approach works very well: the compiler can figure out that A is an Array{Float64,2} because it knows the type of the fill value (5.0::Float64) and the dimensionality ((3, 3)::NTuple{2,Int}). This implies that the compiler can generate very efficient code for any future usage of A in the same function.But now let's say you want to write a function that creates a 3\u00d73\u00d7... array in arbitrary dimensions; you might be tempted to write a functionjulia> function array3(fillval, N)\\n           fill(fillval, ntuple(d->3, N))\\n       end\\narray3 (generic function with 1 method)\\n\\njulia> array3(5.0, 2)\\n3\u00d73 Array{Float64,2}:\\n 5.0  5.0  5.0\\n 5.0  5.0  5.0\\n 5.0  5.0  5.0This works, but (as you can verify for yourself using @code_warntype array3(5.0, 2)) the problem is that the output type cannot be inferred: the argument N is a value of type Int, and type-inference does not (and cannot) predict its value in advance. This means that code using the output of this function has to be conservative, checking the type on each access of A; such code will be very slow.Now, one very good way to solve such problems is by using the function-barrier technique. However, in some cases you might want to eliminate the type-instability altogether.  In such cases, one approach is to pass the dimensionality as a parameter, for example through Val{T} (see \\\"Value types\\\"):julia> function array3(fillval, ::Type{Val{N}}) where N\\n           fill(fillval, ntuple(d->3, Val{N}))\\n       end\\narray3 (generic function with 1 method)\\n\\njulia> array3(5.0, Val{2})\\n3\u00d73 Array{Float64,2}:\\n 5.0  5.0  5.0\\n 5.0  5.0  5.0\\n 5.0  5.0  5.0Julia has a specialized version of ntuple that accepts a Val{::Int} as the second parameter; by passing N as a type-parameter, you make its \\\"value\\\" known to the compiler. Consequently, this version of array3 allows the compiler to predict the return type.However, making use of such techniques can be surprisingly subtle. For example, it would be of no help if you called array3 from a function like this:function call_array3(fillval, n)\\n    A = array3(fillval, Val{n})\\nendHere, you've created the same problem all over again: the compiler can't guess the type of n, so it doesn't know the type of Val{n}.  Attempting to use Val, but doing so incorrectly, can easily make performance worse in many situations.  (Only in situations where you're effectively combining Val with the function-barrier trick, to make the kernel function more efficient, should code like the above be used.)An example of correct usage of Val would be:function filter3(A::AbstractArray{T,N}) where {T,N}\\n    kernel = array3(1, Val{N})\\n    filter(A, kernel)\\nendIn this example, N is passed as a parameter, so its \\\"value\\\" is known to the compiler.  Essentially, Val{T} works only when T is either hard-coded (Val{3}) or already specified in the type-domain.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#The-dangers-of-abusing-multiple-dispatch-(aka,-more-on-types-with-values-as-parameters)-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"The dangers of abusing multiple dispatch (aka, more on types with values-as-parameters)\",\n    \"category\": \"section\",\n    \"text\": \"Once one learns to appreciate multiple dispatch, there's an understandable tendency to go crazy and try to use it for everything. For example, you might imagine using it to store information, e.g.struct Car{Make,Model}\\n    year::Int\\n    ...more fields...\\nendand then dispatch on objects like Car{:Honda,:Accord}(year, args...).This might be worthwhile when the following are true:You require CPU-intensive processing on each Car, and it becomes vastly more efficient if you know the Make and Model at compile time.\\nYou have homogenous lists of the same type of Car to process, so that you can store them all in an Array{Car{:Honda,:Accord},N}.When the latter holds, a function processing such a homogenous array can be productively specialized: Julia knows the type of each element in advance (all objects in the container have the same concrete type), so Julia can \\\"look up\\\" the correct method calls when the function is being compiled (obviating the need to check at run-time) and thereby emit efficient code for processing the whole list.When these do not hold, then it's likely that you'll get no benefit; worse, the resulting \\\"combinatorial explosion of types\\\" will be counterproductive.  If items[i+1] has a different type than item[i], Julia has to look up the type at run-time, search for the appropriate method in method tables, decide (via type intersection) which one matches, determine whether it has been JIT-compiled yet (and do so if not), and then make the call. In essence, you're asking the full type- system and JIT-compilation machinery to basically execute the equivalent of a switch statement or dictionary lookup in your own code.Some run-time benchmarks comparing (1) type dispatch, (2) dictionary lookup, and (3) a \\\"switch\\\" statement can be found on the mailing list.Perhaps even worse than the run-time impact is the compile-time impact: Julia will compile specialized functions for each different Car{Make, Model}; if you have hundreds or thousands of such types, then every function that accepts such an object as a parameter (from a custom get_year function you might write yourself, to the generic push! function in the standard library) will have hundreds or thousands of variants compiled for it.  Each of these increases the size of the cache of compiled code, the length of internal lists of methods, etc.  Excess enthusiasm for values-as-parameters can easily waste enormous resources.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Access-arrays-in-memory-order,-along-columns-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Access arrays in memory order, along columns\",\n    \"category\": \"section\",\n    \"text\": \"Multidimensional arrays in Julia are stored in column-major order. This means that arrays are stacked one column at a time. This can be verified using the vec function or the syntax [:] as shown below (notice that the array is ordered [1 3 2 4], not [1 2 3 4]):julia> x = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> x[:]\\n4-element Array{Int64,1}:\\n 1\\n 3\\n 2\\n 4This convention for ordering arrays is common in many languages like Fortran, Matlab, and R (to name a few). The alternative to column-major ordering is row-major ordering, which is the convention adopted by C and Python (numpy) among other languages. Remembering the ordering of arrays can have significant performance effects when looping over arrays. A rule of thumb to keep in mind is that with column-major arrays, the first index changes most rapidly. Essentially this means that looping will be faster if the inner-most loop index is the first to appear in a slice expression.Consider the following contrived example. Imagine we wanted to write a function that accepts a Vector and returns a square Matrix with either the rows or the columns filled with copies of the input vector. Assume that it is not important whether rows or columns are filled with these copies (perhaps the rest of the code can be easily adapted accordingly). We could conceivably do this in at least four ways (in addition to the recommended call to the built-in repmat()):function copy_cols(x::Vector{T}) where T\\n    n = size(x, 1)\\n    out = Array{T}(n, n)\\n    for i = 1:n\\n        out[:, i] = x\\n    end\\n    out\\nend\\n\\nfunction copy_rows(x::Vector{T}) where T\\n    n = size(x, 1)\\n    out = Array{T}(n, n)\\n    for i = 1:n\\n        out[i, :] = x\\n    end\\n    out\\nend\\n\\nfunction copy_col_row(x::Vector{T}) where T\\n    n = size(x, 1)\\n    out = Array{T}(n, n)\\n    for col = 1:n, row = 1:n\\n        out[row, col] = x[row]\\n    end\\n    out\\nend\\n\\nfunction copy_row_col(x::Vector{T}) where T\\n    n = size(x, 1)\\n    out = Array{T}(n, n)\\n    for row = 1:n, col = 1:n\\n        out[row, col] = x[col]\\n    end\\n    out\\nendNow we will time each of these functions using the same random 10000 by 1 input vector:julia> x = randn(10000);\\n\\njulia> fmt(f) = println(rpad(string(f)*\\\": \\\", 14, ' '), @elapsed f(x))\\n\\njulia> map(fmt, Any[copy_cols, copy_rows, copy_col_row, copy_row_col]);\\ncopy_cols:    0.331706323\\ncopy_rows:    1.799009911\\ncopy_col_row: 0.415630047\\ncopy_row_col: 1.721531501Notice that copy_cols is much faster than copy_rows. This is expected because copy_cols respects the column-based memory layout of the Matrix and fills it one column at a time. Additionally, copy_col_row is much faster than copy_row_col because it follows our rule of thumb that the first element to appear in a slice expression should be coupled with the inner-most loop.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Pre-allocating-outputs-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Pre-allocating outputs\",\n    \"category\": \"section\",\n    \"text\": \"If your function returns an Array or some other complex type, it may have to allocate memory.  Unfortunately, oftentimes allocation and its converse, garbage collection, are substantial bottlenecks.Sometimes you can circumvent the need to allocate memory on each function call by preallocating the output.  As a trivial example, comparefunction xinc(x)\\n    return [x, x+1, x+2]\\nend\\n\\nfunction loopinc()\\n    y = 0\\n    for i = 1:10^7\\n        ret = xinc(i)\\n        y += ret[2]\\n    end\\n    y\\nendwithfunction xinc!(ret::AbstractVector{T}, x::T) where T\\n    ret[1] = x\\n    ret[2] = x+1\\n    ret[3] = x+2\\n    nothing\\nend\\n\\nfunction loopinc_prealloc()\\n    ret = Array{Int}(3)\\n    y = 0\\n    for i = 1:10^7\\n        xinc!(ret, i)\\n        y += ret[2]\\n    end\\n    y\\nendTiming results:julia> @time loopinc()\\n  0.529894 seconds (40.00 M allocations: 1.490 GiB, 12.14% gc time)\\n50000015000000\\n\\njulia> @time loopinc_prealloc()\\n  0.030850 seconds (6 allocations: 288 bytes)\\n50000015000000Preallocation has other advantages, for example by allowing the caller to control the \\\"output\\\" type from an algorithm.  In the example above, we could have passed a SubArray rather than an Array, had we so desired.Taken to its extreme, pre-allocation can make your code uglier, so performance measurements and some judgment may be required. However, for \\\"vectorized\\\" (element-wise) functions, the convenient syntax x .= f.(y) can be used for in-place operations with fused loops and no temporary arrays (see the dot syntax for vectorizing functions).\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#More-dots:-Fuse-vectorized-operations-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"More dots: Fuse vectorized operations\",\n    \"category\": \"section\",\n    \"text\": \"Julia has a special dot syntax that converts any scalar function into a \\\"vectorized\\\" function call, and any operator into a \\\"vectorized\\\" operator, with the special property that nested \\\"dot calls\\\" are fusing: they are combined at the syntax level into a single loop, without allocating temporary arrays. If you use .= and similar assignment operators, the result can also be stored in-place in a pre-allocated array (see above).In a linear-algebra context, this means that even though operations like vector + vector and vector * scalar are defined, it can be advantageous to instead use vector .+ vector and vector .* scalar because the resulting loops can be fused with surrounding computations. For example, consider the two functions:f(x) = 3x.^2 + 4x + 7x.^3\\n\\nfdot(x) = @. 3x^2 + 4x + 7x^3 # equivalent to 3 .* x.^2 .+ 4 .* x .+ 7 .* x.^3Both f and fdot compute the same thing.  However, fdot (defined with the help of the @. macro) is significantly faster when applied to an array:julia> x = rand(10^6);\\n\\njulia> @time f(x);\\n  0.010986 seconds (18 allocations: 53.406 MiB, 11.45% gc time)\\n\\njulia> @time fdot(x);\\n  0.003470 seconds (6 allocations: 7.630 MiB)\\n\\njulia> @time f.(x);\\n  0.003297 seconds (30 allocations: 7.631 MiB)That is, fdot(x) is three times faster and allocates 1/7 the memory of f(x), because each * and + operation in f(x) allocates a new temporary array and executes in a separate loop. (Of course, if you just do f.(x) then it is as fast as fdot(x) in this example, but in many contexts it is more convenient to just sprinkle some dots in your expressions rather than defining a separate function for each vectorized operation.)\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Consider-using-views-for-slices-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Consider using views for slices\",\n    \"category\": \"section\",\n    \"text\": \"In Julia, an array \\\"slice\\\" expression like array[1:5, :] creates a copy of that data (except on the left-hand side of an assignment, where array[1:5, :] = ... assigns in-place to that portion of array). If you are doing many operations on the slice, this can be good for performance because it is more efficient to work with a smaller contiguous copy than it would be to index into the original array. On the other hand, if you are just doing a few simple operations on the slice, the cost of the allocation and copy operations can be substantial.An alternative is to create a \\\"view\\\" of the array, which is an array object (a SubArray) that actually references the data of the original array in-place, without making a copy.  (If you write to a view, it modifies the original array's data as well.) This can be done for individual slices by calling view(), or more simply for a whole expression or block of code by putting @views in front of that expression.  For example:julia> fcopy(x) = sum(x[2:end-1])\\n\\njulia> @views fview(x) = sum(x[2:end-1])\\n\\njulia> x = rand(10^6);\\n\\njulia> @time fcopy(x);\\n  0.003051 seconds (7 allocations: 7.630 MB)\\n\\njulia> @time fview(x);\\n  0.001020 seconds (6 allocations: 224 bytes)Notice both the 3\u00d7 speedup and the decreased memory allocation of the fview version of the function.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Avoid-string-interpolation-for-I/O-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Avoid string interpolation for I/O\",\n    \"category\": \"section\",\n    \"text\": \"When writing data to a file (or other I/O device), forming extra intermediate strings is a source of overhead. Instead of:println(file, \\\"$a $b\\\")use:println(file, a, \\\" \\\", b)The first version of the code forms a string, then writes it to the file, while the second version writes values directly to the file. Also notice that in some cases string interpolation can be harder to read. Consider:println(file, \\\"$(f(a))$(f(b))\\\")versus:println(file, f(a), f(b))\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Optimize-network-I/O-during-parallel-execution-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Optimize network I/O during parallel execution\",\n    \"category\": \"section\",\n    \"text\": \"When executing a remote function in parallel:responses = Vector{Any}(nworkers())\\n@sync begin\\n    for (idx, pid) in enumerate(workers())\\n        @async responses[idx] = remotecall_fetch(pid, foo, args...)\\n    end\\nendis faster than:refs = Vector{Any}(nworkers())\\nfor (idx, pid) in enumerate(workers())\\n    refs[idx] = @spawnat pid foo(args...)\\nend\\nresponses = [fetch(r) for r in refs]The former results in a single network round-trip to every worker, while the latter results in two network calls - first by the @spawnat and the second due to the fetch (or even a wait). The fetch/wait is also being executed serially resulting in an overall poorer performance.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Fix-deprecation-warnings-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Fix deprecation warnings\",\n    \"category\": \"section\",\n    \"text\": \"A deprecated function internally performs a lookup in order to print a relevant warning only once. This extra lookup can cause a significant slowdown, so all uses of deprecated functions should be modified as suggested by the warnings.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Tweaks-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Tweaks\",\n    \"category\": \"section\",\n    \"text\": \"These are some minor points that might help in tight inner loops.Avoid unnecessary arrays. For example, instead of sum([x,y,z]) use x+y+z.\\nUse abs2(z) instead of abs(z)^2 for complex z. In general, try to rewrite code to use abs2() instead of abs() for complex arguments.\\nUse div(x,y) for truncating division of integers instead of trunc(x/y), fld(x,y) instead of floor(x/y), and cld(x,y) instead of ceil(x/y).\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Performance-Annotations-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Performance Annotations\",\n    \"category\": \"section\",\n    \"text\": \"Sometimes you can enable better optimization by promising certain program properties.Use @inbounds to eliminate array bounds checking within expressions. Be certain before doing this. If the subscripts are ever out of bounds, you may suffer crashes or silent corruption.\\nUse @fastmath to allow floating point optimizations that are correct for real numbers, but lead to differences for IEEE numbers. Be careful when doing this, as this may change numerical results. This corresponds to the -ffast-math option of clang.\\nWrite @simd in front of for loops that are amenable to vectorization. This feature is experimental and could change or disappear in future versions of Julia.Note: While @simd needs to be placed directly in front of a loop, both @inbounds and @fastmath can be applied to several statements at once, e.g. using begin ... end, or even to a whole function.Here is an example with both @inbounds and @simd markup:function inner(x, y)\\n    s = zero(eltype(x))\\n    for i=1:length(x)\\n        @inbounds s += x[i]*y[i]\\n    end\\n    s\\nend\\n\\nfunction innersimd(x, y)\\n    s = zero(eltype(x))\\n    @simd for i=1:length(x)\\n        @inbounds s += x[i]*y[i]\\n    end\\n    s\\nend\\n\\nfunction timeit(n, reps)\\n    x = rand(Float32,n)\\n    y = rand(Float32,n)\\n    s = zero(Float64)\\n    time = @elapsed for j in 1:reps\\n        s+=inner(x,y)\\n    end\\n    println(\\\"GFlop/sec        = \\\",2.0*n*reps/time*1E-9)\\n    time = @elapsed for j in 1:reps\\n        s+=innersimd(x,y)\\n    end\\n    println(\\\"GFlop/sec (SIMD) = \\\",2.0*n*reps/time*1E-9)\\nend\\n\\ntimeit(1000,1000)On a computer with a 2.4GHz Intel Core i5 processor, this produces:GFlop/sec        = 1.9467069505224963\\nGFlop/sec (SIMD) = 17.578554163920018(GFlop/sec measures the performance, and larger numbers are better.) The range for a @simd for loop should be a one-dimensional range. A variable used for accumulating, such as s in the example, is called a reduction variable. By using @simd, you are asserting several properties of the loop:It is safe to execute iterations in arbitrary or overlapping order, with special consideration for reduction variables.\\nFloating-point operations on reduction variables can be reordered, possibly causing different results than without @simd.\\nNo iteration ever waits on another iteration to make forward progress.A loop containing break, continue, or @goto will cause a compile-time error.Using @simd merely gives the compiler license to vectorize. Whether it actually does so depends on the compiler. To actually benefit from the current implementation, your loop should have the following additional properties:The loop must be an innermost loop.\\nThe loop body must be straight-line code. This is why @inbounds is currently needed for all array accesses. The compiler can sometimes turn short &&, ||, and ?: expressions into straight-line code, if it is safe to evaluate all operands unconditionally. Consider using ifelse() instead of ?: in the loop if it is safe to do so.\\nAccesses must have a stride pattern and cannot be \\\"gathers\\\" (random-index reads) or \\\"scatters\\\" (random-index writes).\\nThe stride should be unit stride.\\nIn some simple cases, for example with 2-3 arrays accessed in a loop, the LLVM auto-vectorization may kick in automatically, leading to no further speedup with @simd.Here is an example with all three kinds of markup. This program first calculates the finite difference of a one-dimensional array, and then evaluates the L2-norm of the result:function init!(u)\\n    n = length(u)\\n    dx = 1.0 / (n-1)\\n    @fastmath @inbounds @simd for i in 1:n\\n        u[i] = sin(2pi*dx*i)\\n    end\\nend\\n\\nfunction deriv!(u, du)\\n    n = length(u)\\n    dx = 1.0 / (n-1)\\n    @fastmath @inbounds du[1] = (u[2] - u[1]) / dx\\n    @fastmath @inbounds @simd for i in 2:n-1\\n        du[i] = (u[i+1] - u[i-1]) / (2*dx)\\n    end\\n    @fastmath @inbounds du[n] = (u[n] - u[n-1]) / dx\\nend\\n\\nfunction norm(u)\\n    n = length(u)\\n    T = eltype(u)\\n    s = zero(T)\\n    @fastmath @inbounds @simd for i in 1:n\\n        s += u[i]^2\\n    end\\n    @fastmath @inbounds return sqrt(s/n)\\nend\\n\\nfunction main()\\n    n = 2000\\n    u = Array{Float64}(n)\\n    init!(u)\\n    du = similar(u)\\n\\n    deriv!(u, du)\\n    nu = norm(du)\\n\\n    @time for i in 1:10^6\\n        deriv!(u, du)\\n        nu = norm(du)\\n    end\\n\\n    println(nu)\\nend\\n\\nmain()On a computer with a 2.7 GHz Intel Core i7 processor, this produces:$ julia wave.jl;\\nelapsed time: 1.207814709 seconds (0 bytes allocated)\\n\\n$ julia --math-mode=ieee wave.jl;\\nelapsed time: 4.487083643 seconds (0 bytes allocated)Here, the option --math-mode=ieee disables the @fastmath macro, so that we can compare results.In this case, the speedup due to @fastmath is a factor of about 3.7. This is unusually large \u2013 in general, the speedup will be smaller. (In this particular example, the working set of the benchmark is small enough to fit into the L1 cache of the processor, so that memory access latency does not play a role, and computing time is dominated by CPU usage. In many real world programs this is not the case.) Also, in this case this optimization does not change the result \u2013 in general, the result will be slightly different. In some cases, especially for numerically unstable algorithms, the result can be very different.The annotation @fastmath re-arranges floating point expressions, e.g. changing the order of evaluation, or assuming that certain special cases (inf, nan) cannot occur. In this case (and on this particular computer), the main difference is that the expression 1 / (2*dx) in the function deriv is hoisted out of the loop (i.e. calculated outside the loop), as if one had written idx = 1 / (2*dx). In the loop, the expression ... / (2*dx) then becomes ... * idx, which is much faster to evaluate. Of course, both the actual optimization that is applied by the compiler as well as the resulting speedup depend very much on the hardware. You can examine the change in generated code by using Julia's code_native() function.\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#Treat-Subnormal-Numbers-as-Zeros-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"Treat Subnormal Numbers as Zeros\",\n    \"category\": \"section\",\n    \"text\": \"Subnormal numbers, formerly called denormal numbers, are useful in many contexts, but incur a performance penalty on some hardware. A call set_zero_subnormals(true) grants permission for floating-point operations to treat subnormal inputs or outputs as zeros, which may improve performance on some hardware. A call set_zero_subnormals(false) enforces strict IEEE behavior for subnormal numbers.Below is an example where subnormals noticeably impact performance on some hardware:function timestep(b::Vector{T}, a::Vector{T}, \u0394t::T) where T\\n    @assert length(a)==length(b)\\n    n = length(b)\\n    b[1] = 1                            # Boundary condition\\n    for i=2:n-1\\n        b[i] = a[i] + (a[i-1] - T(2)*a[i] + a[i+1]) * \u0394t\\n    end\\n    b[n] = 0                            # Boundary condition\\nend\\n\\nfunction heatflow(a::Vector{T}, nstep::Integer) where T\\n    b = similar(a)\\n    for t=1:div(nstep,2)                # Assume nstep is even\\n        timestep(b,a,T(0.1))\\n        timestep(a,b,T(0.1))\\n    end\\nend\\n\\nheatflow(zeros(Float32,10),2)           # Force compilation\\nfor trial=1:6\\n    a = zeros(Float32,1000)\\n    set_zero_subnormals(iseven(trial))  # Odd trials use strict IEEE arithmetic\\n    @time heatflow(a,1000)\\nendThis example generates many subnormal numbers because the values in a become an exponentially decreasing curve, which slowly flattens out over time.Treating subnormals as zeros should be used with caution, because doing so breaks some identities, such as x-y == 0 implies x == y:julia> x = 3f-38; y = 2f-38;\\n\\njulia> set_zero_subnormals(true); (x - y, x == y)\\n(0.0f0, false)\\n\\njulia> set_zero_subnormals(false); (x - y, x == y)\\n(1.0000001f-38, false)In some applications, an alternative to zeroing subnormal numbers is to inject a tiny bit of noise.  For example, instead of initializing a with zeros, initialize it with:a = rand(Float32,1000) * 1.f-9\"\n},\n\n{\n    \"location\": \"manual/performance-tips.html#man-code-warntype-1\",\n    \"page\": \"Performance Tips\",\n    \"title\": \"@code_warntype\",\n    \"category\": \"section\",\n    \"text\": \"The macro @code_warntype (or its function variant code_warntype()) can sometimes be helpful in diagnosing type-related problems. Here's an example:pos(x) = x < 0 ? 0 : x\\n\\nfunction f(x)\\n    y = pos(x)\\n    sin(y*x+1)\\nend\\n\\njulia> @code_warntype f(3.2)\\nVariables:\\n  #self#::#f\\n  x::Float64\\n  y::UNION{FLOAT64,INT64}\\n  fy::Float64\\n  #temp#@_5::UNION{FLOAT64,INT64}\\n  #temp#@_6::Core.MethodInstance\\n  #temp#@_7::Float64\\n\\nBody:\\n  begin\\n      $(Expr(:inbounds, false))\\n      # meta: location REPL[1] pos 1\\n      # meta: location float.jl < 487\\n      fy::Float64 = (Core.typeassert)((Base.sitofp)(Float64,0)::Float64,Float64)::Float64\\n      # meta: pop location\\n      unless (Base.or_int)((Base.lt_float)(x::Float64,fy::Float64)::Bool,(Base.and_int)((Base.and_int)((Base.eq_float)(x::Float64,fy::Float64)::Bool,(Base.lt_float)(fy::Float64,9.223372036854776e18)::Bool)::Bool,(Base.slt_int)((Base.fptosi)(Int64,fy::Float64)::Int64,0)::Bool)::Bool)::Bool goto 9\\n      #temp#@_5::UNION{FLOAT64,INT64} = 0\\n      goto 11\\n      9:\\n      #temp#@_5::UNION{FLOAT64,INT64} = x::Float64\\n      11:\\n      # meta: pop location\\n      $(Expr(:inbounds, :pop))\\n      y::UNION{FLOAT64,INT64} = #temp#@_5::UNION{FLOAT64,INT64} # line 3:\\n      unless (y::UNION{FLOAT64,INT64} isa Int64)::ANY goto 19\\n      #temp#@_6::Core.MethodInstance = MethodInstance for *(::Int64, ::Float64)\\n      goto 28\\n      19:\\n      unless (y::UNION{FLOAT64,INT64} isa Float64)::ANY goto 23\\n      #temp#@_6::Core.MethodInstance = MethodInstance for *(::Float64, ::Float64)\\n      goto 28\\n      23:\\n      goto 25\\n      25:\\n      #temp#@_7::Float64 = (y::UNION{FLOAT64,INT64} * x::Float64)::Float64\\n      goto 30\\n      28:\\n      #temp#@_7::Float64 = $(Expr(:invoke, :(#temp#@_6), :(Main.*), :(y), :(x)))\\n      30:\\n      return $(Expr(:invoke, MethodInstance for sin(::Float64), :(Main.sin), :((Base.add_float)(#temp#@_7,(Base.sitofp)(Float64,1)::Float64)::Float64)))\\n  end::Float64Interpreting the output of @code_warntype, like that of its cousins @code_lowered, @code_typed, @code_llvm, and @code_native, takes a little practice. Your code is being presented in form that has been partially digested on its way to generating compiled machine code.  Most of the expressions are annotated by a type, indicated by the ::T (where T might be Float64, for example). The most important characteristic of @code_warntype is that non-concrete types are displayed in red; in the above example, such output is shown in all-caps.The top part of the output summarizes the type information for the different variables internal to the function. You can see that y, one of the variables you created, is a Union{Int64,Float64}, due to the type-instability of pos.  There is another variable, _var4, which you can see also has the same type.The next lines represent the body of f. The lines starting with a number followed by a colon (1:, 2:) are labels, and represent targets for jumps (via goto) in your code.  Looking at the body, you can see that pos has been inlined into f\u2013everything before 2: comes from code defined in pos.Starting at 2:, the variable y is defined, and again annotated as a Union type.  Next, we see that the compiler created the temporary variable _var1 to hold the result of y*x. Because a Float64 times either an Int64 or Float64 yields a Float64, all type-instability ends here. The net result is that f(x::Float64) will not be type-unstable in its output, even if some of the intermediate computations are type-unstable.How you use this information is up to you. Obviously, it would be far and away best to fix pos to be type-stable: if you did so, all of the variables in f would be concrete, and its performance would be optimal.  However, there are circumstances where this kind of ephemeral type instability might not matter too much: for example, if pos is never used in isolation, the fact that f's output is type-stable (for Float64 inputs) will shield later code from the propagating effects of type instability.  This is particularly relevant in cases where fixing the type instability is difficult or impossible: for example, currently it's not possible to infer the return type of an anonymous function.  In such cases, the tips above (e.g., adding type annotations and/or breaking up functions) are your best tools to contain the \\\"damage\\\" from type instability.The following examples may help you interpret expressions marked as containing non-leaf types:Function body ending in end::Union{T1,T2})\\nInterpretation: function with unstable return type\\nSuggestion: make the return value type-stable, even if you have to annotate it\\nf(x::T)::Union{T1,T2}\\nInterpretation: call to a type-unstable function\\nSuggestion: fix the function, or if necessary annotate the return value\\n(top(arrayref))(A::Array{Any,1},1)::Any\\nInterpretation: accessing elements of poorly-typed arrays\\nSuggestion: use arrays with better-defined types, or if necessary annotate the type of individual element accesses\\n(top(getfield))(A::ArrayContainer{Float64},:data)::Array{Float64,N}\\nInterpretation: getting a field that is of non-leaf type. In this case, ArrayContainer had a field data::Array{T}. But Array needs the dimension N, too, to be a concrete type.\\nSuggestion: use concrete types like Array{T,3} or Array{T,N}, where N is now a parameter of ArrayContainer\"\n},\n\n{\n    \"location\": \"manual/workflow-tips.html#\",\n    \"page\": \"Workflow Tips\",\n    \"title\": \"Workflow Tips\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/workflow-tips.html#man-workflow-tips-1\",\n    \"page\": \"Workflow Tips\",\n    \"title\": \"Workflow Tips\",\n    \"category\": \"section\",\n    \"text\": \"Here are some tips for working with Julia efficiently.\"\n},\n\n{\n    \"location\": \"manual/workflow-tips.html#REPL-based-workflow-1\",\n    \"page\": \"Workflow Tips\",\n    \"title\": \"REPL-based workflow\",\n    \"category\": \"section\",\n    \"text\": \"As already elaborated in Interacting With Julia, Julia's REPL provides rich functionality that facilitates an efficient interactive workflow. Here are some tips that might further enhance your experience at the command line.\"\n},\n\n{\n    \"location\": \"manual/workflow-tips.html#A-basic-editor/REPL-workflow-1\",\n    \"page\": \"Workflow Tips\",\n    \"title\": \"A basic editor/REPL workflow\",\n    \"category\": \"section\",\n    \"text\": \"The most basic Julia workflows involve using a text editor in conjunction with the julia command line. A common pattern includes the following elements:Put code under development in a temporary module. Create a file, say Tmp.jl, and include within it\\nmodule Tmp\\n\\n<your definitions here>\\n\\nend\\nPut your test code in another file. Create another file, say tst.jl, which begins with\\nimport Tmp\\nand includes tests for the contents of Tmp. The value of using import versus using is that you can call reload(\\\"Tmp\\\") instead of having to restart the REPL when your definitions change. Of course, the cost is the need to prepend Tmp. to uses of names defined in your module. (You can lower that cost by keeping your module name short.)\\nAlternatively, you can wrap the contents of your test file in a module, as\\nmodule Tst\\n    using Tmp\\n\\n    <scratch work>\\n\\nend\\nThe advantage is that you can now do using Tmp in your test code and can therefore avoid prepending Tmp. everywhere. The disadvantage is that code can no longer be selectively copied to the REPL without some tweaking.\\nLather. Rinse. Repeat. Explore ideas at the julia command prompt. Save good ideas in tst.jl. Occasionally restart the REPL, issuing\\nreload(\\\"Tmp\\\")\\ninclude(\\\"tst.jl\\\")\"\n},\n\n{\n    \"location\": \"manual/workflow-tips.html#Simplify-initialization-1\",\n    \"page\": \"Workflow Tips\",\n    \"title\": \"Simplify initialization\",\n    \"category\": \"section\",\n    \"text\": \"To simplify restarting the REPL, put project-specific initialization code in a file, say _init.jl, which you can run on startup by issuing the command:julia -L _init.jlIf you further add the following to your .juliarc.jl fileisfile(\\\"_init.jl\\\") && include(joinpath(pwd(), \\\"_init.jl\\\"))then calling julia from that directory will run the initialization code without the additional command line argument.\"\n},\n\n{\n    \"location\": \"manual/workflow-tips.html#Browser-based-workflow-1\",\n    \"page\": \"Workflow Tips\",\n    \"title\": \"Browser-based workflow\",\n    \"category\": \"section\",\n    \"text\": \"It is also possible to interact with a Julia REPL in the browser via IJulia. See the package home for details.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Style Guide\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Style-Guide-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Style Guide\",\n    \"category\": \"section\",\n    \"text\": \"The following sections explain a few aspects of idiomatic Julia coding style. None of these rules are absolute; they are only suggestions to help familiarize you with the language and to help you choose among alternative designs.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Write-functions,-not-just-scripts-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Write functions, not just scripts\",\n    \"category\": \"section\",\n    \"text\": \"Writing code as a series of steps at the top level is a quick way to get started solving a problem, but you should try to divide a program into functions as soon as possible. Functions are more reusable and testable, and clarify what steps are being done and what their inputs and outputs are. Furthermore, code inside functions tends to run much faster than top level code, due to how Julia's compiler works.It is also worth emphasizing that functions should take arguments, instead of operating directly on global variables (aside from constants like pi).\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Avoid-writing-overly-specific-types-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Avoid writing overly-specific types\",\n    \"category\": \"section\",\n    \"text\": \"Code should be as generic as possible. Instead of writing:convert(Complex{Float64}, x)it's better to use available generic functions:complex(float(x))The second version will convert x to an appropriate type, instead of always the same type.This style point is especially relevant to function arguments. For example, don't declare an argument to be of type Int or Int32 if it really could be any integer, expressed with the abstract type Integer. In fact, in many cases you can omit the argument type altogether, unless it is needed to disambiguate from other method definitions, since a MethodError will be thrown anyway if a type is passed that does not support any of the requisite operations. (This is known as duck typing.)For example, consider the following definitions of a function addone that returns one plus its argument:addone(x::Int) = x + 1                 # works only for Int\\naddone(x::Integer) = x + oneunit(x)    # any integer type\\naddone(x::Number) = x + oneunit(x)     # any numeric type\\naddone(x) = x + oneunit(x)             # any type supporting + and oneunitThe last definition of addone handles any type supporting oneunit (which returns 1 in the same type as x, which avoids unwanted type promotion) and the + function with those arguments. The key thing to realize is that there is no performance penalty to defining only the general addone(x) = x + oneunit(x), because Julia will automatically compile specialized versions as needed. For example, the first time you call addone(12), Julia will automatically compile a specialized addone function for x::Int arguments, with the call to oneunit replaced by its inlined value 1. Therefore, the first three definitions of addone above are completely redundant with the fourth definition.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Handle-excess-argument-diversity-in-the-caller-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Handle excess argument diversity in the caller\",\n    \"category\": \"section\",\n    \"text\": \"Instead of:function foo(x, y)\\n    x = Int(x); y = Int(y)\\n    ...\\nend\\nfoo(x, y)use:function foo(x::Int, y::Int)\\n    ...\\nend\\nfoo(Int(x), Int(y))This is better style because foo does not really accept numbers of all types; it really needs Int s.One issue here is that if a function inherently requires integers, it might be better to force the caller to decide how non-integers should be converted (e.g. floor or ceiling). Another issue is that declaring more specific types leaves more \\\"space\\\" for future method definitions.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Append-!-to-names-of-functions-that-modify-their-arguments-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Append ! to names of functions that modify their arguments\",\n    \"category\": \"section\",\n    \"text\": \"Instead of:function double(a::AbstractArray{<:Number})\\n    for i = 1:endof(a)\\n        a[i] *= 2\\n    end\\n    return a\\nenduse:function double!(a::AbstractArray{<:Number})\\n    for i = 1:endof(a)\\n        a[i] *= 2\\n    end\\n    return a\\nendThe Julia standard library uses this convention throughout and contains examples of functions with both copying and modifying forms (e.g., sort() and sort!()), and others which are just modifying (e.g., push!(), pop!(), splice!()).  It is typical for such functions to also return the modified array for convenience.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Avoid-strange-type-Unions-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Avoid strange type Unions\",\n    \"category\": \"section\",\n    \"text\": \"Types such as Union{Function,AbstractString} are often a sign that some design could be cleaner.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Avoid-type-Unions-in-fields-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Avoid type Unions in fields\",\n    \"category\": \"section\",\n    \"text\": \"When creating a type such as:mutable struct MyType\\n    ...\\n    x::Union{Void,T}\\nendask whether the option for x to be nothing (of type Void) is really necessary. Here are some alternatives to consider:Find a safe default value to initialize x with\\nIntroduce another type that lacks x\\nIf there are many fields like x, store them in a dictionary\\nDetermine whether there is a simple rule for when x is nothing. For example, often the field will start as nothing but get initialized at some well-defined point. In that case, consider leaving it undefined at first.\\nIf x really needs to hold no value at some times, define it as ::Nullable{T} instead, as this guarantees type-stability in the code accessing this field (see Nullable types).\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Avoid-elaborate-container-types-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Avoid elaborate container types\",\n    \"category\": \"section\",\n    \"text\": \"It is usually not much help to construct arrays like the following:a = Array{Union{Int,AbstractString,Tuple,Array}}(n)In this case Array{Any}(n) is better. It is also more helpful to the compiler to annotate specific uses (e.g. a[i]::Int) than to try to pack many alternatives into one type.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Use-naming-conventions-consistent-with-Julia's-base/-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Use naming conventions consistent with Julia's base/\",\n    \"category\": \"section\",\n    \"text\": \"modules and type names use capitalization and camel case: module SparseArrays, struct UnitRange.\\nfunctions are lowercase (maximum(), convert()) and, when readable, with multiple words squashed together (isequal(), haskey()). When necessary, use underscores as word separators. Underscores are also used to indicate a combination of concepts (remotecall_fetch() as a more efficient implementation of fetch(remotecall(...))) or as modifiers (sum_kbn()).\\nconciseness is valued, but avoid abbreviation (indexin() rather than indxin()) as it becomes difficult to remember whether and how particular words are abbreviated.If a function name requires multiple words, consider whether it might represent more than one concept and might be better split into pieces.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Don't-overuse-try-catch-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Don't overuse try-catch\",\n    \"category\": \"section\",\n    \"text\": \"It is better to avoid errors than to rely on catching them.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Don't-parenthesize-conditions-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Don't parenthesize conditions\",\n    \"category\": \"section\",\n    \"text\": \"Julia doesn't require parens around conditions in if and while. Write:if a == binstead of:if (a == b)\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Don't-overuse-...-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Don't overuse ...\",\n    \"category\": \"section\",\n    \"text\": \"Splicing function arguments can be addictive. Instead of [a..., b...], use simply [a; b], which already concatenates arrays. collect(a) is better than [a...], but since a is already iterable it is often even better to leave it alone, and not convert it to an array.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Don't-use-unnecessary-static-parameters-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Don't use unnecessary static parameters\",\n    \"category\": \"section\",\n    \"text\": \"A function signature:foo(x::T) where {T<:Real} = ...should be written as:foo(x::Real) = ...instead, especially if T is not used in the function body. Even if T is used, it can be replaced with typeof(x) if convenient. There is no performance difference. Note that this is not a general caution against static parameters, just against uses where they are not needed.Note also that container types, specifically may need type parameters in function calls. See the FAQ Avoid fields with abstract containers for more information.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Avoid-confusion-about-whether-something-is-an-instance-or-a-type-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Avoid confusion about whether something is an instance or a type\",\n    \"category\": \"section\",\n    \"text\": \"Sets of definitions like the following are confusing:foo(::Type{MyType}) = ...\\nfoo(::MyType) = foo(MyType)Decide whether the concept in question will be written as MyType or MyType(), and stick to it.The preferred style is to use instances by default, and only add methods involving Type{MyType} later if they become necessary to solve some problem.If a type is effectively an enumeration, it should be defined as a single (ideally immutable struct or primitive) type, with the enumeration values being instances of it. Constructors and conversions can check whether values are valid. This design is preferred over making the enumeration an abstract type, with the \\\"values\\\" as subtypes.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Don't-overuse-macros-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Don't overuse macros\",\n    \"category\": \"section\",\n    \"text\": \"Be aware of when a macro could really be a function instead.Calling eval() inside a macro is a particularly dangerous warning sign; it means the macro will only work when called at the top level. If such a macro is written as a function instead, it will naturally have access to the run-time values it needs.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Don't-expose-unsafe-operations-at-the-interface-level-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Don't expose unsafe operations at the interface level\",\n    \"category\": \"section\",\n    \"text\": \"If you have a type that uses a native pointer:mutable struct NativeType\\n    p::Ptr{UInt8}\\n    ...\\nenddon't write definitions like the following:getindex(x::NativeType, i) = unsafe_load(x.p, i)The problem is that users of this type can write x[i] without realizing that the operation is unsafe, and then be susceptible to memory bugs.Such a function should either check the operation to ensure it is safe, or have unsafe somewhere in its name to alert callers.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Don't-overload-methods-of-base-container-types-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Don't overload methods of base container types\",\n    \"category\": \"section\",\n    \"text\": \"It is possible to write definitions like the following:show(io::IO, v::Vector{MyType}) = ...This would provide custom showing of vectors with a specific new element type. While tempting, this should be avoided. The trouble is that users will expect a well-known type like Vector() to behave in a certain way, and overly customizing its behavior can make it harder to work with.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Avoid-type-piracy-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Avoid type piracy\",\n    \"category\": \"section\",\n    \"text\": \"\\\"Type piracy\\\" refers to the practice of extending or redefining methods in Base or other packages on types that you have not defined. In some cases, you can get away with type piracy with little ill effect. In extreme cases, however, you can even crash Julia (e.g. if your method extension or redefinition causes invalid input to be passed to a ccall). Type piracy can complicate reasoning about code, and may introduce incompatibilities that are hard to predict and diagnose.As an example, suppose you wanted to define multiplication on symbols in a module:module A\\nimport Base.*\\n*(x::Symbol, y::Symbol) = Symbol(x,y)\\nendThe problem is that now any other module that uses Base.* will also see this definition. Since Symbol is defined in Base and is used by other modules, this can change the behavior of unrelated code unexpectedly. There are several alternatives here, including using a different function name, or wrapping the Symbols in another type that you define.Sometimes, coupled packages may engage in type piracy to separate features from definitions, especially when the packages were designed by collaborating authors, and when the definitions are reusable. For example, one package might provide some types useful for working with colors; another package could define methods for those types that enable conversions between color spaces. Another example might be a package that acts as a thin wrapper for some C code, which another package might then pirate to implement a higher-level, Julia-friendly API.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Be-careful-with-type-equality-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Be careful with type equality\",\n    \"category\": \"section\",\n    \"text\": \"You generally want to use isa() and <: (issubtype()) for testing types, not ==. Checking types for exact equality typically only makes sense when comparing to a known concrete type (e.g. T == Float64), or if you really, really know what you're doing.\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Do-not-write-x-f(x)-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Do not write x->f(x)\",\n    \"category\": \"section\",\n    \"text\": \"Since higher-order functions are often called with anonymous functions, it is easy to conclude that this is desirable or even necessary. But any function can be passed directly, without being \\\"wrapped\\\" in an anonymous function. Instead of writing map(x->f(x), a), write map(f, a).\"\n},\n\n{\n    \"location\": \"manual/style-guide.html#Avoid-using-floats-for-numeric-literals-in-generic-code-when-possible-1\",\n    \"page\": \"Style Guide\",\n    \"title\": \"Avoid using floats for numeric literals in generic code when possible\",\n    \"category\": \"section\",\n    \"text\": \"If you write generic code which handles numbers, and which can be expected to run with many different numeric type arguments, try using literals of a numeric type that will affect the arguments as little as possible through promotion.For example,julia> f(x) = 2.0 * x\\nf (generic function with 1 method)\\n\\njulia> f(1//2)\\n1.0\\n\\njulia> f(1/2)\\n1.0\\n\\njulia> f(1)\\n2.0whilejulia> g(x) = 2 * x\\ng (generic function with 1 method)\\n\\njulia> g(1//2)\\n1//1\\n\\njulia> g(1/2)\\n1.0\\n\\njulia> g(1)\\n2As you can see, the second version, where we used an Int literal, preserved the type of the input argument, while the first didn't. This is because e.g. promote_type(Int, Float64) == Float64, and promotion happens with the multiplication. Similarly, Rational literals are less type disruptive than Float64 literals, but more disruptive than Ints:julia> h(x) = 2//1 * x\\nh (generic function with 1 method)\\n\\njulia> h(1//2)\\n1//1\\n\\njulia> h(1/2)\\n1.0\\n\\njulia> h(1)\\n2//1Thus, use Int literals when possible, with Rational{Int} for literal non-integer numbers, in order to make it easier to use your code.\"\n},\n\n{\n    \"location\": \"manual/faq.html#\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Frequently Asked Questions\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#Frequently-Asked-Questions-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Frequently Asked Questions\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#Sessions-and-the-REPL-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Sessions and the REPL\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#How-do-I-delete-an-object-in-memory?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"How do I delete an object in memory?\",\n    \"category\": \"section\",\n    \"text\": \"Julia does not have an analog of MATLAB's clear function; once a name is defined in a Julia session (technically, in module Main), it is always present.If memory usage is your concern, you can always replace objects with ones that consume less memory.  For example, if A is a gigabyte-sized array that you no longer need, you can free the memory with A = 0.  The memory will be released the next time the garbage collector runs; you can force this to happen with gc().\"\n},\n\n{\n    \"location\": \"manual/faq.html#How-can-I-modify-the-declaration-of-a-type-in-my-session?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"How can I modify the declaration of a type in my session?\",\n    \"category\": \"section\",\n    \"text\": \"Perhaps you've defined a type and then realize you need to add a new field.  If you try this at the REPL, you get the error:ERROR: invalid redefinition of constant MyTypeTypes in module Main cannot be redefined.While this can be inconvenient when you are developing new code, there's an excellent workaround.  Modules can be replaced by redefining them, and so if you wrap all your new code inside a module you can redefine types and constants.  You can't import the type names into Main and then expect to be able to redefine them there, but you can use the module name to resolve the scope.  In other words, while developing you might use a workflow something like this:include(\\\"mynewcode.jl\\\")              # this defines a module MyModule\\nobj1 = MyModule.ObjConstructor(a, b)\\nobj2 = MyModule.somefunction(obj1)\\n# Got an error. Change something in \\\"mynewcode.jl\\\"\\ninclude(\\\"mynewcode.jl\\\")              # reload the module\\nobj1 = MyModule.ObjConstructor(a, b) # old objects are no longer valid, must reconstruct\\nobj2 = MyModule.somefunction(obj1)   # this time it worked!\\nobj3 = MyModule.someotherfunction(obj2, c)\\n...\"\n},\n\n{\n    \"location\": \"manual/faq.html#Functions-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Functions\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#I-passed-an-argument-x-to-a-function,-modified-it-inside-that-function,-but-on-the-outside,-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"I passed an argument x to a function, modified it inside that function, but on the outside,\",\n    \"category\": \"section\",\n    \"text\": \"the variable x is still unchanged. Why?Suppose you call a function like this:julia> x = 10\\n10\\n\\njulia> function change_value!(y)\\n           y = 17\\n       end\\nchange_value! (generic function with 1 method)\\n\\njulia> change_value!(x)\\n17\\n\\njulia> x # x is unchanged!\\n10In Julia, the binding of a variable x cannot be changed by passing x as an argument to a function. When calling change_value!(x) in the above example, y is a newly created variable, bound initially to the value of x, i.e. 10; then y is rebound to the constant 17, while the variable x of the outer scope is left untouched.But here is a thing you should pay attention to: suppose x is bound to an object of type Array (or any other mutable type). From within the function, you cannot \\\"unbind\\\" x from this Array, but you can change its content. For example:julia> x = [1,2,3]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> function change_array!(A)\\n           A[1] = 5\\n       end\\nchange_array! (generic function with 1 method)\\n\\njulia> change_array!(x)\\n5\\n\\njulia> x\\n3-element Array{Int64,1}:\\n 5\\n 2\\n 3Here we created a function change_array!(), that assigns 5 to the first element of the passed array (bound to x at the call site, and bound to A within the function). Notice that, after the function call, x is still bound to the same array, but the content of that array changed: the variables A and x were distinct bindings refering to the same mutable Array object.\"\n},\n\n{\n    \"location\": \"manual/faq.html#Can-I-use-using-or-import-inside-a-function?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Can I use using or import inside a function?\",\n    \"category\": \"section\",\n    \"text\": \"No, you are not allowed to have a using or import statement inside a function.  If you want to import a module but only use its symbols inside a specific function or set of functions, you have two options:Use import:\\nimport Foo\\nfunction bar(...)\\n    # ... refer to Foo symbols via Foo.baz ...\\nend\\nThis loads the module Foo and defines a variable Foo that refers to the module, but does not import any of the other symbols from the module into the current namespace.  You refer to the Foo symbols by their qualified names Foo.bar etc.\\nWrap your function in a module:\\nmodule Bar\\nexport bar\\nusing Foo\\nfunction bar(...)\\n    # ... refer to Foo.baz as simply baz ....\\nend\\nend\\nusing Bar\\nThis imports all the symbols from Foo, but only inside the module Bar.\"\n},\n\n{\n    \"location\": \"manual/faq.html#What-does-the-...-operator-do?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"What does the ... operator do?\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#The-two-uses-of-the-...-operator:-slurping-and-splatting-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"The two uses of the ... operator: slurping and splatting\",\n    \"category\": \"section\",\n    \"text\": \"Many newcomers to Julia find the use of ... operator confusing. Part of what makes the ... operator confusing is that it means two different things depending on context.\"\n},\n\n{\n    \"location\": \"manual/faq.html#...-combines-many-arguments-into-one-argument-in-function-definitions-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"... combines many arguments into one argument in function definitions\",\n    \"category\": \"section\",\n    \"text\": \"In the context of function definitions, the ... operator is used to combine many different arguments into a single argument. This use of ... for combining many different arguments into a single argument is called slurping:julia> function printargs(args...)\\n           @printf(\\\"%s\\\\n\\\", typeof(args))\\n           for (i, arg) in enumerate(args)\\n               @printf(\\\"Arg %d = %s\\\\n\\\", i, arg)\\n           end\\n       end\\nprintargs (generic function with 1 method)\\n\\njulia> printargs(1, 2, 3)\\nTuple{Int64,Int64,Int64}\\nArg 1 = 1\\nArg 2 = 2\\nArg 3 = 3If Julia were a language that made more liberal use of ASCII characters, the slurping operator might have been written as <-... instead of ....\"\n},\n\n{\n    \"location\": \"manual/faq.html#...-splits-one-argument-into-many-different-arguments-in-function-calls-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"... splits one argument into many different arguments in function calls\",\n    \"category\": \"section\",\n    \"text\": \"In contrast to the use of the ... operator to denote slurping many different arguments into one argument when defining a function, the ... operator is also used to cause a single function argument to be split apart into many different arguments when used in the context of a function call. This use of ... is called splatting:julia> function threeargs(a, b, c)\\n           @printf(\\\"a = %s::%s\\\\n\\\", a, typeof(a))\\n           @printf(\\\"b = %s::%s\\\\n\\\", b, typeof(b))\\n           @printf(\\\"c = %s::%s\\\\n\\\", c, typeof(c))\\n       end\\nthreeargs (generic function with 1 method)\\n\\njulia> vec = [1, 2, 3]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> threeargs(vec...)\\na = 1::Int64\\nb = 2::Int64\\nc = 3::Int64If Julia were a language that made more liberal use of ASCII characters, the splatting operator might have been written as ...-> instead of ....\"\n},\n\n{\n    \"location\": \"manual/faq.html#Types,-type-declarations,-and-constructors-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Types, type declarations, and constructors\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#man-type-stability-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"What does \\\"type-stable\\\" mean?\",\n    \"category\": \"section\",\n    \"text\": \"It means that the type of the output is predictable from the types of the inputs.  In particular, it means that the type of the output cannot vary depending on the values of the inputs. The following code is not type-stable:julia> function unstable(flag::Bool)\\n           if flag\\n               return 1\\n           else\\n               return 1.0\\n           end\\n       end\\nunstable (generic function with 1 method)It returns either an Int or a Float64 depending on the value of its argument. Since Julia can't predict the return type of this function at compile-time, any computation that uses it will have to guard against both types possibly occurring, making generation of fast machine code difficult.\"\n},\n\n{\n    \"location\": \"manual/faq.html#faq-domain-errors-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Why does Julia give a DomainError for certain seemingly-sensible operations?\",\n    \"category\": \"section\",\n    \"text\": \"Certain operations make mathematical sense but result in errors:julia> sqrt(-2.0)\\nERROR: DomainError:\\nsqrt will only return a complex result if called with a complex argument. Try sqrt(complex(x)).\\nStacktrace:\\n [1] sqrt(::Float64) at ./math.jl:425\\n\\njulia> 2^-5\\nERROR: DomainError:\\nCannot raise an integer x to a negative power -n.\\nMake x a float by adding a zero decimal (e.g. 2.0^-n instead of 2^-n), or write 1/x^n, float(x)^-n, or (x//1)^-n.\\nStacktrace:\\n [1] power_by_squaring(::Int64, ::Int64) at ./intfuncs.jl:173\\n [2] literal_pow(::Base.#^, ::Int64, ::Type{Val{-5}}) at ./intfuncs.jl:208This behavior is an inconvenient consequence of the requirement for type-stability.  In the case of sqrt(), most users want sqrt(2.0) to give a real number, and would be unhappy if it produced the complex number 1.4142135623730951 + 0.0im.  One could write the sqrt() function to switch to a complex-valued output only when passed a negative number (which is what sqrt() does in some other languages), but then the result would not be type-stable and the sqrt() function would have poor performance.In these and other cases, you can get the result you want by choosing an input type that conveys your willingness to accept an output type in which the result can be represented:julia> sqrt(-2.0+0im)\\n0.0 + 1.4142135623730951im\\n\\njulia> 2.0^-5\\n0.03125\"\n},\n\n{\n    \"location\": \"manual/faq.html#Why-does-Julia-use-native-machine-integer-arithmetic?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Why does Julia use native machine integer arithmetic?\",\n    \"category\": \"section\",\n    \"text\": \"Julia uses machine arithmetic for integer computations. This means that the range of Int values is bounded and wraps around at either end so that adding, subtracting and multiplying integers can overflow or underflow, leading to some results that can be unsettling at first:julia> typemax(Int)\\n9223372036854775807\\n\\njulia> ans+1\\n-9223372036854775808\\n\\njulia> -ans\\n-9223372036854775808\\n\\njulia> 2*ans\\n0Clearly, this is far from the way mathematical integers behave, and you might think it less than ideal for a high-level programming language to expose this to the user. For numerical work where efficiency and transparency are at a premium, however, the alternatives are worse.One alternative to consider would be to check each integer operation for overflow and promote results to bigger integer types such as Int128 or BigInt in the case of overflow. Unfortunately, this introduces major overhead on every integer operation (think incrementing a loop counter) \u2013 it requires emitting code to perform run-time overflow checks after arithmetic instructions and branches to handle potential overflows. Worse still, this would cause every computation involving integers to be type-unstable. As we mentioned above, type-stability is crucial for effective generation of efficient code. If you can't count on the results of integer operations being integers, it's impossible to generate fast, simple code the way C and Fortran compilers do.A variation on this approach, which avoids the appearance of type instability is to merge the Int and BigInt types into a single hybrid integer type, that internally changes representation when a result no longer fits into the size of a machine integer. While this superficially avoids type-instability at the level of Julia code, it just sweeps the problem under the rug by foisting all of the same difficulties onto the C code implementing this hybrid integer type. This approach can be made to work and can even be made quite fast in many cases, but has several drawbacks. One problem is that the in-memory representation of integers and arrays of integers no longer match the natural representation used by C, Fortran and other languages with native machine integers. Thus, to interoperate with those languages, we would ultimately need to introduce native integer types anyway. Any unbounded representation of integers cannot have a fixed number of bits, and thus cannot be stored inline in an array with fixed-size slots \u2013 large integer values will always require separate heap-allocated storage. And of course, no matter how clever a hybrid integer implementation one uses, there are always performance traps \u2013 situations where performance degrades unexpectedly. Complex representation, lack of interoperability with C and Fortran, the inability to represent integer arrays without additional heap storage, and unpredictable performance characteristics make even the cleverest hybrid integer implementations a poor choice for high-performance numerical work.An alternative to using hybrid integers or promoting to BigInts is to use saturating integer arithmetic, where adding to the largest integer value leaves it unchanged and likewise for subtracting from the smallest integer value. This is precisely what Matlab\u2122 does:>> int64(9223372036854775807)\\n\\nans =\\n\\n  9223372036854775807\\n\\n>> int64(9223372036854775807) + 1\\n\\nans =\\n\\n  9223372036854775807\\n\\n>> int64(-9223372036854775808)\\n\\nans =\\n\\n -9223372036854775808\\n\\n>> int64(-9223372036854775808) - 1\\n\\nans =\\n\\n -9223372036854775808At first blush, this seems reasonable enough since 9223372036854775807 is much closer to 9223372036854775808 than -9223372036854775808 is and integers are still represented with a fixed size in a natural way that is compatible with C and Fortran. Saturated integer arithmetic, however, is deeply problematic. The first and most obvious issue is that this is not the way machine integer arithmetic works, so implementing saturated operations requires emitting instructions after each machine integer operation to check for underflow or overflow and replace the result with typemin(Int) or typemax(Int) as appropriate. This alone expands each integer operation from a single, fast instruction into half a dozen instructions, probably including branches. Ouch. But it gets worse \u2013 saturating integer arithmetic isn't associative. Consider this Matlab computation:>> n = int64(2)^62\\n4611686018427387904\\n\\n>> n + (n - 1)\\n9223372036854775807\\n\\n>> (n + n) - 1\\n9223372036854775806This makes it hard to write many basic integer algorithms since a lot of common techniques depend on the fact that machine addition with overflow is associative. Consider finding the midpoint between integer values lo and hi in Julia using the expression (lo + hi) >>> 1:julia> n = 2^62\\n4611686018427387904\\n\\njulia> (n + 2n) >>> 1\\n6917529027641081856See? No problem. That's the correct midpoint between 2^62 and 2^63, despite the fact that n + 2n is -4611686018427387904. Now try it in Matlab:>> (n + 2*n)/2\\n\\nans =\\n\\n  4611686018427387904Oops. Adding a >>> operator to Matlab wouldn't help, because saturation that occurs when adding n and 2n has already destroyed the information necessary to compute the correct midpoint.Not only is lack of associativity unfortunate for programmers who cannot rely it for techniques like this, but it also defeats almost anything compilers might want to do to optimize integer arithmetic. For example, since Julia integers use normal machine integer arithmetic, LLVM is free to aggressively optimize simple little functions like f(k) = 5k-1. The machine code for this function is just this:julia> code_native(f, Tuple{Int})\\n  .text\\nFilename: none\\n  pushq %rbp\\n  movq  %rsp, %rbp\\nSource line: 1\\n  leaq  -1(%rdi,%rdi,4), %rax\\n  popq  %rbp\\n  retq\\n  nopl  (%rax,%rax)The actual body of the function is a single leaq instruction, which computes the integer multiply and add at once. This is even more beneficial when f gets inlined into another function:julia> function g(k, n)\\n           for i = 1:n\\n               k = f(k)\\n           end\\n           return k\\n       end\\ng (generic function with 1 methods)\\n\\njulia> code_native(g, Tuple{Int,Int})\\n  .text\\nFilename: none\\n  pushq %rbp\\n  movq  %rsp, %rbp\\nSource line: 2\\n  testq %rsi, %rsi\\n  jle L26\\n  nopl  (%rax)\\nSource line: 3\\nL16:\\n  leaq  -1(%rdi,%rdi,4), %rdi\\nSource line: 2\\n  decq  %rsi\\n  jne L16\\nSource line: 5\\nL26:\\n  movq  %rdi, %rax\\n  popq  %rbp\\n  retq\\n  nopSince the call to f gets inlined, the loop body ends up being just a single leaq instruction. Next, consider what happens if we make the number of loop iterations fixed:julia> function g(k)\\n           for i = 1:10\\n               k = f(k)\\n           end\\n           return k\\n       end\\ng (generic function with 2 methods)\\n\\njulia> code_native(g,(Int,))\\n  .text\\nFilename: none\\n  pushq %rbp\\n  movq  %rsp, %rbp\\nSource line: 3\\n  imulq $9765625, %rdi, %rax    # imm = 0x9502F9\\n  addq  $-2441406, %rax         # imm = 0xFFDABF42\\nSource line: 5\\n  popq  %rbp\\n  retq\\n  nopw  %cs:(%rax,%rax)Because the compiler knows that integer addition and multiplication are associative and that multiplication distributes over addition \u2013 neither of which is true of saturating arithmetic \u2013 it can optimize the entire loop down to just a multiply and an add. Saturated arithmetic completely defeats this kind of optimization since associativity and distributivity can fail at each loop iteration, causing different outcomes depending on which iteration the failure occurs in. The compiler can unroll the loop, but it cannot algebraically reduce multiple operations into fewer equivalent operations.The most reasonable alternative to having integer arithmetic silently overflow is to do checked arithmetic everywhere, raising errors when adds, subtracts, and multiplies overflow, producing values that are not value-correct. In this blog post, Dan Luu analyzes this and finds that rather than the trivial cost that this approach should in theory have, it ends up having a substantial cost due to compilers (LLVM and GCC) not gracefully optimizing around the added overflow checks. If this improves in the future, we could consider defaulting to checked integer arithmetic in Julia, but for now, we have to live with the possibility of overflow.\"\n},\n\n{\n    \"location\": \"manual/faq.html#What-are-the-possible-causes-of-an-UndefVarError-during-remote-execution?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"What are the possible causes of an UndefVarError during remote execution?\",\n    \"category\": \"section\",\n    \"text\": \"As the error states, an immediate cause of an UndefVarError on a remote node is that a binding by that name does not exist. Let us explore some of the possible causes.julia> module Foo\\n           foo() = remotecall_fetch(x->x, 2, \\\"Hello\\\")\\n       end\\n\\njulia> Foo.foo()\\nERROR: On worker 2:\\nUndefVarError: Foo not defined\\n[...]The closure x->x carries a reference to Foo, and since Foo is unavailable on node 2, an UndefVarError is thrown.Globals under modules other than Main are not serialized by value to the remote node. Only a reference is sent. Functions which create global bindings (except under Main) may cause an UndefVarError to be thrown later.julia> @everywhere module Foo\\n           function foo()\\n               global gvar = \\\"Hello\\\"\\n               remotecall_fetch(()->gvar, 2)\\n           end\\n       end\\n\\njulia> Foo.foo()\\nERROR: On worker 2:\\nUndefVarError: gvar not defined\\n[...]In the above example, @everywhere module Foo defined Foo on all nodes. However the call to Foo.foo() created a new global binding gvar on the local node, but this was not found on node 2 resulting in an UndefVarError error.Note that this does not apply to globals created under module Main. Globals under module Main are serialized and new bindings created under Main on the remote node.julia> gvar_self = \\\"Node1\\\"\\n\\\"Node1\\\"\\n\\njulia> remotecall_fetch(()->gvar_self, 2)\\n\\\"Node1\\\"\\n\\njulia> remotecall_fetch(whos, 2)\\n\tFrom worker 2:\t                          Base  41762 KB     Module\\n\tFrom worker 2:\t                          Core  27337 KB     Module\\n\tFrom worker 2:\t                           Foo   2477 bytes  Module\\n\tFrom worker 2:\t                          Main  46191 KB     Module\\n\tFrom worker 2:\t                     gvar_self     13 bytes  StringThis does not apply to function or type declarations. However, anonymous functions bound to global variables are serialized as can be seen below.julia> bar() = 1\\nbar (generic function with 1 method)\\n\\njulia> remotecall_fetch(bar, 2)\\nERROR: On worker 2:\\nUndefVarError: #bar not defined\\n[...]\\n\\njulia> anon_bar  = ()->1\\n(::#21) (generic function with 1 method)\\n\\njulia> remotecall_fetch(anon_bar, 2)\\n1\"\n},\n\n{\n    \"location\": \"manual/faq.html#Packages-and-Modules-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Packages and Modules\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#What-is-the-difference-between-\\\"using\\\"-and-\\\"importall\\\"?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"What is the difference between \\\"using\\\" and \\\"importall\\\"?\",\n    \"category\": \"section\",\n    \"text\": \"There is only one difference, and on the surface (syntax-wise) it may seem very minor. The difference between using and importall is that with using you need to say function Foo.bar(.. to extend module Foo's function bar with a new method, but with importall or import Foo.bar, you only need to say function bar(... and it automatically extends module Foo's function bar.If you use importall, then function Foo.bar(... and function bar(... become equivalent. If you use using, then they are different.The reason this is important enough to have been given separate syntax is that you don't want to accidentally extend a function that you didn't know existed, because that could easily cause a bug. This is most likely to happen with a method that takes a common type like a string or integer, because both you and the other module could define a method to handle such a common type. If you use importall, then you'll replace the other module's implementation of bar(s::AbstractString) with your new implementation, which could easily do something completely different (and break all/many future usages of the other functions in module Foo that depend on calling bar).\"\n},\n\n{\n    \"location\": \"manual/faq.html#Nothingness-and-missing-values-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Nothingness and missing values\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#How-does-\\\"null\\\"-or-\\\"nothingness\\\"-work-in-Julia?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"How does \\\"null\\\" or \\\"nothingness\\\" work in Julia?\",\n    \"category\": \"section\",\n    \"text\": \"Unlike many languages (for example, C and Java), Julia does not have a \\\"null\\\" value. When a reference (variable, object field, or array element) is uninitialized, accessing it will immediately throw an error. This situation can be detected using the isdefined function.Some functions are used only for their side effects, and do not need to return a value. In these cases, the convention is to return the value nothing, which is just a singleton object of type Void. This is an ordinary type with no fields; there is nothing special about it except for this convention, and that the REPL does not print anything for it. Some language constructs that would not otherwise have a value also yield nothing, for example if false; end.For situations where a value exists only sometimes (for example, missing statistical data), it is best to use the Nullable{T} type, which allows specifying the type of a missing value.The empty tuple (()) is another form of nothingness. But, it should not really be thought of as nothing but rather a tuple of zero values.In code written for Julia prior to version 0.4 you may occasionally see None, which is quite different. It is the empty (or \\\"bottom\\\") type, a type with no values and no subtypes (except itself). This is now written as Union{} (an empty union type). You will generally not need to use this type.\"\n},\n\n{\n    \"location\": \"manual/faq.html#Memory-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Memory\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#Why-does-x-y-allocate-memory-when-x-and-y-are-arrays?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Why does x += y allocate memory when x and y are arrays?\",\n    \"category\": \"section\",\n    \"text\": \"In Julia, x += y gets replaced during parsing by x = x + y. For arrays, this has the consequence that, rather than storing the result in the same location in memory as x, it allocates a new array to store the result.While this behavior might surprise some, the choice is deliberate. The main reason is the presence of immutable objects within Julia, which cannot change their value once created.  Indeed, a number is an immutable object; the statements x = 5; x += 1 do not modify the meaning of 5, they modify the value bound to x. For an immutable, the only way to change the value is to reassign it.To amplify a bit further, consider the following function:function power_by_squaring(x, n::Int)\\n    ispow2(n) || error(\\\"This implementation only works for powers of 2\\\")\\n    while n >= 2\\n        x *= x\\n        n >>= 1\\n    end\\n    x\\nendAfter a call like x = 5; y = power_by_squaring(x, 4), you would get the expected result: x == 5 && y == 625.  However, now suppose that *=, when used with matrices, instead mutated the left hand side.  There would be two problems:For general square matrices, A = A*B cannot be implemented without temporary storage: A[1,1] gets computed and stored on the left hand side before you're done using it on the right hand side.\\nSuppose you were willing to allocate a temporary for the computation (which would eliminate most of the point of making *= work in-place); if you took advantage of the mutability of x, then this function would behave differently for mutable vs. immutable inputs. In particular, for immutable x, after the call you'd have (in general) y != x, but for mutable x you'd have y == x.Because supporting generic programming is deemed more important than potential performance optimizations that can be achieved by other means (e.g., using explicit loops), operators like += and *= work by rebinding new values.\"\n},\n\n{\n    \"location\": \"manual/faq.html#Asynchronous-IO-and-concurrent-synchronous-writes-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Asynchronous IO and concurrent synchronous writes\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#Why-do-concurrent-writes-to-the-same-stream-result-in-inter-mixed-output?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Why do concurrent writes to the same stream result in inter-mixed output?\",\n    \"category\": \"section\",\n    \"text\": \"While the streaming I/O API is synchronous, the underlying implementation is fully asynchronous.Consider the printed output from the following:julia> @sync for i in 1:3\\n           @async write(STDOUT, string(i), \\\" Foo \\\", \\\" Bar \\\")\\n       end\\n123 Foo  Foo  Foo  Bar  Bar  BarThis is happening because, while the write call is synchronous, the writing of each argument yields to other tasks while waiting for that part of the I/O to complete.print and println \\\"lock\\\" the stream during a call. Consequently changing write to println in the above example results in:julia> @sync for i in 1:3\\n           @async println(STDOUT, string(i), \\\" Foo \\\", \\\" Bar \\\")\\n       end\\n1 Foo  Bar\\n2 Foo  Bar\\n3 Foo  BarYou can lock your writes with a ReentrantLock like this:julia> l = ReentrantLock()\\nReentrantLock(Nullable{Task}(), Condition(Any[]), 0)\\n\\njulia> @sync for i in 1:3\\n           @async begin\\n               lock(l)\\n               try\\n                   write(STDOUT, string(i), \\\" Foo \\\", \\\" Bar \\\")\\n               finally\\n                   unlock(l)\\n               end\\n           end\\n       end\\n1 Foo  Bar 2 Foo  Bar 3 Foo  Bar\"\n},\n\n{\n    \"location\": \"manual/faq.html#Julia-Releases-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Julia Releases\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/faq.html#Do-I-want-to-use-a-release,-beta,-or-nightly-version-of-Julia?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"Do I want to use a release, beta, or nightly version of Julia?\",\n    \"category\": \"section\",\n    \"text\": \"You may prefer the release version of Julia if you are looking for a stable code base. Releases generally occur every 6 months, giving you a stable platform for writing code.You may prefer the beta version of Julia if you don't mind being slightly behind the latest bugfixes and changes, but find the slightly faster rate of changes more appealing. Additionally, these binaries are tested before they are published to ensure they are fully functional.You may prefer the nightly version of Julia if you want to take advantage of the latest updates to the language, and don't mind if the version available today occasionally doesn't actually work.Finally, you may also consider building Julia from source for yourself. This option is mainly for those individuals who are comfortable at the command line, or interested in learning. If this describes you, you may also be interested in reading our guidelines for contributing.Links to each of these download types can be found on the download page at https://julialang.org/downloads/. Note that not all versions of Julia are available for all platforms.\"\n},\n\n{\n    \"location\": \"manual/faq.html#When-are-deprecated-functions-removed?-1\",\n    \"page\": \"Frequently Asked Questions\",\n    \"title\": \"When are deprecated functions removed?\",\n    \"category\": \"section\",\n    \"text\": \"Deprecated functions are removed after the subsequent release. For example, functions marked as deprecated in the 0.1 release will not be available starting with the 0.2 release.\"\n},\n\n{\n    \"location\": \"manual/noteworthy-differences.html#\",\n    \"page\": \"Noteworthy Differences from other Languages\",\n    \"title\": \"Noteworthy Differences from other Languages\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/noteworthy-differences.html#Noteworthy-Differences-from-other-Languages-1\",\n    \"page\": \"Noteworthy Differences from other Languages\",\n    \"title\": \"Noteworthy Differences from other Languages\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/noteworthy-differences.html#Noteworthy-differences-from-MATLAB-1\",\n    \"page\": \"Noteworthy Differences from other Languages\",\n    \"title\": \"Noteworthy differences from MATLAB\",\n    \"category\": \"section\",\n    \"text\": \"Although MATLAB users may find Julia's syntax familiar, Julia is not a MATLAB clone. There are major syntactic and functional differences. The following are some noteworthy differences that may trip up Julia users accustomed to MATLAB:Julia arrays are indexed with square brackets, A[i,j].\\nJulia arrays are assigned by reference. After A=B, changing elements of B will modify A as well.\\nJulia values are passed and assigned by reference. If a function modifies an array, the changes will be visible in the caller.\\nJulia does not automatically grow arrays in an assignment statement. Whereas in MATLAB a(4) = 3.2 can create the array a = [0 0 0 3.2] and a(5) = 7 can grow it into a = [0 0 0 3.2 7], the corresponding Julia statement a[5] = 7 throws an error if the length of a is less than 5 or if this statement is the first use of the identifier a. Julia has push!() and append!(), which grow Vectors much more efficiently than MATLAB's a(end+1) = val.\\nThe imaginary unit sqrt(-1) is represented in Julia as im, not i or j as in MATLAB.\\nIn Julia, literal numbers without a decimal point (such as 42) create integers instead of floating point numbers. Arbitrarily large integer literals are supported. As a result, some operations such as 2^-1 will throw a domain error as the result is not an integer (see the FAQ entry on domain errors for details).\\nIn Julia, multiple values are returned and assigned as tuples, e.g. (a, b) = (1, 2) or a, b = 1, 2. MATLAB's nargout, which is often used in MATLAB to do optional work based on the number of returned values, does not exist in Julia. Instead, users can use optional and keyword arguments to achieve similar capabilities.\\nJulia has true one-dimensional arrays. Column vectors are of size N, not Nx1. For example, rand(N) makes a 1-dimensional array.\\nIn Julia, [x,y,z] will always construct a 3-element array containing x, y and z.\\nTo concatenate in the first (\\\"vertical\\\") dimension use either vcat(x,y,z) or separate with semicolons ([x; y; z]).\\nTo concatenate in the second (\\\"horizontal\\\") dimension use either hcat(x,y,z) or separate with spaces ([x y z]).\\nTo construct block matrices (concatenating in the first two dimensions), use either hvcat() or combine spaces and semicolons ([a b; c d]).\\nIn Julia, a:b and a:b:c construct Range objects. To construct a full vector like in MATLAB, use collect(a:b). Generally, there is no need to call collect though. Range will act like a normal array in most cases but is more efficient because it lazily computes its values. This pattern of creating specialized objects instead of full arrays is used frequently, and is also seen in functions such as linspace, or with iterators such as enumerate, and zip. The special objects can mostly be used as if they were normal arrays.\\nFunctions in Julia return values from their last expression or the return keyword instead of listing the names of variables to return in the function definition (see The return Keyword for details).\\nA Julia script may contain any number of functions, and all definitions will be externally visible when the file is loaded. Function definitions can be loaded from files outside the current working directory.\\nIn Julia, reductions such as sum(), prod(), and max() are performed over every element of an array when called with a single argument, as in sum(A), even if A has more than one dimension.\\nIn Julia, functions such as sort() that operate column-wise by default (sort(A) is equivalent to sort(A,1)) do not have special behavior for 1xN arrays; the argument is returned unmodified since it still performs sort(A,1). To sort a 1xN matrix like a vector, use sort(A,2).\\nIn Julia, if A is a 2-dimensional array, fft(A) computes a 2D FFT. In particular, it is not equivalent to fft(A,1), which computes a 1D FFT acting column-wise.\\nIn Julia, parentheses must be used to call a function with zero arguments, like in tic() and toc().\\nJulia discourages the used of semicolons to end statements. The results of statements are not automatically printed (except at the interactive prompt), and lines of code do not need to end with semicolons. println() or @printf() can be used to print specific output.\\nIn Julia, if A and B are arrays, logical comparison operations like A == B do not return an array of booleans. Instead, use A .== B, and similarly for the other boolean operators like <, > and =.\\nIn Julia, the operators &, |, and \u22bb (xor) perform the bitwise operations equivalent to and, or, and xor respectively in MATLAB, and have precedence similar to Python's bitwise operators (unlike C). They can operate on scalars or element-wise across arrays and can be used to combine logical arrays, but note the difference in order of operations: parentheses may be required (e.g., to select elements of A equal to 1 or 2 use (A .== 1) | (A .== 2)).\\nIn Julia, the elements of a collection can be passed as arguments to a function using the splat operator ..., as in xs=[1,2]; f(xs...).\\nJulia's svd() returns singular values as a vector instead of as a dense diagonal matrix.\\nIn Julia, ... is not used to continue lines of code. Instead, incomplete expressions automatically continue onto the next line.\\nIn both Julia and MATLAB, the variable ans is set to the value of the last expression issued in an interactive session. In Julia, unlike MATLAB, ans is not set when Julia code is run in non-interactive mode.\\nJulia's types do not support dynamically adding fields at runtime, unlike MATLAB's classes. Instead, use a Dict.\\nIn Julia each module has its own global scope/namespace, whereas in MATLAB there is just one global scope.\\nIn MATLAB, an idiomatic way to remove unwanted values is to use logical indexing, like in the expression x(x>3) or in the statement x(x>3) = [] to modify x in-place. In contrast, Julia provides the higher order functions filter() and filter!(), allowing users to write filter(z->z>3, x) and filter!(z->z>3, x) as alternatives to the corresponding transliterations x[x.>3] and x = x[x.>3]. Using filter!() reduces the use of temporary arrays.\\nThe analogue of extracting (or \\\"dereferencing\\\") all elements of a cell array, e.g. in vertcat(A{:}) in MATLAB, is written using the splat operator in Julia, e.g. as vcat(A...).\"\n},\n\n{\n    \"location\": \"manual/noteworthy-differences.html#Noteworthy-differences-from-R-1\",\n    \"page\": \"Noteworthy Differences from other Languages\",\n    \"title\": \"Noteworthy differences from R\",\n    \"category\": \"section\",\n    \"text\": \"One of Julia's goals is to provide an effective language for data analysis and statistical programming. For users coming to Julia from R, these are some noteworthy differences:Julia's single quotes enclose characters, not strings.\\nJulia can create substrings by indexing into strings. In R, strings must be converted into character vectors before creating substrings.\\nIn Julia, like Python but unlike R, strings can be created with triple quotes \\\"\\\"\\\" ... \\\"\\\"\\\". This syntax is convenient for constructing strings that contain line breaks.\\nIn Julia, varargs are specified using the splat operator ..., which always follows the name of a specific variable, unlike R, for which ... can occur in isolation.\\nIn Julia, modulus is mod(a, b), not a %% b. % in Julia is the remainder operator.\\nIn Julia, not all data structures support logical indexing. Furthermore, logical indexing in Julia is supported only with vectors of length equal to the object being indexed. For example:\\nIn R, c(1, 2, 3, 4)[c(TRUE, FALSE)] is equivalent to c(1, 3).\\nIn R, c(1, 2, 3, 4)[c(TRUE, FALSE, TRUE, FALSE)] is equivalent to c(1, 3).\\nIn Julia, [1, 2, 3, 4][[true, false]] throws a BoundsError.\\nIn Julia, [1, 2, 3, 4][[true, false, true, false]] produces [1, 3].\\nLike many languages, Julia does not always allow operations on vectors of different lengths, unlike R where the vectors only need to share a common index range.  For example, c(1, 2, 3, 4) + c(1, 2) is valid R but the equivalent [1, 2, 3, 4] + [1, 2] will throw an error in Julia.\\nJulia's map() takes the function first, then its arguments, unlike lapply(<structure>, function, ...) in R. Similarly Julia's equivalent of apply(X, MARGIN, FUN, ...) in R is mapslices() where the function is the first argument.\\nMultivariate apply in R, e.g. mapply(choose, 11:13, 1:3), can be written as broadcast(binomial, 11:13, 1:3) in Julia. Equivalently Julia offers a shorter dot syntax for vectorizing functions binomial.(11:13, 1:3).\\nJulia uses end to denote the end of conditional blocks, like if, loop blocks, like while/ for, and functions. In lieu of the one-line if ( cond ) statement, Julia allows statements of the form if cond; statement; end, cond && statement and !cond || statement. Assignment statements in the latter two syntaxes must be explicitly wrapped in parentheses, e.g. cond && (x = value).\\nIn Julia, <-, <<- and -> are not assignment operators.\\nJulia's -> creates an anonymous function, like Python.\\nJulia constructs vectors using brackets. Julia's [1, 2, 3] is the equivalent of R's c(1, 2, 3).\\nJulia's * operator can perform matrix multiplication, unlike in R. If A and B are matrices, then A * B denotes a matrix multiplication in Julia, equivalent to R's A %*% B. In R, this same notation would perform an element-wise (Hadamard) product. To get the element-wise multiplication operation, you need to write A .* B in Julia.\\nJulia performs matrix transposition using the .' operator and conjugated transposition using the ' operator. Julia's A.' is therefore equivalent to R's t(A).\\nJulia does not require parentheses when writing if statements or for/while loops: use for i in [1, 2, 3] instead of for (i in c(1, 2, 3)) and if i == 1 instead of if (i == 1).\\nJulia does not treat the numbers 0 and 1 as Booleans. You cannot write if (1) in Julia, because if statements accept only booleans. Instead, you can write if true, if Bool(1), or if 1==1.\\nJulia does not provide nrow and ncol. Instead, use size(M, 1) for nrow(M) and size(M, 2) for ncol(M).\\nJulia is careful to distinguish scalars, vectors and matrices.  In R, 1 and c(1) are the same. In Julia, they cannot be used interchangeably.\\nJulia's diag and diagm are not like R's.\\nJulia cannot assign to the results of function calls on the left hand side of an assignment operation: you cannot write diag(M) = ones(n).\\nJulia discourages populating the main namespace with functions. Most statistical functionality for Julia is found in packages under the JuliaStats organization. For example:\\nFunctions pertaining to probability distributions are provided by the Distributions package.\\nThe DataFrames package provides data frames.\\nGeneralized linear models are provided by the GLM package.\\nJulia provides tuples and real hash tables, but not R-style lists. When returning multiple items, you should typically use a tuple: instead of list(a = 1, b = 2), use (1, 2).\\nJulia encourages users to write their own types, which are easier to use than S3 or S4 objects in R. Julia's multiple dispatch system means that table(x::TypeA) and table(x::TypeB) act like R's table.TypeA(x) and table.TypeB(x).\\nIn Julia, values are passed and assigned by reference. If a function modifies an array, the changes will be visible in the caller. This is very different from R and allows new functions to operate on large data structures much more efficiently.\\nIn Julia, vectors and matrices are concatenated using hcat(), vcat() and hvcat(), not c, rbind and cbind like in R.\\nIn Julia, a range like a:b is not shorthand for a vector like in R, but is a specialized Range that is used for iteration without high memory overhead. To convert a range into a vector, use collect(a:b).\\nJulia's max() and min() are the equivalent of pmax and pmin respectively in R, but both arguments need to have the same dimensions.  While maximum() and minimum() replace max and min in R, there are important differences.\\nJulia's sum(), prod(), maximum(), and minimum() are different from their counterparts in R. They all accept one or two arguments. The first argument is an iterable collection such as an array.  If there is a second argument, then this argument indicates the dimensions, over which the operation is carried out.  For instance, let A=[[1 2],[3 4]] in Julia and B=rbind(c(1,2),c(3,4)) be the same matrix in R.  Then sum(A) gives the same result as sum(B), but sum(A, 1) is a row vector containing the sum over each column and sum(A, 2) is a column vector containing the sum over each row.  This contrasts to the behavior of R, where sum(B,1)=11 and sum(B,2)=12.  If the second argument is a vector, then it specifies all the dimensions over which the sum is performed, e.g., sum(A,[1,2])=10.  It should be noted that there is no error checking regarding the second argument.\\nJulia has several functions that can mutate their arguments. For example, it has both sort() and sort!().\\nIn R, performance requires vectorization. In Julia, almost the opposite is true: the best performing code is often achieved by using devectorized loops.\\nJulia is eagerly evaluated and does not support R-style lazy evaluation. For most users, this means that there are very few unquoted expressions or column names.\\nJulia does not support the NULL type.\\nJulia lacks the equivalent of R's assign or get.\\nIn Julia, return does not require parentheses.\\nIn R, an idiomatic way to remove unwanted values is to use logical indexing, like in the expression x[x>3] or in the statement x = x[x>3] to modify x in-place. In contrast, Julia provides the higher order functions filter() and filter!(), allowing users to write filter(z->z>3, x) and filter!(z->z>3, x) as alternatives to the corresponding transliterations x[x.>3] and x = x[x.>3]. Using filter!() reduces the use of temporary arrays.\"\n},\n\n{\n    \"location\": \"manual/noteworthy-differences.html#Noteworthy-differences-from-Python-1\",\n    \"page\": \"Noteworthy Differences from other Languages\",\n    \"title\": \"Noteworthy differences from Python\",\n    \"category\": \"section\",\n    \"text\": \"Julia requires end to end a block. Unlike Python, Julia has no pass keyword.\\nIn Julia, indexing of arrays, strings, etc. is 1-based not 0-based.\\nJulia's slice indexing includes the last element, unlike in Python. a[2:3] in Julia is a[1:3] in Python.\\nJulia does not support negative indexes. In particular, the last element of a list or array is indexed with end in Julia, not -1 as in Python.\\nJulia's for, if, while, etc. blocks are terminated by the end keyword. Indentation level is not significant as it is in Python.\\nJulia has no line continuation syntax: if, at the end of a line, the input so far is a complete expression, it is considered done; otherwise the input continues. One way to force an expression to continue is to wrap it in parentheses.\\nJulia arrays are column major (Fortran ordered) whereas NumPy arrays are row major (C-ordered) by default. To get optimal performance when looping over arrays, the order of the loops should be reversed in Julia relative to NumPy (see relevant section of Performance Tips).\\nJulia's updating operators (e.g. +=, -=, ...) are not in-place whereas NumPy's are. This means A = ones(4); B = A; B += 3 doesn't change values in A, it rather rebinds the name B to the result of the right- hand side B = B + 3, which is a new array. Use B[:] += 3, explicit loops, or InplaceOps.jl.\\nJulia evaluates default values of function arguments every time the method is invoked, unlike in Python where the default values are evaluated only once when the function is defined. For example, the function f(x=rand()) = x returns a new random number every time it is invoked without argument. On the other hand, the function g(x=[1,2]) = push!(x,3) returns [1,2,3] every time it is called as g().\\nIn Julia % is the remainder operator, whereas in Python it is the modulus.\"\n},\n\n{\n    \"location\": \"manual/noteworthy-differences.html#Noteworthy-differences-from-C/C-1\",\n    \"page\": \"Noteworthy Differences from other Languages\",\n    \"title\": \"Noteworthy differences from C/C++\",\n    \"category\": \"section\",\n    \"text\": \"Julia arrays are indexed with square brackets, and can have more than one dimension A[i,j]. This syntax is not just syntactic sugar for a reference to a pointer or address as in C/C++. See the Julia documentation for the syntax for array construction (it has changed between versions).\\nIn Julia, indexing of arrays, strings, etc. is 1-based not 0-based.\\nJulia arrays are assigned by reference. After A=B, changing elements of B will modify A as well. Updating operators like += do not operate in-place, they are equivalent to A = A + B which rebinds the left-hand side to the result of the right-hand side expression.\\nJulia arrays are column major (Fortran ordered) whereas C/C++ arrays are row major ordered by default. To get optimal performance when looping over arrays, the order of the loops should be reversed in Julia relative to C/C++ (see relevant section of Performance Tips).\\nJulia values are passed and assigned by reference. If a function modifies an array, the changes will be visible in the caller.\\nIn Julia, whitespace is significant, unlike C/C++, so care must be taken when adding/removing whitespace from a Julia program.\\nIn Julia, literal numbers without a decimal point (such as 42) create signed integers, of type Int, but literals too large to fit in the machine word size will automatically be promoted to a larger size type, such as Int64 (if Int is Int32), Int128, or the arbitrarily large BigInt type. There are no numeric literal suffixes, such as L, LL, U, UL, ULL to indicate unsigned and/or signed vs. unsigned. Decimal literals are always signed, and hexadecimal literals (which start with 0x like C/C++), are unsigned. Hexadecimal literals also, unlike C/C++/Java and unlike decimal literals in Julia, have a type based on the length of the literal, including leading 0s. For example, 0x0 and 0x00 have type UInt8, 0x000 and 0x0000 have type UInt16, then literals with 5 to 8 hex digits have type UInt32, 9 to 16 hex digits type UInt64 and 17 to 32 hex digits type UInt128. This needs to be taken into account when defining hexadecimal masks, for example ~0xf == 0xf0 is very different from ~0x000f == 0xfff0. 64 bit Float64 and 32 bit Float32 bit literals are expressed as 1.0 and 1.0f0 respectively. Floating point literals are rounded (and not promoted to the BigFloat type) if they can not be exactly represented.  Floating point literals are closer in behavior to C/C++. Octal (prefixed with 0o) and binary (prefixed with 0b) literals are also treated as unsigned.\\nString literals can be delimited with either \\\"  or \\\"\\\"\\\", \\\"\\\"\\\" delimited literals can contain \\\" characters without quoting it like \\\"\\\\\\\"\\\" String literals can have values of other variables or expressions interpolated into them, indicated by $variablename or $(expression), which evaluates the variable name or the expression in the context of the function.\\n// indicates a Rational number, and not a single-line comment (which is # in Julia)\\n#= indicates the start of a multiline comment, and =# ends it.\\nFunctions in Julia return values from their last expression(s) or the return keyword.  Multiple values can be returned from functions and assigned as tuples, e.g. (a, b) = myfunction() or a, b = myfunction(), instead of having to pass pointers to values as one would have to do in C/C++ (i.e. a = myfunction(&b).\\nJulia does not require the use of semicolons to end statements. The results of expressions are not automatically printed (except at the interactive prompt, i.e. the REPL), and lines of code do not need to end with semicolons. println() or @printf() can be used to print specific output. In the REPL, ; can be used to suppress output. ; also has a different meaning within [ ], something to watch out for. ; can be used to separate expressions on a single line, but are not strictly necessary in many cases, and are more an aid to readability.\\nIn Julia, the operator \u22bb (xor) performs the bitwise XOR operation, i.e. ^ in C/C++.  Also, the bitwise operators do not have the same precedence as C/++, so parenthesis may be required.\\nJulia's ^ is exponentiation (pow), not bitwise XOR as in C/C++ (use \u22bb, or xor, in Julia)\\nJulia has two right-shift operators, >> and >>>.  >>> performs an arithmetic shift, >> always performs a logical shift, unlike C/C++, where the meaning of >> depends on the type of the value being shifted.\\nJulia's -> creates an anonymous function, it does not access a member via a pointer.\\nJulia does not require parentheses when writing if statements or for/while loops: use for i in [1, 2, 3] instead of for (int i=1; i <= 3; i++) and if i == 1 instead of if (i == 1).\\nJulia does not treat the numbers 0 and 1 as Booleans. You cannot write if (1) in Julia, because if statements accept only booleans. Instead, you can write if true, if Bool(1), or if 1==1.\\nJulia uses end to denote the end of conditional blocks, like if, loop blocks, like while/ for, and functions. In lieu of the one-line if ( cond ) statement, Julia allows statements of the form if cond; statement; end, cond && statement and !cond || statement. Assignment statements in the latter two syntaxes must be explicitly wrapped in parentheses, e.g. cond && (x = value), because of the operator precedence.\\nJulia has no line continuation syntax: if, at the end of a line, the input so far is a complete expression, it is considered done; otherwise the input continues. One way to force an expression to continue is to wrap it in parentheses.\\nJulia macros operate on parsed expressions, rather than the text of the program, which allows them to perform sophisticated transformations of Julia code. Macro names start with the @ character, and have both a function-like syntax, @mymacro(arg1, arg2, arg3), and a statement-like syntax, @mymacro arg1 arg2 arg3. The forms are interchangable; the function-like form is particularly useful if the macro appears within another expression, and is often clearest. The statement-like form is often used to annotate blocks, as in the parallel for construct: @parallel for i in 1:n; #= body =#; end. Where the end of the macro construct may be unclear, use the function-like form.\\nJulia now has an enumeration type, expressed using the macro @enum(name, value1, value2, ...) For example: @enum(Fruit, banana=1, apple, pear)\\nBy convention, functions that modify their arguments have a ! at the end of the name, for example push!.\\nIn C++, by default, you have static dispatch, i.e. you need to annotate a function as virtual, in order to have dynamic dispatch. On the other hand, in Julia every method is \\\"virtual\\\" (although it's more general than that since methods are dispatched on every argument type, not only this, using the most-specific-declaration rule).\"\n},\n\n{\n    \"location\": \"manual/unicode-input.html#\",\n    \"page\": \"Unicode Input\",\n    \"title\": \"Unicode Input\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"manual/unicode-input.html#Unicode-Input-1\",\n    \"page\": \"Unicode Input\",\n    \"title\": \"Unicode Input\",\n    \"category\": \"section\",\n    \"text\": \"The following table lists Unicode characters that can be entered via tab completion of LaTeX-like abbreviations in the Julia REPL (and in various other editing environments).  You can also get information on how to type a symbol by entering it in the REPL help, i.e. by typing ? and then entering the symbol in the REPL (e.g., by copy-paste from somewhere you saw the symbol).warning: Warning\\nThis table may appear to contain missing characters in the second column, or even show characters that are inconsistent with the characters as they are rendered in the Julia REPL. In these cases, users are strongly advised to check their choice of fonts in their browser and REPL environment, as there are known issues with glyphs in many fonts.#\\n# Generate a table containing all LaTeX and Emoji tab completions available in the REPL.\\n#\\n\\nfunction tab_completions(symbols...)\\n    completions = Dict{String, Vector{String}}()\\n    for each in symbols, (k, v) in each\\n        completions[v] = push!(get!(completions, v, String[]), k)\\n    end\\n    return completions\\nend\\n\\nfunction unicode_data()\\n    file = normpath(JULIA_HOME, \\\"..\\\", \\\"..\\\", \\\"doc\\\", \\\"UnicodeData.txt\\\")\\n    names = Dict{UInt32, String}()\\n    open(file) do unidata\\n        for line in readlines(unidata)\\n            id, name, desc = split(line, \\\";\\\")[[1, 2, 11]]\\n            codepoint = parse(UInt32, \\\"0x$id\\\")\\n            names[codepoint] = titlecase(lowercase(name == \\\"\\\" ? desc : desc == \\\"\\\" ? name : \\\"$name / $desc\\\"))\\n        end\\n    end\\n    return names\\nend\\n\\n# Prepend a dotted circle ('\u25cc' i.e. '\\\\u25CC') to combining characters\\nfunction fix_combining_chars(char)\\n    cat = Base.UTF8proc.category_code(char)\\n    return string(cat == 6 || cat == 8 ? \\\"\u25cc\\\" : \\\"\\\", char)\\nend\\n\\n\\nfunction table_entries(completions, unicode_dict)\\n    entries = [[\\n        \\\"Code point(s)\\\", \\\"Character(s)\\\",\\n        \\\"Tab completion sequence(s)\\\", \\\"Unicode name(s)\\\"\\n    ]]\\n    for (chars, inputs) in sort!(collect(completions), by = first)\\n        code_points, unicode_names, characters = String[], String[], String[]\\n        for char in chars\\n            push!(code_points, \\\"U+$(uppercase(hex(char, 5)))\\\")\\n            push!(unicode_names, get(unicode_dict, UInt32(char), \\\"(No Unicode name)\\\"))\\n            push!(characters, isempty(characters) ? fix_combining_chars(char) : \\\"$char\\\")\\n        end\\n        push!(entries, [\\n            join(code_points, \\\" + \\\"), join(characters),\\n            join(inputs, \\\", \\\"), join(unicode_names, \\\" + \\\")\\n        ])\\n    end\\n    return Markdown.Table(entries, [:l, :l, :l, :l])\\nend\\n\\ntable_entries(\\n    tab_completions(\\n        Base.REPLCompletions.latex_symbols,\\n        Base.REPLCompletions.emoji_symbols\\n    ),\\n    unicode_data()\\n)\"\n},\n\n{\n    \"location\": \"stdlib/base.html#\",\n    \"page\": \"Essentials\",\n    \"title\": \"Essentials\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Essentials-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Essentials\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Introduction-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Introduction\",\n    \"category\": \"section\",\n    \"text\": \"The Julia standard library contains a range of functions and macros appropriate for performing scientific and numerical computing, but is also as broad as those of many general purpose programming languages.  Additional functionality is available from a growing collection of available packages. Functions are grouped by topic below.Some general notes:Except for functions in built-in modules (Pkg, Collections, Test and Profile), all functions documented here are directly available for use in programs.\\nTo use module functions, use import Module to import the module, and Module.fn(x) to use the functions.\\nAlternatively, using Module will import all exported Module functions into the current namespace.\\nBy convention, function names ending with an exclamation point (!) modify their arguments. Some functions have both modifying (e.g., sort!) and non-modifying (sort) versions.\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.exit\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.exit\",\n    \"category\": \"Function\",\n    \"text\": \"exit([code])\\n\\nQuit (or control-D at the prompt). The default exit code is zero, indicating that the processes completed successfully.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.quit\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.quit\",\n    \"category\": \"Function\",\n    \"text\": \"quit()\\n\\nQuit the program indicating that the processes completed successfully. This function calls exit(0) (see exit).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.atexit\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.atexit\",\n    \"category\": \"Function\",\n    \"text\": \"atexit(f)\\n\\nRegister a zero-argument function f() to be called at process exit. atexit() hooks are called in last in first out (LIFO) order and run before object finalizers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.atreplinit\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.atreplinit\",\n    \"category\": \"Function\",\n    \"text\": \"atreplinit(f)\\n\\nRegister a one-argument function to be called before the REPL interface is initialized in interactive sessions; this is useful to customize the interface. The argument of f is the REPL object. This function should be called from within the .juliarc.jl initialization file.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isinteractive\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isinteractive\",\n    \"category\": \"Function\",\n    \"text\": \"isinteractive() -> Bool\\n\\nDetermine whether Julia is running an interactive session.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.whos\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.whos\",\n    \"category\": \"Function\",\n    \"text\": \"whos(io::IO=STDOUT, m::Module=current_module(), pattern::Regex=r\\\"\\\")\\n\\nPrint information about exported global variables in a module, optionally restricted to those matching pattern.\\n\\nThe memory consumption estimate is an approximate lower bound on the size of the internal structure of the object.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.summarysize\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.summarysize\",\n    \"category\": \"Function\",\n    \"text\": \"Base.summarysize(obj; exclude=Union{...}, chargeall=Union{...}) -> Int\\n\\nCompute the amount of memory used by all unique objects reachable from the argument.\\n\\nKeyword Arguments\\n\\nexclude: specifies the types of objects to exclude from the traversal.\\nchargeall: specifies the types of objects to always charge the size of all of their fields, even if those fields would normally be excluded.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.edit-Tuple{AbstractString,Integer}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.edit\",\n    \"category\": \"Method\",\n    \"text\": \"edit(path::AbstractString, line::Integer=0)\\n\\nEdit a file or directory optionally providing a line number to edit the file at. Returns to the julia prompt when you quit the editor. The editor can be changed by setting JULIA_EDITOR, VISUAL or EDITOR as an environment variable.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.edit-Tuple{Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.edit\",\n    \"category\": \"Method\",\n    \"text\": \"edit(function, [types])\\n\\nEdit the definition of a function, optionally specifying a tuple of types to indicate which method to edit. The editor can be changed by setting JULIA_EDITOR, VISUAL or EDITOR as an environment variable.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@edit\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@edit\",\n    \"category\": \"Macro\",\n    \"text\": \"@edit\\n\\nEvaluates the arguments to the function or macro call, determines their types, and calls the edit function on the resulting expression.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.less-Tuple{AbstractString}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.less\",\n    \"category\": \"Method\",\n    \"text\": \"less(file::AbstractString, [line::Integer])\\n\\nShow a file using the default pager, optionally providing a starting line number. Returns to the julia prompt when you quit the pager.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.less-Tuple{Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.less\",\n    \"category\": \"Method\",\n    \"text\": \"less(function, [types])\\n\\nShow the definition of a function using the default pager, optionally specifying a tuple of types to indicate which method to see.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@less\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@less\",\n    \"category\": \"Macro\",\n    \"text\": \"@less\\n\\nEvaluates the arguments to the function or macro call, determines their types, and calls the less function on the resulting expression.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.clipboard-Tuple{Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.clipboard\",\n    \"category\": \"Method\",\n    \"text\": \"clipboard(x)\\n\\nSend a printed form of x to the operating system clipboard (\\\"copy\\\").\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.clipboard-Tuple{}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.clipboard\",\n    \"category\": \"Method\",\n    \"text\": \"clipboard() -> AbstractString\\n\\nReturn a string with the contents of the operating system clipboard (\\\"paste\\\").\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.reload\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.reload\",\n    \"category\": \"Function\",\n    \"text\": \"reload(name::AbstractString)\\n\\nForce reloading of a package, even if it has been loaded before. This is intended for use during package development as code is modified.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.require\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.require\",\n    \"category\": \"Function\",\n    \"text\": \"require(module::Symbol)\\n\\nThis function is part of the implementation of using / import, if a module is not already defined in Main. It can also be called directly to force reloading a module, regardless of whether it has been loaded before (for example, when interactively developing libraries).\\n\\nLoads a source file, in the context of the Main module, on every active node, searching standard locations for files. require is considered a top-level operation, so it sets the current include path but does not use it to search for files (see help for include). This function is typically used to load library code, and is implicitly called by using to load packages.\\n\\nWhen searching for files, require first looks for package code under Pkg.dir(), then tries paths in the global array LOAD_PATH. require is case-sensitive on all platforms, including those with case-insensitive filesystems like macOS and Windows.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.compilecache\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.compilecache\",\n    \"category\": \"Function\",\n    \"text\": \"Base.compilecache(module::String)\\n\\nCreates a precompiled cache file for a module and all of its dependencies. This can be used to reduce package load times. Cache files are stored in LOAD_CACHE_PATH[1], which defaults to ~/.julia/lib/VERSION. See Module initialization and precompilation for important notes.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.__precompile__\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.__precompile__\",\n    \"category\": \"Function\",\n    \"text\": \"__precompile__(isprecompilable::Bool=true)\\n\\nSpecify whether the file calling this function is precompilable. If isprecompilable is true, then __precompile__ throws an exception when the file is loaded by using/import/require unless the file is being precompiled, and in a module file it causes the module to be automatically precompiled when it is imported. Typically, __precompile__() should occur before the module declaration in the file, or better yet VERSION >= v\\\"0.4\\\" && __precompile__() in order to be backward-compatible with Julia 0.3.\\n\\nIf a module or file is not safely precompilable, it should call __precompile__(false) in order to throw an error if Julia attempts to precompile it.\\n\\n__precompile__() should not be used in a module unless all of its dependencies are also using __precompile__(). Failure to do so can result in a runtime error when loading the module.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.include\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.include\",\n    \"category\": \"Function\",\n    \"text\": \"include(path::AbstractString)\\n\\nEvaluate the contents of the input source file in the current context. Returns the result of the last evaluated expression of the input file. During including, a task-local include path is set to the directory containing the file. Nested calls to include will search relative to that path. All paths refer to files on node 1 when running in parallel, and files will be fetched from node 1. This function is typically used to load source interactively, or to combine files in packages that are broken into multiple source files.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.include_string\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.include_string\",\n    \"category\": \"Function\",\n    \"text\": \"include_string(code::AbstractString, filename::AbstractString=\\\"string\\\")\\n\\nLike include, except reads code from the given string rather than from a file. Since there is no file path involved, no path processing or fetching from node 1 is done.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.include_dependency\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.include_dependency\",\n    \"category\": \"Function\",\n    \"text\": \"include_dependency(path::AbstractString)\\n\\nIn a module, declare that the file specified by path (relative or absolute) is a dependency for precompilation; that is, the module will need to be recompiled if this file changes.\\n\\nThis is only needed if your module depends on a file that is not used via include. It has no effect outside of compilation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Docs.apropos\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Docs.apropos\",\n    \"category\": \"Function\",\n    \"text\": \"apropos(string)\\n\\nSearch through all documentation for a string, ignoring case.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.which-Tuple{Any,Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.which\",\n    \"category\": \"Method\",\n    \"text\": \"which(f, types)\\n\\nReturns the method of f (a Method object) that would be called for arguments of the given types.\\n\\nIf types is an abstract type, then the method that would be called by invoke is returned.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.which-Tuple{Symbol}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.which\",\n    \"category\": \"Method\",\n    \"text\": \"which(symbol)\\n\\nReturn the module in which the binding for the variable referenced by symbol was created.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@which\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@which\",\n    \"category\": \"Macro\",\n    \"text\": \"@which\\n\\nApplied to a function or macro call, it evaluates the arguments to the specified call, and returns the Method object for the method that would be called for those arguments. Applied to a variable, it returns the module in which the variable was bound. It calls out to the which function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.methods\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.methods\",\n    \"category\": \"Function\",\n    \"text\": \"methods(f, [types])\\n\\nReturns the method table for f.\\n\\nIf types is specified, returns an array of methods whose types match.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.methodswith\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.methodswith\",\n    \"category\": \"Function\",\n    \"text\": \"methodswith(typ[, module or function][, showparents::Bool=false])\\n\\nReturn an array of methods with an argument of type typ.\\n\\nThe optional second argument restricts the search to a particular module or function (the default is all modules, starting from Main).\\n\\nIf optional showparents is true, also return arguments with a parent type of typ, excluding type Any.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@show\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@show\",\n    \"category\": \"Macro\",\n    \"text\": \"@show\\n\\nShow an expression and result, returning the result.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.versioninfo\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.versioninfo\",\n    \"category\": \"Function\",\n    \"text\": \"versioninfo(io::IO=STDOUT, verbose::Bool=false)\\n\\nPrint information about the version of Julia in use. If the verbose argument is true, detailed system information is shown as well.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.workspace\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.workspace\",\n    \"category\": \"Function\",\n    \"text\": \"workspace()\\n\\nReplace the top-level module (Main) with a new one, providing a clean workspace. The previous Main module is made available as LastMain. A previously-loaded package can be accessed using a statement such as using LastMain.Package.\\n\\nThis function should only be used interactively.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#ans\",\n    \"page\": \"Essentials\",\n    \"title\": \"ans\",\n    \"category\": \"Keyword\",\n    \"text\": \"ans\\n\\nA variable referring to the last computed value, automatically set at the interactive prompt.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Getting-Around-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Getting Around\",\n    \"category\": \"section\",\n    \"text\": \"Base.exit\\nBase.quit\\nBase.atexit\\nBase.atreplinit\\nBase.isinteractive\\nBase.whos\\nBase.summarysize\\nBase.edit(::AbstractString, ::Integer)\\nBase.edit(::Any)\\nBase.@edit\\nBase.less(::AbstractString)\\nBase.less(::Any)\\nBase.@less\\nBase.clipboard(::Any)\\nBase.clipboard()\\nBase.reload\\nBase.require\\nBase.compilecache\\nBase.__precompile__\\nBase.include\\nBase.include_string\\nBase.include_dependency\\nBase.Docs.apropos\\nBase.which(::Any, ::Any)\\nBase.which(::Symbol)\\nBase.@which\\nBase.methods\\nBase.methodswith\\nBase.@show\\nBase.versioninfo\\nBase.workspace\\nans\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.:===\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.:===\",\n    \"category\": \"Function\",\n    \"text\": \"===(x,y) -> Bool\\n\u2261(x,y) -> Bool\\n\\nDetermine whether x and y are identical, in the sense that no program could distinguish them. Compares mutable objects by address in memory, and compares immutable objects (such as numbers) by contents at the bit level. This function is sometimes called egal.\\n\\njulia> a = [1, 2]; b = [1, 2];\\n\\njulia> a == b\\ntrue\\n\\njulia> a === b\\nfalse\\n\\njulia> a === a\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.isa\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.isa\",\n    \"category\": \"Function\",\n    \"text\": \"isa(x, type) -> Bool\\n\\nDetermine whether x is of the given type. Can also be used as an infix operator, e.g. x isa type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isequal-Tuple{Any,Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isequal\",\n    \"category\": \"Method\",\n    \"text\": \"isequal(x, y)\\n\\nSimilar to ==, except treats all floating-point NaN values as equal to each other, and treats -0.0 as unequal to 0.0. The default implementation of isequal calls ==, so if you have a type that doesn't have these floating-point subtleties then you probably only need to define ==.\\n\\nisequal is the comparison function used by hash tables (Dict). isequal(x,y) must imply that hash(x) == hash(y).\\n\\nThis typically means that if you define your own == function then you must define a corresponding hash (and vice versa). Collections typically implement isequal by calling isequal recursively on all contents.\\n\\nScalar types generally do not need to implement isequal separate from ==, unless they represent floating-point numbers amenable to a more efficient implementation than that provided as a generic fallback (based on isnan, signbit, and ==).\\n\\njulia> isequal([1., NaN], [1., NaN])\\ntrue\\n\\njulia> [1., NaN] == [1., NaN]\\nfalse\\n\\njulia> 0.0 == -0.0\\ntrue\\n\\njulia> isequal(0.0, -0.0)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isequal-Tuple{Nullable,Nullable}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isequal\",\n    \"category\": \"Method\",\n    \"text\": \"isequal(x, y)\\n\\nSimilar to ==, except treats all floating-point NaN values as equal to each other, and treats -0.0 as unequal to 0.0. The default implementation of isequal calls ==, so if you have a type that doesn't have these floating-point subtleties then you probably only need to define ==.\\n\\nisequal is the comparison function used by hash tables (Dict). isequal(x,y) must imply that hash(x) == hash(y).\\n\\nThis typically means that if you define your own == function then you must define a corresponding hash (and vice versa). Collections typically implement isequal by calling isequal recursively on all contents.\\n\\nScalar types generally do not need to implement isequal separate from ==, unless they represent floating-point numbers amenable to a more efficient implementation than that provided as a generic fallback (based on isnan, signbit, and ==).\\n\\njulia> isequal([1., NaN], [1., NaN])\\ntrue\\n\\njulia> [1., NaN] == [1., NaN]\\nfalse\\n\\njulia> 0.0 == -0.0\\ntrue\\n\\njulia> isequal(0.0, -0.0)\\nfalse\\n\\n\\n\\nisequal(x::Nullable, y::Nullable)\\n\\nIf neither x nor y is null, compare them according to their values (i.e. isequal(get(x), get(y))). Else, return true if both arguments are null, and false if one is null but not the other: nulls are considered equal.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isless\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isless\",\n    \"category\": \"Function\",\n    \"text\": \"isless(x, y)\\n\\nTest whether x is less than y, according to a canonical total order. Values that are normally unordered, such as NaN, are ordered in an arbitrary but consistent fashion. This is the default comparison used by sort. Non-numeric types with a canonical total order should implement this function. Numeric types only need to implement it if they have special values such as NaN.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isless-Tuple{Nullable,Nullable}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isless\",\n    \"category\": \"Method\",\n    \"text\": \"isless(x::Nullable, y::Nullable)\\n\\nIf neither x nor y is null, compare them according to their values (i.e. isless(get(x), get(y))). Else, return true if only y is null, and false otherwise: nulls are always considered greater than non-nulls, but not greater than another null.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.ifelse\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.ifelse\",\n    \"category\": \"Function\",\n    \"text\": \"ifelse(condition::Bool, x, y)\\n\\nReturn x if condition is true, otherwise return y. This differs from ? or if in that it is an ordinary function, so all the arguments are evaluated first. In some cases, using ifelse instead of an if statement can eliminate the branch in generated code and provide higher performance in tight loops.\\n\\njulia> ifelse(1 > 2, 1, 2)\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.lexcmp\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.lexcmp\",\n    \"category\": \"Function\",\n    \"text\": \"lexcmp(x, y)\\n\\nCompare x and y lexicographically and return -1, 0, or 1 depending on whether x is less than, equal to, or greater than y, respectively. This function should be defined for lexicographically comparable types, and lexless will call lexcmp by default.\\n\\njulia> lexcmp(\\\"abc\\\", \\\"abd\\\")\\n-1\\n\\njulia> lexcmp(\\\"abc\\\", \\\"abc\\\")\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.lexless\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.lexless\",\n    \"category\": \"Function\",\n    \"text\": \"lexless(x, y)\\n\\nDetermine whether x is lexicographically less than y.\\n\\njulia> lexless(\\\"abc\\\", \\\"abd\\\")\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.typeof\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.typeof\",\n    \"category\": \"Function\",\n    \"text\": \"typeof(x)\\n\\nGet the concrete type of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.tuple\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.tuple\",\n    \"category\": \"Function\",\n    \"text\": \"tuple(xs...)\\n\\nConstruct a tuple of the given objects.\\n\\nExample\\n\\njulia> tuple(1, 'a', pi)\\n(1, 'a', \u03c0 = 3.1415926535897...)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.ntuple\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.ntuple\",\n    \"category\": \"Function\",\n    \"text\": \"ntuple(f::Function, n::Integer)\\n\\nCreate a tuple of length n, computing each element as f(i), where i is the index of the element.\\n\\njulia> ntuple(i -> 2*i, 4)\\n(2, 4, 6, 8)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.object_id\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.object_id\",\n    \"category\": \"Function\",\n    \"text\": \"object_id(x)\\n\\nGet a hash value for x based on object identity. object_id(x)==object_id(y) if x === y.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.hash\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.hash\",\n    \"category\": \"Function\",\n    \"text\": \"hash(x[, h::UInt])\\n\\nCompute an integer hash code such that isequal(x,y) implies hash(x)==hash(y). The optional second argument h is a hash code to be mixed with the result.\\n\\nNew types should implement the 2-argument form, typically by calling the 2-argument hash method recursively in order to mix hashes of the contents with each other (and with h). Typically, any type that implements hash should also implement its own == (hence isequal) to guarantee the property mentioned above.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.finalizer\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.finalizer\",\n    \"category\": \"Function\",\n    \"text\": \"finalizer(x, f)\\n\\nRegister a function f(x) to be called when there are no program-accessible references to x. The type of x must be a mutable struct, otherwise the behavior of this function is unpredictable.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.finalize\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.finalize\",\n    \"category\": \"Function\",\n    \"text\": \"finalize(x)\\n\\nImmediately run finalizers registered for object x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.copy\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.copy\",\n    \"category\": \"Function\",\n    \"text\": \"copy(x)\\n\\nCreate a shallow copy of x: the outer structure is copied, but not all internal values. For example, copying an array produces a new array with identically-same elements as the original.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.deepcopy\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.deepcopy\",\n    \"category\": \"Function\",\n    \"text\": \"deepcopy(x)\\n\\nCreate a deep copy of x: everything is copied recursively, resulting in a fully independent object. For example, deep-copying an array produces a new array whose elements are deep copies of the original elements. Calling deepcopy on an object should generally have the same effect as serializing and then deserializing it.\\n\\nAs a special case, functions can only be actually deep-copied if they are anonymous, otherwise they are just copied. The difference is only relevant in the case of closures, i.e. functions which may contain hidden internal references.\\n\\nWhile it isn't normally necessary, user-defined types can override the default deepcopy behavior by defining a specialized version of the function deepcopy_internal(x::T, dict::ObjectIdDict) (which shouldn't otherwise be used), where T is the type to be specialized for, and dict keeps track of objects copied so far within the recursion. Within the definition, deepcopy_internal should be used in place of deepcopy, and the dict variable should be updated as appropriate before returning.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.isdefined\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.isdefined\",\n    \"category\": \"Function\",\n    \"text\": \"isdefined([m::Module,] s::Symbol)\\nisdefined(object, s::Symbol)\\nisdefined(object, index::Int)\\n\\nTests whether an assignable location is defined. The arguments can be a module and a symbol or a composite object and field name (as a symbol) or index. With a single symbol argument, tests whether a global variable with that name is defined in current_module().\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.convert\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.convert\",\n    \"category\": \"Function\",\n    \"text\": \"convert(T, x)\\n\\nConvert x to a value of type T.\\n\\nIf T is an Integer type, an InexactError will be raised if x is not representable by T, for example if x is not integer-valued, or is outside the range supported by T.\\n\\nExamples\\n\\njulia> convert(Int, 3.0)\\n3\\n\\njulia> convert(Int, 3.5)\\nERROR: InexactError()\\nStacktrace:\\n [1] convert(::Type{Int64}, ::Float64) at ./float.jl:679\\n\\nIf T is a AbstractFloat or Rational type, then it will return the closest value to x representable by T.\\n\\njulia> x = 1/3\\n0.3333333333333333\\n\\njulia> convert(Float32, x)\\n0.33333334f0\\n\\njulia> convert(Rational{Int32}, x)\\n1//3\\n\\njulia> convert(Rational{Int64}, x)\\n6004799503160661//18014398509481984\\n\\nIf T is a collection type and x a collection, the result of convert(T, x) may alias x.\\n\\njulia> x = Int[1,2,3];\\n\\njulia> y = convert(Vector{Int}, x);\\n\\njulia> y === x\\ntrue\\n\\nSimilarly, if T is a composite type and x a related instance, the result of convert(T, x) may alias part or all of x.\\n\\njulia> x = speye(5);\\n\\njulia> typeof(x)\\nSparseMatrixCSC{Float64,Int64}\\n\\njulia> y = convert(SparseMatrixCSC{Float64,Int64}, x);\\n\\njulia> z = convert(SparseMatrixCSC{Float32,Int64}, y);\\n\\njulia> y === x\\ntrue\\n\\njulia> z === x\\nfalse\\n\\njulia> z.colptr === x.colptr\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.promote\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.promote\",\n    \"category\": \"Function\",\n    \"text\": \"promote(xs...)\\n\\nConvert all arguments to their common promotion type (if any), and return them all (as a tuple).\\n\\nExample\\n\\njulia> promote(Int8(1), Float16(4.5), Float32(4.1))\\n(1.0f0, 4.5f0, 4.1f0)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.oftype\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.oftype\",\n    \"category\": \"Function\",\n    \"text\": \"oftype(x, y)\\n\\nConvert y to the type of x (convert(typeof(x), y)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.widen\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.widen\",\n    \"category\": \"Function\",\n    \"text\": \"widen(x)\\n\\nIf x is a type, return a \\\"larger\\\" type (for numeric types, this will be a type with at least as much range and precision as the argument, and usually more). Otherwise x is converted to widen(typeof(x)).\\n\\nExamples\\n\\njulia> widen(Int32)\\nInt64\\n\\njulia> widen(1.5f0)\\n1.5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.identity\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.identity\",\n    \"category\": \"Function\",\n    \"text\": \"identity(x)\\n\\nThe identity function. Returns its argument.\\n\\njulia> identity(\\\"Well, what did you expect?\\\")\\n\\\"Well, what did you expect?\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#All-Objects-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"All Objects\",\n    \"category\": \"section\",\n    \"text\": \"Core.:(===)\\nCore.isa\\nBase.isequal(::Any, ::Any)\\nBase.isequal(::Nullable, ::Nullable)\\nBase.isless\\nBase.isless(::Nullable, ::Nullable)\\nBase.ifelse\\nBase.lexcmp\\nBase.lexless\\nCore.typeof\\nCore.tuple\\nBase.ntuple\\nBase.object_id\\nBase.hash\\nBase.finalizer\\nBase.finalize\\nBase.copy\\nBase.deepcopy\\nCore.isdefined\\nBase.convert\\nBase.promote\\nBase.oftype\\nBase.widen\\nBase.identity\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.supertype\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.supertype\",\n    \"category\": \"Function\",\n    \"text\": \"supertype(T::DataType)\\n\\nReturn the supertype of DataType T.\\n\\njulia> supertype(Int32)\\nSigned\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.issubtype\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.issubtype\",\n    \"category\": \"Function\",\n    \"text\": \"issubtype(type1, type2)\\n\\nReturn true if and only if all values of type1 are also of type2. Can also be written using the <: infix operator as type1 <: type2.\\n\\nExamples\\n\\njulia> issubtype(Int8, Int32)\\nfalse\\n\\njulia> Int8 <: Integer\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.:<:\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.:<:\",\n    \"category\": \"Function\",\n    \"text\": \"<:(T1, T2)\\n\\nSubtype operator, equivalent to issubtype(T1, T2).\\n\\njulia> Float64 <: AbstractFloat\\ntrue\\n\\njulia> Vector{Int} <: AbstractArray\\ntrue\\n\\njulia> Matrix{Float64} <: Matrix{AbstractFloat}\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.:>:\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.:>:\",\n    \"category\": \"Function\",\n    \"text\": \">:(T1, T2)\\n\\nSupertype operator, equivalent to issubtype(T2, T1).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.subtypes\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.subtypes\",\n    \"category\": \"Function\",\n    \"text\": \"subtypes(T::DataType)\\n\\nReturn a list of immediate subtypes of DataType T. Note that all currently loaded subtypes are included, including those not visible in the current module.\\n\\njulia> subtypes(Integer)\\n4-element Array{Union{DataType, UnionAll},1}:\\n BigInt\\n Bool\\n Signed\\n Unsigned\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.typemin\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.typemin\",\n    \"category\": \"Function\",\n    \"text\": \"typemin(T)\\n\\nThe lowest value representable by the given (real) numeric DataType T.\\n\\nExamples\\n\\njulia> typemin(Float16)\\n-Inf16\\n\\njulia> typemin(Float32)\\n-Inf32\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.typemax\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.typemax\",\n    \"category\": \"Function\",\n    \"text\": \"typemax(T)\\n\\nThe highest value representable by the given (real) numeric DataType.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.realmin\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.realmin\",\n    \"category\": \"Function\",\n    \"text\": \"realmin(T)\\n\\nThe smallest in absolute value non-subnormal value representable by the given floating-point DataType T.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.realmax\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.realmax\",\n    \"category\": \"Function\",\n    \"text\": \"realmax(T)\\n\\nThe highest finite value representable by the given floating-point DataType T.\\n\\nExamples\\n\\njulia> realmax(Float16)\\nFloat16(6.55e4)\\n\\njulia> realmax(Float32)\\n3.4028235f38\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.maxintfloat\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.maxintfloat\",\n    \"category\": \"Function\",\n    \"text\": \"maxintfloat(T)\\n\\nThe largest integer losslessly representable by the given floating-point DataType T.\\n\\n\\n\\nmaxintfloat(T, S)\\n\\nThe largest integer losslessly representable by the given floating-point DataType T that also does not exceed the maximum integer representable by the integer DataType S.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.sizeof-Tuple{Type}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.sizeof\",\n    \"category\": \"Method\",\n    \"text\": \"sizeof(T)\\n\\nSize, in bytes, of the canonical binary representation of the given DataType T, if any.\\n\\nExamples\\n\\njulia> sizeof(Float32)\\n4\\n\\njulia> sizeof(Complex128)\\n16\\n\\nIf T does not have a specific size, an error is thrown.\\n\\njulia> sizeof(Base.LinAlg.LU)\\nERROR: argument is an abstract type; size is indeterminate\\nStacktrace:\\n [1] sizeof(::Type{T} where T) at ./essentials.jl:159\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.eps-Tuple{Type{#s27} where #s27<:AbstractFloat}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.eps\",\n    \"category\": \"Method\",\n    \"text\": \"eps(::Type{T}) where T<:AbstractFloat\\neps()\\n\\nReturns the machine epsilon of the floating point type T (T = Float64 by default). This is defined as the gap between 1 and the next largest value representable by T, and is equivalent to eps(one(T)).\\n\\njulia> eps()\\n2.220446049250313e-16\\n\\njulia> eps(Float32)\\n1.1920929f-7\\n\\njulia> 1.0 + eps()\\n1.0000000000000002\\n\\njulia> 1.0 + eps()/2\\n1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.eps-Tuple{AbstractFloat}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.eps\",\n    \"category\": \"Method\",\n    \"text\": \"eps(x::AbstractFloat)\\n\\nReturns the unit in last place (ulp) of x. This is the distance between consecutive representable floating point values at x. In most cases, if the distance on either side of x is different, then the larger of the two is taken, that is\\n\\neps(x) == max(x-prevfloat(x), nextfloat(x)-x)\\n\\nThe exceptions to this rule are the smallest and largest finite values (e.g. nextfloat(-Inf) and prevfloat(Inf) for Float64), which round to the smaller of the values.\\n\\nThe rationale for this behavior is that eps bounds the floating point rounding error. Under the default RoundNearest rounding mode, if y is a real number and x is the nearest floating point number to y, then\\n\\ny-x leq operatornameeps(x)2\\n\\njulia> eps(1.0)\\n2.220446049250313e-16\\n\\njulia> eps(prevfloat(2.0))\\n2.220446049250313e-16\\n\\njulia> eps(2.0)\\n4.440892098500626e-16\\n\\njulia> x = prevfloat(Inf)      # largest finite Float64\\n1.7976931348623157e308\\n\\njulia> x + eps(x)/2            # rounds up\\nInf\\n\\njulia> x + prevfloat(eps(x)/2) # rounds down\\n1.7976931348623157e308\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.promote_type\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.promote_type\",\n    \"category\": \"Function\",\n    \"text\": \"promote_type(type1, type2)\\n\\nDetermine a type big enough to hold values of each argument type without loss, whenever possible. In some cases, where no type exists to which both types can be promoted losslessly, some loss is tolerated; for example, promote_type(Int64, Float64) returns Float64 even though strictly, not all Int64 values can be represented exactly as Float64 values.\\n\\njulia> promote_type(Int64, Float64)\\nFloat64\\n\\njulia> promote_type(Int32, Int64)\\nInt64\\n\\njulia> promote_type(Float32, BigInt)\\nBigFloat\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.promote_rule\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.promote_rule\",\n    \"category\": \"Function\",\n    \"text\": \"promote_rule(type1, type2)\\n\\nSpecifies what type should be used by promote when given values of types type1 and type2. This function should not be called directly, but should have definitions added to it for new types as appropriate.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.getfield\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.getfield\",\n    \"category\": \"Function\",\n    \"text\": \"getfield(value, name::Symbol)\\n\\nExtract a named field from a value of composite type. The syntax a.b calls getfield(a, :b).\\n\\nExample\\n\\njulia> a = 1//2\\n1//2\\n\\njulia> getfield(a, :num)\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.setfield!\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.setfield!\",\n    \"category\": \"Function\",\n    \"text\": \"setfield!(value, name::Symbol, x)\\n\\nAssign x to a named field in value of composite type. The syntax a.b = c calls setfield!(a, :b, c).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.fieldoffset\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.fieldoffset\",\n    \"category\": \"Function\",\n    \"text\": \"fieldoffset(type, i)\\n\\nThe byte offset of field i of a type relative to the data start. For example, we could use it in the following manner to summarize information about a struct:\\n\\njulia> structinfo(T) = [(fieldoffset(T,i), fieldname(T,i), fieldtype(T,i)) for i = 1:nfields(T)];\\n\\njulia> structinfo(Base.Filesystem.StatStruct)\\n12-element Array{Tuple{UInt64,Symbol,DataType},1}:\\n (0x0000000000000000, :device, UInt64)\\n (0x0000000000000008, :inode, UInt64)\\n (0x0000000000000010, :mode, UInt64)\\n (0x0000000000000018, :nlink, Int64)\\n (0x0000000000000020, :uid, UInt64)\\n (0x0000000000000028, :gid, UInt64)\\n (0x0000000000000030, :rdev, UInt64)\\n (0x0000000000000038, :size, Int64)\\n (0x0000000000000040, :blksize, Int64)\\n (0x0000000000000048, :blocks, Int64)\\n (0x0000000000000050, :mtime, Float64)\\n (0x0000000000000058, :ctime, Float64)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.fieldtype\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.fieldtype\",\n    \"category\": \"Function\",\n    \"text\": \"fieldtype(T, name::Symbol | index::Int)\\n\\nDetermine the declared type of a field (specified by name or index) in a composite DataType T.\\n\\njulia> struct Foo\\n           x::Int64\\n           y::String\\n       end\\n\\njulia> fieldtype(Foo, :x)\\nInt64\\n\\njulia> fieldtype(Foo, 2)\\nString\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isimmutable\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isimmutable\",\n    \"category\": \"Function\",\n    \"text\": \"isimmutable(v)\\n\\nReturn true iff value v is immutable.  See Mutable Composite Types for a discussion of immutability. Note that this function works on values, so if you give it a type, it will tell you that a value of DataType is mutable.\\n\\njulia> isimmutable(1)\\ntrue\\n\\njulia> isimmutable([1,2])\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isbits\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isbits\",\n    \"category\": \"Function\",\n    \"text\": \"isbits(T)\\n\\nReturn true if T is a \\\"plain data\\\" type, meaning it is immutable and contains no references to other values. Typical examples are numeric types such as UInt8, Float64, and Complex{Float64}.\\n\\njulia> isbits(Complex{Float64})\\ntrue\\n\\njulia> isbits(Complex)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isleaftype\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isleaftype\",\n    \"category\": \"Function\",\n    \"text\": \"isleaftype(T)\\n\\nDetermine whether T's only subtypes are itself and Union{}. This means T is a concrete type that can have instances.\\n\\njulia> isleaftype(Complex)\\nfalse\\n\\njulia> isleaftype(Complex{Float32})\\ntrue\\n\\njulia> isleaftype(Vector{Complex})\\ntrue\\n\\njulia> isleaftype(Vector{Complex{Float32}})\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.typejoin\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.typejoin\",\n    \"category\": \"Function\",\n    \"text\": \"typejoin(T, S)\\n\\nCompute a type that contains both T and S.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.typeintersect\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.typeintersect\",\n    \"category\": \"Function\",\n    \"text\": \"typeintersect(T, S)\\n\\nCompute a type that contains the intersection of T and S. Usually this will be the smallest such type or one close to it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Val\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Val\",\n    \"category\": \"Type\",\n    \"text\": \"Val{c}\\n\\nCreate a \\\"value type\\\" out of c, which must be an isbits value. The intent of this construct is to be able to dispatch on constants, e.g., f(Val{false}) allows you to dispatch directly (at compile-time) to an implementation f(::Type{Val{false}}), without having to test the boolean value at runtime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Enums.@enum\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Enums.@enum\",\n    \"category\": \"Macro\",\n    \"text\": \"@enum EnumName[::BaseType] value1[=x] value2[=y]\\n\\nCreate an Enum{BaseType} subtype with name EnumName and enum member values of value1 and value2 with optional assigned values of x and y, respectively. EnumName can be used just like other types and enum member values as regular values, such as\\n\\njulia> @enum Fruit apple=1 orange=2 kiwi=3\\n\\njulia> f(x::Fruit) = \\\"I'm a Fruit with value: $(Int(x))\\\"\\nf (generic function with 1 method)\\n\\njulia> f(apple)\\n\\\"I'm a Fruit with value: 1\\\"\\n\\nBaseType, which defaults to Int32, must be a primitive subtype of Integer. Member values can be converted between the enum type and BaseType. read and write perform these conversions automatically.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.instances\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.instances\",\n    \"category\": \"Function\",\n    \"text\": \"instances(T::Type)\\n\\nReturn a collection of all instances of the given type, if applicable. Mostly used for enumerated types (see @enum).\\n\\njulia> @enum Color red blue green\\n\\njulia> instances(Color)\\n(red::Color = 0, blue::Color = 1, green::Color = 2)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Types-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Types\",\n    \"category\": \"section\",\n    \"text\": \"Base.supertype\\nCore.issubtype\\nBase.:(<:)\\nBase.:(>:)\\nBase.subtypes\\nBase.typemin\\nBase.typemax\\nBase.realmin\\nBase.realmax\\nBase.maxintfloat\\nBase.sizeof(::Type)\\nBase.eps(::Type{<:AbstractFloat})\\nBase.eps(::AbstractFloat)\\nBase.promote_type\\nBase.promote_rule\\nCore.getfield\\nCore.setfield!\\nBase.fieldoffset\\nCore.fieldtype\\nBase.isimmutable\\nBase.isbits\\nBase.isleaftype\\nBase.typejoin\\nBase.typeintersect\\nBase.Val\\nBase.Enums.@enum\\nBase.instances\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.Function\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.Function\",\n    \"category\": \"Type\",\n    \"text\": \"Function\\n\\nAbstract type of all functions.\\n\\njulia> isa(+, Function)\\ntrue\\n\\njulia> typeof(sin)\\nBase.#sin\\n\\njulia> ans <: Function\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.method_exists\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.method_exists\",\n    \"category\": \"Function\",\n    \"text\": \"method_exists(f, Tuple type, world=typemax(UInt)) -> Bool\\n\\nDetermine whether the given generic function has a method matching the given Tuple of argument types with the upper bound of world age given by world.\\n\\njulia> method_exists(length, Tuple{Array})\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.applicable\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.applicable\",\n    \"category\": \"Function\",\n    \"text\": \"applicable(f, args...) -> Bool\\n\\nDetermine whether the given generic function has a method applicable to the given arguments.\\n\\nExamples\\n\\njulia> function f(x, y)\\n           x + y\\n       end;\\n\\njulia> applicable(f, 1)\\nfalse\\n\\njulia> applicable(f, 1, 2)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.invoke\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.invoke\",\n    \"category\": \"Function\",\n    \"text\": \"invoke(f, types <: Tuple, args...)\\n\\nInvoke a method for the given generic function matching the specified types, on the specified arguments. The arguments must be compatible with the specified types. This allows invoking a method other than the most specific matching method, which is useful when the behavior of a more general definition is explicitly needed (often as part of the implementation of a more specific method of the same function).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.invokelatest\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.invokelatest\",\n    \"category\": \"Function\",\n    \"text\": \"invokelatest(f, args...)\\n\\nCalls f(args...), but guarantees that the most recent method of f will be executed.   This is useful in specialized circumstances, e.g. long-running event loops or callback functions that may call obsolete versions of a function f. (The drawback is that invokelatest is somewhat slower than calling f directly, and the type of the result cannot be inferred by the compiler.)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.:|>\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.:|>\",\n    \"category\": \"Function\",\n    \"text\": \"|>(x, f)\\n\\nApplies a function to the preceding argument. This allows for easy function chaining.\\n\\njulia> [1:5;] |> x->x.^2 |> sum |> inv\\n0.01818181818181818\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.:\u2218\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.:\u2218\",\n    \"category\": \"Function\",\n    \"text\": \"f \u2218 g\\n\\nCompose functions: i.e. (f \u2218 g)(args...) means f(g(args...)). The \u2218 symbol can be entered in the Julia REPL (and most editors, appropriately configured) by typing \\\\circ<tab>. Example:\\n\\njulia> map(uppercase\u2218hex, 250:255)\\n6-element Array{String,1}:\\n \\\"FA\\\"\\n \\\"FB\\\"\\n \\\"FC\\\"\\n \\\"FD\\\"\\n \\\"FE\\\"\\n \\\"FF\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Generic-Functions-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Generic Functions\",\n    \"category\": \"section\",\n    \"text\": \"Core.Function\\nBase.method_exists\\nCore.applicable\\nCore.invoke\\nBase.invokelatest\\nBase.:(|>)\\nBase.:(\u2218)\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.eval\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.eval\",\n    \"category\": \"Function\",\n    \"text\": \"eval([m::Module], expr::Expr)\\n\\nEvaluate an expression in the given module and return the result. Every Module (except those defined with baremodule) has its own 1-argument definition of eval, which evaluates expressions in that module.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@eval\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@eval\",\n    \"category\": \"Macro\",\n    \"text\": \"@eval [mod,] ex\\n\\nEvaluate an expression with values interpolated into it using eval. If two arguments are provided, the first is the module to evaluate in.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.evalfile\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.evalfile\",\n    \"category\": \"Function\",\n    \"text\": \"evalfile(path::AbstractString, args::Vector{String}=String[])\\n\\nLoad the file using include, evaluate all expressions, and return the value of the last one.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.esc\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.esc\",\n    \"category\": \"Function\",\n    \"text\": \"esc(e::ANY)\\n\\nOnly valid in the context of an Expr returned from a macro. Prevents the macro hygiene pass from turning embedded variables into gensym variables. See the Macros section of the Metaprogramming chapter of the manual for more details and examples.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@inbounds\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@inbounds\",\n    \"category\": \"Macro\",\n    \"text\": \"@inbounds(blk)\\n\\nEliminates array bounds checking within expressions.\\n\\nIn the example below the bound check of array A is skipped to improve performance.\\n\\nfunction sum(A::AbstractArray)\\n    r = zero(eltype(A))\\n    for i = 1:length(A)\\n        @inbounds r += A[i]\\n    end\\n    return r\\nend\\n\\nwarning: Warning\\nUsing @inbounds may return incorrect results/crashes/corruption for out-of-bounds indices. The user is responsible for checking it manually.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@inline\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@inline\",\n    \"category\": \"Macro\",\n    \"text\": \"@inline\\n\\nGive a hint to the compiler that this function is worth inlining.\\n\\nSmall functions typically do not need the @inline annotation, as the compiler does it automatically. By using @inline on bigger functions, an extra nudge can be given to the compiler to inline it. This is shown in the following example:\\n\\n@inline function bigfunction(x)\\n    #=\\n        Function Definition\\n    =#\\nend\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@noinline\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@noinline\",\n    \"category\": \"Macro\",\n    \"text\": \"@noinline\\n\\nPrevents the compiler from inlining a function.\\n\\nSmall functions are typically inlined automatically. By using @noinline on small functions, auto-inlining can be prevented. This is shown in the following example:\\n\\n@noinline function smallfunction(x)\\n    #=\\n        Function Definition\\n    =#\\nend\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.gensym\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.gensym\",\n    \"category\": \"Function\",\n    \"text\": \"gensym([tag])\\n\\nGenerates a symbol which will not conflict with other variable names.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@gensym\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@gensym\",\n    \"category\": \"Macro\",\n    \"text\": \"@gensym\\n\\nGenerates a gensym symbol for a variable. For example, @gensym x y is transformed into x = gensym(\\\"x\\\"); y = gensym(\\\"y\\\").\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@polly\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@polly\",\n    \"category\": \"Macro\",\n    \"text\": \"@polly\\n\\nTells the compiler to apply the polyhedral optimizer Polly to a function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.parse-Tuple{Any,Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.parse\",\n    \"category\": \"Method\",\n    \"text\": \"parse(str, start; greedy=true, raise=true)\\n\\nParse the expression string and return an expression (which could later be passed to eval for execution). start is the index of the first character to start parsing. If greedy is true (default), parse will try to consume as much input as it can; otherwise, it will stop as soon as it has parsed a valid expression. Incomplete but otherwise syntactically valid expressions will return Expr(:incomplete, \\\"(error message)\\\"). If raise is true (default), syntax errors other than incomplete expressions will raise an error. If raise is false, parse will return an expression that will raise an error upon evaluation.\\n\\njulia> parse(\\\"x = 3, y = 5\\\", 7)\\n(:(y = 5), 13)\\n\\njulia> parse(\\\"x = 3, y = 5\\\", 5)\\n(:((3, y) = 5), 13)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.parse-Tuple{Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.parse\",\n    \"category\": \"Method\",\n    \"text\": \"parse(str; raise=true)\\n\\nParse the expression string greedily, returning a single expression. An error is thrown if there are additional characters after the first expression. If raise is true (default), syntax errors will raise an error; otherwise, parse will return an expression that will raise an error upon evaluation.\\n\\njulia> parse(\\\"x = 3\\\")\\n:(x = 3)\\n\\njulia> parse(\\\"x = \\\")\\n:($(Expr(:incomplete, \\\"incomplete: premature end of input\\\")))\\n\\njulia> parse(\\\"1.0.2\\\")\\nERROR: ParseError(\\\"invalid numeric constant \\\\\\\"1.0.\\\\\\\"\\\")\\nStacktrace:\\n[...]\\n\\njulia> parse(\\\"1.0.2\\\"; raise = false)\\n:($(Expr(:error, \\\"invalid numeric constant \\\\\\\"1.0.\\\\\\\"\\\")))\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Syntax-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Syntax\",\n    \"category\": \"section\",\n    \"text\": \"Core.eval\\nBase.@eval\\nBase.evalfile\\nBase.esc\\nBase.@inbounds\\nBase.@inline\\nBase.@noinline\\nBase.gensym\\nBase.@gensym\\nBase.@polly\\nBase.parse(::Any, ::Any)\\nBase.parse(::Any)\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Nullable\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Nullable\",\n    \"category\": \"Type\",\n    \"text\": \"Nullable(x, hasvalue::Bool=true)\\n\\nWrap value x in an object of type Nullable, which indicates whether a value is present. Nullable(x) yields a non-empty wrapper and Nullable{T}() yields an empty instance of a wrapper that might contain a value of type T.\\n\\nNullable(x, false) yields Nullable{typeof(x)}() with x stored in the result's value field.\\n\\nExamples\\n\\njulia> Nullable(1)\\nNullable{Int64}(1)\\n\\njulia> Nullable{Int64}()\\nNullable{Int64}()\\n\\njulia> Nullable(1, false)\\nNullable{Int64}()\\n\\njulia> dump(Nullable(1, false))\\nNullable{Int64}\\n  hasvalue: Bool false\\n  value: Int64 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.get-Tuple{Nullable,Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.get\",\n    \"category\": \"Method\",\n    \"text\": \"get(x::Nullable[, y])\\n\\nAttempt to access the value of x. Returns the value if it is present; otherwise, returns y if provided, or throws a NullException if not.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isnull\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isnull\",\n    \"category\": \"Function\",\n    \"text\": \"isnull(x)\\n\\nReturn whether or not x is null for Nullable x; return false for all other x.\\n\\nExamples\\n\\njulia> x = Nullable(1, false)\\nNullable{Int64}()\\n\\njulia> isnull(x)\\ntrue\\n\\njulia> x = Nullable(1, true)\\nNullable{Int64}(1)\\n\\njulia> isnull(x)\\nfalse\\n\\njulia> x = 1\\n1\\n\\njulia> isnull(x)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.unsafe_get\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.unsafe_get\",\n    \"category\": \"Function\",\n    \"text\": \"unsafe_get(x)\\n\\nReturn the value of x for Nullable x; return x for all other x.\\n\\nThis method does not check whether or not x is null before attempting to access the value of x for x::Nullable (hence \\\"unsafe\\\").\\n\\njulia> x = Nullable(1)\\nNullable{Int64}(1)\\n\\njulia> unsafe_get(x)\\n1\\n\\njulia> x = Nullable{String}()\\nNullable{String}()\\n\\njulia> unsafe_get(x)\\nERROR: UndefRefError: access to undefined reference\\nStacktrace:\\n [1] unsafe_get(::Nullable{String}) at ./nullable.jl:125\\n\\njulia> x = 1\\n1\\n\\njulia> unsafe_get(x)\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Nullables-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Nullables\",\n    \"category\": \"section\",\n    \"text\": \"Base.Nullable\\nBase.get(::Nullable, ::Any)\\nBase.isnull\\nBase.unsafe_get\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.run\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.run\",\n    \"category\": \"Function\",\n    \"text\": \"run(command, args...)\\n\\nRun a command object, constructed with backticks. Throws an error if anything goes wrong, including the process exiting with a non-zero status.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.spawn\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.spawn\",\n    \"category\": \"Function\",\n    \"text\": \"spawn(command)\\n\\nRun a command object asynchronously, returning the resulting Process object.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.DevNull\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.DevNull\",\n    \"category\": \"Constant\",\n    \"text\": \"DevNull\\n\\nUsed in a stream redirect to discard all data written to it. Essentially equivalent to /dev/null on Unix or NUL on Windows. Usage:\\n\\nrun(pipeline(`cat test.txt`, DevNull))\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.success\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.success\",\n    \"category\": \"Function\",\n    \"text\": \"success(command)\\n\\nRun a command object, constructed with backticks, and tell whether it was successful (exited with a code of 0). An exception is raised if the process cannot be started.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.process_running\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.process_running\",\n    \"category\": \"Function\",\n    \"text\": \"process_running(p::Process)\\n\\nDetermine whether a process is currently running.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.process_exited\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.process_exited\",\n    \"category\": \"Function\",\n    \"text\": \"process_exited(p::Process)\\n\\nDetermine whether a process has exited.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.kill-Tuple{Base.Process,Integer}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.kill\",\n    \"category\": \"Method\",\n    \"text\": \"kill(p::Process, signum=SIGTERM)\\n\\nSend a signal to a process. The default is to terminate the process.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Sys.set_process_title\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Sys.set_process_title\",\n    \"category\": \"Function\",\n    \"text\": \"Sys.set_process_title(title::AbstractString)\\n\\nSet the process title. No-op on some operating systems.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Sys.get_process_title\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Sys.get_process_title\",\n    \"category\": \"Function\",\n    \"text\": \"Sys.get_process_title()\\n\\nGet the process title. On some systems, will always return an empty string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.readandwrite\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.readandwrite\",\n    \"category\": \"Function\",\n    \"text\": \"readandwrite(command)\\n\\nStarts running a command asynchronously, and returns a tuple (stdout,stdin,process) of the output stream and input stream of the process, and the process object itself.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.ignorestatus\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.ignorestatus\",\n    \"category\": \"Function\",\n    \"text\": \"ignorestatus(command)\\n\\nMark a command object so that running it will not throw an error if the result code is non-zero.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.detach\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.detach\",\n    \"category\": \"Function\",\n    \"text\": \"detach(command)\\n\\nMark a command object so that it will be run in a new process group, allowing it to outlive the julia process, and not have Ctrl-C interrupts passed to it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Cmd\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Cmd\",\n    \"category\": \"Type\",\n    \"text\": \"Cmd(cmd::Cmd; ignorestatus, detach, windows_verbatim, windows_hide, env, dir)\\n\\nConstruct a new Cmd object, representing an external program and arguments, from cmd, while changing the settings of the optional keyword arguments:\\n\\nignorestatus::Bool: If true (defaults to false), then the Cmd will not throw an error if the return code is nonzero.\\ndetach::Bool: If true (defaults to false), then the Cmd will be run in a new process group, allowing it to outlive the julia process and not have Ctrl-C passed to it.\\nwindows_verbatim::Bool: If true (defaults to false), then on Windows the Cmd will send a command-line string to the process with no quoting or escaping of arguments, even arguments containing spaces. (On Windows, arguments are sent to a program as a single \\\"command-line\\\" string, and programs are responsible for parsing it into arguments. By default, empty arguments and arguments with spaces or tabs are quoted with double quotes \\\" in the command line, and \\\\ or \\\" are preceded by backslashes. windows_verbatim=true is useful for launching programs that parse their command line in nonstandard ways.) Has no effect on non-Windows systems.\\nwindows_hide::Bool: If true (defaults to false), then on Windows no new console window is displayed when the Cmd is executed. This has no effect if a console is already open or on non-Windows systems.\\nenv: Set environment variables to use when running the Cmd. env is either a dictionary mapping strings to strings, an array of strings of the form \\\"var=val\\\", an array or tuple of \\\"var\\\"=>val pairs, or nothing. In order to modify (rather than replace) the existing environment, create env by copy(ENV) and then set env[\\\"var\\\"]=val as desired.\\ndir::AbstractString: Specify a working directory for the command (instead of the current directory).\\n\\nFor any keywords that are not specified, the current settings from cmd are used. Normally, to create a Cmd object in the first place, one uses backticks, e.g.\\n\\nCmd(`echo \\\"Hello world\\\"`, ignorestatus=true, detach=false)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.setenv\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.setenv\",\n    \"category\": \"Function\",\n    \"text\": \"setenv(command::Cmd, env; dir=\\\"\\\")\\n\\nSet environment variables to use when running the given command. env is either a dictionary mapping strings to strings, an array of strings of the form \\\"var=val\\\", or zero or more \\\"var\\\"=>val pair arguments. In order to modify (rather than replace) the existing environment, create env by copy(ENV) and then setting env[\\\"var\\\"]=val as desired, or use withenv.\\n\\nThe dir keyword argument can be used to specify a working directory for the command.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.withenv\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.withenv\",\n    \"category\": \"Function\",\n    \"text\": \"withenv(f::Function, kv::Pair...)\\n\\nExecute f() in an environment that is temporarily modified (not replaced as in setenv) by zero or more \\\"var\\\"=>val arguments kv. withenv is generally used via the withenv(kv...) do ... end syntax. A value of nothing can be used to temporarily unset an environment variable (if it is set). When withenv returns, the original environment has been restored.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.pipeline-Tuple{Any,Any,Any,Vararg{Any,N} where N}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.pipeline\",\n    \"category\": \"Method\",\n    \"text\": \"pipeline(from, to, ...)\\n\\nCreate a pipeline from a data source to a destination. The source and destination can be commands, I/O streams, strings, or results of other pipeline calls. At least one argument must be a command. Strings refer to filenames. When called with more than two arguments, they are chained together from left to right. For example pipeline(a,b,c) is equivalent to pipeline(pipeline(a,b),c). This provides a more concise way to specify multi-stage pipelines.\\n\\nExamples:\\n\\nrun(pipeline(`ls`, `grep xyz`))\\nrun(pipeline(`ls`, \\\"out.txt\\\"))\\nrun(pipeline(\\\"out.txt\\\", `grep xyz`))\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.pipeline-Tuple{Base.AbstractCmd}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.pipeline\",\n    \"category\": \"Method\",\n    \"text\": \"pipeline(command; stdin, stdout, stderr, append=false)\\n\\nRedirect I/O to or from the given command. Keyword arguments specify which of the command's streams should be redirected. append controls whether file output appends to the file. This is a more general version of the 2-argument pipeline function. pipeline(from, to) is equivalent to pipeline(from, stdout=to) when from is a command, and to pipeline(to, stdin=from) when from is another kind of data source.\\n\\nExamples:\\n\\nrun(pipeline(`dothings`, stdout=\\\"out.txt\\\", stderr=\\\"errs.txt\\\"))\\nrun(pipeline(`update`, stdout=\\\"log.txt\\\", append=true))\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Libc.gethostname\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Libc.gethostname\",\n    \"category\": \"Function\",\n    \"text\": \"gethostname() -> AbstractString\\n\\nGet the local machine's host name.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.getipaddr\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.getipaddr\",\n    \"category\": \"Function\",\n    \"text\": \"getipaddr() -> IPAddr\\n\\nGet the IP address of the local machine.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Libc.getpid\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Libc.getpid\",\n    \"category\": \"Function\",\n    \"text\": \"getpid() -> Int32\\n\\nGet Julia's process ID.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Libc.time-Tuple{}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Libc.time\",\n    \"category\": \"Method\",\n    \"text\": \"time()\\n\\nGet the system time in seconds since the epoch, with fairly high (typically, microsecond) resolution.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.time_ns\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.time_ns\",\n    \"category\": \"Function\",\n    \"text\": \"time_ns()\\n\\nGet the time in nanoseconds. The time corresponding to 0 is undefined, and wraps every 5.8 years.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.tic\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.tic\",\n    \"category\": \"Function\",\n    \"text\": \"tic()\\n\\nSet a timer to be read by the next call to toc or toq. The macro call @time expr can also be used to time evaluation.\\n\\njulia> tic()\\n0x0000c45bc7abac95\\n\\njulia> sleep(0.3)\\n\\njulia> toc()\\nelapsed time: 0.302745944 seconds\\n0.302745944\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.toc\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.toc\",\n    \"category\": \"Function\",\n    \"text\": \"toc()\\n\\nPrint and return the time elapsed since the last tic. The macro call @time expr can also be used to time evaluation.\\n\\njulia> tic()\\n0x0000c45bc7abac95\\n\\njulia> sleep(0.3)\\n\\njulia> toc()\\nelapsed time: 0.302745944 seconds\\n0.302745944\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.toq\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.toq\",\n    \"category\": \"Function\",\n    \"text\": \"toq()\\n\\nReturn, but do not print, the time elapsed since the last tic. The macro calls @timed expr and @elapsed expr also return evaluation time.\\n\\njulia> tic()\\n0x0000c46477a9675d\\n\\njulia> sleep(0.3)\\n\\njulia> toq()\\n0.302251004\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@time\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@time\",\n    \"category\": \"Macro\",\n    \"text\": \"@time\\n\\nA macro to execute an expression, printing the time it took to execute, the number of allocations, and the total number of bytes its execution caused to be allocated, before returning the value of the expression.\\n\\nSee also @timev, @timed, @elapsed, and @allocated.\\n\\njulia> @time rand(10^6);\\n  0.001525 seconds (7 allocations: 7.630 MiB)\\n\\njulia> @time begin\\n           sleep(0.3)\\n           1+1\\n       end\\n  0.301395 seconds (8 allocations: 336 bytes)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@timev\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@timev\",\n    \"category\": \"Macro\",\n    \"text\": \"@timev\\n\\nThis is a verbose version of the @time macro. It first prints the same information as @time, then any non-zero memory allocation counters, and then returns the value of the expression.\\n\\nSee also @time, @timed, @elapsed, and @allocated.\\n\\njulia> @timev rand(10^6);\\n  0.001006 seconds (7 allocations: 7.630 MiB)\\nelapsed time (ns): 1005567\\nbytes allocated:   8000256\\npool allocs:       6\\nmalloc() calls:    1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@timed\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@timed\",\n    \"category\": \"Macro\",\n    \"text\": \"@timed\\n\\nA macro to execute an expression, and return the value of the expression, elapsed time, total bytes allocated, garbage collection time, and an object with various memory allocation counters.\\n\\nSee also @time, @timev, @elapsed, and @allocated.\\n\\njulia> val, t, bytes, gctime, memallocs = @timed rand(10^6);\\n\\njulia> t\\n0.006634834\\n\\njulia> bytes\\n8000256\\n\\njulia> gctime\\n0.0055765\\n\\njulia> fieldnames(typeof(memallocs))\\n9-element Array{Symbol,1}:\\n :allocd\\n :malloc\\n :realloc\\n :poolalloc\\n :bigalloc\\n :freecall\\n :total_time\\n :pause\\n :full_sweep\\n\\njulia> memallocs.total_time\\n5576500\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@elapsed\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@elapsed\",\n    \"category\": \"Macro\",\n    \"text\": \"@elapsed\\n\\nA macro to evaluate an expression, discarding the resulting value, instead returning the number of seconds it took to execute as a floating-point number.\\n\\nSee also @time, @timev, @timed, and @allocated.\\n\\njulia> @elapsed sleep(0.3)\\n0.301391426\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@allocated\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@allocated\",\n    \"category\": \"Macro\",\n    \"text\": \"@allocated\\n\\nA macro to evaluate an expression, discarding the resulting value, instead returning the total number of bytes allocated during evaluation of the expression. Note: the expression is evaluated inside a local function, instead of the current context, in order to eliminate the effects of compilation, however, there still may be some allocations due to JIT compilation. This also makes the results inconsistent with the @time macros, which do not try to adjust for the effects of compilation.\\n\\nSee also @time, @timev, @timed, and @elapsed.\\n\\njulia> @allocated rand(10^6)\\n8000080\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.EnvHash\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.EnvHash\",\n    \"category\": \"Type\",\n    \"text\": \"EnvHash() -> EnvHash\\n\\nA singleton of this type provides a hash table interface to environment variables.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.ENV\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.ENV\",\n    \"category\": \"Constant\",\n    \"text\": \"ENV\\n\\nReference to the singleton EnvHash, providing a dictionary interface to system environment variables.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.is_unix\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.is_unix\",\n    \"category\": \"Function\",\n    \"text\": \"is_unix([os])\\n\\nPredicate for testing if the OS provides a Unix-like interface. See documentation in Handling Operating System Variation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.is_apple\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.is_apple\",\n    \"category\": \"Function\",\n    \"text\": \"is_apple([os])\\n\\nPredicate for testing if the OS is a derivative of Apple Macintosh OS X or Darwin. See documentation in Handling Operating System Variation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.is_linux\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.is_linux\",\n    \"category\": \"Function\",\n    \"text\": \"is_linux([os])\\n\\nPredicate for testing if the OS is a derivative of Linux. See documentation in Handling Operating System Variation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.is_bsd\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.is_bsd\",\n    \"category\": \"Function\",\n    \"text\": \"is_bsd([os])\\n\\nPredicate for testing if the OS is a derivative of BSD. See documentation in Handling Operating System Variation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.is_windows\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.is_windows\",\n    \"category\": \"Function\",\n    \"text\": \"is_windows([os])\\n\\nPredicate for testing if the OS is a derivative of Microsoft Windows NT. See documentation in Handling Operating System Variation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Sys.windows_version\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Sys.windows_version\",\n    \"category\": \"Function\",\n    \"text\": \"Sys.windows_version()\\n\\nReturns the version number for the Windows NT Kernel as a (major, minor) pair, or (0, 0) if this is not running on Windows.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@static\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@static\",\n    \"category\": \"Macro\",\n    \"text\": \"@static\\n\\nPartially evaluates an expression at parse time.\\n\\nFor example, @static is_windows() ? foo : bar will evaluate is_windows() and insert either foo or bar into the expression. This is useful in cases where a construct would be invalid on other platforms, such as a ccall to a non-existent function. @static if is_apple() foo end and @static foo <&&,||> bar are also valid syntax.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#System-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"System\",\n    \"category\": \"section\",\n    \"text\": \"Base.run\\nBase.spawn\\nBase.DevNull\\nBase.success\\nBase.process_running\\nBase.process_exited\\nBase.kill(::Base.Process, ::Integer)\\nBase.Sys.set_process_title\\nBase.Sys.get_process_title\\nBase.readandwrite\\nBase.ignorestatus\\nBase.detach\\nBase.Cmd\\nBase.setenv\\nBase.withenv\\nBase.pipeline(::Any, ::Any, ::Any, ::Any...)\\nBase.pipeline(::Base.AbstractCmd)\\nBase.Libc.gethostname\\nBase.getipaddr\\nBase.Libc.getpid\\nBase.Libc.time()\\nBase.time_ns\\nBase.tic\\nBase.toc\\nBase.toq\\nBase.@time\\nBase.@timev\\nBase.@timed\\nBase.@elapsed\\nBase.@allocated\\nBase.EnvHash\\nBase.ENV\\nBase.is_unix\\nBase.is_apple\\nBase.is_linux\\nBase.is_bsd\\nBase.is_windows\\nBase.Sys.windows_version\\nBase.@static\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.error\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.error\",\n    \"category\": \"Function\",\n    \"text\": \"error(message::AbstractString)\\n\\nRaise an ErrorException with the given message.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.throw\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.throw\",\n    \"category\": \"Function\",\n    \"text\": \"throw(e)\\n\\nThrow an object as an exception.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.rethrow\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.rethrow\",\n    \"category\": \"Function\",\n    \"text\": \"rethrow([e])\\n\\nThrow an object without changing the current exception backtrace. The default argument is the current exception (if called within a catch block).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.backtrace\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.backtrace\",\n    \"category\": \"Function\",\n    \"text\": \"backtrace()\\n\\nGet a backtrace object for the current program point.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.catch_backtrace\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.catch_backtrace\",\n    \"category\": \"Function\",\n    \"text\": \"catch_backtrace()\\n\\nGet the backtrace of the current exception, for use within catch blocks.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.assert\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.assert\",\n    \"category\": \"Function\",\n    \"text\": \"assert(cond)\\n\\nThrow an AssertionError if cond is false. Also available as the macro @assert expr.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@assert\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@assert\",\n    \"category\": \"Macro\",\n    \"text\": \"@assert cond [text]\\n\\nThrow an AssertionError if cond is false. Preferred syntax for writing assertions. Message text is optionally displayed upon assertion failure.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.ArgumentError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.ArgumentError\",\n    \"category\": \"Type\",\n    \"text\": \"ArgumentError(msg)\\n\\nThe parameters to a function call do not match a valid signature. Argument msg is a descriptive error string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.AssertionError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.AssertionError\",\n    \"category\": \"Type\",\n    \"text\": \"AssertionError([msg])\\n\\nThe asserted condition did not evaluate to true. Optional argument msg is a descriptive error string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.BoundsError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.BoundsError\",\n    \"category\": \"Type\",\n    \"text\": \"BoundsError([a],[i])\\n\\nAn indexing operation into an array, a, tried to access an out-of-bounds element, i.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.DimensionMismatch\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.DimensionMismatch\",\n    \"category\": \"Type\",\n    \"text\": \"DimensionMismatch([msg])\\n\\nThe objects called do not have matching dimensionality. Optional argument msg is a descriptive error string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.DivideError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.DivideError\",\n    \"category\": \"Type\",\n    \"text\": \"DivideError()\\n\\nInteger division was attempted with a denominator value of 0.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.DomainError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.DomainError\",\n    \"category\": \"Type\",\n    \"text\": \"DomainError()\\n\\nThe arguments to a function or constructor are outside the valid domain.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.EOFError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.EOFError\",\n    \"category\": \"Type\",\n    \"text\": \"EOFError()\\n\\nNo more data was available to read from a file or stream.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.ErrorException\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.ErrorException\",\n    \"category\": \"Type\",\n    \"text\": \"ErrorException(msg)\\n\\nGeneric error type. The error message, in the .msg field, may provide more specific details.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.InexactError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.InexactError\",\n    \"category\": \"Type\",\n    \"text\": \"InexactError()\\n\\nType conversion cannot be done exactly.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.InterruptException\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.InterruptException\",\n    \"category\": \"Type\",\n    \"text\": \"InterruptException()\\n\\nThe process was stopped by a terminal interrupt (CTRL+C).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.KeyError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.KeyError\",\n    \"category\": \"Type\",\n    \"text\": \"KeyError(key)\\n\\nAn indexing operation into an Associative (Dict) or Set like object tried to access or delete a non-existent element.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.LoadError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.LoadError\",\n    \"category\": \"Type\",\n    \"text\": \"LoadError(file::AbstractString, line::Int, error)\\n\\nAn error occurred while includeing, requireing, or using a file. The error specifics should be available in the .error field.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.MethodError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.MethodError\",\n    \"category\": \"Type\",\n    \"text\": \"MethodError(f, args)\\n\\nA method with the required type signature does not exist in the given generic function. Alternatively, there is no unique most-specific method.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.NullException\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.NullException\",\n    \"category\": \"Type\",\n    \"text\": \"NullException()\\n\\nAn attempted access to a Nullable with no defined value.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.OutOfMemoryError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.OutOfMemoryError\",\n    \"category\": \"Type\",\n    \"text\": \"OutOfMemoryError()\\n\\nAn operation allocated too much memory for either the system or the garbage collector to handle properly.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.ReadOnlyMemoryError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.ReadOnlyMemoryError\",\n    \"category\": \"Type\",\n    \"text\": \"ReadOnlyMemoryError()\\n\\nAn operation tried to write to memory that is read-only.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.OverflowError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.OverflowError\",\n    \"category\": \"Type\",\n    \"text\": \"OverflowError()\\n\\nThe result of an expression is too large for the specified type and will cause a wraparound.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.ParseError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.ParseError\",\n    \"category\": \"Type\",\n    \"text\": \"ParseError(msg)\\n\\nThe expression passed to the parse function could not be interpreted as a valid Julia expression.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Distributed.ProcessExitedException\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Distributed.ProcessExitedException\",\n    \"category\": \"Type\",\n    \"text\": \"ProcessExitedException()\\n\\nAfter a client Julia process has exited, further attempts to reference the dead child will throw this exception.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.StackOverflowError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.StackOverflowError\",\n    \"category\": \"Type\",\n    \"text\": \"StackOverflowError()\\n\\nThe function call grew beyond the size of the call stack. This usually happens when a call recurses infinitely.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.SystemError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.SystemError\",\n    \"category\": \"Type\",\n    \"text\": \"SystemError(prefix::AbstractString, [errno::Int32])\\n\\nA system call failed with an error code (in the errno global variable).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.TypeError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.TypeError\",\n    \"category\": \"Type\",\n    \"text\": \"TypeError(func::Symbol, context::AbstractString, expected::Type, got)\\n\\nA type assertion failure, or calling an intrinsic function with an incorrect argument type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.UndefRefError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.UndefRefError\",\n    \"category\": \"Type\",\n    \"text\": \"UndefRefError()\\n\\nThe item or field is not defined for the given object.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.UndefVarError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.UndefVarError\",\n    \"category\": \"Type\",\n    \"text\": \"UndefVarError(var::Symbol)\\n\\nA symbol in the current scope is not defined.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.InitError\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.InitError\",\n    \"category\": \"Type\",\n    \"text\": \"InitError(mod::Symbol, error)\\n\\nAn error occurred when running a module's __init__ function. The actual error thrown is available in the .error field.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.retry\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.retry\",\n    \"category\": \"Function\",\n    \"text\": \"retry(f::Function;  delays=ExponentialBackOff(), check=nothing) -> Function\\n\\nReturns an anonymous function that calls function f.  If an exception arises, f is repeatedly called again, each time check returns true, after waiting the number of seconds specified in delays.  check should input delays's current state and the Exception.\\n\\nExamples\\n\\nretry(f, delays=fill(5.0, 3))\\nretry(f, delays=rand(5:10, 2))\\nretry(f, delays=Base.ExponentialBackOff(n=3, first_delay=5, max_delay=1000))\\nretry(http_get, check=(s,e)->e.status == \\\"503\\\")(url)\\nretry(read, check=(s,e)->isa(e, UVError))(io, 128; all=false)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.ExponentialBackOff\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.ExponentialBackOff\",\n    \"category\": \"Type\",\n    \"text\": \"ExponentialBackOff(; n=1, first_delay=0.05, max_delay=10.0, factor=5.0, jitter=0.1)\\n\\nA Float64 iterator of length n whose elements exponentially increase at a rate in the interval factor * (1 \u00b1 jitter).  The first element is first_delay and all elements are clamped to max_delay.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Errors-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Errors\",\n    \"category\": \"section\",\n    \"text\": \"Base.error\\nCore.throw\\nBase.rethrow\\nBase.backtrace\\nBase.catch_backtrace\\nBase.assert\\nBase.@assert\\nBase.ArgumentError\\nBase.AssertionError\\nCore.BoundsError\\nBase.DimensionMismatch\\nCore.DivideError\\nCore.DomainError\\nBase.EOFError\\nCore.ErrorException\\nCore.InexactError\\nCore.InterruptException\\nBase.KeyError\\nBase.LoadError\\nBase.MethodError\\nBase.NullException\\nCore.OutOfMemoryError\\nCore.ReadOnlyMemoryError\\nCore.OverflowError\\nBase.ParseError\\nBase.ProcessExitedException\\nCore.StackOverflowError\\nBase.SystemError\\nCore.TypeError\\nCore.UndefRefError\\nCore.UndefVarError\\nBase.InitError\\nBase.retry\\nBase.ExponentialBackOff\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Timer-Tuple{Function,Real,Real}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Timer\",\n    \"category\": \"Method\",\n    \"text\": \"Timer(callback::Function, delay, repeat=0)\\n\\nCreate a timer to call the given callback function. The callback is passed one argument, the timer object itself. The callback will be invoked after the specified initial delay, and then repeating with the given repeat interval. If repeat is 0, the timer is only triggered once. Times are in seconds. A timer is stopped and has its resources freed by calling close on it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.Timer\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.Timer\",\n    \"category\": \"Type\",\n    \"text\": \"Timer(delay, repeat=0)\\n\\nCreate a timer that wakes up tasks waiting for it (by calling wait on the timer object) at a specified interval.  Times are in seconds.  Waiting tasks are woken with an error when the timer is closed (by close. Use isopen to check whether a timer is still active.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.AsyncCondition\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.AsyncCondition\",\n    \"category\": \"Type\",\n    \"text\": \"AsyncCondition()\\n\\nCreate a async condition that wakes up tasks waiting for it (by calling wait on the object) when notified from C by a call to uv_async_send. Waiting tasks are woken with an error when the object is closed (by close. Use isopen to check whether it is still active.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.AsyncCondition-Tuple{Function}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.AsyncCondition\",\n    \"category\": \"Method\",\n    \"text\": \"AsyncCondition(callback::Function)\\n\\nCreate a async condition that calls the given callback function. The callback is passed one argument, the async condition object itself.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Events-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Events\",\n    \"category\": \"section\",\n    \"text\": \"Base.Timer(::Function, ::Real, ::Real)\\nBase.Timer\\nBase.AsyncCondition\\nBase.AsyncCondition(::Function)\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.module_name\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.module_name\",\n    \"category\": \"Function\",\n    \"text\": \"module_name(m::Module) -> Symbol\\n\\nGet the name of a Module as a Symbol.\\n\\njulia> module_name(Base.LinAlg)\\n:LinAlg\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.module_parent\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.module_parent\",\n    \"category\": \"Function\",\n    \"text\": \"module_parent(m::Module) -> Module\\n\\nGet a module's enclosing Module. Main is its own parent, as is LastMain after workspace().\\n\\njulia> module_parent(Main)\\nMain\\n\\njulia> module_parent(Base.LinAlg.BLAS)\\nBase.LinAlg\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.current_module\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.current_module\",\n    \"category\": \"Function\",\n    \"text\": \"current_module() -> Module\\n\\nGet the dynamically current Module, which is the Module code is currently being read from. In general, this is not the same as the module containing the call to this function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.fullname\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.fullname\",\n    \"category\": \"Function\",\n    \"text\": \"fullname(m::Module)\\n\\nGet the fully-qualified name of a module as a tuple of symbols. For example,\\n\\njulia> fullname(Base.Pkg)\\n(:Base, :Pkg)\\n\\njulia> fullname(Main)\\n()\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.names\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.names\",\n    \"category\": \"Function\",\n    \"text\": \"names(x::Module, all::Bool=false, imported::Bool=false)\\n\\nGet an array of the names exported by a Module, excluding deprecated names. If all is true, then the list also includes non-exported names defined in the module, deprecated names, and compiler-generated names. If imported is true, then names explicitly imported from other modules are also included.\\n\\nAs a special case, all names defined in Main are considered \\\"exported\\\", since it is not idiomatic to explicitly export names from Main.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Core.nfields\",\n    \"page\": \"Essentials\",\n    \"title\": \"Core.nfields\",\n    \"category\": \"Function\",\n    \"text\": \"nfields(x::DataType) -> Int\\n\\nGet the number of fields of a DataType.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.fieldnames\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.fieldnames\",\n    \"category\": \"Function\",\n    \"text\": \"fieldnames(x::DataType)\\n\\nGet an array of the fields of a DataType.\\n\\njulia> fieldnames(Hermitian)\\n2-element Array{Symbol,1}:\\n :data\\n :uplo\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.fieldname\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.fieldname\",\n    \"category\": \"Function\",\n    \"text\": \"fieldname(x::DataType, i::Integer)\\n\\nGet the name of field i of a DataType.\\n\\njulia> fieldname(SparseMatrixCSC,1)\\n:m\\n\\njulia> fieldname(SparseMatrixCSC,5)\\n:nzval\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.datatype_module\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.datatype_module\",\n    \"category\": \"Function\",\n    \"text\": \"Base.datatype_module(t::DataType) -> Module\\n\\nDetermine the module containing the definition of a DataType.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.datatype_name\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.datatype_name\",\n    \"category\": \"Function\",\n    \"text\": \"Base.datatype_name(t) -> Symbol\\n\\nGet the name of a (potentially UnionAll-wrapped) DataType (without its parent module) as a symbol.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.isconst\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.isconst\",\n    \"category\": \"Function\",\n    \"text\": \"isconst([m::Module], s::Symbol) -> Bool\\n\\nDetermine whether a global is declared const in a given Module. The default Module argument is current_module().\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.function_name\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.function_name\",\n    \"category\": \"Function\",\n    \"text\": \"Base.function_name(f::Function) -> Symbol\\n\\nGet the name of a generic Function as a symbol, or :anonymous.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.function_module-Tuple{Function}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.function_module\",\n    \"category\": \"Method\",\n    \"text\": \"Base.function_module(f::Function) -> Module\\n\\nDetermine the module containing the (first) definition of a generic function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.function_module-Tuple{Any,Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.function_module\",\n    \"category\": \"Method\",\n    \"text\": \"Base.function_module(f::Function, types) -> Module\\n\\nDetermine the module containing a given definition of a generic function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.functionloc-Tuple{Any,Any}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.functionloc\",\n    \"category\": \"Method\",\n    \"text\": \"functionloc(f::Function, types)\\n\\nReturns a tuple (filename,line) giving the location of a generic Function definition.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.functionloc-Tuple{Method}\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.functionloc\",\n    \"category\": \"Method\",\n    \"text\": \"functionloc(m::Method)\\n\\nReturns a tuple (filename,line) giving the location of a Method definition.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@functionloc\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@functionloc\",\n    \"category\": \"Macro\",\n    \"text\": \"@functionloc\\n\\nApplied to a function or macro call, it evaluates the arguments to the specified call, and returns a tuple (filename,line) giving the location for the method that would be called for those arguments. It calls out to the functionloc function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Reflection-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Reflection\",\n    \"category\": \"section\",\n    \"text\": \"Base.module_name\\nBase.module_parent\\nBase.current_module\\nBase.fullname\\nBase.names\\nCore.nfields\\nBase.fieldnames\\nBase.fieldname\\nBase.datatype_module\\nBase.datatype_name\\nBase.isconst\\nBase.function_name\\nBase.function_module(::Function)\\nBase.function_module(::Any, ::Any)\\nBase.functionloc(::Any, ::Any)\\nBase.functionloc(::Method)\\nBase.@functionloc\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.gc\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.gc\",\n    \"category\": \"Function\",\n    \"text\": \"gc()\\n\\nPerform garbage collection. This should not generally be used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.gc_enable\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.gc_enable\",\n    \"category\": \"Function\",\n    \"text\": \"gc_enable(on::Bool)\\n\\nControl whether garbage collection is enabled using a boolean argument (true for enabled, false for disabled). Returns previous GC state. Disabling garbage collection should be used only with extreme caution, as it can cause memory use to grow without bound.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.macroexpand\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.macroexpand\",\n    \"category\": \"Function\",\n    \"text\": \"macroexpand(x)\\n\\nTakes the expression x and returns an equivalent expression with all macros removed (expanded).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@macroexpand\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@macroexpand\",\n    \"category\": \"Macro\",\n    \"text\": \"@macroexpand\\n\\nReturn equivalent expression with all macros removed (expanded).\\n\\nThere is a subtle difference between @macroexpand and macroexpand in that expansion takes place in different contexts. This is best seen in the following example:\\n\\njulia> module M\\n           macro m()\\n               1\\n           end\\n           function f()\\n               (@macroexpand(@m), macroexpand(:(@m)))\\n           end\\n       end\\nM\\n\\njulia> macro m()\\n           2\\n       end\\n@m (macro with 1 method)\\n\\njulia> M.f()\\n(1, 2)\\n\\nWith @macroexpand the expression expands where @macroexpand appears in the code (module M in the example). With macroexpand the expression expands in the current module where the code was finally called (REPL in the example). Note that when calling macroexpand or @macroexpand directly from the REPL, both of these contexts coincide, hence there is no difference.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.expand\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.expand\",\n    \"category\": \"Function\",\n    \"text\": \"expand(x)\\n\\nTakes the expression x and returns an equivalent expression in lowered form. See also code_lowered.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.code_lowered\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.code_lowered\",\n    \"category\": \"Function\",\n    \"text\": \"code_lowered(f, types)\\n\\nReturns an array of lowered ASTs for the methods matching the given generic function and type signature.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@code_lowered\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@code_lowered\",\n    \"category\": \"Macro\",\n    \"text\": \"@code_lowered\\n\\nEvaluates the arguments to the function or macro call, determines their types, and calls code_lowered on the resulting expression.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.code_typed\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.code_typed\",\n    \"category\": \"Function\",\n    \"text\": \"code_typed(f, types; optimize=true)\\n\\nReturns an array of lowered and type-inferred ASTs for the methods matching the given generic function and type signature. The keyword argument optimize controls whether additional optimizations, such as inlining, are also applied.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@code_typed\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@code_typed\",\n    \"category\": \"Macro\",\n    \"text\": \"@code_typed\\n\\nEvaluates the arguments to the function or macro call, determines their types, and calls code_typed on the resulting expression.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.code_warntype\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.code_warntype\",\n    \"category\": \"Function\",\n    \"text\": \"code_warntype([io::IO], f, types)\\n\\nPrints lowered and type-inferred ASTs for the methods matching the given generic function and type signature to io which defaults to STDOUT. The ASTs are annotated in such a way as to cause \\\"non-leaf\\\" types to be emphasized (if color is available, displayed in red). This serves as a warning of potential type instability. Not all non-leaf types are particularly problematic for performance, so the results need to be used judiciously. See @code_warntype for more information.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@code_warntype\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@code_warntype\",\n    \"category\": \"Macro\",\n    \"text\": \"@code_warntype\\n\\nEvaluates the arguments to the function or macro call, determines their types, and calls code_warntype on the resulting expression.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.code_llvm\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.code_llvm\",\n    \"category\": \"Function\",\n    \"text\": \"code_llvm([io], f, types)\\n\\nPrints the LLVM bitcodes generated for running the method matching the given generic function and type signature to io which defaults to STDOUT.\\n\\nAll metadata and dbg.* calls are removed from the printed bitcode. Use code_llvm_raw for the full IR.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@code_llvm\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@code_llvm\",\n    \"category\": \"Macro\",\n    \"text\": \"@code_llvm\\n\\nEvaluates the arguments to the function or macro call, determines their types, and calls code_llvm on the resulting expression.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.code_native\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.code_native\",\n    \"category\": \"Function\",\n    \"text\": \"code_native([io], f, types, [syntax])\\n\\nPrints the native assembly instructions generated for running the method matching the given generic function and type signature to io which defaults to STDOUT. Switch assembly syntax using syntax symbol parameter set to :att for AT&T syntax or :intel for Intel syntax. Output is AT&T syntax by default.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.@code_native\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.@code_native\",\n    \"category\": \"Macro\",\n    \"text\": \"@code_native\\n\\nEvaluates the arguments to the function or macro call, determines their types, and calls code_native on the resulting expression.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Base.precompile\",\n    \"page\": \"Essentials\",\n    \"title\": \"Base.precompile\",\n    \"category\": \"Function\",\n    \"text\": \"precompile(f,args::Tuple{Vararg{Any}})\\n\\nCompile the given function f for the argument tuple (of types) args, but do not execute it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/base.html#Internals-1\",\n    \"page\": \"Essentials\",\n    \"title\": \"Internals\",\n    \"category\": \"section\",\n    \"text\": \"Base.gc\\nBase.gc_enable\\nBase.macroexpand\\nBase.@macroexpand\\nBase.expand\\nBase.code_lowered\\nBase.@code_lowered\\nBase.code_typed\\nBase.@code_typed\\nBase.code_warntype\\nBase.@code_warntype\\nBase.code_llvm\\nBase.@code_llvm\\nBase.code_native\\nBase.@code_native\\nBase.precompile\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Collections and Data Structures\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Collections-and-Data-Structures-1\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Collections and Data Structures\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.start\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.start\",\n    \"category\": \"Function\",\n    \"text\": \"start(iter) -> state\\n\\nGet initial iteration state for an iterable object.\\n\\nExamples\\n\\njulia> start(1:5)\\n1\\n\\njulia> start([1;2;3])\\n1\\n\\njulia> start([4;2;3])\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.done\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.done\",\n    \"category\": \"Function\",\n    \"text\": \"done(iter, state) -> Bool\\n\\nTest whether we are done iterating.\\n\\nExamples\\n\\njulia> done(1:5, 3)\\nfalse\\n\\njulia> done(1:5, 5)\\nfalse\\n\\njulia> done(1:5, 6)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.next\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.next\",\n    \"category\": \"Function\",\n    \"text\": \"next(iter, state) -> item, state\\n\\nFor a given iterable object and iteration state, return the current item and the next iteration state.\\n\\nExamples\\n\\njulia> next(1:5, 3)\\n(3, 4)\\n\\njulia> next(1:5, 5)\\n(5, 6)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.iteratorsize\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.iteratorsize\",\n    \"category\": \"Function\",\n    \"text\": \"iteratorsize(itertype::Type) -> IteratorSize\\n\\nGiven the type of an iterator, returns one of the following values:\\n\\nSizeUnknown() if the length (number of elements) cannot be determined in advance.\\nHasLength() if there is a fixed, finite length.\\nHasShape() if there is a known length plus a notion of multidimensional shape (as for an array).  In this case the size function is valid for the iterator.\\nIsInfinite() if the iterator yields values forever.\\n\\nThe default value (for iterators that do not define this function) is HasLength(). This means that most iterators are assumed to implement length.\\n\\nThis trait is generally used to select between algorithms that pre-allocate space for their result, and algorithms that resize their result incrementally.\\n\\njulia> Base.iteratorsize(1:5)\\nBase.HasShape()\\n\\njulia> Base.iteratorsize((2,3))\\nBase.HasLength()\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.iteratoreltype\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.iteratoreltype\",\n    \"category\": \"Function\",\n    \"text\": \"iteratoreltype(itertype::Type) -> IteratorEltype\\n\\nGiven the type of an iterator, returns one of the following values:\\n\\nEltypeUnknown() if the type of elements yielded by the iterator is not known in advance.\\nHasEltype() if the element type is known, and eltype would return a meaningful value.\\n\\nHasEltype() is the default, since iterators are assumed to implement eltype.\\n\\nThis trait is generally used to select between algorithms that pre-allocate a specific type of result, and algorithms that pick a result type based on the types of yielded values.\\n\\njulia> Base.iteratoreltype(1:5)\\nBase.HasEltype()\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#lib-collections-iteration-1\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Iteration\",\n    \"category\": \"section\",\n    \"text\": \"Sequential iteration is implemented by the methods start(), done(), and next(). The general for loop:for i = I   # or  \\\"for i in I\\\"\\n    # body\\nendis translated into:state = start(I)\\nwhile !done(I, state)\\n    (i, state) = next(I, state)\\n    # body\\nendThe state object may be anything, and should be chosen appropriately for each iterable type. See the manual section on the iteration interface for more details about defining a custom iterable type.Base.start\\nBase.done\\nBase.next\\nBase.iteratorsize\\nBase.iteratoreltypeFully implemented by:Range\\nUnitRange\\nTuple\\nNumber\\nAbstractArray\\nIntSet\\nObjectIdDict\\nDict\\nWeakKeyDict\\nEachLine\\nAbstractString\\nSet\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.isempty\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.isempty\",\n    \"category\": \"Function\",\n    \"text\": \"isempty(collection) -> Bool\\n\\nDetermine whether a collection is empty (has no elements).\\n\\nExamples\\n\\njulia> isempty([])\\ntrue\\n\\njulia> isempty([1 2 3])\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.empty!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.empty!\",\n    \"category\": \"Function\",\n    \"text\": \"empty!(collection) -> collection\\n\\nRemove all elements from a collection.\\n\\njulia> A = Dict(\\\"a\\\" => 1, \\\"b\\\" => 2)\\nDict{String,Int64} with 2 entries:\\n  \\\"b\\\" => 2\\n  \\\"a\\\" => 1\\n\\njulia> empty!(A);\\n\\njulia> A\\nDict{String,Int64} with 0 entries\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.length-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.length\",\n    \"category\": \"Method\",\n    \"text\": \"length(collection) -> Integer\\n\\nFor ordered, indexable collections, returns the maximum index i for which getindex(collection, i) is valid. For unordered collections, returns the number of elements.\\n\\nExamples\\n\\njulia> length(1:5)\\n5\\n\\njulia> length([1; 2; 3; 4])\\n4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.endof\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.endof\",\n    \"category\": \"Function\",\n    \"text\": \"endof(collection) -> Integer\\n\\nReturns the last index of the collection.\\n\\nExample\\n\\njulia> endof([1,2,4])\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#General-Collections-1\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"General Collections\",\n    \"category\": \"section\",\n    \"text\": \"Base.isempty\\nBase.empty!\\nBase.length(::Any)\\nBase.endofFully implemented by:Range\\nUnitRange\\nTuple\\nNumber\\nAbstractArray\\nIntSet\\nObjectIdDict\\nDict\\nWeakKeyDict\\nAbstractString\\nSet\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.in\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.in\",\n    \"category\": \"Function\",\n    \"text\": \"in(item, collection) -> Bool\\n\u2208(item,collection) -> Bool\\n\u220b(collection,item) -> Bool\\n\u2209(item,collection) -> Bool\\n\u220c(collection,item) -> Bool\\n\\nDetermine whether an item is in the given collection, in the sense that it is == to one of the values generated by iterating over the collection. Some collections need a slightly different definition; for example Sets check whether the item isequal to one of the elements. Dicts look for (key,value) pairs, and the key is compared using isequal. To test for the presence of a key in a dictionary, use haskey or k in keys(dict).\\n\\njulia> a = 1:3:20\\n1:3:19\\n\\njulia> 4 in a\\ntrue\\n\\njulia> 5 in a\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.eltype\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.eltype\",\n    \"category\": \"Function\",\n    \"text\": \"eltype(type)\\n\\nDetermine the type of the elements generated by iterating a collection of the given type. For associative collection types, this will be a Pair{KeyType,ValType}. The definition eltype(x) = eltype(typeof(x)) is provided for convenience so that instances can be passed instead of types. However the form that accepts a type argument should be defined for new types.\\n\\njulia> eltype(ones(Float32,2,2))\\nFloat32\\n\\njulia> eltype(ones(Int8,2,2))\\nInt8\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.indexin\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.indexin\",\n    \"category\": \"Function\",\n    \"text\": \"indexin(a, b)\\n\\nReturns a vector containing the highest index in b for each value in a that is a member of b . The output vector contains 0 wherever a is not a member of b.\\n\\nExamples\\n\\njulia> a = ['a', 'b', 'c', 'b', 'd', 'a'];\\n\\njulia> b = ['a','b','c'];\\n\\njulia> indexin(a,b)\\n6-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 2\\n 0\\n 1\\n\\njulia> indexin(b,a)\\n3-element Array{Int64,1}:\\n 6\\n 4\\n 3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.findin\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.findin\",\n    \"category\": \"Function\",\n    \"text\": \"findin(a, b)\\n\\nReturns the indices of elements in collection a that appear in collection b.\\n\\nExamples\\n\\njulia> a = collect(1:3:15)\\n5-element Array{Int64,1}:\\n  1\\n  4\\n  7\\n 10\\n 13\\n\\njulia> b = collect(2:4:10)\\n3-element Array{Int64,1}:\\n  2\\n  6\\n 10\\n\\njulia> findin(a,b) # 10 is the only common element\\n1-element Array{Int64,1}:\\n 4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.unique\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.unique\",\n    \"category\": \"Function\",\n    \"text\": \"unique(itr)\\n\\nReturns an array containing one value from itr for each unique value, as determined by isequal.\\n\\njulia> unique([1; 2; 2; 6])\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 6\\n\\n\\n\\nunique(f, itr)\\n\\nReturns an array containing one value from itr for each unique value produced by f applied to elements of itr.\\n\\njulia> unique(isodd, [1; 2; 2; 6])\\n2-element Array{Int64,1}:\\n 1\\n 2\\n\\n\\n\\nunique(itr[, dim])\\n\\nReturns an array containing only the unique elements of the iterable itr, in the order that the first of each set of equivalent elements originally appears. If dim is specified, returns unique regions of the array itr along dim.\\n\\njulia> A = map(isodd, reshape(collect(1:8), (2,2,2)))\\n2\u00d72\u00d72 Array{Bool,3}:\\n[:, :, 1] =\\n  true   true\\n false  false\\n\\n[:, :, 2] =\\n  true   true\\n false  false\\n\\njulia> unique(A)\\n2-element Array{Bool,1}:\\n  true\\n false\\n\\njulia> unique(A, 2)\\n2\u00d71\u00d72 Array{Bool,3}:\\n[:, :, 1] =\\n  true\\n false\\n\\n[:, :, 2] =\\n  true\\n false\\n\\njulia> unique(A, 3)\\n2\u00d72\u00d71 Array{Bool,3}:\\n[:, :, 1] =\\n  true   true\\n false  false\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.allunique\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.allunique\",\n    \"category\": \"Function\",\n    \"text\": \"allunique(itr) -> Bool\\n\\nReturn true if all values from itr are distinct when compared with isequal.\\n\\njulia> a = [1; 2; 3]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> allunique([a, a])\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.reduce-Tuple{Any,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.reduce\",\n    \"category\": \"Method\",\n    \"text\": \"reduce(op, v0, itr)\\n\\nReduce the given collection \u00ectr with the given binary operator op. v0 must be a neutral element for op that will be returned for empty collections. It is unspecified whether v0 is used for non-empty collections.\\n\\nReductions for certain commonly-used operators have special implementations which should be used instead: maximum(itr), minimum(itr), sum(itr), prod(itr), any(itr), all(itr).\\n\\nThe associativity of the reduction is implementation dependent. This means that you can't use non-associative operations like - because it is undefined whether reduce(-,[1,2,3]) should be evaluated as (1-2)-3 or 1-(2-3). Use foldl or foldr instead for guaranteed left or right associativity.\\n\\nSome operations accumulate error, and parallelism will also be easier if the reduction can be executed in groups. Future versions of Julia might change the algorithm. Note that the elements are not reordered if you use an ordered collection.\\n\\nExamples\\n\\njulia> reduce(*, 1, [2; 3; 4])\\n24\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.reduce-Tuple{Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.reduce\",\n    \"category\": \"Method\",\n    \"text\": \"reduce(op, itr)\\n\\nLike reduce(op, v0, itr). This cannot be used with empty collections, except for some special cases (e.g. when op is one of +, *, max, min, &, |) when Julia can determine the neutral element of op.\\n\\njulia> reduce(*, [2; 3; 4])\\n24\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.foldl-Tuple{Any,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.foldl\",\n    \"category\": \"Method\",\n    \"text\": \"foldl(op, v0, itr)\\n\\nLike reduce, but with guaranteed left associativity. v0 will be used exactly once.\\n\\njulia> foldl(-, 1, 2:5)\\n-13\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.foldl-Tuple{Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.foldl\",\n    \"category\": \"Method\",\n    \"text\": \"foldl(op, itr)\\n\\nLike foldl(op, v0, itr), but using the first element of itr as v0. In general, this cannot be used with empty collections (see reduce(op, itr)).\\n\\njulia> foldl(-, 2:5)\\n-10\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.foldr-Tuple{Any,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.foldr\",\n    \"category\": \"Method\",\n    \"text\": \"foldr(op, v0, itr)\\n\\nLike reduce, but with guaranteed right associativity. v0 will be used exactly once.\\n\\njulia> foldr(-, 1, 2:5)\\n-1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.foldr-Tuple{Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.foldr\",\n    \"category\": \"Method\",\n    \"text\": \"foldr(op, itr)\\n\\nLike foldr(op, v0, itr), but using the last element of itr as v0. In general, this cannot be used with empty collections (see reduce(op, itr)).\\n\\njulia> foldr(-, 2:5)\\n-2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.maximum-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.maximum\",\n    \"category\": \"Method\",\n    \"text\": \"maximum(itr)\\n\\nReturns the largest element in a collection.\\n\\njulia> maximum(-20.5:10)\\n9.5\\n\\njulia> maximum([1,2,3])\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.maximum-Tuple{Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.maximum\",\n    \"category\": \"Method\",\n    \"text\": \"maximum(A, dims)\\n\\nCompute the maximum value of an array over the given dimensions. See also the max(a,b) function to take the maximum of two or more arguments, which can be applied elementwise to arrays via max.(a,b).\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> maximum(A, 1)\\n1\u00d72 Array{Int64,2}:\\n 3  4\\n\\njulia> maximum(A, 2)\\n2\u00d71 Array{Int64,2}:\\n 2\\n 4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.maximum!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.maximum!\",\n    \"category\": \"Function\",\n    \"text\": \"maximum!(r, A)\\n\\nCompute the maximum value of A over the singleton dimensions of r, and write results to r.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> maximum!([1; 1], A)\\n2-element Array{Int64,1}:\\n 2\\n 4\\n\\njulia> maximum!([1 1], A)\\n1\u00d72 Array{Int64,2}:\\n 3  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.minimum-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.minimum\",\n    \"category\": \"Method\",\n    \"text\": \"minimum(itr)\\n\\nReturns the smallest element in a collection.\\n\\njulia> minimum(-20.5:10)\\n-20.5\\n\\njulia> minimum([1,2,3])\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.minimum-Tuple{Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.minimum\",\n    \"category\": \"Method\",\n    \"text\": \"minimum(A, dims)\\n\\nCompute the minimum value of an array over the given dimensions. See also the min(a,b) function to take the minimum of two or more arguments, which can be applied elementwise to arrays via min.(a,b).\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> minimum(A, 1)\\n1\u00d72 Array{Int64,2}:\\n 1  2\\n\\njulia> minimum(A, 2)\\n2\u00d71 Array{Int64,2}:\\n 1\\n 3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.minimum!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.minimum!\",\n    \"category\": \"Function\",\n    \"text\": \"minimum!(r, A)\\n\\nCompute the minimum value of A over the singleton dimensions of r, and write results to r.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> minimum!([1; 1], A)\\n2-element Array{Int64,1}:\\n 1\\n 3\\n\\njulia> minimum!([1 1], A)\\n1\u00d72 Array{Int64,2}:\\n 1  2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.extrema-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.extrema\",\n    \"category\": \"Method\",\n    \"text\": \"extrema(itr) -> Tuple\\n\\nCompute both the minimum and maximum element in a single pass, and return them as a 2-tuple.\\n\\njulia> extrema(2:10)\\n(2, 10)\\n\\njulia> extrema([9,pi,4.5])\\n(3.141592653589793, 9.0)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.extrema-Tuple{AbstractArray,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.extrema\",\n    \"category\": \"Method\",\n    \"text\": \"extrema(A, dims) -> Array{Tuple}\\n\\nCompute the minimum and maximum elements of an array over the given dimensions.\\n\\nExample\\n\\njulia> A = reshape(collect(1:2:16), (2,2,2))\\n2\u00d72\u00d72 Array{Int64,3}:\\n[:, :, 1] =\\n 1  5\\n 3  7\\n\\n[:, :, 2] =\\n  9  13\\n 11  15\\n\\njulia> extrema(A, (1,2))\\n1\u00d71\u00d72 Array{Tuple{Int64,Int64},3}:\\n[:, :, 1] =\\n (1, 7)\\n\\n[:, :, 2] =\\n (9, 15)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.indmax\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.indmax\",\n    \"category\": \"Function\",\n    \"text\": \"indmax(itr) -> Integer\\n\\nReturns the index of the maximum element in a collection. If there are multiple maximal elements, then the first one will be returned. NaN values are ignored, unless all elements are NaN.\\n\\nThe collection must not be empty.\\n\\nExamples\\n\\njulia> indmax([8,0.1,-9,pi])\\n1\\n\\njulia> indmax([1,7,7,6])\\n2\\n\\njulia> indmax([1,7,7,NaN])\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.indmin\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.indmin\",\n    \"category\": \"Function\",\n    \"text\": \"indmin(itr) -> Integer\\n\\nReturns the index of the minimum element in a collection. If there are multiple minimal elements, then the first one will be returned. NaN values are ignored, unless all elements are NaN.\\n\\nThe collection must not be empty.\\n\\nExamples\\n\\njulia> indmin([8,0.1,-9,pi])\\n3\\n\\njulia> indmin([7,1,1,6])\\n2\\n\\njulia> indmin([7,1,1,NaN])\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.findmax-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.findmax\",\n    \"category\": \"Method\",\n    \"text\": \"findmax(itr) -> (x, index)\\n\\nReturns the maximum element of the collection itr and its index. If there are multiple maximal elements, then the first one will be returned. NaN values are ignored, unless all elements are NaN.\\n\\nThe collection must not be empty.\\n\\nExamples\\n\\njulia> findmax([8,0.1,-9,pi])\\n(8.0, 1)\\n\\njulia> findmax([1,7,7,6])\\n(7, 2)\\n\\njulia> findmax([1,7,7,NaN])\\n(7.0, 2)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.findmax-Tuple{AbstractArray,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.findmax\",\n    \"category\": \"Method\",\n    \"text\": \"findmax(A, region) -> (maxval, index)\\n\\nFor an array input, returns the value and index of the maximum over the given region.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> findmax(A,1)\\n([3 4], [2 4])\\n\\njulia> findmax(A,2)\\n([2; 4], [3; 4])\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.findmin-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.findmin\",\n    \"category\": \"Method\",\n    \"text\": \"findmin(itr) -> (x, index)\\n\\nReturns the minimum element of the collection itr and its index. If there are multiple minimal elements, then the first one will be returned. NaN values are ignored, unless all elements are NaN.\\n\\nThe collection must not be empty.\\n\\nExamples\\n\\njulia> findmin([8,0.1,-9,pi])\\n(-9.0, 3)\\n\\njulia> findmin([7,1,1,6])\\n(1, 2)\\n\\njulia> findmin([7,1,1,NaN])\\n(1.0, 2)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.findmin-Tuple{AbstractArray,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.findmin\",\n    \"category\": \"Method\",\n    \"text\": \"findmin(A, region) -> (minval, index)\\n\\nFor an array input, returns the value and index of the minimum over the given region.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> findmin(A, 1)\\n([1 2], [1 3])\\n\\njulia> findmin(A, 2)\\n([1; 3], [1; 2])\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.findmax!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.findmax!\",\n    \"category\": \"Function\",\n    \"text\": \"findmax!(rval, rind, A, [init=true]) -> (maxval, index)\\n\\nFind the maximum of A and the corresponding linear index along singleton dimensions of rval and rind, and store the results in rval and rind.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.findmin!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.findmin!\",\n    \"category\": \"Function\",\n    \"text\": \"findmin!(rval, rind, A, [init=true]) -> (minval, index)\\n\\nFind the minimum of A and the corresponding linear index along singleton dimensions of rval and rind, and store the results in rval and rind.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.sum\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.sum\",\n    \"category\": \"Function\",\n    \"text\": \"sum(f, itr)\\n\\nSum the results of calling function f on each element of itr.\\n\\njulia> sum(abs2, [2; 3; 4])\\n29\\n\\n\\n\\nsum(itr)\\n\\nReturns the sum of all elements in a collection.\\n\\njulia> sum(1:20)\\n210\\n\\n\\n\\nsum(A, dims)\\n\\nSum elements of an array over the given dimensions.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> sum(A, 1)\\n1\u00d72 Array{Int64,2}:\\n 4  6\\n\\njulia> sum(A, 2)\\n2\u00d71 Array{Int64,2}:\\n 3\\n 7\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.sum!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.sum!\",\n    \"category\": \"Function\",\n    \"text\": \"sum!(r, A)\\n\\nSum elements of A over the singleton dimensions of r, and write results to r.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> sum!([1; 1], A)\\n2-element Array{Int64,1}:\\n 3\\n 7\\n\\njulia> sum!([1 1], A)\\n1\u00d72 Array{Int64,2}:\\n 4  6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.prod\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.prod\",\n    \"category\": \"Function\",\n    \"text\": \"prod(f, itr)\\n\\nReturns the product of f applied to each element of itr.\\n\\njulia> prod(abs2, [2; 3; 4])\\n576\\n\\n\\n\\nprod(itr)\\n\\nReturns the product of all elements of a collection.\\n\\njulia> prod(1:20)\\n2432902008176640000\\n\\n\\n\\nprod(A, dims)\\n\\nMultiply elements of an array over the given dimensions.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> prod(A, 1)\\n1\u00d72 Array{Int64,2}:\\n 3  8\\n\\njulia> prod(A, 2)\\n2\u00d71 Array{Int64,2}:\\n  2\\n 12\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.prod!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.prod!\",\n    \"category\": \"Function\",\n    \"text\": \"prod!(r, A)\\n\\nMultiply elements of A over the singleton dimensions of r, and write results to r.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> prod!([1; 1], A)\\n2-element Array{Int64,1}:\\n  2\\n 12\\n\\njulia> prod!([1 1], A)\\n1\u00d72 Array{Int64,2}:\\n 3  8\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.any-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.any\",\n    \"category\": \"Method\",\n    \"text\": \"any(itr) -> Bool\\n\\nTest whether any elements of a boolean collection are true, returning true as soon as the first true value in itr is encountered (short-circuiting).\\n\\njulia> a = [true,false,false,true]\\n4-element Array{Bool,1}:\\n  true\\n false\\n false\\n  true\\n\\njulia> any(a)\\ntrue\\n\\njulia> any((println(i); v) for (i, v) in enumerate(a))\\n1\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.any-Tuple{AbstractArray,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.any\",\n    \"category\": \"Method\",\n    \"text\": \"any(A, dims)\\n\\nTest whether any values along the given dimensions of an array are true.\\n\\nExamples\\n\\njulia> A = [true false; true false]\\n2\u00d72 Array{Bool,2}:\\n true  false\\n true  false\\n\\njulia> any(A, 1)\\n1\u00d72 Array{Bool,2}:\\n true  false\\n\\njulia> any(A, 2)\\n2\u00d71 Array{Bool,2}:\\n true\\n true\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.any!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.any!\",\n    \"category\": \"Function\",\n    \"text\": \"any!(r, A)\\n\\nTest whether any values in A along the singleton dimensions of r are true, and write results to r.\\n\\nExamples\\n\\njulia> A = [true false; true false]\\n2\u00d72 Array{Bool,2}:\\n true  false\\n true  false\\n\\njulia> any!([1; 1], A)\\n2-element Array{Int64,1}:\\n 1\\n 1\\n\\njulia> any!([1 1], A)\\n1\u00d72 Array{Int64,2}:\\n 1  0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.all-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.all\",\n    \"category\": \"Method\",\n    \"text\": \"all(itr) -> Bool\\n\\nTest whether all elements of a boolean collection are true, returning false as soon as the first false value in itr is encountered (short-circuiting).\\n\\njulia> a = [true,false,false,true]\\n4-element Array{Bool,1}:\\n  true\\n false\\n false\\n  true\\n\\njulia> all(a)\\nfalse\\n\\njulia> all((println(i); v) for (i, v) in enumerate(a))\\n1\\n2\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.all-Tuple{AbstractArray,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.all\",\n    \"category\": \"Method\",\n    \"text\": \"all(A, dims)\\n\\nTest whether all values along the given dimensions of an array are true.\\n\\nExamples\\n\\njulia> A = [true false; true true]\\n2\u00d72 Array{Bool,2}:\\n true  false\\n true   true\\n\\njulia> all(A, 1)\\n1\u00d72 Array{Bool,2}:\\n true  false\\n\\njulia> all(A, 2)\\n2\u00d71 Array{Bool,2}:\\n false\\n  true\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.all!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.all!\",\n    \"category\": \"Function\",\n    \"text\": \"all!(r, A)\\n\\nTest whether all values in A along the singleton dimensions of r are true, and write results to r.\\n\\nExamples\\n\\njulia> A = [true false; true false]\\n2\u00d72 Array{Bool,2}:\\n true  false\\n true  false\\n\\njulia> all!([1; 1], A)\\n2-element Array{Int64,1}:\\n 0\\n 0\\n\\njulia> all!([1 1], A)\\n1\u00d72 Array{Int64,2}:\\n 1  0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.count\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.count\",\n    \"category\": \"Function\",\n    \"text\": \"count(p, itr) -> Integer\\ncount(itr) -> Integer\\n\\nCount the number of elements in itr for which predicate p returns true. If p is omitted, counts the number of true elements in itr (which should be a collection of boolean values).\\n\\njulia> count(i->(4<=i<=6), [2,3,4,5,6])\\n3\\n\\njulia> count([true, false, true, true])\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.any-Tuple{Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.any\",\n    \"category\": \"Method\",\n    \"text\": \"any(p, itr) -> Bool\\n\\nDetermine whether predicate p returns true for any elements of itr, returning true as soon as the first item in itr for which p returns true is encountered (short-circuiting).\\n\\njulia> any(i->(4<=i<=6), [3,5,7])\\ntrue\\n\\njulia> any(i -> (println(i); i > 3), 1:10)\\n1\\n2\\n3\\n4\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.all-Tuple{Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.all\",\n    \"category\": \"Method\",\n    \"text\": \"all(p, itr) -> Bool\\n\\nDetermine whether predicate p returns true for all elements of itr, returning false as soon as the first item in itr for which p returns false is encountered (short-circuiting).\\n\\njulia> all(i->(4<=i<=6), [4,5,6])\\ntrue\\n\\njulia> all(i -> (println(i); i < 3), 1:10)\\n1\\n2\\n3\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.foreach\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.foreach\",\n    \"category\": \"Function\",\n    \"text\": \"foreach(f, c...) -> Void\\n\\nCall function f on each element of iterable c. For multiple iterable arguments, f is called elementwise. foreach should be used instead of map when the results of f are not needed, for example in foreach(println, array).\\n\\nExample\\n\\njulia> a = 1:3:7;\\n\\njulia> foreach(x -> println(x^2), a)\\n1\\n16\\n49\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.map\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.map\",\n    \"category\": \"Function\",\n    \"text\": \"map(f, c...) -> collection\\n\\nTransform collection c by applying f to each element. For multiple collection arguments, apply f elementwise.\\n\\nExamples\\n\\njulia> map(x -> x * 2, [1, 2, 3])\\n3-element Array{Int64,1}:\\n 2\\n 4\\n 6\\n\\njulia> map(+, [1, 2, 3], [10, 20, 30])\\n3-element Array{Int64,1}:\\n 11\\n 22\\n 33\\n\\n\\n\\nmap(f, x::Nullable)\\n\\nReturn f applied to the value of x if it has one, as a Nullable. If x is null, then return a null value of type Nullable{S}. S is guaranteed to be either Union{} or a concrete type. Whichever of these is chosen is an implementation detail, but typically the choice that maximizes performance would be used. If x has a value, then the return type is guaranteed to be of type Nullable{typeof(f(x))}.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.map!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.map!\",\n    \"category\": \"Function\",\n    \"text\": \"map!(function, destination, collection...)\\n\\nLike map, but stores the result in destination rather than a new collection. destination must be at least as large as the first collection.\\n\\nExample\\n\\njulia> x = zeros(3);\\n\\njulia> map!(x -> x * 2, x, [1, 2, 3]);\\n\\njulia> x\\n3-element Array{Float64,1}:\\n 2.0\\n 4.0\\n 6.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.mapreduce-NTuple{4,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.mapreduce\",\n    \"category\": \"Method\",\n    \"text\": \"mapreduce(f, op, v0, itr)\\n\\nApply function f to each element in itr, and then reduce the result using the binary function op. v0 must be a neutral element for op that will be returned for empty collections. It is unspecified whether v0 is used for non-empty collections.\\n\\nmapreduce is functionally equivalent to calling reduce(op, v0, map(f, itr)), but will in general execute faster since no intermediate collection needs to be created. See documentation for reduce and map.\\n\\njulia> mapreduce(x->x^2, +, [1:3;]) # == 1 + 4 + 9\\n14\\n\\nThe associativity of the reduction is implementation-dependent. Additionally, some implementations may reuse the return value of f for elements that appear multiple times in itr. Use mapfoldl or mapfoldr instead for guaranteed left or right associativity and invocation of f for every value.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.mapreduce-Tuple{Any,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.mapreduce\",\n    \"category\": \"Method\",\n    \"text\": \"mapreduce(f, op, itr)\\n\\nLike mapreduce(f, op, v0, itr). In general, this cannot be used with empty collections (see reduce(op, itr)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.mapfoldl-NTuple{4,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.mapfoldl\",\n    \"category\": \"Method\",\n    \"text\": \"mapfoldl(f, op, v0, itr)\\n\\nLike mapreduce, but with guaranteed left associativity, as in foldl. v0 will be used exactly once.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.mapfoldl-Tuple{Any,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.mapfoldl\",\n    \"category\": \"Method\",\n    \"text\": \"mapfoldl(f, op, itr)\\n\\nLike mapfoldl(f, op, v0, itr), but using the first element of itr as v0. In general, this cannot be used with empty collections (see reduce(op, itr)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.mapfoldr-NTuple{4,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.mapfoldr\",\n    \"category\": \"Method\",\n    \"text\": \"mapfoldr(f, op, v0, itr)\\n\\nLike mapreduce, but with guaranteed right associativity, as in foldr. v0 will be used exactly once.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.mapfoldr-Tuple{Any,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.mapfoldr\",\n    \"category\": \"Method\",\n    \"text\": \"mapfoldr(f, op, itr)\\n\\nLike mapfoldr(f, op, v0, itr), but using the first element of itr as v0. In general, this cannot be used with empty collections (see reduce(op, itr)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.first\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.first\",\n    \"category\": \"Function\",\n    \"text\": \"first(coll)\\n\\nGet the first element of an iterable collection. Returns the start point of a Range even if it is empty.\\n\\njulia> first(2:2:10)\\n2\\n\\njulia> first([1; 2; 3; 4])\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.last\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.last\",\n    \"category\": \"Function\",\n    \"text\": \"last(coll)\\n\\nGet the last element of an ordered collection, if it can be computed in O(1) time. This is accomplished by calling endof to get the last index. Returns the end point of a Range even if it is empty.\\n\\njulia> last(1:2:10)\\n9\\n\\njulia> last([1; 2; 3; 4])\\n4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.step\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.step\",\n    \"category\": \"Function\",\n    \"text\": \"step(r)\\n\\nGet the step size of a Range object.\\n\\njulia> step(1:10)\\n1\\n\\njulia> step(1:2:10)\\n2\\n\\njulia> step(2.5:0.3:10.9)\\n0.3\\n\\njulia> step(linspace(2.5,10.9,85))\\n0.1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.collect-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.collect\",\n    \"category\": \"Method\",\n    \"text\": \"collect(collection)\\n\\nReturn an Array of all items in a collection or iterator. For associative collections, returns Pair{KeyType, ValType}. If the argument is array-like or is an iterator with the HasShape() trait, the result will have the same shape and number of dimensions as the argument.\\n\\nExample\\n\\njulia> collect(1:2:13)\\n7-element Array{Int64,1}:\\n  1\\n  3\\n  5\\n  7\\n  9\\n 11\\n 13\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.collect-Tuple{Type,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.collect\",\n    \"category\": \"Method\",\n    \"text\": \"collect(element_type, collection)\\n\\nReturn an Array with the given element type of all items in a collection or iterable. The result has the same shape and number of dimensions as collection.\\n\\njulia> collect(Float64, 1:2:5)\\n3-element Array{Float64,1}:\\n 1.0\\n 3.0\\n 5.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.issubset-Tuple{Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.issubset\",\n    \"category\": \"Method\",\n    \"text\": \"issubset(a, b)\\n\u2286(a,b) -> Bool\\n\u2288(a,b) -> Bool\\n\u228a(a,b) -> Bool\\n\\nDetermine whether every element of a is also in b, using in.\\n\\nExamples\\n\\njulia> issubset([1, 2], [1, 2, 3])\\ntrue\\n\\njulia> issubset([1, 2, 3], [1, 2])\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.filter\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.filter\",\n    \"category\": \"Function\",\n    \"text\": \"filter(function, collection)\\n\\nReturn a copy of collection, removing elements for which function is false. For associative collections, the function is passed two arguments (key and value).\\n\\nExamples\\n\\njulia> a = 1:10\\n1:10\\n\\njulia> filter(isodd, a)\\n5-element Array{Int64,1}:\\n 1\\n 3\\n 5\\n 7\\n 9\\n\\njulia> d = Dict(1=>\\\"a\\\", 2=>\\\"b\\\")\\nDict{Int64,String} with 2 entries:\\n  2 => \\\"b\\\"\\n  1 => \\\"a\\\"\\n\\njulia> filter((x,y)->isodd(x), d)\\nDict{Int64,String} with 1 entry:\\n  1 => \\\"a\\\"\\n\\n\\n\\nfilter(p, x::Nullable)\\n\\nReturn null if either x is null or p(get(x)) is false, and x otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.filter!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.filter!\",\n    \"category\": \"Function\",\n    \"text\": \"filter!(function, collection)\\n\\nUpdate collection, removing elements for which function is false. For associative collections, the function is passed two arguments (key and value).\\n\\nExample\\n\\njulia> filter!(isodd, collect(1:10))\\n5-element Array{Int64,1}:\\n 1\\n 3\\n 5\\n 7\\n 9\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Iterable-Collections-1\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Iterable Collections\",\n    \"category\": \"section\",\n    \"text\": \"Base.in\\nBase.eltype\\nBase.indexin\\nBase.findin\\nBase.unique\\nBase.allunique\\nBase.reduce(::Any, ::Any, ::Any)\\nBase.reduce(::Any, ::Any)\\nBase.foldl(::Any, ::Any, ::Any)\\nBase.foldl(::Any, ::Any)\\nBase.foldr(::Any, ::Any, ::Any)\\nBase.foldr(::Any, ::Any)\\nBase.maximum(::Any)\\nBase.maximum(::Any, ::Any)\\nBase.maximum!\\nBase.minimum(::Any)\\nBase.minimum(::Any, ::Any)\\nBase.minimum!\\nBase.extrema(::Any)\\nBase.extrema(::AbstractArray, ::Any)\\nBase.indmax\\nBase.indmin\\nBase.findmax(::Any)\\nBase.findmax(::AbstractArray, ::Any)\\nBase.findmin(::Any)\\nBase.findmin(::AbstractArray, ::Any)\\nBase.findmax!\\nBase.findmin!\\nBase.sum\\nBase.sum!\\nBase.prod\\nBase.prod!\\nBase.any(::Any)\\nBase.any(::AbstractArray, ::Any)\\nBase.any!\\nBase.all(::Any)\\nBase.all(::AbstractArray, ::Any)\\nBase.all!\\nBase.count\\nBase.any(::Any, ::Any)\\nBase.all(::Any, ::Any)\\nBase.foreach\\nBase.map\\nBase.map!\\nBase.mapreduce(::Any, ::Any, ::Any, ::Any)\\nBase.mapreduce(::Any, ::Any, ::Any)\\nBase.mapfoldl(::Any, ::Any, ::Any, ::Any)\\nBase.mapfoldl(::Any, ::Any, ::Any)\\nBase.mapfoldr(::Any, ::Any, ::Any, ::Any)\\nBase.mapfoldr(::Any, ::Any, ::Any)\\nBase.first\\nBase.last\\nBase.step\\nBase.collect(::Any)\\nBase.collect(::Type, ::Any)\\nBase.issubset(::Any, ::Any)\\nBase.filter\\nBase.filter!\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.getindex-Tuple{Any,Vararg{Any,N} where N}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.getindex\",\n    \"category\": \"Method\",\n    \"text\": \"getindex(collection, key...)\\n\\nRetrieve the value(s) stored at the given key or index within a collection. The syntax a[i,j,...] is converted by the compiler to getindex(a, i, j, ...).\\n\\nExample\\n\\njulia> A = Dict(\\\"a\\\" => 1, \\\"b\\\" => 2)\\nDict{String,Int64} with 2 entries:\\n  \\\"b\\\" => 2\\n  \\\"a\\\" => 1\\n\\njulia> getindex(A, \\\"a\\\")\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.setindex!-Tuple{Any,Any,Vararg{Any,N} where N}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.setindex!\",\n    \"category\": \"Method\",\n    \"text\": \"setindex!(collection, value, key...)\\n\\nStore the given value at the given key or index within a collection. The syntax a[i,j,...] = x is converted by the compiler to (setindex!(a, x, i, j, ...); x).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Indexable-Collections-1\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Indexable Collections\",\n    \"category\": \"section\",\n    \"text\": \"Base.getindex(::Any, ::Any...)\\nBase.setindex!(::Any, ::Any, ::Any...)Fully implemented by:Array\\nBitArray\\nAbstractArray\\nSubArray\\nObjectIdDict\\nDict\\nWeakKeyDict\\nAbstractStringPartially implemented by:Range\\nUnitRange\\nTuple\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.Dict\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.Dict\",\n    \"category\": \"Type\",\n    \"text\": \"Dict([itr])\\n\\nDict{K,V}() constructs a hash table with keys of type K and values of type V.\\n\\nGiven a single iterable argument, constructs a Dict whose key-value pairs are taken from 2-tuples (key,value) generated by the argument.\\n\\njulia> Dict([(\\\"A\\\", 1), (\\\"B\\\", 2)])\\nDict{String,Int64} with 2 entries:\\n  \\\"B\\\" => 2\\n  \\\"A\\\" => 1\\n\\nAlternatively, a sequence of pair arguments may be passed.\\n\\njulia> Dict(\\\"A\\\"=>1, \\\"B\\\"=>2)\\nDict{String,Int64} with 2 entries:\\n  \\\"B\\\" => 2\\n  \\\"A\\\" => 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.ObjectIdDict\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.ObjectIdDict\",\n    \"category\": \"Type\",\n    \"text\": \"ObjectIdDict([itr])\\n\\nObjectIdDict() constructs a hash table where the keys are (always) object identities.  Unlike Dict it is not parameterized on its key and value type and thus its eltype is always Pair{Any,Any}.\\n\\nSee Dict for further help.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.WeakKeyDict\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.WeakKeyDict\",\n    \"category\": \"Type\",\n    \"text\": \"WeakKeyDict([itr])\\n\\nWeakKeyDict() constructs a hash table where the keys are weak references to objects, and thus may be garbage collected even when referenced in a hash table.\\n\\nSee Dict for further help.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.haskey\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.haskey\",\n    \"category\": \"Function\",\n    \"text\": \"haskey(collection, key) -> Bool\\n\\nDetermine whether a collection has a mapping for a given key.\\n\\njulia> a = Dict('a'=>2, 'b'=>3)\\nDict{Char,Int64} with 2 entries:\\n  'b' => 3\\n  'a' => 2\\n\\njulia> haskey(a,'a')\\ntrue\\n\\njulia> haskey(a,'c')\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.get-Tuple{Any,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.get\",\n    \"category\": \"Method\",\n    \"text\": \"get(collection, key, default)\\n\\nReturn the value stored for the given key, or the given default value if no mapping for the key is present.\\n\\nExamples\\n\\njulia> d = Dict(\\\"a\\\"=>1, \\\"b\\\"=>2);\\n\\njulia> get(d, \\\"a\\\", 3)\\n1\\n\\njulia> get(d, \\\"c\\\", 3)\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.get\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.get\",\n    \"category\": \"Function\",\n    \"text\": \"get(f::Function, collection, key)\\n\\nReturn the value stored for the given key, or if no mapping for the key is present, return f().  Use get! to also store the default value in the dictionary.\\n\\nThis is intended to be called using do block syntax\\n\\nget(dict, key) do\\n    # default value calculated here\\n    time()\\nend\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.get!-Tuple{Any,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.get!\",\n    \"category\": \"Method\",\n    \"text\": \"get!(collection, key, default)\\n\\nReturn the value stored for the given key, or if no mapping for the key is present, store key => default, and return default.\\n\\nExamples\\n\\njulia> d = Dict(\\\"a\\\"=>1, \\\"b\\\"=>2, \\\"c\\\"=>3);\\n\\njulia> get!(d, \\\"a\\\", 5)\\n1\\n\\njulia> get!(d, \\\"d\\\", 4)\\n4\\n\\njulia> d\\nDict{String,Int64} with 4 entries:\\n  \\\"c\\\" => 3\\n  \\\"b\\\" => 2\\n  \\\"a\\\" => 1\\n  \\\"d\\\" => 4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.get!-Tuple{Function,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.get!\",\n    \"category\": \"Method\",\n    \"text\": \"get!(f::Function, collection, key)\\n\\nReturn the value stored for the given key, or if no mapping for the key is present, store key => f(), and return f().\\n\\nThis is intended to be called using do block syntax:\\n\\nget!(dict, key) do\\n    # default value calculated here\\n    time()\\nend\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.getkey\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.getkey\",\n    \"category\": \"Function\",\n    \"text\": \"getkey(collection, key, default)\\n\\nReturn the key matching argument key if one exists in collection, otherwise return default.\\n\\njulia> a = Dict('a'=>2, 'b'=>3)\\nDict{Char,Int64} with 2 entries:\\n  'b' => 3\\n  'a' => 2\\n\\njulia> getkey(a,'a',1)\\n'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\\n\\njulia> getkey(a,'d','a')\\n'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.delete!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.delete!\",\n    \"category\": \"Function\",\n    \"text\": \"delete!(collection, key)\\n\\nDelete the mapping for the given key in a collection, and return the collection.\\n\\nExample\\n\\njulia> d = Dict(\\\"a\\\"=>1, \\\"b\\\"=>2)\\nDict{String,Int64} with 2 entries:\\n  \\\"b\\\" => 2\\n  \\\"a\\\" => 1\\n\\njulia> delete!(d, \\\"b\\\")\\nDict{String,Int64} with 1 entry:\\n  \\\"a\\\" => 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.pop!-Tuple{Any,Any,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.pop!\",\n    \"category\": \"Method\",\n    \"text\": \"pop!(collection, key[, default])\\n\\nDelete and return the mapping for key if it exists in collection, otherwise return default, or throw an error if default is not specified.\\n\\nExamples\\n\\njulia> d = Dict(\\\"a\\\"=>1, \\\"b\\\"=>2, \\\"c\\\"=>3);\\n\\njulia> pop!(d, \\\"a\\\")\\n1\\n\\njulia> pop!(d, \\\"d\\\")\\nERROR: KeyError: key \\\"d\\\" not found\\nStacktrace:\\n [1] pop!(::Dict{String,Int64}, ::String) at ./dict.jl:539\\n\\njulia> pop!(d, \\\"e\\\", 4)\\n4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.keys\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.keys\",\n    \"category\": \"Function\",\n    \"text\": \"keys(a::Associative)\\n\\nReturn an iterator over all keys in a collection. collect(keys(a)) returns an array of keys. Since the keys are stored internally in a hash table, the order in which they are returned may vary. But keys(a) and values(a) both iterate a and return the elements in the same order.\\n\\njulia> a = Dict('a'=>2, 'b'=>3)\\nDict{Char,Int64} with 2 entries:\\n  'b' => 3\\n  'a' => 2\\n\\njulia> collect(keys(a))\\n2-element Array{Char,1}:\\n 'b'\\n 'a'\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.values\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.values\",\n    \"category\": \"Function\",\n    \"text\": \"values(a::Associative)\\n\\nReturn an iterator over all values in a collection. collect(values(a)) returns an array of values. Since the values are stored internally in a hash table, the order in which they are returned may vary. But keys(a) and values(a) both iterate a and return the elements in the same order.\\n\\njulia> a = Dict('a'=>2, 'b'=>3)\\nDict{Char,Int64} with 2 entries:\\n  'b' => 3\\n  'a' => 2\\n\\njulia> collect(values(a))\\n2-element Array{Int64,1}:\\n 3\\n 2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.merge\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.merge\",\n    \"category\": \"Function\",\n    \"text\": \"merge(d::Associative, others::Associative...)\\n\\nConstruct a merged collection from the given collections. If necessary, the types of the resulting collection will be promoted to accommodate the types of the merged collections. If the same key is present in another collection, the value for that key will be the value it has in the last collection listed.\\n\\njulia> a = Dict(\\\"foo\\\" => 0.0, \\\"bar\\\" => 42.0)\\nDict{String,Float64} with 2 entries:\\n  \\\"bar\\\" => 42.0\\n  \\\"foo\\\" => 0.0\\n\\njulia> b = Dict(\\\"baz\\\" => 17, \\\"bar\\\" => 4711)\\nDict{String,Int64} with 2 entries:\\n  \\\"bar\\\" => 4711\\n  \\\"baz\\\" => 17\\n\\njulia> merge(a, b)\\nDict{String,Float64} with 3 entries:\\n  \\\"bar\\\" => 4711.0\\n  \\\"baz\\\" => 17.0\\n  \\\"foo\\\" => 0.0\\n\\njulia> merge(b, a)\\nDict{String,Float64} with 3 entries:\\n  \\\"bar\\\" => 42.0\\n  \\\"baz\\\" => 17.0\\n  \\\"foo\\\" => 0.0\\n\\n\\n\\nmerge(combine, d::Associative, others::Associative...)\\n\\nConstruct a merged collection from the given collections. If necessary, the types of the resulting collection will be promoted to accommodate the types of the merged collections. Values with the same key will be combined using the combiner function.\\n\\njulia> a = Dict(\\\"foo\\\" => 0.0, \\\"bar\\\" => 42.0)\\nDict{String,Float64} with 2 entries:\\n  \\\"bar\\\" => 42.0\\n  \\\"foo\\\" => 0.0\\n\\njulia> b = Dict(\\\"baz\\\" => 17, \\\"bar\\\" => 4711)\\nDict{String,Int64} with 2 entries:\\n  \\\"bar\\\" => 4711\\n  \\\"baz\\\" => 17\\n\\njulia> merge(+, a, b)\\nDict{String,Float64} with 3 entries:\\n  \\\"bar\\\" => 4753.0\\n  \\\"baz\\\" => 17.0\\n  \\\"foo\\\" => 0.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.merge!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.merge!\",\n    \"category\": \"Function\",\n    \"text\": \"merge!(d::Associative, others::Associative...)\\n\\nUpdate collection with pairs from the other collections. See also merge.\\n\\njulia> d1 = Dict(1 => 2, 3 => 4);\\n\\njulia> d2 = Dict(1 => 4, 4 => 5);\\n\\njulia> merge!(d1, d2);\\n\\njulia> d1\\nDict{Int64,Int64} with 3 entries:\\n  4 => 5\\n  3 => 4\\n  1 => 4\\n\\n\\n\\nmerge!(combine, d::Associative, others::Associative...)\\n\\nUpdate collection with pairs from the other collections. Values with the same key will be combined using the combiner function.\\n\\njulia> d1 = Dict(1 => 2, 3 => 4);\\n\\njulia> d2 = Dict(1 => 4, 4 => 5);\\n\\njulia> merge!(+, d1, d2);\\n\\njulia> d1\\nDict{Int64,Int64} with 3 entries:\\n  4 => 5\\n  3 => 4\\n  1 => 6\\n\\njulia> merge!(-, d1, d1);\\n\\njulia> d1\\nDict{Int64,Int64} with 3 entries:\\n  4 => 0\\n  3 => 0\\n  1 => 0\\n\\n\\n\\nMerge changes into current head \\n\\n\\n\\nInternal implementation of merge. Returns true if merge was successful, otherwise false\\n\\n\\n\\nmerge!(repo::GitRepo; kwargs...) -> Bool\\n\\nPerform a git merge on the repository repo, merging commits with diverging history into the current branch. Returns true if the merge succeeded, false if not.\\n\\nThe keyword arguments are:\\n\\ncommittish::AbstractString=\\\"\\\": Merge the named commit(s) in committish.\\nbranch::AbstractString=\\\"\\\": Merge the branch branch and all its commits since it diverged from the current branch.\\nfastforward::Bool=false: If fastforward is true, only merge if the merge is a fast-forward (the current branch head is an ancestor of the commits to be merged), otherwise refuse to merge and return false. This is equivalent to the git CLI option --ff-only.\\nmerge_opts::MergeOptions=MergeOptions(): merge_opts specifies options for the merge, such as merge strategy in case of conflicts.\\ncheckout_opts::CheckoutOptions=CheckoutOptions(): checkout_opts specifies options for the checkout step.\\n\\nEquivalent to git merge [--ff-only] [<committish> | <branch>].\\n\\nnote: Note\\nIf you specify a branch, this must be done in reference format, since the string will be turned into a GitReference. For example, if you wanted to merge branch branch_a, you would call merge!(repo, branch=\\\"refs/heads/branch_a\\\").\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.sizehint!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.sizehint!\",\n    \"category\": \"Function\",\n    \"text\": \"sizehint!(s, n)\\n\\nSuggest that collection s reserve capacity for at least n elements. This can improve performance.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.keytype\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.keytype\",\n    \"category\": \"Function\",\n    \"text\": \"keytype(type)\\n\\nGet the key type of an associative collection type. Behaves similarly to eltype.\\n\\njulia> keytype(Dict(Int32(1) => \\\"foo\\\"))\\nInt32\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.valtype\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.valtype\",\n    \"category\": \"Function\",\n    \"text\": \"valtype(type)\\n\\nGet the value type of an associative collection type. Behaves similarly to eltype.\\n\\njulia> valtype(Dict(Int32(1) => \\\"foo\\\"))\\nString\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Associative-Collections-1\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Associative Collections\",\n    \"category\": \"section\",\n    \"text\": \"Dict is the standard associative collection. Its implementation uses hash() as the hashing function for the key, and isequal() to determine equality. Define these two functions for custom types to override how they are stored in a hash table.ObjectIdDict is a special hash table where the keys are always object identities.WeakKeyDict is a hash table implementation where the keys are weak references to objects, and thus may be garbage collected even when referenced in a hash table.Dicts can be created by passing pair objects constructed with =>() to a Dict constructor: Dict(\\\"A\\\"=>1, \\\"B\\\"=>2). This call will attempt to infer type information from the keys and values (i.e. this example creates a Dict{String, Int64}). To explicitly specify types use the syntax Dict{KeyType,ValueType}(...). For example, Dict{String,Int32}(\\\"A\\\"=>1, \\\"B\\\"=>2).Associative collections may also be created with generators. For example, Dict(i => f(i) for i = 1:10).Given a dictionary D, the syntax D[x] returns the value of key x (if it exists) or throws an error, and D[x] = y stores the key-value pair x => y in D (replacing any existing value for the key x).  Multiple arguments to D[...] are converted to tuples; for example, the syntax D[x,y]  is equivalent to D[(x,y)], i.e. it refers to the value keyed by the tuple (x,y).Base.Dict\\nBase.ObjectIdDict\\nBase.WeakKeyDict\\nBase.haskey\\nBase.get(::Any, ::Any, ::Any)\\nBase.get\\nBase.get!(::Any, ::Any, ::Any)\\nBase.get!(::Function, ::Any, ::Any)\\nBase.getkey\\nBase.delete!\\nBase.pop!(::Any, ::Any, ::Any)\\nBase.keys\\nBase.values\\nBase.merge\\nBase.merge!\\nBase.sizehint!\\nBase.keytype\\nBase.valtypeFully implemented by:ObjectIdDict\\nDict\\nWeakKeyDictPartially implemented by:IntSet\\nSet\\nEnvHash\\nArray\\nBitArray\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.Set\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.Set\",\n    \"category\": \"Type\",\n    \"text\": \"Set([itr])\\n\\nConstruct a Set of the values generated by the given iterable object, or an empty set. Should be used instead of IntSet for sparse integer sets, or for sets of arbitrary objects.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.IntSet\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.IntSet\",\n    \"category\": \"Type\",\n    \"text\": \"IntSet([itr])\\n\\nConstruct a sorted set of positive Ints generated by the given iterable object, or an empty set. Implemented as a bit string, and therefore designed for dense integer sets. Only Ints greater than 0 can be stored. If the set will be sparse (for example holding a few very large integers), use Set instead.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.union\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.union\",\n    \"category\": \"Function\",\n    \"text\": \"union(s1,s2...)\\n\u222a(s1,s2...)\\n\\nConstruct the union of two or more sets. Maintains order with arrays.\\n\\nExamples\\n\\njulia> union([1, 2], [3, 4])\\n4-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n\\njulia> union([1, 2], [2, 4])\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 4\\n\\njulia> union([4, 2], [1, 2])\\n3-element Array{Int64,1}:\\n 4\\n 2\\n 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.union!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.union!\",\n    \"category\": \"Function\",\n    \"text\": \"union!(s, iterable)\\n\\nUnion each element of iterable into set s in-place.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.intersect\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.intersect\",\n    \"category\": \"Function\",\n    \"text\": \"intersect(s1,s2...)\\n\u2229(s1,s2)\\n\\nConstruct the intersection of two or more sets. Maintains order and multiplicity of the first argument for arrays and ranges.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.setdiff\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.setdiff\",\n    \"category\": \"Function\",\n    \"text\": \"setdiff(a, b)\\n\\nConstruct the set of elements in a but not b. Maintains order with arrays. Note that both arguments must be collections, and both will be iterated over. In particular, setdiff(set,element) where element is a potential member of set, will not work in general.\\n\\nExample\\n\\njulia> setdiff([1,2,3],[3,4,5])\\n2-element Array{Int64,1}:\\n 1\\n 2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.setdiff!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.setdiff!\",\n    \"category\": \"Function\",\n    \"text\": \"setdiff!(s, iterable)\\n\\nRemove each element of iterable from set s in-place.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.symdiff\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.symdiff\",\n    \"category\": \"Function\",\n    \"text\": \"symdiff(a, b, rest...)\\n\\nConstruct the symmetric difference of elements in the passed in sets or arrays. Maintains order with arrays.\\n\\nExample\\n\\njulia> symdiff([1,2,3],[3,4,5],[4,5,6])\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.symdiff!-Tuple{IntSet,Integer}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.symdiff!\",\n    \"category\": \"Method\",\n    \"text\": \"symdiff!(s, n)\\n\\nThe set s is destructively modified to toggle the inclusion of integer n.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.symdiff!-Tuple{IntSet,Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.symdiff!\",\n    \"category\": \"Method\",\n    \"text\": \"symdiff!(s, itr)\\n\\nFor each element in itr, destructively toggle its inclusion in set s.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.symdiff!-Tuple{IntSet,IntSet}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.symdiff!\",\n    \"category\": \"Method\",\n    \"text\": \"symdiff!(s, itr)\\n\\nFor each element in itr, destructively toggle its inclusion in set s.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.intersect!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.intersect!\",\n    \"category\": \"Function\",\n    \"text\": \"intersect!(s1::IntSet, s2::IntSet)\\n\\nIntersects sets s1 and s2 and overwrites the set s1 with the result. If needed, s1 will be expanded to the size of s2.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.issubset\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.issubset\",\n    \"category\": \"Function\",\n    \"text\": \"issubset(A, S) -> Bool\\n\u2286(A,S) -> Bool\\n\\nReturn true if A is a subset of or equal to S.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Set-Like-Collections-1\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Set-Like Collections\",\n    \"category\": \"section\",\n    \"text\": \"Base.Set\\nBase.IntSet\\nBase.union\\nBase.union!\\nBase.intersect\\nBase.setdiff\\nBase.setdiff!\\nBase.symdiff\\nBase.symdiff!(::IntSet, ::Integer)\\nBase.symdiff!(::IntSet, ::Any)\\nBase.symdiff!(::IntSet, ::IntSet)\\nBase.intersect!\\nBase.issubsetFully implemented by:IntSet\\nSetPartially implemented by:Array\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.push!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.push!\",\n    \"category\": \"Function\",\n    \"text\": \"push!(collection, items...) -> collection\\n\\nInsert one or more items at the end of collection.\\n\\nExample\\n\\njulia> push!([1, 2, 3], 4, 5, 6)\\n6-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n\\nUse append! to add all the elements of another collection to collection. The result of the preceding example is equivalent to append!([1, 2, 3], [4, 5, 6]).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.pop!-Tuple{Any}\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.pop!\",\n    \"category\": \"Method\",\n    \"text\": \"pop!(collection) -> item\\n\\nRemove the last item in collection and return it.\\n\\nExamples\\n\\njulia> A=[1, 2, 3, 4, 5, 6]\\n6-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n\\njulia> pop!(A)\\n6\\n\\njulia> A\\n5-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.unshift!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.unshift!\",\n    \"category\": \"Function\",\n    \"text\": \"unshift!(collection, items...) -> collection\\n\\nInsert one or more items at the beginning of collection.\\n\\nExample\\n\\njulia> unshift!([1, 2, 3, 4], 5, 6)\\n6-element Array{Int64,1}:\\n 5\\n 6\\n 1\\n 2\\n 3\\n 4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.shift!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.shift!\",\n    \"category\": \"Function\",\n    \"text\": \"shift!(collection) -> item\\n\\nRemove the first item from collection.\\n\\nExample\\n\\njulia> A = [1, 2, 3, 4, 5, 6]\\n6-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n\\njulia> shift!(A)\\n1\\n\\njulia> A\\n5-element Array{Int64,1}:\\n 2\\n 3\\n 4\\n 5\\n 6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.insert!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.insert!\",\n    \"category\": \"Function\",\n    \"text\": \"insert!(a::Vector, index::Integer, item)\\n\\nInsert an item into a at the given index. index is the index of item in the resulting a.\\n\\nExample\\n\\njulia> insert!([6, 5, 4, 2, 1], 4, 3)\\n6-element Array{Int64,1}:\\n 6\\n 5\\n 4\\n 3\\n 2\\n 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.deleteat!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.deleteat!\",\n    \"category\": \"Function\",\n    \"text\": \"deleteat!(a::Vector, i::Integer)\\n\\nRemove the item at the given i and return the modified a. Subsequent items are shifted to fill the resulting gap.\\n\\nExample\\n\\njulia> deleteat!([6, 5, 4, 3, 2, 1], 2)\\n5-element Array{Int64,1}:\\n 6\\n 4\\n 3\\n 2\\n 1\\n\\n\\n\\ndeleteat!(a::Vector, inds)\\n\\nRemove the items at the indices given by inds, and return the modified a. Subsequent items are shifted to fill the resulting gap.\\n\\ninds can be either an iterator or a collection of sorted and unique integer indices, or a boolean vector of the same length as a with true indicating entries to delete.\\n\\nExamples\\n\\njulia> deleteat!([6, 5, 4, 3, 2, 1], 1:2:5)\\n3-element Array{Int64,1}:\\n 5\\n 3\\n 1\\n\\njulia> deleteat!([6, 5, 4, 3, 2, 1], [true, false, true, false, true, false])\\n3-element Array{Int64,1}:\\n 5\\n 3\\n 1\\n\\njulia> deleteat!([6, 5, 4, 3, 2, 1], (2, 2))\\nERROR: ArgumentError: indices must be unique and sorted\\nStacktrace:\\n [1] _deleteat!(::Array{Int64,1}, ::Tuple{Int64,Int64}) at ./array.jl:926\\n [2] deleteat!(::Array{Int64,1}, ::Tuple{Int64,Int64}) at ./array.jl:913\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.splice!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.splice!\",\n    \"category\": \"Function\",\n    \"text\": \"splice!(a::Vector, index::Integer, [replacement]) -> item\\n\\nRemove the item at the given index, and return the removed item. Subsequent items are shifted left to fill the resulting gap. If specified, replacement values from an ordered collection will be spliced in place of the removed item.\\n\\nExamples\\n\\njulia> A = [6, 5, 4, 3, 2, 1]; splice!(A, 5)\\n2\\n\\njulia> A\\n5-element Array{Int64,1}:\\n 6\\n 5\\n 4\\n 3\\n 1\\n\\njulia> splice!(A, 5, -1)\\n1\\n\\njulia> A\\n5-element Array{Int64,1}:\\n  6\\n  5\\n  4\\n  3\\n -1\\n\\njulia> splice!(A, 1, [-1, -2, -3])\\n6\\n\\njulia> A\\n7-element Array{Int64,1}:\\n -1\\n -2\\n -3\\n  5\\n  4\\n  3\\n -1\\n\\nTo insert replacement before an index n without removing any items, use splice!(collection, n:n-1, replacement).\\n\\n\\n\\nsplice!(a::Vector, range, [replacement]) -> items\\n\\nRemove items in the specified index range, and return a collection containing the removed items. Subsequent items are shifted left to fill the resulting gap. If specified, replacement values from an ordered collection will be spliced in place of the removed items.\\n\\nTo insert replacement before an index n without removing any items, use splice!(collection, n:n-1, replacement).\\n\\nExample\\n\\njulia> splice!(A, 4:3, 2)\\n0-element Array{Int64,1}\\n\\njulia> A\\n8-element Array{Int64,1}:\\n -1\\n -2\\n -3\\n  2\\n  5\\n  4\\n  3\\n -1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.resize!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.resize!\",\n    \"category\": \"Function\",\n    \"text\": \"resize!(a::Vector, n::Integer) -> Vector\\n\\nResize a to contain n elements. If n is smaller than the current collection length, the first n elements will be retained. If n is larger, the new elements are not guaranteed to be initialized.\\n\\nExamples\\n\\njulia> resize!([6, 5, 4, 3, 2, 1], 3)\\n3-element Array{Int64,1}:\\n 6\\n 5\\n 4\\n\\njulia> a = resize!([6, 5, 4, 3, 2, 1], 8);\\n\\njulia> length(a)\\n8\\n\\njulia> a[1:6]\\n6-element Array{Int64,1}:\\n 6\\n 5\\n 4\\n 3\\n 2\\n 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.append!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.append!\",\n    \"category\": \"Function\",\n    \"text\": \"append!(collection, collection2) -> collection.\\n\\nAdd the elements of collection2 to the end of collection.\\n\\nExamples\\n\\njulia> append!([1],[2,3])\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> append!([1, 2, 3], [4, 5, 6])\\n6-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n\\nUse push! to add individual items to collection which are not already themselves in another collection. The result is of the preceding example is equivalent to push!([1, 2, 3], 4, 5, 6).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Base.prepend!\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Base.prepend!\",\n    \"category\": \"Function\",\n    \"text\": \"prepend!(a::Vector, items) -> collection\\n\\nInsert the elements of items to the beginning of a.\\n\\nExample\\n\\njulia> prepend!([3],[1,2])\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/collections.html#Dequeues-1\",\n    \"page\": \"Collections and Data Structures\",\n    \"title\": \"Dequeues\",\n    \"category\": \"section\",\n    \"text\": \"Base.push!\\nBase.pop!(::Any)\\nBase.unshift!\\nBase.shift!\\nBase.insert!\\nBase.deleteat!\\nBase.splice!\\nBase.resize!\\nBase.append!\\nBase.prepend!Fully implemented by:Vector (a.k.a. 1-dimensional Array)\\nBitVector (a.k.a. 1-dimensional BitArray)\"\n},\n\n{\n    \"location\": \"stdlib/math.html#\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Mathematics\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Mathematics-1\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Mathematics\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:--Tuple{Any}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:-\",\n    \"category\": \"Method\",\n    \"text\": \"-(x)\\n\\nUnary minus operator.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:+\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:+\",\n    \"category\": \"Function\",\n    \"text\": \"+(x, y...)\\n\\nAddition operator. x+y+z+... calls this function with all arguments, i.e. +(x, y, z, ...).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:--Tuple{Any,Any}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:-\",\n    \"category\": \"Method\",\n    \"text\": \"-(x, y)\\n\\nSubtraction operator.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:*-Tuple{Any,Vararg{Any,N} where N}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:*\",\n    \"category\": \"Method\",\n    \"text\": \"*(x, y...)\\n\\nMultiplication operator. x*y*z*... calls this function with all arguments, i.e. *(x, y, z, ...).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:/\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:/\",\n    \"category\": \"Function\",\n    \"text\": \"/(x, y)\\n\\nRight division operator: multiplication of x by the inverse of y on the right. Gives floating-point results for integer arguments.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:\\\\-Tuple{Any,Any}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:\\\\\",\n    \"category\": \"Method\",\n    \"text\": \"\\\\(x, y)\\n\\nLeft division operator: multiplication of y by the inverse of x on the left. Gives floating-point results for integer arguments.\\n\\njulia> 3 \\\\ 6\\n2.0\\n\\njulia> inv(3) * 6\\n2.0\\n\\njulia> A = [1 2; 3 4]; x = [5, 6];\\n\\njulia> A \\\\ x\\n2-element Array{Float64,1}:\\n -4.0\\n  4.5\\n\\njulia> inv(A) * x\\n2-element Array{Float64,1}:\\n -4.0\\n  4.5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:^-Tuple{Number,Number}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:^\",\n    \"category\": \"Method\",\n    \"text\": \"^(x, y)\\n\\nExponentiation operator. If x is a matrix, computes matrix exponentiation.\\n\\nIf y is an Int literal (e.g. 2 in x^2 or -3 in x^-3), the Julia code x^y is transformed by the compiler to Base.literal_pow(^, x, Val{y}), to enable compile-time specialization on the value of the exponent. (As a default fallback we have Base.literal_pow(^, x, Val{y}) = ^(x,y), where usually ^ == Base.^ unless ^ has been defined in the calling namespace.)\\n\\njulia> 3^5\\n243\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> A^3\\n2\u00d72 Array{Int64,2}:\\n 37   54\\n 81  118\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.fma\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.fma\",\n    \"category\": \"Function\",\n    \"text\": \"fma(x, y, z)\\n\\nComputes x*y+z without rounding the intermediate result x*y. On some systems this is significantly more expensive than x*y+z. fma is used to improve accuracy in certain algorithms. See muladd.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.muladd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.muladd\",\n    \"category\": \"Function\",\n    \"text\": \"muladd(x, y, z)\\n\\nCombined multiply-add, computes x*y+z in an efficient manner. This may on some systems be equivalent to x*y+z, or to fma(x,y,z). muladd is used to improve performance. See fma.\\n\\nExample\\n\\njulia> muladd(3, 2, 1)\\n7\\n\\njulia> 3 * 2 + 1\\n7\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.div\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.div\",\n    \"category\": \"Function\",\n    \"text\": \"div(x, y)\\n\u00f7(x, y)\\n\\nThe quotient from Euclidean division. Computes x/y, truncated to an integer.\\n\\njulia> 9 \u00f7 4\\n2\\n\\njulia> -5 \u00f7 3\\n-1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.fld\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.fld\",\n    \"category\": \"Function\",\n    \"text\": \"fld(x, y)\\n\\nLargest integer less than or equal to x/y.\\n\\njulia> fld(7.3,5.5)\\n1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.cld\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.cld\",\n    \"category\": \"Function\",\n    \"text\": \"cld(x, y)\\n\\nSmallest integer larger than or equal to x/y.\\n\\njulia> cld(5.5,2.2)\\n3.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.mod\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.mod\",\n    \"category\": \"Function\",\n    \"text\": \"mod(x, y)\\nrem(x, y, RoundDown)\\n\\nThe reduction of x modulo y, or equivalently, the remainder of x after floored division by y, i.e.\\n\\nx - y*fld(x,y)\\n\\nif computed without intermediate rounding.\\n\\nThe result will have the same sign as y, and magnitude less than abs(y) (with some exceptions, see note below).\\n\\nnote: Note\\nWhen used with floating point values, the exact result may not be representable by the type, and so rounding error may occur. In particular, if the exact result is very close to y, then it may be rounded to y.\\n\\njulia> mod(8, 3)\\n2\\n\\njulia> mod(9, 3)\\n0\\n\\njulia> mod(8.9, 3)\\n2.9000000000000004\\n\\njulia> mod(eps(), 3)\\n2.220446049250313e-16\\n\\njulia> mod(-eps(), 3)\\n3.0\\n\\n\\n\\nrem(x::Integer, T::Type{<:Integer}) -> T\\nmod(x::Integer, T::Type{<:Integer}) -> T\\n%(x::Integer, T::Type{<:Integer}) -> T\\n\\nFind y::T such that x \u2261 y (mod n), where n is the number of integers representable in T, and y is an integer in [typemin(T),typemax(T)]. If T can represent any integer (e.g. T == BigInt), then this operation corresponds to a conversion to T.\\n\\njulia> 129 % Int8\\n-127\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.rem\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.rem\",\n    \"category\": \"Function\",\n    \"text\": \"rem(x, y)\\n%(x, y)\\n\\nRemainder from Euclidean division, returning a value of the same sign as x, and smaller in magnitude than y. This value is always exact.\\n\\njulia> x = 15; y = 4;\\n\\njulia> x % y\\n3\\n\\njulia> x == div(x, y) * y + rem(x, y)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.rem2pi\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.rem2pi\",\n    \"category\": \"Function\",\n    \"text\": \"rem2pi(x, r::RoundingMode)\\n\\nCompute the remainder of x after integer division by 2\u03c0, with the quotient rounded according to the rounding mode r. In other words, the quantity\\n\\nx - 2\u03c0*round(x/(2\u03c0),r)\\n\\nwithout any intermediate rounding. This internally uses a high precision approximation of 2\u03c0, and so will give a more accurate result than rem(x,2\u03c0,r)\\n\\nif r == RoundNearest, then the result is in the interval - . This will generally be the most accurate result.\\nif r == RoundToZero, then the result is in the interval 0 2 if x is positive,. or -2 0 otherwise.\\nif r == RoundDown, then the result is in the interval 0 2.\\nif r == RoundUp, then the result is in the interval -2 0.\\n\\nExample\\n\\njulia> rem2pi(7pi/4, RoundNearest)\\n-0.7853981633974485\\n\\njulia> rem2pi(7pi/4, RoundDown)\\n5.497787143782138\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.mod2pi\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.mod2pi\",\n    \"category\": \"Function\",\n    \"text\": \"mod2pi(x)\\n\\nModulus after division by 2\u03c0, returning in the range 02).\\n\\nThis function computes a floating point representation of the modulus after division by numerically exact 2\u03c0, and is therefore not exactly the same as mod(x,2\u03c0), which would compute the modulus of x relative to division by the floating-point number 2\u03c0.\\n\\nExample\\n\\njulia> mod2pi(9*pi/4)\\n0.7853981633974481\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.divrem\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.divrem\",\n    \"category\": \"Function\",\n    \"text\": \"divrem(x, y)\\n\\nThe quotient and remainder from Euclidean division. Equivalent to (div(x,y), rem(x,y)) or (x\u00f7y, x%y).\\n\\njulia> divrem(3,7)\\n(0, 3)\\n\\njulia> divrem(7,3)\\n(2, 1)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.fldmod\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.fldmod\",\n    \"category\": \"Function\",\n    \"text\": \"fldmod(x, y)\\n\\nThe floored quotient and modulus after division. Equivalent to (fld(x,y), mod(x,y)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.fld1\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.fld1\",\n    \"category\": \"Function\",\n    \"text\": \"fld1(x, y)\\n\\nFlooring division, returning a value consistent with mod1(x,y)\\n\\nSee also: mod1.\\n\\njulia> x = 15; y = 4;\\n\\njulia> fld1(x, y)\\n4\\n\\njulia> x == fld(x, y) * y + mod(x, y)\\ntrue\\n\\njulia> x == (fld1(x, y) - 1) * y + mod1(x, y)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.mod1\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.mod1\",\n    \"category\": \"Function\",\n    \"text\": \"mod1(x, y)\\n\\nModulus after flooring division, returning a value r such that mod(r, y) == mod(x, y) in the range (0 y for positive y and in the range y0) for negative y.\\n\\njulia> mod1(4, 2)\\n2\\n\\njulia> mod1(4, 3)\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.fldmod1\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.fldmod1\",\n    \"category\": \"Function\",\n    \"text\": \"fldmod1(x, y)\\n\\nReturn (fld1(x,y), mod1(x,y)).\\n\\nSee also: fld1, mod1.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.://\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.://\",\n    \"category\": \"Function\",\n    \"text\": \"//(num, den)\\n\\nDivide two integers or rational numbers, giving a Rational result.\\n\\njulia> 3 // 5\\n3//5\\n\\njulia> (3 // 5) // (2 // 1)\\n3//10\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.rationalize\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.rationalize\",\n    \"category\": \"Function\",\n    \"text\": \"rationalize([T<:Integer=Int,] x; tol::Real=eps(x))\\n\\nApproximate floating point number x as a Rational number with components of the given integer type. The result will differ from x by no more than tol. If T is not provided, it defaults to Int.\\n\\njulia> rationalize(5.6)\\n28//5\\n\\njulia> a = rationalize(BigInt, 10.3)\\n103//10\\n\\njulia> typeof(numerator(a))\\nBigInt\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.numerator\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.numerator\",\n    \"category\": \"Function\",\n    \"text\": \"numerator(x)\\n\\nNumerator of the rational representation of x.\\n\\njulia> numerator(2//3)\\n2\\n\\njulia> numerator(4)\\n4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.denominator\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.denominator\",\n    \"category\": \"Function\",\n    \"text\": \"denominator(x)\\n\\nDenominator of the rational representation of x.\\n\\njulia> denominator(2//3)\\n3\\n\\njulia> denominator(4)\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:<<\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:<<\",\n    \"category\": \"Function\",\n    \"text\": \"<<(x, n)\\n\\nLeft bit shift operator, x << n. For n >= 0, the result is x shifted left by n bits, filling with 0s. This is equivalent to x * 2^n. For n < 0, this is equivalent to x >> -n.\\n\\njulia> Int8(3) << 2\\n12\\n\\njulia> bits(Int8(3))\\n\\\"00000011\\\"\\n\\njulia> bits(Int8(12))\\n\\\"00001100\\\"\\n\\nSee also >>, >>>.\\n\\n\\n\\n<<(B::BitVector, n) -> BitVector\\n\\nLeft bit shift operator, B << n. For n >= 0, the result is B with elements shifted n positions backwards, filling with false values. If n < 0, elements are shifted forwards. Equivalent to B >> -n.\\n\\nExamples\\n\\njulia> B = BitVector([true, false, true, false, false])\\n5-element BitArray{1}:\\n  true\\n false\\n  true\\n false\\n false\\n\\njulia> B << 1\\n5-element BitArray{1}:\\n false\\n  true\\n false\\n false\\n false\\n\\njulia> B << -1\\n5-element BitArray{1}:\\n false\\n  true\\n false\\n  true\\n false\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:>>\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:>>\",\n    \"category\": \"Function\",\n    \"text\": \">>(x, n)\\n\\nRight bit shift operator, x >> n. For n >= 0, the result is x shifted right by n bits, where n >= 0, filling with 0s if x >= 0, 1s if x < 0, preserving the sign of x. This is equivalent to fld(x, 2^n). For n < 0, this is equivalent to x << -n.\\n\\njulia> Int8(13) >> 2\\n3\\n\\njulia> bits(Int8(13))\\n\\\"00001101\\\"\\n\\njulia> bits(Int8(3))\\n\\\"00000011\\\"\\n\\njulia> Int8(-14) >> 2\\n-4\\n\\njulia> bits(Int8(-14))\\n\\\"11110010\\\"\\n\\njulia> bits(Int8(-4))\\n\\\"11111100\\\"\\n\\nSee also >>>, <<.\\n\\n\\n\\n>>(B::BitVector, n) -> BitVector\\n\\nRight bit shift operator, B >> n. For n >= 0, the result is B with elements shifted n positions forward, filling with false values. If n < 0, elements are shifted backwards. Equivalent to B << -n.\\n\\nExample\\n\\njulia> B = BitVector([true, false, true, false, false])\\n5-element BitArray{1}:\\n  true\\n false\\n  true\\n false\\n false\\n\\njulia> B >> 1\\n5-element BitArray{1}:\\n false\\n  true\\n false\\n  true\\n false\\n\\njulia> B >> -1\\n5-element BitArray{1}:\\n false\\n  true\\n false\\n false\\n false\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:>>>\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:>>>\",\n    \"category\": \"Function\",\n    \"text\": \">>>(x, n)\\n\\nUnsigned right bit shift operator, x >>> n. For n >= 0, the result is x shifted right by n bits, where n >= 0, filling with 0s. For n < 0, this is equivalent to x << -n.\\n\\nFor Unsigned integer types, this is equivalent to >>. For Signed integer types, this is equivalent to signed(unsigned(x) >> n).\\n\\njulia> Int8(-14) >>> 2\\n60\\n\\njulia> bits(Int8(-14))\\n\\\"11110010\\\"\\n\\njulia> bits(Int8(60))\\n\\\"00111100\\\"\\n\\nBigInts are treated as if having infinite size, so no filling is required and this is equivalent to >>.\\n\\nSee also >>, <<.\\n\\n\\n\\n>>>(B::BitVector, n) -> BitVector\\n\\nUnsigned right bitshift operator, B >>> n. Equivalent to B >> n. See >> for details and examples.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.colon\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.colon\",\n    \"category\": \"Function\",\n    \"text\": \"colon(start, [step], stop)\\n\\nCalled by : syntax for constructing ranges.\\n\\njulia> colon(1, 2, 5)\\n1:2:5\\n\\n\\n\\n:(start, [step], stop)\\n\\nRange operator. a:b constructs a range from a to b with a step size of 1, and a:s:b is similar but uses a step size of s. These syntaxes call the function colon. The colon is also used in indexing to select whole dimensions.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.range\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.range\",\n    \"category\": \"Function\",\n    \"text\": \"range(start, [step], length)\\n\\nConstruct a range by length, given a starting value and optional step (defaults to 1).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.OneTo\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.OneTo\",\n    \"category\": \"Type\",\n    \"text\": \"Base.OneTo(n)\\n\\nDefine an AbstractUnitRange that behaves like 1:n, with the added distinction that the lower limit is guaranteed (by the type system) to be 1.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.StepRangeLen\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.StepRangeLen\",\n    \"category\": \"Type\",\n    \"text\": \"StepRangeLen{T,R,S}(ref::R, step::S, len, [offset=1])\\n\\nA range r where r[i] produces values of type T, parametrized by a reference value, a step, and the length.  By default ref is the starting value r[1], but alternatively you can supply it as the value of r[offset] for some other index 1 <= offset <= len.  In conjunction with TwicePrecision this can be used to implement ranges that are free of roundoff error.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:==\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:==\",\n    \"category\": \"Function\",\n    \"text\": \"==(x, y)\\n\\nGeneric equality operator, giving a single Bool result. Falls back to ===. Should be implemented for all types with a notion of equality, based on the abstract value that an instance represents. For example, all numeric types are compared by numeric value, ignoring type. Strings are compared as sequences of characters, ignoring encoding.\\n\\nFollows IEEE semantics for floating-point numbers.\\n\\nCollections should generally implement == by calling == recursively on all contents.\\n\\nNew numeric types should implement this function for two arguments of the new type, and handle comparison to other types via promotion rules where possible.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:!=\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:!=\",\n    \"category\": \"Function\",\n    \"text\": \"!=(x, y)\\n\u2260(x,y)\\n\\nNot-equals comparison operator. Always gives the opposite answer as ==. New types should generally not implement this, and rely on the fallback definition !=(x,y) = !(x==y) instead.\\n\\njulia> 3 != 2\\ntrue\\n\\njulia> \\\"foo\\\" \u2260 \\\"foo\\\"\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:!==\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:!==\",\n    \"category\": \"Function\",\n    \"text\": \"!==(x, y)\\n\u2262(x,y)\\n\\nEquivalent to !(x === y).\\n\\njulia> a = [1, 2]; b = [1, 2];\\n\\njulia> a \u2262 b\\ntrue\\n\\njulia> a \u2262 a\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:<\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:<\",\n    \"category\": \"Function\",\n    \"text\": \"<(x, y)\\n\\nLess-than comparison operator. New numeric types should implement this function for two arguments of the new type. Because of the behavior of floating-point NaN values, < implements a partial order. Types with a canonical partial order should implement <, and types with a canonical total order should implement isless.\\n\\njulia> 'a' < 'b'\\ntrue\\n\\njulia> \\\"abc\\\" < \\\"abd\\\"\\ntrue\\n\\njulia> 5 < 3\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:<=\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:<=\",\n    \"category\": \"Function\",\n    \"text\": \"<=(x, y)\\n\u2264(x,y)\\n\\nLess-than-or-equals comparison operator.\\n\\njulia> 'a' <= 'b'\\ntrue\\n\\njulia> 7 \u2264 7 \u2264 9\\ntrue\\n\\njulia> \\\"abc\\\" \u2264 \\\"abc\\\"\\ntrue\\n\\njulia> 5 <= 3\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:>\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:>\",\n    \"category\": \"Function\",\n    \"text\": \">(x, y)\\n\\nGreater-than comparison operator. Generally, new types should implement < instead of this function, and rely on the fallback definition >(x, y) = y < x.\\n\\njulia> 'a' > 'b'\\nfalse\\n\\njulia> 7 > 3 > 1\\ntrue\\n\\njulia> \\\"abc\\\" > \\\"abd\\\"\\nfalse\\n\\njulia> 5 > 3\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:>=\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:>=\",\n    \"category\": \"Function\",\n    \"text\": \">=(x, y)\\n\u2265(x,y)\\n\\nGreater-than-or-equals comparison operator.\\n\\njulia> 'a' >= 'b'\\nfalse\\n\\njulia> 7 \u2265 7 \u2265 3\\ntrue\\n\\njulia> \\\"abc\\\" \u2265 \\\"abc\\\"\\ntrue\\n\\njulia> 5 >= 3\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.cmp\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.cmp\",\n    \"category\": \"Function\",\n    \"text\": \"cmp(x,y)\\n\\nReturn -1, 0, or 1 depending on whether x is less than, equal to, or greater than y, respectively. Uses the total order implemented by isless. For floating-point numbers, uses < but throws an error for unordered arguments.\\n\\njulia> cmp(1, 2)\\n-1\\n\\njulia> cmp(2, 1)\\n1\\n\\njulia> cmp(2+im, 3-im)\\nERROR: MethodError: no method matching isless(::Complex{Int64}, ::Complex{Int64})\\n[...]\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:~\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:~\",\n    \"category\": \"Function\",\n    \"text\": \"~(x)\\n\\nBitwise not.\\n\\nExamples\\n\\njulia> ~4\\n-5\\n\\njulia> ~10\\n-11\\n\\njulia> ~true\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:&\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:&\",\n    \"category\": \"Function\",\n    \"text\": \"&(x, y)\\n\\nBitwise and.\\n\\nExamples\\n\\njulia> 4 & 10\\n0\\n\\njulia> 4 & 12\\n4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:|\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:|\",\n    \"category\": \"Function\",\n    \"text\": \"|(x, y)\\n\\nBitwise or.\\n\\nExamples\\n\\njulia> 4 | 10\\n14\\n\\njulia> 4 | 1\\n5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.xor\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.xor\",\n    \"category\": \"Function\",\n    \"text\": \"xor(x, y)\\n\u22bb(x, y)\\n\\nBitwise exclusive or of x and y.  The infix operation a \u22bb b is a synonym for xor(a,b), and \u22bb can be typed by tab-completing \\\\xor or \\\\veebar in the Julia REPL.\\n\\njulia> [true; true; false] .\u22bb [true; false; false]\\n3-element BitArray{1}:\\n false\\n  true\\n false\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.:!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.:!\",\n    \"category\": \"Function\",\n    \"text\": \"!(x)\\n\\nBoolean not.\\n\\njulia> !true\\nfalse\\n\\njulia> !false\\ntrue\\n\\njulia> .![true false true]\\n1\u00d73 BitArray{2}:\\n false  true  false\\n\\n\\n\\n!f::Function\\n\\nPredicate function negation: when the argument of ! is a function, it returns a function which computes the boolean negation of f. Example:\\n\\njulia> str = \\\"\u2200 \u03b5 > 0, \u2203 \u03b4 > 0: |x-y| < \u03b4 \u21d2 |f(x)-f(y)| < \u03b5\\\"\\n\\\"\u2200 \u03b5 > 0, \u2203 \u03b4 > 0: |x-y| < \u03b4 \u21d2 |f(x)-f(y)| < \u03b5\\\"\\n\\njulia> filter(isalpha, str)\\n\\\"\u03b5\u03b4xy\u03b4fxfy\u03b5\\\"\\n\\njulia> filter(!isalpha, str)\\n\\\"\u2200  > 0, \u2203  > 0: |-| <  \u21d2 |()-()| < \\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#&&\",\n    \"page\": \"Mathematics\",\n    \"title\": \"&&\",\n    \"category\": \"Keyword\",\n    \"text\": \"x && y\\n\\nShort-circuiting boolean AND.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#||\",\n    \"page\": \"Mathematics\",\n    \"title\": \"||\",\n    \"category\": \"Keyword\",\n    \"text\": \"x || y\\n\\nShort-circuiting boolean OR.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#math-ops-1\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Mathematical Operators\",\n    \"category\": \"section\",\n    \"text\": \"Base.:-(::Any)\\nBase.:(+)\\nBase.:-(::Any, ::Any)\\nBase.:*(::Any, ::Any...)\\nBase.:(/)\\nBase.:\\\\(::Any, ::Any)\\nBase.:^(::Number, ::Number)\\nBase.fma\\nBase.muladd\\nBase.div\\nBase.fld\\nBase.cld\\nBase.mod\\nBase.rem\\nBase.rem2pi\\nBase.Math.mod2pi\\nBase.divrem\\nBase.fldmod\\nBase.fld1\\nBase.mod1\\nBase.fldmod1\\nBase.:(//)\\nBase.rationalize\\nBase.numerator\\nBase.denominator\\nBase.:(<<)\\nBase.:(>>)\\nBase.:(>>>)\\nBase.colon\\nBase.range\\nBase.OneTo\\nBase.StepRangeLen\\nBase.:(==)\\nBase.:(!=)\\nBase.:(!==)\\nBase.:(<)\\nBase.:(<=)\\nBase.:(>)\\nBase.:(>=)\\nBase.cmp\\nBase.:(~)\\nBase.:(&)\\nBase.:(|)\\nBase.xor\\nBase.:(!)\\n&&\\n||\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.isapprox\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.isapprox\",\n    \"category\": \"Function\",\n    \"text\": \"isapprox(x, y; rtol::Real=sqrt(eps), atol::Real=0, nans::Bool=false, norm::Function)\\n\\nInexact equality comparison: true if norm(x-y) <= atol + rtol*max(norm(x), norm(y)). The default atol is zero and the default rtol depends on the types of x and y. The keyword argument nans determines whether or not NaN values are considered equal (defaults to false).\\n\\nFor real or complex floating-point values, rtol defaults to sqrt(eps(typeof(real(x-y)))). This corresponds to requiring equality of about half of the significand digits. For other types, rtol defaults to zero.\\n\\nx and y may also be arrays of numbers, in which case norm defaults to vecnorm but may be changed by passing a norm::Function keyword argument. (For numbers, norm is the same thing as abs.) When x and y are arrays, if norm(x-y) is not finite (i.e. \u00b1Inf or NaN), the comparison falls back to checking whether all elements of x and y are approximately equal component-wise.\\n\\nThe binary operator \u2248 is equivalent to isapprox with the default arguments, and x \u2249 y is equivalent to !isapprox(x,y).\\n\\njulia> 0.1 \u2248 (0.1 - 1e-10)\\ntrue\\n\\njulia> isapprox(10, 11; atol = 2)\\ntrue\\n\\njulia> isapprox([10.0^9, 1.0], [10.0^9, 2.0])\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.sin\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.sin\",\n    \"category\": \"Function\",\n    \"text\": \"sin(x)\\n\\nCompute sine of x, where x is in radians.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.cos\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.cos\",\n    \"category\": \"Function\",\n    \"text\": \"cos(x)\\n\\nCompute cosine of x, where x is in radians.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.tan\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.tan\",\n    \"category\": \"Function\",\n    \"text\": \"tan(x)\\n\\nCompute tangent of x, where x is in radians.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.sind\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.sind\",\n    \"category\": \"Function\",\n    \"text\": \"sind(x)\\n\\nCompute sine of x, where x is in degrees. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.cosd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.cosd\",\n    \"category\": \"Function\",\n    \"text\": \"cosd(x)\\n\\nCompute cosine of x, where x is in degrees. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.tand\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.tand\",\n    \"category\": \"Function\",\n    \"text\": \"tand(x)\\n\\nCompute tangent of x, where x is in degrees. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.sinpi\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.sinpi\",\n    \"category\": \"Function\",\n    \"text\": \"sinpi(x)\\n\\nCompute sin(pi x) more accurately than sin(pi*x), especially for large x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.cospi\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.cospi\",\n    \"category\": \"Function\",\n    \"text\": \"cospi(x)\\n\\nCompute cos(pi x) more accurately than cos(pi*x), especially for large x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.sinh\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.sinh\",\n    \"category\": \"Function\",\n    \"text\": \"sinh(x)\\n\\nCompute hyperbolic sine of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.cosh\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.cosh\",\n    \"category\": \"Function\",\n    \"text\": \"cosh(x)\\n\\nCompute hyperbolic cosine of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.tanh\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.tanh\",\n    \"category\": \"Function\",\n    \"text\": \"tanh(x)\\n\\nCompute hyperbolic tangent of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.asin\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.asin\",\n    \"category\": \"Function\",\n    \"text\": \"asin(x)\\n\\nCompute the inverse sine of x, where the output is in radians.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.acos\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.acos\",\n    \"category\": \"Function\",\n    \"text\": \"acos(x)\\n\\nCompute the inverse cosine of x, where the output is in radians\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.atan\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.atan\",\n    \"category\": \"Function\",\n    \"text\": \"atan(x)\\n\\nCompute the inverse tangent of x, where the output is in radians.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.atan2\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.atan2\",\n    \"category\": \"Function\",\n    \"text\": \"atan2(y, x)\\n\\nCompute the inverse tangent of y/x, using the signs of both x and y to determine the quadrant of the return value.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.asind\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.asind\",\n    \"category\": \"Function\",\n    \"text\": \"asind(x)\\n\\nCompute the inverse sine of x, where the output is in degrees. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.acosd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.acosd\",\n    \"category\": \"Function\",\n    \"text\": \"acosd(x)\\n\\nCompute the inverse cosine of x, where the output is in degrees. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.atand\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.atand\",\n    \"category\": \"Function\",\n    \"text\": \"atand(x)\\n\\nCompute the inverse tangent of x, where the output is in degrees. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.sec\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.sec\",\n    \"category\": \"Function\",\n    \"text\": \"sec(x)\\n\\nCompute the secant of x, where x is in radians.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.csc\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.csc\",\n    \"category\": \"Function\",\n    \"text\": \"csc(x)\\n\\nCompute the cosecant of x, where x is in radians.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.cot\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.cot\",\n    \"category\": \"Function\",\n    \"text\": \"cot(x)\\n\\nCompute the cotangent of x, where x is in radians.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.secd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.secd\",\n    \"category\": \"Function\",\n    \"text\": \"secd(x)\\n\\nCompute the secant of x, where x is in degrees.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.cscd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.cscd\",\n    \"category\": \"Function\",\n    \"text\": \"cscd(x)\\n\\nCompute the cosecant of x, where x is in degrees.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.cotd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.cotd\",\n    \"category\": \"Function\",\n    \"text\": \"cotd(x)\\n\\nCompute the cotangent of x, where x is in degrees.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.asec\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.asec\",\n    \"category\": \"Function\",\n    \"text\": \"asec(x)\\n\\nCompute the inverse secant of x, where the output is in radians. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.acsc\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.acsc\",\n    \"category\": \"Function\",\n    \"text\": \"acsc(x)\\n\\nCompute the inverse cosecant of x, where the output is in radians. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.acot\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.acot\",\n    \"category\": \"Function\",\n    \"text\": \"acot(x)\\n\\nCompute the inverse cotangent of x, where the output is in radians. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.asecd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.asecd\",\n    \"category\": \"Function\",\n    \"text\": \"asecd(x)\\n\\nCompute the inverse secant of x, where the output is in degrees. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.acscd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.acscd\",\n    \"category\": \"Function\",\n    \"text\": \"acscd(x)\\n\\nCompute the inverse cosecant of x, where the output is in degrees. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.acotd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.acotd\",\n    \"category\": \"Function\",\n    \"text\": \"acotd(x)\\n\\nCompute the inverse cotangent of x, where the output is in degrees. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.sech\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.sech\",\n    \"category\": \"Function\",\n    \"text\": \"sech(x)\\n\\nCompute the hyperbolic secant of x\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.csch\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.csch\",\n    \"category\": \"Function\",\n    \"text\": \"csch(x)\\n\\nCompute the hyperbolic cosecant of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.coth\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.coth\",\n    \"category\": \"Function\",\n    \"text\": \"coth(x)\\n\\nCompute the hyperbolic cotangent of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.asinh\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.asinh\",\n    \"category\": \"Function\",\n    \"text\": \"asinh(x)\\n\\nCompute the inverse hyperbolic sine of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.acosh\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.acosh\",\n    \"category\": \"Function\",\n    \"text\": \"acosh(x)\\n\\nCompute the inverse hyperbolic cosine of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.atanh\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.atanh\",\n    \"category\": \"Function\",\n    \"text\": \"atanh(x)\\n\\nCompute the inverse hyperbolic tangent of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.asech\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.asech\",\n    \"category\": \"Function\",\n    \"text\": \"asech(x)\\n\\nCompute the inverse hyperbolic secant of x. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.acsch\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.acsch\",\n    \"category\": \"Function\",\n    \"text\": \"acsch(x)\\n\\nCompute the inverse hyperbolic cosecant of x. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.acoth\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.acoth\",\n    \"category\": \"Function\",\n    \"text\": \"acoth(x)\\n\\nCompute the inverse hyperbolic cotangent of x. \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.sinc\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.sinc\",\n    \"category\": \"Function\",\n    \"text\": \"sinc(x)\\n\\nCompute sin(pi x)  (pi x) if x neq 0, and 1 if x = 0.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.cosc\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.cosc\",\n    \"category\": \"Function\",\n    \"text\": \"cosc(x)\\n\\nCompute cos(pi x)  x - sin(pi x)  (pi x^2) if x neq 0, and 0 if x = 0. This is the derivative of sinc(x).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.deg2rad\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.deg2rad\",\n    \"category\": \"Function\",\n    \"text\": \"deg2rad(x)\\n\\nConvert x from degrees to radians.\\n\\njulia> deg2rad(90)\\n1.5707963267948966\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.rad2deg\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.rad2deg\",\n    \"category\": \"Function\",\n    \"text\": \"rad2deg(x)\\n\\nConvert x from radians to degrees.\\n\\njulia> rad2deg(pi)\\n180.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.hypot\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.hypot\",\n    \"category\": \"Function\",\n    \"text\": \"hypot(x, y)\\n\\nCompute the hypotenuse sqrtx^2+y^2 avoiding overflow and underflow.\\n\\nExamples\\n\\njulia> a = 10^10;\\n\\njulia> hypot(a, a)\\n1.4142135623730951e10\\n\\njulia> \u221a(a^2 + a^2) # a^2 overflows\\nERROR: DomainError:\\nsqrt will only return a complex result if called with a complex argument. Try sqrt(complex(x)).\\nStacktrace:\\n [1] sqrt(::Int64) at ./math.jl:434\\n\\n\\n\\nhypot(x...)\\n\\nCompute the hypotenuse sqrtsum x_i^2 avoiding overflow and underflow.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.log-Tuple{Any}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.log\",\n    \"category\": \"Method\",\n    \"text\": \"log(x)\\n\\nCompute the natural logarithm of x. Throws DomainError for negative Real arguments. Use complex negative arguments to obtain complex results.\\n\\nThere is an experimental variant in the Base.Math.JuliaLibm module, which is typically faster and more accurate.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.log-Tuple{Number,Number}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.log\",\n    \"category\": \"Method\",\n    \"text\": \"log(b,x)\\n\\nCompute the base b logarithm of x. Throws DomainError for negative Real arguments.\\n\\njulia> log(4,8)\\n1.5\\n\\njulia> log(4,2)\\n0.5\\n\\nnote: Note\\nIf b is a power of 2 or 10, log2 or log10 should be used, as these will typically be faster and more accurate. For example,julia> log(100,1000000)\\n2.9999999999999996\\n\\njulia> log10(1000000)/2\\n3.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.log2\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.log2\",\n    \"category\": \"Function\",\n    \"text\": \"log2(x)\\n\\nCompute the logarithm of x to base 2. Throws DomainError for negative Real arguments.\\n\\nExample\\n\\njulia> log2(4)\\n2.0\\n\\njulia> log2(10)\\n3.321928094887362\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.log10\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.log10\",\n    \"category\": \"Function\",\n    \"text\": \"log10(x)\\n\\nCompute the logarithm of x to base 10. Throws DomainError for negative Real arguments.\\n\\nExample\\n\\njulia> log10(100)\\n2.0\\n\\njulia> log10(2)\\n0.3010299956639812\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.log1p\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.log1p\",\n    \"category\": \"Function\",\n    \"text\": \"log1p(x)\\n\\nAccurate natural logarithm of 1+x. Throws DomainError for Real arguments less than -1.\\n\\nThere is an experimental variant in the Base.Math.JuliaLibm module, which is typically faster and more accurate.\\n\\nExamples\\n\\njulia> log1p(-0.5)\\n-0.6931471805599453\\n\\njulia> log1p(0)\\n0.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.frexp\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.frexp\",\n    \"category\": \"Function\",\n    \"text\": \"frexp(val)\\n\\nReturn (x,exp) such that x has a magnitude in the interval 12 1) or 0, and val is equal to x times 2^exp.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.exp\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.exp\",\n    \"category\": \"Function\",\n    \"text\": \"exp(x)\\n\\nCompute the natural base exponential of x, in other words e^x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.exp2\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.exp2\",\n    \"category\": \"Function\",\n    \"text\": \"exp2(x)\\n\\nCompute 2^x.\\n\\njulia> exp2(5)\\n32.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.exp10\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.exp10\",\n    \"category\": \"Function\",\n    \"text\": \"exp10(x)\\n\\nCompute 10^x.\\n\\nExamples\\n\\njulia> exp10(2)\\n100.0\\n\\njulia> exp10(0.2)\\n1.5848931924611136\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.ldexp\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.ldexp\",\n    \"category\": \"Function\",\n    \"text\": \"ldexp(x, n)\\n\\nCompute x times 2^n.\\n\\nExample\\n\\njulia> ldexp(5., 2)\\n20.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.modf\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.modf\",\n    \"category\": \"Function\",\n    \"text\": \"modf(x)\\n\\nReturn a tuple (fpart,ipart) of the fractional and integral parts of a number. Both parts have the same sign as the argument.\\n\\nExample\\n\\njulia> modf(3.5)\\n(0.5, 3.0)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.expm1\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.expm1\",\n    \"category\": \"Function\",\n    \"text\": \"expm1(x)\\n\\nAccurately compute e^x-1.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.round-Tuple{Type,Any}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.round\",\n    \"category\": \"Method\",\n    \"text\": \"round([T,] x, [digits, [base]], [r::RoundingMode])\\n\\nRounds x to an integer value according to the provided RoundingMode, returning a value of the same type as x. When not specifying a rounding mode the global mode will be used (see rounding), which by default is round to the nearest integer (RoundNearest mode), with ties (fractional values of 0.5) being rounded to the nearest even integer.\\n\\njulia> round(1.7)\\n2.0\\n\\njulia> round(1.5)\\n2.0\\n\\njulia> round(2.5)\\n2.0\\n\\nThe optional RoundingMode argument will change how the number gets rounded.\\n\\nround(T, x, [r::RoundingMode]) converts the result to type T, throwing an InexactError if the value is not representable.\\n\\nround(x, digits) rounds to the specified number of digits after the decimal place (or before if negative). round(x, digits, base) rounds using a base other than 10.\\n\\njulia> round(pi, 2)\\n3.14\\n\\njulia> round(pi, 3, 2)\\n3.125\\n\\nnote: Note\\nRounding to specified digits in bases other than 2 can be inexact when operating on binary floating point numbers. For example, the Float64 value represented by 1.15 is actually less than 1.15, yet will be rounded to 1.2.julia> x = 1.15\\n1.15\\n\\njulia> @sprintf \\\"%.20f\\\" x\\n\\\"1.14999999999999991118\\\"\\n\\njulia> x < 115//100\\ntrue\\n\\njulia> round(x, 1)\\n1.2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Rounding.RoundingMode\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Rounding.RoundingMode\",\n    \"category\": \"Type\",\n    \"text\": \"RoundingMode\\n\\nA type used for controlling the rounding mode of floating point operations (via rounding/setrounding functions), or as optional arguments for rounding to the nearest integer (via the round function).\\n\\nCurrently supported rounding modes are:\\n\\nRoundNearest (default)\\nRoundNearestTiesAway\\nRoundNearestTiesUp\\nRoundToZero\\nRoundFromZero (BigFloat only)\\nRoundUp\\nRoundDown\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Rounding.RoundNearest\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Rounding.RoundNearest\",\n    \"category\": \"Constant\",\n    \"text\": \"RoundNearest\\n\\nThe default rounding mode. Rounds to the nearest integer, with ties (fractional values of 0.5) being rounded to the nearest even integer.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Rounding.RoundNearestTiesAway\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Rounding.RoundNearestTiesAway\",\n    \"category\": \"Constant\",\n    \"text\": \"RoundNearestTiesAway\\n\\nRounds to nearest integer, with ties rounded away from zero (C/C++ round behaviour).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Rounding.RoundNearestTiesUp\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Rounding.RoundNearestTiesUp\",\n    \"category\": \"Constant\",\n    \"text\": \"RoundNearestTiesUp\\n\\nRounds to nearest integer, with ties rounded toward positive infinity (Java/JavaScript round behaviour).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Rounding.RoundToZero\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Rounding.RoundToZero\",\n    \"category\": \"Constant\",\n    \"text\": \"RoundToZero\\n\\nround using this rounding mode is an alias for trunc.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Rounding.RoundUp\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Rounding.RoundUp\",\n    \"category\": \"Constant\",\n    \"text\": \"RoundUp\\n\\nround using this rounding mode is an alias for ceil.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Rounding.RoundDown\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Rounding.RoundDown\",\n    \"category\": \"Constant\",\n    \"text\": \"RoundDown\\n\\nround using this rounding mode is an alias for floor.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.round-Union{Tuple{Complex{T},RoundingMode{MR},RoundingMode{MI}}, Tuple{MI}, Tuple{MR}, Tuple{T}} where MI where MR where T<:AbstractFloat\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.round\",\n    \"category\": \"Method\",\n    \"text\": \"round(z, RoundingModeReal, RoundingModeImaginary)\\n\\nReturns the nearest integral value of the same type as the complex-valued z to z, breaking ties using the specified RoundingModes. The first RoundingMode is used for rounding the real components while the second is used for rounding the imaginary components.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.ceil\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.ceil\",\n    \"category\": \"Function\",\n    \"text\": \"ceil([T,] x, [digits, [base]])\\n\\nceil(x) returns the nearest integral value of the same type as x that is greater than or equal to x.\\n\\nceil(T, x) converts the result to type T, throwing an InexactError if the value is not representable.\\n\\ndigits and base work as for round.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.floor\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.floor\",\n    \"category\": \"Function\",\n    \"text\": \"floor([T,] x, [digits, [base]])\\n\\nfloor(x) returns the nearest integral value of the same type as x that is less than or equal to x.\\n\\nfloor(T, x) converts the result to type T, throwing an InexactError if the value is not representable.\\n\\ndigits and base work as for round.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.trunc\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.trunc\",\n    \"category\": \"Function\",\n    \"text\": \"trunc([T,] x, [digits, [base]])\\n\\ntrunc(x) returns the nearest integral value of the same type as x whose absolute value is less than or equal to x.\\n\\ntrunc(T, x) converts the result to type T, throwing an InexactError if the value is not representable.\\n\\ndigits and base work as for round.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.unsafe_trunc\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.unsafe_trunc\",\n    \"category\": \"Function\",\n    \"text\": \"unsafe_trunc(T, x)\\n\\nunsafe_trunc(T, x) returns the nearest integral value of type T whose absolute value is less than or equal to x. If the value is not representable by T, an arbitrary value will be returned.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.signif\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.signif\",\n    \"category\": \"Function\",\n    \"text\": \"signif(x, digits, [base])\\n\\nRounds (in the sense of round) x so that there are digits significant digits, under a base base representation, default 10. E.g., signif(123.456, 2) is 120.0, and signif(357.913, 4, 2) is 352.0.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.min\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.min\",\n    \"category\": \"Function\",\n    \"text\": \"min(x, y, ...)\\n\\nReturn the minimum of the arguments. See also the minimum function to take the minimum element from a collection.\\n\\njulia> min(2, 5, 1)\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.max\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.max\",\n    \"category\": \"Function\",\n    \"text\": \"max(x, y, ...)\\n\\nReturn the maximum of the arguments. See also the maximum function to take the maximum element from a collection.\\n\\njulia> max(2, 5, 1)\\n5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.minmax\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.minmax\",\n    \"category\": \"Function\",\n    \"text\": \"minmax(x, y)\\n\\nReturn (min(x,y), max(x,y)). See also: extrema that returns (minimum(x), maximum(x)).\\n\\njulia> minmax('c','b')\\n('b', 'c')\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.clamp\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.clamp\",\n    \"category\": \"Function\",\n    \"text\": \"clamp(x, lo, hi)\\n\\nReturn x if lo <= x <= hi. If x < lo, return lo. If x > hi, return hi. Arguments are promoted to a common type.\\n\\njulia> clamp.([pi, 1.0, big(10.)], 2., 9.)\\n3-element Array{BigFloat,1}:\\n 3.141592653589793238462643383279502884197169399375105820974944592307816406286198\\n 2.000000000000000000000000000000000000000000000000000000000000000000000000000000\\n 9.000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.clamp!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.clamp!\",\n    \"category\": \"Function\",\n    \"text\": \"clamp!(array::AbstractArray, lo, hi)\\n\\nRestrict values in array to the specified range, in-place. See also clamp.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.abs\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.abs\",\n    \"category\": \"Function\",\n    \"text\": \"abs(x)\\n\\nThe absolute value of x.\\n\\nWhen abs is applied to signed integers, overflow may occur, resulting in the return of a negative value. This overflow occurs only when abs is applied to the minimum representable value of a signed integer. That is, when x == typemin(typeof(x)), abs(x) == x < 0, not -x as might be expected.\\n\\njulia> abs(-3)\\n3\\n\\njulia> abs(1 + im)\\n1.4142135623730951\\n\\njulia> abs(typemin(Int64))\\n-9223372036854775808\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_abs\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_abs\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_abs(x)\\n\\nCalculates abs(x), checking for overflow errors where applicable. For example, standard two's complement signed integers (e.g. Int) cannot represent abs(typemin(Int)), thus leading to an overflow.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_neg\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_neg\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_neg(x)\\n\\nCalculates -x, checking for overflow errors where applicable. For example, standard two's complement signed integers (e.g. Int) cannot represent -typemin(Int), thus leading to an overflow.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_add\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_add\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_add(x, y)\\n\\nCalculates x+y, checking for overflow errors where applicable.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_sub\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_sub\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_sub(x, y)\\n\\nCalculates x-y, checking for overflow errors where applicable.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_mul\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_mul\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_mul(x, y)\\n\\nCalculates x*y, checking for overflow errors where applicable.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_div\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_div\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_div(x, y)\\n\\nCalculates div(x,y), checking for overflow errors where applicable.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_rem\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_rem\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_rem(x, y)\\n\\nCalculates x%y, checking for overflow errors where applicable.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_fld\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_fld\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_fld(x, y)\\n\\nCalculates fld(x,y), checking for overflow errors where applicable.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_mod\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_mod\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_mod(x, y)\\n\\nCalculates mod(x,y), checking for overflow errors where applicable.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.checked_cld\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.checked_cld\",\n    \"category\": \"Function\",\n    \"text\": \"Base.checked_cld(x, y)\\n\\nCalculates cld(x,y), checking for overflow errors where applicable.\\n\\nThe overflow protection may impose a perceptible performance penalty.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.add_with_overflow\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.add_with_overflow\",\n    \"category\": \"Function\",\n    \"text\": \"Base.add_with_overflow(x, y) -> (r, f)\\n\\nCalculates r = x+y, with the flag f indicating whether overflow has occurred.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.sub_with_overflow\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.sub_with_overflow\",\n    \"category\": \"Function\",\n    \"text\": \"Base.sub_with_overflow(x, y) -> (r, f)\\n\\nCalculates r = x-y, with the flag f indicating whether overflow has occurred.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Checked.mul_with_overflow\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Checked.mul_with_overflow\",\n    \"category\": \"Function\",\n    \"text\": \"Base.mul_with_overflow(x, y) -> (r, f)\\n\\nCalculates r = x*y, with the flag f indicating whether overflow has occurred.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.abs2\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.abs2\",\n    \"category\": \"Function\",\n    \"text\": \"abs2(x)\\n\\nSquared absolute value of x.\\n\\njulia> abs2(-3)\\n9\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.copysign\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.copysign\",\n    \"category\": \"Function\",\n    \"text\": \"copysign(x, y) -> z\\n\\nReturn z which has the magnitude of x and the same sign as y.\\n\\nExamples\\n\\njulia> copysign(1, -2)\\n-1\\n\\njulia> copysign(-1, 2)\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.sign\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.sign\",\n    \"category\": \"Function\",\n    \"text\": \"sign(x)\\n\\nReturn zero if x==0 and xx otherwise (i.e., \u00b11 for real x).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.signbit\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.signbit\",\n    \"category\": \"Function\",\n    \"text\": \"signbit(x)\\n\\nReturns true if the value of the sign of x is negative, otherwise false.\\n\\nExamples\\n\\njulia> signbit(-4)\\ntrue\\n\\njulia> signbit(5)\\nfalse\\n\\njulia> signbit(5.5)\\nfalse\\n\\njulia> signbit(-4.1)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.flipsign\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.flipsign\",\n    \"category\": \"Function\",\n    \"text\": \"flipsign(x, y)\\n\\nReturn x with its sign flipped if y is negative. For example abs(x) = flipsign(x,x).\\n\\njulia> flipsign(5, 3)\\n5\\n\\njulia> flipsign(5, -3)\\n-5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.sqrt\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.sqrt\",\n    \"category\": \"Function\",\n    \"text\": \"sqrt(x)\\n\\nReturn sqrtx. Throws DomainError for negative Real arguments. Use complex negative arguments instead. The prefix operator \u221a is equivalent to sqrt.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.isqrt\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.isqrt\",\n    \"category\": \"Function\",\n    \"text\": \"isqrt(n::Integer)\\n\\nInteger square root: the largest integer m such that m*m <= n.\\n\\njulia> isqrt(5)\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.cbrt\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.cbrt\",\n    \"category\": \"Function\",\n    \"text\": \"cbrt(x::Real)\\n\\nReturn the cube root of x, i.e. x^13. Negative values are accepted (returning the negative real root when x  0).\\n\\nThe prefix operator \u221b is equivalent to cbrt.\\n\\njulia> cbrt(big(27))\\n3.000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.real-Tuple{Complex}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.real\",\n    \"category\": \"Method\",\n    \"text\": \"real(z)\\n\\nReturn the real part of the complex number z.\\n\\njulia> real(1 + 3im)\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.imag\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.imag\",\n    \"category\": \"Function\",\n    \"text\": \"imag(z)\\n\\nReturn the imaginary part of the complex number z.\\n\\njulia> imag(1 + 3im)\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.reim\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.reim\",\n    \"category\": \"Function\",\n    \"text\": \"reim(z)\\n\\nReturn both the real and imaginary parts of the complex number z.\\n\\njulia> reim(1 + 3im)\\n(1, 3)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.conj\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.conj\",\n    \"category\": \"Function\",\n    \"text\": \"conj(z)\\n\\nCompute the complex conjugate of a complex number z.\\n\\njulia> conj(1 + 3im)\\n1 - 3im\\n\\n\\n\\nconj(v::RowVector)\\n\\nReturns a ConjArray lazy view of the input, where each element is conjugated.\\n\\nExample\\n\\njulia> v = [1+im, 1-im].'\\n1\u00d72 RowVector{Complex{Int64},Array{Complex{Int64},1}}:\\n 1+1im  1-1im\\n\\njulia> conj(v)\\n1\u00d72 RowVector{Complex{Int64},ConjArray{Complex{Int64},1,Array{Complex{Int64},1}}}:\\n 1-1im  1+1im\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.angle\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.angle\",\n    \"category\": \"Function\",\n    \"text\": \"angle(z)\\n\\nCompute the phase angle in radians of a complex number z.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.cis\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.cis\",\n    \"category\": \"Function\",\n    \"text\": \"cis(z)\\n\\nReturn exp(iz).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.binomial\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.binomial\",\n    \"category\": \"Function\",\n    \"text\": \"binomial(n, k)\\n\\nNumber of ways to choose k out of n items.\\n\\nExample\\n\\njulia> binomial(5, 3)\\n10\\n\\njulia> factorial(5) \u00f7 (factorial(5-3) * factorial(3))\\n10\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.factorial\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.factorial\",\n    \"category\": \"Function\",\n    \"text\": \"factorial(n)\\n\\nFactorial of n. If n is an Integer, the factorial is computed as an integer (promoted to at least 64 bits). Note that this may overflow if n is not small, but you can use factorial(big(n)) to compute the result exactly in arbitrary precision. If n is not an Integer, factorial(n) is equivalent to gamma(n+1).\\n\\njulia> factorial(6)\\n720\\n\\njulia> factorial(21)\\nERROR: OverflowError()\\n[...]\\n\\njulia> factorial(21.0)\\n5.109094217170944e19\\n\\njulia> factorial(big(21))\\n51090942171709440000\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.gcd\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.gcd\",\n    \"category\": \"Function\",\n    \"text\": \"gcd(x,y)\\n\\nGreatest common (positive) divisor (or zero if x and y are both zero).\\n\\nExamples\\n\\njulia> gcd(6,9)\\n3\\n\\njulia> gcd(6,-9)\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.lcm\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.lcm\",\n    \"category\": \"Function\",\n    \"text\": \"lcm(x,y)\\n\\nLeast common (non-negative) multiple.\\n\\nExamples\\n\\njulia> lcm(2,3)\\n6\\n\\njulia> lcm(-2,3)\\n6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.gcdx\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.gcdx\",\n    \"category\": \"Function\",\n    \"text\": \"gcdx(x,y)\\n\\nComputes the greatest common (positive) divisor of x and y and their B\u00e9zout coefficients, i.e. the integer coefficients u and v that satisfy ux+vy = d = gcd(xy). gcdx(xy) returns (duv).\\n\\nExamples\\n\\njulia> gcdx(12, 42)\\n(6, -3, 1)\\n\\njulia> gcdx(240, 46)\\n(2, -9, 47)\\n\\nnote: Note\\nB\u00e9zout coefficients are not uniquely defined. gcdx returns the minimal B\u00e9zout coefficients that are computed by the extended Euclidean algorithm. (Ref: D. Knuth, TAoCP, 2/e, p. 325, Algorithm X.) For signed integers, these coefficients u and v are minimal in the sense that u  yd and v  xd. Furthermore, the signs of u and v are chosen so that d is positive. For unsigned integers, the coefficients u and v might be near their typemax, and the identity then holds only via the unsigned integers' modulo arithmetic.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.ispow2\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.ispow2\",\n    \"category\": \"Function\",\n    \"text\": \"ispow2(n::Integer) -> Bool\\n\\nTest whether n is a power of two.\\n\\nExamples\\n\\njulia> ispow2(4)\\ntrue\\n\\njulia> ispow2(5)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.nextpow2\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.nextpow2\",\n    \"category\": \"Function\",\n    \"text\": \"nextpow2(n::Integer)\\n\\nThe smallest power of two not less than n. Returns 0 for n==0, and returns -nextpow2(-n) for negative arguments.\\n\\nExamples\\n\\njulia> nextpow2(16)\\n16\\n\\njulia> nextpow2(17)\\n32\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.prevpow2\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.prevpow2\",\n    \"category\": \"Function\",\n    \"text\": \"prevpow2(n::Integer)\\n\\nThe largest power of two not greater than n. Returns 0 for n==0, and returns -prevpow2(-n) for negative arguments.\\n\\nExamples\\n\\njulia> prevpow2(5)\\n4\\n\\njulia> prevpow2(0)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.nextpow\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.nextpow\",\n    \"category\": \"Function\",\n    \"text\": \"nextpow(a, x)\\n\\nThe smallest a^n not less than x, where n is a non-negative integer. a must be greater than 1, and x must be greater than 0.\\n\\nExamples\\n\\njulia> nextpow(2, 7)\\n8\\n\\njulia> nextpow(2, 9)\\n16\\n\\njulia> nextpow(5, 20)\\n25\\n\\njulia> nextpow(4, 16)\\n16\\n\\nSee also prevpow.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.prevpow\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.prevpow\",\n    \"category\": \"Function\",\n    \"text\": \"prevpow(a, x)\\n\\nThe largest a^n not greater than x, where n is a non-negative integer. a must be greater than 1, and x must not be less than 1.\\n\\nExamples\\n\\njulia> prevpow(2, 7)\\n4\\n\\njulia> prevpow(2, 9)\\n8\\n\\njulia> prevpow(5, 20)\\n5\\n\\njulia> prevpow(4, 16)\\n16\\n\\nSee also nextpow.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.nextprod\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.nextprod\",\n    \"category\": \"Function\",\n    \"text\": \"nextprod([k_1, k_2,...], n)\\n\\nNext integer greater than or equal to n that can be written as prod k_i^p_i for integers p_1, p_2, etc.\\n\\nExample\\n\\njulia> nextprod([2, 3], 105)\\n108\\n\\njulia> 2^2 * 3^3\\n108\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.invmod\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.invmod\",\n    \"category\": \"Function\",\n    \"text\": \"invmod(x,m)\\n\\nTake the inverse of x modulo m: y such that x y = 1 pmod m, with div(xy) = 0. This is undefined for m = 0, or if gcd(xm) neq 1.\\n\\nExamples\\n\\njulia> invmod(2,5)\\n3\\n\\njulia> invmod(2,3)\\n2\\n\\njulia> invmod(5,6)\\n5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.powermod\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.powermod\",\n    \"category\": \"Function\",\n    \"text\": \"powermod(x::Integer, p::Integer, m)\\n\\nCompute x^p pmod m.\\n\\nExamples\\n\\njulia> powermod(2, 6, 5)\\n4\\n\\njulia> mod(2^6, 5)\\n4\\n\\njulia> powermod(5, 2, 20)\\n5\\n\\njulia> powermod(5, 2, 19)\\n6\\n\\njulia> powermod(5, 3, 19)\\n11\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.gamma\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.gamma\",\n    \"category\": \"Function\",\n    \"text\": \"gamma(x)\\n\\nCompute the gamma function of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.lgamma\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.lgamma\",\n    \"category\": \"Function\",\n    \"text\": \"lgamma(x)\\n\\nCompute the logarithm of the absolute value of gamma for Real x, while for Complex x compute the principal branch cut of the logarithm of gamma(x) (defined for negative real(x) by analytic continuation from positive real(x)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.lfact\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.lfact\",\n    \"category\": \"Function\",\n    \"text\": \"lfact(x)\\n\\nCompute the logarithmic factorial of a nonnegative integer x. Equivalent to lgamma of x + 1, but lgamma extends this function to non-integer x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.beta\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.beta\",\n    \"category\": \"Function\",\n    \"text\": \"beta(x, y)\\n\\nEuler integral of the first kind operatornameB(xy) = Gamma(x)Gamma(y)Gamma(x+y).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.lbeta\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.lbeta\",\n    \"category\": \"Function\",\n    \"text\": \"lbeta(x, y)\\n\\nNatural logarithm of the absolute value of the beta function log(operatornameB(xy)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.ndigits\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.ndigits\",\n    \"category\": \"Function\",\n    \"text\": \"ndigits(n::Integer, b::Integer=10)\\n\\nCompute the number of digits in integer n written in base b. The base b must not be in [-1, 0, 1].\\n\\nExamples\\n\\njulia> ndigits(12345)\\n5\\n\\njulia> ndigits(1022, 16)\\n3\\n\\njulia> base(16, 1022)\\n\\\"3fe\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.widemul\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.widemul\",\n    \"category\": \"Function\",\n    \"text\": \"widemul(x, y)\\n\\nMultiply x and y, giving the result as a larger type.\\n\\njulia> widemul(Float32(3.), 4.)\\n1.200000000000000000000000000000000000000000000000000000000000000000000000000000e+01\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.Math.@evalpoly\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.Math.@evalpoly\",\n    \"category\": \"Macro\",\n    \"text\": \"@evalpoly(z, c...)\\n\\nEvaluate the polynomial sum_k ck z^k-1 for the coefficients c[1], c[2], ...; that is, the coefficients are given in ascending order by power of z.  This macro expands to efficient inline code that uses either Horner's method or, for complex z, a more efficient Goertzel-like algorithm.\\n\\njulia> @evalpoly(3, 1, 0, 1)\\n10\\n\\njulia> @evalpoly(2, 1, 0, 1)\\n5\\n\\njulia> @evalpoly(2, 1, 1, 1)\\n7\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Mathematical-Functions-1\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Mathematical Functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.isapprox\\nBase.sin\\nBase.cos\\nBase.tan\\nBase.Math.sind\\nBase.Math.cosd\\nBase.Math.tand\\nBase.Math.sinpi\\nBase.Math.cospi\\nBase.sinh\\nBase.cosh\\nBase.tanh\\nBase.asin\\nBase.acos\\nBase.atan\\nBase.Math.atan2\\nBase.Math.asind\\nBase.Math.acosd\\nBase.Math.atand\\nBase.Math.sec\\nBase.Math.csc\\nBase.Math.cot\\nBase.Math.secd\\nBase.Math.cscd\\nBase.Math.cotd\\nBase.Math.asec\\nBase.Math.acsc\\nBase.Math.acot\\nBase.Math.asecd\\nBase.Math.acscd\\nBase.Math.acotd\\nBase.Math.sech\\nBase.Math.csch\\nBase.Math.coth\\nBase.asinh\\nBase.acosh\\nBase.atanh\\nBase.Math.asech\\nBase.Math.acsch\\nBase.Math.acoth\\nBase.Math.sinc\\nBase.Math.cosc\\nBase.Math.deg2rad\\nBase.Math.rad2deg\\nBase.Math.hypot\\nBase.log(::Any)\\nBase.log(::Number, ::Number)\\nBase.log2\\nBase.log10\\nBase.log1p\\nBase.Math.frexp\\nBase.exp\\nBase.exp2\\nBase.exp10\\nBase.Math.ldexp\\nBase.Math.modf\\nBase.expm1\\nBase.round(::Type, ::Any)\\nBase.Rounding.RoundingMode\\nBase.Rounding.RoundNearest\\nBase.Rounding.RoundNearestTiesAway\\nBase.Rounding.RoundNearestTiesUp\\nBase.Rounding.RoundToZero\\nBase.Rounding.RoundUp\\nBase.Rounding.RoundDown\\nBase.round{T <: AbstractFloat, MR, MI}(::Complex{T}, ::RoundingMode{MR}, ::RoundingMode{MI})\\nBase.ceil\\nBase.floor\\nBase.trunc\\nBase.unsafe_trunc\\nBase.signif\\nBase.min\\nBase.max\\nBase.minmax\\nBase.Math.clamp\\nBase.Math.clamp!\\nBase.abs\\nBase.Checked.checked_abs\\nBase.Checked.checked_neg\\nBase.Checked.checked_add\\nBase.Checked.checked_sub\\nBase.Checked.checked_mul\\nBase.Checked.checked_div\\nBase.Checked.checked_rem\\nBase.Checked.checked_fld\\nBase.Checked.checked_mod\\nBase.Checked.checked_cld\\nBase.Checked.add_with_overflow\\nBase.Checked.sub_with_overflow\\nBase.Checked.mul_with_overflow\\nBase.abs2\\nBase.copysign\\nBase.sign\\nBase.signbit\\nBase.flipsign\\nBase.sqrt\\nBase.isqrt\\nBase.Math.cbrt\\nBase.real(::Complex)\\nBase.imag\\nBase.reim\\nBase.conj\\nBase.angle\\nBase.cis\\nBase.binomial\\nBase.factorial\\nBase.gcd\\nBase.lcm\\nBase.gcdx\\nBase.ispow2\\nBase.nextpow2\\nBase.prevpow2\\nBase.nextpow\\nBase.prevpow\\nBase.nextprod\\nBase.invmod\\nBase.powermod\\nBase.Math.gamma\\nBase.Math.lgamma\\nBase.Math.lfact\\nBase.Math.beta\\nBase.Math.lbeta\\nBase.ndigits\\nBase.widemul\\nBase.Math.@evalpoly\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.mean\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.mean\",\n    \"category\": \"Function\",\n    \"text\": \"mean(f::Function, v)\\n\\nApply the function f to each element of v and take the mean.\\n\\njulia> mean(\u221a, [1, 2, 3])\\n1.3820881233139908\\n\\njulia> mean([\u221a1, \u221a2, \u221a3])\\n1.3820881233139908\\n\\n\\n\\nmean(v[, region])\\n\\nCompute the mean of whole array v, or optionally along the dimensions in region.\\n\\nnote: Note\\nJulia does not ignore NaN values in the computation. For applications requiring the handling of missing data, the DataArrays.jl package is recommended.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.mean!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.mean!\",\n    \"category\": \"Function\",\n    \"text\": \"mean!(r, v)\\n\\nCompute the mean of v over the singleton dimensions of r, and write results to r.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.std\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.std\",\n    \"category\": \"Function\",\n    \"text\": \"std(v[, region]; corrected::Bool=true, mean=nothing)\\n\\nCompute the sample standard deviation of a vector or array v, optionally along dimensions in region. The algorithm returns an estimator of the generative distribution's standard deviation under the assumption that each entry of v is an IID drawn from that generative distribution. This computation is equivalent to calculating sqrt(sum((v - mean(v)).^2) / (length(v) - 1)). A pre-computed mean may be provided. If corrected is true, then the sum is scaled with n-1, whereas the sum is scaled with n if corrected is false where n = length(x).\\n\\nnote: Note\\nJulia does not ignore NaN values in the computation. For applications requiring the handling of missing data, the DataArrays.jl package is recommended.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.stdm\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.stdm\",\n    \"category\": \"Function\",\n    \"text\": \"stdm(v, m::Number; corrected::Bool=true)\\n\\nCompute the sample standard deviation of a vector v with known mean m. If corrected is true, then the sum is scaled with n-1, whereas the sum is scaled with n if corrected is false where n = length(x).\\n\\nnote: Note\\nJulia does not ignore NaN values in the computation. For applications requiring the handling of missing data, the DataArrays.jl package is recommended.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.var\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.var\",\n    \"category\": \"Function\",\n    \"text\": \"var(v[, region]; corrected::Bool=true, mean=nothing)\\n\\nCompute the sample variance of a vector or array v, optionally along dimensions in region. The algorithm will return an estimator of the generative distribution's variance under the assumption that each entry of v is an IID drawn from that generative distribution. This computation is equivalent to calculating sum(abs2, v - mean(v)) / (length(v) - 1). If corrected is true, then the sum is scaled with n-1, whereas the sum is scaled with n if corrected is false where n = length(x). The mean mean over the region may be provided.\\n\\nnote: Note\\nJulia does not ignore NaN values in the computation. For applications requiring the handling of missing data, the DataArrays.jl package is recommended.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.varm\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.varm\",\n    \"category\": \"Function\",\n    \"text\": \"varm(v, m[, region]; corrected::Bool=true)\\n\\nCompute the sample variance of a collection v with known mean(s) m, optionally over region. m may contain means for each dimension of v. If corrected is true, then the sum is scaled with n-1, whereas the sum is scaled with n if corrected is false where n = length(x).\\n\\nnote: Note\\nJulia does not ignore NaN values in the computation. For applications requiring the handling of missing data, the DataArrays.jl package is recommended.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.middle\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.middle\",\n    \"category\": \"Function\",\n    \"text\": \"middle(x)\\n\\nCompute the middle of a scalar value, which is equivalent to x itself, but of the type of middle(x, x) for consistency.\\n\\n\\n\\nmiddle(x, y)\\n\\nCompute the middle of two reals x and y, which is equivalent in both value and type to computing their mean ((x + y) / 2).\\n\\n\\n\\nmiddle(range)\\n\\nCompute the middle of a range, which consists of computing the mean of its extrema. Since a range is sorted, the mean is performed with the first and last element.\\n\\njulia> middle(1:10)\\n5.5\\n\\n\\n\\nmiddle(a)\\n\\nCompute the middle of an array a, which consists of finding its extrema and then computing their mean.\\n\\njulia> a = [1,2,3.6,10.9]\\n4-element Array{Float64,1}:\\n  1.0\\n  2.0\\n  3.6\\n 10.9\\n\\njulia> middle(a)\\n5.95\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.median\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.median\",\n    \"category\": \"Function\",\n    \"text\": \"median(v[, region])\\n\\nCompute the median of an entire array v, or, optionally, along the dimensions in region. For an even number of elements no exact median element exists, so the result is equivalent to calculating mean of two median elements.\\n\\nnote: Note\\nJulia does not ignore NaN values in the computation. For applications requiring the handling of missing data, the DataArrays.jl package is recommended.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.median!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.median!\",\n    \"category\": \"Function\",\n    \"text\": \"median!(v)\\n\\nLike median, but may overwrite the input vector.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.quantile\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.quantile\",\n    \"category\": \"Function\",\n    \"text\": \"quantile(v, p; sorted=false)\\n\\nCompute the quantile(s) of a vector v at a specified probability or vector p. The keyword argument sorted indicates whether v can be assumed to be sorted.\\n\\nThe p should be on the interval [0,1], and v should not have any NaN values.\\n\\nQuantiles are computed via linear interpolation between the points ((k-1)/(n-1), v[k]), for k = 1:n where n = length(v). This corresponds to Definition 7 of Hyndman and Fan (1996), and is the same as the R default.\\n\\nnote: Note\\nJulia does not ignore NaN values in the computation. For applications requiring the handling of missing data, the DataArrays.jl package is recommended. quantile will throw an ArgumentError in the presence of NaN values in the data array.\\n\\nHyndman, R.J and Fan, Y. (1996) \\\"Sample Quantiles in Statistical Packages\\\", The American Statistician, Vol. 50, No. 4, pp. 361-365\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.quantile!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.quantile!\",\n    \"category\": \"Function\",\n    \"text\": \"quantile!([q, ] v, p; sorted=false)\\n\\nCompute the quantile(s) of a vector v at the probabilities p, with optional output into array q (if not provided, a new output array is created). The keyword argument sorted indicates whether v can be assumed to be sorted; if false (the default), then the elements of v may be partially sorted.\\n\\nThe elements of p should be on the interval [0,1], and v should not have any NaN values.\\n\\nQuantiles are computed via linear interpolation between the points ((k-1)/(n-1), v[k]), for k = 1:n where n = length(v). This corresponds to Definition 7 of Hyndman and Fan (1996), and is the same as the R default.\\n\\nnote: Note\\nJulia does not ignore NaN values in the computation. For applications requiring the handling of missing data, the DataArrays.jl package is recommended. quantile! will throw an ArgumentError in the presence of NaN values in the data array.\\n\\nHyndman, R.J and Fan, Y. (1996) \\\"Sample Quantiles in Statistical Packages\\\", The American Statistician, Vol. 50, No. 4, pp. 361-365\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.cov\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.cov\",\n    \"category\": \"Function\",\n    \"text\": \"cov(x[, corrected=true])\\n\\nCompute the variance of the vector x. If corrected is true (the default) then the sum is scaled with n-1, whereas the sum is scaled with n if corrected is false where n = length(x).\\n\\n\\n\\ncov(X[, vardim=1, corrected=true])\\n\\nCompute the covariance matrix of the matrix X along the dimension vardim. If corrected is true (the default) then the sum is scaled with n-1, whereas the sum is scaled with n if corrected is false where n = size(X, vardim).\\n\\n\\n\\ncov(x, y[, corrected=true])\\n\\nCompute the covariance between the vectors x and y. If corrected is true (the default), computes frac1n-1sum_i=1^n (x_i-bar x) (y_i-bar y)^* where * denotes the complex conjugate and n = length(x) = length(y). If corrected is false, computes rac1nsum_i=1^n (x_i-bar x) (y_i-bar y)^*.\\n\\n\\n\\ncov(X, Y[, vardim=1, corrected=true])\\n\\nCompute the covariance between the vectors or matrices X and Y along the dimension vardim. If corrected is true (the default) then the sum is scaled with n-1, whereas the sum is scaled with n if corrected is false where n = size(X, vardim) = size(Y, vardim).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.cor\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.cor\",\n    \"category\": \"Function\",\n    \"text\": \"cor(x)\\n\\nReturn the number one.\\n\\n\\n\\ncor(X[, vardim=1])\\n\\nCompute the Pearson correlation matrix of the matrix X along the dimension vardim.\\n\\n\\n\\ncor(x, y)\\n\\nCompute the Pearson correlation between the vectors x and y.\\n\\n\\n\\ncor(X, Y[, vardim=1])\\n\\nCompute the Pearson correlation between the vectors or matrices X and Y along the dimension vardim.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Statistics-1\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Statistics\",\n    \"category\": \"section\",\n    \"text\": \"Base.mean\\nBase.mean!\\nBase.std\\nBase.stdm\\nBase.var\\nBase.varm\\nBase.middle\\nBase.median\\nBase.median!\\nBase.quantile\\nBase.quantile!\\nBase.cov\\nBase.cor\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.fft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.fft\",\n    \"category\": \"Function\",\n    \"text\": \"fft(A [, dims])\\n\\nPerforms a multidimensional FFT of the array A. The optional dims argument specifies an iterable subset of dimensions (e.g. an integer, range, tuple, or array) to transform along. Most efficient if the size of A along the transformed dimensions is a product of small primes; see nextprod(). See also plan_fft() for even greater efficiency.\\n\\nA one-dimensional FFT computes the one-dimensional discrete Fourier transform (DFT) as defined by\\n\\noperatornameDFT(A)k =\\n  sum_n=1^operatornamelength(A)\\n  expleft(-ifrac2pi\\n  (n-1)(k-1)operatornamelength(A) right) An\\n\\nA multidimensional FFT simply performs this operation along each transformed dimension of A.\\n\\nnote: Note\\nJulia starts FFTW up with 1 thread by default. Higher performance is usually possible by increasing number of threads. Use FFTW.set_num_threads(Sys.CPU_CORES) to use as many threads as cores on your system.\\nThis performs a multidimensional FFT by default. FFT libraries in other languages such as Python and Octave perform a one-dimensional FFT along the first non-singleton dimension of the array. This is worth noting while performing comparisons. For more details, refer to the Noteworthy Differences from other Languages section of the manual.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.fft!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.fft!\",\n    \"category\": \"Function\",\n    \"text\": \"fft!(A [, dims])\\n\\nSame as fft, but operates in-place on A, which must be an array of complex floating-point numbers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.ifft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.ifft\",\n    \"category\": \"Function\",\n    \"text\": \"ifft(A [, dims])\\n\\nMultidimensional inverse FFT.\\n\\nA one-dimensional inverse FFT computes\\n\\noperatornameIDFT(A)k = frac1operatornamelength(A)\\nsum_n=1^operatornamelength(A) expleft(+ifrac2pi (n-1)(k-1)\\noperatornamelength(A) right) An\\n\\nA multidimensional inverse FFT simply performs this operation along each transformed dimension of A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.ifft!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.ifft!\",\n    \"category\": \"Function\",\n    \"text\": \"ifft!(A [, dims])\\n\\nSame as ifft, but operates in-place on A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.bfft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.bfft\",\n    \"category\": \"Function\",\n    \"text\": \"bfft(A [, dims])\\n\\nSimilar to ifft, but computes an unnormalized inverse (backward) transform, which must be divided by the product of the sizes of the transformed dimensions in order to obtain the inverse. (This is slightly more efficient than ifft because it omits a scaling step, which in some applications can be combined with other computational steps elsewhere.)\\n\\noperatornameBDFT(A)k = operatornamelength(A) operatornameIDFT(A)k\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.bfft!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.bfft!\",\n    \"category\": \"Function\",\n    \"text\": \"bfft!(A [, dims])\\n\\nSame as bfft, but operates in-place on A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.plan_fft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.plan_fft\",\n    \"category\": \"Function\",\n    \"text\": \"plan_fft(A [, dims]; flags=FFTW.ESTIMATE;  timelimit=Inf)\\n\\nPre-plan an optimized FFT along given dimensions (dims) of arrays matching the shape and type of A.  (The first two arguments have the same meaning as for fft.) Returns an object P which represents the linear operator computed by the FFT, and which contains all of the information needed to compute fft(A, dims) quickly.\\n\\nTo apply P to an array A, use P * A; in general, the syntax for applying plans is much like that of matrices.  (A plan can only be applied to arrays of the same size as the A for which the plan was created.)  You can also apply a plan with a preallocated output array \u00c2 by calling A_mul_B!(\u00c2, plan, A).  (For A_mul_B!, however, the input array A must be a complex floating-point array like the output \u00c2.) You can compute the inverse-transform plan by inv(P) and apply the inverse plan with P \\\\ \u00c2 (the inverse plan is cached and reused for subsequent calls to inv or \\\\), and apply the inverse plan to a pre-allocated output array A with A_ldiv_B!(A, P, \u00c2).\\n\\nThe flags argument is a bitwise-or of FFTW planner flags, defaulting to FFTW.ESTIMATE. e.g. passing FFTW.MEASURE or FFTW.PATIENT will instead spend several seconds (or more) benchmarking different possible FFT algorithms and picking the fastest one; see the FFTW manual for more information on planner flags.  The optional timelimit argument specifies a rough upper bound on the allowed planning time, in seconds. Passing FFTW.MEASURE or FFTW.PATIENT may cause the input array A to be overwritten with zeros during plan creation.\\n\\nplan_fft! is the same as plan_fft but creates a plan that operates in-place on its argument (which must be an array of complex floating-point numbers). plan_ifft and so on are similar but produce plans that perform the equivalent of the inverse transforms ifft and so on.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.plan_ifft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.plan_ifft\",\n    \"category\": \"Function\",\n    \"text\": \"plan_ifft(A [, dims]; flags=FFTW.ESTIMATE;  timelimit=Inf)\\n\\nSame as plan_fft, but produces a plan that performs inverse transforms ifft.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.plan_bfft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.plan_bfft\",\n    \"category\": \"Function\",\n    \"text\": \"plan_bfft(A [, dims]; flags=FFTW.ESTIMATE;  timelimit=Inf)\\n\\nSame as plan_fft, but produces a plan that performs an unnormalized backwards transform bfft.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.plan_fft!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.plan_fft!\",\n    \"category\": \"Function\",\n    \"text\": \"plan_fft!(A [, dims]; flags=FFTW.ESTIMATE;  timelimit=Inf)\\n\\nSame as plan_fft, but operates in-place on A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.plan_ifft!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.plan_ifft!\",\n    \"category\": \"Function\",\n    \"text\": \"plan_ifft!(A [, dims]; flags=FFTW.ESTIMATE;  timelimit=Inf)\\n\\nSame as plan_ifft, but operates in-place on A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.plan_bfft!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.plan_bfft!\",\n    \"category\": \"Function\",\n    \"text\": \"plan_bfft!(A [, dims]; flags=FFTW.ESTIMATE;  timelimit=Inf)\\n\\nSame as plan_bfft, but operates in-place on A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.rfft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.rfft\",\n    \"category\": \"Function\",\n    \"text\": \"rfft(A [, dims])\\n\\nMultidimensional FFT of a real array A, exploiting the fact that the transform has conjugate symmetry in order to save roughly half the computational time and storage costs compared with fft. If A has size (n_1, ..., n_d), the result has size (div(n_1,2)+1, ..., n_d).\\n\\nThe optional dims argument specifies an iterable subset of one or more dimensions of A to transform, similar to fft. Instead of (roughly) halving the first dimension of A in the result, the dims[1] dimension is (roughly) halved in the same way.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.irfft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.irfft\",\n    \"category\": \"Function\",\n    \"text\": \"irfft(A, d [, dims])\\n\\nInverse of rfft: for a complex array A, gives the corresponding real array whose FFT yields A in the first half. As for rfft, dims is an optional subset of dimensions to transform, defaulting to 1:ndims(A).\\n\\nd is the length of the transformed real array along the dims[1] dimension, which must satisfy div(d,2)+1 == size(A,dims[1]). (This parameter cannot be inferred from size(A) since both 2*size(A,dims[1])-2 as well as 2*size(A,dims[1])-1 are valid sizes for the transformed real array.)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.brfft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.brfft\",\n    \"category\": \"Function\",\n    \"text\": \"brfft(A, d [, dims])\\n\\nSimilar to irfft but computes an unnormalized inverse transform (similar to bfft), which must be divided by the product of the sizes of the transformed dimensions (of the real output array) in order to obtain the inverse transform.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.plan_rfft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.plan_rfft\",\n    \"category\": \"Function\",\n    \"text\": \"plan_rfft(A [, dims]; flags=FFTW.ESTIMATE;  timelimit=Inf)\\n\\nPre-plan an optimized real-input FFT, similar to plan_fft except for rfft instead of fft. The first two arguments, and the size of the transformed result, are the same as for rfft.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.plan_brfft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.plan_brfft\",\n    \"category\": \"Function\",\n    \"text\": \"plan_brfft(A, d [, dims]; flags=FFTW.ESTIMATE;  timelimit=Inf)\\n\\nPre-plan an optimized real-input unnormalized transform, similar to plan_rfft except for brfft instead of rfft. The first two arguments and the size of the transformed result, are the same as for brfft.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.plan_irfft\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.plan_irfft\",\n    \"category\": \"Function\",\n    \"text\": \"plan_irfft(A, d [, dims]; flags=FFTW.ESTIMATE;  timelimit=Inf)\\n\\nPre-plan an optimized inverse real-input FFT, similar to plan_rfft except for irfft and brfft, respectively. The first three arguments have the same meaning as for irfft.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.dct\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.dct\",\n    \"category\": \"Function\",\n    \"text\": \"dct(A [, dims])\\n\\nPerforms a multidimensional type-II discrete cosine transform (DCT) of the array A, using the unitary normalization of the DCT. The optional dims argument specifies an iterable subset of dimensions (e.g. an integer, range, tuple, or array) to transform along.  Most efficient if the size of A along the transformed dimensions is a product of small primes; see nextprod. See also plan_dct for even greater efficiency.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.dct!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.dct!\",\n    \"category\": \"Function\",\n    \"text\": \"dct!(A [, dims])\\n\\nSame as dct!, except that it operates in-place on A, which must be an array of real or complex floating-point values.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.idct\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.idct\",\n    \"category\": \"Function\",\n    \"text\": \"idct(A [, dims])\\n\\nComputes the multidimensional inverse discrete cosine transform (DCT) of the array A (technically, a type-III DCT with the unitary normalization). The optional dims argument specifies an iterable subset of dimensions (e.g. an integer, range, tuple, or array) to transform along.  Most efficient if the size of A along the transformed dimensions is a product of small primes; see nextprod.  See also plan_idct for even greater efficiency.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.idct!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.idct!\",\n    \"category\": \"Function\",\n    \"text\": \"idct!(A [, dims])\\n\\nSame as idct!, but operates in-place on A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.plan_dct\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.plan_dct\",\n    \"category\": \"Function\",\n    \"text\": \"plan_dct(A [, dims [, flags [, timelimit]]])\\n\\nPre-plan an optimized discrete cosine transform (DCT), similar to plan_fft except producing a function that computes dct. The first two arguments have the same meaning as for dct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.plan_dct!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.plan_dct!\",\n    \"category\": \"Function\",\n    \"text\": \"plan_dct!(A [, dims [, flags [, timelimit]]])\\n\\nSame as plan_dct, but operates in-place on A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.plan_idct\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.plan_idct\",\n    \"category\": \"Function\",\n    \"text\": \"plan_idct(A [, dims [, flags [, timelimit]]])\\n\\nPre-plan an optimized inverse discrete cosine transform (DCT), similar to plan_fft except producing a function that computes idct. The first two arguments have the same meaning as for idct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.plan_idct!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.plan_idct!\",\n    \"category\": \"Function\",\n    \"text\": \"plan_idct!(A [, dims [, flags [, timelimit]]])\\n\\nSame as plan_idct, but operates in-place on A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.fftshift-Tuple{Any}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.fftshift\",\n    \"category\": \"Method\",\n    \"text\": \"fftshift(x)\\n\\nSwap the first and second halves of each dimension of x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.fftshift-Tuple{Any,Any}\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.fftshift\",\n    \"category\": \"Method\",\n    \"text\": \"fftshift(x,dim)\\n\\nSwap the first and second halves of the given dimension or iterable of dimensions of array x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.ifftshift\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.ifftshift\",\n    \"category\": \"Function\",\n    \"text\": \"ifftshift(x, [dim])\\n\\nUndoes the effect of fftshift.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DSP.filt\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DSP.filt\",\n    \"category\": \"Function\",\n    \"text\": \"filt(b, a, x, [si])\\n\\nApply filter described by vectors a and b to vector x, with an optional initial filter state vector si (defaults to zeros).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DSP.filt!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DSP.filt!\",\n    \"category\": \"Function\",\n    \"text\": \"filt!(out, b, a, x, [si])\\n\\nSame as filt but writes the result into the out argument, which may alias the input x to modify it in-place.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DSP.deconv\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DSP.deconv\",\n    \"category\": \"Function\",\n    \"text\": \"deconv(b,a) -> c\\n\\nConstruct vector c such that b = conv(a,c) + r. Equivalent to polynomial division.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DSP.conv\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DSP.conv\",\n    \"category\": \"Function\",\n    \"text\": \"conv(u,v)\\n\\nConvolution of two vectors. Uses FFT algorithm.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DSP.conv2\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DSP.conv2\",\n    \"category\": \"Function\",\n    \"text\": \"conv2(u,v,A)\\n\\n2-D convolution of the matrix A with the 2-D separable kernel generated by the vectors u and v. Uses 2-D FFT algorithm.\\n\\n\\n\\nconv2(B,A)\\n\\n2-D convolution of the matrix B with the matrix A. Uses 2-D FFT algorithm.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DSP.xcorr\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DSP.xcorr\",\n    \"category\": \"Function\",\n    \"text\": \"xcorr(u,v)\\n\\nCompute the cross-correlation of two vectors.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.r2r\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.r2r\",\n    \"category\": \"Function\",\n    \"text\": \"r2r(A, kind [, dims])\\n\\nPerforms a multidimensional real-input/real-output (r2r) transform of type kind of the array A, as defined in the FFTW manual. kind specifies either a discrete cosine transform of various types (FFTW.REDFT00, FFTW.REDFT01, FFTW.REDFT10, or FFTW.REDFT11), a discrete sine transform of various types (FFTW.RODFT00, FFTW.RODFT01, FFTW.RODFT10, or FFTW.RODFT11), a real-input DFT with halfcomplex-format output (FFTW.R2HC and its inverse FFTW.HC2R), or a discrete Hartley transform (FFTW.DHT).  The kind argument may be an array or tuple in order to specify different transform types along the different dimensions of A; kind[end] is used for any unspecified dimensions.  See the FFTW manual for precise definitions of these transform types, at http://www.fftw.org/doc.\\n\\nThe optional dims argument specifies an iterable subset of dimensions (e.g. an integer, range, tuple, or array) to transform along. kind[i] is then the transform type for dims[i], with kind[end] being used for i > length(kind).\\n\\nSee also plan_r2r to pre-plan optimized r2r transforms.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.r2r!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.r2r!\",\n    \"category\": \"Function\",\n    \"text\": \"r2r!(A, kind [, dims])\\n\\nSame as r2r, but operates in-place on A, which must be an array of real or complex floating-point numbers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.plan_r2r\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.plan_r2r\",\n    \"category\": \"Function\",\n    \"text\": \"plan_r2r(A, kind [, dims [, flags [, timelimit]]])\\n\\nPre-plan an optimized r2r transform, similar to plan_fft except that the transforms (and the first three arguments) correspond to r2r and r2r!, respectively.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Base.DFT.FFTW.plan_r2r!\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Base.DFT.FFTW.plan_r2r!\",\n    \"category\": \"Function\",\n    \"text\": \"plan_r2r!(A, kind [, dims [, flags [, timelimit]]])\\n\\nSimilar to plan_fft, but corresponds to r2r!.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/math.html#Signal-Processing-1\",\n    \"page\": \"Mathematics\",\n    \"title\": \"Signal Processing\",\n    \"category\": \"section\",\n    \"text\": \"Fast Fourier transform (FFT) functions in Julia are implemented by calling functions from FFTW.Base.DFT.fft\\nBase.DFT.fft!\\nBase.DFT.ifft\\nBase.DFT.ifft!\\nBase.DFT.bfft\\nBase.DFT.bfft!\\nBase.DFT.plan_fft\\nBase.DFT.plan_ifft\\nBase.DFT.plan_bfft\\nBase.DFT.plan_fft!\\nBase.DFT.plan_ifft!\\nBase.DFT.plan_bfft!\\nBase.DFT.rfft\\nBase.DFT.irfft\\nBase.DFT.brfft\\nBase.DFT.plan_rfft\\nBase.DFT.plan_brfft\\nBase.DFT.plan_irfft\\nBase.DFT.FFTW.dct\\nBase.DFT.FFTW.dct!\\nBase.DFT.FFTW.idct\\nBase.DFT.FFTW.idct!\\nBase.DFT.FFTW.plan_dct\\nBase.DFT.FFTW.plan_dct!\\nBase.DFT.FFTW.plan_idct\\nBase.DFT.FFTW.plan_idct!\\nBase.DFT.fftshift(::Any)\\nBase.DFT.fftshift(::Any, ::Any)\\nBase.DFT.ifftshift\\nBase.DSP.filt\\nBase.DSP.filt!\\nBase.DSP.deconv\\nBase.DSP.conv\\nBase.DSP.conv2\\nBase.DSP.xcorrThe following functions are defined within the Base.FFTW module.Base.DFT.FFTW.r2r\\nBase.DFT.FFTW.r2r!\\nBase.DFT.FFTW.plan_r2r\\nBase.DFT.FFTW.plan_r2r!\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#\",\n    \"page\": \"Numbers\",\n    \"title\": \"Numbers\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#lib-numbers-1\",\n    \"page\": \"Numbers\",\n    \"title\": \"Numbers\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Standard-Numeric-Types-1\",\n    \"page\": \"Numbers\",\n    \"title\": \"Standard Numeric Types\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Number\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Number\",\n    \"category\": \"Type\",\n    \"text\": \"Number\\n\\nAbstract supertype for all number types.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Real\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Real\",\n    \"category\": \"Type\",\n    \"text\": \"Real <: Number\\n\\nAbstract supertype for all real numbers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.AbstractFloat\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.AbstractFloat\",\n    \"category\": \"Type\",\n    \"text\": \"AbstractFloat <: Real\\n\\nAbstract supertype for all floating point numbers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Integer\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Integer\",\n    \"category\": \"Type\",\n    \"text\": \"Integer <: Real\\n\\nAbstract supertype for all integers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Signed\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Signed\",\n    \"category\": \"Type\",\n    \"text\": \"Signed <: Integer\\n\\nAbstract supertype for all signed integers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Unsigned\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Unsigned\",\n    \"category\": \"Type\",\n    \"text\": \"Unsigned <: Integer\\n\\nAbstract supertype for all unsigned integers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Abstract-number-types-1\",\n    \"page\": \"Numbers\",\n    \"title\": \"Abstract number types\",\n    \"category\": \"section\",\n    \"text\": \"Core.Number\\nCore.Real\\nCore.AbstractFloat\\nCore.Integer\\nCore.Signed\\nCore.Unsigned\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Float16\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Float16\",\n    \"category\": \"Type\",\n    \"text\": \"Float16 <: AbstractFloat\\n\\n16-bit floating point number type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Float32\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Float32\",\n    \"category\": \"Type\",\n    \"text\": \"Float32 <: AbstractFloat\\n\\n32-bit floating point number type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Float64\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Float64\",\n    \"category\": \"Type\",\n    \"text\": \"Float64 <: AbstractFloat\\n\\n64-bit floating point number type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.MPFR.BigFloat\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.MPFR.BigFloat\",\n    \"category\": \"Type\",\n    \"text\": \"BigFloat <: AbstractFloat\\n\\nArbitrary precision floating point number type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Bool\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Bool\",\n    \"category\": \"Type\",\n    \"text\": \"Bool <: Integer\\n\\nBoolean type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Int8\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Int8\",\n    \"category\": \"Type\",\n    \"text\": \"Int8 <: Signed\\n\\n8-bit signed integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.UInt8\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.UInt8\",\n    \"category\": \"Type\",\n    \"text\": \"UInt8 <: Unsigned\\n\\n8-bit unsigned integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Int16\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Int16\",\n    \"category\": \"Type\",\n    \"text\": \"Int16 <: Signed\\n\\n16-bit signed integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.UInt16\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.UInt16\",\n    \"category\": \"Type\",\n    \"text\": \"UInt16 <: Unsigned\\n\\n16-bit unsigned integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Int32\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Int32\",\n    \"category\": \"Type\",\n    \"text\": \"Int32 <: Signed\\n\\n32-bit signed integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.UInt32\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.UInt32\",\n    \"category\": \"Type\",\n    \"text\": \"UInt32 <: Unsigned\\n\\n32-bit unsigned integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Int64\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Int64\",\n    \"category\": \"Type\",\n    \"text\": \"Int64 <: Signed\\n\\n64-bit signed integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.UInt64\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.UInt64\",\n    \"category\": \"Type\",\n    \"text\": \"UInt64 <: Unsigned\\n\\n64-bit unsigned integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Int128\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Int128\",\n    \"category\": \"Type\",\n    \"text\": \"Int128 <: Signed\\n\\n128-bit signed integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.UInt128\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.UInt128\",\n    \"category\": \"Type\",\n    \"text\": \"UInt128 <: Unsigned\\n\\n128-bit unsigned integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.GMP.BigInt\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.GMP.BigInt\",\n    \"category\": \"Type\",\n    \"text\": \"BigInt <: Integer\\n\\nArbitrary precision integer type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Complex\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Complex\",\n    \"category\": \"Type\",\n    \"text\": \"Complex{T<:Real} <: Number\\n\\nComplex number type with real and imaginary part of type T.\\n\\nComplex32, Complex64 and Complex128 are aliases for Complex{Float16}, Complex{Float32} and Complex{Float64} respectively.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Rational\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Rational\",\n    \"category\": \"Type\",\n    \"text\": \"Rational{T<:Integer} <: Real\\n\\nRational number type, with numerator and denominator of type T.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Irrational\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Irrational\",\n    \"category\": \"Type\",\n    \"text\": \"Irrational <: Real\\n\\nIrrational number type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Concrete-number-types-1\",\n    \"page\": \"Numbers\",\n    \"title\": \"Concrete number types\",\n    \"category\": \"section\",\n    \"text\": \"Core.Float16\\nCore.Float32\\nCore.Float64\\nBase.BigFloat\\nCore.Bool\\nCore.Int8\\nCore.UInt8\\nCore.Int16\\nCore.UInt16\\nCore.Int32\\nCore.UInt32\\nCore.Int64\\nCore.UInt64\\nCore.Int128\\nCore.UInt128\\nBase.BigInt\\nBase.Complex\\nBase.Rational\\nBase.Irrational\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.bin\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.bin\",\n    \"category\": \"Function\",\n    \"text\": \"bin(n, pad::Int=1)\\n\\nConvert an integer to a binary string, optionally specifying a number of digits to pad to.\\n\\njulia> bin(10,2)\\n\\\"1010\\\"\\n\\njulia> bin(10,8)\\n\\\"00001010\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.hex\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.hex\",\n    \"category\": \"Function\",\n    \"text\": \"hex(n, pad::Int=1)\\n\\nConvert an integer to a hexadecimal string, optionally specifying a number of digits to pad to.\\n\\njulia> hex(20)\\n\\\"14\\\"\\n\\njulia> hex(20, 3)\\n\\\"014\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.dec\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.dec\",\n    \"category\": \"Function\",\n    \"text\": \"dec(n, pad::Int=1)\\n\\nConvert an integer to a decimal string, optionally specifying a number of digits to pad to.\\n\\nExamples\\n\\njulia> dec(20)\\n\\\"20\\\"\\n\\njulia> dec(20, 3)\\n\\\"020\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.oct\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.oct\",\n    \"category\": \"Function\",\n    \"text\": \"oct(n, pad::Int=1)\\n\\nConvert an integer to an octal string, optionally specifying a number of digits to pad to.\\n\\njulia> oct(20)\\n\\\"24\\\"\\n\\njulia> oct(20, 3)\\n\\\"024\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.base\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.base\",\n    \"category\": \"Function\",\n    \"text\": \"base(base::Integer, n::Integer, pad::Integer=1)\\n\\nConvert an integer n to a string in the given base, optionally specifying a number of digits to pad to.\\n\\njulia> base(13,5,4)\\n\\\"0005\\\"\\n\\njulia> base(5,13,4)\\n\\\"0023\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.digits\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.digits\",\n    \"category\": \"Function\",\n    \"text\": \"digits([T<:Integer], n::Integer, base::T=10, pad::Integer=1)\\n\\nReturns an array with element type T (default Int) of the digits of n in the given base, optionally padded with zeros to a specified size. More significant digits are at higher indexes, such that n == sum([digits[k]*base^(k-1) for k=1:length(digits)]).\\n\\nExamples\\n\\njulia> digits(10, 10)\\n2-element Array{Int64,1}:\\n 0\\n 1\\n\\njulia> digits(10, 2)\\n4-element Array{Int64,1}:\\n 0\\n 1\\n 0\\n 1\\n\\njulia> digits(10, 2, 6)\\n6-element Array{Int64,1}:\\n 0\\n 1\\n 0\\n 1\\n 0\\n 0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.digits!\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.digits!\",\n    \"category\": \"Function\",\n    \"text\": \"digits!(array, n::Integer, base::Integer=10)\\n\\nFills an array of the digits of n in the given base. More significant digits are at higher indexes. If the array length is insufficient, the least significant digits are filled up to the array length. If the array length is excessive, the excess portion is filled with zeros.\\n\\nExamples\\n\\njulia> digits!([2,2,2,2], 10, 2)\\n4-element Array{Int64,1}:\\n 0\\n 1\\n 0\\n 1\\n\\njulia> digits!([2,2,2,2,2,2], 10, 2)\\n6-element Array{Int64,1}:\\n 0\\n 1\\n 0\\n 1\\n 0\\n 0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.bits\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.bits\",\n    \"category\": \"Function\",\n    \"text\": \"bits(n)\\n\\nA string giving the literal bit representation of a number.\\n\\nExample\\n\\njulia> bits(4)\\n\\\"0000000000000000000000000000000000000000000000000000000000000100\\\"\\n\\njulia> bits(2.2)\\n\\\"0100000000000001100110011001100110011001100110011001100110011010\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.parse-Tuple{Type,Any,Any}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.parse\",\n    \"category\": \"Method\",\n    \"text\": \"parse(type, str, [base])\\n\\nParse a string as a number. If the type is an integer type, then a base can be specified (the default is 10). If the type is a floating point type, the string is parsed as a decimal floating point number. If the string does not contain a valid number, an error is raised.\\n\\njulia> parse(Int, \\\"1234\\\")\\n1234\\n\\njulia> parse(Int, \\\"1234\\\", 5)\\n194\\n\\njulia> parse(Int, \\\"afc\\\", 16)\\n2812\\n\\njulia> parse(Float64, \\\"1.2e-3\\\")\\n0.0012\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.tryparse\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.tryparse\",\n    \"category\": \"Function\",\n    \"text\": \"tryparse(type, str, [base])\\n\\nLike parse, but returns a Nullable of the requested type. The result will be null if the string does not contain a valid number.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.big\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.big\",\n    \"category\": \"Function\",\n    \"text\": \"big(x)\\n\\nConvert a number to a maximum precision representation (typically BigInt or BigFloat). See BigFloat for information about some pitfalls with floating-point numbers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.signed\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.signed\",\n    \"category\": \"Function\",\n    \"text\": \"signed(x)\\n\\nConvert a number to a signed integer. If the argument is unsigned, it is reinterpreted as signed without checking for overflow.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.unsigned\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.unsigned\",\n    \"category\": \"Function\",\n    \"text\": \"unsigned(x) -> Unsigned\\n\\nConvert a number to an unsigned integer. If the argument is signed, it is reinterpreted as unsigned without checking for negative values.\\n\\nExamples\\n\\njulia> unsigned(-2)\\n0xfffffffffffffffe\\n\\njulia> unsigned(2)\\n0x0000000000000002\\n\\njulia> signed(unsigned(-2))\\n-2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.float-Tuple{Any}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.float\",\n    \"category\": \"Method\",\n    \"text\": \"float(x)\\n\\nConvert a number or array to a floating point data type. When passed a string, this function is equivalent to parse(Float64, x).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Math.significand\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Math.significand\",\n    \"category\": \"Function\",\n    \"text\": \"significand(x)\\n\\nExtract the significand(s) (a.k.a. mantissa), in binary representation, of a floating-point number. If x is a non-zero finite number, then the result will be a number of the same type on the interval 12). Otherwise x is returned.\\n\\nExamples\\n\\njulia> significand(15.2)/15.2\\n0.125\\n\\njulia> significand(15.2)*8\\n15.2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Math.exponent\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Math.exponent\",\n    \"category\": \"Function\",\n    \"text\": \"exponent(x) -> Int\\n\\nGet the exponent of a normalized floating-point number.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.complex-Tuple{Complex}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.complex\",\n    \"category\": \"Method\",\n    \"text\": \"complex(r, [i])\\n\\nConvert real numbers or arrays to complex. i defaults to zero.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.bswap\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.bswap\",\n    \"category\": \"Function\",\n    \"text\": \"bswap(n)\\n\\nByte-swap an integer. Flip the bits of its binary representation.\\n\\nExamples\\n\\njulia> a = bswap(4)\\n288230376151711744\\n\\njulia> bswap(a)\\n4\\n\\njulia> bin(1)\\n\\\"1\\\"\\n\\njulia> bin(bswap(1))\\n\\\"100000000000000000000000000000000000000000000000000000000\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.num2hex\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.num2hex\",\n    \"category\": \"Function\",\n    \"text\": \"num2hex(f)\\n\\nGet a hexadecimal string of the binary representation of a floating point number.\\n\\nExample\\n\\njulia> num2hex(2.2)\\n\\\"400199999999999a\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.hex2num\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.hex2num\",\n    \"category\": \"Function\",\n    \"text\": \"hex2num(str)\\n\\nConvert a hexadecimal string to the floating point number it represents.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.hex2bytes\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.hex2bytes\",\n    \"category\": \"Function\",\n    \"text\": \"hex2bytes(s::AbstractString)\\n\\nConvert an arbitrarily long hexadecimal string to its binary representation. Returns an Array{UInt8,1}, i.e. an array of bytes.\\n\\njulia> a = hex(12345)\\n\\\"3039\\\"\\n\\njulia> hex2bytes(a)\\n2-element Array{UInt8,1}:\\n 0x30\\n 0x39\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.bytes2hex\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.bytes2hex\",\n    \"category\": \"Function\",\n    \"text\": \"bytes2hex(bin_arr::Array{UInt8, 1}) -> String\\n\\nConvert an array of bytes to its hexadecimal representation. All characters are in lower-case.\\n\\njulia> a = hex(12345)\\n\\\"3039\\\"\\n\\njulia> b = hex2bytes(a)\\n2-element Array{UInt8,1}:\\n 0x30\\n 0x39\\n\\njulia> bytes2hex(b)\\n\\\"3039\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Data-Formats-1\",\n    \"page\": \"Numbers\",\n    \"title\": \"Data Formats\",\n    \"category\": \"section\",\n    \"text\": \"Base.bin\\nBase.hex\\nBase.dec\\nBase.oct\\nBase.base\\nBase.digits\\nBase.digits!\\nBase.bits\\nBase.parse(::Type, ::Any, ::Any)\\nBase.tryparse\\nBase.big\\nBase.signed\\nBase.unsigned\\nBase.float(::Any)\\nBase.Math.significand\\nBase.Math.exponent\\nBase.complex(::Complex)\\nBase.bswap\\nBase.num2hex\\nBase.hex2num\\nBase.hex2bytes\\nBase.bytes2hex\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.one\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.one\",\n    \"category\": \"Function\",\n    \"text\": \"one(x)\\none(T::type)\\n\\nReturn a multiplicative identity for x: a value such that one(x)*x == x*one(x) == x.  Alternatively one(T) can take a type T, in which case one returns a multiplicative identity for any x of type T.\\n\\nIf possible, one(x) returns a value of the same type as x, and one(T) returns a value of type T.  However, this may not be the case for types representing dimensionful quantities (e.g. time in days), since the multiplicative identity must be dimensionless.  In that case, one(x) should return an identity value of the same precision (and shape, for matrices) as x.\\n\\nIf you want a quantity that is of the same type as x, or of type T, even if x is dimensionful, use oneunit instead.\\n\\njulia> one(3.7)\\n1.0\\n\\njulia> one(Int)\\n1\\n\\njulia> one(Dates.Day(1))\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.oneunit\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.oneunit\",\n    \"category\": \"Function\",\n    \"text\": \"oneunit(x::T)\\noneunit(T::Type)\\n\\nReturns T(one(x)), where T is either the type of the argument or (if a type is passed) the argument.  This differs from one for dimensionful quantities: one is dimensionless (a multiplicative identity) while oneunit is dimensionful (of the same type as x, or of type T).\\n\\njulia> oneunit(3.7)\\n1.0\\n\\njulia> oneunit(Dates.Day)\\n1 day\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.zero\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.zero\",\n    \"category\": \"Function\",\n    \"text\": \"zero(x)\\n\\nGet the additive identity element for the type of x (x can also specify the type itself).\\n\\njulia> zero(1)\\n0\\n\\njulia> zero(big\\\"2.0\\\")\\n0.000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\\njulia> zero(rand(2,2))\\n2\u00d72 Array{Float64,2}:\\n 0.0  0.0\\n 0.0  0.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.pi\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.pi\",\n    \"category\": \"Constant\",\n    \"text\": \"pi\\n\u03c0\\n\\nThe constant pi.\\n\\njulia> pi\\n\u03c0 = 3.1415926535897...\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.im\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.im\",\n    \"category\": \"Constant\",\n    \"text\": \"im\\n\\nThe imaginary unit.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.eu\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.eu\",\n    \"category\": \"Constant\",\n    \"text\": \"e\\neu\\n\\nThe constant e.\\n\\njulia> e\\ne = 2.7182818284590...\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.catalan\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.catalan\",\n    \"category\": \"Constant\",\n    \"text\": \"catalan\\n\\nCatalan's constant.\\n\\njulia> catalan\\ncatalan = 0.9159655941772...\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.eulergamma\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.eulergamma\",\n    \"category\": \"Constant\",\n    \"text\": \"\u03b3\\neulergamma\\n\\nEuler's constant.\\n\\njulia> eulergamma\\n\u03b3 = 0.5772156649015...\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.golden\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.golden\",\n    \"category\": \"Constant\",\n    \"text\": \"\u03c6\\ngolden\\n\\nThe golden ratio.\\n\\njulia> golden\\n\u03c6 = 1.6180339887498...\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Inf\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Inf\",\n    \"category\": \"Constant\",\n    \"text\": \"Inf\\n\\nPositive infinity of type Float64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Inf32\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Inf32\",\n    \"category\": \"Constant\",\n    \"text\": \"Inf32\\n\\nPositive infinity of type Float32.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Inf16\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Inf16\",\n    \"category\": \"Constant\",\n    \"text\": \"Inf16\\n\\nPositive infinity of type Float16.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.NaN\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.NaN\",\n    \"category\": \"Constant\",\n    \"text\": \"NaN\\n\\nA not-a-number value of type Float64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.NaN32\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.NaN32\",\n    \"category\": \"Constant\",\n    \"text\": \"NaN32\\n\\nA not-a-number value of type Float32.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.NaN16\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.NaN16\",\n    \"category\": \"Constant\",\n    \"text\": \"NaN16\\n\\nA not-a-number value of type Float16.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.issubnormal\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.issubnormal\",\n    \"category\": \"Function\",\n    \"text\": \"issubnormal(f) -> Bool\\n\\nTest whether a floating point number is subnormal.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.isfinite\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.isfinite\",\n    \"category\": \"Function\",\n    \"text\": \"isfinite(f) -> Bool\\n\\nTest whether a number is finite.\\n\\njulia> isfinite(5)\\ntrue\\n\\njulia> isfinite(NaN32)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.isinf\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.isinf\",\n    \"category\": \"Function\",\n    \"text\": \"isinf(f) -> Bool\\n\\nTest whether a number is infinite.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.isnan\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.isnan\",\n    \"category\": \"Function\",\n    \"text\": \"isnan(f) -> Bool\\n\\nTest whether a floating point number is not a number (NaN).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.iszero\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.iszero\",\n    \"category\": \"Function\",\n    \"text\": \"iszero(x)\\n\\nReturn true if x == zero(x); if x is an array, this checks whether all of the elements of x are zero.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.nextfloat\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.nextfloat\",\n    \"category\": \"Function\",\n    \"text\": \"nextfloat(x::AbstractFloat, n::Integer)\\n\\nThe result of n iterative applications of nextfloat to x if n >= 0, or -n applications of prevfloat if n < 0.\\n\\n\\n\\nnextfloat(x::AbstractFloat)\\n\\nReturns the smallest floating point number y of the same type as x such x < y. If no such y exists (e.g. if x is Inf or NaN), then returns x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.prevfloat\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.prevfloat\",\n    \"category\": \"Function\",\n    \"text\": \"prevfloat(x::AbstractFloat)\\n\\nReturns the largest floating point number y of the same type as x such y < x. If no such y exists (e.g. if x is -Inf or NaN), then returns x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.isinteger\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.isinteger\",\n    \"category\": \"Function\",\n    \"text\": \"isinteger(x) -> Bool\\n\\nTest whether x is numerically equal to some integer.\\n\\njulia> isinteger(4.0)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.isreal\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.isreal\",\n    \"category\": \"Function\",\n    \"text\": \"isreal(x) -> Bool\\n\\nTest whether x or all its elements are numerically equal to some real number.\\n\\njulia> isreal(5.)\\ntrue\\n\\njulia> isreal([4.; complex(0,1)])\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Float32-Tuple{Any}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Float32\",\n    \"category\": \"Method\",\n    \"text\": \"Float32(x [, mode::RoundingMode])\\n\\nCreate a Float32 from x. If x is not exactly representable then mode determines how x is rounded.\\n\\nExamples\\n\\njulia> Float32(1/3, RoundDown)\\n0.3333333f0\\n\\njulia> Float32(1/3, RoundUp)\\n0.33333334f0\\n\\nSee RoundingMode for available rounding modes.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Core.Float64-Tuple{Any}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Core.Float64\",\n    \"category\": \"Method\",\n    \"text\": \"Float64(x [, mode::RoundingMode])\\n\\nCreate a Float64 from x. If x is not exactly representable then mode determines how x is rounded.\\n\\nExamples\\n\\njulia> Float64(pi, RoundDown)\\n3.141592653589793\\n\\njulia> Float64(pi, RoundUp)\\n3.1415926535897936\\n\\nSee RoundingMode for available rounding modes.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.GMP.BigInt-Tuple{Any}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.GMP.BigInt\",\n    \"category\": \"Method\",\n    \"text\": \"BigInt(x)\\n\\nCreate an arbitrary precision integer. x may be an Int (or anything that can be converted to an Int). The usual mathematical operators are defined for this type, and results are promoted to a BigInt.\\n\\nInstances can be constructed from strings via parse, or using the big string literal.\\n\\njulia> parse(BigInt, \\\"42\\\")\\n42\\n\\njulia> big\\\"313\\\"\\n313\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.MPFR.BigFloat-Tuple{Any}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.MPFR.BigFloat\",\n    \"category\": \"Method\",\n    \"text\": \"BigFloat(x)\\n\\nCreate an arbitrary precision floating point number. x may be an Integer, a Float64 or a BigInt. The usual mathematical operators are defined for this type, and results are promoted to a BigFloat.\\n\\nNote that because decimal literals are converted to floating point numbers when parsed, BigFloat(2.1) may not yield what you expect. You may instead prefer to initialize constants from strings via parse, or using the big string literal.\\n\\njulia> BigFloat(2.1)\\n2.100000000000000088817841970012523233890533447265625000000000000000000000000000\\n\\njulia> big\\\"2.1\\\"\\n2.099999999999999999999999999999999999999999999999999999999999999999999999999986\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Rounding.rounding\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Rounding.rounding\",\n    \"category\": \"Function\",\n    \"text\": \"rounding(T)\\n\\nGet the current floating point rounding mode for type T, controlling the rounding of basic arithmetic functions (+, -, *, / and sqrt) and type conversion.\\n\\nSee RoundingMode for available modes.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Rounding.setrounding-Tuple{Type,Any}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Rounding.setrounding\",\n    \"category\": \"Method\",\n    \"text\": \"setrounding(T, mode)\\n\\nSet the rounding mode of floating point type T, controlling the rounding of basic arithmetic functions (+, -, *, / and sqrt) and type conversion. Other numerical functions may give incorrect or invalid values when using rounding modes other than the default RoundNearest.\\n\\nNote that this may affect other types, for instance changing the rounding mode of Float64 will change the rounding mode of Float32. See RoundingMode for available modes.\\n\\nwarning: Warning\\nThis feature is still experimental, and may give unexpected or incorrect values.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Rounding.setrounding-Tuple{Function,Type,RoundingMode}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Rounding.setrounding\",\n    \"category\": \"Method\",\n    \"text\": \"setrounding(f::Function, T, mode)\\n\\nChange the rounding mode of floating point type T for the duration of f. It is logically equivalent to:\\n\\nold = rounding(T)\\nsetrounding(T, mode)\\nf()\\nsetrounding(T, old)\\n\\nSee RoundingMode for available rounding modes.\\n\\nwarning: Warning\\nThis feature is still experimental, and may give unexpected or incorrect values. A known problem is the interaction with compiler optimisations, e.g.julia> setrounding(Float64,RoundDown) do\\n           1.1 + 0.1\\n       end\\n1.2000000000000002Here the compiler is constant folding, that is evaluating a known constant expression at compile time, however the rounding mode is only changed at runtime, so this is not reflected in the function result. This can be avoided by moving constants outside the expression, e.g.julia> x = 1.1; y = 0.1;\\n\\njulia> setrounding(Float64,RoundDown) do\\n           x + y\\n       end\\n1.2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Rounding.get_zero_subnormals\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Rounding.get_zero_subnormals\",\n    \"category\": \"Function\",\n    \"text\": \"get_zero_subnormals() -> Bool\\n\\nReturns false if operations on subnormal floating-point values (\\\"denormals\\\") obey rules for IEEE arithmetic, and true if they might be converted to zeros.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Rounding.set_zero_subnormals\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Rounding.set_zero_subnormals\",\n    \"category\": \"Function\",\n    \"text\": \"set_zero_subnormals(yes::Bool) -> Bool\\n\\nIf yes is false, subsequent floating-point operations follow rules for IEEE arithmetic on subnormal values (\\\"denormals\\\"). Otherwise, floating-point operations are permitted (but not required) to convert subnormal inputs or outputs to zero. Returns true unless yes==true but the hardware does not support zeroing of subnormal numbers.\\n\\nset_zero_subnormals(true) can speed up some computations on some hardware. However, it can break identities such as (x-y==0) == (x==y).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#General-Number-Functions-and-Constants-1\",\n    \"page\": \"Numbers\",\n    \"title\": \"General Number Functions and Constants\",\n    \"category\": \"section\",\n    \"text\": \"Base.one\\nBase.oneunit\\nBase.zero\\nBase.pi\\nBase.im\\nBase.eu\\nBase.catalan\\nBase.eulergamma\\nBase.golden\\nBase.Inf\\nBase.Inf32\\nBase.Inf16\\nBase.NaN\\nBase.NaN32\\nBase.NaN16\\nBase.issubnormal\\nBase.isfinite\\nBase.isinf\\nBase.isnan\\nBase.iszero\\nBase.nextfloat\\nBase.prevfloat\\nBase.isinteger\\nBase.isreal\\nCore.Float32(::Any)\\nCore.Float64(::Any)\\nBase.GMP.BigInt(::Any)\\nBase.MPFR.BigFloat(::Any)\\nBase.Rounding.rounding\\nBase.Rounding.setrounding(::Type, ::Any)\\nBase.Rounding.setrounding(::Function, ::Type, ::RoundingMode)\\nBase.Rounding.get_zero_subnormals\\nBase.Rounding.set_zero_subnormals\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.count_ones\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.count_ones\",\n    \"category\": \"Function\",\n    \"text\": \"count_ones(x::Integer) -> Integer\\n\\nNumber of ones in the binary representation of x.\\n\\njulia> count_ones(7)\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.count_zeros\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.count_zeros\",\n    \"category\": \"Function\",\n    \"text\": \"count_zeros(x::Integer) -> Integer\\n\\nNumber of zeros in the binary representation of x.\\n\\njulia> count_zeros(Int32(2 ^ 16 - 1))\\n16\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.leading_zeros\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.leading_zeros\",\n    \"category\": \"Function\",\n    \"text\": \"leading_zeros(x::Integer) -> Integer\\n\\nNumber of zeros leading the binary representation of x.\\n\\njulia> leading_zeros(Int32(1))\\n31\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.leading_ones\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.leading_ones\",\n    \"category\": \"Function\",\n    \"text\": \"leading_ones(x::Integer) -> Integer\\n\\nNumber of ones leading the binary representation of x.\\n\\njulia> leading_ones(UInt32(2 ^ 32 - 2))\\n31\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.trailing_zeros\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.trailing_zeros\",\n    \"category\": \"Function\",\n    \"text\": \"trailing_zeros(x::Integer) -> Integer\\n\\nNumber of zeros trailing the binary representation of x.\\n\\njulia> trailing_zeros(2)\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.trailing_ones\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.trailing_ones\",\n    \"category\": \"Function\",\n    \"text\": \"trailing_ones(x::Integer) -> Integer\\n\\nNumber of ones trailing the binary representation of x.\\n\\njulia> trailing_ones(3)\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.isodd\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.isodd\",\n    \"category\": \"Function\",\n    \"text\": \"isodd(x::Integer) -> Bool\\n\\nReturns true if x is odd (that is, not divisible by 2), and false otherwise.\\n\\njulia> isodd(9)\\ntrue\\n\\njulia> isodd(10)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.iseven\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.iseven\",\n    \"category\": \"Function\",\n    \"text\": \"iseven(x::Integer) -> Bool\\n\\nReturns true is x is even (that is, divisible by 2), and false otherwise.\\n\\njulia> iseven(9)\\nfalse\\n\\njulia> iseven(10)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Integers-1\",\n    \"page\": \"Numbers\",\n    \"title\": \"Integers\",\n    \"category\": \"section\",\n    \"text\": \"Base.count_ones\\nBase.count_zeros\\nBase.leading_zeros\\nBase.leading_ones\\nBase.trailing_zeros\\nBase.trailing_ones\\nBase.isodd\\nBase.iseven\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.precision\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.precision\",\n    \"category\": \"Function\",\n    \"text\": \"precision(num::AbstractFloat)\\n\\nGet the precision of a floating point number, as defined by the effective number of bits in the mantissa.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.precision-Tuple{Type{BigFloat}}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.precision\",\n    \"category\": \"Method\",\n    \"text\": \"precision(BigFloat)\\n\\nGet the precision (in bits) currently used for BigFloat arithmetic.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.MPFR.setprecision\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.MPFR.setprecision\",\n    \"category\": \"Function\",\n    \"text\": \"setprecision([T=BigFloat,] precision::Int)\\n\\nSet the precision (in bits) to be used for T arithmetic.\\n\\n\\n\\nsetprecision(f::Function, [T=BigFloat,] precision::Integer)\\n\\nChange the T arithmetic precision (in bits) for the duration of f. It is logically equivalent to:\\n\\nold = precision(BigFloat)\\nsetprecision(BigFloat, precision)\\nf()\\nsetprecision(BigFloat, old)\\n\\nOften used as setprecision(T, precision) do ... end\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.MPFR.BigFloat-Tuple{Any,Int64}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.MPFR.BigFloat\",\n    \"category\": \"Method\",\n    \"text\": \"BigFloat(x, prec::Int)\\n\\nCreate a representation of x as a BigFloat with precision prec.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.MPFR.BigFloat-Tuple{Union{AbstractFloat, Integer, String},RoundingMode}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.MPFR.BigFloat\",\n    \"category\": \"Method\",\n    \"text\": \"BigFloat(x, rounding::RoundingMode)\\n\\nCreate a representation of x as a BigFloat with the current global precision and rounding mode rounding.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.MPFR.BigFloat-Tuple{Any,Int64,RoundingMode}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.MPFR.BigFloat\",\n    \"category\": \"Method\",\n    \"text\": \"BigFloat(x, prec::Int, rounding::RoundingMode)\\n\\nCreate a representation of x as a BigFloat with precision prec and rounding mode rounding.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.MPFR.BigFloat-Tuple{String}\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.MPFR.BigFloat\",\n    \"category\": \"Method\",\n    \"text\": \"BigFloat(x::String)\\n\\nCreate a representation of the string x as a BigFloat.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#BigFloats-1\",\n    \"page\": \"Numbers\",\n    \"title\": \"BigFloats\",\n    \"category\": \"section\",\n    \"text\": \"The BigFloat type implements arbitrary-precision floating-point arithmetic using the GNU MPFR library.Base.precision\\nBase.MPFR.precision(::Type{BigFloat})\\nBase.MPFR.setprecision\\nBase.MPFR.BigFloat(x, prec::Int)\\nBigFloat(x::Union{Integer, AbstractFloat, String}, rounding::RoundingMode)\\nBase.MPFR.BigFloat(x, prec::Int, rounding::RoundingMode)\\nBase.MPFR.BigFloat(x::String)\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.srand\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.srand\",\n    \"category\": \"Function\",\n    \"text\": \"srand([rng=GLOBAL_RNG], [seed]) -> rng\\nsrand([rng=GLOBAL_RNG], filename, n=4) -> rng\\n\\nReseed the random number generator. If a seed is provided, the RNG will give a reproducible sequence of numbers, otherwise Julia will get entropy from the system. For MersenneTwister, the seed may be a non-negative integer, a vector of UInt32 integers or a filename, in which case the seed is read from a file (4n bytes are read from the file, where n is an optional argument). RandomDevice does not support seeding.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.MersenneTwister\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.MersenneTwister\",\n    \"category\": \"Type\",\n    \"text\": \"MersenneTwister(seed)\\n\\nCreate a MersenneTwister RNG object. Different RNG objects can have their own seeds, which may be useful for generating different streams of random numbers.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.RandomDevice\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.RandomDevice\",\n    \"category\": \"Type\",\n    \"text\": \"RandomDevice()\\n\\nCreate a RandomDevice RNG object. Two such objects will always generate different streams of random numbers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.rand\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.rand\",\n    \"category\": \"Function\",\n    \"text\": \"rand([rng=GLOBAL_RNG], [S], [dims...])\\n\\nPick a random element or array of random elements from the set of values specified by S; S can be\\n\\nan indexable collection (for example 1:n or ['x','y','z']), or\\na type: the set of values to pick from is then equivalent to typemin(S):typemax(S) for integers (this is not applicable to BigInt), and to 0 1) for floating point numbers;\\n\\nS defaults to Float64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.rand!\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.rand!\",\n    \"category\": \"Function\",\n    \"text\": \"rand!([rng=GLOBAL_RNG], A, [coll])\\n\\nPopulate the array A with random values. If the indexable collection coll is specified, the values are picked randomly from coll. This is equivalent to copy!(A, rand(rng, coll, size(A))) or copy!(A, rand(rng, eltype(A), size(A))) but without allocating a new array.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> rand!(rng, zeros(5))\\n5-element Array{Float64,1}:\\n 0.590845\\n 0.766797\\n 0.566237\\n 0.460085\\n 0.794026\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.bitrand\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.bitrand\",\n    \"category\": \"Function\",\n    \"text\": \"bitrand([rng=GLOBAL_RNG], [dims...])\\n\\nGenerate a BitArray of random boolean values.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> bitrand(rng, 10)\\n10-element BitArray{1}:\\n  true\\n  true\\n  true\\n false\\n  true\\n false\\n false\\n  true\\n false\\n  true\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.randn\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.randn\",\n    \"category\": \"Function\",\n    \"text\": \"randn([rng=GLOBAL_RNG], [T=Float64], [dims...])\\n\\nGenerate a normally-distributed random number of type T with mean 0 and standard deviation 1. Optionally generate an array of normally-distributed random numbers. The Base module currently provides an implementation for the types Float16, Float32, and Float64 (the default).\\n\\nExamples\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> randn(rng, Float64)\\n0.8673472019512456\\n\\njulia> randn(rng, Float32, (2, 4))\\n2\u00d74 Array{Float32,2}:\\n -0.901744  -0.902914  2.21188   -0.271735\\n -0.494479   0.864401  0.532813   0.502334\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.randn!\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.randn!\",\n    \"category\": \"Function\",\n    \"text\": \"randn!([rng=GLOBAL_RNG], A::AbstractArray) -> A\\n\\nFill the array A with normally-distributed (mean 0, standard deviation 1) random numbers. Also see the rand function.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> randn!(rng, zeros(5))\\n5-element Array{Float64,1}:\\n  0.867347\\n -0.901744\\n -0.494479\\n -0.902914\\n  0.864401\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.randexp\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.randexp\",\n    \"category\": \"Function\",\n    \"text\": \"randexp([rng=GLOBAL_RNG], [T=Float64], [dims...])\\n\\nGenerate a random number of type T according to the exponential distribution with scale 1. Optionally generate an array of such random numbers. The Base module currently provides an implementation for the types Float16, Float32, and Float64 (the default).\\n\\nExamples\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> randexp(rng, Float32)\\n2.4835055f0\\n\\njulia> randexp(rng, 3, 3)\\n3\u00d73 Array{Float64,2}:\\n 1.5167    1.30652   0.344435\\n 0.604436  2.78029   0.418516\\n 0.695867  0.693292  0.643644\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.randexp!\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.randexp!\",\n    \"category\": \"Function\",\n    \"text\": \"randexp!([rng=GLOBAL_RNG], A::AbstractArray) -> A\\n\\nFill the array A with random numbers following the exponential distribution (with scale 1).\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> randexp!(rng, zeros(5))\\n5-element Array{Float64,1}:\\n 2.48351\\n 1.5167\\n 0.604436\\n 0.695867\\n 1.30652\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Base.Random.randjump\",\n    \"page\": \"Numbers\",\n    \"title\": \"Base.Random.randjump\",\n    \"category\": \"Function\",\n    \"text\": \"randjump(r::MersenneTwister, jumps::Integer, [jumppoly::AbstractString=dSFMT.JPOLY1e21]) -> Vector{MersenneTwister}\\n\\nCreate an array of the size jumps of initialized MersenneTwister RNG objects. The first RNG object given as a parameter and following MersenneTwister RNGs in the array are initialized such that a state of the RNG object in the array would be moved forward (without generating numbers) from a previous RNG object array element on a particular number of steps encoded by the jump polynomial jumppoly.\\n\\nDefault jump polynomial moves forward MersenneTwister RNG state by 10^20 steps.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/numbers.html#Random-Numbers-1\",\n    \"page\": \"Numbers\",\n    \"title\": \"Random Numbers\",\n    \"category\": \"section\",\n    \"text\": \"Random number generation in Julia uses the Mersenne Twister library via MersenneTwister objects. Julia has a global RNG, which is used by default. Other RNG types can be plugged in by inheriting the AbstractRNG type; they can then be used to have multiple streams of random numbers. Besides MersenneTwister, Julia also provides the RandomDevice RNG type, which is a wrapper over the OS provided entropy.Most functions related to random generation accept an optional AbstractRNG as the first argument, rng , which defaults to the global one if not provided. Morever, some of them accept optionally dimension specifications dims... (which can be given as a tuple) to generate arrays of random values.A MersenneTwister or RandomDevice RNG can generate random numbers of the following types: Float16, Float32, Float64, Bool, Int8, UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Int128, UInt128, BigInt (or complex numbers of those types). Random floating point numbers are generated uniformly in 0 1). As BigInt represents unbounded integers, the interval must be specified (e.g. rand(big(1:6))).Base.Random.srand\\nBase.Random.MersenneTwister\\nBase.Random.RandomDevice\\nBase.Random.rand\\nBase.Random.rand!\\nBase.Random.bitrand\\nBase.Random.randn\\nBase.Random.randn!\\nBase.Random.randexp\\nBase.Random.randexp!\\nBase.Random.randjump\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#\",\n    \"page\": \"Strings\",\n    \"title\": \"Strings\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.length-Tuple{AbstractString}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.length\",\n    \"category\": \"Method\",\n    \"text\": \"length(s::AbstractString)\\n\\nThe number of characters in string s.\\n\\nExample\\n\\njulia> length(\\\"j\u03bc\u039bI\u03b1\\\")\\n5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.sizeof-Tuple{AbstractString}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.sizeof\",\n    \"category\": \"Method\",\n    \"text\": \"sizeof(s::AbstractString)\\n\\nThe number of bytes in string s.\\n\\nExample\\n\\njulia> sizeof(\\\"\u2764\\\")\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.:*-Tuple{AbstractString,Vararg{Any,N} where N}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.:*\",\n    \"category\": \"Method\",\n    \"text\": \"*(x, y...)\\n\\nMultiplication operator. x*y*z*... calls this function with all arguments, i.e. *(x, y, z, ...).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.:^-Tuple{AbstractString,Integer}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.:^\",\n    \"category\": \"Method\",\n    \"text\": \"^(s::AbstractString, n::Integer)\\n\\nRepeat n times the string s. The repeat function is an alias to this operator.\\n\\njulia> \\\"Test \\\"^3\\n\\\"Test Test Test \\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.string\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.string\",\n    \"category\": \"Function\",\n    \"text\": \"string(xs...)\\n\\nCreate a string from any values using the print function.\\n\\njulia> string(\\\"a\\\", 1, true)\\n\\\"a1true\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.repr\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.repr\",\n    \"category\": \"Function\",\n    \"text\": \"repr(x)\\n\\nCreate a string from any value using the showall function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Core.String-Tuple{AbstractString}\",\n    \"page\": \"Strings\",\n    \"title\": \"Core.String\",\n    \"category\": \"Method\",\n    \"text\": \"String(s::AbstractString)\\n\\nConvert a string to a contiguous byte array representation encoded as UTF-8 bytes. This representation is often appropriate for passing strings to C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.transcode\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.transcode\",\n    \"category\": \"Function\",\n    \"text\": \"transcode(T, src)\\n\\nConvert string data between Unicode encodings. src is either a String or a Vector{UIntXX} of UTF-XX code units, where XX is 8, 16, or 32. T indicates the encoding of the return value: String to return a (UTF-8 encoded) String or UIntXX to return a Vector{UIntXX} of UTF-XX data.   (The alias Cwchar_t can also be used as the integer type, for converting wchar_t* strings used by external C libraries.)\\n\\nThe transcode function succeeds as long as the input data can be reasonably represented in the target encoding; it always succeeds for conversions between UTF-XX encodings, even for invalid Unicode data.\\n\\nOnly conversion to/from UTF-8 is currently supported.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.unsafe_string\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.unsafe_string\",\n    \"category\": \"Function\",\n    \"text\": \"unsafe_string(p::Ptr{UInt8}, [length::Integer])\\n\\nCopy a string from the address of a C-style (NUL-terminated) string encoded as UTF-8. (The pointer can be safely freed afterwards.) If length is specified (the length of the data in bytes), the string does not have to be NUL-terminated.\\n\\nThis function is labelled \\\"unsafe\\\" because it will crash if p is not a valid memory address to data of the requested length.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.codeunit-Tuple{AbstractString,Integer}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.codeunit\",\n    \"category\": \"Method\",\n    \"text\": \"codeunit(s::AbstractString, i::Integer)\\n\\nGet the ith code unit of an encoded string. For example, returns the ith byte of the representation of a UTF-8 string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.ascii\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.ascii\",\n    \"category\": \"Function\",\n    \"text\": \"ascii(s::AbstractString)\\n\\nConvert a string to String type and check that it contains only ASCII data, otherwise throwing an ArgumentError indicating the position of the first non-ASCII byte.\\n\\njulia> ascii(\\\"abcde\u03b3fgh\\\")\\nERROR: ArgumentError: invalid ASCII at index 6 in \\\"abcde\u03b3fgh\\\"\\nStacktrace:\\n [1] ascii(::String) at ./strings/util.jl:479\\n\\njulia> ascii(\\\"abcdefgh\\\")\\n\\\"abcdefgh\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.@r_str\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.@r_str\",\n    \"category\": \"Macro\",\n    \"text\": \"@r_str -> Regex\\n\\nConstruct a regex, such as r\\\"^[a-z]*$\\\". The regex also accepts one or more flags, listed after the ending quote, to change its behaviour:\\n\\ni enables case-insensitive matching\\nm treats the ^ and $ tokens as matching the start and end of individual lines, as opposed to the whole string.\\ns allows the . modifier to match newlines.\\nx enables \\\"comment mode\\\": whitespace is enabled except when escaped with \\\\, and # is treated as starting a comment.\\n\\nFor example, this regex has all three flags enabled:\\n\\njulia> match(r\\\"a+.*b+.*?d$\\\"ism, \\\"Goodbye,\\\\nOh, angry,\\\\nBad world\\\\n\\\")\\nRegexMatch(\\\"angry,\\\\nBad world\\\")\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.Docs.@html_str\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.Docs.@html_str\",\n    \"category\": \"Macro\",\n    \"text\": \"@html_str -> Docs.HTML\\n\\nCreate an HTML object from a literal string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.Docs.@text_str\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.Docs.@text_str\",\n    \"category\": \"Macro\",\n    \"text\": \"@text_str -> Docs.Text\\n\\nCreate a Text object from a literal string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.normalize_string\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.normalize_string\",\n    \"category\": \"Function\",\n    \"text\": \"normalize_string(s::AbstractString, normalform::Symbol)\\n\\nNormalize the string s according to one of the four \\\"normal forms\\\" of the Unicode standard: normalform can be :NFC, :NFD, :NFKC, or :NFKD.  Normal forms C (canonical composition) and D (canonical decomposition) convert different visually identical representations of the same abstract string into a single canonical form, with form C being more compact.  Normal forms KC and KD additionally canonicalize \\\"compatibility equivalents\\\": they convert characters that are abstractly similar but visually distinct into a single canonical choice (e.g. they expand ligatures into the individual characters), with form KC being more compact.\\n\\nAlternatively, finer control and additional transformations may be be obtained by calling normalize_string(s; keywords...), where any number of the following boolean keywords options (which all default to false except for compose) are specified:\\n\\ncompose=false: do not perform canonical composition\\ndecompose=true: do canonical decomposition instead of canonical composition (compose=true is ignored if present)\\ncompat=true: compatibility equivalents are canonicalized\\ncasefold=true: perform Unicode case folding, e.g. for case-insensitive string comparison\\nnewline2lf=true, newline2ls=true, or newline2ps=true: convert various newline sequences (LF, CRLF, CR, NEL) into a linefeed (LF), line-separation (LS), or paragraph-separation (PS) character, respectively\\nstripmark=true: strip diacritical marks (e.g. accents)\\nstripignore=true: strip Unicode's \\\"default ignorable\\\" characters (e.g. the soft hyphen or the left-to-right marker)\\nstripcc=true: strip control characters; horizontal tabs and form feeds are converted to spaces; newlines are also converted to spaces unless a newline-conversion flag was specified\\nrejectna=true: throw an error if unassigned code points are found\\nstable=true: enforce Unicode Versioning Stability\\n\\nFor example, NFKC corresponds to the options compose=true, compat=true, stable=true.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.graphemes\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.graphemes\",\n    \"category\": \"Function\",\n    \"text\": \"graphemes(s::AbstractString) -> GraphemeIterator\\n\\nReturns an iterator over substrings of s that correspond to the extended graphemes in the string, as defined by Unicode UAX #29. (Roughly, these are what users would perceive as single characters, even though they may contain more than one codepoint; for example a letter combined with an accent mark is a single grapheme.)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.isvalid-Tuple{Any}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.isvalid\",\n    \"category\": \"Method\",\n    \"text\": \"isvalid(value) -> Bool\\n\\nReturns true if the given value is valid for its type, which currently can be either Char or String.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.isvalid-Tuple{Any,Any}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.isvalid\",\n    \"category\": \"Method\",\n    \"text\": \"isvalid(T, value) -> Bool\\n\\nReturns true if the given value is valid for that type. Types currently can be either Char or String. Values for Char can be of type Char or UInt32. Values for String can be of that type, or Vector{UInt8}.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.isvalid-Tuple{AbstractString,Integer}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.isvalid\",\n    \"category\": \"Method\",\n    \"text\": \"isvalid(str::AbstractString, i::Integer)\\n\\nTells whether index i is valid for the given string.\\n\\nExamples\\n\\njulia> str = \\\"\u03b1\u03b2\u03b3def\\\";\\n\\njulia> isvalid(str, 1)\\ntrue\\n\\njulia> str[1]\\n'\u03b1': Unicode U+03b1 (category Ll: Letter, lowercase)\\n\\njulia> isvalid(str, 2)\\nfalse\\n\\njulia> str[2]\\nERROR: UnicodeError: invalid character index\\n[...]\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.is_assigned_char\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.is_assigned_char\",\n    \"category\": \"Function\",\n    \"text\": \"is_assigned_char(c) -> Bool\\n\\nReturns true if the given char or integer is an assigned Unicode code point.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.ismatch\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.ismatch\",\n    \"category\": \"Function\",\n    \"text\": \"ismatch(r::Regex, s::AbstractString) -> Bool\\n\\nTest whether a string contains a match of the given regular expression.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.match\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.match\",\n    \"category\": \"Function\",\n    \"text\": \"match(r::Regex, s::AbstractString[, idx::Integer[, addopts]])\\n\\nSearch for the first match of the regular expression r in s and return a RegexMatch object containing the match, or nothing if the match failed. The matching substring can be retrieved by accessing m.match and the captured sequences can be retrieved by accessing m.captures The optional idx argument specifies an index at which to start the search.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.eachmatch\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.eachmatch\",\n    \"category\": \"Function\",\n    \"text\": \"eachmatch(r::Regex, s::AbstractString[, overlap::Bool=false])\\n\\nSearch for all matches of a the regular expression r in s and return a iterator over the matches. If overlap is true, the matching sequences are allowed to overlap indices in the original string, otherwise they must be from distinct character ranges.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.matchall\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.matchall\",\n    \"category\": \"Function\",\n    \"text\": \"matchall(r::Regex, s::AbstractString[, overlap::Bool=false]) -> Vector{AbstractString}\\n\\nReturn a vector of the matching substrings from eachmatch.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.lpad\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.lpad\",\n    \"category\": \"Function\",\n    \"text\": \"lpad(s, n::Integer, p::AbstractString=\\\" \\\")\\n\\nMake a string at least n columns wide when printed by padding s on the left with copies of p.\\n\\njulia> lpad(\\\"March\\\",10)\\n\\\"     March\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.rpad\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.rpad\",\n    \"category\": \"Function\",\n    \"text\": \"rpad(s, n::Integer, p::AbstractString=\\\" \\\")\\n\\nMake a string at least n columns wide when printed by padding s on the right with copies of p.\\n\\njulia> rpad(\\\"March\\\",20)\\n\\\"March               \\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.search\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.search\",\n    \"category\": \"Function\",\n    \"text\": \"search(string::AbstractString, chars::Chars, [start::Integer])\\n\\nSearch for the first occurrence of the given characters within the given string. The second argument may be a single character, a vector or a set of characters, a string, or a regular expression (though regular expressions are only allowed on contiguous strings, such as ASCII or UTF-8 strings). The third argument optionally specifies a starting index. The return value is a range of indexes where the matching sequence is found, such that s[search(s,x)] == x:\\n\\nsearch(string, \\\"substring\\\") = start:end such that string[start:end] == \\\"substring\\\", or 0:-1 if unmatched.\\n\\nsearch(string, 'c') = index such that string[index] == 'c', or 0 if unmatched.\\n\\njulia> search(\\\"Hello to the world\\\", \\\"z\\\")\\n0:-1\\n\\njulia> search(\\\"JuliaLang\\\",\\\"Julia\\\")\\n1:5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.rsearch\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.rsearch\",\n    \"category\": \"Function\",\n    \"text\": \"rsearch(s::AbstractString, chars::Chars, [start::Integer])\\n\\nSimilar to search, but returning the last occurrence of the given characters within the given string, searching in reverse from start.\\n\\njulia> rsearch(\\\"aaabbb\\\",\\\"b\\\")\\n6:6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.searchindex\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.searchindex\",\n    \"category\": \"Function\",\n    \"text\": \"searchindex(s::AbstractString, substring, [start::Integer])\\n\\nSimilar to search, but return only the start index at which the substring is found, or 0 if it is not.\\n\\njulia> searchindex(\\\"Hello to the world\\\", \\\"z\\\")\\n0\\n\\njulia> searchindex(\\\"JuliaLang\\\",\\\"Julia\\\")\\n1\\n\\njulia> searchindex(\\\"JuliaLang\\\",\\\"Lang\\\")\\n6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.rsearchindex\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.rsearchindex\",\n    \"category\": \"Function\",\n    \"text\": \"rsearchindex(s::AbstractString, substring, [start::Integer])\\n\\nSimilar to rsearch, but return only the start index at which the substring is found, or 0 if it is not.\\n\\njulia> rsearchindex(\\\"aaabbb\\\",\\\"b\\\")\\n6\\n\\njulia> rsearchindex(\\\"aaabbb\\\",\\\"a\\\")\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.contains-Tuple{AbstractString,AbstractString}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.contains\",\n    \"category\": \"Method\",\n    \"text\": \"contains(haystack::AbstractString, needle::AbstractString)\\n\\nDetermine whether the second argument is a substring of the first.\\n\\njulia> contains(\\\"JuliaLang is pretty cool!\\\", \\\"Julia\\\")\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.reverse-Tuple{AbstractString}\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.reverse\",\n    \"category\": \"Method\",\n    \"text\": \"reverse(s::AbstractString) -> AbstractString\\n\\nReverses a string.\\n\\njulia> reverse(\\\"JuliaLang\\\")\\n\\\"gnaLailuJ\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.replace\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.replace\",\n    \"category\": \"Function\",\n    \"text\": \"replace(string::AbstractString, pat, r[, n::Integer=0])\\n\\nSearch for the given pattern pat, and replace each occurrence with r. If n is provided, replace at most n occurrences. As with search, the second argument may be a single character, a vector or a set of characters, a string, or a regular expression. If r is a function, each occurrence is replaced with r(s) where s is the matched substring. If pat is a regular expression and r is a SubstitutionString, then capture group references in r are replaced with the corresponding matched text.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.split\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.split\",\n    \"category\": \"Function\",\n    \"text\": \"split(s::AbstractString, [chars]; limit::Integer=0, keep::Bool=true)\\n\\nReturn an array of substrings by splitting the given string on occurrences of the given character delimiters, which may be specified in any of the formats allowed by search's second argument (i.e. a single character, collection of characters, string, or regular expression). If chars is omitted, it defaults to the set of all space characters, and keep is taken to be false. The two keyword arguments are optional: they are a maximum size for the result and a flag determining whether empty fields should be kept in the result.\\n\\njulia> a = \\\"Ma.rch\\\"\\n\\\"Ma.rch\\\"\\n\\njulia> split(a,\\\".\\\")\\n2-element Array{SubString{String},1}:\\n \\\"Ma\\\"\\n \\\"rch\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.rsplit\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.rsplit\",\n    \"category\": \"Function\",\n    \"text\": \"rsplit(s::AbstractString, [chars]; limit::Integer=0, keep::Bool=true)\\n\\nSimilar to split, but starting from the end of the string.\\n\\njulia> a = \\\"M.a.r.c.h\\\"\\n\\\"M.a.r.c.h\\\"\\n\\njulia> rsplit(a,\\\".\\\")\\n5-element Array{SubString{String},1}:\\n \\\"M\\\"\\n \\\"a\\\"\\n \\\"r\\\"\\n \\\"c\\\"\\n \\\"h\\\"\\n\\njulia> rsplit(a,\\\".\\\";limit=1)\\n1-element Array{SubString{String},1}:\\n \\\"M.a.r.c.h\\\"\\n\\njulia> rsplit(a,\\\".\\\";limit=2)\\n2-element Array{SubString{String},1}:\\n \\\"M.a.r.c\\\"\\n \\\"h\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.strip\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.strip\",\n    \"category\": \"Function\",\n    \"text\": \"strip(s::AbstractString, [chars::Chars])\\n\\nReturn s with any leading and trailing whitespace removed. If chars (a character, or vector or set of characters) is provided, instead remove characters contained in it.\\n\\njulia> strip(\\\"{3, 5}\\\\n\\\", ['{', '}', '\\\\n'])\\n\\\"3, 5\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.lstrip\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.lstrip\",\n    \"category\": \"Function\",\n    \"text\": \"lstrip(s::AbstractString[, chars::Chars])\\n\\nReturn s with any leading whitespace and delimiters removed. The default delimiters to remove are ' ', \\\\t, \\\\n, \\\\v, \\\\f, and \\\\r. If chars (a character, or vector or set of characters) is provided, instead remove characters contained in it.\\n\\njulia> a = lpad(\\\"March\\\", 20)\\n\\\"               March\\\"\\n\\njulia> lstrip(a)\\n\\\"March\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.rstrip\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.rstrip\",\n    \"category\": \"Function\",\n    \"text\": \"rstrip(s::AbstractString[, chars::Chars])\\n\\nReturn s with any trailing whitespace and delimiters removed. The default delimiters to remove are ' ', \\\\t, \\\\n, \\\\v, \\\\f, and \\\\r. If chars (a character, or vector or set of characters) is provided, instead remove characters contained in it.\\n\\njulia> a = rpad(\\\"March\\\", 20)\\n\\\"March               \\\"\\n\\njulia> rstrip(a)\\n\\\"March\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.startswith\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.startswith\",\n    \"category\": \"Function\",\n    \"text\": \"startswith(s::AbstractString, prefix::AbstractString)\\n\\nReturns true if s starts with prefix. If prefix is a vector or set of characters, tests whether the first character of s belongs to that set.\\n\\nSee also endswith.\\n\\njulia> startswith(\\\"JuliaLang\\\", \\\"Julia\\\")\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.endswith\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.endswith\",\n    \"category\": \"Function\",\n    \"text\": \"endswith(s::AbstractString, suffix::AbstractString)\\n\\nReturns true if s ends with suffix. If suffix is a vector or set of characters, tests whether the last character of s belongs to that set.\\n\\nSee also startswith.\\n\\njulia> endswith(\\\"Sunday\\\", \\\"day\\\")\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.uppercase\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.uppercase\",\n    \"category\": \"Function\",\n    \"text\": \"uppercase(s::AbstractString)\\n\\nReturns s with all characters converted to uppercase.\\n\\nExample\\n\\njulia> uppercase(\\\"Julia\\\")\\n\\\"JULIA\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.lowercase\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.lowercase\",\n    \"category\": \"Function\",\n    \"text\": \"lowercase(s::AbstractString)\\n\\nReturns s with all characters converted to lowercase.\\n\\nExample\\n\\njulia> lowercase(\\\"STRINGS AND THINGS\\\")\\n\\\"strings and things\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.titlecase\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.titlecase\",\n    \"category\": \"Function\",\n    \"text\": \"titlecase(s::AbstractString)\\n\\nCapitalizes the first character of each word in s.\\n\\nExample\\n\\njulia> titlecase(\\\"the julia programming language\\\")\\n\\\"The Julia Programming Language\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.ucfirst\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.ucfirst\",\n    \"category\": \"Function\",\n    \"text\": \"ucfirst(s::AbstractString)\\n\\nReturns string with the first character converted to uppercase.\\n\\nExample\\n\\njulia> ucfirst(\\\"python\\\")\\n\\\"Python\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.lcfirst\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.lcfirst\",\n    \"category\": \"Function\",\n    \"text\": \"lcfirst(s::AbstractString)\\n\\nReturns string with the first character converted to lowercase.\\n\\nExample\\n\\njulia> lcfirst(\\\"Julia\\\")\\n\\\"julia\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.join\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.join\",\n    \"category\": \"Function\",\n    \"text\": \"join(io::IO, strings, delim, [last])\\n\\nJoin an array of strings into a single string, inserting the given delimiter between adjacent strings. If last is given, it will be used instead of delim between the last two strings. For example,\\n\\njulia> join([\\\"apples\\\", \\\"bananas\\\", \\\"pineapples\\\"], \\\", \\\", \\\" and \\\")\\n\\\"apples, bananas and pineapples\\\"\\n\\nstrings can be any iterable over elements x which are convertible to strings via print(io::IOBuffer, x). strings will be printed to io.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.chop\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.chop\",\n    \"category\": \"Function\",\n    \"text\": \"chop(s::AbstractString)\\n\\nRemove the last character from s.\\n\\njulia> a = \\\"March\\\"\\n\\\"March\\\"\\n\\njulia> chop(a)\\n\\\"Marc\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.chomp\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.chomp\",\n    \"category\": \"Function\",\n    \"text\": \"chomp(s::AbstractString)\\n\\nRemove a single trailing newline from a string.\\n\\njulia> chomp(\\\"Hello\\\\n\\\")\\n\\\"Hello\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.ind2chr\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.ind2chr\",\n    \"category\": \"Function\",\n    \"text\": \"ind2chr(s::AbstractString, i::Integer)\\n\\nConvert a byte index i to a character index with respect to string s.\\n\\nSee also chr2ind.\\n\\nExample\\n\\njulia> str = \\\"\u03b1\u03b2\u03b3def\\\";\\n\\njulia> ind2chr(str, 3)\\n2\\n\\njulia> chr2ind(str, 2)\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.chr2ind\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.chr2ind\",\n    \"category\": \"Function\",\n    \"text\": \"chr2ind(s::AbstractString, i::Integer)\\n\\nConvert a character index i to a byte index.\\n\\nSee also ind2chr.\\n\\nExample\\n\\njulia> str = \\\"\u03b1\u03b2\u03b3def\\\";\\n\\njulia> chr2ind(str, 2)\\n3\\n\\njulia> ind2chr(str, 3)\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.nextind\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.nextind\",\n    \"category\": \"Function\",\n    \"text\": \"nextind(str::AbstractString, i::Integer)\\n\\nGet the next valid string index after i. Returns a value greater than endof(str) at or after the end of the string.\\n\\nExamples\\n\\njulia> str = \\\"\u03b1\u03b2\u03b3def\\\";\\n\\njulia> nextind(str, 1)\\n3\\n\\njulia> endof(str)\\n9\\n\\njulia> nextind(str, 9)\\n10\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.prevind\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.prevind\",\n    \"category\": \"Function\",\n    \"text\": \"prevind(str::AbstractString, i::Integer)\\n\\nGet the previous valid string index before i. Returns a value less than 1 at the beginning of the string.\\n\\nExamples\\n\\njulia> prevind(\\\"\u03b1\u03b2\u03b3def\\\", 3)\\n1\\n\\njulia> prevind(\\\"\u03b1\u03b2\u03b3def\\\", 1)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.Random.randstring\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.Random.randstring\",\n    \"category\": \"Function\",\n    \"text\": \"randstring([rng,] len=8)\\n\\nCreate a random ASCII string of length len, consisting of upper- and lower-case letters and the digits 0-9. The optional rng argument specifies a random number generator, see Random Numbers.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> randstring(rng, 4)\\n\\\"mbDd\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.charwidth\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.charwidth\",\n    \"category\": \"Function\",\n    \"text\": \"charwidth(c)\\n\\nGives the number of columns needed to print a character.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.strwidth\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.strwidth\",\n    \"category\": \"Function\",\n    \"text\": \"strwidth(s::AbstractString)\\n\\nGives the number of columns needed to print a string.\\n\\nExample\\n\\njulia> strwidth(\\\"March\\\")\\n5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.isalnum\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.isalnum\",\n    \"category\": \"Function\",\n    \"text\": \"isalnum(c::Char) -> Bool\\n\\nTests whether a character is alphanumeric. A character is classified as alphabetic if it belongs to the Unicode general category Letter or Number, i.e. a character whose category code begins with 'L' or 'N'.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.isalpha\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.isalpha\",\n    \"category\": \"Function\",\n    \"text\": \"isalpha(c::Char) -> Bool\\n\\nTests whether a character is alphabetic. A character is classified as alphabetic if it belongs to the Unicode general category Letter, i.e. a character whose category code begins with 'L'.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.isascii\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.isascii\",\n    \"category\": \"Function\",\n    \"text\": \"isascii(c::Union{Char,AbstractString}) -> Bool\\n\\nTests whether a character belongs to the ASCII character set, or whether this is true for all elements of a string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.iscntrl\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.iscntrl\",\n    \"category\": \"Function\",\n    \"text\": \"iscntrl(c::Char) -> Bool\\n\\nTests whether a character is a control character. Control characters are the non-printing characters of the Latin-1 subset of Unicode.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.isdigit\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.isdigit\",\n    \"category\": \"Function\",\n    \"text\": \"isdigit(c::Char) -> Bool\\n\\nTests whether a character is a numeric digit (0-9).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.isgraph\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.isgraph\",\n    \"category\": \"Function\",\n    \"text\": \"isgraph(c::Char) -> Bool\\n\\nTests whether a character is printable, and not a space. Any character that would cause a printer to use ink should be classified with isgraph(c)==true.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.islower\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.islower\",\n    \"category\": \"Function\",\n    \"text\": \"islower(c::Char) -> Bool\\n\\nTests whether a character is a lowercase letter. A character is classified as lowercase if it belongs to Unicode category Ll, Letter: Lowercase.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.isnumber\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.isnumber\",\n    \"category\": \"Function\",\n    \"text\": \"isnumber(c::Char) -> Bool\\n\\nTests whether a character is numeric. A character is classified as numeric if it belongs to the Unicode general category Number, i.e. a character whose category code begins with 'N'.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.isprint\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.isprint\",\n    \"category\": \"Function\",\n    \"text\": \"isprint(c::Char) -> Bool\\n\\nTests whether a character is printable, including spaces, but not a control character.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.ispunct\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.ispunct\",\n    \"category\": \"Function\",\n    \"text\": \"ispunct(c::Char) -> Bool\\n\\nTests whether a character belongs to the Unicode general category Punctuation, i.e. a character whose category code begins with 'P'.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.isspace\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.isspace\",\n    \"category\": \"Function\",\n    \"text\": \"isspace(c::Char) -> Bool\\n\\nTests whether a character is any whitespace character. Includes ASCII characters '\\\\t', '\\\\n', '\\\\v', '\\\\f', '\\\\r', and ' ', Latin-1 character U+0085, and characters in Unicode category Zs.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.UTF8proc.isupper\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.UTF8proc.isupper\",\n    \"category\": \"Function\",\n    \"text\": \"isupper(c::Char) -> Bool\\n\\nTests whether a character is an uppercase letter. A character is classified as uppercase if it belongs to Unicode category Lu, Letter: Uppercase, or Lt, Letter: Titlecase.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.isxdigit\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.isxdigit\",\n    \"category\": \"Function\",\n    \"text\": \"isxdigit(c::Char) -> Bool\\n\\nTests whether a character is a valid hexadecimal digit. Note that this does not include x (as in the standard 0x prefix).\\n\\nExample\\n\\njulia> isxdigit('a')\\ntrue\\n\\njulia> isxdigit('x')\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Core.Symbol\",\n    \"page\": \"Strings\",\n    \"title\": \"Core.Symbol\",\n    \"category\": \"Type\",\n    \"text\": \"Symbol(x...) -> Symbol\\n\\nCreate a Symbol by concatenating the string representations of the arguments together.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.escape_string\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.escape_string\",\n    \"category\": \"Function\",\n    \"text\": \"escape_string([io,] str::AbstractString[, esc::AbstractString]) -> AbstractString\\n\\nGeneral escaping of traditional C and Unicode escape sequences. Any characters in esc are also escaped (with a backslash). See also unescape_string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#Base.unescape_string\",\n    \"page\": \"Strings\",\n    \"title\": \"Base.unescape_string\",\n    \"category\": \"Function\",\n    \"text\": \"unescape_string([io,] s::AbstractString) -> AbstractString\\n\\nGeneral unescaping of traditional C and Unicode escape sequences. Reverse of escape_string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/strings.html#lib-strings-1\",\n    \"page\": \"Strings\",\n    \"title\": \"Strings\",\n    \"category\": \"section\",\n    \"text\": \"Base.length(::AbstractString)\\nBase.sizeof(::AbstractString)\\nBase.:*(::AbstractString, ::Any...)\\nBase.:^(::AbstractString, ::Integer)\\nBase.string\\nBase.repr\\nCore.String(::AbstractString)\\nBase.transcode\\nBase.unsafe_string\\nBase.codeunit(::AbstractString, ::Integer)\\nBase.ascii\\nBase.@r_str\\nBase.Docs.@html_str\\nBase.Docs.@text_str\\nBase.UTF8proc.normalize_string\\nBase.UTF8proc.graphemes\\nBase.isvalid(::Any)\\nBase.isvalid(::Any, ::Any)\\nBase.isvalid(::AbstractString, ::Integer)\\nBase.UTF8proc.is_assigned_char\\nBase.ismatch\\nBase.match\\nBase.eachmatch\\nBase.matchall\\nBase.lpad\\nBase.rpad\\nBase.search\\nBase.rsearch\\nBase.searchindex\\nBase.rsearchindex\\nBase.contains(::AbstractString, ::AbstractString)\\nBase.reverse(::AbstractString)\\nBase.replace\\nBase.split\\nBase.rsplit\\nBase.strip\\nBase.lstrip\\nBase.rstrip\\nBase.startswith\\nBase.endswith\\nBase.uppercase\\nBase.lowercase\\nBase.titlecase\\nBase.ucfirst\\nBase.lcfirst\\nBase.join\\nBase.chop\\nBase.chomp\\nBase.ind2chr\\nBase.chr2ind\\nBase.nextind\\nBase.prevind\\nBase.Random.randstring\\nBase.UTF8proc.charwidth\\nBase.strwidth\\nBase.UTF8proc.isalnum\\nBase.UTF8proc.isalpha\\nBase.isascii\\nBase.UTF8proc.iscntrl\\nBase.UTF8proc.isdigit\\nBase.UTF8proc.isgraph\\nBase.UTF8proc.islower\\nBase.UTF8proc.isnumber\\nBase.UTF8proc.isprint\\nBase.UTF8proc.ispunct\\nBase.UTF8proc.isspace\\nBase.UTF8proc.isupper\\nBase.isxdigit\\nCore.Symbol\\nBase.escape_string\\nBase.unescape_string\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#\",\n    \"page\": \"Arrays\",\n    \"title\": \"Arrays\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#lib-arrays-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Arrays\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Core.AbstractArray\",\n    \"page\": \"Arrays\",\n    \"title\": \"Core.AbstractArray\",\n    \"category\": \"Type\",\n    \"text\": \"AbstractArray{T, N}\\n\\nAbstract array supertype which arrays inherit from.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Core.Array\",\n    \"page\": \"Arrays\",\n    \"title\": \"Core.Array\",\n    \"category\": \"Type\",\n    \"text\": \"Array{T}(dims)\\nArray{T,N}(dims)\\n\\nConstruct an uninitialized N-dimensional dense array with element type T, where N is determined from the length or number of dims. dims may be a tuple or a series of integer arguments corresponding to the lengths in each dimension. If the rank N is supplied explicitly as in Array{T,N}(dims), then it must match the length or number of dims.\\n\\nExample\\n\\njulia> A = Array{Float64, 2}(2, 2);\\n\\njulia> ndims(A)\\n2\\n\\njulia> eltype(A)\\nFloat64\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.getindex-Tuple{Type,Vararg{Any,N} where N}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.getindex\",\n    \"category\": \"Method\",\n    \"text\": \"getindex(type[, elements...])\\n\\nConstruct a 1-d array of the specified type. This is usually called with the syntax Type[]. Element values can be specified using Type[a,b,c,...].\\n\\nExample\\n\\njulia> Int8[1, 2, 3]\\n3-element Array{Int8,1}:\\n 1\\n 2\\n 3\\n\\njulia> getindex(Int8, 1, 2, 3)\\n3-element Array{Int8,1}:\\n 1\\n 2\\n 3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.zeros\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.zeros\",\n    \"category\": \"Function\",\n    \"text\": \"zeros([A::AbstractArray,] [T=eltype(A)::Type,] [dims=size(A)::Tuple])\\n\\nCreate an array of all zeros with the same layout as A, element type T and size dims. The A argument can be skipped, which behaves like Array{Float64,0}() was passed. For convenience dims may also be passed in variadic form.\\n\\nExamples\\n\\njulia> zeros(1)\\n1-element Array{Float64,1}:\\n 0.0\\n\\njulia> zeros(Int8, 2, 3)\\n2\u00d73 Array{Int8,2}:\\n 0  0  0\\n 0  0  0\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> zeros(A)\\n2\u00d72 Array{Int64,2}:\\n 0  0\\n 0  0\\n\\njulia> zeros(A, Float64)\\n2\u00d72 Array{Float64,2}:\\n 0.0  0.0\\n 0.0  0.0\\n\\njulia> zeros(A, Bool, (3,))\\n3-element Array{Bool,1}:\\n false\\n false\\n false\\n\\nSee also ones, similar.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.ones\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.ones\",\n    \"category\": \"Function\",\n    \"text\": \"ones([A::AbstractArray,] [T=eltype(A)::Type,] [dims=size(A)::Tuple])\\n\\nCreate an array of all ones with the same layout as A, element type T and size dims. The A argument can be skipped, which behaves like Array{Float64,0}() was passed. For convenience dims may also be passed in variadic form.\\n\\nExamples\\n\\njulia> ones(Complex128, 2, 3)\\n2\u00d73 Array{Complex{Float64},2}:\\n 1.0+0.0im  1.0+0.0im  1.0+0.0im\\n 1.0+0.0im  1.0+0.0im  1.0+0.0im\\n\\njulia> ones(1,2)\\n1\u00d72 Array{Float64,2}:\\n 1.0  1.0\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> ones(A)\\n2\u00d72 Array{Int64,2}:\\n 1  1\\n 1  1\\n\\njulia> ones(A, Float64)\\n2\u00d72 Array{Float64,2}:\\n 1.0  1.0\\n 1.0  1.0\\n\\njulia> ones(A, Bool, (3,))\\n3-element Array{Bool,1}:\\n true\\n true\\n true\\n\\nSee also zeros, similar.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.BitArray\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.BitArray\",\n    \"category\": \"Type\",\n    \"text\": \"BitArray(dims::Integer...)\\nBitArray{N}(dims::NTuple{N,Int})\\n\\nConstruct an uninitialized BitArray with the given dimensions. Behaves identically to the Array constructor.\\n\\njulia> BitArray(2, 2)\\n2\u00d72 BitArray{2}:\\n false  false\\n false  true\\n\\njulia> BitArray((3, 1))\\n3\u00d71 BitArray{2}:\\n false\\n true\\n false\\n\\n\\n\\nBitArray(itr)\\n\\nConstruct a BitArray generated by the given iterable object. The shape is inferred from the itr object.\\n\\njulia> BitArray([1 0; 0 1])\\n2\u00d72 BitArray{2}:\\n  true  false\\n false   true\\n\\njulia> BitArray(x+y == 3 for x = 1:2, y = 1:3)\\n2\u00d73 BitArray{2}:\\n false   true  false\\n  true  false  false\\n\\njulia> BitArray(x+y == 3 for x = 1:2 for y = 1:3)\\n6-element BitArray{1}:\\n false\\n  true\\n false\\n  true\\n false\\n false\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.trues\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.trues\",\n    \"category\": \"Function\",\n    \"text\": \"trues(dims)\\n\\nCreate a BitArray with all values set to true.\\n\\njulia> trues(2,3)\\n2\u00d73 BitArray{2}:\\n true  true  true\\n true  true  true\\n\\n\\n\\ntrues(A)\\n\\nCreate a BitArray with all values set to true of the same shape as A.\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> trues(A)\\n2\u00d72 BitArray{2}:\\n true  true\\n true  true\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.falses\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.falses\",\n    \"category\": \"Function\",\n    \"text\": \"falses(dims)\\n\\nCreate a BitArray with all values set to false.\\n\\njulia> falses(2,3)\\n2\u00d73 BitArray{2}:\\n false  false  false\\n false  false  false\\n\\n\\n\\nfalses(A)\\n\\nCreate a BitArray with all values set to false of the same shape as A.\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> falses(A)\\n2\u00d72 BitArray{2}:\\n false  false\\n false  false\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.fill\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.fill\",\n    \"category\": \"Function\",\n    \"text\": \"fill(x, dims)\\n\\nCreate an array filled with the value x. For example, fill(1.0, (5,5)) returns a 5\u00d75 array of floats, with each element initialized to 1.0.\\n\\njulia> fill(1.0, (5,5))\\n5\u00d75 Array{Float64,2}:\\n 1.0  1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0  1.0\\n\\nIf x is an object reference, all elements will refer to the same object. fill(Foo(), dims) will return an array filled with the result of evaluating Foo() once.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.fill!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.fill!\",\n    \"category\": \"Function\",\n    \"text\": \"fill!(A, x)\\n\\nFill array A with the value x. If x is an object reference, all elements will refer to the same object. fill!(A, Foo()) will return A filled with the result of evaluating Foo() once.\\n\\nExamples\\n\\njulia> A = zeros(2,3)\\n2\u00d73 Array{Float64,2}:\\n 0.0  0.0  0.0\\n 0.0  0.0  0.0\\n\\njulia> fill!(A, 2.)\\n2\u00d73 Array{Float64,2}:\\n 2.0  2.0  2.0\\n 2.0  2.0  2.0\\n\\njulia> a = [1, 1, 1]; A = fill!(Vector{Vector{Int}}(3), a); a[1] = 2; A\\n3-element Array{Array{Int64,1},1}:\\n [2, 1, 1]\\n [2, 1, 1]\\n [2, 1, 1]\\n\\njulia> x = 0; f() = (global x += 1; x); fill!(Vector{Int}(3), f())\\n3-element Array{Int64,1}:\\n 1\\n 1\\n 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.similar-Tuple{AbstractArray}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.similar\",\n    \"category\": \"Method\",\n    \"text\": \"similar(array, [element_type=eltype(array)], [dims=size(array)])\\n\\nCreate an uninitialized mutable array with the given element type and size, based upon the given source array. The second and third arguments are both optional, defaulting to the given array's eltype and size. The dimensions may be specified either as a single tuple argument or as a series of integer arguments.\\n\\nCustom AbstractArray subtypes may choose which specific array type is best-suited to return for the given element type and dimensionality. If they do not specialize this method, the default is an Array{element_type}(dims...).\\n\\nFor example, similar(1:10, 1, 4) returns an uninitialized Array{Int,2} since ranges are neither mutable nor support 2 dimensions:\\n\\njulia> similar(1:10, 1, 4)\\n1\u00d74 Array{Int64,2}:\\n 4419743872  4374413872  4419743888  0\\n\\nConversely, similar(trues(10,10), 2) returns an uninitialized BitVector with two elements since BitArrays are both mutable and can support 1-dimensional arrays:\\n\\njulia> similar(trues(10,10), 2)\\n2-element BitArray{1}:\\n false\\n false\\n\\nSince BitArrays can only store elements of type Bool, however, if you request a different element type it will create a regular Array instead:\\n\\njulia> similar(falses(10), Float64, 2, 4)\\n2\u00d74 Array{Float64,2}:\\n 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314\\n 2.18425e-314  2.18425e-314  2.18425e-314  2.18425e-314\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.similar-Tuple{Any,Tuple}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.similar\",\n    \"category\": \"Method\",\n    \"text\": \"similar(storagetype, indices)\\n\\nCreate an uninitialized mutable array analogous to that specified by storagetype, but with indices specified by the last argument. storagetype might be a type or a function.\\n\\nExamples:\\n\\nsimilar(Array{Int}, indices(A))\\n\\ncreates an array that \\\"acts like\\\" an Array{Int} (and might indeed be backed by one), but which is indexed identically to A. If A has conventional indexing, this will be identical to Array{Int}(size(A)), but if A has unconventional indexing then the indices of the result will match A.\\n\\nsimilar(BitArray, (indices(A, 2),))\\n\\nwould create a 1-dimensional logical array whose indices match those of the columns of A.\\n\\nsimilar(dims->zeros(Int, dims), indices(A))\\n\\nwould create an array of Int, initialized to zero, matching the indices of A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.eye\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.eye\",\n    \"category\": \"Function\",\n    \"text\": \"eye([T::Type=Float64,] m::Integer, n::Integer)\\n\\nm-by-n identity matrix. The default element type is Float64.\\n\\nExamples\\n\\njulia> eye(3, 4)\\n3\u00d74 Array{Float64,2}:\\n 1.0  0.0  0.0  0.0\\n 0.0  1.0  0.0  0.0\\n 0.0  0.0  1.0  0.0\\n\\njulia> eye(2, 2)\\n2\u00d72 Array{Float64,2}:\\n 1.0  0.0\\n 0.0  1.0\\n\\njulia> eye(Int, 2, 2)\\n2\u00d72 Array{Int64,2}:\\n 1  0\\n 0  1\\n\\n\\n\\neye(m, n)\\n\\nm-by-n identity matrix.\\n\\n\\n\\neye([T::Type=Float64,] n::Integer)\\n\\nn-by-n identity matrix. The default element type is Float64.\\n\\nExamples\\n\\njulia> eye(Int, 2)\\n2\u00d72 Array{Int64,2}:\\n 1  0\\n 0  1\\n\\njulia> eye(2)\\n2\u00d72 Array{Float64,2}:\\n 1.0  0.0\\n 0.0  1.0\\n\\n\\n\\neye(A)\\n\\nConstructs an identity matrix of the same dimensions and type as A.\\n\\njulia> A = [1 2 3; 4 5 6; 7 8 9]\\n3\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n 7  8  9\\n\\njulia> eye(A)\\n3\u00d73 Array{Int64,2}:\\n 1  0  0\\n 0  1  0\\n 0  0  1\\n\\nNote the difference from ones.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.linspace\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.linspace\",\n    \"category\": \"Function\",\n    \"text\": \"linspace(start, stop, n=50)\\n\\nConstruct a range of n linearly spaced elements from start to stop.\\n\\njulia> linspace(1.3,2.9,9)\\n1.3:0.2:2.9\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.logspace\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.logspace\",\n    \"category\": \"Function\",\n    \"text\": \"logspace(start::Real, stop::Real, n::Integer=50)\\n\\nConstruct a vector of n logarithmically spaced numbers from 10^start to 10^stop.\\n\\njulia> logspace(1.,10.,5)\\n5-element Array{Float64,1}:\\n   10.0\\n 1778.28\\n    3.16228e5\\n    5.62341e7\\n    1.0e10\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Random.randsubseq\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Random.randsubseq\",\n    \"category\": \"Function\",\n    \"text\": \"randsubseq(A, p) -> Vector\\n\\nReturn a vector consisting of a random subsequence of the given array A, where each element of A is included (in order) with independent probability p. (Complexity is linear in p*length(A), so this function is efficient even if p is small and A is large.) Technically, this process is known as \\\"Bernoulli sampling\\\" of A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Random.randsubseq!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Random.randsubseq!\",\n    \"category\": \"Function\",\n    \"text\": \"randsubseq!(S, A, p)\\n\\nLike randsubseq, but the results are stored in S (which is resized as needed).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Constructors-and-Types-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Constructors and Types\",\n    \"category\": \"section\",\n    \"text\": \"Core.AbstractArray\\nCore.Array\\nBase.getindex(::Type, ::Any...)\\nBase.zeros\\nBase.ones\\nBase.BitArray\\nBase.trues\\nBase.falses\\nBase.fill\\nBase.fill!\\nBase.similar(::AbstractArray)\\nBase.similar(::Any, ::Tuple)\\nBase.eye\\nBase.linspace\\nBase.logspace\\nBase.Random.randsubseq\\nBase.Random.randsubseq!\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.ndims\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.ndims\",\n    \"category\": \"Function\",\n    \"text\": \"ndims(A::AbstractArray) -> Integer\\n\\nReturns the number of dimensions of A.\\n\\njulia> A = ones(3,4,5);\\n\\njulia> ndims(A)\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.size\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.size\",\n    \"category\": \"Function\",\n    \"text\": \"size(A::AbstractArray, [dim...])\\n\\nReturns a tuple containing the dimensions of A. Optionally you can specify the dimension(s) you want the length of, and get the length of that dimension, or a tuple of the lengths of dimensions you asked for.\\n\\njulia> A = ones(2,3,4);\\n\\njulia> size(A, 2)\\n3\\n\\njulia> size(A,3,2)\\n(4, 3)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.indices-Tuple{Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.indices\",\n    \"category\": \"Method\",\n    \"text\": \"indices(A)\\n\\nReturns the tuple of valid indices for array A.\\n\\njulia> A = ones(5,6,7);\\n\\njulia> indices(A)\\n(Base.OneTo(5), Base.OneTo(6), Base.OneTo(7))\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.indices-Tuple{AbstractArray,Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.indices\",\n    \"category\": \"Method\",\n    \"text\": \"indices(A, d)\\n\\nReturns the valid range of indices for array A along dimension d.\\n\\njulia> A = ones(5,6,7);\\n\\njulia> indices(A,2)\\nBase.OneTo(6)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.length-Tuple{AbstractArray}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.length\",\n    \"category\": \"Method\",\n    \"text\": \"length(A::AbstractArray) -> Integer\\n\\nReturns the number of elements in A.\\n\\njulia> A = ones(3,4,5);\\n\\njulia> length(A)\\n60\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.eachindex\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.eachindex\",\n    \"category\": \"Function\",\n    \"text\": \"eachindex(A...)\\n\\nCreates an iterable object for visiting each index of an AbstractArray A in an efficient manner. For array types that have opted into fast linear indexing (like Array), this is simply the range 1:length(A). For other array types, this returns a specialized Cartesian range to efficiently index into the array with indices specified for every dimension. For other iterables, including strings and dictionaries, this returns an iterator object supporting arbitrary index types (e.g. unevenly spaced or non-integer indices).\\n\\nExample for a sparse 2-d array:\\n\\njulia> A = sparse([1, 1, 2], [1, 3, 1], [1, 2, -5])\\n2\u00d73 SparseMatrixCSC{Int64,Int64} with 3 stored entries:\\n  [1, 1]  =  1\\n  [2, 1]  =  -5\\n  [1, 3]  =  2\\n\\njulia> for iter in eachindex(A)\\n           @show iter.I[1], iter.I[2]\\n           @show A[iter]\\n       end\\n(iter.I[1], iter.I[2]) = (1, 1)\\nA[iter] = 1\\n(iter.I[1], iter.I[2]) = (2, 1)\\nA[iter] = -5\\n(iter.I[1], iter.I[2]) = (1, 2)\\nA[iter] = 0\\n(iter.I[1], iter.I[2]) = (2, 2)\\nA[iter] = 0\\n(iter.I[1], iter.I[2]) = (1, 3)\\nA[iter] = 2\\n(iter.I[1], iter.I[2]) = (2, 3)\\nA[iter] = 0\\n\\nIf you supply more than one AbstractArray argument, eachindex will create an iterable object that is fast for all arguments (a UnitRange if all inputs have fast linear indexing, a CartesianRange otherwise). If the arrays have different sizes and/or dimensionalities, eachindex returns an iterable that spans the largest range along each dimension.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.linearindices\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.linearindices\",\n    \"category\": \"Function\",\n    \"text\": \"linearindices(A)\\n\\nReturns a UnitRange specifying the valid range of indices for A[i] where i is an Int. For arrays with conventional indexing (indices start at 1), or any multidimensional array, this is 1:length(A); however, for one-dimensional arrays with unconventional indices, this is indices(A, 1).\\n\\nCalling this function is the \\\"safe\\\" way to write algorithms that exploit linear indexing.\\n\\njulia> A = ones(5,6,7);\\n\\njulia> b = linearindices(A);\\n\\njulia> extrema(b)\\n(1, 210)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.IndexStyle\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.IndexStyle\",\n    \"category\": \"Type\",\n    \"text\": \"IndexStyle(A)\\nIndexStyle(typeof(A))\\n\\nIndexStyle specifies the \\\"native indexing style\\\" for array A. When you define a new AbstractArray type, you can choose to implement either linear indexing or cartesian indexing.  If you decide to implement linear indexing, then you must set this trait for your array type:\\n\\nBase.IndexStyle(::Type{<:MyArray}) = IndexLinear()\\n\\nThe default is IndexCartesian().\\n\\nJulia's internal indexing machinery will automatically (and invisibly) convert all indexing operations into the preferred style using sub2ind or ind2sub. This allows users to access elements of your array using any indexing style, even when explicit methods have not been provided.\\n\\nIf you define both styles of indexing for your AbstractArray, this trait can be used to select the most performant indexing style. Some methods check this trait on their inputs, and dispatch to different algorithms depending on the most efficient access pattern. In particular, eachindex creates an iterator whose type depends on the setting of this trait.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.countnz\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.countnz\",\n    \"category\": \"Function\",\n    \"text\": \"countnz(A) -> Integer\\n\\nCounts the number of nonzero values in array A (dense or sparse). Note that this is not a constant-time operation. For sparse matrices, one should usually use nnz, which returns the number of stored values.\\n\\njulia> A = [1 2 4; 0 0 1; 1 1 0]\\n3\u00d73 Array{Int64,2}:\\n 1  2  4\\n 0  0  1\\n 1  1  0\\n\\njulia> countnz(A)\\n6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.conj!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.conj!\",\n    \"category\": \"Function\",\n    \"text\": \"conj!(A)\\n\\nTransform an array to its complex conjugate in-place.\\n\\nSee also conj.\\n\\nExample\\n\\njulia> A = [1+im 2-im; 2+2im 3+im]\\n2\u00d72 Array{Complex{Int64},2}:\\n 1+1im  2-1im\\n 2+2im  3+1im\\n\\njulia> conj!(A);\\n\\njulia> A\\n2\u00d72 Array{Complex{Int64},2}:\\n 1-1im  2+1im\\n 2-2im  3-1im\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.stride\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.stride\",\n    \"category\": \"Function\",\n    \"text\": \"stride(A, k::Integer)\\n\\nReturns the distance in memory (in number of elements) between adjacent elements in dimension k.\\n\\njulia> A = ones(3,4,5);\\n\\njulia> stride(A,2)\\n3\\n\\njulia> stride(A,3)\\n12\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.strides\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.strides\",\n    \"category\": \"Function\",\n    \"text\": \"strides(A)\\n\\nReturns a tuple of the memory strides in each dimension.\\n\\njulia> A = ones(3,4,5);\\n\\njulia> strides(A)\\n(1, 3, 12)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.ind2sub\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.ind2sub\",\n    \"category\": \"Function\",\n    \"text\": \"ind2sub(a, index) -> subscripts\\n\\nReturns a tuple of subscripts into array a corresponding to the linear index index.\\n\\njulia> A = ones(5,6,7);\\n\\njulia> ind2sub(A,35)\\n(5, 1, 2)\\n\\njulia> ind2sub(A,70)\\n(5, 2, 3)\\n\\n\\n\\nind2sub(dims, index) -> subscripts\\n\\nReturns a tuple of subscripts into an array with dimensions dims, corresponding to the linear index index.\\n\\nExample:\\n\\ni, j, ... = ind2sub(size(A), indmax(A))\\n\\nprovides the indices of the maximum element.\\n\\njulia> ind2sub((3,4),2)\\n(2, 1)\\n\\njulia> ind2sub((3,4),3)\\n(3, 1)\\n\\njulia> ind2sub((3,4),4)\\n(1, 2)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.sub2ind\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.sub2ind\",\n    \"category\": \"Function\",\n    \"text\": \"sub2ind(dims, i, j, k...) -> index\\n\\nThe inverse of ind2sub, returns the linear index corresponding to the provided subscripts.\\n\\njulia> sub2ind((5,6,7),1,2,3)\\n66\\n\\njulia> sub2ind((5,6,7),1,6,3)\\n86\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.LinAlg.checksquare\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.LinAlg.checksquare\",\n    \"category\": \"Function\",\n    \"text\": \"LinAlg.checksquare(A)\\n\\nCheck that a matrix is square, then return its common dimension. For multiple arguments, return a vector.\\n\\nExample\\n\\njulia> A = ones(4,4); B = zeros(5,5);\\n\\njulia> LinAlg.checksquare(A, B)\\n2-element Array{Int64,1}:\\n 4\\n 5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Basic-functions-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Basic functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.ndims\\nBase.size\\nBase.indices(::Any)\\nBase.indices(::AbstractArray, ::Any)\\nBase.length(::AbstractArray)\\nBase.eachindex\\nBase.linearindices\\nBase.IndexStyle\\nBase.countnz\\nBase.conj!\\nBase.stride\\nBase.strides\\nBase.ind2sub\\nBase.sub2ind\\nBase.LinAlg.checksquare\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.broadcast\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.broadcast\",\n    \"category\": \"Function\",\n    \"text\": \"broadcast(f, As...)\\n\\nBroadcasts the arrays, tuples, Refs, nullables, and/or scalars As to a container of the appropriate type and dimensions. In this context, anything that is not a subtype of AbstractArray, Ref (except for Ptrs), Tuple, or Nullable is considered a scalar. The resulting container is established by the following rules:\\n\\nIf all the arguments are scalars, it returns a scalar.\\nIf the arguments are tuples and zero or more scalars, it returns a tuple.\\nIf the arguments contain at least one array or Ref, it returns an array (expanding singleton dimensions), and treats Refs as 0-dimensional arrays, and tuples as 1-dimensional arrays.\\n\\nThe following additional rule applies to Nullable arguments: If there is at least one Nullable, and all the arguments are scalars or Nullable, it returns a Nullable treating Nullables as \\\"containers\\\".\\n\\nA special syntax exists for broadcasting: f.(args...) is equivalent to broadcast(f, args...), and nested f.(g.(args...)) calls are fused into a single broadcast loop.\\n\\njulia> A = [1, 2, 3, 4, 5]\\n5-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 5\\n\\njulia> B = [1 2; 3 4; 5 6; 7 8; 9 10]\\n5\u00d72 Array{Int64,2}:\\n 1   2\\n 3   4\\n 5   6\\n 7   8\\n 9  10\\n\\njulia> broadcast(+, A, B)\\n5\u00d72 Array{Int64,2}:\\n  2   3\\n  5   6\\n  8   9\\n 11  12\\n 14  15\\n\\njulia> parse.(Int, [\\\"1\\\", \\\"2\\\"])\\n2-element Array{Int64,1}:\\n 1\\n 2\\n\\njulia> abs.((1, -2))\\n(1, 2)\\n\\njulia> broadcast(+, 1.0, (0, -2.0))\\n(1.0, -1.0)\\n\\njulia> broadcast(+, 1.0, (0, -2.0), Ref(1))\\n2-element Array{Float64,1}:\\n 2.0\\n 0.0\\n\\njulia> (+).([[0,2], [1,3]], Ref{Vector{Int}}([1,-1]))\\n2-element Array{Array{Int64,1},1}:\\n [1, 1]\\n [2, 2]\\n\\njulia> string.((\\\"one\\\",\\\"two\\\",\\\"three\\\",\\\"four\\\"), \\\": \\\", 1:4)\\n4-element Array{String,1}:\\n \\\"one: 1\\\"\\n \\\"two: 2\\\"\\n \\\"three: 3\\\"\\n \\\"four: 4\\\"\\n\\njulia> Nullable(\\\"X\\\") .* \\\"Y\\\"\\nNullable{String}(\\\"XY\\\")\\n\\njulia> broadcast(/, 1.0, Nullable(2.0))\\nNullable{Float64}(0.5)\\n\\njulia> (1 + im) ./ Nullable{Int}()\\nNullable{Complex{Float64}}()\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.broadcast!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.broadcast!\",\n    \"category\": \"Function\",\n    \"text\": \"broadcast!(f, dest, As...)\\n\\nLike broadcast, but store the result of broadcast(f, As...) in the dest array. Note that dest is only used to store the result, and does not supply arguments to f unless it is also listed in the As, as in broadcast!(f, A, A, B) to perform A[:] = broadcast(f, A, B).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Broadcast.@__dot__\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Broadcast.@__dot__\",\n    \"category\": \"Macro\",\n    \"text\": \"@. expr\\n\\nConvert every function call or operator in expr into a \\\"dot call\\\" (e.g. convert f(x) to f.(x)), and convert every assignment in expr to a \\\"dot assignment\\\" (e.g. convert += to .+=).\\n\\nIf you want to avoid adding dots for selected function calls in expr, splice those function calls in with $.  For example, @. sqrt(abs($sort(x))) is equivalent to sqrt.(abs.(sort(x))) (no dot for sort).\\n\\n(@. is equivalent to a call to @__dot__.)\\n\\njulia> x = 1.0:3.0; y = similar(x);\\n\\njulia> @. y = x + 3 * sin(x)\\n3-element Array{Float64,1}:\\n 3.52441\\n 4.72789\\n 3.42336\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Broadcast.broadcast_getindex\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Broadcast.broadcast_getindex\",\n    \"category\": \"Function\",\n    \"text\": \"broadcast_getindex(A, inds...)\\n\\nBroadcasts the inds arrays to a common size like broadcast and returns an array of the results A[ks...], where ks goes over the positions in the broadcast result A.\\n\\njulia> A = [1, 2, 3, 4, 5]\\n5-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 5\\n\\njulia> B = [1 2; 3 4; 5 6; 7 8; 9 10]\\n5\u00d72 Array{Int64,2}:\\n 1   2\\n 3   4\\n 5   6\\n 7   8\\n 9  10\\n\\njulia> C = broadcast(+,A,B)\\n5\u00d72 Array{Int64,2}:\\n  2   3\\n  5   6\\n  8   9\\n 11  12\\n 14  15\\n\\njulia> broadcast_getindex(C,[1,2,10])\\n3-element Array{Int64,1}:\\n  2\\n  5\\n 15\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Broadcast.broadcast_setindex!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Broadcast.broadcast_setindex!\",\n    \"category\": \"Function\",\n    \"text\": \"broadcast_setindex!(A, X, inds...)\\n\\nBroadcasts the X and inds arrays to a common size and stores the value from each position in X at the indices in A given by the same positions in inds.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Broadcast-and-vectorization-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Broadcast and vectorization\",\n    \"category\": \"section\",\n    \"text\": \"See also the dot syntax for vectorizing functions; for example, f.(args...) implicitly calls broadcast(f, args...). Rather than relying on \\\"vectorized\\\" methods of functions like sin to operate on arrays, you should use sin.(a) to vectorize via broadcast.Base.broadcast\\nBase.Broadcast.broadcast!\\nBase.@__dot__\\nBase.Broadcast.broadcast_getindex\\nBase.Broadcast.broadcast_setindex!\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.getindex-Tuple{AbstractArray,Vararg{Any,N} where N}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.getindex\",\n    \"category\": \"Method\",\n    \"text\": \"getindex(A, inds...)\\n\\nReturns a subset of array A as specified by inds, where each ind may be an Int, a Range, or a Vector. See the manual section on array indexing for details.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> getindex(A, 1)\\n1\\n\\njulia> getindex(A, [2, 1])\\n2-element Array{Int64,1}:\\n 3\\n 1\\n\\njulia> getindex(A, 2:4)\\n3-element Array{Int64,1}:\\n 3\\n 2\\n 4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.setindex!-Tuple{AbstractArray,Any,Vararg{Any,N} where N}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.setindex!\",\n    \"category\": \"Method\",\n    \"text\": \"setindex!(A, X, inds...)\\n\\nStore values from array X within some subset of A as specified by inds.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.copy!-Tuple{AbstractArray,CartesianRange,AbstractArray,CartesianRange}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.copy!\",\n    \"category\": \"Method\",\n    \"text\": \"copy!(dest, Rdest::CartesianRange, src, Rsrc::CartesianRange) -> dest\\n\\nCopy the block of src in the range of Rsrc to the block of dest in the range of Rdest. The sizes of the two regions must match.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.isassigned\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.isassigned\",\n    \"category\": \"Function\",\n    \"text\": \"isassigned(array, i) -> Bool\\n\\nTests whether the given array has a value associated with index i. Returns false if the index is out of bounds, or has an undefined reference.\\n\\njulia> isassigned(rand(3, 3), 5)\\ntrue\\n\\njulia> isassigned(rand(3, 3), 3 * 3 + 1)\\nfalse\\n\\njulia> mutable struct Foo end\\n\\njulia> v = similar(rand(3), Foo)\\n3-element Array{Foo,1}:\\n #undef\\n #undef\\n #undef\\n\\njulia> isassigned(v, 1)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Colon\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Colon\",\n    \"category\": \"Type\",\n    \"text\": \"Colon()\\n\\nColons (:) are used to signify indexing entire objects or dimensions at once.\\n\\nVery few operations are defined on Colons directly; instead they are converted by to_indices to an internal vector type (Base.Slice) to represent the collection of indices they span before being used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.IteratorsMD.CartesianIndex\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.IteratorsMD.CartesianIndex\",\n    \"category\": \"Type\",\n    \"text\": \"CartesianIndex(i, j, k...)   -> I\\nCartesianIndex((i, j, k...)) -> I\\n\\nCreate a multidimensional index I, which can be used for indexing a multidimensional array A.  In particular, A[I] is equivalent to A[i,j,k...].  One can freely mix integer and CartesianIndex indices; for example, A[Ipre, i, Ipost] (where Ipre and Ipost are CartesianIndex indices and i is an Int) can be a useful expression when writing algorithms that work along a single dimension of an array of arbitrary dimensionality.\\n\\nA CartesianIndex is sometimes produced by eachindex, and always when iterating with an explicit CartesianRange.\\n\\nExample\\n\\njulia> A = reshape(collect(1:16), (2, 2, 2, 2))\\n2\u00d72\u00d72\u00d72 Array{Int64,4}:\\n[:, :, 1, 1] =\\n 1  3\\n 2  4\\n\\n[:, :, 2, 1] =\\n 5  7\\n 6  8\\n\\n[:, :, 1, 2] =\\n  9  11\\n 10  12\\n\\n[:, :, 2, 2] =\\n 13  15\\n 14  16\\n\\njulia> A[CartesianIndex((1, 1, 1, 1))]\\n1\\n\\njulia> A[CartesianIndex((1, 1, 1, 2))]\\n9\\n\\njulia> A[CartesianIndex((1, 1, 2, 1))]\\n5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.IteratorsMD.CartesianRange\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.IteratorsMD.CartesianRange\",\n    \"category\": \"Type\",\n    \"text\": \"CartesianRange(Istart::CartesianIndex, Istop::CartesianIndex) -> R\\nCartesianRange(sz::Dims) -> R\\nCartesianRange(istart:istop, jstart:jstop, ...) -> R\\n\\nDefine a region R spanning a multidimensional rectangular range of integer indices. These are most commonly encountered in the context of iteration, where for I in R ... end will return CartesianIndex indices I equivalent to the nested loops\\n\\nfor j = jstart:jstop\\n    for i = istart:istop\\n        ...\\n    end\\nend\\n\\nConsequently these can be useful for writing algorithms that work in arbitrary dimensions.\\n\\njulia> foreach(println, CartesianRange((2, 2, 2)))\\nCartesianIndex{3}((1, 1, 1))\\nCartesianIndex{3}((2, 1, 1))\\nCartesianIndex{3}((1, 2, 1))\\nCartesianIndex{3}((2, 2, 1))\\nCartesianIndex{3}((1, 1, 2))\\nCartesianIndex{3}((2, 1, 2))\\nCartesianIndex{3}((1, 2, 2))\\nCartesianIndex{3}((2, 2, 2))\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.to_indices\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.to_indices\",\n    \"category\": \"Function\",\n    \"text\": \"to_indices(A, I::Tuple)\\n\\nConvert the tuple I to a tuple of indices for use in indexing into array A.\\n\\nThe returned tuple must only contain either Ints or AbstractArrays of scalar indices that are supported by array A. It will error upon encountering a novel index type that it does not know how to process.\\n\\nFor simple index types, it defers to the unexported Base.to_index(A, i) to process each index i. While this internal function is not intended to be called directly, Base.to_index may be extended by custom array or index types to provide custom indexing behaviors.\\n\\nMore complicated index types may require more context about the dimension into which they index. To support those cases, to_indices(A, I) calls to_indices(A, indices(A), I), which then recursively walks through both the given tuple of indices and the dimensional indices of A in tandem. As such, not all index types are guaranteed to propagate to Base.to_index.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.checkbounds\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.checkbounds\",\n    \"category\": \"Function\",\n    \"text\": \"checkbounds(Bool, A, I...)\\n\\nReturn true if the specified indices I are in bounds for the given array A. Subtypes of AbstractArray should specialize this method if they need to provide custom bounds checking behaviors; however, in many cases one can rely on A's indices and checkindex.\\n\\nSee also checkindex.\\n\\njulia> A = rand(3, 3);\\n\\njulia> checkbounds(Bool, A, 2)\\ntrue\\n\\njulia> checkbounds(Bool, A, 3, 4)\\nfalse\\n\\njulia> checkbounds(Bool, A, 1:3)\\ntrue\\n\\njulia> checkbounds(Bool, A, 1:3, 2:4)\\nfalse\\n\\n\\n\\ncheckbounds(A, I...)\\n\\nThrow an error if the specified indices I are not in bounds for the given array A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.checkindex\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.checkindex\",\n    \"category\": \"Function\",\n    \"text\": \"checkindex(Bool, inds::AbstractUnitRange, index)\\n\\nReturn true if the given index is within the bounds of inds. Custom types that would like to behave as indices for all arrays can extend this method in order to provide a specialized bounds checking implementation.\\n\\njulia> checkindex(Bool,1:20,8)\\ntrue\\n\\njulia> checkindex(Bool,1:20,21)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Indexing-and-assignment-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Indexing and assignment\",\n    \"category\": \"section\",\n    \"text\": \"Base.getindex(::AbstractArray, ::Any...)\\nBase.setindex!(::AbstractArray, ::Any, ::Any...)\\nBase.copy!(::AbstractArray, ::CartesianRange, ::AbstractArray, ::CartesianRange)\\nBase.isassigned\\nBase.Colon\\nBase.CartesianIndex\\nBase.CartesianRange\\nBase.to_indices\\nBase.checkbounds\\nBase.checkindex\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.view\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.view\",\n    \"category\": \"Function\",\n    \"text\": \"view(A, inds...)\\n\\nLike getindex, but returns a view into the parent array A with the given indices instead of making a copy.  Calling getindex or setindex! on the returned SubArray computes the indices to the parent array on the fly without checking bounds.\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> b = view(A, :, 1)\\n2-element SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}:\\n 1\\n 3\\n\\njulia> fill!(b, 0)\\n2-element SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}:\\n 0\\n 0\\n\\njulia> A # Note A has changed even though we modified b\\n2\u00d72 Array{Int64,2}:\\n 0  2\\n 0  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.@view\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.@view\",\n    \"category\": \"Macro\",\n    \"text\": \"@view A[inds...]\\n\\nCreates a SubArray from an indexing expression. This can only be applied directly to a reference expression (e.g. @view A[1,2:end]), and should not be used as the target of an assignment (e.g. @view(A[1,2:end]) = ...).  See also @views to switch an entire block of code to use views for slicing.\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> b = @view A[:, 1]\\n2-element SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}:\\n 1\\n 3\\n\\njulia> fill!(b, 0)\\n2-element SubArray{Int64,1,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true}:\\n 0\\n 0\\n\\njulia> A\\n2\u00d72 Array{Int64,2}:\\n 0  2\\n 0  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.@views\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.@views\",\n    \"category\": \"Macro\",\n    \"text\": \"@views expression\\n\\nConvert every array-slicing operation in the given expression (which may be a begin/end block, loop, function, etc.) to return a view.   Scalar indices, non-array types, and explicit getindex calls (as opposed to array[...]) are unaffected.\\n\\nNote that the @views macro only affects array[...] expressions that appear explicitly in the given expression, not array slicing that occurs in functions called by that code.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.parent\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.parent\",\n    \"category\": \"Function\",\n    \"text\": \"parent(A)\\n\\nReturns the \\\"parent array\\\" of an array view type (e.g., SubArray), or the array itself if it is not a view.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.parentindexes\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.parentindexes\",\n    \"category\": \"Function\",\n    \"text\": \"parentindexes(A)\\n\\nFrom an array view A, returns the corresponding indexes in the parent.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.slicedim\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.slicedim\",\n    \"category\": \"Function\",\n    \"text\": \"slicedim(A, d::Integer, i)\\n\\nReturn all the data of A where the index for dimension d equals i. Equivalent to A[:,:,...,i,:,:,...] where i is in position d.\\n\\nExample\\n\\njulia> A = [1 2 3 4; 5 6 7 8]\\n2\u00d74 Array{Int64,2}:\\n 1  2  3  4\\n 5  6  7  8\\n\\njulia> slicedim(A,2,3)\\n2-element Array{Int64,1}:\\n 3\\n 7\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.reinterpret\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.reinterpret\",\n    \"category\": \"Function\",\n    \"text\": \"reinterpret(type, A)\\n\\nChange the type-interpretation of a block of memory. For arrays, this constructs an array with the same binary data as the given array, but with the specified element type. For example, reinterpret(Float32, UInt32(7)) interprets the 4 bytes corresponding to UInt32(7) as a Float32.\\n\\nwarning: Warning\\nIt is not allowed to reinterpret an array to an element type with a larger alignment then the alignment of the array. For a normal Array, this is the alignment of its element type. For a reinterpreted array, this is the alignment of the Array it was reinterpreted from. For example, reinterpret(UInt32, UInt8[0, 0, 0, 0]) is not allowed but reinterpret(UInt32, reinterpret(UInt8, Float32[1.0])) is allowed.\\n\\nExamples\\n\\njulia> reinterpret(Float32, UInt32(7))\\n1.0f-44\\n\\njulia> reinterpret(Float32, UInt32[1 2 3 4 5])\\n1\u00d75 Array{Float32,2}:\\n 1.4013f-45  2.8026f-45  4.2039f-45  5.60519f-45  7.00649f-45\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.reshape\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.reshape\",\n    \"category\": \"Function\",\n    \"text\": \"reshape(A, dims...) -> R\\nreshape(A, dims) -> R\\n\\nReturn an array R with the same data as A, but with different dimension sizes or number of dimensions. The two arrays share the same underlying data, so that setting elements of R alters the values of A and vice versa.\\n\\nThe new dimensions may be specified either as a list of arguments or as a shape tuple. At most one dimension may be specified with a :, in which case its length is computed such that its product with all the specified dimensions is equal to the length of the original array A. The total number of elements must not change.\\n\\njulia> A = collect(1:16)\\n16-element Array{Int64,1}:\\n  1\\n  2\\n  3\\n  4\\n  5\\n  6\\n  7\\n  8\\n  9\\n 10\\n 11\\n 12\\n 13\\n 14\\n 15\\n 16\\n\\njulia> reshape(A, (4, 4))\\n4\u00d74 Array{Int64,2}:\\n 1  5   9  13\\n 2  6  10  14\\n 3  7  11  15\\n 4  8  12  16\\n\\njulia> reshape(A, 2, :)\\n2\u00d78 Array{Int64,2}:\\n 1  3  5  7   9  11  13  15\\n 2  4  6  8  10  12  14  16\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.squeeze\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.squeeze\",\n    \"category\": \"Function\",\n    \"text\": \"squeeze(A, dims)\\n\\nRemove the dimensions specified by dims from array A. Elements of dims must be unique and within the range 1:ndims(A). size(A,i) must equal 1 for all i in dims.\\n\\nExample\\n\\njulia> a = reshape(collect(1:4),(2,2,1,1))\\n2\u00d72\u00d71\u00d71 Array{Int64,4}:\\n[:, :, 1, 1] =\\n 1  3\\n 2  4\\n\\njulia> squeeze(a,3)\\n2\u00d72\u00d71 Array{Int64,3}:\\n[:, :, 1] =\\n 1  3\\n 2  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.vec\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.vec\",\n    \"category\": \"Function\",\n    \"text\": \"vec(a::AbstractArray) -> Vector\\n\\nReshape the array a as a one-dimensional column vector. The resulting array shares the same underlying data as a, so modifying one will also modify the other.\\n\\nExample\\n\\njulia> a = [1 2 3; 4 5 6]\\n2\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n\\njulia> vec(a)\\n6-element Array{Int64,1}:\\n 1\\n 4\\n 2\\n 5\\n 3\\n 6\\n\\nSee also reshape.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Views-(SubArrays-and-other-view-types)-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Views (SubArrays and other view types)\",\n    \"category\": \"section\",\n    \"text\": \"Base.view\\nBase.@view\\nBase.@views\\nBase.parent\\nBase.parentindexes\\nBase.slicedim\\nBase.reinterpret\\nBase.reshape\\nBase.squeeze\\nBase.vec\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.cat\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.cat\",\n    \"category\": \"Function\",\n    \"text\": \"cat(dims, A...)\\n\\nConcatenate the input arrays along the specified dimensions in the iterable dims. For dimensions not in dims, all input arrays should have the same size, which will also be the size of the output array along that dimension. For dimensions in dims, the size of the output array is the sum of the sizes of the input arrays along that dimension. If dims is a single number, the different arrays are tightly stacked along that dimension. If dims is an iterable containing several dimensions, this allows one to construct block diagonal matrices and their higher-dimensional analogues by simultaneously increasing several dimensions for every new input array and putting zero blocks elsewhere. For example, cat([1,2], matrices...) builds a block diagonal matrix, i.e. a block matrix with matrices[1], matrices[2], ... as diagonal blocks and matching zero blocks away from the diagonal.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.vcat\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.vcat\",\n    \"category\": \"Function\",\n    \"text\": \"vcat(A...)\\n\\nConcatenate along dimension 1.\\n\\njulia> a = [1 2 3 4 5]\\n1\u00d75 Array{Int64,2}:\\n 1  2  3  4  5\\n\\njulia> b = [6 7 8 9 10; 11 12 13 14 15]\\n2\u00d75 Array{Int64,2}:\\n  6   7   8   9  10\\n 11  12  13  14  15\\n\\njulia> vcat(a,b)\\n3\u00d75 Array{Int64,2}:\\n  1   2   3   4   5\\n  6   7   8   9  10\\n 11  12  13  14  15\\n\\njulia> c = ([1 2 3], [4 5 6])\\n([1 2 3], [4 5 6])\\n\\njulia> vcat(c...)\\n2\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.hcat\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.hcat\",\n    \"category\": \"Function\",\n    \"text\": \"hcat(A...)\\n\\nConcatenate along dimension 2.\\n\\njulia> a = [1; 2; 3; 4; 5]\\n5-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 5\\n\\njulia> b = [6 7; 8 9; 10 11; 12 13; 14 15]\\n5\u00d72 Array{Int64,2}:\\n  6   7\\n  8   9\\n 10  11\\n 12  13\\n 14  15\\n\\njulia> hcat(a,b)\\n5\u00d73 Array{Int64,2}:\\n 1   6   7\\n 2   8   9\\n 3  10  11\\n 4  12  13\\n 5  14  15\\n\\njulia> c = ([1; 2; 3], [4; 5; 6])\\n([1, 2, 3], [4, 5, 6])\\n\\njulia> hcat(c...)\\n3\u00d72 Array{Int64,2}:\\n 1  4\\n 2  5\\n 3  6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.hvcat\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.hvcat\",\n    \"category\": \"Function\",\n    \"text\": \"hvcat(rows::Tuple{Vararg{Int}}, values...)\\n\\nHorizontal and vertical concatenation in one call. This function is called for block matrix syntax. The first argument specifies the number of arguments to concatenate in each block row.\\n\\njulia> a, b, c, d, e, f = 1, 2, 3, 4, 5, 6\\n(1, 2, 3, 4, 5, 6)\\n\\njulia> [a b c; d e f]\\n2\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n\\njulia> hvcat((3,3), a,b,c,d,e,f)\\n2\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n\\njulia> [a b;c d; e f]\\n3\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n 5  6\\n\\njulia> hvcat((2,2,2), a,b,c,d,e,f)\\n3\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n 5  6\\n\\nIf the first argument is a single integer n, then all block rows are assumed to have n block columns.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.flipdim\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.flipdim\",\n    \"category\": \"Function\",\n    \"text\": \"flipdim(A, d::Integer)\\n\\nReverse A in dimension d.\\n\\nExample\\n\\njulia> b = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> flipdim(b,2)\\n2\u00d72 Array{Int64,2}:\\n 2  1\\n 4  3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.circshift\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.circshift\",\n    \"category\": \"Function\",\n    \"text\": \"circshift(A, shifts)\\n\\nCircularly shift the data in an array. The second argument is a vector giving the amount to shift in each dimension.\\n\\nExample\\n\\njulia> b = reshape(collect(1:16), (4,4))\\n4\u00d74 Array{Int64,2}:\\n 1  5   9  13\\n 2  6  10  14\\n 3  7  11  15\\n 4  8  12  16\\n\\njulia> circshift(b, (0,2))\\n4\u00d74 Array{Int64,2}:\\n  9  13  1  5\\n 10  14  2  6\\n 11  15  3  7\\n 12  16  4  8\\n\\njulia> circshift(b, (-1,0))\\n4\u00d74 Array{Int64,2}:\\n 2  6  10  14\\n 3  7  11  15\\n 4  8  12  16\\n 1  5   9  13\\n\\nSee also circshift!.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.circshift!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.circshift!\",\n    \"category\": \"Function\",\n    \"text\": \"circshift!(dest, src, shifts)\\n\\nCircularly shift the data in src, storing the result in dest. shifts specifies the amount to shift in each dimension.\\n\\nThe dest array must be distinct from the src array (they cannot alias each other).\\n\\nSee also circshift.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.circcopy!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.circcopy!\",\n    \"category\": \"Function\",\n    \"text\": \"circcopy!(dest, src)\\n\\nCopy src to dest, indexing each dimension modulo its length. src and dest must have the same size, but can be offset in their indices; any offset results in a (circular) wraparound. If the arrays have overlapping indices, then on the domain of the overlap dest agrees with src.\\n\\nExample\\n\\njulia> src = reshape(collect(1:16), (4,4))\\n4\u00d74 Array{Int64,2}:\\n 1  5   9  13\\n 2  6  10  14\\n 3  7  11  15\\n 4  8  12  16\\n\\njulia> dest = OffsetArray{Int}((0:3,2:5))\\n\\njulia> circcopy!(dest, src)\\nOffsetArrays.OffsetArray{Int64,2,Array{Int64,2}} with indices 0:3\u00d72:5:\\n 8  12  16  4\\n 5   9  13  1\\n 6  10  14  2\\n 7  11  15  3\\n\\njulia> dest[1:3,2:4] == src[1:3,2:4]\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.contains-Tuple{Function,Any,Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.contains\",\n    \"category\": \"Method\",\n    \"text\": \"contains(fun, itr, x) -> Bool\\n\\nReturns true if there is at least one element y in itr such that fun(y,x) is true.\\n\\njulia> vec = [10, 100, 200]\\n3-element Array{Int64,1}:\\n  10\\n 100\\n 200\\n\\njulia> contains(==, vec, 200)\\ntrue\\n\\njulia> contains(==, vec, 300)\\nfalse\\n\\njulia> contains(>, vec, 100)\\ntrue\\n\\njulia> contains(>, vec, 200)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.find-Tuple{Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.find\",\n    \"category\": \"Method\",\n    \"text\": \"find(A)\\n\\nReturn a vector of the linear indexes of the non-zeros in A (determined by A[i]!=0). A common use of this is to convert a boolean array to an array of indexes of the true elements. If there are no non-zero elements of A, find returns an empty array.\\n\\nExamples\\n\\njulia> A = [true false; false true]\\n2\u00d72 Array{Bool,2}:\\n  true  false\\n false   true\\n\\njulia> find(A)\\n2-element Array{Int64,1}:\\n 1\\n 4\\n\\njulia> find(zeros(3))\\n0-element Array{Int64,1}\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.find-Tuple{Function,Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.find\",\n    \"category\": \"Method\",\n    \"text\": \"find(f::Function, A)\\n\\nReturn a vector I of the linear indexes of A where f(A[I]) returns true. If there are no such elements of A, find returns an empty array.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> find(isodd,A)\\n2-element Array{Int64,1}:\\n 1\\n 2\\n\\njulia> find(isodd, [2, 4])\\n0-element Array{Int64,1}\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findn\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findn\",\n    \"category\": \"Function\",\n    \"text\": \"findn(A)\\n\\nReturn a vector of indexes for each dimension giving the locations of the non-zeros in A (determined by A[i]!=0). If there are no non-zero elements of A, findn returns a 2-tuple of empty arrays.\\n\\nExamples\\n\\njulia> A = [1 2 0; 0 0 3; 0 4 0]\\n3\u00d73 Array{Int64,2}:\\n 1  2  0\\n 0  0  3\\n 0  4  0\\n\\njulia> findn(A)\\n([1, 1, 3, 2], [1, 2, 2, 3])\\n\\njulia> A = zeros(2,2)\\n2\u00d72 Array{Float64,2}:\\n 0.0  0.0\\n 0.0  0.0\\n\\njulia> findn(A)\\n(Int64[], Int64[])\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findnz\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findnz\",\n    \"category\": \"Function\",\n    \"text\": \"findnz(A)\\n\\nReturn a tuple (I, J, V) where I and J are the row and column indexes of the non-zero values in matrix A, and V is a vector of the non-zero values.\\n\\nExample\\n\\njulia> A = [1 2 0; 0 0 3; 0 4 0]\\n3\u00d73 Array{Int64,2}:\\n 1  2  0\\n 0  0  3\\n 0  4  0\\n\\njulia> findnz(A)\\n([1, 1, 3, 2], [1, 2, 2, 3], [1, 2, 4, 3])\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findfirst-Tuple{Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findfirst\",\n    \"category\": \"Method\",\n    \"text\": \"findfirst(A)\\n\\nReturn the linear index of the first non-zero value in A (determined by A[i]!=0). Returns 0 if no such value is found.\\n\\nExamples\\n\\njulia> A = [0 0; 1 0]\\n2\u00d72 Array{Int64,2}:\\n 0  0\\n 1  0\\n\\njulia> findfirst(A)\\n2\\n\\njulia> findfirst(zeros(3))\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findfirst-Tuple{Any,Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findfirst\",\n    \"category\": \"Method\",\n    \"text\": \"findfirst(A, v)\\n\\nReturn the linear index of the first element equal to v in A. Returns 0 if v is not found.\\n\\nExamples\\n\\njulia> A = [4 6; 2 2]\\n2\u00d72 Array{Int64,2}:\\n 4  6\\n 2  2\\n\\njulia> findfirst(A,2)\\n2\\n\\njulia> findfirst(A,3)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findfirst-Tuple{Function,Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findfirst\",\n    \"category\": \"Method\",\n    \"text\": \"findfirst(predicate::Function, A)\\n\\nReturn the linear index of the first element of A for which predicate returns true. Returns 0 if there is no such element.\\n\\nExamples\\n\\njulia> A = [1 4; 2 2]\\n2\u00d72 Array{Int64,2}:\\n 1  4\\n 2  2\\n\\njulia> findfirst(iseven, A)\\n2\\n\\njulia> findfirst(x -> x>10, A)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findlast-Tuple{Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findlast\",\n    \"category\": \"Method\",\n    \"text\": \"findlast(A)\\n\\nReturn the linear index of the last non-zero value in A (determined by A[i]!=0). Returns 0 if there is no non-zero value in A.\\n\\nExamples\\n\\njulia> A = [1 0; 1 0]\\n2\u00d72 Array{Int64,2}:\\n 1  0\\n 1  0\\n\\njulia> findlast(A)\\n2\\n\\njulia> A = zeros(2,2)\\n2\u00d72 Array{Float64,2}:\\n 0.0  0.0\\n 0.0  0.0\\n\\njulia> findlast(A)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findlast-Tuple{Any,Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findlast\",\n    \"category\": \"Method\",\n    \"text\": \"findlast(A, v)\\n\\nReturn the linear index of the last element equal to v in A. Returns 0 if there is no element of A equal to v.\\n\\nExamples\\n\\njulia> A = [1 2; 2 1]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 2  1\\n\\njulia> findlast(A,1)\\n4\\n\\njulia> findlast(A,2)\\n3\\n\\njulia> findlast(A,3)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findlast-Tuple{Function,Any}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findlast\",\n    \"category\": \"Method\",\n    \"text\": \"findlast(predicate::Function, A)\\n\\nReturn the linear index of the last element of A for which predicate returns true. Returns 0 if there is no such element.\\n\\nExamples\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> findlast(isodd, A)\\n2\\n\\njulia> findlast(x -> x > 5, A)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findnext-Tuple{Any,Integer}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findnext\",\n    \"category\": \"Method\",\n    \"text\": \"findnext(A, i::Integer)\\n\\nFind the next linear index >= i of a non-zero element of A, or 0 if not found.\\n\\nExamples\\n\\njulia> A = [0 0; 1 0]\\n2\u00d72 Array{Int64,2}:\\n 0  0\\n 1  0\\n\\njulia> findnext(A,1)\\n2\\n\\njulia> findnext(A,3)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findnext-Tuple{Function,Any,Integer}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findnext\",\n    \"category\": \"Method\",\n    \"text\": \"findnext(predicate::Function, A, i::Integer)\\n\\nFind the next linear index >= i of an element of A for which predicate returns true, or 0 if not found.\\n\\nExamples\\n\\njulia> A = [1 4; 2 2]\\n2\u00d72 Array{Int64,2}:\\n 1  4\\n 2  2\\n\\njulia> findnext(isodd, A, 1)\\n1\\n\\njulia> findnext(isodd, A, 2)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findnext-Tuple{Any,Any,Integer}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findnext\",\n    \"category\": \"Method\",\n    \"text\": \"findnext(A, v, i::Integer)\\n\\nFind the next linear index >= i of an element of A equal to v (using ==), or 0 if not found.\\n\\nExamples\\n\\njulia> A = [1 4; 2 2]\\n2\u00d72 Array{Int64,2}:\\n 1  4\\n 2  2\\n\\njulia> findnext(A,4,4)\\n0\\n\\njulia> findnext(A,4,3)\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findprev-Tuple{Any,Integer}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findprev\",\n    \"category\": \"Method\",\n    \"text\": \"findprev(A, i::Integer)\\n\\nFind the previous linear index <= i of a non-zero element of A, or 0 if not found.\\n\\nExamples\\n\\njulia> A = [0 0; 1 2]\\n2\u00d72 Array{Int64,2}:\\n 0  0\\n 1  2\\n\\njulia> findprev(A,2)\\n2\\n\\njulia> findprev(A,1)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findprev-Tuple{Function,Any,Integer}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findprev\",\n    \"category\": \"Method\",\n    \"text\": \"findprev(predicate::Function, A, i::Integer)\\n\\nFind the previous linear index <= i of an element of A for which predicate returns true, or 0 if not found.\\n\\nExamples\\n\\njulia> A = [4 6; 1 2]\\n2\u00d72 Array{Int64,2}:\\n 4  6\\n 1  2\\n\\njulia> findprev(isodd, A, 1)\\n0\\n\\njulia> findprev(isodd, A, 3)\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.findprev-Tuple{Any,Any,Integer}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.findprev\",\n    \"category\": \"Method\",\n    \"text\": \"findprev(A, v, i::Integer)\\n\\nFind the previous linear index <= i of an element of A equal to v (using ==), or 0 if not found.\\n\\nExamples\\n\\njulia> A = [0 0; 1 2]\\n2\u00d72 Array{Int64,2}:\\n 0  0\\n 1  2\\n\\njulia> findprev(A, 1, 4)\\n2\\n\\njulia> findprev(A, 1, 1)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.permutedims\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.permutedims\",\n    \"category\": \"Function\",\n    \"text\": \"permutedims(A, perm)\\n\\nPermute the dimensions of array A. perm is a vector specifying a permutation of length ndims(A). This is a generalization of transpose for multi-dimensional arrays. Transpose is equivalent to permutedims(A, [2,1]).\\n\\nSee also: PermutedDimsArray.\\n\\nExample\\n\\njulia> A = reshape(collect(1:8), (2,2,2))\\n2\u00d72\u00d72 Array{Int64,3}:\\n[:, :, 1] =\\n 1  3\\n 2  4\\n\\n[:, :, 2] =\\n 5  7\\n 6  8\\n\\njulia> permutedims(A, [3, 2, 1])\\n2\u00d72\u00d72 Array{Int64,3}:\\n[:, :, 1] =\\n 1  3\\n 5  7\\n\\n[:, :, 2] =\\n 2  4\\n 6  8\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.permutedims!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.permutedims!\",\n    \"category\": \"Function\",\n    \"text\": \"permutedims!(dest, src, perm)\\n\\nPermute the dimensions of array src and store the result in the array dest. perm is a vector specifying a permutation of length ndims(src). The preallocated array dest should have size(dest) == size(src)[perm] and is completely overwritten. No in-place permutation is supported and unexpected results will happen if src and dest have overlapping memory regions.\\n\\nSee also permutedims.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.PermutedDimsArrays.PermutedDimsArray\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.PermutedDimsArrays.PermutedDimsArray\",\n    \"category\": \"Type\",\n    \"text\": \"PermutedDimsArray(A, perm) -> B\\n\\nGiven an AbstractArray A, create a view B such that the dimensions appear to be permuted. Similar to permutedims, except that no copying occurs (B shares storage with A).\\n\\nSee also: permutedims.\\n\\nExample\\n\\njulia> A = rand(3,5,4);\\n\\njulia> B = PermutedDimsArray(A, (3,1,2));\\n\\njulia> size(B)\\n(4, 3, 5)\\n\\njulia> B[3,1,2] == A[1,2,3]\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.promote_shape\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.promote_shape\",\n    \"category\": \"Function\",\n    \"text\": \"promote_shape(s1, s2)\\n\\nCheck two array shapes for compatibility, allowing trailing singleton dimensions, and return whichever shape has more dimensions.\\n\\njulia> a = ones(3,4,1,1,1);\\n\\njulia> b = ones(3,4);\\n\\njulia> promote_shape(a,b)\\n(Base.OneTo(3), Base.OneTo(4), Base.OneTo(1), Base.OneTo(1), Base.OneTo(1))\\n\\njulia> promote_shape((2,3,1,4), (2, 3, 1, 4, 1))\\n(2, 3, 1, 4, 1)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Concatenation-and-permutation-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Concatenation and permutation\",\n    \"category\": \"section\",\n    \"text\": \"Base.cat\\nBase.vcat\\nBase.hcat\\nBase.hvcat\\nBase.flipdim\\nBase.circshift\\nBase.circshift!\\nBase.circcopy!\\nBase.contains(::Function, ::Any, ::Any)\\nBase.find(::Any)\\nBase.find(::Function, ::Any)\\nBase.findn\\nBase.findnz\\nBase.findfirst(::Any)\\nBase.findfirst(::Any, ::Any)\\nBase.findfirst(::Function, ::Any)\\nBase.findlast(::Any)\\nBase.findlast(::Any, ::Any)\\nBase.findlast(::Function, ::Any)\\nBase.findnext(::Any, ::Integer)\\nBase.findnext(::Function, ::Any, ::Integer)\\nBase.findnext(::Any, ::Any, ::Integer)\\nBase.findprev(::Any, ::Integer)\\nBase.findprev(::Function, ::Any, ::Integer)\\nBase.findprev(::Any, ::Any, ::Integer)\\nBase.permutedims\\nBase.permutedims!\\nBase.PermutedDimsArray\\nBase.promote_shape\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.accumulate-Tuple{Any,Any,Integer}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.accumulate\",\n    \"category\": \"Method\",\n    \"text\": \"accumulate(op, A, dim=1)\\n\\nCumulative operation op along a dimension dim (defaults to 1). See also accumulate! to use a preallocated output array, both for performance and to control the precision of the output (e.g. to avoid overflow). For common operations there are specialized variants of accumulate, see: cumsum, cumprod\\n\\njulia> accumulate(+, [1,2,3])\\n3-element Array{Int64,1}:\\n 1\\n 3\\n 6\\n\\njulia> accumulate(*, [1,2,3])\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 6\\n\\n\\n\\naccumulate(op, v0, A)\\n\\nLike accumulate, but using a starting element v0. The first entry of the result will be op(v0, first(A)). For example:\\n\\njulia> accumulate(+, 100, [1,2,3])\\n3-element Array{Int64,1}:\\n 101\\n 103\\n 106\\n\\njulia> accumulate(min, 0, [1,2,-1])\\n3-element Array{Int64,1}:\\n  0\\n  0\\n -1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.accumulate!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.accumulate!\",\n    \"category\": \"Function\",\n    \"text\": \"accumulate!(op, B, A, dim=1)\\n\\nCumulative operation op on A along a dimension, storing the result in B. The dimension defaults to 1. See also accumulate.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.cumprod\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.cumprod\",\n    \"category\": \"Function\",\n    \"text\": \"cumprod(A, dim=1)\\n\\nCumulative product along a dimension dim (defaults to 1). See also cumprod! to use a preallocated output array, both for performance and to control the precision of the output (e.g. to avoid overflow).\\n\\njulia> a = [1 2 3; 4 5 6]\\n2\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n\\njulia> cumprod(a,1)\\n2\u00d73 Array{Int64,2}:\\n 1   2   3\\n 4  10  18\\n\\njulia> cumprod(a,2)\\n2\u00d73 Array{Int64,2}:\\n 1   2    6\\n 4  20  120\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.cumprod!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.cumprod!\",\n    \"category\": \"Function\",\n    \"text\": \"cumprod!(B, A, dim::Integer=1)\\n\\nCumulative product of A along a dimension, storing the result in B. The dimension defaults to 1. See also cumprod.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.cumsum\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.cumsum\",\n    \"category\": \"Function\",\n    \"text\": \"cumsum(A, dim=1)\\n\\nCumulative sum along a dimension dim (defaults to 1). See also cumsum! to use a preallocated output array, both for performance and to control the precision of the output (e.g. to avoid overflow).\\n\\njulia> a = [1 2 3; 4 5 6]\\n2\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n\\njulia> cumsum(a,1)\\n2\u00d73 Array{Int64,2}:\\n 1  2  3\\n 5  7  9\\n\\njulia> cumsum(a,2)\\n2\u00d73 Array{Int64,2}:\\n 1  3   6\\n 4  9  15\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.cumsum!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.cumsum!\",\n    \"category\": \"Function\",\n    \"text\": \"cumsum!(B, A, dim::Integer=1)\\n\\nCumulative sum of A along a dimension, storing the result in B. The dimension defaults to 1. See also cumsum.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.cumsum_kbn\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.cumsum_kbn\",\n    \"category\": \"Function\",\n    \"text\": \"cumsum_kbn(A, [dim::Integer=1])\\n\\nCumulative sum along a dimension, using the Kahan-Babuska-Neumaier compensated summation algorithm for additional accuracy. The dimension defaults to 1.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.LinAlg.diff\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.LinAlg.diff\",\n    \"category\": \"Function\",\n    \"text\": \"diff(A, [dim::Integer=1])\\n\\nFinite difference operator of matrix or vector A. If A is a matrix, compute the finite difference over a dimension dim (default 1).\\n\\nExample\\n\\njulia> a = [2 4; 6 16]\\n2\u00d72 Array{Int64,2}:\\n 2   4\\n 6  16\\n\\njulia> diff(a,2)\\n2\u00d71 Array{Int64,2}:\\n  2\\n 10\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.LinAlg.gradient\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.LinAlg.gradient\",\n    \"category\": \"Function\",\n    \"text\": \"gradient(F::AbstractVector, [h::Real])\\n\\nCompute differences along vector F, using h as the spacing between points. The default spacing is one.\\n\\nExample\\n\\njulia> a = [2,4,6,8];\\n\\njulia> gradient(a)\\n4-element Array{Float64,1}:\\n 2.0\\n 2.0\\n 2.0\\n 2.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.rot180\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.rot180\",\n    \"category\": \"Function\",\n    \"text\": \"rot180(A)\\n\\nRotate matrix A 180 degrees.\\n\\nExample\\n\\njulia> a = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> rot180(a)\\n2\u00d72 Array{Int64,2}:\\n 4  3\\n 2  1\\n\\n\\n\\nrot180(A, k)\\n\\nRotate matrix A 180 degrees an integer k number of times. If k is even, this is equivalent to a copy.\\n\\nExamples\\n\\njulia> a = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> rot180(a,1)\\n2\u00d72 Array{Int64,2}:\\n 4  3\\n 2  1\\n\\njulia> rot180(a,2)\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.rotl90\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.rotl90\",\n    \"category\": \"Function\",\n    \"text\": \"rotl90(A)\\n\\nRotate matrix A left 90 degrees.\\n\\nExample\\n\\njulia> a = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> rotl90(a)\\n2\u00d72 Array{Int64,2}:\\n 2  4\\n 1  3\\n\\n\\n\\nrotl90(A, k)\\n\\nRotate matrix A left 90 degrees an integer k number of times. If k is zero or a multiple of four, this is equivalent to a copy.\\n\\nExamples\\n\\njulia> a = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> rotl90(a,1)\\n2\u00d72 Array{Int64,2}:\\n 2  4\\n 1  3\\n\\njulia> rotl90(a,2)\\n2\u00d72 Array{Int64,2}:\\n 4  3\\n 2  1\\n\\njulia> rotl90(a,3)\\n2\u00d72 Array{Int64,2}:\\n 3  1\\n 4  2\\n\\njulia> rotl90(a,4)\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.rotr90\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.rotr90\",\n    \"category\": \"Function\",\n    \"text\": \"rotr90(A)\\n\\nRotate matrix A right 90 degrees.\\n\\nExample\\n\\njulia> a = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> rotr90(a)\\n2\u00d72 Array{Int64,2}:\\n 3  1\\n 4  2\\n\\n\\n\\nrotr90(A, k)\\n\\nRotate matrix A right 90 degrees an integer k number of times. If k is zero or a multiple of four, this is equivalent to a copy.\\n\\nExamples\\n\\njulia> a = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> rotr90(a,1)\\n2\u00d72 Array{Int64,2}:\\n 3  1\\n 4  2\\n\\njulia> rotr90(a,2)\\n2\u00d72 Array{Int64,2}:\\n 4  3\\n 2  1\\n\\njulia> rotr90(a,3)\\n2\u00d72 Array{Int64,2}:\\n 2  4\\n 1  3\\n\\njulia> rotr90(a,4)\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.reducedim\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.reducedim\",\n    \"category\": \"Function\",\n    \"text\": \"reducedim(f, A, region[, v0])\\n\\nReduce 2-argument function f along dimensions of A. region is a vector specifying the dimensions to reduce, and v0 is the initial value to use in the reductions. For +, *, max and min the v0 argument is optional.\\n\\nThe associativity of the reduction is implementation-dependent; if you need a particular associativity, e.g. left-to-right, you should write your own loop. See documentation for reduce.\\n\\nExamples\\n\\njulia> a = reshape(collect(1:16), (4,4))\\n4\u00d74 Array{Int64,2}:\\n 1  5   9  13\\n 2  6  10  14\\n 3  7  11  15\\n 4  8  12  16\\n\\njulia> reducedim(max, a, 2)\\n4\u00d71 Array{Int64,2}:\\n 13\\n 14\\n 15\\n 16\\n\\njulia> reducedim(max, a, 1)\\n1\u00d74 Array{Int64,2}:\\n 4  8  12  16\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.mapreducedim\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.mapreducedim\",\n    \"category\": \"Function\",\n    \"text\": \"mapreducedim(f, op, A, region[, v0])\\n\\nEvaluates to the same as reducedim(op, map(f, A), region, f(v0)), but is generally faster because the intermediate array is avoided.\\n\\nExamples\\n\\njulia> a = reshape(collect(1:16), (4,4))\\n4\u00d74 Array{Int64,2}:\\n 1  5   9  13\\n 2  6  10  14\\n 3  7  11  15\\n 4  8  12  16\\n\\njulia> mapreducedim(isodd, *, a, 1)\\n1\u00d74 Array{Bool,2}:\\n false  false  false  false\\n\\njulia> mapreducedim(isodd, |, a, 1, true)\\n1\u00d74 Array{Bool,2}:\\n true  true  true  true\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.mapslices\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.mapslices\",\n    \"category\": \"Function\",\n    \"text\": \"mapslices(f, A, dims)\\n\\nTransform the given dimensions of array A using function f. f is called on each slice of A of the form A[...,:,...,:,...]. dims is an integer vector specifying where the colons go in this expression. The results are concatenated along the remaining dimensions. For example, if dims is [1,2] and A is 4-dimensional, f is called on A[:,:,i,j] for all i and j.\\n\\nExamples\\n\\njulia> a = reshape(collect(1:16),(2,2,2,2))\\n2\u00d72\u00d72\u00d72 Array{Int64,4}:\\n[:, :, 1, 1] =\\n 1  3\\n 2  4\\n\\n[:, :, 2, 1] =\\n 5  7\\n 6  8\\n\\n[:, :, 1, 2] =\\n  9  11\\n 10  12\\n\\n[:, :, 2, 2] =\\n 13  15\\n 14  16\\n\\njulia> mapslices(sum, a, [1,2])\\n1\u00d71\u00d72\u00d72 Array{Int64,4}:\\n[:, :, 1, 1] =\\n 10\\n\\n[:, :, 2, 1] =\\n 26\\n\\n[:, :, 1, 2] =\\n 42\\n\\n[:, :, 2, 2] =\\n 58\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.sum_kbn\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.sum_kbn\",\n    \"category\": \"Function\",\n    \"text\": \"sum_kbn(A)\\n\\nReturns the sum of all elements of A, using the Kahan-Babuska-Neumaier compensated summation algorithm for additional accuracy.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Array-functions-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Array functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.accumulate(::Any, ::Any, ::Integer)\\nBase.accumulate!\\nBase.cumprod\\nBase.cumprod!\\nBase.cumsum\\nBase.cumsum!\\nBase.cumsum_kbn\\nBase.LinAlg.diff\\nBase.LinAlg.gradient\\nBase.rot180\\nBase.rotl90\\nBase.rotr90\\nBase.reducedim\\nBase.mapreducedim\\nBase.mapslices\\nBase.sum_kbn\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Random.randperm\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Random.randperm\",\n    \"category\": \"Function\",\n    \"text\": \"randperm([rng=GLOBAL_RNG,] n::Integer)\\n\\nConstruct a random permutation of length n. The optional rng argument specifies a random number generator (see Random Numbers). To randomly permute a arbitrary vector, see shuffle or shuffle!.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> randperm(rng, 4)\\n4-element Array{Int64,1}:\\n 2\\n 1\\n 4\\n 3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.invperm\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.invperm\",\n    \"category\": \"Function\",\n    \"text\": \"invperm(v)\\n\\nReturn the inverse permutation of v. If B = A[v], then A == B[invperm(v)].\\n\\nExample\\n\\njulia> v = [2; 4; 3; 1];\\n\\njulia> invperm(v)\\n4-element Array{Int64,1}:\\n 4\\n 1\\n 3\\n 2\\n\\njulia> A = ['a','b','c','d'];\\n\\njulia> B = A[v]\\n4-element Array{Char,1}:\\n 'b'\\n 'd'\\n 'c'\\n 'a'\\n\\njulia> B[invperm(v)]\\n4-element Array{Char,1}:\\n 'a'\\n 'b'\\n 'c'\\n 'd'\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.isperm\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.isperm\",\n    \"category\": \"Function\",\n    \"text\": \"isperm(v) -> Bool\\n\\nReturns true if v is a valid permutation.\\n\\nExamples\\n\\njulia> isperm([1; 2])\\ntrue\\n\\njulia> isperm([1; 3])\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.permute!-Tuple{Any,AbstractArray{T,1} where T}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.permute!\",\n    \"category\": \"Method\",\n    \"text\": \"permute!(v, p)\\n\\nPermute vector v in-place, according to permutation p. No checking is done to verify that p is a permutation.\\n\\nTo return a new permutation, use v[p]. Note that this is generally faster than permute!(v,p) for large vectors.\\n\\nSee also ipermute!.\\n\\nExample\\n\\njulia> A = [1, 1, 3, 4];\\n\\njulia> perm = [2, 4, 3, 1];\\n\\njulia> permute!(A, perm);\\n\\njulia> A\\n4-element Array{Int64,1}:\\n 1\\n 4\\n 3\\n 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.ipermute!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.ipermute!\",\n    \"category\": \"Function\",\n    \"text\": \"ipermute!(v, p)\\n\\nLike permute!, but the inverse of the given permutation is applied.\\n\\nExample\\n\\njulia> A = [1, 1, 3, 4];\\n\\njulia> perm = [2, 4, 3, 1];\\n\\njulia> ipermute!(A, perm);\\n\\njulia> A\\n4-element Array{Int64,1}:\\n 4\\n 1\\n 3\\n 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Random.randcycle\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Random.randcycle\",\n    \"category\": \"Function\",\n    \"text\": \"randcycle([rng=GLOBAL_RNG,] n::Integer)\\n\\nConstruct a random cyclic permutation of length n. The optional rng argument specifies a random number generator, see Random Numbers.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> randcycle(rng, 6)\\n6-element Array{Int64,1}:\\n 3\\n 5\\n 4\\n 6\\n 1\\n 2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Random.shuffle\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Random.shuffle\",\n    \"category\": \"Function\",\n    \"text\": \"shuffle([rng=GLOBAL_RNG,] v)\\n\\nReturn a randomly permuted copy of v. The optional rng argument specifies a random number generator (see Random Numbers). To permute v in-place, see shuffle!.  To obtain randomly permuted indices, see randperm.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> shuffle(rng, collect(1:10))\\n10-element Array{Int64,1}:\\n  6\\n  1\\n 10\\n  2\\n  3\\n  9\\n  5\\n  7\\n  4\\n  8\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.Random.shuffle!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.Random.shuffle!\",\n    \"category\": \"Function\",\n    \"text\": \"shuffle!([rng=GLOBAL_RNG,] v)\\n\\nIn-place version of shuffle: randomly permute the array v in-place, optionally supplying the random-number generator rng.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> shuffle!(rng, collect(1:16))\\n16-element Array{Int64,1}:\\n  2\\n 15\\n  5\\n 14\\n  1\\n  9\\n 10\\n  6\\n 11\\n  3\\n 16\\n  7\\n  4\\n 12\\n  8\\n 13\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.reverse\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.reverse\",\n    \"category\": \"Function\",\n    \"text\": \"reverse(v [, start=1 [, stop=length(v) ]] )\\n\\nReturn a copy of v reversed from start to stop.\\n\\nExamples\\n\\njulia> A = collect(1:5)\\n5-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 5\\n\\njulia> reverse(A)\\n5-element Array{Int64,1}:\\n 5\\n 4\\n 3\\n 2\\n 1\\n\\njulia> reverse(A, 1, 4)\\n5-element Array{Int64,1}:\\n 4\\n 3\\n 2\\n 1\\n 5\\n\\njulia> reverse(A, 3, 5)\\n5-element Array{Int64,1}:\\n 1\\n 2\\n 5\\n 4\\n 3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.reverseind\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.reverseind\",\n    \"category\": \"Function\",\n    \"text\": \"reverseind(v, i)\\n\\nGiven an index i in reverse(v), return the corresponding index in v so that v[reverseind(v,i)] == reverse(v)[i]. (This can be nontrivial in the case where v is a Unicode string.)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.reverse!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.reverse!\",\n    \"category\": \"Function\",\n    \"text\": \"reverse!(v [, start=1 [, stop=length(v) ]]) -> v\\n\\nIn-place version of reverse.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Combinatorics-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Combinatorics\",\n    \"category\": \"section\",\n    \"text\": \"Base.Random.randperm\\nBase.invperm\\nBase.isperm\\nBase.permute!(::Any, ::AbstractVector)\\nBase.ipermute!\\nBase.Random.randcycle\\nBase.Random.shuffle\\nBase.Random.shuffle!\\nBase.reverse\\nBase.reverseind\\nBase.reverse!\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.flipbits!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.flipbits!\",\n    \"category\": \"Function\",\n    \"text\": \"flipbits!(B::BitArray{N}) -> BitArray{N}\\n\\nPerforms a bitwise not operation on B. See ~.\\n\\nExample\\n\\njulia> A = trues(2,2)\\n2\u00d72 BitArray{2}:\\n true  true\\n true  true\\n\\njulia> flipbits!(A)\\n2\u00d72 BitArray{2}:\\n false  false\\n false  false\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.rol!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.rol!\",\n    \"category\": \"Function\",\n    \"text\": \"rol!(dest::BitVector, src::BitVector, i::Integer) -> BitVector\\n\\nPerforms a left rotation operation on src and puts the result into dest. i controls how far to rotate the bits.\\n\\n\\n\\nrol!(B::BitVector, i::Integer) -> BitVector\\n\\nPerforms a left rotation operation in-place on B. i controls how far to rotate the bits.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.rol\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.rol\",\n    \"category\": \"Function\",\n    \"text\": \"rol(B::BitVector, i::Integer) -> BitVector\\n\\nPerforms a left rotation operation, returning a new BitVector. i controls how far to rotate the bits. See also rol!.\\n\\nExamples\\n\\njulia> A = BitArray([true, true, false, false, true])\\n5-element BitArray{1}:\\n  true\\n  true\\n false\\n false\\n  true\\n\\njulia> rol(A,1)\\n5-element BitArray{1}:\\n  true\\n false\\n false\\n  true\\n  true\\n\\njulia> rol(A,2)\\n5-element BitArray{1}:\\n false\\n false\\n  true\\n  true\\n  true\\n\\njulia> rol(A,5)\\n5-element BitArray{1}:\\n  true\\n  true\\n false\\n false\\n  true\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.ror!\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.ror!\",\n    \"category\": \"Function\",\n    \"text\": \"ror!(dest::BitVector, src::BitVector, i::Integer) -> BitVector\\n\\nPerforms a right rotation operation on src and puts the result into dest. i controls how far to rotate the bits.\\n\\n\\n\\nror!(B::BitVector, i::Integer) -> BitVector\\n\\nPerforms a right rotation operation in-place on B. i controls how far to rotate the bits.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.ror\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.ror\",\n    \"category\": \"Function\",\n    \"text\": \"ror(B::BitVector, i::Integer) -> BitVector\\n\\nPerforms a right rotation operation on B, returning a new BitVector. i controls how far to rotate the bits. See also ror!.\\n\\nExamples\\n\\njulia> A = BitArray([true, true, false, false, true])\\n5-element BitArray{1}:\\n  true\\n  true\\n false\\n false\\n  true\\n\\njulia> ror(A,1)\\n5-element BitArray{1}:\\n  true\\n  true\\n  true\\n false\\n false\\n\\njulia> ror(A,2)\\n5-element BitArray{1}:\\n false\\n  true\\n  true\\n  true\\n false\\n\\njulia> ror(A,5)\\n5-element BitArray{1}:\\n  true\\n  true\\n false\\n false\\n  true\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#BitArrays-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"BitArrays\",\n    \"category\": \"section\",\n    \"text\": \"BitArrays are space-efficient \\\"packed\\\" boolean arrays, which store one bit per boolean value.  They can be used similarly to Array{Bool} arrays (which store one byte per boolean value), and can be converted to/from the latter via Array(bitarray) and BitArray(array), respectively.Base.flipbits!\\nBase.rol!\\nBase.rol\\nBase.ror!\\nBase.ror\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.SparseVector\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.SparseVector\",\n    \"category\": \"Type\",\n    \"text\": \"SparseVector{Tv,Ti<:Integer} <: AbstractSparseVector{Tv,Ti}\\n\\nVector type for storing sparse vectors.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.SparseMatrixCSC\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.SparseMatrixCSC\",\n    \"category\": \"Type\",\n    \"text\": \"SparseMatrixCSC{Tv,Ti<:Integer} <: AbstractSparseMatrix{Tv,Ti}\\n\\nMatrix type for storing sparse matrices in the Compressed Sparse Column format.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.sparse\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.sparse\",\n    \"category\": \"Function\",\n    \"text\": \"sparse(A)\\n\\nConvert an AbstractMatrix A into a sparse matrix.\\n\\nExample\\n\\njulia> A = eye(3)\\n3\u00d73 Array{Float64,2}:\\n 1.0  0.0  0.0\\n 0.0  1.0  0.0\\n 0.0  0.0  1.0\\n\\njulia> sparse(A)\\n3\u00d73 SparseMatrixCSC{Float64,Int64} with 3 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  1.0\\n  [3, 3]  =  1.0\\n\\n\\n\\nsparse(I, J, V,[ m, n, combine])\\n\\nCreate a sparse matrix S of dimensions m x n such that S[I[k], J[k]] = V[k]. The combine function is used to combine duplicates. If m and n are not specified, they are set to maximum(I) and maximum(J) respectively. If the combine function is not supplied, combine defaults to + unless the elements of V are Booleans in which case combine defaults to |. All elements of I must satisfy 1 <= I[k] <= m, and all elements of J must satisfy 1 <= J[k] <= n. Numerical zeros in (I, J, V) are retained as structural nonzeros; to drop numerical zeros, use dropzeros!.\\n\\nFor additional documentation and an expert driver, see Base.SparseArrays.sparse!.\\n\\nExample\\n\\njulia> Is = [1; 2; 3];\\n\\njulia> Js = [1; 2; 3];\\n\\njulia> Vs = [1; 2; 3];\\n\\njulia> sparse(Is, Js, Vs)\\n3\u00d73 SparseMatrixCSC{Int64,Int64} with 3 stored entries:\\n  [1, 1]  =  1\\n  [2, 2]  =  2\\n  [3, 3]  =  3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.sparsevec\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.sparsevec\",\n    \"category\": \"Function\",\n    \"text\": \"sparsevec(I, V, [m, combine])\\n\\nCreate a sparse vector S of length m such that S[I[k]] = V[k]. Duplicates are combined using the combine function, which defaults to + if no combine argument is provided, unless the elements of V are Booleans in which case combine defaults to |.\\n\\njulia> II = [1, 3, 3, 5]; V = [0.1, 0.2, 0.3, 0.2];\\n\\njulia> sparsevec(II, V)\\n5-element SparseVector{Float64,Int64} with 3 stored entries:\\n  [1]  =  0.1\\n  [3]  =  0.5\\n  [5]  =  0.2\\n\\njulia> sparsevec(II, V, 8, -)\\n8-element SparseVector{Float64,Int64} with 3 stored entries:\\n  [1]  =  0.1\\n  [3]  =  -0.1\\n  [5]  =  0.2\\n\\njulia> sparsevec([1, 3, 1, 2, 2], [true, true, false, false, false])\\n3-element SparseVector{Bool,Int64} with 3 stored entries:\\n  [1]  =  true\\n  [2]  =  false\\n  [3]  =  true\\n\\n\\n\\nsparsevec(d::Dict, [m])\\n\\nCreate a sparse vector of length m where the nonzero indices are keys from the dictionary, and the nonzero values are the values from the dictionary.\\n\\njulia> sparsevec(Dict(1 => 3, 2 => 2))\\n2-element SparseVector{Int64,Int64} with 2 stored entries:\\n  [1]  =  3\\n  [2]  =  2\\n\\n\\n\\nsparsevec(A)\\n\\nConvert a vector A into a sparse vector of length m.\\n\\nExample\\n\\njulia> sparsevec([1.0, 2.0, 0.0, 0.0, 3.0, 0.0])\\n6-element SparseVector{Float64,Int64} with 3 stored entries:\\n  [1]  =  1.0\\n  [2]  =  2.0\\n  [5]  =  3.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.issparse\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.issparse\",\n    \"category\": \"Function\",\n    \"text\": \"issparse(S)\\n\\nReturns true if S is sparse, and false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.full\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.full\",\n    \"category\": \"Function\",\n    \"text\": \"full(S)\\n\\nConvert a sparse matrix or vector S into a dense matrix or vector.\\n\\nExample\\n\\njulia> A = speye(3)\\n3\u00d73 SparseMatrixCSC{Float64,Int64} with 3 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  1.0\\n  [3, 3]  =  1.0\\n\\njulia> full(A)\\n3\u00d73 Array{Float64,2}:\\n 1.0  0.0  0.0\\n 0.0  1.0  0.0\\n 0.0  0.0  1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.nnz\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.nnz\",\n    \"category\": \"Function\",\n    \"text\": \"nnz(A)\\n\\nReturns the number of stored (filled) elements in a sparse array.\\n\\nExample\\n\\njulia> A = speye(3)\\n3\u00d73 SparseMatrixCSC{Float64,Int64} with 3 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  1.0\\n  [3, 3]  =  1.0\\n\\njulia> nnz(A)\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.spzeros\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.spzeros\",\n    \"category\": \"Function\",\n    \"text\": \"spzeros([type,]m[,n])\\n\\nCreate a sparse vector of length m or sparse matrix of size m x n. This sparse array will not contain any nonzero values. No storage will be allocated for nonzero values during construction. The type defaults to Float64 if not specified.\\n\\nExamples\\n\\njulia> spzeros(3, 3)\\n3\u00d73 SparseMatrixCSC{Float64,Int64} with 0 stored entries\\n\\njulia> spzeros(Float32, 4)\\n4-element SparseVector{Float32,Int64} with 0 stored entries\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.spones\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.spones\",\n    \"category\": \"Function\",\n    \"text\": \"spones(S)\\n\\nCreate a sparse array with the same structure as that of S, but with every nonzero element having the value 1.0.\\n\\nExample\\n\\njulia> A = sparse([1,2,3,4],[2,4,3,1],[5.,4.,3.,2.])\\n4\u00d74 SparseMatrixCSC{Float64,Int64} with 4 stored entries:\\n  [4, 1]  =  2.0\\n  [1, 2]  =  5.0\\n  [3, 3]  =  3.0\\n  [2, 4]  =  4.0\\n\\njulia> spones(A)\\n4\u00d74 SparseMatrixCSC{Float64,Int64} with 4 stored entries:\\n  [4, 1]  =  1.0\\n  [1, 2]  =  1.0\\n  [3, 3]  =  1.0\\n  [2, 4]  =  1.0\\n\\nNote the difference from speye.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.speye-Tuple{Type,Integer,Integer}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.speye\",\n    \"category\": \"Method\",\n    \"text\": \"speye([type,]m[,n])\\n\\nCreate a sparse identity matrix of size m x m. When n is supplied, create a sparse identity matrix of size m x n. The type defaults to Float64 if not specified.\\n\\nsparse(I, m, n) is equivalent to speye(Int, m, n), and sparse(\u03b1*I, m, n) can be used to efficiently create a sparse multiple \u03b1 of the identity matrix.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.speye-Tuple{SparseMatrixCSC}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.speye\",\n    \"category\": \"Method\",\n    \"text\": \"speye(S)\\n\\nCreate a sparse identity matrix with the same size as S.\\n\\nExample\\n\\njulia> A = sparse([1,2,3,4],[2,4,3,1],[5.,4.,3.,2.])\\n4\u00d74 SparseMatrixCSC{Float64,Int64} with 4 stored entries:\\n  [4, 1]  =  2.0\\n  [1, 2]  =  5.0\\n  [3, 3]  =  3.0\\n  [2, 4]  =  4.0\\n\\njulia> speye(A)\\n4\u00d74 SparseMatrixCSC{Float64,Int64} with 4 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  1.0\\n  [3, 3]  =  1.0\\n  [4, 4]  =  1.0\\n\\nNote the difference from spones.\\n\\n\\n\\nspeye([type,]m[,n])\\n\\nCreate a sparse identity matrix of size m x m. When n is supplied, create a sparse identity matrix of size m x n. The type defaults to Float64 if not specified.\\n\\nsparse(I, m, n) is equivalent to speye(Int, m, n), and sparse(\u03b1*I, m, n) can be used to efficiently create a sparse multiple \u03b1 of the identity matrix.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.spdiagm\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.spdiagm\",\n    \"category\": \"Function\",\n    \"text\": \"spdiagm(B, d[, m, n])\\n\\nConstruct a sparse diagonal matrix. B is a tuple of vectors containing the diagonals and d is a tuple containing the positions of the diagonals. In the case the input contains only one diagonal, B can be a vector (instead of a tuple) and d can be the diagonal position (instead of a tuple), defaulting to 0 (diagonal). Optionally, m and n specify the size of the resulting sparse matrix.\\n\\nExample\\n\\njulia> spdiagm(([1,2,3,4],[4,3,2,1]),(-1,1))\\n5\u00d75 SparseMatrixCSC{Int64,Int64} with 8 stored entries:\\n  [2, 1]  =  1\\n  [1, 2]  =  4\\n  [3, 2]  =  2\\n  [2, 3]  =  3\\n  [4, 3]  =  3\\n  [3, 4]  =  2\\n  [5, 4]  =  4\\n  [4, 5]  =  1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.sprand\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.sprand\",\n    \"category\": \"Function\",\n    \"text\": \"sprand([rng],[type],m,[n],p::AbstractFloat,[rfn])\\n\\nCreate a random length m sparse vector or m by n sparse matrix, in which the probability of any element being nonzero is independently given by p (and hence the mean density of nonzeros is also exactly p). Nonzero values are sampled from the distribution specified by rfn and have the type type. The uniform distribution is used in case rfn is not specified. The optional rng argument specifies a random number generator, see Random Numbers.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> sprand(rng, Bool, 2, 2, 0.5)\\n2\u00d72 SparseMatrixCSC{Bool,Int64} with 2 stored entries:\\n  [1, 1]  =  true\\n  [2, 1]  =  true\\n\\njulia> sprand(rng, Float64, 3, 0.75)\\n3-element SparseVector{Float64,Int64} with 1 stored entry:\\n  [3]  =  0.298614\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.sprandn\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.sprandn\",\n    \"category\": \"Function\",\n    \"text\": \"sprandn([rng], m[,n],p::AbstractFloat)\\n\\nCreate a random sparse vector of length m or sparse matrix of size m by n with the specified (independent) probability p of any entry being nonzero, where nonzero values are sampled from the normal distribution. The optional rng argument specifies a random number generator, see Random Numbers.\\n\\nExample\\n\\njulia> rng = MersenneTwister(1234);\\n\\njulia> sprandn(rng, 2, 2, 0.75)\\n2\u00d72 SparseMatrixCSC{Float64,Int64} with 3 stored entries:\\n  [1, 1]  =  0.532813\\n  [2, 1]  =  -0.271735\\n  [2, 2]  =  0.502334\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.nonzeros\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.nonzeros\",\n    \"category\": \"Function\",\n    \"text\": \"nonzeros(A)\\n\\nReturn a vector of the structural nonzero values in sparse array A. This includes zeros that are explicitly stored in the sparse array. The returned vector points directly to the internal nonzero storage of A, and any modifications to the returned vector will mutate A as well. See rowvals and nzrange.\\n\\nExample\\n\\njulia> A = speye(3)\\n3\u00d73 SparseMatrixCSC{Float64,Int64} with 3 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  1.0\\n  [3, 3]  =  1.0\\n\\njulia> nonzeros(A)\\n3-element Array{Float64,1}:\\n 1.0\\n 1.0\\n 1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.rowvals\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.rowvals\",\n    \"category\": \"Function\",\n    \"text\": \"rowvals(A::SparseMatrixCSC)\\n\\nReturn a vector of the row indices of A. Any modifications to the returned vector will mutate A as well. Providing access to how the row indices are stored internally can be useful in conjunction with iterating over structural nonzero values. See also nonzeros and nzrange.\\n\\nExample\\n\\njulia> A = speye(3)\\n3\u00d73 SparseMatrixCSC{Float64,Int64} with 3 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  1.0\\n  [3, 3]  =  1.0\\n\\njulia> rowvals(A)\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.nzrange\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.nzrange\",\n    \"category\": \"Function\",\n    \"text\": \"nzrange(A::SparseMatrixCSC, col::Integer)\\n\\nReturn the range of indices to the structural nonzero values of a sparse matrix column. In conjunction with nonzeros and rowvals, this allows for convenient iterating over a sparse matrix :\\n\\nA = sparse(I,J,V)\\nrows = rowvals(A)\\nvals = nonzeros(A)\\nm, n = size(A)\\nfor i = 1:n\\n   for j in nzrange(A, i)\\n      row = rows[j]\\n      val = vals[j]\\n      # perform sparse wizardry...\\n   end\\nend\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.dropzeros!-Tuple{SparseMatrixCSC,Bool}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.dropzeros!\",\n    \"category\": \"Method\",\n    \"text\": \"dropzeros!(A::SparseMatrixCSC, trim::Bool = true)\\n\\nRemoves stored numerical zeros from A, optionally trimming resulting excess space from A.rowval and A.nzval when trim is true.\\n\\nFor an out-of-place version, see dropzeros. For algorithmic information, see fkeep!.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.dropzeros-Tuple{SparseMatrixCSC,Bool}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.dropzeros\",\n    \"category\": \"Method\",\n    \"text\": \"dropzeros(A::SparseMatrixCSC, trim::Bool = true)\\n\\nGenerates a copy of A and removes stored numerical zeros from that copy, optionally trimming excess space from the result's rowval and nzval arrays when trim is true.\\n\\nFor an in-place version and algorithmic information, see dropzeros!.\\n\\nExample\\n\\njulia> A = sparse([1, 2, 3], [1, 2, 3], [1.0, 0.0, 1.0])\\n3\u00d73 SparseMatrixCSC{Float64,Int64} with 3 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  0.0\\n  [3, 3]  =  1.0\\n\\njulia> dropzeros(A)\\n3\u00d73 SparseMatrixCSC{Float64,Int64} with 2 stored entries:\\n  [1, 1]  =  1.0\\n  [3, 3]  =  1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.dropzeros!-Tuple{SparseVector,Bool}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.dropzeros!\",\n    \"category\": \"Method\",\n    \"text\": \"dropzeros!(x::SparseVector, trim::Bool = true)\\n\\nRemoves stored numerical zeros from x, optionally trimming resulting excess space from x.nzind and x.nzval when trim is true.\\n\\nFor an out-of-place version, see dropzeros. For algorithmic information, see fkeep!.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.dropzeros-Tuple{SparseVector,Bool}\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.dropzeros\",\n    \"category\": \"Method\",\n    \"text\": \"dropzeros(x::SparseVector, trim::Bool = true)\\n\\nGenerates a copy of x and removes numerical zeros from that copy, optionally trimming excess space from the result's nzind and nzval arrays when trim is true.\\n\\nFor an in-place version and algorithmic information, see dropzeros!.\\n\\nExample\\n\\njulia> A = sparsevec([1, 2, 3], [1.0, 0.0, 1.0])\\n3-element SparseVector{Float64,Int64} with 3 stored entries:\\n  [1]  =  1.0\\n  [2]  =  0.0\\n  [3]  =  1.0\\n\\njulia> dropzeros(A)\\n3-element SparseVector{Float64,Int64} with 2 stored entries:\\n  [1]  =  1.0\\n  [3]  =  1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.SparseArrays.permute\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.SparseArrays.permute\",\n    \"category\": \"Function\",\n    \"text\": \"permute{Tv,Ti}(A::SparseMatrixCSC{Tv,Ti}, p::AbstractVector{<:Integer},\\n    q::AbstractVector{<:Integer})\\n\\nBilaterally permute A, returning PAQ (A[p,q]). Column-permutation q's length must match A's column count (length(q) == A.n). Row-permutation p's length must match A's row count (length(p) == A.m).\\n\\nFor expert drivers and additional information, see permute!.\\n\\nExample\\n\\njulia> A = spdiagm([1, 2, 3, 4], 0, 4, 4) + spdiagm([5, 6, 7], 1, 4, 4)\\n4\u00d74 SparseMatrixCSC{Int64,Int64} with 7 stored entries:\\n  [1, 1]  =  1\\n  [1, 2]  =  5\\n  [2, 2]  =  2\\n  [2, 3]  =  6\\n  [3, 3]  =  3\\n  [3, 4]  =  7\\n  [4, 4]  =  4\\n\\njulia> permute(A, [4, 3, 2, 1], [1, 2, 3, 4])\\n4\u00d74 SparseMatrixCSC{Int64,Int64} with 7 stored entries:\\n  [4, 1]  =  1\\n  [3, 2]  =  2\\n  [4, 2]  =  5\\n  [2, 3]  =  3\\n  [3, 3]  =  6\\n  [1, 4]  =  4\\n  [2, 4]  =  7\\n\\njulia> permute(A, [1, 2, 3, 4], [4, 3, 2, 1])\\n4\u00d74 SparseMatrixCSC{Int64,Int64} with 7 stored entries:\\n  [3, 1]  =  7\\n  [4, 1]  =  4\\n  [2, 2]  =  6\\n  [3, 2]  =  3\\n  [1, 3]  =  5\\n  [2, 3]  =  2\\n  [1, 4]  =  1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#Base.permute!-Union{Tuple{SparseMatrixCSC{Tv,Ti},SparseMatrixCSC{Tv,Ti},AbstractArray{Tp,1},AbstractArray{Tq,1}}, Tuple{Ti}, Tuple{Tp}, Tuple{Tq}, Tuple{Tv}} where Tq<:Integer where Tp<:Integer where Ti where Tv\",\n    \"page\": \"Arrays\",\n    \"title\": \"Base.permute!\",\n    \"category\": \"Method\",\n    \"text\": \"permute!{Tv,Ti}(X::SparseMatrixCSC{Tv,Ti}, A::SparseMatrixCSC{Tv,Ti},\\n    p::AbstractVector{<:Integer}, q::AbstractVector{<:Integer}[, C::SparseMatrixCSC{Tv,Ti}])\\n\\nBilaterally permute A, storing result PAQ (A[p,q]) in X. Stores intermediate result (AQ)^T (transpose(A[:,q])) in optional argument C if present. Requires that none of X, A, and, if present, C alias each other; to store result PAQ back into A, use the following method lacking X:\\n\\npermute!{Tv,Ti}(A::SparseMatrixCSC{Tv,Ti}, p::AbstractVector{<:Integer},\\n    q::AbstractVector{<:Integer}[, C::SparseMatrixCSC{Tv,Ti}[, workcolptr::Vector{Ti}]])\\n\\nX's dimensions must match those of A (X.m == A.m and X.n == A.n), and X must have enough storage to accommodate all allocated entries in A (length(X.rowval) >= nnz(A) and length(X.nzval) >= nnz(A)). Column-permutation q's length must match A's column count (length(q) == A.n). Row-permutation p's length must match A's row count (length(p) == A.m).\\n\\nC's dimensions must match those of transpose(A) (C.m == A.n and C.n == A.m), and C must have enough storage to accommodate all allocated entries in A (length(C.rowval) >= nnz(A) and length(C.nzval) >= nnz(A)).\\n\\nFor additional (algorithmic) information, and for versions of these methods that forgo argument checking, see (unexported) parent methods unchecked_noalias_permute! and unchecked_aliasing_permute!.\\n\\nSee also: permute.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/arrays.html#stdlib-sparse-arrays-1\",\n    \"page\": \"Arrays\",\n    \"title\": \"Sparse Vectors and Matrices\",\n    \"category\": \"section\",\n    \"text\": \"Sparse vectors and matrices largely support the same set of operations as their dense counterparts. The following functions are specific to sparse arrays.Base.SparseArrays.SparseVector\\nBase.SparseArrays.SparseMatrixCSC\\nBase.SparseArrays.sparse\\nBase.SparseArrays.sparsevec\\nBase.SparseArrays.issparse\\nBase.full\\nBase.SparseArrays.nnz\\nBase.SparseArrays.spzeros\\nBase.SparseArrays.spones\\nBase.SparseArrays.speye(::Type, ::Integer, ::Integer)\\nBase.SparseArrays.speye(::SparseMatrixCSC)\\nBase.SparseArrays.spdiagm\\nBase.SparseArrays.sprand\\nBase.SparseArrays.sprandn\\nBase.SparseArrays.nonzeros\\nBase.SparseArrays.rowvals\\nBase.SparseArrays.nzrange\\nBase.SparseArrays.dropzeros!(::SparseMatrixCSC, ::Bool)\\nBase.SparseArrays.dropzeros(::SparseMatrixCSC, ::Bool)\\nBase.SparseArrays.dropzeros!(::SparseVector, ::Bool)\\nBase.SparseArrays.dropzeros(::SparseVector, ::Bool)\\nBase.SparseArrays.permute\\nBase.permute!{Tv, Ti, Tp <: Integer, Tq <: Integer}(::SparseMatrixCSC{Tv,Ti}, ::SparseMatrixCSC{Tv,Ti}, ::AbstractArray{Tp,1}, ::AbstractArray{Tq,1})\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Tasks and Parallel Computing\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Tasks-and-Parallel-Computing-1\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Tasks and Parallel Computing\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Core.Task\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Core.Task\",\n    \"category\": \"Type\",\n    \"text\": \"Task(func)\\n\\nCreate a Task (i.e. coroutine) to execute the given function (which must be callable with no arguments). The task exits when this function returns.\\n\\nExample\\n\\njulia> a() = det(rand(1000, 1000));\\n\\njulia> b = Task(a);\\n\\nIn this example, b is a runnable Task that hasn't started yet.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.current_task\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.current_task\",\n    \"category\": \"Function\",\n    \"text\": \"current_task()\\n\\nGet the currently running Task.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.istaskdone\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.istaskdone\",\n    \"category\": \"Function\",\n    \"text\": \"istaskdone(t::Task) -> Bool\\n\\nDetermine whether a task has exited.\\n\\njulia> a2() = det(rand(1000, 1000));\\n\\njulia> b = Task(a2);\\n\\njulia> istaskdone(b)\\nfalse\\n\\njulia> schedule(b);\\n\\njulia> yield();\\n\\njulia> istaskdone(b)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.istaskstarted\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.istaskstarted\",\n    \"category\": \"Function\",\n    \"text\": \"istaskstarted(t::Task) -> Bool\\n\\nDetermine whether a task has started executing.\\n\\njulia> a3() = det(rand(1000, 1000));\\n\\njulia> b = Task(a3);\\n\\njulia> istaskstarted(b)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.yield\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.yield\",\n    \"category\": \"Function\",\n    \"text\": \"yield()\\n\\nSwitch to the scheduler to allow another scheduled task to run. A task that calls this function is still runnable, and will be restarted immediately if there are no other runnable tasks.\\n\\n\\n\\nyield(t::Task, arg = nothing)\\n\\nA fast, unfair-scheduling version of schedule(t, arg); yield() which immediately yields to t before calling the scheduler.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.yieldto\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.yieldto\",\n    \"category\": \"Function\",\n    \"text\": \"yieldto(t::Task, arg = nothing)\\n\\nSwitch to the given task. The first time a task is switched to, the task's function is called with no arguments. On subsequent switches, arg is returned from the task's last call to yieldto. This is a low-level call that only switches tasks, not considering states or scheduling in any way. Its use is discouraged.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.task_local_storage-Tuple{Any}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.task_local_storage\",\n    \"category\": \"Method\",\n    \"text\": \"task_local_storage(key)\\n\\nLook up the value of a key in the current task's task-local storage.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.task_local_storage-Tuple{Any,Any}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.task_local_storage\",\n    \"category\": \"Method\",\n    \"text\": \"task_local_storage(key, value)\\n\\nAssign a value to a key in the current task's task-local storage.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.task_local_storage-Tuple{Function,Any,Any}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.task_local_storage\",\n    \"category\": \"Method\",\n    \"text\": \"task_local_storage(body, key, value)\\n\\nCall the function body with a modified task-local storage, in which value is assigned to key; the previous value of key, or lack thereof, is restored afterwards. Useful for emulating dynamic scoping.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Condition\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Condition\",\n    \"category\": \"Type\",\n    \"text\": \"Condition()\\n\\nCreate an edge-triggered event source that tasks can wait for. Tasks that call wait on a Condition are suspended and queued. Tasks are woken up when notify is later called on the Condition. Edge triggering means that only tasks waiting at the time notify is called can be woken up. For level-triggered notifications, you must keep extra state to keep track of whether a notification has happened. The Channel type does this, and so can be used for level-triggered events.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.notify\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.notify\",\n    \"category\": \"Function\",\n    \"text\": \"notify(condition, val=nothing; all=true, error=false)\\n\\nWake up tasks waiting for a condition, passing them val. If all is true (the default), all waiting tasks are woken, otherwise only one is. If error is true, the passed value is raised as an exception in the woken tasks.\\n\\nReturns the count of tasks woken up. Returns 0 if no tasks are waiting on condition.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.schedule\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.schedule\",\n    \"category\": \"Function\",\n    \"text\": \"schedule(t::Task, [val]; error=false)\\n\\nAdd a Task to the scheduler's queue. This causes the task to run constantly when the system is otherwise idle, unless the task performs a blocking operation such as wait.\\n\\nIf a second argument val is provided, it will be passed to the task (via the return value of yieldto) when it runs again. If error is true, the value is raised as an exception in the woken task.\\n\\njulia> a5() = det(rand(1000, 1000));\\n\\njulia> b = Task(a5);\\n\\njulia> istaskstarted(b)\\nfalse\\n\\njulia> schedule(b);\\n\\njulia> yield();\\n\\njulia> istaskstarted(b)\\ntrue\\n\\njulia> istaskdone(b)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.@schedule\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.@schedule\",\n    \"category\": \"Macro\",\n    \"text\": \"@schedule\\n\\nWrap an expression in a Task and add it to the local machine's scheduler queue. Similar to @async except that an enclosing @sync does NOT wait for tasks started with an @schedule.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.@task\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.@task\",\n    \"category\": \"Macro\",\n    \"text\": \"@task\\n\\nWrap an expression in a Task without executing it, and return the Task. This only creates a task, and does not run it.\\n\\njulia> a1() = det(rand(1000, 1000));\\n\\njulia> b = @task a1();\\n\\njulia> istaskstarted(b)\\nfalse\\n\\njulia> schedule(b);\\n\\njulia> yield();\\n\\njulia> istaskdone(b)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.sleep\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.sleep\",\n    \"category\": \"Function\",\n    \"text\": \"sleep(seconds)\\n\\nBlock the current task for a specified number of seconds. The minimum sleep time is 1 millisecond or input of 0.001.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Channel\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Channel\",\n    \"category\": \"Type\",\n    \"text\": \"Channel{T}(sz::Int)\\n\\nConstructs a Channel with an internal buffer that can hold a maximum of sz objects of type T. put! calls on a full channel block until an object is removed with take!.\\n\\nChannel(0) constructs an unbuffered channel. put! blocks until a matching take! is called. And vice-versa.\\n\\nOther constructors:\\n\\nChannel(Inf): equivalent to Channel{Any}(typemax(Int))\\nChannel(sz): equivalent to Channel{Any}(sz)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.put!-Tuple{Channel,Any}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.put!\",\n    \"category\": \"Method\",\n    \"text\": \"put!(c::Channel, v)\\n\\nAppends an item v to the channel c. Blocks if the channel is full.\\n\\nFor unbuffered channels, blocks until a take! is performed by a different task.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.take!-Tuple{Channel}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.take!\",\n    \"category\": \"Method\",\n    \"text\": \"take!(c::Channel)\\n\\nRemoves and returns a value from a Channel. Blocks until data is available.\\n\\nFor unbuffered channels, blocks until a put! is performed by a different task.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.isready-Tuple{Channel}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.isready\",\n    \"category\": \"Method\",\n    \"text\": \"isready(c::Channel)\\n\\nDetermine whether a Channel has a value stored to it. Returns immediately, does not block.\\n\\nFor unbuffered channels returns true if there are tasks waiting on a put!.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.fetch-Tuple{Channel}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.fetch\",\n    \"category\": \"Method\",\n    \"text\": \"fetch(c::Channel)\\n\\nWaits for and gets the first available item from the channel. Does not remove the item. fetch is unsupported on an unbuffered (0-size) channel.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.close-Tuple{Channel}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.close\",\n    \"category\": \"Method\",\n    \"text\": \"close(c::Channel)\\n\\nCloses a channel. An exception is thrown by:\\n\\nput! on a closed channel.\\ntake! and fetch on an empty, closed channel.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.bind-Tuple{Channel,Task}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.bind\",\n    \"category\": \"Method\",\n    \"text\": \"bind(chnl::Channel, task::Task)\\n\\nAssociates the lifetime of chnl with a task. Channel chnl is automatically closed when the task terminates. Any uncaught exception in the task is propagated to all waiters on chnl.\\n\\nThe chnl object can be explicitly closed independent of task termination. Terminating tasks have no effect on already closed Channel objects.\\n\\nWhen a channel is bound to multiple tasks, the first task to terminate will close the channel. When multiple channels are bound to the same task, termination of the task will close all of the bound channels.\\n\\njulia> c = Channel(0);\\n\\njulia> task = @schedule foreach(i->put!(c, i), 1:4);\\n\\njulia> bind(c,task);\\n\\njulia> for i in c\\n           @show i\\n       end;\\ni = 1\\ni = 2\\ni = 3\\ni = 4\\n\\njulia> isopen(c)\\nfalse\\n\\njulia> c = Channel(0);\\n\\njulia> task = @schedule (put!(c,1);error(\\\"foo\\\"));\\n\\njulia> bind(c,task);\\n\\njulia> take!(c)\\n1\\n\\njulia> put!(c,1);\\nERROR: foo\\nStacktrace:\\n [1] check_channel_state(::Channel{Any}) at ./channels.jl:131\\n [2] put!(::Channel{Any}, ::Int64) at ./channels.jl:261\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.asyncmap\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.asyncmap\",\n    \"category\": \"Function\",\n    \"text\": \"asyncmap(f, c...; ntasks=0, batch_size=nothing)\\n\\nUses multiple concurrent tasks to map f over a collection (or multiple equal length collections). For multiple collection arguments, f is applied elementwise.\\n\\nntasks specifies the number of tasks to run concurrently. Depending on the length of the collections, if ntasks is unspecified, up to 100 tasks will be used for concurrent mapping.\\n\\nntasks can also be specified as a zero-arg function. In this case, the number of tasks to run in parallel is checked before processing every element and a new task started if the value of ntasks_func() is less than the current number of tasks.\\n\\nIf batch_size is specified, the collection is processed in batch mode. f must then be a function that must accept a Vector of argument tuples and must return a vector of results. The input vector will have a length of batch_size or less.\\n\\nThe following examples highlight execution in different tasks by returning the object_id of the tasks in which the mapping function is executed.\\n\\nFirst, with ntasks undefined, each element is processed in a different task.\\n\\njulia> tskoid() = object_id(current_task());\\n\\njulia> asyncmap(x->tskoid(), 1:5)\\n5-element Array{UInt64,1}:\\n 0x6e15e66c75c75853\\n 0x440f8819a1baa682\\n 0x9fb3eeadd0c83985\\n 0xebd3e35fe90d4050\\n 0x29efc93edce2b961\\n\\njulia> length(unique(asyncmap(x->tskoid(), 1:5)))\\n5\\n\\nWith ntasks=2 all elements are processed in 2 tasks.\\n\\njulia> asyncmap(x->tskoid(), 1:5; ntasks=2)\\n5-element Array{UInt64,1}:\\n 0x027ab1680df7ae94\\n 0xa23d2f80cd7cf157\\n 0x027ab1680df7ae94\\n 0xa23d2f80cd7cf157\\n 0x027ab1680df7ae94\\n\\njulia> length(unique(asyncmap(x->tskoid(), 1:5; ntasks=2)))\\n2\\n\\nWith batch_size defined, the mapping function needs to be changed to accept an array of argument tuples and return an array of results. map is used in the modified mapping function to achieve this.\\n\\njulia> batch_func(input) = map(x->string(\\\"args_tuple: \\\", x, \\\", element_val: \\\", x[1], \\\", task: \\\", tskoid()), input)\\nbatch_func (generic function with 1 method)\\n\\njulia> asyncmap(batch_func, 1:5; ntasks=2, batch_size=2)\\n5-element Array{String,1}:\\n \\\"args_tuple: (1,), element_val: 1, task: 9118321258196414413\\\"\\n \\\"args_tuple: (2,), element_val: 2, task: 4904288162898683522\\\"\\n \\\"args_tuple: (3,), element_val: 3, task: 9118321258196414413\\\"\\n \\\"args_tuple: (4,), element_val: 4, task: 4904288162898683522\\\"\\n \\\"args_tuple: (5,), element_val: 5, task: 9118321258196414413\\\"\\n\\nnote: Note\\nCurrently, all tasks in Julia are executed in a single OS thread co-operatively. Consequently, ayncmap is beneficial only when the mapping function involves any I/O - disk, network, remote worker invocation, etc.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.asyncmap!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.asyncmap!\",\n    \"category\": \"Function\",\n    \"text\": \"asyncmap!(f, results, c...; ntasks=0, batch_size=nothing)\\n\\nLike asyncmap(), but stores output in results rather than returning a collection.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Tasks-1\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Tasks\",\n    \"category\": \"section\",\n    \"text\": \"Core.Task\\nBase.current_task\\nBase.istaskdone\\nBase.istaskstarted\\nBase.yield\\nBase.yieldto\\nBase.task_local_storage(::Any)\\nBase.task_local_storage(::Any, ::Any)\\nBase.task_local_storage(::Function, ::Any, ::Any)\\nBase.Condition\\nBase.notify\\nBase.schedule\\nBase.@schedule\\nBase.@task\\nBase.sleep\\nBase.Channel\\nBase.put!(::Channel, ::Any)\\nBase.take!(::Channel)\\nBase.isready(::Channel)\\nBase.fetch(::Channel)\\nBase.close(::Channel)\\nBase.bind(c::Channel, task::Task)\\nBase.asyncmap\\nBase.asyncmap!\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.addprocs\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.addprocs\",\n    \"category\": \"Function\",\n    \"text\": \"addprocs(manager::ClusterManager; kwargs...) -> List of process identifiers\\n\\nLaunches worker processes via the specified cluster manager.\\n\\nFor example, Beowulf clusters are supported via a custom cluster manager implemented in the package ClusterManagers.jl.\\n\\nThe number of seconds a newly launched worker waits for connection establishment from the master can be specified via variable JULIA_WORKER_TIMEOUT in the worker process's environment. Relevant only when using TCP/IP as transport.\\n\\n\\n\\naddprocs(machines; tunnel=false, sshflags=``, max_parallel=10, kwargs...) -> List of process identifiers\\n\\nAdd processes on remote machines via SSH. Requires julia to be installed in the same location on each node, or to be available via a shared file system.\\n\\nmachines is a vector of machine specifications. Workers are started for each specification.\\n\\nA machine specification is either a string machine_spec or a tuple - (machine_spec, count).\\n\\nmachine_spec is a string of the form [user@]host[:port] [bind_addr[:port]]. user defaults to current user, port to the standard ssh port. If [bind_addr[:port]] is specified, other workers will connect to this worker at the specified bind_addr and port.\\n\\ncount is the number of workers to be launched on the specified host. If specified as :auto it will launch as many workers as the number of cores on the specific host.\\n\\nKeyword arguments:\\n\\ntunnel: if true then SSH tunneling will be used to connect to the worker from the master process. Default is false.\\nsshflags: specifies additional ssh options, e.g. sshflags=`-i /home/foo/bar.pem`\\nmax_parallel: specifies the maximum number of workers connected to in parallel at a host. Defaults to 10.\\ndir: specifies the working directory on the workers. Defaults to the host's current directory (as found by pwd())\\nenable_threaded_blas: if true then  BLAS will run on multiple threads in added processes. Default is false.\\nexename: name of the julia executable. Defaults to \\\"$JULIA_HOME/julia\\\" or \\\"$JULIA_HOME/julia-debug\\\" as the case may be.\\nexeflags: additional flags passed to the worker processes.\\ntopology: Specifies how the workers connect to each other. Sending a message between unconnected workers results in an error.\\ntopology=:all_to_all: All processes are connected to each other. The default.\\ntopology=:master_slave: Only the driver process, i.e. pid 1 connects to the workers. The workers do not connect to each other.\\ntopology=:custom: The launch method of the cluster manager specifies the connection topology via fields ident and connect_idents in WorkerConfig. A worker with a cluster manager identity ident will connect to all workers specified in connect_idents.\\n\\nEnvironment variables :\\n\\nIf the master process fails to establish a connection with a newly launched worker within 60.0 seconds, the worker treats it as a fatal situation and terminates. This timeout can be controlled via environment variable JULIA_WORKER_TIMEOUT. The value of JULIA_WORKER_TIMEOUT on the master process specifies the number of seconds a newly launched worker waits for connection establishment.\\n\\n\\n\\naddprocs(; kwargs...) -> List of process identifiers\\n\\nEquivalent to addprocs(Sys.CPU_CORES; kwargs...)\\n\\nNote that workers do not run a .juliarc.jl startup script, nor do they synchronize their global state (such as global variables, new method definitions, and loaded modules) with any of the other running processes.\\n\\n\\n\\naddprocs(np::Integer; restrict=true, kwargs...) -> List of process identifiers\\n\\nLaunches workers using the in-built LocalManager which only launches workers on the local host. This can be used to take advantage of multiple cores. addprocs(4) will add 4 processes on the local machine. If restrict is true, binding is restricted to 127.0.0.1. Keyword args dir, exename, exeflags, topology, and enable_threaded_blas have the same effect as documented for addprocs(machines).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.nprocs\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.nprocs\",\n    \"category\": \"Function\",\n    \"text\": \"nprocs()\\n\\nGet the number of available processes.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.nworkers\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.nworkers\",\n    \"category\": \"Function\",\n    \"text\": \"nworkers()\\n\\nGet the number of available worker processes. This is one less than nprocs(). Equal to nprocs() if nprocs() == 1.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.procs-Tuple{}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.procs\",\n    \"category\": \"Method\",\n    \"text\": \"procs()\\n\\nReturns a list of all process identifiers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.procs-Tuple{Integer}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.procs\",\n    \"category\": \"Method\",\n    \"text\": \"procs(pid::Integer)\\n\\nReturns a list of all process identifiers on the same physical node. Specifically all workers bound to the same ip-address as pid are returned.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.workers\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.workers\",\n    \"category\": \"Function\",\n    \"text\": \"workers()\\n\\nReturns a list of all worker process identifiers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.rmprocs\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.rmprocs\",\n    \"category\": \"Function\",\n    \"text\": \"rmprocs(pids...; waitfor=typemax(Int))\\n\\nRemoves the specified workers. Note that only process 1 can add or remove workers.\\n\\nArgument waitfor specifies how long to wait for the workers to shut down:     - If unspecified, rmprocs will wait until all requested pids are removed.     - An ErrorException is raised if all workers cannot be terminated before       the requested waitfor seconds.     - With a waitfor value of 0, the call returns immediately with the workers       scheduled for removal in a different task. The scheduled Task object is       returned. The user should call wait on the task before invoking any other       parallel calls.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.interrupt\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.interrupt\",\n    \"category\": \"Function\",\n    \"text\": \"interrupt(pids::Integer...)\\n\\nInterrupt the current executing task on the specified workers. This is equivalent to pressing Ctrl-C on the local machine. If no arguments are given, all workers are interrupted.\\n\\n\\n\\ninterrupt(pids::AbstractVector=workers())\\n\\nInterrupt the current executing task on the specified workers. This is equivalent to pressing Ctrl-C on the local machine. If no arguments are given, all workers are interrupted.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.myid\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.myid\",\n    \"category\": \"Function\",\n    \"text\": \"myid()\\n\\nGet the id of the current process.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.pmap\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.pmap\",\n    \"category\": \"Function\",\n    \"text\": \"pmap([::AbstractWorkerPool], f, c...; distributed=true, batch_size=1, on_error=nothing, retry_delays=[]), retry_check=nothing) -> collection\\n\\nTransform collection c by applying f to each element using available workers and tasks.\\n\\nFor multiple collection arguments, apply f elementwise.\\n\\nNote that f must be made available to all worker processes; see Code Availability and Loading Packages for details.\\n\\nIf a worker pool is not specified, all available workers, i.e., the default worker pool is used.\\n\\nBy default, pmap distributes the computation over all specified workers. To use only the local process and distribute over tasks, specify distributed=false. This is equivalent to using asyncmap. For example, pmap(f, c; distributed=false) is equivalent to asyncmap(f,c; ntasks=()->nworkers())\\n\\npmap can also use a mix of processes and tasks via the batch_size argument. For batch sizes greater than 1, the collection is processed in multiple batches, each of length batch_size or less. A batch is sent as a single request to a free worker, where a local asyncmap processes elements from the batch using multiple concurrent tasks.\\n\\nAny error stops pmap from processing the remainder of the collection. To override this behavior you can specify an error handling function via argument on_error which takes in a single argument, i.e., the exception. The function can stop the processing by rethrowing the error, or, to continue, return any value which is then returned inline with the results to the caller.\\n\\nConsider the following two examples. The first one returns the exception object inline, the second a 0 in place of any exception:\\n\\njulia> pmap(x->iseven(x) ? error(\\\"foo\\\") : x, 1:4; on_error=identity)\\n4-element Array{Any,1}:\\n 1\\n  ErrorException(\\\"foo\\\")\\n 3\\n  ErrorException(\\\"foo\\\")\\n\\njulia> pmap(x->iseven(x) ? error(\\\"foo\\\") : x, 1:4; on_error=ex->0)\\n4-element Array{Int64,1}:\\n 1\\n 0\\n 3\\n 0\\n\\nErrors can also be handled by retrying failed computations. Keyword arguments retry_delays and retry_check are passed through to retry as keyword arguments delays and check respectively. If batching is specified, and an entire batch fails, all items in the batch are retried.\\n\\nNote that if both on_error and retry_delays are specified, the on_error hook is called before retrying. If on_error does not throw (or rethrow) an exception, the element will not be retried.\\n\\nExample: On errors, retry f on an element a maximum of 3 times without any delay between retries.\\n\\npmap(f, c; retry_delays = zeros(3))\\n\\nExample: Retry f only if the exception is not of type InexactError, with exponentially increasing delays up to 3 times. Return a NaN in place for all InexactError occurrences.\\n\\npmap(f, c; on_error = e->(isa(e, InexactError) ? NaN : rethrow(e)), retry_delays = ExponentialBackOff(n = 3))\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.RemoteException\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.RemoteException\",\n    \"category\": \"Type\",\n    \"text\": \"RemoteException(captured)\\n\\nExceptions on remote computations are captured and rethrown locally.  A RemoteException wraps the pid of the worker and a captured exception. A CapturedException captures the remote exception and a serializable form of the call stack when the exception was raised.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.Future\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.Future\",\n    \"category\": \"Type\",\n    \"text\": \"Future(pid::Integer=myid())\\n\\nCreate a Future on process pid. The default pid is the current process.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.RemoteChannel-Tuple{Integer}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.RemoteChannel\",\n    \"category\": \"Method\",\n    \"text\": \"RemoteChannel(pid::Integer=myid())\\n\\nMake a reference to a Channel{Any}(1) on process pid. The default pid is the current process.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.RemoteChannel-Tuple{Function,Integer}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.RemoteChannel\",\n    \"category\": \"Method\",\n    \"text\": \"RemoteChannel(f::Function, pid::Integer=myid())\\n\\nCreate references to remote channels of a specific size and type. f() is a function that when executed on pid must return an implementation of an AbstractChannel.\\n\\nFor example, RemoteChannel(()->Channel{Int}(10), pid), will return a reference to a channel of type Int and size 10 on pid.\\n\\nThe default pid is the current process.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.wait\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.wait\",\n    \"category\": \"Function\",\n    \"text\": \"wait([x])\\n\\nBlock the current task until some event occurs, depending on the type of the argument:\\n\\nRemoteChannel : Wait for a value to become available on the specified remote channel.\\nFuture : Wait for a value to become available for the specified future.\\nChannel: Wait for a value to be appended to the channel.\\nCondition: Wait for notify on a condition.\\nProcess: Wait for a process or process chain to exit. The exitcode field of a process can be used to determine success or failure.\\nTask: Wait for a Task to finish, returning its result value. If the task fails with an exception, the exception is propagated (re-thrown in the task that called wait).\\nRawFD: Wait for changes on a file descriptor (see poll_fd for keyword arguments and return code)\\n\\nIf no argument is passed, the task blocks for an undefined period. A task can only be restarted by an explicit call to schedule or yieldto.\\n\\nOften wait is called within a while loop to ensure a waited-for condition is met before proceeding.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.fetch-Tuple{Any}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.fetch\",\n    \"category\": \"Method\",\n    \"text\": \"fetch(x)\\n\\nWaits and fetches a value from x depending on the type of x:\\n\\nFuture: Wait for and get the value of a Future. The fetched value is cached locally. Further calls to fetch on the same reference return the cached value. If the remote value is an exception, throws a RemoteException which captures the remote exception and backtrace.\\nRemoteChannel: Wait for and get the value of a remote reference. Exceptions raised are same as for a Future .\\n\\nDoes not remove the item fetched.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remotecall-Tuple{Any,Integer,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remotecall\",\n    \"category\": \"Method\",\n    \"text\": \"remotecall(f, id::Integer, args...; kwargs...) -> Future\\n\\nCall a function f asynchronously on the given arguments on the specified process. Returns a Future. Keyword arguments, if any, are passed through to f.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remotecall_wait-Tuple{Any,Integer,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remotecall_wait\",\n    \"category\": \"Method\",\n    \"text\": \"remotecall_wait(f, id::Integer, args...; kwargs...)\\n\\nPerform a faster wait(remotecall(...)) in one message on the Worker specified by worker id id. Keyword arguments, if any, are passed through to f.\\n\\nSee also wait and remotecall.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remotecall_fetch-Tuple{Any,Integer,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remotecall_fetch\",\n    \"category\": \"Method\",\n    \"text\": \"remotecall_fetch(f, id::Integer, args...; kwargs...)\\n\\nPerform fetch(remotecall(...)) in one message. Keyword arguments, if any, are passed through to f. Any remote exceptions are captured in a RemoteException and thrown.\\n\\nSee also fetch and remotecall.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remote_do-Tuple{Any,Integer,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remote_do\",\n    \"category\": \"Method\",\n    \"text\": \"remote_do(f, id::Integer, args...; kwargs...) -> nothing\\n\\nExecutes f on worker id asynchronously. Unlike remotecall, it does not store the result of computation, nor is there a way to wait for its completion.\\n\\nA successful invocation indicates that the request has been accepted for execution on the remote node.\\n\\nWhile consecutive remotecalls to the same worker are serialized in the order they are invoked, the order of executions on the remote worker is undetermined. For example, remote_do(f1, 2); remotecall(f2, 2); remote_do(f3, 2) will serialize the call to f1, followed by f2 and f3 in that order. However, it is not guaranteed that f1 is executed before f3 on worker 2.\\n\\nAny exceptions thrown by f are printed to STDERR on the remote worker.\\n\\nKeyword arguments, if any, are passed through to f.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.put!-Tuple{RemoteChannel,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.put!\",\n    \"category\": \"Method\",\n    \"text\": \"put!(rr::RemoteChannel, args...)\\n\\nStore a set of values to the RemoteChannel. If the channel is full, blocks until space is available. Returns its first argument.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.put!-Tuple{Future,Any}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.put!\",\n    \"category\": \"Method\",\n    \"text\": \"put!(rr::Future, v)\\n\\nStore a value to a Future rr. Futures are write-once remote references. A put! on an already set Future throws an Exception. All asynchronous remote calls return Futures and set the value to the return value of the call upon completion.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.take!-Tuple{RemoteChannel,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.take!\",\n    \"category\": \"Method\",\n    \"text\": \"take!(rr::RemoteChannel, args...)\\n\\nFetch value(s) from a RemoteChannel rr, removing the value(s) in the processs.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.isready-Tuple{RemoteChannel,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.isready\",\n    \"category\": \"Method\",\n    \"text\": \"isready(rr::RemoteChannel, args...)\\n\\nDetermine whether a RemoteChannel has a value stored to it. Note that this function can cause race conditions, since by the time you receive its result it may no longer be true. However, it can be safely used on a Future since they are assigned only once.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.isready-Tuple{Future}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.isready\",\n    \"category\": \"Method\",\n    \"text\": \"isready(rr::Future)\\n\\nDetermine whether a Future has a value stored to it.\\n\\nIf the argument Future is owned by a different node, this call will block to wait for the answer. It is recommended to wait for rr in a separate task instead or to use a local Channel as a proxy:\\n\\nc = Channel(1)\\n@async put!(c, remotecall_fetch(long_computation, p))\\nisready(c)  # will not block\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.WorkerPool\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.WorkerPool\",\n    \"category\": \"Type\",\n    \"text\": \"WorkerPool(workers::Vector{Int})\\n\\nCreate a WorkerPool from a vector of worker ids.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.CachingPool\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.CachingPool\",\n    \"category\": \"Type\",\n    \"text\": \"CachingPool(workers::Vector{Int})\\n\\nAn implementation of an AbstractWorkerPool. remote, remotecall_fetch, pmap (and other remote calls which execute functions remotely) benefit from caching the serialized/deserialized functions on the worker nodes, especially closures (which may capture large amounts of data).\\n\\nThe remote cache is maintained for the lifetime of the returned CachingPool object. To clear the cache earlier, use clear!(pool).\\n\\nFor global variables, only the bindings are captured in a closure, not the data. let blocks can be used to capture global data.\\n\\nFor example:\\n\\nconst foo=rand(10^8);\\nwp=CachingPool(workers())\\nlet foo=foo\\n    pmap(wp, i->sum(foo)+i, 1:100);\\nend\\n\\nThe above would transfer foo only once to each worker.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.default_worker_pool\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.default_worker_pool\",\n    \"category\": \"Function\",\n    \"text\": \"default_worker_pool()\\n\\nWorkerPool containing idle workers() - used by remote(f) and pmap (by default).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.clear!-Tuple{CachingPool}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.clear!\",\n    \"category\": \"Method\",\n    \"text\": \"clear!(pool::CachingPool) -> pool\\n\\nRemoves all cached functions from all participating workers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remote\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remote\",\n    \"category\": \"Function\",\n    \"text\": \"remote([::AbstractWorkerPool], f) -> Function\\n\\nReturns an anonymous function that executes function f on an available worker using remotecall_fetch.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remotecall-Tuple{Any,Base.Distributed.AbstractWorkerPool,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remotecall\",\n    \"category\": \"Method\",\n    \"text\": \"remotecall(f, pool::AbstractWorkerPool, args...; kwargs...) -> Future\\n\\nWorkerPool variant of remotecall(f, pid, ....). Waits for and takes a free worker from pool and performs a remotecall on it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remotecall_wait-Tuple{Any,Base.Distributed.AbstractWorkerPool,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remotecall_wait\",\n    \"category\": \"Method\",\n    \"text\": \"remotecall_wait(f, pool::AbstractWorkerPool, args...; kwargs...) -> Future\\n\\nWorkerPool variant of remotecall_wait(f, pid, ....). Waits for and takes a free worker from pool and performs a remotecall_wait on it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remotecall_fetch-Tuple{Any,Base.Distributed.AbstractWorkerPool,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remotecall_fetch\",\n    \"category\": \"Method\",\n    \"text\": \"remotecall_fetch(f, pool::AbstractWorkerPool, args...; kwargs...) -> result\\n\\nWorkerPool variant of remotecall_fetch(f, pid, ....). Waits for and takes a free worker from pool and performs a remotecall_fetch on it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remote_do-Tuple{Any,Base.Distributed.AbstractWorkerPool,Vararg{Any,N} where N}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remote_do\",\n    \"category\": \"Method\",\n    \"text\": \"remote_do(f, pool::AbstractWorkerPool, args...; kwargs...) -> nothing\\n\\nWorkerPool variant of remote_do(f, pid, ....). Waits for and takes a free worker from pool and performs a remote_do on it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.timedwait\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.timedwait\",\n    \"category\": \"Function\",\n    \"text\": \"timedwait(testcb::Function, secs::Float64; pollint::Float64=0.1)\\n\\nWaits until testcb returns true or for secs seconds, whichever is earlier. testcb is polled every pollint seconds.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.@spawn\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.@spawn\",\n    \"category\": \"Macro\",\n    \"text\": \"@spawn\\n\\nCreates a closure around an expression and runs it on an automatically-chosen process, returning a Future to the result.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.@spawnat\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.@spawnat\",\n    \"category\": \"Macro\",\n    \"text\": \"@spawnat\\n\\nAccepts two arguments, p and an expression. A closure is created around the expression and run asynchronously on process p. Returns a Future to the result.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.@fetch\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.@fetch\",\n    \"category\": \"Macro\",\n    \"text\": \"@fetch\\n\\nEquivalent to fetch(@spawn expr). See fetch and @spawn.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.@fetchfrom\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.@fetchfrom\",\n    \"category\": \"Macro\",\n    \"text\": \"@fetchfrom\\n\\nEquivalent to fetch(@spawnat p expr). See fetch and @spawnat.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.@async\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.@async\",\n    \"category\": \"Macro\",\n    \"text\": \"@async\\n\\nLike @schedule, @async wraps an expression in a Task and adds it to the local machine's scheduler queue. Additionally it adds the task to the set of items that the nearest enclosing @sync waits for.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.@sync\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.@sync\",\n    \"category\": \"Macro\",\n    \"text\": \"@sync\\n\\nWait until all dynamically-enclosed uses of @async, @spawn, @spawnat and @parallel are complete. All exceptions thrown by enclosed async operations are collected and thrown as a CompositeException.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.@parallel\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.@parallel\",\n    \"category\": \"Macro\",\n    \"text\": \"@parallel\\n\\nA parallel for loop of the form :\\n\\n@parallel [reducer] for var = range\\n    body\\nend\\n\\nThe specified range is partitioned and locally executed across all workers. In case an optional reducer function is specified, @parallel performs local reductions on each worker with a final reduction on the calling process.\\n\\nNote that without a reducer function, @parallel executes asynchronously, i.e. it spawns independent tasks on all available workers and returns immediately without waiting for completion. To wait for completion, prefix the call with @sync, like :\\n\\n@sync @parallel for var = range\\n    body\\nend\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.@everywhere\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.@everywhere\",\n    \"category\": \"Macro\",\n    \"text\": \"@everywhere expr\\n\\nExecute an expression under Main everywhere. Equivalent to calling eval(Main, expr) on all processes. Errors on any of the processes are collected into a CompositeException and thrown. For example :\\n\\n@everywhere bar=1\\n\\nwill define Main.bar on all processes.\\n\\nUnlike @spawn and @spawnat, @everywhere does not capture any local variables. Prefixing @everywhere with @eval allows us to broadcast local variables using interpolation :\\n\\nfoo = 1\\n@eval @everywhere bar=$foo\\n\\nThe expression is evaluated under Main irrespective of where @everywhere is called from. For example :\\n\\nmodule FooBar\\n    foo() = @everywhere bar()=myid()\\nend\\nFooBar.foo()\\n\\nwill result in Main.bar being defined on all processes and not FooBar.bar.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.clear!-Tuple{Any,Any}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.clear!\",\n    \"category\": \"Method\",\n    \"text\": \"clear!(syms, pids=workers(); mod=Main)\\n\\nClears global bindings in modules by initializing them to nothing. syms should be of type Symbol or a collection of Symbols . pids and mod identify the processes and the module in which global variables are to be reinitialized. Only those names found to be defined under mod are cleared.\\n\\nAn exception is raised if a global constant is requested to be cleared.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.remoteref_id\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.remoteref_id\",\n    \"category\": \"Function\",\n    \"text\": \"Base.remoteref_id(r::AbstractRemoteRef) -> RRID\\n\\nFutures and RemoteChannels are identified by fields:\\n\\nwhere - refers to the node where the underlying object/storage referred to by the reference actually exists.\\nwhence - refers to the node the remote reference was created from. Note that this is different from the node where the underlying object referred to actually exists. For example calling RemoteChannel(2) from the master process would result in a where value of 2 and a whence value of 1.\\nid is unique across all references created from the worker specified by whence.\\n\\nTaken together,  whence and id uniquely identify a reference across all workers.\\n\\nBase.remoteref_id is a low-level API which returns a Base.RRID object that wraps whence and id values of a remote reference.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.channel_from_id\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.channel_from_id\",\n    \"category\": \"Function\",\n    \"text\": \"Base.channel_from_id(id) -> c\\n\\nA low-level API which returns the backing AbstractChannel for an id returned by remoteref_id. The call is valid only on the node where the backing channel exists.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.worker_id_from_socket\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.worker_id_from_socket\",\n    \"category\": \"Function\",\n    \"text\": \"Base.worker_id_from_socket(s) -> pid\\n\\nA low-level API which given a IO connection or a Worker, returns the pid of the worker it is connected to. This is useful when writing custom serialize methods for a type, which optimizes the data written out depending on the receiving process id.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.cluster_cookie-Tuple{}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.cluster_cookie\",\n    \"category\": \"Method\",\n    \"text\": \"Base.cluster_cookie() -> cookie\\n\\nReturns the cluster cookie.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.cluster_cookie-Tuple{Any}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.cluster_cookie\",\n    \"category\": \"Method\",\n    \"text\": \"Base.cluster_cookie(cookie) -> cookie\\n\\nSets the passed cookie as the cluster cookie, then returns it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#General-Parallel-Computing-Support-1\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"General Parallel Computing Support\",\n    \"category\": \"section\",\n    \"text\": \"Base.addprocs\\nBase.nprocs\\nBase.nworkers\\nBase.procs()\\nBase.procs(::Integer)\\nBase.workers\\nBase.rmprocs\\nBase.interrupt\\nBase.myid\\nBase.pmap\\nBase.RemoteException\\nBase.Future\\nBase.RemoteChannel(::Integer)\\nBase.RemoteChannel(::Function, ::Integer)\\nBase.wait\\nBase.fetch(::Any)\\nBase.remotecall(::Any, ::Integer, ::Any...)\\nBase.remotecall_wait(::Any, ::Integer, ::Any...)\\nBase.remotecall_fetch(::Any, ::Integer, ::Any...)\\nBase.remote_do(::Any, ::Integer, ::Any...)\\nBase.put!(::RemoteChannel, ::Any...)\\nBase.put!(::Future, ::Any)\\nBase.take!(::RemoteChannel, ::Any...)\\nBase.isready(::RemoteChannel, ::Any...)\\nBase.isready(::Future)\\nBase.WorkerPool\\nBase.CachingPool\\nBase.default_worker_pool\\nBase.clear!(::CachingPool)\\nBase.remote\\nBase.remotecall(::Any, ::Base.Distributed.AbstractWorkerPool, ::Any...)\\nBase.remotecall_wait(::Any, ::Base.Distributed.AbstractWorkerPool, ::Any...)\\nBase.remotecall_fetch(::Any, ::Base.Distributed.AbstractWorkerPool, ::Any...)\\nBase.remote_do(::Any, ::Base.Distributed.AbstractWorkerPool, ::Any...)\\nBase.timedwait\\nBase.@spawn\\nBase.@spawnat\\nBase.@fetch\\nBase.@fetchfrom\\nBase.@async\\nBase.@sync\\nBase.@parallel\\nBase.@everywhere\\nBase.clear!(::Any, ::Any; ::Any)\\nBase.remoteref_id\\nBase.channel_from_id\\nBase.worker_id_from_socket\\nBase.cluster_cookie()\\nBase.cluster_cookie(::Any)\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.SharedArray\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.SharedArray\",\n    \"category\": \"Type\",\n    \"text\": \"SharedArray{T}(dims::NTuple; init=false, pids=Int[])\\nSharedArray{T,N}(...)\\n\\nConstruct a SharedArray of a bits type T and size dims across the processes specified by pids - all of which have to be on the same host.  If N is specified by calling SharedArray{T,N}(dims), then N must match the length of dims.\\n\\nIf pids is left unspecified, the shared array will be mapped across all processes on the current host, including the master. But, localindexes and indexpids will only refer to worker processes. This facilitates work distribution code to use workers for actual computation with the master process acting as a driver.\\n\\nIf an init function of the type initfn(S::SharedArray) is specified, it is called on all the participating workers.\\n\\nThe shared array is valid as long as a reference to the SharedArray object exists on the node which created the mapping.\\n\\nSharedArray{T}(filename::AbstractString, dims::NTuple, [offset=0]; mode=nothing, init=false, pids=Int[])\\nSharedArray{T,N}(...)\\n\\nConstruct a SharedArray backed by the file filename, with element type T (must be a bits type) and size dims, across the processes specified by pids - all of which have to be on the same host. This file is mmapped into the host memory, with the following consequences:\\n\\nThe array data must be represented in binary format (e.g., an ASCII format like CSV cannot be supported)\\nAny changes you make to the array values (e.g., A[3] = 0) will also change the values on disk\\n\\nIf pids is left unspecified, the shared array will be mapped across all processes on the current host, including the master. But, localindexes and indexpids will only refer to worker processes. This facilitates work distribution code to use workers for actual computation with the master process acting as a driver.\\n\\nmode must be one of \\\"r\\\", \\\"r+\\\", \\\"w+\\\", or \\\"a+\\\", and defaults to \\\"r+\\\" if the file specified by filename already exists, or \\\"w+\\\" if not. If an init function of the type initfn(S::SharedArray) is specified, it is called on all the participating workers. You cannot specify an init function if the file is not writable.\\n\\noffset allows you to skip the specified number of bytes at the beginning of the file.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.procs-Tuple{SharedArray}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.procs\",\n    \"category\": \"Method\",\n    \"text\": \"procs(S::SharedArray)\\n\\nGet the vector of processes mapping the shared array.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.sdata\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.sdata\",\n    \"category\": \"Function\",\n    \"text\": \"sdata(S::SharedArray)\\n\\nReturns the actual Array object backing S.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.indexpids\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.indexpids\",\n    \"category\": \"Function\",\n    \"text\": \"indexpids(S::SharedArray)\\n\\nReturns the current worker's index in the list of workers mapping the SharedArray (i.e. in the same list returned by procs(S)), or 0 if the SharedArray is not mapped locally.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.localindexes\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.localindexes\",\n    \"category\": \"Function\",\n    \"text\": \"localindexes(S::SharedArray)\\n\\nReturns a range describing the \\\"default\\\" indexes to be handled by the current process.  This range should be interpreted in the sense of linear indexing, i.e., as a sub-range of 1:length(S).  In multi-process contexts, returns an empty range in the parent process (or any process for which indexpids returns 0).\\n\\nIt's worth emphasizing that localindexes exists purely as a convenience, and you can partition work on the array among workers any way you wish. For a SharedArray, all indexes should be equally fast for each worker process.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Shared-Arrays-1\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Shared Arrays\",\n    \"category\": \"section\",\n    \"text\": \"Base.SharedArray\\nBase.procs(::SharedArray)\\nBase.sdata\\nBase.indexpids\\nBase.localindexes\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.threadid\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.threadid\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.threadid()\\n\\nGet the ID number of the current thread of execution. The master thread has ID 1.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.nthreads\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.nthreads\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.nthreads()\\n\\nGet the number of threads available to the Julia process. This is the inclusive upper bound on threadid().\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.@threads\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.@threads\",\n    \"category\": \"Macro\",\n    \"text\": \"Threads.@threads\\n\\nA macro to parallelize a for-loop to run with multiple threads. This spawns nthreads() number of threads, splits the iteration space amongst them, and iterates in parallel. A barrier is placed at the end of the loop which waits for all the threads to finish execution, and the loop returns.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.Atomic\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.Atomic\",\n    \"category\": \"Type\",\n    \"text\": \"Threads.Atomic{T}\\n\\nHolds a reference to an object of type T, ensuring that it is only accessed atomically, i.e. in a thread-safe manner.\\n\\nOnly certain \\\"simple\\\" types can be used atomically, namely the primitive integer and float-point types. These are Int8...Int128, UInt8...UInt128, and Float16...Float64.\\n\\nNew atomic objects can be created from a non-atomic values; if none is specified, the atomic object is initialized with zero.\\n\\nAtomic objects can be accessed using the [] notation:\\n\\njulia> x = Threads.Atomic{Int}(3)\\nBase.Threads.Atomic{Int64}(3)\\n\\njulia> x[] = 1\\n1\\n\\njulia> x[]\\n1\\n\\nAtomic operations use an atomic_ prefix, such as atomic_add!, atomic_xchg!, etc.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_cas!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_cas!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_cas!{T}(x::Atomic{T}, cmp::T, newval::T)\\n\\nAtomically compare-and-set x\\n\\nAtomically compares the value in x with cmp. If equal, write newval to x. Otherwise, leaves x unmodified. Returns the old value in x. By comparing the returned value to cmp (via ===) one knows whether x was modified and now holds the new value newval.\\n\\nFor further details, see LLVM's cmpxchg instruction.\\n\\nThis function can be used to implement transactional semantics. Before the transaction, one records the value in x. After the transaction, the new value is stored only if x has not been modified in the mean time.\\n\\njulia> x = Threads.Atomic{Int}(3)\\nBase.Threads.Atomic{Int64}(3)\\n\\njulia> Threads.atomic_cas!(x, 4, 2);\\n\\njulia> x\\nBase.Threads.Atomic{Int64}(3)\\n\\njulia> Threads.atomic_cas!(x, 3, 2);\\n\\njulia> x\\nBase.Threads.Atomic{Int64}(2)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_xchg!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_xchg!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_xchg!{T}(x::Atomic{T}, newval::T)\\n\\nAtomically exchange the value in x\\n\\nAtomically exchanges the value in x with newval. Returns the old value.\\n\\nFor further details, see LLVM's atomicrmw xchg instruction.\\n\\njulia> x = Threads.Atomic{Int}(3)\\nBase.Threads.Atomic{Int64}(3)\\n\\njulia> Threads.atomic_xchg!(x, 2)\\n3\\n\\njulia> x[]\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_add!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_add!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_add!{T}(x::Atomic{T}, val::T)\\n\\nAtomically add val to x\\n\\nPerforms x[] += val atomically. Returns the old value.\\n\\nFor further details, see LLVM's atomicrmw add instruction.\\n\\njulia> x = Threads.Atomic{Int}(3)\\nBase.Threads.Atomic{Int64}(3)\\n\\njulia> Threads.atomic_add!(x, 2)\\n3\\n\\njulia> x[]\\n5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_sub!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_sub!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_sub!{T}(x::Atomic{T}, val::T)\\n\\nAtomically subtract val from x\\n\\nPerforms x[] -= val atomically. Returns the old value.\\n\\nFor further details, see LLVM's atomicrmw sub instruction.\\n\\njulia> x = Threads.Atomic{Int}(3)\\nBase.Threads.Atomic{Int64}(3)\\n\\njulia> Threads.atomic_sub!(x, 2)\\n3\\n\\njulia> x[]\\n1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_and!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_and!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_and!{T}(x::Atomic{T}, val::T)\\n\\nAtomically bitwise-and x with val\\n\\nPerforms x[] &= val atomically. Returns the old value.\\n\\nFor further details, see LLVM's atomicrmw and instruction.\\n\\njulia> x = Threads.Atomic{Int}(3)\\nBase.Threads.Atomic{Int64}(3)\\n\\njulia> Threads.atomic_and!(x, 2)\\n3\\n\\njulia> x[]\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_nand!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_nand!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_nand!{T}(x::Atomic{T}, val::T)\\n\\nAtomically bitwise-nand (not-and) x with val\\n\\nPerforms x[] = ~(x[] & val) atomically. Returns the old value.\\n\\nFor further details, see LLVM's atomicrmw nand instruction.\\n\\njulia> x = Threads.Atomic{Int}(3)\\nBase.Threads.Atomic{Int64}(3)\\n\\njulia> Threads.atomic_nand!(x, 2)\\n3\\n\\njulia> x[]\\n-3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_or!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_or!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_or!{T}(x::Atomic{T}, val::T)\\n\\nAtomically bitwise-or x with val\\n\\nPerforms x[] |= val atomically. Returns the old value.\\n\\nFor further details, see LLVM's atomicrmw or instruction.\\n\\njulia> x = Threads.Atomic{Int}(5)\\nBase.Threads.Atomic{Int64}(5)\\n\\njulia> Threads.atomic_or!(x, 7)\\n5\\n\\njulia> x[]\\n7\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_xor!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_xor!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_xor!{T}(x::Atomic{T}, val::T)\\n\\nAtomically bitwise-xor (exclusive-or) x with val\\n\\nPerforms x[] $= val atomically. Returns the old value.\\n\\nFor further details, see LLVM's atomicrmw xor instruction.\\n\\njulia> x = Threads.Atomic{Int}(5)\\nBase.Threads.Atomic{Int64}(5)\\n\\njulia> Threads.atomic_xor!(x, 7)\\n5\\n\\njulia> x[]\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_max!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_max!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_max!{T}(x::Atomic{T}, val::T)\\n\\nAtomically store the maximum of x and val in x\\n\\nPerforms x[] = max(x[], val) atomically. Returns the old value.\\n\\nFor further details, see LLVM's atomicrmw max instruction.\\n\\njulia> x = Threads.Atomic{Int}(5)\\nBase.Threads.Atomic{Int64}(5)\\n\\njulia> Threads.atomic_max!(x, 7)\\n5\\n\\njulia> x[]\\n7\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_min!\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_min!\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_min!{T}(x::Atomic{T}, val::T)\\n\\nAtomically store the minimum of x and val in x\\n\\nPerforms x[] = min(x[], val) atomically. Returns the old value.\\n\\nFor further details, see LLVM's atomicrmw min instruction.\\n\\njulia> x = Threads.Atomic{Int}(7)\\nBase.Threads.Atomic{Int64}(7)\\n\\njulia> Threads.atomic_min!(x, 5)\\n7\\n\\njulia> x[]\\n5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.atomic_fence\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.atomic_fence\",\n    \"category\": \"Function\",\n    \"text\": \"Threads.atomic_fence()\\n\\nInsert a sequential-consistency memory fence\\n\\nInserts a memory fence with sequentially-consistent ordering semantics. There are algorithms where this is needed, i.e. where an acquire/release ordering is insufficient.\\n\\nThis is likely a very expensive operation. Given that all other atomic operations in Julia already have acquire/release semantics, explicit fences should not be necessary in most cases.\\n\\nFor further details, see LLVM's fence instruction.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Multi-Threading-1\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Multi-Threading\",\n    \"category\": \"section\",\n    \"text\": \"This experimental interface supports Julia's multi-threading capabilities. Types and functions described here might (and likely will) change in the future.Base.Threads.threadid\\nBase.Threads.nthreads\\nBase.Threads.@threads\\nBase.Threads.Atomic\\nBase.Threads.atomic_cas!\\nBase.Threads.atomic_xchg!\\nBase.Threads.atomic_add!\\nBase.Threads.atomic_sub!\\nBase.Threads.atomic_and!\\nBase.Threads.atomic_nand!\\nBase.Threads.atomic_or!\\nBase.Threads.atomic_xor!\\nBase.Threads.atomic_max!\\nBase.Threads.atomic_min!\\nBase.Threads.atomic_fence\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.@threadcall\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.@threadcall\",\n    \"category\": \"Macro\",\n    \"text\": \"@threadcall((cfunc, clib), rettype, (argtypes...), argvals...)\\n\\nThe @threadcall macro is called in the same way as ccall but does the work in a different thread. This is useful when you want to call a blocking C function without causing the main julia thread to become blocked. Concurrency is limited by size of the libuv thread pool, which defaults to 4 threads but can be increased by setting the UV_THREADPOOL_SIZE environment variable and restarting the julia process.\\n\\nNote that the called function should never call back into Julia.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#ccall-using-a-threadpool-(Experimental)-1\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"ccall using a threadpool (Experimental)\",\n    \"category\": \"section\",\n    \"text\": \"Base.@threadcall\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.AbstractLock\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.AbstractLock\",\n    \"category\": \"Type\",\n    \"text\": \"AbstractLock\\n\\nAbstract supertype describing types that implement the thread-safe synchronization primitives: lock, trylock, unlock, and islocked\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.lock\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.lock\",\n    \"category\": \"Function\",\n    \"text\": \"lock(the_lock)\\n\\nAcquires the lock when it becomes available. If the lock is already locked by a different task/thread, it waits for it to become available.\\n\\nEach lock must be matched by an unlock.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.unlock\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.unlock\",\n    \"category\": \"Function\",\n    \"text\": \"unlock(the_lock)\\n\\nReleases ownership of the lock.\\n\\nIf this is a recursive lock which has been acquired before, it just decrements an internal counter and returns immediately.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.trylock\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.trylock\",\n    \"category\": \"Function\",\n    \"text\": \"trylock(the_lock) -> Success (Boolean)\\n\\nAcquires the lock if it is available, returning true if successful. If the lock is already locked by a different task/thread, returns false.\\n\\nEach successful trylock must be matched by an unlock.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.islocked\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.islocked\",\n    \"category\": \"Function\",\n    \"text\": \"islocked(the_lock) -> Status (Boolean)\\n\\nCheck whether the lock is held by any task/thread. This should not be used for synchronization (see instead trylock).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.ReentrantLock\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.ReentrantLock\",\n    \"category\": \"Type\",\n    \"text\": \"ReentrantLock()\\n\\nCreates a reentrant lock for synchronizing Tasks. The same task can acquire the lock as many times as required. Each lock must be matched with an unlock.\\n\\nThis lock is NOT threadsafe. See Threads.Mutex for a threadsafe lock.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.Mutex\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.Mutex\",\n    \"category\": \"Type\",\n    \"text\": \"Mutex()\\n\\nThese are standard system mutexes for locking critical sections of logic.\\n\\nOn Windows, this is a critical section object, on pthreads, this is a pthread_mutex_t.\\n\\nSee also SpinLock for a lighter-weight lock.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.SpinLock\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.SpinLock\",\n    \"category\": \"Type\",\n    \"text\": \"SpinLock()\\n\\nCreates a non-reentrant lock. Recursive use will result in a deadlock. Each lock must be matched with an unlock.\\n\\nTest-and-test-and-set spin locks are quickest up to about 30ish contending threads. If you have more contention than that, perhaps a lock is the wrong way to synchronize.\\n\\nSee also RecursiveSpinLock for a version that permits recursion.\\n\\nSee also Mutex for a more efficient version on one core or if the lock may be held for a considerable length of time.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Threads.RecursiveSpinLock\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Threads.RecursiveSpinLock\",\n    \"category\": \"Type\",\n    \"text\": \"RecursiveSpinLock()\\n\\nCreates a reentrant lock. The same thread can acquire the lock as many times as required. Each lock must be matched with an unlock.\\n\\nSee also SpinLock for a slightly faster version.\\n\\nSee also Mutex for a more efficient version on one core or if the lock may be held for a considerable length of time.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Semaphore\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Semaphore\",\n    \"category\": \"Type\",\n    \"text\": \"Semaphore(sem_size)\\n\\nCreates a counting semaphore that allows at most sem_size acquires to be in use at any time. Each acquire must be mached with a release.\\n\\nThis construct is NOT threadsafe.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.acquire\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.acquire\",\n    \"category\": \"Function\",\n    \"text\": \"acquire(s::Semaphore)\\n\\nWait for one of the sem_size permits to be available, blocking until one can be acquired.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.release\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.release\",\n    \"category\": \"Function\",\n    \"text\": \"release(s::Semaphore)\\n\\nReturn one permit to the pool, possibly allowing another task to acquire it and resume execution.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Synchronization-Primitives-1\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Synchronization Primitives\",\n    \"category\": \"section\",\n    \"text\": \"Base.Threads.AbstractLock\\nBase.lock\\nBase.unlock\\nBase.trylock\\nBase.islocked\\nBase.ReentrantLock\\nBase.Threads.Mutex\\nBase.Threads.SpinLock\\nBase.Threads.RecursiveSpinLock\\nBase.Semaphore\\nBase.acquire\\nBase.release\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.launch\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.launch\",\n    \"category\": \"Function\",\n    \"text\": \"launch(manager::ClusterManager, params::Dict, launched::Array, launch_ntfy::Condition)\\n\\nImplemented by cluster managers. For every Julia worker launched by this function, it should append a WorkerConfig entry to launched and notify launch_ntfy. The function MUST exit once all workers, requested by manager have been launched. params is a dictionary of all keyword arguments addprocs was called with.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.manage\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.manage\",\n    \"category\": \"Function\",\n    \"text\": \"manage(manager::ClusterManager, id::Integer, config::WorkerConfig. op::Symbol)\\n\\nImplemented by cluster managers. It is called on the master process, during a worker's lifetime, with appropriate op values:\\n\\nwith :register/:deregister when a worker is added / removed from the Julia worker pool.\\nwith :interrupt when interrupt(workers) is called. The ClusterManager should signal the appropriate worker with an interrupt signal.\\nwith :finalize for cleanup purposes.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.kill-Tuple{ClusterManager,Int64,WorkerConfig}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.kill\",\n    \"category\": \"Method\",\n    \"text\": \"kill(manager::ClusterManager, pid::Int, config::WorkerConfig)\\n\\nImplemented by cluster managers. It is called on the master process, by rmprocs. It should cause the remote worker specified by pid to exit. kill(manager::ClusterManager.....) executes a remote exit() on pid.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.init_worker\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.init_worker\",\n    \"category\": \"Function\",\n    \"text\": \"init_worker(cookie::AbstractString, manager::ClusterManager=DefaultClusterManager())\\n\\nCalled by cluster managers implementing custom transports. It initializes a newly launched process as a worker. Command line argument --worker has the effect of initializing a process as a worker using TCP/IP sockets for transport. cookie is a cluster_cookie.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.connect-Tuple{ClusterManager,Int64,WorkerConfig}\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.connect\",\n    \"category\": \"Method\",\n    \"text\": \"connect(manager::ClusterManager, pid::Int, config::WorkerConfig) -> (instrm::IO, outstrm::IO)\\n\\nImplemented by cluster managers using custom transports. It should establish a logical connection to worker with id pid, specified by config and return a pair of IO objects. Messages from pid to current process will be read off instrm, while messages to be sent to pid will be written to outstrm. The custom transport implementation must ensure that messages are delivered and received completely and in order. connect(manager::ClusterManager.....) sets up TCP/IP socket connections in-between workers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Base.Distributed.process_messages\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Base.Distributed.process_messages\",\n    \"category\": \"Function\",\n    \"text\": \"Base.process_messages(r_stream::IO, w_stream::IO, incoming::Bool=true)\\n\\nCalled by cluster managers using custom transports. It should be called when the custom transport implementation receives the first message from a remote worker. The custom transport must manage a logical connection to the remote worker and provide two IO objects, one for incoming messages and the other for messages addressed to the remote worker. If incoming is true, the remote peer initiated the connection. Whichever of the pair initiates the connection sends the cluster cookie and its Julia version number to perform the authentication handshake.\\n\\nSee also cluster_cookie.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/parallel.html#Cluster-Manager-Interface-1\",\n    \"page\": \"Tasks and Parallel Computing\",\n    \"title\": \"Cluster Manager Interface\",\n    \"category\": \"section\",\n    \"text\": \"This interface provides a mechanism to launch and manage Julia workers on different cluster environments. There are two types of managers present in Base: LocalManager, for launching additional workers on the same host, and SSHManager, for launching on remote hosts via ssh. TCP/IP sockets are used to connect and transport messages between processes. It is possible for Cluster Managers to provide a different transport.Base.launch\\nBase.manage\\nBase.kill(::ClusterManager, ::Int, ::WorkerConfig)\\nBase.init_worker\\nBase.connect(::ClusterManager, ::Int, ::WorkerConfig)\\nBase.process_messages\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Linear Algebra\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Linear-Algebra-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Linear Algebra\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.:*-Tuple{AbstractArray,AbstractArray}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.:*\",\n    \"category\": \"Method\",\n    \"text\": \"*(x, y...)\\n\\nMultiplication operator. x*y*z*... calls this function with all arguments, i.e. *(x, y, z, ...).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.:\\\\-Tuple{AbstractArray,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.:\\\\\",\n    \"category\": \"Method\",\n    \"text\": \"\\\\(x, y)\\n\\nLeft division operator: multiplication of y by the inverse of x on the left. Gives floating-point results for integer arguments.\\n\\njulia> 3 \\\\ 6\\n2.0\\n\\njulia> inv(3) * 6\\n2.0\\n\\njulia> A = [1 2; 3 4]; x = [5, 6];\\n\\njulia> A \\\\ x\\n2-element Array{Float64,1}:\\n -4.0\\n  4.5\\n\\njulia> inv(A) * x\\n2-element Array{Float64,1}:\\n -4.0\\n  4.5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.dot\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.dot\",\n    \"category\": \"Function\",\n    \"text\": \"dot(n, X, incx, Y, incy)\\n\\nDot product of two vectors consisting of n elements of array X with stride incx and n elements of array Y with stride incy.\\n\\nExample:\\n\\njulia> dot(10, ones(10), 1, ones(20), 2)\\n10.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.vecdot\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.vecdot\",\n    \"category\": \"Function\",\n    \"text\": \"vecdot(x, y)\\n\\nFor any iterable containers x and y (including arrays of any dimension) of numbers (or any element type for which dot is defined), compute the Euclidean dot product (the sum of dot(x[i],y[i])) as if they were vectors.\\n\\nExamples\\n\\njulia> vecdot(1:5, 2:6)\\n70\\n\\njulia> x = fill(2., (5,5));\\n\\njulia> y = fill(3., (5,5));\\n\\njulia> vecdot(x, y)\\n150.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.cross\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.cross\",\n    \"category\": \"Function\",\n    \"text\": \"cross(x, y)\\n\u00d7(x,y)\\n\\nCompute the cross product of two 3-vectors.\\n\\nExample\\n\\njulia> a = [0;1;0]\\n3-element Array{Int64,1}:\\n 0\\n 1\\n 0\\n\\njulia> b = [0;0;1]\\n3-element Array{Int64,1}:\\n 0\\n 0\\n 1\\n\\njulia> cross(a,b)\\n3-element Array{Int64,1}:\\n 1\\n 0\\n 0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.factorize\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.factorize\",\n    \"category\": \"Function\",\n    \"text\": \"factorize(A)\\n\\nCompute a convenient factorization of A, based upon the type of the input matrix. factorize checks A to see if it is symmetric/triangular/etc. if A is passed as a generic matrix. factorize checks every element of A to verify/rule out each property. It will short-circuit as soon as it can rule out symmetry/triangular structure. The return value can be reused for efficient solving of multiple systems. For example: A=factorize(A); x=A\\\\b; y=A\\\\C.\\n\\nProperties of A type of factorization\\nPositive-definite Cholesky (see cholfact)\\nDense Symmetric/Hermitian Bunch-Kaufman (see bkfact)\\nSparse Symmetric/Hermitian LDLt (see ldltfact)\\nTriangular Triangular\\nDiagonal Diagonal\\nBidiagonal Bidiagonal\\nTridiagonal LU (see lufact)\\nSymmetric real tridiagonal LDLt (see ldltfact)\\nGeneral square LU (see lufact)\\nGeneral non-square QR (see qrfact)\\n\\nIf factorize is called on a Hermitian positive-definite matrix, for instance, then factorize will return a Cholesky factorization.\\n\\nExample\\n\\njulia> A = Array(Bidiagonal(ones(5, 5), true))\\n5\u00d75 Array{Float64,2}:\\n 1.0  1.0  0.0  0.0  0.0\\n 0.0  1.0  1.0  0.0  0.0\\n 0.0  0.0  1.0  1.0  0.0\\n 0.0  0.0  0.0  1.0  1.0\\n 0.0  0.0  0.0  0.0  1.0\\n\\njulia> factorize(A) # factorize will check to see that A is already factorized\\n5\u00d75 Bidiagonal{Float64}:\\n 1.0  1.0   \u22c5    \u22c5    \u22c5\\n  \u22c5   1.0  1.0   \u22c5    \u22c5\\n  \u22c5    \u22c5   1.0  1.0   \u22c5\\n  \u22c5    \u22c5    \u22c5   1.0  1.0\\n  \u22c5    \u22c5    \u22c5    \u22c5   1.0\\n\\nThis returns a 5\u00d75 Bidiagonal{Float64}, which can now be passed to other linear algebra functions (e.g. eigensolvers) which will use specialized methods for Bidiagonal types.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.Diagonal\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.Diagonal\",\n    \"category\": \"Type\",\n    \"text\": \"Diagonal(A::AbstractMatrix)\\n\\nConstructs a matrix from the diagonal of A.\\n\\nExample\\n\\njulia> A = [1 2 3; 4 5 6; 7 8 9]\\n3\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n 7  8  9\\n\\njulia> Diagonal(A)\\n3\u00d73 Diagonal{Int64}:\\n 1  \u22c5  \u22c5\\n \u22c5  5  \u22c5\\n \u22c5  \u22c5  9\\n\\n\\n\\nDiagonal(V::AbstractVector)\\n\\nConstructs a matrix with V as its diagonal.\\n\\nExample\\n\\njulia> V = [1; 2]\\n2-element Array{Int64,1}:\\n 1\\n 2\\n\\njulia> Diagonal(V)\\n2\u00d72 Diagonal{Int64}:\\n 1  \u22c5\\n \u22c5  2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.Bidiagonal\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.Bidiagonal\",\n    \"category\": \"Type\",\n    \"text\": \"Bidiagonal(dv, ev, isupper::Bool)\\n\\nConstructs an upper (isupper=true) or lower (isupper=false) bidiagonal matrix using the given diagonal (dv) and off-diagonal (ev) vectors.  The result is of type Bidiagonal and provides efficient specialized linear solvers, but may be converted into a regular matrix with convert(Array, _) (or Array(_) for short). ev's length must be one less than the length of dv.\\n\\nExample\\n\\njulia> dv = [1; 2; 3; 4]\\n4-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n\\njulia> ev = [7; 8; 9]\\n3-element Array{Int64,1}:\\n 7\\n 8\\n 9\\n\\njulia> Bu = Bidiagonal(dv, ev, true) # ev is on the first superdiagonal\\n4\u00d74 Bidiagonal{Int64}:\\n 1  7  \u22c5  \u22c5\\n \u22c5  2  8  \u22c5\\n \u22c5  \u22c5  3  9\\n \u22c5  \u22c5  \u22c5  4\\n\\njulia> Bl = Bidiagonal(dv, ev, false) # ev is on the first subdiagonal\\n4\u00d74 Bidiagonal{Int64}:\\n 1  \u22c5  \u22c5  \u22c5\\n 7  2  \u22c5  \u22c5\\n \u22c5  8  3  \u22c5\\n \u22c5  \u22c5  9  4\\n\\n\\n\\nBidiagonal(dv, ev, uplo::Char)\\n\\nConstructs an upper (uplo='U') or lower (uplo='L') bidiagonal matrix using the given diagonal (dv) and off-diagonal (ev) vectors.  The result is of type Bidiagonal and provides efficient specialized linear solvers, but may be converted into a regular matrix with convert(Array, _) (or Array(_) for short). ev's length must be one less than the length of dv.\\n\\nExample\\n\\njulia> dv = [1; 2; 3; 4]\\n4-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n\\njulia> ev = [7; 8; 9]\\n3-element Array{Int64,1}:\\n 7\\n 8\\n 9\\n\\njulia> Bu = Bidiagonal(dv, ev, 'U') #e is on the first superdiagonal\\n4\u00d74 Bidiagonal{Int64}:\\n 1  7  \u22c5  \u22c5\\n \u22c5  2  8  \u22c5\\n \u22c5  \u22c5  3  9\\n \u22c5  \u22c5  \u22c5  4\\n\\njulia> Bl = Bidiagonal(dv, ev, 'L') #e is on the first subdiagonal\\n4\u00d74 Bidiagonal{Int64}:\\n 1  \u22c5  \u22c5  \u22c5\\n 7  2  \u22c5  \u22c5\\n \u22c5  8  3  \u22c5\\n \u22c5  \u22c5  9  4\\n\\n\\n\\nBidiagonal(A, isupper::Bool)\\n\\nConstruct a Bidiagonal matrix from the main diagonal of A and its first super- (if isupper=true) or sub-diagonal (if isupper=false).\\n\\nExample\\n\\njulia> A = [1 1 1 1; 2 2 2 2; 3 3 3 3; 4 4 4 4]\\n4\u00d74 Array{Int64,2}:\\n 1  1  1  1\\n 2  2  2  2\\n 3  3  3  3\\n 4  4  4  4\\n\\njulia> Bidiagonal(A, true) #contains the main diagonal and first superdiagonal of A\\n4\u00d74 Bidiagonal{Int64}:\\n 1  1  \u22c5  \u22c5\\n \u22c5  2  2  \u22c5\\n \u22c5  \u22c5  3  3\\n \u22c5  \u22c5  \u22c5  4\\n\\njulia> Bidiagonal(A, false) #contains the main diagonal and first subdiagonal of A\\n4\u00d74 Bidiagonal{Int64}:\\n 1  \u22c5  \u22c5  \u22c5\\n 2  2  \u22c5  \u22c5\\n \u22c5  3  3  \u22c5\\n \u22c5  \u22c5  4  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.SymTridiagonal\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.SymTridiagonal\",\n    \"category\": \"Type\",\n    \"text\": \"SymTridiagonal(dv, ev)\\n\\nConstruct a symmetric tridiagonal matrix from the diagonal and first sub/super-diagonal, respectively. The result is of type SymTridiagonal and provides efficient specialized eigensolvers, but may be converted into a regular matrix with convert(Array, _) (or Array(_) for short).\\n\\nExample\\n\\njulia> dv = [1; 2; 3; 4]\\n4-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n\\njulia> ev = [7; 8; 9]\\n3-element Array{Int64,1}:\\n 7\\n 8\\n 9\\n\\njulia> SymTridiagonal(dv, ev)\\n4\u00d74 SymTridiagonal{Int64}:\\n 1  7  \u22c5  \u22c5\\n 7  2  8  \u22c5\\n \u22c5  8  3  9\\n \u22c5  \u22c5  9  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.Tridiagonal\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.Tridiagonal\",\n    \"category\": \"Type\",\n    \"text\": \"Tridiagonal(dl, d, du)\\n\\nConstruct a tridiagonal matrix from the first subdiagonal, diagonal, and first superdiagonal, respectively.  The result is of type Tridiagonal and provides efficient specialized linear solvers, but may be converted into a regular matrix with convert(Array, _) (or Array(_) for short). The lengths of dl and du must be one less than the length of d.\\n\\nExample\\n\\njulia> dl = [1; 2; 3]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> du = [4; 5; 6]\\n3-element Array{Int64,1}:\\n 4\\n 5\\n 6\\n\\njulia> d = [7; 8; 9; 0]\\n4-element Array{Int64,1}:\\n 7\\n 8\\n 9\\n 0\\n\\njulia> Tridiagonal(dl, d, du)\\n4\u00d74 Tridiagonal{Int64}:\\n 7  4  \u22c5  \u22c5\\n 1  8  5  \u22c5\\n \u22c5  2  9  6\\n \u22c5  \u22c5  3  0\\n\\n\\n\\nTridiagonal(A)\\n\\nreturns a Tridiagonal array based on (abstract) matrix A, using its first lower diagonal, main diagonal, and first upper diagonal.\\n\\nExample\\n\\njulia> A = [1 2 3 4; 1 2 3 4; 1 2 3 4; 1 2 3 4]\\n4\u00d74 Array{Int64,2}:\\n 1  2  3  4\\n 1  2  3  4\\n 1  2  3  4\\n 1  2  3  4\\n\\njulia> Tridiagonal(A)\\n4\u00d74 Tridiagonal{Int64}:\\n 1  2  \u22c5  \u22c5\\n 1  2  3  \u22c5\\n \u22c5  2  3  4\\n \u22c5  \u22c5  3  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.Symmetric\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.Symmetric\",\n    \"category\": \"Type\",\n    \"text\": \"Symmetric(A, uplo=:U)\\n\\nConstruct a Symmetric view of the upper (if uplo = :U) or lower (if uplo = :L) triangle of the matrix A.\\n\\nExample\\n\\njulia> A = [1 0 2 0 3; 0 4 0 5 0; 6 0 7 0 8; 0 9 0 1 0; 2 0 3 0 4]\\n5\u00d75 Array{Int64,2}:\\n 1  0  2  0  3\\n 0  4  0  5  0\\n 6  0  7  0  8\\n 0  9  0  1  0\\n 2  0  3  0  4\\n\\njulia> Supper = Symmetric(A)\\n5\u00d75 Symmetric{Int64,Array{Int64,2}}:\\n 1  0  2  0  3\\n 0  4  0  5  0\\n 2  0  7  0  8\\n 0  5  0  1  0\\n 3  0  8  0  4\\n\\njulia> Slower = Symmetric(A, :L)\\n5\u00d75 Symmetric{Int64,Array{Int64,2}}:\\n 1  0  6  0  2\\n 0  4  0  9  0\\n 6  0  7  0  3\\n 0  9  0  1  0\\n 2  0  3  0  4\\n\\nNote that Supper will not be equal to Slower unless A is itself symmetric (e.g. if A == A.').\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.Hermitian\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.Hermitian\",\n    \"category\": \"Type\",\n    \"text\": \"Hermitian(A, uplo=:U)\\n\\nConstruct a Hermitian view of the upper (if uplo = :U) or lower (if uplo = :L) triangle of the matrix A.\\n\\nExample\\n\\njulia> A = [1 0 2+2im 0 3-3im; 0 4 0 5 0; 6-6im 0 7 0 8+8im; 0 9 0 1 0; 2+2im 0 3-3im 0 4];\\n\\njulia> Hupper = Hermitian(A)\\n5\u00d75 Hermitian{Complex{Int64},Array{Complex{Int64},2}}:\\n 1+0im  0+0im  2+2im  0+0im  3-3im\\n 0+0im  4+0im  0+0im  5+0im  0+0im\\n 2-2im  0+0im  7+0im  0+0im  8+8im\\n 0+0im  5+0im  0+0im  1+0im  0+0im\\n 3+3im  0+0im  8-8im  0+0im  4+0im\\n\\njulia> Hlower = Hermitian(A, :L)\\n5\u00d75 Hermitian{Complex{Int64},Array{Complex{Int64},2}}:\\n 1+0im  0+0im  6+6im  0+0im  2-2im\\n 0+0im  4+0im  0+0im  9+0im  0+0im\\n 6-6im  0+0im  7+0im  0+0im  3+3im\\n 0+0im  9+0im  0+0im  1+0im  0+0im\\n 2+2im  0+0im  3-3im  0+0im  4+0im\\n\\nNote that Hupper will not be equal to Hlower unless A is itself Hermitian (e.g. if A == A').\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LowerTriangular\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LowerTriangular\",\n    \"category\": \"Type\",\n    \"text\": \"LowerTriangular(A::AbstractMatrix)\\n\\nConstruct a LowerTriangular view of the the matrix A.\\n\\nExample\\n\\njulia> A = [1.0 2.0 3.0; 4.0 5.0 6.0; 7.0 8.0 9.0]\\n3\u00d73 Array{Float64,2}:\\n 1.0  2.0  3.0\\n 4.0  5.0  6.0\\n 7.0  8.0  9.0\\n\\njulia> LowerTriangular(A)\\n3\u00d73 LowerTriangular{Float64,Array{Float64,2}}:\\n 1.0   \u22c5    \u22c5\\n 4.0  5.0   \u22c5\\n 7.0  8.0  9.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.UpperTriangular\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.UpperTriangular\",\n    \"category\": \"Type\",\n    \"text\": \"UpperTriangular(A::AbstractMatrix)\\n\\nConstruct an UpperTriangular view of the the matrix A.\\n\\nExample\\n\\njulia> A = [1.0 2.0 3.0; 4.0 5.0 6.0; 7.0 8.0 9.0]\\n3\u00d73 Array{Float64,2}:\\n 1.0  2.0  3.0\\n 4.0  5.0  6.0\\n 7.0  8.0  9.0\\n\\njulia> UpperTriangular(A)\\n3\u00d73 UpperTriangular{Float64,Array{Float64,2}}:\\n 1.0  2.0  3.0\\n  \u22c5   5.0  6.0\\n  \u22c5    \u22c5   9.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lu\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lu\",\n    \"category\": \"Function\",\n    \"text\": \"lu(A, pivot=Val{true}) -> L, U, p\\n\\nCompute the LU factorization of A, such that A[p,:] = L*U. By default, pivoting is used. This can be overridden by passing Val{false} for the second argument.\\n\\nSee also lufact.\\n\\nExample\\n\\njulia> A = [4. 3.; 6. 3.]\\n2\u00d72 Array{Float64,2}:\\n 4.0  3.0\\n 6.0  3.0\\n\\njulia> L, U, p = lu(A)\\n([1.0 0.0; 0.666667 1.0], [6.0 3.0; 0.0 1.0], [2, 1])\\n\\njulia> A[p, :] == L * U\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lufact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lufact\",\n    \"category\": \"Function\",\n    \"text\": \"lufact(A [,pivot=Val{true}]) -> F::LU\\n\\nCompute the LU factorization of A.\\n\\nIn most cases, if A is a subtype S of AbstractMatrix{T} with an element type T supporting +, -, * and /, the return type is LU{T,S{T}}. If pivoting is chosen (default) the element type should also support abs and <.\\n\\nThe individual components of the factorization F can be accessed by indexing:\\n\\nComponent Description\\nF[:L] L (lower triangular) part of LU\\nF[:U] U (upper triangular) part of LU\\nF[:p] (right) permutation Vector\\nF[:P] (right) permutation Matrix\\n\\nThe relationship between F and A is\\n\\nF[:L]*F[:U] == A[F[:p], :]\\n\\nF further supports the following functions:\\n\\nSupported function LU LU{T,Tridiagonal{T}}\\n/ \u2713 \\n\\\\ \u2713 \u2713\\ncond \u2713 \\ninv \u2713 \u2713\\ndet \u2713 \u2713\\nlogdet \u2713 \u2713\\nlogabsdet \u2713 \u2713\\nsize \u2713 \u2713\\n\\nExample\\n\\njulia> A = [4 3; 6 3]\\n2\u00d72 Array{Int64,2}:\\n 4  3\\n 6  3\\n\\njulia> F = lufact(A)\\nBase.LinAlg.LU{Float64,Array{Float64,2}} with factors L and U:\\n[1.0 0.0; 1.5 1.0]\\n[4.0 3.0; 0.0 -1.5]\\n\\njulia> F[:L] * F[:U] == A[F[:p], :]\\ntrue\\n\\n\\n\\nlufact(A::SparseMatrixCSC) -> F::UmfpackLU\\n\\nCompute the LU factorization of a sparse matrix A.\\n\\nFor sparse A with real or complex element type, the return type of F is UmfpackLU{Tv, Ti}, with Tv = Float64 or Complex128 respectively and Ti is an integer type (Int32 or Int64).\\n\\nThe individual components of the factorization F can be accessed by indexing:\\n\\nComponent Description\\nF[:L] L (lower triangular) part of LU\\nF[:U] U (upper triangular) part of LU\\nF[:p] right permutation Vector\\nF[:q] left permutation Vector\\nF[:Rs] Vector of scaling factors\\nF[:(:)] (L,U,p,q,Rs) components\\n\\nThe relation between F and A is\\n\\nF[:L]*F[:U] == (F[:Rs] .* A)[F[:p], F[:q]]\\n\\nF further supports the following functions:\\n\\n\\\\\\ncond\\ndet\\n\\nnote: Note\\nlufact(A::SparseMatrixCSC) uses the UMFPACK library that is part of SuiteSparse. As this library only supports sparse matrices with Float64 or Complex128 elements, lufact converts A into a copy that is of type SparseMatrixCSC{Float64} or SparseMatrixCSC{Complex128} as appropriate.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lufact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lufact!\",\n    \"category\": \"Function\",\n    \"text\": \"lufact!(A, pivot=Val{true}) -> LU\\n\\nlufact! is the same as lufact, but saves space by overwriting the input A, instead of creating a copy. An InexactError exception is thrown if the factorization produces a number not representable by the element type of A, e.g. for integer types.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.chol\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.chol\",\n    \"category\": \"Function\",\n    \"text\": \"chol(A) -> U\\n\\nCompute the Cholesky factorization of a positive definite matrix A and return the UpperTriangular matrix U such that A = U'U.\\n\\nExample\\n\\njulia> A = [1. 2.; 2. 50.]\\n2\u00d72 Array{Float64,2}:\\n 1.0   2.0\\n 2.0  50.0\\n\\njulia> U = chol(A)\\n2\u00d72 UpperTriangular{Float64,Array{Float64,2}}:\\n 1.0  2.0\\n  \u22c5   6.78233\\n\\njulia> U'U\\n2\u00d72 Array{Float64,2}:\\n 1.0   2.0\\n 2.0  50.0\\n\\n\\n\\nchol(x::Number) -> y\\n\\nCompute the square root of a non-negative number x.\\n\\nExample\\n\\njulia> chol(16)\\n4.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.cholfact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.cholfact\",\n    \"category\": \"Function\",\n    \"text\": \"cholfact(A; shift = 0.0, perm = Int[]) -> CHOLMOD.Factor\\n\\nCompute the Cholesky factorization of a sparse positive definite matrix A. A must be a SparseMatrixCSC or a Symmetric/Hermitian view of a SparseMatrixCSC. Note that even if A doesn't have the type tag, it must still be symmetric or Hermitian. A fill-reducing permutation is used. F = cholfact(A) is most frequently used to solve systems of equations with F\\\\b, but also the methods diag, det, and logdet are defined for F. You can also extract individual factors from F, using F[:L]. However, since pivoting is on by default, the factorization is internally represented as A == P'*L*L'*P with a permutation matrix P; using just L without accounting for P will give incorrect answers. To include the effects of permutation, it's typically preferable to extract \\\"combined\\\" factors like PtL = F[:PtL] (the equivalent of P'*L) and LtP = F[:UP] (the equivalent of L'*P).\\n\\nSetting the optional shift keyword argument computes the factorization of A+shift*I instead of A. If the perm argument is nonempty, it should be a permutation of 1:size(A,1) giving the ordering to use (instead of CHOLMOD's default AMD ordering).\\n\\nnote: Note\\nThis method uses the CHOLMOD library from SuiteSparse, which only supports doubles or complex doubles. Input matrices not of those element types will be converted to SparseMatrixCSC{Float64} or SparseMatrixCSC{Complex128} as appropriate.Many other functions from CHOLMOD are wrapped but not exported from the Base.SparseArrays.CHOLMOD module.\\n\\n\\n\\ncholfact(A, [uplo::Symbol,] Val{false}) -> Cholesky\\n\\nCompute the Cholesky factorization of a dense symmetric positive definite matrix A and return a Cholesky factorization. The matrix A can either be a Symmetric or Hermitian StridedMatrix or a perfectly symmetric or Hermitian StridedMatrix. In the latter case, the optional argument uplo may be :L for using the lower part or :U for the upper part of A. The default is to use :U. The triangular Cholesky factor can be obtained from the factorization F with: F[:L] and F[:U]. The following functions are available for Cholesky objects: size, \\\\, inv, and det. A PosDefException exception is thrown in case the matrix is not positive definite.\\n\\nExample\\n\\njulia> A = [4. 12. -16.; 12. 37. -43.; -16. -43. 98.]\\n3\u00d73 Array{Float64,2}:\\n   4.0   12.0  -16.0\\n  12.0   37.0  -43.0\\n -16.0  -43.0   98.0\\n\\njulia> C = cholfact(A)\\nBase.LinAlg.Cholesky{Float64,Array{Float64,2}} with factor:\\n[2.0 6.0 -8.0; 0.0 1.0 5.0; 0.0 0.0 3.0]\\n\\njulia> C[:U]\\n3\u00d73 UpperTriangular{Float64,Array{Float64,2}}:\\n 2.0  6.0  -8.0\\n  \u22c5   1.0   5.0\\n  \u22c5    \u22c5    3.0\\n\\njulia> C[:L]\\n3\u00d73 LowerTriangular{Float64,Array{Float64,2}}:\\n  2.0   \u22c5    \u22c5\\n  6.0  1.0   \u22c5\\n -8.0  5.0  3.0\\n\\njulia> C[:L] * C[:U] == A\\ntrue\\n\\n\\n\\ncholfact(A, [uplo::Symbol,] Val{true}; tol = 0.0) -> CholeskyPivoted\\n\\nCompute the pivoted Cholesky factorization of a dense symmetric positive semi-definite matrix A and return a CholeskyPivoted factorization. The matrix A can either be a Symmetric or Hermitian StridedMatrix or a perfectly symmetric or Hermitian StridedMatrix. In the latter case, the optional argument uplo may be :L for using the lower part or :U for the upper part of A. The default is to use :U. The triangular Cholesky factor can be obtained from the factorization F with: F[:L] and F[:U]. The following functions are available for PivotedCholesky objects: size, \\\\, inv, det, and rank. The argument tol determines the tolerance for determining the rank. For negative values, the tolerance is the machine precision.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.cholfact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.cholfact!\",\n    \"category\": \"Function\",\n    \"text\": \"cholfact!(F::Factor, A; shift = 0.0) -> CHOLMOD.Factor\\n\\nCompute the Cholesky (LL) factorization of A, reusing the symbolic factorization F. A must be a SparseMatrixCSC or a Symmetric/ Hermitian view of a SparseMatrixCSC. Note that even if A doesn't have the type tag, it must still be symmetric or Hermitian.\\n\\nSee also cholfact.\\n\\nnote: Note\\nThis method uses the CHOLMOD library from SuiteSparse, which only supports doubles or complex doubles. Input matrices not of those element types will be converted to SparseMatrixCSC{Float64} or SparseMatrixCSC{Complex128} as appropriate.\\n\\n\\n\\ncholfact!(A, [uplo::Symbol,] Val{false}) -> Cholesky\\n\\nThe same as cholfact, but saves space by overwriting the input A, instead of creating a copy. An InexactError exception is thrown if the factorization produces a number not representable by the element type of A, e.g. for integer types.\\n\\nExample\\n\\njulia> A = [1 2; 2 50]\\n2\u00d72 Array{Int64,2}:\\n 1   2\\n 2  50\\n\\njulia> cholfact!(A)\\nERROR: InexactError()\\n\\n\\n\\ncholfact!(A, [uplo::Symbol,] Val{true}; tol = 0.0) -> CholeskyPivoted\\n\\nThe same as cholfact, but saves space by overwriting the input A, instead of creating a copy. An InexactError exception is thrown if the factorization produces a number not representable by the element type of A, e.g. for integer types.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lowrankupdate\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lowrankupdate\",\n    \"category\": \"Function\",\n    \"text\": \"lowrankupdate(C::Cholesky, v::StridedVector) -> CC::Cholesky\\n\\nUpdate a Cholesky factorization C with the vector v. If A = C[:U]'C[:U] then CC = cholfact(C[:U]'C[:U] + v*v') but the computation of CC only uses O(n^2) operations.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lowrankdowndate\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lowrankdowndate\",\n    \"category\": \"Function\",\n    \"text\": \"lowrankdowndate(C::Cholesky, v::StridedVector) -> CC::Cholesky\\n\\nDowndate a Cholesky factorization C with the vector v. If A = C[:U]'C[:U] then CC = cholfact(C[:U]'C[:U] - v*v') but the computation of CC only uses O(n^2) operations.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lowrankupdate!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lowrankupdate!\",\n    \"category\": \"Function\",\n    \"text\": \"lowrankupdate!(C::Cholesky, v::StridedVector) -> CC::Cholesky\\n\\nUpdate a Cholesky factorization C with the vector v. If A = C[:U]'C[:U] then CC = cholfact(C[:U]'C[:U] + v*v') but the computation of CC only uses O(n^2) operations. The input factorization C is updated in place such that on exit C == CC. The vector v is destroyed during the computation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lowrankdowndate!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lowrankdowndate!\",\n    \"category\": \"Function\",\n    \"text\": \"lowrankdowndate!(C::Cholesky, v::StridedVector) -> CC::Cholesky\\n\\nDowndate a Cholesky factorization C with the vector v. If A = C[:U]'C[:U] then CC = cholfact(C[:U]'C[:U] - v*v') but the computation of CC only uses O(n^2) operations. The input factorization C is updated in place such that on exit C == CC. The vector v is destroyed during the computation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.ldltfact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.ldltfact\",\n    \"category\": \"Function\",\n    \"text\": \"ldltfact(A; shift = 0.0, perm=Int[]) -> CHOLMOD.Factor\\n\\nCompute the LDL factorization of a sparse matrix A. A must be a SparseMatrixCSC or a Symmetric/Hermitian view of a SparseMatrixCSC. Note that even if A doesn't have the type tag, it must still be symmetric or Hermitian. A fill-reducing permutation is used. F = ldltfact(A) is most frequently used to solve systems of equations A*x = b with F\\\\b. The returned factorization object F also supports the methods diag, det, logdet, and inv. You can extract individual factors from F using F[:L]. However, since pivoting is on by default, the factorization is internally represented as A == P'*L*D*L'*P with a permutation matrix P; using just L without accounting for P will give incorrect answers. To include the effects of permutation, it is typically preferable to extract \\\"combined\\\" factors like PtL = F[:PtL] (the equivalent of P'*L) and LtP = F[:UP] (the equivalent of L'*P). The complete list of supported factors is :L, :PtL, :D, :UP, :U, :LD, :DU, :PtLD, :DUP.\\n\\nSetting the optional shift keyword argument computes the factorization of A+shift*I instead of A. If the perm argument is nonempty, it should be a permutation of 1:size(A,1) giving the ordering to use (instead of CHOLMOD's default AMD ordering).\\n\\nnote: Note\\nThis method uses the CHOLMOD library from SuiteSparse, which only supports doubles or complex doubles. Input matrices not of those element types will be converted to SparseMatrixCSC{Float64} or SparseMatrixCSC{Complex128} as appropriate.Many other functions from CHOLMOD are wrapped but not exported from the Base.SparseArrays.CHOLMOD module.\\n\\n\\n\\nldltfact(S::SymTridiagonal) -> LDLt\\n\\nCompute an LDLt factorization of a real symmetric tridiagonal matrix such that A = L*Diagonal(d)*L' where L is a unit lower triangular matrix and d is a vector. The main use of an LDLt factorization F = ldltfact(A) is to solve the linear system of equations Ax = b with F\\\\b.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.ldltfact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.ldltfact!\",\n    \"category\": \"Function\",\n    \"text\": \"ldltfact!(F::Factor, A; shift = 0.0) -> CHOLMOD.Factor\\n\\nCompute the LDL factorization of A, reusing the symbolic factorization F. A must be a SparseMatrixCSC or a Symmetric/Hermitian view of a SparseMatrixCSC. Note that even if A doesn't have the type tag, it must still be symmetric or Hermitian.\\n\\nSee also ldltfact.\\n\\nnote: Note\\nThis method uses the CHOLMOD library from SuiteSparse, which only supports doubles or complex doubles. Input matrices not of those element types will be converted to SparseMatrixCSC{Float64} or SparseMatrixCSC{Complex128} as appropriate.\\n\\n\\n\\nldltfact!(S::SymTridiagonal) -> LDLt\\n\\nSame as ldltfact, but saves space by overwriting the input A, instead of creating a copy.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.qr\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.qr\",\n    \"category\": \"Function\",\n    \"text\": \"qr(A, pivot=Val{false}; thin::Bool=true) -> Q, R, [p]\\n\\nCompute the (pivoted) QR factorization of A such that either A = Q*R or A[:,p] = Q*R. Also see qrfact. The default is to compute a thin factorization. Note that R is not extended with zeros when the full Q is requested.\\n\\n\\n\\nqr(v::AbstractVector) -> w, r\\n\\nComputes the polar decomposition of a vector. Returns w, a unit vector in the direction of v, and r, the norm of v.\\n\\nSee also normalize, normalize!, and LinAlg.qr!.\\n\\nExample\\n\\njulia> v = [1; 2]\\n2-element Array{Int64,1}:\\n 1\\n 2\\n\\njulia> w, r = qr(v)\\n([0.447214, 0.894427], 2.23606797749979)\\n\\njulia> w*r == v\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.qr!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.qr!\",\n    \"category\": \"Function\",\n    \"text\": \"LinAlg.qr!(v::AbstractVector) -> w, r\\n\\nComputes the polar decomposition of a vector. Instead of returning a new vector as qr(v::AbstractVector), this function mutates the input vector v in place. Returns w, a unit vector in the direction of v (this is a mutation of v), and r, the norm of v.\\n\\nSee also normalize, normalize!, and qr.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.qrfact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.qrfact\",\n    \"category\": \"Function\",\n    \"text\": \"qrfact(A) -> SPQR.Factorization\\n\\nCompute the QR factorization of a sparse matrix A. A fill-reducing permutation is used. The main application of this type is to solve least squares problems with \\\\. The function calls the C library SPQR and a few additional functions from the library are wrapped but not exported.\\n\\n\\n\\nqrfact(A, pivot=Val{false}) -> F\\n\\nCompute the QR factorization of the matrix A: an orthogonal (or unitary if A is complex-valued) matrix Q, and an upper triangular matrix R such that\\n\\nA = Q R\\n\\nThe returned object F stores the factorization in a packed format:\\n\\nif pivot == Val{true} then F is a QRPivoted object,\\notherwise if the element type of A is a BLAS type (Float32, Float64, Complex64 or Complex128), then F is a QRCompactWY object,\\notherwise F is a QR object.\\n\\nThe individual components of the factorization F can be accessed by indexing with a symbol:\\n\\nF[:Q]: the orthogonal/unitary matrix Q\\nF[:R]: the upper triangular matrix R\\nF[:p]: the permutation vector of the pivot (QRPivoted only)\\nF[:P]: the permutation matrix of the pivot (QRPivoted only)\\n\\nThe following functions are available for the QR objects: inv, size, and \\\\. When A is rectangular, \\\\ will return a least squares solution and if the solution is not unique, the one with smallest norm is returned.\\n\\nMultiplication with respect to either thin or full Q is allowed, i.e. both F[:Q]*F[:R] and F[:Q]*A are supported. A Q matrix can be converted into a regular matrix with full which has a named argument thin.\\n\\nExample\\n\\njulia> A = [3.0 -6.0; 4.0 -8.0; 0.0 1.0]\\n3\u00d72 Array{Float64,2}:\\n 3.0  -6.0\\n 4.0  -8.0\\n 0.0   1.0\\n\\njulia> F = qrfact(A)\\nBase.LinAlg.QRCompactWY{Float64,Array{Float64,2}} with factors Q and R:\\n[-0.6 0.0 0.8; -0.8 0.0 -0.6; 0.0 -1.0 0.0]\\n[-5.0 10.0; 0.0 -1.0]\\n\\njulia> F[:Q] * F[:R] == A\\ntrue\\n\\nnote: Note\\nqrfact returns multiple types because LAPACK uses several representations that minimize the memory storage requirements of products of Householder elementary reflectors, so that the Q and R matrices can be stored compactly rather as two separate dense matrices.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.qrfact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.qrfact!\",\n    \"category\": \"Function\",\n    \"text\": \"qrfact!(A, pivot=Val{false})\\n\\nqrfact! is the same as qrfact when A is a subtype of StridedMatrix, but saves space by overwriting the input A, instead of creating a copy. An InexactError exception is thrown if the factorization produces a number not representable by the element type of A, e.g. for integer types.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.QR\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.QR\",\n    \"category\": \"Type\",\n    \"text\": \"QR <: Factorization\\n\\nA QR matrix factorization stored in a packed format, typically obtained from qrfact. If A is an m\u00d7n matrix, then\\n\\nA = Q R\\n\\nwhere Q is an orthogonal/unitary matrix and R is upper triangular. The matrix Q is stored as a sequence of Householder reflectors v_i and coefficients tau_i where:\\n\\nQ = prod_i=1^min(mn) (I - tau_i v_i v_i^T)\\n\\nThe object has two fields:\\n\\nfactors is an m\u00d7n matrix.\\nThe upper triangular part contains the elements of R, that is R = triu(F.factors) for a QR object F.\\nThe subdiagonal part contains the reflectors v_i stored in a packed format where v_i is the ith column of the matrix V = eye(m,n) + tril(F.factors,-1).\\n\u03c4 is a vector  of length min(m,n) containing the coefficients au_i.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.QRCompactWY\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.QRCompactWY\",\n    \"category\": \"Type\",\n    \"text\": \"QRCompactWY <: Factorization\\n\\nA QR matrix factorization stored in a compact blocked format, typically obtained from qrfact. If A is an m\u00d7n matrix, then\\n\\nA = Q R\\n\\nwhere Q is an orthogonal/unitary matrix and R is upper triangular. It is similar to the QR format except that the orthogonal/unitary matrix Q is stored in Compact WY format [Schreiber1989], as a lower trapezoidal matrix V and an upper triangular matrix T where\\n\\nQ = prod_i=1^min(mn) (I - tau_i v_i v_i^T) = I - V T V^T\\n\\nsuch that v_i is the ith column of V, and au_i is the ith diagonal element of T.\\n\\nThe object has two fields:\\n\\nfactors, as in the QR type, is an m\u00d7n matrix.\\nThe upper triangular part contains the elements of R, that is R = triu(F.factors) for a QR object F.\\nThe subdiagonal part contains the reflectors v_i stored in a packed format such that V = eye(m,n) + tril(F.factors,-1).\\nT is a square matrix with min(m,n) columns, whose upper triangular part gives the matrix T above (the subdiagonal elements are ignored).\\n\\nnote: Note\\nThis format should not to be confused with the older WY representation [Bischof1987].\\n\\n[Bischof1987]: C Bischof and C Van Loan, \\\"The WY representation for products of Householder matrices\\\", SIAM J Sci Stat Comput 8 (1987), s2-s13. doi:10.1137/0908009\\n\\n[Schreiber1989]: R Schreiber and C Van Loan, \\\"A storage-efficient WY representation for products of Householder transformations\\\", SIAM J Sci Stat Comput 10 (1989), 53-57. doi:10.1137/0910005\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.QRPivoted\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.QRPivoted\",\n    \"category\": \"Type\",\n    \"text\": \"QRPivoted <: Factorization\\n\\nA QR matrix factorization with column pivoting in a packed format, typically obtained from qrfact. If A is an m\u00d7n matrix, then\\n\\nA P = Q R\\n\\nwhere P is a permutation matrix, Q is an orthogonal/unitary matrix and R is upper triangular. The matrix Q is stored as a sequence of Householder reflectors:\\n\\nQ = prod_i=1^min(mn) (I - tau_i v_i v_i^T)\\n\\nThe object has three fields:\\n\\nfactors is an m\u00d7n matrix.\\nThe upper triangular part contains the elements of R, that is R = triu(F.factors) for a QR object F.\\nThe subdiagonal part contains the reflectors v_i stored in a packed format where v_i is the ith column of the matrix V = eye(m,n) + tril(F.factors,-1).\\n\u03c4 is a vector of length min(m,n) containing the coefficients au_i.\\njpvt is an integer vector of length n corresponding to the permutation P.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lqfact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lqfact!\",\n    \"category\": \"Function\",\n    \"text\": \"lqfact!(A) -> LQ\\n\\nCompute the LQ factorization of A, using the input matrix as a workspace. See also lq.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lqfact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lqfact\",\n    \"category\": \"Function\",\n    \"text\": \"lqfact(A) -> LQ\\n\\nCompute the LQ factorization of A. See also lq.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lq\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lq\",\n    \"category\": \"Function\",\n    \"text\": \"lq(A; [thin=true]) -> L, Q\\n\\nPerform an LQ factorization of A such that A = L*Q. The default is to compute a thin factorization. The LQ factorization is the QR factorization of A.'. L is not extended with zeros if the full Q is requested.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.bkfact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.bkfact\",\n    \"category\": \"Function\",\n    \"text\": \"bkfact(A, uplo::Symbol=:U, symmetric::Bool=issymmetric(A), rook::Bool=false) -> BunchKaufman\\n\\nCompute the Bunch-Kaufman [Bunch1977] factorization of a symmetric or Hermitian matrix A and return a BunchKaufman object. uplo indicates which triangle of matrix A to reference. If symmetric is true, A is assumed to be symmetric. If symmetric is false, A is assumed to be Hermitian. If rook is true, rook pivoting is used. If rook is false, rook pivoting is not used. The following functions are available for BunchKaufman objects: size, \\\\, inv, issymmetric, ishermitian.\\n\\n[Bunch1977]: J R Bunch and L Kaufman, Some stable methods for calculating inertia and solving symmetric linear systems, Mathematics of Computation 31:137 (1977), 163-179. url.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.bkfact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.bkfact!\",\n    \"category\": \"Function\",\n    \"text\": \"bkfact!(A, uplo::Symbol=:U, symmetric::Bool=issymmetric(A), rook::Bool=false) -> BunchKaufman\\n\\nbkfact! is the same as bkfact, but saves space by overwriting the input A, instead of creating a copy.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eig\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eig\",\n    \"category\": \"Function\",\n    \"text\": \"eig(A::Union{SymTridiagonal, Hermitian, Symmetric}, irange::UnitRange) -> D, V\\neig(A::Union{SymTridiagonal, Hermitian, Symmetric}, vl::Real, vu::Real) -> D, V\\neig(A, permute::Bool=true, scale::Bool=true) -> D, V\\n\\nComputes eigenvalues (D) and eigenvectors (V) of A. See eigfact for details on the irange, vl, and vu arguments (for SymTridiagonal, Hermitian, and Symmetric matrices) and the permute and scale keyword arguments. The eigenvectors are returned columnwise.\\n\\nExample\\n\\njulia> eig([1.0 0.0 0.0; 0.0 3.0 0.0; 0.0 0.0 18.0])\\n([1.0, 3.0, 18.0], [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0])\\n\\neig is a wrapper around eigfact, extracting all parts of the factorization to a tuple; where possible, using eigfact is recommended.\\n\\n\\n\\neig(A, B) -> D, V\\n\\nComputes generalized eigenvalues (D) and vectors (V) of A with respect to B.\\n\\neig is a wrapper around eigfact, extracting all parts of the factorization to a tuple; where possible, using eigfact is recommended.\\n\\nExample\\n\\njulia> A = [1 0; 0 -1]\\n2\u00d72 Array{Int64,2}:\\n 1   0\\n 0  -1\\n\\njulia> B = [0 1; 1 0]\\n2\u00d72 Array{Int64,2}:\\n 0  1\\n 1  0\\n\\njulia> eig(A, B)\\n(Complex{Float64}[0.0+1.0im, 0.0-1.0im], Complex{Float64}[0.0-1.0im 0.0+1.0im; -1.0-0.0im -1.0+0.0im])\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eigvals\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eigvals\",\n    \"category\": \"Function\",\n    \"text\": \"eigvals(A; permute::Bool=true, scale::Bool=true) -> values\\n\\nReturns the eigenvalues of A.\\n\\nFor general non-symmetric matrices it is possible to specify how the matrix is balanced before the eigenvalue calculation. The option permute=true permutes the matrix to become closer to upper triangular, and scale=true scales the matrix by its diagonal elements to make rows and columns more equal in norm. The default is true for both options.\\n\\n\\n\\neigvals(A, B) -> values\\n\\nComputes the generalized eigenvalues of A and B.\\n\\nExample\\n\\njulia> A = [1 0; 0 -1]\\n2\u00d72 Array{Int64,2}:\\n 1   0\\n 0  -1\\n\\njulia> B = [0 1; 1 0]\\n2\u00d72 Array{Int64,2}:\\n 0  1\\n 1  0\\n\\njulia> eigvals(A,B)\\n2-element Array{Complex{Float64},1}:\\n 0.0+1.0im\\n 0.0-1.0im\\n\\n\\n\\neigvals(A::Union{SymTridiagonal, Hermitian, Symmetric}, irange::UnitRange) -> values\\n\\nReturns the eigenvalues of A. It is possible to calculate only a subset of the eigenvalues by specifying a UnitRange irange covering indices of the sorted eigenvalues, e.g. the 2nd to 8th eigenvalues.\\n\\njulia> A = SymTridiagonal([1.; 2.; 1.], [2.; 3.])\\n3\u00d73 SymTridiagonal{Float64}:\\n 1.0  2.0   \u22c5\\n 2.0  2.0  3.0\\n  \u22c5   3.0  1.0\\n\\njulia> eigvals(A, 2:2)\\n1-element Array{Float64,1}:\\n 1.0\\n\\njulia> eigvals(A)\\n3-element Array{Float64,1}:\\n -2.14005\\n  1.0\\n  5.14005\\n\\n\\n\\neigvals(A::Union{SymTridiagonal, Hermitian, Symmetric}, vl::Real, vu::Real) -> values\\n\\nReturns the eigenvalues of A. It is possible to calculate only a subset of the eigenvalues by specifying a pair vl and vu for the lower and upper boundaries of the eigenvalues.\\n\\njulia> A = SymTridiagonal([1.; 2.; 1.], [2.; 3.])\\n3\u00d73 SymTridiagonal{Float64}:\\n 1.0  2.0   \u22c5\\n 2.0  2.0  3.0\\n  \u22c5   3.0  1.0\\n\\njulia> eigvals(A, -1, 2)\\n1-element Array{Float64,1}:\\n 1.0\\n\\njulia> eigvals(A)\\n3-element Array{Float64,1}:\\n -2.14005\\n  1.0\\n  5.14005\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eigvals!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eigvals!\",\n    \"category\": \"Function\",\n    \"text\": \"eigvals!(A; permute::Bool=true, scale::Bool=true) -> values\\n\\nSame as eigvals, but saves space by overwriting the input A, instead of creating a copy. The option permute=true permutes the matrix to become closer to upper triangular, and scale=true scales the matrix by its diagonal elements to make rows and columns more equal in norm.\\n\\n\\n\\neigvals!(A, B) -> values\\n\\nSame as eigvals, but saves space by overwriting the input A (and B), instead of creating copies.\\n\\n\\n\\neigvals!(A::Union{SymTridiagonal, Hermitian, Symmetric}, irange::UnitRange) -> values\\n\\nSame as eigvals, but saves space by overwriting the input A, instead of creating a copy. irange is a range of eigenvalue indices to search for - for instance, the 2nd to 8th eigenvalues.\\n\\n\\n\\neigvals!(A::Union{SymTridiagonal, Hermitian, Symmetric}, vl::Real, vu::Real) -> values\\n\\nSame as eigvals, but saves space by overwriting the input A, instead of creating a copy. vl is the lower bound of the interval to search for eigenvalues, and vu is the upper bound.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eigmax\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eigmax\",\n    \"category\": \"Function\",\n    \"text\": \"eigmax(A; permute::Bool=true, scale::Bool=true)\\n\\nReturns the largest eigenvalue of A. The option permute=true permutes the matrix to become closer to upper triangular, and scale=true scales the matrix by its diagonal elements to make rows and columns more equal in norm. Note that if the eigenvalues of A are complex, this method will fail, since complex numbers cannot be sorted.\\n\\nExample\\n\\njulia> A = [0 im; -im 0]\\n2\u00d72 Array{Complex{Int64},2}:\\n 0+0im  0+1im\\n 0-1im  0+0im\\n\\njulia> eigmax(A)\\n1.0\\n\\njulia> A = [0 im; -1 0]\\n2\u00d72 Array{Complex{Int64},2}:\\n  0+0im  0+1im\\n -1+0im  0+0im\\n\\njulia> eigmax(A)\\nERROR: DomainError:\\nStacktrace:\\n [1] #eigmax#46(::Bool, ::Bool, ::Function, ::Array{Complex{Int64},2}) at ./linalg/eigen.jl:238\\n [2] eigmax(::Array{Complex{Int64},2}) at ./linalg/eigen.jl:236\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eigmin\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eigmin\",\n    \"category\": \"Function\",\n    \"text\": \"eigmin(A; permute::Bool=true, scale::Bool=true)\\n\\nReturns the smallest eigenvalue of A. The option permute=true permutes the matrix to become closer to upper triangular, and scale=true scales the matrix by its diagonal elements to make rows and columns more equal in norm. Note that if the eigenvalues of A are complex, this method will fail, since complex numbers cannot be sorted.\\n\\nExample\\n\\njulia> A = [0 im; -im 0]\\n2\u00d72 Array{Complex{Int64},2}:\\n 0+0im  0+1im\\n 0-1im  0+0im\\n\\njulia> eigmin(A)\\n-1.0\\n\\njulia> A = [0 im; -1 0]\\n2\u00d72 Array{Complex{Int64},2}:\\n  0+0im  0+1im\\n -1+0im  0+0im\\n\\njulia> eigmin(A)\\nERROR: DomainError:\\nStacktrace:\\n [1] #eigmin#47(::Bool, ::Bool, ::Function, ::Array{Complex{Int64},2}) at ./linalg/eigen.jl:280\\n [2] eigmin(::Array{Complex{Int64},2}) at ./linalg/eigen.jl:278\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eigvecs\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eigvecs\",\n    \"category\": \"Function\",\n    \"text\": \"eigvecs(A::SymTridiagonal[, eigvals]) -> Matrix\\n\\nReturns a matrix M whose columns are the eigenvectors of A. (The kth eigenvector can be obtained from the slice M[:, k].)\\n\\nIf the optional vector of eigenvalues eigvals is specified, eigvecs returns the specific corresponding eigenvectors.\\n\\nExample\\n\\njulia> A = SymTridiagonal([1.; 2.; 1.], [2.; 3.])\\n3\u00d73 SymTridiagonal{Float64}:\\n 1.0  2.0   \u22c5\\n 2.0  2.0  3.0\\n  \u22c5   3.0  1.0\\n\\njulia> eigvals(A)\\n3-element Array{Float64,1}:\\n -2.14005\\n  1.0\\n  5.14005\\n\\njulia> eigvecs(A)\\n3\u00d73 Array{Float64,2}:\\n  0.418304  -0.83205      0.364299\\n -0.656749  -7.39009e-16  0.754109\\n  0.627457   0.5547       0.546448\\n\\njulia> eigvecs(A, [1.])\\n3\u00d71 Array{Float64,2}:\\n  0.83205\\n  4.26351e-17\\n -0.5547\\n\\n\\n\\neigvecs(A; permute::Bool=true, scale::Bool=true) -> Matrix\\n\\nReturns a matrix M whose columns are the eigenvectors of A. (The kth eigenvector can be obtained from the slice M[:, k].) The permute and scale keywords are the same as for eigfact.\\n\\nExample\\n\\njulia> eigvecs([1.0 0.0 0.0; 0.0 3.0 0.0; 0.0 0.0 18.0])\\n3\u00d73 Array{Float64,2}:\\n 1.0  0.0  0.0\\n 0.0  1.0  0.0\\n 0.0  0.0  1.0\\n\\n\\n\\neigvecs(A, B) -> Matrix\\n\\nReturns a matrix M whose columns are the generalized eigenvectors of A and B. (The kth eigenvector can be obtained from the slice M[:, k].)\\n\\nExample\\n\\njulia> A = [1 0; 0 -1]\\n2\u00d72 Array{Int64,2}:\\n 1   0\\n 0  -1\\n\\njulia> B = [0 1; 1 0]\\n2\u00d72 Array{Int64,2}:\\n 0  1\\n 1  0\\n\\njulia> eigvecs(A, B)\\n2\u00d72 Array{Complex{Float64},2}:\\n  0.0-1.0im   0.0+1.0im\\n -1.0-0.0im  -1.0+0.0im\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eigfact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eigfact\",\n    \"category\": \"Function\",\n    \"text\": \"eigfact(A; permute::Bool=true, scale::Bool=true) -> Eigen\\n\\nComputes the eigenvalue decomposition of A, returning an Eigen factorization object F which contains the eigenvalues in F[:values] and the eigenvectors in the columns of the matrix F[:vectors]. (The kth eigenvector can be obtained from the slice F[:vectors][:, k].)\\n\\nThe following functions are available for Eigen objects: inv, det, and isposdef.\\n\\nFor general nonsymmetric matrices it is possible to specify how the matrix is balanced before the eigenvector calculation. The option permute=true permutes the matrix to become closer to upper triangular, and scale=true scales the matrix by its diagonal elements to make rows and columns more equal in norm. The default is true for both options.\\n\\nExample\\n\\njulia> F = eigfact([1.0 0.0 0.0; 0.0 3.0 0.0; 0.0 0.0 18.0])\\nBase.LinAlg.Eigen{Float64,Float64,Array{Float64,2},Array{Float64,1}}([1.0, 3.0, 18.0], [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0])\\n\\njulia> F[:values]\\n3-element Array{Float64,1}:\\n  1.0\\n  3.0\\n 18.0\\n\\njulia> F[:vectors]\\n3\u00d73 Array{Float64,2}:\\n 1.0  0.0  0.0\\n 0.0  1.0  0.0\\n 0.0  0.0  1.0\\n\\n\\n\\neigfact(A, B) -> GeneralizedEigen\\n\\nComputes the generalized eigenvalue decomposition of A and B, returning a GeneralizedEigen factorization object F which contains the generalized eigenvalues in F[:values] and the generalized eigenvectors in the columns of the matrix F[:vectors]. (The kth generalized eigenvector can be obtained from the slice F[:vectors][:, k].)\\n\\n\\n\\neigfact(A::Union{SymTridiagonal, Hermitian, Symmetric}, irange::UnitRange) -> Eigen\\n\\nComputes the eigenvalue decomposition of A, returning an Eigen factorization object F which contains the eigenvalues in F[:values] and the eigenvectors in the columns of the matrix F[:vectors]. (The kth eigenvector can be obtained from the slice F[:vectors][:, k].)\\n\\nThe following functions are available for Eigen objects: inv, det, and isposdef.\\n\\nThe UnitRange irange specifies indices of the sorted eigenvalues to search for.\\n\\nnote: Note\\nIf irange is not 1:n, where n is the dimension of A, then the returned factorization will be a truncated factorization.\\n\\n\\n\\neigfact(A::Union{SymTridiagonal, Hermitian, Symmetric}, vl::Real, vu::Real) -> Eigen\\n\\nComputes the eigenvalue decomposition of A, returning an Eigen factorization object F which contains the eigenvalues in F[:values] and the eigenvectors in the columns of the matrix F[:vectors]. (The kth eigenvector can be obtained from the slice F[:vectors][:, k].)\\n\\nThe following functions are available for Eigen objects: inv, det, and isposdef.\\n\\nvl is the lower bound of the window of eigenvalues to search for, and vu is the upper bound.\\n\\nnote: Note\\nIf [vl, vu] does not contain all eigenvalues of A, then the returned factorization will be a truncated factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eigfact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eigfact!\",\n    \"category\": \"Function\",\n    \"text\": \"eigfact!(A, [B])\\n\\nSame as eigfact, but saves space by overwriting the input A (and B), instead of creating a copy.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.hessfact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.hessfact\",\n    \"category\": \"Function\",\n    \"text\": \"hessfact(A) -> Hessenberg\\n\\nCompute the Hessenberg decomposition of A and return a Hessenberg object. If F is the factorization object, the unitary matrix can be accessed with F[:Q] and the Hessenberg matrix with F[:H]. When Q is extracted, the resulting type is the HessenbergQ object, and may be converted to a regular matrix with convert(Array, _)  (or Array(_) for short).\\n\\nExample\\n\\njulia> A = [4. 9. 7.; 4. 4. 1.; 4. 3. 2.]\\n3\u00d73 Array{Float64,2}:\\n 4.0  9.0  7.0\\n 4.0  4.0  1.0\\n 4.0  3.0  2.0\\n\\njulia> F = hessfact(A);\\n\\njulia> F[:Q] * F[:H] * F[:Q]'\\n3\u00d73 Array{Float64,2}:\\n 4.0  9.0  7.0\\n 4.0  4.0  1.0\\n 4.0  3.0  2.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.hessfact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.hessfact!\",\n    \"category\": \"Function\",\n    \"text\": \"hessfact!(A) -> Hessenberg\\n\\nhessfact! is the same as hessfact, but saves space by overwriting the input A, instead of creating a copy.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.schurfact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.schurfact\",\n    \"category\": \"Function\",\n    \"text\": \"schurfact(A::StridedMatrix) -> F::Schur\\n\\nComputes the Schur factorization of the matrix A. The (quasi) triangular Schur factor can be obtained from the Schur object F with either F[:Schur] or F[:T] and the orthogonal/unitary Schur vectors can be obtained with F[:vectors] or F[:Z] such that A = F[:vectors]*F[:Schur]*F[:vectors]'. The eigenvalues of A can be obtained with F[:values].\\n\\nExample\\n\\njulia> A = [-2. 1. 3.; 2. 1. -1.; -7. 2. 7.]\\n3\u00d73 Array{Float64,2}:\\n -2.0  1.0   3.0\\n  2.0  1.0  -1.0\\n -7.0  2.0   7.0\\n\\njulia> F = schurfact(A)\\nBase.LinAlg.Schur{Float64,Array{Float64,2}} with factors T and Z:\\n[2.0 0.801792 6.63509; -8.55988e-11 2.0 8.08286; 0.0 0.0 1.99999]\\n[0.577351 0.154299 -0.801784; 0.577346 -0.77152 0.267262; 0.577354 0.617211 0.534522]\\nand values:\\nComplex{Float64}[2.0+8.28447e-6im, 2.0-8.28447e-6im, 1.99999+0.0im]\\n\\njulia> F[:vectors] * F[:Schur] * F[:vectors]'\\n3\u00d73 Array{Float64,2}:\\n -2.0  1.0   3.0\\n  2.0  1.0  -1.0\\n -7.0  2.0   7.0\\n\\n\\n\\nschurfact(A::StridedMatrix, B::StridedMatrix) -> F::GeneralizedSchur\\n\\nComputes the Generalized Schur (or QZ) factorization of the matrices A and B. The (quasi) triangular Schur factors can be obtained from the Schur object F with F[:S] and F[:T], the left unitary/orthogonal Schur vectors can be obtained with F[:left] or F[:Q] and the right unitary/orthogonal Schur vectors can be obtained with F[:right] or F[:Z] such that A=F[:left]*F[:S]*F[:right]' and B=F[:left]*F[:T]*F[:right]'. The generalized eigenvalues of A and B can be obtained with F[:alpha]./F[:beta].\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.schurfact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.schurfact!\",\n    \"category\": \"Function\",\n    \"text\": \"schurfact!(A::StridedMatrix) -> F::Schur\\n\\nSame as schurfact but uses the input argument as workspace.\\n\\n\\n\\nschurfact!(A::StridedMatrix, B::StridedMatrix) -> F::GeneralizedSchur\\n\\nSame as schurfact but uses the input matrices A and B as workspace.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.schur\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.schur\",\n    \"category\": \"Function\",\n    \"text\": \"schur(A::StridedMatrix) -> T::Matrix, Z::Matrix, \u03bb::Vector\\n\\nComputes the Schur factorization of the matrix A. The methods return the (quasi) triangular Schur factor T and the orthogonal/unitary Schur vectors Z such that A = Z*T*Z'. The eigenvalues of A are returned in the vector \u03bb.\\n\\nSee schurfact.\\n\\nExample\\n\\njulia> A = [-2. 1. 3.; 2. 1. -1.; -7. 2. 7.]\\n3\u00d73 Array{Float64,2}:\\n -2.0  1.0   3.0\\n  2.0  1.0  -1.0\\n -7.0  2.0   7.0\\n\\njulia> T, Z, lambda = schur(A)\\n([2.0 0.801792 6.63509; -8.55988e-11 2.0 8.08286; 0.0 0.0 1.99999], [0.577351 0.154299 -0.801784; 0.577346 -0.77152 0.267262; 0.577354 0.617211 0.534522], Complex{Float64}[2.0+8.28447e-6im, 2.0-8.28447e-6im, 1.99999+0.0im])\\n\\njulia> Z * T * Z'\\n3\u00d73 Array{Float64,2}:\\n -2.0  1.0   3.0\\n  2.0  1.0  -1.0\\n -7.0  2.0   7.0\\n\\n\\n\\nschur(A::StridedMatrix, B::StridedMatrix) -> S::StridedMatrix, T::StridedMatrix, Q::StridedMatrix, Z::StridedMatrix, \u03b1::Vector, \u03b2::Vector\\n\\nSee schurfact.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.ordschur\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.ordschur\",\n    \"category\": \"Function\",\n    \"text\": \"ordschur(F::Schur, select::Union{Vector{Bool},BitVector}) -> F::Schur\\n\\nReorders the Schur factorization F of a matrix A = Z*T*Z' according to the logical array select returning the reordered factorization F object. The selected eigenvalues appear in the leading diagonal of F[:Schur] and the corresponding leading columns of F[:vectors] form an orthogonal/unitary basis of the corresponding right invariant subspace. In the real case, a complex conjugate pair of eigenvalues must be either both included or both excluded via select.\\n\\n\\n\\nordschur(T::StridedMatrix, Z::StridedMatrix, select::Union{Vector{Bool},BitVector}) -> T::StridedMatrix, Z::StridedMatrix, \u03bb::Vector\\n\\nReorders the Schur factorization of a real matrix A = Z*T*Z' according to the logical array select returning the reordered matrices T and Z as well as the vector of eigenvalues \u03bb. The selected eigenvalues appear in the leading diagonal of T and the corresponding leading columns of Z form an orthogonal/unitary basis of the corresponding right invariant subspace. In the real case, a complex conjugate pair of eigenvalues must be either both included or both excluded via select.\\n\\n\\n\\nordschur(F::GeneralizedSchur, select::Union{Vector{Bool},BitVector}) -> F::GeneralizedSchur\\n\\nReorders the Generalized Schur factorization F of a matrix pair (A, B) = (Q*S*Z', Q*T*Z') according to the logical array select and returns a GeneralizedSchur object F. The selected eigenvalues appear in the leading diagonal of both F[:S] and F[:T], and the left and right orthogonal/unitary Schur vectors are also reordered such that (A, B) = F[:Q]*(F[:S], F[:T])*F[:Z]' still holds and the generalized eigenvalues of A and B can still be obtained with F[:alpha]./F[:beta].\\n\\n\\n\\nordschur(S::StridedMatrix, T::StridedMatrix, Q::StridedMatrix, Z::StridedMatrix, select) -> S::StridedMatrix, T::StridedMatrix, Q::StridedMatrix, Z::StridedMatrix, \u03b1::Vector, \u03b2::Vector\\n\\nReorders the Generalized Schur factorization of a matrix pair (A, B) = (Q*S*Z', Q*T*Z') according to the logical array select and returns the matrices S, T, Q, Z and vectors \u03b1 and \u03b2.  The selected eigenvalues appear in the leading diagonal of both S and T, and the left and right unitary/orthogonal Schur vectors are also reordered such that (A, B) = Q*(S, T)*Z' still holds and the generalized eigenvalues of A and B can still be obtained with \u03b1./\u03b2.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.ordschur!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.ordschur!\",\n    \"category\": \"Function\",\n    \"text\": \"ordschur!(F::Schur, select::Union{Vector{Bool},BitVector}) -> F::Schur\\n\\nSame as ordschur but overwrites the factorization F.\\n\\n\\n\\nordschur!(T::StridedMatrix, Z::StridedMatrix, select::Union{Vector{Bool},BitVector}) -> T::StridedMatrix, Z::StridedMatrix, \u03bb::Vector\\n\\nSame as ordschur but overwrites the input arguments.\\n\\n\\n\\nordschur!(F::GeneralizedSchur, select::Union{Vector{Bool},BitVector}) -> F::GeneralizedSchur\\n\\nSame as ordschur but overwrites the factorization F.\\n\\n\\n\\nordschur!(S::StridedMatrix, T::StridedMatrix, Q::StridedMatrix, Z::StridedMatrix, select) -> S::StridedMatrix, T::StridedMatrix, Q::StridedMatrix, Z::StridedMatrix, \u03b1::Vector, \u03b2::Vector\\n\\nSame as ordschur but overwrites the factorization the input arguments.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.svdfact\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.svdfact\",\n    \"category\": \"Function\",\n    \"text\": \"svdfact(A; thin::Bool=true) -> SVD\\n\\nCompute the singular value decomposition (SVD) of A and return an SVD object.\\n\\nU, S, V and Vt can be obtained from the factorization F with F[:U], F[:S], F[:V] and F[:Vt], such that A = U*diagm(S)*Vt. The algorithm produces Vt and hence Vt is more efficient to extract than V. The singular values in S are sorted in descending order.\\n\\nIf thin=true (default), a thin SVD is returned. For a M times N matrix A, U is M times M for a full SVD (thin=false) and M times min(M N) for a thin SVD.\\n\\nExample\\n\\njulia> A = [1. 0. 0. 0. 2.; 0. 0. 3. 0. 0.; 0. 0. 0. 0. 0.; 0. 2. 0. 0. 0.]\\n4\u00d75 Array{Float64,2}:\\n 1.0  0.0  0.0  0.0  2.0\\n 0.0  0.0  3.0  0.0  0.0\\n 0.0  0.0  0.0  0.0  0.0\\n 0.0  2.0  0.0  0.0  0.0\\n\\njulia> F = svdfact(A)\\nBase.LinAlg.SVD{Float64,Float64,Array{Float64,2}}([0.0 1.0 0.0 0.0; 1.0 0.0 0.0 0.0; 0.0 0.0 0.0 -1.0; 0.0 0.0 1.0 0.0], [3.0, 2.23607, 2.0, 0.0], [-0.0 0.0 \u2026 -0.0 0.0; 0.447214 0.0 \u2026 0.0 0.894427; -0.0 1.0 \u2026 -0.0 0.0; 0.0 0.0 \u2026 1.0 0.0])\\n\\njulia> F[:U] * diagm(F[:S]) * F[:Vt]\\n4\u00d75 Array{Float64,2}:\\n 1.0  0.0  0.0  0.0  2.0\\n 0.0  0.0  3.0  0.0  0.0\\n 0.0  0.0  0.0  0.0  0.0\\n 0.0  2.0  0.0  0.0  0.0\\n\\n\\n\\nsvdfact(A, B) -> GeneralizedSVD\\n\\nCompute the generalized SVD of A and B, returning a GeneralizedSVD factorization object F, such that A = F[:U]*F[:D1]*F[:R0]*F[:Q]' and B = F[:V]*F[:D2]*F[:R0]*F[:Q]'.\\n\\nFor an M-by-N matrix A and P-by-N matrix B,\\n\\nF[:U] is a M-by-M orthogonal matrix,\\nF[:V] is a P-by-P orthogonal matrix,\\nF[:Q] is a N-by-N orthogonal matrix,\\nF[:R0] is a (K+L)-by-N matrix whose rightmost (K+L)-by-(K+L) block is          nonsingular upper block triangular,\\nF[:D1] is a M-by-(K+L) diagonal matrix with 1s in the first K entries,\\nF[:D2] is a P-by-(K+L) matrix whose top right L-by-L block is diagonal,\\n\\nK+L is the effective numerical rank of the matrix [A; B].\\n\\nThe entries of F[:D1] and F[:D2] are related, as explained in the LAPACK documentation for the generalized SVD and the xGGSVD3 routine which is called underneath (in LAPACK 3.6.0 and newer).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.svdfact!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.svdfact!\",\n    \"category\": \"Function\",\n    \"text\": \"svdfact!(A, thin::Bool=true) -> SVD\\n\\nsvdfact! is the same as svdfact, but saves space by overwriting the input A, instead of creating a copy.\\n\\n\\n\\nsvdfact!(A, B) -> GeneralizedSVD\\n\\nsvdfact! is the same as svdfact, but modifies the arguments A and B in-place, instead of making copies.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.svd\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.svd\",\n    \"category\": \"Function\",\n    \"text\": \"svd(A; thin::Bool=true) -> U, S, V\\n\\nComputes the SVD of A, returning U, vector S, and V such that A == U*diagm(S)*V'. The singular values in S are sorted in descending order.\\n\\nIf thin=true (default), a thin SVD is returned. For a M times N matrix A, U is M times M for a full SVD (thin=false) and M times min(M N) for a thin SVD.\\n\\nsvd is a wrapper around svdfact, extracting all parts of the SVD factorization to a tuple. Direct use of svdfact is therefore more efficient.\\n\\nExample\\n\\njulia> A = [1. 0. 0. 0. 2.; 0. 0. 3. 0. 0.; 0. 0. 0. 0. 0.; 0. 2. 0. 0. 0.]\\n4\u00d75 Array{Float64,2}:\\n 1.0  0.0  0.0  0.0  2.0\\n 0.0  0.0  3.0  0.0  0.0\\n 0.0  0.0  0.0  0.0  0.0\\n 0.0  2.0  0.0  0.0  0.0\\n\\njulia> U, S, V = svd(A)\\n([0.0 1.0 0.0 0.0; 1.0 0.0 0.0 0.0; 0.0 0.0 0.0 -1.0; 0.0 0.0 1.0 0.0], [3.0, 2.23607, 2.0, 0.0], [-0.0 0.447214 -0.0 0.0; 0.0 0.0 1.0 0.0; \u2026 ; -0.0 0.0 -0.0 1.0; 0.0 0.894427 0.0 0.0])\\n\\njulia> U*diagm(S)*V'\\n4\u00d75 Array{Float64,2}:\\n 1.0  0.0  0.0  0.0  2.0\\n 0.0  0.0  3.0  0.0  0.0\\n 0.0  0.0  0.0  0.0  0.0\\n 0.0  2.0  0.0  0.0  0.0\\n\\n\\n\\nsvd(A, B) -> U, V, Q, D1, D2, R0\\n\\nWrapper around svdfact extracting all parts of the factorization to a tuple. Direct use of svdfact is therefore generally more efficient. The function returns the generalized SVD of A and B, returning U, V, Q, D1, D2, and R0 such that A = U*D1*R0*Q' and B = V*D2*R0*Q'.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.svdvals\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.svdvals\",\n    \"category\": \"Function\",\n    \"text\": \"svdvals(A)\\n\\nReturns the singular values of A in descending order.\\n\\nExample\\n\\njulia> A = [1. 0. 0. 0. 2.; 0. 0. 3. 0. 0.; 0. 0. 0. 0. 0.; 0. 2. 0. 0. 0.]\\n4\u00d75 Array{Float64,2}:\\n 1.0  0.0  0.0  0.0  2.0\\n 0.0  0.0  3.0  0.0  0.0\\n 0.0  0.0  0.0  0.0  0.0\\n 0.0  2.0  0.0  0.0  0.0\\n\\njulia> svdvals(A)\\n4-element Array{Float64,1}:\\n 3.0\\n 2.23607\\n 2.0\\n 0.0\\n\\n\\n\\nsvdvals(A, B)\\n\\nReturn the generalized singular values from the generalized singular value decomposition of A and B. See also svdfact.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.Givens\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.Givens\",\n    \"category\": \"Type\",\n    \"text\": \"LinAlg.Givens(i1,i2,c,s) -> G\\n\\nA Givens rotation linear operator. The fields c and s represent the cosine and sine of the rotation angle, respectively. The Givens type supports left multiplication G*A and conjugated transpose right multiplication A*G'. The type doesn't have a size and can therefore be multiplied with matrices of arbitrary size as long as i2<=size(A,2) for G*A or i2<=size(A,1) for A*G'.\\n\\nSee also: givens\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.givens\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.givens\",\n    \"category\": \"Function\",\n    \"text\": \"givens{T}(f::T, g::T, i1::Integer, i2::Integer) -> (G::Givens, r::T)\\n\\nComputes the Givens rotation G and scalar r such that for any vector x where\\n\\nx[i1] = f\\nx[i2] = g\\n\\nthe result of the multiplication\\n\\ny = G*x\\n\\nhas the property that\\n\\ny[i1] = r\\ny[i2] = 0\\n\\nSee also: LinAlg.Givens\\n\\n\\n\\ngivens(A::AbstractArray, i1::Integer, i2::Integer, j::Integer) -> (G::Givens, r)\\n\\nComputes the Givens rotation G and scalar r such that the result of the multiplication\\n\\nB = G*A\\n\\nhas the property that\\n\\nB[i1,j] = r\\nB[i2,j] = 0\\n\\nSee also: LinAlg.Givens\\n\\n\\n\\ngivens(x::AbstractVector, i1::Integer, i2::Integer) -> (G::Givens, r)\\n\\nComputes the Givens rotation G and scalar r such that the result of the multiplication\\n\\nB = G*x\\n\\nhas the property that\\n\\nB[i1] = r\\nB[i2] = 0\\n\\nSee also: LinAlg.Givens\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.triu\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.triu\",\n    \"category\": \"Function\",\n    \"text\": \"triu(M)\\n\\nUpper triangle of a matrix.\\n\\nExample\\n\\njulia> a = ones(4,4)\\n4\u00d74 Array{Float64,2}:\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n\\njulia> triu(a)\\n4\u00d74 Array{Float64,2}:\\n 1.0  1.0  1.0  1.0\\n 0.0  1.0  1.0  1.0\\n 0.0  0.0  1.0  1.0\\n 0.0  0.0  0.0  1.0\\n\\n\\n\\ntriu(M, k::Integer)\\n\\nReturns the upper triangle of M starting from the kth superdiagonal.\\n\\nExample\\n\\njulia> a = ones(4,4)\\n4\u00d74 Array{Float64,2}:\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n\\njulia> triu(a,3)\\n4\u00d74 Array{Float64,2}:\\n 0.0  0.0  0.0  1.0\\n 0.0  0.0  0.0  0.0\\n 0.0  0.0  0.0  0.0\\n 0.0  0.0  0.0  0.0\\n\\njulia> triu(a,-3)\\n4\u00d74 Array{Float64,2}:\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.triu!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.triu!\",\n    \"category\": \"Function\",\n    \"text\": \"triu!(M)\\n\\nUpper triangle of a matrix, overwriting M in the process. See also triu.\\n\\n\\n\\ntriu!(M, k::Integer)\\n\\nReturns the upper triangle of M starting from the kth superdiagonal, overwriting M in the process.\\n\\nExample\\n\\njulia> M = [1 2 3 4 5; 1 2 3 4 5; 1 2 3 4 5; 1 2 3 4 5; 1 2 3 4 5]\\n5\u00d75 Array{Int64,2}:\\n 1  2  3  4  5\\n 1  2  3  4  5\\n 1  2  3  4  5\\n 1  2  3  4  5\\n 1  2  3  4  5\\n\\njulia> triu!(M, 1)\\n5\u00d75 Array{Int64,2}:\\n 0  2  3  4  5\\n 0  0  3  4  5\\n 0  0  0  4  5\\n 0  0  0  0  5\\n 0  0  0  0  0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.tril\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.tril\",\n    \"category\": \"Function\",\n    \"text\": \"tril(M)\\n\\nLower triangle of a matrix.\\n\\nExample\\n\\njulia> a = ones(4,4)\\n4\u00d74 Array{Float64,2}:\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n\\njulia> tril(a)\\n4\u00d74 Array{Float64,2}:\\n 1.0  0.0  0.0  0.0\\n 1.0  1.0  0.0  0.0\\n 1.0  1.0  1.0  0.0\\n 1.0  1.0  1.0  1.0\\n\\n\\n\\ntril(M, k::Integer)\\n\\nReturns the lower triangle of M starting from the kth superdiagonal.\\n\\nExample\\n\\njulia> a = ones(4,4)\\n4\u00d74 Array{Float64,2}:\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n\\njulia> tril(a,3)\\n4\u00d74 Array{Float64,2}:\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n 1.0  1.0  1.0  1.0\\n\\njulia> tril(a,-3)\\n4\u00d74 Array{Float64,2}:\\n 0.0  0.0  0.0  0.0\\n 0.0  0.0  0.0  0.0\\n 0.0  0.0  0.0  0.0\\n 1.0  0.0  0.0  0.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.tril!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.tril!\",\n    \"category\": \"Function\",\n    \"text\": \"tril!(M)\\n\\nLower triangle of a matrix, overwriting M in the process. See also tril.\\n\\n\\n\\ntril!(M, k::Integer)\\n\\nReturns the lower triangle of M starting from the kth superdiagonal, overwriting M in the process.\\n\\nExample\\n\\njulia> M = [1 2 3 4 5; 1 2 3 4 5; 1 2 3 4 5; 1 2 3 4 5; 1 2 3 4 5]\\n5\u00d75 Array{Int64,2}:\\n 1  2  3  4  5\\n 1  2  3  4  5\\n 1  2  3  4  5\\n 1  2  3  4  5\\n 1  2  3  4  5\\n\\njulia> tril!(M, 2)\\n5\u00d75 Array{Int64,2}:\\n 1  2  3  0  0\\n 1  2  3  4  0\\n 1  2  3  4  5\\n 1  2  3  4  5\\n 1  2  3  4  5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.diagind\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.diagind\",\n    \"category\": \"Function\",\n    \"text\": \"diagind(M, k::Integer=0)\\n\\nA Range giving the indices of the kth diagonal of the matrix M.\\n\\nExample\\n\\njulia> A = [1 2 3; 4 5 6; 7 8 9]\\n3\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n 7  8  9\\n\\njulia> diagind(A,-1)\\n2:4:6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.diag\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.diag\",\n    \"category\": \"Function\",\n    \"text\": \"diag(M, k::Integer=0)\\n\\nThe kth diagonal of a matrix, as a vector. Use diagm to construct a diagonal matrix.\\n\\nExample\\n\\njulia> A = [1 2 3; 4 5 6; 7 8 9]\\n3\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n 7  8  9\\n\\njulia> diag(A,1)\\n2-element Array{Int64,1}:\\n 2\\n 6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.diagm\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.diagm\",\n    \"category\": \"Function\",\n    \"text\": \"diagm(v, k::Integer=0)\\n\\nConstruct a matrix by placing v on the kth diagonal.\\n\\nExample\\n\\njulia> diagm([1,2,3],1)\\n4\u00d74 Array{Int64,2}:\\n 0  1  0  0\\n 0  0  2  0\\n 0  0  0  3\\n 0  0  0  0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.scale!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.scale!\",\n    \"category\": \"Function\",\n    \"text\": \"scale!(A, b)\\nscale!(b, A)\\n\\nScale an array A by a scalar b overwriting A in-place.\\n\\nIf A is a matrix and b is a vector, then scale!(A,b) scales each column i of A by b[i] (similar to A*Diagonal(b)), while scale!(b,A) scales each row i of A by b[i] (similar to Diagonal(b)*A), again operating in-place on A. An InexactError exception is thrown if the scaling produces a number not representable by the element type of A, e.g. for integer types.\\n\\nExample\\n\\njulia> a = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> b = [1; 2]\\n2-element Array{Int64,1}:\\n 1\\n 2\\n\\njulia> scale!(a,b)\\n2\u00d72 Array{Int64,2}:\\n 1  4\\n 3  8\\n\\njulia> a = [1 2; 3 4];\\n\\njulia> b = [1; 2];\\n\\njulia> scale!(b,a)\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 6  8\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.rank\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.rank\",\n    \"category\": \"Function\",\n    \"text\": \"rank(M[, tol::Real])\\n\\nCompute the rank of a matrix by counting how many singular values of M have magnitude greater than tol. By default, the value of tol is the largest dimension of M multiplied by the eps of the eltype of M.\\n\\nExample\\n\\njulia> rank(eye(3))\\n3\\n\\njulia> rank(diagm([1, 0, 2]))\\n2\\n\\njulia> rank(diagm([1, 0.001, 2]), 0.1)\\n2\\n\\njulia> rank(diagm([1, 0.001, 2]), 0.00001)\\n3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.norm\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.norm\",\n    \"category\": \"Function\",\n    \"text\": \"norm(A::AbstractArray, p::Real=2)\\n\\nCompute the p-norm of a vector or the operator norm of a matrix A, defaulting to the 2-norm.\\n\\nnorm(A::AbstractVector, p::Real=2)\\n\\nFor vectors, this is equivalent to vecnorm and equal to:\\n\\nA_p = left( sum_i=1^n  a_i  ^p right)^1p\\n\\nwith a_i the entries of A and n its length.\\n\\np can assume any numeric value (even though not all values produce a mathematically valid vector norm). In particular, norm(A, Inf) returns the largest value in abs(A), whereas norm(A, -Inf) returns the smallest.\\n\\nExample\\n\\njulia> v = [3, -2, 6]\\n3-element Array{Int64,1}:\\n  3\\n -2\\n  6\\n\\njulia> norm(v)\\n7.0\\n\\njulia> norm(v, Inf)\\n6.0\\n\\n\\n\\nnorm(A::AbstractMatrix, p::Real=2)\\n\\nFor matrices, the matrix norm induced by the vector p-norm is used, where valid values of p are 1, 2, or Inf. (Note that for sparse matrices, p=2 is currently not implemented.) Use vecnorm to compute the Frobenius norm.\\n\\nWhen p=1, the matrix norm is the maximum absolute column sum of A:\\n\\nA_1 = max_1  j  n sum_i=1^m  a_ij \\n\\nwith a_ij the entries of A, and m and n its dimensions.\\n\\nWhen p=2, the matrix norm is the spectral norm, equal to the largest singular value of A.\\n\\nWhen p=Inf, the matrix norm is the maximum absolute row sum of A:\\n\\nA_infty = max_1  i  m sum _j=1^n  a_ij \\n\\nExample\\n\\njulia> A = [1 -2 -3; 2 3 -1]\\n2\u00d73 Array{Int64,2}:\\n 1  -2  -3\\n 2   3  -1\\n\\njulia> norm(A, Inf)\\n6.0\\n\\n\\n\\nnorm(x::Number, p::Real=2)\\n\\nFor numbers, return left( x^p right)^1p. This is equivalent to vecnorm.\\n\\n\\n\\nnorm(A::RowVector, q::Real=2)\\n\\nFor row vectors, return the q-norm of A, which is equivalent to the p-norm with value p = q/(q-1). They coincide at p = q = 2.\\n\\nThe difference in norm between a vector space and its dual arises to preserve the relationship between duality and the inner product, and the result is consistent with the p-norm of 1 \u00d7 n matrix.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.vecnorm\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.vecnorm\",\n    \"category\": \"Function\",\n    \"text\": \"vecnorm(A, p::Real=2)\\n\\nFor any iterable container A (including arrays of any dimension) of numbers (or any element type for which norm is defined), compute the p-norm (defaulting to p=2) as if A were a vector of the corresponding length.\\n\\nThe p-norm is defined as:\\n\\nA_p = left( sum_i=1^n  a_i  ^p right)^1p\\n\\nwith a_i the entries of A and n its length.\\n\\np can assume any numeric value (even though not all values produce a mathematically valid vector norm). In particular, vecnorm(A, Inf) returns the largest value in abs(A), whereas vecnorm(A, -Inf) returns the smallest. If A is a matrix and p=2, then this is equivalent to the Frobenius norm.\\n\\nExample\\n\\njulia> vecnorm([1 2 3; 4 5 6; 7 8 9])\\n16.881943016134134\\n\\njulia> vecnorm([1 2 3 4 5 6 7 8 9])\\n16.881943016134134\\n\\n\\n\\nvecnorm(x::Number, p::Real=2)\\n\\nFor numbers, return left( x^p right) ^1p.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.normalize!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.normalize!\",\n    \"category\": \"Function\",\n    \"text\": \"normalize!(v::AbstractVector, p::Real=2)\\n\\nNormalize the vector v in-place so that its p-norm equals unity, i.e. norm(v, p) == 1. See also normalize and vecnorm.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.normalize\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.normalize\",\n    \"category\": \"Function\",\n    \"text\": \"normalize(v::AbstractVector, p::Real=2)\\n\\nNormalize the vector v so that its p-norm equals unity, i.e. norm(v, p) == vecnorm(v, p) == 1. See also normalize! and vecnorm.\\n\\nExamples\\n\\njulia> a = [1,2,4];\\n\\njulia> b = normalize(a)\\n3-element Array{Float64,1}:\\n 0.218218\\n 0.436436\\n 0.872872\\n\\njulia> norm(b)\\n1.0\\n\\njulia> c = normalize(a, 1)\\n3-element Array{Float64,1}:\\n 0.142857\\n 0.285714\\n 0.571429\\n\\njulia> norm(c, 1)\\n1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.cond\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.cond\",\n    \"category\": \"Function\",\n    \"text\": \"cond(M, p::Real=2)\\n\\nCondition number of the matrix M, computed using the operator p-norm. Valid values for p are 1, 2 (default), or Inf.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.condskeel\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.condskeel\",\n    \"category\": \"Function\",\n    \"text\": \"condskeel(M, [x, p::Real=Inf])\\n\\nkappa_S(M p) = leftVert leftvert M rightvert leftvert M^-1 rightvert rightVert_p \\nkappa_S(M x p) = leftVert leftvert M rightvert leftvert M^-1 rightvert leftvert x rightvert rightVert_p\\n\\nSkeel condition number kappa_S of the matrix M, optionally with respect to the vector x, as computed using the operator p-norm. leftvert M rightvert denotes the matrix of (entry wise) absolute values of M; leftvert M rightvert_ij = leftvert M_ij rightvert. Valid values for p are 1, 2 and Inf (default).\\n\\nThis quantity is also known in the literature as the Bauer condition number, relative condition number, or componentwise relative condition number.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.trace\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.trace\",\n    \"category\": \"Function\",\n    \"text\": \"trace(M)\\n\\nMatrix trace. Sums the diagonal elements of M.\\n\\nExample\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> trace(A)\\n5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.det\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.det\",\n    \"category\": \"Function\",\n    \"text\": \"det(M)\\n\\nMatrix determinant.\\n\\nExample\\n\\njulia> M = [1 0; 2 2]\\n2\u00d72 Array{Int64,2}:\\n 1  0\\n 2  2\\n\\njulia> det(M)\\n2.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.logdet\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.logdet\",\n    \"category\": \"Function\",\n    \"text\": \"logdet(M)\\n\\nLog of matrix determinant. Equivalent to log(det(M)), but may provide increased accuracy and/or speed.\\n\\nExamples\\n\\njulia> M = [1 0; 2 2]\\n2\u00d72 Array{Int64,2}:\\n 1  0\\n 2  2\\n\\njulia> logdet(M)\\n0.6931471805599453\\n\\njulia> logdet(eye(3))\\n0.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.logabsdet\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.logabsdet\",\n    \"category\": \"Function\",\n    \"text\": \"logabsdet(M)\\n\\nLog of absolute value of matrix determinant. Equivalent to (log(abs(det(M))), sign(det(M))), but may provide increased accuracy and/or speed.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.inv\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.inv\",\n    \"category\": \"Function\",\n    \"text\": \"inv(M)\\n\\nMatrix inverse. Computes matrix N such that M * N = I, where I is the identity matrix. Computed by solving the left-division N = M \\\\ I.\\n\\nExample\\n\\njulia> M = [2 5; 1 3]\\n2\u00d72 Array{Int64,2}:\\n 2  5\\n 1  3\\n\\njulia> N = inv(M)\\n2\u00d72 Array{Float64,2}:\\n  3.0  -5.0\\n -1.0   2.0\\n\\njulia> M*N == N*M == eye(2)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.pinv\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.pinv\",\n    \"category\": \"Function\",\n    \"text\": \"pinv(M[, tol::Real])\\n\\nComputes the Moore-Penrose pseudoinverse.\\n\\nFor matrices M with floating point elements, it is convenient to compute the pseudoinverse by inverting only singular values above a given threshold, tol.\\n\\nThe optimal choice of tol varies both with the value of M and the intended application of the pseudoinverse. The default value of tol is eps(real(float(one(eltype(M)))))*maximum(size(A)), which is essentially machine epsilon for the real part of a matrix element multiplied by the larger matrix dimension. For inverting dense ill-conditioned matrices in a least-squares sense, tol = sqrt(eps(real(float(one(eltype(M)))))) is recommended.\\n\\nFor more information, see [issue8859], [B96], [S84], [KY88].\\n\\nExample\\n\\njulia> M = [1.5 1.3; 1.2 1.9]\\n2\u00d72 Array{Float64,2}:\\n 1.5  1.3\\n 1.2  1.9\\n\\njulia> N = pinv(M)\\n2\u00d72 Array{Float64,2}:\\n  1.47287   -1.00775\\n -0.930233   1.16279\\n\\njulia> M * N\\n2\u00d72 Array{Float64,2}:\\n 1.0          -2.22045e-16\\n 4.44089e-16   1.0\\n\\n[issue8859]: Issue 8859, \\\"Fix least squares\\\", https://github.com/JuliaLang/julia/pull/8859\\n\\n[B96]: \u00c5ke Bj\u00f6rck, \\\"Numerical Methods for Least Squares Problems\\\",  SIAM Press, Philadelphia, 1996, \\\"Other Titles in Applied Mathematics\\\", Vol. 51. doi:10.1137/1.9781611971484\\n\\n[S84]: G. W. Stewart, \\\"Rank Degeneracy\\\", SIAM Journal on Scientific and Statistical Computing, 5(2), 1984, 403-413. doi:10.1137/0905030\\n\\n[KY88]: Konstantinos Konstantinides and Kung Yao, \\\"Statistical analysis of effective singular values in matrix rank determination\\\", IEEE Transactions on Acoustics, Speech and Signal Processing, 36(5), 1988, 757-763. doi:10.1109/29.1585\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.nullspace\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.nullspace\",\n    \"category\": \"Function\",\n    \"text\": \"nullspace(M)\\n\\nBasis for nullspace of M.\\n\\nExample\\n\\njulia> M = [1 0 0; 0 1 0; 0 0 0]\\n3\u00d73 Array{Int64,2}:\\n 1  0  0\\n 0  1  0\\n 0  0  0\\n\\njulia> nullspace(M)\\n3\u00d71 Array{Float64,2}:\\n 0.0\\n 0.0\\n 1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.repmat\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.repmat\",\n    \"category\": \"Function\",\n    \"text\": \"repmat(A, m::Integer, n::Integer=1)\\n\\nConstruct a matrix by repeating the given matrix (or vector) m times in dimension 1 and n times in dimension 2.\\n\\nExamples\\n\\njulia> repmat([1, 2, 3], 2)\\n6-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 1\\n 2\\n 3\\n\\njulia> repmat([1, 2, 3], 2, 3)\\n6\u00d73 Array{Int64,2}:\\n 1  1  1\\n 2  2  2\\n 3  3  3\\n 1  1  1\\n 2  2  2\\n 3  3  3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.repeat\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.repeat\",\n    \"category\": \"Function\",\n    \"text\": \"repeat(A::AbstractArray; inner=ntuple(x->1, ndims(A)), outer=ntuple(x->1, ndims(A)))\\n\\nConstruct an array by repeating the entries of A. The i-th element of inner specifies the number of times that the individual entries of the i-th dimension of A should be repeated. The i-th element of outer specifies the number of times that a slice along the i-th dimension of A should be repeated. If inner or outer are omitted, no repetition is performed.\\n\\nExamples\\n\\njulia> repeat(1:2, inner=2)\\n4-element Array{Int64,1}:\\n 1\\n 1\\n 2\\n 2\\n\\njulia> repeat(1:2, outer=2)\\n4-element Array{Int64,1}:\\n 1\\n 2\\n 1\\n 2\\n\\njulia> repeat([1 2; 3 4], inner=(2, 1), outer=(1, 3))\\n4\u00d76 Array{Int64,2}:\\n 1  2  1  2  1  2\\n 1  2  1  2  1  2\\n 3  4  3  4  3  4\\n 3  4  3  4  3  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.kron\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.kron\",\n    \"category\": \"Function\",\n    \"text\": \"kron(A, B)\\n\\nKronecker tensor product of two vectors or two matrices.\\n\\nExample\\n\\njulia> A = [1 2; 3 4]\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 3  4\\n\\njulia> B = [im 1; 1 -im]\\n2\u00d72 Array{Complex{Int64},2}:\\n 0+1im  1+0im\\n 1+0im  0-1im\\n\\njulia> kron(A, B)\\n4\u00d74 Array{Complex{Int64},2}:\\n 0+1im  1+0im  0+2im  2+0im\\n 1+0im  0-1im  2+0im  0-2im\\n 0+3im  3+0im  0+4im  4+0im\\n 3+0im  0-3im  4+0im  0-4im\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.SparseArrays.blkdiag\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.SparseArrays.blkdiag\",\n    \"category\": \"Function\",\n    \"text\": \"blkdiag(A...)\\n\\nConcatenate matrices block-diagonally. Currently only implemented for sparse matrices.\\n\\nExample\\n\\njulia> blkdiag(speye(3), 2*speye(2))\\n5\u00d75 SparseMatrixCSC{Float64,Int64} with 5 stored entries:\\n  [1, 1]  =  1.0\\n  [2, 2]  =  1.0\\n  [3, 3]  =  1.0\\n  [4, 4]  =  2.0\\n  [5, 5]  =  2.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.linreg\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.linreg\",\n    \"category\": \"Function\",\n    \"text\": \"linreg(x, y)\\n\\nPerform simple linear regression using Ordinary Least Squares. Returns a and b such that a + b*x is the closest straight line to the given points (x, y), i.e., such that the squared error between y and a + b*x is minimized.\\n\\nExamples:\\n\\nusing PyPlot\\nx = 1.0:12.0\\ny = [5.5, 6.3, 7.6, 8.8, 10.9, 11.79, 13.48, 15.02, 17.77, 20.81, 22.0, 22.99]\\na, b = linreg(x, y)          # Linear regression\\nplot(x, y, \\\"o\\\")              # Plot (x, y) points\\nplot(x, a + b*x)             # Plot line determined by linear regression\\n\\nSee also:\\n\\n\\\\, cov, std, mean.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.expm\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.expm\",\n    \"category\": \"Function\",\n    \"text\": \"expm(A)\\n\\nCompute the matrix exponential of A, defined by\\n\\ne^A = sum_n=0^infty fracA^nn\\n\\nFor symmetric or Hermitian A, an eigendecomposition (eigfact) is used, otherwise the scaling and squaring algorithm (see [H05]) is chosen.\\n\\n[H05]: Nicholas J. Higham, \\\"The squaring and scaling method for the matrix exponential revisited\\\", SIAM Journal on Matrix Analysis and Applications, 26(4), 2005, 1179-1193. doi:10.1137/090768539\\n\\nExample\\n\\njulia> A = eye(2, 2)\\n2\u00d72 Array{Float64,2}:\\n 1.0  0.0\\n 0.0  1.0\\n\\njulia> expm(A)\\n2\u00d72 Array{Float64,2}:\\n 2.71828  0.0\\n 0.0      2.71828\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.logm\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.logm\",\n    \"category\": \"Function\",\n    \"text\": \"logm(A{T}::StridedMatrix{T})\\n\\nIf A has no negative real eigenvalue, compute the principal matrix logarithm of A, i.e. the unique matrix X such that e^X = A and -pi  Im(lambda)  pi for all the eigenvalues lambda of X. If A has nonpositive eigenvalues, a nonprincipal matrix function is returned whenever possible.\\n\\nIf A is symmetric or Hermitian, its eigendecomposition (eigfact) is used, if A is triangular an improved version of the inverse scaling and squaring method is employed (see [AH12] and [AHR13]). For general matrices, the complex Schur form (schur) is computed and the triangular algorithm is used on the triangular factor.\\n\\n[AH12]: Awad H. Al-Mohy and Nicholas J. Higham, \\\"Improved inverse  scaling and squaring algorithms for the matrix logarithm\\\", SIAM Journal on Scientific Computing, 34(4), 2012, C153-C169. doi:10.1137/110852553\\n\\n[AHR13]: Awad H. Al-Mohy, Nicholas J. Higham and Samuel D. Relton, \\\"Computing the Fr\u00e9chet derivative of the matrix logarithm and estimating the condition number\\\", SIAM Journal on Scientific Computing, 35(4), 2013, C394-C410. doi:10.1137/120885991\\n\\nExample\\n\\njulia> A = 2.7182818 * eye(2)\\n2\u00d72 Array{Float64,2}:\\n 2.71828  0.0\\n 0.0      2.71828\\n\\njulia> logm(A)\\n2\u00d72 Symmetric{Float64,Array{Float64,2}}:\\n 1.0  0.0\\n 0.0  1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.sqrtm\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.sqrtm\",\n    \"category\": \"Function\",\n    \"text\": \"sqrtm(A)\\n\\nIf A has no negative real eigenvalues, compute the principal matrix square root of A, that is the unique matrix X with eigenvalues having positive real part such that X^2 = A. Otherwise, a nonprincipal square root is returned.\\n\\nIf A is symmetric or Hermitian, its eigendecomposition (eigfact) is used to compute the square root. Otherwise, the square root is determined by means of the Bj\u00f6rck-Hammarling method [BH83], which computes the complex Schur form (schur) and then the complex square root of the triangular factor.\\n\\n[BH83]: \u00c5ke Bj\u00f6rck and Sven Hammarling, \\\"A Schur method for the square root of a matrix\\\", Linear Algebra and its Applications, 52-53, 1983, 127-140. doi:10.1016/0024-3795(83)80010-X\\n\\nExample\\n\\njulia> A = [4 0; 0 4]\\n2\u00d72 Array{Int64,2}:\\n 4  0\\n 0  4\\n\\njulia> sqrtm(A)\\n2\u00d72 Array{Float64,2}:\\n 2.0  0.0\\n 0.0  2.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.lyap\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.lyap\",\n    \"category\": \"Function\",\n    \"text\": \"lyap(A, C)\\n\\nComputes the solution X to the continuous Lyapunov equation AX + XA' + C = 0, where no eigenvalue of A has a zero real part and no two eigenvalues are negative complex conjugates of each other.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.sylvester\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.sylvester\",\n    \"category\": \"Function\",\n    \"text\": \"sylvester(A, B, C)\\n\\nComputes the solution X to the Sylvester equation AX + XB + C = 0, where A, B and C have compatible dimensions and A and -B have no eigenvalues with equal real part.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.issymmetric\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.issymmetric\",\n    \"category\": \"Function\",\n    \"text\": \"issymmetric(A) -> Bool\\n\\nTest whether a matrix is symmetric.\\n\\nExamples\\n\\njulia> a = [1 2; 2 -1]\\n2\u00d72 Array{Int64,2}:\\n 1   2\\n 2  -1\\n\\njulia> issymmetric(a)\\ntrue\\n\\njulia> b = [1 im; -im 1]\\n2\u00d72 Array{Complex{Int64},2}:\\n 1+0im  0+1im\\n 0-1im  1+0im\\n\\njulia> issymmetric(b)\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.isposdef\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.isposdef\",\n    \"category\": \"Function\",\n    \"text\": \"isposdef(A) -> Bool\\n\\nTest whether a matrix is positive definite.\\n\\nExample\\n\\njulia> A = [1 2; 2 50]\\n2\u00d72 Array{Int64,2}:\\n 1   2\\n 2  50\\n\\njulia> isposdef(A)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.isposdef!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.isposdef!\",\n    \"category\": \"Function\",\n    \"text\": \"isposdef!(A) -> Bool\\n\\nTest whether a matrix is positive definite, overwriting A in the process.\\n\\nExample\\n\\njulia> A = [1. 2.; 2. 50.];\\n\\njulia> isposdef!(A)\\ntrue\\n\\njulia> A\\n2\u00d72 Array{Float64,2}:\\n 1.0  2.0\\n 2.0  6.78233\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.istril\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.istril\",\n    \"category\": \"Function\",\n    \"text\": \"istril(A) -> Bool\\n\\nTest whether a matrix is lower triangular.\\n\\nExamples\\n\\njulia> a = [1 2; 2 -1]\\n2\u00d72 Array{Int64,2}:\\n 1   2\\n 2  -1\\n\\njulia> istril(a)\\nfalse\\n\\njulia> b = [1 0; -im -1]\\n2\u00d72 Array{Complex{Int64},2}:\\n 1+0im   0+0im\\n 0-1im  -1+0im\\n\\njulia> istril(b)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.istriu\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.istriu\",\n    \"category\": \"Function\",\n    \"text\": \"istriu(A) -> Bool\\n\\nTest whether a matrix is upper triangular.\\n\\nExamples\\n\\njulia> a = [1 2; 2 -1]\\n2\u00d72 Array{Int64,2}:\\n 1   2\\n 2  -1\\n\\njulia> istriu(a)\\nfalse\\n\\njulia> b = [1 im; 0 -1]\\n2\u00d72 Array{Complex{Int64},2}:\\n 1+0im   0+1im\\n 0+0im  -1+0im\\n\\njulia> istriu(b)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.isdiag\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.isdiag\",\n    \"category\": \"Function\",\n    \"text\": \"isdiag(A) -> Bool\\n\\nTest whether a matrix is diagonal.\\n\\nExamples\\n\\njulia> a = [1 2; 2 -1]\\n2\u00d72 Array{Int64,2}:\\n 1   2\\n 2  -1\\n\\njulia> isdiag(a)\\nfalse\\n\\njulia> b = [im 0; 0 -im]\\n2\u00d72 Array{Complex{Int64},2}:\\n 0+1im  0+0im\\n 0+0im  0-1im\\n\\njulia> isdiag(b)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.ishermitian\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.ishermitian\",\n    \"category\": \"Function\",\n    \"text\": \"ishermitian(A) -> Bool\\n\\nTest whether a matrix is Hermitian.\\n\\nExamples\\n\\njulia> a = [1 2; 2 -1]\\n2\u00d72 Array{Int64,2}:\\n 1   2\\n 2  -1\\n\\njulia> ishermitian(a)\\ntrue\\n\\njulia> b = [1 im; -im 1]\\n2\u00d72 Array{Complex{Int64},2}:\\n 1+0im  0+1im\\n 0-1im  1+0im\\n\\njulia> ishermitian(b)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.RowVector\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.RowVector\",\n    \"category\": \"Type\",\n    \"text\": \"RowVector(vector)\\n\\nA lazy-view wrapper of an AbstractVector, which turns a length-n vector into a 1\u00d7n shaped row vector and represents the transpose of a vector (the elements are also transposed recursively). This type is usually constructed (and unwrapped) via the transpose function or .' operator (or related ctranspose or ' operator).\\n\\nBy convention, a vector can be multiplied by a matrix on its left (A * v) whereas a row vector can be multiplied by a matrix on its right (such that v.' * A = (A.' * v).'). It differs from a 1\u00d7n-sized matrix by the facts that its transpose returns a vector and the inner product v1.' * v2 returns a scalar, but will otherwise behave similarly.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.ConjArray\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.ConjArray\",\n    \"category\": \"Type\",\n    \"text\": \"ConjArray(array)\\n\\nA lazy-view wrapper of an AbstractArray, taking the elementwise complex conjugate. This type is usually constructed (and unwrapped) via the conj function (or related ctranspose), but currently this is the default behavior for RowVector only. For other arrays, the ConjArray constructor can be used directly.\\n\\nExamples\\n\\njulia> [1+im, 1-im]'\\n1\u00d72 RowVector{Complex{Int64},ConjArray{Complex{Int64},1,Array{Complex{Int64},1}}}:\\n 1-1im  1+1im\\n\\njulia> ConjArray([1+im 0; 0 1-im])\\n2\u00d72 ConjArray{Complex{Int64},2,Array{Complex{Int64},2}}:\\n 1-1im  0+0im\\n 0+0im  1+1im\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.transpose\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.transpose\",\n    \"category\": \"Function\",\n    \"text\": \"transpose(A::AbstractMatrix)\\n\\nThe transposition operator (.').\\n\\nExample\\n\\njulia> A = [1 2 3; 4 5 6; 7 8 9]\\n3\u00d73 Array{Int64,2}:\\n 1  2  3\\n 4  5  6\\n 7  8  9\\n\\njulia> transpose(A)\\n3\u00d73 Array{Int64,2}:\\n 1  4  7\\n 2  5  8\\n 3  6  9\\n\\n\\n\\ntranspose(v::AbstractVector)\\n\\nThe transposition operator (.').\\n\\nExample\\n\\njulia> v = [1,2,3]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> transpose(v)\\n1\u00d73 RowVector{Int64,Array{Int64,1}}:\\n 1  2  3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.transpose!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.transpose!\",\n    \"category\": \"Function\",\n    \"text\": \"transpose!(dest,src)\\n\\nTranspose array src and store the result in the preallocated array dest, which should have a size corresponding to (size(src,2),size(src,1)). No in-place transposition is supported and unexpected results will happen if src and dest have overlapping memory regions.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.ctranspose\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.ctranspose\",\n    \"category\": \"Function\",\n    \"text\": \"ctranspose(A)\\n\\nThe conjugate transposition operator (').\\n\\nExample\\n\\njulia> A =  [3+2im 9+2im; 8+7im  4+6im]\\n2\u00d72 Array{Complex{Int64},2}:\\n 3+2im  9+2im\\n 8+7im  4+6im\\n\\njulia> ctranspose(A)\\n2\u00d72 Array{Complex{Int64},2}:\\n 3-2im  8-7im\\n 9-2im  4-6im\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.ctranspose!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.ctranspose!\",\n    \"category\": \"Function\",\n    \"text\": \"ctranspose!(dest,src)\\n\\nConjugate transpose array src and store the result in the preallocated array dest, which should have a size corresponding to (size(src,2),size(src,1)). No in-place transposition is supported and unexpected results will happen if src and dest have overlapping memory regions.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eigs-Tuple{Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eigs\",\n    \"category\": \"Method\",\n    \"text\": \"eigs(A; nev=6, ncv=max(20,2*nev+1), which=:LM, tol=0.0, maxiter=300, sigma=nothing, ritzvec=true, v0=zeros((0,))) -> (d,[v,],nconv,niter,nmult,resid)\\n\\nComputes eigenvalues d of A using implicitly restarted Lanczos or Arnoldi iterations for real symmetric or general nonsymmetric matrices respectively.\\n\\nThe following keyword arguments are supported:\\n\\nnev: Number of eigenvalues\\nncv: Number of Krylov vectors used in the computation; should satisfy nev+1 <= ncv <= n for real symmetric problems and nev+2 <= ncv <= n for other problems, where n is the size of the input matrix A. The default is ncv = max(20,2*nev+1). Note that these restrictions limit the input matrix A to be of dimension at least 2.\\nwhich: type of eigenvalues to compute. See the note below.\\n\\nwhich type of eigenvalues\\n:LM eigenvalues of largest magnitude (default)\\n:SM eigenvalues of smallest magnitude\\n:LR eigenvalues of largest real part\\n:SR eigenvalues of smallest real part\\n:LI eigenvalues of largest imaginary part (nonsymmetric or complex A only)\\n:SI eigenvalues of smallest imaginary part (nonsymmetric or complex A only)\\n:BE compute half of the eigenvalues from each end of the spectrum, biased in favor of the high end. (real symmetric A only)\\n\\ntol: parameter defining the relative tolerance for convergence of Ritz values (eigenvalue estimates).    A Ritz value  is considered converged when its associated residual    is less than or equal to the product of tol and max(^23 ),    where \u025b = eps(real(eltype(A)))/2 is LAPACK's machine epsilon.    The residual associated with  and its corresponding Ritz vector v    is defined as the norm Av - v.    The specified value of tol should be positive; otherwise, it is ignored    and  is used instead.    Default: .\\nmaxiter: Maximum number of iterations (default = 300)\\nsigma: Specifies the level shift used in inverse iteration. If nothing (default), defaults to ordinary (forward) iterations. Otherwise, find eigenvalues close to sigma using shift and invert iterations.\\nritzvec: Returns the Ritz vectors v (eigenvectors) if true\\nv0: starting vector from which to start the iterations\\n\\neigs returns the nev requested eigenvalues in d, the corresponding Ritz vectors v (only if ritzvec=true), the number of converged eigenvalues nconv, the number of iterations niter and the number of matrix vector multiplications nmult, as well as the final residual vector resid.\\n\\nExample\\n\\njulia> A = spdiagm(1:4);\\n\\njulia> \u03bb, \u03d5 = eigs(A, nev = 2);\\n\\njulia> \u03bb\\n2-element Array{Float64,1}:\\n 4.0\\n 3.0\\n\\nnote: Note\\nThe sigma and which keywords interact: the description of eigenvalues searched for by which do not necessarily refer to the eigenvalues of A, but rather the linear operator constructed by the specification of the iteration mode implied by sigma.sigma iteration mode which refers to eigenvalues of\\nnothing ordinary (forward) A\\nreal or complex inverse with level shift sigma (A - sigma I )^-1\\n\\nnote: Note\\nAlthough tol has a default value, the best choice depends strongly on the matrix A. We recommend that users _always_ specify a value for tol which suits their specific needs.For details of how the errors in the computed eigenvalues are estimated, see:B. N. Parlett, \\\"The Symmetric Eigenvalue Problem\\\", SIAM: Philadelphia, 2/e (1998), Ch. 13.2, \\\"Accessing Accuracy in Lanczos Problems\\\", pp. 290-292 ff.\\nR. B. Lehoucq and D. C. Sorensen, \\\"Deflation Techniques for an Implicitly Restarted Arnoldi Iteration\\\", SIAM Journal on Matrix Analysis and Applications (1996), 17(4), 789\u2013821.  doi:10.1137/S0895479895281484\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.eigs-Tuple{Any,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.eigs\",\n    \"category\": \"Method\",\n    \"text\": \"eigs(A, B; nev=6, ncv=max(20,2*nev+1), which=:LM, tol=0.0, maxiter=300, sigma=nothing, ritzvec=true, v0=zeros((0,))) -> (d,[v,],nconv,niter,nmult,resid)\\n\\nComputes generalized eigenvalues d of A and B using implicitly restarted Lanczos or Arnoldi iterations for real symmetric or general nonsymmetric matrices respectively.\\n\\nThe following keyword arguments are supported:\\n\\nnev: Number of eigenvalues\\nncv: Number of Krylov vectors used in the computation; should satisfy nev+1 <= ncv <= n for real symmetric problems and nev+2 <= ncv <= n for other problems, where n is the size of the input matrices A and B. The default is ncv = max(20,2*nev+1). Note that these restrictions limit the input matrix A to be of dimension at least 2.\\nwhich: type of eigenvalues to compute. See the note below.\\n\\nwhich type of eigenvalues\\n:LM eigenvalues of largest magnitude (default)\\n:SM eigenvalues of smallest magnitude\\n:LR eigenvalues of largest real part\\n:SR eigenvalues of smallest real part\\n:LI eigenvalues of largest imaginary part (nonsymmetric or complex A only)\\n:SI eigenvalues of smallest imaginary part (nonsymmetric or complex A only)\\n:BE compute half of the eigenvalues from each end of the spectrum, biased in favor of the high end. (real symmetric A only)\\n\\ntol: relative tolerance used in the convergence criterion for eigenvalues, similar to    tol in the eigs(A) method for the ordinary eigenvalue    problem, but effectively for the eigenvalues of B^-1 A instead of A.    See the documentation for the ordinary eigenvalue problem in    eigs(A) and the accompanying note about tol.\\nmaxiter: Maximum number of iterations (default = 300)\\nsigma: Specifies the level shift used in inverse iteration. If nothing (default), defaults to ordinary (forward) iterations. Otherwise, find eigenvalues close to sigma using shift and invert iterations.\\nritzvec: Returns the Ritz vectors v (eigenvectors) if true\\nv0: starting vector from which to start the iterations\\n\\neigs returns the nev requested eigenvalues in d, the corresponding Ritz vectors v (only if ritzvec=true), the number of converged eigenvalues nconv, the number of iterations niter and the number of matrix vector multiplications nmult, as well as the final residual vector resid.\\n\\nExample\\n\\njulia> A = speye(4, 4); B = spdiagm(1:4);\\n\\njulia> \u03bb, \u03d5 = eigs(A, B, nev = 2);\\n\\njulia> \u03bb\\n2-element Array{Float64,1}:\\n 1.0\\n 0.5\\n\\nnote: Note\\nThe sigma and which keywords interact: the description of eigenvalues searched for by which do not necessarily refer to the eigenvalue problem Av = Bvlambda, but rather the linear operator constructed by the specification of the iteration mode implied by sigma.sigma iteration mode which refers to the problem\\nnothing ordinary (forward) Av = Bvlambda\\nreal or complex inverse with level shift sigma (A - sigma B )^-1B = vnu\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.svds\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.svds\",\n    \"category\": \"Function\",\n    \"text\": \"svds(A; nsv=6, ritzvec=true, tol=0.0, maxiter=1000, ncv=2*nsv, u0=zeros((0,)), v0=zeros((0,))) -> (SVD([left_sv,] s, [right_sv,]), nconv, niter, nmult, resid)\\n\\nComputes the largest singular values s of A using implicitly restarted Lanczos iterations derived from eigs.\\n\\nInputs\\n\\nA: Linear operator whose singular values are desired. A may be represented as a subtype of AbstractArray, e.g., a sparse matrix, or any other type supporting the four methods size(A), eltype(A), A * vector, and A' * vector.\\nnsv: Number of singular values. Default: 6.\\nritzvec: If true, return the left and right singular vectors left_sv and right_sv.  If false, omit the singular vectors. Default: true.\\ntol: tolerance, see eigs.\\nmaxiter: Maximum number of iterations, see eigs. Default: 1000.\\nncv: Maximum size of the Krylov subspace, see eigs (there called nev). Default: 2*nsv.\\nu0: Initial guess for the first left Krylov vector. It may have length m (the first dimension of A), or 0.\\nv0: Initial guess for the first right Krylov vector. It may have length n (the second dimension of A), or 0.\\n\\nOutputs\\n\\nsvd: An SVD object containing the left singular vectors, the requested values, and the right singular vectors. If ritzvec = false, the left and right singular vectors will be empty.\\nnconv: Number of converged singular values.\\nniter: Number of iterations.\\nnmult: Number of matrix\u2013vector products used.\\nresid: Final residual vector.\\n\\nExample\\n\\njulia> A = spdiagm(1:4);\\n\\njulia> s = svds(A, nsv = 2)[1];\\n\\njulia> s[:S]\\n2-element Array{Float64,1}:\\n 4.0\\n 3.0\\n\\nnote: Implementation\\nsvds(A) is formally equivalent to calling eigs to perform implicitly restarted Lanczos tridiagonalization on the Hermitian matrix beginpmatrix 0  A^prime  A  0 endpmatrix, whose eigenvalues are plus and minus the singular values of A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.peakflops\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.peakflops\",\n    \"category\": \"Function\",\n    \"text\": \"peakflops(n::Integer=2000; parallel::Bool=false)\\n\\npeakflops computes the peak flop rate of the computer by using double precision gemm!. By default, if no arguments are specified, it multiplies a matrix of size n x n, where n = 2000. If the underlying BLAS is using multiple threads, higher flop rates are realized. The number of BLAS threads can be set with BLAS.set_num_threads(n).\\n\\nIf the keyword argument parallel is set to true, peakflops is run in parallel on all the worker processors. The flop rate of the entire parallel computer is returned. When running in parallel, only 1 BLAS thread is used. The argument n still refers to the size of the problem that is solved on each processor.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Standard-Functions-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Standard Functions\",\n    \"category\": \"section\",\n    \"text\": \"Linear algebra functions in Julia are largely implemented by calling functions from LAPACK.  Sparse factorizations call functions from SuiteSparse.Base.:*(::AbstractArray, ::AbstractArray)\\nBase.:\\\\(::AbstractArray, ::Any)\\nBase.LinAlg.dot\\nBase.LinAlg.vecdot\\nBase.LinAlg.cross\\nBase.LinAlg.factorize\\nBase.LinAlg.Diagonal\\nBase.LinAlg.Bidiagonal\\nBase.LinAlg.SymTridiagonal\\nBase.LinAlg.Tridiagonal\\nBase.LinAlg.Symmetric\\nBase.LinAlg.Hermitian\\nBase.LinAlg.LowerTriangular\\nBase.LinAlg.UpperTriangular\\nBase.LinAlg.lu\\nBase.LinAlg.lufact\\nBase.LinAlg.lufact!\\nBase.LinAlg.chol\\nBase.LinAlg.cholfact\\nBase.LinAlg.cholfact!\\nBase.LinAlg.lowrankupdate\\nBase.LinAlg.lowrankdowndate\\nBase.LinAlg.lowrankupdate!\\nBase.LinAlg.lowrankdowndate!\\nBase.LinAlg.ldltfact\\nBase.LinAlg.ldltfact!\\nBase.LinAlg.qr\\nBase.LinAlg.qr!\\nBase.LinAlg.qrfact\\nBase.LinAlg.qrfact!\\nBase.LinAlg.QR\\nBase.LinAlg.QRCompactWY\\nBase.LinAlg.QRPivoted\\nBase.LinAlg.lqfact!\\nBase.LinAlg.lqfact\\nBase.LinAlg.lq\\nBase.LinAlg.bkfact\\nBase.LinAlg.bkfact!\\nBase.LinAlg.eig\\nBase.LinAlg.eigvals\\nBase.LinAlg.eigvals!\\nBase.LinAlg.eigmax\\nBase.LinAlg.eigmin\\nBase.LinAlg.eigvecs\\nBase.LinAlg.eigfact\\nBase.LinAlg.eigfact!\\nBase.LinAlg.hessfact\\nBase.LinAlg.hessfact!\\nBase.LinAlg.schurfact\\nBase.LinAlg.schurfact!\\nBase.LinAlg.schur\\nBase.LinAlg.ordschur\\nBase.LinAlg.ordschur!\\nBase.LinAlg.svdfact\\nBase.LinAlg.svdfact!\\nBase.LinAlg.svd\\nBase.LinAlg.svdvals\\nBase.LinAlg.Givens\\nBase.LinAlg.givens\\nBase.LinAlg.triu\\nBase.LinAlg.triu!\\nBase.LinAlg.tril\\nBase.LinAlg.tril!\\nBase.LinAlg.diagind\\nBase.LinAlg.diag\\nBase.LinAlg.diagm\\nBase.LinAlg.scale!\\nBase.LinAlg.rank\\nBase.LinAlg.norm\\nBase.LinAlg.vecnorm\\nBase.LinAlg.normalize!\\nBase.LinAlg.normalize\\nBase.LinAlg.cond\\nBase.LinAlg.condskeel\\nBase.LinAlg.trace\\nBase.LinAlg.det\\nBase.LinAlg.logdet\\nBase.LinAlg.logabsdet\\nBase.inv\\nBase.LinAlg.pinv\\nBase.LinAlg.nullspace\\nBase.repmat\\nBase.repeat\\nBase.kron\\nBase.SparseArrays.blkdiag\\nBase.LinAlg.linreg\\nBase.LinAlg.expm\\nBase.LinAlg.logm\\nBase.LinAlg.sqrtm\\nBase.LinAlg.lyap\\nBase.LinAlg.sylvester\\nBase.LinAlg.issymmetric\\nBase.LinAlg.isposdef\\nBase.LinAlg.isposdef!\\nBase.LinAlg.istril\\nBase.LinAlg.istriu\\nBase.LinAlg.isdiag\\nBase.LinAlg.ishermitian\\nBase.LinAlg.RowVector\\nBase.LinAlg.ConjArray\\nBase.transpose\\nBase.transpose!\\nBase.ctranspose\\nBase.ctranspose!\\nBase.LinAlg.eigs(::Any)\\nBase.LinAlg.eigs(::Any, ::Any)\\nBase.LinAlg.svds\\nBase.LinAlg.peakflops\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.A_ldiv_B!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.A_ldiv_B!\",\n    \"category\": \"Function\",\n    \"text\": \"A_ldiv_B!([Y,] A, B) -> Y\\n\\nCompute A \\\\ B in-place and store the result in Y, returning the result. If only two arguments are passed, then A_ldiv_B!(A, B) overwrites B with the result.\\n\\nThe argument A should not be a matrix.  Rather, instead of matrices it should be a factorization object (e.g. produced by factorize or cholfact). The reason for this is that factorization itself is both expensive and typically allocates memory (although it can also be done in-place via, e.g., lufact!), and performance-critical situations requiring A_ldiv_B! usually also require fine-grained control over the factorization of A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.A_ldiv_Bc\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.A_ldiv_Bc\",\n    \"category\": \"Function\",\n    \"text\": \"A_ldiv_Bc(A, B)\\n\\nFor matrices or vectors A and B, calculates A \\\\ B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.A_ldiv_Bt\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.A_ldiv_Bt\",\n    \"category\": \"Function\",\n    \"text\": \"A_ldiv_Bt(A, B)\\n\\nFor matrices or vectors A and B, calculates A \\\\ B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.A_mul_B!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.A_mul_B!\",\n    \"category\": \"Function\",\n    \"text\": \"A_mul_B!(Y, A, B) -> Y\\n\\nCalculates the matrix-matrix or matrix-vector product AB and stores the result in Y, overwriting the existing value of Y. Note that Y must not be aliased with either A or B.\\n\\nExample\\n\\njulia> A=[1.0 2.0; 3.0 4.0]; B=[1.0 1.0; 1.0 1.0]; Y = similar(B); A_mul_B!(Y, A, B);\\n\\njulia> Y\\n2\u00d72 Array{Float64,2}:\\n 3.0  3.0\\n 7.0  7.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.A_mul_Bc\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.A_mul_Bc\",\n    \"category\": \"Function\",\n    \"text\": \"A_mul_Bc(A, B)\\n\\nFor matrices or vectors A and B, calculates AB.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.A_mul_Bt\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.A_mul_Bt\",\n    \"category\": \"Function\",\n    \"text\": \"A_mul_Bt(A, B)\\n\\nFor matrices or vectors A and B, calculates AB.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.A_rdiv_Bc\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.A_rdiv_Bc\",\n    \"category\": \"Function\",\n    \"text\": \"A_rdiv_Bc(A, B)\\n\\nFor matrices or vectors A and B, calculates A  B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.A_rdiv_Bt\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.A_rdiv_Bt\",\n    \"category\": \"Function\",\n    \"text\": \"A_rdiv_Bt(A, B)\\n\\nFor matrices or vectors A and B, calculates A  B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.Ac_ldiv_B\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.Ac_ldiv_B\",\n    \"category\": \"Function\",\n    \"text\": \"Ac_ldiv_B(A, B)\\n\\nFor matrices or vectors A and B, calculates A \\\\ B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.Ac_ldiv_B!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.Ac_ldiv_B!\",\n    \"category\": \"Function\",\n    \"text\": \"Ac_ldiv_B!([Y,] A, B) -> Y\\n\\nSimilar to A_ldiv_B!, but return A \\\\ B, computing the result in-place in Y (or overwriting B if Y is not supplied).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.Ac_ldiv_Bc\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.Ac_ldiv_Bc\",\n    \"category\": \"Function\",\n    \"text\": \"Ac_ldiv_Bc(A, B)\\n\\nFor matrices or vectors A and B, calculates A \\\\ B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.Ac_mul_B\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.Ac_mul_B\",\n    \"category\": \"Function\",\n    \"text\": \"Ac_mul_B(A, B)\\n\\nFor matrices or vectors A and B, calculates AB.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.Ac_mul_Bc\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.Ac_mul_Bc\",\n    \"category\": \"Function\",\n    \"text\": \"Ac_mul_Bc(A, B)\\n\\nFor matrices or vectors A and B, calculates A B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.Ac_rdiv_B\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.Ac_rdiv_B\",\n    \"category\": \"Function\",\n    \"text\": \"Ac_rdiv_B(A, B)\\n\\nFor matrices or vectors A and B, calculates A  B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.Ac_rdiv_Bc\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.Ac_rdiv_Bc\",\n    \"category\": \"Function\",\n    \"text\": \"Ac_rdiv_Bc(A, B)\\n\\nFor matrices or vectors A and B, calculates A  B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.At_ldiv_B\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.At_ldiv_B\",\n    \"category\": \"Function\",\n    \"text\": \"At_ldiv_B(A, B)\\n\\nFor matrices or vectors A and B, calculates A \\\\ B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.At_ldiv_B!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.At_ldiv_B!\",\n    \"category\": \"Function\",\n    \"text\": \"At_ldiv_B!([Y,] A, B) -> Y\\n\\nSimilar to A_ldiv_B!, but return A \\\\ B, computing the result in-place in Y (or overwriting B if Y is not supplied).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.At_ldiv_Bt\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.At_ldiv_Bt\",\n    \"category\": \"Function\",\n    \"text\": \"At_ldiv_Bt(A, B)\\n\\nFor matrices or vectors A and B, calculates A \\\\ B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.At_mul_B\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.At_mul_B\",\n    \"category\": \"Function\",\n    \"text\": \"At_mul_B(A, B)\\n\\nFor matrices or vectors A and B, calculates AB.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.At_mul_Bt\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.At_mul_Bt\",\n    \"category\": \"Function\",\n    \"text\": \"At_mul_Bt(A, B)\\n\\nFor matrices or vectors A and B, calculates AB.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.At_rdiv_B\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.At_rdiv_B\",\n    \"category\": \"Function\",\n    \"text\": \"At_rdiv_B(A, B)\\n\\nFor matrices or vectors A and B, calculates A  B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.At_rdiv_Bt\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.At_rdiv_Bt\",\n    \"category\": \"Function\",\n    \"text\": \"At_rdiv_Bt(A, B)\\n\\nFor matrices or vectors A and B, calculates A  B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Low-level-matrix-operations-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Low-level matrix operations\",\n    \"category\": \"section\",\n    \"text\": \"Matrix operations involving transpositions operations like A' \\\\ B are converted by the Julia parser into calls to specially named functions like Ac_ldiv_B. If you want to overload these operations for your own types, then it is useful to know the names of these functions.Also, in many cases there are in-place versions of matrix operations that allow you to supply a pre-allocated output vector or matrix.  This is useful when optimizing critical code in order to avoid the overhead of repeated allocations. These in-place operations are suffixed with ! below (e.g. A_mul_B!) according to the usual Julia convention.Base.LinAlg.A_ldiv_B!\\nBase.A_ldiv_Bc\\nBase.A_ldiv_Bt\\nBase.LinAlg.A_mul_B!\\nBase.A_mul_Bc\\nBase.A_mul_Bt\\nBase.A_rdiv_Bc\\nBase.A_rdiv_Bt\\nBase.Ac_ldiv_B\\nBase.LinAlg.Ac_ldiv_B!\\nBase.Ac_ldiv_Bc\\nBase.Ac_mul_B\\nBase.Ac_mul_Bc\\nBase.Ac_rdiv_B\\nBase.Ac_rdiv_Bc\\nBase.At_ldiv_B\\nBase.LinAlg.At_ldiv_B!\\nBase.At_ldiv_Bt\\nBase.At_mul_B\\nBase.At_mul_Bt\\nBase.At_rdiv_B\\nBase.At_rdiv_Bt\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#BLAS-Functions-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"BLAS Functions\",\n    \"category\": \"section\",\n    \"text\": \"In Julia (as in much of scientific computation), dense linear-algebra operations are based on the LAPACK library, which in turn is built on top of basic linear-algebra building-blocks known as the BLAS. There are highly optimized implementations of BLAS available for every computer architecture, and sometimes in high-performance linear algebra routines it is useful to call the BLAS functions directly.Base.LinAlg.BLAS provides wrappers for some of the BLAS functions. Those BLAS functions that overwrite one of the input arrays have names ending in '!'.  Usually, a BLAS function has four methods defined, for Float64, Float32, Complex128, and Complex64 arrays.\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#stdlib-blas-chars-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"BLAS Character Arguments\",\n    \"category\": \"section\",\n    \"text\": \"Many BLAS functions accept arguments that determine whether to transpose an argument (trans), which triangle of a matrix to reference (uplo or ul), whether the diagonal of a triangular matrix can be assumed to be all ones (dA) or which side of a matrix multiplication the input argument belongs on (side). The possiblities are:\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#stdlib-blas-side-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Multplication Order\",\n    \"category\": \"section\",\n    \"text\": \"side Meaning\\n'L' The argument goes on the left side of a matrix-matrix operation.\\n'R' The argument goes on the right side of a matrix-matrix operation.\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#stdlib-blas-uplo-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Triangle Referencing\",\n    \"category\": \"section\",\n    \"text\": \"uplo/ul Meaning\\n'U' Only the upper triangle of the matrix will be used.\\n'L' Only the lower triangle of the matrix will be used.\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#stdlib-blas-trans-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Transposition Operation\",\n    \"category\": \"section\",\n    \"text\": \"trans/tX Meaning\\n'N' The input matrix X is not transposed or conjugated.\\n'T' The input matrix X will be transposed.\\n'C' The input matrix X will be conjugated and transposed.\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.dotu\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.dotu\",\n    \"category\": \"Function\",\n    \"text\": \"dotu(n, X, incx, Y, incy)\\n\\nDot function for two complex vectors consisting of n elements of array X with stride incx and n elements of array Y with stride incy.\\n\\nExample:\\n\\njulia> Base.BLAS.dotu(10, im*ones(10), 1, complex.(ones(20), ones(20)), 2)\\n-10.0 + 10.0im\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.dotc\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.dotc\",\n    \"category\": \"Function\",\n    \"text\": \"dotc(n, X, incx, U, incy)\\n\\nDot function for two complex vectors, consisting of n elements of array X with stride incx and n elements of array U with stride incy, conjugating the first vector.\\n\\nExample:\\n\\njulia> Base.BLAS.dotc(10, im*ones(10), 1, complex.(ones(20), ones(20)), 2)\\n10.0 - 10.0im\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.blascopy!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.blascopy!\",\n    \"category\": \"Function\",\n    \"text\": \"blascopy!(n, X, incx, Y, incy)\\n\\nCopy n elements of array X with stride incx to array Y with stride incy. Returns Y.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.nrm2\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.nrm2\",\n    \"category\": \"Function\",\n    \"text\": \"nrm2(n, X, incx)\\n\\n2-norm of a vector consisting of n elements of array X with stride incx.\\n\\nExample:\\n\\njulia> Base.BLAS.nrm2(4, ones(8), 2)\\n2.0\\n\\njulia> Base.BLAS.nrm2(1, ones(8), 2)\\n1.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.asum\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.asum\",\n    \"category\": \"Function\",\n    \"text\": \"asum(n, X, incx)\\n\\nSum of the absolute values of the first n elements of array X with stride incx.\\n\\nExample:\\n\\njulia> Base.BLAS.asum(5, im*ones(10), 2)\\n5.0\\n\\njulia> Base.BLAS.asum(2, im*ones(10), 5)\\n2.0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.axpy!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.axpy!\",\n    \"category\": \"Function\",\n    \"text\": \"axpy!(a, X, Y)\\n\\nOverwrite Y with a*X + Y, where a is a scalar. Returns Y.\\n\\nExample:\\n\\njulia> x = [1; 2; 3];\\n\\njulia> y = [4; 5; 6];\\n\\njulia> Base.BLAS.axpy!(2, x, y)\\n3-element Array{Int64,1}:\\n  6\\n  9\\n 12\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.scal!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.scal!\",\n    \"category\": \"Function\",\n    \"text\": \"scal!(n, a, X, incx)\\n\\nOverwrite X with a*X for the first n elements of array X with stride incx. Returns X.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.scal\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.scal\",\n    \"category\": \"Function\",\n    \"text\": \"scal(n, a, X, incx)\\n\\nReturns X scaled by a for the first n elements of array X with stride incx.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.ger!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.ger!\",\n    \"category\": \"Function\",\n    \"text\": \"ger!(alpha, x, y, A)\\n\\nRank-1 update of the matrix A with vectors x and y as alpha*x*y' + A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.syr!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.syr!\",\n    \"category\": \"Function\",\n    \"text\": \"syr!(uplo, alpha, x, A)\\n\\nRank-1 update of the symmetric matrix A with vector x as alpha*x*x.' + A. uplo controls which triangle of A is updated. Returns A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.syrk!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.syrk!\",\n    \"category\": \"Function\",\n    \"text\": \"syrk!(uplo, trans, alpha, A, beta, C)\\n\\nRank-k update of the symmetric matrix C as alpha*A*A.' + beta*C or alpha*A.'*A + beta*C according to trans. Only the uplo triangle of C is used. Returns C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.syrk\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.syrk\",\n    \"category\": \"Function\",\n    \"text\": \"syrk(uplo, trans, alpha, A)\\n\\nReturns either the upper triangle or the lower triangle of A, according to uplo, of alpha*A*A.' or alpha*A.'*A, according to trans.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.her!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.her!\",\n    \"category\": \"Function\",\n    \"text\": \"her!(uplo, alpha, x, A)\\n\\nMethods for complex arrays only. Rank-1 update of the Hermitian matrix A with vector x as alpha*x*x' + A. uplo controls which triangle of A is updated. Returns A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.herk!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.herk!\",\n    \"category\": \"Function\",\n    \"text\": \"herk!(uplo, trans, alpha, A, beta, C)\\n\\nMethods for complex arrays only. Rank-k update of the Hermitian matrix C as alpha*A*A' + beta*C or alpha*A'*A + beta*C according to trans. Only the uplo triangle of C is updated. Returns C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.herk\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.herk\",\n    \"category\": \"Function\",\n    \"text\": \"herk(uplo, trans, alpha, A)\\n\\nMethods for complex arrays only. Returns the uplo triangle of alpha*A*A' or alpha*A'*A, according to trans.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.gbmv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.gbmv!\",\n    \"category\": \"Function\",\n    \"text\": \"gbmv!(trans, m, kl, ku, alpha, A, x, beta, y)\\n\\nUpdate vector y as alpha*A*x + beta*y or alpha*A'*x + beta*y according to trans. The matrix A is a general band matrix of dimension m by size(A,2) with kl sub-diagonals and ku super-diagonals. alpha and beta are scalars. Returns the updated y.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.gbmv\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.gbmv\",\n    \"category\": \"Function\",\n    \"text\": \"gbmv(trans, m, kl, ku, alpha, A, x)\\n\\nReturns alpha*A*x or alpha*A'*x according to trans. The matrix A is a general band matrix of dimension m by size(A,2) with kl sub-diagonals and ku super-diagonals, and alpha is a scalar.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.sbmv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.sbmv!\",\n    \"category\": \"Function\",\n    \"text\": \"sbmv!(uplo, k, alpha, A, x, beta, y)\\n\\nUpdate vector y as alpha*A*x + beta*y where A is a a symmetric band matrix of order size(A,2) with k super-diagonals stored in the argument A. The storage layout for A is described the reference BLAS module, level-2 BLAS at http://www.netlib.org/lapack/explore-html/. Only the uplo triangle of A is used.\\n\\nReturns the updated y.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.sbmv-NTuple{5,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.sbmv\",\n    \"category\": \"Method\",\n    \"text\": \"sbmv(uplo, k, alpha, A, x)\\n\\nReturns alpha*A*x where A is a symmetric band matrix of order size(A,2) with k super-diagonals stored in the argument A. Only the uplo triangle of A is used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.sbmv-NTuple{4,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.sbmv\",\n    \"category\": \"Method\",\n    \"text\": \"sbmv(uplo, k, A, x)\\n\\nReturns A*x where A is a symmetric band matrix of order size(A,2) with k super-diagonals stored in the argument A. Only the uplo triangle of A is used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.gemm!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.gemm!\",\n    \"category\": \"Function\",\n    \"text\": \"gemm!(tA, tB, alpha, A, B, beta, C)\\n\\nUpdate C as alpha*A*B + beta*C or the other three variants according to tA and tB. Returns the updated C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.gemm-NTuple{5,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.gemm\",\n    \"category\": \"Method\",\n    \"text\": \"gemm(tA, tB, alpha, A, B)\\n\\nReturns alpha*A*B or the other three variants according to tA and tB.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.gemm-NTuple{4,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.gemm\",\n    \"category\": \"Method\",\n    \"text\": \"gemm(tA, tB, A, B)\\n\\nReturns A*B or the other three variants according to tA and tB.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.gemv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.gemv!\",\n    \"category\": \"Function\",\n    \"text\": \"gemv!(tA, alpha, A, x, beta, y)\\n\\nUpdate the vector y as alpha*A*x + beta*y or alpha*A'x + beta*y according to tA. alpha and beta are scalars. Returns the updated y.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.gemv-NTuple{4,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.gemv\",\n    \"category\": \"Method\",\n    \"text\": \"gemv(tA, alpha, A, x)\\n\\nReturns alpha*A*x or alpha*A'x according to tA. alpha is a scalar.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.gemv-Tuple{Any,Any,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.gemv\",\n    \"category\": \"Method\",\n    \"text\": \"gemv(tA, A, x)\\n\\nReturns A*x or A'x according to tA.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.symm!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.symm!\",\n    \"category\": \"Function\",\n    \"text\": \"symm!(side, ul, alpha, A, B, beta, C)\\n\\nUpdate C as alpha*A*B + beta*C or alpha*B*A + beta*C according to side. A is assumed to be symmetric. Only the ul triangle of A is used. Returns the updated C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.symm-NTuple{5,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.symm\",\n    \"category\": \"Method\",\n    \"text\": \"symm(side, ul, alpha, A, B)\\n\\nReturns alpha*A*B or alpha*B*A according to side. A is assumed to be symmetric. Only the ul triangle of A is used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.symm-NTuple{4,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.symm\",\n    \"category\": \"Method\",\n    \"text\": \"symm(side, ul, A, B)\\n\\nReturns A*B or B*A according to side. A is assumed to be symmetric. Only the ul triangle of A is used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.symv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.symv!\",\n    \"category\": \"Function\",\n    \"text\": \"symv!(ul, alpha, A, x, beta, y)\\n\\nUpdate the vector y as alpha*A*x + beta*y. A is assumed to be symmetric. Only the ul triangle of A is used. alpha and beta are scalars. Returns the updated y.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.symv-NTuple{4,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.symv\",\n    \"category\": \"Method\",\n    \"text\": \"symv(ul, alpha, A, x)\\n\\nReturns alpha*A*x. A is assumed to be symmetric. Only the ul triangle of A is used. alpha is a scalar.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.symv-Tuple{Any,Any,Any}\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.symv\",\n    \"category\": \"Method\",\n    \"text\": \"symv(ul, A, x)\\n\\nReturns A*x. A is assumed to be symmetric. Only the ul triangle of A is used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.trmm!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.trmm!\",\n    \"category\": \"Function\",\n    \"text\": \"trmm!(side, ul, tA, dA, alpha, A, B)\\n\\nUpdate B as alpha*A*B or one of the other three variants determined by side and tA. Only the ul triangle of A is used. dA determines if the diagonal values are read or are assumed to be all ones. Returns the updated B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.trmm\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.trmm\",\n    \"category\": \"Function\",\n    \"text\": \"trmm(side, ul, tA, dA, alpha, A, B)\\n\\nReturns alpha*A*B or one of the other three variants determined by side and tA. Only the ul triangle of A is used. dA determines if the diagonal values are read or are assumed to be all ones.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.trsm!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.trsm!\",\n    \"category\": \"Function\",\n    \"text\": \"trsm!(side, ul, tA, dA, alpha, A, B)\\n\\nOverwrite B with the solution to A*X = alpha*B or one of the other three variants determined by side and tA. Only the ul triangle of A is used. dA determines if the diagonal values are read or are assumed to be all ones. Returns the updated B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.trsm\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.trsm\",\n    \"category\": \"Function\",\n    \"text\": \"trsm(side, ul, tA, dA, alpha, A, B)\\n\\nReturns the solution to A*X = alpha*B or one of the other three variants determined by determined by side and tA. Only the ul triangle of A is used. dA determines if the diagonal values are read or are assumed to be all ones.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.trmv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.trmv!\",\n    \"category\": \"Function\",\n    \"text\": \"trmv!(ul, tA, dA, A, b)\\n\\nReturns op(A)*b, where op is determined by tA. Only the ul triangle of A is used. dA determines if the diagonal values are read or are assumed to be all ones. The multiplication occurs in-place on b.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.trmv\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.trmv\",\n    \"category\": \"Function\",\n    \"text\": \"trmv(ul, tA, dA, A, b)\\n\\nReturns op(A)*b, where op is determined by tA. Only the ul triangle of A is used. dA determines if the diagonal values are read or are assumed to be all ones.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.trsv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.trsv!\",\n    \"category\": \"Function\",\n    \"text\": \"trsv!(ul, tA, dA, A, b)\\n\\nOverwrite b with the solution to A*x = b or one of the other two variants determined by tA and ul. dA determines if the diagonal values are read or are assumed to be all ones. Returns the updated b.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.trsv\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.trsv\",\n    \"category\": \"Function\",\n    \"text\": \"trsv(ul, tA, dA, A, b)\\n\\nReturns the solution to A*x = b or one of the other two variants determined by tA and ul. dA determines if the diagonal values are read or are assumed to be all ones.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.BLAS.set_num_threads\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.BLAS.set_num_threads\",\n    \"category\": \"Function\",\n    \"text\": \"set_num_threads(n)\\n\\nSet the number of threads the BLAS library should use.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.I\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.I\",\n    \"category\": \"Constant\",\n    \"text\": \"I\\n\\nAn object of type UniformScaling, representing an identity matrix of any size.\\n\\nExample\\n\\njulia> ones(5, 6) * I == ones(5, 6)\\ntrue\\n\\njulia> [1 2im 3; 1im 2 3] * I\\n2\u00d73 Array{Complex{Int64},2}:\\n 1+0im  0+2im  3+0im\\n 0+1im  2+0im  3+0im\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#stdlib-blas-diag-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Unit Diagonal\",\n    \"category\": \"section\",\n    \"text\": \"diag/dX Meaning\\n'N' The diagonal values of the matrix X will be read.\\n'U' The diagonal of the matrix X is assumed to be all ones.Base.LinAlg.BLAS.dotu\\nBase.LinAlg.BLAS.dotc\\nBase.LinAlg.BLAS.blascopy!\\nBase.LinAlg.BLAS.nrm2\\nBase.LinAlg.BLAS.asum\\nBase.LinAlg.axpy!\\nBase.LinAlg.BLAS.scal!\\nBase.LinAlg.BLAS.scal\\nBase.LinAlg.BLAS.ger!\\nBase.LinAlg.BLAS.syr!\\nBase.LinAlg.BLAS.syrk!\\nBase.LinAlg.BLAS.syrk\\nBase.LinAlg.BLAS.her!\\nBase.LinAlg.BLAS.herk!\\nBase.LinAlg.BLAS.herk\\nBase.LinAlg.BLAS.gbmv!\\nBase.LinAlg.BLAS.gbmv\\nBase.LinAlg.BLAS.sbmv!\\nBase.LinAlg.BLAS.sbmv(::Any, ::Any, ::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.sbmv(::Any, ::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.gemm!\\nBase.LinAlg.BLAS.gemm(::Any, ::Any, ::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.gemm(::Any, ::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.gemv!\\nBase.LinAlg.BLAS.gemv(::Any, ::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.gemv(::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.symm!\\nBase.LinAlg.BLAS.symm(::Any, ::Any, ::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.symm(::Any, ::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.symv!\\nBase.LinAlg.BLAS.symv(::Any, ::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.symv(::Any, ::Any, ::Any)\\nBase.LinAlg.BLAS.trmm!\\nBase.LinAlg.BLAS.trmm\\nBase.LinAlg.BLAS.trsm!\\nBase.LinAlg.BLAS.trsm\\nBase.LinAlg.BLAS.trmv!\\nBase.LinAlg.BLAS.trmv\\nBase.LinAlg.BLAS.trsv!\\nBase.LinAlg.BLAS.trsv\\nBase.LinAlg.BLAS.set_num_threads\\nBase.LinAlg.I\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gbtrf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gbtrf!\",\n    \"category\": \"Function\",\n    \"text\": \"gbtrf!(kl, ku, m, AB) -> (AB, ipiv)\\n\\nCompute the LU factorization of a banded matrix AB. kl is the first subdiagonal containing a nonzero band, ku is the last superdiagonal containing one, and m is the first dimension of the matrix AB. Returns the LU factorization in-place and ipiv, the vector of pivots used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gbtrs!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gbtrs!\",\n    \"category\": \"Function\",\n    \"text\": \"gbtrs!(trans, kl, ku, m, AB, ipiv, B)\\n\\nSolve the equation AB * X = B. trans determines the orientation of AB. It may be N (no transpose), T (transpose), or C (conjugate transpose). kl is the first subdiagonal containing a nonzero band, ku is the last superdiagonal containing one, and m is the first dimension of the matrix AB. ipiv is the vector of pivots returned from gbtrf!. Returns the vector or matrix X, overwriting B in-place.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gebal!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gebal!\",\n    \"category\": \"Function\",\n    \"text\": \"gebal!(job, A) -> (ilo, ihi, scale)\\n\\nBalance the matrix A before computing its eigensystem or Schur factorization. job can be one of N (A will not be permuted or scaled), P (A will only be permuted), S (A will only be scaled), or B (A will be both permuted and scaled). Modifies A in-place and returns ilo, ihi, and scale. If permuting was turned on, A[i,j] = 0 if j > i and 1 < j < ilo or j > ihi. scale contains information about the scaling/permutations performed.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gebak!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gebak!\",\n    \"category\": \"Function\",\n    \"text\": \"gebak!(job, side, ilo, ihi, scale, V)\\n\\nTransform the eigenvectors V of a matrix balanced using gebal! to the unscaled/unpermuted eigenvectors of the original matrix. Modifies V in-place. side can be L (left eigenvectors are transformed) or R (right eigenvectors are transformed).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gebrd!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gebrd!\",\n    \"category\": \"Function\",\n    \"text\": \"gebrd!(A) -> (A, d, e, tauq, taup)\\n\\nReduce A in-place to bidiagonal form A = QBP'. Returns A, containing the bidiagonal matrix B; d, containing the diagonal elements of B; e, containing the off-diagonal elements of B; tauq, containing the elementary reflectors representing Q; and taup, containing the elementary reflectors representing P.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gelqf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gelqf!\",\n    \"category\": \"Function\",\n    \"text\": \"gelqf!(A, tau)\\n\\nCompute the LQ factorization of A, A = LQ. tau contains scalars which parameterize the elementary reflectors of the factorization. tau must have length greater than or equal to the smallest dimension of A.\\n\\nReturns A and tau modified in-place.\\n\\n\\n\\ngelqf!(A) -> (A, tau)\\n\\nCompute the LQ factorization of A, A = LQ.\\n\\nReturns A, modified in-place, and tau, which contains scalars which parameterize the elementary reflectors of the factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.geqlf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.geqlf!\",\n    \"category\": \"Function\",\n    \"text\": \"geqlf!(A, tau)\\n\\nCompute the QL factorization of A, A = QL. tau contains scalars which parameterize the elementary reflectors of the factorization. tau must have length greater than or equal to the smallest dimension of A.\\n\\nReturns A and tau modified in-place.\\n\\n\\n\\ngeqlf!(A) -> (A, tau)\\n\\nCompute the QL factorization of A, A = QL.\\n\\nReturns A, modified in-place, and tau, which contains scalars which parameterize the elementary reflectors of the factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.geqrf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.geqrf!\",\n    \"category\": \"Function\",\n    \"text\": \"geqrf!(A, tau)\\n\\nCompute the QR factorization of A, A = QR. tau contains scalars which parameterize the elementary reflectors of the factorization. tau must have length greater than or equal to the smallest dimension of A.\\n\\nReturns A and tau modified in-place.\\n\\n\\n\\ngeqrf!(A) -> (A, tau)\\n\\nCompute the QR factorization of A, A = QR.\\n\\nReturns A, modified in-place, and tau, which contains scalars which parameterize the elementary reflectors of the factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.geqp3!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.geqp3!\",\n    \"category\": \"Function\",\n    \"text\": \"geqp3!(A, jpvt, tau)\\n\\nCompute the pivoted QR factorization of A, AP = QR using BLAS level 3. P is a pivoting matrix, represented by jpvt. tau stores the elementary reflectors. jpvt must have length length greater than or equal to n if A is an (m x n) matrix. tau must have length greater than or equal to the smallest dimension of A.\\n\\nA, jpvt, and tau are modified in-place.\\n\\n\\n\\ngeqp3!(A, jpvt) -> (A, jpvt, tau)\\n\\nCompute the pivoted QR factorization of A, AP = QR using BLAS level 3. P is a pivoting matrix, represented by jpvt. jpvt must have length greater than or equal to n if A is an (m x n) matrix.\\n\\nReturns A and jpvt, modified in-place, and tau, which stores the elementary reflectors.\\n\\n\\n\\ngeqp3!(A) -> (A, jpvt, tau)\\n\\nCompute the pivoted QR factorization of A, AP = QR using BLAS level 3.\\n\\nReturns A, modified in-place, jpvt, which represents the pivoting matrix P, and tau, which stores the elementary reflectors.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gerqf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gerqf!\",\n    \"category\": \"Function\",\n    \"text\": \"gerqf!(A, tau)\\n\\nCompute the RQ factorization of A, A = RQ. tau contains scalars which parameterize the elementary reflectors of the factorization. tau must have length greater than or equal to the smallest dimension of A.\\n\\nReturns A and tau modified in-place.\\n\\n\\n\\ngerqf!(A) -> (A, tau)\\n\\nCompute the RQ factorization of A, A = RQ.\\n\\nReturns A, modified in-place, and tau, which contains scalars which parameterize the elementary reflectors of the factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.geqrt!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.geqrt!\",\n    \"category\": \"Function\",\n    \"text\": \"geqrt!(A, T)\\n\\nCompute the blocked QR factorization of A, A = QR. T contains upper triangular block reflectors which parameterize the elementary reflectors of the factorization. The first dimension of T sets the block size and it must be between 1 and n. The second dimension of T must equal the smallest dimension of A.\\n\\nReturns A and T modified in-place.\\n\\n\\n\\ngeqrt!(A, nb) -> (A, T)\\n\\nCompute the blocked QR factorization of A, A = QR. nb sets the block size and it must be between 1 and n, the second dimension of A.\\n\\nReturns A, modified in-place, and T, which contains upper triangular block reflectors which parameterize the elementary reflectors of the factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.geqrt3!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.geqrt3!\",\n    \"category\": \"Function\",\n    \"text\": \"geqrt3!(A, T)\\n\\nRecursively computes the blocked QR factorization of A, A = QR. T contains upper triangular block reflectors which parameterize the elementary reflectors of the factorization.  The first dimension of T sets the block size and it must be between 1 and n. The second dimension of T must equal the smallest dimension of A.\\n\\nReturns A and T modified in-place.\\n\\n\\n\\ngeqrt3!(A) -> (A, T)\\n\\nRecursively computes the blocked QR factorization of A, A = QR.\\n\\nReturns A, modified in-place, and T, which contains upper triangular block reflectors which parameterize the elementary reflectors of the factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.getrf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.getrf!\",\n    \"category\": \"Function\",\n    \"text\": \"getrf!(A) -> (A, ipiv, info)\\n\\nCompute the pivoted LU factorization of A, A = LU.\\n\\nReturns A, modified in-place, ipiv, the pivoting information, and an info code which indicates success (info = 0), a singular value in U (info = i, in which case U[i,i] is singular), or an error code (info < 0).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.tzrzf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.tzrzf!\",\n    \"category\": \"Function\",\n    \"text\": \"tzrzf!(A) -> (A, tau)\\n\\nTransforms the upper trapezoidal matrix A to upper triangular form in-place. Returns A and tau, the scalar parameters for the elementary reflectors of the transformation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.ormrz!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.ormrz!\",\n    \"category\": \"Function\",\n    \"text\": \"ormrz!(side, trans, A, tau, C)\\n\\nMultiplies the matrix C by Q from the transformation supplied by tzrzf!. Depending on side or trans the multiplication can be left-sided (side = L, Q*C) or right-sided (side = R, C*Q) and Q can be unmodified (trans = N), transposed (trans = T), or conjugate transposed (trans = C). Returns matrix C which is modified in-place with the result of the multiplication.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gels!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gels!\",\n    \"category\": \"Function\",\n    \"text\": \"gels!(trans, A, B) -> (F, B, ssr)\\n\\nSolves the linear equation A * X = B, A.' * X =B, or A' * X = B using a QR or LQ factorization. Modifies the matrix/vector B in place with the solution. A is overwritten with its QR or LQ factorization. trans may be one of N (no modification), T (transpose), or C (conjugate transpose). gels! searches for the minimum norm/least squares solution. A may be under or over determined. The solution is returned in B.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gesv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gesv!\",\n    \"category\": \"Function\",\n    \"text\": \"gesv!(A, B) -> (B, A, ipiv)\\n\\nSolves the linear equation A * X = B where A is a square matrix using the LU factorization of A. A is overwritten with its LU factorization and B is overwritten with the solution X. ipiv contains the pivoting information for the LU factorization of A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.getrs!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.getrs!\",\n    \"category\": \"Function\",\n    \"text\": \"getrs!(trans, A, ipiv, B)\\n\\nSolves the linear equation A * X = B, A.' * X =B, or A' * X = B for square A. Modifies the matrix/vector B in place with the solution. A is the LU factorization from getrf!, with ipiv the pivoting information. trans may be one of N (no modification), T (transpose), or C (conjugate transpose).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.getri!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.getri!\",\n    \"category\": \"Function\",\n    \"text\": \"getri!(A, ipiv)\\n\\nComputes the inverse of A, using its LU factorization found by getrf!. ipiv is the pivot information output and A contains the LU factorization of getrf!. A is overwritten with its inverse.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gesvx!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gesvx!\",\n    \"category\": \"Function\",\n    \"text\": \"gesvx!(fact, trans, A, AF, ipiv, equed, R, C, B) -> (X, equed, R, C, B, rcond, ferr, berr, work)\\n\\nSolves the linear equation A * X = B (trans = N), A.' * X =B (trans = T), or A' * X = B (trans = C) using the LU factorization of A. fact may be E, in which case A will be equilibrated and copied to AF; F, in which case AF and ipiv from a previous LU factorization are inputs; or N, in which case A will be copied to AF and then factored. If fact = F, equed may be N, meaning A has not been equilibrated; R, meaning A was multiplied by diagm(R) from the left; C, meaning A was multiplied by diagm(C) from the right; or B, meaning A was multiplied by diagm(R) from the left and diagm(C) from the right. If fact = F and equed = R or B the elements of R must all be positive. If fact = F and equed = C or B the elements of C must all be positive.\\n\\nReturns the solution X; equed, which is an output if fact is not N, and describes the equilibration that was performed; R, the row equilibration diagonal; C, the column equilibration diagonal; B, which may be overwritten with its equilibrated form diagm(R)*B (if trans = N and equed = R,B) or diagm(C)*B (if trans = T,C and equed = C,B); rcond, the reciprocal condition number of A after equilbrating; ferr, the forward error bound for each solution vector in X; berr, the forward error bound for each solution vector in X; and work, the reciprocal pivot growth factor.\\n\\n\\n\\ngesvx!(A, B)\\n\\nThe no-equilibration, no-transpose simplification of gesvx!.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gelsd!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gelsd!\",\n    \"category\": \"Function\",\n    \"text\": \"gelsd!(A, B, rcond) -> (B, rnk)\\n\\nComputes the least norm solution of A * X = B by finding the SVD factorization of A, then dividing-and-conquering the problem. B is overwritten with the solution X. Singular values below rcond will be treated as zero. Returns the solution in B and the effective rank of A in rnk.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gelsy!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gelsy!\",\n    \"category\": \"Function\",\n    \"text\": \"gelsy!(A, B, rcond) -> (B, rnk)\\n\\nComputes the least norm solution of A * X = B by finding the full QR factorization of A, then dividing-and-conquering the problem. B is overwritten with the solution X. Singular values below rcond will be treated as zero. Returns the solution in B and the effective rank of A in rnk.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gglse!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gglse!\",\n    \"category\": \"Function\",\n    \"text\": \"gglse!(A, c, B, d) -> (X,res)\\n\\nSolves the equation A * x = c where x is subject to the equality constraint B * x = d. Uses the formula ||c - A*x||^2 = 0 to solve. Returns X and the residual sum-of-squares.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.geev!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.geev!\",\n    \"category\": \"Function\",\n    \"text\": \"geev!(jobvl, jobvr, A) -> (W, VL, VR)\\n\\nFinds the eigensystem of A. If jobvl = N, the left eigenvectors of A aren't computed. If jobvr = N, the right eigenvectors of A aren't computed. If jobvl = V or jobvr = V, the corresponding eigenvectors are computed. Returns the eigenvalues in W, the right eigenvectors in VR, and the left eigenvectors in VL.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gesdd!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gesdd!\",\n    \"category\": \"Function\",\n    \"text\": \"gesdd!(job, A) -> (U, S, VT)\\n\\nFinds the singular value decomposition of A, A = U * S * V', using a divide and conquer approach. If job = A, all the columns of U and the rows of V' are computed. If job = N, no columns of U or rows of V' are computed. If job = O, A is overwritten with the columns of (thin) U and the rows of (thin) V'. If job = S, the columns of (thin) U and the rows of (thin) V' are computed and returned separately.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gesvd!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gesvd!\",\n    \"category\": \"Function\",\n    \"text\": \"gesvd!(jobu, jobvt, A) -> (U, S, VT)\\n\\nFinds the singular value decomposition of A, A = U * S * V'. If jobu = A, all the columns of U are computed. If jobvt = A all the rows of V' are computed. If jobu = N, no columns of U are computed. If jobvt = N no rows of V' are computed. If jobu = O, A is overwritten with the columns of (thin) U. If jobvt = O, A is overwritten with the rows of (thin) V'. If jobu = S, the columns of (thin) U are computed and returned separately. If jobvt = S the rows of (thin) V' are computed and returned separately. jobu and jobvt can't both be O.\\n\\nReturns U, S, and Vt, where S are the singular values of A.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.ggsvd!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.ggsvd!\",\n    \"category\": \"Function\",\n    \"text\": \"ggsvd!(jobu, jobv, jobq, A, B) -> (U, V, Q, alpha, beta, k, l, R)\\n\\nFinds the generalized singular value decomposition of A and B, U'*A*Q = D1*R and V'*B*Q = D2*R. D1 has alpha on its diagonal and D2 has beta on its diagonal. If jobu = U, the orthogonal/unitary matrix U is computed. If jobv = V the orthogonal/unitary matrix V is computed. If jobq = Q, the orthogonal/unitary matrix Q is computed. If jobu, jobv or jobq is N, that matrix is not computed. This function is only available in LAPACK versions prior to 3.6.0.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.ggsvd3!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.ggsvd3!\",\n    \"category\": \"Function\",\n    \"text\": \"ggsvd3!(jobu, jobv, jobq, A, B) -> (U, V, Q, alpha, beta, k, l, R)\\n\\nFinds the generalized singular value decomposition of A and B, U'*A*Q = D1*R and V'*B*Q = D2*R. D1 has alpha on its diagonal and D2 has beta on its diagonal. If jobu = U, the orthogonal/unitary matrix U is computed. If jobv = V the orthogonal/unitary matrix V is computed. If jobq = Q, the orthogonal/unitary matrix Q is computed. If jobu, jobv, or jobq is N, that matrix is not computed. This function requires LAPACK 3.6.0.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.geevx!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.geevx!\",\n    \"category\": \"Function\",\n    \"text\": \"geevx!(balanc, jobvl, jobvr, sense, A) -> (A, w, VL, VR, ilo, ihi, scale, abnrm, rconde, rcondv)\\n\\nFinds the eigensystem of A with matrix balancing. If jobvl = N, the left eigenvectors of A aren't computed. If jobvr = N, the right eigenvectors of A aren't computed. If jobvl = V or jobvr = V, the corresponding eigenvectors are computed. If balanc = N, no balancing is performed. If balanc = P, A is permuted but not scaled. If balanc = S, A is scaled but not permuted. If balanc = B, A is permuted and scaled. If sense = N, no reciprocal condition numbers are computed. If sense = E, reciprocal condition numbers are computed for the eigenvalues only. If sense = V, reciprocal condition numbers are computed for the right eigenvectors only. If sense = B, reciprocal condition numbers are computed for the right eigenvectors and the eigenvectors. If sense = E,B, the right and left eigenvectors must be computed.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.ggev!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.ggev!\",\n    \"category\": \"Function\",\n    \"text\": \"ggev!(jobvl, jobvr, A, B) -> (alpha, beta, vl, vr)\\n\\nFinds the generalized eigendecomposition of A and B. If jobvl = N, the left eigenvectors aren't computed. If jobvr = N, the right eigenvectors aren't computed. If jobvl = V or jobvr = V, the corresponding eigenvectors are computed.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gtsv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gtsv!\",\n    \"category\": \"Function\",\n    \"text\": \"gtsv!(dl, d, du, B)\\n\\nSolves the equation A * X = B where A is a tridiagonal matrix with dl on the subdiagonal, d on the diagonal, and du on the superdiagonal.\\n\\nOverwrites B with the solution X and returns it.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gttrf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gttrf!\",\n    \"category\": \"Function\",\n    \"text\": \"gttrf!(dl, d, du) -> (dl, d, du, du2, ipiv)\\n\\nFinds the LU factorization of a tridiagonal matrix with dl on the subdiagonal, d on the diagonal, and du on the superdiagonal.\\n\\nModifies dl, d, and du in-place and returns them and the second superdiagonal du2 and the pivoting vector ipiv.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gttrs!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gttrs!\",\n    \"category\": \"Function\",\n    \"text\": \"gttrs!(trans, dl, d, du, du2, ipiv, B)\\n\\nSolves the equation A * X = B (trans = N), A.' * X = B (trans = T), or A' * X = B (trans = C) using the LU factorization computed by gttrf!. B is overwritten with the solution X.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.orglq!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.orglq!\",\n    \"category\": \"Function\",\n    \"text\": \"orglq!(A, tau, k = length(tau))\\n\\nExplicitly finds the matrix Q of a LQ factorization after calling gelqf! on A. Uses the output of gelqf!. A is overwritten by Q.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.orgqr!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.orgqr!\",\n    \"category\": \"Function\",\n    \"text\": \"orgqr!(A, tau, k = length(tau))\\n\\nExplicitly finds the matrix Q of a QR factorization after calling geqrf! on A. Uses the output of geqrf!. A is overwritten by Q.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.orgql!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.orgql!\",\n    \"category\": \"Function\",\n    \"text\": \"orgql!(A, tau, k = length(tau))\\n\\nExplicitly finds the matrix Q of a QL factorization after calling geqlf! on A. Uses the output of geqlf!. A is overwritten by Q.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.orgrq!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.orgrq!\",\n    \"category\": \"Function\",\n    \"text\": \"orgrq!(A, tau, k = length(tau))\\n\\nExplicitly finds the matrix Q of a RQ factorization after calling gerqf! on A. Uses the output of gerqf!. A is overwritten by Q.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.ormlq!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.ormlq!\",\n    \"category\": \"Function\",\n    \"text\": \"ormlq!(side, trans, A, tau, C)\\n\\nComputes Q * C (trans = N), Q.' * C (trans = T), Q' * C (trans = C) for side = L or the equivalent right-sided multiplication for side = R using Q from a LQ factorization of A computed using gelqf!. C is overwritten.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.ormqr!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.ormqr!\",\n    \"category\": \"Function\",\n    \"text\": \"ormqr!(side, trans, A, tau, C)\\n\\nComputes Q * C (trans = N), Q.' * C (trans = T), Q' * C (trans = C) for side = L or the equivalent right-sided multiplication for side = R using Q from a QR factorization of A computed using geqrf!. C is overwritten.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.ormql!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.ormql!\",\n    \"category\": \"Function\",\n    \"text\": \"ormql!(side, trans, A, tau, C)\\n\\nComputes Q * C (trans = N), Q.' * C (trans = T), Q' * C (trans = C) for side = L or the equivalent right-sided multiplication for side = R using Q from a QL factorization of A computed using geqlf!. C is overwritten.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.ormrq!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.ormrq!\",\n    \"category\": \"Function\",\n    \"text\": \"ormrq!(side, trans, A, tau, C)\\n\\nComputes Q * C (trans = N), Q.' * C (trans = T), Q' * C (trans = C) for side = L or the equivalent right-sided multiplication for side = R using Q from a RQ factorization of A computed using gerqf!. C is overwritten.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gemqrt!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gemqrt!\",\n    \"category\": \"Function\",\n    \"text\": \"gemqrt!(side, trans, V, T, C)\\n\\nComputes Q * C (trans = N), Q.' * C (trans = T), Q' * C (trans = C) for side = L or the equivalent right-sided multiplication for side = R using Q from a QR factorization of A computed using geqrt!. C is overwritten.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.posv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.posv!\",\n    \"category\": \"Function\",\n    \"text\": \"posv!(uplo, A, B) -> (A, B)\\n\\nFinds the solution to A * X = B where A is a symmetric or Hermitian positive definite matrix. If uplo = U the upper Cholesky decomposition of A is computed. If uplo = L the lower Cholesky decomposition of A is computed. A is overwritten by its Cholesky decomposition. B is overwritten with the solution X.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.potrf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.potrf!\",\n    \"category\": \"Function\",\n    \"text\": \"potrf!(uplo, A)\\n\\nComputes the Cholesky (upper if uplo = U, lower if uplo = L) decomposition of positive-definite matrix A. A is overwritten and returned with an info code.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.potri!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.potri!\",\n    \"category\": \"Function\",\n    \"text\": \"potri!(uplo, A)\\n\\nComputes the inverse of positive-definite matrix A after calling potrf! to find its (upper if uplo = U, lower if uplo = L) Cholesky decomposition.\\n\\nA is overwritten by its inverse and returned.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.potrs!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.potrs!\",\n    \"category\": \"Function\",\n    \"text\": \"potrs!(uplo, A, B)\\n\\nFinds the solution to A * X = B where A is a symmetric or Hermitian positive definite matrix whose Cholesky decomposition was computed by potrf!. If uplo = U the upper Cholesky decomposition of A was computed. If uplo = L the lower Cholesky decomposition of A was computed. B is overwritten with the solution X.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.pstrf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.pstrf!\",\n    \"category\": \"Function\",\n    \"text\": \"pstrf!(uplo, A, tol) -> (A, piv, rank, info)\\n\\nComputes the (upper if uplo = U, lower if uplo = L) pivoted Cholesky decomposition of positive-definite matrix A with a user-set tolerance tol. A is overwritten by its Cholesky decomposition.\\n\\nReturns A, the pivots piv, the rank of A, and an info code. If info = 0, the factorization succeeded. If info = i > 0, then A is indefinite or rank-deficient.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.ptsv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.ptsv!\",\n    \"category\": \"Function\",\n    \"text\": \"ptsv!(D, E, B)\\n\\nSolves A * X = B for positive-definite tridiagonal A. D is the diagonal of A and E is the off-diagonal. B is overwritten with the solution X and returned.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.pttrf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.pttrf!\",\n    \"category\": \"Function\",\n    \"text\": \"pttrf!(D, E)\\n\\nComputes the LDLt factorization of a positive-definite tridiagonal matrix with D as diagonal and E as off-diagonal. D and E are overwritten and returned.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.pttrs!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.pttrs!\",\n    \"category\": \"Function\",\n    \"text\": \"pttrs!(D, E, B)\\n\\nSolves A * X = B for positive-definite tridiagonal A with diagonal D and off-diagonal E after computing A's LDLt factorization using pttrf!. B is overwritten with the solution X.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.trtri!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.trtri!\",\n    \"category\": \"Function\",\n    \"text\": \"trtri!(uplo, diag, A)\\n\\nFinds the inverse of (upper if uplo = U, lower if uplo = L) triangular matrix A. If diag = N, A has non-unit diagonal elements. If diag = U, all diagonal elements of A are one. A is overwritten with its inverse.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.trtrs!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.trtrs!\",\n    \"category\": \"Function\",\n    \"text\": \"trtrs!(uplo, trans, diag, A, B)\\n\\nSolves A * X = B (trans = N), A.' * X = B (trans = T), or A' * X = B (trans = C) for (upper if uplo = U, lower if uplo = L) triangular matrix A. If diag = N, A has non-unit diagonal elements. If diag = U, all diagonal elements of A are one. B is overwritten with the solution X.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.trcon!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.trcon!\",\n    \"category\": \"Function\",\n    \"text\": \"trcon!(norm, uplo, diag, A)\\n\\nFinds the reciprocal condition number of (upper if uplo = U, lower if uplo = L) triangular matrix A. If diag = N, A has non-unit diagonal elements. If diag = U, all diagonal elements of A are one. If norm = I, the condition number is found in the infinity norm. If norm = O or 1, the condition number is found in the one norm.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.trevc!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.trevc!\",\n    \"category\": \"Function\",\n    \"text\": \"trevc!(side, howmny, select, T, VL = similar(T), VR = similar(T))\\n\\nFinds the eigensystem of an upper triangular matrix T. If side = R, the right eigenvectors are computed. If side = L, the left eigenvectors are computed. If side = B, both sets are computed. If howmny = A, all eigenvectors are found. If howmny = B, all eigenvectors are found and backtransformed using VL and VR. If howmny = S, only the eigenvectors corresponding to the values in select are computed.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.trrfs!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.trrfs!\",\n    \"category\": \"Function\",\n    \"text\": \"trrfs!(uplo, trans, diag, A, B, X, Ferr, Berr) -> (Ferr, Berr)\\n\\nEstimates the error in the solution to A * X = B (trans = N), A.' * X = B (trans = T), A' * X = B (trans = C) for side = L, or the equivalent equations a right-handed side = R X * A after computing X using trtrs!. If uplo = U, A is upper triangular. If uplo = L, A is lower triangular. If diag = N, A has non-unit diagonal elements. If diag = U, all diagonal elements of A are one. Ferr and Berr are optional inputs. Ferr is the forward error and Berr is the backward error, each component-wise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.stev!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.stev!\",\n    \"category\": \"Function\",\n    \"text\": \"stev!(job, dv, ev) -> (dv, Zmat)\\n\\nComputes the eigensystem for a symmetric tridiagonal matrix with dv as diagonal and ev as off-diagonal. If job = N only the eigenvalues are found and returned in dv. If job = V then the eigenvectors are also found and returned in Zmat.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.stebz!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.stebz!\",\n    \"category\": \"Function\",\n    \"text\": \"stebz!(range, order, vl, vu, il, iu, abstol, dv, ev) -> (dv, iblock, isplit)\\n\\nComputes the eigenvalues for a symmetric tridiagonal matrix with dv as diagonal and ev as off-diagonal. If range = A, all the eigenvalues are found. If range = V, the eigenvalues in the half-open interval (vl, vu] are found. If range = I, the eigenvalues with indices between il and iu are found. If order = B, eigvalues are ordered within a block. If order = E, they are ordered across all the blocks. abstol can be set as a tolerance for convergence.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.stegr!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.stegr!\",\n    \"category\": \"Function\",\n    \"text\": \"stegr!(jobz, range, dv, ev, vl, vu, il, iu) -> (w, Z)\\n\\nComputes the eigenvalues (jobz = N) or eigenvalues and eigenvectors (jobz = V) for a symmetric tridiagonal matrix with dv as diagonal and ev as off-diagonal. If range = A, all the eigenvalues are found. If range = V, the eigenvalues in the half-open interval (vl, vu] are found. If range = I, the eigenvalues with indices between il and iu are found. The eigenvalues are returned in w and the eigenvectors in Z.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.stein!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.stein!\",\n    \"category\": \"Function\",\n    \"text\": \"stein!(dv, ev_in, w_in, iblock_in, isplit_in)\\n\\nComputes the eigenvectors for a symmetric tridiagonal matrix with dv as diagonal and ev_in as off-diagonal. w_in specifies the input eigenvalues for which to find corresponding eigenvectors. iblock_in specifies the submatrices corresponding to the eigenvalues in w_in. isplit_in specifies the splitting points between the submatrix blocks.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.syconv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.syconv!\",\n    \"category\": \"Function\",\n    \"text\": \"syconv!(uplo, A, ipiv) -> (A, work)\\n\\nConverts a symmetric matrix A (which has been factorized into a triangular matrix) into two matrices L and D. If uplo = U, A is upper triangular. If uplo = L, it is lower triangular. ipiv is the pivot vector from the triangular factorization. A is overwritten by L and D.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.sysv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.sysv!\",\n    \"category\": \"Function\",\n    \"text\": \"sysv!(uplo, A, B) -> (B, A, ipiv)\\n\\nFinds the solution to A * X = B for symmetric matrix A. If uplo = U, the upper half of A is stored. If uplo = L, the lower half is stored. B is overwritten by the solution X. A is overwritten by its Bunch-Kaufman factorization. ipiv contains pivoting information about the factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.sytrf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.sytrf!\",\n    \"category\": \"Function\",\n    \"text\": \"sytrf!(uplo, A) -> (A, ipiv, info)\\n\\nComputes the Bunch-Kaufman factorization of a symmetric matrix A. If uplo = U, the upper half of A is stored. If uplo = L, the lower half is stored.\\n\\nReturns A, overwritten by the factorization, a pivot vector ipiv, and the error code info which is a non-negative integer. If info is positive the matrix is singular and the diagonal part of the factorization is exactly zero at position info.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.sytri!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.sytri!\",\n    \"category\": \"Function\",\n    \"text\": \"sytri!(uplo, A, ipiv)\\n\\nComputes the inverse of a symmetric matrix A using the results of sytrf!. If uplo = U, the upper half of A is stored. If uplo = L, the lower half is stored. A is overwritten by its inverse.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.sytrs!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.sytrs!\",\n    \"category\": \"Function\",\n    \"text\": \"sytrs!(uplo, A, ipiv, B)\\n\\nSolves the equation A * X = B for a symmetric matrix A using the results of sytrf!. If uplo = U, the upper half of A is stored. If uplo = L, the lower half is stored. B is overwritten by the solution X.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.hesv!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.hesv!\",\n    \"category\": \"Function\",\n    \"text\": \"hesv!(uplo, A, B) -> (B, A, ipiv)\\n\\nFinds the solution to A * X = B for Hermitian matrix A. If uplo = U, the upper half of A is stored. If uplo = L, the lower half is stored. B is overwritten by the solution X. A is overwritten by its Bunch-Kaufman factorization. ipiv contains pivoting information about the factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.hetrf!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.hetrf!\",\n    \"category\": \"Function\",\n    \"text\": \"hetrf!(uplo, A) -> (A, ipiv, info)\\n\\nComputes the Bunch-Kaufman factorization of a Hermitian matrix A. If uplo = U, the upper half of A is stored. If uplo = L, the lower half is stored.\\n\\nReturns A, overwritten by the factorization, a pivot vector ipiv, and the error code info which is a non-negative integer. If info is positive the matrix is singular and the diagonal part of the factorization is exactly zero at position info.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.hetri!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.hetri!\",\n    \"category\": \"Function\",\n    \"text\": \"hetri!(uplo, A, ipiv)\\n\\nComputes the inverse of a Hermitian matrix A using the results of sytrf!. If uplo = U, the upper half of A is stored. If uplo = L, the lower half is stored. A is overwritten by its inverse.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.hetrs!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.hetrs!\",\n    \"category\": \"Function\",\n    \"text\": \"hetrs!(uplo, A, ipiv, B)\\n\\nSolves the equation A * X = B for a Hermitian matrix A using the results of sytrf!. If uplo = U, the upper half of A is stored. If uplo = L, the lower half is stored. B is overwritten by the solution X.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.syev!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.syev!\",\n    \"category\": \"Function\",\n    \"text\": \"syev!(jobz, uplo, A)\\n\\nFinds the eigenvalues (jobz = N) or eigenvalues and eigenvectors (jobz = V) of a symmetric matrix A. If uplo = U, the upper triangle of A is used. If uplo = L, the lower triangle of A is used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.syevr!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.syevr!\",\n    \"category\": \"Function\",\n    \"text\": \"syevr!(jobz, range, uplo, A, vl, vu, il, iu, abstol) -> (W, Z)\\n\\nFinds the eigenvalues (jobz = N) or eigenvalues and eigenvectors (jobz = V) of a symmetric matrix A. If uplo = U, the upper triangle of A is used. If uplo = L, the lower triangle of A is used. If range = A, all the eigenvalues are found. If range = V, the eigenvalues in the half-open interval (vl, vu] are found. If range = I, the eigenvalues with indices between il and iu are found. abstol can be set as a tolerance for convergence.\\n\\nThe eigenvalues are returned in W and the eigenvectors in Z.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.sygvd!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.sygvd!\",\n    \"category\": \"Function\",\n    \"text\": \"sygvd!(itype, jobz, uplo, A, B) -> (w, A, B)\\n\\nFinds the generalized eigenvalues (jobz = N) or eigenvalues and eigenvectors (jobz = V) of a symmetric matrix A and symmetric positive-definite matrix B. If uplo = U, the upper triangles of A and B are used. If uplo = L, the lower triangles of A and B are used. If itype = 1, the problem to solve is A * x = lambda * B * x. If itype = 2, the problem to solve is A * B * x = lambda * x. If itype = 3, the problem to solve is B * A * x = lambda * x.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.bdsqr!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.bdsqr!\",\n    \"category\": \"Function\",\n    \"text\": \"bdsqr!(uplo, d, e_, Vt, U, C) -> (d, Vt, U, C)\\n\\nComputes the singular value decomposition of a bidiagonal matrix with d on the diagonal and e_ on the off-diagonal. If uplo = U, e_ is the superdiagonal. If uplo = L, e_ is the subdiagonal. Can optionally also compute the product Q' * C.\\n\\nReturns the singular values in d, and the matrix C overwritten with Q' * C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.bdsdc!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.bdsdc!\",\n    \"category\": \"Function\",\n    \"text\": \"bdsdc!(uplo, compq, d, e_) -> (d, e, u, vt, q, iq)\\n\\nComputes the singular value decomposition of a bidiagonal matrix with d on the diagonal and e_ on the off-diagonal using a divide and conqueq method. If uplo = U, e_ is the superdiagonal. If uplo = L, e_ is the subdiagonal. If compq = N, only the singular values are found. If compq = I, the singular values and vectors are found. If compq = P, the singular values and vectors are found in compact form. Only works for real types.\\n\\nReturns the singular values in d, and if compq = P, the compact singular vectors in iq.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gecon!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gecon!\",\n    \"category\": \"Function\",\n    \"text\": \"gecon!(normtype, A, anorm)\\n\\nFinds the reciprocal condition number of matrix A. If normtype = I, the condition number is found in the infinity norm. If normtype = O or 1, the condition number is found in the one norm. A must be the result of getrf! and anorm is the norm of A in the relevant norm.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gehrd!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gehrd!\",\n    \"category\": \"Function\",\n    \"text\": \"gehrd!(ilo, ihi, A) -> (A, tau)\\n\\nConverts a matrix A to Hessenberg form. If A is balanced with gebal! then ilo and ihi are the outputs of gebal!. Otherwise they should be ilo = 1 and ihi = size(A,2). tau contains the elementary reflectors of the factorization.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.orghr!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.orghr!\",\n    \"category\": \"Function\",\n    \"text\": \"orghr!(ilo, ihi, A, tau)\\n\\nExplicitly finds Q, the orthogonal/unitary matrix from gehrd!. ilo, ihi, A, and tau must correspond to the input/output to gehrd!.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gees!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gees!\",\n    \"category\": \"Function\",\n    \"text\": \"gees!(jobvs, A) -> (A, vs, w)\\n\\nComputes the eigenvalues (jobvs = N) or the eigenvalues and Schur vectors (jobvs = V) of matrix A. A is overwritten by its Schur form.\\n\\nReturns A, vs containing the Schur vectors, and w, containing the eigenvalues.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.gges!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.gges!\",\n    \"category\": \"Function\",\n    \"text\": \"gges!(jobvsl, jobvsr, A, B) -> (A, B, alpha, beta, vsl, vsr)\\n\\nComputes the generalized eigenvalues, generalized Schur form, left Schur vectors (jobsvl = V), or right Schur vectors (jobvsr = V) of A and B.\\n\\nThe generalized eigenvalues are returned in alpha and beta. The left Schur vectors are returned in vsl and the right Schur vectors are returned in vsr.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.trexc!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.trexc!\",\n    \"category\": \"Function\",\n    \"text\": \"trexc!(compq, ifst, ilst, T, Q) -> (T, Q)\\n\\nReorder the Schur factorization of a matrix. If compq = V, the Schur vectors Q are reordered. If compq = N they are not modified. ifst and ilst specify the reordering of the vectors.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.trsen!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.trsen!\",\n    \"category\": \"Function\",\n    \"text\": \"trsen!(compq, job, select, T, Q) -> (T, Q, w)\\n\\nReorder the Schur factorization of a matrix and optionally finds reciprocal condition numbers. If job = N, no condition numbers are found. If job = E, only the condition number for this cluster of eigenvalues is found. If job = V, only the condition number for the invariant subspace is found. If job = B then the condition numbers for the cluster and subspace are found. If compq = V the Schur vectors Q are updated. If compq = N the Schur vectors are not modified. select determines which eigenvalues are in the cluster.\\n\\nReturns T, Q, and reordered eigenvalues in w.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.tgsen!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.tgsen!\",\n    \"category\": \"Function\",\n    \"text\": \"tgsen!(select, S, T, Q, Z) -> (S, T, alpha, beta, Q, Z)\\n\\nReorders the vectors of a generalized Schur decomposition. select specifices the eigenvalues in each cluster.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#Base.LinAlg.LAPACK.trsyl!\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"Base.LinAlg.LAPACK.trsyl!\",\n    \"category\": \"Function\",\n    \"text\": \"trsyl!(transa, transb, A, B, C, isgn=1) -> (C, scale)\\n\\nSolves the Sylvester matrix equation A * X +/- X * B = scale*C where A and B are both quasi-upper triangular. If transa = N, A is not modified. If transa = T, A is transposed. If transa = C, A is conjugate transposed. Similarly for transb and B. If isgn = 1, the equation A * X + X * B = scale * C is solved. If isgn = -1, the equation A * X - X * B = scale * C is solved.\\n\\nReturns X (overwriting C) and scale.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/linalg.html#LAPACK-Functions-1\",\n    \"page\": \"Linear Algebra\",\n    \"title\": \"LAPACK Functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.LinAlg.LAPACK provides wrappers for some of the LAPACK functions for linear algebra.  Those functions that overwrite one of the input arrays have names ending in '!'.Usually a function has 4 methods defined, one each for Float64, Float32, Complex128 and Complex64 arrays.Note that the LAPACK API provided by Julia can and will change in the future. Since this API is not user-facing, there is no commitment to support/deprecate this specific set of functions in future releases.Base.LinAlg.LAPACK.gbtrf!\\nBase.LinAlg.LAPACK.gbtrs!\\nBase.LinAlg.LAPACK.gebal!\\nBase.LinAlg.LAPACK.gebak!\\nBase.LinAlg.LAPACK.gebrd!\\nBase.LinAlg.LAPACK.gelqf!\\nBase.LinAlg.LAPACK.geqlf!\\nBase.LinAlg.LAPACK.geqrf!\\nBase.LinAlg.LAPACK.geqp3!\\nBase.LinAlg.LAPACK.gerqf!\\nBase.LinAlg.LAPACK.geqrt!\\nBase.LinAlg.LAPACK.geqrt3!\\nBase.LinAlg.LAPACK.getrf!\\nBase.LinAlg.LAPACK.tzrzf!\\nBase.LinAlg.LAPACK.ormrz!\\nBase.LinAlg.LAPACK.gels!\\nBase.LinAlg.LAPACK.gesv!\\nBase.LinAlg.LAPACK.getrs!\\nBase.LinAlg.LAPACK.getri!\\nBase.LinAlg.LAPACK.gesvx!\\nBase.LinAlg.LAPACK.gelsd!\\nBase.LinAlg.LAPACK.gelsy!\\nBase.LinAlg.LAPACK.gglse!\\nBase.LinAlg.LAPACK.geev!\\nBase.LinAlg.LAPACK.gesdd!\\nBase.LinAlg.LAPACK.gesvd!\\nBase.LinAlg.LAPACK.ggsvd!\\nBase.LinAlg.LAPACK.ggsvd3!\\nBase.LinAlg.LAPACK.geevx!\\nBase.LinAlg.LAPACK.ggev!\\nBase.LinAlg.LAPACK.gtsv!\\nBase.LinAlg.LAPACK.gttrf!\\nBase.LinAlg.LAPACK.gttrs!\\nBase.LinAlg.LAPACK.orglq!\\nBase.LinAlg.LAPACK.orgqr!\\nBase.LinAlg.LAPACK.orgql!\\nBase.LinAlg.LAPACK.orgrq!\\nBase.LinAlg.LAPACK.ormlq!\\nBase.LinAlg.LAPACK.ormqr!\\nBase.LinAlg.LAPACK.ormql!\\nBase.LinAlg.LAPACK.ormrq!\\nBase.LinAlg.LAPACK.gemqrt!\\nBase.LinAlg.LAPACK.posv!\\nBase.LinAlg.LAPACK.potrf!\\nBase.LinAlg.LAPACK.potri!\\nBase.LinAlg.LAPACK.potrs!\\nBase.LinAlg.LAPACK.pstrf!\\nBase.LinAlg.LAPACK.ptsv!\\nBase.LinAlg.LAPACK.pttrf!\\nBase.LinAlg.LAPACK.pttrs!\\nBase.LinAlg.LAPACK.trtri!\\nBase.LinAlg.LAPACK.trtrs!\\nBase.LinAlg.LAPACK.trcon!\\nBase.LinAlg.LAPACK.trevc!\\nBase.LinAlg.LAPACK.trrfs!\\nBase.LinAlg.LAPACK.stev!\\nBase.LinAlg.LAPACK.stebz!\\nBase.LinAlg.LAPACK.stegr!\\nBase.LinAlg.LAPACK.stein!\\nBase.LinAlg.LAPACK.syconv!\\nBase.LinAlg.LAPACK.sysv!\\nBase.LinAlg.LAPACK.sytrf!\\nBase.LinAlg.LAPACK.sytri!\\nBase.LinAlg.LAPACK.sytrs!\\nBase.LinAlg.LAPACK.hesv!\\nBase.LinAlg.LAPACK.hetrf!\\nBase.LinAlg.LAPACK.hetri!\\nBase.LinAlg.LAPACK.hetrs!\\nBase.LinAlg.LAPACK.syev!\\nBase.LinAlg.LAPACK.syevr!\\nBase.LinAlg.LAPACK.sygvd!\\nBase.LinAlg.LAPACK.bdsqr!\\nBase.LinAlg.LAPACK.bdsdc!\\nBase.LinAlg.LAPACK.gecon!\\nBase.LinAlg.LAPACK.gehrd!\\nBase.LinAlg.LAPACK.orghr!\\nBase.LinAlg.LAPACK.gees!\\nBase.LinAlg.LAPACK.gges!\\nBase.LinAlg.LAPACK.trexc!\\nBase.LinAlg.LAPACK.trsen!\\nBase.LinAlg.LAPACK.tgsen!\\nBase.LinAlg.LAPACK.trsyl!\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#\",\n    \"page\": \"Constants\",\n    \"title\": \"Constants\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Core.nothing\",\n    \"page\": \"Constants\",\n    \"title\": \"Core.nothing\",\n    \"category\": \"Constant\",\n    \"text\": \"nothing\\n\\nThe singleton instance of type Void, used by convention when there is no value to return (as in a C void function). Can be converted to an empty Nullable value.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.PROGRAM_FILE\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.PROGRAM_FILE\",\n    \"category\": \"Constant\",\n    \"text\": \"PROGRAM_FILE\\n\\nA string containing the script name passed to Julia from the command line. Note that the script name remains unchanged from within included files. Alternatively see @__FILE__.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.ARGS\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.ARGS\",\n    \"category\": \"Constant\",\n    \"text\": \"ARGS\\n\\nAn array of the command line arguments passed to Julia, as strings.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.C_NULL\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.C_NULL\",\n    \"category\": \"Constant\",\n    \"text\": \"C_NULL\\n\\nThe C null pointer constant, sometimes used when calling external code.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.VERSION\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.VERSION\",\n    \"category\": \"Constant\",\n    \"text\": \"VERSION\\n\\nA VersionNumber object describing which version of Julia is in use. For details see Version Number Literals.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.LOAD_PATH\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.LOAD_PATH\",\n    \"category\": \"Constant\",\n    \"text\": \"LOAD_PATH\\n\\nAn array of paths as strings or custom loader objects for the require function and using and import statements to consider when loading code. To create a custom loader type, define the type and then add appropriate methods to the Base.load_hook function with the following signature:\\n\\nBase.load_hook(loader::Loader, name::String, found::Any)\\n\\nThe loader argument is the current value in LOAD_PATH, name is the name of the module to load, and found is the path of any previously found code to provide name. If no provider has been found earlier in LOAD_PATH then the value of found will be nothing. Custom loader functionality is experimental and may break or change in Julia 1.0.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.JULIA_HOME\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.JULIA_HOME\",\n    \"category\": \"Constant\",\n    \"text\": \"JULIA_HOME\\n\\nA string containing the full path to the directory containing the julia executable.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Core.ANY\",\n    \"page\": \"Constants\",\n    \"title\": \"Core.ANY\",\n    \"category\": \"Constant\",\n    \"text\": \"ANY\\n\\nEquivalent to Any for dispatch purposes, but signals the compiler to skip code generation specialization for that field.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.Sys.CPU_CORES\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.Sys.CPU_CORES\",\n    \"category\": \"Constant\",\n    \"text\": \"Sys.CPU_CORES\\n\\nThe number of logical CPU cores available in the system.\\n\\nSee the Hwloc.jl package for extended information, including number of physical cores.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.Sys.WORD_SIZE\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.Sys.WORD_SIZE\",\n    \"category\": \"Constant\",\n    \"text\": \"Sys.WORD_SIZE\\n\\nStandard word size on the current machine, in bits.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.Sys.KERNEL\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.Sys.KERNEL\",\n    \"category\": \"Constant\",\n    \"text\": \"Sys.KERNEL\\n\\nA symbol representing the name of the operating system, as returned by uname of the build configuration.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.Sys.ARCH\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.Sys.ARCH\",\n    \"category\": \"Constant\",\n    \"text\": \"Sys.ARCH\\n\\nA symbol representing the architecture of the build configuration.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#Base.Sys.MACHINE\",\n    \"page\": \"Constants\",\n    \"title\": \"Base.Sys.MACHINE\",\n    \"category\": \"Constant\",\n    \"text\": \"Sys.MACHINE\\n\\nA string containing the build triple.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/constants.html#lib-constants-1\",\n    \"page\": \"Constants\",\n    \"title\": \"Constants\",\n    \"category\": \"section\",\n    \"text\": \"Core.nothing\\nBase.PROGRAM_FILE\\nBase.ARGS\\nBase.C_NULL\\nBase.VERSION\\nBase.LOAD_PATH\\nBase.JULIA_HOME\\nCore.ANY\\nBase.Sys.CPU_CORES\\nBase.Sys.WORD_SIZE\\nBase.Sys.KERNEL\\nBase.Sys.ARCH\\nBase.Sys.MACHINESee also:STDIN\\nSTDOUT\\nSTDERR\\nENV\\nENDIAN_BOM\\nLibc.MS_ASYNC\\nLibc.MS_INVALIDATE\\nLibc.MS_SYNC\\nLibdl.DL_LOAD_PATH\\nLibdl.RTLD_DEEPBIND\\nLibdl.RTLD_LOCAL\\nLibdl.RTLD_NOLOAD\\nLibdl.RTLD_LAZY\\nLibdl.RTLD_NOW\\nLibdl.RTLD_GLOBAL\\nLibdl.RTLD_NODELETE\\nLibdl.RTLD_FIRST\"\n},\n\n{\n    \"location\": \"stdlib/file.html#\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Filesystem\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.pwd\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.pwd\",\n    \"category\": \"Function\",\n    \"text\": \"pwd() -> AbstractString\\n\\nGet the current working directory.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.cd-Tuple{AbstractString}\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.cd\",\n    \"category\": \"Method\",\n    \"text\": \"cd(dir::AbstractString=homedir())\\n\\nSet the current working directory.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.cd-Tuple{Function}\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.cd\",\n    \"category\": \"Method\",\n    \"text\": \"cd(f::Function, dir::AbstractString=homedir())\\n\\nTemporarily changes the current working directory and applies function f before returning.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.readdir\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.readdir\",\n    \"category\": \"Function\",\n    \"text\": \"readdir(dir::AbstractString=\\\".\\\") -> Vector{String}\\n\\nReturns the files and directories in the directory dir (or the current working directory if not given).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.walkdir\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.walkdir\",\n    \"category\": \"Function\",\n    \"text\": \"walkdir(dir; topdown=true, follow_symlinks=false, onerror=throw)\\n\\nThe walkdir method returns an iterator that walks the directory tree of a directory. The iterator returns a tuple containing (rootpath, dirs, files). The directory tree can be traversed top-down or bottom-up. If walkdir encounters a SystemError it will rethrow the error by default. A custom error handling function can be provided through onerror keyword argument. onerror is called with a SystemError as argument.\\n\\nfor (root, dirs, files) in walkdir(\\\".\\\")\\n    println(\\\"Directories in $root\\\")\\n    for dir in dirs\\n        println(joinpath(root, dir)) # path to directories\\n    end\\n    println(\\\"Files in $root\\\")\\n    for file in files\\n        println(joinpath(root, file)) # path to files\\n    end\\nend\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.mkdir\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.mkdir\",\n    \"category\": \"Function\",\n    \"text\": \"mkdir(path::AbstractString, mode::Unsigned=0o777)\\n\\nMake a new directory with name path and permissions mode. mode defaults to 0o777, modified by the current file creation mask. This function never creates more than one directory. If the directory already exists, or some intermediate directories do not exist, this function throws an error. See mkpath for a function which creates all required intermediate directories.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.mkpath\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.mkpath\",\n    \"category\": \"Function\",\n    \"text\": \"mkpath(path::AbstractString, mode::Unsigned=0o777)\\n\\nCreate all directories in the given path, with permissions mode. mode defaults to 0o777, modified by the current file creation mask.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.symlink\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.symlink\",\n    \"category\": \"Function\",\n    \"text\": \"symlink(target::AbstractString, link::AbstractString)\\n\\nCreates a symbolic link to target with the name link.\\n\\nnote: Note\\nThis function raises an error under operating systems that do not support soft symbolic links, such as Windows XP.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.readlink\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.readlink\",\n    \"category\": \"Function\",\n    \"text\": \"readlink(path::AbstractString) -> AbstractString\\n\\nReturns the target location a symbolic link path points to.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.chmod\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.chmod\",\n    \"category\": \"Function\",\n    \"text\": \"chmod(path::AbstractString, mode::Integer; recursive::Bool=false)\\n\\nChange the permissions mode of path to mode. Only integer modes (e.g. 0o777) are currently supported. If recursive=true and the path is a directory all permissions in that directory will be recursively changed.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.chown\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.chown\",\n    \"category\": \"Function\",\n    \"text\": \"chown(path::AbstractString, owner::Integer, group::Integer=-1)\\n\\nChange the owner and/or group of path to owner and/or group. If the value entered for owner or group is -1 the corresponding ID will not change. Only integer owners and groups are currently supported.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.stat\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.stat\",\n    \"category\": \"Function\",\n    \"text\": \"stat(file)\\n\\nReturns a structure whose fields contain information about the file. The fields of the structure are:\\n\\nName Description\\nsize The size (in bytes) of the file\\ndevice ID of the device that contains the file\\ninode The inode number of the file\\nmode The protection mode of the file\\nnlink The number of hard links to the file\\nuid The user id of the owner of the file\\ngid The group id of the file owner\\nrdev If this file refers to a device, the ID of the device it refers to\\nblksize The file-system preferred block size for the file\\nblocks The number of such blocks allocated\\nmtime Unix timestamp of when the file was last modified\\nctime Unix timestamp of when the file was created\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.lstat\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.lstat\",\n    \"category\": \"Function\",\n    \"text\": \"lstat(file)\\n\\nLike stat, but for symbolic links gets the info for the link itself rather than the file it refers to. This function must be called on a file path rather than a file object or a file descriptor.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.ctime\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.ctime\",\n    \"category\": \"Function\",\n    \"text\": \"ctime(file)\\n\\nEquivalent to stat(file).ctime\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.mtime\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.mtime\",\n    \"category\": \"Function\",\n    \"text\": \"mtime(file)\\n\\nEquivalent to stat(file).mtime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.filemode\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.filemode\",\n    \"category\": \"Function\",\n    \"text\": \"filemode(file)\\n\\nEquivalent to stat(file).mode\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.filesize\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.filesize\",\n    \"category\": \"Function\",\n    \"text\": \"filesize(path...)\\n\\nEquivalent to stat(file).size.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.uperm\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.uperm\",\n    \"category\": \"Function\",\n    \"text\": \"uperm(file)\\n\\nGets the permissions of the owner of the file as a bitfield of\\n\\nValue Description\\n01 Execute Permission\\n02 Write Permission\\n04 Read Permission\\n\\nFor allowed arguments, see stat.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.gperm\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.gperm\",\n    \"category\": \"Function\",\n    \"text\": \"gperm(file)\\n\\nLike uperm but gets the permissions of the group owning the file.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.operm\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.operm\",\n    \"category\": \"Function\",\n    \"text\": \"operm(file)\\n\\nLike uperm but gets the permissions for people who neither own the file nor are a member of the group owning the file\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.cp\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.cp\",\n    \"category\": \"Function\",\n    \"text\": \"cp(src::AbstractString, dst::AbstractString; remove_destination::Bool=false, follow_symlinks::Bool=false)\\n\\nCopy the file, link, or directory from src to dest. remove_destination=true will first remove an existing dst.\\n\\nIf follow_symlinks=false, and src is a symbolic link, dst will be created as a symbolic link. If follow_symlinks=true and src is a symbolic link, dst will be a copy of the file or directory src refers to.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.download\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.download\",\n    \"category\": \"Function\",\n    \"text\": \"download(url::AbstractString, [localfile::AbstractString])\\n\\nDownload a file from the given url, optionally renaming it to the given local file name. Note that this function relies on the availability of external tools such as curl, wget or fetch to download the file and is provided for convenience. For production use or situations in which more options are needed, please use a package that provides the desired functionality instead.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.mv\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.mv\",\n    \"category\": \"Function\",\n    \"text\": \"mv(src::AbstractString, dst::AbstractString; remove_destination::Bool=false)\\n\\nMove the file, link, or directory from src to dst. remove_destination=true will first remove an existing dst.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.rm\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.rm\",\n    \"category\": \"Function\",\n    \"text\": \"rm(path::AbstractString; force::Bool=false, recursive::Bool=false)\\n\\nDelete the file, link, or empty directory at the given path. If force=true is passed, a non-existing path is not treated as error. If recursive=true is passed and the path is a directory, then all contents are removed recursively.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.touch\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.touch\",\n    \"category\": \"Function\",\n    \"text\": \"touch(path::AbstractString)\\n\\nUpdate the last-modified timestamp on a file to the current time.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.tempname\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.tempname\",\n    \"category\": \"Function\",\n    \"text\": \"tempname()\\n\\nGenerate a unique temporary file path.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.tempdir\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.tempdir\",\n    \"category\": \"Function\",\n    \"text\": \"tempdir()\\n\\nObtain the path of a temporary directory (possibly shared with other processes).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.mktemp-Tuple{Any}\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.mktemp\",\n    \"category\": \"Method\",\n    \"text\": \"mktemp(parent=tempdir())\\n\\nReturns (path, io), where path is the path of a new temporary file in parent and io is an open file object for this path.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.mktemp-Tuple{Function,Any}\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.mktemp\",\n    \"category\": \"Method\",\n    \"text\": \"mktemp(f::Function, parent=tempdir())\\n\\nApply the function f to the result of mktemp(parent) and remove the temporary file upon completion.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.mktempdir-Tuple{Any}\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.mktempdir\",\n    \"category\": \"Method\",\n    \"text\": \"mktempdir(parent=tempdir())\\n\\nCreate a temporary directory in the parent directory and return its path. If parent does not exist, throw an error.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.mktempdir-Tuple{Function,Any}\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.mktempdir\",\n    \"category\": \"Method\",\n    \"text\": \"mktempdir(f::Function, parent=tempdir())\\n\\nApply the function f to the result of mktempdir(parent) and remove the temporary directory upon completion.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.isblockdev\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.isblockdev\",\n    \"category\": \"Function\",\n    \"text\": \"isblockdev(path) -> Bool\\n\\nReturns true if path is a block device, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.ischardev\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.ischardev\",\n    \"category\": \"Function\",\n    \"text\": \"ischardev(path) -> Bool\\n\\nReturns true if path is a character device, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.isdir\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.isdir\",\n    \"category\": \"Function\",\n    \"text\": \"isdir(path) -> Bool\\n\\nReturns true if path is a directory, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.isfifo\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.isfifo\",\n    \"category\": \"Function\",\n    \"text\": \"isfifo(path) -> Bool\\n\\nReturns true if path is a FIFO, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.isfile\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.isfile\",\n    \"category\": \"Function\",\n    \"text\": \"isfile(path) -> Bool\\n\\nReturns true if path is a regular file, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.islink\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.islink\",\n    \"category\": \"Function\",\n    \"text\": \"islink(path) -> Bool\\n\\nReturns true if path is a symbolic link, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.ismount\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.ismount\",\n    \"category\": \"Function\",\n    \"text\": \"ismount(path) -> Bool\\n\\nReturns true if path is a mount point, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.ispath\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.ispath\",\n    \"category\": \"Function\",\n    \"text\": \"ispath(path) -> Bool\\n\\nReturns true if path is a valid filesystem path, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.issetgid\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.issetgid\",\n    \"category\": \"Function\",\n    \"text\": \"issetgid(path) -> Bool\\n\\nReturns true if path has the setgid flag set, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.issetuid\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.issetuid\",\n    \"category\": \"Function\",\n    \"text\": \"issetuid(path) -> Bool\\n\\nReturns true if path has the setuid flag set, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.issocket\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.issocket\",\n    \"category\": \"Function\",\n    \"text\": \"issocket(path) -> Bool\\n\\nReturns true if path is a socket, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.issticky\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.issticky\",\n    \"category\": \"Function\",\n    \"text\": \"issticky(path) -> Bool\\n\\nReturns true if path has the sticky bit set, false otherwise.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.homedir\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.homedir\",\n    \"category\": \"Function\",\n    \"text\": \"homedir() -> AbstractString\\n\\nReturn the current user's home directory.\\n\\nnote: Note\\nhomedir determines the home directory via libuv's uv_os_homedir. For details (for example on how to specify the home directory via environment variables), see the uv_os_homedir documentation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.dirname\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.dirname\",\n    \"category\": \"Function\",\n    \"text\": \"dirname(path::AbstractString) -> AbstractString\\n\\nGet the directory part of a path.\\n\\njulia> dirname(\\\"/home/myuser\\\")\\n\\\"/home\\\"\\n\\nSee also: basename\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.basename\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.basename\",\n    \"category\": \"Function\",\n    \"text\": \"basename(path::AbstractString) -> AbstractString\\n\\nGet the file name part of a path.\\n\\njulia> basename(\\\"/home/myuser/example.jl\\\")\\n\\\"example.jl\\\"\\n\\nSee also: dirname\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.@__FILE__\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.@__FILE__\",\n    \"category\": \"Macro\",\n    \"text\": \"@__FILE__ -> AbstractString\\n\\n@__FILE__ expands to a string with the absolute file path of the file containing the macro. Returns nothing if run from a REPL or an empty string if evaluated by julia -e <expr>. Alternatively see PROGRAM_FILE.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.@__DIR__\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.@__DIR__\",\n    \"category\": \"Macro\",\n    \"text\": \"@__DIR__ -> AbstractString\\n\\n@__DIR__ expands to a string with the directory part of the absolute path of the file containing the macro. Returns nothing if run from a REPL or an empty string if evaluated by julia -e <expr>.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#@__LINE__\",\n    \"page\": \"Filesystem\",\n    \"title\": \"@__LINE__\",\n    \"category\": \"Macro\",\n    \"text\": \"@__LINE__ -> Int\\n\\n@__LINE__ expands to the line number of the call-site.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.isabspath\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.isabspath\",\n    \"category\": \"Function\",\n    \"text\": \"isabspath(path::AbstractString) -> Bool\\n\\nDetermines whether a path is absolute (begins at the root directory).\\n\\njulia> isabspath(\\\"/home\\\")\\ntrue\\n\\njulia> isabspath(\\\"home\\\")\\nfalse\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.isdirpath\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.isdirpath\",\n    \"category\": \"Function\",\n    \"text\": \"isdirpath(path::AbstractString) -> Bool\\n\\nDetermines whether a path refers to a directory (for example, ends with a path separator).\\n\\njulia> isdirpath(\\\"/home\\\")\\nfalse\\n\\njulia> isdirpath(\\\"/home/\\\")\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.joinpath\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.joinpath\",\n    \"category\": \"Function\",\n    \"text\": \"joinpath(parts...) -> AbstractString\\n\\nJoin path components into a full path. If some argument is an absolute path, then prior components are dropped.\\n\\njulia> joinpath(\\\"/home/myuser\\\",\\\"example.jl\\\")\\n\\\"/home/myuser/example.jl\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.abspath\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.abspath\",\n    \"category\": \"Function\",\n    \"text\": \"abspath(path::AbstractString) -> AbstractString\\n\\nConvert a path to an absolute path by adding the current directory if necessary.\\n\\n\\n\\nabspath(path::AbstractString, paths::AbstractString...) -> AbstractString\\n\\nConvert a set of paths to an absolute path by joining them together and adding the current directory if necessary. Equivalent to abspath(joinpath(path, paths...)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.normpath\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.normpath\",\n    \"category\": \"Function\",\n    \"text\": \"normpath(path::AbstractString) -> AbstractString\\n\\nNormalize a path, removing \\\".\\\" and \\\"..\\\" entries.\\n\\njulia> normpath(\\\"/home/myuser/../example.jl\\\")\\n\\\"/home/example.jl\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.realpath\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.realpath\",\n    \"category\": \"Function\",\n    \"text\": \"realpath(path::AbstractString) -> AbstractString\\n\\nCanonicalize a path by expanding symbolic links and removing \\\".\\\" and \\\"..\\\" entries.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.relpath\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.relpath\",\n    \"category\": \"Function\",\n    \"text\": \"relpath(path::AbstractString, startpath::AbstractString = \\\".\\\") -> AbstractString\\n\\nReturn a relative filepath to path either from the current directory or from an optional start directory. This is a path computation: the filesystem is not accessed to confirm the existence or nature of path or startpath.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.expanduser\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.expanduser\",\n    \"category\": \"Function\",\n    \"text\": \"expanduser(path::AbstractString) -> AbstractString\\n\\nOn Unix systems, replace a tilde character at the start of a path with the current user's home directory.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.splitdir\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.splitdir\",\n    \"category\": \"Function\",\n    \"text\": \"splitdir(path::AbstractString) -> (AbstractString, AbstractString)\\n\\nSplit a path into a tuple of the directory name and file name.\\n\\njulia> splitdir(\\\"/home/myuser\\\")\\n(\\\"/home\\\", \\\"myuser\\\")\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.splitdrive\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.splitdrive\",\n    \"category\": \"Function\",\n    \"text\": \"splitdrive(path::AbstractString) -> (AbstractString, AbstractString)\\n\\nOn Windows, split a path into the drive letter part and the path part. On Unix systems, the first component is always the empty string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Base.Filesystem.splitext\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Base.Filesystem.splitext\",\n    \"category\": \"Function\",\n    \"text\": \"splitext(path::AbstractString) -> (AbstractString, AbstractString)\\n\\nIf the last component of a path contains a dot, split the path into everything before the dot and everything including and after the dot. Otherwise, return a tuple of the argument unmodified and the empty string.\\n\\njulia> splitext(\\\"/home/myuser/example.jl\\\")\\n(\\\"/home/myuser/example\\\", \\\".jl\\\")\\n\\njulia> splitext(\\\"/home/myuser/example\\\")\\n(\\\"/home/myuser/example\\\", \\\"\\\")\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/file.html#Filesystem-1\",\n    \"page\": \"Filesystem\",\n    \"title\": \"Filesystem\",\n    \"category\": \"section\",\n    \"text\": \"Base.Filesystem.pwd\\nBase.Filesystem.cd(::AbstractString)\\nBase.Filesystem.cd(::Function)\\nBase.Filesystem.readdir\\nBase.Filesystem.walkdir\\nBase.Filesystem.mkdir\\nBase.Filesystem.mkpath\\nBase.Filesystem.symlink\\nBase.Filesystem.readlink\\nBase.Filesystem.chmod\\nBase.Filesystem.chown\\nBase.stat\\nBase.Filesystem.lstat\\nBase.Filesystem.ctime\\nBase.Filesystem.mtime\\nBase.Filesystem.filemode\\nBase.Filesystem.filesize\\nBase.Filesystem.uperm\\nBase.Filesystem.gperm\\nBase.Filesystem.operm\\nBase.Filesystem.cp\\nBase.download\\nBase.Filesystem.mv\\nBase.Filesystem.rm\\nBase.Filesystem.touch\\nBase.Filesystem.tempname\\nBase.Filesystem.tempdir\\nBase.Filesystem.mktemp(::Any)\\nBase.Filesystem.mktemp(::Function, ::Any)\\nBase.Filesystem.mktempdir(::Any)\\nBase.Filesystem.mktempdir(::Function, ::Any)\\nBase.Filesystem.isblockdev\\nBase.Filesystem.ischardev\\nBase.Filesystem.isdir\\nBase.Filesystem.isfifo\\nBase.Filesystem.isfile\\nBase.Filesystem.islink\\nBase.Filesystem.ismount\\nBase.Filesystem.ispath\\nBase.Filesystem.issetgid\\nBase.Filesystem.issetuid\\nBase.Filesystem.issocket\\nBase.Filesystem.issticky\\nBase.Filesystem.homedir\\nBase.Filesystem.dirname\\nBase.Filesystem.basename\\nBase.@__FILE__\\nBase.@__DIR__\\n@__LINE__\\nBase.Filesystem.isabspath\\nBase.Filesystem.isdirpath\\nBase.Filesystem.joinpath\\nBase.Filesystem.abspath\\nBase.Filesystem.normpath\\nBase.Filesystem.realpath\\nBase.Filesystem.relpath\\nBase.Filesystem.expanduser\\nBase.Filesystem.splitdir\\nBase.Filesystem.splitdrive\\nBase.Filesystem.splitext\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"I/O and Network\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#I/O-and-Network-1\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"I/O and Network\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.STDOUT\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.STDOUT\",\n    \"category\": \"Constant\",\n    \"text\": \"STDOUT\\n\\nGlobal variable referring to the standard out stream.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.STDERR\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.STDERR\",\n    \"category\": \"Constant\",\n    \"text\": \"STDERR\\n\\nGlobal variable referring to the standard error stream.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.STDIN\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.STDIN\",\n    \"category\": \"Constant\",\n    \"text\": \"STDIN\\n\\nGlobal variable referring to the standard input stream.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.open\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.open\",\n    \"category\": \"Function\",\n    \"text\": \"open(filename::AbstractString, [read::Bool, write::Bool, create::Bool, truncate::Bool, append::Bool]) -> IOStream\\n\\nOpen a file in a mode specified by five boolean arguments. The default is to open files for reading only. Returns a stream for accessing the file.\\n\\n\\n\\nopen(filename::AbstractString, [mode::AbstractString]) -> IOStream\\n\\nAlternate syntax for open, where a string-based mode specifier is used instead of the five booleans. The values of mode correspond to those from fopen(3) or Perl open, and are equivalent to setting the following boolean groups:\\n\\nMode Description\\nr read\\nr+ read, write\\nw write, create, truncate\\nw+ read, write, create, truncate\\na write, create, append\\na+ read, write, create, append\\n\\n\\n\\nopen(f::Function, args...)\\n\\nApply the function f to the result of open(args...) and close the resulting file descriptor upon completion.\\n\\nExample: open(readstring, \\\"file.txt\\\")\\n\\n\\n\\nopen(command, mode::AbstractString=\\\"r\\\", stdio=DevNull)\\n\\nStart running command asynchronously, and return a tuple (stream,process).  If mode is \\\"r\\\", then stream reads from the process's standard output and stdio optionally specifies the process's standard input stream.  If mode is \\\"w\\\", then stream writes to the process's standard input and stdio optionally specifies the process's standard output stream.\\n\\n\\n\\nopen(f::Function, command, mode::AbstractString=\\\"r\\\", stdio=DevNull)\\n\\nSimilar to open(command, mode, stdio), but calls f(stream) on the resulting read or write stream, then closes the stream and waits for the process to complete.  Returns the value returned by f.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.IOBuffer\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.IOBuffer\",\n    \"category\": \"Type\",\n    \"text\": \"IOBuffer([data,],[readable::Bool=true, writable::Bool=true, [maxsize::Int=typemax(Int)]])\\n\\nCreate an IOBuffer, which may optionally operate on a pre-existing array. If the readable/writable arguments are given, they restrict whether or not the buffer may be read from or written to respectively. The last argument optionally specifies a size beyond which the buffer may not be grown.\\n\\n\\n\\nIOBuffer() -> IOBuffer\\n\\nCreate an in-memory I/O stream.\\n\\n\\n\\nIOBuffer(size::Int)\\n\\nCreate a fixed size IOBuffer. The buffer will not grow dynamically.\\n\\n\\n\\nIOBuffer(string::String)\\n\\nCreate a read-only IOBuffer on the data underlying the given string.\\n\\njulia> io = IOBuffer(\\\"Haho\\\");\\n\\njulia> String(take!(io))\\n\\\"Haho\\\"\\n\\njulia> String(take!(io))\\n\\\"Haho\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.take!-Tuple{Base.AbstractIOBuffer}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.take!\",\n    \"category\": \"Method\",\n    \"text\": \"take!(b::IOBuffer)\\n\\nObtain the contents of an IOBuffer as an array, without copying. Afterwards, the IOBuffer is reset to its initial state.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.fdio\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.fdio\",\n    \"category\": \"Function\",\n    \"text\": \"fdio([name::AbstractString, ]fd::Integer[, own::Bool=false]) -> IOStream\\n\\nCreate an IOStream object from an integer file descriptor. If own is true, closing this object will close the underlying descriptor. By default, an IOStream is closed when it is garbage collected. name allows you to associate the descriptor with a named file.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.flush\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.flush\",\n    \"category\": \"Function\",\n    \"text\": \"flush(stream)\\n\\nCommit all currently buffered writes to the given stream.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.close\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.close\",\n    \"category\": \"Function\",\n    \"text\": \"close(stream)\\n\\nClose an I/O stream. Performs a flush first.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.write\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.write\",\n    \"category\": \"Function\",\n    \"text\": \"write(stream::IO, x)\\nwrite(filename::AbstractString, x)\\n\\nWrite the canonical binary representation of a value to the given I/O stream or file. Returns the number of bytes written into the stream.\\n\\nYou can write multiple values with the same write call. i.e. the following are equivalent:\\n\\nwrite(stream, x, y...)\\nwrite(stream, x) + write(stream, y...)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.read\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.read\",\n    \"category\": \"Function\",\n    \"text\": \"read(filename::AbstractString, args...)\\n\\nOpen a file and read its contents. args is passed to read: this is equivalent to open(io->read(io, args...), filename).\\n\\n\\n\\nread(stream::IO, T, dims)\\n\\nRead a series of values of type T from stream, in canonical binary representation. dims is either a tuple or a series of integer arguments specifying the size of the Array{T} to return.\\n\\n\\n\\nread(s::IO, nb=typemax(Int))\\n\\nRead at most nb bytes from s, returning a Vector{UInt8} of the bytes read.\\n\\n\\n\\nread(s::IOStream, nb::Integer; all=true)\\n\\nRead at most nb bytes from s, returning a Vector{UInt8} of the bytes read.\\n\\nIf all is true (the default), this function will block repeatedly trying to read all requested bytes, until an error or end-of-file occurs. If all is false, at most one read call is performed, and the amount of data returned is device-dependent. Note that not all stream types support the all option.\\n\\n\\n\\nread(stream::IO, T)\\n\\nRead a single value of type T from stream, in canonical binary representation.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.read!\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.read!\",\n    \"category\": \"Function\",\n    \"text\": \"read!(stream::IO, array::Union{Array, BitArray})\\nread!(filename::AbstractString, array::Union{Array, BitArray})\\n\\nRead binary data from an I/O stream or file, filling in array.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.readbytes!\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.readbytes!\",\n    \"category\": \"Function\",\n    \"text\": \"readbytes!(stream::IO, b::AbstractVector{UInt8}, nb=length(b))\\n\\nRead at most nb bytes from stream into b, returning the number of bytes read. The size of b will be increased if needed (i.e. if nb is greater than length(b) and enough bytes could be read), but it will never be decreased.\\n\\n\\n\\nreadbytes!(stream::IOStream, b::AbstractVector{UInt8}, nb=length(b); all::Bool=true)\\n\\nRead at most nb bytes from stream into b, returning the number of bytes read. The size of b will be increased if needed (i.e. if nb is greater than length(b) and enough bytes could be read), but it will never be decreased.\\n\\nSee read for a description of the all option.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.unsafe_read\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.unsafe_read\",\n    \"category\": \"Function\",\n    \"text\": \"unsafe_read(io::IO, ref, nbytes::UInt)\\n\\nCopy nbytes from the IO stream object into ref (converted to a pointer).\\n\\nIt is recommended that subtypes T<:IO override the following method signature to provide more efficient implementations: unsafe_read(s::T, p::Ptr{UInt8}, n::UInt)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.unsafe_write\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.unsafe_write\",\n    \"category\": \"Function\",\n    \"text\": \"unsafe_write(io::IO, ref, nbytes::UInt)\\n\\nCopy nbytes from ref (converted to a pointer) into the IO object.\\n\\nIt is recommended that subtypes T<:IO override the following method signature to provide more efficient implementations: unsafe_write(s::T, p::Ptr{UInt8}, n::UInt)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.position\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.position\",\n    \"category\": \"Function\",\n    \"text\": \"position(s)\\n\\nGet the current position of a stream.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.seek\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.seek\",\n    \"category\": \"Function\",\n    \"text\": \"seek(s, pos)\\n\\nSeek a stream to the given position.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.seekstart\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.seekstart\",\n    \"category\": \"Function\",\n    \"text\": \"seekstart(s)\\n\\nSeek a stream to its beginning.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.seekend\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.seekend\",\n    \"category\": \"Function\",\n    \"text\": \"seekend(s)\\n\\nSeek a stream to its end.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.skip\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.skip\",\n    \"category\": \"Function\",\n    \"text\": \"skip(s, offset)\\n\\nSeek a stream relative to the current position.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.mark\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.mark\",\n    \"category\": \"Function\",\n    \"text\": \"mark(s)\\n\\nAdd a mark at the current position of stream s. Returns the marked position.\\n\\nSee also unmark, reset, ismarked.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.unmark\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.unmark\",\n    \"category\": \"Function\",\n    \"text\": \"unmark(s)\\n\\nRemove a mark from stream s. Returns true if the stream was marked, false otherwise.\\n\\nSee also mark, reset, ismarked.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.reset\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.reset\",\n    \"category\": \"Function\",\n    \"text\": \"reset(s)\\n\\nReset a stream s to a previously marked position, and remove the mark. Returns the previously marked position. Throws an error if the stream is not marked.\\n\\nSee also mark, unmark, ismarked.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.ismarked\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.ismarked\",\n    \"category\": \"Function\",\n    \"text\": \"ismarked(s)\\n\\nReturns true if stream s is marked.\\n\\nSee also mark, unmark, reset.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.eof\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.eof\",\n    \"category\": \"Function\",\n    \"text\": \"eof(stream) -> Bool\\n\\nTests whether an I/O stream is at end-of-file. If the stream is not yet exhausted, this function will block to wait for more data if necessary, and then return false. Therefore it is always safe to read one byte after seeing eof return false. eof will return false as long as buffered data is still available, even if the remote end of a connection is closed.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.isreadonly\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.isreadonly\",\n    \"category\": \"Function\",\n    \"text\": \"isreadonly(stream) -> Bool\\n\\nDetermine whether a stream is read-only.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.iswritable\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.iswritable\",\n    \"category\": \"Function\",\n    \"text\": \"iswritable(io) -> Bool\\n\\nReturns true if the specified IO object is writable (if that can be determined).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.isreadable\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.isreadable\",\n    \"category\": \"Function\",\n    \"text\": \"isreadable(io) -> Bool\\n\\nReturns true if the specified IO object is readable (if that can be determined).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.isopen\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.isopen\",\n    \"category\": \"Function\",\n    \"text\": \"isopen(object) -> Bool\\n\\nDetermine whether an object - such as a stream, timer, or mmap \u2013 is not yet closed. Once an object is closed, it will never produce a new event. However, a closed stream may still have data to read in its buffer, use eof to check for the ability to read data. Use poll_fd to be notified when a stream might be writable or readable.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Serializer.serialize\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Serializer.serialize\",\n    \"category\": \"Function\",\n    \"text\": \"serialize(stream, value)\\n\\nWrite an arbitrary value to a stream in an opaque format, such that it can be read back by deserialize. The read-back value will be as identical as possible to the original. In general, this process will not work if the reading and writing are done by different versions of Julia, or an instance of Julia with a different system image. Ptr values are serialized as all-zero bit patterns (NULL).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Serializer.deserialize\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Serializer.deserialize\",\n    \"category\": \"Function\",\n    \"text\": \"deserialize(stream)\\n\\nRead a value written by serialize. deserialize assumes the binary data read from stream is correct and has been serialized by a compatible implementation of serialize. It has been designed with simplicity and performance as a goal and does not validate the data read. Malformed data can result in process termination. The caller has to ensure the integrity and correctness of data read from stream.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Grisu.print_shortest\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Grisu.print_shortest\",\n    \"category\": \"Function\",\n    \"text\": \"print_shortest(io, x)\\n\\nPrint the shortest possible representation, with the minimum number of consecutive non-zero digits, of number x, ensuring that it would parse to the exact same number.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.fd\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.fd\",\n    \"category\": \"Function\",\n    \"text\": \"fd(stream)\\n\\nReturns the file descriptor backing the stream or file. Note that this function only applies to synchronous File's and IOStream's not to any of the asynchronous streams.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.redirect_stdout\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.redirect_stdout\",\n    \"category\": \"Function\",\n    \"text\": \"redirect_stdout([stream]) -> (rd, wr)\\n\\nCreate a pipe to which all C and Julia level STDOUT output will be redirected. Returns a tuple (rd, wr) representing the pipe ends. Data written to STDOUT may now be read from the rd end of the pipe. The wr end is given for convenience in case the old STDOUT object was cached by the user and needs to be replaced elsewhere.\\n\\nnote: Note\\nstream must be a TTY, a Pipe, or a TCPSocket.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.redirect_stdout-Tuple{Function,Any}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.redirect_stdout\",\n    \"category\": \"Method\",\n    \"text\": \"redirect_stdout(f::Function, stream)\\n\\nRun the function f while redirecting STDOUT to stream. Upon completion, STDOUT is restored to its prior setting.\\n\\nnote: Note\\nstream must be a TTY, a Pipe, or a TCPSocket.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.redirect_stderr\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.redirect_stderr\",\n    \"category\": \"Function\",\n    \"text\": \"redirect_stderr([stream]) -> (rd, wr)\\n\\nLike redirect_stdout, but for STDERR.\\n\\nnote: Note\\nstream must be a TTY, a Pipe, or a TCPSocket.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.redirect_stderr-Tuple{Function,Any}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.redirect_stderr\",\n    \"category\": \"Method\",\n    \"text\": \"redirect_stderr(f::Function, stream)\\n\\nRun the function f while redirecting STDERR to stream. Upon completion, STDERR is restored to its prior setting.\\n\\nnote: Note\\nstream must be a TTY, a Pipe, or a TCPSocket.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.redirect_stdin\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.redirect_stdin\",\n    \"category\": \"Function\",\n    \"text\": \"redirect_stdin([stream]) -> (rd, wr)\\n\\nLike redirect_stdout, but for STDIN. Note that the order of the return tuple is still (rd, wr), i.e. data to be read from STDIN may be written to wr.\\n\\nnote: Note\\nstream must be a TTY, a Pipe, or a TCPSocket.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.redirect_stdin-Tuple{Function,Any}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.redirect_stdin\",\n    \"category\": \"Method\",\n    \"text\": \"redirect_stdin(f::Function, stream)\\n\\nRun the function f while redirecting STDIN to stream. Upon completion, STDIN is restored to its prior setting.\\n\\nnote: Note\\nstream must be a TTY, a Pipe, or a TCPSocket.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.readchomp\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.readchomp\",\n    \"category\": \"Function\",\n    \"text\": \"readchomp(x)\\n\\nRead the entirety of x as a string and remove a single trailing newline. Equivalent to chomp!(readstring(x)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.truncate\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.truncate\",\n    \"category\": \"Function\",\n    \"text\": \"truncate(file,n)\\n\\nResize the file or buffer given by the first argument to exactly n bytes, filling previously unallocated space with '\\\\0' if the file or buffer is grown.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.skipchars\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.skipchars\",\n    \"category\": \"Function\",\n    \"text\": \"skipchars(stream, predicate; linecomment::Char)\\n\\nAdvance the stream until before the first character for which predicate returns false. For example skipchars(stream, isspace) will skip all whitespace. If keyword argument linecomment is specified, characters from that character through the end of a line will also be skipped.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.countlines\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.countlines\",\n    \"category\": \"Function\",\n    \"text\": \"countlines(io::IO, eol::Char='\\\\n')\\n\\nRead io until the end of the stream/file and count the number of lines. To specify a file pass the filename as the first argument. EOL markers other than '\\\\n' are supported by passing them as the second argument.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.PipeBuffer\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.PipeBuffer\",\n    \"category\": \"Function\",\n    \"text\": \"PipeBuffer(data::Vector{UInt8}=UInt8[],[maxsize::Int=typemax(Int)])\\n\\nAn IOBuffer that allows reading and performs writes by appending. Seeking and truncating are not supported. See IOBuffer for the available constructors. If data is given, creates a PipeBuffer to operate on a data vector, optionally specifying a size beyond which the underlying Array may not be grown.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.readavailable\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.readavailable\",\n    \"category\": \"Function\",\n    \"text\": \"readavailable(stream)\\n\\nRead all available data on the stream, blocking the task only if no data is available. The result is a Vector{UInt8,1}.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.IOContext\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.IOContext\",\n    \"category\": \"Type\",\n    \"text\": \"IOContext\\n\\nIOContext provides a mechanism for passing output configuration settings among show methods.\\n\\nIn short, it is an immutable dictionary that is a subclass of IO. It supports standard dictionary operations such as getindex, and can also be used as an I/O stream.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.IOContext-Tuple{IO,Pair}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.IOContext\",\n    \"category\": \"Method\",\n    \"text\": \"IOContext(io::IO, KV::Pair)\\n\\nCreate an IOContext that wraps a given stream, adding the specified key=>value pair to the properties of that stream (note that io can itself be an IOContext).\\n\\nuse (key => value) in dict to see if this particular combination is in the properties set\\nuse get(dict, key, default) to retrieve the most recent value for a particular key\\n\\nThe following properties are in common use:\\n\\n:compact: Boolean specifying that small values should be printed more compactly, e.g. that numbers should be printed with fewer digits. This is set when printing array elements.\\n:limit: Boolean specifying that containers should be truncated, e.g. showing \u2026 in place of most elements.\\n:displaysize: A Tuple{Int,Int} giving the size in rows and columns to use for text output. This can be used to override the display size for called functions, but to get the size of the screen use the displaysize function.\\n\\njulia> function f(io::IO)\\n           if get(io, :short, false)\\n               print(io, \\\"short\\\")\\n           else\\n               print(io, \\\"loooooong\\\")\\n           end\\n       end\\nf (generic function with 1 method)\\n\\njulia> f(STDOUT)\\nloooooong\\njulia> f(IOContext(STDOUT, :short => true))\\nshort\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.IOContext-Tuple{IO,IOContext}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.IOContext\",\n    \"category\": \"Method\",\n    \"text\": \"IOContext(io::IO, context::IOContext)\\n\\nCreate an IOContext that wraps an alternate IO but inherits the properties of context.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#General-I/O-1\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"General I/O\",\n    \"category\": \"section\",\n    \"text\": \"Base.STDOUT\\nBase.STDERR\\nBase.STDIN\\nBase.open\\nBase.IOBuffer\\nBase.take!(::Base.AbstractIOBuffer)\\nBase.fdio\\nBase.flush\\nBase.close\\nBase.write\\nBase.read\\nBase.read!\\nBase.readbytes!\\nBase.unsafe_read\\nBase.unsafe_write\\nBase.position\\nBase.seek\\nBase.seekstart\\nBase.seekend\\nBase.skip\\nBase.mark\\nBase.unmark\\nBase.reset\\nBase.ismarked\\nBase.eof\\nBase.isreadonly\\nBase.iswritable\\nBase.isreadable\\nBase.isopen\\nBase.Serializer.serialize\\nBase.Serializer.deserialize\\nBase.Grisu.print_shortest\\nBase.fd\\nBase.redirect_stdout\\nBase.redirect_stdout(::Function, ::Any)\\nBase.redirect_stderr\\nBase.redirect_stderr(::Function, ::Any)\\nBase.redirect_stdin\\nBase.redirect_stdin(::Function, ::Any)\\nBase.readchomp\\nBase.truncate\\nBase.skipchars\\nBase.DataFmt.countlines\\nBase.PipeBuffer\\nBase.readavailable\\nBase.IOContext\\nBase.IOContext(::IO, ::Pair)\\nBase.IOContext(::IO, ::IOContext)\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.show-Tuple{Any}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.show\",\n    \"category\": \"Method\",\n    \"text\": \"show(x)\\n\\nWrite an informative text representation of a value to the current output stream. New types should overload show(io, x) where the first argument is a stream. The representation used by show generally includes Julia-specific formatting and type information.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.showcompact\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.showcompact\",\n    \"category\": \"Function\",\n    \"text\": \"showcompact(x)\\n\\nShow a compact representation of a value.\\n\\nThis is used for printing array elements without repeating type information (which would be redundant with that printed once for the whole array), and without line breaks inside the representation of an element.\\n\\nTo offer a compact representation different from its standard one, a custom type should test get(io, :compact, false) in its normal show method.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.showall\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.showall\",\n    \"category\": \"Function\",\n    \"text\": \"showall(x)\\n\\nSimilar to show, except shows all elements of arrays.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.summary\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.summary\",\n    \"category\": \"Function\",\n    \"text\": \"summary(x)\\n\\nReturn a string giving a brief description of a value. By default returns string(typeof(x)), e.g. Int64.\\n\\nFor arrays, returns a string of size and type info, e.g. 10-element Array{Int64,1}.\\n\\njulia> summary(1)\\n\\\"Int64\\\"\\n\\njulia> summary(zeros(2))\\n\\\"2-element Array{Float64,1}\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.print\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.print\",\n    \"category\": \"Function\",\n    \"text\": \"print(io::IO, x)\\n\\nWrite to io (or to the default output stream STDOUT if io is not given) a canonical (un-decorated) text representation of a value if there is one, otherwise call show. The representation used by print includes minimal formatting and tries to avoid Julia-specific details.\\n\\njulia> print(\\\"Hello World!\\\")\\nHello World!\\njulia> io = IOBuffer();\\n\\njulia> print(io, \\\"Hello World!\\\")\\n\\njulia> String(take!(io))\\n\\\"Hello World!\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.println\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.println\",\n    \"category\": \"Function\",\n    \"text\": \"println(io::IO, xs...)\\n\\nPrint (using print) xs followed by a newline. If io is not supplied, prints to STDOUT.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.print_with_color\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.print_with_color\",\n    \"category\": \"Function\",\n    \"text\": \"print_with_color(color::Union{Symbol, Int}, [io], xs...; bold::Bool = false)\\n\\nPrint xs in a color specified as a symbol.\\n\\ncolor may take any of the values :normal, :default, :bold, :black, :blue, :cyan, :green, :light_black, :light_blue, :light_cyan, :light_green, :light_magenta, :light_red, :light_yellow, :magenta, :nothing, :red, :white, or  :yellow or an integer between 0 and 255 inclusive. Note that not all terminals support 256 colors. If the keyword bold is given as true, the result will be printed in bold.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.info\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.info\",\n    \"category\": \"Function\",\n    \"text\": \"info([io, ] msg..., [prefix=\\\"INFO: \\\"])\\n\\nDisplay an informational message. Argument msg is a string describing the information to be displayed. The prefix keyword argument can be used to override the default prepending of msg.\\n\\njulia> info(\\\"hello world\\\")\\nINFO: hello world\\n\\njulia> info(\\\"hello world\\\"; prefix=\\\"MY INFO: \\\")\\nMY INFO: hello world\\n\\nSee also logging.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.warn\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.warn\",\n    \"category\": \"Function\",\n    \"text\": \"warn([io, ] msg..., [prefix=\\\"WARNING: \\\", once=false, key=nothing, bt=nothing, filename=nothing, lineno::Int=0])\\n\\nDisplay a warning. Argument msg is a string describing the warning to be displayed.  Set once to true and specify a key to only display msg the first time warn is called.  If bt is not nothing a backtrace is displayed. If filename is not nothing both it and lineno are displayed.\\n\\nSee also logging.\\n\\n\\n\\nwarn(msg)\\n\\nDisplay a warning. Argument msg is a string describing the warning to be displayed.\\n\\njulia> warn(\\\"Beep Beep\\\")\\nWARNING: Beep Beep\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.logging\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.logging\",\n    \"category\": \"Function\",\n    \"text\": \"logging(io [, m [, f]][; kind=:all])\\nlogging([; kind=:all])\\n\\nStream output of informational, warning, and/or error messages to io, overriding what was otherwise specified.  Optionally, divert stream only for module m, or specifically function f within m.  kind can be :all (the default), :info, :warn, or :error.  See Base.log_{info,warn,error}_to for the current set of redirections.  Call logging with no arguments (or just the kind) to reset everything.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Printf.@printf\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Printf.@printf\",\n    \"category\": \"Macro\",\n    \"text\": \"@printf([io::IOStream], \\\"%Fmt\\\", args...)\\n\\nPrint args using C printf() style format specification string, with some caveats: Inf and NaN are printed consistently as Inf and NaN for flags %a, %A, %e, %E, %f, %F, %g, and %G. Furthermore, if a floating point number is equally close to the numeric values of two possible output strings, the output string further away from zero is chosen.\\n\\nOptionally, an IOStream may be passed as the first argument to redirect output.\\n\\nExamples\\n\\njulia> @printf(\\\"%f %F %f %F\\\\n\\\", Inf, Inf, NaN, NaN)\\nInf Inf NaN NaN\\n\\n\\njulia> @printf \\\"%.0f %.1f %f\\\\n\\\" 0.5 0.025 -0.0078125\\n1 0.0 -0.007813\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Printf.@sprintf\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Printf.@sprintf\",\n    \"category\": \"Macro\",\n    \"text\": \"@sprintf(\\\"%Fmt\\\", args...)\\n\\nReturn @printf formatted output as string.\\n\\nExamples\\n\\njulia> s = @sprintf \\\"this is a %s %15.1f\\\" \\\"test\\\" 34.567;\\n\\njulia> println(s)\\nthis is a test            34.6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.sprint\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.sprint\",\n    \"category\": \"Function\",\n    \"text\": \"sprint(f::Function, args...)\\n\\nCall the given function with an I/O stream and the supplied extra arguments. Everything written to this I/O stream is returned as a string.\\n\\njulia> sprint(showcompact, 66.66666)\\n\\\"66.6667\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.showerror\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.showerror\",\n    \"category\": \"Function\",\n    \"text\": \"showerror(io, e)\\n\\nShow a descriptive representation of an exception object.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.dump\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.dump\",\n    \"category\": \"Function\",\n    \"text\": \"dump(x)\\n\\nShow every part of the representation of a value.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.readstring\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.readstring\",\n    \"category\": \"Function\",\n    \"text\": \"readstring(stream::IO)\\nreadstring(filename::AbstractString)\\n\\nRead the entire contents of an I/O stream or a file as a string. The text is assumed to be encoded in UTF-8.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.readline\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.readline\",\n    \"category\": \"Function\",\n    \"text\": \"readline(stream::IO=STDIN; chomp::Bool=true)\\nreadline(filename::AbstractString; chomp::Bool=true)\\n\\nRead a single line of text from the given I/O stream or file (defaults to STDIN). When reading from a file, the text is assumed to be encoded in UTF-8. Lines in the input end with '\\\\n' or \\\"\\\\r\\\\n\\\" or the end of an input stream. When chomp is true (as it is by default), these trailing newline characters are removed from the line before it is returned. When chomp is false, they are returned as part of the line.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.readuntil\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.readuntil\",\n    \"category\": \"Function\",\n    \"text\": \"readuntil(stream::IO, delim)\\nreaduntil(filename::AbstractString, delim)\\n\\nRead a string from an I/O stream or a file, up to and including the given delimiter byte. The text is assumed to be encoded in UTF-8.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.readlines\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.readlines\",\n    \"category\": \"Function\",\n    \"text\": \"readlines(stream::IO=STDIN; chomp::Bool=true)\\nreadlines(filename::AbstractString; chomp::Bool=true)\\n\\nRead all lines of an I/O stream or a file as a vector of strings. Behavior is equivalent to saving the result of reading readline repeatedly with the same arguments and saving the resulting lines as a vector of strings.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.eachline\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.eachline\",\n    \"category\": \"Function\",\n    \"text\": \"eachline(stream::IO=STDIN; chomp::Bool=true)\\neachline(filename::AbstractString; chomp::Bool=true)\\n\\nCreate an iterable EachLine object that will yield each line from an I/O stream or a file. Iteration calls readline on the stream argument repeatedly with chomp passed through, determining whether trailing end-of-line characters are removed. When called with a file name, the file is opened once at the beginning of iteration and closed at the end. If iteration is interrupted, the file will be closed when the EachLine object is garbage collected.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.readdlm-Tuple{Any,Char,Type,Char}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.readdlm\",\n    \"category\": \"Method\",\n    \"text\": \"readdlm(source, delim::Char, T::Type, eol::Char; header=false, skipstart=0, skipblanks=true, use_mmap, quotes=true, dims, comments=true, comment_char='#')\\n\\nRead a matrix from the source where each line (separated by eol) gives one row, with elements separated by the given delimiter. The source can be a text file, stream or byte array. Memory mapped files can be used by passing the byte array representation of the mapped segment as source.\\n\\nIf T is a numeric type, the result is an array of that type, with any non-numeric elements as NaN for floating-point types, or zero. Other useful values of T include String, AbstractString, and Any.\\n\\nIf header is true, the first row of data will be read as header and the tuple (data_cells, header_cells) is returned instead of only data_cells.\\n\\nSpecifying skipstart will ignore the corresponding number of initial lines from the input.\\n\\nIf skipblanks is true, blank lines in the input will be ignored.\\n\\nIf use_mmap is true, the file specified by source is memory mapped for potential speedups. Default is true except on Windows. On Windows, you may want to specify true if the file is large, and is only read once and not written to.\\n\\nIf quotes is true, columns enclosed within double-quote (\\\") characters are allowed to contain new lines and column delimiters. Double-quote characters within a quoted field must be escaped with another double-quote.  Specifying dims as a tuple of the expected rows and columns (including header, if any) may speed up reading of large files.  If comments is true, lines beginning with comment_char and text following comment_char in any line are ignored.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.readdlm-Tuple{Any,Char,Char}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.readdlm\",\n    \"category\": \"Method\",\n    \"text\": \"readdlm(source, delim::Char, eol::Char; options...)\\n\\nIf all data is numeric, the result will be a numeric array. If some elements cannot be parsed as numbers, a heterogeneous array of numbers and strings is returned.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.readdlm-Tuple{Any,Char,Type}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.readdlm\",\n    \"category\": \"Method\",\n    \"text\": \"readdlm(source, delim::Char, T::Type; options...)\\n\\nThe end of line delimiter is taken as \\\\n.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.readdlm-Tuple{Any,Char}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.readdlm\",\n    \"category\": \"Method\",\n    \"text\": \"readdlm(source, delim::Char; options...)\\n\\nThe end of line delimiter is taken as \\\\n. If all data is numeric, the result will be a numeric array. If some elements cannot be parsed as numbers, a heterogeneous array of numbers and strings is returned.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.readdlm-Tuple{Any,Type}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.readdlm\",\n    \"category\": \"Method\",\n    \"text\": \"readdlm(source, T::Type; options...)\\n\\nThe columns are assumed to be separated by one or more whitespaces. The end of line delimiter is taken as \\\\n.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.readdlm-Tuple{Any}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.readdlm\",\n    \"category\": \"Method\",\n    \"text\": \"readdlm(source; options...)\\n\\nThe columns are assumed to be separated by one or more whitespaces. The end of line delimiter is taken as \\\\n. If all data is numeric, the result will be a numeric array. If some elements cannot be parsed as numbers, a heterogeneous array of numbers and strings is returned.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.writedlm\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.writedlm\",\n    \"category\": \"Function\",\n    \"text\": \"writedlm(f, A, delim='\\\\t'; opts)\\n\\nWrite A (a vector, matrix, or an iterable collection of iterable rows) as text to f (either a filename string or an IO stream) using the given delimiter delim (which defaults to tab, but can be any printable Julia object, typically a Char or AbstractString).\\n\\nFor example, two vectors x and y of the same length can be written as two columns of tab-delimited text to f by either writedlm(f, [x y]) or by writedlm(f, zip(x, y)).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.readcsv\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.readcsv\",\n    \"category\": \"Function\",\n    \"text\": \"readcsv(source, [T::Type]; options...)\\n\\nEquivalent to readdlm with delim set to comma, and type optionally defined by T.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.DataFmt.writecsv\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.DataFmt.writecsv\",\n    \"category\": \"Function\",\n    \"text\": \"writecsv(filename, A; opts)\\n\\nEquivalent to writedlm with delim set to comma.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Base64.Base64EncodePipe\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Base64.Base64EncodePipe\",\n    \"category\": \"Type\",\n    \"text\": \"Base64EncodePipe(ostream)\\n\\nReturns a new write-only I/O stream, which converts any bytes written to it into base64-encoded ASCII bytes written to ostream. Calling close on the Base64EncodePipe stream is necessary to complete the encoding (but does not close ostream).\\n\\njulia> io = IOBuffer();\\n\\njulia> iob64_encode = Base64EncodePipe(io);\\n\\njulia> write(iob64_encode, \\\"Hello!\\\")\\n6\\n\\njulia> close(iob64_encode);\\n\\njulia> str = String(take!(io))\\n\\\"SGVsbG8h\\\"\\n\\njulia> String(base64decode(str))\\n\\\"Hello!\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Base64.Base64DecodePipe\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Base64.Base64DecodePipe\",\n    \"category\": \"Type\",\n    \"text\": \"Base64DecodePipe(istream)\\n\\nReturns a new read-only I/O stream, which decodes base64-encoded data read from istream.\\n\\njulia> io = IOBuffer();\\n\\njulia> iob64_decode = Base64DecodePipe(io);\\n\\njulia> write(io, \\\"SGVsbG8h\\\")\\n8\\n\\njulia> seekstart(io);\\n\\njulia> String(read(iob64_decode))\\n\\\"Hello!\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Base64.base64encode\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Base64.base64encode\",\n    \"category\": \"Function\",\n    \"text\": \"base64encode(writefunc, args...)\\nbase64encode(args...)\\n\\nGiven a write-like function writefunc, which takes an I/O stream as its first argument, base64encode(writefunc, args...) calls writefunc to write args... to a base64-encoded string, and returns the string. base64encode(args...) is equivalent to base64encode(write, args...): it converts its arguments into bytes using the standard write functions and returns the base64-encoded string.\\n\\nSee also base64decode.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Base64.base64decode\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Base64.base64decode\",\n    \"category\": \"Function\",\n    \"text\": \"base64decode(string)\\n\\nDecodes the base64-encoded string and returns a Vector{UInt8} of the decoded bytes.\\n\\nSee also base64encode\\n\\njulia> b = base64decode(\\\"SGVsbG8h\\\")\\n6-element Array{UInt8,1}:\\n 0x48\\n 0x65\\n 0x6c\\n 0x6c\\n 0x6f\\n 0x21\\n\\njulia> String(b)\\n\\\"Hello!\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.displaysize\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.displaysize\",\n    \"category\": \"Function\",\n    \"text\": \"displaysize(io) -> (lines, columns)\\n\\nReturn the nominal size of the screen that may be used for rendering output to this io object\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Text-I/O-1\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Text I/O\",\n    \"category\": \"section\",\n    \"text\": \"Base.show(::Any)\\nBase.showcompact\\nBase.showall\\nBase.summary\\nBase.print\\nBase.println\\nBase.print_with_color\\nBase.info\\nBase.warn\\nBase.logging\\nBase.Printf.@printf\\nBase.Printf.@sprintf\\nBase.sprint\\nBase.showerror\\nBase.dump\\nBase.readstring\\nBase.readline\\nBase.readuntil\\nBase.readlines\\nBase.eachline\\nBase.DataFmt.readdlm(::Any, ::Char, ::Type, ::Char)\\nBase.DataFmt.readdlm(::Any, ::Char, ::Char)\\nBase.DataFmt.readdlm(::Any, ::Char, ::Type)\\nBase.DataFmt.readdlm(::Any, ::Char)\\nBase.DataFmt.readdlm(::Any, ::Type)\\nBase.DataFmt.readdlm(::Any)\\nBase.DataFmt.writedlm\\nBase.DataFmt.readcsv\\nBase.DataFmt.writecsv\\nBase.Base64.Base64EncodePipe\\nBase.Base64.Base64DecodePipe\\nBase.Base64.base64encode\\nBase.Base64.base64decode\\nBase.displaysize\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.display\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.display\",\n    \"category\": \"Function\",\n    \"text\": \"display(x)\\ndisplay(d::Display, x)\\ndisplay(mime, x)\\ndisplay(d::Display, mime, x)\\n\\nDisplay x using the topmost applicable display in the display stack, typically using the richest supported multimedia output for x, with plain-text STDOUT output as a fallback. The display(d, x) variant attempts to display x on the given display d only, throwing a MethodError if d cannot display objects of this type.\\n\\nThere are also two variants with a mime argument (a MIME type string, such as \\\"image/png\\\"), which attempt to display x using the requested MIME type only, throwing a MethodError if this type is not supported by either the display(s) or by x. With these variants, one can also supply the \\\"raw\\\" data in the requested MIME type by passing x::AbstractString (for MIME types with text-based storage, such as text/html or application/postscript) or x::Vector{UInt8} (for binary MIME types).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.redisplay\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.redisplay\",\n    \"category\": \"Function\",\n    \"text\": \"redisplay(x)\\nredisplay(d::Display, x)\\nredisplay(mime, x)\\nredisplay(d::Display, mime, x)\\n\\nBy default, the redisplay functions simply call display. However, some display backends may override redisplay to modify an existing display of x (if any). Using redisplay is also a hint to the backend that x may be redisplayed several times, and the backend may choose to defer the display until (for example) the next interactive prompt.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.displayable\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.displayable\",\n    \"category\": \"Function\",\n    \"text\": \"displayable(mime) -> Bool\\ndisplayable(d::Display, mime) -> Bool\\n\\nReturns a boolean value indicating whether the given mime type (string) is displayable by any of the displays in the current display stack, or specifically by the display d in the second variant.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.show-Tuple{Any,Any,Any}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.show\",\n    \"category\": \"Method\",\n    \"text\": \"show(stream, mime, x)\\n\\nThe display functions ultimately call show in order to write an object x as a given mime type to a given I/O stream (usually a memory buffer), if possible. In order to provide a rich multimedia representation of a user-defined type T, it is only necessary to define a new show method for T, via: show(stream, ::MIME\\\"mime\\\", x::T) = ..., where mime is a MIME-type string and the function body calls write (or similar) to write that representation of x to stream. (Note that the MIME\\\"\\\" notation only supports literal strings; to construct MIME types in a more flexible manner use MIME{Symbol(\\\"\\\")}.)\\n\\nFor example, if you define a MyImage type and know how to write it to a PNG file, you could define a function show(stream, ::MIME\\\"image/png\\\", x::MyImage) = ... to allow your images to be displayed on any PNG-capable Display (such as IJulia). As usual, be sure to import Base.show in order to add new methods to the built-in Julia function show.\\n\\nThe default MIME type is MIME\\\"text/plain\\\". There is a fallback definition for text/plain output that calls show with 2 arguments. Therefore, this case should be handled by defining a 2-argument show(stream::IO, x::MyType) method.\\n\\nTechnically, the MIME\\\"mime\\\" macro defines a singleton type for the given mime string, which allows us to exploit Julia's dispatch mechanisms in determining how to display objects of any given type.\\n\\nThe first argument to show can be an IOContext specifying output format properties. See IOContext for details.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.mimewritable\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.mimewritable\",\n    \"category\": \"Function\",\n    \"text\": \"mimewritable(mime, x)\\n\\nReturns a boolean value indicating whether or not the object x can be written as the given mime type. (By default, this is determined automatically by the existence of the corresponding show method for typeof(x).)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.reprmime\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.reprmime\",\n    \"category\": \"Function\",\n    \"text\": \"reprmime(mime, x)\\n\\nReturns an AbstractString or Vector{UInt8} containing the representation of x in the requested mime type, as written by show (throwing a MethodError if no appropriate show is available). An AbstractString is returned for MIME types with textual representations (such as \\\"text/html\\\" or \\\"application/postscript\\\"), whereas binary data is returned as Vector{UInt8}. (The function istextmime(mime) returns whether or not Julia treats a given mime type as text.)\\n\\nAs a special case, if x is an AbstractString (for textual MIME types) or a Vector{UInt8} (for binary MIME types), the reprmime function assumes that x is already in the requested mime format and simply returns x. This special case does not apply to the \\\"text/plain\\\" MIME type. This is useful so that raw data can be passed to display(m::MIME, x).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.stringmime\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.stringmime\",\n    \"category\": \"Function\",\n    \"text\": \"stringmime(mime, x)\\n\\nReturns an AbstractString containing the representation of x in the requested mime type. This is similar to reprmime except that binary data is base64-encoded as an ASCII string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.pushdisplay\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.pushdisplay\",\n    \"category\": \"Function\",\n    \"text\": \"pushdisplay(d::Display)\\n\\nPushes a new display d on top of the global display-backend stack. Calling display(x) or display(mime, x) will display x on the topmost compatible backend in the stack (i.e., the topmost backend that does not throw a MethodError).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.popdisplay\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.popdisplay\",\n    \"category\": \"Function\",\n    \"text\": \"popdisplay()\\npopdisplay(d::Display)\\n\\nPop the topmost backend off of the display-backend stack, or the topmost copy of d in the second variant.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.TextDisplay\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.TextDisplay\",\n    \"category\": \"Type\",\n    \"text\": \"TextDisplay(io::IO)\\n\\nReturns a TextDisplay <: Display, which displays any object as the text/plain MIME type (by default), writing the text representation to the given I/O stream. (This is how objects are printed in the Julia REPL.)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Multimedia.istextmime\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Multimedia.istextmime\",\n    \"category\": \"Function\",\n    \"text\": \"istextmime(m::MIME)\\n\\nDetermine whether a MIME type is text data. MIME types are assumed to be binary data except for a set of types known to be text data (possibly Unicode).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Multimedia-I/O-1\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Multimedia I/O\",\n    \"category\": \"section\",\n    \"text\": \"Just as text output is performed by print and user-defined types can indicate their textual representation by overloading show, Julia provides a standardized mechanism for rich multimedia output (such as images, formatted text, or even audio and video), consisting of three parts:A function display(x) to request the richest available multimedia display of a Julia object x (with a plain-text fallback).\\nOverloading show allows one to indicate arbitrary multimedia representations (keyed by standard MIME types) of user-defined types.\\nMultimedia-capable display backends may be registered by subclassing a generic Display type and pushing them onto a stack of display backends via pushdisplay.The base Julia runtime provides only plain-text display, but richer displays may be enabled by loading external modules or by using graphical Julia environments (such as the IPython-based IJulia notebook).Base.Multimedia.display\\nBase.Multimedia.redisplay\\nBase.Multimedia.displayable\\nBase.show(::Any, ::Any, ::Any)\\nBase.Multimedia.mimewritable\\nBase.Multimedia.reprmime\\nBase.Multimedia.stringmimeAs mentioned above, one can also define new display backends. For example, a module that can display PNG images in a window can register this capability with Julia, so that calling display(x) on types with PNG representations will automatically display the image using the module's window.In order to define a new display backend, one should first create a subtype D of the abstract class Display.  Then, for each MIME type (mime string) that can be displayed on D, one should define a function display(d::D, ::MIME\\\"mime\\\", x) = ... that displays x as that MIME type, usually by calling reprmime(mime, x).  A MethodError should be thrown if x cannot be displayed as that MIME type; this is automatic if one calls reprmime. Finally, one should define a function display(d::D, x) that queries mimewritable(mime, x) for the mime types supported by D and displays the \\\"best\\\" one; a MethodError should be thrown if no supported MIME types are found for x.  Similarly, some subtypes may wish to override redisplay(d::D, ...). (Again, one should import Base.display to add new methods to display.) The return values of these functions are up to the implementation (since in some cases it may be useful to return a display \\\"handle\\\" of some type).  The display functions for D can then be called directly, but they can also be invoked automatically from display(x) simply by pushing a new display onto the display-backend stack with:Base.Multimedia.pushdisplay\\nBase.Multimedia.popdisplay\\nBase.Multimedia.TextDisplay\\nBase.Multimedia.istextmime\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Mmap.Anonymous\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Mmap.Anonymous\",\n    \"category\": \"Type\",\n    \"text\": \"Mmap.Anonymous(name, readonly, create)\\n\\nCreate an IO-like object for creating zeroed-out mmapped-memory that is not tied to a file for use in Mmap.mmap. Used by SharedArray for creating shared memory arrays.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Mmap.mmap-Tuple{Any,Type,Any,Any}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Mmap.mmap\",\n    \"category\": \"Method\",\n    \"text\": \"Mmap.mmap(io::Union{IOStream,AbstractString,Mmap.AnonymousMmap}[, type::Type{Array{T,N}}, dims, offset]; grow::Bool=true, shared::Bool=true)\\n       Mmap.mmap(type::Type{Array{T,N}}, dims)\\n\\nCreate an Array whose values are linked to a file, using memory-mapping. This provides a convenient way of working with data too large to fit in the computer's memory.\\n\\nThe type is an Array{T,N} with a bits-type element of T and dimension N that determines how the bytes of the array are interpreted. Note that the file must be stored in binary format, and no format conversions are possible (this is a limitation of operating systems, not Julia).\\n\\ndims is a tuple or single Integer specifying the size or length of the array.\\n\\nThe file is passed via the stream argument, either as an open IOStream or filename string. When you initialize the stream, use \\\"r\\\" for a \\\"read-only\\\" array, and \\\"w+\\\" to create a new array used to write values to disk.\\n\\nIf no type argument is specified, the default is Vector{UInt8}.\\n\\nOptionally, you can specify an offset (in bytes) if, for example, you want to skip over a header in the file. The default value for the offset is the current stream position for an IOStream.\\n\\nThe grow keyword argument specifies whether the disk file should be grown to accommodate the requested size of array (if the total file size is < requested array size). Write privileges are required to grow the file.\\n\\nThe shared keyword argument specifies whether the resulting Array and changes made to it will be visible to other processes mapping the same file.\\n\\nFor example, the following code\\n\\n# Create a file for mmapping\\n# (you could alternatively use mmap to do this step, too)\\nA = rand(1:20, 5, 30)\\ns = open(\\\"/tmp/mmap.bin\\\", \\\"w+\\\")\\n# We'll write the dimensions of the array as the first two Ints in the file\\nwrite(s, size(A,1))\\nwrite(s, size(A,2))\\n# Now write the data\\nwrite(s, A)\\nclose(s)\\n\\n# Test by reading it back in\\ns = open(\\\"/tmp/mmap.bin\\\")   # default is read-only\\nm = read(s, Int)\\nn = read(s, Int)\\nA2 = Mmap.mmap(s, Matrix{Int}, (m,n))\\n\\ncreates a m-by-n Matrix{Int}, linked to the file associated with stream s.\\n\\nA more portable file would need to encode the word size \u2013 32 bit or 64 bit \u2013 and endianness information in the header. In practice, consider encoding binary data using standard formats like HDF5 (which can be used with memory-mapping).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Mmap.mmap-Tuple{Any,BitArray,Any,Any}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Mmap.mmap\",\n    \"category\": \"Method\",\n    \"text\": \"Mmap.mmap(io, BitArray, [dims, offset])\\n\\nCreate a BitArray whose values are linked to a file, using memory-mapping; it has the same purpose, works in the same way, and has the same arguments, as mmap, but the byte representation is different.\\n\\nExample: B = Mmap.mmap(s, BitArray, (25,30000))\\n\\nThis would create a 25-by-30000 BitArray, linked to the file associated with stream s.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Mmap.sync!\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Mmap.sync!\",\n    \"category\": \"Function\",\n    \"text\": \"Mmap.sync!(array)\\n\\nForces synchronization between the in-memory version of a memory-mapped Array or BitArray and the on-disk version.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Memory-mapped-I/O-1\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Memory-mapped I/O\",\n    \"category\": \"section\",\n    \"text\": \"Base.Mmap.Anonymous\\nBase.Mmap.mmap(::Any, ::Type, ::Any, ::Any)\\nBase.Mmap.mmap(::Any, ::BitArray, ::Any, ::Any)\\nBase.Mmap.sync!\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.connect-Tuple{TCPSocket,Integer}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.connect\",\n    \"category\": \"Method\",\n    \"text\": \"connect([host], port::Integer) -> TCPSocket\\n\\nConnect to the host host on port port.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.connect-Tuple{AbstractString}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.connect\",\n    \"category\": \"Method\",\n    \"text\": \"connect(path::AbstractString) -> PipeEndpoint\\n\\nConnect to the named pipe / UNIX domain socket at path.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.listen-Tuple{Any}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.listen\",\n    \"category\": \"Method\",\n    \"text\": \"listen([addr, ]port::Integer; backlog::Integer=BACKLOG_DEFAULT) -> TCPServer\\n\\nListen on port on the address specified by addr. By default this listens on localhost only. To listen on all interfaces pass IPv4(0) or IPv6(0) as appropriate. backlog determines how many connections can be pending (not having called accept) before the server will begin to reject them. The default value of backlog is 511.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.listen-Tuple{AbstractString}\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.listen\",\n    \"category\": \"Method\",\n    \"text\": \"listen(path::AbstractString) -> PipeServer\\n\\nCreate and listen on a named pipe / UNIX domain socket.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.getaddrinfo\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.getaddrinfo\",\n    \"category\": \"Function\",\n    \"text\": \"getaddrinfo(host::AbstractString) -> IPAddr\\n\\nGets the IP address of the host (may have to do a DNS lookup)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.getsockname\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.getsockname\",\n    \"category\": \"Function\",\n    \"text\": \"getsockname(sock::Union{TCPServer, TCPSocket}) -> (IPAddr, UInt16)\\n\\nGet the IP address and the port that the given TCPSocket is connected to (or bound to, in the case of TCPServer).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.IPv4\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.IPv4\",\n    \"category\": \"Type\",\n    \"text\": \"IPv4(host::Integer) -> IPv4\\n\\nReturns an IPv4 object from ip address host formatted as an Integer.\\n\\njulia> IPv4(3223256218)\\nip\\\"192.30.252.154\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.IPv6\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.IPv6\",\n    \"category\": \"Type\",\n    \"text\": \"IPv6(host::Integer) -> IPv6\\n\\nReturns an IPv6 object from ip address host formatted as an Integer.\\n\\njulia> IPv6(3223256218)\\nip\\\"::c01e:fc9a\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.nb_available\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.nb_available\",\n    \"category\": \"Function\",\n    \"text\": \"nb_available(stream)\\n\\nReturns the number of bytes available for reading before a read from this stream or buffer will block.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.accept\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.accept\",\n    \"category\": \"Function\",\n    \"text\": \"accept(server[,client])\\n\\nAccepts a connection on the given server and returns a connection to the client. An uninitialized client stream may be provided, in which case it will be used instead of creating a new stream.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.listenany\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.listenany\",\n    \"category\": \"Function\",\n    \"text\": \"listenany([host::IPAddr,] port_hint) -> (UInt16, TCPServer)\\n\\nCreate a TCPServer on any port, using hint as a starting point. Returns a tuple of the actual port that the server was created on and the server itself.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Filesystem.poll_fd\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Filesystem.poll_fd\",\n    \"category\": \"Function\",\n    \"text\": \"poll_fd(fd, timeout_s::Real=-1; readable=false, writable=false)\\n\\nMonitor a file descriptor fd for changes in the read or write availability, and with a timeout given by timeout_s seconds.\\n\\nThe keyword arguments determine which of read and/or write status should be monitored; at least one of them must be set to true.\\n\\nThe returned value is an object with boolean fields readable, writable, and timedout, giving the result of the polling.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Filesystem.poll_file\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Filesystem.poll_file\",\n    \"category\": \"Function\",\n    \"text\": \"poll_file(path::AbstractString, interval_s::Real=5.007, timeout_s::Real=-1) -> (previous::StatStruct, current::StatStruct)\\n\\nMonitor a file for changes by polling every interval_s seconds until a change occurs or timeout_s seconds have elapsed. The interval_s should be a long period; the default is 5.007 seconds.\\n\\nReturns a pair of StatStruct objects (previous, current) when a change is detected.\\n\\nTo determine when a file was modified, compare mtime(prev) != mtime(current) to detect notification of changes. However, using watch_file for this operation is preferred, since it is more reliable and efficient, although in some situations it may not be available.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.Filesystem.watch_file\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.Filesystem.watch_file\",\n    \"category\": \"Function\",\n    \"text\": \"watch_file(path::AbstractString, timeout_s::Real=-1)\\n\\nWatch file or directory path for changes until a change occurs or timeout_s seconds have elapsed.\\n\\nThe returned value is an object with boolean fields changed, renamed, and timedout, giving the result of watching the file.\\n\\nThis behavior of this function varies slightly across platforms. See https://nodejs.org/api/fs.html#fs_caveats for more detailed information.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.bind\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.bind\",\n    \"category\": \"Function\",\n    \"text\": \"bind(socket::Union{UDPSocket, TCPSocket}, host::IPAddr, port::Integer; ipv6only=false, reuseaddr=false, kws...)\\n\\nBind socket to the given host:port. Note that 0.0.0.0 will listen on all devices.\\n\\nThe ipv6only parameter disables dual stack mode. If ipv6only=true, only an IPv6 stack is created.\\nIf reuseaddr=true, multiple threads or processes can bind to the same address without error if they all set reuseaddr=true, but only the last to bind will receive any traffic.\\n\\n\\n\\nbind(chnl::Channel, task::Task)\\n\\nAssociates the lifetime of chnl with a task. Channel chnl is automatically closed when the task terminates. Any uncaught exception in the task is propagated to all waiters on chnl.\\n\\nThe chnl object can be explicitly closed independent of task termination. Terminating tasks have no effect on already closed Channel objects.\\n\\nWhen a channel is bound to multiple tasks, the first task to terminate will close the channel. When multiple channels are bound to the same task, termination of the task will close all of the bound channels.\\n\\njulia> c = Channel(0);\\n\\njulia> task = @schedule foreach(i->put!(c, i), 1:4);\\n\\njulia> bind(c,task);\\n\\njulia> for i in c\\n           @show i\\n       end;\\ni = 1\\ni = 2\\ni = 3\\ni = 4\\n\\njulia> isopen(c)\\nfalse\\n\\njulia> c = Channel(0);\\n\\njulia> task = @schedule (put!(c,1);error(\\\"foo\\\"));\\n\\njulia> bind(c,task);\\n\\njulia> take!(c)\\n1\\n\\njulia> put!(c,1);\\nERROR: foo\\nStacktrace:\\n [1] check_channel_state(::Channel{Any}) at ./channels.jl:131\\n [2] put!(::Channel{Any}, ::Int64) at ./channels.jl:261\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.send\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.send\",\n    \"category\": \"Function\",\n    \"text\": \"send(socket::UDPSocket, host, port::Integer, msg)\\n\\nSend msg over socket to host:port.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.recv\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.recv\",\n    \"category\": \"Function\",\n    \"text\": \"recv(socket::UDPSocket)\\n\\nRead a UDP packet from the specified socket, and return the bytes received. This call blocks.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.recvfrom\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.recvfrom\",\n    \"category\": \"Function\",\n    \"text\": \"recvfrom(socket::UDPSocket) -> (address, data)\\n\\nRead a UDP packet from the specified socket, returning a tuple of (address, data), where address will be either IPv4 or IPv6 as appropriate.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.setopt\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.setopt\",\n    \"category\": \"Function\",\n    \"text\": \"setopt(sock::UDPSocket; multicast_loop = nothing, multicast_ttl=nothing, enable_broadcast=nothing, ttl=nothing)\\n\\nSet UDP socket options.\\n\\nmulticast_loop: loopback for multicast packets (default: true).\\nmulticast_ttl: TTL for multicast packets (default: nothing).\\nenable_broadcast: flag must be set to true if socket will be used for broadcast messages, or else the UDP system will return an access error (default: false).\\nttl: Time-to-live of packets sent on the socket (default: nothing).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.ntoh\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.ntoh\",\n    \"category\": \"Function\",\n    \"text\": \"ntoh(x)\\n\\nConverts the endianness of a value from Network byte order (big-endian) to that used by the Host.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.hton\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.hton\",\n    \"category\": \"Function\",\n    \"text\": \"hton(x)\\n\\nConverts the endianness of a value from that used by the Host to Network byte order (big-endian).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.ltoh\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.ltoh\",\n    \"category\": \"Function\",\n    \"text\": \"ltoh(x)\\n\\nConverts the endianness of a value from Little-endian to that used by the Host.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.htol\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.htol\",\n    \"category\": \"Function\",\n    \"text\": \"htol(x)\\n\\nConverts the endianness of a value from that used by the Host to Little-endian.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Base.ENDIAN_BOM\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Base.ENDIAN_BOM\",\n    \"category\": \"Constant\",\n    \"text\": \"ENDIAN_BOM\\n\\nThe 32-bit byte-order-mark indicates the native byte order of the host machine. Little-endian machines will contain the value 0x04030201. Big-endian machines will contain the value 0x01020304.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/io-network.html#Network-I/O-1\",\n    \"page\": \"I/O and Network\",\n    \"title\": \"Network I/O\",\n    \"category\": \"section\",\n    \"text\": \"Base.connect(::TCPSocket, ::Integer)\\nBase.connect(::AbstractString)\\nBase.listen(::Any)\\nBase.listen(::AbstractString)\\nBase.getaddrinfo\\nBase.getsockname\\nBase.IPv4\\nBase.IPv6\\nBase.nb_available\\nBase.accept\\nBase.listenany\\nBase.Filesystem.poll_fd\\nBase.Filesystem.poll_file\\nBase.Filesystem.watch_file\\nBase.bind\\nBase.send\\nBase.recv\\nBase.recvfrom\\nBase.setopt\\nBase.ntoh\\nBase.hton\\nBase.ltoh\\nBase.htol\\nBase.ENDIAN_BOM\"\n},\n\n{\n    \"location\": \"stdlib/punctuation.html#\",\n    \"page\": \"Punctuation\",\n    \"title\": \"Punctuation\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/punctuation.html#Punctuation-1\",\n    \"page\": \"Punctuation\",\n    \"title\": \"Punctuation\",\n    \"category\": \"section\",\n    \"text\": \"Extended documentation for mathematical symbols & functions is here.symbol meaning\\n@m invoke macro m; followed by space-separated expressions\\n! prefix \\\"not\\\" operator\\na!( ) at the end of a function name, ! indicates that a function modifies its argument(s)\\n# begin single line comment\\n#= begin multi-line comment (these are nestable)\\n=# end multi-line comment\\n$ string and expression interpolation\\n% remainder operator\\n^ exponent operator\\n& bitwise and\\n&& short-circuiting boolean and\\n| bitwise or\\n|| short-circuiting boolean or\\n\u22bb bitwise xor operator\\n* multiply, or matrix multiply\\n() the empty tuple\\n~ bitwise not operator\\n\\\\ backslash operator\\n' complex transpose operator A\u1d34\\na[] array indexing\\n[,] vertical concatenation\\n[;] also vertical concatenation\\n[ \u00a0  ] with space-separated expressions, horizontal concatenation\\nT{ } parametric type instantiation\\n; statement separator\\n, separate function arguments or tuple components\\n? 3-argument conditional operator (conditional ? if_true : if_false)\\n\\\"\\\" delimit string literals\\n'' delimit character literals\\n` ` delimit external process (command) specifications\\n... splice arguments into a function call or declare a varargs function or type\\n. access named fields in objects/modules, also prefixes elementwise operator/function calls\\na:b range a, a+1, a+2, ..., b\\na:s:b range a, a+s, a+2s, ..., b\\n: index an entire dimension (1:end)\\n:: type annotation, depending on context\\n:( ) quoted expression\\n:a symbol a\\n<: subtype operator\\n>: supertype operator (reverse of subtype operator)\\n=== egal comparison operator\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Sorting and Related Functions\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Sorting-and-Related-Functions-1\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Sorting and Related Functions\",\n    \"category\": \"section\",\n    \"text\": \"Julia has an extensive, flexible API for sorting and interacting with already-sorted arrays of values. By default, Julia picks reasonable algorithms and sorts in standard ascending order:julia> sort([2,3,1])\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3You can easily sort in reverse order as well:julia> sort([2,3,1], rev=true)\\n3-element Array{Int64,1}:\\n 3\\n 2\\n 1To sort an array in-place, use the \\\"bang\\\" version of the sort function:julia> a = [2,3,1];\\n\\njulia> sort!(a);\\n\\njulia> a\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3Instead of directly sorting an array, you can compute a permutation of the array's indices that puts the array into sorted order:julia> v = randn(5)\\n5-element Array{Float64,1}:\\n  0.297288\\n  0.382396\\n -0.597634\\n -0.0104452\\n -0.839027\\n\\njulia> p = sortperm(v)\\n5-element Array{Int64,1}:\\n 5\\n 3\\n 4\\n 1\\n 2\\n\\njulia> v[p]\\n5-element Array{Float64,1}:\\n -0.839027\\n -0.597634\\n -0.0104452\\n  0.297288\\n  0.382396Arrays can easily be sorted according to an arbitrary transformation of their values:julia> sort(v, by=abs)\\n5-element Array{Float64,1}:\\n -0.0104452\\n  0.297288\\n  0.382396\\n -0.597634\\n -0.839027Or in reverse order by a transformation:julia> sort(v, by=abs, rev=true)\\n5-element Array{Float64,1}:\\n -0.839027\\n -0.597634\\n  0.382396\\n  0.297288\\n -0.0104452If needed, the sorting algorithm can be chosen:julia> sort(v, alg=InsertionSort)\\n5-element Array{Float64,1}:\\n -0.839027\\n -0.597634\\n -0.0104452\\n  0.297288\\n  0.382396All the sorting and order related functions rely on a \\\"less than\\\" relation defining a total order on the values to be manipulated. The isless function is invoked by default, but the relation can be specified via the lt keyword.\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.sort!\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.sort!\",\n    \"category\": \"Function\",\n    \"text\": \"sort!(v; alg::Algorithm=defalg(v), lt=isless, by=identity, rev::Bool=false, order::Ordering=Forward)\\n\\nSort the vector v in place. QuickSort is used by default for numeric arrays while MergeSort is used for other arrays. You can specify an algorithm to use via the alg keyword (see Sorting Algorithms for available algorithms). The by keyword lets you provide a function that will be applied to each element before comparison; the lt keyword allows providing a custom \\\"less than\\\" function; use rev=true to reverse the sorting order. These options are independent and can be used together in all possible combinations: if both by and lt are specified, the lt function is applied to the result of the by function; rev=true reverses whatever ordering specified via the by and lt keywords.\\n\\nExamples\\n\\njulia> v = [3, 1, 2]; sort!(v); v\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> v = [3, 1, 2]; sort!(v, rev = true); v\\n3-element Array{Int64,1}:\\n 3\\n 2\\n 1\\n\\njulia> v = [(1, \\\"c\\\"), (3, \\\"a\\\"), (2, \\\"b\\\")]; sort!(v, by = x -> x[1]); v\\n3-element Array{Tuple{Int64,String},1}:\\n (1, \\\"c\\\")\\n (2, \\\"b\\\")\\n (3, \\\"a\\\")\\n\\njulia> v = [(1, \\\"c\\\"), (3, \\\"a\\\"), (2, \\\"b\\\")]; sort!(v, by = x -> x[2]); v\\n3-element Array{Tuple{Int64,String},1}:\\n (3, \\\"a\\\")\\n (2, \\\"b\\\")\\n (1, \\\"c\\\")\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.sort\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.sort\",\n    \"category\": \"Function\",\n    \"text\": \"sort(v; alg::Algorithm=defalg(v), lt=isless, by=identity, rev::Bool=false, order::Ordering=Forward)\\n\\nVariant of sort! that returns a sorted copy of v leaving v itself unmodified.\\n\\nExamples\\n\\njulia> v = [3, 1, 2];\\n\\njulia> sort(v)\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\njulia> v\\n3-element Array{Int64,1}:\\n 3\\n 1\\n 2\\n\\n\\n\\nsort(A, dim::Integer; alg::Algorithm=DEFAULT_UNSTABLE, lt=isless, by=identity, rev::Bool=false, order::Ordering=Forward, initialized::Bool=false)\\n\\nSort a multidimensional array A along the given dimension. See sort! for a description of possible keyword arguments.\\n\\nExamples\\n\\njulia> A = [4 3; 1 2]\\n2\u00d72 Array{Int64,2}:\\n 4  3\\n 1  2\\n\\njulia> sort(A, 1)\\n2\u00d72 Array{Int64,2}:\\n 1  2\\n 4  3\\n\\njulia> sort(A, 2)\\n2\u00d72 Array{Int64,2}:\\n 3  4\\n 1  2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.sortperm\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.sortperm\",\n    \"category\": \"Function\",\n    \"text\": \"sortperm(v; alg::Algorithm=DEFAULT_UNSTABLE, lt=isless, by=identity, rev::Bool=false, order::Ordering=Forward)\\n\\nReturn a permutation vector of indices of v that puts it in sorted order. Specify alg to choose a particular sorting algorithm (see Sorting Algorithms). MergeSort is used by default, and since it is stable, the resulting permutation will be the lexicographically first one that puts the input array into sorted order \u2013 i.e. indices of equal elements appear in ascending order. If you choose a non-stable sorting algorithm such as QuickSort, a different permutation that puts the array into order may be returned. The order is specified using the same keywords as sort!.\\n\\nSee also sortperm!.\\n\\nExamples\\n\\njulia> v = [3, 1, 2];\\n\\njulia> p = sortperm(v)\\n3-element Array{Int64,1}:\\n 2\\n 3\\n 1\\n\\njulia> v[p]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.sortperm!\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.sortperm!\",\n    \"category\": \"Function\",\n    \"text\": \"sortperm!(ix, v; alg::Algorithm=DEFAULT_UNSTABLE, lt=isless, by=identity, rev::Bool=false, order::Ordering=Forward, initialized::Bool=false)\\n\\nLike sortperm, but accepts a preallocated index vector ix.  If initialized is false (the default), ix is initialized to contain the values 1:length(v).\\n\\nExamples\\n\\njulia> v = [3, 1, 2]; p = zeros(Int, 3);\\n\\njulia> sortperm!(p, v); p\\n3-element Array{Int64,1}:\\n 2\\n 3\\n 1\\n\\njulia> v[p]\\n3-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.sortrows\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.sortrows\",\n    \"category\": \"Function\",\n    \"text\": \"sortrows(A; alg::Algorithm=DEFAULT_UNSTABLE, lt=isless, by=identity, rev::Bool=false, order::Ordering=Forward)\\n\\nSort the rows of matrix A lexicographically. See sort! for a description of possible keyword arguments.\\n\\nExamples\\n\\njulia> sortrows([7 3 5; -1 6 4; 9 -2 8])\\n3\u00d73 Array{Int64,2}:\\n -1   6  4\\n  7   3  5\\n  9  -2  8\\n\\njulia> sortrows([7 3 5; -1 6 4; 9 -2 8], lt=(x,y)->isless(x[2],y[2]))\\n3\u00d73 Array{Int64,2}:\\n  9  -2  8\\n  7   3  5\\n -1   6  4\\n\\njulia> sortrows([7 3 5; -1 6 4; 9 -2 8], rev=true)\\n3\u00d73 Array{Int64,2}:\\n  9  -2  8\\n  7   3  5\\n -1   6  4\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.sortcols\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.sortcols\",\n    \"category\": \"Function\",\n    \"text\": \"sortcols(A; alg::Algorithm=DEFAULT_UNSTABLE, lt=isless, by=identity, rev::Bool=false, order::Ordering=Forward)\\n\\nSort the columns of matrix A lexicographically. See sort! for a description of possible keyword arguments.\\n\\nExamples\\n\\njulia> sortcols([7 3 5; 6 -1 -4; 9 -2 8])\\n3\u00d73 Array{Int64,2}:\\n  3   5  7\\n -1  -4  6\\n -2   8  9\\n\\njulia> sortcols([7 3 5; 6 -1 -4; 9 -2 8], alg=InsertionSort, lt=(x,y)->isless(x[2],y[2]))\\n3\u00d73 Array{Int64,2}:\\n  5   3  7\\n -4  -1  6\\n  8  -2  9\\n\\njulia> sortcols([7 3 5; 6 -1 -4; 9 -2 8], rev=true)\\n3\u00d73 Array{Int64,2}:\\n 7   5   3\\n 6  -4  -1\\n 9   8  -2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Sorting-Functions-1\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Sorting Functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.sort!\\nBase.sort\\nBase.sortperm\\nBase.Sort.sortperm!\\nBase.Sort.sortrows\\nBase.Sort.sortcols\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.issorted\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.issorted\",\n    \"category\": \"Function\",\n    \"text\": \"issorted(v, lt=isless, by=identity, rev:Bool=false, order::Ordering=Forward)\\n\\nTest whether a vector is in sorted order. The lt, by and rev keywords modify what order is considered to be sorted just as they do for sort.\\n\\nExamples\\n\\njulia> issorted([1, 2, 3])\\ntrue\\n\\njulia> issorted([(1, \\\"b\\\"), (2, \\\"a\\\")], by = x -> x[1])\\ntrue\\n\\njulia> issorted([(1, \\\"b\\\"), (2, \\\"a\\\")], by = x -> x[2])\\nfalse\\n\\njulia> issorted([(1, \\\"b\\\"), (2, \\\"a\\\")], by = x -> x[2], rev=true)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.searchsorted\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.searchsorted\",\n    \"category\": \"Function\",\n    \"text\": \"searchsorted(a, x, [by=<transform>,] [lt=<comparison>,] [rev=false])\\n\\nReturns the range of indices of a which compare as equal to x (using binary search) according to the order specified by the by, lt and rev keywords, assuming that a is already sorted in that order. Returns an empty range located at the insertion point if a does not contain values equal to x.\\n\\nExamples\\n\\njulia> a = [4, 3, 2, 1]\\n4-element Array{Int64,1}:\\n 4\\n 3\\n 2\\n 1\\n\\njulia> searchsorted(a, 4)\\n5:4\\n\\njulia> searchsorted(a, 4, rev=true)\\n1:1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.searchsortedfirst\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.searchsortedfirst\",\n    \"category\": \"Function\",\n    \"text\": \"searchsortedfirst(a, x, [by=<transform>,] [lt=<comparison>,] [rev=false])\\n\\nReturns the index of the first value in a greater than or equal to x, according to the specified order. Returns length(a)+1 if x is greater than all values in a. a is assumed to be sorted.\\n\\nExamples\\n\\njulia> searchsortedfirst([1, 2, 4, 5, 14], 4)\\n3\\n\\njulia> searchsortedfirst([1, 2, 4, 5, 14], 4, rev=true)\\n1\\n\\njulia> searchsortedfirst([1, 2, 4, 5, 14], 15)\\n6\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.searchsortedlast\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.searchsortedlast\",\n    \"category\": \"Function\",\n    \"text\": \"searchsortedlast(a, x, [by=<transform>,] [lt=<comparison>,] [rev=false])\\n\\nReturns the index of the last value in a less than or equal to x, according to the specified order. Returns 0 if x is less than all values in a. a is assumed to be sorted.\\n\\nExamples\\n\\njulia> searchsortedlast([1, 2, 4, 5, 14], 4)\\n3\\n\\njulia> searchsortedlast([1, 2, 4, 5, 14], 4, rev=true)\\n5\\n\\njulia> searchsortedlast([1, 2, 4, 5, 14], -1)\\n0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.select!\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.select!\",\n    \"category\": \"Function\",\n    \"text\": \"select!(v, k, [by=<transform>,] [lt=<comparison>,] [rev=false])\\n\\nPartially sort the vector v in place, according to the order specified by by, lt and rev so that the value at index k (or range of adjacent values if k is a range) occurs at the position where it would appear if the array were fully sorted via a non-stable algorithm. If k is a single index, that value is returned; if k is a range, an array of values at those indices is returned. Note that select! does not fully sort the input array.\\n\\nExamples\\n\\njulia> a = [1, 2, 4, 3, 4]\\n5-element Array{Int64,1}:\\n 1\\n 2\\n 4\\n 3\\n 4\\n\\njulia> select!(a, 4)\\n4\\n\\njulia> a\\n5-element Array{Int64,1}:\\n 1\\n 2\\n 3\\n 4\\n 4\\n\\njulia> a = [1, 2, 4, 3, 4]\\n5-element Array{Int64,1}:\\n 1\\n 2\\n 4\\n 3\\n 4\\n\\njulia> select!(a, 4, rev=true)\\n2\\n\\njulia> a\\n5-element Array{Int64,1}:\\n 4\\n 4\\n 3\\n 2\\n 1\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.select\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.select\",\n    \"category\": \"Function\",\n    \"text\": \"select(v, k, [by=<transform>,] [lt=<comparison>,] [rev=false])\\n\\nVariant of select! which copies v before partially sorting it, thereby returning the same thing as select! but leaving v unmodified.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.selectperm\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.selectperm\",\n    \"category\": \"Function\",\n    \"text\": \"selectperm(v, k, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false])\\n\\nReturn a partial permutation of the vector v, according to the order specified by by, lt and rev, so that v[output] returns the first k (or range of adjacent values if k is a range) values of a fully sorted version of v. If k is a single index (Integer), an array of the first k indices is returned; if k is a range, an array of those indices is returned. Note that the handling of integer values for k is different from select in that it returns a vector of k elements instead of just the k th element. Also note that this is equivalent to, but more efficient than, calling sortperm(...)[k].\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Base.Sort.selectperm!\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Base.Sort.selectperm!\",\n    \"category\": \"Function\",\n    \"text\": \"selectperm!(ix, v, k, [alg=<algorithm>,] [by=<transform>,] [lt=<comparison>,] [rev=false,] [initialized=false])\\n\\nLike selectperm, but accepts a preallocated index vector ix. If initialized is false (the default), ix is initialized to contain the values 1:length(ix).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Order-Related-Functions-1\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Order-Related Functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.issorted\\nBase.Sort.searchsorted\\nBase.Sort.searchsortedfirst\\nBase.Sort.searchsortedlast\\nBase.Sort.select!\\nBase.Sort.select\\nBase.Sort.selectperm\\nBase.Sort.selectperm!\"\n},\n\n{\n    \"location\": \"stdlib/sort.html#Sorting-Algorithms-1\",\n    \"page\": \"Sorting and Related Functions\",\n    \"title\": \"Sorting Algorithms\",\n    \"category\": \"section\",\n    \"text\": \"There are currently four sorting algorithms available in base Julia:InsertionSort\\nQuickSort\\nPartialQuickSort(k)\\nMergeSortInsertionSort is an O(n^2) stable sorting algorithm. It is efficient for very small n, and is used internally by QuickSort.QuickSort is an O(n log n) sorting algorithm which is in-place, very fast, but not stable \u2013 i.e. elements which are considered equal will not remain in the same order in which they originally appeared in the array to be sorted. QuickSort is the default algorithm for numeric values, including integers and floats.PartialQuickSort(k) is similar to QuickSort, but the output array is only sorted up to index k if k is an integer, or in the range of k if k is an OrdinalRange. For example:x = rand(1:500, 100)\\nk = 50\\nk2 = 50:100\\ns = sort(x; alg=QuickSort)\\nps = sort(x; alg=PartialQuickSort(k))\\nqs = sort(x; alg=PartialQuickSort(k2))\\nmap(issorted, (s, ps, qs))             # => (true, false, false)\\nmap(x->issorted(x[1:k]), (s, ps, qs))  # => (true, true, false)\\nmap(x->issorted(x[k2]), (s, ps, qs))   # => (true, false, true)\\ns[1:k] == ps[1:k]                      # => true\\ns[k2] == qs[k2]                        # => trueMergeSort is an O(n log n) stable sorting algorithm but is not in-place \u2013 it requires a temporary array of half the size of the input array \u2013 and is typically not quite as fast as QuickSort. It is the default algorithm for non-numeric data.The default sorting algorithms are chosen on the basis that they are fast and stable, or appear to be so. For numeric types indeed, QuickSort is selected as it is faster and indistinguishable in this case from a stable sort (unless the array records its mutations in some way). The stability property comes at a non-negligible cost, so if you don't need it, you may want to explicitly specify your preferred algorithm, e.g. sort!(v, alg=QuickSort).The mechanism by which Julia picks default sorting algorithms is implemented via the Base.Sort.defalg function. It allows a particular algorithm to be registered as the default in all sorting functions for specific arrays. For example, here are the two default methods from sort.jl:defalg(v::AbstractArray) = MergeSort\\ndefalg{T<:Number}(v::AbstractArray{T}) = QuickSortAs for numeric arrays, choosing a non-stable default algorithm for array types for which the notion of a stable sort is meaningless (i.e. when two values comparing equal can not be distinguished) may make sense.\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Package Manager Functions\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.dir\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.dir\",\n    \"category\": \"Function\",\n    \"text\": \"dir() -> AbstractString\\n\\nReturns the absolute path of the package directory. This defaults to joinpath(homedir(),\\\".julia\\\",\\\"v$(VERSION.major).$(VERSION.minor)\\\") on all platforms (i.e. ~/.julia/v0.6 in UNIX shell syntax). If the JULIA_PKGDIR environment variable is set, then that path is used in the returned value as joinpath(ENV[\\\"JULIA_PKGDIR\\\"],\\\"v$(VERSION.major).$(VERSION.minor)\\\"). If JULIA_PKGDIR is a relative path, it is interpreted relative to whatever the current working directory is.\\n\\n\\n\\ndir(names...) -> AbstractString\\n\\nEquivalent to normpath(Pkg.dir(),names...) \u2013 i.e. it appends path components to the package directory and normalizes the resulting path. In particular, Pkg.dir(pkg) returns the path to the package pkg.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.init\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.init\",\n    \"category\": \"Function\",\n    \"text\": \"init(meta::AbstractString=DEFAULT_META, branch::AbstractString=META_BRANCH)\\n\\nInitialize Pkg.dir() as a package directory. This will be done automatically when the JULIA_PKGDIR is not set and Pkg.dir() uses its default value. As part of this process, clones a local METADATA git repository from the site and branch specified by its arguments, which are typically not provided. Explicit (non-default) arguments can be used to support a custom METADATA setup.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.resolve\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.resolve\",\n    \"category\": \"Function\",\n    \"text\": \"resolve()\\n\\nDetermines an optimal, consistent set of package versions to install or upgrade to. The optimal set of package versions is based on the contents of Pkg.dir(\\\"REQUIRE\\\") and the state of installed packages in Pkg.dir(), Packages that are no longer required are moved into Pkg.dir(\\\".trash\\\").\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.edit\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.edit\",\n    \"category\": \"Function\",\n    \"text\": \"edit()\\n\\nOpens Pkg.dir(\\\"REQUIRE\\\") in the editor specified by the VISUAL or EDITOR environment variables; when the editor command returns, it runs Pkg.resolve() to determine and install a new optimal set of installed package versions.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.add\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.add\",\n    \"category\": \"Function\",\n    \"text\": \"add(pkg, vers...)\\n\\nAdd a requirement entry for pkg to Pkg.dir(\\\"REQUIRE\\\") and call Pkg.resolve(). If vers are given, they must be VersionNumber objects and they specify acceptable version intervals for pkg.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.rm\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.rm\",\n    \"category\": \"Function\",\n    \"text\": \"rm(pkg)\\n\\nRemove all requirement entries for pkg from Pkg.dir(\\\"REQUIRE\\\") and call Pkg.resolve().\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.clone\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.clone\",\n    \"category\": \"Function\",\n    \"text\": \"clone(pkg)\\n\\nIf pkg has a URL registered in Pkg.dir(\\\"METADATA\\\"), clone it from that URL on the default branch. The package does not need to have any registered versions.\\n\\n\\n\\nclone(url, [pkg])\\n\\nClone a package directly from the git URL url. The package does not need to be registered in Pkg.dir(\\\"METADATA\\\"). The package repo is cloned by the name pkg if provided; if not provided, pkg is determined automatically from url.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.setprotocol!\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.setprotocol!\",\n    \"category\": \"Function\",\n    \"text\": \"setprotocol!(proto)\\n\\nSet the protocol used to access GitHub-hosted packages. Defaults to 'https', with a blank proto delegating the choice to the package developer.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.available\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.available\",\n    \"category\": \"Function\",\n    \"text\": \"available() -> Vector{String}\\n\\nReturns the names of available packages.\\n\\n\\n\\navailable(pkg) -> Vector{VersionNumber}\\n\\nReturns the version numbers available for package pkg.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.installed\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.installed\",\n    \"category\": \"Function\",\n    \"text\": \"installed() -> Dict{String,VersionNumber}\\n\\nReturns a dictionary mapping installed package names to the installed version number of each package.\\n\\n\\n\\ninstalled(pkg) -> Void | VersionNumber\\n\\nIf pkg is installed, return the installed version number. If pkg is registered, but not installed, return nothing.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.status\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.status\",\n    \"category\": \"Function\",\n    \"text\": \"status()\\n\\nPrints out a summary of what packages are installed and what version and state they're in.\\n\\n\\n\\nstatus(pkg)\\n\\nPrints out a summary of what version and state pkg, specifically, is in.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.update\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.update\",\n    \"category\": \"Function\",\n    \"text\": \"update(pkgs...)\\n\\nUpdate the metadata repo \u2013 kept in Pkg.dir(\\\"METADATA\\\") \u2013 then update any fixed packages that can safely be pulled from their origin; then call Pkg.resolve() to determine a new optimal set of packages versions.\\n\\nWithout arguments, updates all installed packages. When one or more package names are provided as arguments, only those packages and their dependencies are updated.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.checkout\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.checkout\",\n    \"category\": \"Function\",\n    \"text\": \"checkout(pkg, [branch=\\\"master\\\"]; merge=true, pull=true)\\n\\nCheckout the Pkg.dir(pkg) repo to the branch branch. Defaults to checking out the \\\"master\\\" branch. To go back to using the newest compatible released version, use Pkg.free(pkg). Changes are merged (fast-forward only) if the keyword argument merge == true, and the latest version is pulled from the upstream repo if pull == true.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.pin\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.pin\",\n    \"category\": \"Function\",\n    \"text\": \"pin(pkg)\\n\\nPin pkg at the current version. To go back to using the newest compatible released version, use Pkg.free(pkg)\\n\\n\\n\\npin(pkg, version)\\n\\nPin pkg at registered version version.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.free\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.free\",\n    \"category\": \"Function\",\n    \"text\": \"free(pkg)\\n\\nFree the package pkg to be managed by the package manager again. It calls Pkg.resolve() to determine optimal package versions after. This is an inverse for both Pkg.checkout and Pkg.pin.\\n\\nYou can also supply an iterable collection of package names, e.g., Pkg.free((\\\"Pkg1\\\", \\\"Pkg2\\\")) to free multiple packages at once.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.build\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.build\",\n    \"category\": \"Function\",\n    \"text\": \"build()\\n\\nRun the build scripts for all installed packages in depth-first recursive order.\\n\\n\\n\\nbuild(pkgs...)\\n\\nRun the build script in deps/build.jl for each package in pkgs and all of their dependencies in depth-first recursive order. This is called automatically by Pkg.resolve() on all installed or updated packages.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.test\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.test\",\n    \"category\": \"Function\",\n    \"text\": \"test(; coverage=false)\\n\\nRun the tests for all installed packages ensuring that each package's test dependencies are installed for the duration of the test. A package is tested by running its test/runtests.jl file and test dependencies are specified in test/REQUIRE. Coverage statistics for the packages may be generated by passing coverage=true. The default behavior is not to run coverage.\\n\\n\\n\\ntest(pkgs...; coverage=false)\\n\\nRun the tests for each package in pkgs ensuring that each package's test dependencies are installed for the duration of the test. A package is tested by running its test/runtests.jl file and test dependencies are specified in test/REQUIRE. Coverage statistics for the packages may be generated by passing coverage=true. The default behavior is not to run coverage.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Base.Pkg.dependents\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Base.Pkg.dependents\",\n    \"category\": \"Function\",\n    \"text\": \"dependents(pkg)\\n\\nList the packages that have pkg as a dependency.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/pkg.html#Package-Manager-Functions-1\",\n    \"page\": \"Package Manager Functions\",\n    \"title\": \"Package Manager Functions\",\n    \"category\": \"section\",\n    \"text\": \"All package manager functions are defined in the Pkg module. None of the Pkg module's functions are exported; to use them, you'll need to prefix each function call with an explicit Pkg., e.g. Pkg.status() or Pkg.dir().Functions for package development (e.g. tag, publish, etc.) have been moved to the PkgDev package. See PkgDev README for the documentation of those functions.Base.Pkg.dir\\nBase.Pkg.init\\nBase.Pkg.resolve\\nBase.Pkg.edit\\nBase.Pkg.add\\nBase.Pkg.rm\\nBase.Pkg.clone\\nBase.Pkg.setprotocol!\\nBase.Pkg.available\\nBase.Pkg.installed\\nBase.Pkg.status\\nBase.Pkg.update\\nBase.Pkg.checkout\\nBase.Pkg.pin\\nBase.Pkg.free\\nBase.Pkg.build\\nBase.Pkg.test\\nBase.Pkg.dependents\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Dates and Time\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#stdlib-dates-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Dates and Time\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Period\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Period\",\n    \"category\": \"Type\",\n    \"text\": \"Period\\nYear\\nMonth\\nWeek\\nDay\\nHour\\nMinute\\nSecond\\nMillisecond\\nMicrosecond\\nNanosecond\\n\\nPeriod types represent discrete, human representations of time.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.CompoundPeriod\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.CompoundPeriod\",\n    \"category\": \"Type\",\n    \"text\": \"CompoundPeriod\\n\\nA CompoundPeriod is useful for expressing time periods that are not a fixed multiple of smaller periods. For example, \\\"a year and a  day\\\" is not a fixed number of days, but can be expressed using a CompoundPeriod. In fact, a CompoundPeriod is automatically generated by addition of different period types, e.g. Year(1) + Day(1) produces a CompoundPeriod result.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Instant\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Instant\",\n    \"category\": \"Type\",\n    \"text\": \"Instant\\n\\nInstant types represent integer-based, machine representations of time as continuous timelines starting from an epoch.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.UTInstant\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.UTInstant\",\n    \"category\": \"Type\",\n    \"text\": \"UTInstant{T}\\n\\nThe UTInstant represents a machine timeline based on UT time (1 day = one revolution of the earth). The T is a Period parameter that indicates the resolution or precision of the instant.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.TimeType\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.TimeType\",\n    \"category\": \"Type\",\n    \"text\": \"TimeType\\n\\nTimeType types wrap Instant machine instances to provide human representations of the machine instant. Time, DateTime and Date are subtypes of TimeType.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.DateTime\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.DateTime\",\n    \"category\": \"Type\",\n    \"text\": \"DateTime\\n\\nDateTime wraps a UTInstant{Millisecond} and interprets it according to the proleptic Gregorian calendar.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Date\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Date\",\n    \"category\": \"Type\",\n    \"text\": \"Date\\n\\nDate wraps a UTInstant{Day} and interprets it according to the proleptic Gregorian calendar.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Time\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Time\",\n    \"category\": \"Type\",\n    \"text\": \"Time\\n\\nTime wraps a Nanosecond and represents a specific moment in a 24-hour day.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Dates-and-Time-Types-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Dates and Time Types\",\n    \"category\": \"section\",\n    \"text\": \"Base.Dates.Period\\nBase.Dates.CompoundPeriod\\nBase.Dates.Instant\\nBase.Dates.UTInstant\\nBase.Dates.TimeType\\nBase.Dates.DateTime\\nBase.Dates.Date\\nBase.Dates.Time\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.DateTime-NTuple{7,Int64}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.DateTime\",\n    \"category\": \"Method\",\n    \"text\": \"DateTime(y, [m, d, h, mi, s, ms]) -> DateTime\\n\\nConstruct a DateTime type by parts. Arguments must be convertible to Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.DateTime-Tuple{Vararg{Base.Dates.Period,N} where N}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.DateTime\",\n    \"category\": \"Method\",\n    \"text\": \"DateTime(periods::Period...) -> DateTime\\n\\nConstruct a DateTime type by Period type parts. Arguments may be in any order. DateTime parts not provided will default to the value of Dates.default(period).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.DateTime-Tuple{Function,Vararg{Any,N} where N}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.DateTime\",\n    \"category\": \"Method\",\n    \"text\": \"DateTime(f::Function, y[, m, d, h, mi, s]; step=Day(1), limit=10000) -> DateTime\\n\\nCreate a DateTime through the adjuster API. The starting point will be constructed from the provided y, m, d... arguments, and will be adjusted until f::Function returns true. The step size in adjusting can be provided manually through the step keyword. limit provides a limit to the max number of iterations the adjustment API will pursue before throwing an error (in the case that f::Function is never satisfied).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.DateTime-Tuple{Base.Dates.TimeType}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.DateTime\",\n    \"category\": \"Method\",\n    \"text\": \"DateTime(dt::Date) -> DateTime\\n\\nConverts a Date to a DateTime. The hour, minute, second, and millisecond parts of the new DateTime are assumed to be zero.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.DateTime-Tuple{AbstractString,AbstractString}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.DateTime\",\n    \"category\": \"Method\",\n    \"text\": \"DateTime(dt::AbstractString, format::AbstractString; locale=\\\"english\\\") -> DateTime\\n\\nConstruct a DateTime by parsing the dt date string following the pattern given in the format string.\\n\\nThis method creates a DateFormat object each time it is called. If you are parsing many date strings of the same format, consider creating a DateFormat object once and using that as the second argument instead.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.format-Tuple{Base.Dates.TimeType,AbstractString}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.format\",\n    \"category\": \"Method\",\n    \"text\": \"format(dt::TimeType, format::AbstractString; locale=\\\"english\\\") -> AbstractString\\n\\nConstruct a string by using a TimeType object and applying the provided format. The following character codes can be used to construct the format string:\\n\\nCode Examples Comment\\ny 6 Numeric year with a fixed width\\nY 1996 Numeric year with a minimum width\\nm 1, 12 Numeric month with a minimum width\\nu Jan Month name shortened to 3-chars according to the locale\\nU January Full month name according to the locale keyword\\nd 1, 31 Day of the month with a minimum width\\nH 0, 23 Hour (24-hour clock) with a minimum width\\nM 0, 59 Minute with a minimum width\\nS 0, 59 Second with a minimum width\\ns 000, 500 Millisecond with a minimum width of 3\\ne Mon, Tue Abbreviated days of the week\\nE Monday Full day of week name\\n\\nThe number of sequential code characters indicate the width of the code. A format of yyyy-mm specifies that the code y should have a width of four while m a width of two. Codes that yield numeric digits have an associated mode: fixed-width or minimum-width. The fixed-width mode left-pads the value with zeros when it is shorter than the specified width and truncates the value when longer. Minimum-width mode works the same as fixed-width except that it does not truncate values longer than the width.\\n\\nWhen creating a format you can use any non-code characters as a separator. For example to generate the string \\\"1996-01-15T00:00:00\\\" you could use format: \\\"yyyy-mm-ddTHH:MM:SS\\\". Note that if you need to use a code character as a literal you can use the escape character backslash. The string \\\"1996y01m\\\" can be produced with the format \\\"yyyy\\\\ymm\\\\m\\\".\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.DateFormat\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.DateFormat\",\n    \"category\": \"Type\",\n    \"text\": \"DateFormat(format::AbstractString, locale=\\\"english\\\") -> DateFormat\\n\\nConstruct a date formatting object that can be used for parsing date strings or formatting a date object as a string. The following character codes can be used to construct the format string:\\n\\nCode Matches Comment\\ny 1996, 96 Returns year of 1996, 0096\\nY 1996, 96 Returns year of 1996, 0096. Equivalent to y\\nm 1, 01 Matches 1 or 2-digit months\\nu Jan Matches abbreviated months according to the locale keyword\\nU January Matches full month names according to the locale keyword\\nd 1, 01 Matches 1 or 2-digit days\\nH 00 Matches hours\\nM 00 Matches minutes\\nS 00 Matches seconds\\ns .500 Matches milliseconds\\ne Mon, Tues Matches abbreviated days of the week\\nE Monday Matches full name days of the week\\nyyyymmdd 19960101 Matches fixed-width year, month, and day\\n\\nCharacters not listed above are normally treated as delimiters between date and time slots. For example a dt string of \\\"1996-01-15T00:00:00.0\\\" would have a format string like \\\"y-m-dTH:M:S.s\\\". If you need to use a code character as a delimiter you can escape it using backslash. The date \\\"1995y01m\\\" would have the format \\\"y\\\\ym\\\\m\\\".\\n\\nCreating a DateFormat object is expensive. Whenever possible, create it once and use it many times or try the dateformat\\\"\\\" string macro. Using this macro creates the DateFormat object once at macro expansion time and reuses it later. see @dateformat_str.\\n\\nSee DateTime and format for how to use a DateFormat object to parse and write Date strings respectively.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.@dateformat_str\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.@dateformat_str\",\n    \"category\": \"Macro\",\n    \"text\": \"dateformat\\\"Y-m-d H:M:S\\\"\\n\\nCreate a DateFormat object. Similar to DateFormat(\\\"Y-m-d H:M:S\\\") but creates the DateFormat object once during macro expansion.\\n\\nSee DateFormat for details about format specifiers.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.DateTime-Tuple{AbstractString,DateFormat}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.DateTime\",\n    \"category\": \"Method\",\n    \"text\": \"DateTime(dt::AbstractString, df::DateFormat) -> DateTime\\n\\nConstruct a DateTime by parsing the dt date string following the pattern given in the DateFormat object. Similar to DateTime(::AbstractString, ::AbstractString) but more efficient when repeatedly parsing similarly formatted date strings with a pre-created DateFormat object.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Date-Tuple{Int64,Int64,Int64}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Date\",\n    \"category\": \"Method\",\n    \"text\": \"Date(y, [m, d]) -> Date\\n\\nConstruct a Date type by parts. Arguments must be convertible to Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Date-Tuple{Vararg{Base.Dates.Period,N} where N}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Date\",\n    \"category\": \"Method\",\n    \"text\": \"Date(period::Period...) -> Date\\n\\nConstruct a Date type by Period type parts. Arguments may be in any order. Date parts not provided will default to the value of Dates.default(period).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Date-Tuple{Function,Any,Any,Any}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Date\",\n    \"category\": \"Method\",\n    \"text\": \"Date(f::Function, y[, m, d]; step=Day(1), limit=10000) -> Date\\n\\nCreate a Date through the adjuster API. The starting point will be constructed from the provided y, m, d arguments, and will be adjusted until f::Function returns true. The step size in adjusting can be provided manually through the step keyword. limit provides a limit to the max number of iterations the adjustment API will pursue before throwing an error (given that f::Function is never satisfied).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Date-Tuple{Base.Dates.TimeType}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Date\",\n    \"category\": \"Method\",\n    \"text\": \"Date(dt::DateTime) -> Date\\n\\nConverts a DateTime to a Date. The hour, minute, second, and millisecond parts of the DateTime are truncated, so only the year, month and day parts are used in construction.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Date-Tuple{AbstractString,AbstractString}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Date\",\n    \"category\": \"Method\",\n    \"text\": \"Date(dt::AbstractString, format::AbstractString; locale=\\\"english\\\") -> Date\\n\\nConstruct a Date object by parsing a dt date string following the pattern given in the format string. Follows the same conventions as DateTime(::AbstractString, ::AbstractString).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Date-Tuple{AbstractString,DateFormat}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Date\",\n    \"category\": \"Method\",\n    \"text\": \"Date(dt::AbstractString, df::DateFormat) -> Date\\n\\nParse a date from a date string dt using a DateFormat object df.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Time-NTuple{5,Int64}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Time\",\n    \"category\": \"Method\",\n    \"text\": \"Time(h, [mi, s, ms, us, ns]) -> Time\\n\\nConstruct a Time type by parts. Arguments must be convertible to Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Time-Tuple{Vararg{Base.Dates.TimePeriod,N} where N}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Time\",\n    \"category\": \"Method\",\n    \"text\": \"Time(period::TimePeriod...) -> Time\\n\\nConstruct a Time type by Period type parts. Arguments may be in any order. Time parts not provided will default to the value of Dates.default(period).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Time-Tuple{Function,Vararg{Any,N} where N}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Time\",\n    \"category\": \"Method\",\n    \"text\": \"Time(f::Function, h, mi=0; step::Period=Second(1), limit::Int=10000)\\nTime(f::Function, h, mi, s; step::Period=Millisecond(1), limit::Int=10000)\\nTime(f::Function, h, mi, s, ms; step::Period=Microsecond(1), limit::Int=10000)\\nTime(f::Function, h, mi, s, ms, us; step::Period=Nanosecond(1), limit::Int=10000)\\n\\nCreate a Time through the adjuster API. The starting point will be constructed from the provided h, mi, s, ms, us arguments, and will be adjusted until f::Function returns true. The step size in adjusting can be provided manually through the step keyword. limit provides a limit to the max number of iterations the adjustment API will pursue before throwing an error (in the case that f::Function is never satisfied). Note that the default step will adjust to allow for greater precision for the given arguments; i.e. if hour, minute, and second arguments are provided, the default step will be Millisecond(1) instead of Second(1).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Time-Tuple{DateTime}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Time\",\n    \"category\": \"Method\",\n    \"text\": \"Time(dt::DateTime) -> Time\\n\\nConverts a DateTime to a Time. The hour, minute, second, and millisecond parts of the DateTime are used to create the new Time. Microsecond and nanoseconds are zero by default.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.now-Tuple{}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.now\",\n    \"category\": \"Method\",\n    \"text\": \"now() -> DateTime\\n\\nReturns a DateTime corresponding to the user's system time including the system timezone locale.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.now-Tuple{Type{Base.Dates.UTC}}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.now\",\n    \"category\": \"Method\",\n    \"text\": \"now(::Type{UTC}) -> DateTime\\n\\nReturns a DateTime corresponding to the user's system time as UTC/GMT.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.eps\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.eps\",\n    \"category\": \"Function\",\n    \"text\": \"eps(::DateTime) -> Millisecond\\neps(::Date) -> Day\\neps(::Time) -> Nanosecond\\n\\nReturns Millisecond(1) for DateTime values, Day(1) for Date values, and Nanosecond(1) for Time values.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Dates-Functions-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Dates Functions\",\n    \"category\": \"section\",\n    \"text\": \"All Dates functions are defined in the Dates module; note that only the Date, DateTime, and now functions are exported; to use all other Dates functions, you'll need to prefix each function call with an explicit Dates., e.g. Dates.dayofweek(dt). Alternatively, you can write using Base.Dates to bring all exported functions into Main to be used without the Dates. prefix.Base.Dates.DateTime(::Int64, ::Int64, ::Int64, ::Int64, ::Int64, ::Int64, ::Int64)\\nBase.Dates.DateTime(::Base.Dates.Period...)\\nBase.Dates.DateTime(::Function, ::Any...)\\nBase.Dates.DateTime(::Base.Dates.TimeType)\\nBase.Dates.DateTime(::AbstractString, ::AbstractString)\\nBase.Dates.format(::Base.Dates.TimeType, ::AbstractString)\\nBase.Dates.DateFormat\\nBase.Dates.@dateformat_str\\nBase.Dates.DateTime(::AbstractString, ::Base.Dates.DateFormat)\\nBase.Dates.Date(::Int64, ::Int64, ::Int64)\\nBase.Dates.Date(::Base.Dates.Period...)\\nBase.Dates.Date(::Function, ::Any, ::Any, ::Any)\\nBase.Dates.Date(::Base.Dates.TimeType)\\nBase.Dates.Date(::AbstractString, ::AbstractString)\\nBase.Dates.Date(::AbstractString, ::Base.Dates.DateFormat)\\nBase.Dates.Time(::Int64::Int64, ::Int64, ::Int64, ::Int64, ::Int64)\\nBase.Dates.Time(::Base.Dates.TimePeriod...)\\nBase.Dates.Time(::Function, ::Any...)\\nBase.Dates.Time(::Base.Dates.DateTime)\\nBase.Dates.now()\\nBase.Dates.now(::Type{Base.Dates.UTC})\\nBase.eps\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.year\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.year\",\n    \"category\": \"Function\",\n    \"text\": \"year(dt::TimeType) -> Int64\\n\\nThe year of a Date or DateTime as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.month\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.month\",\n    \"category\": \"Function\",\n    \"text\": \"month(dt::TimeType) -> Int64\\n\\nThe month of a Date or DateTime as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.week\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.week\",\n    \"category\": \"Function\",\n    \"text\": \"week(dt::TimeType) -> Int64\\n\\nReturn the ISO week date of a Date or DateTime as an Int64. Note that the first week of a year is the week that contains the first Thursday of the year which can result in dates prior to January 4th being in the last week of the previous year. For example week(Date(2005,1,1)) is the 53rd week of 2004.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.day\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.day\",\n    \"category\": \"Function\",\n    \"text\": \"day(dt::TimeType) -> Int64\\n\\nThe day of month of a Date or DateTime as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.hour\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.hour\",\n    \"category\": \"Function\",\n    \"text\": \"hour(dt::DateTime) -> Int64\\n\\nThe hour of day of a DateTime as an Int64.\\n\\n\\n\\nhour(t::Time) -> Int64\\n\\nThe hour of a Time as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.minute\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.minute\",\n    \"category\": \"Function\",\n    \"text\": \"minute(dt::DateTime) -> Int64\\n\\nThe minute of a DateTime as an Int64.\\n\\n\\n\\nminute(t::Time) -> Int64\\n\\nThe minute of a Time as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.second\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.second\",\n    \"category\": \"Function\",\n    \"text\": \"second(dt::DateTime) -> Int64\\n\\nThe second of a DateTime as an Int64.\\n\\n\\n\\nsecond(t::Time) -> Int64\\n\\nThe second of a Time as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.millisecond\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.millisecond\",\n    \"category\": \"Function\",\n    \"text\": \"millisecond(dt::DateTime) -> Int64\\n\\nThe millisecond of a DateTime as an Int64.\\n\\n\\n\\nmillisecond(t::Time) -> Int64\\n\\nThe millisecond of a Time as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.microsecond\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.microsecond\",\n    \"category\": \"Function\",\n    \"text\": \"microsecond(t::Time) -> Int64\\n\\nThe microsecond of a Time as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.nanosecond\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.nanosecond\",\n    \"category\": \"Function\",\n    \"text\": \"nanosecond(t::Time) -> Int64\\n\\nThe nanosecond of a Time as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Year-Tuple{Base.Dates.TimeType}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Year\",\n    \"category\": \"Method\",\n    \"text\": \"Year(v)\\n\\nConstruct a Year object with the given v value. Input must be losslessly convertible to an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Month-Tuple{Base.Dates.TimeType}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Month\",\n    \"category\": \"Method\",\n    \"text\": \"Month(v)\\n\\nConstruct a Month object with the given v value. Input must be losslessly convertible to an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Week-Tuple{Base.Dates.TimeType}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Week\",\n    \"category\": \"Method\",\n    \"text\": \"Week(v)\\n\\nConstruct a Week object with the given v value. Input must be losslessly convertible to an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Day-Tuple{Base.Dates.TimeType}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Day\",\n    \"category\": \"Method\",\n    \"text\": \"Day(v)\\n\\nConstruct a Day object with the given v value. Input must be losslessly convertible to an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Hour-Tuple{DateTime}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Hour\",\n    \"category\": \"Method\",\n    \"text\": \"Hour(dt::DateTime) -> Hour\\n\\nThe hour part of a DateTime as a Hour.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Minute-Tuple{DateTime}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Minute\",\n    \"category\": \"Method\",\n    \"text\": \"Minute(dt::DateTime) -> Minute\\n\\nThe minute part of a DateTime as a Minute.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Second-Tuple{DateTime}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Second\",\n    \"category\": \"Method\",\n    \"text\": \"Second(dt::DateTime) -> Second\\n\\nThe second part of a DateTime as a Second.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Millisecond-Tuple{DateTime}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Millisecond\",\n    \"category\": \"Method\",\n    \"text\": \"Millisecond(dt::DateTime) -> Millisecond\\n\\nThe millisecond part of a DateTime as a Millisecond.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Microsecond-Tuple{Base.Dates.Time}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Microsecond\",\n    \"category\": \"Method\",\n    \"text\": \"Microsecond(dt::Time) -> Microsecond\\n\\nThe microsecond part of a Time as a Microsecond.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Nanosecond-Tuple{Base.Dates.Time}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Nanosecond\",\n    \"category\": \"Method\",\n    \"text\": \"Nanosecond(dt::Time) -> Nanosecond\\n\\nThe nanosecond part of a Time as a Nanosecond.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.yearmonth\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.yearmonth\",\n    \"category\": \"Function\",\n    \"text\": \"yearmonth(dt::TimeType) -> (Int64, Int64)\\n\\nSimultaneously return the year and month parts of a Date or DateTime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.monthday\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.monthday\",\n    \"category\": \"Function\",\n    \"text\": \"monthday(dt::TimeType) -> (Int64, Int64)\\n\\nSimultaneously return the month and day parts of a Date or DateTime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.yearmonthday\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.yearmonthday\",\n    \"category\": \"Function\",\n    \"text\": \"yearmonthday(dt::TimeType) -> (Int64, Int64, Int64)\\n\\nSimultaneously return the year, month and day parts of a Date or DateTime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Accessor-Functions-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Accessor Functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.Dates.year\\nBase.Dates.month\\nBase.Dates.week\\nBase.Dates.day\\nBase.Dates.hour\\nBase.Dates.minute\\nBase.Dates.second\\nBase.Dates.millisecond\\nBase.Dates.microsecond\\nBase.Dates.nanosecond\\nBase.Dates.Year(::Base.Dates.TimeType)\\nBase.Dates.Month(::Base.Dates.TimeType)\\nBase.Dates.Week(::Base.Dates.TimeType)\\nBase.Dates.Day(::Base.Dates.TimeType)\\nBase.Dates.Hour(::DateTime)\\nBase.Dates.Minute(::DateTime)\\nBase.Dates.Second(::DateTime)\\nBase.Dates.Millisecond(::DateTime)\\nBase.Dates.Microsecond(::Dates.Time)\\nBase.Dates.Nanosecond(::Dates.Time)\\nBase.Dates.yearmonth\\nBase.Dates.monthday\\nBase.Dates.yearmonthday\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.dayname\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.dayname\",\n    \"category\": \"Function\",\n    \"text\": \"dayname(dt::TimeType; locale=\\\"english\\\") -> AbstractString\\n\\nReturn the full day name corresponding to the day of the week of the Date or DateTime in the given locale.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.dayabbr\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.dayabbr\",\n    \"category\": \"Function\",\n    \"text\": \"dayabbr(dt::TimeType; locale=\\\"english\\\") -> AbstractString\\n\\nReturn the abbreviated name corresponding to the day of the week of the Date or DateTime in the given locale.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.dayofweek\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.dayofweek\",\n    \"category\": \"Function\",\n    \"text\": \"dayofweek(dt::TimeType) -> Int64\\n\\nReturns the day of the week as an Int64 with 1 = Monday, 2 = Tuesday, etc..\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.dayofmonth\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.dayofmonth\",\n    \"category\": \"Function\",\n    \"text\": \"dayofmonth(dt::TimeType) -> Int64\\n\\nThe day of month of a Date or DateTime as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.dayofweekofmonth\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.dayofweekofmonth\",\n    \"category\": \"Function\",\n    \"text\": \"dayofweekofmonth(dt::TimeType) -> Int\\n\\nFor the day of week of dt, returns which number it is in dt's month. So if the day of the week of dt is Monday, then 1 = First Monday of the month, 2 = Second Monday of the month, etc. In the range 1:5.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.daysofweekinmonth\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.daysofweekinmonth\",\n    \"category\": \"Function\",\n    \"text\": \"daysofweekinmonth(dt::TimeType) -> Int\\n\\nFor the day of week of dt, returns the total number of that day of the week in dt's month. Returns 4 or 5. Useful in temporal expressions for specifying the last day of a week in a month by including dayofweekofmonth(dt) == daysofweekinmonth(dt) in the adjuster function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.monthname\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.monthname\",\n    \"category\": \"Function\",\n    \"text\": \"monthname(dt::TimeType; locale=\\\"english\\\") -> AbstractString\\n\\nReturn the full name of the month of the Date or DateTime in the given locale.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.monthabbr\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.monthabbr\",\n    \"category\": \"Function\",\n    \"text\": \"monthabbr(dt::TimeType; locale=\\\"english\\\") -> AbstractString\\n\\nReturn the abbreviated month name of the Date or DateTime in the given locale.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.daysinmonth\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.daysinmonth\",\n    \"category\": \"Function\",\n    \"text\": \"daysinmonth(dt::TimeType) -> Int\\n\\nReturns the number of days in the month of dt. Value will be 28, 29, 30, or 31.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.isleapyear\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.isleapyear\",\n    \"category\": \"Function\",\n    \"text\": \"isleapyear(dt::TimeType) -> Bool\\n\\nReturns true if the year of dt is a leap year.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.dayofyear\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.dayofyear\",\n    \"category\": \"Function\",\n    \"text\": \"dayofyear(dt::TimeType) -> Int\\n\\nReturns the day of the year for dt with January 1st being day 1.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.daysinyear\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.daysinyear\",\n    \"category\": \"Function\",\n    \"text\": \"daysinyear(dt::TimeType) -> Int\\n\\nReturns 366 if the year of dt is a leap year, otherwise returns 365.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.quarterofyear\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.quarterofyear\",\n    \"category\": \"Function\",\n    \"text\": \"quarterofyear(dt::TimeType) -> Int\\n\\nReturns the quarter that dt resides in. Range of value is 1:4.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.dayofquarter\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.dayofquarter\",\n    \"category\": \"Function\",\n    \"text\": \"dayofquarter(dt::TimeType) -> Int\\n\\nReturns the day of the current quarter of dt. Range of value is 1:92.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Query-Functions-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Query Functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.Dates.dayname\\nBase.Dates.dayabbr\\nBase.Dates.dayofweek\\nBase.Dates.dayofmonth\\nBase.Dates.dayofweekofmonth\\nBase.Dates.daysofweekinmonth\\nBase.Dates.monthname\\nBase.Dates.monthabbr\\nBase.Dates.daysinmonth\\nBase.Dates.isleapyear\\nBase.Dates.dayofyear\\nBase.Dates.daysinyear\\nBase.Dates.quarterofyear\\nBase.Dates.dayofquarter\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.trunc-Tuple{Base.Dates.TimeType,Type{Base.Dates.Period}}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.trunc\",\n    \"category\": \"Method\",\n    \"text\": \"trunc(dt::TimeType, ::Type{Period}) -> TimeType\\n\\nTruncates the value of dt according to the provided Period type. E.g. if dt is 1996-01-01T12:30:00, then trunc(dt,Day) == 1996-01-01T00:00:00.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.firstdayofweek\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.firstdayofweek\",\n    \"category\": \"Function\",\n    \"text\": \"firstdayofweek(dt::TimeType) -> TimeType\\n\\nAdjusts dt to the Monday of its week.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.lastdayofweek\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.lastdayofweek\",\n    \"category\": \"Function\",\n    \"text\": \"lastdayofweek(dt::TimeType) -> TimeType\\n\\nAdjusts dt to the Sunday of its week.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.firstdayofmonth\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.firstdayofmonth\",\n    \"category\": \"Function\",\n    \"text\": \"firstdayofmonth(dt::TimeType) -> TimeType\\n\\nAdjusts dt to the first day of its month.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.lastdayofmonth\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.lastdayofmonth\",\n    \"category\": \"Function\",\n    \"text\": \"lastdayofmonth(dt::TimeType) -> TimeType\\n\\nAdjusts dt to the last day of its month.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.firstdayofyear\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.firstdayofyear\",\n    \"category\": \"Function\",\n    \"text\": \"firstdayofyear(dt::TimeType) -> TimeType\\n\\nAdjusts dt to the first day of its year.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.lastdayofyear\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.lastdayofyear\",\n    \"category\": \"Function\",\n    \"text\": \"lastdayofyear(dt::TimeType) -> TimeType\\n\\nAdjusts dt to the last day of its year.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.firstdayofquarter\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.firstdayofquarter\",\n    \"category\": \"Function\",\n    \"text\": \"firstdayofquarter(dt::TimeType) -> TimeType\\n\\nAdjusts dt to the first day of its quarter.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.lastdayofquarter\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.lastdayofquarter\",\n    \"category\": \"Function\",\n    \"text\": \"lastdayofquarter(dt::TimeType) -> TimeType\\n\\nAdjusts dt to the last day of its quarter.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.tonext-Tuple{Base.Dates.TimeType,Int64}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.tonext\",\n    \"category\": \"Method\",\n    \"text\": \"tonext(dt::TimeType, dow::Int; same::Bool=false) -> TimeType\\n\\nAdjusts dt to the next day of week corresponding to dow with 1 = Monday, 2 = Tuesday, etc. Setting same=true allows the current dt to be considered as the next dow, allowing for no adjustment to occur.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.toprev-Tuple{Base.Dates.TimeType,Int64}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.toprev\",\n    \"category\": \"Method\",\n    \"text\": \"toprev(dt::TimeType, dow::Int; same::Bool=false) -> TimeType\\n\\nAdjusts dt to the previous day of week corresponding to dow with 1 = Monday, 2 = Tuesday, etc. Setting same=true allows the current dt to be considered as the previous dow, allowing for no adjustment to occur.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.tofirst\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.tofirst\",\n    \"category\": \"Function\",\n    \"text\": \"tofirst(dt::TimeType, dow::Int; of=Month) -> TimeType\\n\\nAdjusts dt to the first dow of its month. Alternatively, of=Year will adjust to the first dow of the year.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.tolast\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.tolast\",\n    \"category\": \"Function\",\n    \"text\": \"tolast(dt::TimeType, dow::Int; of=Month) -> TimeType\\n\\nAdjusts dt to the last dow of its month. Alternatively, of=Year will adjust to the last dow of the year.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.tonext-Tuple{Function,Base.Dates.TimeType}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.tonext\",\n    \"category\": \"Method\",\n    \"text\": \"tonext(func::Function, dt::TimeType; step=Day(1), limit=10000, same=false) -> TimeType\\n\\nAdjusts dt by iterating at most limit iterations by step increments until func returns true. func must take a single TimeType argument and return a Bool. same allows dt to be considered in satisfying func.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.toprev-Tuple{Function,Base.Dates.TimeType}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.toprev\",\n    \"category\": \"Method\",\n    \"text\": \"toprev(func::Function, dt::TimeType; step=Day(-1), limit=10000, same=false) -> TimeType\\n\\nAdjusts dt by iterating at most limit iterations by step increments until func returns true. func must take a single TimeType argument and return a Bool. same allows dt to be considered in satisfying func.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Adjuster-Functions-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Adjuster Functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.trunc(::Base.Dates.TimeType, ::Type{Base.Dates.Period})\\nBase.Dates.firstdayofweek\\nBase.Dates.lastdayofweek\\nBase.Dates.firstdayofmonth\\nBase.Dates.lastdayofmonth\\nBase.Dates.firstdayofyear\\nBase.Dates.lastdayofyear\\nBase.Dates.firstdayofquarter\\nBase.Dates.lastdayofquarter\\nBase.Dates.tonext(::Base.Dates.TimeType, ::Int)\\nBase.Dates.toprev(::Base.Dates.TimeType, ::Int)\\nBase.Dates.tofirst\\nBase.Dates.tolast\\nBase.Dates.tonext(::Function, ::Base.Dates.TimeType)\\nBase.Dates.toprev(::Function, ::Base.Dates.TimeType)\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.Period-Tuple{Any}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.Period\",\n    \"category\": \"Method\",\n    \"text\": \"Year(v)\\nMonth(v)\\nWeek(v)\\nDay(v)\\nHour(v)\\nMinute(v)\\nSecond(v)\\nMillisecond(v)\\nMicrosecond(v)\\nNanosecond(v)\\n\\nConstruct a Period type with the given v value. Input must be losslessly convertible to an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.CompoundPeriod-Tuple{Array{#s27,1} where #s27<:Base.Dates.Period}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.CompoundPeriod\",\n    \"category\": \"Method\",\n    \"text\": \"CompoundPeriod(periods) -> CompoundPeriod\\n\\nConstruct a CompoundPeriod from a Vector of Periods. All Periods of the same type will be added together.\\n\\nExamples\\n\\njulia> Dates.CompoundPeriod(Dates.Hour(12), Dates.Hour(13))\\n25 hours\\n\\njulia> Dates.CompoundPeriod(Dates.Hour(-1), Dates.Minute(1))\\n-1 hour, 1 minute\\n\\njulia> Dates.CompoundPeriod(Dates.Month(1), Dates.Week(-2))\\n1 month, -2 weeks\\n\\njulia> Dates.CompoundPeriod(Dates.Minute(50000))\\n50000 minutes\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.default\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.default\",\n    \"category\": \"Function\",\n    \"text\": \"default(p::Period) -> Period\\n\\nReturns a sensible \\\"default\\\" value for the input Period by returning T(1) for Year, Month, and Day, and T(0) for Hour, Minute, Second, and Millisecond.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Periods-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Periods\",\n    \"category\": \"section\",\n    \"text\": \"Base.Dates.Period(::Any)\\nBase.Dates.CompoundPeriod(::Vector{<:Base.Dates.Period})\\nBase.Dates.default\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.floor-Tuple{Base.Dates.TimeType,Base.Dates.Period}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.floor\",\n    \"category\": \"Method\",\n    \"text\": \"floor(dt::TimeType, p::Period) -> TimeType\\n\\nReturns the nearest Date or DateTime less than or equal to dt at resolution p.\\n\\nFor convenience, p may be a type instead of a value: floor(dt, Dates.Hour) is a shortcut for floor(dt, Dates.Hour(1)).\\n\\njulia> floor(Date(1985, 8, 16), Dates.Month)\\n1985-08-01\\n\\njulia> floor(DateTime(2013, 2, 13, 0, 31, 20), Dates.Minute(15))\\n2013-02-13T00:30:00\\n\\njulia> floor(DateTime(2016, 8, 6, 12, 0, 0), Dates.Day)\\n2016-08-06T00:00:00\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.ceil-Tuple{Base.Dates.TimeType,Base.Dates.Period}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.ceil\",\n    \"category\": \"Method\",\n    \"text\": \"ceil(dt::TimeType, p::Period) -> TimeType\\n\\nReturns the nearest Date or DateTime greater than or equal to dt at resolution p.\\n\\nFor convenience, p may be a type instead of a value: ceil(dt, Dates.Hour) is a shortcut for ceil(dt, Dates.Hour(1)).\\n\\njulia> ceil(Date(1985, 8, 16), Dates.Month)\\n1985-09-01\\n\\njulia> ceil(DateTime(2013, 2, 13, 0, 31, 20), Dates.Minute(15))\\n2013-02-13T00:45:00\\n\\njulia> ceil(DateTime(2016, 8, 6, 12, 0, 0), Dates.Day)\\n2016-08-07T00:00:00\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.round-Tuple{Base.Dates.TimeType,Base.Dates.Period,RoundingMode{:NearestTiesUp}}\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.round\",\n    \"category\": \"Method\",\n    \"text\": \"round(dt::TimeType, p::Period, [r::RoundingMode]) -> TimeType\\n\\nReturns the Date or DateTime nearest to dt at resolution p. By default (RoundNearestTiesUp), ties (e.g., rounding 9:30 to the nearest hour) will be rounded up.\\n\\nFor convenience, p may be a type instead of a value: round(dt, Dates.Hour) is a shortcut for round(dt, Dates.Hour(1)).\\n\\njulia> round(Date(1985, 8, 16), Dates.Month)\\n1985-08-01\\n\\njulia> round(DateTime(2013, 2, 13, 0, 31, 20), Dates.Minute(15))\\n2013-02-13T00:30:00\\n\\njulia> round(DateTime(2016, 8, 6, 12, 0, 0), Dates.Day)\\n2016-08-07T00:00:00\\n\\nValid rounding modes for round(::TimeType, ::Period, ::RoundingMode) are RoundNearestTiesUp (default), RoundDown (floor), and RoundUp (ceil).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.floorceil\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.floorceil\",\n    \"category\": \"Function\",\n    \"text\": \"floorceil(dt::TimeType, p::Period) -> (TimeType, TimeType)\\n\\nSimultaneously return the floor and ceil of a Date or DateTime at resolution p. More efficient than calling both floor and ceil individually.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.epochdays2date\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.epochdays2date\",\n    \"category\": \"Function\",\n    \"text\": \"epochdays2date(days) -> Date\\n\\nTakes the number of days since the rounding epoch (0000-01-01T00:00:00) and returns the corresponding Date.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.epochms2datetime\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.epochms2datetime\",\n    \"category\": \"Function\",\n    \"text\": \"epochms2datetime(milliseconds) -> DateTime\\n\\nTakes the number of milliseconds since the rounding epoch (0000-01-01T00:00:00) and returns the corresponding DateTime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.date2epochdays\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.date2epochdays\",\n    \"category\": \"Function\",\n    \"text\": \"date2epochdays(dt::Date) -> Int64\\n\\nTakes the given Date and returns the number of days since the rounding epoch (0000-01-01T00:00:00) as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.datetime2epochms\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.datetime2epochms\",\n    \"category\": \"Function\",\n    \"text\": \"datetime2epochms(dt::DateTime) -> Int64\\n\\nTakes the given DateTime and returns the number of milliseconds since the rounding epoch (0000-01-01T00:00:00) as an Int64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Rounding-Functions-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Rounding Functions\",\n    \"category\": \"section\",\n    \"text\": \"Date and DateTime values can be rounded to a specified resolution (e.g., 1 month or 15 minutes) with floor, ceil, or round.Base.floor(::Base.Dates.TimeType, ::Base.Dates.Period)\\nBase.ceil(::Base.Dates.TimeType, ::Base.Dates.Period)\\nBase.round(::Base.Dates.TimeType, ::Base.Dates.Period, ::RoundingMode{:NearestTiesUp})The following functions are not exported:Base.Dates.floorceil\\nBase.Dates.epochdays2date\\nBase.Dates.epochms2datetime\\nBase.Dates.date2epochdays\\nBase.Dates.datetime2epochms\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.today\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.today\",\n    \"category\": \"Function\",\n    \"text\": \"today() -> Date\\n\\nReturns the date portion of now().\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.unix2datetime\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.unix2datetime\",\n    \"category\": \"Function\",\n    \"text\": \"unix2datetime(x) -> DateTime\\n\\nTakes the number of seconds since unix epoch 1970-01-01T00:00:00 and converts to the corresponding DateTime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.datetime2unix\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.datetime2unix\",\n    \"category\": \"Function\",\n    \"text\": \"datetime2unix(dt::DateTime) -> Float64\\n\\nTakes the given DateTime and returns the number of seconds since the unix epoch 1970-01-01T00:00:00 as a Float64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.julian2datetime\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.julian2datetime\",\n    \"category\": \"Function\",\n    \"text\": \"julian2datetime(julian_days) -> DateTime\\n\\nTakes the number of Julian calendar days since epoch -4713-11-24T12:00:00 and returns the corresponding DateTime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.datetime2julian\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.datetime2julian\",\n    \"category\": \"Function\",\n    \"text\": \"datetime2julian(dt::DateTime) -> Float64\\n\\nTakes the given DateTime and returns the number of Julian calendar days since the julian epoch -4713-11-24T12:00:00 as a Float64.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.rata2datetime\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.rata2datetime\",\n    \"category\": \"Function\",\n    \"text\": \"rata2datetime(days) -> DateTime\\n\\nTakes the number of Rata Die days since epoch 0000-12-31T00:00:00 and returns the corresponding DateTime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Base.Dates.datetime2rata\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Base.Dates.datetime2rata\",\n    \"category\": \"Function\",\n    \"text\": \"datetime2rata(dt::TimeType) -> Int64\\n\\nReturns the number of Rata Die days since epoch from the given Date or DateTime.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Conversion-Functions-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Conversion Functions\",\n    \"category\": \"section\",\n    \"text\": \"Base.Dates.today\\nBase.Dates.unix2datetime\\nBase.Dates.datetime2unix\\nBase.Dates.julian2datetime\\nBase.Dates.datetime2julian\\nBase.Dates.rata2datetime\\nBase.Dates.datetime2rata\"\n},\n\n{\n    \"location\": \"stdlib/dates.html#Constants-1\",\n    \"page\": \"Dates and Time\",\n    \"title\": \"Constants\",\n    \"category\": \"section\",\n    \"text\": \"Days of the Week:Variable Abbr. Value (Int)\\nMonday Mon 1\\nTuesday Tue 2\\nWednesday Wed 3\\nThursday Thu 4\\nFriday Fri 5\\nSaturday Sat 6\\nSunday Sun 7Months of the Year:Variable Abbr. Value (Int)\\nJanuary Jan 1\\nFebruary Feb 2\\nMarch Mar 3\\nApril Apr 4\\nMay May 5\\nJune Jun 6\\nJuly Jul 7\\nAugust Aug 8\\nSeptember Sep 9\\nOctober Oct 10\\nNovember Nov 11\\nDecember Dec 12\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Iteration utilities\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.zip\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.zip\",\n    \"category\": \"Function\",\n    \"text\": \"zip(iters...)\\n\\nFor a set of iterable objects, returns an iterable of tuples, where the ith tuple contains the ith component of each input iterable.\\n\\nNote that zip is its own inverse: collect(zip(zip(a...)...)) == collect(a).\\n\\nExample\\n\\njulia> a = 1:5\\n1:5\\n\\njulia> b = [\\\"e\\\",\\\"d\\\",\\\"b\\\",\\\"c\\\",\\\"a\\\"]\\n5-element Array{String,1}:\\n \\\"e\\\"\\n \\\"d\\\"\\n \\\"b\\\"\\n \\\"c\\\"\\n \\\"a\\\"\\n\\njulia> c = zip(a,b)\\nBase.Iterators.Zip2{UnitRange{Int64},Array{String,1}}(1:5, String[\\\"e\\\", \\\"d\\\", \\\"b\\\", \\\"c\\\", \\\"a\\\"])\\n\\njulia> length(c)\\n5\\n\\njulia> first(c)\\n(1, \\\"e\\\")\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.enumerate\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.enumerate\",\n    \"category\": \"Function\",\n    \"text\": \"enumerate(iter)\\n\\nAn iterator that yields (i, x) where i is a counter starting at 1, and x is the ith value from the given iterator. It's useful when you need not only the values x over which you are iterating, but also the number of iterations so far. Note that i may not be valid for indexing iter; it's also possible that x != iter[i], if iter has indices that do not start at 1. See the enumerate(IndexLinear(), iter) method if you want to ensure that i is an index.\\n\\nExample\\n\\njulia> a = [\\\"a\\\", \\\"b\\\", \\\"c\\\"];\\n\\njulia> for (index, value) in enumerate(a)\\n           println(\\\"$index $value\\\")\\n       end\\n1 a\\n2 b\\n3 c\\n\\n\\n\\nenumerate(IndexLinear(), A)\\nenumerate(IndexCartesian(), A)\\nenumerate(IndexStyle(A), A)\\n\\nAn iterator that accesses each element of the array A, returning (i, x), where i is the index for the element and x = A[i].  This is similar to enumerate(A), except i will always be a valid index for A.\\n\\nSpecifying IndexLinear() ensures that i will be an integer; specifying IndexCartesian() ensures that i will be a CartesianIndex; specifying IndexStyle(A) chooses whichever has been defined as the native indexing style for array A.\\n\\nExamples\\n\\njulia> A = [\\\"a\\\" \\\"d\\\"; \\\"b\\\" \\\"e\\\"; \\\"c\\\" \\\"f\\\"];\\n\\njulia> for (index, value) in enumerate(IndexStyle(A), A)\\n           println(\\\"$index $value\\\")\\n       end\\n1 a\\n2 b\\n3 c\\n4 d\\n5 e\\n6 f\\n\\njulia> S = view(A, 1:2, :);\\n\\njulia> for (index, value) in enumerate(IndexStyle(S), S)\\n           println(\\\"$index $value\\\")\\n       end\\nCartesianIndex{2}((1, 1)) a\\nCartesianIndex{2}((2, 1)) b\\nCartesianIndex{2}((1, 2)) d\\nCartesianIndex{2}((2, 2)) e\\n\\nNote that enumerate(A) returns i as a counter (always starting at 1), whereas enumerate(IndexLinear(), A) returns i as an index (starting at the first linear index of A, which may or may not be 1).\\n\\nSee also: IndexStyle, indices.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.rest\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.rest\",\n    \"category\": \"Function\",\n    \"text\": \"rest(iter, state)\\n\\nAn iterator that yields the same elements as iter, but starting at the given state.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.countfrom\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.countfrom\",\n    \"category\": \"Function\",\n    \"text\": \"countfrom(start=1, step=1)\\n\\nAn iterator that counts forever, starting at start and incrementing by step.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.take\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.take\",\n    \"category\": \"Function\",\n    \"text\": \"take(iter, n)\\n\\nAn iterator that generates at most the first n elements of iter.\\n\\nExample\\n\\njulia> a = 1:2:11\\n1:2:11\\n\\njulia> collect(a)\\n6-element Array{Int64,1}:\\n  1\\n  3\\n  5\\n  7\\n  9\\n 11\\n\\njulia> collect(Iterators.take(a,3))\\n3-element Array{Int64,1}:\\n 1\\n 3\\n 5\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.drop\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.drop\",\n    \"category\": \"Function\",\n    \"text\": \"drop(iter, n)\\n\\nAn iterator that generates all but the first n elements of iter.\\n\\nExample\\n\\njulia> a = 1:2:11\\n1:2:11\\n\\njulia> collect(a)\\n6-element Array{Int64,1}:\\n  1\\n  3\\n  5\\n  7\\n  9\\n 11\\n\\njulia> collect(Iterators.drop(a,4))\\n2-element Array{Int64,1}:\\n  9\\n 11\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.cycle\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.cycle\",\n    \"category\": \"Function\",\n    \"text\": \"cycle(iter)\\n\\nAn iterator that cycles through iter forever.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.repeated\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.repeated\",\n    \"category\": \"Function\",\n    \"text\": \"repeated(x[, n::Int])\\n\\nAn iterator that generates the value x forever. If n is specified, generates x that many times (equivalent to take(repeated(x), n)).\\n\\nExample\\n\\njulia> a = Iterators.repeated([1 2], 4);\\n\\njulia> collect(a)\\n4-element Array{Array{Int64,2},1}:\\n [1 2]\\n [1 2]\\n [1 2]\\n [1 2]\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.product\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.product\",\n    \"category\": \"Function\",\n    \"text\": \"product(iters...)\\n\\nReturns an iterator over the product of several iterators. Each generated element is a tuple whose ith element comes from the ith argument iterator. The first iterator changes the fastest. Example:\\n\\nExample\\n\\njulia> collect(Iterators.product(1:2,3:5))\\n2\u00d73 Array{Tuple{Int64,Int64},2}:\\n (1, 3)  (1, 4)  (1, 5)\\n (2, 3)  (2, 4)  (2, 5)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.flatten\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.flatten\",\n    \"category\": \"Function\",\n    \"text\": \"flatten(iter)\\n\\nGiven an iterator that yields iterators, return an iterator that yields the elements of those iterators. Put differently, the elements of the argument iterator are concatenated.\\n\\nExample\\n\\njulia> collect(Iterators.flatten((1:2, 8:9)))\\n4-element Array{Int64,1}:\\n 1\\n 2\\n 8\\n 9\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Base.Iterators.partition\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Base.Iterators.partition\",\n    \"category\": \"Function\",\n    \"text\": \"partition(collection, n)\\n\\nIterate over a collection n elements at a time.\\n\\nExample\\n\\njulia> collect(Iterators.partition([1,2,3,4,5], 2))\\n3-element Array{Array{Int64,1},1}:\\n [1, 2]\\n [3, 4]\\n [5]\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/iterators.html#Iteration-utilities-1\",\n    \"page\": \"Iteration utilities\",\n    \"title\": \"Iteration utilities\",\n    \"category\": \"section\",\n    \"text\": \"Base.Iterators.zip\\nBase.Iterators.enumerate\\nBase.Iterators.rest\\nBase.Iterators.countfrom\\nBase.Iterators.take\\nBase.Iterators.drop\\nBase.Iterators.cycle\\nBase.Iterators.repeated\\nBase.Iterators.product\\nBase.Iterators.flatten\\nBase.Iterators.partition\"\n},\n\n{\n    \"location\": \"stdlib/test.html#\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Unit Testing\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Unit-Testing-1\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Unit Testing\",\n    \"category\": \"section\",\n    \"text\": \"DocTestSetup = quote\\n    using Base.Test\\nend\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.runtests\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.runtests\",\n    \"category\": \"Function\",\n    \"text\": \"runtests([tests=[\\\"all\\\"] [, numcores=ceil(Int, Sys.CPU_CORES / 2) ]])\\n\\nRun the Julia unit tests listed in tests, which can be either a string or an array of strings, using numcores processors. (not exported)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Testing-Base-Julia-1\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Testing Base Julia\",\n    \"category\": \"section\",\n    \"text\": \"Julia is under rapid development and has an extensive test suite to verify functionality across multiple platforms. If you build Julia from source, you can run this test suite with make test. In a binary install, you can run the test suite using Base.runtests().Base.runtests\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.@test\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.@test\",\n    \"category\": \"Macro\",\n    \"text\": \"@test ex\\n@test f(args...) key=val ...\\n\\nTests that the expression ex evaluates to true. Returns a Pass Result if it does, a Fail Result if it is false, and an Error Result if it could not be evaluated.\\n\\nThe @test f(args...) key=val... form is equivalent to writing @test f(args..., key=val...) which can be useful when the expression is a call using infix syntax such as approximate comparisons:\\n\\n@test a \u2248 b atol=\u03b5\\n\\nThis is equivalent to the uglier test @test \u2248(a, b, atol=\u03b5). It is an error to supply more than one expression unless the first is a call expression and the rest are assignments (k=v).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.@test_throws\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.@test_throws\",\n    \"category\": \"Macro\",\n    \"text\": \"@test_throws extype ex\\n\\nTests that the expression ex throws an exception of type extype. Note that @test_throws does not support a trailing keyword form.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Basic-Unit-Tests-1\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Basic Unit Tests\",\n    \"category\": \"section\",\n    \"text\": \"The Base.Test module provides simple unit testing functionality. Unit testing is a way to see if your code is correct by checking that the results are what you expect. It can be helpful to ensure your code still works after you make changes, and can be used when developing as a way of specifying the behaviors your code should have when complete.Simple unit testing can be performed with the @test() and @test_throws() macros:Base.Test.@test\\nBase.Test.@test_throwsFor example, suppose we want to check our new function foo(x) works as expected:julia> using Base.Test\\n\\njulia> foo(x) = length(x)^2\\nfoo (generic function with 1 method)If the condition is true, a Pass is returned:julia> @test foo(\\\"bar\\\") == 9\\nTest Passed\\n\\njulia> @test foo(\\\"fizz\\\") >= 10\\nTest PassedIf the condition is false, then a Fail is returned and an exception is thrown:julia> @test foo(\\\"f\\\") == 20\\nTest Failed\\n  Expression: foo(\\\"f\\\") == 20\\n   Evaluated: 1 == 20\\nERROR: There was an error during testingIf the condition could not be evaluated because an exception was thrown, which occurs in this case because length() is not defined for symbols, an Error object is returned and an exception is thrown:julia> @test foo(:cat) == 1\\nError During Test\\n  Test threw an exception of type MethodError\\n  Expression: foo(:cat) == 1\\n  MethodError: no method matching length(::Symbol)\\n  Closest candidates are:\\n    length(::SimpleVector) at essentials.jl:256\\n    length(::Base.MethodList) at reflection.jl:521\\n    length(::MethodTable) at reflection.jl:597\\n    ...\\n  Stacktrace:\\n   [...]\\nERROR: There was an error during testingIf we expect that evaluating an expression should throw an exception, then we can use @test_throws() to check that this occurs:julia> @test_throws MethodError foo(:cat)\\nTest Passed\\n      Thrown: MethodError\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.@testset\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.@testset\",\n    \"category\": \"Macro\",\n    \"text\": \"@testset [CustomTestSet] [option=val  ...] [\\\"description\\\"] begin ... end\\n@testset [CustomTestSet] [option=val  ...] [\\\"description $v\\\"] for v in (...) ... end\\n@testset [CustomTestSet] [option=val  ...] [\\\"description $v, $w\\\"] for v in (...), w in (...) ... end\\n\\nStarts a new test set, or multiple test sets if a for loop is provided.\\n\\nIf no custom testset type is given it defaults to creating a DefaultTestSet. DefaultTestSet records all the results and, if there are any Fails or Errors, throws an exception at the end of the top-level (non-nested) test set, along with a summary of the test results.\\n\\nAny custom testset type (subtype of AbstractTestSet) can be given and it will also be used for any nested @testset invocations. The given options are only applied to the test set where they are given. The default test set type does not take any options.\\n\\nThe description string accepts interpolation from the loop indices. If no description is provided, one is constructed based on the variables.\\n\\nBy default the @testset macro will return the testset object itself, though this behavior can be customized in other testset types. If a for loop is used then the macro collects and returns a list of the return values of the finish method, which by default will return a list of the testset objects used in each iteration.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Working-with-Test-Sets-1\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Working with Test Sets\",\n    \"category\": \"section\",\n    \"text\": \"Typically a large number of tests are used to make sure functions work correctly over a range of inputs. In the event a test fails, the default behavior is to throw an exception immediately. However, it is normally preferable to run the rest of the tests first to get a better picture of how many errors there are in the code being tested.The @testset() macro can be used to group tests into sets. All the tests in a test set will be run, and at the end of the test set a summary will be printed. If any of the tests failed, or could not be evaluated due to an error, the test set will then throw a TestSetException.Base.Test.@testsetWe can put our tests for the foo(x) function in a test set:julia> @testset \\\"Foo Tests\\\" begin\\n           @test foo(\\\"a\\\")   == 1\\n           @test foo(\\\"ab\\\")  == 4\\n           @test foo(\\\"abc\\\") == 9\\n       end;\\nTest Summary: | Pass  Total\\nFoo Tests     |    3      3Test sets can also be nested:julia> @testset \\\"Foo Tests\\\" begin\\n           @testset \\\"Animals\\\" begin\\n               @test foo(\\\"cat\\\") == 9\\n               @test foo(\\\"dog\\\") == foo(\\\"cat\\\")\\n           end\\n           @testset \\\"Arrays $i\\\" for i in 1:3\\n               @test foo(zeros(i)) == i^2\\n               @test foo(ones(i)) == i^2\\n           end\\n       end;\\nTest Summary: | Pass  Total\\nFoo Tests     |    8      8In the event that a nested test set has no failures, as happened here, it will be hidden in the summary. If we do have a test failure, only the details for the failed test sets will be shown:julia> @testset \\\"Foo Tests\\\" begin\\n           @testset \\\"Animals\\\" begin\\n               @testset \\\"Felines\\\" begin\\n                   @test foo(\\\"cat\\\") == 9\\n               end\\n               @testset \\\"Canines\\\" begin\\n                   @test foo(\\\"dog\\\") == 9\\n               end\\n           end\\n           @testset \\\"Arrays\\\" begin\\n               @test foo(zeros(2)) == 4\\n               @test foo(ones(4)) == 15\\n           end\\n       end\\n\\nArrays: Test Failed\\n  Expression: foo(ones(4)) == 15\\n   Evaluated: 16 == 15\\nStacktrace:\\n    [...]\\nTest Summary: | Pass  Fail  Total\\nFoo Tests     |    3     1      4\\n  Animals     |    2            2\\n  Arrays      |    1     1      2\\nERROR: Some tests did not pass: 3 passed, 1 failed, 0 errored, 0 broken.\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.@inferred\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.@inferred\",\n    \"category\": \"Macro\",\n    \"text\": \"@inferred f(x)\\n\\nTests that the call expression f(x) returns a value of the same type inferred by the compiler. It is useful to check for type stability.\\n\\nf(x) can be any call expression. Returns the result of f(x) if the types match, and an Error Result if it finds different types.\\n\\njulia> using Base.Test\\n\\njulia> f(a,b,c) = b > 1 ? 1 : 1.0\\nf (generic function with 1 method)\\n\\njulia> typeof(f(1,2,3))\\nInt64\\n\\njulia> @code_warntype f(1,2,3)\\nVariables:\\n  #self# <optimized out>\\n  a <optimized out>\\n  b::Int64\\n  c <optimized out>\\n\\nBody:\\n  begin\\n      unless (Base.slt_int)(1, b::Int64)::Bool goto 3\\n      return 1\\n      3:\\n      return 1.0\\n  end::UNION{FLOAT64, INT64}\\n\\njulia> @inferred f(1,2,3)\\nERROR: return type Int64 does not match inferred return type Union{Float64, Int64}\\nStacktrace:\\n [1] error(::String) at ./error.jl:21\\n\\njulia> @inferred max(1,2)\\n2\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.@test_warn\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.@test_warn\",\n    \"category\": \"Macro\",\n    \"text\": \"@test_warn msg expr\\n\\nTest whether evaluating expr results in STDERR output that contains the msg string or matches the msg regular expression.  If msg is a boolean function, tests whether msg(output) returns true.  If msg is a tuple or array, checks that the error output contains/matches each item in msg. Returns the result of evaluating expr.\\n\\nSee also @test_nowarn to check for the absence of error output.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.@test_nowarn\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.@test_nowarn\",\n    \"category\": \"Macro\",\n    \"text\": \"@test_nowarn expr\\n\\nTest whether evaluating expr results in empty STDERR output (no warnings or other messages).  Returns the result of evaluating expr.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Other-Test-Macros-1\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Other Test Macros\",\n    \"category\": \"section\",\n    \"text\": \"As calculations on floating-point values can be imprecise, you can perform approximate equality checks using either @test a \u2248 b (where \u2248, typed via tab completion of \\\\approx, is the isapprox() function) or use isapprox() directly.julia> @test 1 \u2248 0.999999999\\nTest Passed\\n\\njulia> @test 1 \u2248 0.999999\\nTest Failed\\n  Expression: 1 \u2248 0.999999\\n   Evaluated: 1 \u2248 0.999999\\nERROR: There was an error during testingBase.Test.@inferred\\nBase.Test.@test_warn\\nBase.Test.@test_nowarn\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.@test_broken\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.@test_broken\",\n    \"category\": \"Macro\",\n    \"text\": \"@test_broken ex\\n@test_broken f(args...) key=val ...\\n\\nIndicates a test that should pass but currently consistently fails. Tests that the expression ex evaluates to false or causes an exception. Returns a Broken Result if it does, or an Error Result if the expression evaluates to true.\\n\\nThe @test_broken f(args...) key=val... form works as for the @test macro.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.@test_skip\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.@test_skip\",\n    \"category\": \"Macro\",\n    \"text\": \"@test_skip ex\\n@test_skip f(args...) key=val ...\\n\\nMarks a test that should not be executed but should be included in test summary reporting as Broken. This can be useful for tests that intermittently fail, or tests of not-yet-implemented functionality.\\n\\nThe @test_skip f(args...) key=val... form works as for the @test macro.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Broken-Tests-1\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Broken Tests\",\n    \"category\": \"section\",\n    \"text\": \"If a test fails consistently it can be changed to use the @test_broken() macro. This will denote the test as Broken if the test continues to fail and alerts the user via an Error if the test succeeds.Base.Test.@test_broken@test_skip() is also available to skip a test without evaluation, but counting the skipped test in the test set reporting. The test will not run but gives a Broken Result.Base.Test.@test_skip\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.record\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.record\",\n    \"category\": \"Function\",\n    \"text\": \"record(ts::AbstractTestSet, res::Result)\\n\\nRecord a result to a testset. This function is called by the @testset infrastructure each time a contained @test macro completes, and is given the test result (which could be an Error). This will also be called with an Error if an exception is thrown inside the test block but outside of a @test context.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.finish\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.finish\",\n    \"category\": \"Function\",\n    \"text\": \"finish(ts::AbstractTestSet)\\n\\nDo any final processing necessary for the given testset. This is called by the @testset infrastructure after a test block executes. One common use for this function is to record the testset to the parent's results list, using get_testset.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.get_testset\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.get_testset\",\n    \"category\": \"Function\",\n    \"text\": \"get_testset()\\n\\nRetrieve the active test set from the task's local storage. If no test set is active, use the fallback default test set.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Base.Test.get_testset_depth\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Base.Test.get_testset_depth\",\n    \"category\": \"Function\",\n    \"text\": \"get_testset_depth()\\n\\nReturns the number of active test sets, not including the defaut test set\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/test.html#Creating-Custom-AbstractTestSet-Types-1\",\n    \"page\": \"Unit Testing\",\n    \"title\": \"Creating Custom AbstractTestSet Types\",\n    \"category\": \"section\",\n    \"text\": \"Packages can create their own AbstractTestSet subtypes by implementing the record and finish methods. The subtype should have a one-argument constructor taking a description string, with any options passed in as keyword arguments.Base.Test.record\\nBase.Test.finishBase.Test takes responsibility for maintaining a stack of nested testsets as they are executed, but any result accumulation is the responsibility of the AbstractTestSet subtype. You can access this stack with the get_testset and get_testset_depth methods. Note that these functions are not exported.Base.Test.get_testset\\nBase.Test.get_testset_depthBase.Test also makes sure that nested @testset invocations use the same AbstractTestSet subtype as their parent unless it is set explicitly. It does not propagate any properties of the testset. Option inheritance behavior can be implemented by packages using the stack infrastructure that Base.Test provides.Defining a basic AbstractTestSet subtype might look like:import Base.Test: record, finish\\nusing Base.Test: AbstractTestSet, Result, Pass, Fail, Error\\nusing Base.Test: get_testset_depth, get_testset\\nstruct CustomTestSet <: Base.Test.AbstractTestSet\\n    description::AbstractString\\n    foo::Int\\n    results::Vector\\n    # constructor takes a description string and options keyword arguments\\n    CustomTestSet(desc; foo=1) = new(desc, foo, [])\\nend\\n\\nrecord(ts::CustomTestSet, child::AbstractTestSet) = push!(ts.results, child)\\nrecord(ts::CustomTestSet, res::Result) = push!(ts.results, res)\\nfunction finish(ts::CustomTestSet)\\n    # just record if we're not the top-level parent\\n    if get_testset_depth() > 0\\n        record(get_testset(), ts)\\n    end\\n    ts\\nendAnd using that testset looks like:@testset CustomTestSet foo=4 \\\"custom testset inner 2\\\" begin\\n    # this testset should inherit the type, but not the argument.\\n    @testset \\\"custom testset inner\\\" begin\\n        @test true\\n    end\\nendDocTestSetup = nothing\"\n},\n\n{\n    \"location\": \"stdlib/c.html#\",\n    \"page\": \"C Interface\",\n    \"title\": \"C Interface\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/c.html#ccall\",\n    \"page\": \"C Interface\",\n    \"title\": \"ccall\",\n    \"category\": \"Keyword\",\n    \"text\": \"ccall((symbol, library) or function_pointer, ReturnType, (ArgumentType1, ...), ArgumentValue1, ...)\\n\\nCall function in C-exported shared library, specified by (function name, library) tuple, where each component is a string or symbol.\\n\\nNote that the argument type tuple must be a literal tuple, and not a tuple-valued variable or expression. Alternatively, ccall may also be used to call a function pointer, such as one returned by dlsym.\\n\\nEach ArgumentValue to the ccall will be converted to the corresponding ArgumentType, by automatic insertion of calls to unsafe_convert(ArgumentType, cconvert(ArgumentType, ArgumentValue)). (See also the documentation for each of these functions for further details.) In most cases, this simply results in a call to convert(ArgumentType, ArgumentValue).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Core.Intrinsics.cglobal\",\n    \"page\": \"C Interface\",\n    \"title\": \"Core.Intrinsics.cglobal\",\n    \"category\": \"Function\",\n    \"text\": \"cglobal((symbol, library) [, type=Void])\\n\\nObtain a pointer to a global variable in a C-exported shared library, specified exactly as in ccall. Returns a Ptr{Type}, defaulting to Ptr{Void} if no Type argument is supplied. The values can be read or written by unsafe_load or unsafe_store!, respectively.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.cfunction\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.cfunction\",\n    \"category\": \"Function\",\n    \"text\": \"cfunction(function::Function, ReturnType::Type, ArgumentTypes::Type)\\n\\nGenerate C-callable function pointer from Julia function. Type annotation of the return value in the callback function is a must for situations where Julia cannot infer the return type automatically.\\n\\nExamples\\n\\njulia> function foo(x::Int, y::Int)\\n           return x + y\\n       end\\n\\njulia> cfunction(foo, Int, Tuple{Int,Int})\\nPtr{Void} @0x000000001b82fcd0\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.unsafe_convert\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.unsafe_convert\",\n    \"category\": \"Function\",\n    \"text\": \"unsafe_convert(T,x)\\n\\nConvert x to a value of type T\\n\\nIn cases where convert would need to take a Julia object and turn it into a Ptr, this function should be used to define and perform that conversion.\\n\\nBe careful to ensure that a Julia reference to x exists as long as the result of this function will be used. Accordingly, the argument x to this function should never be an expression, only a variable name or field reference. For example, x=a.b.c is acceptable, but x=[a,b,c] is not.\\n\\nThe unsafe prefix on this function indicates that using the result of this function after the x argument to this function is no longer accessible to the program may cause undefined behavior, including program corruption or segfaults, at any later time.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.cconvert\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.cconvert\",\n    \"category\": \"Function\",\n    \"text\": \"cconvert(T,x)\\n\\nConvert x to a value of type T, typically by calling convert(T,x)\\n\\nIn cases where x cannot be safely converted to T, unlike convert, cconvert may return an object of a type different from T, which however is suitable for unsafe_convert to handle.\\n\\nNeither convert nor cconvert should take a Julia object and turn it into a Ptr.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.unsafe_load\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.unsafe_load\",\n    \"category\": \"Function\",\n    \"text\": \"unsafe_load(p::Ptr{T}, i::Integer=1)\\n\\nLoad a value of type T from the address of the ith element (1-indexed) starting at p. This is equivalent to the C expression p[i-1].\\n\\nThe unsafe prefix on this function indicates that no validation is performed on the pointer p to ensure that it is valid. Incorrect usage may segfault your program or return garbage answers, in the same manner as C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.unsafe_store!\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.unsafe_store!\",\n    \"category\": \"Function\",\n    \"text\": \"unsafe_store!(p::Ptr{T}, x, i::Integer=1)\\n\\nStore a value of type T to the address of the ith element (1-indexed) starting at p. This is equivalent to the C expression p[i-1] = x.\\n\\nThe unsafe prefix on this function indicates that no validation is performed on the pointer p to ensure that it is valid. Incorrect usage may corrupt or segfault your program, in the same manner as C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.unsafe_copy!-Union{Tuple{Ptr{T},Ptr{T},Any}, Tuple{T}} where T\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.unsafe_copy!\",\n    \"category\": \"Method\",\n    \"text\": \"unsafe_copy!(dest::Ptr{T}, src::Ptr{T}, N)\\n\\nCopy N elements from a source pointer to a destination, with no checking. The size of an element is determined by the type of the pointers.\\n\\nThe unsafe prefix on this function indicates that no validation is performed on the pointers dest and src to ensure that they are valid. Incorrect usage may corrupt or segfault your program, in the same manner as C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.unsafe_copy!-Tuple{Array,Any,Array,Any,Any}\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.unsafe_copy!\",\n    \"category\": \"Method\",\n    \"text\": \"unsafe_copy!(dest::Array, do, src::Array, so, N)\\n\\nCopy N elements from a source array to a destination, starting at offset so in the source and do in the destination (1-indexed).\\n\\nThe unsafe prefix on this function indicates that no validation is performed to ensure that N is inbounds on either array. Incorrect usage may corrupt or segfault your program, in the same manner as C.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.copy!-Tuple{Any,Any}\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.copy!\",\n    \"category\": \"Method\",\n    \"text\": \"copy!(dest, src) -> dest\\n\\nCopy all elements from collection src to array dest.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.copy!-NTuple{5,Any}\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.copy!\",\n    \"category\": \"Method\",\n    \"text\": \"copy!(dest, do, src, so, N)\\n\\nCopy N elements from collection src starting at offset so, to array dest starting at offset do. Returns dest.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.pointer\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.pointer\",\n    \"category\": \"Function\",\n    \"text\": \"pointer(array [, index])\\n\\nGet the native address of an array or string element. Be careful to ensure that a Julia reference to a exists as long as this pointer will be used. This function is \\\"unsafe\\\" like unsafe_convert.\\n\\nCalling Ref(array[, index]) is generally preferable to this function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.unsafe_wrap-Union{Tuple{N}, Tuple{T}, Tuple{Union{Type{Array{T,N} where N}, Type{Array{T,N}}, Type{Array}},Ptr{T},Tuple{Vararg{Int64,N}}}} where N where T\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.unsafe_wrap\",\n    \"category\": \"Method\",\n    \"text\": \"unsafe_wrap(Array, pointer::Ptr{T}, dims, own=false)\\n\\nWrap a Julia Array object around the data at the address given by pointer, without making a copy.  The pointer element type T determines the array element type. dims is either an integer (for a 1d array) or a tuple of the array dimensions. own optionally specifies whether Julia should take ownership of the memory, calling free on the pointer when the array is no longer referenced.\\n\\nThis function is labelled \\\"unsafe\\\" because it will crash if pointer is not a valid memory address to data of the requested length.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.pointer_from_objref\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.pointer_from_objref\",\n    \"category\": \"Function\",\n    \"text\": \"pointer_from_objref(x)\\n\\nGet the memory address of a Julia object as a Ptr. The existence of the resulting Ptr will not protect the object from garbage collection, so you must ensure that the object remains referenced for the whole time that the Ptr will be used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.unsafe_pointer_to_objref\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.unsafe_pointer_to_objref\",\n    \"category\": \"Function\",\n    \"text\": \"unsafe_pointer_to_objref(p::Ptr)\\n\\nConvert a Ptr to an object reference. Assumes the pointer refers to a valid heap-allocated Julia object. If this is not the case, undefined behavior results, hence this function is considered \\\"unsafe\\\" and should be used with care.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.disable_sigint\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.disable_sigint\",\n    \"category\": \"Function\",\n    \"text\": \"disable_sigint(f::Function)\\n\\nDisable Ctrl-C handler during execution of a function on the current task, for calling external code that may call julia code that is not interrupt safe. Intended to be called using do block syntax as follows:\\n\\ndisable_sigint() do\\n    # interrupt-unsafe code\\n    ...\\nend\\n\\nThis is not needed on worker threads (Threads.threadid() != 1) since the InterruptException will only be delivered to the master thread. External functions that do not call julia code or julia runtime automatically disable sigint during their execution.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.reenable_sigint\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.reenable_sigint\",\n    \"category\": \"Function\",\n    \"text\": \"reenable_sigint(f::Function)\\n\\nRe-enable Ctrl-C handler during execution of a function. Temporarily reverses the effect of disable_sigint.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.systemerror\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.systemerror\",\n    \"category\": \"Function\",\n    \"text\": \"systemerror(sysfunc, iftrue)\\n\\nRaises a SystemError for errno with the descriptive string sysfunc if iftrue is true\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Core.Ptr\",\n    \"page\": \"C Interface\",\n    \"title\": \"Core.Ptr\",\n    \"category\": \"Type\",\n    \"text\": \"Ptr{T}\\n\\nA memory address referring to data of type T.  However, there is no guarantee that the memory is actually valid, or that it actually represents data of the specified type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Core.Ref\",\n    \"page\": \"C Interface\",\n    \"title\": \"Core.Ref\",\n    \"category\": \"Type\",\n    \"text\": \"Ref{T}\\n\\nAn object that safely references data of type T. This type is guaranteed to point to valid, Julia-allocated memory of the correct type. The underlying data is protected from freeing by the garbage collector as long as the Ref itself is referenced.\\n\\nWhen passed as a ccall argument (either as a Ptr or Ref type), a Ref object will be converted to a native pointer to the data it references.\\n\\nThere is no invalid (NULL) Ref.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cchar\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cchar\",\n    \"category\": \"Type\",\n    \"text\": \"Cchar\\n\\nEquivalent to the native char c-type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cuchar\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cuchar\",\n    \"category\": \"Type\",\n    \"text\": \"Cuchar\\n\\nEquivalent to the native unsigned char c-type (UInt8).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cshort\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cshort\",\n    \"category\": \"Type\",\n    \"text\": \"Cshort\\n\\nEquivalent to the native signed short c-type (Int16).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cushort\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cushort\",\n    \"category\": \"Type\",\n    \"text\": \"Cushort\\n\\nEquivalent to the native unsigned short c-type (UInt16).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cint\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cint\",\n    \"category\": \"Type\",\n    \"text\": \"Cint\\n\\nEquivalent to the native signed int c-type (Int32).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cuint\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cuint\",\n    \"category\": \"Type\",\n    \"text\": \"Cuint\\n\\nEquivalent to the native unsigned int c-type (UInt32).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Clong\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Clong\",\n    \"category\": \"Type\",\n    \"text\": \"Clong\\n\\nEquivalent to the native signed long c-type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Culong\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Culong\",\n    \"category\": \"Type\",\n    \"text\": \"Culong\\n\\nEquivalent to the native unsigned long c-type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Clonglong\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Clonglong\",\n    \"category\": \"Type\",\n    \"text\": \"Clonglong\\n\\nEquivalent to the native signed long long c-type (Int64).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Culonglong\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Culonglong\",\n    \"category\": \"Type\",\n    \"text\": \"Culonglong\\n\\nEquivalent to the native unsigned long long c-type (UInt64).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cintmax_t\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cintmax_t\",\n    \"category\": \"Type\",\n    \"text\": \"Cintmax_t\\n\\nEquivalent to the native intmax_t c-type (Int64).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cuintmax_t\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cuintmax_t\",\n    \"category\": \"Type\",\n    \"text\": \"Cuintmax_t\\n\\nEquivalent to the native uintmax_t c-type (UInt64).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Csize_t\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Csize_t\",\n    \"category\": \"Type\",\n    \"text\": \"Csize_t\\n\\nEquivalent to the native size_t c-type (UInt).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cssize_t\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cssize_t\",\n    \"category\": \"Type\",\n    \"text\": \"Cssize_t\\n\\nEquivalent to the native ssize_t c-type.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cptrdiff_t\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cptrdiff_t\",\n    \"category\": \"Type\",\n    \"text\": \"Cptrdiff_t\\n\\nEquivalent to the native ptrdiff_t c-type (Int).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cwchar_t\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cwchar_t\",\n    \"category\": \"Type\",\n    \"text\": \"Cwchar_t\\n\\nEquivalent to the native wchar_t c-type (Int32).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cfloat\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cfloat\",\n    \"category\": \"Type\",\n    \"text\": \"Cfloat\\n\\nEquivalent to the native float c-type (Float32).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Base.Cdouble\",\n    \"page\": \"C Interface\",\n    \"title\": \"Base.Cdouble\",\n    \"category\": \"Type\",\n    \"text\": \"Cdouble\\n\\nEquivalent to the native double c-type (Float64).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#C-Interface-1\",\n    \"page\": \"C Interface\",\n    \"title\": \"C Interface\",\n    \"category\": \"section\",\n    \"text\": \"ccall\\nCore.Intrinsics.cglobal\\nBase.cfunction\\nBase.unsafe_convert\\nBase.cconvert\\nBase.unsafe_load\\nBase.unsafe_store!\\nBase.unsafe_copy!{T}(::Ptr{T}, ::Ptr{T}, ::Any)\\nBase.unsafe_copy!(::Array, ::Any, ::Array, ::Any, ::Any)\\nBase.copy!(::Any, ::Any)\\nBase.copy!(::Any, ::Any, ::Any, ::Any, ::Any)\\nBase.pointer\\nBase.unsafe_wrap{T,N}(::Union{Type{Array},Type{Array{T}},Type{Array{T,N}}}, ::Ptr{T}, ::NTuple{N,Int})\\nBase.pointer_from_objref\\nBase.unsafe_pointer_to_objref\\nBase.disable_sigint\\nBase.reenable_sigint\\nBase.systemerror\\nCore.Ptr\\nCore.Ref\\nBase.Cchar\\nBase.Cuchar\\nBase.Cshort\\nBase.Cushort\\nBase.Cint\\nBase.Cuint\\nBase.Clong\\nBase.Culong\\nBase.Clonglong\\nBase.Culonglong\\nBase.Cintmax_t\\nBase.Cuintmax_t\\nBase.Csize_t\\nBase.Cssize_t\\nBase.Cptrdiff_t\\nBase.Cwchar_t\\nBase.Cfloat\\nBase.Cdouble\"\n},\n\n{\n    \"location\": \"stdlib/c.html#Core.Intrinsics.llvmcall\",\n    \"page\": \"C Interface\",\n    \"title\": \"Core.Intrinsics.llvmcall\",\n    \"category\": \"Function\",\n    \"text\": \"llvmcall(IR::String, ReturnType, (ArgumentType1, ...), ArgumentValue1, ...)\\nllvmcall((declarations::String, IR::String), ReturnType, (ArgumentType1, ...), ArgumentValue1, ...)\\n\\nCall LLVM IR string in the first argument. Similar to an LLVM function define block, arguments are available as consecutive unnamed SSA variables (%0, %1, etc.).\\n\\nThe optional declarations string contains external functions declarations that are necessary for llvm to compile the IR string. Multiple declarations can be passed in by separating them with line breaks.\\n\\nNote that the argument type tuple must be a literal tuple, and not a tuple-valued variable or expression.\\n\\nEach ArgumentValue to llvmcall will be converted to the corresponding ArgumentType, by automatic insertion of calls to unsafe_convert(ArgumentType, cconvert(ArgumentType, ArgumentValue)). (see also the documentation for each of these functions for further details). In most cases, this simply results in a call to convert(ArgumentType, ArgumentValue).\\n\\nSee test/llvmcall.jl for usage examples.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/c.html#LLVM-Interface-1\",\n    \"page\": \"C Interface\",\n    \"title\": \"LLVM Interface\",\n    \"category\": \"section\",\n    \"text\": \"Core.Intrinsics.llvmcall\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"C Standard Library\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.malloc\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.malloc\",\n    \"category\": \"Function\",\n    \"text\": \"malloc(size::Integer) -> Ptr{Void}\\n\\nCall malloc from the C standard library.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.calloc\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.calloc\",\n    \"category\": \"Function\",\n    \"text\": \"calloc(num::Integer, size::Integer) -> Ptr{Void}\\n\\nCall calloc from the C standard library.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.realloc\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.realloc\",\n    \"category\": \"Function\",\n    \"text\": \"realloc(addr::Ptr, size::Integer) -> Ptr{Void}\\n\\nCall realloc from the C standard library.\\n\\nSee warning in the documentation for free regarding only using this on memory originally obtained from malloc.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.free\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.free\",\n    \"category\": \"Function\",\n    \"text\": \"free(addr::Ptr)\\n\\nCall free from the C standard library. Only use this on memory obtained from malloc, not on pointers retrieved from other C libraries. Ptr objects obtained from C libraries should be freed by the free functions defined in that library, to avoid assertion failures if multiple libc libraries exist on the system.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.errno\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.errno\",\n    \"category\": \"Function\",\n    \"text\": \"errno([code])\\n\\nGet the value of the C library's errno. If an argument is specified, it is used to set the value of errno.\\n\\nThe value of errno is only valid immediately after a ccall to a C library routine that sets it. Specifically, you cannot call errno at the next prompt in a REPL, because lots of code is executed between prompts.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.strerror\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.strerror\",\n    \"category\": \"Function\",\n    \"text\": \"strerror(n=errno())\\n\\nConvert a system call error code to a descriptive string\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.GetLastError\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.GetLastError\",\n    \"category\": \"Function\",\n    \"text\": \"GetLastError()\\n\\nCall the Win32 GetLastError function [only available on Windows].\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.FormatMessage\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.FormatMessage\",\n    \"category\": \"Function\",\n    \"text\": \"FormatMessage(n=GetLastError())\\n\\nConvert a Win32 system call error code to a descriptive string [only available on Windows].\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.time-Tuple{Base.Libc.TmStruct}\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.time\",\n    \"category\": \"Method\",\n    \"text\": \"time(t::TmStruct)\\n\\nConverts a TmStruct struct to a number of seconds since the epoch.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.strftime\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.strftime\",\n    \"category\": \"Function\",\n    \"text\": \"strftime([format], time)\\n\\nConvert time, given as a number of seconds since the epoch or a TmStruct, to a formatted string using the given format. Supported formats are the same as those in the standard C library.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.strptime\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.strptime\",\n    \"category\": \"Function\",\n    \"text\": \"strptime([format], timestr)\\n\\nParse a formatted time string into a TmStruct giving the seconds, minute, hour, date, etc. Supported formats are the same as those in the standard C library. On some platforms, timezones will not be parsed correctly. If the result of this function will be passed to time to convert it to seconds since the epoch, the isdst field should be filled in manually. Setting it to -1 will tell the C library to use the current system settings to determine the timezone.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.TmStruct\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.TmStruct\",\n    \"category\": \"Type\",\n    \"text\": \"TmStruct([seconds])\\n\\nConvert a number of seconds since the epoch to broken-down format, with fields sec, min, hour, mday, month, year, wday, yday, and isdst.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#Base.Libc.flush_cstdio\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"Base.Libc.flush_cstdio\",\n    \"category\": \"Function\",\n    \"text\": \"flush_cstdio()\\n\\nFlushes the C stdout and stderr streams (which may have been written to by external C code).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libc.html#C-Standard-Library-1\",\n    \"page\": \"C Standard Library\",\n    \"title\": \"C Standard Library\",\n    \"category\": \"section\",\n    \"text\": \"Base.Libc.malloc\\nBase.Libc.calloc\\nBase.Libc.realloc\\nBase.Libc.free\\nBase.Libc.errno\\nBase.Libc.strerror\\nBase.Libc.GetLastError\\nBase.Libc.FormatMessage\\nBase.Libc.time(::Base.Libc.TmStruct)\\nBase.Libc.strftime\\nBase.Libc.strptime\\nBase.Libc.TmStruct\\nBase.Libc.flush_cstdio\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Dynamic Linker\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Base.Libdl.dlopen\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Base.Libdl.dlopen\",\n    \"category\": \"Function\",\n    \"text\": \"dlopen(libfile::AbstractString [, flags::Integer])\\n\\nLoad a shared library, returning an opaque handle.\\n\\nThe extension given by the constant dlext (.so, .dll, or .dylib) can be omitted from the libfile string, as it is automatically appended if needed.   If libfile is not an absolute path name, then the paths in the array DL_LOAD_PATH are searched for libfile, followed by the system load path.\\n\\nThe optional flags argument is a bitwise-or of zero or more of RTLD_LOCAL, RTLD_GLOBAL, RTLD_LAZY, RTLD_NOW, RTLD_NODELETE, RTLD_NOLOAD, RTLD_DEEPBIND, and RTLD_FIRST. These are converted to the corresponding flags of the POSIX (and/or GNU libc and/or MacOS) dlopen command, if possible, or are ignored if the specified functionality is not available on the current platform. The default flags are platform specific. On MacOS the default dlopen flags are RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL while on other platforms the defaults are RTLD_LAZY|RTLD_DEEPBIND|RTLD_LOCAL. An important usage of these flags is to specify non default behavior for when the dynamic library loader binds library references to exported symbols and if the bound references are put into process local or global scope. For instance RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL allows the library's symbols to be available for usage in other shared libraries, addressing situations where there are dependencies between shared libraries.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Base.Libdl.dlopen_e\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Base.Libdl.dlopen_e\",\n    \"category\": \"Function\",\n    \"text\": \"dlopen_e(libfile::AbstractString [, flags::Integer])\\n\\nSimilar to dlopen, except returns a NULL pointer instead of raising errors.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Base.Libdl.RTLD_NOW\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Base.Libdl.RTLD_NOW\",\n    \"category\": \"Constant\",\n    \"text\": \"RTLD_DEEPBIND\\nRTLD_FIRST\\nRTLD_GLOBAL\\nRTLD_LAZY\\nRTLD_LOCAL\\nRTLD_NODELETE\\nRTLD_NOLOAD\\nRTLD_NOW\\n\\nEnum constant for dlopen. See your platform man page for details, if applicable.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Base.Libdl.dlsym\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Base.Libdl.dlsym\",\n    \"category\": \"Function\",\n    \"text\": \"dlsym(handle, sym)\\n\\nLook up a symbol from a shared library handle, return callable function pointer on success.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Base.Libdl.dlsym_e\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Base.Libdl.dlsym_e\",\n    \"category\": \"Function\",\n    \"text\": \"dlsym_e(handle, sym)\\n\\nLook up a symbol from a shared library handle, silently return NULL pointer on lookup failure.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Base.Libdl.dlclose\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Base.Libdl.dlclose\",\n    \"category\": \"Function\",\n    \"text\": \"dlclose(handle)\\n\\nClose shared library referenced by handle.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Base.Libdl.dlext\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Base.Libdl.dlext\",\n    \"category\": \"Constant\",\n    \"text\": \"dlext\\n\\nFile extension for dynamic libraries (e.g. dll, dylib, so) on the current platform.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Base.Libdl.find_library\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Base.Libdl.find_library\",\n    \"category\": \"Function\",\n    \"text\": \"find_library(names, locations)\\n\\nSearches for the first library in names in the paths in the locations list, DL_LOAD_PATH, or system library paths (in that order) which can successfully be dlopen'd. On success, the return value will be one of the names (potentially prefixed by one of the paths in locations). This string can be assigned to a global const and used as the library name in future ccall's. On failure, it returns the empty string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Base.Libdl.DL_LOAD_PATH\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Base.Libdl.DL_LOAD_PATH\",\n    \"category\": \"Constant\",\n    \"text\": \"DL_LOAD_PATH\\n\\nWhen calling dlopen, the paths in this list will be searched first, in order, before searching the system locations for a valid library handle.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/libdl.html#Dynamic-Linker-1\",\n    \"page\": \"Dynamic Linker\",\n    \"title\": \"Dynamic Linker\",\n    \"category\": \"section\",\n    \"text\": \"The names in Base.Libdl are not exported and need to be called e.g. as Libdl.dlopen().Base.Libdl.dlopen\\nBase.Libdl.dlopen_e\\nBase.Libdl.RTLD_NOW\\nBase.Libdl.dlsym\\nBase.Libdl.dlsym_e\\nBase.Libdl.dlclose\\nBase.Libdl.dlext\\nBase.Libdl.find_library\\nBase.Libdl.DL_LOAD_PATH\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#\",\n    \"page\": \"Profiling\",\n    \"title\": \"Profiling\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#Base.Profile.@profile\",\n    \"page\": \"Profiling\",\n    \"title\": \"Base.Profile.@profile\",\n    \"category\": \"Macro\",\n    \"text\": \"@profile\\n\\n@profile <expression> runs your expression while taking periodic backtraces. These are appended to an internal buffer of backtraces.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#Base.Profile.clear\",\n    \"page\": \"Profiling\",\n    \"title\": \"Base.Profile.clear\",\n    \"category\": \"Function\",\n    \"text\": \"clear()\\n\\nClear any existing backtraces from the internal buffer.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#Base.Profile.print\",\n    \"page\": \"Profiling\",\n    \"title\": \"Base.Profile.print\",\n    \"category\": \"Function\",\n    \"text\": \"print([io::IO = STDOUT,] [data::Vector]; kwargs...)\\n\\nPrints profiling results to io (by default, STDOUT). If you do not supply a data vector, the internal buffer of accumulated backtraces will be used.\\n\\nThe keyword arguments can be any combination of:\\n\\nformat \u2013 Determines whether backtraces are printed with (default, :tree) or without (:flat) indentation indicating tree structure.\\nC \u2013 If true, backtraces from C and Fortran code are shown (normally they are excluded).\\ncombine \u2013 If true (default), instruction pointers are merged that correspond to the same line of code.\\nmaxdepth \u2013 Limits the depth higher than maxdepth in the :tree format.\\nsortedby \u2013 Controls the order in :flat format. :filefuncline (default) sorts by the source  line, whereas :count sorts in order of number of collected samples.\\nnoisefloor \u2013 Limits frames that exceed the heuristic noise floor of the sample (only applies to format :tree).  A suggested value to try for this is 2.0 (the default is 0). This parameter hides samples for which n <= noisefloor * \u221aN,  where n is the number of samples on this line, and N is the number of samples for the callee.\\nmincount \u2013 Limits the printout to only those lines with at least mincount occurrences.\\n\\n\\n\\nprint([io::IO = STDOUT,] data::Vector, lidict::LineInfoDict; kwargs...)\\n\\nPrints profiling results to io. This variant is used to examine results exported by a previous call to retrieve. Supply the vector data of backtraces and a dictionary lidict of line information.\\n\\nSee Profile.print([io], data) for an explanation of the valid keyword arguments.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#Base.Profile.init\",\n    \"page\": \"Profiling\",\n    \"title\": \"Base.Profile.init\",\n    \"category\": \"Function\",\n    \"text\": \"init(; n::Integer, delay::Float64)\\n\\nConfigure the delay between backtraces (measured in seconds), and the number n of instruction pointers that may be stored. Each instruction pointer corresponds to a single line of code; backtraces generally consist of a long list of instruction pointers. Default settings can be obtained by calling this function with no arguments, and each can be set independently using keywords or in the order (n, delay).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#Base.Profile.fetch\",\n    \"page\": \"Profiling\",\n    \"title\": \"Base.Profile.fetch\",\n    \"category\": \"Function\",\n    \"text\": \"fetch() -> data\\n\\nReturns a reference to the internal buffer of backtraces. Note that subsequent operations, like clear, can affect data unless you first make a copy. Note that the values in data have meaning only on this machine in the current session, because it depends on the exact memory addresses used in JIT-compiling. This function is primarily for internal use; retrieve may be a better choice for most users.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#Base.Profile.retrieve\",\n    \"page\": \"Profiling\",\n    \"title\": \"Base.Profile.retrieve\",\n    \"category\": \"Function\",\n    \"text\": \"retrieve() -> data, lidict\\n\\n\\\"Exports\\\" profiling results in a portable format, returning the set of all backtraces (data) and a dictionary that maps the (session-specific) instruction pointers in data to LineInfo values that store the file name, function name, and line number. This function allows you to save profiling results for future analysis.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#Base.Profile.callers\",\n    \"page\": \"Profiling\",\n    \"title\": \"Base.Profile.callers\",\n    \"category\": \"Function\",\n    \"text\": \"callers(funcname, [data, lidict], [filename=<filename>], [linerange=<start:stop>]) -> Vector{Tuple{count, lineinfo}}\\n\\nGiven a previous profiling run, determine who called a particular function. Supplying the filename (and optionally, range of line numbers over which the function is defined) allows you to disambiguate an overloaded method. The returned value is a vector containing a count of the number of calls and line information about the caller. One can optionally supply backtrace data obtained from retrieve; otherwise, the current internal profile buffer is used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#Base.Profile.clear_malloc_data\",\n    \"page\": \"Profiling\",\n    \"title\": \"Base.Profile.clear_malloc_data\",\n    \"category\": \"Function\",\n    \"text\": \"clear_malloc_data()\\n\\nClears any stored memory allocation data when running julia with --track-allocation. Execute the command(s) you want to test (to force JIT-compilation), then call clear_malloc_data. Then execute your command(s) again, quit Julia, and examine the resulting *.mem files.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/profile.html#lib-profiling-1\",\n    \"page\": \"Profiling\",\n    \"title\": \"Profiling\",\n    \"category\": \"section\",\n    \"text\": \"Base.Profile.@profileThe methods in Base.Profile are not exported and need to be called e.g. as Profile.print().Base.Profile.clear\\nBase.Profile.print\\nBase.Profile.init\\nBase.Profile.fetch\\nBase.Profile.retrieve\\nBase.Profile.callers\\nBase.Profile.clear_malloc_data\"\n},\n\n{\n    \"location\": \"stdlib/stacktraces.html#\",\n    \"page\": \"StackTraces\",\n    \"title\": \"StackTraces\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/stacktraces.html#Base.StackTraces.StackFrame\",\n    \"page\": \"StackTraces\",\n    \"title\": \"Base.StackTraces.StackFrame\",\n    \"category\": \"Type\",\n    \"text\": \"StackFrame\\n\\nStack information representing execution context, with the following fields:\\n\\nfunc::Symbol\\nThe name of the function containing the execution context.\\nlinfo::Nullable{Core.MethodInstance}\\nThe MethodInstance containing the execution context (if it could be found).\\nfile::Symbol\\nThe path to the file containing the execution context.\\nline::Int\\nThe line number in the file containing the execution context.\\nfrom_c::Bool\\nTrue if the code is from C.\\ninlined::Bool\\nTrue if the code is from an inlined frame.\\npointer::UInt64\\nRepresentation of the pointer to the execution context as returned by backtrace.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/stacktraces.html#Base.StackTraces.StackTrace\",\n    \"page\": \"StackTraces\",\n    \"title\": \"Base.StackTraces.StackTrace\",\n    \"category\": \"Type\",\n    \"text\": \"StackTrace\\n\\nAn alias for Vector{StackFrame} provided for convenience; returned by calls to stacktrace and catch_stacktrace.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/stacktraces.html#Base.StackTraces.stacktrace\",\n    \"page\": \"StackTraces\",\n    \"title\": \"Base.StackTraces.stacktrace\",\n    \"category\": \"Function\",\n    \"text\": \"stacktrace([trace::Vector{Ptr{Void}},] [c_funcs::Bool=false]) -> StackTrace\\n\\nReturns a stack trace in the form of a vector of StackFrames. (By default stacktrace doesn't return C functions, but this can be enabled.) When called without specifying a trace, stacktrace first calls backtrace.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/stacktraces.html#Base.StackTraces.catch_stacktrace\",\n    \"page\": \"StackTraces\",\n    \"title\": \"Base.StackTraces.catch_stacktrace\",\n    \"category\": \"Function\",\n    \"text\": \"catch_stacktrace([c_funcs::Bool=false]) -> StackTrace\\n\\nReturns the stack trace for the most recent error thrown, rather than the current execution context.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/stacktraces.html#Base.StackTraces.lookup\",\n    \"page\": \"StackTraces\",\n    \"title\": \"Base.StackTraces.lookup\",\n    \"category\": \"Function\",\n    \"text\": \"lookup(pointer::Union{Ptr{Void}, UInt}) -> Vector{StackFrame}\\n\\nGiven a pointer to an execution context (usually generated by a call to backtrace), looks up stack frame context information. Returns an array of frame information for all functions inlined at that point, innermost function first.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/stacktraces.html#Base.StackTraces.remove_frames!\",\n    \"page\": \"StackTraces\",\n    \"title\": \"Base.StackTraces.remove_frames!\",\n    \"category\": \"Function\",\n    \"text\": \"remove_frames!(stack::StackTrace, name::Symbol)\\n\\nTakes a StackTrace (a vector of StackFrames) and a function name (a Symbol) and removes the StackFrame specified by the function name from the StackTrace (also removing all frames above the specified function). Primarily used to remove StackTraces functions from the StackTrace prior to returning it.\\n\\n\\n\\nremove_frames!(stack::StackTrace, m::Module)\\n\\nReturns the StackTrace with all StackFrames from the provided Module removed.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"stdlib/stacktraces.html#StackTraces-1\",\n    \"page\": \"StackTraces\",\n    \"title\": \"StackTraces\",\n    \"category\": \"section\",\n    \"text\": \"Base.StackTraces.StackFrame\\nBase.StackTraces.StackTrace\\nBase.StackTraces.stacktrace\\nBase.StackTraces.catch_stacktraceThe following methods and types in Base.StackTraces are not exported and need to be called e.g. as StackTraces.lookup(ptr).Base.StackTraces.lookup\\nBase.StackTraces.remove_frames!\"\n},\n\n{\n    \"location\": \"stdlib/simd-types.html#\",\n    \"page\": \"SIMD Support\",\n    \"title\": \"SIMD Support\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"stdlib/simd-types.html#SIMD-Support-1\",\n    \"page\": \"SIMD Support\",\n    \"title\": \"SIMD Support\",\n    \"category\": \"section\",\n    \"text\": \"Type VecElement{T} is intended for building libraries of SIMD operations. Practical use of it requires using llvmcall. The type is defined as:struct VecElement{T}\\n    value::T\\nendIt has a special compilation rule: a homogeneous tuple of VecElement{T} maps to an LLVM vector type when T is a primitive bits type and the tuple length is in the set {2-6,8-10,16}.At -O3, the compiler might automatically vectorize operations on such tuples. For example, the following program, when compiled with julia -O3 generates two SIMD addition instructions (addps) on x86 systems:const m128 = NTuple{4,VecElement{Float32}}\\n\\nfunction add(a::m128, b::m128)\\n    (VecElement(a[1].value+b[1].value),\\n     VecElement(a[2].value+b[2].value),\\n     VecElement(a[3].value+b[3].value),\\n     VecElement(a[4].value+b[4].value))\\nend\\n\\ntriple(c::m128) = add(add(c,c),c)\\n\\ncode_native(triple,(m128,))However, since the automatic vectorization cannot be relied upon, future use will mostly be via libraries that use llvmcall.\"\n},\n\n{\n    \"location\": \"devdocs/reflection.html#\",\n    \"page\": \"Reflection and introspection\",\n    \"title\": \"Reflection and introspection\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/reflection.html#Reflection-and-introspection-1\",\n    \"page\": \"Reflection and introspection\",\n    \"title\": \"Reflection and introspection\",\n    \"category\": \"section\",\n    \"text\": \"Julia provides a variety of runtime reflection capabilities.\"\n},\n\n{\n    \"location\": \"devdocs/reflection.html#Module-bindings-1\",\n    \"page\": \"Reflection and introspection\",\n    \"title\": \"Module bindings\",\n    \"category\": \"section\",\n    \"text\": \"The exported names for a Module are available using names(m::Module), which will return an array of Symbol elements representing the exported bindings. names(m::Module, true) returns symbols for all bindings in m, regardless of export status.\"\n},\n\n{\n    \"location\": \"devdocs/reflection.html#DataType-fields-1\",\n    \"page\": \"Reflection and introspection\",\n    \"title\": \"DataType fields\",\n    \"category\": \"section\",\n    \"text\": \"The names of DataType fields may be interrogated using fieldnames(). For example, given the following type, fieldnames(Point) returns an arrays of Symbol elements representing the field names:julia> struct Point\\n           x::Int\\n           y\\n       end\\n\\njulia> fieldnames(Point)\\n2-element Array{Symbol,1}:\\n :x\\n :yThe type of each field in a Point object is stored in the types field of the Point variable itself:julia> Point.types\\nsvec(Int64, Any)While x is annotated as an Int, y was unannotated in the type definition, therefore y defaults to the Any type.Types are themselves represented as a structure called DataType:julia> typeof(Point)\\nDataTypeNote that fieldnames(DataType) gives the names for each field of DataType itself, and one of these fields is the types field observed in the example above.\"\n},\n\n{\n    \"location\": \"devdocs/reflection.html#Subtypes-1\",\n    \"page\": \"Reflection and introspection\",\n    \"title\": \"Subtypes\",\n    \"category\": \"section\",\n    \"text\": \"The direct subtypes of any DataType may be listed using subtypes(). For example, the abstract DataType AbstractFloat has four (concrete) subtypes:julia> subtypes(AbstractFloat)\\n4-element Array{Union{DataType, UnionAll},1}:\\n BigFloat\\n Float16\\n Float32\\n Float64Any abstract subtype will also be included in this list, but further subtypes thereof will not; recursive application of subtypes() may be used to inspect the full type tree.\"\n},\n\n{\n    \"location\": \"devdocs/reflection.html#DataType-layout-1\",\n    \"page\": \"Reflection and introspection\",\n    \"title\": \"DataType layout\",\n    \"category\": \"section\",\n    \"text\": \"The internal representation of a DataType is critically important when interfacing with C code and several functions are available to inspect these details. isbits(T::DataType) returns true if T is stored with C-compatible alignment. fieldoffset(T::DataType, i::Integer) returns the (byte) offset for field i relative to the start of the type.\"\n},\n\n{\n    \"location\": \"devdocs/reflection.html#Function-methods-1\",\n    \"page\": \"Reflection and introspection\",\n    \"title\": \"Function methods\",\n    \"category\": \"section\",\n    \"text\": \"The methods of any generic function may be listed using methods(). The method dispatch table may be searched for methods accepting a given type using methodswith().\"\n},\n\n{\n    \"location\": \"devdocs/reflection.html#Expansion-and-lowering-1\",\n    \"page\": \"Reflection and introspection\",\n    \"title\": \"Expansion and lowering\",\n    \"category\": \"section\",\n    \"text\": \"As discussed in the Metaprogramming section, the macroexpand() function gives the unquoted and interpolated expression (Expr) form for a given macro. To use macroexpand, quote the expression block itself (otherwise, the macro will be evaluated and the result will be passed instead!). For example:julia> macroexpand( :(@edit println(\\\"\\\")) )\\n:((Base.edit)(println, (Base.typesof)(\\\"\\\")))The functions Base.Meta.show_sexpr() and dump() are used to display S-expr style views and depth-nested detail views for any expression.Finally, the expand() function gives the lowered form of any expression and is of particular interest for understanding both macros and top-level statements such as function declarations and variable assignments:julia> expand( :(f() = 1) )\\n:(begin\\n        $(Expr(:method, :f))\\n        $(Expr(:method, :f, :((Core.svec)((Core.svec)((Core.Typeof)(f)), (Core.svec)())), CodeInfo(:(begin  # none, line 1:\\n        return 1\\n    end)), false))\\n        return f\\n    end)\"\n},\n\n{\n    \"location\": \"devdocs/reflection.html#Intermediate-and-compiled-representations-1\",\n    \"page\": \"Reflection and introspection\",\n    \"title\": \"Intermediate and compiled representations\",\n    \"category\": \"section\",\n    \"text\": \"Inspecting the lowered form for functions requires selection of the specific method to display, because generic functions may have many methods with different type signatures. For this purpose, method-specific code-lowering is available using code_lowered(f::Function, (Argtypes...)), and the type-inferred form is available using code_typed(f::Function, (Argtypes...)). code_warntype(f::Function, (Argtypes...)) adds highlighting to the output of code_typed() (see @code_warntype).Closer to the machine, the LLVM intermediate representation of a function may be printed using by code_llvm(f::Function, (Argtypes...)), and finally the compiled machine code is available using code_native(f::Function, (Argtypes...)) (this will trigger JIT compilation/code generation for any function which has not previously been called).For convenience, there are macro versions of the above functions which take standard function calls and expand argument types automatically:julia> @code_llvm +(1,1)\\n\\n; Function Attrs: sspreq\\ndefine i64 @\\\"julia_+_130862\\\"(i64, i64) #0 {\\ntop:\\n    %2 = add i64 %1, %0, !dbg !8\\n    ret i64 %2, !dbg !8\\n}(likewise @code_typed, @code_warntype, @code_lowered, and @code_native)\"\n},\n\n{\n    \"location\": \"devdocs/init.html#\",\n    \"page\": \"Initialization of the Julia runtime\",\n    \"title\": \"Initialization of the Julia runtime\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/init.html#Initialization-of-the-Julia-runtime-1\",\n    \"page\": \"Initialization of the Julia runtime\",\n    \"title\": \"Initialization of the Julia runtime\",\n    \"category\": \"section\",\n    \"text\": \"How does the Julia runtime execute julia -e 'println(\\\"Hello World!\\\")' ?\"\n},\n\n{\n    \"location\": \"devdocs/init.html#main()-1\",\n    \"page\": \"Initialization of the Julia runtime\",\n    \"title\": \"main()\",\n    \"category\": \"section\",\n    \"text\": \"Execution starts at main() in ui/repl.c.main() calls libsupport_init() to set the C library locale and to initialize the \\\"ios\\\" library (see ios_init_stdstreams() and Legacy ios.c library).Next parse_opts() is called to process command line options. Note that parse_opts() only deals with options that affect code generation or early initialization. Other options are handled later by process_options() in base/client.jl.parse_opts() stores command line options in the global jl_options struct.\"\n},\n\n{\n    \"location\": \"devdocs/init.html#julia_init()-1\",\n    \"page\": \"Initialization of the Julia runtime\",\n    \"title\": \"julia_init()\",\n    \"category\": \"section\",\n    \"text\": \"julia_init() in task.c is called by main() and calls _julia_init() in init.c._julia_init() begins by calling libsupport_init() again (it does nothing the second time).restore_signals() is called to zero the signal handler mask.jl_resolve_sysimg_location() searches configured paths for the base system image. See Building the Julia system image.jl_gc_init() sets up allocation pools and lists for weak refs, preserved values and finalization.jl_init_frontend() loads and initializes a pre-compiled femtolisp image containing the scanner/parser.jl_init_types() creates jl_datatype_t type description objects for the built-in types defined in julia.h. e.g.jl_any_type = jl_new_abstracttype(jl_symbol(\\\"Any\\\"), NULL, jl_null);\\njl_any_type->super = jl_any_type;\\n\\njl_type_type = jl_new_abstracttype(jl_symbol(\\\"Type\\\"), jl_any_type, jl_null);\\n\\njl_int32_type = jl_new_bitstype(jl_symbol(\\\"Int32\\\"),\\n                                jl_any_type, jl_null, 32);jl_init_tasks() creates the jl_datatype_t* jl_task_type object; initializes the global jl_root_task struct; and sets jl_current_task to the root task.jl_init_codegen() initializes the LLVM library.jl_init_serializer() initializes 8-bit serialization tags for 256 frequently used jl_value_t values. The serialization mechanism uses these tags as shorthand (in lieu of storing whole objects) to save storage space.If there is no sysimg file (!jl_options.image_file) then the Core and Main modules are created and boot.jl is evaluated:jl_core_module = jl_new_module(jl_symbol(\\\"Core\\\")) creates the Julia Core module.jl_init_intrinsic_functions() creates a new Julia module Intrinsics containing constant jl_intrinsic_type symbols. These define an integer code for each intrinsic function. emit_intrinsic() translates these symbols into LLVM instructions during code generation.jl_init_primitives() hooks C functions up to Julia function symbols. e.g. the symbol Base.is() is bound to C function pointer jl_f_is() by calling add_builtin_func(\\\"eval\\\", jl_f_top_eval).jl_new_main_module() creates the global \\\"Main\\\" module and sets jl_current_task->current_module = jl_main_module.Note: _julia_init() then sets jl_root_task->current_module = jl_core_module. jl_root_task is an alias of jl_current_task at this point, so the current_module set by jl_new_main_module() above is overwritten.jl_load(\\\"boot.jl\\\", sizeof(\\\"boot.jl\\\")) calls jl_parse_eval_all which repeatedly calls jl_toplevel_eval_flex() to execute boot.jl. <!\u2013 TODO \u2013 drill down into eval? \u2013>jl_get_builtin_hooks() initializes global C pointers to Julia globals defined in boot.jl.jl_init_box_caches() pre-allocates global boxed integer value objects for values up to 1024. This speeds up allocation of boxed ints later on. e.g.:jl_value_t *jl_box_uint8(uint32_t x)\\n{\\n    return boxed_uint8_cache[(uint8_t)x];\\n}_julia_init() iterates over the jl_core_module->bindings.table looking for jl_datatype_t values and sets the type name's module prefix to jl_core_module.jl_add_standard_imports(jl_main_module) does \\\"using Base\\\" in the \\\"Main\\\" module.Note: _julia_init() now reverts to jl_root_task->current_module = jl_main_module as it was before being set to jl_core_module above.Platform specific signal handlers are initialized for SIGSEGV (OSX, Linux), and SIGFPE (Windows).Other signals (SIGINFO, SIGBUS, SIGILL, SIGTERM, SIGABRT, SIGQUIT, SIGSYS and SIGPIPE) are hooked up to sigdie_handler() which prints a backtrace.jl_init_restored_modules() calls jl_module_run_initializer() for each deserialized module to run the __init__() function.Finally sigint_handler() is hooked up to SIGINT and calls jl_throw(jl_interrupt_exception)._julia_init() then returns back to main() in ui/repl.c and main() calls true_main(argc, (char**)argv).sidebar: sysimg\\nIf there is a sysimg file, it contains a pre-cooked image of the Core and Main modules (and whatever else is created by boot.jl). See Building the Julia system image.jl_restore_system_image() deserializes the saved sysimg into the current Julia runtime environment and initialization continues after jl_init_box_caches() below...Note: jl_restore_system_image() (and dump.c in general) uses the Legacy ios.c library.\"\n},\n\n{\n    \"location\": \"devdocs/init.html#true_main()-1\",\n    \"page\": \"Initialization of the Julia runtime\",\n    \"title\": \"true_main()\",\n    \"category\": \"section\",\n    \"text\": \"true_main() loads the contents of argv[] into Base.ARGS.If a .jl \\\"program\\\" file was supplied on the command line, then exec_program() calls jl_load(program,len) which calls jl_parse_eval_all which repeatedly calls jl_toplevel_eval_flex() to execute the program.However, in our example (julia -e 'println(\\\"Hello World!\\\")'), jl_get_global(jl_base_module, jl_symbol(\\\"_start\\\")) looks up Base._start and jl_apply() executes it.\"\n},\n\n{\n    \"location\": \"devdocs/init.html#Base._start-1\",\n    \"page\": \"Initialization of the Julia runtime\",\n    \"title\": \"Base._start\",\n    \"category\": \"section\",\n    \"text\": \"Base._start calls Base.process_options which calls jl_parse_input_line(\\\"println(\\\"Hello World!\\\")\\\") to create an expression object and Base.eval() to execute it.\"\n},\n\n{\n    \"location\": \"devdocs/init.html#Base.eval-1\",\n    \"page\": \"Initialization of the Julia runtime\",\n    \"title\": \"Base.eval\",\n    \"category\": \"section\",\n    \"text\": \"Base.eval() was mapped to jl_f_top_eval by jl_init_primitives().jl_f_top_eval() calls jl_toplevel_eval_in(jl_main_module, ex), where ex is the parsed expression println(\\\"Hello World!\\\").jl_toplevel_eval_in() calls jl_toplevel_eval_flex() which calls eval() in interpreter.c.The stack dump below shows how the interpreter works its way through various methods of Base.println() and Base.print() before arriving at write(s::IO, a::Array{T}) where T  which does ccall(jl_uv_write()).jl_uv_write() calls uv_write() to write \\\"Hello World!\\\" to JL_STDOUT. See Libuv wrappers for stdio.:Hello World!Stack frame Source code Notes\\njl_uv_write() jl_uv.c called though ccall\\njulia_write_282942 stream.jl function write!(s::IO, a::Array{T}) where T\\njulia_print_284639 ascii.jl print(io::IO, s::String) = (write(io, s); nothing)\\njlcall_print_284639 \u00a0 \u00a0\\njl_apply() julia.h \u00a0\\njl_trampoline() builtins.c \u00a0\\njl_apply() julia.h \u00a0\\njl_apply_generic() gf.c Base.print(Base.TTY, String)\\njl_apply() julia.h \u00a0\\njl_trampoline() builtins.c \u00a0\\njl_apply() julia.h \u00a0\\njl_apply_generic() gf.c Base.print(Base.TTY, String, Char, Char...)\\njl_apply() julia.h \u00a0\\njl_f_apply() builtins.c \u00a0\\njl_apply() julia.h \u00a0\\njl_trampoline() builtins.c \u00a0\\njl_apply() julia.h \u00a0\\njl_apply_generic() gf.c Base.println(Base.TTY, String, String...)\\njl_apply() julia.h \u00a0\\njl_trampoline() builtins.c \u00a0\\njl_apply() julia.h \u00a0\\njl_apply_generic() gf.c Base.println(String,)\\njl_apply() julia.h \u00a0\\ndo_call() interpreter.c \u00a0\\neval() interpreter.c \u00a0\\njl_interpret_toplevel_expr() interpreter.c \u00a0\\njl_toplevel_eval_flex() toplevel.c \u00a0\\njl_toplevel_eval() toplevel.c \u00a0\\njl_toplevel_eval_in() builtins.c \u00a0\\njl_f_top_eval() builtins.c \u00a0Since our example has just one function call, which has done its job of printing \\\"Hello World!\\\", the stack now rapidly unwinds back to main().\"\n},\n\n{\n    \"location\": \"devdocs/init.html#jl_atexit_hook()-1\",\n    \"page\": \"Initialization of the Julia runtime\",\n    \"title\": \"jl_atexit_hook()\",\n    \"category\": \"section\",\n    \"text\": \"main() calls jl_atexit_hook(). This calls _atexit for each module, then calls jl_gc_run_all_finalizers() and cleans up libuv handles.\"\n},\n\n{\n    \"location\": \"devdocs/init.html#julia_save()-1\",\n    \"page\": \"Initialization of the Julia runtime\",\n    \"title\": \"julia_save()\",\n    \"category\": \"section\",\n    \"text\": \"Finally, main() calls julia_save(), which if requested on the command line, saves the runtime state to a new system image. See jl_compile_all() and jl_save_system_image().\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Julia ASTs\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Julia-ASTs-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Julia ASTs\",\n    \"category\": \"section\",\n    \"text\": \"Julia has two representations of code. First there is a surface syntax AST returned by the parser (e.g. the parse() function), and manipulated by macros. It is a structured representation of code as it is written, constructed by julia-parser.scm from a character stream. Next there is a lowered form, or IR (intermediate representation), which is used by type inference and code generation. In the lowered form there are fewer types of nodes, all macros are expanded, and all control flow is converted to explicit branches and sequences of statements. The lowered form is constructed by julia-syntax.scm.First we will focus on the lowered form, since it is more important to the compiler. It is also less obvious to the human, since it results from a significant rearrangement of the input syntax.\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Lowered-form-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Lowered form\",\n    \"category\": \"section\",\n    \"text\": \"The following data types exist in lowered form:Expr\\nHas a node type indicated by the head field, and an args field which is a Vector{Any} of subexpressions.\\nSlot\\nIdentifies arguments and local variables by consecutive numbering. Slot is an abstract type with subtypes SlotNumber and TypedSlot. Both types have an integer-valued id field giving the slot index. Most slots have the same type at all uses, and so are represented with SlotNumber. The types of these slots are found in the slottypes field of their MethodInstance object. Slots that require per-use type annotations are represented with TypedSlot, which has a typ field.\\nCodeInfo\\nWraps the IR of a method.\\nLineNumberNode\\nContains a single number, specifying the line number the next statement came from.\\nLabelNode\\nBranch target, a consecutively-numbered integer starting at 0.\\nGotoNode\\nUnconditional branch.\\nQuoteNode\\nWraps an arbitrary value to reference as data. For example, the function f() = :a contains a QuoteNode whose value field is the symbol a, in order to return the symbol itself instead of evaluating it.\\nGlobalRef\\nRefers to global variable name in module mod.\\nSSAValue\\nRefers to a consecutively-numbered (starting at 0) static single assignment (SSA) variable inserted by the compiler.\\nNewvarNode\\nMarks a point where a variable is created. This has the effect of resetting a variable to undefined.\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Expr-types-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Expr types\",\n    \"category\": \"section\",\n    \"text\": \"These symbols appear in the head field of Exprs in lowered form.call\\nFunction call (dynamic dispatch). args[1] is the function to call, args[2:end] are the arguments.\\ninvoke\\nFunction call (static dispatch). args[1] is the MethodInstance to call, args[2:end] are the arguments (including the function that is being called, at args[2]).\\nstatic_parameter\\nReference a static parameter by index.\\nline\\nLine number and file name metadata. Unlike a LineNumberNode, can also contain a file name.\\ngotoifnot\\nConditional branch. If args[1] is false, goes to label identified in args[2].\\n=\\nAssignment.\\nmethod\\nAdds a method to a generic function and assigns the result if necessary.\\nHas a 1-argument form and a 4-argument form. The 1-argument form arises from the syntax function foo end. In the 1-argument form, the argument is a symbol. If this symbol already names a function in the current scope, nothing happens. If the symbol is undefined, a new function is created and assigned to the identifier specified by the symbol. If the symbol is defined but names a non-function, an error is raised. The definition of \\\"names a function\\\" is that the binding is constant, and refers to an object of singleton type. The rationale for this is that an instance of a singleton type uniquely identifies the type to add the method to. When the type has fields, it wouldn't be clear whether the method was being added to the instance or its type.\\nThe 4-argument form has the following arguments:\\nargs[1]\\nA function name, or false if unknown. If a symbol, then the expression first behaves like the 1-argument form above. This argument is ignored from then on. When this is false, it means a method is being added strictly by type, (::T)(x) = x.\\nargs[2]\\nA SimpleVector of argument type data. args[2][1] is a SimpleVector of the argument types, and args[2][2] is a SimpleVector of type variables corresponding to the method's static parameters.\\nargs[3]\\nA CodeInfo of the method itself. For \\\"out of scope\\\" method definitions (adding a method to a function that also has methods defined in different scopes) this is an expression that evaluates to a :lambda expression.\\nargs[4]\\ntrue or false, identifying whether the method is staged (@generated function).\\nconst\\nDeclares a (global) variable as constant.\\nnull\\nHas no arguments; simply yields the value nothing.\\nnew\\nAllocates a new struct-like object. First argument is the type. The new pseudo-function is lowered to this, and the type is always inserted by the compiler.  This is very much an internal-only feature, and does no checking. Evaluating arbitrary new expressions can easily segfault.\\nreturn\\nReturns its argument as the value of the enclosing function.\\nthe_exception\\nYields the caught exception inside a catch block. This is the value of the run time system variable jl_exception_in_transit.\\nenter\\nEnters an exception handler (setjmp). args[1] is the label of the catch block to jump to on error.\\nleave\\nPop exception handlers. args[1] is the number of handlers to pop.\\ninbounds\\nControls turning bounds checks on or off. A stack is maintained; if the first argument of this expression is true or false (true means bounds checks are disabled), it is pushed onto the stack. If the first argument is :pop, the stack is popped.\\nboundscheck\\nIndicates the beginning or end of a section of code that performs a bounds check. Like inbounds, a stack is maintained, and the second argument can be one of: true, false, or :pop.\\ncopyast\\nPart of the implementation of quasi-quote. The argument is a surface syntax AST that is simply copied recursively and returned at run time.\\nmeta\\nMetadata. args[1] is typically a symbol specifying the kind of metadata, and the rest of the arguments are free-form. The following kinds of metadata are commonly used:\\n:inline and :noinline: Inlining hints.\\n:push_loc: enters a sequence of statements from a specified source location.\\nargs[2] specifies a filename, as a symbol.\\nargs[3] optionally specifies the name of an (inlined) function that originally contained the code.\\n:pop_loc: returns to the source location before the matching :push_loc.\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Method-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Method\",\n    \"category\": \"section\",\n    \"text\": \"A unique'd container describing the shared metadata for a single method.name, module, file, line, sig\\nMetadata to uniquely identify the method for the computer and the human.\\nambig\\nCache of other methods that may be ambiguous with this one.\\nspecializations\\nCache of all MethodInstance ever created for this Method, used to ensure uniqueness. Uniqueness is required for efficiency, especially for incremental precompile and tracking of method invalidation.\\nsource\\nThe original source code (usually compressed).\\nroots\\nPointers to non-AST things that have been interpolated into the AST, required by compression of the AST, type-inference, or the generation of native code.\\nnargs, isva, called, isstaged, pure\\nDescriptive bit-fields for the source code of this Method.\\nmin_world / max_world\\nThe range of world ages for which this method is visible to dispatch.\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#MethodInstance-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"MethodInstance\",\n    \"category\": \"section\",\n    \"text\": \"A unique'd container describing a single callable signature for a Method. See especially Proper maintenance and care of multi-threading locks for important details on how to modify these fields safely.specTypes\\nThe primary key for this MethodInstance. Uniqueness is guaranteed through a def.specializations lookup.\\ndef\\nThe Method that this function describes a specialization of. Or #undef, if this is a top-level Lambda that is not part of a Method.\\nsparam_vals\\nThe values of the static parameters in specTypes indexed by def.sparam_syms. For the MethodInstance at Method.unspecialized, this is the empty SimpleVector. But for a runtime MethodInstance from the MethodTable cache, this will always be defined and indexable.\\nrettype\\nThe inferred return type for the specFunctionObject field, which (in most cases) is also the computed return type for the function in general.\\ninferred\\nMay contain a cache of the inferred source for this function, or other information about the inference result such as a constant return value may be put here (if jlcall_api == 2), or it could be set to nothing to just indicate rettype is inferred.\\nftpr\\nThe generic jlcall entry point.\\njlcall_api\\nThe ABI to use when calling fptr. Some significant ones include:\\n0 - Not compiled yet\\n1 - JL_CALLABLE jl_value_t *(*)(jl_function_t *f, jl_value_t *args[nargs], uint32_t nargs)\\n2 - Constant (value stored in inferred)\\n3 - With Static-parameters forwarded jl_value_t *(*)(jl_svec_t *sparams, jl_function_t *f, jl_value_t *args[nargs], uint32_t nargs)\\n4 - Run in interpreter jl_value_t *(*)(jl_method_instance_t *meth, jl_function_t *f, jl_value_t *args[nargs], uint32_t nargs)\\nmin_world / max_world\\nThe range of world ages for which this method instance is valid to be called.\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#CodeInfo-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"CodeInfo\",\n    \"category\": \"section\",\n    \"text\": \"A temporary container for holding lowered source code.code\\nAn Any array of statements\\nslotnames\\nAn array of symbols giving the name of each slot (argument or local variable).\\nslottypes\\nAn array of types for the slots.\\nslotflags\\nA UInt8 array of slot properties, represented as bit flags:\\n2  - assigned (only false if there are no assignment statements with this var on the left)\\n8  - const (currently unused for local variables)\\n16 - statically assigned once\\n32 - might be used before assigned. This flag is only valid after type inference.\\nssavaluetypes\\nEither an array or an Int.\\nIf an Int, it gives the number of compiler-inserted temporary locations in the function. If an array, specifies a type for each location.Boolean properties:inferred\\nWhether this has been produced by type inference.\\ninlineable\\nWhether this should be inlined.\\npropagate_inbounds\\nWhether this should should propagate @inbounds when inlined for the purpose of eliding @boundscheck blocks.\\npure\\nWhether this is known to be a pure function of its arguments, without respect to the state of the method caches or other mutable global state.\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Surface-syntax-AST-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Surface syntax AST\",\n    \"category\": \"section\",\n    \"text\": \"Front end ASTs consist entirely of Exprs and atoms (e.g. symbols, numbers). There is generally a different expression head for each visually distinct syntactic form. Examples will be given in s-expression syntax. Each parenthesized list corresponds to an Expr, where the first element is the head. For example (call f x) corresponds to Expr(:call, :f, :x) in Julia.\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Calls-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Calls\",\n    \"category\": \"section\",\n    \"text\": \"Input AST\\nf(x) (call f x)\\nf(x, y=1, z=2) (call f x (kw y 1) (kw z 2))\\nf(x; y=1) (call f (parameters (kw y 1)) x)\\nf(x...) (call f (... x))do syntax:f(x) do a,b\\n    body\\nendparses as (call f (-> (tuple a b) (block body)) x).\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Operators-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Operators\",\n    \"category\": \"section\",\n    \"text\": \"Most uses of operators are just function calls, so they are parsed with the head call. However some operators are special forms (not necessarily function calls), and in those cases the operator itself is the expression head. In julia-parser.scm these are referred to as \\\"syntactic operators\\\". Some operators (+ and *) use N-ary parsing; chained calls are parsed as a single N-argument call. Finally, chains of comparisons have their own special expression structure.Input AST\\nx+y (call + x y)\\na+b+c+d (call + a b c d)\\n2x (call * 2 x)\\na&&b (&& a b)\\nx += 1 (+= x 1)\\na ? 1 : 2 (if a 1 2)\\na:b (: a b)\\na:b:c (: a b c)\\na,b (tuple a b)\\na==b (call == a b)\\n1<i<=n (comparison 1 < i <= n)\\na.b (. a (quote b))\\na.(b) (. a b)\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Bracketed-forms-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Bracketed forms\",\n    \"category\": \"section\",\n    \"text\": \"Input AST\\na[i] (ref a i)\\nt[i;j] (typed_vcat t i j)\\nt[i j] (typed_hcat t i j)\\nt[a b; c d] (typed_vcat t (row a b) (row c d))\\na{b} (curly a b)\\na{b;c} (curly a (parameters c) b)\\n[x] (vect x)\\n[x,y] (vect x y)\\n[x;y] (vcat x y)\\n[x y] (hcat x y)\\n[x y; z t] (vcat (row x y) (row z t))\\n[x for y in z, a in b] (comprehension x (= y z) (= a b))\\nT[x for y in z] (typed_comprehension T x (= y z))\\n(a, b, c) (tuple a b c)\\n(a; b; c) (block a (block b c))\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Macros-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Macros\",\n    \"category\": \"section\",\n    \"text\": \"Input AST\\n@m x y (macrocall @m x y)\\nBase.@m x y (macrocall (. Base (quote @m)) x y)\\n@Base.m x y (macrocall (. Base (quote @m)) x y)\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Strings-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Strings\",\n    \"category\": \"section\",\n    \"text\": \"Input AST\\n\\\"a\\\" \\\"a\\\"\\nx\\\"y\\\" (macrocall @x_str \\\"y\\\")\\nx\\\"y\\\"z (macrocall @x_str \\\"y\\\" \\\"z\\\")\\n\\\"x = $x\\\" (string \\\"x = \\\" x)\\n`a b c` (macrocall @cmd \\\"a b c\\\")Doc string syntax:\\\"some docs\\\"\\nf(x) = xparses as (macrocall (|.| Core '@doc) \\\"some docs\\\" (= (call f x) (block x))).\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Imports-and-such-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Imports and such\",\n    \"category\": \"section\",\n    \"text\": \"Input AST\\nimport a (import a)\\nimport a.b.c (import a b c)\\nimport ...a (import . . . a)\\nimport a.b, c.d (toplevel (import a b) (import c d))\\nimport Base: x (import Base x)\\nimport Base: x, y (toplevel (import Base x) (import Base y))\\nexport a, b (export a b)\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Numbers-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Numbers\",\n    \"category\": \"section\",\n    \"text\": \"Julia supports more number types than many scheme implementations, so not all numbers are represented directly as scheme numbers in the AST.Input AST\\n11111111111111111111 (macrocall @int128_str \\\"11111111111111111111\\\")\\n0xfffffffffffffffff (macrocall @uint128_str \\\"0xfffffffffffffffff\\\")\\n1111...many digits... (macrocall @big_str \\\"1111....\\\")\"\n},\n\n{\n    \"location\": \"devdocs/ast.html#Block-forms-1\",\n    \"page\": \"Julia ASTs\",\n    \"title\": \"Block forms\",\n    \"category\": \"section\",\n    \"text\": \"A block of statements is parsed as (block stmt1 stmt2 ...).If statement:if a\\n    b\\nelseif c\\n    d\\nelse e\\n    f\\nendparses as:(if a (block (line 2) b)\\n    (block (line 3) (if c (block (line 4) d)\\n                        (block (line 5) e (line 6) f))))A while loop parses as (while condition body).A for loop parses as (for (= var iter) body). If there is more than one iteration specification, they are parsed as a block: (for (block (= v1 iter1) (= v2 iter2)) body).break and continue are parsed as 0-argument expressions (break) and (continue).let is parsed as (let body (= var1 val1) (= var2 val2) ...).A basic function definition is parsed as (function (call f x) body). A more complex example:function f{T}(x::T; k = 1)\\n    return x+1\\nendparses as:(function (call (curly f T) (parameters (kw k 1))\\n                (:: x T))\\n          (block (line 2 file.jl) (return (call + x 1))))Type definition:mutable struct Foo{T<:S}\\n    x::T\\nendparses as:(type #t (curly Foo (<: T S))\\n      (block (line 2 none) (:: x T)))The first argument is a boolean telling whether the type is mutable.try blocks parse as (try try_block var catch_block finally_block). If no variable is present after catch, var is #f. If there is no finally clause, then the last argument is not present.\"\n},\n\n{\n    \"location\": \"devdocs/types.html#\",\n    \"page\": \"More about types\",\n    \"title\": \"More about types\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/types.html#More-about-types-1\",\n    \"page\": \"More about types\",\n    \"title\": \"More about types\",\n    \"category\": \"section\",\n    \"text\": \"If you've used Julia for a while, you understand the fundamental role that types play.  Here we try to get under the hood, focusing particularly on Parametric Types.\"\n},\n\n{\n    \"location\": \"devdocs/types.html#Types-and-sets-(and-Any-and-Union{}/Bottom)-1\",\n    \"page\": \"More about types\",\n    \"title\": \"Types and sets (and Any and Union{}/Bottom)\",\n    \"category\": \"section\",\n    \"text\": \"It's perhaps easiest to conceive of Julia's type system in terms of sets. While programs manipulate individual values, a type refers to a set of values. This is not the same thing as a collection; for example a Set of values is itself a single Set value. Rather, a type describes a set of possible values, expressing uncertainty about which value we have.A concrete type T describes the set of values whose direct tag, as returned by the typeof function, is T. An abstract type describes some possibly-larger set of values.Any describes the entire universe of possible values. Integer is a subset of Any that includes Int, Int8, and other concrete types. Internally, Julia also makes heavy use of another type known as Bottom, which can also be written as Union{}. This corresponds to the empty set.Julia's types support the standard operations of set theory: you can ask whether T1 is a \\\"subset\\\" (subtype) of T2 with T1 <: T2. Likewise, you intersect two types using typeintersect, take their union with Union, and compute a type that contains their union with typejoin:julia> typeintersect(Int, Float64)\\nUnion{}\\n\\njulia> Union{Int, Float64}\\nUnion{Float64, Int64}\\n\\njulia> typejoin(Int, Float64)\\nReal\\n\\njulia> typeintersect(Signed, Union{UInt8, Int8})\\nInt8\\n\\njulia> Union{Signed, Union{UInt8, Int8}}\\nUnion{Signed, UInt8}\\n\\njulia> typejoin(Signed, Union{UInt8, Int8})\\nInteger\\n\\njulia> typeintersect(Tuple{Integer,Float64}, Tuple{Int,Real})\\nTuple{Int64,Float64}\\n\\njulia> Union{Tuple{Integer,Float64}, Tuple{Int,Real}}\\nUnion{Tuple{Int64,Real}, Tuple{Integer,Float64}}\\n\\njulia> typejoin(Tuple{Integer,Float64}, Tuple{Int,Real})\\nTuple{Integer,Real}While these operations may seem abstract, they lie at the heart of Julia.  For example, method dispatch is implemented by stepping through the items in a method list until reaching one for which the type of the argument tuple is a subtype of the method signature. For this algorithm to work, it's important that methods be sorted by their specificity, and that the search begins with the most specific methods. Consequently, Julia also implements a partial order on types; this is achieved by functionality that is similar to <:, but with differences that will be discussed below.\"\n},\n\n{\n    \"location\": \"devdocs/types.html#UnionAll-types-1\",\n    \"page\": \"More about types\",\n    \"title\": \"UnionAll types\",\n    \"category\": \"section\",\n    \"text\": \"Julia's type system can also express an iterated union of types: a union of types over all values of some variable. This is needed to describe parametric types where the values of some parameters are not known.For example, :obj:Array has two parameters as in Array{Int,2}. If we did not know the element type, we could write Array{T,2} where T, which is the union of Array{T,2} for all values of T: Union{Array{Int8,2}, Array{Int16,2}, ...}.Such a type is represented by a UnionAll object, which contains a variable (T in this example, of type TypeVar), and a wrapped type (Array{T,2} in this example).Consider the following methods:f1(A::Array) = 1\\nf2(A::Array{Int}) = 2\\nf3(A::Array{T}) where {T<:Any} = 3\\nf4(A::Array{Any}) = 4The signature of f3 is a UnionAll type wrapping a tuple type. All but f4 can be called with a = [1,2]; all but f2 can be called with b = Any[1,2].Let's look at these types a little more closely:julia> dump(Array)\\nUnionAll\\n  var: TypeVar\\n    name: Symbol T\\n    lb: Core.TypeofBottom Union{}\\n    ub: Any\\n  body: UnionAll\\n    var: TypeVar\\n      name: Symbol N\\n      lb: Core.TypeofBottom Union{}\\n      ub: Any\\n    body: Array{T,N} <: DenseArray{T,N}This indicates that Array actually names a UnionAll type. There is one UnionAll type for each parameter, nested. The syntax Array{Int,2} is equivalent to Array{Int}{2}; internally each UnionAll is instantiated with a particular variable value, one at a time, outermost-first. This gives a natural meaning to the omission of trailing type parameters; Array{Int} gives a type equivalent to Array{Int,N} where N.A TypeVar is not itself a type, but rather should be considered part of the structure of a UnionAll type. Type variables have lower and upper bounds on their values (in the fields lb and ub). The symbol name is purely cosmetic. Internally, TypeVars are compared by address, so they are defined as mutable types to ensure that \\\"different\\\" type variables can be distinguished. However, by convention they should not be mutated.One can construct TypeVars manually:julia> TypeVar(:V, Signed, Real)\\nSigned<:V<:RealThere are convenience versions that allow you to omit any of these arguments except the name symbol.The syntax Array{T} where T<:Integer is lowered tolet T = TypeVar(:T,Integer)\\n    UnionAll(T, Array{T})\\nendso it is seldom necessary to construct a TypeVar manually (indeed, this is to be avoided).\"\n},\n\n{\n    \"location\": \"devdocs/types.html#Free-variables-1\",\n    \"page\": \"More about types\",\n    \"title\": \"Free variables\",\n    \"category\": \"section\",\n    \"text\": \"The concept of a free type variable is extremely important in the type system. We say that a variable V is free in type T if T does not contain the UnionAll that introduces variable V. For example, the type Array{Array{V} where V<:Integer} has no free variables, but the Array{V} part inside of it does have a free variable, V.A type with free variables is, in some sense, not really a type at all. Consider the type Array{Array{T}} where T, which refers to all homogeneous arrays of arrays. The inner type Array{T}, seen by itself, might seem to refer to any kind of array. However, every element of the outer array must have the same array type, so Array{T} cannot refer to just any old array. One could say that Array{T} effectively \\\"occurs\\\" multiple times, and T must have the same value each \\\"time\\\".For this reason, the function jl_has_free_typevars in the C API is very important. Types for which it returns true will not give meaningful answers in subtyping and other type functions.\"\n},\n\n{\n    \"location\": \"devdocs/types.html#TypeNames-1\",\n    \"page\": \"More about types\",\n    \"title\": \"TypeNames\",\n    \"category\": \"section\",\n    \"text\": \"The following two Array types are functionally equivalent, yet print differently:julia> TV, NV = TypeVar(:T), TypeVar(:N)\\n(T, N)\\n\\njulia> Array\\nArray\\n\\njulia> Array{TV,NV}\\nArray{T,N}These can be distinguished by examining the name field of the type, which is an object of type TypeName:julia> dump(Array{Int,1}.name)\\nTypeName\\n  name: Symbol Array\\n  module: Module Core\\n  names: empty SimpleVector\\n  wrapper: UnionAll\\n    var: TypeVar\\n      name: Symbol T\\n      lb: Core.TypeofBottom Union{}\\n      ub: Any\\n    body: UnionAll\\n      var: TypeVar\\n        name: Symbol N\\n        lb: Core.TypeofBottom Union{}\\n        ub: Any\\n      body: Array{T,N} <: DenseArray{T,N}\\n  cache: SimpleVector\\n    ...\\n\\n  linearcache: SimpleVector\\n    ...\\n\\n  hash: Int64 -7900426068641098781\\n  mt: MethodTable\\n    name: Symbol Array\\n    defs: Void nothing\\n    cache: Void nothing\\n    max_args: Int64 0\\n    kwsorter: #undef\\n    module: Module Core\\n    : Int64 0\\n    : Int64 0In this case, the relevant field is wrapper, which holds a reference to the top-level type used to make new Array types.julia> pointer_from_objref(Array)\\nPtr{Void} @0x00007fcc7de64850\\n\\njulia> pointer_from_objref(Array.body.body.name.wrapper)\\nPtr{Void} @0x00007fcc7de64850\\n\\njulia> pointer_from_objref(Array{TV,NV})\\nPtr{Void} @0x00007fcc80c4d930\\n\\njulia> pointer_from_objref(Array{TV,NV}.name.wrapper)\\nPtr{Void} @0x00007fcc7de64850The wrapper field of Array points to itself, but for Array{TV,NV} it points back to the original definition of the type.What about the other fields? hash assigns an integer to each type.  To examine the cache field, it's helpful to pick a type that is less heavily used than Array. Let's first create our own type:julia> struct MyType{T,N} end\\n\\njulia> MyType{Int,2}\\nMyType{Int64,2}\\n\\njulia> MyType{Float32, 5}\\nMyType{Float32,5}\\n\\njulia> MyType.body.body.name.cache\\nsvec(MyType{Float32,5}, MyType{Int64,2}, #undef, #undef, #undef, #undef, #undef, #undef)(The cache is pre-allocated to have length 8, but only the first two entries are populated.) Consequently, when you instantiate a parametric type, each concrete type gets saved in a type cache.  However, instances containing free type variables are not cached.\"\n},\n\n{\n    \"location\": \"devdocs/types.html#Tuple-types-1\",\n    \"page\": \"More about types\",\n    \"title\": \"Tuple types\",\n    \"category\": \"section\",\n    \"text\": \"Tuple types constitute an interesting special case.  For dispatch to work on declarations like x::Tuple, the type has to be able to accommodate any tuple.  Let's check the parameters:julia> Tuple\\nTuple\\n\\njulia> Tuple.parameters\\nsvec(Vararg{Any,N} where N)Unlike other types, tuple types are covariant in their parameters, so this definition permits Tuple to match any type of tuple:julia> typeintersect(Tuple, Tuple{Int,Float64})\\nTuple{Int64,Float64}\\n\\njulia> typeintersect(Tuple{Vararg{Any}}, Tuple{Int,Float64})\\nTuple{Int64,Float64}However, if a variadic (Vararg) tuple type has free variables it can describe different kinds of tuples:julia> typeintersect(Tuple{Vararg{T} where T}, Tuple{Int,Float64})\\nTuple{Int64,Float64}\\n\\njulia> typeintersect(Tuple{Vararg{T}} where T, Tuple{Int,Float64})\\nUnion{}Notice that when T is free with respect to the Tuple type (i.e. its binding UnionAll type is outside the Tuple type), only one T value must work over the whole type. Therefore a heterogeneous tuple does not match.Finally, it's worth noting that Tuple{} is distinct:julia> Tuple{}\\nTuple{}\\n\\njulia> Tuple{}.parameters\\nsvec()\\n\\njulia> typeintersect(Tuple{}, Tuple{Int})\\nUnion{}What is the \\\"primary\\\" tuple-type?julia> pointer_from_objref(Tuple)\\nPtr{Void} @0x00007f5998a04370\\n\\njulia> pointer_from_objref(Tuple{})\\nPtr{Void} @0x00007f5998a570d0\\n\\njulia> pointer_from_objref(Tuple.name.wrapper)\\nPtr{Void} @0x00007f5998a04370\\n\\njulia> pointer_from_objref(Tuple{}.name.wrapper)\\nPtr{Void} @0x00007f5998a04370so Tuple == Tuple{Vararg{Any}} is indeed the primary type.\"\n},\n\n{\n    \"location\": \"devdocs/types.html#Diagonal-types-1\",\n    \"page\": \"More about types\",\n    \"title\": \"Diagonal types\",\n    \"category\": \"section\",\n    \"text\": \"Consider the type Tuple{T,T} where T. A method with this signature would look like:f(x::T, y::T) where {T} = ...According to the usual interpretation of a UnionAll type, this T ranges over all types, including Any, so this type should be equivalent to Tuple{Any,Any}. However, this interpretation causes some practical problems.First, a value of T needs to be available inside the method definition. For a call like f(1, 1.0), it's not clear what T should be. It could be Union{Int,Float64}, or perhaps Real. Intuitively, we expect the declaration x::T to mean T === typeof(x). To make sure that invariant holds, we need typeof(x) === typeof(y) === T in this method. That implies the method should only be called for arguments of the exact same type.It turns out that being able to dispatch on whether two values have the same type is very useful (this is used by the promotion system for example), so we have multiple reasons to want a different interpretation of Tuple{T,T} where T. To make this work we add the following rule to subtyping: if a variable occurs more than once in covariant position, it is restricted to ranging over only concrete types. (\\\"Covariant position\\\" means that only Tuple and Union types occur between an occurrence of a variable and the UnionAll type that introduces it.) Such variables are called \\\"diagonal variables\\\" or \\\"concrete variables\\\".So for example, Tuple{T,T} where T can be seen as Union{Tuple{Int8,Int8}, Tuple{Int16,Int16}, ...}, where T ranges over all concrete types. This gives rise to some interesting subtyping results. For example Tuple{Real,Real} is not a subtype of Tuple{T,T} where T, because it includes some types like Tuple{Int8,Int16} where the two elements have different types. Tuple{Real,Real} and Tuple{T,T} where T have the non-trivial intersection Tuple{T,T} where T<:Real. However, Tuple{Real} is a subtype of Tuple{T} where T, because in that case T occurs only once and so is not diagonal.Next consider a signature like the following:f(a::Array{T}, x::T, y::T) where {T} = ...In this case, T occurs in invariant position inside Array{T}. That means whatever type of array is passed unambiguously determines the value of T \u2013- we say T has an equality constraint on it. Therefore in this case the diagonal rule is not really necessary, since the array determines T and we can then allow x and y to be of any subtypes of T. So variables that occur in invariant position are never considered diagonal. This choice of behavior is slightly controversial \u2013- some feel this definition should be written asf(a::Array{T}, x::S, y::S) where {T, S<:T} = ...to clarify whether x and y need to have the same type. In this version of the signature they would, or we could introduce a third variable for the type of y if x and y can have different types.The next complication is the interaction of unions and diagonal variables, e.g.f(x::Union{Void,T}, y::T) where {T} = ...Consider what this declaration means. y has type T. x then can have either the same type T, or else be of type Void. So all of the following calls should match:f(1, 1)\\nf(\\\"\\\", \\\"\\\")\\nf(2.0, 2.0)\\nf(nothing, 1)\\nf(nothing, \\\"\\\")\\nf(nothing, 2.0)These examples are telling us something: when x is nothing::Void, there are no extra constraints on y. It is as if the method signature had y::Any. This means that whether a variable is diagonal is not a static property based on where it appears in a type. Rather, it depends on where a variable appears when the subtyping algorithm uses it. When x has type Void, we don't need to use the T in Union{Void,T}, so T does not \\\"occur\\\". Indeed, we have the following type equivalence:(Tuple{Union{Void,T},T} where T) == Union{Tuple{Void,Any}, Tuple{T,T} where T}\"\n},\n\n{\n    \"location\": \"devdocs/types.html#Subtyping-diagonal-variables-1\",\n    \"page\": \"More about types\",\n    \"title\": \"Subtyping diagonal variables\",\n    \"category\": \"section\",\n    \"text\": \"The subtyping algorithm for diagonal variables has two components: (1) identifying variable occurrences, and (2) ensuring that diagonal variables range over concrete types only.The first task is accomplished by keeping counters occurs_inv and occurs_cov (in src/subtype.c) for each variable in the environment, tracking the number of invariant and covariant occurrences, respectively. A variable is diagonal when occurs_inv == 0 && occurs_cov > 1.The second task is accomplished by imposing a condition on a variable's lower bound. As the subtyping algorithm runs, it narrows the bounds of each variable (raising lower bounds and lowering upper bounds) to keep track of the range of variable values for which the subtype relation would hold. When we are done evaluating the body of a UnionAll type whose variable is diagonal, we look at the final values of the bounds. Since the variable must be concrete, a contradiction occurs if its lower bound could not be a subtype of a concrete type. For example, an abstract type like AbstractArray cannot be a subtype of a concrete type, but a concrete type like Int can be, and the empty type Bottom can be as well. If a lower bound fails this test the algorithm stops with the answer false.For example, in the problem Tuple{Int,String} <: Tuple{T,T} where T, we derive that this would be true if T were a supertype of Union{Int,String}. However, Union{Int,String} is an abstract type, so the relation does not hold.This concreteness test is done by the function is_leaf_bound. Note that this test is slightly different from jl_is_leaf_type, since it also returns true for Bottom. Currently this function is heuristic, and does not catch all possible concrete types. The difficulty is that whether a lower bound is concrete might depend on the values of other type variable bounds. For example, Vector{T} is equivalent to the concrete type Vector{Int} only if both the upper and lower bounds of T equal Int. We have not yet worked out a complete algorithm for this.\"\n},\n\n{\n    \"location\": \"devdocs/types.html#Introduction-to-the-internal-machinery-1\",\n    \"page\": \"More about types\",\n    \"title\": \"Introduction to the internal machinery\",\n    \"category\": \"section\",\n    \"text\": \"Most operations for dealing with types are found in the files jltypes.c and subtype.c. A good way to start is to watch subtyping in action. Build Julia with make debug and fire up Julia within a debugger. gdb debugging tips has some tips which may be useful.Because the subtyping code is used heavily in the REPL itself\u2013and hence breakpoints in this code get triggered often\u2013it will be easiest if you make the following definition:julia> function mysubtype(a,b)\\n           ccall(:jl_breakpoint, Void, (Any,), nothing)\\n           issubtype(a, b)\\n       endand then set a breakpoint in jl_breakpoint.  Once this breakpoint gets triggered, you can set breakpoints in other functions.As a warm-up, try the following:mysubtype(Tuple{Int,Float64}, Tuple{Integer,Real})We can make it more interesting by trying a more complex case:mysubtype(Tuple{Array{Int,2}, Int8}, Tuple{Array{T}, T} where T)\"\n},\n\n{\n    \"location\": \"devdocs/types.html#Subtyping-and-method-sorting-1\",\n    \"page\": \"More about types\",\n    \"title\": \"Subtyping and method sorting\",\n    \"category\": \"section\",\n    \"text\": \"The type_morespecific functions are used for imposing a partial order on functions in method tables (from most-to-least specific). Specificity is strict; if a is more specific than b, then a does not equal b and b is not more specific than a.If a is a strict subtype of b, then it is automatically considered more specific. From there, type_morespecific employs some less formal rules. For example, subtype is sensitive to the number of arguments, but type_morespecific may not be. In particular, Tuple{Int,AbstractFloat} is more specific than Tuple{Integer}, even though it is not a subtype.  (Of Tuple{Int,AbstractFloat} and Tuple{Integer,Float64}, neither is more specific than the other.)  Likewise, Tuple{Int,Vararg{Int}} is not a subtype of Tuple{Integer}, but it is considered more specific. However, morespecific does get a bonus for length: in particular, Tuple{Int,Int} is more specific than Tuple{Int,Vararg{Int}}.If you're debugging how methods get sorted, it can be convenient to define the function:type_morespecific(a, b) = ccall(:jl_type_morespecific, Cint, (Any,Any), a, b)which allows you to test whether tuple type a is more specific than tuple type b.\"\n},\n\n{\n    \"location\": \"devdocs/object.html#\",\n    \"page\": \"Memory layout of Julia Objects\",\n    \"title\": \"Memory layout of Julia Objects\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/object.html#Memory-layout-of-Julia-Objects-1\",\n    \"page\": \"Memory layout of Julia Objects\",\n    \"title\": \"Memory layout of Julia Objects\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/object.html#Object-layout-(jl_value_t)-1\",\n    \"page\": \"Memory layout of Julia Objects\",\n    \"title\": \"Object layout (jl_value_t)\",\n    \"category\": \"section\",\n    \"text\": \"The jl_value_t struct is the name for a block of memory owned by the Julia Garbage Collector, representing the data associated with a Julia object in memory. Absent any type information, it is simply an opaque pointer:typedef struct jl_value_t* jl_pvalue_t;Each jl_value_t struct is contained in a jl_typetag_t struct that contains metadata information about the Julia object, such as its type and garbage collector (gc) reachability:typedef struct {\\n    opaque metadata;\\n    jl_value_t value;\\n} jl_typetag_t;The type of any Julia object is an instance of a leaf jl_datatype_t object. The jl_typeof() function can be used to query for it:jl_value_t *jl_typeof(jl_value_t *v);The layout of the object depends on its type. Reflection methods can be used to inspect that layout. A field can be accessed by calling one of the get-field methods:jl_value_t *jl_get_nth_field_checked(jl_value_t *v, size_t i);\\njl_value_t *jl_get_field(jl_value_t *o, char *fld);If the field types are known, a priori, to be all pointers, the values can also be extracted directly as an array access:jl_value_t *v = value->fieldptr[n];As an example, a \\\"boxed\\\" uint16_t is stored as follows:struct {\\n    opaque metadata;\\n    struct {\\n        uint16_t data;        // -- 2 bytes\\n    } jl_value_t;\\n};This object is created by jl_box_uint16(). Note that the jl_value_t pointer references the data portion, not the metadata at the top of the struct.A value may be stored \\\"unboxed\\\" in many circumstances (just the data, without the metadata, and possibly not even stored but just kept in registers), so it is unsafe to assume that the address of a box is a unique identifier. The \\\"egal\\\" test (corresponding to the === function in Julia), should instead be used to compare two unknown objects for equivalence:int jl_egal(jl_value_t *a, jl_value_t *b);This optimization should be relatively transparent to the API, since the object will be \\\"boxed\\\" on-demand, whenever a jl_value_t pointer is needed.Note that modification of a jl_value_t pointer in memory is permitted only if the object is mutable. Otherwise, modification of the value may corrupt the program and the result will be undefined. The mutability property of a value can be queried for with:int jl_is_mutable(jl_value_t *v);If the object being stored is a jl_value_t, the Julia garbage collector must be notified also:void jl_gc_wb(jl_value_t *parent, jl_value_t *ptr);However, the Embedding Julia section of the manual is also required reading at this point, for covering other details of boxing and unboxing various types, and understanding the gc interactions.Mirror structs for some of the built-in types are defined in julia.h. The corresponding global jl_datatype_t objects are created by jl_init_types in jltypes.c.\"\n},\n\n{\n    \"location\": \"devdocs/object.html#Garbage-collector-mark-bits-1\",\n    \"page\": \"Memory layout of Julia Objects\",\n    \"title\": \"Garbage collector mark bits\",\n    \"category\": \"section\",\n    \"text\": \"The garbage collector uses several bits from the metadata portion of the jl_typetag_t to track each object in the system. Further details about this algorithm can be found in the comments of the garbage collector implementation in gc.c.\"\n},\n\n{\n    \"location\": \"devdocs/object.html#Object-allocation-1\",\n    \"page\": \"Memory layout of Julia Objects\",\n    \"title\": \"Object allocation\",\n    \"category\": \"section\",\n    \"text\": \"Most new objects are allocated by jl_new_structv():jl_value_t *jl_new_struct(jl_datatype_t *type, ...);\\njl_value_t *jl_new_structv(jl_datatype_t *type, jl_value_t **args, uint32_t na);Although, isbits objects can be also constructed directly from memory:jl_value_t *jl_new_bits(jl_value_t *bt, void *data)And some objects have special constructors that must be used instead of the above functions:Types:jl_datatype_t *jl_apply_type(jl_datatype_t *tc, jl_tuple_t *params);\\njl_datatype_t *jl_apply_array_type(jl_datatype_t *type, size_t dim);\\njl_uniontype_t *jl_new_uniontype(jl_tuple_t *types);While these are the most commonly used options, there are more low-level constructors too, which you can find declared in julia.h. These are used in jl_init_types() to create the initial types needed to bootstrap the creation of the Julia system image.Tuples:jl_tuple_t *jl_tuple(size_t n, ...);\\njl_tuple_t *jl_tuplev(size_t n, jl_value_t **v);\\njl_tuple_t *jl_alloc_tuple(size_t n);The representation of tuples is highly unique in the Julia object representation ecosystem. In some cases, a Base.tuple() object may be an array of pointers to the objects contained by the tuple equivalent to:typedef struct {\\n    size_t length;\\n    jl_value_t *data[length];\\n} jl_tuple_t;However, in other cases, the tuple may be converted to an anonymous isbits type and stored unboxed, or it may not stored at all (if it is not being used in a generic context as a jl_value_t*).Symbols:jl_sym_t *jl_symbol(const char *str);Functions and MethodInstance:jl_function_t *jl_new_generic_function(jl_sym_t *name);\\njl_method_instance_t *jl_new_method_instance(jl_value_t *ast, jl_tuple_t *sparams);Arrays:jl_array_t *jl_new_array(jl_value_t *atype, jl_tuple_t *dims);\\njl_array_t *jl_new_arrayv(jl_value_t *atype, ...);\\njl_array_t *jl_alloc_array_1d(jl_value_t *atype, size_t nr);\\njl_array_t *jl_alloc_array_2d(jl_value_t *atype, size_t nr, size_t nc);\\njl_array_t *jl_alloc_array_3d(jl_value_t *atype, size_t nr, size_t nc, size_t z);\\njl_array_t *jl_alloc_vec_any(size_t n);Note that many of these have alternative allocation functions for various special-purposes. The list here reflects the more common usages, but a more complete list can be found by reading the julia.h header file.Internal to Julia, storage is typically allocated by newstruct() (or newobj() for the special types):jl_value_t *newstruct(jl_value_t *type);\\njl_value_t *newobj(jl_value_t *type, size_t nfields);And at the lowest level, memory is getting allocated by a call to the garbage collector (in gc.c), then tagged with its type:jl_value_t *jl_gc_allocobj(size_t nbytes);\\nvoid jl_set_typeof(jl_value_t *v, jl_datatype_t *type);Note that all objects are allocated in multiples of 4 bytes and aligned to the platform pointer size. Memory is allocated from a pool for smaller objects, or directly with malloc() for large objects.sidebar: Singleton Types\\nSingleton types have only one instance and no data fields. Singleton instances have a size of 0 bytes, and consist only of their metadata. e.g. nothing::Void.See Singleton Types and Nothingness and missing values\"\n},\n\n{\n    \"location\": \"devdocs/eval.html#\",\n    \"page\": \"Eval of Julia code\",\n    \"title\": \"Eval of Julia code\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/eval.html#Eval-of-Julia-code-1\",\n    \"page\": \"Eval of Julia code\",\n    \"title\": \"Eval of Julia code\",\n    \"category\": \"section\",\n    \"text\": \"One of the hardest parts about learning how the Julia Language runs code is learning how all of the pieces work together to execute a block of code.Each chunk of code typically makes a trip through many steps with potentially unfamiliar names, such as (in no particular order): flisp, AST, C++, LLVM, eval, typeinf, macroexpand, sysimg (or system image), bootstrapping, compile, parse, execute, JIT, interpret, box, unbox, intrinsic function, and primitive function, before turning into the desired result (hopefully).sidebar: Definitions\\nREPL\\nREPL stands for Read-Eval-Print Loop. It's just what we call the command line environment for short.\\nAST\\nAbstract Syntax Tree The AST is the digital representation of the code structure. In this form the code has been tokenized for meaning so that it is more suitable for manipulation and execution.\"\n},\n\n{\n    \"location\": \"devdocs/eval.html#Julia-Execution-1\",\n    \"page\": \"Eval of Julia code\",\n    \"title\": \"Julia Execution\",\n    \"category\": \"section\",\n    \"text\": \"The 10,000 foot view of the whole process is as follows:The user starts julia.\\nThe C function main() from ui/repl.c gets called. This function processes the command line arguments, filling in the jl_options struct and setting the variable ARGS. It then initializes Julia (by calling julia_init in task.c, which may load a previously compiled sysimg). Finally, it passes off control to Julia by calling Base._start().\\nWhen _start() takes over control, the subsequent sequence of commands depends on the command line arguments given. For example, if a filename was supplied, it will proceed to execute that file. Otherwise, it will start an interactive REPL.\\nSkipping the details about how the REPL interacts with the user, let's just say the program ends up with a block of code that it wants to run.\\nIf the block of code to run is in a file, jl_load(char *filename) gets invoked to load the file and parse it. Each fragment of code is then passed to eval to execute.\\nEach fragment of code (or AST), is handed off to eval() to turn into results.\\neval() takes each code fragment and tries to run it in jl_toplevel_eval_flex().\\njl_toplevel_eval_flex() decides whether the code is a \\\"toplevel\\\" action (such as using or module), which would be invalid inside a function. If so, it passes off the code to the toplevel interpreter.\\njl_toplevel_eval_flex() then expands the code to eliminate any macros and to \\\"lower\\\" the AST to make it simpler to execute.\\njl_toplevel_eval_flex() then uses some simple heuristics to decide whether to JIT compiler the  AST or to interpret it directly.\\nThe bulk of the work to interpret code is handled by eval in interpreter.c.\\nIf instead, the code is compiled, the bulk of the work is handled by codegen.cpp. Whenever a  Julia function is called for the first time with a given set of argument types, type inference  will be run on that function. This information is used by the codegen step to generate  faster code.\\nEventually, the user quits the REPL, or the end of the program is reached, and the _start()  method returns.\\nJust before exiting, main() calls jl_atexit_hook(exit_code).  This calls Base._atexit() (which calls any functions registered to atexit() inside  Julia). Then it calls jl_gc_run_all_finalizers().  Finally, it gracefully cleans up all libuv handles and waits for them to flush and close.\"\n},\n\n{\n    \"location\": \"devdocs/eval.html#dev-parsing-1\",\n    \"page\": \"Eval of Julia code\",\n    \"title\": \"Parsing\",\n    \"category\": \"section\",\n    \"text\": \"The Julia parser is a small lisp program written in femtolisp, the source-code for which is distributed inside Julia in src/flisp.The interface functions for this are primarily defined in jlfrontend.scm. The code in ast.c handles this handoff on the Julia side.The other relevant files at this stage are julia-parser.scm, which handles tokenizing Julia code and turning it into an AST, and julia-syntax.scm, which handles transforming complex AST representations into simpler, \\\"lowered\\\" AST representations which are more suitable for analysis and execution.\"\n},\n\n{\n    \"location\": \"devdocs/eval.html#dev-macro-expansion-1\",\n    \"page\": \"Eval of Julia code\",\n    \"title\": \"Macro Expansion\",\n    \"category\": \"section\",\n    \"text\": \"When eval() encounters a macro, it expands that AST node before attempting to evaluate the expression. Macro expansion involves a handoff from eval() (in Julia), to the parser function jl_macroexpand() (written in flisp) to the Julia macro itself (written in - what else - Julia) via fl_invoke_julia_macro(), and back.Typically, macro expansion is invoked as a first step during a call to expand()/jl_expand(), although it can also be invoked directly by a call to macroexpand()/jl_macroexpand().\"\n},\n\n{\n    \"location\": \"devdocs/eval.html#dev-type-inference-1\",\n    \"page\": \"Eval of Julia code\",\n    \"title\": \"Type Inference\",\n    \"category\": \"section\",\n    \"text\": \"Type inference is implemented in Julia by typeinf() in inference.jl. Type inference is the process of examining a Julia function and determining bounds for the types of each of its variables, as well as bounds on the type of the return value from the function. This enables many future optimizations, such as unboxing of known immutable values, and compile-time hoisting of various run-time operations such as computing field offsets and function pointers. Type inference may also include other steps such as constant propagation and inlining.sidebar: More Definitions\\nJIT\\nJust-In-Time Compilation The process of generating native-machine code into memory right when it is needed.\\nLLVM\\nLow-Level Virtual Machine (a compiler) The Julia JIT compiler is a program/library called libLLVM. Codegen in Julia refers both to the process of taking a Julia AST and turning it into LLVM instructions, and the process of LLVM optimizing that and turning it into native assembly instructions.\\nC++\\nThe programming language that LLVM is implemented in, which means that codegen is also implemented in this language. The rest of Julia's library is implemented in C, in part because its smaller feature set makes it more usable as a cross-language interface layer.\\nbox\\nThis term is used to describe the process of taking a value and allocating a wrapper around the data that is tracked by the garbage collector (gc) and is tagged with the object's type.\\nunbox\\nThe reverse of boxing a value. This operation enables more efficient manipulation of data when the type of that data is fully known at compile-time (through type inference).\\ngeneric function\\nA Julia function composed of multiple \\\"methods\\\" that are selected for dynamic dispatch based on the argument type-signature\\nanonymous function or \\\"method\\\"\\nA Julia function without a name and without type-dispatch capabilities\\nprimitive function\\nA function implemented in C but exposed in Julia as a named function \\\"method\\\" (albeit without generic function dispatch capabilities, similar to a anonymous function)\\nintrinsic function\\nA low-level operation exposed as a function in Julia. These pseudo-functions implement operations on raw bits such as add and sign extend that cannot be expressed directly in any other way. Since they operate on bits directly, they must be compiled into a function and surrounded by a call to Core.Intrinsics.box(T, ...) to reassign type information to the value.\"\n},\n\n{\n    \"location\": \"devdocs/eval.html#dev-codegen-1\",\n    \"page\": \"Eval of Julia code\",\n    \"title\": \"JIT Code Generation\",\n    \"category\": \"section\",\n    \"text\": \"Codegen is the process of turning a Julia AST into native machine code.The JIT environment is initialized by an early call to jl_init_codegen in codegen.cpp.On demand, a Julia method is converted into a native function by the function emit_function(jl_method_instance_t*). (note, when using the MCJIT (in LLVM v3.4+), each function must be JIT into a new module.) This function recursively calls emit_expr() until the entire function has been emitted.Much of the remaining bulk of this file is devoted to various manual optimizations of specific code patterns. For example, emit_known_call() knows how to inline many of the primitive functions (defined in builtins.c) for various combinations of argument types.Other parts of codegen are handled by various helper files:debuginfo.cpp\\nHandles backtraces for JIT functions\\nccall.cpp\\nHandles the ccall and llvmcall FFI, along with various abi_*.cpp files\\nintrinsics.cpp\\nHandles the emission of various low-level intrinsic functionssidebar: Bootstrapping\\nThe process of creating a new system image is called \\\"bootstrapping\\\".The etymology of this word comes from the phrase \\\"pulling oneself up by the bootstraps\\\", and refers to the idea of starting from a very limited set of available functions and definitions and ending with the creation of a full-featured environment.\"\n},\n\n{\n    \"location\": \"devdocs/eval.html#dev-sysimg-1\",\n    \"page\": \"Eval of Julia code\",\n    \"title\": \"System Image\",\n    \"category\": \"section\",\n    \"text\": \"The system image is a precompiled archive of a set of Julia files. The sys.ji file distributed with Julia is one such system image, generated by executing the file sysimg.jl, and serializing the resulting environment (including Types, Functions, Modules, and all other defined values) into a file. Therefore, it contains a frozen version of the Main, Core, and Base modules (and whatever else was in the environment at the end of bootstrapping). This serializer/deserializer is implemented by jl_save_system_image/jl_restore_system_image in dump.c.If there is no sysimg file (jl_options.image_file == NULL), this also implies that --build was given on the command line, so the final result should be a new sysimg file. During Julia initialization, minimal Core and Main modules are created. Then a file named boot.jl is evaluated from the current directory. Julia then evaluates any file given as a command line argument until it reaches the end. Finally, it saves the resulting environment to a \\\"sysimg\\\" file for use as a starting point for a future Julia run.\"\n},\n\n{\n    \"location\": \"devdocs/callconv.html#\",\n    \"page\": \"Calling Conventions\",\n    \"title\": \"Calling Conventions\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/callconv.html#Calling-Conventions-1\",\n    \"page\": \"Calling Conventions\",\n    \"title\": \"Calling Conventions\",\n    \"category\": \"section\",\n    \"text\": \"Julia uses three calling conventions for four distinct purposes:Name Prefix Purpose\\nNative julia_ Speed via specialized signatures\\nJL Call jlcall_ Wrapper for generic calls\\nJL Call jl_ Builtins\\nC ABI jlcapi_ Wrapper callable from C\"\n},\n\n{\n    \"location\": \"devdocs/callconv.html#Julia-Native-Calling-Convention-1\",\n    \"page\": \"Calling Conventions\",\n    \"title\": \"Julia Native Calling Convention\",\n    \"category\": \"section\",\n    \"text\": \"The native calling convention is designed for fast non-generic calls. It usually uses a specialized signature.LLVM ghosts (zero-length types) are omitted.\\nLLVM scalars and vectors are passed by value.\\nLLVM aggregates (arrays and structs) are passed by reference.A small return values is returned as LLVM return values. A large return values is returned via the \\\"structure return\\\" (sret) convention, where the caller provides a pointer to a return slot.An argument or return values thta is a homogeneous tuple is sometimes represented as an LLVM vector instead of an LLVM array.\"\n},\n\n{\n    \"location\": \"devdocs/callconv.html#JL-Call-Convention-1\",\n    \"page\": \"Calling Conventions\",\n    \"title\": \"JL Call Convention\",\n    \"category\": \"section\",\n    \"text\": \"The JL Call convention is for builtins and generic dispatch. Hand-written functions using this convention are declared via the macro JL_CALLABLE. The convention uses exactly 3 parameters:F  - Julia representation of function that is being applied\\nargs - pointer to array of pointers to boxes\\nnargs - length of the arrayThe return value is a pointer to a box.\"\n},\n\n{\n    \"location\": \"devdocs/callconv.html#C-ABI-1\",\n    \"page\": \"Calling Conventions\",\n    \"title\": \"C ABI\",\n    \"category\": \"section\",\n    \"text\": \"C ABI wrappers enable calling Julia from C. The wrapper calls a function using the native calling convention.Tuples are always represented as C arrays.\"\n},\n\n{\n    \"location\": \"devdocs/compiler.html#\",\n    \"page\": \"High-level Overview of the Native-Code Generation Process\",\n    \"title\": \"High-level Overview of the Native-Code Generation Process\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/compiler.html#High-level-Overview-of-the-Native-Code-Generation-Process-1\",\n    \"page\": \"High-level Overview of the Native-Code Generation Process\",\n    \"title\": \"High-level Overview of the Native-Code Generation Process\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/compiler.html#Representation-of-Pointers-1\",\n    \"page\": \"High-level Overview of the Native-Code Generation Process\",\n    \"title\": \"Representation of Pointers\",\n    \"category\": \"section\",\n    \"text\": \"When emitting code to an object file, pointers will be emitted as relocations. The deserialization code will ensure any object that pointed to one of these constants gets recreated and contains the right runtime pointer.Otherwise, they will be emitted as literal constants.To emit one of these objects, call literal_pointer_val. It'll handle tracking the Julia value and the LLVM global, ensuring they are valid both for the current runtime and after deserialization.When emitted into the object file, these globals are stored as references in a large gvals table. This allows the deserializer to reference them by index, and implement a custom manual mechanism similar to a Global Offset Table (GOT) to restore them.Function pointers are handled similarly. They are stored as values in a large fvals table. Like globals, this allows the deserializer to reference them by index.Note that extern functions are handled separately, with names, via the usual symbol resolution mechanism in the linker.Note too that ccall functions are also handled separately, via a manual GOT and Procedure Linkage Table (PLT).\"\n},\n\n{\n    \"location\": \"devdocs/compiler.html#Representation-of-Intermediate-Values-1\",\n    \"page\": \"High-level Overview of the Native-Code Generation Process\",\n    \"title\": \"Representation of Intermediate Values\",\n    \"category\": \"section\",\n    \"text\": \"Values are passed around in a jl_cgval_t struct. This represents an R-value, and includes enough information to determine how to assign or pass it somewhere.They are created via one of the helper constructors, usually: mark_julia_type (for immediate values) and mark_julia_slot (for pointers to values).The function convert_julia_type can transform between any two types. It returns an R-value with cgval.typ set to typ. It'll cast the object to the requested representation, making heap boxes, allocating stack copies, and computing tagged unions as needed to change the representation.By contrast update_julia_type will change cgval.typ to typ, only if it can be done at zero-cost (i.e. without emitting any code).\"\n},\n\n{\n    \"location\": \"devdocs/compiler.html#Union-representation-1\",\n    \"page\": \"High-level Overview of the Native-Code Generation Process\",\n    \"title\": \"Union representation\",\n    \"category\": \"section\",\n    \"text\": \"Inferred union types may be stack allocated via a tagged type representation.The primitive routines that need to be able to handle tagged unions are:mark-type\\nload-local\\nstore-local\\nisa\\nis\\nemit_typeof\\nemit_sizeof\\nboxed\\nunbox\\nspecialized cc-retEverything else should be possible to handle in inference by using these primitives to implement union-splitting.The representation of the tagged-union is as a pair of < void* union, byte selector >. The selector is fixed-size as byte & 0x7f, and will union-tag the first 126 isbits. It records the one-based depth-first count into the type-union of the isbits objects inside. An index of zero indicates that the union* is actually a tagged heap-allocated jl_value_t*, and needs to be treated as normal for a boxed object rather than as a tagged union.The high bit of the selector (byte & 0x80) can be tested to determine if the void* is actually a heap-allocated (jl_value_t*) box, thus avoiding the cost of re-allocating a box, while maintaining the ability to efficiently handle union-splitting based on the low bits.It is guaranteed that byte & 0x7f is an exact test for the type, if the value can be represented by a tag \u2013 it will never be marked byte = 0x80. It is not necessary to also test the type-tag when testing isa.The union* memory region may be allocated at any size. The only constraint is that it is big enough to contain the data currently specified by selector. It might not be big enough to contain the union of all types that could be stored there according to the associated Union type field. Use appropriate care when copying.\"\n},\n\n{\n    \"location\": \"devdocs/compiler.html#Specialized-Calling-Convention-Signature-Representation-1\",\n    \"page\": \"High-level Overview of the Native-Code Generation Process\",\n    \"title\": \"Specialized Calling Convention Signature Representation\",\n    \"category\": \"section\",\n    \"text\": \"A jl_returninfo_t object describes the calling convention details of any callable.If any of the arguments or return type of a method can be represented unboxed, and the method is not varargs, it'll be given an optimized calling convention signature based on its specTypes and rettype fields.The general principles are that:Primitive types get passed in int/float registers.\\nTuples of VecElement types get passed in vector registers.\\nStructs get passed on the stack.\\nReturn values are handle similarly to arguments, with a size-cutoff at which they will instead be returned via a hidden sret argument.The total logic for this is implemented by get_specsig_function and deserves_sret.Additionally, if the return type is a union, it may be returned as a pair of values (a pointer and a tag). If the union values can be stack-allocated, then sufficient space to store them will also be passed as a hidden first argument. It is up to the callee whether the returned pointer will point to this space, a boxed object, or even other constant memory.\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Julia Functions\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Julia-Functions-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Julia Functions\",\n    \"category\": \"section\",\n    \"text\": \"This document will explain how functions, method definitions, and method tables work.\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Method-Tables-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Method Tables\",\n    \"category\": \"section\",\n    \"text\": \"Every function in Julia is a generic function. A generic function is conceptually a single function, but consists of many definitions, or methods. The methods of a generic function are stored in a method table. Method tables (type MethodTable) are associated with TypeNames. A TypeName describes a family of parameterized types. For example Complex{Float32} and Complex{Float64} share the same Complex type name object.All objects in Julia are potentially callable, because every object has a type, which in turn has a TypeName.\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Function-calls-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Function calls\",\n    \"category\": \"section\",\n    \"text\": \"Given the call f(x,y), the following steps are performed: first, the method table to use is accessed as typeof(f).name.mt. Second, an argument tuple type is formed, Tuple{typeof(f), typeof(x), typeof(y)}. Note that the type of the function itself is the first element. This is because the type might have parameters, and so needs to take part in dispatch. This tuple type is looked up in the method table.This dispatch process is performed by jl_apply_generic, which takes two arguments: a pointer to an array of the values f, x, and y, and the number of values (in this case 3).Throughout the system, there are two kinds of APIs that handle functions and argument lists: those that accept the function and arguments separately, and those that accept a single argument structure. In the first kind of API, the \\\"arguments\\\" part does not contain information about the function, since that is passed separately. In the second kind of API, the function is the first element of the argument structure.For example, the following function for performing a call accepts just an args pointer, so the first element of the args array will be the function to call:jl_value_t *jl_apply(jl_value_t **args, uint32_t nargs)This entry point for the same functionality accepts the function separately, so the args array does not contain the function:jl_value_t *jl_call(jl_function_t *f, jl_value_t **args, int32_t nargs);\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Adding-methods-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Adding methods\",\n    \"category\": \"section\",\n    \"text\": \"Given the above dispatch process, conceptually all that is needed to add a new method is (1) a tuple type, and (2) code for the body of the method. jl_method_def implements this operation. jl_first_argument_datatype is called to extract the relevant method table from what would be the type of the first argument. This is much more complicated than the corresponding procedure during dispatch, since the argument tuple type might be abstract. For example, we can define:(::Union{Foo{Int},Foo{Int8}})(x) = 0which works since all possible matching methods would belong to the same method table.\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Creating-generic-functions-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Creating generic functions\",\n    \"category\": \"section\",\n    \"text\": \"Since every object is callable, nothing special is needed to create a generic function. Therefore jl_new_generic_function simply creates a new singleton (0 size) subtype of Function and returns its instance. A function can have a mnemonic \\\"display name\\\" which is used in debug info and when printing objects. For example the name of Base.sin is sin. By convention, the name of the created type is the same as the function name, with a # prepended. So typeof(sin) is Base.#sin.\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Closures-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Closures\",\n    \"category\": \"section\",\n    \"text\": \"A closure is simply a callable object with field names corresponding to captured variables. For example, the following code:function adder(x)\\n    return y->x+y\\nendis lowered to (roughly):struct ##1{T}\\n    x::T\\nend\\n\\n(_::##1)(y) = _.x + y\\n\\nfunction adder(x)\\n    return ##1(x)\\nend\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Constructors-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Constructors\",\n    \"category\": \"section\",\n    \"text\": \"A constructor call is just a call to a type. The type of most types is DataType, so the method table for DataType contains most constructor definitions. One wrinkle is the fallback definition that makes all types callable via convert:(::Type{T}){T}(args...) = convert(T, args...)::TIn this definition the function type is abstract, which is not normally supported. To make this work, all subtypes of Type (Type, UnionAll, Union, and DataType) currently share a method table via special arrangement.\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Builtins-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Builtins\",\n    \"category\": \"section\",\n    \"text\": \"The \\\"builtin\\\" functions, defined in the Core module, are:=== typeof sizeof issubtype isa typeassert throw tuple getfield setfield! fieldtype\\nnfields isdefined arrayref arrayset arraysize applicable invoke apply_type _apply\\n_expr svecThese are all singleton objects whose types are subtypes of Builtin, which is a subtype of Function. Their purpose is to expose entry points in the run time that use the \\\"jlcall\\\" calling convention:jl_value_t *(jl_value_t*, jl_value_t**, uint32_t)The method tables of builtins are empty. Instead, they have a single catch-all method cache entry (Tuple{Vararg{Any}}) whose jlcall fptr points to the correct function. This is kind of a hack but works reasonably well.\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Keyword-arguments-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Keyword arguments\",\n    \"category\": \"section\",\n    \"text\": \"Keyword arguments work by associating a special, hidden function object with each method table that has definitions with keyword arguments. This function is called the \\\"keyword argument sorter\\\" or \\\"keyword sorter\\\", or \\\"kwsorter\\\", and is stored in the kwsorter field of MethodTable objects. Every definition in the kwsorter function has the same arguments as some definition in the normal method table, except with a single Array argument prepended. This array contains alternating symbols and values that represent the passed keyword arguments. The kwsorter's job is to move keyword arguments into their canonical positions based on name, plus evaluate and substite any needed default value expressions. The result is a normal positional argument list, which is then passed to yet another function.The easiest way to understand the process is to look at how a keyword argument method definition is lowered. The code:function circle(center, radius; color = black, fill::Bool = true, options...)\\n    # draw\\nendactually produces three method definitions. The first is a function that accepts all arguments (including keywords) as positional arguments, and includes the code for the method body. It has an auto-generated name:function #circle#1(color, fill::Bool, options, circle, center, radius)\\n    # draw\\nendThe second method is an ordinary definition for the original circle function, which handles the case where no keyword arguments are passed:function circle(center, radius)\\n    #circle#1(black, true, Any[], circle, center, radius)\\nendThis simply dispatches to the first method, passing along default values. Finally there is the kwsorter definition:function (::Core.kwftype(typeof(circle)))(kw::Array, circle, center, radius)\\n    options = Any[]\\n    color = arg associated with :color, or black if not found\\n    fill = arg associated with :fill, or true if not found\\n    # push remaining elements of kw into options array\\n    #circle#1(color, fill, options, circle, center, radius)\\nendThe front end generates code to loop over the kw array and pick out arguments in the right order, evaluating default expressions when an argument is not found.The function Core.kwftype(t) fetches (and creates, if necessary) the field t.name.mt.kwsorter.This design has the feature that call sites that don't use keyword arguments require no special handling; everything works as if they were not part of the language at all. Call sites that do use keyword arguments are dispatched directly to the called function's kwsorter. For example the call:circle((0,0), 1.0, color = red; other...)is lowered to:kwfunc(circle)(Any[:color,red,other...], circle, (0,0), 1.0)The unpacking procedure represented here as other... actually further unpacks each element of other, expecting each one to contain two values (a symbol and a value). kwfunc (also in Core) fetches the kwsorter for the called function. Notice that the original circle function is passed through, to handle closures.\"\n},\n\n{\n    \"location\": \"devdocs/functions.html#Compiler-efficiency-issues-1\",\n    \"page\": \"Julia Functions\",\n    \"title\": \"Compiler efficiency issues\",\n    \"category\": \"section\",\n    \"text\": \"Generating a new type for every function has potentially serious consequences for compiler resource use when combined with Julia's \\\"specialize on all arguments by default\\\" design. Indeed, the initial implementation of this design suffered from much longer build and test times, higher memory use, and a system image nearly 2x larger than the baseline. In a naive implementation, the problem is bad enough to make the system nearly unusable. Several significant optimizations were needed to make the design practical.The first issue is excessive specialization of functions for different values of function-valued arguments. Many functions simply \\\"pass through\\\" an argument to somewhere else, e.g. to another function or to a storage location. Such functions do not need to be specialized for every closure that might be passed in. Fortunately this case is easy to distinguish by simply considering whether a function calls one of its arguments (i.e. the argument appears in \\\"head position\\\" somewhere). Performance-critical higher-order functions like map certainly call their argument function and so will still be specialized as expected. This optimization is implemented by recording which arguments are called during the analyze-variables pass in the front end. When cache_method sees an argument in the Function type hierarchy passed to a slot declared as Any or Function, it pretends the slot was declared as ANY (the \\\"don't specialize\\\" hint). This heuristic seems to be extremely effective in practice.The next issue concerns the structure of method cache hash tables. Empirical studies show that the vast majority of dynamically-dispatched calls involve one or two arguments. In turn, many of these cases can be resolved by considering only the first argument. (Aside: proponents of single dispatch would not be surprised by this at all. However, this argument means \\\"multiple dispatch is easy to optimize in practice\\\", and that we should therefore use it, not \\\"we should use single dispatch\\\"!) So the method cache uses the type of the first argument as its primary key. Note, however, that this corresponds to the second element of the tuple type for a function call (the first element being the type of the function itself). Typically, type variation in head position is extremely low \u2013 indeed, the majority of functions belong to singleton types with no parameters. However, this is not the case for constructors, where a single method table holds constructors for every type. Therefore the Type method table is special-cased to use the first tuple type element instead of the second.The front end generates type declarations for all closures. Initially, this was implemented by generating normal type declarations. However, this produced an extremely large number of constructors, all of which were trivial (simply passing all arguments through to new). Since methods are partially ordered, inserting all of these methods is O(n^2), plus there are just too many of them to keep around. This was optimized by generating composite_type expressions directly (bypassing default constructor generation), and using new directly to create closure instances. Not the prettiest thing ever, but you do what you gotta do.The next problem was the @test macro, which generated a 0-argument closure for each test case. This is not really necessary, since each test case is simply run once in place. Therefore I modified @test to expand to a try-catch block that records the test result (true, false, or exception raised) and calls the test suite handler on it.However this caused a new problem. When many tests are grouped together in a single function, e.g. a single top level expression, or some other test grouping function, that function could have a very large number of exception handlers. This triggered a kind of dataflow analysis worst case, where type inference spun around for minutes enumerating possible paths through the forest of handlers. This was fixed by simply bailing out of type inference when it encounters more than some number of handlers (currently 25). Presumably no performance-critical function will have more than 25 exception handlers. If one ever does, I'm willing to raise the limit to 26.A minor issue occurs during the bootstrap process due to storing all constructors in a single method table. In the second bootstrap step, where inference.ji is compiled using inference0.ji, constructors for inference0's types remain in the table, so there are still references to the old inference module and inference.ji is 2x the size it should be. This was fixed in dump.c by filtering definitions from \\\"replaced modules\\\" out of method tables and caches before saving a system image. A \\\"replaced module\\\" is one that satisfies the condition m != jl_get_global(m->parent, m->name) \u2013 in other words, some newer module has taken its name and place.Another type inference worst case was triggered by the following code from the QuadGK.jl package, formerly part of Base:function do_quadgk(f, s, n, ::Type{Tw}, abstol, reltol, maxevals, nrm) where Tw\\n    if eltype(s) <: Real # check for infinite or semi-infinite intervals\\n        s1 = s[1]; s2 = s[end]; inf1 = isinf(s1); inf2 = isinf(s2)\\n        if inf1 || inf2\\n            if inf1 && inf2 # x = t/(1-t^2) coordinate transformation\\n                return do_quadgk(t -> begin t2 = t*t; den = 1 / (1 - t2);\\n                                            f(t*den) * (1+t2)*den*den; end,\\n                                 map(x -> isinf(x) ? copysign(one(x), x) : 2x / (1+hypot(1,2x)), s),\\n                                 n, Tw, abstol, reltol, maxevals, nrm)\\n            end\\n            s0,si = inf1 ? (s2,s1) : (s1,s2)\\n            if si < 0 # x = s0 - t/(1-t)\\n                return do_quadgk(t -> begin den = 1 / (1 - t);\\n                                            f(s0 - t*den) * den*den; end,\\n                                 reverse!(map(x -> 1 / (1 + 1 / (s0 - x)), s)),\\n                                 n, Tw, abstol, reltol, maxevals, nrm)\\n            else # x = s0 + t/(1-t)\\n                return do_quadgk(t -> begin den = 1 / (1 - t);\\n                                            f(s0 + t*den) * den*den; end,\\n                                 map(x -> 1 / (1 + 1 / (x - s0)), s),\\n                                 n, Tw, abstol, reltol, maxevals, nrm)\\n            end\\n        end\\n    endThis code has a 3-way tail recursion, where each call wraps the current function argument f in a different new closure. Inference must consider 3^n (where n is the call depth) possible signatures. This blows up way too quickly, so logic was added to typeinf_uncached to immediately widen any argument that is a subtype of Function and that grows in depth down the stack.\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian-1\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian\",\n    \"category\": \"section\",\n    \"text\": \"The (non-exported) Cartesian module provides macros that facilitate writing multidimensional algorithms. It is hoped that Cartesian will not, in the long term, be necessary; however, at present it is one of the few ways to write compact and performant multidimensional code.\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Principles-of-usage-1\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Principles of usage\",\n    \"category\": \"section\",\n    \"text\": \"A simple example of usage is:@nloops 3 i A begin\\n    s += @nref 3 A i\\nendwhich generates the following code:for i_3 = 1:size(A,3)\\n    for i_2 = 1:size(A,2)\\n        for i_1 = 1:size(A,1)\\n            s += A[i_1,i_2,i_3]\\n        end\\n    end\\nendIn general, Cartesian allows you to write generic code that contains repetitive elements, like the nested loops in this example.  Other applications include repeated expressions (e.g., loop unwinding) or creating function calls with variable numbers of arguments without using the \\\"splat\\\" construct (i...).\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Basic-syntax-1\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Basic syntax\",\n    \"category\": \"section\",\n    \"text\": \"The (basic) syntax of @nloops is as follows:The first argument must be an integer (not a variable) specifying the number of loops.\\nThe second argument is the symbol-prefix used for the iterator variable. Here we used i, and variables i_1, i_2, i_3 were generated.\\nThe third argument specifies the range for each iterator variable. If you use a variable (symbol) here, it's taken as 1:size(A,dim). More flexibly, you can use the anonymous-function expression syntax described below.\\nThe last argument is the body of the loop. Here, that's what appears between the begin...end.There are some additional features of @nloops described in the reference section.@nref follows a similar pattern, generating A[i_1,i_2,i_3] from @nref 3 A i. The general practice is to read from left to right, which is why @nloops is @nloops 3 i A expr (as in for i_2 = 1:size(A,2), where i_2 is to the left and the range is to the right) whereas @nref is @nref 3 A i (as in A[i_1,i_2,i_3], where the array comes first).If you're developing code with Cartesian, you may find that debugging is easier when you examine the generated code, using macroexpand:DocTestSetup = quote\\n    import Base.Cartesian: @nref\\nendjulia> macroexpand(:(@nref 2 A i))\\n:(A[i_1, i_2])DocTestSetup = nothing\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Supplying-the-number-of-expressions-1\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Supplying the number of expressions\",\n    \"category\": \"section\",\n    \"text\": \"The first argument to both of these macros is the number of expressions, which must be an integer. When you're writing a function that you intend to work in multiple dimensions, this may not be something you want to hard-code. If you're writing code that you need to work with older Julia versions, currently you should use the @ngenerate macro described in an older version of this documentation.Starting in Julia 0.4-pre, the recommended approach is to use a @generated function.  Here's an example:@generated function mysum(A::Array{T,N}) where {T,N}\\n    quote\\n        s = zero(T)\\n        @nloops $N i A begin\\n            s += @nref $N A i\\n        end\\n        s\\n    end\\nendNaturally, you can also prepare expressions or perform calculations before the quote block.\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Anonymous-function-expressions-as-macro-arguments-1\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Anonymous-function expressions as macro arguments\",\n    \"category\": \"section\",\n    \"text\": \"Perhaps the single most powerful feature in Cartesian is the ability to supply anonymous-function expressions that get evaluated at parsing time.  Let's consider a simple example:@nexprs 2 j->(i_j = 1)@nexprs generates n expressions that follow a pattern. This code would generate the following statements:i_1 = 1\\ni_2 = 1In each generated statement, an \\\"isolated\\\" j (the variable of the anonymous function) gets replaced by values in the range 1:2. Generally speaking, Cartesian employs a LaTeX-like syntax.  This allows you to do math on the index j.  Here's an example computing the strides of an array:s_1 = 1\\n@nexprs 3 j->(s_{j+1} = s_j * size(A, j))would generate expressionss_1 = 1\\ns_2 = s_1 * size(A, 1)\\ns_3 = s_2 * size(A, 2)\\ns_4 = s_3 * size(A, 3)Anonymous-function expressions have many uses in practice.\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian.@nloops\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian.@nloops\",\n    \"category\": \"Macro\",\n    \"text\": \"@nloops N itersym rangeexpr bodyexpr\\n@nloops N itersym rangeexpr preexpr bodyexpr\\n@nloops N itersym rangeexpr preexpr postexpr bodyexpr\\n\\nGenerate N nested loops, using itersym as the prefix for the iteration variables. rangeexpr may be an anonymous-function expression, or a simple symbol var in which case the range is indices(var, d) for dimension d.\\n\\nOptionally, you can provide \\\"pre\\\" and \\\"post\\\" expressions. These get executed first and last, respectively, in the body of each loop. For example:\\n\\n@nloops 2 i A d -> j_d = min(i_d, 5) begin\\n    s += @nref 2 A j\\nend\\n\\nwould generate:\\n\\nfor i_2 = indices(A, 2)\\n    j_2 = min(i_2, 5)\\n    for i_1 = indices(A, 1)\\n        j_1 = min(i_1, 5)\\n        s += A[j_1, j_2]\\n    end\\nend\\n\\nIf you want just a post-expression, supply nothing for the pre-expression. Using parentheses and semicolons, you can supply multi-statement expressions.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian.@nref\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian.@nref\",\n    \"category\": \"Macro\",\n    \"text\": \"@nref N A indexexpr\\n\\nGenerate expressions like A[i_1, i_2, ...]. indexexpr can either be an iteration-symbol prefix, or an anonymous-function expression.\\n\\njulia> @macroexpand Base.Cartesian.@nref 3 A i\\n:(A[i_1, i_2, i_3])\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian.@nextract\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian.@nextract\",\n    \"category\": \"Macro\",\n    \"text\": \"@nextract N esym isym\\n\\nGenerate N variables esym_1, esym_2, ..., esym_N to extract values from isym. isym can be either a Symbol or anonymous-function expression.\\n\\n@nextract 2 x y would generate\\n\\nx_1 = y[1]\\nx_2 = y[2]\\n\\nwhile @nextract 3 x d->y[2d-1] yields\\n\\nx_1 = y[1]\\nx_2 = y[3]\\nx_3 = y[5]\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian.@nexprs\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian.@nexprs\",\n    \"category\": \"Macro\",\n    \"text\": \"@nexprs N expr\\n\\nGenerate N expressions. expr should be an anonymous-function expression.\\n\\njulia> @macroexpand Base.Cartesian.@nexprs 4 i -> y[i] = A[i+j]\\nquote\\n    y[1] = A[1 + j]\\n    y[2] = A[2 + j]\\n    y[3] = A[3 + j]\\n    y[4] = A[4 + j]\\nend\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian.@ncall\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian.@ncall\",\n    \"category\": \"Macro\",\n    \"text\": \"@ncall N f sym...\\n\\nGenerate a function call expression. sym represents any number of function arguments, the last of which may be an anonymous-function expression and is expanded into N arguments.\\n\\nFor example @ncall 3 func a generates\\n\\nfunc(a_1, a_2, a_3)\\n\\nwhile @ncall 2 func a b i->c[i] yields\\n\\nfunc(a, b, c[1], c[2])\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian.@ntuple\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian.@ntuple\",\n    \"category\": \"Macro\",\n    \"text\": \"@ntuple N expr\\n\\nGenerates an N-tuple. @ntuple 2 i would generate (i_1, i_2), and @ntuple 2 k->k+1 would generate (2,3).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian.@nall\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian.@nall\",\n    \"category\": \"Macro\",\n    \"text\": \"@nall N expr\\n\\nCheck whether all of the expressions generated by the anonymous-function expression expr evaluate to true.\\n\\n@nall 3 d->(i_d > 1) would generate the expression (i_1 > 1 && i_2 > 1 && i_3 > 1). This can be convenient for bounds-checking.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian.@nany\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian.@nany\",\n    \"category\": \"Macro\",\n    \"text\": \"@nany N expr\\n\\nCheck whether any of the expressions generated by the anonymous-function expression expr evaluate to true.\\n\\n@nany 3 d->(i_d > 1) would generate the expression (i_1 > 1 || i_2 > 1 || i_3 > 1).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#Base.Cartesian.@nif\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Base.Cartesian.@nif\",\n    \"category\": \"Macro\",\n    \"text\": \"@nif N conditionexpr expr\\n@nif N conditionexpr expr elseexpr\\n\\nGenerates a sequence of if ... elseif ... else ... end statements. For example:\\n\\n@nif 3 d->(i_d >= size(A,d)) d->(error(\\\"Dimension \\\", d, \\\" too big\\\")) d->println(\\\"All OK\\\")\\n\\nwould generate:\\n\\nif i_1 > size(A, 1)\\n    error(\\\"Dimension \\\", 1, \\\" too big\\\")\\nelseif i_2 > size(A, 2)\\n    error(\\\"Dimension \\\", 2, \\\" too big\\\")\\nelse\\n    println(\\\"All OK\\\")\\nend\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/cartesian.html#dev-cartesian-reference-1\",\n    \"page\": \"Base.Cartesian\",\n    \"title\": \"Macro reference\",\n    \"category\": \"section\",\n    \"text\": \"Base.Cartesian.@nloops\\nBase.Cartesian.@nref\\nBase.Cartesian.@nextract\\nBase.Cartesian.@nexprs\\nBase.Cartesian.@ncall\\nBase.Cartesian.@ntuple\\nBase.Cartesian.@nall\\nBase.Cartesian.@nany\\nBase.Cartesian.@nif\"\n},\n\n{\n    \"location\": \"devdocs/meta.html#\",\n    \"page\": \"Talking to the compiler (the :meta mechanism)\",\n    \"title\": \"Talking to the compiler (the :meta mechanism)\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/meta.html#Talking-to-the-compiler-(the-:meta-mechanism)-1\",\n    \"page\": \"Talking to the compiler (the :meta mechanism)\",\n    \"title\": \"Talking to the compiler (the :meta mechanism)\",\n    \"category\": \"section\",\n    \"text\": \"In some circumstances, one might wish to provide hints or instructions that a given block of code has special properties: you might always want to inline it, or you might want to turn on special compiler optimization passes.  Starting with version 0.4, Julia has a convention that these instructions can be placed inside a :meta expression, which is typically (but not necessarily) the first expression in the body of a function.:meta expressions are created with macros. As an example, consider the implementation of the @inline macro:macro inline(ex)\\n    esc(isa(ex, Expr) ? pushmeta!(ex, :inline) : ex)\\nendHere, ex is expected to be an expression defining a function. A statement like this:@inline function myfunction(x)\\n    x*(x+3)\\nendgets turned into an expression like this:quote\\n    function myfunction(x)\\n        Expr(:meta, :inline)\\n        x*(x+3)\\n    end\\nendBase.pushmeta!(ex, :symbol, args...) appends :symbol to the end of the :meta expression, creating a new :meta expression if necessary. If args is specified, a nested expression containing :symbol and these arguments is appended instead, which can be used to specify additional information.To use the metadata, you have to parse these :meta expressions. If your implementation can be performed within Julia, Base.popmeta! is very handy: Base.popmeta!(body, :symbol) will scan a function body expression (one without the function signature) for the first :meta expression containing :symbol, extract any arguments, and return a tuple (found::Bool, args::Array{Any}). If the metadata did not have any arguments, or :symbol was not found, the args array will be empty.Not yet provided is a convenient infrastructure for parsing :meta expressions from C++.\"\n},\n\n{\n    \"location\": \"devdocs/subarrays.html#\",\n    \"page\": \"SubArrays\",\n    \"title\": \"SubArrays\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/subarrays.html#SubArrays-1\",\n    \"page\": \"SubArrays\",\n    \"title\": \"SubArrays\",\n    \"category\": \"section\",\n    \"text\": \"Julia's SubArray type is a container encoding a \\\"view\\\" of a parent AbstractArray.  This page documents some of the design principles and implementation of SubArrays.\"\n},\n\n{\n    \"location\": \"devdocs/subarrays.html#Indexing:-cartesian-vs.-linear-indexing-1\",\n    \"page\": \"SubArrays\",\n    \"title\": \"Indexing: cartesian vs. linear indexing\",\n    \"category\": \"section\",\n    \"text\": \"Broadly speaking, there are two main ways to access data in an array. The first, often called cartesian indexing, uses N indexes for an N -dimensional AbstractArray.  For example, a matrix A (2-dimensional) can be indexed in cartesian style as A[i,j].  The second indexing method, referred to as linear indexing, uses a single index even for higher-dimensional objects.  For example, if A = reshape(1:12, 3, 4), then the expression A[5] returns the value 5.  Julia allows you to combine these styles of indexing: for example, a 3d array A3 can be indexed as A3[i,j], in which case i is interpreted as a cartesian index for the first dimension, and j is a linear index over dimensions 2 and 3.For Arrays, linear indexing appeals to the underlying storage format: an array is laid out as a contiguous block of memory, and hence the linear index is just the offset (+1) of the corresponding entry relative to the beginning of the array.  However, this is not true for many other AbstractArray types: examples include SparseMatrixCSC, arrays that require some kind of computation (such as interpolation), and the type under discussion here, SubArray. For these types, the underlying information is more naturally described in terms of cartesian indexes.You can manually convert from a cartesian index to a linear index with sub2ind, and vice versa using ind2sub.  getindex and setindex! functions for AbstractArray types may include similar operations.While converting from a cartesian index to a linear index is fast (it's just multiplication and addition), converting from a linear index to a cartesian index is very slow: it relies on the div operation, which is one of the slowest low-level operations you can perform with a CPU.  For this reason, any code that deals with AbstractArray types is best designed in terms of cartesian, rather than linear, indexing.\"\n},\n\n{\n    \"location\": \"devdocs/subarrays.html#Index-replacement-1\",\n    \"page\": \"SubArrays\",\n    \"title\": \"Index replacement\",\n    \"category\": \"section\",\n    \"text\": \"Consider making 2d slices of a 3d array:S1 = view(A, :, 5, 2:6)\\nS2 = view(A, 5, :, 2:6)view drops \\\"singleton\\\" dimensions (ones that are specified by an Int), so both S1 and S2 are two-dimensional SubArrays. Consequently, the natural way to index these is with S1[i,j].  To extract the value from the parent array A, the natural approach is to replace S1[i,j] with A[i,5,(2:6)[j]] and S2[i,j] with A[5,i,(2:6)[j]].The key feature of the design of SubArrays is that this index replacement can be performed without any runtime overhead.\"\n},\n\n{\n    \"location\": \"devdocs/subarrays.html#SubArray-design-1\",\n    \"page\": \"SubArrays\",\n    \"title\": \"SubArray design\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/subarrays.html#Type-parameters-and-fields-1\",\n    \"page\": \"SubArrays\",\n    \"title\": \"Type parameters and fields\",\n    \"category\": \"section\",\n    \"text\": \"The strategy adopted is first and foremost expressed in the definition of the type:struct SubArray{T,N,P,I,L} <: AbstractArray{T,N}\\n    parent::P\\n    indexes::I\\n    offset1::Int       # for linear indexing and pointer, only valid when L==true\\n    stride1::Int       # used only for linear indexing\\n    ...\\nendSubArray has 5 type parameters.  The first two are the standard element type and dimensionality.  The next is the type of the parent AbstractArray.  The most heavily-used is the fourth parameter, a Tuple of the types of the indices for each dimension. The final one, L, is only provided as a convenience for dispatch; it's a boolean that represents whether the index types support fast linear indexing. More on that later.If in our example above A is a Array{Float64, 3}, our S1 case above would be a SubArray{Int64,2,Array{Int64,3},Tuple{Colon,Int64,UnitRange{Int64}},false}. Note in particular the tuple parameter, which stores the types of the indices used to create S1.  Likewise,julia> S1.indexes\\n(Colon(),5,2:6)Storing these values allows index replacement, and having the types encoded as parameters allows one to dispatch to efficient algorithms.\"\n},\n\n{\n    \"location\": \"devdocs/subarrays.html#Index-translation-1\",\n    \"page\": \"SubArrays\",\n    \"title\": \"Index translation\",\n    \"category\": \"section\",\n    \"text\": \"Performing index translation requires that you do different things for different concrete SubArray types.  For example, for S1, one needs to apply the i,j indices to the first and third dimensions of the parent array, whereas for S2 one needs to apply them to the second and third.  The simplest approach to indexing would be to do the type-analysis at runtime:parentindexes = Array{Any}(0)\\nfor thisindex in S.indexes\\n    ...\\n    if isa(thisindex, Int)\\n        # Don't consume one of the input indexes\\n        push!(parentindexes, thisindex)\\n    elseif isa(thisindex, AbstractVector)\\n        # Consume an input index\\n        push!(parentindexes, thisindex[inputindex[j]])\\n        j += 1\\n    elseif isa(thisindex, AbstractMatrix)\\n        # Consume two input indices\\n        push!(parentindexes, thisindex[inputindex[j], inputindex[j+1]])\\n        j += 2\\n    elseif ...\\nend\\nS.parent[parentindexes...]Unfortunately, this would be disastrous in terms of performance: each element access would allocate memory, and involves the running of a lot of poorly-typed code.The better approach is to dispatch to specific methods to handle each type of stored index. That's what reindex does: it dispatches on the type of the first stored index and consumes the appropriate number of input indices, and then it recurses on the remaining indices. In the case of S1, this expands toBase.reindex(S1, S1.indexes, (i, j)) == (i, S1.indexes[2], S1.indexes[3][j])for any pair of indices (i,j) (except CartesianIndexs and arrays thereof, see below).This is the core of a SubArray; indexing methods depend upon reindex to do this index translation. Sometimes, though, we can avoid the indirection and make it even faster.\"\n},\n\n{\n    \"location\": \"devdocs/subarrays.html#Linear-indexing-1\",\n    \"page\": \"SubArrays\",\n    \"title\": \"Linear indexing\",\n    \"category\": \"section\",\n    \"text\": \"Linear indexing can be implemented efficiently when the entire array has a single stride that separates successive elements, starting from some offset. This means that we can pre-compute these values and represent linear indexing simply as an addition and multiplication, avoiding the indirection of reindex and (more importantly) the slow computation of the cartesian coordinates entirely.For SubArray types, the availability of efficient linear indexing is based purely on the types of the indices, and does not depend on values like the size of the parent array. You can ask whether a given set of indices supports fast linear indexing with the internal Base.viewindexing function:julia> Base.viewindexing(S1.indexes)\\nIndexCartesian()\\n\\njulia> Base.viewindexing(S2.indexes)\\nIndexLinear()This is computed during construction of the SubArray and stored in the L type parameter as a boolean that encodes fast linear indexing support. While not strictly necessary, it means that we can define dispatch directly on SubArray{T,N,A,I,true} without any intermediaries.Since this computation doesn't depend on runtime values, it can miss some cases in which the stride happens to be uniform:julia> A = reshape(1:4*2, 4, 2)\\n4\u00d72 Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}:\\n 1  5\\n 2  6\\n 3  7\\n 4  8\\n\\njulia> diff(A[2:2:4,:][:])\\n3-element Array{Int64,1}:\\n 2\\n 2\\n 2A view constructed as view(A, 2:2:4, :) happens to have uniform stride, and therefore linear indexing indeed could be performed efficiently.  However, success in this case depends on the size of the array: if the first dimension instead were odd,julia> A = reshape(1:5*2, 5, 2)\\n5\u00d72 Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}:\\n 1   6\\n 2   7\\n 3   8\\n 4   9\\n 5  10\\n\\njulia> diff(A[2:2:4,:][:])\\n3-element Array{Int64,1}:\\n 2\\n 3\\n 2then A[2:2:4,:] does not have uniform stride, so we cannot guarantee efficient linear indexing.  Since we have to base this decision based purely on types encoded in the parameters of the SubArray, S = view(A, 2:2:4, :) cannot implement efficient linear indexing.\"\n},\n\n{\n    \"location\": \"devdocs/subarrays.html#A-few-details-1\",\n    \"page\": \"SubArrays\",\n    \"title\": \"A few details\",\n    \"category\": \"section\",\n    \"text\": \"Note that the Base.reindex function is agnostic to the types of the input indices; it simply determines how and where the stored indices should be reindexed. It not only supports integer indices, but it supports non-scalar indexing, too. This means that views of views don't need two levels of indirection; they can simply re-compute the indices into the original parent array!\\nHopefully by now it's fairly clear that supporting slices means that the dimensionality, given by the parameter N, is not necessarily equal to the dimensionality of the parent array or the length of the indexes tuple.  Neither do user-supplied indices necessarily line up with entries in the indexes tuple (e.g., the second user-supplied index might correspond to the third dimension of the parent array, and the third element in the indexes tuple).\\nWhat might be less obvious is that the dimensionality of the stored parent array must be equal to the number of effective indices in the indexes tuple. Some examples:\\nA = reshape(1:35, 5, 7) # A 2d parent Array\\nS = view(A, 2:7)         # A 1d view created by linear indexing\\nS = view(A, :, :, 1:1)   # Appending extra indices is supported\\nNaively, you'd think you could just set S.parent = A and S.indexes = (:,:,1:1), but supporting this dramatically complicates the reindexing process, especially for views of views. Not only do you need to dispatch on the types of the stored indices, but you need to examine whether a given index is the final one and \\\"merge\\\" any remaining stored indices together. This is not an easy task, and even worse: it's slow since it implicitly depends upon linear indexing.\\nFortunately, this is precisely the computation that ReshapedArray performs, and it does so linearly if possible. Consequently, view ensures that the parent array is the appropriate dimensionality for the given indices by reshaping it if needed. The inner SubArray constructor ensures that this invariant is satisfied.\\nCartesianIndex and arrays thereof throw a nasty wrench into the reindex scheme. Recall that reindex simply dispatches on the type of the stored indices in order to determine how many passed indices should be used and where they should go. But with CartesianIndex, there's no longer a one-to-one correspondence between the number of passed arguments and the number of dimensions that they index into. If we return to the above example of Base.reindex(S1, S1.indexes, (i, j)), you can see that the expansion is incorrect for i, j = CartesianIndex(), CartesianIndex(2,1). It should skip the CartesianIndex() entirely and return:\\n(CartesianIndex(2,1)[1], S1.indexes[2], S1.indexes[3][CartesianIndex(2,1)[2]])\\nInstead, though, we get:\\n(CartesianIndex(), S1.indexes[2], S1.indexes[3][CartesianIndex(2,1)])\\nDoing this correctly would require combined dispatch on both the stored and passed indices across all combinations of dimensionalities in an intractable manner. As such, reindex must never be called with CartesianIndex indices. Fortunately, the scalar case is easily handled by first flattening the CartesianIndex arguments to plain integers. Arrays of CartesianIndex, however, cannot be split apart into orthogonal pieces so easily. Before attempting to use reindex, view must ensure that there are no arrays of CartesianIndex in the argument list. If there are, it can simply \\\"punt\\\" by avoiding the reindex calculation entirely, constructing a nested SubArray with two levels of indirection instead.\"\n},\n\n{\n    \"location\": \"devdocs/sysimg.html#\",\n    \"page\": \"System Image Building\",\n    \"title\": \"System Image Building\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/sysimg.html#System-Image-Building-1\",\n    \"page\": \"System Image Building\",\n    \"title\": \"System Image Building\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/sysimg.html#BuildSysImg.build_sysimg\",\n    \"page\": \"System Image Building\",\n    \"title\": \"BuildSysImg.build_sysimg\",\n    \"category\": \"Function\",\n    \"text\": \"build_sysimg(sysimg_path=default_sysimg_path(), cpu_target=\\\"native\\\", userimg_path=nothing; force=false)\\n\\nRebuild the system image. Store it in sysimg_path, which defaults to a file named sys.ji that sits in the same folder as libjulia.{so,dylib}, except on Windows where it defaults to JULIA_HOME/../lib/julia/sys.ji.  Use the cpu instruction set given by cpu_target. Valid CPU targets are the same as for the -C option to julia, or the -march option to gcc.  Defaults to native, which means to use all CPU instructions available on the current processor. Include the user image file given by userimg_path, which should contain directives such as using MyPackage to include that package in the new system image. New system image will not replace an older image unless force is set to true.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/sysimg.html#Building-the-Julia-system-image-1\",\n    \"page\": \"System Image Building\",\n    \"title\": \"Building the Julia system image\",\n    \"category\": \"section\",\n    \"text\": \"Julia ships with a preparsed system image containing the contents of the Base module, named sys.ji.  This file is also precompiled into a shared library called sys.{so,dll,dylib} on as many platforms as possible, so as to give vastly improved startup times.  On systems that do not ship with a precompiled system image file, one can be generated from the source files shipped in Julia's DATAROOTDIR/julia/base folder.This operation is useful for multiple reasons.  A user may:Build a precompiled shared library system image on a platform that did not ship with one, thereby improving startup times.\\nModify Base, rebuild the system image and use the new Base next time Julia is started.\\nInclude a userimg.jl file that includes packages into the system image, thereby creating a system image that has packages embedded into the startup environment.Julia now ships with a script that automates the tasks of building the system image, wittingly named build_sysimg.jl that lives in DATAROOTDIR/julia/.  That is, to include it into a current Julia session, type:include(joinpath(JULIA_HOME, Base.DATAROOTDIR, \\\"julia\\\", \\\"build_sysimg.jl\\\"))This will include a build_sysimg() function:BuildSysImg.build_sysimgNote that this file can also be run as a script itself, with command line arguments taking the place of arguments passed to the build_sysimg function.  For example, to build a system image in /tmp/sys.{so,dll,dylib}, with the core2 CPU instruction set, a user image of ~/userimg.jl and force set to true, one would execute:julia build_sysimg.jl /tmp/sys core2 ~/userimg.jl --force\"\n},\n\n{\n    \"location\": \"devdocs/llvm.html#\",\n    \"page\": \"Working with LLVM\",\n    \"title\": \"Working with LLVM\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/llvm.html#Working-with-LLVM-1\",\n    \"page\": \"Working with LLVM\",\n    \"title\": \"Working with LLVM\",\n    \"category\": \"section\",\n    \"text\": \"This is not a replacement for the LLVM documentation, but a collection of tips for working on LLVM for Julia.\"\n},\n\n{\n    \"location\": \"devdocs/llvm.html#Overview-of-Julia-to-LLVM-Interface-1\",\n    \"page\": \"Working with LLVM\",\n    \"title\": \"Overview of Julia to LLVM Interface\",\n    \"category\": \"section\",\n    \"text\": \"Julia statically links in LLVM by default. Build with USE_LLVM_SHLIB=1 to link dynamically.The code for lowering Julia AST to LLVM IR or interpreting it directly is in directory src/.File Description\\nbuiltins.c Builtin functions\\nccall.cpp Lowering ccall\\ncgutils.cpp Lowering utilities, notably for array and tuple accesses\\ncodegen.cpp Top-level of code generation, pass list, lowering builtins\\ndebuginfo.cpp Tracks debug information for JIT code\\ndisasm.cpp Handles native object file and JIT code diassembly\\ngf.c Generic functions\\nintrinsics.cpp Lowering intrinsics\\nllvm-simdloop.cpp Custom LLVM pass for @simd\\nsys.c I/O and operating system utility functionsSome of the .cpp files form a group that compile to a single object.The difference between an intrinsic and a builtin is that a builtin is a first class function that can be used like any other Julia function.  An intrinsic can operate only on unboxed data, and therefore its arguments must be statically typed.\"\n},\n\n{\n    \"location\": \"devdocs/llvm.html#Alias-Analysis-1\",\n    \"page\": \"Working with LLVM\",\n    \"title\": \"Alias Analysis\",\n    \"category\": \"section\",\n    \"text\": \"Julia currently uses LLVM's Type Based Alias Analysis. To find the comments that document the inclusion relationships, look for static MDNode* in src/codegen.cpp.The -O option enables LLVM's Basic Alias Analysis.\"\n},\n\n{\n    \"location\": \"devdocs/llvm.html#Building-Julia-with-a-different-version-of-LLVM-1\",\n    \"page\": \"Working with LLVM\",\n    \"title\": \"Building Julia with a different version of LLVM\",\n    \"category\": \"section\",\n    \"text\": \"The default version of LLVM is specified in deps/Versions.make. You can override it by creating a file called Make.user in the top-level directory and adding a line to it such as:LLVM_VER = 3.5.0Besides the LLVM release numerals, you can also use LLVM_VER = svn to bulid against the latest development version of LLVM.\"\n},\n\n{\n    \"location\": \"devdocs/llvm.html#Passing-options-to-LLVM-1\",\n    \"page\": \"Working with LLVM\",\n    \"title\": \"Passing options to LLVM\",\n    \"category\": \"section\",\n    \"text\": \"You can pass options to LLVM using debug builds of Julia.  To create a debug build, run make debug.  The resulting executable is usr/bin/julia-debug. You can pass LLVM options to this executable via the environment variable JULIA_LLVM_ARGS. Here are example settings using bash syntax:export JULIA_LLVM_ARGS = -print-after-all dumps IR after each pass.\\nexport JULIA_LLVM_ARGS = -debug-only=loop-vectorize dumps LLVM DEBUG(...) diagnostics for loop vectorizer if you built Julia with LLVM_ASSERTIONS=1. Otherwise you will get warnings about \\\"Unknown command line argument\\\". Counter-intuitively, building Julia with LLVM_DEBUG=1 is not enough to dump DEBUG diagnostics from a pass.\"\n},\n\n{\n    \"location\": \"devdocs/llvm.html#Improving-LLVM-optimizations-for-Julia-1\",\n    \"page\": \"Working with LLVM\",\n    \"title\": \"Improving LLVM optimizations for Julia\",\n    \"category\": \"section\",\n    \"text\": \"Improving LLVM code generation usually involves either changing Julia lowering to be more friendly to LLVM's passes, or improving a pass.If you are planning to improve a pass, be sure to read the LLVM developer policy. The best strategy is to create a code example in a form where you can use LLVM's opt tool to study it and the pass of interest in isolation.Create an example Julia code of interest.\\nUse JULIA_LLVM_ARGS = -print-after-all to dump the IR.\\nPick out the IR at the point just before the pass of interest runs.\\nStrip the debug metadata and fix up the TBAA metadata by hand.The last step is labor intensive.  Suggestions on a better way would be appreciated.\"\n},\n\n{\n    \"location\": \"devdocs/stdio.html#\",\n    \"page\": \"printf() and stdio in the Julia runtime\",\n    \"title\": \"printf() and stdio in the Julia runtime\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/stdio.html#printf()-and-stdio-in-the-Julia-runtime-1\",\n    \"page\": \"printf() and stdio in the Julia runtime\",\n    \"title\": \"printf() and stdio in the Julia runtime\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/stdio.html#Libuv-wrappers-for-stdio-1\",\n    \"page\": \"printf() and stdio in the Julia runtime\",\n    \"title\": \"Libuv wrappers for stdio\",\n    \"category\": \"section\",\n    \"text\": \"julia.h defines libuv wrappers for the stdio.h streams:uv_stream_t *JL_STDIN;\\nuv_stream_t *JL_STDOUT;\\nuv_stream_t *JL_STDERR;... and corresponding output functions:int jl_printf(uv_stream_t *s, const char *format, ...);\\nint jl_vprintf(uv_stream_t *s, const char *format, va_list args);These printf functions are used by the .c files in the src/ and ui/ directories wherever stdio is needed to ensure that output buffering is handled in a unified way.In special cases, like signal handlers, where the full libuv infrastructure is too heavy, jl_safe_printf() can be used to write(2) directly to STDERR_FILENO:void jl_safe_printf(const char *str, ...);\"\n},\n\n{\n    \"location\": \"devdocs/stdio.html#Interface-between-JL_STD*-and-Julia-code-1\",\n    \"page\": \"printf() and stdio in the Julia runtime\",\n    \"title\": \"Interface between JL_STD* and Julia code\",\n    \"category\": \"section\",\n    \"text\": \"Base.STDIN, Base.STDOUT and Base.STDERR are bound to the JL_STD* libuv streams defined in the runtime.Julia's __init__() function (in base/sysimg.jl) calls reinit_stdio() (in base/stream.jl) to create Julia objects for Base.STDIN, Base.STDOUT and Base.STDERR.reinit_stdio() uses ccall to retrieve pointers to JL_STD* and calls jl_uv_handle_type() to inspect the type of each stream.  It then creates a Julia Base.IOStream, Base.TTY or Base.PipeEndpoint object to represent each stream, e.g.:$ julia -e 'println(typeof((STDIN, STDOUT, STDERR)))'\\nTuple{Base.TTY,Base.TTY,Base.TTY}\\n\\n$ julia -e 'println(typeof((STDIN, STDOUT, STDERR)))' < /dev/null 2>/dev/null\\nTuple{IOStream,Base.TTY,IOStream}\\n\\n$ echo hello | julia -e 'println(typeof((STDIN, STDOUT, STDERR)))' | cat\\nTuple{Base.PipeEndpoint,Base.PipeEndpoint,Base.TTY}The Base.read() and Base.write() methods for these streams use ccall to call libuv wrappers in src/jl_uv.c, e.g.:stream.jl: function write(s::IO, p::Ptr, nb::Integer)\\n               -> ccall(:jl_uv_write, ...)\\n  jl_uv.c:          -> int jl_uv_write(uv_stream_t *stream, ...)\\n                        -> uv_write(uvw, stream, buf, ...)\"\n},\n\n{\n    \"location\": \"devdocs/stdio.html#printf()-during-initialization-1\",\n    \"page\": \"printf() and stdio in the Julia runtime\",\n    \"title\": \"printf() during initialization\",\n    \"category\": \"section\",\n    \"text\": \"The libuv streams relied upon by jl_printf() etc., are not available until midway through initialization of the runtime (see init.c, init_stdio()).  Error messages or warnings that need to be printed before this are routed to the standard C library fwrite() function by the following mechanism:In sys.c, the JL_STD* stream pointers are statically initialized to integer constants: STD*_FILENO (0, 1 and 2). In jl_uv.c the jl_uv_puts() function checks its uv_stream_t* stream argument and calls fwrite() if stream is set to STDOUT_FILENO or STDERR_FILENO.This allows for uniform use of jl_printf() throughout the runtime regardless of whether or not any particular piece of code is reachable before initialization is complete.\"\n},\n\n{\n    \"location\": \"devdocs/stdio.html#Legacy-ios.c-library-1\",\n    \"page\": \"printf() and stdio in the Julia runtime\",\n    \"title\": \"Legacy ios.c library\",\n    \"category\": \"section\",\n    \"text\": \"The src/support/ios.c library is inherited from femtolisp. It provides cross-platform buffered file IO and in-memory temporary buffers.ios.c is still used by:src/flisp/*.c\\nsrc/dump.c \u2013 for serialization file IO and for memory buffers.\\nbase/iostream.jl \u2013 for file IO (see base/fs.jl for libuv equivalent).Use of ios.c in these modules is mostly self-contained and separated from the libuv I/O system. However, there is one place where femtolisp calls through to jl_printf() with a legacy ios_t stream.There is a hack in ios.h that makes the ios_t.bm field line up with the uv_stream_t.type and ensures that the values used for ios_t.bm to not overlap with valid UV_HANDLE_TYPE values.  This allows uv_stream_t pointers to point to ios_t streams.This is needed because jl_printf() caller jl_static_show() is passed an ios_t stream by femtolisp's fl_print() function. Julia's jl_uv_puts() function has special handling for this:if (stream->type > UV_HANDLE_TYPE_MAX) {\\n    return ios_write((ios_t*)stream, str, n);\\n}\"\n},\n\n{\n    \"location\": \"devdocs/boundscheck.html#\",\n    \"page\": \"Bounds checking\",\n    \"title\": \"Bounds checking\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/boundscheck.html#Bounds-checking-1\",\n    \"page\": \"Bounds checking\",\n    \"title\": \"Bounds checking\",\n    \"category\": \"section\",\n    \"text\": \"Like many modern programming languages, Julia uses bounds checking to ensure program safety when accessing arrays. In tight inner loops or other performance critical situations, you may wish to skip these bounds checks to improve runtime performance. For instance, in order to emit vectorized (SIMD) instructions, your loop body cannot contain branches, and thus cannot contain bounds checks. Consequently, Julia includes an @inbounds(...) macro to tell the compiler to skip such bounds checks within the given block. For the built-in Array type, the magic happens inside the arrayref and arrayset intrinsics. User-defined array types instead use the @boundscheck(...) macro to achieve context-sensitive code selection.\"\n},\n\n{\n    \"location\": \"devdocs/boundscheck.html#Eliding-bounds-checks-1\",\n    \"page\": \"Bounds checking\",\n    \"title\": \"Eliding bounds checks\",\n    \"category\": \"section\",\n    \"text\": \"The @boundscheck(...) macro marks blocks of code that perform bounds checking. When such blocks appear inside of an @inbounds(...) block, the compiler removes these blocks. When the @boundscheck(...) is nested inside of a calling function containing an @inbounds(...), the compiler will remove the @boundscheck block only if it is inlined into the calling function. For example, you might write the method sum as:function sum(A::AbstractArray)\\n    r = zero(eltype(A))\\n    for i = 1:length(A)\\n        @inbounds r += A[i]\\n    end\\n    return r\\nendWith a custom array-like type MyArray having:@inline getindex(A::MyArray, i::Real) = (@boundscheck checkbounds(A,i); A.data[to_index(i)])Then when getindex is inlined into sum, the call to checkbounds(A,i) will be elided. If your function contains multiple layers of inlining, only @boundscheck blocks at most one level of inlining deeper are eliminated. The rule prevents unintended changes in program behavior from code further up the stack.\"\n},\n\n{\n    \"location\": \"devdocs/boundscheck.html#Propagating-inbounds-1\",\n    \"page\": \"Bounds checking\",\n    \"title\": \"Propagating inbounds\",\n    \"category\": \"section\",\n    \"text\": \"There may be certain scenarios where for code-organization reasons you want more than one layer between the @inbounds and @boundscheck declarations. For instance, the default getindex methods have the chain getindex(A::AbstractArray, i::Real) calls getindex(IndexStyle(A), A, i) calls _getindex(::IndexLinear, A, i).To override the \\\"one layer of inlining\\\" rule, a function may be marked with @propagate_inbounds to propagate an inbounds context (or out of bounds context) through one additional layer of inlining.\"\n},\n\n{\n    \"location\": \"devdocs/boundscheck.html#The-bounds-checking-call-hierarchy-1\",\n    \"page\": \"Bounds checking\",\n    \"title\": \"The bounds checking call hierarchy\",\n    \"category\": \"section\",\n    \"text\": \"The overall hierarchy is:checkbounds(A, I...) which calls\\ncheckbounds(Bool, A, I...) which calls\\ncheckbounds_indices(Bool, indices(A), I) which recursively calls\\ncheckindex for each dimensionHere A is the array, and I contains the \\\"requested\\\" indices. indices(A) returns a tuple of \\\"permitted\\\" indices of A.checkbounds(A, I...) throws an error if the indices are invalid, whereas checkbounds(Bool, A, I...) returns false in that circumstance.  checkbounds_indices discards any information about the array other than its indices tuple, and performs a pure indices-vs-indices comparison: this allows relatively few compiled methods to serve a huge variety of array types. Indices are specified as tuples, and are usually compared in a 1-1 fashion with individual dimensions handled by calling another important function, checkindex: typically,checkbounds_indices(Bool, (IA1, IA...), (I1, I...)) = checkindex(Bool, IA1, I1) &\\n                                                      checkbounds_indices(Bool, IA, I)so checkindex checks a single dimension.  All of these functions, including the unexported checkbounds_indices have docstrings accessible with ? .If you have to customize bounds checking for a specific array type, you should specialize checkbounds(Bool, A, I...). However, in most cases you should be able to rely on checkbounds_indices as long as you supply useful indices for your array type.If you have novel index types, first consider specializing checkindex, which handles a single index for a particular dimension of an array.  If you have a custom multidimensional index type (similar to CartesianIndex), then you may have to consider specializing checkbounds_indices.Note this hierarchy has been designed to reduce the likelihood of method ambiguities.  We try to make checkbounds the place to specialize on array type, and try to avoid specializations on index types; conversely, checkindex is intended to be specialized only on index type (especially, the last argument).\"\n},\n\n{\n    \"location\": \"devdocs/locks.html#\",\n    \"page\": \"Proper maintenance and care of multi-threading locks\",\n    \"title\": \"Proper maintenance and care of multi-threading locks\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/locks.html#Proper-maintenance-and-care-of-multi-threading-locks-1\",\n    \"page\": \"Proper maintenance and care of multi-threading locks\",\n    \"title\": \"Proper maintenance and care of multi-threading locks\",\n    \"category\": \"section\",\n    \"text\": \"The following strategies are used to ensure that the code is dead-lock free (generally by addressing the 4th Coffman condition: circular wait).structure code such that only one lock will need to be acquired at a time\\nalways acquire shared locks in the same order, as given by the table below\\navoid constructs that expect to need unrestricted recursion\"\n},\n\n{\n    \"location\": \"devdocs/locks.html#Locks-1\",\n    \"page\": \"Proper maintenance and care of multi-threading locks\",\n    \"title\": \"Locks\",\n    \"category\": \"section\",\n    \"text\": \"Below are all of the locks that exist in the system and the mechanisms for using them that avoid the potential for deadlocks (no Ostrich algorithm allowed here):The following are definitely leaf locks (level 1), and must not try to acquire any other lock:safepoint\\nNote that this lock is acquired implicitly by JL_LOCK and JL_UNLOCK. use the _NOGC variants to avoid that for level 1 locks.While holding this lock, the code must not do any allocation or hit any safepoints. Note that there are safepoints when doing allocation, enabling / disabling GC, entering / restoring exception frames, and taking / releasing locks.\\nshared_map\\nfinalizers\\npagealloc\\ngc_perm_lock\\nflisp\\nflisp itself is already threadsafe, this lock only protects the jl_ast_context_list_t poolThe following is a leaf lock (level 2), and only acquires level 1 locks (safepoint) internally:typecacheThe following is a level 3 lock, which can only acquire level 1 or level 2 locks internally:Method->writelockThe following is a level 4 lock, which can only recurse to acquire level 1, 2, or 3 locks:MethodTable->writelockNo Julia code may be called while holding a lock above this point.The following is a level 6 lock, which can only recurse to acquire locks at lower levels:codegenThe following is an almost root lock (level end-1), meaning only the root look may be held when trying to acquire it:typeinf\\nthis one is perhaps one of the most tricky ones, since type-inference can be invoked from many pointscurrently the lock is merged with the codegen lock, since they call each other recursivelyThe following is the root lock, meaning no other lock shall be held when trying to acquire it:toplevel\\nthis should be held while attempting a top-level action (such as making a new type or defining a new method): trying to obtain this lock inside a staged function will cause a deadlock condition!additionally, it's unclear if any code can safely run in parallel with an arbitrary toplevel expression, so it may require all threads to get to a safepoint first\"\n},\n\n{\n    \"location\": \"devdocs/locks.html#Broken-Locks-1\",\n    \"page\": \"Proper maintenance and care of multi-threading locks\",\n    \"title\": \"Broken Locks\",\n    \"category\": \"section\",\n    \"text\": \"The following locks are broken:toplevel\\ndoesn't exist right nowfix: create it\"\n},\n\n{\n    \"location\": \"devdocs/locks.html#Shared-Global-Data-Structures-1\",\n    \"page\": \"Proper maintenance and care of multi-threading locks\",\n    \"title\": \"Shared Global Data Structures\",\n    \"category\": \"section\",\n    \"text\": \"These data structures each need locks due to being shared mutable global state. It is the inverse list for the above lock priority list. This list does not include level 1 leaf resources due to their simplicity.MethodTable modifications (def, cache, kwsorter type) : MethodTable->writelockType declarations : toplevel lockType application : typecache lockModule serializer : toplevel lockJIT & type-inference : codegen lockMethodInstance updates : codegen lockThese fields are generally lazy initialized, using the test-and-test-and-set pattern.\\nThese are set at construction and immutable:\\nspecTypes\\nsparam_vals\\ndef\\nThese are set by jl_type_infer (while holding codegen lock):\\nrettype\\ninferred\\nthese can also be reset, see jl_set_lambda_rettype for that logic as it needs to keep functionObjectsDecls in sync\\ninInference flag:\\noptimization to quickly avoid recurring into jl_type_infer while it is already running\\nactual state (of setting inferred, then fptr) is protected by codegen lock\\nFunction pointers (jlcall_api and fptr, unspecialized_ducttape):\\nthese transition once, from NULL to a value, while the codegen lock is held\\nCode-generator cache (the contents of functionObjectsDecls):\\nthese can transition multiple times, but only while the codegen lock is held\\nit is valid to use old version of this, or block for new versions of this, so races are benign, as long as the code is careful not to reference other data in the method instance (such as rettype) and assume it is coordinated, unless also holding the codegen lock\\ncompile_traced flag:\\nunknownLLVMContext : codegen lockMethod : Method->writelockroots array (serializer and codegen)\\ninvoke / specializations / tfunc modifications\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Arrays with custom indices\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Arrays-with-custom-indices-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Arrays with custom indices\",\n    \"category\": \"section\",\n    \"text\": \"Julia 0.5 adds experimental support for arrays with arbitrary indices. Conventionally, Julia's arrays are indexed starting at 1, whereas some other languages start numbering at 0, and yet others (e.g., Fortran) allow you to specify arbitrary starting indices.  While there is much merit in picking a standard (i.e., 1 for Julia), there are some algorithms which simplify considerably if you can index outside the range 1:size(A,d) (and not just 0:size(A,d)-1, either). Such array types are expected to be supplied through packages.The purpose of this page is to address the question, \\\"what do I have to do to support such arrays in my own code?\\\"  First, let's address the simplest case: if you know that your code will never need to handle arrays with unconventional indexing, hopefully the answer is \\\"nothing.\\\" Old code, on conventional arrays, should function essentially without alteration as long as it was using the exported interfaces of Julia.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Generalizing-existing-code-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Generalizing existing code\",\n    \"category\": \"section\",\n    \"text\": \"As an overview, the steps are:replace many uses of size with indices\\nreplace 1:length(A) with linearindices(A), and length(A) with length(linearindices(A))\\nreplace explicit allocations like Array{Int}(size(B)) with similar(Array{Int}, indices(B))These are described in more detail below.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Background-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Background\",\n    \"category\": \"section\",\n    \"text\": \"Because unconventional indexing breaks deeply-held assumptions throughout the Julia ecosystem, early adopters running code that has not been updated are likely to experience errors.  The most frustrating bugs would be incorrect results or segfaults (total crashes of Julia).  For example, consider the following function:function mycopy!(dest::AbstractVector, src::AbstractVector)\\n    length(dest) == length(src) || throw(DimensionMismatch(\\\"vectors must match\\\"))\\n    # OK, now we're safe to use @inbounds, right? (not anymore!)\\n    for i = 1:length(src)\\n        @inbounds dest[i] = src[i]\\n    end\\n    dest\\nendThis code implicitly assumes that vectors are indexed from 1. Previously that was a safe assumption, so this code was fine, but (depending on what types the user passes to this function) it may no longer be safe.  If this code continued to work when passed a vector with non-1 indices, it would either produce an incorrect answer or it would segfault.  (If you do get segfaults, to help locate the cause try running julia with the option --check-bounds=yes.)To ensure that such errors are caught, in Julia 0.5 both length and sizeshould throw an error when passed an array with non-1 indexing.  This is designed to force users of such arrays to check the code, and inspect it for whether it needs to be generalized.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Using-indices-for-bounds-checks-and-loop-iteration-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Using indices for bounds checks and loop iteration\",\n    \"category\": \"section\",\n    \"text\": \"indices(A) (reminiscent of size(A)) returns a tuple of AbstractUnitRange objects, specifying the range of valid indices along each dimension of A.  When A has unconventional indexing, the ranges may not start at 1.  If you just want the range for a particular dimension d, there is indices(A, d).Base implements a custom range type, OneTo, where OneTo(n) means the same thing as 1:n but in a form that guarantees (via the type system) that the lower index is 1. For any new AbstractArray type, this is the default returned by indices, and it indicates that this array type uses \\\"conventional\\\" 1-based indexing.  Note that if you don't want to be bothered supporting arrays with non-1 indexing, you can add the following line:@assert all(x->isa(x, Base.OneTo), indices(A))at the top of any function.For bounds checking, note that there are dedicated functions checkbounds and checkindex which can sometimes simplify such tests.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Linear-indexing-(linearindices)-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Linear indexing (linearindices)\",\n    \"category\": \"section\",\n    \"text\": \"Some algorithms are most conveniently (or efficiently) written in terms of a single linear index, A[i] even if A is multi-dimensional.  In \\\"true\\\" linear indexing, the indices always range from 1:length(A). However, this raises an ambiguity for one-dimensional arrays (a.k.a., AbstractVector): does v[i] mean linear indexing, or Cartesian indexing with the array's native indices?For this reason, if you want to use linear indexing in an algorithm, your best option is to get the index range by calling linearindices(A).  This will return indices(A, 1) if A is an AbstractVector, and the equivalent of 1:length(A) otherwise.In a sense, one can say that 1-dimensional arrays always use Cartesian indexing. To help enforce this, it's worth noting that sub2ind(shape, i...) and ind2sub(shape, ind) will throw an error if shape indicates a 1-dimensional array with unconventional indexing (i.e., is a Tuple{UnitRange} rather than a tuple of OneTo).  For arrays with conventional indexing, these functions continue to work the same as always.Using indices and linearindices, here is one way you could rewrite mycopy!:function mycopy!(dest::AbstractVector, src::AbstractVector)\\n    indices(dest) == indices(src) || throw(DimensionMismatch(\\\"vectors must match\\\"))\\n    for i in linearindices(src)\\n        @inbounds dest[i] = src[i]\\n    end\\n    dest\\nend\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Allocating-storage-using-generalizations-of-similar-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Allocating storage using generalizations of similar\",\n    \"category\": \"section\",\n    \"text\": \"Storage is often allocated with Array{Int}(dims) or similar(A, args...). When the result needs to match the indices of some other array, this may not always suffice. The generic replacement for such patterns is to use similar(storagetype, shape).  storagetype indicates the kind of underlying \\\"conventional\\\" behavior you'd like, e.g., Array{Int} or BitArray or even dims->zeros(Float32, dims) (which would allocate an all-zeros array). shape is a tuple of Integer or AbstractUnitRange values, specifying the indices that you want the result to use.Let's walk through a couple of explicit examples. First, if A has conventional indices, then similar(Array{Int}, indices(A)) would end up calling Array{Int}(size(A)), and thus return an array.  If A is an AbstractArray type with unconventional indexing, then similar(Array{Int}, indices(A)) should return something that \\\"behaves like\\\" an Array{Int} but with a shape (including indices) that matches A.  (The most obvious implementation is to allocate an Array{Int}(size(A)) and then \\\"wrap\\\" it in a type that shifts the indices.)Note also that similar(Array{Int}, (indices(A, 2),)) would allocate an AbstractVector{Int} (i.e., 1-dimensional array) that matches the indices of the columns of A.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Deprecations-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Deprecations\",\n    \"category\": \"section\",\n    \"text\": \"In generalizing Julia's code base, at least one deprecation was unavoidable: earlier versions of Julia defined first(::Colon) = 1, meaning that the first index along a dimension indexed by : is 1. This definition can no longer be justified, so it was deprecated. There is no provided replacement, because the proper replacement depends on what you are doing and might need to know more about the array. However, it appears that many uses of first(::Colon) are really about computing an index offset; when that is the case, a candidate replacement is:indexoffset(r::AbstractVector) = first(r) - 1\\nindexoffset(::Colon) = 0In other words, while first(:) does not itself make sense, in general you can say that the offset associated with a colon-index is zero.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Writing-custom-array-types-with-non-1-indexing-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Writing custom array types with non-1 indexing\",\n    \"category\": \"section\",\n    \"text\": \"Most of the methods you'll need to define are standard for any AbstractArray type, see Abstract Arrays. This page focuses on the steps needed to define unconventional indexing.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Do-**not**-implement-size-or-length-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Do not implement size or length\",\n    \"category\": \"section\",\n    \"text\": \"Perhaps the majority of pre-existing code that uses size will not work properly for arrays with non-1 indices.  For that reason, it is much better to avoid implementing these methods, and use the resulting MethodError to identify code that needs to be audited and perhaps generalized.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Do-**not**-annotate-bounds-checks-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Do not annotate bounds checks\",\n    \"category\": \"section\",\n    \"text\": \"Julia 0.5 includes @boundscheck to annotate code that can be removed for callers that exploit @inbounds. Initially, it seems far preferable to run with bounds checking always enabled (i.e., omit the @boundscheck annotation so the check always runs).\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Custom-AbstractUnitRange-types-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Custom AbstractUnitRange types\",\n    \"category\": \"section\",\n    \"text\": \"If you're writing a non-1 indexed array type, you will want to specialize indices so it returns a UnitRange, or (perhaps better) a custom AbstractUnitRange.  The advantage of a custom type is that it \\\"signals\\\" the allocation type for functions like similar. If we're writing an array type for which indexing will start at 0, we likely want to begin by creating a new AbstractUnitRange, ZeroRange, where ZeroRange(n) is equivalent to 0:n-1.In general, you should probably not export ZeroRange from your package: there may be other packages that implement their own ZeroRange, and having multiple distinct ZeroRange types is (perhaps counterintuitively) an advantage: ModuleA.ZeroRange indicates that similar should create a ModuleA.ZeroArray, whereas ModuleB.ZeroRange indicates a ModuleB.ZeroArray type.  This design allows peaceful coexistence among many different custom array types.Note that the Julia package CustomUnitRanges.jl can sometimes be used to avoid the need to write your own ZeroRange type.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Specializing-indices-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Specializing indices\",\n    \"category\": \"section\",\n    \"text\": \"Once you have your AbstractUnitRange type, then specialize indices:Base.indices(A::ZeroArray) = map(n->ZeroRange(n), A.size)where here we imagine that ZeroArray has a field called size (there would be other ways to implement this).In some cases, the fallback definition for indices(A, d):indices(A::AbstractArray{T,N}, d) where {T,N} = d <= N ? indices(A)[d] : OneTo(1)may not be what you want: you may need to specialize it to return something other than OneTo(1) when d > ndims(A).  Likewise, in Base there is a dedicated function indices1 which is equivalent to indices(A, 1) but which avoids checking (at runtime) whether ndims(A) > 0. (This is purely a performance optimization.)  It is defined as:indices1(A::AbstractArray{T,0}) where {T} = OneTo(1)\\nindices1(A::AbstractArray) = indices(A)[1]If the first of these (the zero-dimensional case) is problematic for your custom array type, be sure to specialize it appropriately.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Specializing-similar-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Specializing similar\",\n    \"category\": \"section\",\n    \"text\": \"Given your custom ZeroRange type, then you should also add the following two specializations for similar:function Base.similar(A::AbstractArray, T::Type, shape::Tuple{ZeroRange,Vararg{ZeroRange}})\\n    # body\\nend\\n\\nfunction Base.similar(f::Union{Function,DataType}, shape::Tuple{ZeroRange,Vararg{ZeroRange}})\\n    # body\\nendBoth of these should allocate your custom array type.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Specializing-reshape-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Specializing reshape\",\n    \"category\": \"section\",\n    \"text\": \"Optionally, define a methodBase.reshape(A::AbstractArray, shape::Tuple{ZeroRange,Vararg{ZeroRange}}) = ...and you can reshape an array so that the result has custom indices.\"\n},\n\n{\n    \"location\": \"devdocs/offset-arrays.html#Summary-1\",\n    \"page\": \"Arrays with custom indices\",\n    \"title\": \"Summary\",\n    \"category\": \"section\",\n    \"text\": \"Writing code that doesn't make assumptions about indexing requires a few extra abstractions, but hopefully the necessary changes are relatively straightforward.As a reminder, this support is still experimental. While much of Julia's base code has been updated to support unconventional indexing, without a doubt there are many omissions that will be discovered only through usage.  Moreover, at the time of this writing, most packages do not support unconventional indexing.  As a consequence, early adopters should be prepared to identify and/or fix bugs.  On the other hand, only through practical usage will it become clear whether this experimental feature should be retained in future versions of Julia; consequently, interested parties are encouraged to accept some ownership for putting it through its paces.\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2-1\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2\",\n    \"category\": \"section\",\n    \"text\": \"The LibGit2 module provides bindings to libgit2, a portable C library that implements core functionality for the Git version control system. These bindings are currently used to power Julia's package manager. It is expected that this module will eventually be moved into a separate package.\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.AbstractCredentials\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.AbstractCredentials\",\n    \"category\": \"Type\",\n    \"text\": \"Abstract credentials payload\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.Buffer\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.Buffer\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.Buffer\\n\\nA data buffer for exporting data from libgit2. Matches the git_buf struct.\\n\\nWhen fetching data from LibGit2, a typical usage would look like:\\n\\nbuf_ref = Ref(Buffer())\\n@check ccall(..., (Ptr{Buffer},), buf_ref)\\n# operation on buf_ref\\nfree(buf_ref)\\n\\nIn particular, note that LibGit2.free should be called afterward on the Ref object.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.CachedCredentials\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.CachedCredentials\",\n    \"category\": \"Type\",\n    \"text\": \"Credentials that support caching\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.CheckoutOptions\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.CheckoutOptions\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.CheckoutOptions\\n\\nMatches the git_checkout_options struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.CloneOptions\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.CloneOptions\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.CloneOptions\\n\\nMatches the git_clone_options struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.DiffDelta\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.DiffDelta\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.DiffDelta\\n\\nDescription of changes to one entry. Matches the git_diff_delta struct.\\n\\nThe fields represent:\\n\\nstatus: One of Consts.DELTA_STATUS, indicating whether the file has been added/modified/deleted.\\nflags: Flags for the delta and the objects on each side. Determines whether to treat the file(s)  as binary/text, whether they exist on each side of the diff, and whether the object ids are known  to be correct.\\nsimilarity: Used to indicate if a file has been renamed or copied.\\nnfiles: The number of files in the delta (for instance, if the delta  was run on a submodule commit id, it may contain more than one file).\\nold_file: A DiffFile containing information about the file(s) before the changes.\\nnew_file: A DiffFile containing information about the file(s) after the changes.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.DiffFile\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.DiffFile\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.DiffFile\\n\\nDescription of one side of a delta. Matches the git_diff_file struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.DiffOptionsStruct\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.DiffOptionsStruct\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.DiffOptionsStruct\\n\\nMatches the git_diff_options struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.FetchHead\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.FetchHead\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.FetchHead\\n\\nContains the information about HEAD during a fetch, including the name and URL of the branch fetched from, the oid of the HEAD, and whether the fetched HEAD has been merged locally.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.FetchOptions\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.FetchOptions\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.FetchOptions\\n\\nMatches the git_fetch_options struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitBlob\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitBlob\",\n    \"category\": \"Type\",\n    \"text\": \"GitBlob(repo::GitRepo, hash::AbstractGitHash)\\nGitBlob(repo::GitRepo, spec::AbstractString)\\n\\nReturn a GitBlob object from repo specified by hash/spec.\\n\\nhash is a full (GitHash) or partial (GitShortHash) hash.\\nspec is a textual specification: see the git docs for a full list.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitCommit\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitCommit\",\n    \"category\": \"Type\",\n    \"text\": \"GitCommit(repo::GitRepo, hash::AbstractGitHash)\\nGitCommit(repo::GitRepo, spec::AbstractString)\\n\\nReturn a GitCommit object from repo specified by hash/spec.\\n\\nhash is a full (GitHash) or partial (GitShortHash) hash.\\nspec is a textual specification: see the git docs for a full list.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitHash\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitHash\",\n    \"category\": \"Type\",\n    \"text\": \"GitHash\\n\\nA git object identifier, based on the sha-1 hash. It is a 20 byte string (40 hex digits) used to identify a GitObject in a repository.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitObject\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitObject\",\n    \"category\": \"Type\",\n    \"text\": \"GitObject(repo::GitRepo, hash::AbstractGitHash)\\nGitObject(repo::GitRepo, spec::AbstractString)\\n\\nReturn the specified object (GitCommit, GitBlob, GitTree or GitTag) from repo specified by hash/spec.\\n\\nhash is a full (GitHash) or partial (GitShortHash) hash.\\nspec is a textual specification: see the git docs for a full list.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitRemote\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitRemote\",\n    \"category\": \"Type\",\n    \"text\": \"GitRemote(repo::GitRepo, rmt_name::AbstractString, rmt_url::AbstractString) -> GitRemote\\n\\nLook up a remote git repository using its name and URL. Uses the default fetch refspec.\\n\\nExample\\n\\nrepo = LibGit2.init(repo_path)\\nremote = LibGit2.GitRemote(repo, \\\"upstream\\\", repo_url)\\n\\n\\n\\nGitRemote(repo::GitRepo, rmt_name::AbstractString, rmt_url::AbstractString, fetch_spec::AbstractString) -> GitRemote\\n\\nLook up a remote git repository using the repository's name and URL, as well as specifications for how to fetch from the remote (e.g. which remote branch to fetch from).\\n\\nExample\\n\\nrepo = LibGit2.init(repo_path)\\nrefspec = \\\"+refs/heads/mybranch:refs/remotes/origin/mybranch\\\"\\nremote = LibGit2.GitRemote(repo, \\\"upstream\\\", repo_url, refspec)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitRemoteAnon\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitRemoteAnon\",\n    \"category\": \"Function\",\n    \"text\": \"GitRemoteAnon(repo::GitRepo, url::AbstractString) -> GitRemote\\n\\nLook up a remote git repository using only its URL, not its name.\\n\\nExample\\n\\nrepo = LibGit2.init(repo_path)\\nremote = LibGit2.GitRemoteAnon(repo, repo_url)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitRepo\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitRepo\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.GitRepo(path::AbstractString)\\n\\nOpens a git repository at path.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitRepoExt\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitRepoExt\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.GitRepoExt(path::AbstractString, flags::Cuint = Cuint(Consts.REPOSITORY_OPEN_DEFAULT))\\n\\nOpens a git repository at path with extended controls (for instance, if the current user must be a member of a special access group to read path).\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitShortHash\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitShortHash\",\n    \"category\": \"Type\",\n    \"text\": \"GitShortHash\\n\\nThis is a shortened form of GitHash, which can be used to identify a git object when it is unique.\\n\\nInternally it is stored as two fields: a full-size GitHash (hash) and a length (len). Only the initial len hex digits of hash are used.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitSignature\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitSignature\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.GitSignature\\n\\nThis is a Julia wrapper around a pointer to a git_signature object.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitStatus\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitStatus\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.GitStatus(repo::GitRepo; status_opts=StatusOptions())\\n\\nCollect information about the status of each file in the git repository repo (e.g. is the file modified, staged, etc.). status_opts can be used to set various options, for instance whether or not to look at untracked files or whether to include submodules or not.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitTag\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitTag\",\n    \"category\": \"Type\",\n    \"text\": \"GitTag(repo::GitRepo, hash::AbstractGitHash)\\nGitTag(repo::GitRepo, spec::AbstractString)\\n\\nReturn a GitTag object from repo specified by hash/spec.\\n\\nhash is a full (GitHash) or partial (GitShortHash) hash.\\nspec is a textual specification: see the git docs for a full list.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.GitTree\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.GitTree\",\n    \"category\": \"Type\",\n    \"text\": \"GitTree(repo::GitRepo, hash::AbstractGitHash)\\nGitTree(repo::GitRepo, spec::AbstractString)\\n\\nReturn a GitTree object from repo specified by hash/spec.\\n\\nhash is a full (GitHash) or partial (GitShortHash) hash.\\nspec is a textual specification: see the git docs for a full list.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.IndexEntry\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.IndexEntry\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.IndexEntry\\n\\nIn-memory representation of a file entry in the index. Matches the git_index_entry struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.IndexTime\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.IndexTime\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.IndexTime\\n\\nMatches the git_index_time struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.MergeOptions\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.MergeOptions\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.MergeOptions\\n\\nMatches the git_merge_options struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.ProxyOptions\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.ProxyOptions\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.ProxyOptions\\n\\nOptions for connecting through a proxy.\\n\\nMatches the git_proxy_options struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.PushOptions\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.PushOptions\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.PushOptions\\n\\nMatches the git_push_options struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.RebaseOperation\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.RebaseOperation\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.RebaseOperation\\n\\nDescribes a single instruction/operation to be performed during the rebase. Matches the git_rebase_operation struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.RebaseOptions\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.RebaseOptions\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.RebaseOptions\\n\\nMatches the git_rebase_options struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.RemoteCallbacks\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.RemoteCallbacks\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.RemoteCallbacks\\n\\nCallback settings. Matches the git_remote_callbacks struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.SSHCredentials\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.SSHCredentials\",\n    \"category\": \"Type\",\n    \"text\": \"SSH credentials type\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.SignatureStruct\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.SignatureStruct\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.SignatureStruct\\n\\nAn action signature (e.g. for committers, taggers, etc). Matches the git_signature struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.StatusEntry\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.StatusEntry\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.StatusEntry\\n\\nProviding the differences between the file as it exists in HEAD and the index, and providing the differences between the index and the working directory. Matches the git_status_entry struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.StatusOptions\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.StatusOptions\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.StatusOptions\\n\\nOptions to control how git_status_foreach_ext() will issue callbacks. Matches the git_status_opt_t struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.StrArrayStruct\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.StrArrayStruct\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.StrArrayStruct\\n\\nA LibGit2 representation of an array of strings. Matches the git_strarray struct.\\n\\nWhen fetching data from LibGit2, a typical usage would look like:\\n\\nsa_ref = Ref(StrArrayStruct())\\n@check ccall(..., (Ptr{StrArrayStruct},), sa_ref)\\nres = convert(Vector{String}, sa_ref[])\\nfree(sa_ref)\\n\\nIn particular, note that LibGit2.free should be called afterward on the Ref object.\\n\\nConversely, when passing a vector of strings to LibGit2, it is generally simplest to rely on implicit conversion:\\n\\nstrs = String[...]\\n@check ccall(..., (Ptr{StrArrayStruct},), strs)\\n\\nNote that no call to free is required as the data is allocated by Julia.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.TimeStruct\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.TimeStruct\",\n    \"category\": \"Type\",\n    \"text\": \"LibGit2.TimeStruct\\n\\nTime in a signature. Matches the git_time struct.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.UserPasswordCredentials\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.UserPasswordCredentials\",\n    \"category\": \"Type\",\n    \"text\": \"Credentials that support only user and password parameters\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.add_fetch!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.add_fetch!\",\n    \"category\": \"Function\",\n    \"text\": \"add_fetch!(repo::GitRepo, rmt::GitRemote, fetch_spec::String)\\n\\nAdd a fetch refspec for the specified rmt. This refspec will contain information about which branch(es) to fetch from.\\n\\nExample\\n\\njulia> LibGit2.add_fetch!(repo, remote, \\\"upstream\\\");\\n\\njulia> LibGit2.fetch_refspecs(remote)\\nString[\\\"+refs/heads/*:refs/remotes/upstream/*\\\"]\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.add_push!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.add_push!\",\n    \"category\": \"Function\",\n    \"text\": \"add_push!(repo::GitRepo, rmt::GitRemote, push_spec::String)\\n\\nAdd a push refspec for the specified rmt. This refspec will contain information about which branch(es) to push to.\\n\\nExample\\n\\njulia> LibGit2.add_push!(repo, remote, \\\"refs/heads/master\\\");\\n\\njulia> remote = LibGit2.get(LibGit2.GitRemote, repo, branch);\\n\\njulia> LibGit2.push_refspecs(remote)\\nString[\\\"refs/heads/master\\\"]\\n\\nnote: Note\\nYou may need to close and reopen the GitRemote in question after updating its push refspecs in order for the change to take effect and for calls to push to work.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.addblob!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.addblob!\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.addblob!(repo::GitRepo, path::AbstractString)\\n\\nReads the file at path and adds it to the object database of repo as a loose blob. Returns the GitHash of the resulting blob.\\n\\nExample\\n\\nhash_str = hex(commit_oid)\\nblob_file = joinpath(repo_path, \\\".git\\\", \\\"objects\\\", hash_str[1:2], hash_str[3:end])\\nid = LibGit2.addblob!(repo, blob_file)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.authors\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.authors\",\n    \"category\": \"Function\",\n    \"text\": \"authors(repo::GitRepo) -> Vector{Signature}\\n\\nReturns all authors of commits to the repo repository.\\n\\nExample\\n\\nrepo = LibGit2.GitRepo(repo_path)\\nrepo_file = open(joinpath(repo_path, test_file), \\\"a\\\")\\n\\nprintln(repo_file, commit_msg)\\nflush(repo_file)\\nLibGit2.add!(repo, test_file)\\nsig = LibGit2.Signature(\\\"TEST\\\", \\\"TEST@TEST.COM\\\", round(time(), 0), 0)\\ncommit_oid1 = LibGit2.commit(repo, \\\"commit1\\\"; author=sig, committer=sig)\\nprintln(repo_file, randstring(10))\\nflush(repo_file)\\nLibGit2.add!(repo, test_file)\\ncommit_oid2 = LibGit2.commit(repo, \\\"commit2\\\"; author=sig, committer=sig)\\n\\n# will be a Vector of [sig, sig]\\nauths = LibGit2.authors(repo)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.branch\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.branch\",\n    \"category\": \"Function\",\n    \"text\": \"branch(repo::GitRepo)\\n\\nEquivalent to git branch. Create a new branch from the current HEAD.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.branch!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.branch!\",\n    \"category\": \"Function\",\n    \"text\": \"branch!(repo::GitRepo, branch_name::AbstractString, commit::AbstractString=\\\"\\\"; kwargs...)\\n\\nCheckout a new git branch in the repo repository. commit is the GitHash, in string form, which will be the start of the new branch. If commit is an empty string, the current HEAD will be used.\\n\\nThe keyword arguments are:\\n\\ntrack::AbstractString=\\\"\\\": the name of the remote branch this new branch should track, if any. If empty (the default), no remote branch will be tracked.\\nforce::Bool=false: if true, branch creation will be forced.\\nset_head::Bool=true: if true, after the branch creation finishes the branch head will be set as the HEAD of repo.\\n\\nEquivalent to git checkout [-b|-B] <branch_name> [<commit>] [--track <track>].\\n\\nExample\\n\\nrepo = LibGit2.GitRepo(repo_path)\\nLibGit2.branch!(repo, \\\"new_branch\\\", set_head=false)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.checkout!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.checkout!\",\n    \"category\": \"Function\",\n    \"text\": \"checkout!(repo::GitRepo, commit::AbstractString=\\\"\\\"; force::Bool=true)\\n\\nEquivalent to git checkout [-f] --detach <commit>. Checkout the git commit commit (a GitHash in string form) in repo. If force is true, force the checkout and discard any current changes. Note that this detaches the current HEAD.\\n\\nExample\\n\\nrepo = LibGit2.init(repo_path)\\nopen(joinpath(LibGit2.path(repo), \\\"file1\\\"), \\\"w\\\") do f\\n    write(f, \\\"111\\n\\\")\\nend\\nLibGit2.add!(repo, \\\"file1\\\")\\ncommit_oid = LibGit2.commit(repo, \\\"add file1\\\")\\nopen(joinpath(LibGit2.path(repo), \\\"file1\\\"), \\\"w\\\") do f\\n    write(f, \\\"112\\n\\\")\\nend\\n# would fail without the force=true\\n# since there are modifications to the file\\nLibGit2.checkout!(repo, string(commit_oid), force=true)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.checkused!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.checkused!\",\n    \"category\": \"Function\",\n    \"text\": \"Checks if credentials were used\\n\\n\\n\\nChecks if credentials were used or failed authentication, see LibGit2.credentials_callback\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.clone\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.clone\",\n    \"category\": \"Function\",\n    \"text\": \"clone(repo_url::AbstractString, repo_path::AbstractString; kwargs...)\\n\\nClone a remote repository located at repo_url to the local filesystem location repo_path.\\n\\nThe keyword arguments are:\\n\\nbranch::AbstractString=\\\"\\\": which branch of the remote to clone, if not the default repository branch (usually master).\\nisbare::Bool=false: if true, clone the remote as a bare repository, which will make repo_path itself the git directory instead of repo_path/.git. This means that a working tree cannot be checked out. Plays the role of the git CLI argument --bare.\\nremote_cb::Ptr{Void}=C_NULL: a callback which will be used to create the remote before it is cloned. If C_NULL (the default), no attempt will be made to create the remote - it will be assumed to already exist.\\npayload::Nullable{P<:AbstractCredentials}=Nullable{AbstractCredentials}(): provides credentials if necessary, for instance if the remote is a private repository.\\n\\nEquivalent to git clone [-b <branch>] [--bare] <repo_url> <repo_path>.\\n\\nExamples\\n\\nrepo_url = \\\"https://github.com/JuliaLang/Example.jl\\\"\\nrepo1 = LibGit2.clone(repo_url, \\\"test_path\\\")\\nrepo2 = LibGit2.clone(repo_url, \\\"test_path\\\", isbare=true)\\njulia_url = \\\"https://github.com/JuliaLang/julia\\\"\\njulia_repo = LibGit2.clone(julia_url, \\\"julia_path\\\", branch=\\\"release-0.6\\\")\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.commit\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.commit\",\n    \"category\": \"Function\",\n    \"text\": \"Wrapper around git_commit_create \\n\\n\\n\\nCommit changes to repository\\n\\n\\n\\nLibGit2.commit(rb::GitRebase, sig::GitSignature)\\n\\nCommits the current patch to the rebase rb, using sig as the committer. Is silent if the commit has already been applied.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.create_branch\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.create_branch\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.create_branch(repo::GitRepo, bname::AbstractString, commit_obj::GitCommit; force::Bool=false)\\n\\nCreate a new branch in the repository repo with name bname, which points to commit commit_obj (which has to be part of repo). If force is true, overwrite an existing branch named bname if it exists. If force is false and a branch already exists named bname, this function will throw an error.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.credentials_callback\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.credentials_callback\",\n    \"category\": \"Function\",\n    \"text\": \"Credentials callback function\\n\\nFunction provides different credential acquisition functionality w.r.t. a connection protocol. If a payload is provided then payload_ptr should contain a LibGit2.AbstractCredentials object.\\n\\nFor LibGit2.Consts.CREDTYPE_USERPASS_PLAINTEXT type, if the payload contains fields: user & pass, they are used to create authentication credentials. Empty user name and password trigger an authentication error.\\n\\nFor LibGit2.Consts.CREDTYPE_SSH_KEY type, if the payload contains fields: user, prvkey, pubkey & pass, they are used to create authentication credentials. Empty user name triggers an authentication error.\\n\\nCredentials are checked in the following order (if supported):\\n\\nssh key pair (ssh-agent if specified in payload's usesshagent field)\\nplain text\\n\\nNote: Due to the specifics of the libgit2 authentication procedure, when authentication fails, this function is called again without any indication whether authentication was successful or not. To avoid an infinite loop from repeatedly using the same faulty credentials, the checkused! function can be called. This function returns true if the credentials were used. Using credentials triggers a user prompt for (re)entering required information. UserPasswordCredentials and CachedCredentials are implemented using a call counting strategy that prevents repeated usage of faulty credentials.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.credentials_cb\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.credentials_cb\",\n    \"category\": \"Function\",\n    \"text\": \"C function pointer for credentials_callback\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.default_signature\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.default_signature\",\n    \"category\": \"Function\",\n    \"text\": \"Return signature object. Free it after use.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.delete_branch\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.delete_branch\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.delete_branch(branch::GitReference)\\n\\nDelete the branch pointed to by branch.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.diff_files\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.diff_files\",\n    \"category\": \"Function\",\n    \"text\": \"diff_files(repo::GitRepo, branch1::AbstractString, branch2::AbstractString; kwarg...) -> Vector{AbstractString}\\n\\nShow which files have changed in the git repository repo between branches branch1 and branch2.\\n\\nThe keyword argument is:\\n\\nfilter::Set{Consts.DELTA_STATUS}=Set([Consts.DELTA_ADDED, Consts.DELTA_MODIFIED, Consts.DELTA_DELETED])), and it sets options for the diff. The default is to show files added, modified, or deleted.\\n\\nReturns only the names of the files which have changed, not their contents.\\n\\nExample\\n\\nLibGit2.branch!(repo, \\\"branch/a\\\")\\nLibGit2.branch!(repo, \\\"branch/b\\\")\\n# add a file to repo\\nopen(joinpath(LibGit2.path(repo),\\\"file\\\"),\\\"w\\\") do f\\n    write(f, \\\"hello repo\\n\\\")\\nend\\nLibGit2.add!(repo, \\\"file\\\")\\nLibGit2.commit(repo, \\\"add file\\\")\\n# returns [\\\"file\\\"]\\nfilt = Set([LibGit2.Consts.DELTA_ADDED])\\nfiles = LibGit2.diff_files(repo, \\\"branch/a\\\", \\\"branch/b\\\", filter=filt)\\n# returns [] because existing files weren't modified\\nfilt = Set([LibGit2.Consts.DELTA_MODIFIED])\\nfiles = LibGit2.diff_files(repo, \\\"branch/a\\\", \\\"branch/b\\\", filter=filt)\\n\\nEquivalent to git diff --name-only --diff-filter=<filter> <branch1> <branch2>.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.fetch\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.fetch\",\n    \"category\": \"Function\",\n    \"text\": \"fetch(rmt::GitRemote, refspecs; options::FetchOptions=FetchOptions(), msg=\\\"\\\")\\n\\nFetch from the specified rmt remote git repository, using refspecs to determine which remote branch(es) to fetch. The keyword arguments are:\\n\\noptions: determines the options for the fetch, e.g. whether to prune afterwards.\\nmsg: a message to insert into the reflogs.\\n\\n\\n\\nfetch(repo::GitRepo; kwargs...)\\n\\nFetches updates from an upstream of the repository repo.\\n\\nThe keyword arguments are:\\n\\nremote::AbstractString=\\\"origin\\\": which remote, specified by name, of repo to fetch from. If this is empty, the URL will be used to construct an anonymous remote.\\nremoteurl::AbstractString=\\\"\\\": the URL of remote. If not specified, will be assumed based on the given name of remote.\\nrefspecs=AbstractString[]: determines properties of the fetch.\\npayload=Nullable{AbstractCredentials}(): provides credentials, if necessary, for instance if remote is a private repository.\\n\\nEquivalent to git fetch [<remoteurl>|<repo>] [<refspecs>].\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.fetch_refspecs\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.fetch_refspecs\",\n    \"category\": \"Function\",\n    \"text\": \"fetch_refspecs(rmt::GitRemote) -> Vector{String}\\n\\nGet the fetch refspecs for the specified rmt. These refspecs contain information about which branch(es) to fetch from.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.fetchhead_foreach_cb\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.fetchhead_foreach_cb\",\n    \"category\": \"Function\",\n    \"text\": \"C function pointer for fetchhead_foreach_callback\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.ffmerge!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.ffmerge!\",\n    \"category\": \"Function\",\n    \"text\": \"Fastforward merge changes into current head \\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.fullname\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.fullname\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.fullname(ref::GitReference)\\n\\nReturn the name of the reference pointed to by the symbolic reference ref. If ref is not a symbolic reference, returns an empty string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.get_creds!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.get_creds!\",\n    \"category\": \"Function\",\n    \"text\": \"Obtain the cached credentials for the given host+protocol (credid), or return and store the default if not found\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.gitdir\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.gitdir\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.gitdir(repo::GitRepo)\\n\\nReturns the location of the \\\"git\\\" files of repo:\\n\\nfor normal repositories, this is the location of the .git folder.\\nfor bare repositories, this is the location of the repository itself.\\n\\nSee also workdir, path.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.head\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.head\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.head(repo::GitRepo) -> GitReference\\n\\nReturns a GitReference to the current HEAD of repo.\\n\\n\\n\\nhead(pkg::AbstractString) -> String\\n\\nReturn current HEAD GitHash of the pkg repo as a string.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.head!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.head!\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.head!(repo::GitRepo, ref::GitReference) -> GitReference\\n\\nSet the HEAD of repo to the object pointed to by ref.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.head_oid\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.head_oid\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.head_oid(repo::GitRepo) -> GitHash\\n\\nLookup the object id of the current HEAD of git repository repo.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.headname\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.headname\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.headname(repo::GitRepo)\\n\\nLookup the name of the current HEAD of git repository repo. If repo is currently detached, returns the name of the HEAD it's detached from.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.init\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.init\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.init(path::AbstractString, bare::Bool=false) -> GitRepo\\n\\nOpens a new git repository at path. If bare is false, the working tree will be created in path/.git. If bare is true, no working directory will be created.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.is_ancestor_of\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.is_ancestor_of\",\n    \"category\": \"Function\",\n    \"text\": \"is_ancestor_of(a::AbstractString, b::AbstractString, repo::GitRepo) -> Bool\\n\\nReturns true if a, a GitHash in string form, is an ancestor of b, a GitHash in string form.\\n\\nExample\\n\\njulia> repo = LibGit2.GitRepo(repo_path);\\n\\njulia> LibGit2.add!(repo, test_file1);\\n\\njulia> commit_oid1 = LibGit2.commit(repo, \\\"commit1\\\");\\n\\njulia> LibGit2.add!(repo, test_file2);\\n\\njulia> commit_oid2 = LibGit2.commit(repo, \\\"commit2\\\");\\n\\njulia> LibGit2.is_ancestor_of(string(commit_oid1), string(commit_oid2), repo)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.isbinary\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.isbinary\",\n    \"category\": \"Function\",\n    \"text\": \"Use a heuristic to guess if a file is binary: searching for NULL bytes and looking for a reasonable ratio of printable to non-printable characters among the first 8000 bytes.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.iscommit\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.iscommit\",\n    \"category\": \"Function\",\n    \"text\": \"iscommit(id::AbstractString, repo::GitRepo) -> Bool\\n\\nChecks if commit id (which is a GitHash in string form) is in the repository.\\n\\nExample\\n\\njulia> repo = LibGit2.GitRepo(repo_path);\\n\\njulia> LibGit2.add!(repo, test_file);\\n\\njulia> commit_oid = LibGit2.commit(repo, \\\"add test_file\\\");\\n\\njulia> LibGit2.iscommit(string(commit_oid), repo)\\ntrue\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.isdiff\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.isdiff\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.isdiff(repo::GitRepo, treeish::AbstractString, pathspecs::AbstractString=\\\"\\\"; cached::Bool=false)\\n\\nChecks if there are any differences between the tree specified by treeish and the tracked files in the working tree (if cached=false) or the index (if cached=true). pathspecs are the specifications for options for the diff.\\n\\nExample\\n\\nrepo = LibGit2.GitRepo(repo_path)\\nLibGit2.isdiff(repo, \\\"HEAD\\\") # should be false\\nopen(joinpath(repo_path, new_file), \\\"a\\\") do f\\n    println(f, \\\"here's my cool new file\\\")\\nend\\nLibGit2.isdiff(repo, \\\"HEAD\\\") # now true\\n\\nEquivalent to git diff-index <treeish> [-- <pathspecs>].\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.isdirty\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.isdirty\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.isdirty(repo::GitRepo, pathspecs::AbstractString=\\\"\\\"; cached::Bool=false) -> Bool\\n\\nChecks if there have been any changes to tracked files in the working tree (if cached=false) or the index (if cached=true). pathspecs are the specifications for options for the diff.\\n\\nExample\\n\\nrepo = LibGit2.GitRepo(repo_path)\\nLibGit2.isdirty(repo) # should be false\\nopen(joinpath(repo_path, new_file), \\\"a\\\") do f\\n    println(f, \\\"here's my cool new file\\\")\\nend\\nLibGit2.isdirty(repo) # now true\\nLibGit2.isdirty(repo, new_file) # now true\\n\\nEquivalent to git diff-index HEAD [-- <pathspecs>].\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.isorphan\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.isorphan\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.isorphan(repo::GitRepo)\\n\\nChecks if the current branch is an \\\"orphan\\\" branch, i.e. has no commits. The first commit to this branch will have no parents.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.lookup_branch\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.lookup_branch\",\n    \"category\": \"Function\",\n    \"text\": \"lookup_branch(repo::GitRepo, branch_name::AbstractString, remote::Bool=false) -> Nullable{GitReference}\\n\\nDetermine if the branch specified by branch_name exists in the repository repo. If remote is true, repo is assumed to be a remote git repository. Otherwise, it is part of the local filesystem.\\n\\nlookup_branch returns a Nullable, which will be null if the requested branch does not exist yet. If the branch does exist, the Nullable contains a GitReference to the branch.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.mirror_callback\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.mirror_callback\",\n    \"category\": \"Function\",\n    \"text\": \"Mirror callback function\\n\\nFunction sets +refs/*:refs/* refspecs and mirror flag for remote reference.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.mirror_cb\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.mirror_cb\",\n    \"category\": \"Function\",\n    \"text\": \"C function pointer for mirror_callback\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.name\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.name\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.name(ref::GitReference)\\n\\nReturn the full name of ref.\\n\\n\\n\\nname(rmt::GitRemote)\\n\\nGet the name of a remote repository, for instance \\\"origin\\\". If the remote is anonymous (see GitRemoteAnon) the name will be an empty string \\\"\\\".\\n\\nExample\\n\\njulia> repo_url = \\\"https://github.com/JuliaLang/Example.jl\\\";\\n\\njulia> repo = LibGit2.clone(cache_repo, \\\"test_directory\\\");\\n\\njulia> remote = LibGit2.GitRemote(repo, \\\"origin\\\", repo_url);\\n\\njulia> name(remote)\\n\\\"origin\\\"\\n\\n\\n\\nLibGit2.name(tag::GitTag)\\n\\nThe name of tag (e.g. \\\"v0.5\\\").\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.need_update\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.need_update\",\n    \"category\": \"Function\",\n    \"text\": \"need_update(repo::GitRepo)\\n\\nEquivalent to git update-index. Returns true if repo needs updating.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.objtype\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.objtype\",\n    \"category\": \"Function\",\n    \"text\": \"objtype(obj_type::Consts.OBJECT)\\n\\nReturns the type corresponding to the enum value.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.path\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.path\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.path(repo::GitRepo)\\n\\nThe base file path of the repository repo.\\n\\nfor normal repositories, this will typically be the parent directory of the \\\".git\\\" directory (note: this may be different than the working directory, see workdir for more details).\\nfor bare repositories, this is the location of the \\\"git\\\" files.\\n\\nSee also gitdir, workdir.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.peel\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.peel\",\n    \"category\": \"Function\",\n    \"text\": \"peel([T,] ref::GitReference)\\n\\nRecursively peel ref until an object of type T is obtained. If no T is provided, then ref will be peeled until an object other than a GitTag is obtained.\\n\\nA GitTag will be peeled to the object it references.\\nA GitCommit will be peeled to a GitTree.\\n\\nnote: Note\\nOnly annotated tags can be peeled to GitTag objects. Lightweight tags (the default) are references under refs/tags/ which point directly to GitCommit objects.\\n\\n\\n\\npeel([T,] obj::GitObject)\\n\\nRecursively peel obj until an object of type T is obtained. If no T is provided, then obj will be peeled until the type changes.\\n\\nA GitTag will be peeled to the object it references.\\nA GitCommit will be peeled to a GitTree.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.posixpath\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.posixpath\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.posixpath(path)\\n\\nStandardise the path string path to use POSIX separators.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.push\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.push\",\n    \"category\": \"Function\",\n    \"text\": \"push(rmt::GitRemote, refspecs; force::Bool=false, options::PushOptions=PushOptions())\\n\\nPush to the specified rmt remote git repository, using refspecs to determine which remote branch(es) to push to. The keyword arguments are:\\n\\nforce: if true, a force-push will occur, disregarding conflicts.\\noptions: determines the options for the push, e.g. which proxy headers to use.\\n\\nnote: Note\\nYou can add information about the push refspecs in two other ways: by setting an option in the repository's GitConfig (with push.default as the key) or by calling add_push!. Otherwise you will need to explicitly specify a push refspec in the call to push for it to have any effect, like so: LibGit2.push(repo, refspecs=[\\\"refs/heads/master\\\"]).\\n\\n\\n\\npush(repo::GitRepo; kwargs...)\\n\\nPushes updates to an upstream of repo.\\n\\nThe keyword arguments are:\\n\\nremote::AbstractString=\\\"origin\\\": the name of the upstream remote to push to.\\nremoteurl::AbstractString=\\\"\\\": the URL of remote.\\nrefspecs=AbstractString[]: determines properties of the push.\\nforce::Bool=false: determines if the push will be a force push,  overwriting the remote branch.\\npayload=Nullable{AbstractCredentials}(): provides credentials, if necessary, for instance if remote is a private repository.\\n\\nEquivalent to git push [<remoteurl>|<repo>] [<refspecs>].\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.push_refspecs\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.push_refspecs\",\n    \"category\": \"Function\",\n    \"text\": \"push_refspecs(rmt::GitRemote) -> Vector{String}\\n\\nGet the push refspecs for the specified rmt. These refspecs contain information about which branch(es) to push to.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.read_tree!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.read_tree!\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.read_tree!(idx::GitIndex, tree::GitTree)\\nLibGit2.read_tree!(idx::GitIndex, treehash::AbstractGitHash)\\n\\nRead the tree tree (or the tree pointed to by treehash in the repository owned by idx) into the index idx. The current index contents will be replaced.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.rebase!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.rebase!\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.rebase!(repo::GitRepo, upstream::AbstractString=\\\"\\\", newbase::AbstractString=\\\"\\\")\\n\\nAttempt an automatic merge rebase of the current branch, from upstream if provided, or otherwise from the upstream tracking branch. newbase is the branch to rebase onto. By default this is upstream.\\n\\nIf any conflicts arise which cannot be automatically resolved, the rebase will abort, leaving the repository and working tree in its original state, and the function will throw a GitError. This is roughly equivalent to the following command line statement:\\n\\ngit rebase --merge [<upstream>]\\nif [ -d \\\".git/rebase-merge\\\" ]; then\\n    git rebase --abort\\nfi\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.ref_list\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.ref_list\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.ref_list(repo::GitRepo) -> Vector{String}\\n\\nGet a list of all reference names in the repo repository.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.reftype\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.reftype\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.reftype(ref::GitReference) -> Cint\\n\\nReturns a Cint corresponding to the type of ref:\\n\\n0 if the reference is invalid\\n1 if the reference is an object id\\n2 if the reference is symbolic\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.remotes\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.remotes\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.remotes(repo::GitRepo)\\n\\nReturns a vector of the names of the remotes of repo.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.reset!\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.reset!\",\n    \"category\": \"Function\",\n    \"text\": \"Resets credentials for another use\\n\\n\\n\\nUpdates some entries, determined by the pathspecs, in the index from the target commit tree.\\n\\n\\n\\nSets the current head to the specified commit oid and optionally resets the index and working tree to match.\\n\\n\\n\\ngit reset [<committish>] [\u2013] <pathspecs>... \\n\\n\\n\\nreset!(repo::GitRepo, id::GitHash, mode::Cint = Consts.RESET_MIXED)\\n\\nReset the repository repo to its state at id, using one of three modes set by mode:\\n\\nConsts.RESET_SOFT - move HEAD to id.\\nConsts.RESET_MIXED - default, move HEAD to id and reset the index to id.\\nConsts.RESET_HARD - move HEAD to id, reset the index to id, and discard all working changes.\\n\\nEquivalent to git reset [--soft | --mixed | --hard] <id>.\\n\\nExample\\n\\nrepo = LibGit2.GitRepo(repo_path)\\nhead_oid = LibGit2.head_oid(repo)\\nopen(joinpath(repo_path, \\\"file1\\\"), \\\"w\\\") do f\\n    write(f, \\\"111\\n\\\")\\nend\\nLibGit2.add!(repo, \\\"file1\\\")\\nmode = LibGit2.Consts.RESET_HARD\\n# will discard the changes to file1\\n# and unstage it\\nnew_head = LibGit2.reset!(repo, head_oid, mode)\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.restore\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.restore\",\n    \"category\": \"Function\",\n    \"text\": \"restore(s::State, repo::GitRepo)\\n\\nReturn a repository repo to a previous State s, for example the HEAD of a branch before a merge attempt. s can be generated using the snapshot function.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.revcount\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.revcount\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.revcount(repo::GitRepo, commit1::AbstractString, commit2::AbstractString)\\n\\nList the number of revisions between commit1 and commit2 (committish OIDs in string form). Since commit1 and commit2 may be on different branches, revcount performs a \\\"left-right\\\" revision list (and count), returning a tuple of Ints - the number of left and right commits, respectively. A left (or right) commit refers to which side of a symmetric difference in a tree the commit is reachable from.\\n\\nEquivalent to git rev-list --left-right --count <commit1> <commit2>.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.set_remote_url\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.set_remote_url\",\n    \"category\": \"Function\",\n    \"text\": \"set_remote_url(repo::GitRepo, url::AbstractString; remote::AbstractString=\\\"origin\\\")\\n\\nSet the url for remote for the git repository repo. The default name of the remote is \\\"origin\\\".\\n\\nExamples\\n\\nrepo_path = joinpath(\\\"test_directory\\\", \\\"Example\\\")\\nrepo = LibGit2.init(repo_path)\\nurl1 = \\\"https://github.com/JuliaLang/Example.jl\\\"\\nLibGit2.set_remote_url(repo, url1, remote=\\\"upstream\\\")\\nurl2 = \\\"https://github.com/JuliaLang/Example2.jl\\\"\\nLibGit2.set_remote_url(repo_path, url2, remote=\\\"upstream2\\\")\\n\\n\\n\\nset_remote_url(path::AbstractString, url::AbstractString; remote::AbstractString=\\\"origin\\\")\\n\\nSet the url for remote for the git repository located at path. The default name of the remote is \\\"origin\\\".\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.shortname\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.shortname\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.shortname(ref::GitReference)\\n\\nReturns a shortened version of the name of ref that's \\\"human-readable\\\".\\n\\njulia> repo = LibGit2.GitRepo(path_to_repo);\\n\\njulia> branch_ref = LibGit2.head(repo);\\n\\njulia> LibGit2.name(branch_ref)\\n\\\"refs/heads/master\\\"\\n\\njulia> LibGit2.shortname(branch_ref)\\n\\\"master\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.snapshot\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.snapshot\",\n    \"category\": \"Function\",\n    \"text\": \"snapshot(repo::GitRepo) -> State\\n\\nTake a snapshot of the current state of the repository repo, storing the current HEAD, index, and any uncommitted work. The output State can be used later during a call to restore to return the repository to the snapshotted state.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.status\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.status\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.status(repo::GitRepo, path::String)\\n\\nLookup the status of the file at path in the git repository repo. For instance, this can be used to check if the file at path has been modified and needs to be staged and committed.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.tag_create\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.tag_create\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.tag_create(repo::GitRepo, tag::AbstractString, commit; kwargs...)\\n\\nCreate a new git tag tag (e.g. \\\"v0.5\\\") in the repository repo, at the commit commit.\\n\\nThe keyword arguments are:\\n\\nmsg::AbstractString=\\\"\\\": the message for the tag.\\nforce::Bool=false: if true, existing references will be overwritten.\\nsig::Signature=Signature(repo): the tagger's signature.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.tag_delete\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.tag_delete\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.tag_delete(repo::GitRepo, tag::AbstractString)\\n\\nRemove the git tag tag from the repository repo.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.tag_list\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.tag_list\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.tag_list(repo::GitRepo) -> Vector{String}\\n\\nGet a list of all tags in the git repository repo.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.target\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.target\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.target(tag::GitTag)\\n\\nThe GitHash of the target object of tag.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.treewalk\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.treewalk\",\n    \"category\": \"Function\",\n    \"text\": \"Traverse the entries in a tree and its subtrees in post or pre order.\\n\\nFunction parameter should have following signature:\\n\\n(Cstring, Ptr{Void}, Ptr{Void}) -> Cint\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.upstream\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.upstream\",\n    \"category\": \"Function\",\n    \"text\": \"upstream(ref::GitReference) -> Nullable{GitReference}\\n\\nDetermine if the branch containing ref has a specified upstream branch.\\n\\nupstream returns a Nullable, which will be null if the requested branch does not have an upstream counterpart. If the upstream branch does exist, the Nullable contains a GitReference to the upstream branch.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.url\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.url\",\n    \"category\": \"Function\",\n    \"text\": \"url(rmt::GitRemote)\\n\\nGet the fetch URL of a remote git repository.\\n\\nExample\\n\\njulia> repo_url = \\\"https://github.com/JuliaLang/Example.jl\\\";\\n\\njulia> repo = LibGit2.init(mktempdir());\\n\\njulia> remote = LibGit2.GitRemote(repo, \\\"origin\\\", repo_url);\\n\\njulia> LibGit2.url(remote)\\n\\\"https://github.com/JuliaLang/Example.jl\\\"\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.with\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.with\",\n    \"category\": \"Function\",\n    \"text\": \"Resource management helper function\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Base.LibGit2.workdir\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Base.LibGit2.workdir\",\n    \"category\": \"Function\",\n    \"text\": \"LibGit2.workdir(repo::GitRepo)\\n\\nThe location of the working directory of repo. This will throw an error for bare repositories.\\n\\nnote: Note\\nThis will typically be the parent directory of gitdir(repo), but can be different in some cases: e.g. if either the core.worktree configuration variable or the GIT_WORK_TREE environment variable is set.\\n\\nSee also gitdir, path.\\n\\n\\n\\n\"\n},\n\n{\n    \"location\": \"devdocs/libgit2.html#Functionality-1\",\n    \"page\": \"Base.LibGit2\",\n    \"title\": \"Functionality\",\n    \"category\": \"section\",\n    \"text\": \"Some of this documentation assumes some prior knowledge of the libgit2 API. For more information on some of the objects and methods referenced here, consult the upstream libgit2 API reference.Base.LibGit2.AbstractCredentials\\nBase.LibGit2.Buffer\\nBase.LibGit2.CachedCredentials\\nBase.LibGit2.CheckoutOptions\\nBase.LibGit2.CloneOptions\\nBase.LibGit2.DiffDelta\\nBase.LibGit2.DiffFile\\nBase.LibGit2.DiffOptionsStruct\\nBase.LibGit2.FetchHead\\nBase.LibGit2.FetchOptions\\nBase.LibGit2.GitBlob\\nBase.LibGit2.GitCommit\\nBase.LibGit2.GitHash\\nBase.LibGit2.GitObject\\nBase.LibGit2.GitRemote\\nBase.LibGit2.GitRemoteAnon\\nBase.LibGit2.GitRepo\\nBase.LibGit2.GitRepoExt\\nBase.LibGit2.GitShortHash\\nBase.LibGit2.GitSignature\\nBase.LibGit2.GitStatus\\nBase.LibGit2.GitTag\\nBase.LibGit2.GitTree\\nBase.LibGit2.IndexEntry\\nBase.LibGit2.IndexTime\\nBase.LibGit2.MergeOptions\\nBase.LibGit2.ProxyOptions\\nBase.LibGit2.PushOptions\\nBase.LibGit2.RebaseOperation\\nBase.LibGit2.RebaseOptions\\nBase.LibGit2.RemoteCallbacks\\nBase.LibGit2.SSHCredentials\\nBase.LibGit2.SignatureStruct\\nBase.LibGit2.StatusEntry\\nBase.LibGit2.StatusOptions\\nBase.LibGit2.StrArrayStruct\\nBase.LibGit2.TimeStruct\\nBase.LibGit2.UserPasswordCredentials\\nBase.LibGit2.add_fetch!\\nBase.LibGit2.add_push!\\nBase.LibGit2.addblob!\\nBase.LibGit2.authors\\nBase.LibGit2.branch\\nBase.LibGit2.branch!\\nBase.LibGit2.checkout!\\nBase.LibGit2.checkused!\\nBase.LibGit2.clone\\nBase.LibGit2.commit\\nBase.LibGit2.create_branch\\nBase.LibGit2.credentials_callback\\nBase.LibGit2.credentials_cb\\nBase.LibGit2.default_signature\\nBase.LibGit2.delete_branch\\nBase.LibGit2.diff_files\\nBase.LibGit2.fetch\\nBase.LibGit2.fetch_refspecs\\nBase.LibGit2.fetchhead_foreach_cb\\nBase.LibGit2.ffmerge!\\nBase.LibGit2.fullname\\nBase.LibGit2.get_creds!\\nBase.LibGit2.gitdir\\nBase.LibGit2.head\\nBase.LibGit2.head!\\nBase.LibGit2.head_oid\\nBase.LibGit2.headname\\nBase.LibGit2.init\\nBase.LibGit2.is_ancestor_of\\nBase.LibGit2.isbinary\\nBase.LibGit2.iscommit\\nBase.LibGit2.isdiff\\nBase.LibGit2.isdirty\\nBase.LibGit2.isorphan\\nBase.LibGit2.lookup_branch\\nBase.LibGit2.mirror_callback\\nBase.LibGit2.mirror_cb\\nBase.LibGit2.name\\nBase.LibGit2.need_update\\nBase.LibGit2.objtype\\nBase.LibGit2.path\\nBase.LibGit2.peel\\nBase.LibGit2.posixpath\\nBase.LibGit2.push\\nBase.LibGit2.push_refspecs\\nBase.LibGit2.read_tree!\\nBase.LibGit2.rebase!\\nBase.LibGit2.ref_list\\nBase.LibGit2.reftype\\nBase.LibGit2.remotes\\nBase.LibGit2.reset!\\nBase.LibGit2.restore\\nBase.LibGit2.revcount\\nBase.LibGit2.set_remote_url\\nBase.LibGit2.shortname\\nBase.LibGit2.snapshot\\nBase.LibGit2.status\\nBase.LibGit2.tag_create\\nBase.LibGit2.tag_delete\\nBase.LibGit2.tag_list\\nBase.LibGit2.target\\nBase.LibGit2.treewalk\\nBase.LibGit2.upstream\\nBase.LibGit2.url\\nBase.LibGit2.with\\nBase.LibGit2.workdir\"\n},\n\n{\n    \"location\": \"devdocs/require.html#\",\n    \"page\": \"Module loading\",\n    \"title\": \"Module loading\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/require.html#Module-loading-1\",\n    \"page\": \"Module loading\",\n    \"title\": \"Module loading\",\n    \"category\": \"section\",\n    \"text\": \"Base.require[@ref] is responsible for loading modules and it also manages the precompilation cache. It is the implementation of the import statement.\"\n},\n\n{\n    \"location\": \"devdocs/require.html#Experimental-features-1\",\n    \"page\": \"Module loading\",\n    \"title\": \"Experimental features\",\n    \"category\": \"section\",\n    \"text\": \"The features below are experimental and not part of the stable Julia API. Before building upon them inform yourself about the current thinking and whether they might change soon.\"\n},\n\n{\n    \"location\": \"devdocs/require.html#Module-loading-callbacks-1\",\n    \"page\": \"Module loading\",\n    \"title\": \"Module loading callbacks\",\n    \"category\": \"section\",\n    \"text\": \"It is possible to listen to the modules loaded by Base.require, by registering a callback.loaded_packages = Channel{Symbol}()\\ncallback = (mod::Symbol) -> put!(loaded_packages, mod)\\npush!(Base.package_callbacks, callback)Please note that the symbol given to the callback is a non-unique identifier and it is the responsibility of the callback provider to walk the module chain to determine the fully qualified name of the loaded binding.The callback below is an example of how to do that:# Get the fully-qualified name of a module.\\nfunction module_fqn(name::Symbol)\\n    fqn = Symbol[name]\\n    mod = getfield(Main, name)\\n    parent = Base.module_parent(mod)\\n    while parent !== Main\\n        push!(fqn, Base.module_name(parent))\\n        parent = Base.module_parent(parent)\\n    end\\n    fqn = reverse!(fqn)\\n    return join(fqn, '.')\\nend\"\n},\n\n{\n    \"location\": \"devdocs/backtraces.html#\",\n    \"page\": \"Reporting and analyzing crashes (segfaults)\",\n    \"title\": \"Reporting and analyzing crashes (segfaults)\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/backtraces.html#Reporting-and-analyzing-crashes-(segfaults)-1\",\n    \"page\": \"Reporting and analyzing crashes (segfaults)\",\n    \"title\": \"Reporting and analyzing crashes (segfaults)\",\n    \"category\": \"section\",\n    \"text\": \"So you managed to break Julia.  Congratulations!  Collected here are some general procedures you can undergo for common symptoms encountered when something goes awry.  Including the information from these debugging steps can greatly help the maintainers when tracking down a segfault or trying to figure out why your script is running slower than expected.If you've been directed to this page, find the symptom that best matches what you're experiencing and follow the instructions to generate the debugging information requested.  Table of symptoms:Segfaults during bootstrap (sysimg.jl)\\nSegfaults when running a script\\nErrors during Julia startup\"\n},\n\n{\n    \"location\": \"devdocs/backtraces.html#dev-version-info-1\",\n    \"page\": \"Reporting and analyzing crashes (segfaults)\",\n    \"title\": \"Version/Environment info\",\n    \"category\": \"section\",\n    \"text\": \"No matter the error, we will always need to know what version of Julia you are running. When Julia first starts up, a header is printed out with a version number and date.  If your version is 0.2.0 or higher, please include the output of versioninfo() in any report you create:versioninfo()\"\n},\n\n{\n    \"location\": \"devdocs/backtraces.html#Segfaults-during-bootstrap-(sysimg.jl)-1\",\n    \"page\": \"Reporting and analyzing crashes (segfaults)\",\n    \"title\": \"Segfaults during bootstrap (sysimg.jl)\",\n    \"category\": \"section\",\n    \"text\": \"Segfaults toward the end of the make process of building Julia are a common symptom of something going wrong while Julia is preparsing the corpus of code in the base/ folder.  Many factors can contribute toward this process dying unexpectedly, however it is as often as not due to an error in the C-code portion of Julia, and as such must typically be debugged with a debug build inside of gdb.  Explicitly:Create a debug build of Julia:$ cd <julia_root>\\n$ make debugNote that this process will likely fail with the same error as a normal make incantation, however this will create a debug executable that will offer gdb the debugging symbols needed to get accurate backtraces.  Next, manually run the bootstrap process inside of gdb:$ cd base/\\n$ gdb -x ../contrib/debug_bootstrap.gdbThis will start gdb, attempt to run the bootstrap process using the debug build of Julia, and print out a backtrace if (when) it segfaults.  You may need to hit <enter> a few times to get the full backtrace.  Create a gist with the backtrace, the version info, and any other pertinent information you can think of and open a new issue on Github with a link to the gist.\"\n},\n\n{\n    \"location\": \"devdocs/backtraces.html#Segfaults-when-running-a-script-1\",\n    \"page\": \"Reporting and analyzing crashes (segfaults)\",\n    \"title\": \"Segfaults when running a script\",\n    \"category\": \"section\",\n    \"text\": \"The procedure is very similar to Segfaults during bootstrap (sysimg.jl).  Create a debug build of Julia, and run your script inside of a debugged Julia process:$ cd <julia_root>\\n$ make debug\\n$ gdb --args usr/bin/julia-debug <path_to_your_script>Note that gdb will sit there, waiting for instructions.  Type r to run the process, and bt to generate a backtrace once it segfaults:(gdb) r\\nStarting program: /home/sabae/src/julia/usr/bin/julia-debug ./test.jl\\n...\\n(gdb) btCreate a gist with the backtrace, the version info, and any other pertinent information you can think of and open a new issue on Github with a link to the gist.\"\n},\n\n{\n    \"location\": \"devdocs/backtraces.html#Errors-during-Julia-startup-1\",\n    \"page\": \"Reporting and analyzing crashes (segfaults)\",\n    \"title\": \"Errors during Julia startup\",\n    \"category\": \"section\",\n    \"text\": \"Occasionally errors occur during Julia's startup process (especially when using binary distributions, as opposed to compiling from source) such as the following:$ julia\\nexec: error -5These errors typically indicate something is not getting loaded properly very early on in the bootup phase, and our best bet in determining what's going wrong is to use external tools to audit the disk activity of the julia process:On Linux, use strace:\\n$ strace julia\\nOn OSX, use dtruss:\\n$ dtruss -f juliaCreate a gist with the strace/ dtruss ouput, the version info, and any other pertinent information and open a new issue on Github with a link to the gist.\"\n},\n\n{\n    \"location\": \"devdocs/backtraces.html#Glossary-1\",\n    \"page\": \"Reporting and analyzing crashes (segfaults)\",\n    \"title\": \"Glossary\",\n    \"category\": \"section\",\n    \"text\": \"A few terms have been used as shorthand in this guide:<julia_root> refers to the root directory of the Julia source tree; e.g. it should contain folders such as base, deps, src, test, etc.....\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"gdb debugging tips\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#gdb-debugging-tips-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"gdb debugging tips\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Displaying-Julia-variables-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Displaying Julia variables\",\n    \"category\": \"section\",\n    \"text\": \"Within gdb, any jl_value_t* object obj can be displayed using(gdb) call jl_(obj)The object will be displayed in the julia session, not in the gdb session. This is a useful way to discover the types and values of objects being manipulated by Julia's C code.Similarly, if you're debugging some of Julia's internals (e.g., inference.jl), you can print obj usingccall(:jl_, Void, (Any,), obj)This is a good way to circumvent problems that arise from the order in which julia's output streams are initialized.Julia's flisp interpreter uses value_t objects; these can be displayed with call fl_print(fl_ctx, ios_stdout, obj).\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Useful-Julia-variables-for-Inspecting-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Useful Julia variables for Inspecting\",\n    \"category\": \"section\",\n    \"text\": \"While the addresses of many variables, like singletons, can be be useful to print for many failures, there are a number of additional variables (see julia.h for a complete list) that are even more useful.(when in jl_apply_generic) mfunc and jl_uncompress_ast(mfunc->def, mfunc->code) :: for figuring out a bit about the call-stack\\njl_lineno and jl_filename :: for figuring out what line in a test to go start debugging from (or figure out how far into a file has been parsed)\\n$1 :: not really a variable, but still a useful shorthand for referring to the result of the last gdb command (such as print)\\njl_options :: sometimes useful, since it lists all of the command line options that were successfully parsed\\njl_uv_stderr :: because who doesn't like to be able to interact with stdio\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Useful-Julia-functions-for-Inspecting-those-variables-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Useful Julia functions for Inspecting those variables\",\n    \"category\": \"section\",\n    \"text\": \"jl_gdblookup($rip) :: For looking up the current function and line. (use $eip on i686 platforms)\\njlbacktrace() :: For dumping the current Julia backtrace stack to stderr. Only usable after record_backtrace() has been called.\\njl_dump_llvm_value(Value*) :: For invoking Value->dump() in gdb, where it doesn't work natively. For example, f->linfo->functionObject, f->linfo->specFunctionObject, and to_function(f->linfo).\\nType->dump() :: only works in lldb. Note: add something like ;1 to prevent lldb from printing its prompt over the output\\njl_eval_string(\\\"expr\\\") :: for invoking side-effects to modify the current state or to lookup symbols\\njl_typeof(jl_value_t*) :: for extracting the type tag of a Julia value (in gdb, call macro define jl_typeof jl_typeof first, or pick something short like ty for the first arg to define a shorthand)\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Inserting-breakpoints-for-inspection-from-gdb-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Inserting breakpoints for inspection from gdb\",\n    \"category\": \"section\",\n    \"text\": \"In your gdb session, set a breakpoint in jl_breakpoint like so:(gdb) break jl_breakpointThen within your Julia code, insert a call to jl_breakpoint by addingccall(:jl_breakpoint, Void, (Any,), obj)where obj can be any variable or tuple you want to be accessible in the breakpoint.It's particularly helpful to back up to the jl_apply frame, from which you can display the arguments to a function using, e.g.,(gdb) call jl_(args[0])Another useful frame is to_function(jl_method_instance_t *li, bool cstyle). The jl_method_instance_t* argument is a struct with a reference to the final AST sent into the compiler. However, the AST at this point will usually be compressed; to view the AST, call jl_uncompress_ast and then pass the result to jl_:#2  0x00007ffff7928bf7 in to_function (li=0x2812060, cstyle=false) at codegen.cpp:584\\n584          abort();\\n(gdb) p jl_(jl_uncompress_ast(li, li->ast))\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Inserting-breakpoints-upon-certain-conditions-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Inserting breakpoints upon certain conditions\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Loading-a-particular-file-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Loading a particular file\",\n    \"category\": \"section\",\n    \"text\": \"Let's say the file is sysimg.jl:(gdb) break jl_load if strcmp(fname, \\\"sysimg.jl\\\")==0\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Calling-a-particular-method-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Calling a particular method\",\n    \"category\": \"section\",\n    \"text\": \"(gdb) break jl_apply_generic if strcmp((char*)(jl_symbol_name)(jl_gf_mtable(F)->name), \\\"method_to_break\\\")==0Since this function is used for every call, you will make everything 1000x slower if you do this.\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Dealing-with-signals-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Dealing with signals\",\n    \"category\": \"section\",\n    \"text\": \"Julia requires a few signal to function property. The profiler uses SIGUSR2 for sampling and the garbage collector uses SIGSEGV for threads synchronization. If you are debugging some code that uses the profiler or multiple threads, you may want to let the debugger ignore these signals since they can be triggered very often during normal operations. The command to do this in GDB is (replace SIGSEGV with SIGUSRS or other signals you want to ignore):(gdb) handle SIGSEGV noprint nostop passThe corresponding LLDB command is (after the process is started):(lldb) pro hand -p true -s false -n false SIGSEGVIf you are debugging a segfault with threaded code, you can set a breakpoint on jl_critical_error (sigdie_handler should also work on Linux and BSD) in order to only catch the actual segfault rather than the GC synchronization points.\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Debugging-during-Julia's-build-process-(bootstrap)-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Debugging during Julia's build process (bootstrap)\",\n    \"category\": \"section\",\n    \"text\": \"Errors that occur during make need special handling. Julia is built in two stages, constructing sys0 and sys.ji. To see what commands are running at the time of failure, use make VERBOSE=1.At the time of this writing, you can debug build errors during the sys0 phase from the base directory using:julia/base$ gdb --args ../usr/bin/julia-debug -C native --build ../usr/lib/julia/sys0 sysimg.jlYou might need to delete all the files in usr/lib/julia/ to get this to work.You can debug the sys.ji phase using:julia/base$ gdb --args ../usr/bin/julia-debug -C native --build ../usr/lib/julia/sys -J ../usr/lib/julia/sys0.ji sysimg.jlBy default, any errors will cause Julia to exit, even under gdb. To catch an error \\\"in the act\\\", set a breakpoint in jl_error (there are several other useful spots, for specific kinds of failures, including: jl_too_few_args, jl_too_many_args, and jl_throw).Once an error is caught, a useful technique is to walk up the stack and examine the function by inspecting the related call to jl_apply. To take a real-world example:Breakpoint 1, jl_throw (e=0x7ffdf42de400) at task.c:802\\n802 {\\n(gdb) p jl_(e)\\nErrorException(\\\"auto_unbox: unable to determine argument type\\\")\\n$2 = void\\n(gdb) bt 10\\n#0  jl_throw (e=0x7ffdf42de400) at task.c:802\\n#1  0x00007ffff65412fe in jl_error (str=0x7ffde56be000 <_j_str267> \\\"auto_unbox:\\n   unable to determine argument type\\\")\\n   at builtins.c:39\\n#2  0x00007ffde56bd01a in julia_convert_16886 ()\\n#3  0x00007ffff6541154 in jl_apply (f=0x7ffdf367f630, args=0x7fffffffc2b0, nargs=2) at julia.h:1281\\n...The most recent jl_apply is at frame #3, so we can go back there and look at the AST for the function julia_convert_16886. This is the uniqued name for some method of convert. f in this frame is a jl_function_t*, so we can look at the type signature, if any, from the specTypes field:(gdb) f 3\\n#3  0x00007ffff6541154 in jl_apply (f=0x7ffdf367f630, args=0x7fffffffc2b0, nargs=2) at julia.h:1281\\n1281            return f->fptr((jl_value_t*)f, args, nargs);\\n(gdb) p f->linfo->specTypes\\n$4 = (jl_tupletype_t *) 0x7ffdf39b1030\\n(gdb) p jl_( f->linfo->specTypes )\\nTuple{Type{Float32}, Float64}           # <-- type signature for julia_convert_16886Then, we can look at the AST for this function:(gdb) p jl_( jl_uncompress_ast(f->linfo, f->linfo->ast) )\\nExpr(:lambda, Array{Any, 1}[:#s29, :x], Array{Any, 1}[Array{Any, 1}[], Array{Any, 1}[Array{Any, 1}[:#s29, :Any, 0], Array{Any, 1}[:x, :Any, 0]], Array{Any, 1}[], 0], Expr(:body,\\nExpr(:line, 90, :float.jl)::Any,\\nExpr(:return, Expr(:call, :box, :Float32, Expr(:call, :fptrunc, :Float32, :x)::Any)::Any)::Any)::Any)::AnyFinally, and perhaps most usefully, we can force the function to be recompiled in order to step through the codegen process. To do this, clear the cached functionObject from the jl_lamdbda_info_t*:(gdb) p f->linfo->functionObject\\n$8 = (void *) 0x1289d070\\n(gdb) set f->linfo->functionObject = NULLThen, set a breakpoint somewhere useful (e.g. emit_function, emit_expr, emit_call, etc.), and run codegen:(gdb) p jl_compile(f)\\n... # your breakpoint here\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Debugging-precompilation-errors-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Debugging precompilation errors\",\n    \"category\": \"section\",\n    \"text\": \"Module precompilation spawns a separate Julia process to precompile each module. Setting a breakpoint or catching failures in a precompile worker requires attaching a debugger to the worker. The easiest approach is to set the debugger watch for new process launches matching a given name. For example:(gdb) attach -w -n julia-debugor:(lldb) process attach -w -n julia-debugThen run a script/command to start precompilation. As described earlier, use conditional breakpoints in the parent process to catch specific file-loading events and narrow the debugging window. (some operating systems may require alternative approaches, such as following each fork from the parent process)\"\n},\n\n{\n    \"location\": \"devdocs/debuggingtips.html#Mozilla's-Record-and-Replay-Framework-(rr)-1\",\n    \"page\": \"gdb debugging tips\",\n    \"title\": \"Mozilla's Record and Replay Framework (rr)\",\n    \"category\": \"section\",\n    \"text\": \"Julia now works out of the box with rr, the lightweight recording and deterministic debugging framework from Mozilla. This allows you to replay the trace of an execution deterministically.  The replayed execution's address spaces, register contents, syscall data etc are exactly the same in every run.A recent version of rr (3.1.0 or higher) is required.\"\n},\n\n{\n    \"location\": \"devdocs/valgrind.html#\",\n    \"page\": \"Using Valgrind with Julia\",\n    \"title\": \"Using Valgrind with Julia\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/valgrind.html#Using-Valgrind-with-Julia-1\",\n    \"page\": \"Using Valgrind with Julia\",\n    \"title\": \"Using Valgrind with Julia\",\n    \"category\": \"section\",\n    \"text\": \"Valgrind is a tool for memory debugging, memory leak detection, and profiling.  This section describes things to keep in mind when using Valgrind to debug memory issues with Julia.\"\n},\n\n{\n    \"location\": \"devdocs/valgrind.html#General-considerations-1\",\n    \"page\": \"Using Valgrind with Julia\",\n    \"title\": \"General considerations\",\n    \"category\": \"section\",\n    \"text\": \"By default, Valgrind assumes that there is no self modifying code in the programs it runs.  This assumption works fine in most instances but fails miserably for a just-in-time compiler like julia.  For this reason it is crucial to pass --smc-check=all-non-file to valgrind, else code may crash or behave unexpectedly (often in subtle ways).In some cases, to better detect memory errors using Valgrind it can help to compile julia with memory pools disabled.  The compile-time flag MEMDEBUG disables memory pools in Julia, and MEMDEBUG2 disables memory pools in FemtoLisp.  To build julia with both flags, add the following line to Make.user:CFLAGS = -DMEMDEBUG -DMEMDEBUG2Another thing to note: if your program uses multiple workers processes, it is likely that you want all such worker processes to run under Valgrind, not just the parent process.  To do this, pass --trace-children=yes to valgrind.\"\n},\n\n{\n    \"location\": \"devdocs/valgrind.html#Suppressions-1\",\n    \"page\": \"Using Valgrind with Julia\",\n    \"title\": \"Suppressions\",\n    \"category\": \"section\",\n    \"text\": \"Valgrind will typically display spurious warnings as it runs.  To reduce the number of such warnings, it helps to provide a suppressions file to Valgrind.  A sample suppressions file is included in the Julia source distribution at contrib/valgrind-julia.supp.The suppressions file can be used from the julia/ source directory as follows:$ valgrind --smc-check=all-non-file --suppressions=contrib/valgrind-julia.supp ./julia progname.jlAny memory errors that are displayed should either be reported as bugs or contributed as additional suppressions.  Note that some versions of Valgrind are shipped with insufficient default suppressions, so that may be one thing to consider before submitting any bugs.\"\n},\n\n{\n    \"location\": \"devdocs/valgrind.html#Running-the-Julia-test-suite-under-Valgrind-1\",\n    \"page\": \"Using Valgrind with Julia\",\n    \"title\": \"Running the Julia test suite under Valgrind\",\n    \"category\": \"section\",\n    \"text\": \"It is possible to run the entire Julia test suite under Valgrind, but it does take quite some time (typically several hours).  To do so, run the following command from the julia/test/ directory:valgrind --smc-check=all-non-file --trace-children=yes --suppressions=$PWD/../contrib/valgrind-julia.supp ../julia runtests.jl allIf you would like to see a report of \\\"definite\\\" memory leaks, pass the flags --leak-check=full --show-leak-kinds=definite to valgrind as well.\"\n},\n\n{\n    \"location\": \"devdocs/valgrind.html#Caveats-1\",\n    \"page\": \"Using Valgrind with Julia\",\n    \"title\": \"Caveats\",\n    \"category\": \"section\",\n    \"text\": \"Valgrind currently does not support multiple rounding modes, so code that adjusts the rounding mode will behave differently when run under Valgrind.In general, if after setting --smc-check=all-non-file you find that your program behaves differently when run under Valgrind, it may help to pass --tool=none to valgrind as you investigate further.  This will enable the minimal Valgrind machinery but will also run much faster than when the full memory checker is enabled.\"\n},\n\n{\n    \"location\": \"devdocs/sanitizers.html#\",\n    \"page\": \"Sanitizer support\",\n    \"title\": \"Sanitizer support\",\n    \"category\": \"page\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/sanitizers.html#Sanitizer-support-1\",\n    \"page\": \"Sanitizer support\",\n    \"title\": \"Sanitizer support\",\n    \"category\": \"section\",\n    \"text\": \"\"\n},\n\n{\n    \"location\": \"devdocs/sanitizers.html#General-considerations-1\",\n    \"page\": \"Sanitizer support\",\n    \"title\": \"General considerations\",\n    \"category\": \"section\",\n    \"text\": \"Using Clang's sanitizers obviously require you to use Clang (USECLANG=1), but there's another catch: most sanitizers require a run-time library, provided by the host compiler, while the instrumented code generated by Julia's JIT relies on functionality from that library. This implies that the LLVM version of your host compiler matches that of the LLVM library used within Julia.An easy solution is to have an dedicated build folder for providing a matching toolchain, by building with BUILD_LLVM_CLANG=1 and overriding LLVM_USE_CMAKE=1 (Autotool-based builds are incompatible with ASAN). You can then refer to this toolchain from another build folder by specifying USECLANG=1 while overriding the CC and CXX variables.\"\n},\n\n{\n    \"location\": \"devdocs/sanitizers.html#Address-Sanitizer-(ASAN)-1\",\n    \"page\": \"Sanitizer support\",\n    \"title\": \"Address Sanitizer (ASAN)\",\n    \"category\": \"section\",\n    \"text\": \"For detecting or debugging memory bugs, you can use Clang's address sanitizer (ASAN). By compiling with SANITIZE=1 you enable ASAN for the Julia compiler and its generated code. In addition, you can specify LLVM_SANITIZE=1 to sanitize the LLVM library as well. Note that these options incur a high performance and memory cost. For example, using ASAN for Julia and LLVM makes testall1 takes 8-10 times as long while using 20 times as much memory (this can be reduced to respectively a factor of 3 and 4 by using the options described below).By default, Julia sets the allow_user_segv_handler=1 ASAN flag, which is required for signal delivery to work properly. You can define other options using the ASAN_OPTIONS environment flag, in which case you'll need to repeat the default option mentioned before. For example, memory usage can be reduced by specifying fast_unwind_on_malloc=0 and malloc_context_size=2, at the cost of backtrace accuracy. For now, Julia also sets detect_leaks=0, but this should be removed in the future.\"\n},\n\n{\n    \"location\": \"devdocs/sanitizers.html#Memory-Sanitizer-(MSAN)-1\",\n    \"page\": \"Sanitizer support\",\n    \"title\": \"Memory Sanitizer (MSAN)\",\n    \"category\": \"section\",\n    \"text\": \"For detecting use of uninitialized memory, you can use Clang's memory sanitizer (MSAN) by compiling with SANITIZE_MEMORY=1.\"\n},\n\n]}\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/_build/html/en/manual/calling-c-and-fortran-code.html": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"UTF-8\"/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/><title>Calling C and Fortran Code \u00b7 The Julia Language</title><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-28835595-6', 'auto');\nga('send', 'pageview');\n</script><link href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.min.css\" rel=\"stylesheet\" type=\"text/css\"/><link href=\"https://fonts.googleapis.com/css?family=Lato|Roboto+Mono\" rel=\"stylesheet\" type=\"text/css\"/><link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"/><script>documenterBaseURL=\"..\"</script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.2.0/require.min.js\" data-main=\"../assets/documenter.js\"></script><script src=\"../siteinfo.js\"></script><script src=\"../../versions.js\"></script><link href=\"../assets/highlightjs/default.css\" rel=\"stylesheet\" type=\"text/css\"/><link href=\"../assets/documenter.css\" rel=\"stylesheet\" type=\"text/css\"/></head><body><nav class=\"toc\"><a href=\"../index.html\"><img class=\"logo\" src=\"../assets/logo.png\" alt=\"The Julia Language logo\"/></a><h1>The Julia Language</h1><select id=\"version-selector\" onChange=\"window.location.href=this.value\" style=\"visibility: hidden\"></select><form class=\"search\" action=\"../search.html\"><input id=\"search-query\" name=\"q\" type=\"text\" placeholder=\"Search docs\"/></form><ul><li><a class=\"toctext\" href=\"../index.html\">Home</a></li><li><span class=\"toctext\">Manual</span><ul><li><a class=\"toctext\" href=\"introduction.html\">Introduction</a></li><li><a class=\"toctext\" href=\"getting-started.html\">Getting Started</a></li><li><a class=\"toctext\" href=\"variables.html\">Variables</a></li><li><a class=\"toctext\" href=\"integers-and-floating-point-numbers.html\">Integers and Floating-Point Numbers</a></li><li><a class=\"toctext\" href=\"mathematical-operations.html\">Mathematical Operations and Elementary Functions</a></li><li><a class=\"toctext\" href=\"complex-and-rational-numbers.html\">Complex and Rational Numbers</a></li><li><a class=\"toctext\" href=\"strings.html\">Strings</a></li><li><a class=\"toctext\" href=\"functions.html\">Functions</a></li><li><a class=\"toctext\" href=\"control-flow.html\">Control Flow</a></li><li><a class=\"toctext\" href=\"variables-and-scoping.html\">Scope of Variables</a></li><li><a class=\"toctext\" href=\"types.html\">Types</a></li><li><a class=\"toctext\" href=\"methods.html\">Methods</a></li><li><a class=\"toctext\" href=\"constructors.html\">Constructors</a></li><li><a class=\"toctext\" href=\"conversion-and-promotion.html\">Conversion and Promotion</a></li><li><a class=\"toctext\" href=\"interfaces.html\">Interfaces</a></li><li><a class=\"toctext\" href=\"modules.html\">Modules</a></li><li><a class=\"toctext\" href=\"documentation.html\">Documentation</a></li><li><a class=\"toctext\" href=\"metaprogramming.html\">Metaprogramming</a></li><li><a class=\"toctext\" href=\"arrays.html\">Multi-dimensional Arrays</a></li><li><a class=\"toctext\" href=\"linear-algebra.html\">Linear algebra</a></li><li><a class=\"toctext\" href=\"networking-and-streams.html\">Networking and Streams</a></li><li><a class=\"toctext\" href=\"parallel-computing.html\">Parallel Computing</a></li><li><a class=\"toctext\" href=\"dates.html\">Date and DateTime</a></li><li><a class=\"toctext\" href=\"interacting-with-julia.html\">Interacting With Julia</a></li><li><a class=\"toctext\" href=\"running-external-programs.html\">Running External Programs</a></li><li class=\"current\"><a class=\"toctext\" href=\"calling-c-and-fortran-code.html\">Calling C and Fortran Code</a><ul class=\"internal\"><li><a class=\"toctext\" href=\"#Creating-C-Compatible-Julia-Function-Pointers-1\">Creating C-Compatible Julia Function Pointers</a></li><li><a class=\"toctext\" href=\"#Mapping-C-Types-to-Julia-1\">Mapping C Types to Julia</a></li><li><a class=\"toctext\" href=\"#Mapping-C-Functions-to-Julia-1\">Mapping C Functions to Julia</a></li><li><a class=\"toctext\" href=\"#Some-Examples-of-C-Wrappers-1\">Some Examples of C Wrappers</a></li><li><a class=\"toctext\" href=\"#Garbage-Collection-Safety-1\">Garbage Collection Safety</a></li><li><a class=\"toctext\" href=\"#Non-constant-Function-Specifications-1\">Non-constant Function Specifications</a></li><li><a class=\"toctext\" href=\"#Indirect-Calls-1\">Indirect Calls</a></li><li><a class=\"toctext\" href=\"#Calling-Convention-1\">Calling Convention</a></li><li><a class=\"toctext\" href=\"#Accessing-Global-Variables-1\">Accessing Global Variables</a></li><li><a class=\"toctext\" href=\"#Accessing-Data-through-a-Pointer-1\">Accessing Data through a Pointer</a></li><li><a class=\"toctext\" href=\"#Thread-safety-1\">Thread-safety</a></li><li><a class=\"toctext\" href=\"#More-About-Callbacks-1\">More About Callbacks</a></li><li><a class=\"toctext\" href=\"#C-1\">C++</a></li></ul></li><li><a class=\"toctext\" href=\"handling-operating-system-variation.html\">Handling Operating System Variation</a></li><li><a class=\"toctext\" href=\"environment-variables.html\">Environment Variables</a></li><li><a class=\"toctext\" href=\"embedding.html\">Embedding Julia</a></li><li><a class=\"toctext\" href=\"packages.html\">Packages</a></li><li><a class=\"toctext\" href=\"profile.html\">Profiling</a></li><li><a class=\"toctext\" href=\"stacktraces.html\">Stack Traces</a></li><li><a class=\"toctext\" href=\"performance-tips.html\">Performance Tips</a></li><li><a class=\"toctext\" href=\"workflow-tips.html\">Workflow Tips</a></li><li><a class=\"toctext\" href=\"style-guide.html\">Style Guide</a></li><li><a class=\"toctext\" href=\"faq.html\">Frequently Asked Questions</a></li><li><a class=\"toctext\" href=\"noteworthy-differences.html\">Noteworthy Differences from other Languages</a></li><li><a class=\"toctext\" href=\"unicode-input.html\">Unicode Input</a></li></ul></li><li><span class=\"toctext\">Standard Library</span><ul><li><a class=\"toctext\" href=\"../stdlib/base.html\">Essentials</a></li><li><a class=\"toctext\" href=\"../stdlib/collections.html\">Collections and Data Structures</a></li><li><a class=\"toctext\" href=\"../stdlib/math.html\">Mathematics</a></li><li><a class=\"toctext\" href=\"../stdlib/numbers.html\">Numbers</a></li><li><a class=\"toctext\" href=\"../stdlib/strings.html\">Strings</a></li><li><a class=\"toctext\" href=\"../stdlib/arrays.html\">Arrays</a></li><li><a class=\"toctext\" href=\"../stdlib/parallel.html\">Tasks and Parallel Computing</a></li><li><a class=\"toctext\" href=\"../stdlib/linalg.html\">Linear Algebra</a></li><li><a class=\"toctext\" href=\"../stdlib/constants.html\">Constants</a></li><li><a class=\"toctext\" href=\"../stdlib/file.html\">Filesystem</a></li><li><a class=\"toctext\" href=\"../stdlib/io-network.html\">I/O and Network</a></li><li><a class=\"toctext\" href=\"../stdlib/punctuation.html\">Punctuation</a></li><li><a class=\"toctext\" href=\"../stdlib/sort.html\">Sorting and Related Functions</a></li><li><a class=\"toctext\" href=\"../stdlib/pkg.html\">Package Manager Functions</a></li><li><a class=\"toctext\" href=\"../stdlib/dates.html\">Dates and Time</a></li><li><a class=\"toctext\" href=\"../stdlib/iterators.html\">Iteration utilities</a></li><li><a class=\"toctext\" href=\"../stdlib/test.html\">Unit Testing</a></li><li><a class=\"toctext\" href=\"../stdlib/c.html\">C Interface</a></li><li><a class=\"toctext\" href=\"../stdlib/libc.html\">C Standard Library</a></li><li><a class=\"toctext\" href=\"../stdlib/libdl.html\">Dynamic Linker</a></li><li><a class=\"toctext\" href=\"../stdlib/profile.html\">Profiling</a></li><li><a class=\"toctext\" href=\"../stdlib/stacktraces.html\">StackTraces</a></li><li><a class=\"toctext\" href=\"../stdlib/simd-types.html\">SIMD Support</a></li></ul></li><li><span class=\"toctext\">Developer Documentation</span><ul><li><a class=\"toctext\" href=\"../devdocs/reflection.html\">Reflection and introspection</a></li><li><span class=\"toctext\">Documentation of Julia&#39;s Internals</span><ul><li><a class=\"toctext\" href=\"../devdocs/init.html\">Initialization of the Julia runtime</a></li><li><a class=\"toctext\" href=\"../devdocs/ast.html\">Julia ASTs</a></li><li><a class=\"toctext\" href=\"../devdocs/types.html\">More about types</a></li><li><a class=\"toctext\" href=\"../devdocs/object.html\">Memory layout of Julia Objects</a></li><li><a class=\"toctext\" href=\"../devdocs/eval.html\">Eval of Julia code</a></li><li><a class=\"toctext\" href=\"../devdocs/callconv.html\">Calling Conventions</a></li><li><a class=\"toctext\" href=\"../devdocs/compiler.html\">High-level Overview of the Native-Code Generation Process</a></li><li><a class=\"toctext\" href=\"../devdocs/functions.html\">Julia Functions</a></li><li><a class=\"toctext\" href=\"../devdocs/cartesian.html\">Base.Cartesian</a></li><li><a class=\"toctext\" href=\"../devdocs/meta.html\">Talking to the compiler (the <code>:meta</code> mechanism)</a></li><li><a class=\"toctext\" href=\"../devdocs/subarrays.html\">SubArrays</a></li><li><a class=\"toctext\" href=\"../devdocs/sysimg.html\">System Image Building</a></li><li><a class=\"toctext\" href=\"../devdocs/llvm.html\">Working with LLVM</a></li><li><a class=\"toctext\" href=\"../devdocs/stdio.html\">printf() and stdio in the Julia runtime</a></li><li><a class=\"toctext\" href=\"../devdocs/boundscheck.html\">Bounds checking</a></li><li><a class=\"toctext\" href=\"../devdocs/locks.html\">Proper maintenance and care of multi-threading locks</a></li><li><a class=\"toctext\" href=\"../devdocs/offset-arrays.html\">Arrays with custom indices</a></li><li><a class=\"toctext\" href=\"../devdocs/libgit2.html\">Base.LibGit2</a></li><li><a class=\"toctext\" href=\"../devdocs/require.html\">Module loading</a></li></ul></li><li><span class=\"toctext\">Developing/debugging Julia&#39;s C code</span><ul><li><a class=\"toctext\" href=\"../devdocs/backtraces.html\">Reporting and analyzing crashes (segfaults)</a></li><li><a class=\"toctext\" href=\"../devdocs/debuggingtips.html\">gdb debugging tips</a></li><li><a class=\"toctext\" href=\"../devdocs/valgrind.html\">Using Valgrind with Julia</a></li><li><a class=\"toctext\" href=\"../devdocs/sanitizers.html\">Sanitizer support</a></li></ul></li></ul></li></ul></nav><article id=\"docs\"><header><nav><ul><li>Manual</li><li><a href=\"calling-c-and-fortran-code.html\">Calling C and Fortran Code</a></li></ul><a class=\"edit-page\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/doc/src/manual/calling-c-and-fortran-code.md\"><span class=\"fa\">\uf09b</span> Edit on GitHub</a></nav><hr/><div id=\"topbar\"><span>Calling C and Fortran Code</span><a class=\"fa fa-bars\" href=\"#\"></a></div></header><h1><a class=\"nav-anchor\" id=\"Calling-C-and-Fortran-Code-1\" href=\"#Calling-C-and-Fortran-Code-1\">Calling C and Fortran Code</a></h1><p>Though most code can be written in Julia, there are many high-quality, mature libraries for numerical computing already written in C and Fortran. To allow easy use of this existing code, Julia makes it simple and efficient to call C and Fortran functions. Julia has a &quot;no boilerplate&quot; philosophy: functions can be called directly from Julia without any &quot;glue&quot; code, code generation, or compilation \u2013 even from the interactive prompt. This is accomplished just by making an appropriate call with <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> syntax, which looks like an ordinary function call.</p><p>The code to be called must be available as a shared library. Most C and Fortran libraries ship compiled as shared libraries already, but if you are compiling the code yourself using GCC (or Clang), you will need to use the <code>-shared</code> and <code>-fPIC</code> options. The machine instructions generated by Julia&#39;s JIT are the same as a native C call would be, so the resulting overhead is the same as calling a library function from C code. (Non-library function calls in both C and Julia can be inlined and thus may have even less overhead than calls to shared library functions. When both libraries and executables are generated by LLVM, it is possible to perform whole-program optimizations that can even optimize across this boundary, but Julia does not yet support that. In the future, however, it may do so, yielding even greater performance gains.)</p><p>Shared libraries and functions are referenced by a tuple of the form <code>(:function, &quot;library&quot;)</code> or <code>(&quot;function&quot;, &quot;library&quot;)</code> where <code>function</code> is the C-exported function name. <code>library</code> refers to the shared library name: shared libraries available in the (platform-specific) load path will be resolved by name, and if necessary a direct path may be specified.</p><p>A function name may be used alone in place of the tuple (just <code>:function</code> or <code>&quot;function&quot;</code>). In this case the name is resolved within the current process. This form can be used to call C library functions, functions in the Julia runtime, or functions in an application linked to Julia.</p><p>By default, Fortran compilers <a href=\"https://en.wikipedia.org/wiki/Name_mangling#Fortran\">generate mangled names</a> (for example, converting function names to lowercase or uppercase, often appending an underscore), and so to call a Fortran function via <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> you must pass the mangled identifier corresponding to the rule followed by your Fortran compiler.  Also, when calling a Fortran function, all inputs must be passed by reference.</p><p>Finally, you can use <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> to actually generate a call to the library function. Arguments to <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> are as follows:</p><ol><li><p>A <code>(:function, &quot;library&quot;)</code> pair, which must be written as a literal constant,</p><p>OR</p><p>a function pointer (for example, from <code>dlsym</code>).</p></li><li><p>Return type (see below for mapping the declared C type to Julia)</p><ul><li><p>This argument will be evaluated at compile-time, when the containing method is defined.</p></li></ul></li><li><p>A tuple of input types. The input types must be written as a literal tuple, not a tuple-valued variable or expression.</p><ul><li><p>This argument will be evaluated at compile-time, when the containing method is defined.</p></li></ul></li><li><p>The following arguments, if any, are the actual argument values passed to the function.</p></li></ol><p>As a complete but simple example, the following calls the <code>clock</code> function from the standard C library:</p><pre><code class=\"language-julia-repl\">julia&gt; t = ccall((:clock, &quot;libc&quot;), Int32, ())\n2292761\n\njulia&gt; t\n2292761\n\njulia&gt; typeof(ans)\nInt32</code></pre><p><code>clock</code> takes no arguments and returns an <a href=\"../stdlib/numbers.html#Core.Int32\"><code>Int32</code></a>. One common gotcha is that a 1-tuple must be written with a trailing comma. For example, to call the <code>getenv</code> function to get a pointer to the value of an environment variable, one makes a call like this:</p><pre><code class=\"language-julia-repl\">julia&gt; path = ccall((:getenv, &quot;libc&quot;), Cstring, (Cstring,), &quot;SHELL&quot;)\nCstring(@0x00007fff5fbffc45)\n\njulia&gt; unsafe_string(path)\n&quot;/bin/bash&quot;</code></pre><p>Note that the argument type tuple must be written as <code>(Cstring,)</code>, rather than <code>(Cstring)</code>. This is because <code>(Cstring)</code> is just the expression <code>Cstring</code> surrounded by parentheses, rather than a 1-tuple containing <code>Cstring</code>:</p><pre><code class=\"language-julia-repl\">julia&gt; (Cstring)\nCstring\n\njulia&gt; (Cstring,)\n(Cstring,)</code></pre><p>In practice, especially when providing reusable functionality, one generally wraps <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> uses in Julia functions that set up arguments and then check for errors in whatever manner the C or Fortran function indicates them, propagating to the Julia caller as exceptions. This is especially important since C and Fortran APIs are notoriously inconsistent about how they indicate error conditions. For example, the <code>getenv</code> C library function is wrapped in the following Julia function, which is a simplified version of the actual definition from <a href=\"https://github.com/JuliaLang/julia/blob/master/base/env.jl\"><code>env.jl</code></a>:</p><pre><code class=\"language-julia\">function getenv(var::AbstractString)\n    val = ccall((:getenv, &quot;libc&quot;),\n                Cstring, (Cstring,), var)\n    if val == C_NULL\n        error(&quot;getenv: undefined variable: &quot;, var)\n    end\n    unsafe_string(val)\nend</code></pre><p>The C <code>getenv</code> function indicates an error by returning <code>NULL</code>, but other standard C functions indicate errors in various different ways, including by returning -1, 0, 1 and other special values. This wrapper throws an exception clearly indicating the problem if the caller tries to get a non-existent environment variable:</p><pre><code class=\"language-julia-repl\">julia&gt; getenv(&quot;SHELL&quot;)\n&quot;/bin/bash&quot;\n\njulia&gt; getenv(&quot;FOOBAR&quot;)\ngetenv: undefined variable: FOOBAR</code></pre><p>Here is a slightly more complex example that discovers the local machine&#39;s hostname:</p><pre><code class=\"language-julia\">function gethostname()\n    hostname = Vector{UInt8}(128)\n    ccall((:gethostname, &quot;libc&quot;), Int32,\n          (Ptr{UInt8}, Csize_t),\n          hostname, sizeof(hostname))\n    hostname[end] = 0; # ensure null-termination\n    return unsafe_string(pointer(hostname))\nend</code></pre><p>This example first allocates an array of bytes, then calls the C library function <code>gethostname</code> to fill the array in with the hostname, takes a pointer to the hostname buffer, and converts the pointer to a Julia string, assuming that it is a NUL-terminated C string. It is common for C libraries to use this pattern of requiring the caller to allocate memory to be passed to the callee and filled in. Allocation of memory from Julia like this is generally accomplished by creating an uninitialized array and passing a pointer to its data to the C function. This is why we don&#39;t use the <code>Cstring</code> type here: as the array is uninitialized, it could contain NUL bytes. Converting to a <code>Cstring</code> as part of the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> checks for contained NUL bytes and could therefore throw a conversion error.</p><h2><a class=\"nav-anchor\" id=\"Creating-C-Compatible-Julia-Function-Pointers-1\" href=\"#Creating-C-Compatible-Julia-Function-Pointers-1\">Creating C-Compatible Julia Function Pointers</a></h2><p>It is possible to pass Julia functions to native C functions that accept function pointer arguments. For example, to match C prototypes of the form:</p><pre><code class=\"language-c\">typedef returntype (*functiontype)(argumenttype,...)</code></pre><p>The function <a href=\"../stdlib/c.html#Base.cfunction\"><code>cfunction()</code></a> generates the C-compatible function pointer for a call to a Julia library function. Arguments to <a href=\"../stdlib/c.html#Base.cfunction\"><code>cfunction()</code></a> are as follows:</p><ol><li><p>A Julia Function</p></li><li><p>Return type</p></li><li><p>A tuple of input types</p></li></ol><p>A classic example is the standard C library <code>qsort</code> function, declared as:</p><pre><code class=\"language-c\">void qsort(void *base, size_t nmemb, size_t size,\n           int(*compare)(const void *a, const void *b));</code></pre><p>The <code>base</code> argument is a pointer to an array of length <code>nmemb</code>, with elements of <code>size</code> bytes each. <code>compare</code> is a callback function which takes pointers to two elements <code>a</code> and <code>b</code> and returns an integer less/greater than zero if <code>a</code> should appear before/after <code>b</code> (or zero if any order is permitted). Now, suppose that we have a 1d array <code>A</code> of values in Julia that we want to sort using the <code>qsort</code> function (rather than Julia&#39;s built-in <code>sort</code> function). Before we worry about calling <code>qsort</code> and passing arguments, we need to write a comparison function that works for some arbitrary type T:</p><pre><code class=\"language-jldoctest\">julia&gt; function mycompare(a::T, b::T) where T\n           return convert(Cint, a &lt; b ? -1 : a &gt; b ? +1 : 0)::Cint\n       end\nmycompare (generic function with 1 method)</code></pre><p>Notice that we have to be careful about the return type: <code>qsort</code> expects a function returning a C <code>int</code>, so we must be sure to return <code>Cint</code> via a call to <code>convert</code> and a <code>typeassert</code>.</p><p>In order to pass this function to C, we obtain its address using the function <code>cfunction</code>:</p><pre><code class=\"language-jldoctest\">julia&gt; const mycompare_c = cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}));</code></pre><p><a href=\"../stdlib/c.html#Base.cfunction\"><code>cfunction()</code></a> accepts three arguments: the Julia function (<code>mycompare</code>), the return type (<code>Cint</code>), and a tuple of the argument types, in this case to sort an array of <code>Cdouble</code> (<a href=\"../stdlib/numbers.html#Core.Float64\"><code>Float64</code></a>) elements.</p><p>The final call to <code>qsort</code> looks like this:</p><pre><code class=\"language-jldoctest\">julia&gt; A = [1.3, -2.7, 4.4, 3.1]\n4-element Array{Float64,1}:\n  1.3\n -2.7\n  4.4\n  3.1\n\njulia&gt; ccall(:qsort, Void, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Void}),\n             A, length(A), sizeof(eltype(A)), mycompare_c)\n\njulia&gt; A\n4-element Array{Float64,1}:\n -2.7\n  1.3\n  3.1\n  4.4</code></pre><p>As can be seen, <code>A</code> is changed to the sorted array <code>[-2.7, 1.3, 3.1, 4.4]</code>. Note that Julia knows how to convert an array into a <code>Ptr{Cdouble}</code>, how to compute the size of a type in bytes (identical to C&#39;s <code>sizeof</code> operator), and so on. For fun, try inserting a <code>println(&quot;mycompare($a,$b)&quot;)</code> line into <code>mycompare</code>, which will allow you to see the comparisons that <code>qsort</code> is performing (and to verify that it is really calling the Julia function that you passed to it).</p><h2><a class=\"nav-anchor\" id=\"Mapping-C-Types-to-Julia-1\" href=\"#Mapping-C-Types-to-Julia-1\">Mapping C Types to Julia</a></h2><p>It is critical to exactly match the declared C type with its declaration in Julia. Inconsistencies can cause code that works correctly on one system to fail or produce indeterminate results on a different system.</p><p>Note that no C header files are used anywhere in the process of calling C functions: you are responsible for making sure that your Julia types and call signatures accurately reflect those in the C header file. (The <a href=\"https://github.com/ihnorton/Clang.jl\">Clang package</a> can be used to auto-generate Julia code from a C header file.)</p><h3><a class=\"nav-anchor\" id=\"Auto-conversion:-1\" href=\"#Auto-conversion:-1\">Auto-conversion:</a></h3><p>Julia automatically inserts calls to the <a href=\"../stdlib/c.html#Base.cconvert\"><code>Base.cconvert()</code></a> function to convert each argument to the specified type. For example, the following call:</p><pre><code class=\"language-julia\">ccall((:foo, &quot;libfoo&quot;), Void, (Int32, Float64), x, y)</code></pre><p>will behave as if the following were written:</p><pre><code class=\"language-julia\">ccall((:foo, &quot;libfoo&quot;), Void, (Int32, Float64),\n      Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),\n      Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))</code></pre><p><a href=\"../stdlib/c.html#Base.cconvert\"><code>Base.cconvert()</code></a> normally just calls <a href=\"../stdlib/base.html#Base.convert\"><code>convert()</code></a>, but can be defined to return an arbitrary new object more appropriate for passing to C. For example, this is used to convert an <code>Array</code> of objects (e.g. strings) to an array of pointers.</p><p><a href=\"../stdlib/c.html#Base.unsafe_convert\"><code>Base.unsafe_convert()</code></a> handles conversion to <code>Ptr</code> types. It is considered unsafe because converting an object to a native pointer can hide the object from the garbage collector, causing it to be freed prematurely.</p><h3><a class=\"nav-anchor\" id=\"Type-Correspondences:-1\" href=\"#Type-Correspondences:-1\">Type Correspondences:</a></h3><p>First, a review of some relevant Julia type terminology:</p><table><tr><th>Syntax / Keyword</th><th>Example</th><th>Description</th></tr><tr><td><code>mutable struct</code></td><td><code>String</code></td><td>&quot;Leaf Type&quot; :: A group of related data that includes a type-tag, is managed by the Julia GC, and is defined by object-identity. The type parameters of a leaf type must be fully defined (no <code>TypeVars</code> are allowed) in order for the instance to be constructed.</td></tr><tr><td><code>abstract type</code></td><td><code>Any</code>, <code>AbstractArray{T, N}</code>, <code>Complex{T}</code></td><td>&quot;Super Type&quot; :: A super-type (not a leaf-type) that cannot be instantiated, but can be used to describe a group of types.</td></tr><tr><td><code>T{A}</code></td><td><code>Vector{Int}</code></td><td>&quot;Type Parameter&quot; :: A specialization of a type (typically used for dispatch or storage optimization).</td></tr><tr><td></td><td></td><td>&quot;TypeVar&quot; :: The <code>T</code> in the type parameter declaration is referred to as a TypeVar (short for type variable).</td></tr><tr><td><code>primitive type</code></td><td><code>Int</code>, <code>Float64</code></td><td>&quot;Primitive Type&quot; :: A type with no fields, but a size. It is stored and defined by-value.</td></tr><tr><td><code>struct</code></td><td><code>Pair{Int, Int}</code></td><td>&quot;Struct&quot; :: A type with all fields defined to be constant. It is defined by-value, and may be stored with a type-tag.</td></tr><tr><td></td><td><code>Complex128</code> (<code>isbits</code>)</td><td>&quot;Is-Bits&quot;   :: A <code>primitive type</code>, or a <code>struct</code> type where all fields are other <code>isbits</code> types. It is defined by-value, and is stored without a type-tag.</td></tr><tr><td><code>struct ...; end</code></td><td><code>nothing</code></td><td>&quot;Singleton&quot; :: a Leaf Type or Struct with no fields.</td></tr><tr><td><code>(...)</code> or <code>tuple(...)</code></td><td><code>(1, 2, 3)</code></td><td>&quot;Tuple&quot; :: an immutable data-structure similar to an anonymous struct type, or a constant array. Represented as either an array or a struct.</td></tr></table><h3><a class=\"nav-anchor\" id=\"Bits-Types:-1\" href=\"#Bits-Types:-1\">Bits Types:</a></h3><p>There are several special types to be aware of, as no other type can be defined to behave the same:</p><ul><li><p><code>Float32</code></p><p>Exactly corresponds to the <code>float</code> type in C (or <code>REAL*4</code> in Fortran).</p></li><li><p><code>Float64</code></p><p>Exactly corresponds to the <code>double</code> type in C (or <code>REAL*8</code> in Fortran).</p></li><li><p><code>Complex64</code></p><p>Exactly corresponds to the <code>complex float</code> type in C (or <code>COMPLEX*8</code> in Fortran).</p></li><li><p><code>Complex128</code></p><p>Exactly corresponds to the <code>complex double</code> type in C (or <code>COMPLEX*16</code> in Fortran).</p></li><li><p><code>Signed</code></p><p>Exactly corresponds to the <code>signed</code> type annotation in C (or any <code>INTEGER</code> type in Fortran). Any Julia type that is not a subtype of <a href=\"../stdlib/numbers.html#Core.Signed\"><code>Signed</code></a> is assumed to be unsigned.</p></li></ul><ul><li><p><code>Ref{T}</code></p><p>Behaves like a <code>Ptr{T}</code> that can manage its memory via the Julia GC.</p></li></ul><ul><li><p><code>Array{T,N}</code></p><p>When an array is passed to C as a <code>Ptr{T}</code> argument, it is not reinterpret-cast: Julia requires that the element type of the array matches <code>T</code>, and the address of the first element is passed.</p><p>Therefore, if an <code>Array</code> contains data in the wrong format, it will have to be explicitly converted using a call such as <code>trunc(Int32, a)</code>.</p><p>To pass an array <code>A</code> as a pointer of a different type <em>without</em> converting the data beforehand (for example, to pass a <code>Float64</code> array to a function that operates on uninterpreted bytes), you can declare the argument as <code>Ptr{Void}</code>.</p><p>If an array of eltype <code>Ptr{T}</code> is passed as a <code>Ptr{Ptr{T}}</code> argument, <a href=\"../stdlib/c.html#Base.cconvert\"><code>Base.cconvert()</code></a> will attempt to first make a null-terminated copy of the array with each element replaced by its <a href=\"../stdlib/c.html#Base.cconvert\"><code>Base.cconvert()</code></a> version. This allows, for example, passing an <code>argv</code> pointer array of type <code>Vector{String}</code> to an argument of type <code>Ptr{Ptr{Cchar}}</code>.</p></li></ul><p>On all systems we currently support, basic C/C++ value types may be translated to Julia types as follows. Every C type also has a corresponding Julia type with the same name, prefixed by C. This can help for writing portable code (and remembering that an <code>int</code> in C is not the same as an <code>Int</code> in Julia).</p><p><strong>System Independent:</strong></p><table><tr><th>C name</th><th>Fortran name</th><th>Standard Julia Alias</th><th>Julia Base Type</th></tr><tr><td><code>unsigned char</code></td><td><code>CHARACTER</code></td><td><code>Cuchar</code></td><td><code>UInt8</code></td></tr><tr><td><code>bool</code> (only in C++)</td><td></td><td><code>Cuchar</code></td><td><code>UInt8</code></td></tr><tr><td><code>short</code></td><td><code>INTEGER*2</code>, <code>LOGICAL*2</code></td><td><code>Cshort</code></td><td><code>Int16</code></td></tr><tr><td><code>unsigned short</code></td><td>\u00a0</td><td><code>Cushort</code></td><td><code>UInt16</code></td></tr><tr><td><code>int</code>, <code>BOOL</code> (C, typical)</td><td><code>INTEGER*4</code>, <code>LOGICAL*4</code></td><td><code>Cint</code></td><td><code>Int32</code></td></tr><tr><td><code>unsigned int</code></td><td>\u00a0</td><td><code>Cuint</code></td><td><code>UInt32</code></td></tr><tr><td><code>long long</code></td><td><code>INTEGER*8</code>, <code>LOGICAL*8</code></td><td><code>Clonglong</code></td><td><code>Int64</code></td></tr><tr><td><code>unsigned long long</code></td><td>\u00a0</td><td><code>Culonglong</code></td><td><code>UInt64</code></td></tr><tr><td><code>intmax_t</code></td><td>\u00a0</td><td><code>Cintmax_t</code></td><td><code>Int64</code></td></tr><tr><td><code>uintmax_t</code></td><td>\u00a0</td><td><code>Cuintmax_t</code></td><td><code>UInt64</code></td></tr><tr><td><code>float</code></td><td><code>REAL*4i</code></td><td><code>Cfloat</code></td><td><code>Float32</code></td></tr><tr><td><code>double</code></td><td><code>REAL*8</code></td><td><code>Cdouble</code></td><td><code>Float64</code></td></tr><tr><td><code>complex float</code></td><td><code>COMPLEX*8</code></td><td><code>Complex64</code></td><td><code>Complex{Float32}</code></td></tr><tr><td><code>complex double</code></td><td><code>COMPLEX*16</code></td><td><code>Complex128</code></td><td><code>Complex{Float64}</code></td></tr><tr><td><code>ptrdiff_t</code></td><td>\u00a0</td><td><code>Cptrdiff_t</code></td><td><code>Int</code></td></tr><tr><td><code>ssize_t</code></td><td>\u00a0</td><td><code>Cssize_t</code></td><td><code>Int</code></td></tr><tr><td><code>size_t</code></td><td>\u00a0</td><td><code>Csize_t</code></td><td><code>UInt</code></td></tr><tr><td><code>void</code></td><td>\u00a0</td><td>\u00a0</td><td><code>Void</code></td></tr><tr><td><code>void</code> and <code>[[noreturn]]</code> or <code>_Noreturn</code></td><td>\u00a0</td><td>\u00a0</td><td><code>Union{}</code></td></tr><tr><td><code>void*</code></td><td>\u00a0</td><td>\u00a0</td><td><code>Ptr{Void}</code></td></tr><tr><td><code>T*</code> (where T represents an appropriately defined type)</td><td>\u00a0</td><td>\u00a0</td><td><code>Ref{T}</code></td></tr><tr><td><code>char*</code> (or <code>char[]</code>, e.g. a string)</td><td><code>CHARACTER*N</code></td><td>\u00a0</td><td><code>Cstring</code> if NUL-terminated, or <code>Ptr{UInt8}</code> if not</td></tr><tr><td><code>char**</code> (or <code>*char[]</code>)</td><td>\u00a0</td><td>\u00a0</td><td><code>Ptr{Ptr{UInt8}}</code></td></tr><tr><td><code>jl_value_t*</code> (any Julia Type)</td><td>\u00a0</td><td>\u00a0</td><td><code>Any</code></td></tr><tr><td><code>jl_value_t**</code> (a reference to a Julia Type)</td><td>\u00a0</td><td>\u00a0</td><td><code>Ref{Any}</code></td></tr><tr><td><code>va_arg</code></td><td>\u00a0</td><td>\u00a0</td><td>Not supported</td></tr><tr><td><code>...</code> (variadic function specification)</td><td>\u00a0</td><td>\u00a0</td><td><code>T...</code> (where <code>T</code> is one of the above types, variadic functions of different argument types are not supported)</td></tr></table><p>The <code>Cstring</code> type is essentially a synonym for <code>Ptr{UInt8}</code>, except the conversion to <code>Cstring</code> throws an error if the Julia string contains any embedded NUL characters (which would cause the string to be silently truncated if the C routine treats NUL as the terminator).  If you are passing a <code>char*</code> to a C routine that does not assume NUL termination (e.g. because you pass an explicit string length), or if you know for certain that your Julia string does not contain NUL and want to skip the check, you can use <code>Ptr{UInt8}</code> as the argument type. <code>Cstring</code> can also be used as the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> return type, but in that case it obviously does not introduce any extra checks and is only meant to improve readability of the call.</p><p><strong>System-dependent:</strong></p><table><tr><th>C name</th><th>Standard Julia Alias</th><th>Julia Base Type</th></tr><tr><td><code>char</code></td><td><code>Cchar</code></td><td><code>Int8</code> (x86, x86_64), <code>UInt8</code> (powerpc, arm)</td></tr><tr><td><code>long</code></td><td><code>Clong</code></td><td><code>Int</code> (UNIX), <code>Int32</code> (Windows)</td></tr><tr><td><code>unsigned long</code></td><td><code>Culong</code></td><td><code>UInt</code> (UNIX), <code>UInt32</code> (Windows)</td></tr><tr><td><code>wchar_t</code></td><td><code>Cwchar_t</code></td><td><code>Int32</code> (UNIX), <code>UInt16</code> (Windows)</td></tr></table><div class=\"admonition note\"><div class=\"admonition-title\">Note</div><div class=\"admonition-text\"><p>When calling a Fortran function, all inputs must be passed by reference, so all type correspondences above should contain an additional <code>Ptr{..}</code> or <code>Ref{..}</code> wrapper around their type specification.</p></div></div><div class=\"admonition warning\"><div class=\"admonition-title\">Warning</div><div class=\"admonition-text\"><p>For string arguments (<code>char*</code>) the Julia type should be <code>Cstring</code> (if NUL- terminated data is expected) or either <code>Ptr{Cchar}</code> or <code>Ptr{UInt8}</code> otherwise (these two pointer types have the same effect), as described above, not <code>String</code>. Similarly, for array arguments (<code>T[]</code> or <code>T*</code>), the Julia type should again be <code>Ptr{T}</code>, not <code>Vector{T}</code>.</p></div></div><div class=\"admonition warning\"><div class=\"admonition-title\">Warning</div><div class=\"admonition-text\"><p>Julia&#39;s <code>Char</code> type is 32 bits, which is not the same as the wide character type (<code>wchar_t</code> or <code>wint_t</code>) on all platforms.</p></div></div><div class=\"admonition warning\"><div class=\"admonition-title\">Warning</div><div class=\"admonition-text\"><p>A return type of <code>Union{}</code> means the function will not return i.e. C++11 <code>[[noreturn]]</code> or C11 <code>_Noreturn</code> (e.g. <code>jl_throw</code> or <code>longjmp</code>). Do not use this for functions that return no value (<code>void</code>) but do return, use <code>Void</code> instead.</p></div></div><div class=\"admonition note\"><div class=\"admonition-title\">Note</div><div class=\"admonition-text\"><p>For <code>wchar_t*</code> arguments, the Julia type should be <code>Cwstring</code> (if the C routine expects a NUL-terminated string) or <code>Ptr{Cwchar_t}</code> otherwise. Note also that UTF-8 string data in Julia is internally NUL-terminated, so it can be passed to C functions expecting NUL-terminated data without making a copy (but using the <code>Cwstring</code> type will cause an error to be thrown if the string itself contains NUL characters).</p></div></div><div class=\"admonition note\"><div class=\"admonition-title\">Note</div><div class=\"admonition-text\"><p>C functions that take an argument of the type <code>char**</code> can be called by using a <code>Ptr{Ptr{UInt8}}</code> type within Julia. For example, C functions of the form:</p><pre><code class=\"language-c\">int main(int argc, char **argv);</code></pre><p>can be called via the following Julia code:</p><pre><code class=\"language-julia\">argv = [ &quot;a.out&quot;, &quot;arg1&quot;, &quot;arg2&quot; ]\nccall(:main, Int32, (Int32, Ptr{Ptr{UInt8}}), length(argv), argv)</code></pre></div></div><div class=\"admonition note\"><div class=\"admonition-title\">Note</div><div class=\"admonition-text\"><p>A C function declared to return <code>Void</code> will return the value <code>nothing</code> in Julia.</p></div></div><h3><a class=\"nav-anchor\" id=\"Struct-Type-correspondences-1\" href=\"#Struct-Type-correspondences-1\">Struct Type correspondences</a></h3><p>Composite types, aka <code>struct</code> in C or <code>TYPE</code> in Fortran90 (or <code>STRUCTURE</code> / <code>RECORD</code> in some variants of F77), can be mirrored in Julia by creating a <code>struct</code> definition with the same field layout.</p><p>When used recursively, <code>isbits</code> types are stored inline. All other types are stored as a pointer to the data. When mirroring a struct used by-value inside another struct in C, it is imperative that you do not attempt to manually copy the fields over, as this will not preserve the correct field alignment. Instead, declare an <code>isbits</code> struct type and use that instead. Unnamed structs are not possible in the translation to Julia.</p><p>Packed structs and union declarations are not supported by Julia.</p><p>You can get a near approximation of a <code>union</code> if you know, a priori, the field that will have the greatest size (potentially including padding). When translating your fields to Julia, declare the Julia field to be only of that type.</p><p>Arrays of parameters can be expressed with <code>NTuple</code>:</p><pre><code class=\"language-none\">in C:\nstruct B {\n    int A[3];\n};\nb_a_2 = B.A[2];\n\nin Julia:\nstruct B\n    A::NTuple{3, CInt}\nend\nb_a_2 = B.A[3]  # note the difference in indexing (1-based in Julia, 0-based in C)</code></pre><p>Arrays of unknown size (C99-compliant variable length structs specified by <code>[]</code> or <code>[0]</code>) are not directly supported. Often the best way to deal with these is to deal with the byte offsets directly. For example, if a C library declared a proper string type and returned a pointer to it:</p><pre><code class=\"language-c\">struct String {\n    int strlen;\n    char data[];\n};</code></pre><p>In Julia, we can access the parts independently to make a copy of that string:</p><pre><code class=\"language-julia\">str = from_c::Ptr{Void}\nlen = unsafe_load(Ptr{Cint}(str))\nunsafe_string(str + Core.sizeof(Cint), len)</code></pre><h3><a class=\"nav-anchor\" id=\"Type-Parameters-1\" href=\"#Type-Parameters-1\">Type Parameters</a></h3><p>The type arguments to <code>ccall</code> are evaluated statically, when the method containing the ccall is defined. They therefore must take the form of a literal tuple, not a variable, and cannot reference local variables.</p><p>This may sound like a strange restriction, but remember that since C is not a dynamic language like Julia, its functions can only accept argument types with a statically-known, fixed signature.</p><p>However, while the type layout must be known statically to compute the <code>ccall</code> ABI, the static parameters of the function are considered to be part of this static environment. The static parameters of the function may be used as type parameters in the <code>ccall</code> signature, as long as they don&#39;t affect the layout of the type. For example, <code>f(x::T) where {T} = ccall(:valid, Ptr{T}, (Ptr{T},), x)</code> is valid, since <code>Ptr</code> is always a word-size primitive type. But, <code>g(x::T) where {T} = ccall(:notvalid, T, (T,), x)</code> is not valid, since the type layout of <code>T</code> is not known statically.</p><h3><a class=\"nav-anchor\" id=\"SIMD-Values-1\" href=\"#SIMD-Values-1\">SIMD Values</a></h3><p>Note: This feature is currently implemented on 64-bit x86 and AArch64 platforms only.</p><p>If a C/C++ routine has an argument or return value that is a native SIMD type, the corresponding Julia type is a homogeneous tuple of <code>VecElement</code> that naturally maps to the SIMD type.  Specifically:</p><blockquote><ul><li><p>The tuple must be the same size as the SIMD type. For example, a tuple representing an <code>__m128</code> on x86 must have a size of 16 bytes.</p></li><li><p>The element type of the tuple must be an instance of <code>VecElement{T}</code> where <code>T</code> is a primitive type that is 1, 2, 4 or 8 bytes.</p></li></ul></blockquote><p>For instance, consider this C routine that uses AVX intrinsics:</p><pre><code class=\"language-c\">#include &lt;immintrin.h&gt;\n\n__m256 dist( __m256 a, __m256 b ) {\n    return _mm256_sqrt_ps(_mm256_add_ps(_mm256_mul_ps(a, a),\n                                        _mm256_mul_ps(b, b)));\n}</code></pre><p>The following Julia code calls <code>dist</code> using <code>ccall</code>:</p><pre><code class=\"language-julia\">const m256 = NTuple{8, VecElement{Float32}}\n\na = m256(ntuple(i -&gt; VecElement(sin(Float32(i))), 8))\nb = m256(ntuple(i -&gt; VecElement(cos(Float32(i))), 8))\n\nfunction call_dist(a::m256, b::m256)\n    ccall((:dist, &quot;libdist&quot;), m256, (m256, m256), a, b)\nend\n\nprintln(call_dist(a,b))</code></pre><p>The host machine must have the requisite SIMD registers.  For example, the code above will not work on hosts without AVX support.</p><h3><a class=\"nav-anchor\" id=\"Memory-Ownership-1\" href=\"#Memory-Ownership-1\">Memory Ownership</a></h3><p><strong>malloc/free</strong></p><p>Memory allocation and deallocation of such objects must be handled by calls to the appropriate cleanup routines in the libraries being used, just like in any C program. Do not try to free an object received from a C library with <code>Libc.free</code> in Julia, as this may result in the <code>free</code> function being called via the wrong <code>libc</code> library and cause Julia to crash. The reverse (passing an object allocated in Julia to be freed by an external library) is equally invalid.</p><h3><a class=\"nav-anchor\" id=\"When-to-use-T,-Ptr{T}-and-Ref{T}-1\" href=\"#When-to-use-T,-Ptr{T}-and-Ref{T}-1\">When to use T, Ptr{T} and Ref{T}</a></h3><p>In Julia code wrapping calls to external C routines, ordinary (non-pointer) data should be declared to be of type <code>T</code> inside the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a>, as they are passed by value.  For C code accepting pointers, <code>Ref{T}</code> should generally be used for the types of input arguments, allowing the use of pointers to memory managed by either Julia or C through the implicit call to <a href=\"../stdlib/c.html#Base.cconvert\"><code>Base.cconvert()</code></a>.  In contrast, pointers returned by the C function called should be declared to be of output type <code>Ptr{T}</code>, reflecting that the memory pointed to is managed by C only. Pointers contained in C structs should be represented as fields of type <code>Ptr{T}</code> within the corresponding Julia struct types designed to mimic the internal structure of corresponding C structs.</p><p>In Julia code wrapping calls to external Fortran routines, all input arguments should be declared as of type <code>Ref{T}</code>, as Fortran passes all variables by reference. The return type should either be <code>Void</code> for Fortran subroutines, or a <code>T</code> for Fortran functions returning the type <code>T</code>.</p><h2><a class=\"nav-anchor\" id=\"Mapping-C-Functions-to-Julia-1\" href=\"#Mapping-C-Functions-to-Julia-1\">Mapping C Functions to Julia</a></h2><h3><a class=\"nav-anchor\" id=\"ccall/cfunction-argument-translation-guide-1\" href=\"#ccall/cfunction-argument-translation-guide-1\"><code>ccall</code>/<code>cfunction</code> argument translation guide</a></h3><p>For translating a C argument list to Julia:</p><ul><li><p><code>T</code>, where <code>T</code> is one of the primitive types: <code>char</code>, <code>int</code>, <code>long</code>, <code>short</code>, <code>float</code>, <code>double</code>, <code>complex</code>, <code>enum</code> or any of their <code>typedef</code> equivalents</p><ul><li><p><code>T</code>, where <code>T</code> is an equivalent Julia Bits Type (per the table above)</p></li><li><p>if <code>T</code> is an <code>enum</code>, the argument type should be equivalent to <code>Cint</code> or <code>Cuint</code></p></li><li><p>argument value will be copied (passed by value)</p></li></ul></li><li><p><code>struct T</code> (including typedef to a struct)</p><ul><li><p><code>T</code>, where <code>T</code> is a Julia leaf type</p></li><li><p>argument value will be copied (passed by value)</p></li></ul></li><li><p><code>void*</code></p><ul><li><p>depends on how this parameter is used, first translate this to the intended pointer type, then determine the Julia equivalent using the remaining rules in this list</p></li><li><p>this argument may be declared as <code>Ptr{Void}</code>, if it really is just an unknown pointer</p></li></ul></li><li><p><code>jl_value_t*</code></p><ul><li><p><code>Any</code></p></li><li><p>argument value must be a valid Julia object</p></li><li><p>currently unsupported by <a href=\"../stdlib/c.html#Base.cfunction\"><code>cfunction()</code></a></p></li></ul></li><li><p><code>jl_value_t**</code></p><ul><li><p><code>Ref{Any}</code></p></li><li><p>argument value must be a valid Julia object (or <code>C_NULL</code>)</p></li><li><p>currently unsupported by <a href=\"../stdlib/c.html#Base.cfunction\"><code>cfunction()</code></a></p></li></ul></li><li><p><code>T*</code></p><ul><li><p><code>Ref{T}</code>, where <code>T</code> is the Julia type corresponding to <code>T</code></p></li><li><p>argument value will be copied if it is an <code>isbits</code> type otherwise, the value must be a valid Julia object</p></li></ul></li><li><p><code>(T*)(...)</code> (e.g. a pointer to a function)</p><ul><li><p><code>Ptr{Void}</code> (you may need to use <a href=\"../stdlib/c.html#Base.cfunction\"><code>cfunction()</code></a> explicitly to create this pointer)</p></li></ul></li><li><p><code>...</code> (e.g. a vararg)</p><ul><li><p><code>T...</code>, where <code>T</code> is the Julia type</p></li></ul></li><li><p><code>va_arg</code></p><ul><li><p>not supported</p></li></ul></li></ul><h3><a class=\"nav-anchor\" id=\"ccall/cfunction-return-type-translation-guide-1\" href=\"#ccall/cfunction-return-type-translation-guide-1\"><code>ccall</code>/<code>cfunction</code> return type translation guide</a></h3><p>For translating a C return type to Julia:</p><ul><li><p><code>void</code></p><ul><li><p><code>Void</code> (this will return the singleton instance <code>nothing::Void</code>)</p></li></ul></li><li><p><code>T</code>, where <code>T</code> is one of the primitive types: <code>char</code>, <code>int</code>, <code>long</code>, <code>short</code>, <code>float</code>, <code>double</code>, <code>complex</code>, <code>enum</code> or any of their <code>typedef</code> equivalents</p><ul><li><p><code>T</code>, where <code>T</code> is an equivalent Julia Bits Type (per the table above)</p></li><li><p>if <code>T</code> is an <code>enum</code>, the argument type should be equivalent to <code>Cint</code> or <code>Cuint</code></p></li><li><p>argument value will be copied (returned by-value)</p></li></ul></li><li><p><code>struct T</code> (including typedef to a struct)</p><ul><li><p><code>T</code>, where <code>T</code> is a Julia Leaf Type</p></li><li><p>argument value will be copied (returned by-value)</p></li></ul></li><li><p><code>void*</code></p><ul><li><p>depends on how this parameter is used, first translate this to the intended pointer type, then determine the Julia equivalent using the remaining rules in this list</p></li><li><p>this argument may be declared as <code>Ptr{Void}</code>, if it really is just an unknown pointer</p></li></ul></li><li><p><code>jl_value_t*</code></p><ul><li><p><code>Any</code></p></li><li><p>argument value must be a valid Julia object</p></li></ul></li><li><p><code>jl_value_t**</code></p><ul><li><p><code>Ref{Any}</code></p></li><li><p>argument value must be a valid Julia object (or <code>C_NULL</code>)</p></li></ul></li><li><p><code>T*</code></p><ul><li><p>If the memory is already owned by Julia, or is an <code>isbits</code> type, and is known to be non-null:</p><ul><li><p><code>Ref{T}</code>, where <code>T</code> is the Julia type corresponding to <code>T</code></p></li><li><p>a return type of <code>Ref{Any}</code> is invalid, it should either be <code>Any</code> (corresponding to <code>jl_value_t*</code>) or <code>Ptr{Any}</code> (corresponding to <code>Ptr{Any}</code>)</p></li><li><p>C <strong>MUST NOT</strong> modify the memory returned via <code>Ref{T}</code> if <code>T</code> is an <code>isbits</code> type</p></li></ul></li><li><p>If the memory is owned by C:</p><ul><li><p><code>Ptr{T}</code>, where <code>T</code> is the Julia type corresponding to <code>T</code></p></li></ul></li></ul></li><li><p><code>(T*)(...)</code> (e.g. a pointer to a function)</p><ul><li><p><code>Ptr{Void}</code> (you may need to use <a href=\"../stdlib/c.html#Base.cfunction\"><code>cfunction()</code></a> explicitly to create this pointer)</p></li></ul></li></ul><h3><a class=\"nav-anchor\" id=\"Passing-Pointers-for-Modifying-Inputs-1\" href=\"#Passing-Pointers-for-Modifying-Inputs-1\">Passing Pointers for Modifying Inputs</a></h3><p>Because C doesn&#39;t support multiple return values, often C functions will take pointers to data that the function will modify. To accomplish this within a <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a>, you need to first encapsulate the value inside an <code>Ref{T}</code> of the appropriate type. When you pass this <code>Ref</code> object as an argument, Julia will automatically pass a C pointer to the encapsulated data:</p><pre><code class=\"language-julia\">width = Ref{Cint}(0)\nrange = Ref{Cfloat}(0)\nccall(:foo, Void, (Ref{Cint}, Ref{Cfloat}), width, range)</code></pre><p>Upon return, the contents of <code>width</code> and <code>range</code> can be retrieved (if they were changed by <code>foo</code>) by <code>width[]</code> and <code>range[]</code>; that is, they act like zero-dimensional arrays.</p><h3><a class=\"nav-anchor\" id=\"Special-Reference-Syntax-for-ccall-(deprecated):-1\" href=\"#Special-Reference-Syntax-for-ccall-(deprecated):-1\">Special Reference Syntax for ccall (deprecated):</a></h3><p>The <code>&amp;</code> syntax is deprecated, use the <code>Ref{T}</code> argument type instead.</p><p>A prefix <code>&amp;</code> is used on an argument to <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> to indicate that a pointer to a scalar argument should be passed instead of the scalar value itself (required for all Fortran function arguments, as noted above). The following example computes a dot product using a BLAS function.</p><pre><code class=\"language-julia\">function compute_dot(DX::Vector{Float64}, DY::Vector{Float64})\n    @assert length(DX) == length(DY)\n    n = length(DX)\n    incx = incy = 1\n    product = ccall((:ddot_, &quot;libLAPACK&quot;),\n                    Float64,\n                    (Ptr{Int32}, Ptr{Float64}, Ptr{Int32}, Ptr{Float64}, Ptr{Int32}),\n                    &amp;n, DX, &amp;incx, DY, &amp;incy)\n    return product\nend</code></pre><p>The meaning of prefix <code>&amp;</code> is not quite the same as in C. In particular, any changes to the referenced variables will not be visible in Julia unless the type is mutable (declared via <code>type</code>). However, even for immutable structs it will not cause any harm for called functions to attempt such modifications (that is, writing through the passed pointers). Moreover, <code>&amp;</code> may be used with any expression, such as <code>&amp;0</code> or <code>&amp;f(x)</code>.</p><p>When a scalar value is passed with <code>&amp;</code> as an argument of type <code>Ptr{T}</code>, the value will first be converted to type <code>T</code>.</p><h2><a class=\"nav-anchor\" id=\"Some-Examples-of-C-Wrappers-1\" href=\"#Some-Examples-of-C-Wrappers-1\">Some Examples of C Wrappers</a></h2><p>Here is a simple example of a C wrapper that returns a <code>Ptr</code> type:</p><pre><code class=\"language-julia\">mutable struct gsl_permutation\nend\n\n# The corresponding C signature is\n#     gsl_permutation * gsl_permutation_alloc (size_t n);\nfunction permutation_alloc(n::Integer)\n    output_ptr = ccall(\n        (:gsl_permutation_alloc, :libgsl), # name of C function and library\n        Ptr{gsl_permutation},              # output type\n        (Csize_t,),                        # tuple of input types\n        n                                  # name of Julia variable to pass in\n    )\n    if output_ptr == C_NULL # Could not allocate memory\n        throw(OutOfMemoryError())\n    end\n    return output_ptr\nend</code></pre><p>The <a href=\"https://www.gnu.org/software/gsl/\">GNU Scientific Library</a> (here assumed to be accessible through <code>:libgsl</code>) defines an opaque pointer, <code>gsl_permutation *</code>, as the return type of the C function <code>gsl_permutation_alloc()</code>. As user code never has to look inside the <code>gsl_permutation</code> struct, the corresponding Julia wrapper simply needs a new type declaration, <code>gsl_permutation</code>, that has no internal fields and whose sole purpose is to be placed in the type parameter of a <code>Ptr</code> type.  The return type of the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> is declared as <code>Ptr{gsl_permutation}</code>, since the memory allocated and pointed to by <code>output_ptr</code> is controlled by C (and not Julia).</p><p>The input <code>n</code> is passed by value, and so the function&#39;s input signature is simply declared as <code>(Csize_t,)</code> without any <code>Ref</code> or <code>Ptr</code> necessary. (If the wrapper was calling a Fortran function instead, the corresponding function input signature should instead be <code>(Ref{Csize_t},)</code>, since Fortran variables are passed by reference.) Furthermore, <code>n</code> can be any type that is convertable to a <code>Csize_t</code> integer; the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> implicitly calls <a href=\"../stdlib/c.html#Base.cconvert\"><code>Base.cconvert(Csize_t, n)</code></a>.</p><p>Here is a second example wrapping the corresponding destructor:</p><pre><code class=\"language-julia\"># The corresponding C signature is\n#     void gsl_permutation_free (gsl_permutation * p);\nfunction permutation_free(p::Ref{gsl_permutation})\n    ccall(\n        (:gsl_permutation_free, :libgsl), # name of C function and library\n        Void,                             # output type\n        (Ref{gsl_permutation},),          # tuple of input types\n        p                                 # name of Julia variable to pass in\n    )\nend</code></pre><p>Here, the input <code>p</code> is declared to be of type <code>Ref{gsl_permutation}</code>, meaning that the memory that <code>p</code> points to may be managed by Julia or by C. A pointer to memory allocated by C should be of type <code>Ptr{gsl_permutation}</code>, but it is convertable using <a href=\"../stdlib/c.html#Base.cconvert\"><code>Base.cconvert()</code></a> and therefore can be used in the same (covariant) context of the input argument to a <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a>. A pointer to memory allocated by Julia must be of type <code>Ref{gsl_permutation}</code>, to ensure that the memory address pointed to is valid and that Julia&#39;s garbage collector manages the chunk of memory pointed to correctly. Therefore, the <code>Ref{gsl_permutation}</code> declaration allows pointers managed by C or Julia to be used.</p><p>If the C wrapper never expects the user to pass pointers to memory managed by Julia, then using <code>p::Ptr{gsl_permutation}</code> for the method signature of the wrapper and similarly in the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> is also acceptable.</p><p>Here is a third example passing Julia arrays:</p><pre><code class=\"language-julia\"># The corresponding C signature is\n#    int gsl_sf_bessel_Jn_array (int nmin, int nmax, double x,\n#                                double result_array[])\nfunction sf_bessel_Jn_array(nmin::Integer, nmax::Integer, x::Real)\n    if nmax &lt; nmin\n        throw(DomainError())\n    end\n    result_array = Vector{Cdouble}(nmax - nmin + 1)\n    errorcode = ccall(\n        (:gsl_sf_bessel_Jn_array, :libgsl), # name of C function and library\n        Cint,                               # output type\n        (Cint, Cint, Cdouble, Ref{Cdouble}),# tuple of input types\n        nmin, nmax, x, result_array         # names of Julia variables to pass in\n    )\n    if errorcode != 0\n        error(&quot;GSL error code $errorcode&quot;)\n    end\n    return result_array\nend</code></pre><p>The C function wrapped returns an integer error code; the results of the actual evaluation of the Bessel J function populate the Julia array <code>result_array</code>. This variable can only be used with corresponding input type declaration <code>Ref{Cdouble}</code>, since its memory is allocated and managed by Julia, not C. The implicit call to <a href=\"../stdlib/c.html#Base.cconvert\"><code>Base.cconvert(Ref{Cdouble}, result_array)</code></a> unpacks the Julia pointer to a Julia array data structure into a form understandable by C.</p><p>Note that for this code to work correctly, <code>result_array</code> must be declared to be of type <code>Ref{Cdouble}</code> and not <code>Ptr{Cdouble}</code>. The memory is managed by Julia and the <code>Ref</code> signature alerts Julia&#39;s garbage collector to keep managing the memory for <code>result_array</code> while the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> executes. If <code>Ptr{Cdouble}</code> were used instead, the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> may still work, but Julia&#39;s garbage collector would not be aware that the memory declared for <code>result_array</code> is being used by the external C function. As a result, the code may produce a memory leak if <code>result_array</code> never gets freed by the garbage collector, or if the garbage collector prematurely frees <code>result_array</code>, the C function may end up throwing an invalid memory access exception.</p><h2><a class=\"nav-anchor\" id=\"Garbage-Collection-Safety-1\" href=\"#Garbage-Collection-Safety-1\">Garbage Collection Safety</a></h2><p>When passing data to a <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a>, it is best to avoid using the <a href=\"../stdlib/c.html#Base.pointer\"><code>pointer()</code></a> function. Instead define a convert method and pass the variables directly to the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a>. <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> automatically arranges that all of its arguments will be preserved from garbage collection until the call returns. If a C API will store a reference to memory allocated by Julia, after the <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> returns, you must arrange that the object remains visible to the garbage collector. The suggested way to handle this is to make a global variable of type <code>Array{Ref,1}</code> to hold these values, until the C library notifies you that it is finished with them.</p><p>Whenever you have created a pointer to Julia data, you must ensure the original data exists until you are done with using the pointer. Many methods in Julia such as <a href=\"../stdlib/c.html#Base.unsafe_load\"><code>unsafe_load()</code></a> and <a href=\"../stdlib/strings.html#Core.String-Tuple{AbstractString}\"><code>String()</code></a> make copies of data instead of taking ownership of the buffer, so that it is safe to free (or alter) the original data without affecting Julia. A notable exception is <a href=\"../stdlib/c.html#Base.unsafe_wrap-Union{Tuple{N}, Tuple{T}, Tuple{Union{Type{Array{T,N} where N}, Type{Array{T,N}}, Type{Array}},Ptr{T},Tuple{Vararg{Int64,N}}}} where N where T\"><code>unsafe_wrap()</code></a> which, for performance reasons, shares (or can be told to take ownership of) the underlying buffer.</p><p>The garbage collector does not guarantee any order of finalization. That is, if <code>a</code> contained a reference to <code>b</code> and both <code>a</code> and <code>b</code> are due for garbage collection, there is no guarantee that <code>b</code> would be finalized after <code>a</code>. If proper finalization of <code>a</code> depends on <code>b</code> being valid, it must be handled in other ways.</p><h2><a class=\"nav-anchor\" id=\"Non-constant-Function-Specifications-1\" href=\"#Non-constant-Function-Specifications-1\">Non-constant Function Specifications</a></h2><p>A <code>(name, library)</code> function specification must be a constant expression. However, it is possible to use computed values as function names by staging through <code>eval</code> as follows:</p><pre><code class=\"language-none\">@eval ccall(($(string(&quot;a&quot;, &quot;b&quot;)), &quot;lib&quot;), ...</code></pre><p>This expression constructs a name using <code>string</code>, then substitutes this name into a new <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> expression, which is then evaluated. Keep in mind that <code>eval</code> only operates at the top level, so within this expression local variables will not be available (unless their values are substituted with <code>$</code>). For this reason, <code>eval</code> is typically only used to form top-level definitions, for example when wrapping libraries that contain many similar functions.</p><p>If your usage is more dynamic, use indirect calls as described in the next section.</p><h2><a class=\"nav-anchor\" id=\"Indirect-Calls-1\" href=\"#Indirect-Calls-1\">Indirect Calls</a></h2><p>The first argument to <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> can also be an expression evaluated at run time. In this case, the expression must evaluate to a <code>Ptr</code>, which will be used as the address of the native function to call. This behavior occurs when the first <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> argument contains references to non-constants, such as local variables, function arguments, or non-constant globals.</p><p>For example, you might look up the function via <code>dlsym</code>, then cache it in a global variable for that session. For example:</p><pre><code class=\"language-julia\">macro dlsym(func, lib)\n    z, zlocal = gensym(string(func)), gensym()\n    eval(current_module(), :(global $z = C_NULL))\n    z = esc(z)\n    quote\n        let $zlocal::Ptr{Void} = $z::Ptr{Void}\n            if $zlocal == C_NULL\n                $zlocal = dlsym($(esc(lib))::Ptr{Void}, $(esc(func)))\n                global $z = $zlocal\n            end\n            $zlocal\n        end\n    end\nend\n\nmylibvar = Libdl.dlopen(&quot;mylib&quot;)\nccall(@dlsym(&quot;myfunc&quot;, mylibvar), Void, ())</code></pre><h2><a class=\"nav-anchor\" id=\"Calling-Convention-1\" href=\"#Calling-Convention-1\">Calling Convention</a></h2><p>The second argument to <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> can optionally be a calling convention specifier (immediately preceding return type). Without any specifier, the platform-default C calling convention is used. Other supported conventions are: <code>stdcall</code>, <code>cdecl</code>, <code>fastcall</code>, and <code>thiscall</code>. For example (from <code>base/libc.jl</code>) we see the same <code>gethostname</code><a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> as above, but with the correct signature for Windows:</p><pre><code class=\"language-julia\">hn = Vector{UInt8}(256)\nerr = ccall(:gethostname, stdcall, Int32, (Ptr{UInt8}, UInt32), hn, length(hn))</code></pre><p>For more information, please see the <a href=\"http://llvm.org/docs/LangRef.html#calling-conventions\">LLVM Language Reference</a>.</p><p>There is one additional special calling convention <code>llvmcall</code>, which allows inserting calls to LLVM intrinsics directly. This can be especially useful when targeting unusual platforms such as GPGPUs. For example, for <a href=\"http://llvm.org/docs/NVPTXUsage.html\">CUDA</a>, we need to be able to read the thread index:</p><pre><code class=\"language-julia\">ccall(&quot;llvm.nvvm.read.ptx.sreg.tid.x&quot;, llvmcall, Int32, ())</code></pre><p>As with any <code>ccall</code>, it is essential to get the argument signature exactly correct. Also, note that there is no compatibility layer that ensures the intrinsic makes sense and works on the current target, unlike the equivalent Julia functions exposed by <code>Core.Intrinsics</code>.</p><h2><a class=\"nav-anchor\" id=\"Accessing-Global-Variables-1\" href=\"#Accessing-Global-Variables-1\">Accessing Global Variables</a></h2><p>Global variables exported by native libraries can be accessed by name using the <a href=\"../stdlib/c.html#Core.Intrinsics.cglobal\"><code>cglobal()</code></a> function. The arguments to <a href=\"../stdlib/c.html#Core.Intrinsics.cglobal\"><code>cglobal()</code></a> are a symbol specification identical to that used by <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a>, and a type describing the value stored in the variable:</p><pre><code class=\"language-julia-repl\">julia&gt; cglobal((:errno, :libc), Int32)\nPtr{Int32} @0x00007f418d0816b8</code></pre><p>The result is a pointer giving the address of the value. The value can be manipulated through this pointer using <a href=\"../stdlib/c.html#Base.unsafe_load\"><code>unsafe_load()</code></a> and <a href=\"../stdlib/c.html#Base.unsafe_store!\"><code>unsafe_store!()</code></a>.</p><h2><a class=\"nav-anchor\" id=\"Accessing-Data-through-a-Pointer-1\" href=\"#Accessing-Data-through-a-Pointer-1\">Accessing Data through a Pointer</a></h2><p>The following methods are described as &quot;unsafe&quot; because a bad pointer or type declaration can cause Julia to terminate abruptly.</p><p>Given a <code>Ptr{T}</code>, the contents of type <code>T</code> can generally be copied from the referenced memory into a Julia object using <code>unsafe_load(ptr, [index])</code>. The index argument is optional (default is 1), and follows the Julia-convention of 1-based indexing. This function is intentionally similar to the behavior of <a href=\"../stdlib/arrays.html#Base.getindex-Tuple{Type,Vararg{Any,N} where N}\"><code>getindex()</code></a> and <a href=\"../stdlib/arrays.html#Base.setindex!-Tuple{AbstractArray,Any,Vararg{Any,N} where N}\"><code>setindex!()</code></a> (e.g. <code>[]</code> access syntax).</p><p>The return value will be a new object initialized to contain a copy of the contents of the referenced memory. The referenced memory can safely be freed or released.</p><p>If <code>T</code> is <code>Any</code>, then the memory is assumed to contain a reference to a Julia object (a <code>jl_value_t*</code>), the result will be a reference to this object, and the object will not be copied. You must be careful in this case to ensure that the object was always visible to the garbage collector (pointers do not count, but the new reference does) to ensure the memory is not prematurely freed. Note that if the object was not originally allocated by Julia, the new object will never be finalized by Julia&#39;s garbage collector.  If the <code>Ptr</code> itself is actually a <code>jl_value_t*</code>, it can be converted back to a Julia object reference by <a href=\"../stdlib/c.html#Base.unsafe_pointer_to_objref\"><code>unsafe_pointer_to_objref(ptr)</code></a>. (Julia values <code>v</code> can be converted to <code>jl_value_t*</code> pointers, as <code>Ptr{Void}</code>, by calling <a href=\"../stdlib/c.html#Base.pointer_from_objref\"><code>pointer_from_objref(v)</code></a>.)</p><p>The reverse operation (writing data to a <code>Ptr{T}</code>), can be performed using <a href=\"../stdlib/c.html#Base.unsafe_store!\"><code>unsafe_store!(ptr, value, [index])</code></a>. Currently, this is only supported for primitive types or other pointer-free (<code>isbits</code>) immutable struct types.</p><p>Any operation that throws an error is probably currently unimplemented and should be posted as a bug so that it can be resolved.</p><p>If the pointer of interest is a plain-data array (primitive type or immutable struct), the function <a href=\"../stdlib/c.html#Base.unsafe_wrap-Union{Tuple{N}, Tuple{T}, Tuple{Union{Type{Array{T,N} where N}, Type{Array{T,N}}, Type{Array}},Ptr{T},Tuple{Vararg{Int64,N}}}} where N where T\"><code>unsafe_wrap(Array, ptr,dims,[own])</code></a> may be more useful. The final parameter should be true if Julia should &quot;take ownership&quot; of the underlying buffer and call <code>free(ptr)</code> when the returned <code>Array</code> object is finalized.  If the <code>own</code> parameter is omitted or false, the caller must ensure the buffer remains in existence until all access is complete.</p><p>Arithmetic on the <code>Ptr</code> type in Julia (e.g. using <code>+</code>) does not behave the same as C&#39;s pointer arithmetic. Adding an integer to a <code>Ptr</code> in Julia always moves the pointer by some number of <em>bytes</em>, not elements. This way, the address values obtained from pointer arithmetic do not depend on the element types of pointers.</p><h2><a class=\"nav-anchor\" id=\"Thread-safety-1\" href=\"#Thread-safety-1\">Thread-safety</a></h2><p>Some C libraries execute their callbacks from a different thread, and since Julia isn&#39;t thread-safe you&#39;ll need to take some extra precautions. In particular, you&#39;ll need to set up a two-layered system: the C callback should only <em>schedule</em> (via Julia&#39;s event loop) the execution of your &quot;real&quot; callback. To do this, create a <code>AsyncCondition</code> object and wait on it:</p><pre><code class=\"language-julia\">cond = Base.AsyncCondition()\nwait(cond)</code></pre><p>The callback you pass to C should only execute a <a href=\"../stdlib/c.html#ccall\"><code>ccall</code></a> to <code>:uv_async_send</code>, passing <code>cond.handle</code> as the argument, taking care to avoid any allocations or other interactions with the Julia runtime.</p><p>Note that events may be coalesced, so multiple calls to <code>uv_async_send</code> may result in a single wakeup notification to the condition.</p><h2><a class=\"nav-anchor\" id=\"More-About-Callbacks-1\" href=\"#More-About-Callbacks-1\">More About Callbacks</a></h2><p>For more details on how to pass callbacks to C libraries, see this <a href=\"https://julialang.org/blog/2013/05/callback\">blog post</a>.</p><h2><a class=\"nav-anchor\" id=\"C-1\" href=\"#C-1\">C++</a></h2><p>For direct C++ interfacing, see the <a href=\"https://github.com/Keno/Cxx.jl\">Cxx</a> package. For tools to create C++ bindings, see the <a href=\"https://github.com/JuliaInterop/CxxWrap.jl\">CxxWrap</a> package.</p><footer><hr/><a class=\"previous\" href=\"running-external-programs.html\"><span class=\"direction\">Previous</span><span class=\"title\">Running External Programs</span></a><a class=\"next\" href=\"handling-operating-system-variation.html\"><span class=\"direction\">Next</span><span class=\"title\">Handling Operating System Variation</span></a></footer></article></body></html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/_build/html/en/stdlib/libdl.html": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"UTF-8\"/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/><title>Dynamic Linker \u00b7 The Julia Language</title><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-28835595-6', 'auto');\nga('send', 'pageview');\n</script><link href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.min.css\" rel=\"stylesheet\" type=\"text/css\"/><link href=\"https://fonts.googleapis.com/css?family=Lato|Roboto+Mono\" rel=\"stylesheet\" type=\"text/css\"/><link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"/><script>documenterBaseURL=\"..\"</script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.2.0/require.min.js\" data-main=\"../assets/documenter.js\"></script><script src=\"../siteinfo.js\"></script><script src=\"../../versions.js\"></script><link href=\"../assets/highlightjs/default.css\" rel=\"stylesheet\" type=\"text/css\"/><link href=\"../assets/documenter.css\" rel=\"stylesheet\" type=\"text/css\"/></head><body><nav class=\"toc\"><a href=\"../index.html\"><img class=\"logo\" src=\"../assets/logo.png\" alt=\"The Julia Language logo\"/></a><h1>The Julia Language</h1><select id=\"version-selector\" onChange=\"window.location.href=this.value\" style=\"visibility: hidden\"></select><form class=\"search\" action=\"../search.html\"><input id=\"search-query\" name=\"q\" type=\"text\" placeholder=\"Search docs\"/></form><ul><li><a class=\"toctext\" href=\"../index.html\">Home</a></li><li><span class=\"toctext\">Manual</span><ul><li><a class=\"toctext\" href=\"../manual/introduction.html\">Introduction</a></li><li><a class=\"toctext\" href=\"../manual/getting-started.html\">Getting Started</a></li><li><a class=\"toctext\" href=\"../manual/variables.html\">Variables</a></li><li><a class=\"toctext\" href=\"../manual/integers-and-floating-point-numbers.html\">Integers and Floating-Point Numbers</a></li><li><a class=\"toctext\" href=\"../manual/mathematical-operations.html\">Mathematical Operations and Elementary Functions</a></li><li><a class=\"toctext\" href=\"../manual/complex-and-rational-numbers.html\">Complex and Rational Numbers</a></li><li><a class=\"toctext\" href=\"../manual/strings.html\">Strings</a></li><li><a class=\"toctext\" href=\"../manual/functions.html\">Functions</a></li><li><a class=\"toctext\" href=\"../manual/control-flow.html\">Control Flow</a></li><li><a class=\"toctext\" href=\"../manual/variables-and-scoping.html\">Scope of Variables</a></li><li><a class=\"toctext\" href=\"../manual/types.html\">Types</a></li><li><a class=\"toctext\" href=\"../manual/methods.html\">Methods</a></li><li><a class=\"toctext\" href=\"../manual/constructors.html\">Constructors</a></li><li><a class=\"toctext\" href=\"../manual/conversion-and-promotion.html\">Conversion and Promotion</a></li><li><a class=\"toctext\" href=\"../manual/interfaces.html\">Interfaces</a></li><li><a class=\"toctext\" href=\"../manual/modules.html\">Modules</a></li><li><a class=\"toctext\" href=\"../manual/documentation.html\">Documentation</a></li><li><a class=\"toctext\" href=\"../manual/metaprogramming.html\">Metaprogramming</a></li><li><a class=\"toctext\" href=\"../manual/arrays.html\">Multi-dimensional Arrays</a></li><li><a class=\"toctext\" href=\"../manual/linear-algebra.html\">Linear algebra</a></li><li><a class=\"toctext\" href=\"../manual/networking-and-streams.html\">Networking and Streams</a></li><li><a class=\"toctext\" href=\"../manual/parallel-computing.html\">Parallel Computing</a></li><li><a class=\"toctext\" href=\"../manual/dates.html\">Date and DateTime</a></li><li><a class=\"toctext\" href=\"../manual/interacting-with-julia.html\">Interacting With Julia</a></li><li><a class=\"toctext\" href=\"../manual/running-external-programs.html\">Running External Programs</a></li><li><a class=\"toctext\" href=\"../manual/calling-c-and-fortran-code.html\">Calling C and Fortran Code</a></li><li><a class=\"toctext\" href=\"../manual/handling-operating-system-variation.html\">Handling Operating System Variation</a></li><li><a class=\"toctext\" href=\"../manual/environment-variables.html\">Environment Variables</a></li><li><a class=\"toctext\" href=\"../manual/embedding.html\">Embedding Julia</a></li><li><a class=\"toctext\" href=\"../manual/packages.html\">Packages</a></li><li><a class=\"toctext\" href=\"../manual/profile.html\">Profiling</a></li><li><a class=\"toctext\" href=\"../manual/stacktraces.html\">Stack Traces</a></li><li><a class=\"toctext\" href=\"../manual/performance-tips.html\">Performance Tips</a></li><li><a class=\"toctext\" href=\"../manual/workflow-tips.html\">Workflow Tips</a></li><li><a class=\"toctext\" href=\"../manual/style-guide.html\">Style Guide</a></li><li><a class=\"toctext\" href=\"../manual/faq.html\">Frequently Asked Questions</a></li><li><a class=\"toctext\" href=\"../manual/noteworthy-differences.html\">Noteworthy Differences from other Languages</a></li><li><a class=\"toctext\" href=\"../manual/unicode-input.html\">Unicode Input</a></li></ul></li><li><span class=\"toctext\">Standard Library</span><ul><li><a class=\"toctext\" href=\"base.html\">Essentials</a></li><li><a class=\"toctext\" href=\"collections.html\">Collections and Data Structures</a></li><li><a class=\"toctext\" href=\"math.html\">Mathematics</a></li><li><a class=\"toctext\" href=\"numbers.html\">Numbers</a></li><li><a class=\"toctext\" href=\"strings.html\">Strings</a></li><li><a class=\"toctext\" href=\"arrays.html\">Arrays</a></li><li><a class=\"toctext\" href=\"parallel.html\">Tasks and Parallel Computing</a></li><li><a class=\"toctext\" href=\"linalg.html\">Linear Algebra</a></li><li><a class=\"toctext\" href=\"constants.html\">Constants</a></li><li><a class=\"toctext\" href=\"file.html\">Filesystem</a></li><li><a class=\"toctext\" href=\"io-network.html\">I/O and Network</a></li><li><a class=\"toctext\" href=\"punctuation.html\">Punctuation</a></li><li><a class=\"toctext\" href=\"sort.html\">Sorting and Related Functions</a></li><li><a class=\"toctext\" href=\"pkg.html\">Package Manager Functions</a></li><li><a class=\"toctext\" href=\"dates.html\">Dates and Time</a></li><li><a class=\"toctext\" href=\"iterators.html\">Iteration utilities</a></li><li><a class=\"toctext\" href=\"test.html\">Unit Testing</a></li><li><a class=\"toctext\" href=\"c.html\">C Interface</a></li><li><a class=\"toctext\" href=\"libc.html\">C Standard Library</a></li><li class=\"current\"><a class=\"toctext\" href=\"libdl.html\">Dynamic Linker</a><ul class=\"internal\"></ul></li><li><a class=\"toctext\" href=\"profile.html\">Profiling</a></li><li><a class=\"toctext\" href=\"stacktraces.html\">StackTraces</a></li><li><a class=\"toctext\" href=\"simd-types.html\">SIMD Support</a></li></ul></li><li><span class=\"toctext\">Developer Documentation</span><ul><li><a class=\"toctext\" href=\"../devdocs/reflection.html\">Reflection and introspection</a></li><li><span class=\"toctext\">Documentation of Julia&#39;s Internals</span><ul><li><a class=\"toctext\" href=\"../devdocs/init.html\">Initialization of the Julia runtime</a></li><li><a class=\"toctext\" href=\"../devdocs/ast.html\">Julia ASTs</a></li><li><a class=\"toctext\" href=\"../devdocs/types.html\">More about types</a></li><li><a class=\"toctext\" href=\"../devdocs/object.html\">Memory layout of Julia Objects</a></li><li><a class=\"toctext\" href=\"../devdocs/eval.html\">Eval of Julia code</a></li><li><a class=\"toctext\" href=\"../devdocs/callconv.html\">Calling Conventions</a></li><li><a class=\"toctext\" href=\"../devdocs/compiler.html\">High-level Overview of the Native-Code Generation Process</a></li><li><a class=\"toctext\" href=\"../devdocs/functions.html\">Julia Functions</a></li><li><a class=\"toctext\" href=\"../devdocs/cartesian.html\">Base.Cartesian</a></li><li><a class=\"toctext\" href=\"../devdocs/meta.html\">Talking to the compiler (the <code>:meta</code> mechanism)</a></li><li><a class=\"toctext\" href=\"../devdocs/subarrays.html\">SubArrays</a></li><li><a class=\"toctext\" href=\"../devdocs/sysimg.html\">System Image Building</a></li><li><a class=\"toctext\" href=\"../devdocs/llvm.html\">Working with LLVM</a></li><li><a class=\"toctext\" href=\"../devdocs/stdio.html\">printf() and stdio in the Julia runtime</a></li><li><a class=\"toctext\" href=\"../devdocs/boundscheck.html\">Bounds checking</a></li><li><a class=\"toctext\" href=\"../devdocs/locks.html\">Proper maintenance and care of multi-threading locks</a></li><li><a class=\"toctext\" href=\"../devdocs/offset-arrays.html\">Arrays with custom indices</a></li><li><a class=\"toctext\" href=\"../devdocs/libgit2.html\">Base.LibGit2</a></li><li><a class=\"toctext\" href=\"../devdocs/require.html\">Module loading</a></li></ul></li><li><span class=\"toctext\">Developing/debugging Julia&#39;s C code</span><ul><li><a class=\"toctext\" href=\"../devdocs/backtraces.html\">Reporting and analyzing crashes (segfaults)</a></li><li><a class=\"toctext\" href=\"../devdocs/debuggingtips.html\">gdb debugging tips</a></li><li><a class=\"toctext\" href=\"../devdocs/valgrind.html\">Using Valgrind with Julia</a></li><li><a class=\"toctext\" href=\"../devdocs/sanitizers.html\">Sanitizer support</a></li></ul></li></ul></li></ul></nav><article id=\"docs\"><header><nav><ul><li>Standard Library</li><li><a href=\"libdl.html\">Dynamic Linker</a></li></ul><a class=\"edit-page\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/doc/src/stdlib/libdl.md\"><span class=\"fa\">\uf09b</span> Edit on GitHub</a></nav><hr/><div id=\"topbar\"><span>Dynamic Linker</span><a class=\"fa fa-bars\" href=\"#\"></a></div></header><h1><a class=\"nav-anchor\" id=\"Dynamic-Linker-1\" href=\"#Dynamic-Linker-1\">Dynamic Linker</a></h1><p>The names in <code>Base.Libdl</code> are not exported and need to be called e.g. as <code>Libdl.dlopen()</code>.</p><section class=\"docstring\"><div class=\"docstring-header\"><a class=\"docstring-binding\" id=\"Base.Libdl.dlopen\" href=\"#Base.Libdl.dlopen\"><code>Base.Libdl.dlopen</code></a> \u2014 <span class=\"docstring-category\">Function</span>.</div><div><pre><code class=\"language-none\">dlopen(libfile::AbstractString [, flags::Integer])</code></pre><p>Load a shared library, returning an opaque handle.</p><p>The extension given by the constant <code>dlext</code> (<code>.so</code>, <code>.dll</code>, or <code>.dylib</code>) can be omitted from the <code>libfile</code> string, as it is automatically appended if needed.   If <code>libfile</code> is not an absolute path name, then the paths in the array <code>DL_LOAD_PATH</code> are searched for <code>libfile</code>, followed by the system load path.</p><p>The optional flags argument is a bitwise-or of zero or more of <code>RTLD_LOCAL</code>, <code>RTLD_GLOBAL</code>, <code>RTLD_LAZY</code>, <code>RTLD_NOW</code>, <code>RTLD_NODELETE</code>, <code>RTLD_NOLOAD</code>, <code>RTLD_DEEPBIND</code>, and <code>RTLD_FIRST</code>. These are converted to the corresponding flags of the POSIX (and/or GNU libc and/or MacOS) dlopen command, if possible, or are ignored if the specified functionality is not available on the current platform. The default flags are platform specific. On MacOS the default <code>dlopen</code> flags are <code>RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL</code> while on other platforms the defaults are <code>RTLD_LAZY|RTLD_DEEPBIND|RTLD_LOCAL</code>. An important usage of these flags is to specify non default behavior for when the dynamic library loader binds library references to exported symbols and if the bound references are put into process local or global scope. For instance <code>RTLD_LAZY|RTLD_DEEPBIND|RTLD_GLOBAL</code> allows the library&#39;s symbols to be available for usage in other shared libraries, addressing situations where there are dependencies between shared libraries.</p></div><a class=\"source-link\" target=\"_blank\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/base/libdl.jl#L68-L91\">source</a><br/></section><section class=\"docstring\"><div class=\"docstring-header\"><a class=\"docstring-binding\" id=\"Base.Libdl.dlopen_e\" href=\"#Base.Libdl.dlopen_e\"><code>Base.Libdl.dlopen_e</code></a> \u2014 <span class=\"docstring-category\">Function</span>.</div><div><pre><code class=\"language-none\">dlopen_e(libfile::AbstractString [, flags::Integer])</code></pre><p>Similar to <a href=\"libdl.html#Base.Libdl.dlopen\"><code>dlopen</code></a>, except returns a <code>NULL</code> pointer instead of raising errors.</p></div><a class=\"source-link\" target=\"_blank\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/base/libdl.jl#L100-L104\">source</a><br/></section><section class=\"docstring\"><div class=\"docstring-header\"><a class=\"docstring-binding\" id=\"Base.Libdl.RTLD_NOW\" href=\"#Base.Libdl.RTLD_NOW\"><code>Base.Libdl.RTLD_NOW</code></a> \u2014 <span class=\"docstring-category\">Constant</span>.</div><div><pre><code class=\"language-none\">RTLD_DEEPBIND\nRTLD_FIRST\nRTLD_GLOBAL\nRTLD_LAZY\nRTLD_LOCAL\nRTLD_NODELETE\nRTLD_NOLOAD\nRTLD_NOW</code></pre><p>Enum constant for <a href=\"libdl.html#Base.Libdl.dlopen\"><code>dlopen</code></a>. See your platform man page for details, if applicable.</p></div><a class=\"source-link\" target=\"_blank\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/base/libdl.jl#L32-L44\">source</a><br/></section><section class=\"docstring\"><div class=\"docstring-header\"><a class=\"docstring-binding\" id=\"Base.Libdl.dlsym\" href=\"#Base.Libdl.dlsym\"><code>Base.Libdl.dlsym</code></a> \u2014 <span class=\"docstring-category\">Function</span>.</div><div><pre><code class=\"language-none\">dlsym(handle, sym)</code></pre><p>Look up a symbol from a shared library handle, return callable function pointer on success.</p></div><a class=\"source-link\" target=\"_blank\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/base/libdl.jl#L48-L52\">source</a><br/></section><section class=\"docstring\"><div class=\"docstring-header\"><a class=\"docstring-binding\" id=\"Base.Libdl.dlsym_e\" href=\"#Base.Libdl.dlsym_e\"><code>Base.Libdl.dlsym_e</code></a> \u2014 <span class=\"docstring-category\">Function</span>.</div><div><pre><code class=\"language-none\">dlsym_e(handle, sym)</code></pre><p>Look up a symbol from a shared library handle, silently return <code>NULL</code> pointer on lookup failure.</p></div><a class=\"source-link\" target=\"_blank\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/base/libdl.jl#L58-L62\">source</a><br/></section><section class=\"docstring\"><div class=\"docstring-header\"><a class=\"docstring-binding\" id=\"Base.Libdl.dlclose\" href=\"#Base.Libdl.dlclose\"><code>Base.Libdl.dlclose</code></a> \u2014 <span class=\"docstring-category\">Function</span>.</div><div><pre><code class=\"language-none\">dlclose(handle)</code></pre><p>Close shared library referenced by handle.</p></div><a class=\"source-link\" target=\"_blank\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/base/libdl.jl#L113-L117\">source</a><br/></section><section class=\"docstring\"><div class=\"docstring-header\"><a class=\"docstring-binding\" id=\"Base.Libdl.dlext\" href=\"#Base.Libdl.dlext\"><code>Base.Libdl.dlext</code></a> \u2014 <span class=\"docstring-category\">Constant</span>.</div><div><pre><code class=\"language-none\">dlext</code></pre><p>File extension for dynamic libraries (e.g. dll, dylib, so) on the current platform.</p></div><a class=\"source-link\" target=\"_blank\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/base/libdl.jl#L175-L179\">source</a><br/></section><section class=\"docstring\"><div class=\"docstring-header\"><a class=\"docstring-binding\" id=\"Base.Libdl.find_library\" href=\"#Base.Libdl.find_library\"><code>Base.Libdl.find_library</code></a> \u2014 <span class=\"docstring-category\">Function</span>.</div><div><pre><code class=\"language-none\">find_library(names, locations)</code></pre><p>Searches for the first library in <code>names</code> in the paths in the <code>locations</code> list, <code>DL_LOAD_PATH</code>, or system library paths (in that order) which can successfully be dlopen&#39;d. On success, the return value will be one of the names (potentially prefixed by one of the paths in locations). This string can be assigned to a <code>global const</code> and used as the library name in future <code>ccall</code>&#39;s. On failure, it returns the empty string.</p></div><a class=\"source-link\" target=\"_blank\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/base/libdl.jl#L122-L130\">source</a><br/></section><section class=\"docstring\"><div class=\"docstring-header\"><a class=\"docstring-binding\" id=\"Base.Libdl.DL_LOAD_PATH\" href=\"#Base.Libdl.DL_LOAD_PATH\"><code>Base.Libdl.DL_LOAD_PATH</code></a> \u2014 <span class=\"docstring-category\">Constant</span>.</div><div><pre><code class=\"language-none\">DL_LOAD_PATH</code></pre><p>When calling <a href=\"libdl.html#Base.Libdl.dlopen\"><code>dlopen</code></a>, the paths in this list will be searched first, in order, before searching the system locations for a valid library handle.</p></div><a class=\"source-link\" target=\"_blank\" href=\"https://github.com/JuliaLang/julia/tree/d386e40c17d43b79fc89d3e579fc04547241787c/base/libdl.jl#L9-L14\">source</a><br/></section><footer><hr/><a class=\"previous\" href=\"libc.html\"><span class=\"direction\">Previous</span><span class=\"title\">C Standard Library</span></a><a class=\"next\" href=\"profile.html\"><span class=\"direction\">Next</span><span class=\"title\">Profiling</span></a></footer></article></body></html>\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/dsfmt-2.2.3.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/libssh2-30e9c1347e3b8baa2951db612f05e6d87fc8e2f2.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/mpfr-3.1.5.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/pcre2-10.23.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/openlibm-1581174c85f7b645b15ba1ac1c3a98fb601f0fe7.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/arpack-ng-3.3.0.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/openspecfun-39699a1c1824bf88410cabb8a7438af91ea98f4c.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/lapack-3.5.0.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/libuv-d8ab1c6a33e77bf155facb54215dd8798e13825d.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/utf8proc-40e605959eb5cb90b2587fa88e3b661558fbc55a.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/libunwind-1.1-julia2.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/libgit2-2fcb8705e584ca61f6c4657525c9d2713f6a39d2.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/llvm-3.9.1.src.tar.xz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/curl-7.56.0.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/objconv.zip",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/libosxunwind-0.0.3.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/openblas-85636ff1a015d04d3a8f960bc644b85ee5157135.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/patchelf-0.9.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/fftw-3.3.6-pl1.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/gmp-6.1.2.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/mbedtls-2.3.0-gpl.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/deps/srccache/SuiteSparse-4.4.5.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/contrib/windows/julia.ico",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/contrib/windows/7zS.sfx",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/contrib/mac/app/julia.icns",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/images/travis-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/images/github_metadata_pullrequest.png",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/images/jltypes.ai",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/images/github_metadata_develbranch.png",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/images/github_metadata_fork.png",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/src/assets/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-julia-0.6.2-ovqtujbmbeiu5oofpo7fhzyo76f6jvv6/spack-src/doc/_build/html/en/assets/logo.png"
    ],
    "total_files": 1165
}