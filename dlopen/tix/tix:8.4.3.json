{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/tclconfig/tcl.m4": "# tcl.m4 --\n#\n#\tThis file provides a set of autoconf macros to help TEA-enable\n#\ta Tcl extension.\n#\n# Copyright (c) 1999-2000 Ajuba Solutions.\n# Copyright (c) 2002-2005 ActiveState Corporation.\n#\n# See the file \"license.terms\" for information on usage and redistribution\n# of this file, and for a DISCLAIMER OF ALL WARRANTIES.\n#\n# RCS: @(#) $Id: tcl.m4,v 1.6 2007/02/21 22:09:05 hobbs Exp $\n\nAC_PREREQ(2.57)\n\ndnl TEA extensions pass us the version of TEA they think they\ndnl are compatible with (must be set in TEA_INIT below)\ndnl TEA_VERSION=\"3.6\"\n\n# Possible values for key variables defined:\n#\n# TEA_WINDOWINGSYSTEM - win32 aqua x11 (mirrors 'tk windowingsystem')\n# TEA_PLATFORM        - windows unix\n#\n\n#------------------------------------------------------------------------\n# TEA_PATH_TCLCONFIG --\n#\n#\tLocate the tclConfig.sh file and perform a sanity check on\n#\tthe Tcl compile flags\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--with-tcl=...\n#\n#\tDefines the following vars:\n#\t\tTCL_BIN_DIR\tFull path to the directory containing\n#\t\t\t\tthe tclConfig.sh file\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PATH_TCLCONFIG], [\n    dnl Make sure we are initialized\n    AC_REQUIRE([TEA_INIT])\n    #\n    # Ok, lets find the tcl configuration\n    # First, look for one uninstalled.\n    # the alternative search directory is invoked by --with-tcl\n    #\n\n    if test x\"${no_tcl}\" = x ; then\n\t# we reset no_tcl in case something fails here\n\tno_tcl=true\n\tAC_ARG_WITH(tcl,\n\t    AC_HELP_STRING([--with-tcl],\n\t\t[directory containing tcl configuration (tclConfig.sh)]),\n\t    with_tclconfig=${withval})\n\tAC_MSG_CHECKING([for Tcl configuration])\n\tAC_CACHE_VAL(ac_cv_c_tclconfig,[\n\n\t    # First check to see if --with-tcl was specified.\n\t    if test x\"${with_tclconfig}\" != x ; then\n\t\tcase ${with_tclconfig} in\n\t\t    */tclConfig.sh )\n\t\t\tif test -f ${with_tclconfig}; then\n\t\t\t    AC_MSG_WARN([--with-tcl argument should refer to directory containing tclConfig.sh, not to tclConfig.sh itself])\n\t\t\t    with_tclconfig=`echo ${with_tclconfig} | sed 's!/tclConfig\\.sh$!!'`\n\t\t\tfi ;;\n\t\tesac\n\t\tif test -f \"${with_tclconfig}/tclConfig.sh\" ; then\n\t\t    ac_cv_c_tclconfig=`(cd ${with_tclconfig}; pwd)`\n\t\telse\n\t\t    AC_MSG_ERROR([${with_tclconfig} directory doesn't contain tclConfig.sh])\n\t\tfi\n\t    fi\n\n\t    # then check for a private Tcl installation\n\t    if test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t../tcl \\\n\t\t\t`ls -dr ../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../tcl[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../tcl \\\n\t\t\t`ls -dr ../../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../tcl[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../../tcl \\\n\t\t\t`ls -dr ../../../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tcl[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/unix/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=`(cd $i/unix; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # on Darwin, check in Framework installation locations\n\t    if test \"`uname -s`\" = \"Darwin\" -a x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in `ls -d ~/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Network/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /System/Library/Frameworks 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/Tcl.framework/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=`(cd $i/Tcl.framework; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # on Windows, check in common installation locations\n\t    if test \"${TEA_PLATFORM}\" = \"windows\" \\\n\t\t-a x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in `ls -d C:/Tcl/lib 2>/dev/null` \\\n\t\t\t`ls -d C:/Progra~1/Tcl/lib 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=`(cd $i; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few common install locations\n\t    if test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in `ls -d ${libdir} 2>/dev/null` \\\n\t\t\t`ls -d ${exec_prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d ${prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/local/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/contrib/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/lib 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/tclConfig.sh\" ; then\n\t\t\tac_cv_c_tclconfig=`(cd $i; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few other private locations\n\t    if test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t${srcdir}/../tcl \\\n\t\t\t`ls -dr ${srcdir}/../tcl[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tcl[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tcl[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/unix/tclConfig.sh\" ; then\n\t\t    ac_cv_c_tclconfig=`(cd $i/unix; pwd)`\n\t\t    break\n\t\tfi\n\t\tdone\n\t    fi\n\t])\n\n\tif test x\"${ac_cv_c_tclconfig}\" = x ; then\n\t    TCL_BIN_DIR=\"# no Tcl configs found\"\n\t    AC_MSG_WARN([Can't find Tcl configuration definitions])\n\t    exit 0\n\telse\n\t    no_tcl=\n\t    TCL_BIN_DIR=${ac_cv_c_tclconfig}\n\t    AC_MSG_RESULT([found ${TCL_BIN_DIR}/tclConfig.sh])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# TEA_PATH_TKCONFIG --\n#\n#\tLocate the tkConfig.sh file\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--with-tk=...\n#\n#\tDefines the following vars:\n#\t\tTK_BIN_DIR\tFull path to the directory containing\n#\t\t\t\tthe tkConfig.sh file\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PATH_TKCONFIG], [\n    #\n    # Ok, lets find the tk configuration\n    # First, look for one uninstalled.\n    # the alternative search directory is invoked by --with-tk\n    #\n\n    if test x\"${no_tk}\" = x ; then\n\t# we reset no_tk in case something fails here\n\tno_tk=true\n\tAC_ARG_WITH(tk,\n\t    AC_HELP_STRING([--with-tk],\n\t\t[directory containing tk configuration (tkConfig.sh)]),\n\t    with_tkconfig=${withval})\n\tAC_MSG_CHECKING([for Tk configuration])\n\tAC_CACHE_VAL(ac_cv_c_tkconfig,[\n\n\t    # First check to see if --with-tkconfig was specified.\n\t    if test x\"${with_tkconfig}\" != x ; then\n\t\tcase ${with_tkconfig} in\n\t\t    */tkConfig.sh )\n\t\t\tif test -f ${with_tkconfig}; then\n\t\t\t    AC_MSG_WARN([--with-tk argument should refer to directory containing tkConfig.sh, not to tkConfig.sh itself])\n\t\t\t    with_tkconfig=`echo ${with_tkconfig} | sed 's!/tkConfig\\.sh$!!'`\n\t\t\tfi ;;\n\t\tesac\n\t\tif test -f \"${with_tkconfig}/tkConfig.sh\" ; then\n\t\t    ac_cv_c_tkconfig=`(cd ${with_tkconfig}; pwd)`\n\t\telse\n\t\t    AC_MSG_ERROR([${with_tkconfig} directory doesn't contain tkConfig.sh])\n\t\tfi\n\t    fi\n\n\t    # then check for a private Tk library\n\t    if test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t../tk \\\n\t\t\t`ls -dr ../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../tk[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../tk \\\n\t\t\t`ls -dr ../../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../tk[[8-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../../tk \\\n\t\t\t`ls -dr ../../../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../../tk[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/unix/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=`(cd $i/unix; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # on Darwin, check in Framework installation locations\n\t    if test \"`uname -s`\" = \"Darwin\" -a x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in `ls -d ~/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /Network/Library/Frameworks 2>/dev/null` \\\n\t\t\t`ls -d /System/Library/Frameworks 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/Tk.framework/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=`(cd $i/Tk.framework; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few common install locations\n\t    if test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in `ls -d ${libdir} 2>/dev/null` \\\n\t\t\t`ls -d ${exec_prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d ${prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/local/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/contrib/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/lib 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=`(cd $i; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # on Windows, check in common installation locations\n\t    if test \"${TEA_PLATFORM}\" = \"windows\" \\\n\t\t-a x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in `ls -d C:/Tcl/lib 2>/dev/null` \\\n\t\t\t`ls -d C:/Progra~1/Tcl/lib 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=`(cd $i; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few other private locations\n\t    if test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t${srcdir}/../tk \\\n\t\t\t`ls -dr ${srcdir}/../tk[[8-9]].[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tk[[8-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../tk[[8-9]].[[0-9]]* 2>/dev/null` ; do\n\t\t    if test -f \"$i/unix/tkConfig.sh\" ; then\n\t\t\tac_cv_c_tkconfig=`(cd $i/unix; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\t])\n\n\tif test x\"${ac_cv_c_tkconfig}\" = x ; then\n\t    TK_BIN_DIR=\"# no Tk configs found\"\n\t    AC_MSG_WARN([Can't find Tk configuration definitions])\n\t    exit 0\n\telse\n\t    no_tk=\n\t    TK_BIN_DIR=${ac_cv_c_tkconfig}\n\t    AC_MSG_RESULT([found ${TK_BIN_DIR}/tkConfig.sh])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# TEA_LOAD_TCLCONFIG --\n#\n#\tLoad the tclConfig.sh file\n#\n# Arguments:\n#\t\n#\tRequires the following vars to be set:\n#\t\tTCL_BIN_DIR\n#\n# Results:\n#\n#\tSubst the following vars:\n#\t\tTCL_BIN_DIR\n#\t\tTCL_SRC_DIR\n#\t\tTCL_LIB_FILE\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_LOAD_TCLCONFIG], [\n    AC_MSG_CHECKING([for existence of ${TCL_BIN_DIR}/tclConfig.sh])\n\n    if test -f \"${TCL_BIN_DIR}/tclConfig.sh\" ; then\n        AC_MSG_RESULT([loading])\n\t. ${TCL_BIN_DIR}/tclConfig.sh\n    else\n        AC_MSG_RESULT([could not find ${TCL_BIN_DIR}/tclConfig.sh])\n    fi\n\n    # eval is required to do the TCL_DBGX substitution\n    eval \"TCL_LIB_FILE=\\\"${TCL_LIB_FILE}\\\"\"\n    eval \"TCL_STUB_LIB_FILE=\\\"${TCL_STUB_LIB_FILE}\\\"\"\n\n    # If the TCL_BIN_DIR is the build directory (not the install directory),\n    # then set the common variable name to the value of the build variables.\n    # For example, the variable TCL_LIB_SPEC will be set to the value\n    # of TCL_BUILD_LIB_SPEC. An extension should make use of TCL_LIB_SPEC\n    # instead of TCL_BUILD_LIB_SPEC since it will work with both an\n    # installed and uninstalled version of Tcl.\n    if test -f ${TCL_BIN_DIR}/Makefile ; then\n        TCL_LIB_SPEC=${TCL_BUILD_LIB_SPEC}\n        TCL_STUB_LIB_SPEC=${TCL_BUILD_STUB_LIB_SPEC}\n        TCL_STUB_LIB_PATH=${TCL_BUILD_STUB_LIB_PATH}\n    elif test \"`uname -s`\" = \"Darwin\"; then\n\t# If Tcl was built as a framework, attempt to use the libraries\n\t# from the framework at the given location so that linking works\n\t# against Tcl.framework installed in an arbitary location.\n\tcase ${TCL_DEFS} in\n\t    *TCL_FRAMEWORK*)\n\t\tif test -f ${TCL_BIN_DIR}/${TCL_LIB_FILE}; then\n\t\t    for i in \"`cd ${TCL_BIN_DIR}; pwd`\" \\\n\t\t\t     \"`cd ${TCL_BIN_DIR}/../..; pwd`\"; do\n\t\t\tif test \"`basename \"$i\"`\" = \"${TCL_LIB_FILE}.framework\"; then\n\t\t\t    TCL_LIB_SPEC=\"-F`dirname \"$i\"` -framework ${TCL_LIB_FILE}\"\n\t\t\t    break\n\t\t\tfi\n\t\t    done\n\t\tfi\n\t\tif test -f ${TCL_BIN_DIR}/${TCL_STUB_LIB_FILE}; then\n\t\t    TCL_STUB_LIB_SPEC=\"-L${TCL_BIN_DIR} ${TCL_STUB_LIB_FLAG}\"\n\t\t    TCL_STUB_LIB_PATH=\"${TCL_BIN_DIR}/${TCL_STUB_LIB_FILE}\"\n\t\tfi\n\t\t;;\n\tesac\n    fi\n\n    # eval is required to do the TCL_DBGX substitution\n    eval \"TCL_LIB_FLAG=\\\"${TCL_LIB_FLAG}\\\"\"\n    eval \"TCL_LIB_SPEC=\\\"${TCL_LIB_SPEC}\\\"\"\n    eval \"TCL_STUB_LIB_FLAG=\\\"${TCL_STUB_LIB_FLAG}\\\"\"\n    eval \"TCL_STUB_LIB_SPEC=\\\"${TCL_STUB_LIB_SPEC}\\\"\"\n\n    AC_SUBST(TCL_VERSION)\n    AC_SUBST(TCL_BIN_DIR)\n    AC_SUBST(TCL_SRC_DIR)\n\n    AC_SUBST(TCL_LIB_FILE)\n    AC_SUBST(TCL_LIB_FLAG)\n    AC_SUBST(TCL_LIB_SPEC)\n\n    AC_SUBST(TCL_STUB_LIB_FILE)\n    AC_SUBST(TCL_STUB_LIB_FLAG)\n    AC_SUBST(TCL_STUB_LIB_SPEC)\n\n    AC_SUBST(TCL_LIBS)\n    AC_SUBST(TCL_DEFS)\n    AC_SUBST(TCL_EXTRA_CFLAGS)\n    AC_SUBST(TCL_LD_FLAGS)\n    AC_SUBST(TCL_SHLIB_LD_LIBS)\n])\n\n#------------------------------------------------------------------------\n# TEA_LOAD_TKCONFIG --\n#\n#\tLoad the tkConfig.sh file\n#\n# Arguments:\n#\t\n#\tRequires the following vars to be set:\n#\t\tTK_BIN_DIR\n#\n# Results:\n#\n#\tSets the following vars that should be in tkConfig.sh:\n#\t\tTK_BIN_DIR\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_LOAD_TKCONFIG], [\n    AC_MSG_CHECKING([for existence of ${TK_BIN_DIR}/tkConfig.sh])\n\n    if test -f \"${TK_BIN_DIR}/tkConfig.sh\" ; then\n        AC_MSG_RESULT([loading])\n\t. ${TK_BIN_DIR}/tkConfig.sh\n    else\n        AC_MSG_RESULT([could not find ${TK_BIN_DIR}/tkConfig.sh])\n    fi\n\n    # eval is required to do the TK_DBGX substitution\n    eval \"TK_LIB_FILE=\\\"${TK_LIB_FILE}\\\"\"\n    eval \"TK_STUB_LIB_FILE=\\\"${TK_STUB_LIB_FILE}\\\"\"\n\n    # If the TK_BIN_DIR is the build directory (not the install directory),\n    # then set the common variable name to the value of the build variables.\n    # For example, the variable TK_LIB_SPEC will be set to the value\n    # of TK_BUILD_LIB_SPEC. An extension should make use of TK_LIB_SPEC\n    # instead of TK_BUILD_LIB_SPEC since it will work with both an\n    # installed and uninstalled version of Tcl.\n    if test -f ${TK_BIN_DIR}/Makefile ; then\n        TK_LIB_SPEC=${TK_BUILD_LIB_SPEC}\n        TK_STUB_LIB_SPEC=${TK_BUILD_STUB_LIB_SPEC}\n        TK_STUB_LIB_PATH=${TK_BUILD_STUB_LIB_PATH}\n    elif test \"`uname -s`\" = \"Darwin\"; then\n\t# If Tk was built as a framework, attempt to use the libraries\n\t# from the framework at the given location so that linking works\n\t# against Tk.framework installed in an arbitary location.\n\tcase ${TK_DEFS} in\n\t    *TK_FRAMEWORK*)\n\t\tif test -f ${TK_BIN_DIR}/${TK_LIB_FILE}; then\n\t\t    for i in \"`cd ${TK_BIN_DIR}; pwd`\" \\\n\t\t\t     \"`cd ${TK_BIN_DIR}/../..; pwd`\"; do\n\t\t\tif test \"`basename \"$i\"`\" = \"${TK_LIB_FILE}.framework\"; then\n\t\t\t    TK_LIB_SPEC=\"-F`dirname \"$i\"` -framework ${TK_LIB_FILE}\"\n\t\t\t    break\n\t\t\tfi\n\t\t    done\n\t\tfi\n\t\tif test -f ${TK_BIN_DIR}/${TK_STUB_LIB_FILE}; then\n\t\t    TK_STUB_LIB_SPEC=\"-L${TK_BIN_DIR} ${TK_STUB_LIB_FLAG}\"\n\t\t    TK_STUB_LIB_PATH=\"${TK_BIN_DIR}/${TK_STUB_LIB_FILE}\"\n\t\tfi\n\t\t;;\n\tesac\n    fi\n\n    # eval is required to do the TK_DBGX substitution\n    eval \"TK_LIB_FLAG=\\\"${TK_LIB_FLAG}\\\"\"\n    eval \"TK_LIB_SPEC=\\\"${TK_LIB_SPEC}\\\"\"\n    eval \"TK_STUB_LIB_FLAG=\\\"${TK_STUB_LIB_FLAG}\\\"\"\n    eval \"TK_STUB_LIB_SPEC=\\\"${TK_STUB_LIB_SPEC}\\\"\"\n\n    # Ensure windowingsystem is defined\n    if test \"${TEA_PLATFORM}\" = \"unix\" ; then\n\tcase ${TK_DEFS} in\n\t    *MAC_OSX_TK*)\n\t\tAC_DEFINE(MAC_OSX_TK, 1, [Are we building against Mac OS X TkAqua?])\n\t\tTEA_WINDOWINGSYSTEM=\"aqua\"\n\t\t;;\n\t    *)\n\t\tTEA_WINDOWINGSYSTEM=\"x11\"\n\t\t;;\n\tesac\n    elif test \"${TEA_PLATFORM}\" = \"windows\" ; then\n\tTEA_WINDOWINGSYSTEM=\"win32\"\n    fi\n\n    AC_SUBST(TK_VERSION)\n    AC_SUBST(TK_BIN_DIR)\n    AC_SUBST(TK_SRC_DIR)\n\n    AC_SUBST(TK_LIB_FILE)\n    AC_SUBST(TK_LIB_FLAG)\n    AC_SUBST(TK_LIB_SPEC)\n\n    AC_SUBST(TK_STUB_LIB_FILE)\n    AC_SUBST(TK_STUB_LIB_FLAG)\n    AC_SUBST(TK_STUB_LIB_SPEC)\n\n    AC_SUBST(TK_LIBS)\n    AC_SUBST(TK_XINCLUDES)\n])\n\n#------------------------------------------------------------------------\n# TEA_ENABLE_SHARED --\n#\n#\tAllows the building of shared libraries\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-shared=yes|no\n#\n#\tDefines the following vars:\n#\t\tSTATIC_BUILD\tUsed for building import/export libraries\n#\t\t\t\ton Windows.\n#\n#\tSets the following vars:\n#\t\tSHARED_BUILD\tValue of 1 or 0\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_ENABLE_SHARED], [\n    AC_MSG_CHECKING([how to build libraries])\n    AC_ARG_ENABLE(shared,\n\tAC_HELP_STRING([--enable-shared],\n\t    [build and link with shared libraries (default: on)]),\n\t[tcl_ok=$enableval], [tcl_ok=yes])\n\n    if test \"${enable_shared+set}\" = set; then\n\tenableval=\"$enable_shared\"\n\ttcl_ok=$enableval\n    else\n\ttcl_ok=yes\n    fi\n\n    if test \"$tcl_ok\" = \"yes\" ; then\n\tAC_MSG_RESULT([shared])\n\tSHARED_BUILD=1\n    else\n\tAC_MSG_RESULT([static])\n\tSHARED_BUILD=0\n\tAC_DEFINE(STATIC_BUILD, 1, [Is this a static build?])\n    fi\n    AC_SUBST(SHARED_BUILD)\n])\n\n#------------------------------------------------------------------------\n# TEA_ENABLE_THREADS --\n#\n#\tSpecify if thread support should be enabled.  If \"yes\" is specified\n#\tas an arg (optional), threads are enabled by default, \"no\" means\n#\tthreads are disabled.  \"yes\" is the default.\n#\n#\tTCL_THREADS is checked so that if you are compiling an extension\n#\tagainst a threaded core, your extension must be compiled threaded\n#\tas well.\n#\n#\tNote that it is legal to have a thread enabled extension run in a\n#\tthreaded or non-threaded Tcl core, but a non-threaded extension may\n#\tonly run in a non-threaded Tcl core.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-threads\n#\n#\tSets the following vars:\n#\t\tTHREADS_LIBS\tThread library(s)\n#\n#\tDefines the following vars:\n#\t\tTCL_THREADS\n#\t\t_REENTRANT\n#\t\t_THREAD_SAFE\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_ENABLE_THREADS], [\n    AC_ARG_ENABLE(threads,\n\tAC_HELP_STRING([--enable-threads],\n\t    [build with threads]),\n\t[tcl_ok=$enableval], [tcl_ok=yes])\n\n    if test \"${enable_threads+set}\" = set; then\n\tenableval=\"$enable_threads\"\n\ttcl_ok=$enableval\n    else\n\ttcl_ok=yes\n    fi\n\n    if test \"$tcl_ok\" = \"yes\" -o \"${TCL_THREADS}\" = 1; then\n\tTCL_THREADS=1\n\n\tif test \"${TEA_PLATFORM}\" != \"windows\" ; then\n\t    # We are always OK on Windows, so check what this platform wants:\n    \n\t    # USE_THREAD_ALLOC tells us to try the special thread-based\n\t    # allocator that significantly reduces lock contention\n\t    AC_DEFINE(USE_THREAD_ALLOC, 1,\n\t\t[Do we want to use the threaded memory allocator?])\n\t    AC_DEFINE(_REENTRANT, 1, [Do we want the reentrant OS API?])\n\t    if test \"`uname -s`\" = \"SunOS\" ; then\n\t\tAC_DEFINE(_POSIX_PTHREAD_SEMANTICS, 1,\n\t\t\t[Do we really want to follow the standard? Yes we do!])\n\t    fi\n\t    AC_DEFINE(_THREAD_SAFE, 1, [Do we want the thread-safe OS API?])\n\t    AC_CHECK_LIB(pthread,pthread_mutex_init,tcl_ok=yes,tcl_ok=no)\n\t    if test \"$tcl_ok\" = \"no\"; then\n\t\t# Check a little harder for __pthread_mutex_init in the same\n\t\t# library, as some systems hide it there until pthread.h is\n\t\t# defined.  We could alternatively do an AC_TRY_COMPILE with\n\t\t# pthread.h, but that will work with libpthread really doesn't\n\t\t# exist, like AIX 4.2.  [Bug: 4359]\n\t\tAC_CHECK_LIB(pthread, __pthread_mutex_init,\n\t\t    tcl_ok=yes, tcl_ok=no)\n\t    fi\n\n\t    if test \"$tcl_ok\" = \"yes\"; then\n\t\t# The space is needed\n\t\tTHREADS_LIBS=\" -lpthread\"\n\t    else\n\t\tAC_CHECK_LIB(pthreads, pthread_mutex_init,\n\t\t    tcl_ok=yes, tcl_ok=no)\n\t\tif test \"$tcl_ok\" = \"yes\"; then\n\t\t    # The space is needed\n\t\t    THREADS_LIBS=\" -lpthreads\"\n\t\telse\n\t\t    AC_CHECK_LIB(c, pthread_mutex_init,\n\t\t\ttcl_ok=yes, tcl_ok=no)\n\t\t    if test \"$tcl_ok\" = \"no\"; then\n\t\t\tAC_CHECK_LIB(c_r, pthread_mutex_init,\n\t\t\t    tcl_ok=yes, tcl_ok=no)\n\t\t\tif test \"$tcl_ok\" = \"yes\"; then\n\t\t\t    # The space is needed\n\t\t\t    THREADS_LIBS=\" -pthread\"\n\t\t\telse\n\t\t\t    TCL_THREADS=0\n\t\t\t    AC_MSG_WARN([Do not know how to find pthread lib on your system - thread support disabled])\n\t\t\tfi\n\t\t    fi\n\t\tfi\n\t    fi\n\tfi\n    else\n\tTCL_THREADS=0\n    fi\n    # Do checking message here to not mess up interleaved configure output\n    AC_MSG_CHECKING([for building with threads])\n    if test \"${TCL_THREADS}\" = 1; then\n\tAC_DEFINE(TCL_THREADS, 1, [Are we building with threads enabled?])\n\tAC_MSG_RESULT([yes (default)])\n    else\n\tAC_MSG_RESULT([no])\n    fi\n    # TCL_THREADS sanity checking.  See if our request for building with\n    # threads is the same as the way Tcl was built.  If not, warn the user.\n    case ${TCL_DEFS} in\n\t*THREADS=1*)\n\t    if test \"${TCL_THREADS}\" = \"0\"; then\n\t\tAC_MSG_WARN([\n    Building ${PACKAGE_NAME} without threads enabled, but building against Tcl\n    that IS thread-enabled.  It is recommended to use --enable-threads.])\n\t    fi\n\t    ;;\n\t*)\n\t    if test \"${TCL_THREADS}\" = \"1\"; then\n\t\tAC_MSG_WARN([\n    --enable-threads requested, but building against a Tcl that is NOT\n    thread-enabled.  This is an OK configuration that will also run in\n    a thread-enabled core.])\n\t    fi\n\t    ;;\n    esac\n    AC_SUBST(TCL_THREADS)\n])\n\n#------------------------------------------------------------------------\n# TEA_ENABLE_SYMBOLS --\n#\n#\tSpecify if debugging symbols should be used.\n#\tMemory (TCL_MEM_DEBUG) debugging can also be enabled.\n#\n# Arguments:\n#\tnone\n#\t\n#\tTEA varies from core Tcl in that C|LDFLAGS_DEFAULT receives\n#\tthe value of C|LDFLAGS_OPTIMIZE|DEBUG already substituted.\n#\tRequires the following vars to be set in the Makefile:\n#\t\tCFLAGS_DEFAULT\n#\t\tLDFLAGS_DEFAULT\n#\t\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-symbols\n#\n#\tDefines the following vars:\n#\t\tCFLAGS_DEFAULT\tSets to $(CFLAGS_DEBUG) if true\n#\t\t\t\tSets to $(CFLAGS_OPTIMIZE) if false\n#\t\tLDFLAGS_DEFAULT\tSets to $(LDFLAGS_DEBUG) if true\n#\t\t\t\tSets to $(LDFLAGS_OPTIMIZE) if false\n#\t\tDBGX\t\tFormerly used as debug library extension;\n#\t\t\t\talways blank now.\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_ENABLE_SYMBOLS], [\n    dnl Make sure we are initialized\n    AC_REQUIRE([TEA_CONFIG_CFLAGS])\n    AC_MSG_CHECKING([for build with symbols])\n    AC_ARG_ENABLE(symbols,\n\tAC_HELP_STRING([--enable-symbols],\n\t    [build with debugging symbols (default: off)]),\n\t[tcl_ok=$enableval], [tcl_ok=no])\n    DBGX=\"\"\n    if test \"$tcl_ok\" = \"no\"; then\n\tCFLAGS_DEFAULT=\"${CFLAGS_OPTIMIZE}\"\n\tLDFLAGS_DEFAULT=\"${LDFLAGS_OPTIMIZE}\"\n\tAC_MSG_RESULT([no])\n    else\n\tCFLAGS_DEFAULT=\"${CFLAGS_DEBUG}\"\n\tLDFLAGS_DEFAULT=\"${LDFLAGS_DEBUG}\"\n\tif test \"$tcl_ok\" = \"yes\"; then\n\t    AC_MSG_RESULT([yes (standard debugging)])\n\tfi\n    fi\n    if test \"${TEA_PLATFORM}\" != \"windows\" ; then\n\tLDFLAGS_DEFAULT=\"${LDFLAGS}\"\n    fi\n\n    AC_SUBST(TCL_DBGX)\n    AC_SUBST(CFLAGS_DEFAULT)\n    AC_SUBST(LDFLAGS_DEFAULT)\n\n    if test \"$tcl_ok\" = \"mem\" -o \"$tcl_ok\" = \"all\"; then\n\tAC_DEFINE(TCL_MEM_DEBUG, 1, [Is memory debugging enabled?])\n    fi\n\n    if test \"$tcl_ok\" != \"yes\" -a \"$tcl_ok\" != \"no\"; then\n\tif test \"$tcl_ok\" = \"all\"; then\n\t    AC_MSG_RESULT([enabled symbols mem debugging])\n\telse\n\t    AC_MSG_RESULT([enabled $tcl_ok debugging])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# TEA_ENABLE_LANGINFO --\n#\n#\tAllows use of modern nl_langinfo check for better l10n.\n#\tThis is only relevant for Unix.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--enable-langinfo=yes|no (default is yes)\n#\n#\tDefines the following vars:\n#\t\tHAVE_LANGINFO\tTriggers use of nl_langinfo if defined.\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_ENABLE_LANGINFO], [\n    AC_ARG_ENABLE(langinfo,\n\tAC_HELP_STRING([--enable-langinfo],\n\t    [use nl_langinfo if possible to determine encoding at startup, otherwise use old heuristic (default: on)]),\n\t[langinfo_ok=$enableval], [langinfo_ok=yes])\n\n    HAVE_LANGINFO=0\n    if test \"$langinfo_ok\" = \"yes\"; then\n\tAC_CHECK_HEADER(langinfo.h,[langinfo_ok=yes],[langinfo_ok=no])\n    fi\n    AC_MSG_CHECKING([whether to use nl_langinfo])\n    if test \"$langinfo_ok\" = \"yes\"; then\n\tAC_CACHE_VAL(tcl_cv_langinfo_h, [\n\t    AC_TRY_COMPILE([#include <langinfo.h>], [nl_langinfo(CODESET);],\n\t\t    [tcl_cv_langinfo_h=yes],[tcl_cv_langinfo_h=no])])\n\tAC_MSG_RESULT([$tcl_cv_langinfo_h])\n\tif test $tcl_cv_langinfo_h = yes; then\n\t    AC_DEFINE(HAVE_LANGINFO, 1, [Do we have nl_langinfo()?])\n\tfi\n    else \n\tAC_MSG_RESULT([$langinfo_ok])\n    fi\n])\n\n#--------------------------------------------------------------------\n# TEA_CONFIG_SYSTEM\n#\n#\tDetermine what the system is (some things cannot be easily checked\n#\ton a feature-driven basis, alas). This can usually be done via the\n#\t\"uname\" command, but there are a few systems, like Next, where\n#\tthis doesn't work.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\tDefines the following var:\n#\n#\tsystem -\tSystem/platform/version identification code.\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_CONFIG_SYSTEM], [\n    AC_CACHE_CHECK([system version], tcl_cv_sys_version, [\n\tif test \"${TEA_PLATFORM}\" = \"windows\" ; then\n\t    tcl_cv_sys_version=windows\n\telif test -f /usr/lib/NextStep/software_version; then\n\t    tcl_cv_sys_version=NEXTSTEP-`awk '/3/,/3/' /usr/lib/NextStep/software_version`\n\telse\n\t    tcl_cv_sys_version=`uname -s`-`uname -r`\n\t    if test \"$?\" -ne 0 ; then\n\t\tAC_MSG_WARN([can't find uname command])\n\t\ttcl_cv_sys_version=unknown\n\t    else\n\t\t# Special check for weird MP-RAS system (uname returns weird\n\t\t# results, and the version is kept in special file).\n\n\t\tif test -r /etc/.relid -a \"X`uname -n`\" = \"X`uname -s`\" ; then\n\t\t    tcl_cv_sys_version=MP-RAS-`awk '{print $[3]}' /etc/.relid`\n\t\tfi\n\t\tif test \"`uname -s`\" = \"AIX\" ; then\n\t\t    tcl_cv_sys_version=AIX-`uname -v`.`uname -r`\n\t\tfi\n\t    fi\n\tfi\n    ])\n    system=$tcl_cv_sys_version\n])\n\n#--------------------------------------------------------------------\n# TEA_CONFIG_CFLAGS\n#\n#\tTry to determine the proper flags to pass to the compiler\n#\tfor building shared libraries and other such nonsense.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tDefines and substitutes the following vars:\n#\n#       DL_OBJS -       Name of the object file that implements dynamic\n#                       loading for Tcl on this system.\n#       DL_LIBS -       Library file(s) to include in tclsh and other base\n#                       applications in order for the \"load\" command to work.\n#       LDFLAGS -      Flags to pass to the compiler when linking object\n#                       files into an executable application binary such\n#                       as tclsh.\n#       LD_SEARCH_FLAGS-Flags to pass to ld, such as \"-R /usr/local/tcl/lib\",\n#                       that tell the run-time dynamic linker where to look\n#                       for shared libraries such as libtcl.so.  Depends on\n#                       the variable LIB_RUNTIME_DIR in the Makefile. Could\n#                       be the same as CC_SEARCH_FLAGS if ${CC} is used to link.\n#       CC_SEARCH_FLAGS-Flags to pass to ${CC}, such as \"-Wl,-rpath,/usr/local/tcl/lib\",\n#                       that tell the run-time dynamic linker where to look\n#                       for shared libraries such as libtcl.so.  Depends on\n#                       the variable LIB_RUNTIME_DIR in the Makefile.\n#       SHLIB_CFLAGS -  Flags to pass to cc when compiling the components\n#                       of a shared library (may request position-independent\n#                       code, among other things).\n#       SHLIB_LD -      Base command to use for combining object files\n#                       into a shared library.\n#       SHLIB_LD_LIBS - Dependent libraries for the linker to scan when\n#                       creating shared libraries.  This symbol typically\n#                       goes at the end of the \"ld\" commands that build\n#                       shared libraries. The value of the symbol is\n#                       \"${LIBS}\" if all of the dependent libraries should\n#                       be specified when creating a shared library.  If\n#                       dependent libraries should not be specified (as on\n#                       SunOS 4.x, where they cause the link to fail, or in\n#                       general if Tcl and Tk aren't themselves shared\n#                       libraries), then this symbol has an empty string\n#                       as its value.\n#       SHLIB_SUFFIX -  Suffix to use for the names of dynamically loadable\n#                       extensions.  An empty string means we don't know how\n#                       to use shared libraries on this platform.\n#       LIB_SUFFIX -    Specifies everything that comes after the \"libfoo\"\n#                       in a static or shared library name, using the $VERSION variable\n#                       to put the version in the right place.  This is used\n#                       by platforms that need non-standard library names.\n#                       Examples:  ${VERSION}.so.1.1 on NetBSD, since it needs\n#                       to have a version after the .so, and ${VERSION}.a\n#                       on AIX, since a shared library needs to have\n#                       a .a extension whereas shared objects for loadable\n#                       extensions have a .so extension.  Defaults to\n#                       ${VERSION}${SHLIB_SUFFIX}.\n#       TCL_NEEDS_EXP_FILE -\n#                       1 means that an export file is needed to link to a\n#                       shared library.\n#       TCL_EXP_FILE -  The name of the installed export / import file which\n#                       should be used to link to the Tcl shared library.\n#                       Empty if Tcl is unshared.\n#       TCL_BUILD_EXP_FILE -\n#                       The name of the built export / import file which\n#                       should be used to link to the Tcl shared library.\n#                       Empty if Tcl is unshared.\n#\tCFLAGS_DEBUG -\n#\t\t\tFlags used when running the compiler in debug mode\n#\tCFLAGS_OPTIMIZE -\n#\t\t\tFlags used when running the compiler in optimize mode\n#\tCFLAGS -\tAdditional CFLAGS added as necessary (usually 64-bit)\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_CONFIG_CFLAGS], [\n    dnl Make sure we are initialized\n    AC_REQUIRE([TEA_INIT])\n\n    # Step 0.a: Enable 64 bit support?\n\n    AC_MSG_CHECKING([if 64bit support is requested])\n    AC_ARG_ENABLE(64bit,\n\tAC_HELP_STRING([--enable-64bit],\n\t    [enable 64bit support (default: off)]),\n\t[do64bit=$enableval], [do64bit=no])\n    AC_MSG_RESULT([$do64bit])\n\n    # Step 0.b: Enable Solaris 64 bit VIS support?\n\n    AC_MSG_CHECKING([if 64bit Sparc VIS support is requested])\n    AC_ARG_ENABLE(64bit-vis,\n\tAC_HELP_STRING([--enable-64bit-vis],\n\t    [enable 64bit Sparc VIS support (default: off)]),\n\t[do64bitVIS=$enableval], [do64bitVIS=no])\n    AC_MSG_RESULT([$do64bitVIS])\n\n    if test \"$do64bitVIS\" = \"yes\"; then\n\t# Force 64bit on with VIS\n\tdo64bit=yes\n    fi\n\n    # Step 0.c: Cross-compiling options for Windows/CE builds?\n\n    if test \"${TEA_PLATFORM}\" = \"windows\" ; then\n\tAC_MSG_CHECKING([if Windows/CE build is requested])\n\tAC_ARG_ENABLE(wince,[  --enable-wince          enable Win/CE support (where applicable)], [doWince=$enableval], [doWince=no])\n\tAC_MSG_RESULT([$doWince])\n    fi\n\n    # Step 1: set the variable \"system\" to hold the name and version number\n    # for the system.\n\n    TEA_CONFIG_SYSTEM\n\n    # Step 2: check for existence of -ldl library.  This is needed because\n    # Linux can use either -ldl or -ldld for dynamic loading.\n\n    AC_CHECK_LIB(dl, dlopen, have_dl=yes, have_dl=no)\n\n    # Require ranlib early so we can override it in special cases below.\n\n    AC_REQUIRE([AC_PROG_RANLIB])\n\n    # Step 3: set configuration options based on system name and version.\n    # This is similar to Tcl's unix/tcl.m4 except that we've added a\n    # \"windows\" case.\n\n    do64bit_ok=no\n    LDFLAGS_ORIG=\"$LDFLAGS\"\n    # When ld needs options to work in 64-bit mode, put them in\n    # LDFLAGS_ARCH so they eventually end up in LDFLAGS even if [load]\n    # is disabled by the user. [Bug 1016796]\n    LDFLAGS_ARCH=\"\"\n    TCL_EXPORT_FILE_SUFFIX=\"\"\n    UNSHARED_LIB_SUFFIX=\"\"\n    TCL_TRIM_DOTS='`echo ${PACKAGE_VERSION} | tr -d .`'\n    ECHO_VERSION='`echo ${PACKAGE_VERSION}`'\n    TCL_LIB_VERSIONS_OK=ok\n    CFLAGS_DEBUG=-g\n    CFLAGS_OPTIMIZE=-O\n    if test \"$GCC\" = \"yes\" ; then\n\tCFLAGS_OPTIMIZE=-O2\n\tCFLAGS_WARNING=\"-Wall -Wno-implicit-int\"\n    else\n\tCFLAGS_WARNING=\"\"\n    fi\n    TCL_NEEDS_EXP_FILE=0\n    TCL_BUILD_EXP_FILE=\"\"\n    TCL_EXP_FILE=\"\"\ndnl FIXME: Replace AC_CHECK_PROG with AC_CHECK_TOOL once cross compiling is fixed.\ndnl AC_CHECK_TOOL(AR, ar)\n    AC_CHECK_PROG(AR, ar, ar)\n    STLIB_LD='${AR} cr'\n    LD_LIBRARY_PATH_VAR=\"LD_LIBRARY_PATH\"\n    case $system in\n\twindows)\n\t    # This is a 2-stage check to make sure we have the 64-bit SDK\n\t    # We have to know where the SDK is installed.\n\t    # This magic is based on MS Platform SDK for Win2003 SP1 - hobbs\n\t    # MACHINE is IX86 for LINK, but this is used by the manifest,\n\t    # which requires x86|amd64|ia64.\n\t    MACHINE=\"X86\"\n\t    if test \"$do64bit\" != \"no\" ; then\n\t\tif test \"x${MSSDK}x\" = \"xx\" ; then\n\t\t    MSSDK=\"C:/Progra~1/Microsoft Platform SDK\"\n\t\tfi\n\t\tMSSDK=`echo \"$MSSDK\" | sed -e  's!\\\\\\!/!g'`\n\t\tPATH64=\"\"\n\t\tcase \"$do64bit\" in\n\t\t    amd64|x64|yes)\n\t\t\tMACHINE=\"AMD64\" ; # default to AMD64 64-bit build\n\t\t\tPATH64=\"${MSSDK}/Bin/Win64/x86/AMD64\"\n\t\t\t;;\n\t\t    ia64)\n\t\t\tMACHINE=\"IA64\"\n\t\t\tPATH64=\"${MSSDK}/Bin/Win64\"\n\t\t\t;;\n\t\tesac\n\t\tif test ! -d \"${PATH64}\" ; then\n\t\t    AC_MSG_WARN([Could not find 64-bit $MACHINE SDK to enable 64bit mode])\n\t\t    AC_MSG_WARN([Ensure latest Platform SDK is installed])\n\t\t    do64bit=\"no\"\n\t\telse\n\t\t    AC_MSG_RESULT([   Using 64-bit $MACHINE mode])\n\t\t    do64bit_ok=\"yes\"\n\t\tfi\n\t    fi\n\n\t    if test \"$doWince\" != \"no\" ; then\n\t\tif test \"$do64bit\" != \"no\" ; then\n\t\t    AC_MSG_ERROR([Windows/CE and 64-bit builds incompatible])\n\t\tfi\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    AC_MSG_ERROR([Windows/CE and GCC builds incompatible])\n\t\tfi\n\t\tTEA_PATH_CELIB\n\t\t# Set defaults for common evc4/PPC2003 setup\n\t\t# Currently Tcl requires 300+, possibly 420+ for sockets\n\t\tCEVERSION=420; \t\t# could be 211 300 301 400 420 ...\n\t\tTARGETCPU=ARMV4;\t# could be ARMV4 ARM MIPS SH3 X86 ...\n\t\tARCH=ARM;\t\t# could be ARM MIPS X86EM ...\n\t\tPLATFORM=\"Pocket PC 2003\"; # or \"Pocket PC 2002\"\n\t\tif test \"$doWince\" != \"yes\"; then\n\t\t    # If !yes then the user specified something\n\t\t    # Reset ARCH to allow user to skip specifying it\n\t\t    ARCH=\n\t\t    eval `echo $doWince | awk -F, '{ \\\n\t    if (length([$]1)) { printf \"CEVERSION=\\\"%s\\\"\\n\", [$]1; \\\n\t    if ([$]1 < 400)   { printf \"PLATFORM=\\\"Pocket PC 2002\\\"\\n\" } }; \\\n\t    if (length([$]2)) { printf \"TARGETCPU=\\\"%s\\\"\\n\", toupper([$]2) }; \\\n\t    if (length([$]3)) { printf \"ARCH=\\\"%s\\\"\\n\", toupper([$]3) }; \\\n\t    if (length([$]4)) { printf \"PLATFORM=\\\"%s\\\"\\n\", [$]4 }; \\\n\t\t    }'`\n\t\t    if test \"x${ARCH}\" = \"x\" ; then\n\t\t\tARCH=$TARGETCPU;\n\t\t    fi\n\t\tfi\n\t\tOSVERSION=WCE$CEVERSION;\n\t    \tif test \"x${WCEROOT}\" = \"x\" ; then\n\t\t\tWCEROOT=\"C:/Program Files/Microsoft eMbedded C++ 4.0\"\n\t\t    if test ! -d \"${WCEROOT}\" ; then\n\t\t\tWCEROOT=\"C:/Program Files/Microsoft eMbedded Tools\"\n\t\t    fi\n\t\tfi\n\t\tif test \"x${SDKROOT}\" = \"x\" ; then\n\t\t    SDKROOT=\"C:/Program Files/Windows CE Tools\"\n\t\t    if test ! -d \"${SDKROOT}\" ; then\n\t\t\tSDKROOT=\"C:/Windows CE Tools\"\n\t\t    fi\n\t\tfi\n\t\tWCEROOT=`echo \"$WCEROOT\" | sed -e 's!\\\\\\!/!g'`\n\t\tSDKROOT=`echo \"$SDKROOT\" | sed -e 's!\\\\\\!/!g'`\n\t\tif test ! -d \"${SDKROOT}/${OSVERSION}/${PLATFORM}/Lib/${TARGETCPU}\" \\\n\t\t    -o ! -d \"${WCEROOT}/EVC/${OSVERSION}/bin\"; then\n\t\t    AC_MSG_ERROR([could not find PocketPC SDK or target compiler to enable WinCE mode [$CEVERSION,$TARGETCPU,$ARCH,$PLATFORM]])\n\t\t    doWince=\"no\"\n\t\telse\n\t\t    # We could PATH_NOSPACE these, but that's not important,\n\t\t    # as long as we quote them when used.\n\t\t    CEINCLUDE=\"${SDKROOT}/${OSVERSION}/${PLATFORM}/include\"\n\t\t    if test -d \"${CEINCLUDE}/${TARGETCPU}\" ; then\n\t\t\tCEINCLUDE=\"${CEINCLUDE}/${TARGETCPU}\"\n\t\t    fi\n\t\t    CELIBPATH=\"${SDKROOT}/${OSVERSION}/${PLATFORM}/Lib/${TARGETCPU}\"\n    \t\tfi\n\t    fi\n\n\t    if test \"$GCC\" != \"yes\" ; then\n\t        if test \"${SHARED_BUILD}\" = \"0\" ; then\n\t\t    runtime=-MT\n\t        else\n\t\t    runtime=-MD\n\t        fi\n\n                if test \"$do64bit\" != \"no\" ; then\n\t\t    # All this magic is necessary for the Win64 SDK RC1 - hobbs\n\t\t    CC=\"\\\"${PATH64}/cl.exe\\\"\"\n\t\t    CFLAGS=\"${CFLAGS} -I\\\"${MSSDK}/Include\\\" -I\\\"${MSSDK}/Include/crt\\\" -I\\\"${MSSDK}/Include/crt/sys\\\"\"\n\t\t    RC=\"\\\"${MSSDK}/bin/rc.exe\\\"\"\n\t\t    lflags=\"-nologo -MACHINE:${MACHINE} -LIBPATH:\\\"${MSSDK}/Lib/${MACHINE}\\\"\"\n\t\t    LINKBIN=\"\\\"${PATH64}/link.exe\\\"\"\n\t\t    CFLAGS_DEBUG=\"-nologo -Zi -Od -W3 ${runtime}d\"\n\t\t    CFLAGS_OPTIMIZE=\"-nologo -O2 -W2 ${runtime}\"\n\t\t    # Avoid 'unresolved external symbol __security_cookie'\n\t\t    # errors, c.f. http://support.microsoft.com/?id=894573\n\t\t    TEA_ADD_LIBS([bufferoverflowU.lib])\n\t\telif test \"$doWince\" != \"no\" ; then\n\t\t    CEBINROOT=\"${WCEROOT}/EVC/${OSVERSION}/bin\"\n\t\t    if test \"${TARGETCPU}\" = \"X86\"; then\n\t\t\tCC=\"\\\"${CEBINROOT}/cl.exe\\\"\"\n\t\t    else\n\t\t\tCC=\"\\\"${CEBINROOT}/cl${ARCH}.exe\\\"\"\n\t\t    fi\n\t\t    CFLAGS=\"$CFLAGS -I\\\"${CELIB_DIR}/inc\\\" -I\\\"${CEINCLUDE}\\\"\"\n\t\t    RC=\"\\\"${WCEROOT}/Common/EVC/bin/rc.exe\\\"\"\n\t\t    arch=`echo ${ARCH} | awk '{print tolower([$]0)}'`\n\t\t    defs=\"${ARCH} _${ARCH}_ ${arch} PALM_SIZE _MT _WINDOWS\"\n\t\t    if test \"${SHARED_BUILD}\" = \"1\" ; then\n\t\t\t# Static CE builds require static celib as well\n\t\t    \tdefs=\"${defs} _DLL\"\n\t\t    fi\n\t\t    for i in $defs ; do\n\t\t\tAC_DEFINE_UNQUOTED($i, 1, [WinCE def ]$i)\n\t\t    done\n\t\t    AC_DEFINE_UNQUOTED(_WIN32_WCE, $CEVERSION, [_WIN32_WCE version])\n\t\t    AC_DEFINE_UNQUOTED(UNDER_CE, $CEVERSION, [UNDER_CE version])\n\t\t    CFLAGS_DEBUG=\"-nologo -Zi -Od\"\n\t\t    CFLAGS_OPTIMIZE=\"-nologo -Ox\"\n\t\t    lversion=`echo ${CEVERSION} | sed -e 's/\\(.\\)\\(..\\)/\\1\\.\\2/'`\n\t\t    lflags=\"-MACHINE:${ARCH} -LIBPATH:\\\"${CELIBPATH}\\\" -subsystem:windowsce,${lversion} -nologo\"\n\t\t    LINKBIN=\"\\\"${CEBINROOT}/link.exe\\\"\"\n\t\t    AC_SUBST(CELIB_DIR)\n\t\telse\n\t\t    RC=\"rc\"\n\t\t    lflags=\"-nologo\"\n    \t\t    LINKBIN=\"link\"\n\t\t    CFLAGS_DEBUG=\"-nologo -Z7 -Od -W3 -WX ${runtime}d\"\n\t\t    CFLAGS_OPTIMIZE=\"-nologo -O2 -W2 ${runtime}\"\n\t\tfi\n\t    fi\n\n\t    if test \"$GCC\" = \"yes\"; then\n\t\t# mingw gcc mode\n\t\tRC=\"windres\"\n\t\tCFLAGS_DEBUG=\"-g\"\n\t\tCFLAGS_OPTIMIZE=\"-O2 -fomit-frame-pointer\"\n\t\tSHLIB_LD=\"$CC -shared\"\n\t\tUNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.a'\n\t\tLDFLAGS_CONSOLE=\"-wl,--subsystem,console ${lflags}\"\n\t\tLDFLAGS_WINDOW=\"-wl,--subsystem,windows ${lflags}\"\n\t    else\n\t\tSHLIB_LD=\"${LINKBIN} -dll ${lflags}\"\n\t\t# link -lib only works when -lib is the first arg\n\t\tSTLIB_LD=\"${LINKBIN} -lib ${lflags}\"\n\t\tUNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.lib'\n\t\tPATHTYPE=-w\n\t\t# For information on what debugtype is most useful, see:\n\t\t# http://msdn.microsoft.com/library/en-us/dnvc60/html/gendepdebug.asp\n\t\t# This essentially turns it all on.\n\t\tLDFLAGS_DEBUG=\"-debug:full -debugtype:both -warn:2\"\n\t\tLDFLAGS_OPTIMIZE=\"-release\"\n\t\tif test \"$doWince\" != \"no\" ; then\n\t\t    LDFLAGS_CONSOLE=\"-link ${lflags}\"\n\t\t    LDFLAGS_WINDOW=${LDFLAGS_CONSOLE}\n\t\telse\n\t\t    LDFLAGS_CONSOLE=\"-link -subsystem:console ${lflags}\"\n\t\t    LDFLAGS_WINDOW=\"-link -subsystem:windows ${lflags}\"\n\t\tfi\n\t    fi\n\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".dll\"\n\t    SHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.dll'\n\n\t    TCL_LIB_VERSIONS_OK=nodots\n\t    # Bogus to avoid getting this turned off\n\t    DL_OBJS=\"tclLoadNone.obj\"\n    \t    ;;\n\tAIX-*)\n\t    if test \"${TCL_THREADS}\" = \"1\" -a \"$GCC\" != \"yes\" ; then\n\t\t# AIX requires the _r compiler when gcc isn't being used\n\t\tcase \"${CC}\" in\n\t\t    *_r)\n\t\t\t# ok ...\n\t\t\t;;\n\t\t    *)\n\t\t\tCC=${CC}_r\n\t\t\t;;\n\t\tesac\n\t\tAC_MSG_RESULT([Using $CC for compiling with threads])\n\t    fi\n\t    LIBS=\"$LIBS -lc\"\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    LD_LIBRARY_PATH_VAR=\"LIBPATH\"\n\n\t    # Check to enable 64-bit flags for compiler/linker on AIX 4+\n\t    if test \"$do64bit\" = \"yes\" -a \"`uname -v`\" -gt \"3\" ; then\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    AC_MSG_WARN([64bit mode not supported with GCC on $system])\n\t\telse \n\t\t    do64bit_ok=yes\n\t\t    CFLAGS=\"$CFLAGS -q64\"\n\t\t    LDFLAGS_ARCH=\"-q64\"\n\t\t    RANLIB=\"${RANLIB} -X64\"\n\t\t    AR=\"${AR} -X64\"\n\t\t    SHLIB_LD_FLAGS=\"-b64\"\n\t\tfi\n\t    fi\n\n\t    if test \"`uname -m`\" = \"ia64\" ; then\n\t\t# AIX-5 uses ELF style dynamic libraries on IA-64, but not PPC\n\t\tSHLIB_LD=\"/usr/ccs/bin/ld -G -z text\"\n\t\t# AIX-5 has dl* in libc.so\n\t\tDL_LIBS=\"\"\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    CC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\telse\n\t\t    CC_SEARCH_FLAGS='-R${LIB_RUNTIME_DIR}'\n\t\tfi\n\t\tLD_SEARCH_FLAGS='-R ${LIB_RUNTIME_DIR}'\n\t    else\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    SHLIB_LD=\"gcc -shared\"\n\t\telse\n\t\t    SHLIB_LD=\"/bin/ld -bhalt:4 -bM:SRE -bE:lib.exp -H512 -T512 -bnoentry\"\n\t\tfi\n\t\tSHLIB_LD=\"${TCL_SRC_DIR}/unix/ldAix ${SHLIB_LD} ${SHLIB_LD_FLAGS}\"\n\t\tDL_LIBS=\"-ldl\"\n\t\tCC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\tTCL_NEEDS_EXP_FILE=1\n\t\tTCL_EXPORT_FILE_SUFFIX='${PACKAGE_VERSION}.exp'\n\t    fi\n\n\t    # AIX v<=4.1 has some different flags than 4.2+\n\t    if test \"$system\" = \"AIX-4.1\" -o \"`uname -v`\" -lt \"4\" ; then\n\t\tAC_LIBOBJ([tclLoadAix])\n\t\tDL_LIBS=\"-lld\"\n\t    fi\n\n\t    # On AIX <=v4 systems, libbsd.a has to be linked in to support\n\t    # non-blocking file IO.  This library has to be linked in after\n\t    # the MATH_LIBS or it breaks the pow() function.  The way to\n\t    # insure proper sequencing, is to add it to the tail of MATH_LIBS.\n\t    # This library also supplies gettimeofday.\n\t    #\n\t    # AIX does not have a timezone field in struct tm. When the AIX\n\t    # bsd library is used, the timezone global and the gettimeofday\n\t    # methods are to be avoided for timezone deduction instead, we\n\t    # deduce the timezone by comparing the localtime result on a\n\t    # known GMT value.\n\n\t    AC_CHECK_LIB(bsd, gettimeofday, libbsd=yes, libbsd=no)\n\t    if test $libbsd = yes; then\n\t    \tMATH_LIBS=\"$MATH_LIBS -lbsd\"\n\t    \tAC_DEFINE(USE_DELTA_FOR_TZ, 1, [Do we need a special AIX hack for timezones?])\n\t    fi\n\t    ;;\n\tBeOS*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD=\"${CC} -nostart\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\n\t    #-----------------------------------------------------------\n\t    # Check for inet_ntoa in -lbind, for BeOS (which also needs\n\t    # -lsocket, even if the network functions are in -lnet which\n\t    # is always linked to, for compatibility.\n\t    #-----------------------------------------------------------\n\t    AC_CHECK_LIB(bind, inet_ntoa, [LIBS=\"$LIBS -lbind -lsocket\"])\n\t    ;;\n\tBSD/OS-2.1*|BSD/OS-3*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"shlicc -r\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tBSD/OS-4.*)\n\t    SHLIB_CFLAGS=\"-export-dynamic -fPIC\"\n\t    SHLIB_LD=\"cc -shared\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    LDFLAGS=\"$LDFLAGS -export-dynamic\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tdgux*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tHP-UX-*.11.*)\n\t    # Use updated header definitions where possible\n\t    AC_DEFINE(_XOPEN_SOURCE_EXTENDED, 1, [Do we want to use the XOPEN network library?])\n\t    # Needed by Tcl, but not most extensions\n\t    #AC_DEFINE(_XOPEN_SOURCE, 1, [Do we want to use the XOPEN network library?])\n\t    #LIBS=\"$LIBS -lxnet\"               # Use the XOPEN network library\n\n\t    if test \"`uname -m`\" = \"ia64\" ; then\n\t\tSHLIB_SUFFIX=\".so\"\n\t    else\n\t\tSHLIB_SUFFIX=\".sl\"\n\t    fi\n\t    AC_CHECK_LIB(dld, shl_load, tcl_ok=yes, tcl_ok=no)\n\t    if test \"$tcl_ok\" = yes; then\n\t\tSHLIB_CFLAGS=\"+z\"\n\t\tSHLIB_LD=\"ld -b\"\n\t\tSHLIB_LD_LIBS='${LIBS}'\n\t\tDL_OBJS=\"tclLoadShl.o\"\n\t\tDL_LIBS=\"-ldld\"\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-E\"\n\t\tCC_SEARCH_FLAGS='-Wl,+s,+b,${LIB_RUNTIME_DIR}:.'\n\t\tLD_SEARCH_FLAGS='+s +b ${LIB_RUNTIME_DIR}:.'\n\t\tLD_LIBRARY_PATH_VAR=\"SHLIB_PATH\"\n\t    fi\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tSHLIB_LD=\"gcc -shared\"\n\t\tSHLIB_LD_LIBS='${LIBS}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    fi\n\n\t    # Users may want PA-RISC 1.1/2.0 portable code - needs HP cc\n\t    #CFLAGS=\"$CFLAGS +DAportable\"\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\t    if test \"$do64bit\" = \"yes\" ; then\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    hpux_arch=`${CC} -dumpmachine`\n\t\t    case $hpux_arch in\n\t\t\thppa64*)\n\t\t\t    # 64-bit gcc in use.  Fix flags for GNU ld.\n\t\t\t    do64bit_ok=yes\n\t\t\t    SHLIB_LD=\"${CC} -shared\"\n\t\t\t    SHLIB_LD_LIBS='${LIBS}'\n\t\t\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t\t\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\t\t    ;;\n\t\t\t*)\n\t\t\t    AC_MSG_WARN([64bit mode not supported with GCC on $system])\n\t\t\t    ;;\n\t\t    esac\n\t\telse\n\t\t    do64bit_ok=yes\n\t\t    CFLAGS=\"$CFLAGS +DD64\"\n\t\t    LDFLAGS_ARCH=\"+DD64\"\n\t\tfi\n\t    fi\n\t    ;;\n\tHP-UX-*.08.*|HP-UX-*.09.*|HP-UX-*.10.*)\n\t    SHLIB_SUFFIX=\".sl\"\n\t    AC_CHECK_LIB(dld, shl_load, tcl_ok=yes, tcl_ok=no)\n\t    if test \"$tcl_ok\" = yes; then\n\t\tSHLIB_CFLAGS=\"+z\"\n\t\tSHLIB_LD=\"ld -b\"\n\t\tSHLIB_LD_LIBS=\"\"\n\t\tDL_OBJS=\"tclLoadShl.o\"\n\t\tDL_LIBS=\"-ldld\"\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-E\"\n\t\tCC_SEARCH_FLAGS='-Wl,+s,+b,${LIB_RUNTIME_DIR}:.'\n\t\tLD_SEARCH_FLAGS='+s +b ${LIB_RUNTIME_DIR}:.'\n\t\tLD_LIBRARY_PATH_VAR=\"SHLIB_PATH\"\n\t    fi\n\t    ;;\n\tIRIX-5.*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"ld -shared -rdata_shared\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t    ;;\n\tIRIX-6.*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"ld -n32 -shared -rdata_shared\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tCFLAGS=\"$CFLAGS -mabi=n32\"\n\t\tLDFLAGS=\"$LDFLAGS -mabi=n32\"\n\t    else\n\t\tcase $system in\n\t\t    IRIX-6.3)\n\t\t\t# Use to build 6.2 compatible binaries on 6.3.\n\t\t\tCFLAGS=\"$CFLAGS -n32 -D_OLD_TERMIOS\"\n\t\t\t;;\n\t\t    *)\n\t\t\tCFLAGS=\"$CFLAGS -n32\"\n\t\t\t;;\n\t\tesac\n\t\tLDFLAGS=\"$LDFLAGS -n32\"\n\t    fi\n\t    ;;\n\tIRIX64-6.*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"ld -n32 -shared -rdata_shared\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\n\t    if test \"$do64bit\" = \"yes\" ; then\n\t        if test \"$GCC\" = \"yes\" ; then\n\t            AC_MSG_WARN([64bit mode not supported by gcc])\n\t        else\n\t            do64bit_ok=yes\n\t            SHLIB_LD=\"ld -64 -shared -rdata_shared\"\n\t            CFLAGS=\"$CFLAGS -64\"\n\t            LDFLAGS_ARCH=\"-64\"\n\t        fi\n\t    fi\n\t    ;;\n\tLinux*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\n\t    CFLAGS_OPTIMIZE=\"-O2 -fomit-frame-pointer\"\n\t    # egcs-2.91.66 on Redhat Linux 6.0 generates lots of warnings \n\t    # when you inline the string and math operations.  Turn this off to\n\t    # get rid of the warnings.\n\t    #CFLAGS_OPTIMIZE=\"${CFLAGS_OPTIMIZE} -D__NO_STRING_INLINES -D__NO_MATH_INLINES\"\n\n\t    # TEA specific: use LDFLAGS_DEFAULT instead of LDFLAGS here:\n\t    SHLIB_LD='${CC} -shared ${CFLAGS} ${LDFLAGS_DEFAULT}'\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    LDFLAGS=\"$LDFLAGS -Wl,--export-dynamic\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    if test \"`uname -m`\" = \"alpha\" ; then\n\t\tCFLAGS=\"$CFLAGS -mieee\"\n\t    fi\n\t    if test $do64bit = yes; then\n\t\tAC_CACHE_CHECK([if compiler accepts -m64 flag], tcl_cv_cc_m64, [\n\t\t    hold_cflags=$CFLAGS\n\t\t    CFLAGS=\"$CFLAGS -m64\"\n\t\t    AC_TRY_LINK(,, tcl_cv_cc_m64=yes, tcl_cv_cc_m64=no)\n\t\t    CFLAGS=$hold_cflags])\n\t\tif test $tcl_cv_cc_m64 = yes; then\n\t\t    CFLAGS=\"$CFLAGS -m64\"\n\t\t    do64bit_ok=yes\n\t\tfi\n\t    fi\n\n\t    # The combo of gcc + glibc has a bug related\n\t    # to inlining of functions like strtod(). The\n\t    # -fno-builtin flag should address this problem\n\t    # but it does not work. The -fno-inline flag\n\t    # is kind of overkill but it works.\n\t    # Disable inlining only when one of the\n\t    # files in compat/*.c is being linked in.\n\t    if test x\"${USE_COMPAT}\" != x ; then\n\t        CFLAGS=\"$CFLAGS -fno-inline\"\n\t    fi\n\n\t    ;;\n\tGNU*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\n\t    SHLIB_LD=\"${CC} -shared\"\n\t    DL_OBJS=\"\"\n\t    DL_LIBS=\"-ldl\"\n\t    LDFLAGS=\"$LDFLAGS -Wl,--export-dynamic\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    if test \"`uname -m`\" = \"alpha\" ; then\n\t\tCFLAGS=\"$CFLAGS -mieee\"\n\t    fi\n\t    ;;\n\tLynx*)\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    CFLAGS_OPTIMIZE=-02\n\t    SHLIB_LD=\"${CC} -shared \"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-mshared -ldl\"\n\t    LD_FLAGS=\"-Wl,--export-dynamic\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    ;;\n\tMP-RAS-02*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tMP-RAS-*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    LDFLAGS=\"$LDFLAGS -Wl,-Bexport\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tNetBSD-*|FreeBSD-[[1-2]].*)\n\t    # NetBSD/SPARC needs -fPIC, -fpic will not do.\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD=\"ld -Bshareable -x\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t    AC_CACHE_CHECK([for ELF], tcl_cv_ld_elf, [\n\t\tAC_EGREP_CPP(yes, [\n#ifdef __ELF__\n\tyes\n#endif\n\t\t], tcl_cv_ld_elf=yes, tcl_cv_ld_elf=no)])\n\t    if test $tcl_cv_ld_elf = yes; then\n\t\tSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.so'\n\t    else\n\t\tSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.so.1.0'\n\t    fi\n\n\t    # Ancient FreeBSD doesn't handle version numbers with dots.\n\n\t    UNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.a'\n\t    TCL_LIB_VERSIONS_OK=nodots\n\t    ;;\n\tOpenBSD-*)\n\t    # OpenBSD/SPARC[64] needs -fPIC, -fpic will not do.\n\t    case `machine` in\n\t    sparc|sparc64)\n\t\tSHLIB_CFLAGS=\"-fPIC\";;\n\t    *)\n\t\tSHLIB_CFLAGS=\"-fpic\";;\n\t    esac\n\t    SHLIB_LD=\"${CC} -shared ${SHLIB_CFLAGS}\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    SHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.so.1.0'\n\t    AC_CACHE_CHECK([for ELF], tcl_cv_ld_elf, [\n\t\tAC_EGREP_CPP(yes, [\n#ifdef __ELF__\n\tyes\n#endif\n\t\t], tcl_cv_ld_elf=yes, tcl_cv_ld_elf=no)])\n\t    if test $tcl_cv_ld_elf = yes; then\n\t\tLDFLAGS=-Wl,-export-dynamic\n\t    else\n\t\tLDFLAGS=\"\"\n\t    fi\n\n\t    # OpenBSD doesn't do version numbers with dots.\n\t    UNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.a'\n\t    TCL_LIB_VERSIONS_OK=nodots\n\t    ;;\n\tFreeBSD-*)\n\t    # FreeBSD 3.* and greater have ELF.\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD=\"ld -Bshareable -x\"\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    LDFLAGS=\"$LDFLAGS -export-dynamic\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t    if test \"${TCL_THREADS}\" = \"1\" ; then\n\t\t# The -pthread needs to go in the CFLAGS, not LIBS\n\t\tLIBS=`echo $LIBS | sed s/-pthread//`\n\t\tCFLAGS=\"$CFLAGS -pthread\"\n\t    \tLDFLAGS=\"$LDFLAGS -pthread\"\n\t    fi\n\t    case $system in\n\t    FreeBSD-3.*)\n\t    \t# FreeBSD-3 doesn't handle version numbers with dots.\n\t    \tUNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.a'\n\t    \tSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.so'\n\t    \tTCL_LIB_VERSIONS_OK=nodots\n\t\t;;\n\t    esac\n\t    ;;\n\tDarwin-*)\n\t    CFLAGS_OPTIMIZE=\"-Os\"\n\t    SHLIB_CFLAGS=\"-fno-common\"\n\t    # To avoid discrepancies between what headers configure sees during\n\t    # preprocessing tests and compiling tests, move any -isysroot and\n\t    # -mmacosx-version-min flags from CFLAGS to CPPFLAGS:\n\t    CPPFLAGS=\"${CPPFLAGS} `echo \" ${CFLAGS}\" | \\\n\t\tawk 'BEGIN {FS=\" +-\";ORS=\" \"}; {for (i=2;i<=NF;i++) \\\n\t\tif ([$]i~/^(isysroot|mmacosx-version-min)/) print \"-\"[$]i}'`\"\n\t    CFLAGS=\"`echo \" ${CFLAGS}\" | \\\n\t\tawk 'BEGIN {FS=\" +-\";ORS=\" \"}; {for (i=2;i<=NF;i++) \\\n\t\tif (!([$]i~/^(isysroot|mmacosx-version-min)/)) print \"-\"[$]i}'`\"\n\t    if test $do64bit = yes; then\n\t\tcase `arch` in\n\t\t    ppc)\n\t\t\tAC_CACHE_CHECK([if compiler accepts -arch ppc64 flag],\n\t\t\t\ttcl_cv_cc_arch_ppc64, [\n\t\t\t    hold_cflags=$CFLAGS\n\t\t\t    CFLAGS=\"$CFLAGS -arch ppc64 -mpowerpc64 -mcpu=G5\"\n\t\t\t    AC_TRY_LINK(,, tcl_cv_cc_arch_ppc64=yes,\n\t\t\t\t    tcl_cv_cc_arch_ppc64=no)\n\t\t\t    CFLAGS=$hold_cflags])\n\t\t\tif test $tcl_cv_cc_arch_ppc64 = yes; then\n\t\t\t    CFLAGS=\"$CFLAGS -arch ppc64 -mpowerpc64 -mcpu=G5\"\n\t\t\t    do64bit_ok=yes\n\t\t\tfi;;\n\t\t    i386)\n\t\t\tAC_CACHE_CHECK([if compiler accepts -arch x86_64 flag],\n\t\t\t\ttcl_cv_cc_arch_x86_64, [\n\t\t\t    hold_cflags=$CFLAGS\n\t\t\t    CFLAGS=\"$CFLAGS -arch x86_64\"\n\t\t\t    AC_TRY_LINK(,, tcl_cv_cc_arch_x86_64=yes,\n\t\t\t\t    tcl_cv_cc_arch_x86_64=no)\n\t\t\t    CFLAGS=$hold_cflags])\n\t\t\tif test $tcl_cv_cc_arch_x86_64 = yes; then\n\t\t\t    CFLAGS=\"$CFLAGS -arch x86_64\"\n\t\t\t    do64bit_ok=yes\n\t\t\tfi;;\n\t\t    *)\n\t\t\tAC_MSG_WARN([Don't know how enable 64-bit on architecture `arch`]);;\n\t\tesac\n\t    else\n\t\t# Check for combined 32-bit and 64-bit fat build\n\t\techo \"$CFLAGS \" | grep -E -q -- '-arch (ppc64|x86_64) ' && \\\n\t\t    echo \"$CFLAGS \" | grep -E -q -- '-arch (ppc|i386) ' && \\\n\t\t    fat_32_64=yes\n\t    fi\n\t    # TEA specific: use LDFLAGS_DEFAULT instead of LDFLAGS here:\n\t    SHLIB_LD='${CC} -dynamiclib ${CFLAGS} ${LDFLAGS_DEFAULT}'\n\t    AC_CACHE_CHECK([if ld accepts -single_module flag], tcl_cv_ld_single_module, [\n\t\thold_ldflags=$LDFLAGS\n\t\tLDFLAGS=\"$LDFLAGS -dynamiclib -Wl,-single_module\"\n\t\tAC_TRY_LINK(, [int i;], tcl_cv_ld_single_module=yes, tcl_cv_ld_single_module=no)\n\t\tLDFLAGS=$hold_ldflags])\n\t    if test $tcl_cv_ld_single_module = yes; then\n\t\tSHLIB_LD=\"${SHLIB_LD} -Wl,-single_module\"\n\t    fi\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".dylib\"\n\t    DL_OBJS=\"tclLoadDyld.o\"\n\t    DL_LIBS=\"\"\n\t    # Don't use -prebind when building for Mac OS X 10.4 or later only:\n\t    test \"`echo \"${MACOSX_DEPLOYMENT_TARGET}\" | awk -F '10\\\\.' '{print int([$]2)}'`\" -lt 4 -a \\\n\t\t\"`echo \"${CFLAGS}\" | awk -F '-mmacosx-version-min=10\\\\.' '{print int([$]2)}'`\" -lt 4 && \\\n\t\tLDFLAGS=\"$LDFLAGS -prebind\"\n\t    LDFLAGS=\"$LDFLAGS -headerpad_max_install_names\"\n\t    AC_CACHE_CHECK([if ld accepts -search_paths_first flag], tcl_cv_ld_search_paths_first, [\n\t\thold_ldflags=$LDFLAGS\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-search_paths_first\"\n\t\tAC_TRY_LINK(, [int i;], tcl_cv_ld_search_paths_first=yes, tcl_cv_ld_search_paths_first=no)\n\t\tLDFLAGS=$hold_ldflags])\n\t    if test $tcl_cv_ld_search_paths_first = yes; then\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-search_paths_first\"\n\t    fi\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    LD_LIBRARY_PATH_VAR=\"DYLD_LIBRARY_PATH\"\n\n\t    # TEA specific: for Tk extensions, remove 64-bit arch flags from\n\t    # CFLAGS for combined 32-bit and 64-bit fat builds as neither TkAqua\n\t    # nor TkX11 can be built for 64-bit at present.\n\t    test \"$fat_32_64\" = yes && test -n \"${TK_BIN_DIR}\" && \\\n\t\tCFLAGS=\"`echo \"$CFLAGS \" | sed -e 's/-arch ppc64 / /g' -e 's/-arch x86_64 / /g'`\"\n\t    ;;\n\tNEXTSTEP-*)\n\t    SHLIB_CFLAGS=\"\"\n\t    SHLIB_LD=\"cc -nostdlib -r\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadNext.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOS/390-*)\n\t    CFLAGS_OPTIMIZE=\"\"\t\t# Optimizer is buggy\n\t    AC_DEFINE(_OE_SOCKETS, 1,\t# needed in sys/socket.h\n\t\t[Should OS/390 do the right thing with sockets?])\n\t    ;;      \n\tOSF1-1.0|OSF1-1.1|OSF1-1.2)\n\t    # OSF/1 1.[012] from OSF, and derivatives, including Paragon OSF/1\n\t    SHLIB_CFLAGS=\"\"\n\t    # Hack: make package name same as library name\n\t    SHLIB_LD='ld -R -export $@:'\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadOSF.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOSF1-1.*)\n\t    # OSF/1 1.3 from OSF using ELF, and derivatives, including AD2\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    if test \"$SHARED_BUILD\" = \"1\" ; then\n\t        SHLIB_LD=\"ld -shared\"\n\t    else\n\t        SHLIB_LD=\"ld -non_shared\"\n\t    fi\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tOSF1-V*)\n\t    # Digital OSF/1\n\t    SHLIB_CFLAGS=\"\"\n\t    if test \"$SHARED_BUILD\" = \"1\" ; then\n\t        SHLIB_LD='ld -shared -expect_unresolved \"*\"'\n\t    else\n\t        SHLIB_LD='ld -non_shared -expect_unresolved \"*\"'\n\t    fi\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS='-Wl,-rpath,${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS='-rpath ${LIB_RUNTIME_DIR}'\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tCFLAGS=\"$CFLAGS -mieee\"\n            else\n\t\tCFLAGS=\"$CFLAGS -DHAVE_TZSET -std1 -ieee\"\n\t    fi\n\t    # see pthread_intro(3) for pthread support on osf1, k.furukawa\n\t    if test \"${TCL_THREADS}\" = \"1\" ; then\n\t\tCFLAGS=\"$CFLAGS -DHAVE_PTHREAD_ATTR_SETSTACKSIZE\"\n\t\tCFLAGS=\"$CFLAGS -DTCL_THREAD_STACK_MIN=PTHREAD_STACK_MIN*64\"\n\t\tLIBS=`echo $LIBS | sed s/-lpthreads//`\n\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t    LIBS=\"$LIBS -lpthread -lmach -lexc\"\n\t\telse\n\t\t    CFLAGS=\"$CFLAGS -pthread\"\n\t\t    LDFLAGS=\"$LDFLAGS -pthread\"\n\t\tfi\n\t    fi\n\n\t    ;;\n\tQNX-6*)\n\t    # QNX RTP\n\t    # This may work for all QNX, but it was only reported for v6.\n\t    SHLIB_CFLAGS=\"-fPIC\"\n\t    SHLIB_LD=\"ld -Bshareable -x\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    # dlopen is in -lc on QNX\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tSCO_SV-3.2*)\n\t    # Note, dlopen is available only on SCO 3.2.5 and greater. However,\n\t    # this test works, since \"uname -s\" was non-standard in 3.2.4 and\n\t    # below.\n\t    if test \"$GCC\" = \"yes\" ; then\n\t    \tSHLIB_CFLAGS=\"-fPIC -melf\"\n\t    \tLDFLAGS=\"$LDFLAGS -melf -Wl,-Bexport\"\n\t    else\n\t    \tSHLIB_CFLAGS=\"-Kpic -belf\"\n\t    \tLDFLAGS=\"$LDFLAGS -belf -Wl,-Bexport\"\n\t    fi\n\t    SHLIB_LD=\"ld -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tSINIX*5.4*)\n\t    SHLIB_CFLAGS=\"-K PIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n\tSunOS-4*)\n\t    SHLIB_CFLAGS=\"-PIC\"\n\t    SHLIB_LD=\"ld\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    CC_SEARCH_FLAGS='-L${LIB_RUNTIME_DIR}'\n\t    LD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\n\t    # SunOS can't handle version numbers with dots in them in library\n\t    # specs, like -ltcl7.5, so use -ltcl75 instead.  Also, it\n\t    # requires an extra version number at the end of .so file names.\n\t    # So, the library has to have a name like libtcl75.so.1.0\n\n\t    SHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.so.1.0'\n\t    UNSHARED_LIB_SUFFIX='${TCL_TRIM_DOTS}.a'\n\t    TCL_LIB_VERSIONS_OK=nodots\n\t    ;;\n\tSunOS-5.[[0-6]])\n\t    # Careful to not let 5.10+ fall into this case\n\n\t    # Note: If _REENTRANT isn't defined, then Solaris\n\t    # won't define thread-safe library routines.\n\n\t    AC_DEFINE(_REENTRANT, 1, [Do we want the reentrant OS API?])\n\t    AC_DEFINE(_POSIX_PTHREAD_SEMANTICS, 1,\n\t\t[Do we really want to follow the standard? Yes we do!])\n\n\t    SHLIB_CFLAGS=\"-KPIC\"\n\n\t    # Note: need the LIBS below, otherwise Tk won't find Tcl's\n\t    # symbols when dynamically loaded into tclsh.\n\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tSHLIB_LD=\"$CC -shared\"\n\t\tCC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    else\n\t\tSHLIB_LD=\"/usr/ccs/bin/ld -G -z text\"\n\t\tCC_SEARCH_FLAGS='-R ${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t    fi\n\t    ;;\n\tSunOS-5*)\n\t    # Note: If _REENTRANT isn't defined, then Solaris\n\t    # won't define thread-safe library routines.\n\n\t    AC_DEFINE(_REENTRANT, 1, [Do we want the reentrant OS API?])\n\t    AC_DEFINE(_POSIX_PTHREAD_SEMANTICS, 1,\n\t\t[Do we really want to follow the standard? Yes we do!])\n\n\t    SHLIB_CFLAGS=\"-KPIC\"\n\n\t    # Check to enable 64-bit flags for compiler/linker\n\t    if test \"$do64bit\" = \"yes\" ; then\n\t\tarch=`isainfo`\n\t\tif test \"$arch\" = \"sparcv9 sparc\" ; then\n\t\t\tif test \"$GCC\" = \"yes\" ; then\n\t\t\t    if test \"`gcc -dumpversion | awk -F. '{print [$]1}'`\" -lt \"3\" ; then\n\t\t\t\tAC_MSG_WARN([64bit mode not supported with GCC < 3.2 on $system])\n\t\t\t    else\n\t\t\t\tdo64bit_ok=yes\n\t\t\t\tCFLAGS=\"$CFLAGS -m64 -mcpu=v9\"\n\t\t\t\tLDFLAGS=\"$LDFLAGS -m64 -mcpu=v9\"\n\t\t\t\tSHLIB_CFLAGS=\"-fPIC\"\n\t\t\t    fi\n\t\t\telse\n\t\t\t    do64bit_ok=yes\n\t\t\t    if test \"$do64bitVIS\" = \"yes\" ; then\n\t\t\t\tCFLAGS=\"$CFLAGS -xarch=v9a\"\n\t\t\t    \tLDFLAGS_ARCH=\"-xarch=v9a\"\n\t\t\t    else\n\t\t\t\tCFLAGS=\"$CFLAGS -xarch=v9\"\n\t\t\t    \tLDFLAGS_ARCH=\"-xarch=v9\"\n\t\t\t    fi\n\t\t\t    # Solaris 64 uses this as well\n\t\t\t    #LD_LIBRARY_PATH_VAR=\"LD_LIBRARY_PATH_64\"\n\t\t\tfi\n\t\telif test \"$arch\" = \"amd64 i386\" ; then\n\t\t    if test \"$GCC\" = \"yes\" ; then\n\t\t\tAC_MSG_WARN([64bit mode not supported with GCC on $system])\n\t\t    else\n\t\t\tdo64bit_ok=yes\n\t\t\tCFLAGS=\"$CFLAGS -xarch=amd64\"\n\t\t\tLDFLAGS=\"$LDFLAGS -xarch=amd64\"\n\t\t    fi\n\t\telse\n\t\t    AC_MSG_WARN([64bit mode not supported for $arch])\n\t\tfi\n\t    fi\n\t    \n\t    # Note: need the LIBS below, otherwise Tk won't find Tcl's\n\t    # symbols when dynamically loaded into tclsh.\n\n\t    SHLIB_LD_LIBS='${LIBS}'\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    if test \"$GCC\" = \"yes\" ; then\n\t\tSHLIB_LD=\"$CC -shared\"\n\t\tCC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS=${CC_SEARCH_FLAGS}\n\t\tif test \"$do64bit_ok\" = \"yes\" ; then\n\t\t    # We need to specify -static-libgcc or we need to\n\t\t    # add the path to the sparv9 libgcc.\n\t\t    # JH: static-libgcc is necessary for core Tcl, but may\n\t\t    # not be necessary for extensions.\n\t\t    SHLIB_LD=\"$SHLIB_LD -m64 -mcpu=v9 -static-libgcc\"\n\t\t    # for finding sparcv9 libgcc, get the regular libgcc\n\t\t    # path, remove so name and append 'sparcv9'\n\t\t    #v9gcclibdir=\"`gcc -print-file-name=libgcc_s.so` | ...\"\n\t\t    #CC_SEARCH_FLAGS=\"${CC_SEARCH_FLAGS},-R,$v9gcclibdir\"\n\t\tfi\n\t    else\n\t\tSHLIB_LD=\"/usr/ccs/bin/ld -G -z text\"\n\t\tCC_SEARCH_FLAGS='-Wl,-R,${LIB_RUNTIME_DIR}'\n\t\tLD_SEARCH_FLAGS='-R ${LIB_RUNTIME_DIR}'\n\t    fi\n\t    ;;\n\tUNIX_SV* | UnixWare-5*)\n\t    SHLIB_CFLAGS=\"-KPIC\"\n\t    SHLIB_LD=\"cc -G\"\n\t    SHLIB_LD_LIBS=\"\"\n\t    SHLIB_SUFFIX=\".so\"\n\t    DL_OBJS=\"tclLoadDl.o\"\n\t    DL_LIBS=\"-ldl\"\n\t    # Some UNIX_SV* systems (unixware 1.1.2 for example) have linkers\n\t    # that don't grok the -Bexport option.  Test that it does.\n\t    AC_CACHE_CHECK([for ld accepts -Bexport flag], tcl_cv_ld_Bexport, [\n\t\thold_ldflags=$LDFLAGS\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-Bexport\"\n\t\tAC_TRY_LINK(, [int i;], tcl_cv_ld_Bexport=yes, tcl_cv_ld_Bexport=no)\n\t        LDFLAGS=$hold_ldflags])\n\t    if test $tcl_cv_ld_Bexport = yes; then\n\t\tLDFLAGS=\"$LDFLAGS -Wl,-Bexport\"\n\t    fi\n\t    CC_SEARCH_FLAGS=\"\"\n\t    LD_SEARCH_FLAGS=\"\"\n\t    ;;\n    esac\n\n    if test \"$do64bit\" = \"yes\" -a \"$do64bit_ok\" = \"no\" ; then\n\tAC_MSG_WARN([64bit support being disabled -- don't know magic for this platform])\n    fi\n\ndnl # Add any CPPFLAGS set in the environment to our CFLAGS, but delay doing so\ndnl # until the end of configure, as configure's compile and link tests use\ndnl # both CPPFLAGS and CFLAGS (unlike our compile and link) but configure's\ndnl # preprocessing tests use only CPPFLAGS.\n    AC_CONFIG_COMMANDS_PRE([CFLAGS=\"${CFLAGS} ${CPPFLAGS}\"; CPPFLAGS=\"\"])\n\n    # Step 4: disable dynamic loading if requested via a command-line switch.\n\n    AC_ARG_ENABLE(load,\n\tAC_HELP_STRING([--enable-load],\n\t    [allow dynamic loading and \"load\" command (default: on)]),\n\t[tcl_ok=$enableval], [tcl_ok=yes])\n    if test \"$tcl_ok\" = \"no\"; then\n\tDL_OBJS=\"\"\n    fi\n\n    if test \"x$DL_OBJS\" != \"x\" ; then\n\tBUILD_DLTEST=\"\\$(DLTEST_TARGETS)\"\n    else\n\techo \"Can't figure out how to do dynamic loading or shared libraries\"\n\techo \"on this system.\"\n\tSHLIB_CFLAGS=\"\"\n\tSHLIB_LD=\"\"\n\tSHLIB_SUFFIX=\"\"\n\tDL_OBJS=\"tclLoadNone.o\"\n\tDL_LIBS=\"\"\n\tLDFLAGS=\"$LDFLAGS_ORIG\"\n\tCC_SEARCH_FLAGS=\"\"\n\tLD_SEARCH_FLAGS=\"\"\n\tBUILD_DLTEST=\"\"\n    fi\n    LDFLAGS=\"$LDFLAGS $LDFLAGS_ARCH\"\n\n    # If we're running gcc, then change the C flags for compiling shared\n    # libraries to the right flags for gcc, instead of those for the\n    # standard manufacturer compiler.\n\n    if test \"$DL_OBJS\" != \"tclLoadNone.o\" ; then\n\tif test \"$GCC\" = \"yes\" ; then\n\t    case $system in\n\t\tAIX-*)\n\t\t    ;;\n\t\tBSD/OS*)\n\t\t    ;;\n\t\tIRIX*)\n\t\t    ;;\n\t\tNetBSD-*|FreeBSD-*)\n\t\t    ;;\n\t\tDarwin-*)\n\t\t    ;;\n\t\tSCO_SV-3.2*)\n\t\t    ;;\n\t\twindows)\n\t\t    ;;\n\t\t*)\n\t\t    SHLIB_CFLAGS=\"-fPIC\"\n\t\t    ;;\n\t    esac\n\tfi\n    fi\n\n    if test \"$SHARED_LIB_SUFFIX\" = \"\" ; then\n\tSHARED_LIB_SUFFIX='${PACKAGE_VERSION}${SHLIB_SUFFIX}'\n    fi\n    if test \"$UNSHARED_LIB_SUFFIX\" = \"\" ; then\n\tUNSHARED_LIB_SUFFIX='${PACKAGE_VERSION}.a'\n    fi\n\n    AC_SUBST(DL_LIBS)\n\n    AC_SUBST(CFLAGS_DEBUG)\n    AC_SUBST(CFLAGS_OPTIMIZE)\n    AC_SUBST(CFLAGS_WARNING)\n\n    AC_SUBST(STLIB_LD)\n    AC_SUBST(SHLIB_LD)\n\n    AC_SUBST(SHLIB_LD_LIBS)\n    AC_SUBST(SHLIB_CFLAGS)\n\n    AC_SUBST(LD_LIBRARY_PATH_VAR)\n\n    # These must be called after we do the basic CFLAGS checks and\n    # verify any possible 64-bit or similar switches are necessary\n    TEA_TCL_EARLY_FLAGS\n    TEA_TCL_64BIT_FLAGS\n])\n\n#--------------------------------------------------------------------\n# TEA_SERIAL_PORT\n#\n#\tDetermine which interface to use to talk to the serial port.\n#\tNote that #include lines must begin in leftmost column for\n#\tsome compilers to recognize them as preprocessor directives,\n#\tand some build environments have stdin not pointing at a\n#\tpseudo-terminal (usually /dev/null instead.)\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tDefines only one of the following vars:\n#\t\tHAVE_SYS_MODEM_H\n#\t\tUSE_TERMIOS\n#\t\tUSE_TERMIO\n#\t\tUSE_SGTTY\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_SERIAL_PORT], [\n    AC_CHECK_HEADERS(sys/modem.h)\n    AC_CACHE_CHECK([termios vs. termio vs. sgtty], tcl_cv_api_serial, [\n    AC_TRY_RUN([\n#include <termios.h>\n\nint main() {\n    struct termios t;\n    if (tcgetattr(0, &t) == 0) {\n\tcfsetospeed(&t, 0);\n\tt.c_cflag |= PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=termios, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    if test $tcl_cv_api_serial = no ; then\n\tAC_TRY_RUN([\n#include <termio.h>\n\nint main() {\n    struct termio t;\n    if (ioctl(0, TCGETA, &t) == 0) {\n\tt.c_cflag |= CBAUD | PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=termio, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no ; then\n\tAC_TRY_RUN([\n#include <sgtty.h>\n\nint main() {\n    struct sgttyb t;\n    if (ioctl(0, TIOCGETP, &t) == 0) {\n\tt.sg_ospeed = 0;\n\tt.sg_flags |= ODDP | EVENP | RAW;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=sgtty, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no ; then\n\tAC_TRY_RUN([\n#include <termios.h>\n#include <errno.h>\n\nint main() {\n    struct termios t;\n    if (tcgetattr(0, &t) == 0\n\t|| errno == ENOTTY || errno == ENXIO || errno == EINVAL) {\n\tcfsetospeed(&t, 0);\n\tt.c_cflag |= PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=termios, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no; then\n\tAC_TRY_RUN([\n#include <termio.h>\n#include <errno.h>\n\nint main() {\n    struct termio t;\n    if (ioctl(0, TCGETA, &t) == 0\n\t|| errno == ENOTTY || errno == ENXIO || errno == EINVAL) {\n\tt.c_cflag |= CBAUD | PARENB | PARODD | CSIZE | CSTOPB;\n\treturn 0;\n    }\n    return 1;\n    }], tcl_cv_api_serial=termio, tcl_cv_api_serial=no, tcl_cv_api_serial=no)\n    fi\n    if test $tcl_cv_api_serial = no; then\n\tAC_TRY_RUN([\n#include <sgtty.h>\n#include <errno.h>\n\nint main() {\n    struct sgttyb t;\n    if (ioctl(0, TIOCGETP, &t) == 0\n\t|| errno == ENOTTY || errno == ENXIO || errno == EINVAL) {\n\tt.sg_ospeed = 0;\n\tt.sg_flags |= ODDP | EVENP | RAW;\n\treturn 0;\n    }\n    return 1;\n}], tcl_cv_api_serial=sgtty, tcl_cv_api_serial=none, tcl_cv_api_serial=none)\n    fi])\n    case $tcl_cv_api_serial in\n\ttermios) AC_DEFINE(USE_TERMIOS, 1, [Use the termios API for serial lines]);;\n\ttermio)  AC_DEFINE(USE_TERMIO, 1, [Use the termio API for serial lines]);;\n\tsgtty)   AC_DEFINE(USE_SGTTY, 1, [Use the sgtty API for serial lines]);;\n    esac\n])\n\n#--------------------------------------------------------------------\n# TEA_MISSING_POSIX_HEADERS\n#\n#\tSupply substitutes for missing POSIX header files.  Special\n#\tnotes:\n#\t    - stdlib.h doesn't define strtol, strtoul, or\n#\t      strtod insome versions of SunOS\n#\t    - some versions of string.h don't declare procedures such\n#\t      as strstr\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tDefines some of the following vars:\n#\t\tNO_DIRENT_H\n#\t\tNO_ERRNO_H\n#\t\tNO_VALUES_H\n#\t\tHAVE_LIMITS_H or NO_LIMITS_H\n#\t\tNO_STDLIB_H\n#\t\tNO_STRING_H\n#\t\tNO_SYS_WAIT_H\n#\t\tNO_DLFCN_H\n#\t\tHAVE_SYS_PARAM_H\n#\n#\t\tHAVE_STRING_H ?\n#\n# tkUnixPort.h checks for HAVE_LIMITS_H, so do both HAVE and\n# CHECK on limits.h\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_MISSING_POSIX_HEADERS], [\n    AC_CACHE_CHECK([dirent.h], tcl_cv_dirent_h, [\n    AC_TRY_LINK([#include <sys/types.h>\n#include <dirent.h>], [\n#ifndef _POSIX_SOURCE\n#   ifdef __Lynx__\n\t/*\n\t * Generate compilation error to make the test fail:  Lynx headers\n\t * are only valid if really in the POSIX environment.\n\t */\n\n\tmissing_procedure();\n#   endif\n#endif\nDIR *d;\nstruct dirent *entryPtr;\nchar *p;\nd = opendir(\"foobar\");\nentryPtr = readdir(d);\np = entryPtr->d_name;\nclosedir(d);\n], tcl_cv_dirent_h=yes, tcl_cv_dirent_h=no)])\n\n    if test $tcl_cv_dirent_h = no; then\n\tAC_DEFINE(NO_DIRENT_H, 1, [Do we have <dirent.h>?])\n    fi\n\n    AC_CHECK_HEADER(errno.h, , [AC_DEFINE(NO_ERRNO_H, 1, [Do we have <errno.h>?])])\n    AC_CHECK_HEADER(float.h, , [AC_DEFINE(NO_FLOAT_H, 1, [Do we have <float.h>?])])\n    AC_CHECK_HEADER(values.h, , [AC_DEFINE(NO_VALUES_H, 1, [Do we have <values.h>?])])\n    AC_CHECK_HEADER(limits.h,\n\t[AC_DEFINE(HAVE_LIMITS_H, 1, [Do we have <limits.h>?])],\n\t[AC_DEFINE(NO_LIMITS_H, 1, [Do we have <limits.h>?])])\n    AC_CHECK_HEADER(stdlib.h, tcl_ok=1, tcl_ok=0)\n    AC_EGREP_HEADER(strtol, stdlib.h, , tcl_ok=0)\n    AC_EGREP_HEADER(strtoul, stdlib.h, , tcl_ok=0)\n    AC_EGREP_HEADER(strtod, stdlib.h, , tcl_ok=0)\n    if test $tcl_ok = 0; then\n\tAC_DEFINE(NO_STDLIB_H, 1, [Do we have <stdlib.h>?])\n    fi\n    AC_CHECK_HEADER(string.h, tcl_ok=1, tcl_ok=0)\n    AC_EGREP_HEADER(strstr, string.h, , tcl_ok=0)\n    AC_EGREP_HEADER(strerror, string.h, , tcl_ok=0)\n\n    # See also memmove check below for a place where NO_STRING_H can be\n    # set and why.\n\n    if test $tcl_ok = 0; then\n\tAC_DEFINE(NO_STRING_H, 1, [Do we have <string.h>?])\n    fi\n\n    AC_CHECK_HEADER(sys/wait.h, , [AC_DEFINE(NO_SYS_WAIT_H, 1, [Do we have <sys/wait.h>?])])\n    AC_CHECK_HEADER(dlfcn.h, , [AC_DEFINE(NO_DLFCN_H, 1, [Do we have <dlfcn.h>?])])\n\n    # OS/390 lacks sys/param.h (and doesn't need it, by chance).\n    AC_HAVE_HEADERS(sys/param.h)\n])\n\n#--------------------------------------------------------------------\n# TEA_PATH_X\n#\n#\tLocate the X11 header files and the X11 library archive.  Try\n#\tthe ac_path_x macro first, but if it doesn't find the X stuff\n#\t(e.g. because there's no xmkmf program) then check through\n#\ta list of possible directories.  Under some conditions the\n#\tautoconf macro will return an include directory that contains\n#\tno include files, so double-check its result just to be safe.\n#\n#\tThis should be called after TEA_CONFIG_CFLAGS as setting the\n#\tLIBS line can confuse some configure macro magic.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tSets the following vars:\n#\t\tXINCLUDES\n#\t\tXLIBSW\n#\t\tPKG_LIBS (appends to)\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_PATH_X], [\n    if test \"${TEA_WINDOWINGSYSTEM}\" = \"x11\" ; then\n\tTEA_PATH_UNIX_X\n    fi\n])\n\nAC_DEFUN([TEA_PATH_UNIX_X], [\n    AC_PATH_X\n    not_really_there=\"\"\n    if test \"$no_x\" = \"\"; then\n\tif test \"$x_includes\" = \"\"; then\n\t    AC_TRY_CPP([#include <X11/XIntrinsic.h>], , not_really_there=\"yes\")\n\telse\n\t    if test ! -r $x_includes/X11/Intrinsic.h; then\n\t\tnot_really_there=\"yes\"\n\t    fi\n\tfi\n    fi\n    if test \"$no_x\" = \"yes\" -o \"$not_really_there\" = \"yes\"; then\n\tAC_MSG_CHECKING([for X11 header files])\n\tfound_xincludes=\"no\"\n\tAC_TRY_CPP([#include <X11/Intrinsic.h>], found_xincludes=\"yes\", found_xincludes=\"no\")\n\tif test \"$found_xincludes\" = \"no\"; then\n\t    dirs=\"/usr/unsupported/include /usr/local/include /usr/X386/include /usr/X11R6/include /usr/X11R5/include /usr/include/X11R5 /usr/include/X11R4 /usr/openwin/include /usr/X11/include /usr/sww/include\"\n\t    for i in $dirs ; do\n\t\tif test -r $i/X11/Intrinsic.h; then\n\t\t    AC_MSG_RESULT([$i])\n\t\t    XINCLUDES=\" -I$i\"\n\t\t    found_xincludes=\"yes\"\n\t\t    break\n\t\tfi\n\t    done\n\tfi\n    else\n\tif test \"$x_includes\" != \"\"; then\n\t    XINCLUDES=\"-I$x_includes\"\n\t    found_xincludes=\"yes\"\n\tfi\n    fi\n    if test found_xincludes = \"no\"; then\n\tAC_MSG_RESULT([couldn't find any!])\n    fi\n\n    if test \"$no_x\" = yes; then\n\tAC_MSG_CHECKING([for X11 libraries])\n\tXLIBSW=nope\n\tdirs=\"/usr/unsupported/lib /usr/local/lib /usr/X386/lib /usr/X11R6/lib /usr/X11R5/lib /usr/lib/X11R5 /usr/lib/X11R4 /usr/openwin/lib /usr/X11/lib /usr/sww/X11/lib\"\n\tfor i in $dirs ; do\n\t    if test -r $i/libX11.a -o -r $i/libX11.so -o -r $i/libX11.sl; then\n\t\tAC_MSG_RESULT([$i])\n\t\tXLIBSW=\"-L$i -lX11\"\n\t\tx_libraries=\"$i\"\n\t\tbreak\n\t    fi\n\tdone\n    else\n\tif test \"$x_libraries\" = \"\"; then\n\t    XLIBSW=-lX11\n\telse\n\t    XLIBSW=\"-L$x_libraries -lX11\"\n\tfi\n    fi\n    if test \"$XLIBSW\" = nope ; then\n\tAC_CHECK_LIB(Xwindow, XCreateWindow, XLIBSW=-lXwindow)\n    fi\n    if test \"$XLIBSW\" = nope ; then\n\tAC_MSG_RESULT([could not find any!  Using -lX11.])\n\tXLIBSW=-lX11\n    fi\n    if test x\"${XLIBSW}\" != x ; then\n\tPKG_LIBS=\"${PKG_LIBS} ${XLIBSW}\"\n    fi\n])\n\n#--------------------------------------------------------------------\n# TEA_BLOCKING_STYLE\n#\n#\tThe statements below check for systems where POSIX-style\n#\tnon-blocking I/O (O_NONBLOCK) doesn't work or is unimplemented. \n#\tOn these systems (mostly older ones), use the old BSD-style\n#\tFIONBIO approach instead.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tDefines some of the following vars:\n#\t\tHAVE_SYS_IOCTL_H\n#\t\tHAVE_SYS_FILIO_H\n#\t\tUSE_FIONBIO\n#\t\tO_NONBLOCK\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_BLOCKING_STYLE], [\n    AC_CHECK_HEADERS(sys/ioctl.h)\n    AC_CHECK_HEADERS(sys/filio.h)\n    TEA_CONFIG_SYSTEM\n    AC_MSG_CHECKING([FIONBIO vs. O_NONBLOCK for nonblocking I/O])\n    case $system in\n\t# There used to be code here to use FIONBIO under AIX.  However, it\n\t# was reported that FIONBIO doesn't work under AIX 3.2.5.  Since\n\t# using O_NONBLOCK seems fine under AIX 4.*, I removed the FIONBIO\n\t# code (JO, 5/31/97).\n\n\tOSF*)\n\t    AC_DEFINE(USE_FIONBIO, 1, [Should we use FIONBIO?])\n\t    AC_MSG_RESULT([FIONBIO])\n\t    ;;\n\tSunOS-4*)\n\t    AC_DEFINE(USE_FIONBIO, 1, [Should we use FIONBIO?])\n\t    AC_MSG_RESULT([FIONBIO])\n\t    ;;\n\t*)\n\t    AC_MSG_RESULT([O_NONBLOCK])\n\t    ;;\n    esac\n])\n\n#--------------------------------------------------------------------\n# TEA_TIME_HANLDER\n#\n#\tChecks how the system deals with time.h, what time structures\n#\tare used on the system, and what fields the structures have.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tDefines some of the following vars:\n#\t\tUSE_DELTA_FOR_TZ\n#\t\tHAVE_TM_GMTOFF\n#\t\tHAVE_TM_TZADJ\n#\t\tHAVE_TIMEZONE_VAR\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_TIME_HANDLER], [\n    AC_CHECK_HEADERS(sys/time.h)\n    AC_HEADER_TIME\n    AC_STRUCT_TIMEZONE\n\n    AC_CHECK_FUNCS(gmtime_r localtime_r)\n\n    AC_CACHE_CHECK([tm_tzadj in struct tm], tcl_cv_member_tm_tzadj, [\n\tAC_TRY_COMPILE([#include <time.h>], [struct tm tm; tm.tm_tzadj;],\n\t    tcl_cv_member_tm_tzadj=yes, tcl_cv_member_tm_tzadj=no)])\n    if test $tcl_cv_member_tm_tzadj = yes ; then\n\tAC_DEFINE(HAVE_TM_TZADJ, 1, [Should we use the tm_tzadj field of struct tm?])\n    fi\n\n    AC_CACHE_CHECK([tm_gmtoff in struct tm], tcl_cv_member_tm_gmtoff, [\n\tAC_TRY_COMPILE([#include <time.h>], [struct tm tm; tm.tm_gmtoff;],\n\t    tcl_cv_member_tm_gmtoff=yes, tcl_cv_member_tm_gmtoff=no)])\n    if test $tcl_cv_member_tm_gmtoff = yes ; then\n\tAC_DEFINE(HAVE_TM_GMTOFF, 1, [Should we use the tm_gmtoff field of struct tm?])\n    fi\n\n    #\n    # Its important to include time.h in this check, as some systems\n    # (like convex) have timezone functions, etc.\n    #\n    AC_CACHE_CHECK([long timezone variable], tcl_cv_timezone_long, [\n\tAC_TRY_COMPILE([#include <time.h>],\n\t    [extern long timezone;\n\t    timezone += 1;\n\t    exit (0);],\n\t    tcl_cv_timezone_long=yes, tcl_cv_timezone_long=no)])\n    if test $tcl_cv_timezone_long = yes ; then\n\tAC_DEFINE(HAVE_TIMEZONE_VAR, 1, [Should we use the global timezone variable?])\n    else\n\t#\n\t# On some systems (eg IRIX 6.2), timezone is a time_t and not a long.\n\t#\n\tAC_CACHE_CHECK([time_t timezone variable], tcl_cv_timezone_time, [\n\t    AC_TRY_COMPILE([#include <time.h>],\n\t\t[extern time_t timezone;\n\t\ttimezone += 1;\n\t\texit (0);],\n\t\ttcl_cv_timezone_time=yes, tcl_cv_timezone_time=no)])\n\tif test $tcl_cv_timezone_time = yes ; then\n\t    AC_DEFINE(HAVE_TIMEZONE_VAR, 1, [Should we use the global timezone variable?])\n\tfi\n    fi\n])\n\n#--------------------------------------------------------------------\n# TEA_BUGGY_STRTOD\n#\n#\tUnder Solaris 2.4, strtod returns the wrong value for the\n#\tterminating character under some conditions.  Check for this\n#\tand if the problem exists use a substitute procedure\n#\t\"fixstrtod\" (provided by Tcl) that corrects the error.\n#\tAlso, on Compaq's Tru64 Unix 5.0,\n#\tstrtod(\" \") returns 0.0 instead of a failure to convert.\n#\n# Arguments:\n#\tnone\n#\t\n# Results:\n#\n#\tMight defines some of the following vars:\n#\t\tstrtod (=fixstrtod)\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_BUGGY_STRTOD], [\n    AC_CHECK_FUNC(strtod, tcl_strtod=1, tcl_strtod=0)\n    if test \"$tcl_strtod\" = 1; then\n\tAC_CACHE_CHECK([for Solaris2.4/Tru64 strtod bugs], tcl_cv_strtod_buggy,[\n\t    AC_TRY_RUN([\n\t\textern double strtod();\n\t\tint main() {\n\t\t    char *infString=\"Inf\", *nanString=\"NaN\", *spaceString=\" \";\n\t\t    char *term;\n\t\t    double value;\n\t\t    value = strtod(infString, &term);\n\t\t    if ((term != infString) && (term[-1] == 0)) {\n\t\t\texit(1);\n\t\t    }\n\t\t    value = strtod(nanString, &term);\n\t\t    if ((term != nanString) && (term[-1] == 0)) {\n\t\t\texit(1);\n\t\t    }\n\t\t    value = strtod(spaceString, &term);\n\t\t    if (term == (spaceString+1)) {\n\t\t\texit(1);\n\t\t    }\n\t\t    exit(0);\n\t\t}], tcl_cv_strtod_buggy=ok, tcl_cv_strtod_buggy=buggy,\n\t\t    tcl_cv_strtod_buggy=buggy)])\n\tif test \"$tcl_cv_strtod_buggy\" = buggy; then\n\t    AC_LIBOBJ([fixstrtod])\n\t    USE_COMPAT=1\n\t    AC_DEFINE(strtod, fixstrtod, [Do we want to use the strtod() in compat?])\n\tfi\n    fi\n])\n\n#--------------------------------------------------------------------\n# TEA_TCL_LINK_LIBS\n#\n#\tSearch for the libraries needed to link the Tcl shell.\n#\tThings like the math library (-lm) and socket stuff (-lsocket vs.\n#\t-lnsl) are dealt with here.\n#\n# Arguments:\n#\tRequires the following vars to be set in the Makefile:\n#\t\tDL_LIBS\n#\t\tLIBS\n#\t\tMATH_LIBS\n#\t\n# Results:\n#\n#\tSubst's the following var:\n#\t\tTCL_LIBS\n#\t\tMATH_LIBS\n#\n#\tMight append to the following vars:\n#\t\tLIBS\n#\n#\tMight define the following vars:\n#\t\tHAVE_NET_ERRNO_H\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_TCL_LINK_LIBS], [\n    #--------------------------------------------------------------------\n    # On a few very rare systems, all of the libm.a stuff is\n    # already in libc.a.  Set compiler flags accordingly.\n    # Also, Linux requires the \"ieee\" library for math to work\n    # right (and it must appear before \"-lm\").\n    #--------------------------------------------------------------------\n\n    AC_CHECK_FUNC(sin, MATH_LIBS=\"\", MATH_LIBS=\"-lm\")\n    AC_CHECK_LIB(ieee, main, [MATH_LIBS=\"-lieee $MATH_LIBS\"])\n\n    #--------------------------------------------------------------------\n    # Interactive UNIX requires -linet instead of -lsocket, plus it\n    # needs net/errno.h to define the socket-related error codes.\n    #--------------------------------------------------------------------\n\n    AC_CHECK_LIB(inet, main, [LIBS=\"$LIBS -linet\"])\n    AC_CHECK_HEADER(net/errno.h, [\n\tAC_DEFINE(HAVE_NET_ERRNO_H, 1, [Do we have <net/errno.h>?])])\n\n    #--------------------------------------------------------------------\n    #\tCheck for the existence of the -lsocket and -lnsl libraries.\n    #\tThe order here is important, so that they end up in the right\n    #\torder in the command line generated by make.  Here are some\n    #\tspecial considerations:\n    #\t1. Use \"connect\" and \"accept\" to check for -lsocket, and\n    #\t   \"gethostbyname\" to check for -lnsl.\n    #\t2. Use each function name only once:  can't redo a check because\n    #\t   autoconf caches the results of the last check and won't redo it.\n    #\t3. Use -lnsl and -lsocket only if they supply procedures that\n    #\t   aren't already present in the normal libraries.  This is because\n    #\t   IRIX 5.2 has libraries, but they aren't needed and they're\n    #\t   bogus:  they goof up name resolution if used.\n    #\t4. On some SVR4 systems, can't use -lsocket without -lnsl too.\n    #\t   To get around this problem, check for both libraries together\n    #\t   if -lsocket doesn't work by itself.\n    #--------------------------------------------------------------------\n\n    tcl_checkBoth=0\n    AC_CHECK_FUNC(connect, tcl_checkSocket=0, tcl_checkSocket=1)\n    if test \"$tcl_checkSocket\" = 1; then\n\tAC_CHECK_FUNC(setsockopt, , [AC_CHECK_LIB(socket, setsockopt,\n\t    LIBS=\"$LIBS -lsocket\", tcl_checkBoth=1)])\n    fi\n    if test \"$tcl_checkBoth\" = 1; then\n\ttk_oldLibs=$LIBS\n\tLIBS=\"$LIBS -lsocket -lnsl\"\n\tAC_CHECK_FUNC(accept, tcl_checkNsl=0, [LIBS=$tk_oldLibs])\n    fi\n    AC_CHECK_FUNC(gethostbyname, , [AC_CHECK_LIB(nsl, gethostbyname,\n\t    [LIBS=\"$LIBS -lnsl\"])])\n    \n    # Don't perform the eval of the libraries here because DL_LIBS\n    # won't be set until we call TEA_CONFIG_CFLAGS\n\n    TCL_LIBS='${DL_LIBS} ${LIBS} ${MATH_LIBS}'\n    AC_SUBST(TCL_LIBS)\n    AC_SUBST(MATH_LIBS)\n])\n\n#--------------------------------------------------------------------\n# TEA_TCL_EARLY_FLAGS\n#\n#\tCheck for what flags are needed to be passed so the correct OS\n#\tfeatures are available.\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\t_ISOC99_SOURCE\n#\t\t_LARGEFILE64_SOURCE\n#\t\t_LARGEFILE_SOURCE64\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_TCL_EARLY_FLAG],[\n    AC_CACHE_VAL([tcl_cv_flag_]translit($1,[A-Z],[a-z]),\n\tAC_TRY_COMPILE([$2], $3, [tcl_cv_flag_]translit($1,[A-Z],[a-z])=no,\n\t    AC_TRY_COMPILE([[#define ]$1[ 1\n]$2], $3,\n\t\t[tcl_cv_flag_]translit($1,[A-Z],[a-z])=yes,\n\t\t[tcl_cv_flag_]translit($1,[A-Z],[a-z])=no)))\n    if test [\"x${tcl_cv_flag_]translit($1,[A-Z],[a-z])[}\" = \"xyes\"] ; then\n\tAC_DEFINE($1, 1, [Add the ]$1[ flag when building])\n\ttcl_flags=\"$tcl_flags $1\"\n    fi\n])\n\nAC_DEFUN([TEA_TCL_EARLY_FLAGS],[\n    AC_MSG_CHECKING([for required early compiler flags])\n    tcl_flags=\"\"\n    TEA_TCL_EARLY_FLAG(_ISOC99_SOURCE,[#include <stdlib.h>],\n\t[char *p = (char *)strtoll; char *q = (char *)strtoull;])\n    TEA_TCL_EARLY_FLAG(_LARGEFILE64_SOURCE,[#include <sys/stat.h>],\n\t[struct stat64 buf; int i = stat64(\"/\", &buf);])\n    TEA_TCL_EARLY_FLAG(_LARGEFILE_SOURCE64,[#include <sys/stat.h>],\n\t[char *p = (char *)open64;])\n    if test \"x${tcl_flags}\" = \"x\" ; then\n\tAC_MSG_RESULT([none])\n    else\n\tAC_MSG_RESULT([${tcl_flags}])\n    fi\n])\n\n#--------------------------------------------------------------------\n# TEA_TCL_64BIT_FLAGS\n#\n#\tCheck for what is defined in the way of 64-bit features.\n#\n# Arguments:\n#\tNone\n#\t\n# Results:\n#\n#\tMight define the following vars:\n#\t\tTCL_WIDE_INT_IS_LONG\n#\t\tTCL_WIDE_INT_TYPE\n#\t\tHAVE_STRUCT_DIRENT64\n#\t\tHAVE_STRUCT_STAT64\n#\t\tHAVE_TYPE_OFF64_T\n#\n#--------------------------------------------------------------------\n\nAC_DEFUN([TEA_TCL_64BIT_FLAGS], [\n    AC_MSG_CHECKING([for 64-bit integer type])\n    AC_CACHE_VAL(tcl_cv_type_64bit,[\n\ttcl_cv_type_64bit=none\n\t# See if the compiler knows natively about __int64\n\tAC_TRY_COMPILE(,[__int64 value = (__int64) 0;],\n\t    tcl_type_64bit=__int64, tcl_type_64bit=\"long long\")\n\t# See if we should use long anyway  Note that we substitute in the\n\t# type that is our current guess for a 64-bit type inside this check\n\t# program, so it should be modified only carefully...\n        AC_TRY_COMPILE(,[switch (0) { \n            case 1: case (sizeof(]${tcl_type_64bit}[)==sizeof(long)): ; \n        }],tcl_cv_type_64bit=${tcl_type_64bit})])\n    if test \"${tcl_cv_type_64bit}\" = none ; then\n\tAC_DEFINE(TCL_WIDE_INT_IS_LONG, 1, [Are wide integers to be implemented with C 'long's?])\n\tAC_MSG_RESULT([using long])\n    elif test \"${tcl_cv_type_64bit}\" = \"__int64\" \\\n\t\t-a \"${TEA_PLATFORM}\" = \"windows\" ; then\n\t# We actually want to use the default tcl.h checks in this\n\t# case to handle both TCL_WIDE_INT_TYPE and TCL_LL_MODIFIER*\n\tAC_MSG_RESULT([using Tcl header defaults])\n    else\n\tAC_DEFINE_UNQUOTED(TCL_WIDE_INT_TYPE,${tcl_cv_type_64bit},\n\t    [What type should be used to define wide integers?])\n\tAC_MSG_RESULT([${tcl_cv_type_64bit}])\n\n\t# Now check for auxiliary declarations\n\tAC_CACHE_CHECK([for struct dirent64], tcl_cv_struct_dirent64,[\n\t    AC_TRY_COMPILE([#include <sys/types.h>\n#include <sys/dirent.h>],[struct dirent64 p;],\n\t\ttcl_cv_struct_dirent64=yes,tcl_cv_struct_dirent64=no)])\n\tif test \"x${tcl_cv_struct_dirent64}\" = \"xyes\" ; then\n\t    AC_DEFINE(HAVE_STRUCT_DIRENT64, 1, [Is 'struct dirent64' in <sys/types.h>?])\n\tfi\n\n\tAC_CACHE_CHECK([for struct stat64], tcl_cv_struct_stat64,[\n\t    AC_TRY_COMPILE([#include <sys/stat.h>],[struct stat64 p;\n],\n\t\ttcl_cv_struct_stat64=yes,tcl_cv_struct_stat64=no)])\n\tif test \"x${tcl_cv_struct_stat64}\" = \"xyes\" ; then\n\t    AC_DEFINE(HAVE_STRUCT_STAT64, 1, [Is 'struct stat64' in <sys/stat.h>?])\n\tfi\n\n\tAC_CHECK_FUNCS(open64 lseek64)\n\tAC_MSG_CHECKING([for off64_t])\n\tAC_CACHE_VAL(tcl_cv_type_off64_t,[\n\t    AC_TRY_COMPILE([#include <sys/types.h>],[off64_t offset;\n],\n\t\ttcl_cv_type_off64_t=yes,tcl_cv_type_off64_t=no)])\n\tdnl Define HAVE_TYPE_OFF64_T only when the off64_t type and the\n\tdnl functions lseek64 and open64 are defined.\n\tif test \"x${tcl_cv_type_off64_t}\" = \"xyes\" && \\\n\t        test \"x${ac_cv_func_lseek64}\" = \"xyes\" && \\\n\t        test \"x${ac_cv_func_open64}\" = \"xyes\" ; then\n\t    AC_DEFINE(HAVE_TYPE_OFF64_T, 1, [Is off64_t in <sys/types.h>?])\n\t    AC_MSG_RESULT([yes])\n\telse\n\t    AC_MSG_RESULT([no])\n\tfi\n    fi\n])\n\n##\n## Here ends the standard Tcl configuration bits and starts the\n## TEA specific functions\n##\n\n#------------------------------------------------------------------------\n# TEA_INIT --\n#\n#\tInit various Tcl Extension Architecture (TEA) variables.\n#\tThis should be the first called TEA_* macro.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tDefines and substs the following vars:\n#\t\tCYGPATH\n#\t\tEXEEXT\n#\tDefines only:\n#\t\tTEA_VERSION\n#\t\tTEA_INITED\n#\t\tTEA_PLATFORM (windows or unix)\n#\n# \"cygpath\" is used on windows to generate native path names for include\n# files. These variables should only be used with the compiler and linker\n# since they generate native path names.\n#\n# EXEEXT\n#\tSelect the executable extension based on the host type.  This\n#\tis a lightweight replacement for AC_EXEEXT that doesn't require\n#\ta compiler.\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_INIT], [\n    # TEA extensions pass this us the version of TEA they think they\n    # are compatible with.\n    TEA_VERSION=\"3.6\"\n\n    AC_MSG_CHECKING([for correct TEA configuration])\n    if test x\"${PACKAGE_NAME}\" = x ; then\n\tAC_MSG_ERROR([\nThe PACKAGE_NAME variable must be defined by your TEA configure.in])\n    fi\n    if test x\"$1\" = x ; then\n\tAC_MSG_ERROR([\nTEA version not specified.])\n    elif test \"$1\" != \"${TEA_VERSION}\" ; then\n\tAC_MSG_RESULT([warning: requested TEA version \"$1\", have \"${TEA_VERSION}\"])\n    else\n\tAC_MSG_RESULT([ok (TEA ${TEA_VERSION})])\n    fi\n    case \"`uname -s`\" in\n\t*win32*|*WIN32*|*CYGWIN_NT*|*CYGWIN_9*|*CYGWIN_ME*|*MINGW32_*)\n\t    AC_CHECK_PROG(CYGPATH, cygpath, cygpath -w, echo)\n\t    EXEEXT=\".exe\"\n\t    TEA_PLATFORM=\"windows\"\n\t    ;;\n\t*)\n\t    CYGPATH=echo\n\t    EXEEXT=\"\"\n\t    TEA_PLATFORM=\"unix\"\n\t    ;;\n    esac\n\n    # Check if exec_prefix is set. If not use fall back to prefix.\n    # Note when adjusted, so that TEA_PREFIX can correct for this.\n    # This is needed for recursive configures, since autoconf propagates\n    # $prefix, but not $exec_prefix (doh!).\n    if test x$exec_prefix = xNONE ; then\n\texec_prefix_default=yes\n\texec_prefix=$prefix\n    fi\n\n    AC_SUBST(EXEEXT)\n    AC_SUBST(CYGPATH)\n\n    # This package name must be replaced statically for AC_SUBST to work\n    AC_SUBST(PKG_LIB_FILE)\n    # Substitute STUB_LIB_FILE in case package creates a stub library too.\n    AC_SUBST(PKG_STUB_LIB_FILE)\n\n    # We AC_SUBST these here to ensure they are subst'ed,\n    # in case the user doesn't call TEA_ADD_...\n    AC_SUBST(PKG_STUB_SOURCES)\n    AC_SUBST(PKG_STUB_OBJECTS)\n    AC_SUBST(PKG_TCL_SOURCES)\n    AC_SUBST(PKG_HEADERS)\n    AC_SUBST(PKG_INCLUDES)\n    AC_SUBST(PKG_LIBS)\n    AC_SUBST(PKG_CFLAGS)\n])\n\n#------------------------------------------------------------------------\n# TEA_ADD_SOURCES --\n#\n#\tSpecify one or more source files.  Users should check for\n#\tthe right platform before adding to their list.\n#\tIt is not important to specify the directory, as long as it is\n#\tin the generic, win or unix subdirectory of $(srcdir).\n#\n# Arguments:\n#\tone or more file names\n#\n# Results:\n#\n#\tDefines and substs the following vars:\n#\t\tPKG_SOURCES\n#\t\tPKG_OBJECTS\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_ADD_SOURCES], [\n    vars=\"$@\"\n    for i in $vars; do\n\tcase $i in\n\t    [\\$]*)\n\t\t# allow $-var names\n\t\tPKG_SOURCES=\"$PKG_SOURCES $i\"\n\t\tPKG_OBJECTS=\"$PKG_OBJECTS $i\"\n\t\t;;\n\t    *)\n\t\t# check for existence - allows for generic/win/unix VPATH\n\t\tif test ! -f \"${srcdir}/$i\" -a ! -f \"${srcdir}/generic/$i\" \\\n\t\t    -a ! -f \"${srcdir}/win/$i\" -a ! -f \"${srcdir}/unix/$i\" \\\n\t\t    ; then\n\t\t    AC_MSG_ERROR([could not find source file '$i'])\n\t\tfi\n\t\tPKG_SOURCES=\"$PKG_SOURCES $i\"\n\t\t# this assumes it is in a VPATH dir\n\t\ti=`basename $i`\n\t\t# handle user calling this before or after TEA_SETUP_COMPILER\n\t\tif test x\"${OBJEXT}\" != x ; then\n\t\t    j=\"`echo $i | sed -e 's/\\.[[^.]]*$//'`.${OBJEXT}\"\n\t\telse\n\t\t    j=\"`echo $i | sed -e 's/\\.[[^.]]*$//'`.\\${OBJEXT}\"\n\t\tfi\n\t\tPKG_OBJECTS=\"$PKG_OBJECTS $j\"\n\t\t;;\n\tesac\n    done\n    AC_SUBST(PKG_SOURCES)\n    AC_SUBST(PKG_OBJECTS)\n])\n\n#------------------------------------------------------------------------\n# TEA_ADD_STUB_SOURCES --\n#\n#\tSpecify one or more source files.  Users should check for\n#\tthe right platform before adding to their list.\n#\tIt is not important to specify the directory, as long as it is\n#\tin the generic, win or unix subdirectory of $(srcdir).\n#\n# Arguments:\n#\tone or more file names\n#\n# Results:\n#\n#\tDefines and substs the following vars:\n#\t\tPKG_STUB_SOURCES\n#\t\tPKG_STUB_OBJECTS\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_ADD_STUB_SOURCES], [\n    vars=\"$@\"\n    for i in $vars; do\n\t# check for existence - allows for generic/win/unix VPATH\n\tif test ! -f \"${srcdir}/$i\" -a ! -f \"${srcdir}/generic/$i\" \\\n\t    -a ! -f \"${srcdir}/win/$i\" -a ! -f \"${srcdir}/unix/$i\" \\\n\t    ; then\n\t    AC_MSG_ERROR([could not find stub source file '$i'])\n\tfi\n\tPKG_STUB_SOURCES=\"$PKG_STUB_SOURCES $i\"\n\t# this assumes it is in a VPATH dir\n\ti=`basename $i`\n\t# handle user calling this before or after TEA_SETUP_COMPILER\n\tif test x\"${OBJEXT}\" != x ; then\n\t    j=\"`echo $i | sed -e 's/\\.[[^.]]*$//'`.${OBJEXT}\"\n\telse\n\t    j=\"`echo $i | sed -e 's/\\.[[^.]]*$//'`.\\${OBJEXT}\"\n\tfi\n\tPKG_STUB_OBJECTS=\"$PKG_STUB_OBJECTS $j\"\n    done\n    AC_SUBST(PKG_STUB_SOURCES)\n    AC_SUBST(PKG_STUB_OBJECTS)\n])\n\n#------------------------------------------------------------------------\n# TEA_ADD_TCL_SOURCES --\n#\n#\tSpecify one or more Tcl source files.  These should be platform\n#\tindependent runtime files.\n#\n# Arguments:\n#\tone or more file names\n#\n# Results:\n#\n#\tDefines and substs the following vars:\n#\t\tPKG_TCL_SOURCES\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_ADD_TCL_SOURCES], [\n    vars=\"$@\"\n    for i in $vars; do\n\t# check for existence, be strict because it is installed\n\tif test ! -f \"${srcdir}/$i\" ; then\n\t    AC_MSG_ERROR([could not find tcl source file '${srcdir}/$i'])\n\tfi\n\tPKG_TCL_SOURCES=\"$PKG_TCL_SOURCES $i\"\n    done\n    AC_SUBST(PKG_TCL_SOURCES)\n])\n\n#------------------------------------------------------------------------\n# TEA_ADD_HEADERS --\n#\n#\tSpecify one or more source headers.  Users should check for\n#\tthe right platform before adding to their list.\n#\n# Arguments:\n#\tone or more file names\n#\n# Results:\n#\n#\tDefines and substs the following vars:\n#\t\tPKG_HEADERS\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_ADD_HEADERS], [\n    vars=\"$@\"\n    for i in $vars; do\n\t# check for existence, be strict because it is installed\n\tif test ! -f \"${srcdir}/$i\" ; then\n\t    AC_MSG_ERROR([could not find header file '${srcdir}/$i'])\n\tfi\n\tPKG_HEADERS=\"$PKG_HEADERS $i\"\n    done\n    AC_SUBST(PKG_HEADERS)\n])\n\n#------------------------------------------------------------------------\n# TEA_ADD_INCLUDES --\n#\n#\tSpecify one or more include dirs.  Users should check for\n#\tthe right platform before adding to their list.\n#\n# Arguments:\n#\tone or more file names\n#\n# Results:\n#\n#\tDefines and substs the following vars:\n#\t\tPKG_INCLUDES\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_ADD_INCLUDES], [\n    vars=\"$@\"\n    for i in $vars; do\n\tPKG_INCLUDES=\"$PKG_INCLUDES $i\"\n    done\n    AC_SUBST(PKG_INCLUDES)\n])\n\n#------------------------------------------------------------------------\n# TEA_ADD_LIBS --\n#\n#\tSpecify one or more libraries.  Users should check for\n#\tthe right platform before adding to their list.  For Windows,\n#\tlibraries provided in \"foo.lib\" format will be converted to\n#\t\"-lfoo\" when using GCC (mingw).\n#\n# Arguments:\n#\tone or more file names\n#\n# Results:\n#\n#\tDefines and substs the following vars:\n#\t\tPKG_LIBS\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_ADD_LIBS], [\n    vars=\"$@\"\n    for i in $vars; do\n\tif test \"${TEA_PLATFORM}\" = \"windows\" -a \"$GCC\" = \"yes\" ; then\n\t    # Convert foo.lib to -lfoo for GCC.  No-op if not *.lib\n\t    i=`echo \"$i\" | sed -e 's/^\\([[^-]].*\\)\\.lib[$]/-l\\1/i'`\n\tfi\n\tPKG_LIBS=\"$PKG_LIBS $i\"\n    done\n    AC_SUBST(PKG_LIBS)\n])\n\n#------------------------------------------------------------------------\n# TEA_ADD_CFLAGS --\n#\n#\tSpecify one or more CFLAGS.  Users should check for\n#\tthe right platform before adding to their list.\n#\n# Arguments:\n#\tone or more file names\n#\n# Results:\n#\n#\tDefines and substs the following vars:\n#\t\tPKG_CFLAGS\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_ADD_CFLAGS], [\n    PKG_CFLAGS=\"$PKG_CFLAGS $@\"\n    AC_SUBST(PKG_CFLAGS)\n])\n\n#------------------------------------------------------------------------\n# TEA_PREFIX --\n#\n#\tHandle the --prefix=... option by defaulting to what Tcl gave\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tIf --prefix or --exec-prefix was not specified, $prefix and\n#\t$exec_prefix will be set to the values given to Tcl when it was\n#\tconfigured.\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_PREFIX], [\n    if test \"${prefix}\" = \"NONE\"; then\n\tprefix_default=yes\n\tif test x\"${TCL_PREFIX}\" != x; then\n\t    AC_MSG_NOTICE([--prefix defaulting to TCL_PREFIX ${TCL_PREFIX}])\n\t    prefix=${TCL_PREFIX}\n\telse\n\t    AC_MSG_NOTICE([--prefix defaulting to /usr/local])\n\t    prefix=/usr/local\n\tfi\n    fi\n    if test \"${exec_prefix}\" = \"NONE\" -a x\"${prefix_default}\" = x\"yes\" \\\n\t-o x\"${exec_prefix_default}\" = x\"yes\" ; then\n\tif test x\"${TCL_EXEC_PREFIX}\" != x; then\n\t    AC_MSG_NOTICE([--exec-prefix defaulting to TCL_EXEC_PREFIX ${TCL_EXEC_PREFIX}])\n\t    exec_prefix=${TCL_EXEC_PREFIX}\n\telse\n\t    AC_MSG_NOTICE([--exec-prefix defaulting to ${prefix}])\n\t    exec_prefix=$prefix\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# TEA_SETUP_COMPILER_CC --\n#\n#\tDo compiler checks the way we want.  This is just a replacement\n#\tfor AC_PROG_CC in TEA configure.in files to make them cleaner.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tSets up CC var and other standard bits we need to make executables.\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_SETUP_COMPILER_CC], [\n    # Don't put any macros that use the compiler (e.g. AC_TRY_COMPILE)\n    # in this macro, they need to go into TEA_SETUP_COMPILER instead.\n\n    # If the user did not set CFLAGS, set it now to keep\n    # the AC_PROG_CC macro from adding \"-g -O2\".\n    if test \"${CFLAGS+set}\" != \"set\" ; then\n\tCFLAGS=\"\"\n    fi\n\n    AC_PROG_CC\n    AC_PROG_CPP\n\n    AC_PROG_INSTALL\n\n    #--------------------------------------------------------------------\n    # Checks to see if the make program sets the $MAKE variable.\n    #--------------------------------------------------------------------\n\n    AC_PROG_MAKE_SET\n\n    #--------------------------------------------------------------------\n    # Find ranlib\n    #--------------------------------------------------------------------\n\n    AC_PROG_RANLIB\n\n    #--------------------------------------------------------------------\n    # Determines the correct binary file extension (.o, .obj, .exe etc.)\n    #--------------------------------------------------------------------\n\n    AC_OBJEXT\n    AC_EXEEXT\n])\n\n#------------------------------------------------------------------------\n# TEA_SETUP_COMPILER --\n#\n#\tDo compiler checks that use the compiler.  This must go after\n#\tTEA_SETUP_COMPILER_CC, which does the actual compiler check.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tSets up CC var and other standard bits we need to make executables.\n#------------------------------------------------------------------------\nAC_DEFUN([TEA_SETUP_COMPILER], [\n    # Any macros that use the compiler (e.g. AC_TRY_COMPILE) have to go here.\n    AC_REQUIRE([TEA_SETUP_COMPILER_CC])\n\n    #------------------------------------------------------------------------\n    # If we're using GCC, see if the compiler understands -pipe. If so, use it.\n    # It makes compiling go faster.  (This is only a performance feature.)\n    #------------------------------------------------------------------------\n\n    if test -z \"$no_pipe\" -a -n \"$GCC\"; then\n\tAC_CACHE_CHECK([if the compiler understands -pipe],\n\t    tcl_cv_cc_pipe, [\n\t    hold_cflags=$CFLAGS; CFLAGS=\"$CFLAGS -pipe\"\n\t    AC_TRY_COMPILE(,, tcl_cv_cc_pipe=yes, tcl_cv_cc_pipe=no)\n\t    CFLAGS=$hold_cflags])\n\tif test $tcl_cv_cc_pipe = yes; then\n\t    CFLAGS=\"$CFLAGS -pipe\"\n\tfi\n    fi\n\n    #--------------------------------------------------------------------\n    # Common compiler flag setup\n    #--------------------------------------------------------------------\n\n    AC_C_BIGENDIAN\n    if test \"${TEA_PLATFORM}\" = \"unix\" ; then\n\tTEA_TCL_LINK_LIBS\n\tTEA_MISSING_POSIX_HEADERS\n\t# Let the user call this, because if it triggers, they will\n\t# need a compat/strtod.c that is correct.  Users can also\n\t# use Tcl_GetDouble(FromObj) instead.\n\t#TEA_BUGGY_STRTOD\n    fi\n])\n\n#------------------------------------------------------------------------\n# TEA_MAKE_LIB --\n#\n#\tGenerate a line that can be used to build a shared/unshared library\n#\tin a platform independent manner.\n#\n# Arguments:\n#\tnone\n#\n#\tRequires:\n#\n# Results:\n#\n#\tDefines the following vars:\n#\tCFLAGS -\tDone late here to note disturb other AC macros\n#       MAKE_LIB -      Command to execute to build the Tcl library;\n#                       differs depending on whether or not Tcl is being\n#                       compiled as a shared library.\n#\tMAKE_SHARED_LIB\tMakefile rule for building a shared library\n#\tMAKE_STATIC_LIB\tMakefile rule for building a static library\n#\tMAKE_STUB_LIB\tMakefile rule for building a stub library\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_MAKE_LIB], [\n    if test \"${TEA_PLATFORM}\" = \"windows\" -a \"$GCC\" != \"yes\"; then\n\tMAKE_STATIC_LIB=\"\\${STLIB_LD} -out:\\[$]@ \\$(PKG_OBJECTS)\"\n\tMAKE_SHARED_LIB=\"\\${SHLIB_LD} \\${SHLIB_LD_LIBS} \\${LDFLAGS_DEFAULT} -out:\\[$]@ \\$(PKG_OBJECTS)\"\n\tMAKE_STUB_LIB=\"\\${STLIB_LD} -out:\\[$]@ \\$(PKG_STUB_OBJECTS)\"\n    else\n\tMAKE_STATIC_LIB=\"\\${STLIB_LD} \\[$]@ \\$(PKG_OBJECTS)\"\n\tMAKE_SHARED_LIB=\"\\${SHLIB_LD} -o \\[$]@ \\$(PKG_OBJECTS) \\${SHLIB_LD_LIBS}\"\n\tMAKE_STUB_LIB=\"\\${STLIB_LD} \\[$]@ \\$(PKG_STUB_OBJECTS)\"\n    fi\n\n    if test \"${SHARED_BUILD}\" = \"1\" ; then\n\tMAKE_LIB=\"${MAKE_SHARED_LIB} \"\n    else\n\tMAKE_LIB=\"${MAKE_STATIC_LIB} \"\n    fi\n\n    #--------------------------------------------------------------------\n    # Shared libraries and static libraries have different names.\n    # Use the double eval to make sure any variables in the suffix is\n    # substituted. (@@@ Might not be necessary anymore)\n    #--------------------------------------------------------------------\n\n    if test \"${TEA_PLATFORM}\" = \"windows\" ; then\n\tif test \"${SHARED_BUILD}\" = \"1\" ; then\n\t    # We force the unresolved linking of symbols that are really in\n\t    # the private libraries of Tcl and Tk.\n\t    SHLIB_LD_LIBS=\"${SHLIB_LD_LIBS} \\\"`${CYGPATH} ${TCL_BIN_DIR}/${TCL_STUB_LIB_FILE}`\\\"\"\n\t    if test x\"${TK_BIN_DIR}\" != x ; then\n\t\tSHLIB_LD_LIBS=\"${SHLIB_LD_LIBS} \\\"`${CYGPATH} ${TK_BIN_DIR}/${TK_STUB_LIB_FILE}`\\\"\"\n\t    fi\n\t    eval eval \"PKG_LIB_FILE=${PACKAGE_NAME}${SHARED_LIB_SUFFIX}\"\n\telse\n\t    eval eval \"PKG_LIB_FILE=${PACKAGE_NAME}${UNSHARED_LIB_SUFFIX}\"\n\tfi\n\t# Some packages build their own stubs libraries\n\teval eval \"PKG_STUB_LIB_FILE=${PACKAGE_NAME}stub${UNSHARED_LIB_SUFFIX}\"\n\tif test \"$GCC\" = \"yes\"; then\n\t    PKG_STUB_LIB_FILE=lib${PKG_STUB_LIB_FILE}\n\tfi\n\t# These aren't needed on Windows (either MSVC or gcc)\n\tRANLIB=:\n\tRANLIB_STUB=:\n    else\n\tRANLIB_STUB=\"${RANLIB}\"\n\tif test \"${SHARED_BUILD}\" = \"1\" ; then\n\t    SHLIB_LD_LIBS=\"${SHLIB_LD_LIBS} ${TCL_STUB_LIB_SPEC}\"\n\t    if test x\"${TK_BIN_DIR}\" != x ; then\n\t\tSHLIB_LD_LIBS=\"${SHLIB_LD_LIBS} ${TK_STUB_LIB_SPEC}\"\n\t    fi\n\t    eval eval \"PKG_LIB_FILE=lib${PACKAGE_NAME}${SHARED_LIB_SUFFIX}\"\n\t    RANLIB=:\n\telse\n\t    eval eval \"PKG_LIB_FILE=lib${PACKAGE_NAME}${UNSHARED_LIB_SUFFIX}\"\n\tfi\n\t# Some packages build their own stubs libraries\n\teval eval \"PKG_STUB_LIB_FILE=lib${PACKAGE_NAME}stub${UNSHARED_LIB_SUFFIX}\"\n    fi\n\n    # These are escaped so that only CFLAGS is picked up at configure time.\n    # The other values will be substituted at make time.\n    CFLAGS=\"${CFLAGS} \\${CFLAGS_DEFAULT} \\${CFLAGS_WARNING}\"\n    if test \"${SHARED_BUILD}\" = \"1\" ; then\n\tCFLAGS=\"${CFLAGS} \\${SHLIB_CFLAGS}\"\n    fi\n\n    AC_SUBST(MAKE_LIB)\n    AC_SUBST(MAKE_SHARED_LIB)\n    AC_SUBST(MAKE_STATIC_LIB)\n    AC_SUBST(MAKE_STUB_LIB)\n    AC_SUBST(RANLIB_STUB)\n])\n\n#------------------------------------------------------------------------\n# TEA_LIB_SPEC --\n#\n#\tCompute the name of an existing object library located in libdir\n#\tfrom the given base name and produce the appropriate linker flags.\n#\n# Arguments:\n#\tbasename\tThe base name of the library without version\n#\t\t\tnumbers, extensions, or \"lib\" prefixes.\n#\textra_dir\tExtra directory in which to search for the\n#\t\t\tlibrary.  This location is used first, then\n#\t\t\t$prefix/$exec-prefix, then some defaults.\n#\n# Requires:\n#\tTEA_INIT and TEA_PREFIX must be called first.\n#\n# Results:\n#\n#\tDefines the following vars:\n#\t\t${basename}_LIB_NAME\tThe computed library name.\n#\t\t${basename}_LIB_SPEC\tThe computed linker flags.\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_LIB_SPEC], [\n    AC_MSG_CHECKING([for $1 library])\n\n    # Look in exec-prefix for the library (defined by TEA_PREFIX).\n\n    tea_lib_name_dir=\"${exec_prefix}/lib\"\n\n    # Or in a user-specified location.\n\n    if test x\"$2\" != x ; then\n\ttea_extra_lib_dir=$2\n    else\n\ttea_extra_lib_dir=NONE\n    fi\n\n    for i in \\\n\t    `ls -dr ${tea_extra_lib_dir}/$1[[0-9]]*.lib 2>/dev/null ` \\\n\t    `ls -dr ${tea_extra_lib_dir}/lib$1[[0-9]]* 2>/dev/null ` \\\n\t    `ls -dr ${tea_lib_name_dir}/$1[[0-9]]*.lib 2>/dev/null ` \\\n\t    `ls -dr ${tea_lib_name_dir}/lib$1[[0-9]]* 2>/dev/null ` \\\n\t    `ls -dr /usr/lib/$1[[0-9]]*.lib 2>/dev/null ` \\\n\t    `ls -dr /usr/lib/lib$1[[0-9]]* 2>/dev/null ` \\\n\t    `ls -dr /usr/local/lib/$1[[0-9]]*.lib 2>/dev/null ` \\\n\t    `ls -dr /usr/local/lib/lib$1[[0-9]]* 2>/dev/null ` ; do\n\tif test -f \"$i\" ; then\n\t    tea_lib_name_dir=`dirname $i`\n\t    $1_LIB_NAME=`basename $i`\n\t    $1_LIB_PATH_NAME=$i\n\t    break\n\tfi\n    done\n\n    if test \"${TEA_PLATFORM}\" = \"windows\"; then\n\t$1_LIB_SPEC=\\\"`${CYGPATH} ${$1_LIB_PATH_NAME} 2>/dev/null`\\\"\n    else\n\t# Strip off the leading \"lib\" and trailing \".a\" or \".so\"\n\n\ttea_lib_name_lib=`echo ${$1_LIB_NAME}|sed -e 's/^lib//' -e 's/\\.[[^.]]*$//' -e 's/\\.so.*//'`\n\t$1_LIB_SPEC=\"-L${tea_lib_name_dir} -l${tea_lib_name_lib}\"\n    fi\n\n    if test \"x${$1_LIB_NAME}\" = x ; then\n\tAC_MSG_ERROR([not found])\n    else\n\tAC_MSG_RESULT([${$1_LIB_SPEC}])\n    fi\n])\n\n#------------------------------------------------------------------------\n# TEA_PRIVATE_TCL_HEADERS --\n#\n#\tLocate the private Tcl include files\n#\n# Arguments:\n#\n#\tRequires:\n#\t\tTCL_SRC_DIR\tAssumes that TEA_LOAD_TCLCONFIG has\n#\t\t\t\t already been called.\n#\n# Results:\n#\n#\tSubsts the following vars:\n#\t\tTCL_TOP_DIR_NATIVE\n#\t\tTCL_GENERIC_DIR_NATIVE\n#\t\tTCL_UNIX_DIR_NATIVE\n#\t\tTCL_WIN_DIR_NATIVE\n#\t\tTCL_BMAP_DIR_NATIVE\n#\t\tTCL_TOOL_DIR_NATIVE\n#\t\tTCL_PLATFORM_DIR_NATIVE\n#\t\tTCL_BIN_DIR_NATIVE\n#\t\tTCL_INCLUDES\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PRIVATE_TCL_HEADERS], [\n    AC_MSG_CHECKING([for Tcl private include files])\n\n    TCL_SRC_DIR_NATIVE=`${CYGPATH} ${TCL_SRC_DIR}`\n    TCL_TOP_DIR_NATIVE=\\\"${TCL_SRC_DIR_NATIVE}\\\"\n    TCL_GENERIC_DIR_NATIVE=\\\"${TCL_SRC_DIR_NATIVE}/generic\\\"\n    TCL_UNIX_DIR_NATIVE=\\\"${TCL_SRC_DIR_NATIVE}/unix\\\"\n    TCL_WIN_DIR_NATIVE=\\\"${TCL_SRC_DIR_NATIVE}/win\\\"\n    TCL_BMAP_DIR_NATIVE=\\\"${TCL_SRC_DIR_NATIVE}/bitmaps\\\"\n    TCL_TOOL_DIR_NATIVE=\\\"${TCL_SRC_DIR_NATIVE}/tools\\\"\n    TCL_COMPAT_DIR_NATIVE=\\\"${TCL_SRC_DIR_NATIVE}/compat\\\"\n\n    if test \"${TEA_PLATFORM}\" = \"windows\"; then\n\tTCL_PLATFORM_DIR_NATIVE=${TCL_WIN_DIR_NATIVE}\n    else\n\tTCL_PLATFORM_DIR_NATIVE=${TCL_UNIX_DIR_NATIVE}\n    fi\n    # We want to ensure these are substituted so as not to require\n    # any *_NATIVE vars be defined in the Makefile\n    TCL_INCLUDES=\"-I${TCL_GENERIC_DIR_NATIVE} -I${TCL_PLATFORM_DIR_NATIVE}\"\n    if test \"`uname -s`\" = \"Darwin\"; then\n        # If Tcl was built as a framework, attempt to use\n        # the framework's Headers and PrivateHeaders directories\n        case ${TCL_DEFS} in\n\t    *TCL_FRAMEWORK*)\n\t        if test -d \"${TCL_BIN_DIR}/Headers\" -a -d \"${TCL_BIN_DIR}/PrivateHeaders\"; then\n\t        TCL_INCLUDES=\"-I\\\"${TCL_BIN_DIR}/Headers\\\" -I\\\"${TCL_BIN_DIR}/PrivateHeaders\\\" ${TCL_INCLUDES}\"; else\n\t        TCL_INCLUDES=\"${TCL_INCLUDES} ${TCL_INCLUDE_SPEC} `echo \"${TCL_INCLUDE_SPEC}\" | sed -e 's/Headers/PrivateHeaders/'`\"; fi\n\t        ;;\n\tesac\n    else\n\tif test ! -f \"${TCL_SRC_DIR}/generic/tclInt.h\" ; then\n\t    AC_MSG_ERROR([Cannot find private header tclInt.h in ${TCL_SRC_DIR}])\n\tfi\n    fi\n\n\n    AC_SUBST(TCL_TOP_DIR_NATIVE)\n    AC_SUBST(TCL_GENERIC_DIR_NATIVE)\n    AC_SUBST(TCL_UNIX_DIR_NATIVE)\n    AC_SUBST(TCL_WIN_DIR_NATIVE)\n    AC_SUBST(TCL_BMAP_DIR_NATIVE)\n    AC_SUBST(TCL_TOOL_DIR_NATIVE)\n    AC_SUBST(TCL_PLATFORM_DIR_NATIVE)\n\n    AC_SUBST(TCL_INCLUDES)\n    AC_MSG_RESULT([Using srcdir found in tclConfig.sh: ${TCL_SRC_DIR}])\n])\n\n#------------------------------------------------------------------------\n# TEA_PUBLIC_TCL_HEADERS --\n#\n#\tLocate the installed public Tcl header files\n#\n# Arguments:\n#\tNone.\n#\n# Requires:\n#\tCYGPATH must be set\n#\n# Results:\n#\n#\tAdds a --with-tclinclude switch to configure.\n#\tResult is cached.\n#\n#\tSubsts the following vars:\n#\t\tTCL_INCLUDES\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PUBLIC_TCL_HEADERS], [\n    AC_MSG_CHECKING([for Tcl public headers])\n\n    AC_ARG_WITH(tclinclude, [  --with-tclinclude       directory containing the public Tcl header files], with_tclinclude=${withval})\n\n    AC_CACHE_VAL(ac_cv_c_tclh, [\n\t# Use the value from --with-tclinclude, if it was given\n\n\tif test x\"${with_tclinclude}\" != x ; then\n\t    if test -f \"${with_tclinclude}/tcl.h\" ; then\n\t\tac_cv_c_tclh=${with_tclinclude}\n\t    else\n\t\tAC_MSG_ERROR([${with_tclinclude} directory does not contain tcl.h])\n\t    fi\n\telse\n\t    if test \"`uname -s`\" = \"Darwin\"; then\n\t\t# If Tcl was built as a framework, attempt to use\n\t\t# the framework's Headers directory\n\t\tcase ${TCL_DEFS} in\n\t\t    *TCL_FRAMEWORK*)\n\t\t\tlist=\"`ls -d ${TCL_BIN_DIR}/Headers 2>/dev/null`\"\n\t\t\t;;\n\t\tesac\n\t    fi\n\n\t    # Look in the source dir only if Tcl is not installed,\n\t    # and in that situation, look there before installed locations.\n\t    if test -f \"${TCL_BIN_DIR}/Makefile\" ; then\n\t\tlist=\"$list `ls -d ${TCL_SRC_DIR}/generic 2>/dev/null`\"\n\t    fi\n\n\t    # Check order: pkg --prefix location, Tcl's --prefix location,\n\t    # relative to directory of tclConfig.sh.\n\n\t    eval \"temp_includedir=${includedir}\"\n\t    list=\"$list \\\n\t\t`ls -d ${temp_includedir}        2>/dev/null` \\\n\t\t`ls -d ${TCL_PREFIX}/include     2>/dev/null` \\\n\t\t`ls -d ${TCL_BIN_DIR}/../include 2>/dev/null`\"\n\t    if test \"${TEA_PLATFORM}\" != \"windows\" -o \"$GCC\" = \"yes\"; then\n\t\tlist=\"$list /usr/local/include /usr/include\"\n\t\tif test x\"${TCL_INCLUDE_SPEC}\" != x ; then\n\t\t    d=`echo \"${TCL_INCLUDE_SPEC}\" | sed -e 's/^-I//'`\n\t\t    list=\"$list `ls -d ${d} 2>/dev/null`\"\n\t\tfi\n\t    fi\n\t    for i in $list ; do\n\t\tif test -f \"$i/tcl.h\" ; then\n\t\t    ac_cv_c_tclh=$i\n\t\t    break\n\t\tfi\n\t    done\n\tfi\n    ])\n\n    # Print a message based on how we determined the include path\n\n    if test x\"${ac_cv_c_tclh}\" = x ; then\n\tAC_MSG_ERROR([tcl.h not found.  Please specify its location with --with-tclinclude])\n    else\n\tAC_MSG_RESULT([${ac_cv_c_tclh}])\n    fi\n\n    # Convert to a native path and substitute into the output files.\n\n    INCLUDE_DIR_NATIVE=`${CYGPATH} ${ac_cv_c_tclh}`\n\n    TCL_INCLUDES=-I\\\"${INCLUDE_DIR_NATIVE}\\\"\n\n    AC_SUBST(TCL_INCLUDES)\n])\n\n#------------------------------------------------------------------------\n# TEA_PRIVATE_TK_HEADERS --\n#\n#\tLocate the private Tk include files\n#\n# Arguments:\n#\n#\tRequires:\n#\t\tTK_SRC_DIR\tAssumes that TEA_LOAD_TKCONFIG has\n#\t\t\t\t already been called.\n#\n# Results:\n#\n#\tSubsts the following vars:\n#\t\tTK_INCLUDES\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PRIVATE_TK_HEADERS], [\n    AC_MSG_CHECKING([for Tk private include files])\n\n    TK_SRC_DIR_NATIVE=`${CYGPATH} ${TK_SRC_DIR}`\n    TK_TOP_DIR_NATIVE=\\\"${TK_SRC_DIR_NATIVE}\\\"\n    TK_UNIX_DIR_NATIVE=\\\"${TK_SRC_DIR_NATIVE}/unix\\\"\n    TK_WIN_DIR_NATIVE=\\\"${TK_SRC_DIR_NATIVE}/win\\\"\n    TK_GENERIC_DIR_NATIVE=\\\"${TK_SRC_DIR_NATIVE}/generic\\\"\n    TK_XLIB_DIR_NATIVE=\\\"${TK_SRC_DIR_NATIVE}/xlib\\\"\n    if test \"${TEA_PLATFORM}\" = \"windows\"; then\n\tTK_PLATFORM_DIR_NATIVE=${TK_WIN_DIR_NATIVE}\n    else\n\tTK_PLATFORM_DIR_NATIVE=${TK_UNIX_DIR_NATIVE}\n    fi\n    # We want to ensure these are substituted so as not to require\n    # any *_NATIVE vars be defined in the Makefile\n    TK_INCLUDES=\"-I${TK_GENERIC_DIR_NATIVE} -I${TK_PLATFORM_DIR_NATIVE}\"\n    if test \"${TEA_WINDOWINGSYSTEM}\" = \"win32\" \\\n\t-o \"${TEA_WINDOWINGSYSTEM}\" = \"aqua\"; then\n\tTK_INCLUDES=\"${TK_INCLUDES} -I${TK_XLIB_DIR_NATIVE}\"\n    fi\n    if test \"${TEA_WINDOWINGSYSTEM}\" = \"aqua\"; then\n\tTK_INCLUDES=\"${TK_INCLUDES} -I${TK_SRC_DIR_NATIVE}/macosx\"\n    fi\n    if test \"`uname -s`\" = \"Darwin\"; then\n        # If Tk was built as a framework, attempt to use\n        # the framework's Headers and PrivateHeaders directories\n        case ${TK_DEFS} in\n\t    *TK_FRAMEWORK*)\n\t        if test -d \"${TK_BIN_DIR}/Headers\" -a -d \"${TK_BIN_DIR}/PrivateHeaders\"; then\n\t        TK_INCLUDES=\"-I\\\"${TK_BIN_DIR}/Headers\\\" -I\\\"${TK_BIN_DIR}/PrivateHeaders\\\" ${TK_INCLUDES}\"; fi\n\t        ;;\n\tesac\n    else\n\tif test ! -f \"${TK_SRC_DIR}/generic/tkInt.h\" ; then\n\t    AC_MSG_ERROR([Cannot find private header tkInt.h in ${TK_SRC_DIR}])\n\tfi\n    fi\n\n    AC_SUBST(TK_TOP_DIR_NATIVE)\n    AC_SUBST(TK_UNIX_DIR_NATIVE)\n    AC_SUBST(TK_WIN_DIR_NATIVE)\n    AC_SUBST(TK_GENERIC_DIR_NATIVE)\n    AC_SUBST(TK_XLIB_DIR_NATIVE)\n    AC_SUBST(TK_PLATFORM_DIR_NATIVE)\n\n    AC_SUBST(TK_INCLUDES)\n    AC_MSG_RESULT([Using srcdir found in tkConfig.sh: ${TK_SRC_DIR}])\n])\n\n#------------------------------------------------------------------------\n# TEA_PUBLIC_TK_HEADERS --\n#\n#\tLocate the installed public Tk header files\n#\n# Arguments:\n#\tNone.\n#\n# Requires:\n#\tCYGPATH must be set\n#\n# Results:\n#\n#\tAdds a --with-tkinclude switch to configure.\n#\tResult is cached.\n#\n#\tSubsts the following vars:\n#\t\tTK_INCLUDES\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PUBLIC_TK_HEADERS], [\n    AC_MSG_CHECKING([for Tk public headers])\n\n    AC_ARG_WITH(tkinclude, [  --with-tkinclude      directory containing the public Tk header files.], with_tkinclude=${withval})\n\n    AC_CACHE_VAL(ac_cv_c_tkh, [\n\t# Use the value from --with-tkinclude, if it was given\n\n\tif test x\"${with_tkinclude}\" != x ; then\n\t    if test -f \"${with_tkinclude}/tk.h\" ; then\n\t\tac_cv_c_tkh=${with_tkinclude}\n\t    else\n\t\tAC_MSG_ERROR([${with_tkinclude} directory does not contain tk.h])\n\t    fi\n\telse\n\t    if test \"`uname -s`\" = \"Darwin\"; then\n\t\t# If Tk was built as a framework, attempt to use\n\t\t# the framework's Headers directory.\n\t\tcase ${TK_DEFS} in\n\t\t    *TK_FRAMEWORK*)\n\t\t\tlist=\"`ls -d ${TK_BIN_DIR}/Headers 2>/dev/null`\"\n\t\t\t;;\n\t\tesac\n\t    fi\n\n\t    # Look in the source dir only if Tk is not installed,\n\t    # and in that situation, look there before installed locations.\n\t    if test -f \"${TK_BIN_DIR}/Makefile\" ; then\n\t\tlist=\"$list `ls -d ${TK_SRC_DIR}/generic 2>/dev/null`\"\n\t    fi\n\n\t    # Check order: pkg --prefix location, Tk's --prefix location,\n\t    # relative to directory of tkConfig.sh, Tcl's --prefix location, \n\t    # relative to directory of tclConfig.sh.\n\n\t    eval \"temp_includedir=${includedir}\"\n\t    list=\"$list \\\n\t\t`ls -d ${temp_includedir}        2>/dev/null` \\\n\t\t`ls -d ${TK_PREFIX}/include      2>/dev/null` \\\n\t\t`ls -d ${TK_BIN_DIR}/../include  2>/dev/null` \\\n\t\t`ls -d ${TCL_PREFIX}/include     2>/dev/null` \\\n\t\t`ls -d ${TCL_BIN_DIR}/../include 2>/dev/null`\"\n\t    if test \"${TEA_PLATFORM}\" != \"windows\" -o \"$GCC\" = \"yes\"; then\n\t\tlist=\"$list /usr/local/include /usr/include\"\n\t    fi\n\t    for i in $list ; do\n\t\tif test -f \"$i/tk.h\" ; then\n\t\t    ac_cv_c_tkh=$i\n\t\t    break\n\t\tfi\n\t    done\n\tfi\n    ])\n\n    # Print a message based on how we determined the include path\n\n    if test x\"${ac_cv_c_tkh}\" = x ; then\n\tAC_MSG_ERROR([tk.h not found.  Please specify its location with --with-tkinclude])\n    else\n\tAC_MSG_RESULT([${ac_cv_c_tkh}])\n    fi\n\n    # Convert to a native path and substitute into the output files.\n\n    INCLUDE_DIR_NATIVE=`${CYGPATH} ${ac_cv_c_tkh}`\n\n    TK_INCLUDES=-I\\\"${INCLUDE_DIR_NATIVE}\\\"\n\n    AC_SUBST(TK_INCLUDES)\n\n    if test \"${TEA_WINDOWINGSYSTEM}\" = \"win32\" \\\n\t-o \"${TEA_WINDOWINGSYSTEM}\" = \"aqua\"; then\n\t# On Windows and Aqua, we need the X compat headers\n\tAC_MSG_CHECKING([for X11 header files])\n\tif test ! -r \"${INCLUDE_DIR_NATIVE}/X11/Xlib.h\"; then\n\t    INCLUDE_DIR_NATIVE=\"`${CYGPATH} ${TK_SRC_DIR}/xlib`\"\n\t    TK_XINCLUDES=-I\\\"${INCLUDE_DIR_NATIVE}\\\"\n\t    AC_SUBST(TK_XINCLUDES)\n\tfi\n\tAC_MSG_RESULT([${INCLUDE_DIR_NATIVE}])\n    fi\n])\n\n#------------------------------------------------------------------------\n# TEA_PROG_TCLSH\n#\tDetermine the fully qualified path name of the tclsh executable\n#\tin the Tcl build directory or the tclsh installed in a bin\n#\tdirectory. This macro will correctly determine the name\n#\tof the tclsh executable even if tclsh has not yet been\n#\tbuilt in the build directory. The tclsh found is always\n#\tassociated with a tclConfig.sh file. This tclsh should be used\n#\tonly for running extension test cases. It should never be\n#\tor generation of files (like pkgIndex.tcl) at build time.\n#\n# Arguments\n#\tnone\n#\n# Results\n#\tSubst's the following values:\n#\t\tTCLSH_PROG\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PROG_TCLSH], [\n    AC_MSG_CHECKING([for tclsh])\n    if test -f \"${TCL_BIN_DIR}/Makefile\" ; then\n        # tclConfig.sh is in Tcl build directory\n        if test \"${TEA_PLATFORM}\" = \"windows\"; then\n            TCLSH_PROG=\"${TCL_BIN_DIR}/tclsh${TCL_MAJOR_VERSION}${TCL_MINOR_VERSION}${TCL_DBGX}${EXEEXT}\"\n        else\n            TCLSH_PROG=\"${TCL_BIN_DIR}/tclsh\"\n        fi\n    else\n        # tclConfig.sh is in install location\n        if test \"${TEA_PLATFORM}\" = \"windows\"; then\n            TCLSH_PROG=\"tclsh${TCL_MAJOR_VERSION}${TCL_MINOR_VERSION}${TCL_DBGX}${EXEEXT}\"\n        else\n            TCLSH_PROG=\"tclsh${TCL_MAJOR_VERSION}.${TCL_MINOR_VERSION}${TCL_DBGX}\"\n        fi\n        list=\"`ls -d ${TCL_BIN_DIR}/../bin 2>/dev/null` \\\n              `ls -d ${TCL_BIN_DIR}/..     2>/dev/null` \\\n              `ls -d ${TCL_PREFIX}/bin     2>/dev/null`\"\n        for i in $list ; do\n            if test -f \"$i/${TCLSH_PROG}\" ; then\n                REAL_TCL_BIN_DIR=\"`cd \"$i\"; pwd`\"\n                break\n            fi\n        done\n        TCLSH_PROG=\"${REAL_TCL_BIN_DIR}/${TCLSH_PROG}\"\n    fi\n    AC_MSG_RESULT([${TCLSH_PROG}])\n    AC_SUBST(TCLSH_PROG)\n])\n\n#------------------------------------------------------------------------\n# TEA_PROG_WISH\n#\tDetermine the fully qualified path name of the wish executable\n#\tin the Tk build directory or the wish installed in a bin\n#\tdirectory. This macro will correctly determine the name\n#\tof the wish executable even if wish has not yet been\n#\tbuilt in the build directory. The wish found is always\n#\tassociated with a tkConfig.sh file. This wish should be used\n#\tonly for running extension test cases. It should never be\n#\tor generation of files (like pkgIndex.tcl) at build time.\n#\n# Arguments\n#\tnone\n#\n# Results\n#\tSubst's the following values:\n#\t\tWISH_PROG\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PROG_WISH], [\n    AC_MSG_CHECKING([for wish])\n    if test -f \"${TK_BIN_DIR}/Makefile\" ; then\n        # tkConfig.sh is in Tk build directory\n        if test \"${TEA_PLATFORM}\" = \"windows\"; then\n            WISH_PROG=\"${TK_BIN_DIR}/wish${TK_MAJOR_VERSION}${TK_MINOR_VERSION}${TK_DBGX}${EXEEXT}\"\n        else\n            WISH_PROG=\"${TK_BIN_DIR}/wish\"\n        fi\n    else\n        # tkConfig.sh is in install location\n        if test \"${TEA_PLATFORM}\" = \"windows\"; then\n            WISH_PROG=\"wish${TK_MAJOR_VERSION}${TK_MINOR_VERSION}${TK_DBGX}${EXEEXT}\"\n        else\n            WISH_PROG=\"wish${TK_MAJOR_VERSION}.${TK_MINOR_VERSION}${TK_DBGX}\"\n        fi\n        list=\"`ls -d ${TK_BIN_DIR}/../bin 2>/dev/null` \\\n              `ls -d ${TK_BIN_DIR}/..     2>/dev/null` \\\n              `ls -d ${TK_PREFIX}/bin     2>/dev/null`\"\n        for i in $list ; do\n            if test -f \"$i/${WISH_PROG}\" ; then\n                REAL_TK_BIN_DIR=\"`cd \"$i\"; pwd`\"\n                break\n            fi\n        done\n        WISH_PROG=\"${REAL_TK_BIN_DIR}/${WISH_PROG}\"\n    fi\n    AC_MSG_RESULT([${WISH_PROG}])\n    AC_SUBST(WISH_PROG)\n])\n\n#------------------------------------------------------------------------\n# TEA_PATH_CONFIG --\n#\n#\tLocate the ${1}Config.sh file and perform a sanity check on\n#\tthe ${1} compile flags.  These are used by packages like\n#\t[incr Tk] that load *Config.sh files from more than Tcl and Tk.\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--with-$1=...\n#\n#\tDefines the following vars:\n#\t\t$1_BIN_DIR\tFull path to the directory containing\n#\t\t\t\tthe $1Config.sh file\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PATH_CONFIG], [\n    #\n    # Ok, lets find the $1 configuration\n    # First, look for one uninstalled.\n    # the alternative search directory is invoked by --with-$1\n    #\n\n    if test x\"${no_$1}\" = x ; then\n\t# we reset no_$1 in case something fails here\n\tno_$1=true\n\tAC_ARG_WITH($1, [  --with-$1              directory containing $1 configuration ($1Config.sh)], with_$1config=${withval})\n\tAC_MSG_CHECKING([for $1 configuration])\n\tAC_CACHE_VAL(ac_cv_c_$1config,[\n\n\t    # First check to see if --with-$1 was specified.\n\t    if test x\"${with_$1config}\" != x ; then\n\t\tcase ${with_$1config} in\n\t\t    */$1Config.sh )\n\t\t\tif test -f ${with_$1config}; then\n\t\t\t    AC_MSG_WARN([--with-$1 argument should refer to directory containing $1Config.sh, not to $1Config.sh itself])\n\t\t\t    with_$1config=`echo ${with_$1config} | sed 's!/$1Config\\.sh$!!'`\n\t\t\tfi;;\n\t\tesac\n\t\tif test -f \"${with_$1config}/$1Config.sh\" ; then\n\t\t    ac_cv_c_$1config=`(cd ${with_$1config}; pwd)`\n\t\telse\n\t\t    AC_MSG_ERROR([${with_$1config} directory doesn't contain $1Config.sh])\n\t\tfi\n\t    fi\n\n\t    # then check for a private $1 installation\n\t    if test x\"${ac_cv_c_$1config}\" = x ; then\n\t\tfor i in \\\n\t\t\t../$1 \\\n\t\t\t`ls -dr ../$1*[[0-9]].[[0-9]]*.[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../$1*[[0-9]].[[0-9]][[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../$1*[[0-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../$1*[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../$1 \\\n\t\t\t`ls -dr ../../$1*[[0-9]].[[0-9]]*.[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../$1*[[0-9]].[[0-9]][[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../$1*[[0-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../$1*[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t../../../$1 \\\n\t\t\t`ls -dr ../../../$1*[[0-9]].[[0-9]]*.[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ../../../$1*[[0-9]].[[0-9]][[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../../$1*[[0-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ../../../$1*[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t${srcdir}/../$1 \\\n\t\t\t`ls -dr ${srcdir}/../$1*[[0-9]].[[0-9]]*.[[0-9]]* 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../$1*[[0-9]].[[0-9]][[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../$1*[[0-9]].[[0-9]] 2>/dev/null` \\\n\t\t\t`ls -dr ${srcdir}/../$1*[[0-9]].[[0-9]]* 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/$1Config.sh\" ; then\n\t\t\tac_cv_c_$1config=`(cd $i; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\t    if test -f \"$i/unix/$1Config.sh\" ; then\n\t\t\tac_cv_c_$1config=`(cd $i/unix; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\n\t    # check in a few common install locations\n\t    if test x\"${ac_cv_c_$1config}\" = x ; then\n\t\tfor i in `ls -d ${libdir} 2>/dev/null` \\\n\t\t\t`ls -d ${exec_prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d ${prefix}/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/local/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/contrib/lib 2>/dev/null` \\\n\t\t\t`ls -d /usr/lib 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -f \"$i/$1Config.sh\" ; then\n\t\t\tac_cv_c_$1config=`(cd $i; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\t])\n\n\tif test x\"${ac_cv_c_$1config}\" = x ; then\n\t    $1_BIN_DIR=\"# no $1 configs found\"\n\t    AC_MSG_WARN([Cannot find $1 configuration definitions])\n\t    exit 0\n\telse\n\t    no_$1=\n\t    $1_BIN_DIR=${ac_cv_c_$1config}\n\t    AC_MSG_RESULT([found $$1_BIN_DIR/$1Config.sh])\n\tfi\n    fi\n])\n\n#------------------------------------------------------------------------\n# TEA_LOAD_CONFIG --\n#\n#\tLoad the $1Config.sh file\n#\n# Arguments:\n#\t\n#\tRequires the following vars to be set:\n#\t\t$1_BIN_DIR\n#\n# Results:\n#\n#\tSubst the following vars:\n#\t\t$1_SRC_DIR\n#\t\t$1_LIB_FILE\n#\t\t$1_LIB_SPEC\n#\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_LOAD_CONFIG], [\n    AC_MSG_CHECKING([for existence of ${$1_BIN_DIR}/$1Config.sh])\n\n    if test -f \"${$1_BIN_DIR}/$1Config.sh\" ; then\n        AC_MSG_RESULT([loading])\n\t. ${$1_BIN_DIR}/$1Config.sh\n    else\n        AC_MSG_RESULT([file not found])\n    fi\n\n    #\n    # If the $1_BIN_DIR is the build directory (not the install directory),\n    # then set the common variable name to the value of the build variables.\n    # For example, the variable $1_LIB_SPEC will be set to the value\n    # of $1_BUILD_LIB_SPEC. An extension should make use of $1_LIB_SPEC\n    # instead of $1_BUILD_LIB_SPEC since it will work with both an\n    # installed and uninstalled version of Tcl.\n    #\n\n    if test -f ${$1_BIN_DIR}/Makefile ; then\n\tAC_MSG_WARN([Found Makefile - using build library specs for $1])\n        $1_LIB_SPEC=${$1_BUILD_LIB_SPEC}\n        $1_STUB_LIB_SPEC=${$1_BUILD_STUB_LIB_SPEC}\n        $1_STUB_LIB_PATH=${$1_BUILD_STUB_LIB_PATH}\n    fi\n\n    AC_SUBST($1_VERSION)\n    AC_SUBST($1_BIN_DIR)\n    AC_SUBST($1_SRC_DIR)\n\n    AC_SUBST($1_LIB_FILE)\n    AC_SUBST($1_LIB_SPEC)\n\n    AC_SUBST($1_STUB_LIB_FILE)\n    AC_SUBST($1_STUB_LIB_SPEC)\n    AC_SUBST($1_STUB_LIB_PATH)\n])\n\n#------------------------------------------------------------------------\n# TEA_PATH_CELIB --\n#\n#\tLocate Keuchel's celib emulation layer for targeting Win/CE\n#\n# Arguments:\n#\tnone\n#\n# Results:\n#\n#\tAdds the following arguments to configure:\n#\t\t--with-celib=...\n#\n#\tDefines the following vars:\n#\t\tCELIB_DIR\tFull path to the directory containing\n#\t\t\t\tthe include and platform lib files\n#------------------------------------------------------------------------\n\nAC_DEFUN([TEA_PATH_CELIB], [\n    # First, look for one uninstalled.\n    # the alternative search directory is invoked by --with-celib\n\n    if test x\"${no_celib}\" = x ; then\n\t# we reset no_celib in case something fails here\n\tno_celib=true\n\tAC_ARG_WITH(celib,[  --with-celib=DIR        use Windows/CE support library from DIR], with_celibconfig=${withval})\n\tAC_MSG_CHECKING([for Windows/CE celib directory])\n\tAC_CACHE_VAL(ac_cv_c_celibconfig,[\n\t    # First check to see if --with-celibconfig was specified.\n\t    if test x\"${with_celibconfig}\" != x ; then\n\t\tif test -d \"${with_celibconfig}/inc\" ; then\n\t\t    ac_cv_c_celibconfig=`(cd ${with_celibconfig}; pwd)`\n\t\telse\n\t\t    AC_MSG_ERROR([${with_celibconfig} directory doesn't contain inc directory])\n\t\tfi\n\t    fi\n\n\t    # then check for a celib library\n\t    if test x\"${ac_cv_c_celibconfig}\" = x ; then\n\t\tfor i in \\\n\t\t\t../celib-palm-3.0 \\\n\t\t\t../celib \\\n\t\t\t../../celib-palm-3.0 \\\n\t\t\t../../celib \\\n\t\t\t`ls -dr ../celib-*3.[[0-9]]* 2>/dev/null` \\\n\t\t\t${srcdir}/../celib-palm-3.0 \\\n\t\t\t${srcdir}/../celib \\\n\t\t\t`ls -dr ${srcdir}/../celib-*3.[[0-9]]* 2>/dev/null` \\\n\t\t\t; do\n\t\t    if test -d \"$i/inc\" ; then\n\t\t\tac_cv_c_celibconfig=`(cd $i; pwd)`\n\t\t\tbreak\n\t\t    fi\n\t\tdone\n\t    fi\n\t])\n\tif test x\"${ac_cv_c_celibconfig}\" = x ; then\n\t    AC_MSG_ERROR([Cannot find celib support library directory])\n\telse\n\t    no_celib=\n\t    CELIB_DIR=${ac_cv_c_celibconfig}\n\t    CELIB_DIR=`echo \"$CELIB_DIR\" | sed -e 's!\\\\\\!/!g'`\n\t    AC_MSG_RESULT([found $CELIB_DIR])\n\tfi\n    fi\n])\n\n\n# Local Variables:\n# mode: autoconf\n# End:\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/PyTix-2.0/demos/bitmaps/tix.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/act_fold.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/no_entry.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/textfile.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/folder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/minusarm.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/file.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/plusarm.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/warning.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/minus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/plus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/openfold.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/srcfile.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/library/bitmaps/info.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/demos/bitmaps/tix.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/Python/Demo/tix/bitmaps/tix.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/tools/winsetup.iss",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/pdf/TixBook.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/pdf/TixUser.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/pdf/pguide-tix4.0.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/setup0.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/demo1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/setup6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/setup2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/docview_w.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/setup5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/tk42b.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/setup3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/tk42a.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/img/setup1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tix32.png",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/hierarchy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/hierarchy.png",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/ARROWS.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/arrows.png",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tix32.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/ctl_wopt.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/lawyer.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/law_comp.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/ctl_noopt.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/select.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/hierarchy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/select-vert.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/combo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/ctl_subw.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/intro/select1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/container/pane_horz.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/container/notebook.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/container/pane_add.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/container/sl-bar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/container/sl-nobar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/container/pane_vert.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/oop/arrows.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/filesel/dirtree.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/filesel/dirlist.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/filesel/exfile.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/filesel/fb_comp.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tlist/twofont.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tlist/vertical.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tlist/horizontal.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tlist/tlist.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tlist/joe.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tlist/twofont2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tlist/relation.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/tlist/widgets.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/hlist/dirtree.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/hlist/hlist1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/hlist/hlist_ex2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/hlist/hlist_ex3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/html/gif/tix/hlist/hlist_ex1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/cover.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/intro/ctl_wopt.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/intro/lawyer.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/intro/law_comp.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/intro/ctl_noopt.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/intro/select.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/intro/hierarchy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/intro/select-vert.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/intro/ctl_subw.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/intro/select1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/container/pane_horz.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/container/notebook.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/container/pane_add.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/container/sl-bar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/container/sl-nobar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/container/pane_vert.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/oop/arrows.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/filesel/dirtree.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/filesel/dirlist.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/filesel/exfile.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/filesel/fb_comp.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/tlist/twofont.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/tlist/vertical.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/tlist/horizontal.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/tlist/tlist.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/tlist/joe.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/tlist/twofont2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/tlist/relation.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/tlist/widgets.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/hlist/dirtree.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/hlist/hlist1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/hlist/hlist_ex2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/hlist/hlist_ex3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-tix-8.4.3-qatqeiggelfooo3gogsiknnhvhc4krb3/spack-src/docs/tix-book/fig/hlist/hlist_ex1.gif"
    ],
    "total_files": 745
}